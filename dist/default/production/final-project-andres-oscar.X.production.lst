

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 15:45:14 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=3
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=3
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=3
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    90                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    91   000000                     
    92                           ; Generated 21/07/2023 GMT
    93                           ; 
    94                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution. Publication is not required when
   108                           ;        this file is used in an embedded application.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC18F67K40 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126   000000                     
   127                           	psect	idataBANK0
   128   004430                     __pidataBANK0:
   129                           	callstack 0
   130                           
   131                           ;initializer for _dataFlag
   132   004430  01                 	db	1
   133   000000                     _TMR0H	set	4052
   134   000000                     _TX4REG	set	3812
   135   000000                     _RC4STAbits	set	3815
   136   000000                     _SP4BRGH	set	3814
   137   000000                     _LATFbits	set	3966
   138   000000                     _LATHbits	set	3968
   139   000000                     _TRISFbits	set	3974
   140   000000                     _TRISAbits	set	3969
   141   000000                     _TRISEbits	set	3973
   142   000000                     _TRISGbits	set	3975
   143   000000                     _TRISDbits	set	3972
   144   000000                     _PORTFbits	set	3982
   145   000000                     _SSP2CON2bits	set	3802
   146   000000                     _RX4PPS	set	3605
   147   000000                     _SSP2CLKPPS	set	3612
   148   000000                     _SSP2DATPPS	set	3613
   149   000000                     _ANSELDbits	set	3751
   150   000000                     _SSP2ADD	set	3798
   151   000000                     _SSP2CON1bits	set	3801
   152   000000                     _LATAbits	set	3961
   153   000000                     _LATEbits	set	3965
   154   000000                     _LATGbits	set	3967
   155   000000                     _LATCbits	set	3963
   156   000000                     _LATDbits	set	3964
   157   000000                     _CCPR2H	set	4006
   158   000000                     _CCPR1H	set	4010
   159   000000                     _RC4REG	set	3811
   160   000000                     _SP4BRGL	set	3813
   161   000000                     _TX4STAbits	set	3816
   162   000000                     _BAUD4CONbits	set	3817
   163   000000                     _SSP2CON2	set	3802
   164   000000                     _CCPR4H	set	3873
   165   000000                     _CCPR3H	set	3877
   166   000000                     _SSP2STAT	set	3800
   167   000000                     _ANSELFbits	set	3764
   168   000000                     _SSP2BUF	set	3797
   169   000000                     _IPR0bits	set	3615
   170   000000                     _PIE0bits	set	3625
   171   000000                     _PIE4bits	set	3629
   172   000000                     _PIR4bits	set	3639
   173   000000                     _RC0PPS	set	3682
   174   000000                     _RC7PPS	set	3689
   175   000000                     _RD5PPS	set	3695
   176   000000                     _RE2PPS	set	3700
   177   000000                     _RD6PPS	set	3696
   178   000000                     _CCP1CONbits	set	4011
   179   000000                     _CCPTMRS0bits	set	4013
   180   000000                     _T2PR	set	4028
   181   000000                     _T2CONbits	set	4029
   182   000000                     _T0CON0bits	set	4053
   183   000000                     _CCP2CONbits	set	4007
   184   000000                     _CCP3CONbits	set	3878
   185   000000                     _ADREFbits	set	3928
   186   000000                     _CCP4CONbits	set	3874
   187   000000                     _TRISHbits	set	3976
   188   000000                     _TRISCbits	set	3971
   189   000000                     _INTCONbits	set	4082
   190   000000                     _T0CON1bits	set	4054
   191   000000                     _ADPCH	set	3935
   192   000000                     _ADRESH	set	3940
   193   000000                     _ADCON0bits	set	3936
   194   000000                     _RE4PPS	set	3702
   195   000000                     _RG6PPS	set	3720
   196   000000                     _TMR0L	set	4051
   197   000000                     _T2CLKCONbits	set	4031
   198   000000                     _T2HLTbits	set	4030
   199   000000                     _PIR0bits	set	3635
   200                           
   201                           	psect	smallconst
   202   000E00                     __psmallconst:
   203                           	callstack 0
   204   000E00  00                 	db	0
   205   000E01                     STR_7:
   206                           
   207                           ; BSR set to: 15
   208   000E01  43                 	db	67	;'C'
   209   000E02  61                 	db	97	;'a'
   210   000E03  6C                 	db	108	;'l'
   211   000E04  69                 	db	105	;'i'
   212   000E05  62                 	db	98	;'b'
   213   000E06  72                 	db	114	;'r'
   214   000E07  61                 	db	97	;'a'
   215   000E08  74                 	db	116	;'t'
   216   000E09  69                 	db	105	;'i'
   217   000E0A  6F                 	db	111	;'o'
   218   000E0B  6E                 	db	110	;'n'
   219   000E0C  20                 	db	32
   220   000E0D  73                 	db	115	;'s'
   221   000E0E  74                 	db	116	;'t'
   222   000E0F  61                 	db	97	;'a'
   223   000E10  74                 	db	116	;'t'
   224   000E11  65                 	db	101	;'e'
   225   000E12  20                 	db	32
   226   000E13  3D                 	db	61	;'='
   227   000E14  20                 	db	32
   228   000E15  20                 	db	32
   229   000E16  77                 	db	119	;'w'
   230   000E17  68                 	db	104	;'h'
   231   000E18  69                 	db	105	;'i'
   232   000E19  74                 	db	116	;'t'
   233   000E1A  65                 	db	101	;'e'
   234   000E1B  20                 	db	32
   235   000E1C  6C                 	db	108	;'l'
   236   000E1D  69                 	db	105	;'i'
   237   000E1E  67                 	db	103	;'g'
   238   000E1F  68                 	db	104	;'h'
   239   000E20  74                 	db	116	;'t'
   240   000E21  00                 	db	0
   241   000E22                     STR_3:
   242                           
   243                           ; BSR set to: 15
   244   000E22  43                 	db	67	;'C'
   245   000E23  61                 	db	97	;'a'
   246   000E24  6C                 	db	108	;'l'
   247   000E25  69                 	db	105	;'i'
   248   000E26  62                 	db	98	;'b'
   249   000E27  72                 	db	114	;'r'
   250   000E28  61                 	db	97	;'a'
   251   000E29  74                 	db	116	;'t'
   252   000E2A  69                 	db	105	;'i'
   253   000E2B  6F                 	db	111	;'o'
   254   000E2C  6E                 	db	110	;'n'
   255   000E2D  20                 	db	32
   256   000E2E  73                 	db	115	;'s'
   257   000E2F  74                 	db	116	;'t'
   258   000E30  61                 	db	97	;'a'
   259   000E31  74                 	db	116	;'t'
   260   000E32  65                 	db	101	;'e'
   261   000E33  20                 	db	32
   262   000E34  3D                 	db	61	;'='
   263   000E35  20                 	db	32
   264   000E36  67                 	db	103	;'g'
   265   000E37  72                 	db	114	;'r'
   266   000E38  65                 	db	101	;'e'
   267   000E39  65                 	db	101	;'e'
   268   000E3A  6E                 	db	110	;'n'
   269   000E3B  20                 	db	32
   270   000E3C  0A                 	db	10
   271   000E3D  0D                 	db	13
   272   000E3E  00                 	db	0
   273   000E3F                     STR_5:
   274                           
   275                           ; BSR set to: 15
   276   000E3F  43                 	db	67	;'C'
   277   000E40  61                 	db	97	;'a'
   278   000E41  6C                 	db	108	;'l'
   279   000E42  69                 	db	105	;'i'
   280   000E43  62                 	db	98	;'b'
   281   000E44  72                 	db	114	;'r'
   282   000E45  61                 	db	97	;'a'
   283   000E46  74                 	db	116	;'t'
   284   000E47  69                 	db	105	;'i'
   285   000E48  6F                 	db	111	;'o'
   286   000E49  6E                 	db	110	;'n'
   287   000E4A  20                 	db	32
   288   000E4B  73                 	db	115	;'s'
   289   000E4C  74                 	db	116	;'t'
   290   000E4D  61                 	db	97	;'a'
   291   000E4E  74                 	db	116	;'t'
   292   000E4F  65                 	db	101	;'e'
   293   000E50  3D                 	db	61	;'='
   294   000E51  20                 	db	32
   295   000E52  62                 	db	98	;'b'
   296   000E53  6C                 	db	108	;'l'
   297   000E54  75                 	db	117	;'u'
   298   000E55  65                 	db	101	;'e'
   299   000E56  20                 	db	32
   300   000E57  0A                 	db	10
   301   000E58  0D                 	db	13
   302   000E59  00                 	db	0
   303   000E5A                     STR_9:
   304                           
   305                           ; BSR set to: 15
   306   000E5A  43                 	db	67	;'C'
   307   000E5B  41                 	db	65	;'A'
   308   000E5C  4C                 	db	76	;'L'
   309   000E5D  49                 	db	73	;'I'
   310   000E5E  42                 	db	66	;'B'
   311   000E5F  52                 	db	82	;'R'
   312   000E60  41                 	db	65	;'A'
   313   000E61  54                 	db	84	;'T'
   314   000E62  49                 	db	73	;'I'
   315   000E63  4F                 	db	79	;'O'
   316   000E64  4E                 	db	78	;'N'
   317   000E65  20                 	db	32
   318   000E66  43                 	db	67	;'C'
   319   000E67  4F                 	db	79	;'O'
   320   000E68  4D                 	db	77	;'M'
   321   000E69  50                 	db	80	;'P'
   322   000E6A  4C                 	db	76	;'L'
   323   000E6B  45                 	db	69	;'E'
   324   000E6C  54                 	db	84	;'T'
   325   000E6D  45                 	db	69	;'E'
   326   000E6E  44                 	db	68	;'D'
   327   000E6F  20                 	db	32
   328   000E70  0A                 	db	10
   329   000E71  0D                 	db	13
   330   000E72  00                 	db	0
   331   000E73                     STR_1:
   332                           
   333                           ; BSR set to: 15
   334   000E73  43                 	db	67	;'C'
   335   000E74  61                 	db	97	;'a'
   336   000E75  6C                 	db	108	;'l'
   337   000E76  69                 	db	105	;'i'
   338   000E77  62                 	db	98	;'b'
   339   000E78  72                 	db	114	;'r'
   340   000E79  61                 	db	97	;'a'
   341   000E7A  74                 	db	116	;'t'
   342   000E7B  69                 	db	105	;'i'
   343   000E7C  6F                 	db	111	;'o'
   344   000E7D  6E                 	db	110	;'n'
   345   000E7E  20                 	db	32
   346   000E7F  73                 	db	115	;'s'
   347   000E80  74                 	db	116	;'t'
   348   000E81  61                 	db	97	;'a'
   349   000E82  74                 	db	116	;'t'
   350   000E83  65                 	db	101	;'e'
   351   000E84  20                 	db	32
   352   000E85  3D                 	db	61	;'='
   353   000E86  20                 	db	32
   354   000E87  72                 	db	114	;'r'
   355   000E88  65                 	db	101	;'e'
   356   000E89  64                 	db	100	;'d'
   357   000E8A  00                 	db	0
   358   000E8B                     
   359                           ; BSR set to: 15
   360   000E8B  56                 	db	86	;'V'
   361   000E8C  6F                 	db	111	;'o'
   362   000E8D  6C                 	db	108	;'l'
   363   000E8E  74                 	db	116	;'t'
   364   000E8F  61                 	db	97	;'a'
   365   000E90  67                 	db	103	;'g'
   366   000E91  65                 	db	101	;'e'
   367   000E92  20                 	db	32
   368   000E93  3D                 	db	61	;'='
   369   000E94  20                 	db	32
   370   000E95  25                 	db	37
   371   000E96  64                 	db	100	;'d'
   372   000E97  2E                 	db	46
   373   000E98  25                 	db	37
   374   000E99  30                 	db	48	;'0'
   375   000E9A  32                 	db	50	;'2'
   376   000E9B  64                 	db	100	;'d'
   377   000E9C  2C                 	db	44
   378   000E9D  20                 	db	32
   379   000E9E  20                 	db	32
   380   000E9F  00                 	db	0
   381   000EA0                     STR_12:
   382                           
   383                           ; BSR set to: 15
   384   000EA0  68                 	db	104	;'h'
   385   000EA1  75                 	db	117	;'u'
   386   000EA2  65                 	db	101	;'e'
   387   000EA3  3D                 	db	61	;'='
   388   000EA4  25                 	db	37
   389   000EA5  30                 	db	48	;'0'
   390   000EA6  33                 	db	51	;'3'
   391   000EA7  64                 	db	100	;'d'
   392   000EA8  2C                 	db	44
   393   000EA9  20                 	db	32
   394   000EAA  20                 	db	32
   395   000EAB  00                 	db	0
   396   000EAC                     STR_2:
   397                           
   398                           ; BSR set to: 15
   399   000EAC  2E                 	db	46
   400   000EAD  00                 	db	0
   401   000EAE  00                 	db	0	; dummy byte at the end
   402   000000                     
   403                           ; #config settings
   404                           
   405                           	psect	cinit
   406   003EE4                     __pcinit:
   407                           	callstack 0
   408   003EE4                     start_initialization:
   409                           	callstack 0
   410   003EE4                     __initialization:
   411                           	callstack 0
   412                           
   413                           ; Initialize objects allocated to BANK0 (1 bytes)
   414                           ; load TBLPTR registers with __pidataBANK0
   415   003EE4  0E30               	movlw	low __pidataBANK0
   416   003EE6  6EF6               	movwf	tblptrl,c
   417   003EE8  0E44               	movlw	high __pidataBANK0
   418   003EEA  6EF7               	movwf	tblptrh,c
   419   003EEC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   420   003EEE  6EF8               	movwf	tblptru,c
   421   003EF0  0009               	tblrd		*+	;fetch initializer
   422   003EF2  CFF5 F0F1          	movff	tablat,__pdataBANK0
   423                           
   424                           ; Clear objects allocated to BANK2 (150 bytes)
   425   003EF6  EE02  F000         	lfsr	0,__pbssBANK2
   426   003EFA  0E96               	movlw	150
   427   003EFC                     clear_0:
   428   003EFC  6AEE               	clrf	postinc0,c
   429   003EFE  06E8               	decf	wreg,f,c
   430   003F00  E1FD               	bnz	clear_0
   431                           
   432                           ; Clear objects allocated to BANK1 (112 bytes)
   433   003F02  EE01  F000         	lfsr	0,__pbssBANK1
   434   003F06  0E70               	movlw	112
   435   003F08                     clear_1:
   436   003F08  6AEE               	clrf	postinc0,c
   437   003F0A  06E8               	decf	wreg,f,c
   438   003F0C  E1FD               	bnz	clear_1
   439                           
   440                           ; Clear objects allocated to BANK0 (67 bytes)
   441   003F0E  EE00  F0AE         	lfsr	0,__pbssBANK0
   442   003F12  0E43               	movlw	67
   443   003F14                     clear_2:
   444   003F14  6AEE               	clrf	postinc0,c
   445   003F16  06E8               	decf	wreg,f,c
   446   003F18  E1FD               	bnz	clear_2
   447                           
   448                           ; Clear objects allocated to COMRAM (5 bytes)
   449   003F1A  6A5F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   450   003F1C  6A5E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   451   003F1E  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   452   003F20  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   453   003F22  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   454   003F24                     end_of_initialization:
   455                           	callstack 0
   456   003F24                     __end_of__initialization:
   457                           	callstack 0
   458   003F24  0100               	movlb	0
   459   003F26  EF63  F011         	goto	_main	;jump to C main() function
   460                           
   461                           	psect	bssCOMRAM
   462   00005B                     __pbssCOMRAM:
   463                           	callstack 0
   464   00005B                     _flags:
   465                           	callstack 0
   466   00005B                     	ds	1
   467   00005C                     _TxBufReadCnt:
   468                           	callstack 0
   469   00005C                     	ds	1
   470   00005D                     _TxBufWriteCnt:
   471                           	callstack 0
   472   00005D                     	ds	1
   473   00005E                     _RxBufReadCnt:
   474                           	callstack 0
   475   00005E                     	ds	1
   476   00005F                     _RxBufWriteCnt:
   477                           	callstack 0
   478   00005F                     	ds	1
   479                           
   480                           	psect	bssBANK0
   481   0000AE                     __pbssBANK0:
   482                           	callstack 0
   483   0000AE                     _EUSART4RXbuf:
   484                           	callstack 0
   485   0000AE                     	ds	20
   486   0000C2                     _hue:
   487                           	callstack 0
   488   0000C2                     	ds	8
   489   0000CA                     _width:
   490                           	callstack 0
   491   0000CA                     	ds	2
   492   0000CC                     _prec:
   493                           	callstack 0
   494   0000CC                     	ds	2
   495   0000CE                     _readingIndex:
   496                           	callstack 0
   497   0000CE                     	ds	1
   498   0000CF                     _motorR:
   499                           	callstack 0
   500   0000CF                     	ds	9
   501   0000D8                     _motorL:
   502                           	callstack 0
   503   0000D8                     	ds	9
   504   0000E1                     _colorCurrent:
   505                           	callstack 0
   506   0000E1                     	ds	8
   507   0000E9                     _colorCalibration:
   508                           	callstack 0
   509   0000E9                     	ds	8
   510                           
   511                           	psect	dataBANK0
   512   0000F1                     __pdataBANK0:
   513                           	callstack 0
   514   0000F1                     _dataFlag:
   515                           	callstack 0
   516   0000F1                     	ds	1
   517                           
   518                           	psect	bssBANK1
   519   000100                     __pbssBANK1:
   520                           	callstack 0
   521   000100                     _EUSART4TXbuf:
   522                           	callstack 0
   523   000100                     	ds	60
   524   00013C                     _ldrReadings:
   525                           	callstack 0
   526   00013C                     	ds	20
   527   000150                     _dbuf:
   528                           	callstack 0
   529   000150                     	ds	32
   530                           
   531                           	psect	bssBANK2
   532   000200                     __pbssBANK2:
   533                           	callstack 0
   534   000200                     _path:
   535                           	callstack 0
   536   000200                     	ds	150
   537                           
   538                           	psect	cstackBANK1
   539   000170                     __pcstackBANK1:
   540                           	callstack 0
   541   000170                     main@current:
   542                           	callstack 0
   543                           
   544                           ; 4 bytes @ 0x0
   545   000170                     	ds	4
   546   000174                     main@maximum:
   547                           	callstack 0
   548                           
   549                           ; 4 bytes @ 0x4
   550   000174                     	ds	4
   551   000178                     main@hue:
   552                           	callstack 0
   553                           
   554                           ; 2 bytes @ 0x8
   555   000178                     	ds	2
   556   00017A                     main@time:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0xA
   560   00017A                     	ds	2
   561   00017C                     main@clear_norm:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0xC
   565   00017C                     	ds	2
   566   00017E                     main@path_length:
   567                           	callstack 0
   568                           
   569                           ; 2 bytes @ 0xE
   570   00017E                     	ds	2
   571                           
   572                           	psect	cstackBANK0
   573   000060                     __pcstackBANK0:
   574                           	callstack 0
   575   000060                     convert_rgb2hue@redcurrent:
   576                           	callstack 0
   577   000060                     send2USART@hue_char:
   578                           	callstack 0
   579                           
   580                           ; 50 bytes @ 0x0
   581   000060                     	ds	4
   582   000064                     convert_rgb2hue@redmax:
   583                           	callstack 0
   584                           
   585                           ; 4 bytes @ 0x4
   586   000064                     	ds	4
   587   000068                     convert_rgb2hue@greencurrent:
   588                           	callstack 0
   589                           
   590                           ; 4 bytes @ 0x8
   591   000068                     	ds	4
   592   00006C                     convert_rgb2hue@greenmax:
   593                           	callstack 0
   594                           
   595                           ; 4 bytes @ 0xC
   596   00006C                     	ds	4
   597   000070                     convert_rgb2hue@bluecurrent:
   598                           	callstack 0
   599                           
   600                           ; 4 bytes @ 0x10
   601   000070                     	ds	4
   602   000074                     convert_rgb2hue@bluemax:
   603                           	callstack 0
   604                           
   605                           ; 4 bytes @ 0x14
   606   000074                     	ds	4
   607   000078                     convert_rgb2hue@clearcurrent:
   608                           	callstack 0
   609                           
   610                           ; 4 bytes @ 0x18
   611   000078                     	ds	4
   612   00007C                     convert_rgb2hue@clearmax:
   613                           	callstack 0
   614                           
   615                           ; 4 bytes @ 0x1C
   616   00007C                     	ds	4
   617   000080                     _convert_rgb2hue$428:
   618                           	callstack 0
   619                           
   620                           ; 4 bytes @ 0x20
   621   000080                     	ds	4
   622   000084                     _convert_rgb2hue$429:
   623                           	callstack 0
   624                           
   625                           ; 4 bytes @ 0x24
   626   000084                     	ds	4
   627   000088                     _convert_rgb2hue$430:
   628                           	callstack 0
   629                           
   630                           ; 4 bytes @ 0x28
   631   000088                     	ds	4
   632   00008C                     _convert_rgb2hue$431:
   633                           	callstack 0
   634                           
   635                           ; 4 bytes @ 0x2C
   636   00008C                     	ds	4
   637   000090                     convert_rgb2hue@min:
   638                           	callstack 0
   639                           
   640                           ; 4 bytes @ 0x30
   641   000090                     	ds	4
   642   000094                     convert_rgb2hue@diff:
   643                           	callstack 0
   644                           
   645                           ; 4 bytes @ 0x34
   646   000094                     	ds	4
   647   000098                     convert_rgb2hue@max:
   648                           	callstack 0
   649                           
   650                           ; 4 bytes @ 0x38
   651   000098                     	ds	4
   652   00009C                     convert_rgb2hue@hue:
   653                           	callstack 0
   654                           
   655                           ; 4 bytes @ 0x3C
   656   00009C                     	ds	4
   657   0000A0                     convert_rgb2hue@r:
   658                           	callstack 0
   659                           
   660                           ; 4 bytes @ 0x40
   661   0000A0                     	ds	4
   662   0000A4                     convert_rgb2hue@g:
   663                           	callstack 0
   664                           
   665                           ; 4 bytes @ 0x44
   666   0000A4                     	ds	4
   667   0000A8                     convert_rgb2hue@b:
   668                           	callstack 0
   669                           
   670                           ; 4 bytes @ 0x48
   671   0000A8                     	ds	4
   672   0000AC                     ??_main:
   673                           
   674                           ; 1 bytes @ 0x4C
   675   0000AC                     	ds	2
   676                           
   677                           	psect	cstackCOMRAM
   678   000001                     __pcstackCOMRAM:
   679                           	callstack 0
   680   000001                     ??_I2C_2_Master_Idle:
   681   000001                     ?_get16bitTMR0val:
   682                           	callstack 0
   683   000001                     ?___wmul:
   684                           	callstack 0
   685   000001                     ?___awdiv:
   686                           	callstack 0
   687   000001                     ?___awmod:
   688                           	callstack 0
   689   000001                     ?___fladd:
   690                           	callstack 0
   691   000001                     ?___flmul:
   692                           	callstack 0
   693   000001                     ?___xxtofl:
   694                           	callstack 0
   695   000001                     sendCharSerial4@charToSend:
   696                           	callstack 0
   697   000001                     initDCmotorsPWM@PWMperiod:
   698                           	callstack 0
   699   000001                     customDelayMs@milliseconds:
   700                           	callstack 0
   701   000001                     ___wmul@multiplier:
   702                           	callstack 0
   703   000001                     ___awdiv@dividend:
   704                           	callstack 0
   705   000001                     ___awmod@dividend:
   706                           	callstack 0
   707   000001                     fputc@c:
   708                           	callstack 0
   709   000001                     ___fleq@ff1:
   710                           	callstack 0
   711   000001                     ___flge@ff1:
   712                           	callstack 0
   713   000001                     ___fladd@b:
   714                           	callstack 0
   715   000001                     ___flmul@b:
   716                           	callstack 0
   717   000001                     ___xxtofl@val:
   718                           	callstack 0
   719                           
   720                           ; 4 bytes @ 0x0
   721   000001                     	ds	1
   722   000002                     ??_I2C_2_Master_Read:
   723   000002                     I2C_2_Master_Write@data_byte:
   724                           	callstack 0
   725   000002                     sendStringSerial4@string:
   726                           	callstack 0
   727                           
   728                           ; 1 bytes @ 0x1
   729   000002                     	ds	1
   730   000003                     ??_get16bitTMR0val:
   731   000003                     ??_customDelayMs:
   732   000003                     color_writetoaddr@value:
   733                           	callstack 0
   734   000003                     I2C_2_Master_Read@ack:
   735                           	callstack 0
   736   000003                     fputc@fp:
   737                           	callstack 0
   738   000003                     ___wmul@multiplicand:
   739                           	callstack 0
   740   000003                     ___awdiv@divisor:
   741                           	callstack 0
   742   000003                     ___awmod@divisor:
   743                           	callstack 0
   744                           
   745                           ; 2 bytes @ 0x2
   746   000003                     	ds	1
   747   000004                     ??_fputc:
   748   000004                     color_writetoaddr@address:
   749                           	callstack 0
   750   000004                     I2C_2_Master_Read@tmp:
   751                           	callstack 0
   752   000004                     customDelayMs@i:
   753                           	callstack 0
   754                           
   755                           ; 2 bytes @ 0x3
   756   000004                     	ds	1
   757   000005                     ??_color_click_init:
   758   000005                     ??___xxtofl:
   759   000005                     ?_color_read_Red:
   760                           	callstack 0
   761   000005                     ?_color_read_Green:
   762                           	callstack 0
   763   000005                     ?_color_read_Blue:
   764                           	callstack 0
   765   000005                     ?_color_read_Clear:
   766                           	callstack 0
   767   000005                     ___awdiv@counter:
   768                           	callstack 0
   769   000005                     ___awmod@counter:
   770                           	callstack 0
   771   000005                     ___wmul@product:
   772                           	callstack 0
   773   000005                     ___fleq@ff2:
   774                           	callstack 0
   775   000005                     ___flge@ff2:
   776                           	callstack 0
   777   000005                     ___fladd@a:
   778                           	callstack 0
   779   000005                     ___flmul@a:
   780                           	callstack 0
   781                           
   782                           ; 4 bytes @ 0x4
   783   000005                     	ds	1
   784   000006                     ___awdiv@sign:
   785                           	callstack 0
   786   000006                     ___awmod@sign:
   787                           	callstack 0
   788                           
   789                           ; 1 bytes @ 0x5
   790   000006                     	ds	1
   791   000007                     ??_color_read_Red:
   792   000007                     ??_color_read_Green:
   793   000007                     ??_color_read_Blue:
   794   000007                     ??_color_read_Clear:
   795   000007                     ?_abs:
   796                           	callstack 0
   797   000007                     ?___lwdiv:
   798                           	callstack 0
   799   000007                     ?_read_prec_or_width:
   800                           	callstack 0
   801   000007                     read_prec_or_width@fmt:
   802                           	callstack 0
   803   000007                     logAction@time:
   804                           	callstack 0
   805   000007                     get16bitTMR0val@combined_value:
   806                           	callstack 0
   807   000007                     ___awdiv@quotient:
   808                           	callstack 0
   809   000007                     ___lwdiv@dividend:
   810                           	callstack 0
   811   000007                     abs@a:
   812                           	callstack 0
   813                           
   814                           ; 2 bytes @ 0x6
   815   000007                     	ds	1
   816   000008                     read_prec_or_width@ap:
   817                           	callstack 0
   818                           
   819                           ; 1 bytes @ 0x7
   820   000008                     	ds	1
   821   000009                     ??___fladd:
   822   000009                     ??___flmul:
   823   000009                     ??_abs:
   824   000009                     ??___fleq:
   825   000009                     ??___flge:
   826   000009                     ___xxtofl@sign:
   827                           	callstack 0
   828   000009                     read_prec_or_width@c:
   829                           	callstack 0
   830   000009                     logAction@pathLength:
   831                           	callstack 0
   832   000009                     ___lwdiv@divisor:
   833                           	callstack 0
   834   000009                     fputs@s:
   835                           	callstack 0
   836                           
   837                           ; 2 bytes @ 0x8
   838   000009                     	ds	1
   839   00000A                     ___xxtofl@exp:
   840                           	callstack 0
   841   00000A                     color_read_Red@tmp:
   842                           	callstack 0
   843   00000A                     color_read_Green@tmp:
   844                           	callstack 0
   845   00000A                     color_read_Blue@tmp:
   846                           	callstack 0
   847   00000A                     color_read_Clear@tmp:
   848                           	callstack 0
   849   00000A                     read_prec_or_width@n:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x9
   853   00000A                     	ds	1
   854   00000B                     logAction@action:
   855                           	callstack 0
   856   00000B                     ___lwdiv@counter:
   857                           	callstack 0
   858   00000B                     fputs@fp:
   859                           	callstack 0
   860   00000B                     ___xxtofl@arg:
   861                           	callstack 0
   862                           
   863                           ; 4 bytes @ 0xA
   864   00000B                     	ds	1
   865   00000C                     fputs@c:
   866                           	callstack 0
   867   00000C                     ___lwdiv@quotient:
   868                           	callstack 0
   869                           
   870                           ; 2 bytes @ 0xB
   871   00000C                     	ds	1
   872   00000D                     ___fladd@signs:
   873                           	callstack 0
   874   00000D                     ___flmul@sign:
   875                           	callstack 0
   876   00000D                     fputs@i:
   877                           	callstack 0
   878                           
   879                           ; 2 bytes @ 0xC
   880   00000D                     	ds	1
   881   00000E                     setMotorPWM@m:
   882                           	callstack 0
   883   00000E                     ___fladd@aexp:
   884                           	callstack 0
   885   00000E                     ___flmul@aexp:
   886                           	callstack 0
   887                           
   888                           ; 1 bytes @ 0xD
   889   00000E                     	ds	1
   890   00000F                     ??_setMotorPWM:
   891   00000F                     ___fladd@bexp:
   892                           	callstack 0
   893   00000F                     pad@fp:
   894                           	callstack 0
   895   00000F                     ___flmul@grs:
   896                           	callstack 0
   897                           
   898                           ; 4 bytes @ 0xE
   899   00000F                     	ds	1
   900   000010                     ___fladd@grs:
   901                           	callstack 0
   902   000010                     pad@buf:
   903                           	callstack 0
   904                           
   905                           ; 2 bytes @ 0xF
   906   000010                     	ds	1
   907   000011                     ?___flsub:
   908                           	callstack 0
   909   000011                     setMotorPWM@posDuty:
   910                           	callstack 0
   911   000011                     ___flsub@b:
   912                           	callstack 0
   913                           
   914                           ; 4 bytes @ 0x10
   915   000011                     	ds	1
   916   000012                     setMotorPWM@negDuty:
   917                           	callstack 0
   918   000012                     pad@p:
   919                           	callstack 0
   920                           
   921                           ; 2 bytes @ 0x11
   922   000012                     	ds	1
   923   000013                     stop@mL:
   924                           	callstack 0
   925   000013                     turnLeft@mL:
   926                           	callstack 0
   927   000013                     turnRight@mL:
   928                           	callstack 0
   929   000013                     fullSpeedAhead@mL:
   930                           	callstack 0
   931   000013                     fullSpeedBack@mL:
   932                           	callstack 0
   933   000013                     ___flmul@bexp:
   934                           	callstack 0
   935                           
   936                           ; 1 bytes @ 0x12
   937   000013                     	ds	1
   938   000014                     ??_pad:
   939   000014                     stop@mR:
   940                           	callstack 0
   941   000014                     turnLeft@mR:
   942                           	callstack 0
   943   000014                     turnRight@mR:
   944                           	callstack 0
   945   000014                     fullSpeedAhead@mR:
   946                           	callstack 0
   947   000014                     fullSpeedBack@mR:
   948                           	callstack 0
   949   000014                     ___flmul@prod:
   950                           	callstack 0
   951                           
   952                           ; 4 bytes @ 0x13
   953   000014                     	ds	1
   954   000015                     ??_fullSpeedAhead:
   955   000015                     ??_stop:
   956   000015                     ??_turnLeft:
   957   000015                     ??_turnRight:
   958   000015                     ??_fullSpeedBack:
   959   000015                     pad@i:
   960                           	callstack 0
   961   000015                     ___flsub@a:
   962                           	callstack 0
   963                           
   964                           ; 4 bytes @ 0x14
   965   000015                     	ds	1
   966   000016                     turnLeft@i:
   967                           	callstack 0
   968   000016                     turnRight@i:
   969                           	callstack 0
   970   000016                     fullSpeedAhead@power:
   971                           	callstack 0
   972   000016                     fullSpeedBack@power:
   973                           	callstack 0
   974                           
   975                           ; 2 bytes @ 0x15
   976   000016                     	ds	1
   977   000017                     dtoa@fp:
   978                           	callstack 0
   979                           
   980                           ; 1 bytes @ 0x16
   981   000017                     	ds	1
   982   000018                     right90@mL:
   983                           	callstack 0
   984   000018                     left90@mL:
   985                           	callstack 0
   986   000018                     turn180@mL:
   987                           	callstack 0
   988   000018                     right135@mL:
   989                           	callstack 0
   990   000018                     left135@mL:
   991                           	callstack 0
   992   000018                     backHalf@mL:
   993                           	callstack 0
   994   000018                     backOneAndHalf@mL:
   995                           	callstack 0
   996   000018                     reverseStraight@mL:
   997                           	callstack 0
   998   000018                     ___flmul@temp:
   999                           	callstack 0
  1000   000018                     dtoa@d:
  1001                           	callstack 0
  1002                           
  1003                           ; 2 bytes @ 0x17
  1004   000018                     	ds	1
  1005   000019                     right90@mR:
  1006                           	callstack 0
  1007   000019                     left90@mR:
  1008                           	callstack 0
  1009   000019                     turn180@mR:
  1010                           	callstack 0
  1011   000019                     right135@mR:
  1012                           	callstack 0
  1013   000019                     left135@mR:
  1014                           	callstack 0
  1015   000019                     backHalf@mR:
  1016                           	callstack 0
  1017   000019                     backOneAndHalf@mR:
  1018                           	callstack 0
  1019   000019                     reverseStraight@mR:
  1020                           	callstack 0
  1021                           
  1022                           ; 1 bytes @ 0x18
  1023   000019                     	ds	1
  1024   00001A                     ??_right90:
  1025   00001A                     ??_left90:
  1026   00001A                     ??_turn180:
  1027   00001A                     ??_right135:
  1028   00001A                     ??_left135:
  1029   00001A                     ??_backHalf:
  1030   00001A                     ??_backOneAndHalf:
  1031   00001A                     ?___fldiv:
  1032                           	callstack 0
  1033   00001A                     reverseStraight@time:
  1034                           	callstack 0
  1035   00001A                     _dtoa$2968:
  1036                           	callstack 0
  1037   00001A                     ___fldiv@b:
  1038                           	callstack 0
  1039                           
  1040                           ; 4 bytes @ 0x19
  1041   00001A                     	ds	2
  1042   00001C                     moveRed@mL:
  1043                           	callstack 0
  1044   00001C                     moveGreen@mL:
  1045                           	callstack 0
  1046   00001C                     moveBlue@mL:
  1047                           	callstack 0
  1048   00001C                     moveYellow@mL:
  1049                           	callstack 0
  1050   00001C                     movePink@mL:
  1051                           	callstack 0
  1052   00001C                     moveOrange@mL:
  1053                           	callstack 0
  1054   00001C                     moveLightBlue@mL:
  1055                           	callstack 0
  1056   00001C                     reverseTurn@mL:
  1057                           	callstack 0
  1058   00001C                     dtoa@p:
  1059                           	callstack 0
  1060   00001C                     reverseStraight@delayMs:
  1061                           	callstack 0
  1062                           
  1063                           ; 2 bytes @ 0x1B
  1064   00001C                     	ds	1
  1065   00001D                     moveRed@mR:
  1066                           	callstack 0
  1067   00001D                     moveGreen@mR:
  1068                           	callstack 0
  1069   00001D                     moveBlue@mR:
  1070                           	callstack 0
  1071   00001D                     moveYellow@mR:
  1072                           	callstack 0
  1073   00001D                     movePink@mR:
  1074                           	callstack 0
  1075   00001D                     moveOrange@mR:
  1076                           	callstack 0
  1077   00001D                     moveLightBlue@mR:
  1078                           	callstack 0
  1079   00001D                     reverseTurn@mR:
  1080                           	callstack 0
  1081   00001D                     dtoa@w:
  1082                           	callstack 0
  1083                           
  1084                           ; 2 bytes @ 0x1C
  1085   00001D                     	ds	1
  1086   00001E                     reverseTurn@turnDirection:
  1087                           	callstack 0
  1088   00001E                     moveRed@path_length:
  1089                           	callstack 0
  1090   00001E                     moveGreen@path_length:
  1091                           	callstack 0
  1092   00001E                     moveBlue@path_length:
  1093                           	callstack 0
  1094   00001E                     moveYellow@path_length:
  1095                           	callstack 0
  1096   00001E                     movePink@path_length:
  1097                           	callstack 0
  1098   00001E                     moveOrange@path_length:
  1099                           	callstack 0
  1100   00001E                     moveLightBlue@path_length:
  1101                           	callstack 0
  1102   00001E                     ___fldiv@a:
  1103                           	callstack 0
  1104                           
  1105                           ; 4 bytes @ 0x1D
  1106   00001E                     	ds	1
  1107   00001F                     returnHome@mL:
  1108                           	callstack 0
  1109   00001F                     dtoa@s:
  1110                           	callstack 0
  1111                           
  1112                           ; 1 bytes @ 0x1E
  1113   00001F                     	ds	1
  1114   000020                     ??_moveRed:
  1115   000020                     ??_moveGreen:
  1116   000020                     ??_moveBlue:
  1117   000020                     ??_moveLightBlue:
  1118   000020                     ??_moveYellow:
  1119   000020                     ??_moveOrange:
  1120   000020                     ??_movePink:
  1121   000020                     returnHome@mR:
  1122                           	callstack 0
  1123   000020                     dtoa@i:
  1124                           	callstack 0
  1125                           
  1126                           ; 2 bytes @ 0x1F
  1127   000020                     	ds	1
  1128   000021                     returnHome@path:
  1129                           	callstack 0
  1130                           
  1131                           ; 2 bytes @ 0x20
  1132   000021                     	ds	1
  1133   000022                     ??___fldiv:
  1134   000022                     vfpfcnvrt@fp:
  1135                           	callstack 0
  1136                           
  1137                           ; 1 bytes @ 0x21
  1138   000022                     	ds	1
  1139   000023                     vfpfcnvrt@fmt:
  1140                           	callstack 0
  1141   000023                     returnHome@pathLength:
  1142                           	callstack 0
  1143                           
  1144                           ; 2 bytes @ 0x22
  1145   000023                     	ds	1
  1146   000024                     vfpfcnvrt@ap:
  1147                           	callstack 0
  1148                           
  1149                           ; 1 bytes @ 0x23
  1150   000024                     	ds	1
  1151   000025                     ??_returnHome:
  1152   000025                     ??_vfpfcnvrt:
  1153                           
  1154                           ; 1 bytes @ 0x24
  1155   000025                     	ds	1
  1156   000026                     ___fldiv@rem:
  1157                           	callstack 0
  1158                           
  1159                           ; 4 bytes @ 0x25
  1160   000026                     	ds	1
  1161   000027                     returnHome@time:
  1162                           	callstack 0
  1163   000027                     vfpfcnvrt@convarg:
  1164                           	callstack 0
  1165                           
  1166                           ; 4 bytes @ 0x26
  1167   000027                     	ds	2
  1168   000029                     returnHome@action:
  1169                           	callstack 0
  1170                           
  1171                           ; 1 bytes @ 0x28
  1172   000029                     	ds	1
  1173   00002A                     ___fldiv@sign:
  1174                           	callstack 0
  1175   00002A                     returnHome@i:
  1176                           	callstack 0
  1177                           
  1178                           ; 2 bytes @ 0x29
  1179   00002A                     	ds	1
  1180   00002B                     vfpfcnvrt@done:
  1181                           	callstack 0
  1182   00002B                     ___fldiv@new_exp:
  1183                           	callstack 0
  1184                           
  1185                           ; 2 bytes @ 0x2A
  1186   00002B                     	ds	1
  1187   00002C                     vfpfcnvrt@cp:
  1188                           	callstack 0
  1189                           
  1190                           ; 1 bytes @ 0x2B
  1191   00002C                     	ds	1
  1192   00002D                     ?_vfprintf:
  1193                           	callstack 0
  1194   00002D                     vfprintf@fp:
  1195                           	callstack 0
  1196   00002D                     ___fldiv@grs:
  1197                           	callstack 0
  1198                           
  1199                           ; 4 bytes @ 0x2C
  1200   00002D                     	ds	1
  1201   00002E                     vfprintf@fmt:
  1202                           	callstack 0
  1203                           
  1204                           ; 1 bytes @ 0x2D
  1205   00002E                     	ds	1
  1206   00002F                     vfprintf@ap:
  1207                           	callstack 0
  1208                           
  1209                           ; 1 bytes @ 0x2E
  1210   00002F                     	ds	1
  1211   000030                     vfprintf@cfmt:
  1212                           	callstack 0
  1213                           
  1214                           ; 1 bytes @ 0x2F
  1215   000030                     	ds	1
  1216   000031                     ?_sprintf:
  1217                           	callstack 0
  1218   000031                     ___fldiv@bexp:
  1219                           	callstack 0
  1220   000031                     sprintf@s:
  1221                           	callstack 0
  1222                           
  1223                           ; 1 bytes @ 0x30
  1224   000031                     	ds	1
  1225   000032                     ___fldiv@aexp:
  1226                           	callstack 0
  1227   000032                     sprintf@fmt:
  1228                           	callstack 0
  1229                           
  1230                           ; 1 bytes @ 0x31
  1231   000032                     	ds	1
  1232   000033                     ?___fltol:
  1233                           	callstack 0
  1234   000033                     ___fltol@f1:
  1235                           	callstack 0
  1236                           
  1237                           ; 4 bytes @ 0x32
  1238   000033                     	ds	4
  1239   000037                     ??___fltol:
  1240   000037                     sprintf@ap:
  1241                           	callstack 0
  1242                           
  1243                           ; 1 bytes @ 0x36
  1244   000037                     	ds	1
  1245   000038                     sprintf@f:
  1246                           	callstack 0
  1247                           
  1248                           ; 12 bytes @ 0x37
  1249   000038                     	ds	3
  1250   00003B                     ___fltol@sign1:
  1251                           	callstack 0
  1252                           
  1253                           ; 1 bytes @ 0x3A
  1254   00003B                     	ds	1
  1255   00003C                     ___fltol@exp1:
  1256                           	callstack 0
  1257                           
  1258                           ; 1 bytes @ 0x3B
  1259   00003C                     	ds	1
  1260   00003D                     ?_convert_rgb2hue:
  1261                           	callstack 0
  1262   00003D                     convert_rgb2hue@cMax:
  1263                           	callstack 0
  1264                           
  1265                           ; 1 bytes @ 0x3C
  1266   00003D                     	ds	1
  1267   00003E                     convert_rgb2hue@cCurr:
  1268                           	callstack 0
  1269                           
  1270                           ; 1 bytes @ 0x3D
  1271   00003E                     	ds	1
  1272   00003F                     ??_convert_rgb2hue:
  1273                           
  1274                           ; 1 bytes @ 0x3E
  1275   00003F                     	ds	2
  1276   000041                     ?_reading_hue:
  1277                           	callstack 0
  1278   000041                     reading_hue@cCurr:
  1279                           	callstack 0
  1280                           
  1281                           ; 1 bytes @ 0x40
  1282   000041                     	ds	2
  1283   000043                     ??_reading_hue:
  1284                           
  1285                           ; 1 bytes @ 0x42
  1286   000043                     	ds	1
  1287   000044                     calibration_routine@cCal:
  1288                           	callstack 0
  1289   000044                     send2USART@hue:
  1290                           	callstack 0
  1291                           
  1292                           ; 2 bytes @ 0x43
  1293   000044                     	ds	1
  1294   000045                     ??_calibration_routine:
  1295   000045                     reading_hue@hue:
  1296                           	callstack 0
  1297                           
  1298                           ; 2 bytes @ 0x44
  1299   000045                     	ds	1
  1300   000046                     decision@hue:
  1301                           	callstack 0
  1302                           
  1303                           ; 2 bytes @ 0x45
  1304   000046                     	ds	1
  1305   000047                     calibration_routine@cal_state:
  1306                           	callstack 0
  1307                           
  1308                           ; 20 bytes @ 0x46
  1309   000047                     	ds	1
  1310   000048                     decision@path_length:
  1311                           	callstack 0
  1312                           
  1313                           ; 2 bytes @ 0x47
  1314   000048                     	ds	2
  1315   00004A                     decision@color:
  1316                           	callstack 0
  1317                           
  1318                           ; 2 bytes @ 0x49
  1319   00004A                     	ds	17
  1320                           
  1321 ;;
  1322 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1323 ;;
  1324 ;; *************** function _main *****************
  1325 ;; Defined at:
  1326 ;;		line 29 in file "main.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;		None
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  white           2    0        unsigned int 
  1331 ;;  time            2   10[BANK1 ] int 
  1332 ;;  maximum         4    4[BANK1 ] float 
  1333 ;;  current         4    0[BANK1 ] float 
  1334 ;;  clear_norm      2   12[BANK1 ] unsigned int 
  1335 ;;  hue_char       20    0        unsigned char [20]
  1336 ;;  path_length     2   14[BANK1 ] unsigned int 
  1337 ;;  PWMcycle        2    0        unsigned int 
  1338 ;;  hue             2    8[BANK1 ] unsigned int 
  1339 ;;  clear           2    0        unsigned int 
  1340 ;;  green           2    0        unsigned int 
  1341 ;;  blue            2    0        unsigned int 
  1342 ;;  red             2    0        unsigned int 
  1343 ;;  battery_leve    2    0        unsigned int 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1356 ;;      Totals:         0       2      16       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1357 ;;Total ram usage:       18 bytes
  1358 ;; Hardware stack levels required when called: 10
  1359 ;; This function calls:
  1360 ;;		_ADC_init
  1361 ;;		___fldiv
  1362 ;;		___flmul
  1363 ;;		___fltol
  1364 ;;		___xxtofl
  1365 ;;		_calibration_routine
  1366 ;;		_color_click_init
  1367 ;;		_color_read_Clear
  1368 ;;		_decision
  1369 ;;		_fullSpeedAhead
  1370 ;;		_get16bitTMR0val
  1371 ;;		_initDCmotorsPWM
  1372 ;;		_initUSART4
  1373 ;;		_logAction
  1374 ;;		_reading_hue
  1375 ;;		_returnHome
  1376 ;;		_send2USART
  1377 ;;		_stop
  1378 ;; This function is called by:
  1379 ;;		Startup code after reset
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text0
  1384   0022C6                     __ptext0:
  1385                           	callstack 0
  1386   0022C6                     _main:
  1387                           	callstack 21
  1388   0022C6                     
  1389                           ;main.c: 31:     ADC_init();
  1390   0022C6  ECE9  F021         	call	_ADC_init	;wreg free
  1391   0022CA                     
  1392                           ;main.c: 32:     color_click_init();
  1393   0022CA  EC59  F020         	call	_color_click_init	;wreg free
  1394   0022CE                     
  1395                           ;main.c: 33:     initUSART4();
  1396   0022CE  ECCB  F021         	call	_initUSART4	;wreg free
  1397   0022D2                     
  1398                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
  1399   0022D2  0E00               	movlw	0
  1400   0022D4  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1401   0022D6  0E63               	movlw	99
  1402   0022D8  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1403   0022DA  ECE2  F01B         	call	_initDCmotorsPWM	;wreg free
  1404   0022DE                     
  1405                           ;main.c: 40:     motorL.power = 0;
  1406   0022DE  0E00               	movlw	0
  1407   0022E0  0100               	movlb	0	; () banked
  1408   0022E2  6FD8               	movwf	_motorL& (0+255),b
  1409   0022E4                     
  1410                           ; BSR set to: 0
  1411                           ;main.c: 41:     motorL.direction = 1;
  1412   0022E4  0E01               	movlw	1
  1413   0022E6  6FD9               	movwf	(_motorL+1)& (0+255),b
  1414   0022E8                     
  1415                           ; BSR set to: 0
  1416                           ;main.c: 42:     motorL.brakemode = 1;
  1417   0022E8  0E01               	movlw	1
  1418   0022EA  6FDA               	movwf	(_motorL+2)& (0+255),b
  1419   0022EC                     
  1420                           ; BSR set to: 0
  1421                           ;main.c: 43:     motorL.PWMperiod = PWMcycle;
  1422   0022EC  0E00               	movlw	0
  1423   0022EE  6FDC               	movwf	(_motorL+4)& (0+255),b
  1424   0022F0  0E63               	movlw	99
  1425   0022F2  6FDB               	movwf	(_motorL+3)& (0+255),b
  1426   0022F4                     
  1427                           ; BSR set to: 0
  1428                           ;main.c: 44:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1429   0022F4  0EAA               	movlw	170
  1430   0022F6  6FDD               	movwf	(_motorL+5)& (0+255),b
  1431   0022F8  0E0F               	movlw	15
  1432   0022FA  6FDE               	movwf	(_motorL+6)& (0+255),b
  1433   0022FC                     
  1434                           ; BSR set to: 0
  1435                           ;main.c: 45:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1436   0022FC  0EA6               	movlw	166
  1437   0022FE  6FDF               	movwf	(_motorL+7)& (0+255),b
  1438   002300  0E0F               	movlw	15
  1439   002302  6FE0               	movwf	(_motorL+8)& (0+255),b
  1440   002304                     
  1441                           ; BSR set to: 0
  1442                           ;main.c: 47:     motorR.power = 0;
  1443   002304  0E00               	movlw	0
  1444   002306  6FCF               	movwf	_motorR& (0+255),b
  1445   002308                     
  1446                           ; BSR set to: 0
  1447                           ;main.c: 48:     motorR.direction = 1;
  1448   002308  0E01               	movlw	1
  1449   00230A  6FD0               	movwf	(_motorR+1)& (0+255),b
  1450   00230C                     
  1451                           ; BSR set to: 0
  1452                           ;main.c: 49:     motorR.brakemode = 1;
  1453   00230C  0E01               	movlw	1
  1454   00230E  6FD1               	movwf	(_motorR+2)& (0+255),b
  1455   002310                     
  1456                           ; BSR set to: 0
  1457                           ;main.c: 50:     motorR.PWMperiod = PWMcycle;
  1458   002310  0E00               	movlw	0
  1459   002312  6FD3               	movwf	(_motorR+4)& (0+255),b
  1460   002314  0E63               	movlw	99
  1461   002316  6FD2               	movwf	(_motorR+3)& (0+255),b
  1462                           
  1463                           ;main.c: 51:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1464   002318  0E25               	movlw	37
  1465   00231A  6FD4               	movwf	(_motorR+5)& (0+255),b
  1466   00231C  0E0F               	movlw	15
  1467   00231E  6FD5               	movwf	(_motorR+6)& (0+255),b
  1468                           
  1469                           ;main.c: 52:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1470   002320  0E21               	movlw	33
  1471   002322  6FD6               	movwf	(_motorR+7)& (0+255),b
  1472   002324  0E0F               	movlw	15
  1473   002326  6FD7               	movwf	(_motorR+8)& (0+255),b
  1474   002328                     
  1475                           ; BSR set to: 0
  1476                           ;main.c: 55:     LATDbits.LATD7=0;
  1477   002328  9E7C               	bcf	124,7,c	;volatile
  1478   00232A                     
  1479                           ; BSR set to: 0
  1480                           ;main.c: 56:     TRISDbits.TRISD7=0;
  1481   00232A  9E84               	bcf	132,7,c	;volatile
  1482   00232C                     
  1483                           ; BSR set to: 0
  1484                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1485   00232C  9087               	bcf	135,0,c	;volatile
  1486   00232E                     
  1487                           ; BSR set to: 0
  1488                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1489   00232E  907F               	bcf	127,0,c	;volatile
  1490   002330                     
  1491                           ; BSR set to: 0
  1492                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1493   002330  9E85               	bcf	133,7,c	;volatile
  1494   002332                     
  1495                           ; BSR set to: 0
  1496                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1497   002332  9E7D               	bcf	125,7,c	;volatile
  1498   002334                     
  1499                           ; BSR set to: 0
  1500                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1501   002334  9681               	bcf	129,3,c	;volatile
  1502   002336                     
  1503                           ; BSR set to: 0
  1504                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1505   002336  9679               	bcf	121,3,c	;volatile
  1506   002338                     
  1507                           ; BSR set to: 0
  1508                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1509   002338  8686               	bsf	134,3,c	;volatile
  1510   00233A                     
  1511                           ; BSR set to: 0
  1512                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1513   00233A  010E               	movlb	14	; () banked
  1514   00233C  97B4               	bcf	180,3,b	;volatile
  1515   00233E                     
  1516                           ; BSR set to: 14
  1517                           ;main.c: 76:     unsigned int battery_level;;main.c: 77:     unsigned int red;;main.c: 7
      +                          8:     unsigned int blue;;main.c: 79:     unsigned int green;;main.c: 80:     unsigned i
      +                          nt clear;;main.c: 81:     unsigned int hue;;main.c: 82:     char hue_char[20];;main.c: 8
      +                          3:     unsigned int path_length = 0;
  1518   00233E  0E00               	movlw	0
  1519   002340  0101               	movlb	1	; () banked
  1520   002342  6F7F               	movwf	(main@path_length+1)& (0+255),b
  1521   002344  0E00               	movlw	0
  1522   002346  6F7E               	movwf	main@path_length& (0+255),b
  1523   002348                     
  1524                           ; BSR set to: 1
  1525                           ;main.c: 84:     TRISHbits.TRISH3 = 0;
  1526   002348  9688               	bcf	136,3,c	;volatile
  1527   00234A                     
  1528                           ; BSR set to: 1
  1529                           ;main.c: 85:     LATHbits.LATH3 = 1;
  1530   00234A  8680               	bsf	128,3,c	;volatile
  1531   00234C                     
  1532                           ; BSR set to: 1
  1533                           ;main.c: 86:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1534   00234C  0E19               	movlw	25
  1535   00234E  0100               	movlb	0	; () banked
  1536   002350  6FAD               	movwf	(??_main+1)& (0+255),b
  1537   002352  0E5A               	movlw	90
  1538   002354  6FAC               	movwf	??_main& (0+255),b
  1539   002356  0EB1               	movlw	177
  1540   002358                     u6497:
  1541   002358  2EE8               	decfsz	wreg,f,c
  1542   00235A  D7FE               	bra	u6497
  1543   00235C  2FAC               	decfsz	??_main& (0+255),f,b
  1544   00235E  D7FC               	bra	u6497
  1545   002360  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1546   002362  D7FA               	bra	u6497
  1547   002364  D000               	nop2	
  1548   002366                     
  1549                           ;main.c: 87:     LATHbits.LATH3 = 0;
  1550   002366  9680               	bcf	128,3,c	;volatile
  1551   002368                     
  1552                           ;main.c: 88:     LATFbits.LATF2 = 0;
  1553   002368  947E               	bcf	126,2,c	;volatile
  1554   00236A                     
  1555                           ;main.c: 89:     TRISFbits.TRISF2 = 1;
  1556   00236A  8486               	bsf	134,2,c	;volatile
  1557   00236C                     
  1558                           ;main.c: 90:     ANSELFbits.ANSELF2 = 0;
  1559   00236C  010E               	movlb	14	; () banked
  1560   00236E  95B4               	bcf	180,2,b	;volatile
  1561   002370                     
  1562                           ; BSR set to: 14
  1563                           ;main.c: 93:     calibration_routine(&colorCalibration);
  1564   002370  0EE9               	movlw	low _colorCalibration
  1565   002372  6E44               	movwf	calibration_routine@cCal^0,c
  1566   002374  ECB0  F013         	call	_calibration_routine	;wreg free
  1567   002378                     l6640:
  1568                           
  1569                           ;main.c: 99:         LATGbits.LATG0 = 1;
  1570   002378  807F               	bsf	127,0,c	;volatile
  1571   00237A                     
  1572                           ;main.c: 100:         LATEbits.LATE7 = 1;
  1573   00237A  8E7D               	bsf	125,7,c	;volatile
  1574   00237C                     
  1575                           ;main.c: 101:         LATAbits.LATA3 = 1;
  1576   00237C  8679               	bsf	121,3,c	;volatile
  1577   00237E                     
  1578                           ;main.c: 104:         fullSpeedAhead(&motorL,&motorR);
  1579   00237E  0ED8               	movlw	low _motorL
  1580   002380  6E13               	movwf	fullSpeedAhead@mL^0,c
  1581   002382  0ECF               	movlw	low _motorR
  1582   002384  6E14               	movwf	fullSpeedAhead@mR^0,c
  1583   002386  ECEF  F01C         	call	_fullSpeedAhead	;wreg free
  1584   00238A                     
  1585                           ;main.c: 105:         T0CON0bits.T0EN=1;
  1586   00238A  8ED5               	bsf	213,7,c	;volatile
  1587   00238C                     
  1588                           ;main.c: 107:         (colorCurrent.clear) = color_read_Clear();
  1589   00238C  EC26  F01E         	call	_color_read_Clear	;wreg free
  1590   002390  C005  F0E7         	movff	?_color_read_Clear,_colorCurrent+6
  1591   002394  C006  F0E8         	movff	?_color_read_Clear+1,_colorCurrent+7
  1592   002398                     
  1593                           ;main.c: 108:         float current = colorCurrent.clear;
  1594   002398  C0E7  F001         	movff	_colorCurrent+6,___xxtofl@val
  1595   00239C  C0E8  F002         	movff	_colorCurrent+7,___xxtofl@val+1
  1596   0023A0  6A03               	clrf	(___xxtofl@val+2)^0,c
  1597   0023A2  6A04               	clrf	(___xxtofl@val+3)^0,c
  1598   0023A4  0E00               	movlw	0
  1599   0023A6  EC99  F014         	call	___xxtofl
  1600   0023AA  C001  F170         	movff	?___xxtofl,main@current
  1601   0023AE  C002  F171         	movff	?___xxtofl+1,main@current+1
  1602   0023B2  C003  F172         	movff	?___xxtofl+2,main@current+2
  1603   0023B6  C004  F173         	movff	?___xxtofl+3,main@current+3
  1604   0023BA                     
  1605                           ;main.c: 109:         float maximum = colorCalibration.clear;
  1606   0023BA  C0EF  F001         	movff	_colorCalibration+6,___xxtofl@val
  1607   0023BE  C0F0  F002         	movff	_colorCalibration+7,___xxtofl@val+1
  1608   0023C2  6A03               	clrf	(___xxtofl@val+2)^0,c
  1609   0023C4  6A04               	clrf	(___xxtofl@val+3)^0,c
  1610   0023C6  0E00               	movlw	0
  1611   0023C8  EC99  F014         	call	___xxtofl
  1612   0023CC  C001  F174         	movff	?___xxtofl,main@maximum
  1613   0023D0  C002  F175         	movff	?___xxtofl+1,main@maximum+1
  1614   0023D4  C003  F176         	movff	?___xxtofl+2,main@maximum+2
  1615   0023D8  C004  F177         	movff	?___xxtofl+3,main@maximum+3
  1616   0023DC                     
  1617                           ;main.c: 110:         unsigned int clear_norm = current*100/maximum;
  1618   0023DC  C174  F01E         	movff	main@maximum,___fldiv@a
  1619   0023E0  C175  F01F         	movff	main@maximum+1,___fldiv@a+1
  1620   0023E4  C176  F020         	movff	main@maximum+2,___fldiv@a+2
  1621   0023E8  C177  F021         	movff	main@maximum+3,___fldiv@a+3
  1622   0023EC  0E00               	movlw	0
  1623   0023EE  6E05               	movwf	___flmul@a^0,c
  1624   0023F0  0E00               	movlw	0
  1625   0023F2  6E06               	movwf	(___flmul@a+1)^0,c
  1626   0023F4  0EC8               	movlw	200
  1627   0023F6  6E07               	movwf	(___flmul@a+2)^0,c
  1628   0023F8  0E42               	movlw	66
  1629   0023FA  6E08               	movwf	(___flmul@a+3)^0,c
  1630   0023FC  C170  F001         	movff	main@current,___flmul@b
  1631   002400  C171  F002         	movff	main@current+1,___flmul@b+1
  1632   002404  C172  F003         	movff	main@current+2,___flmul@b+2
  1633   002408  C173  F004         	movff	main@current+3,___flmul@b+3
  1634   00240C  EC81  F00D         	call	___flmul	;wreg free
  1635   002410  C001  F01A         	movff	?___flmul,___fldiv@b
  1636   002414  C002  F01B         	movff	?___flmul+1,___fldiv@b+1
  1637   002418  C003  F01C         	movff	?___flmul+2,___fldiv@b+2
  1638   00241C  C004  F01D         	movff	?___flmul+3,___fldiv@b+3
  1639   002420  EC96  F00F         	call	___fldiv	;wreg free
  1640   002424  C01A  F033         	movff	?___fldiv,___fltol@f1
  1641   002428  C01B  F034         	movff	?___fldiv+1,___fltol@f1+1
  1642   00242C  C01C  F035         	movff	?___fldiv+2,___fltol@f1+2
  1643   002430  C01D  F036         	movff	?___fldiv+3,___fltol@f1+3
  1644   002434  EC9B  F017         	call	___fltol	;wreg free
  1645   002438  C033  F17C         	movff	?___fltol,main@clear_norm
  1646   00243C  C034  F17D         	movff	?___fltol+1,main@clear_norm+1
  1647   002440                     
  1648                           ;main.c: 113:         if (clear_norm > 15){
  1649   002440  0101               	movlb	1	; () banked
  1650   002442  517D               	movf	(main@clear_norm+1)& (0+255),w,b
  1651   002444  E109               	bnz	u6460
  1652   002446  0E10               	movlw	16
  1653   002448  5D7C               	subwf	main@clear_norm& (0+255),w,b
  1654   00244A  A0D8               	btfss	status,0,c
  1655   00244C  EF2A  F012         	goto	u6461
  1656   002450  EF2C  F012         	goto	u6460
  1657   002454                     u6461:
  1658   002454  EFBC  F011         	goto	l6640
  1659   002458                     u6460:
  1660   002458                     
  1661                           ; BSR set to: 1
  1662                           ;main.c: 115:             stop(&motorL,&motorR);
  1663   002458  0ED8               	movlw	low _motorL
  1664   00245A  6E13               	movwf	stop@mL^0,c
  1665   00245C  0ECF               	movlw	low _motorR
  1666   00245E  6E14               	movwf	stop@mR^0,c
  1667   002460  EC2A  F01C         	call	_stop	;wreg free
  1668   002464                     
  1669                           ;main.c: 117:             int time = get16bitTMR0val();
  1670   002464  ECAA  F021         	call	_get16bitTMR0val	;wreg free
  1671   002468  C001  F17A         	movff	?_get16bitTMR0val,main@time
  1672   00246C  C002  F17B         	movff	?_get16bitTMR0val+1,main@time+1
  1673   002470                     
  1674                           ;main.c: 118:             T0CON0bits.T0EN=0;
  1675   002470  9ED5               	bcf	213,7,c	;volatile
  1676   002472                     
  1677                           ;main.c: 119:             logAction('F',time, path_length);
  1678   002472  C17A  F007         	movff	main@time,logAction@time
  1679   002476  C17B  F008         	movff	main@time+1,logAction@time+1
  1680   00247A  C17E  F009         	movff	main@path_length,logAction@pathLength
  1681   00247E  C17F  F00A         	movff	main@path_length+1,logAction@pathLength+1
  1682   002482  0E46               	movlw	70
  1683   002484  ECA1  F01D         	call	_logAction
  1684   002488                     
  1685                           ;main.c: 123:             fullSpeedAhead(&motorL,&motorR);
  1686   002488  0ED8               	movlw	low _motorL
  1687   00248A  6E13               	movwf	fullSpeedAhead@mL^0,c
  1688   00248C  0ECF               	movlw	low _motorR
  1689   00248E  6E14               	movwf	fullSpeedAhead@mR^0,c
  1690   002490  ECEF  F01C         	call	_fullSpeedAhead	;wreg free
  1691   002494                     
  1692                           ;main.c: 124:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1693   002494  0E09               	movlw	9
  1694   002496  0100               	movlb	0	; () banked
  1695   002498  6FAD               	movwf	(??_main+1)& (0+255),b
  1696   00249A  0E1E               	movlw	30
  1697   00249C  6FAC               	movwf	??_main& (0+255),b
  1698   00249E  0EE4               	movlw	228
  1699   0024A0                     u6507:
  1700   0024A0  2EE8               	decfsz	wreg,f,c
  1701   0024A2  D7FE               	bra	u6507
  1702   0024A4  2FAC               	decfsz	??_main& (0+255),f,b
  1703   0024A6  D7FC               	bra	u6507
  1704   0024A8  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1705   0024AA  D7FA               	bra	u6507
  1706   0024AC  0000               	nop	
  1707   0024AE                     
  1708                           ;main.c: 125:             stop(&motorL,&motorR);
  1709   0024AE  0ED8               	movlw	low _motorL
  1710   0024B0  6E13               	movwf	stop@mL^0,c
  1711   0024B2  0ECF               	movlw	low _motorR
  1712   0024B4  6E14               	movwf	stop@mR^0,c
  1713   0024B6  EC2A  F01C         	call	_stop	;wreg free
  1714   0024BA                     
  1715                           ;main.c: 126:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1716   0024BA  0E11               	movlw	17
  1717   0024BC  0100               	movlb	0	; () banked
  1718   0024BE  6FAD               	movwf	(??_main+1)& (0+255),b
  1719   0024C0  0E3C               	movlw	60
  1720   0024C2  6FAC               	movwf	??_main& (0+255),b
  1721   0024C4  0ECB               	movlw	203
  1722   0024C6                     u6517:
  1723   0024C6  2EE8               	decfsz	wreg,f,c
  1724   0024C8  D7FE               	bra	u6517
  1725   0024CA  2FAC               	decfsz	??_main& (0+255),f,b
  1726   0024CC  D7FC               	bra	u6517
  1727   0024CE  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1728   0024D0  D7FA               	bra	u6517
  1729   0024D2                     
  1730                           ;main.c: 128:             if (clear_norm > 80){
  1731   0024D2  0101               	movlb	1	; () banked
  1732   0024D4  517D               	movf	(main@clear_norm+1)& (0+255),w,b
  1733   0024D6  E109               	bnz	u6470
  1734   0024D8  0E51               	movlw	81
  1735   0024DA  5D7C               	subwf	main@clear_norm& (0+255),w,b
  1736   0024DC  A0D8               	btfss	status,0,c
  1737   0024DE  EF73  F012         	goto	u6471
  1738   0024E2  EF75  F012         	goto	u6470
  1739   0024E6                     u6471:
  1740   0024E6  EF89  F012         	goto	l6684
  1741   0024EA                     u6470:
  1742   0024EA                     
  1743                           ; BSR set to: 1
  1744                           ;main.c: 131:                 send2USART(white);
  1745   0024EA  0E00               	movlw	0
  1746   0024EC  6E45               	movwf	(send2USART@hue+1)^0,c
  1747   0024EE  0E08               	movlw	8
  1748   0024F0  6E44               	movwf	send2USART@hue^0,c
  1749   0024F2  ECDA  F021         	call	_send2USART	;wreg free
  1750   0024F6                     
  1751                           ;main.c: 132:                 returnHome(&motorL, &motorR, &path ,path_length);
  1752   0024F6  0ED8               	movlw	low _motorL
  1753   0024F8  6E1F               	movwf	returnHome@mL^0,c
  1754   0024FA  0ECF               	movlw	low _motorR
  1755   0024FC  6E20               	movwf	returnHome@mR^0,c
  1756   0024FE  0E00               	movlw	low _path
  1757   002500  6E21               	movwf	returnHome@path^0,c
  1758   002502  0E02               	movlw	high _path
  1759   002504  6E22               	movwf	(returnHome@path+1)^0,c
  1760   002506  C17E  F023         	movff	main@path_length,returnHome@pathLength
  1761   00250A  C17F  F024         	movff	main@path_length+1,returnHome@pathLength+1
  1762   00250E  EC99  F01A         	call	_returnHome	;wreg free
  1763   002512                     l6684:
  1764                           
  1765                           ;main.c: 135:             hue = reading_hue(&colorCurrent);
  1766   002512  0EE1               	movlw	low _colorCurrent
  1767   002514  6E41               	movwf	reading_hue@cCurr^0,c
  1768   002516  ECA0  F018         	call	_reading_hue	;wreg free
  1769   00251A  C041  F178         	movff	?_reading_hue,main@hue
  1770   00251E  C042  F179         	movff	?_reading_hue+1,main@hue+1
  1771   002522                     
  1772                           ;main.c: 136:             decision(hue, path_length);
  1773   002522  C178  F046         	movff	main@hue,decision@hue
  1774   002526  C179  F047         	movff	main@hue+1,decision@hue+1
  1775   00252A  C17E  F048         	movff	main@path_length,decision@path_length
  1776   00252E  C17F  F049         	movff	main@path_length+1,decision@path_length+1
  1777   002532  EC9F  F012         	call	_decision	;wreg free
  1778   002536  EFBC  F011         	goto	l6640
  1779   00253A  EF00  F000         	goto	start
  1780   00253E                     __end_of_main:
  1781                           	callstack 0
  1782                           
  1783 ;; *************** function _returnHome *****************
  1784 ;; Defined at:
  1785 ;;		line 383 in file "dc_motor.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  1788 ;;		 -> motorL(9), 
  1789 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  1790 ;;		 -> motorR(9), 
  1791 ;;  path            2   32[COMRAM] PTR PTR struct PathStep
  1792 ;;		 -> path(150), 
  1793 ;;  pathLength      2   34[COMRAM] int 
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  time            2   38[COMRAM] unsigned int 
  1796 ;;  action          1   40[COMRAM] unsigned char 
  1797 ;;  i               2   41[COMRAM] int 
  1798 ;; Return value:  Size  Location     Type
  1799 ;;                  1    wreg      void 
  1800 ;; Registers used:
  1801 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1807 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1808 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1809 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1810 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1811 ;;Total ram usage:       13 bytes
  1812 ;; Hardware stack levels used: 1
  1813 ;; Hardware stack levels required when called: 5
  1814 ;; This function calls:
  1815 ;;		_reverseStraight
  1816 ;;		_reverseTurn
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text1
  1823   003532                     __ptext1:
  1824                           	callstack 0
  1825   003532                     _returnHome:
  1826                           	callstack 25
  1827   003532                     
  1828                           ;dc_motor.c: 383: void returnHome(struct DC_motor *mL, struct DC_motor *mR, struct PathS
      +                          tep *path[], int pathLength);dc_motor.c: 384: {;dc_motor.c: 386:     for (int i = pathLe
      +                          ngth; i >= 0; i--) {
  1829   003532  C023  F02A         	movff	returnHome@pathLength,returnHome@i
  1830   003536  C024  F02B         	movff	returnHome@pathLength+1,returnHome@i+1
  1831   00353A                     l6554:
  1832   00353A  BE2B               	btfsc	(returnHome@i+1)^0,7,c
  1833   00353C  EFA4  F01A         	goto	u6440
  1834   003540  EFA2  F01A         	goto	u6441
  1835   003544                     u6441:
  1836   003544  EFA6  F01A         	goto	l6558
  1837   003548                     u6440:
  1838   003548  EFEE  F01A         	goto	l509
  1839   00354C                     l6558:
  1840                           
  1841                           ;dc_motor.c: 387:         char action = path[i]->action;
  1842   00354C  90D8               	bcf	status,0,c
  1843   00354E  342A               	rlcf	returnHome@i^0,w,c
  1844   003550  6ED9               	movwf	fsr2l,c
  1845   003552  342B               	rlcf	(returnHome@i+1)^0,w,c
  1846   003554  6EDA               	movwf	fsr2h,c
  1847   003556  5021               	movf	returnHome@path^0,w,c
  1848   003558  26D9               	addwf	fsr2l,f,c
  1849   00355A  5022               	movf	(returnHome@path+1)^0,w,c
  1850   00355C  22DA               	addwfc	fsr2h,f,c
  1851   00355E  CFDE F025          	movff	postinc2,??_returnHome
  1852   003562  CFDD F026          	movff	postdec2,??_returnHome+1
  1853   003566  C025  FFD9         	movff	??_returnHome,fsr2l
  1854   00356A  C026  FFDA         	movff	??_returnHome+1,fsr2h
  1855   00356E  50DF               	movf	indf2,w,c
  1856   003570  6E29               	movwf	returnHome@action^0,c
  1857   003572                     
  1858                           ;dc_motor.c: 388:         unsigned int time = path[i]->time;
  1859   003572  90D8               	bcf	status,0,c
  1860   003574  342A               	rlcf	returnHome@i^0,w,c
  1861   003576  6ED9               	movwf	fsr2l,c
  1862   003578  342B               	rlcf	(returnHome@i+1)^0,w,c
  1863   00357A  6EDA               	movwf	fsr2h,c
  1864   00357C  5021               	movf	returnHome@path^0,w,c
  1865   00357E  26D9               	addwf	fsr2l,f,c
  1866   003580  5022               	movf	(returnHome@path+1)^0,w,c
  1867   003582  22DA               	addwfc	fsr2h,f,c
  1868   003584  EE10 F001          	lfsr	1,1
  1869   003588  50DE               	movf	postinc2,w,c
  1870   00358A  26E1               	addwf	fsr1l,f,c
  1871   00358C  50DD               	movf	postdec2,w,c
  1872   00358E  22E2               	addwfc	fsr1h,f,c
  1873   003590  CFE6 F027          	movff	postinc1,returnHome@time
  1874   003594  CFE5 F028          	movff	postdec1,returnHome@time+1
  1875   003598                     
  1876                           ;dc_motor.c: 390:         if (action == 'F'){reverseStraight(mL, mR, time);}
  1877   003598  0E46               	movlw	70
  1878   00359A  1829               	xorwf	returnHome@action^0,w,c
  1879   00359C  A4D8               	btfss	status,2,c
  1880   00359E  EFD3  F01A         	goto	u6451
  1881   0035A2  EFD5  F01A         	goto	u6450
  1882   0035A6                     u6451:
  1883   0035A6  EFE1  F01A         	goto	l6566
  1884   0035AA                     u6450:
  1885   0035AA  C01F  F018         	movff	returnHome@mL,reverseStraight@mL
  1886   0035AE  C020  F019         	movff	returnHome@mR,reverseStraight@mR
  1887   0035B2  C027  F01A         	movff	returnHome@time,reverseStraight@time
  1888   0035B6  C028  F01B         	movff	returnHome@time+1,reverseStraight@time+1
  1889   0035BA  EC15  F019         	call	_reverseStraight	;wreg free
  1890   0035BE  EFE9  F01A         	goto	l6568
  1891   0035C2                     l6566:
  1892   0035C2  C01F  F01C         	movff	returnHome@mL,reverseTurn@mL
  1893   0035C6  C020  F01D         	movff	returnHome@mR,reverseTurn@mR
  1894   0035CA  C029  F01E         	movff	returnHome@action,reverseTurn@turnDirection
  1895   0035CE  EC95  F01F         	call	_reverseTurn	;wreg free
  1896   0035D2                     l6568:
  1897                           
  1898                           ;dc_motor.c: 394:     }
  1899   0035D2  062A               	decf	returnHome@i^0,f,c
  1900   0035D4  A0D8               	btfss	status,0,c
  1901   0035D6  062B               	decf	(returnHome@i+1)^0,f,c
  1902   0035D8  EF9D  F01A         	goto	l6554
  1903   0035DC                     l509:
  1904   0035DC  0012               	return		;funcret
  1905   0035DE                     __end_of_returnHome:
  1906                           	callstack 0
  1907                           
  1908 ;; *************** function _reverseTurn *****************
  1909 ;; Defined at:
  1910 ;;		line 345 in file "dc_motor.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  1913 ;;		 -> motorL(9), 
  1914 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  1915 ;;		 -> motorR(9), 
  1916 ;;  turnDirectio    1   29[COMRAM] unsigned char 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;		None
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  1    wreg      void 
  1921 ;; Registers used:
  1922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1923 ;; Tracked objects:
  1924 ;;		On entry : 0/0
  1925 ;;		On exit  : 0/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1928 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1931 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1932 ;;Total ram usage:        3 bytes
  1933 ;; Hardware stack levels used: 1
  1934 ;; Hardware stack levels required when called: 4
  1935 ;; This function calls:
  1936 ;;		_left135
  1937 ;;		_right135
  1938 ;;		_turn180
  1939 ;;		_turnLeft
  1940 ;;		_turnRight
  1941 ;; This function is called by:
  1942 ;;		_returnHome
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text2
  1947   003F2A                     __ptext2:
  1948                           	callstack 0
  1949   003F2A                     _reverseTurn:
  1950                           	callstack 25
  1951   003F2A                     
  1952                           ;dc_motor.c: 346:     if (turnDirection == 'R') {
  1953   003F2A  0E52               	movlw	82
  1954   003F2C  181E               	xorwf	reverseTurn@turnDirection^0,w,c
  1955   003F2E  A4D8               	btfss	status,2,c
  1956   003F30  EF9C  F01F         	goto	u6171
  1957   003F34  EF9E  F01F         	goto	u6170
  1958   003F38                     u6171:
  1959   003F38  EFA6  F01F         	goto	l6308
  1960   003F3C                     u6170:
  1961   003F3C                     
  1962                           ;dc_motor.c: 347:         turnLeft(mL, mR);
  1963   003F3C  C01C  F013         	movff	reverseTurn@mL,turnLeft@mL
  1964   003F40  C01D  F014         	movff	reverseTurn@mR,turnLeft@mR
  1965   003F44  ECB0  F01C         	call	_turnLeft	;wreg free
  1966                           
  1967                           ;dc_motor.c: 348:     } else if (turnDirection == 'L') {
  1968   003F48  EFB7  F01F         	goto	l490
  1969   003F4C                     l6308:
  1970   003F4C  0E4C               	movlw	76
  1971   003F4E  181E               	xorwf	reverseTurn@turnDirection^0,w,c
  1972   003F50  A4D8               	btfss	status,2,c
  1973   003F52  EFAD  F01F         	goto	u6181
  1974   003F56  EFAF  F01F         	goto	u6180
  1975   003F5A                     u6181:
  1976   003F5A  EFB7  F01F         	goto	l489
  1977   003F5E                     u6180:
  1978   003F5E                     
  1979                           ;dc_motor.c: 349:         turnRight(mL, mR);
  1980   003F5E  C01C  F013         	movff	reverseTurn@mL,turnRight@mL
  1981   003F62  C01D  F014         	movff	reverseTurn@mR,turnRight@mR
  1982   003F66  EC71  F01C         	call	_turnRight	;wreg free
  1983                           
  1984                           ;dc_motor.c: 350:     } else if (turnDirection == '180') {
  1985   003F6A  EFB7  F01F         	goto	l490
  1986   003F6E                     l489:
  1987   003F6E                     l490:
  1988   003F6E  0012               	return		;funcret
  1989   003F70                     __end_of_reverseTurn:
  1990                           	callstack 0
  1991                           
  1992 ;; *************** function _reverseStraight *****************
  1993 ;; Defined at:
  1994 ;;		line 368 in file "dc_motor.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  1997 ;;		 -> motorL(9), 
  1998 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  1999 ;;		 -> motorR(9), 
  2000 ;;  time            2   25[COMRAM] int 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  delayMs         2   27[COMRAM] int 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2012 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2013 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2015 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2016 ;;Total ram usage:        6 bytes
  2017 ;; Hardware stack levels used: 1
  2018 ;; Hardware stack levels required when called: 3
  2019 ;; This function calls:
  2020 ;;		_customDelayMs
  2021 ;;		_fullSpeedAhead
  2022 ;;		_stop
  2023 ;; This function is called by:
  2024 ;;		_returnHome
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           	psect	text3
  2029   00322A                     __ptext3:
  2030                           	callstack 0
  2031   00322A                     _reverseStraight:
  2032                           	callstack 26
  2033   00322A                     
  2034                           ;dc_motor.c: 370:     int delayMs;;dc_motor.c: 373:     if (time<1000 && time>800){delay
      +                          Ms = 3000; }
  2035   00322A  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2036   00322C  EF23  F019         	goto	u6190
  2037   003230  0EE8               	movlw	232
  2038   003232  5C1A               	subwf	reverseStraight@time^0,w,c
  2039   003234  0E03               	movlw	3
  2040   003236  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2041   003238  B0D8               	btfsc	status,0,c
  2042   00323A  EF21  F019         	goto	u6191
  2043   00323E  EF23  F019         	goto	u6190
  2044   003242                     u6191:
  2045   003242  EF35  F019         	goto	l6324
  2046   003246                     u6190:
  2047   003246  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2048   003248  EF2F  F019         	goto	u6201
  2049   00324C  0E21               	movlw	33
  2050   00324E  5C1A               	subwf	reverseStraight@time^0,w,c
  2051   003250  0E03               	movlw	3
  2052   003252  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2053   003254  A0D8               	btfss	status,0,c
  2054   003256  EF2F  F019         	goto	u6201
  2055   00325A  EF31  F019         	goto	u6200
  2056   00325E                     u6201:
  2057   00325E  EF35  F019         	goto	l6324
  2058   003262                     u6200:
  2059   003262  0E0B               	movlw	11
  2060   003264  6E1D               	movwf	(reverseStraight@delayMs+1)^0,c
  2061   003266  0EB8               	movlw	184
  2062   003268  6E1C               	movwf	reverseStraight@delayMs^0,c
  2063   00326A                     l6324:
  2064                           
  2065                           ;dc_motor.c: 374:     if (time<800 && time>600){delayMs = 2000; }
  2066   00326A  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2067   00326C  EF43  F019         	goto	u6210
  2068   003270  0E20               	movlw	32
  2069   003272  5C1A               	subwf	reverseStraight@time^0,w,c
  2070   003274  0E03               	movlw	3
  2071   003276  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2072   003278  B0D8               	btfsc	status,0,c
  2073   00327A  EF41  F019         	goto	u6211
  2074   00327E  EF43  F019         	goto	u6210
  2075   003282                     u6211:
  2076   003282  EF55  F019         	goto	l6330
  2077   003286                     u6210:
  2078   003286  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2079   003288  EF4F  F019         	goto	u6221
  2080   00328C  0E59               	movlw	89
  2081   00328E  5C1A               	subwf	reverseStraight@time^0,w,c
  2082   003290  0E02               	movlw	2
  2083   003292  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2084   003294  A0D8               	btfss	status,0,c
  2085   003296  EF4F  F019         	goto	u6221
  2086   00329A  EF51  F019         	goto	u6220
  2087   00329E                     u6221:
  2088   00329E  EF55  F019         	goto	l6330
  2089   0032A2                     u6220:
  2090   0032A2  0E07               	movlw	7
  2091   0032A4  6E1D               	movwf	(reverseStraight@delayMs+1)^0,c
  2092   0032A6  0ED0               	movlw	208
  2093   0032A8  6E1C               	movwf	reverseStraight@delayMs^0,c
  2094   0032AA                     l6330:
  2095                           
  2096                           ;dc_motor.c: 375:     if (time<600 && time>400){delayMs = 1000;}
  2097   0032AA  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2098   0032AC  EF63  F019         	goto	u6230
  2099   0032B0  0E58               	movlw	88
  2100   0032B2  5C1A               	subwf	reverseStraight@time^0,w,c
  2101   0032B4  0E02               	movlw	2
  2102   0032B6  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2103   0032B8  B0D8               	btfsc	status,0,c
  2104   0032BA  EF61  F019         	goto	u6231
  2105   0032BE  EF63  F019         	goto	u6230
  2106   0032C2                     u6231:
  2107   0032C2  EF75  F019         	goto	l6336
  2108   0032C6                     u6230:
  2109   0032C6  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2110   0032C8  EF6F  F019         	goto	u6241
  2111   0032CC  0E91               	movlw	145
  2112   0032CE  5C1A               	subwf	reverseStraight@time^0,w,c
  2113   0032D0  0E01               	movlw	1
  2114   0032D2  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2115   0032D4  A0D8               	btfss	status,0,c
  2116   0032D6  EF6F  F019         	goto	u6241
  2117   0032DA  EF71  F019         	goto	u6240
  2118   0032DE                     u6241:
  2119   0032DE  EF75  F019         	goto	l6336
  2120   0032E2                     u6240:
  2121   0032E2  0E03               	movlw	3
  2122   0032E4  6E1D               	movwf	(reverseStraight@delayMs+1)^0,c
  2123   0032E6  0EE8               	movlw	232
  2124   0032E8  6E1C               	movwf	reverseStraight@delayMs^0,c
  2125   0032EA                     l6336:
  2126                           
  2127                           ;dc_motor.c: 377:     fullSpeedAhead(mL, mR);
  2128   0032EA  C018  F013         	movff	reverseStraight@mL,fullSpeedAhead@mL
  2129   0032EE  C019  F014         	movff	reverseStraight@mR,fullSpeedAhead@mR
  2130   0032F2  ECEF  F01C         	call	_fullSpeedAhead	;wreg free
  2131   0032F6                     
  2132                           ;dc_motor.c: 378:     customDelayMs(delayMs);
  2133   0032F6  C01C  F001         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2134   0032FA  C01D  F002         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2135   0032FE  EC3D  F020         	call	_customDelayMs	;wreg free
  2136   003302                     
  2137                           ;dc_motor.c: 379:     stop(mL, mR);
  2138   003302  C018  F013         	movff	reverseStraight@mL,stop@mL
  2139   003306  C019  F014         	movff	reverseStraight@mR,stop@mR
  2140   00330A  EC2A  F01C         	call	_stop	;wreg free
  2141   00330E  0012               	return		;funcret
  2142   003310                     __end_of_reverseStraight:
  2143                           	callstack 0
  2144                           
  2145 ;; *************** function _fullSpeedAhead *****************
  2146 ;; Defined at:
  2147 ;;		line 144 in file "dc_motor.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  2150 ;;		 -> motorL(9), 
  2151 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  2152 ;;		 -> motorR(9), 
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;  power           2   21[COMRAM] int 
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  1    wreg      void 
  2157 ;; Registers used:
  2158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2164 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2165 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2166 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2167 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2168 ;;Total ram usage:        5 bytes
  2169 ;; Hardware stack levels used: 1
  2170 ;; Hardware stack levels required when called: 2
  2171 ;; This function calls:
  2172 ;;		_setMotorPWM
  2173 ;; This function is called by:
  2174 ;;		_main
  2175 ;;		_reverseStraight
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           	psect	text4
  2180   0039DE                     __ptext4:
  2181                           	callstack 0
  2182   0039DE                     _fullSpeedAhead:
  2183                           	callstack 26
  2184   0039DE                     
  2185                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2186   0039DE  5013               	movf	fullSpeedAhead@mL^0,w,c
  2187   0039E0  6ED9               	movwf	fsr2l,c
  2188   0039E2  6ADA               	clrf	fsr2h,c
  2189   0039E4  0E01               	movlw	1
  2190   0039E6  26D9               	addwf	fsr2l,f,c
  2191   0039E8  0E01               	movlw	1
  2192   0039EA  6EDF               	movwf	indf2,c
  2193                           
  2194                           ;dc_motor.c: 148:     mR->direction = 1;
  2195   0039EC  5014               	movf	fullSpeedAhead@mR^0,w,c
  2196   0039EE  6ED9               	movwf	fsr2l,c
  2197   0039F0  6ADA               	clrf	fsr2h,c
  2198   0039F2  0E01               	movlw	1
  2199   0039F4  26D9               	addwf	fsr2l,f,c
  2200   0039F6  0E01               	movlw	1
  2201   0039F8  6EDF               	movwf	indf2,c
  2202   0039FA                     
  2203                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2204   0039FA  0E00               	movlw	0
  2205   0039FC  6E17               	movwf	(fullSpeedAhead@power+1)^0,c
  2206   0039FE  0E00               	movlw	0
  2207   003A00  6E16               	movwf	fullSpeedAhead@power^0,c
  2208   003A02                     l5668:
  2209                           
  2210                           ;dc_motor.c: 151:         mL->power = power;
  2211   003A02  5013               	movf	fullSpeedAhead@mL^0,w,c
  2212   003A04  6ED9               	movwf	fsr2l,c
  2213   003A06  6ADA               	clrf	fsr2h,c
  2214   003A08  C016  FFDF         	movff	fullSpeedAhead@power,indf2
  2215                           
  2216                           ;dc_motor.c: 152:         mR->power = power;
  2217   003A0C  5014               	movf	fullSpeedAhead@mR^0,w,c
  2218   003A0E  6ED9               	movwf	fsr2l,c
  2219   003A10  6ADA               	clrf	fsr2h,c
  2220   003A12  C016  FFDF         	movff	fullSpeedAhead@power,indf2
  2221   003A16                     
  2222                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2223   003A16  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2224   003A1A  ECF1  F016         	call	_setMotorPWM	;wreg free
  2225   003A1E                     
  2226                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2227   003A1E  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2228   003A22  ECF1  F016         	call	_setMotorPWM	;wreg free
  2229   003A26                     
  2230                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2231   003A26  0E0B               	movlw	11
  2232   003A28  6E15               	movwf	??_fullSpeedAhead^0,c
  2233   003A2A  0E62               	movlw	98
  2234   003A2C                     u6527:
  2235   003A2C  2EE8               	decfsz	wreg,f,c
  2236   003A2E  D7FE               	bra	u6527
  2237   003A30  2E15               	decfsz	??_fullSpeedAhead^0,f,c
  2238   003A32  D7FC               	bra	u6527
  2239   003A34  D000               	nop2	
  2240   003A36                     
  2241                           ;dc_motor.c: 160:     }
  2242   003A36  4A16               	infsnz	fullSpeedAhead@power^0,f,c
  2243   003A38  2A17               	incf	(fullSpeedAhead@power+1)^0,f,c
  2244   003A3A  BE17               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2245   003A3C  EF29  F01D         	goto	u5361
  2246   003A40  5017               	movf	(fullSpeedAhead@power+1)^0,w,c
  2247   003A42  E109               	bnz	u5360
  2248   003A44  0E33               	movlw	51
  2249   003A46  5C16               	subwf	fullSpeedAhead@power^0,w,c
  2250   003A48  A0D8               	btfss	status,0,c
  2251   003A4A  EF29  F01D         	goto	u5361
  2252   003A4E  EF2B  F01D         	goto	u5360
  2253   003A52                     u5361:
  2254   003A52  EF01  F01D         	goto	l5668
  2255   003A56                     u5360:
  2256   003A56  0012               	return		;funcret
  2257   003A58                     __end_of_fullSpeedAhead:
  2258                           	callstack 0
  2259                           
  2260 ;; *************** function _customDelayMs *****************
  2261 ;; Defined at:
  2262 ;;		line 361 in file "dc_motor.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  milliseconds    2    0[COMRAM] unsigned int 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  i               2    3[COMRAM] unsigned int 
  2267 ;; Return value:  Size  Location     Type
  2268 ;;                  1    wreg      void 
  2269 ;; Registers used:
  2270 ;;		wreg, status,2, status,0
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2276 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2277 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2278 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2279 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2280 ;;Total ram usage:        5 bytes
  2281 ;; Hardware stack levels used: 1
  2282 ;; This function calls:
  2283 ;;		Nothing
  2284 ;; This function is called by:
  2285 ;;		_reverseStraight
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text5
  2290   00407A                     __ptext5:
  2291                           	callstack 0
  2292   00407A                     _customDelayMs:
  2293                           	callstack 28
  2294   00407A                     
  2295                           ;dc_motor.c: 362:     for (unsigned int i = 0; i < milliseconds; i++) {
  2296   00407A  0E00               	movlw	0
  2297   00407C  6E05               	movwf	(customDelayMs@i+1)^0,c
  2298   00407E  0E00               	movlw	0
  2299   004080  6E04               	movwf	customDelayMs@i^0,c
  2300   004082  EF4D  F020         	goto	l493
  2301   004086                     l5730:
  2302                           
  2303                           ;dc_motor.c: 363:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2304   004086  0E15               	movlw	21
  2305   004088  6E03               	movwf	??_customDelayMs^0,c
  2306   00408A  0EC6               	movlw	198
  2307   00408C                     u6537:
  2308   00408C  2EE8               	decfsz	wreg,f,c
  2309   00408E  D7FE               	bra	u6537
  2310   004090  2E03               	decfsz	??_customDelayMs^0,f,c
  2311   004092  D7FC               	bra	u6537
  2312   004094  D000               	nop2	
  2313   004096                     
  2314                           ;dc_motor.c: 364:     }
  2315   004096  4A04               	infsnz	customDelayMs@i^0,f,c
  2316   004098  2A05               	incf	(customDelayMs@i+1)^0,f,c
  2317   00409A                     l493:
  2318   00409A  5001               	movf	customDelayMs@milliseconds^0,w,c
  2319   00409C  5C04               	subwf	customDelayMs@i^0,w,c
  2320   00409E  5002               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2321   0040A0  5805               	subwfb	(customDelayMs@i+1)^0,w,c
  2322   0040A2  A0D8               	btfss	status,0,c
  2323   0040A4  EF56  F020         	goto	u5381
  2324   0040A8  EF58  F020         	goto	u5380
  2325   0040AC                     u5381:
  2326   0040AC  EF43  F020         	goto	l5730
  2327   0040B0                     u5380:
  2328   0040B0  0012               	return		;funcret
  2329   0040B2                     __end_of_customDelayMs:
  2330                           	callstack 0
  2331                           
  2332 ;; *************** function _reading_hue *****************
  2333 ;; Defined at:
  2334 ;;		line 136 in file "color.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;  cCurr           1   64[COMRAM] PTR struct colors
  2337 ;;		 -> colorCurrent(8), 
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  led_state      50    0        unsigned char [50]
  2340 ;;  hue             2   68[COMRAM] unsigned int 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  2   64[COMRAM] unsigned int 
  2343 ;; Registers used:
  2344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2351 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2352 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2353 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2354 ;;Total ram usage:        6 bytes
  2355 ;; Hardware stack levels used: 1
  2356 ;; Hardware stack levels required when called: 3
  2357 ;; This function calls:
  2358 ;;		_color_read_Blue
  2359 ;;		_color_read_Clear
  2360 ;;		_color_read_Green
  2361 ;;		_color_read_Red
  2362 ;;		_convert_rgb2hue
  2363 ;; This function is called by:
  2364 ;;		_main
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           	psect	text6
  2369   003140                     __ptext6:
  2370                           	callstack 0
  2371   003140                     _reading_hue:
  2372                           	callstack 27
  2373   003140                     
  2374                           ;color.c: 136: unsigned int reading_hue(colors *cCurr);color.c: 137: {;color.c: 138:    
      +                           unsigned int hue;;color.c: 140:     char led_state[50];;color.c: 145:     LATGbits.LATG
      +                          0 = 1;
  2375   003140  807F               	bsf	127,0,c	;volatile
  2376                           
  2377                           ;color.c: 146:     LATEbits.LATE7 = 0;
  2378   003142  9E7D               	bcf	125,7,c	;volatile
  2379                           
  2380                           ;color.c: 147:     LATAbits.LATA3 = 0;
  2381   003144  9679               	bcf	121,3,c	;volatile
  2382   003146                     
  2383                           ;color.c: 148:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2384   003146  0E29               	movlw	41
  2385   003148  6E44               	movwf	(??_reading_hue+1)^0,c
  2386   00314A  0E96               	movlw	150
  2387   00314C  6E43               	movwf	??_reading_hue^0,c
  2388   00314E  0E7F               	movlw	127
  2389   003150                     u6547:
  2390   003150  2EE8               	decfsz	wreg,f,c
  2391   003152  D7FE               	bra	u6547
  2392   003154  2E43               	decfsz	??_reading_hue^0,f,c
  2393   003156  D7FC               	bra	u6547
  2394   003158  2E44               	decfsz	(??_reading_hue+1)^0,f,c
  2395   00315A  D7FA               	bra	u6547
  2396   00315C  0000               	nop	
  2397   00315E                     
  2398                           ;color.c: 149:     (cCurr->red)= color_read_Red();
  2399   00315E  ECD6  F01D         	call	_color_read_Red	;wreg free
  2400   003162  5041               	movf	reading_hue@cCurr^0,w,c
  2401   003164  6ED9               	movwf	fsr2l,c
  2402   003166  6ADA               	clrf	fsr2h,c
  2403   003168  C005  FFDE         	movff	?_color_read_Red,postinc2
  2404   00316C  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  2405   003170                     
  2406                           ;color.c: 154:     LATGbits.LATG0 = 0;
  2407   003170  907F               	bcf	127,0,c	;volatile
  2408   003172                     
  2409                           ;color.c: 155:     LATEbits.LATE7 = 1;
  2410   003172  8E7D               	bsf	125,7,c	;volatile
  2411   003174                     
  2412                           ;color.c: 156:     LATAbits.LATA3 = 0;
  2413   003174  9679               	bcf	121,3,c	;volatile
  2414   003176                     
  2415                           ;color.c: 157:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2416   003176  0E29               	movlw	41
  2417   003178  6E44               	movwf	(??_reading_hue+1)^0,c
  2418   00317A  0E96               	movlw	150
  2419   00317C  6E43               	movwf	??_reading_hue^0,c
  2420   00317E  0E7F               	movlw	127
  2421   003180                     u6557:
  2422   003180  2EE8               	decfsz	wreg,f,c
  2423   003182  D7FE               	bra	u6557
  2424   003184  2E43               	decfsz	??_reading_hue^0,f,c
  2425   003186  D7FC               	bra	u6557
  2426   003188  2E44               	decfsz	(??_reading_hue+1)^0,f,c
  2427   00318A  D7FA               	bra	u6557
  2428   00318C  0000               	nop	
  2429                           
  2430                           ;color.c: 158:     (cCurr->green) = color_read_Green();
  2431   00318E  ECFE  F01D         	call	_color_read_Green	;wreg free
  2432   003192  5041               	movf	reading_hue@cCurr^0,w,c
  2433   003194  6ED9               	movwf	fsr2l,c
  2434   003196  6ADA               	clrf	fsr2h,c
  2435   003198  0E02               	movlw	2
  2436   00319A  26D9               	addwf	fsr2l,f,c
  2437   00319C  C005  FFDE         	movff	?_color_read_Green,postinc2
  2438   0031A0  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  2439   0031A4                     
  2440                           ;color.c: 164:     LATGbits.LATG0 = 0;
  2441   0031A4  907F               	bcf	127,0,c	;volatile
  2442   0031A6                     
  2443                           ;color.c: 165:     LATEbits.LATE7 = 0;
  2444   0031A6  9E7D               	bcf	125,7,c	;volatile
  2445   0031A8                     
  2446                           ;color.c: 166:     LATAbits.LATA3 = 1;
  2447   0031A8  8679               	bsf	121,3,c	;volatile
  2448   0031AA                     
  2449                           ;color.c: 167:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2450   0031AA  0E29               	movlw	41
  2451   0031AC  6E44               	movwf	(??_reading_hue+1)^0,c
  2452   0031AE  0E96               	movlw	150
  2453   0031B0  6E43               	movwf	??_reading_hue^0,c
  2454   0031B2  0E7F               	movlw	127
  2455   0031B4                     u6567:
  2456   0031B4  2EE8               	decfsz	wreg,f,c
  2457   0031B6  D7FE               	bra	u6567
  2458   0031B8  2E43               	decfsz	??_reading_hue^0,f,c
  2459   0031BA  D7FC               	bra	u6567
  2460   0031BC  2E44               	decfsz	(??_reading_hue+1)^0,f,c
  2461   0031BE  D7FA               	bra	u6567
  2462   0031C0  0000               	nop	
  2463   0031C2                     
  2464                           ;color.c: 168:     (cCurr->blue) = color_read_Blue();
  2465   0031C2  EC4E  F01E         	call	_color_read_Blue	;wreg free
  2466   0031C6  5041               	movf	reading_hue@cCurr^0,w,c
  2467   0031C8  6ED9               	movwf	fsr2l,c
  2468   0031CA  6ADA               	clrf	fsr2h,c
  2469   0031CC  0E04               	movlw	4
  2470   0031CE  26D9               	addwf	fsr2l,f,c
  2471   0031D0  C005  FFDE         	movff	?_color_read_Blue,postinc2
  2472   0031D4  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  2473   0031D8                     
  2474                           ;color.c: 173:     LATGbits.LATG0 = 1;
  2475   0031D8  807F               	bsf	127,0,c	;volatile
  2476   0031DA                     
  2477                           ;color.c: 174:     LATEbits.LATE7 = 1;
  2478   0031DA  8E7D               	bsf	125,7,c	;volatile
  2479   0031DC                     
  2480                           ;color.c: 175:     LATAbits.LATA3 = 1;
  2481   0031DC  8679               	bsf	121,3,c	;volatile
  2482                           
  2483                           ;color.c: 176:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2484   0031DE  0E29               	movlw	41
  2485   0031E0  6E44               	movwf	(??_reading_hue+1)^0,c
  2486   0031E2  0E96               	movlw	150
  2487   0031E4  6E43               	movwf	??_reading_hue^0,c
  2488   0031E6  0E7F               	movlw	127
  2489   0031E8                     u6577:
  2490   0031E8  2EE8               	decfsz	wreg,f,c
  2491   0031EA  D7FE               	bra	u6577
  2492   0031EC  2E43               	decfsz	??_reading_hue^0,f,c
  2493   0031EE  D7FC               	bra	u6577
  2494   0031F0  2E44               	decfsz	(??_reading_hue+1)^0,f,c
  2495   0031F2  D7FA               	bra	u6577
  2496   0031F4  0000               	nop	
  2497   0031F6                     
  2498                           ;color.c: 177:     (cCurr->clear) = color_read_Clear();
  2499   0031F6  EC26  F01E         	call	_color_read_Clear	;wreg free
  2500   0031FA  5041               	movf	reading_hue@cCurr^0,w,c
  2501   0031FC  6ED9               	movwf	fsr2l,c
  2502   0031FE  6ADA               	clrf	fsr2h,c
  2503   003200  0E06               	movlw	6
  2504   003202  26D9               	addwf	fsr2l,f,c
  2505   003204  C005  FFDE         	movff	?_color_read_Clear,postinc2
  2506   003208  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  2507   00320C                     
  2508                           ;color.c: 184:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  2509   00320C  0EE9               	movlw	low _colorCalibration
  2510   00320E  6E3D               	movwf	convert_rgb2hue@cMax^0,c
  2511   003210  0EE1               	movlw	low _colorCurrent
  2512   003212  6E3E               	movwf	convert_rgb2hue@cCurr^0,c
  2513   003214  EC58  F007         	call	_convert_rgb2hue	;wreg free
  2514   003218  C03D  F045         	movff	?_convert_rgb2hue,reading_hue@hue
  2515   00321C  C03E  F046         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  2516   003220                     
  2517                           ;color.c: 191:     return hue;
  2518   003220  C045  F041         	movff	reading_hue@hue,?_reading_hue
  2519   003224  C046  F042         	movff	reading_hue@hue+1,?_reading_hue+1
  2520   003228  0012               	return		;funcret
  2521   00322A                     __end_of_reading_hue:
  2522                           	callstack 0
  2523                           
  2524 ;; *************** function _convert_rgb2hue *****************
  2525 ;; Defined at:
  2526 ;;		line 274 in file "color.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;  cMax            1   60[COMRAM] PTR struct colors
  2529 ;;		 -> colorCalibration(8), 
  2530 ;;  cCurr           1   61[COMRAM] PTR struct colors
  2531 ;;		 -> colorCurrent(8), 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;  c_char         20    0        unsigned char [20]
  2534 ;;  b               4   72[BANK0 ] float 
  2535 ;;  g               4   68[BANK0 ] float 
  2536 ;;  r               4   64[BANK0 ] float 
  2537 ;;  hue             4   60[BANK0 ] float 
  2538 ;;  max             4   56[BANK0 ] float 
  2539 ;;  diff            4   52[BANK0 ] float 
  2540 ;;  min             4   48[BANK0 ] float 
  2541 ;;  clearmax        4   28[BANK0 ] float 
  2542 ;;  clearcurrent    4   24[BANK0 ] float 
  2543 ;;  bluemax         4   20[BANK0 ] float 
  2544 ;;  bluecurrent     4   16[BANK0 ] float 
  2545 ;;  greenmax        4   12[BANK0 ] float 
  2546 ;;  greencurrent    4    8[BANK0 ] float 
  2547 ;;  redmax          4    4[BANK0 ] float 
  2548 ;;  redcurrent      4    0[BANK0 ] float 
  2549 ;;  c               4    0        float 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  2   60[COMRAM] unsigned int 
  2552 ;; Registers used:
  2553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2559 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2560 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2562 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2563 ;;Total ram usage:       80 bytes
  2564 ;; Hardware stack levels used: 1
  2565 ;; Hardware stack levels required when called: 2
  2566 ;; This function calls:
  2567 ;;		___fladd
  2568 ;;		___fldiv
  2569 ;;		___fleq
  2570 ;;		___flge
  2571 ;;		___flmul
  2572 ;;		___flsub
  2573 ;;		___fltol
  2574 ;;		___xxtofl
  2575 ;; This function is called by:
  2576 ;;		_reading_hue
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text7
  2581   000EB0                     __ptext7:
  2582                           	callstack 0
  2583   000EB0                     _convert_rgb2hue:
  2584                           	callstack 27
  2585   000EB0                     
  2586                           ;color.c: 274: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 275: {;color.c: 276:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 277:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  2587   000EB0  0E00               	movlw	0
  2588   000EB2  0100               	movlb	0	; () banked
  2589   000EB4  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  2590   000EB6  0E00               	movlw	0
  2591   000EB8  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2592   000EBA  0E00               	movlw	0
  2593   000EBC  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2594   000EBE  0E00               	movlw	0
  2595   000EC0  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2596   000EC2                     
  2597                           ; BSR set to: 0
  2598                           ;color.c: 279:     redcurrent = cCurr->red;
  2599   000EC2  503E               	movf	convert_rgb2hue@cCurr^0,w,c
  2600   000EC4  6ED9               	movwf	fsr2l,c
  2601   000EC6  6ADA               	clrf	fsr2h,c
  2602   000EC8  CFDE F03F          	movff	postinc2,??_convert_rgb2hue
  2603   000ECC  CFDD F040          	movff	postdec2,??_convert_rgb2hue+1
  2604   000ED0  C03F  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2605   000ED4  C040  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2606   000ED8  6A03               	clrf	(___xxtofl@val+2)^0,c
  2607   000EDA  6A04               	clrf	(___xxtofl@val+3)^0,c
  2608   000EDC  0E00               	movlw	0
  2609   000EDE  EC99  F014         	call	___xxtofl
  2610   000EE2  C001  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  2611   000EE6  C002  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  2612   000EEA  C003  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  2613   000EEE  C004  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  2614   000EF2                     
  2615                           ;color.c: 280:     redmax = cMax->red;
  2616   000EF2  503D               	movf	convert_rgb2hue@cMax^0,w,c
  2617   000EF4  6ED9               	movwf	fsr2l,c
  2618   000EF6  6ADA               	clrf	fsr2h,c
  2619   000EF8  CFDE F03F          	movff	postinc2,??_convert_rgb2hue
  2620   000EFC  CFDD F040          	movff	postdec2,??_convert_rgb2hue+1
  2621   000F00  C03F  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2622   000F04  C040  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2623   000F08  6A03               	clrf	(___xxtofl@val+2)^0,c
  2624   000F0A  6A04               	clrf	(___xxtofl@val+3)^0,c
  2625   000F0C  0E00               	movlw	0
  2626   000F0E  EC99  F014         	call	___xxtofl
  2627   000F12  C001  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  2628   000F16  C002  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  2629   000F1A  C003  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  2630   000F1E  C004  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  2631   000F22                     
  2632                           ;color.c: 281:     greencurrent = cCurr->green;
  2633   000F22  503E               	movf	convert_rgb2hue@cCurr^0,w,c
  2634   000F24  6ED9               	movwf	fsr2l,c
  2635   000F26  6ADA               	clrf	fsr2h,c
  2636   000F28  0E02               	movlw	2
  2637   000F2A  26D9               	addwf	fsr2l,f,c
  2638   000F2C  CFDE F03F          	movff	postinc2,??_convert_rgb2hue
  2639   000F30  CFDD F040          	movff	postdec2,??_convert_rgb2hue+1
  2640   000F34  C03F  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2641   000F38  C040  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2642   000F3C  6A03               	clrf	(___xxtofl@val+2)^0,c
  2643   000F3E  6A04               	clrf	(___xxtofl@val+3)^0,c
  2644   000F40  0E00               	movlw	0
  2645   000F42  EC99  F014         	call	___xxtofl
  2646   000F46  C001  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  2647   000F4A  C002  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  2648   000F4E  C003  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  2649   000F52  C004  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  2650   000F56                     
  2651                           ;color.c: 282:     greenmax = cMax->green;
  2652   000F56  503D               	movf	convert_rgb2hue@cMax^0,w,c
  2653   000F58  6ED9               	movwf	fsr2l,c
  2654   000F5A  6ADA               	clrf	fsr2h,c
  2655   000F5C  0E02               	movlw	2
  2656   000F5E  26D9               	addwf	fsr2l,f,c
  2657   000F60  CFDE F03F          	movff	postinc2,??_convert_rgb2hue
  2658   000F64  CFDD F040          	movff	postdec2,??_convert_rgb2hue+1
  2659   000F68  C03F  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2660   000F6C  C040  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2661   000F70  6A03               	clrf	(___xxtofl@val+2)^0,c
  2662   000F72  6A04               	clrf	(___xxtofl@val+3)^0,c
  2663   000F74  0E00               	movlw	0
  2664   000F76  EC99  F014         	call	___xxtofl
  2665   000F7A  C001  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  2666   000F7E  C002  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  2667   000F82  C003  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  2668   000F86  C004  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  2669   000F8A                     
  2670                           ;color.c: 283:     bluecurrent = cCurr->blue;
  2671   000F8A  503E               	movf	convert_rgb2hue@cCurr^0,w,c
  2672   000F8C  6ED9               	movwf	fsr2l,c
  2673   000F8E  6ADA               	clrf	fsr2h,c
  2674   000F90  0E04               	movlw	4
  2675   000F92  26D9               	addwf	fsr2l,f,c
  2676   000F94  CFDE F03F          	movff	postinc2,??_convert_rgb2hue
  2677   000F98  CFDD F040          	movff	postdec2,??_convert_rgb2hue+1
  2678   000F9C  C03F  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2679   000FA0  C040  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2680   000FA4  6A03               	clrf	(___xxtofl@val+2)^0,c
  2681   000FA6  6A04               	clrf	(___xxtofl@val+3)^0,c
  2682   000FA8  0E00               	movlw	0
  2683   000FAA  EC99  F014         	call	___xxtofl
  2684   000FAE  C001  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  2685   000FB2  C002  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  2686   000FB6  C003  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  2687   000FBA  C004  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  2688   000FBE                     
  2689                           ;color.c: 284:     bluemax = cMax->blue;
  2690   000FBE  503D               	movf	convert_rgb2hue@cMax^0,w,c
  2691   000FC0  6ED9               	movwf	fsr2l,c
  2692   000FC2  6ADA               	clrf	fsr2h,c
  2693   000FC4  0E04               	movlw	4
  2694   000FC6  26D9               	addwf	fsr2l,f,c
  2695   000FC8  CFDE F03F          	movff	postinc2,??_convert_rgb2hue
  2696   000FCC  CFDD F040          	movff	postdec2,??_convert_rgb2hue+1
  2697   000FD0  C03F  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2698   000FD4  C040  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2699   000FD8  6A03               	clrf	(___xxtofl@val+2)^0,c
  2700   000FDA  6A04               	clrf	(___xxtofl@val+3)^0,c
  2701   000FDC  0E00               	movlw	0
  2702   000FDE  EC99  F014         	call	___xxtofl
  2703   000FE2  C001  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  2704   000FE6  C002  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  2705   000FEA  C003  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  2706   000FEE  C004  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  2707   000FF2                     
  2708                           ;color.c: 285:     clearcurrent = cCurr->clear;
  2709   000FF2  503E               	movf	convert_rgb2hue@cCurr^0,w,c
  2710   000FF4  6ED9               	movwf	fsr2l,c
  2711   000FF6  6ADA               	clrf	fsr2h,c
  2712   000FF8  0E06               	movlw	6
  2713   000FFA  26D9               	addwf	fsr2l,f,c
  2714   000FFC  CFDE F03F          	movff	postinc2,??_convert_rgb2hue
  2715   001000  CFDD F040          	movff	postdec2,??_convert_rgb2hue+1
  2716   001004  C03F  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2717   001008  C040  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2718   00100C  6A03               	clrf	(___xxtofl@val+2)^0,c
  2719   00100E  6A04               	clrf	(___xxtofl@val+3)^0,c
  2720   001010  0E00               	movlw	0
  2721   001012  EC99  F014         	call	___xxtofl
  2722   001016  C001  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  2723   00101A  C002  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  2724   00101E  C003  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  2725   001022  C004  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  2726   001026                     
  2727                           ;color.c: 286:     clearmax = cMax->clear;
  2728   001026  503D               	movf	convert_rgb2hue@cMax^0,w,c
  2729   001028  6ED9               	movwf	fsr2l,c
  2730   00102A  6ADA               	clrf	fsr2h,c
  2731   00102C  0E06               	movlw	6
  2732   00102E  26D9               	addwf	fsr2l,f,c
  2733   001030  CFDE F03F          	movff	postinc2,??_convert_rgb2hue
  2734   001034  CFDD F040          	movff	postdec2,??_convert_rgb2hue+1
  2735   001038  C03F  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2736   00103C  C040  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2737   001040  6A03               	clrf	(___xxtofl@val+2)^0,c
  2738   001042  6A04               	clrf	(___xxtofl@val+3)^0,c
  2739   001044  0E00               	movlw	0
  2740   001046  EC99  F014         	call	___xxtofl
  2741   00104A  C001  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  2742   00104E  C002  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  2743   001052  C003  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  2744   001056  C004  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  2745   00105A  C078  F01A         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  2746   00105E  C079  F01B         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  2747   001062  C07A  F01C         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  2748   001066  C07B  F01D         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  2749   00106A  C07C  F01E         	movff	convert_rgb2hue@clearmax,___fldiv@a
  2750   00106E  C07D  F01F         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  2751   001072  C07E  F020         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  2752   001076  C07F  F021         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  2753   00107A  EC96  F00F         	call	___fldiv	;wreg free
  2754   00107E                     
  2755                           ;color.c: 289:     char c_char[20];;color.c: 295:     r = redcurrent/redmax;
  2756   00107E  C060  F01A         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  2757   001082  C061  F01B         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  2758   001086  C062  F01C         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  2759   00108A  C063  F01D         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  2760   00108E  C064  F01E         	movff	convert_rgb2hue@redmax,___fldiv@a
  2761   001092  C065  F01F         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  2762   001096  C066  F020         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  2763   00109A  C067  F021         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  2764   00109E  EC96  F00F         	call	___fldiv	;wreg free
  2765   0010A2  C01A  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  2766   0010A6  C01B  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  2767   0010AA  C01C  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  2768   0010AE  C01D  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  2769   0010B2                     
  2770                           ;color.c: 296:     g = greencurrent/greenmax;
  2771   0010B2  C068  F01A         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  2772   0010B6  C069  F01B         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  2773   0010BA  C06A  F01C         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  2774   0010BE  C06B  F01D         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  2775   0010C2  C06C  F01E         	movff	convert_rgb2hue@greenmax,___fldiv@a
  2776   0010C6  C06D  F01F         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  2777   0010CA  C06E  F020         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  2778   0010CE  C06F  F021         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  2779   0010D2  EC96  F00F         	call	___fldiv	;wreg free
  2780   0010D6  C01A  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  2781   0010DA  C01B  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  2782   0010DE  C01C  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  2783   0010E2  C01D  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  2784   0010E6                     
  2785                           ;color.c: 297:     b = bluecurrent/bluemax;
  2786   0010E6  C070  F01A         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  2787   0010EA  C071  F01B         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  2788   0010EE  C072  F01C         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  2789   0010F2  C073  F01D         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  2790   0010F6  C074  F01E         	movff	convert_rgb2hue@bluemax,___fldiv@a
  2791   0010FA  C075  F01F         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  2792   0010FE  C076  F020         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  2793   001102  C077  F021         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  2794   001106  EC96  F00F         	call	___fldiv	;wreg free
  2795   00110A  C01A  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  2796   00110E  C01B  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  2797   001112  C01C  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  2798   001116  C01D  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  2799   00111A                     
  2800                           ;color.c: 299:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  2801   00111A  C0A0  F001         	movff	convert_rgb2hue@r,___flge@ff1
  2802   00111E  C0A1  F002         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2803   001122  C0A2  F003         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2804   001126  C0A3  F004         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2805   00112A  C0A4  F005         	movff	convert_rgb2hue@g,___flge@ff2
  2806   00112E  C0A5  F006         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2807   001132  C0A6  F007         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2808   001136  C0A7  F008         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2809   00113A  EC1E  F018         	call	___flge	;wreg free
  2810   00113E  A0D8               	btfss	status,0,c
  2811   001140  EFA4  F008         	goto	u6061
  2812   001144  EFA6  F008         	goto	u6060
  2813   001148                     u6061:
  2814   001148  EFDB  F008         	goto	l6206
  2815   00114C                     u6060:
  2816   00114C  C0A4  F001         	movff	convert_rgb2hue@g,___flge@ff1
  2817   001150  C0A5  F002         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2818   001154  C0A6  F003         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2819   001158  C0A7  F004         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2820   00115C  C0A8  F005         	movff	convert_rgb2hue@b,___flge@ff2
  2821   001160  C0A9  F006         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2822   001164  C0AA  F007         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2823   001168  C0AB  F008         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2824   00116C  EC1E  F018         	call	___flge	;wreg free
  2825   001170  A0D8               	btfss	status,0,c
  2826   001172  EFBD  F008         	goto	u6071
  2827   001176  EFBF  F008         	goto	u6070
  2828   00117A                     u6071:
  2829   00117A  EFC9  F008         	goto	l119
  2830   00117E                     u6070:
  2831   00117E  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$428
  2832   001182  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$428+1
  2833   001186  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$428+2
  2834   00118A  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$428+3
  2835   00118E  EFD1  F008         	goto	l121
  2836   001192                     l119:
  2837   001192  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$428
  2838   001196  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$428+1
  2839   00119A  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$428+2
  2840   00119E  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$428+3
  2841   0011A2                     l121:
  2842   0011A2  C080  F090         	movff	_convert_rgb2hue$428,convert_rgb2hue@min
  2843   0011A6  C081  F091         	movff	_convert_rgb2hue$428+1,convert_rgb2hue@min+1
  2844   0011AA  C082  F092         	movff	_convert_rgb2hue$428+2,convert_rgb2hue@min+2
  2845   0011AE  C083  F093         	movff	_convert_rgb2hue$428+3,convert_rgb2hue@min+3
  2846   0011B2  EF0E  F009         	goto	l6210
  2847   0011B6                     l6206:
  2848   0011B6  C0A0  F001         	movff	convert_rgb2hue@r,___flge@ff1
  2849   0011BA  C0A1  F002         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2850   0011BE  C0A2  F003         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2851   0011C2  C0A3  F004         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2852   0011C6  C0A8  F005         	movff	convert_rgb2hue@b,___flge@ff2
  2853   0011CA  C0A9  F006         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2854   0011CE  C0AA  F007         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2855   0011D2  C0AB  F008         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2856   0011D6  EC1E  F018         	call	___flge	;wreg free
  2857   0011DA  A0D8               	btfss	status,0,c
  2858   0011DC  EFF2  F008         	goto	u6081
  2859   0011E0  EFF4  F008         	goto	u6080
  2860   0011E4                     u6081:
  2861   0011E4  EFFE  F008         	goto	l123
  2862   0011E8                     u6080:
  2863   0011E8  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$429
  2864   0011EC  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$429+1
  2865   0011F0  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$429+2
  2866   0011F4  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$429+3
  2867   0011F8  EF06  F009         	goto	l125
  2868   0011FC                     l123:
  2869   0011FC  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$429
  2870   001200  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$429+1
  2871   001204  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$429+2
  2872   001208  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$429+3
  2873   00120C                     l125:
  2874   00120C  C084  F090         	movff	_convert_rgb2hue$429,convert_rgb2hue@min
  2875   001210  C085  F091         	movff	_convert_rgb2hue$429+1,convert_rgb2hue@min+1
  2876   001214  C086  F092         	movff	_convert_rgb2hue$429+2,convert_rgb2hue@min+2
  2877   001218  C087  F093         	movff	_convert_rgb2hue$429+3,convert_rgb2hue@min+3
  2878   00121C                     l6210:
  2879                           
  2880                           ;color.c: 300:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  2881   00121C  C0A4  F001         	movff	convert_rgb2hue@g,___flge@ff1
  2882   001220  C0A5  F002         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2883   001224  C0A6  F003         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2884   001228  C0A7  F004         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2885   00122C  C0A0  F005         	movff	convert_rgb2hue@r,___flge@ff2
  2886   001230  C0A1  F006         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2887   001234  C0A2  F007         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2888   001238  C0A3  F008         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2889   00123C  EC1E  F018         	call	___flge	;wreg free
  2890   001240  A0D8               	btfss	status,0,c
  2891   001242  EF25  F009         	goto	u6091
  2892   001246  EF27  F009         	goto	u6090
  2893   00124A                     u6091:
  2894   00124A  EF5C  F009         	goto	l6216
  2895   00124E                     u6090:
  2896   00124E  C0A8  F001         	movff	convert_rgb2hue@b,___flge@ff1
  2897   001252  C0A9  F002         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2898   001256  C0AA  F003         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2899   00125A  C0AB  F004         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2900   00125E  C0A4  F005         	movff	convert_rgb2hue@g,___flge@ff2
  2901   001262  C0A5  F006         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2902   001266  C0A6  F007         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2903   00126A  C0A7  F008         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2904   00126E  EC1E  F018         	call	___flge	;wreg free
  2905   001272  A0D8               	btfss	status,0,c
  2906   001274  EF3E  F009         	goto	u6101
  2907   001278  EF40  F009         	goto	u6100
  2908   00127C                     u6101:
  2909   00127C  EF4A  F009         	goto	l131
  2910   001280                     u6100:
  2911   001280  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$430
  2912   001284  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$430+1
  2913   001288  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$430+2
  2914   00128C  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$430+3
  2915   001290  EF52  F009         	goto	l133
  2916   001294                     l131:
  2917   001294  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$430
  2918   001298  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$430+1
  2919   00129C  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$430+2
  2920   0012A0  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$430+3
  2921   0012A4                     l133:
  2922   0012A4  C088  F098         	movff	_convert_rgb2hue$430,convert_rgb2hue@max
  2923   0012A8  C089  F099         	movff	_convert_rgb2hue$430+1,convert_rgb2hue@max+1
  2924   0012AC  C08A  F09A         	movff	_convert_rgb2hue$430+2,convert_rgb2hue@max+2
  2925   0012B0  C08B  F09B         	movff	_convert_rgb2hue$430+3,convert_rgb2hue@max+3
  2926   0012B4  EF8F  F009         	goto	l6220
  2927   0012B8                     l6216:
  2928   0012B8  C0A8  F001         	movff	convert_rgb2hue@b,___flge@ff1
  2929   0012BC  C0A9  F002         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2930   0012C0  C0AA  F003         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2931   0012C4  C0AB  F004         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2932   0012C8  C0A0  F005         	movff	convert_rgb2hue@r,___flge@ff2
  2933   0012CC  C0A1  F006         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2934   0012D0  C0A2  F007         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2935   0012D4  C0A3  F008         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2936   0012D8  EC1E  F018         	call	___flge	;wreg free
  2937   0012DC  A0D8               	btfss	status,0,c
  2938   0012DE  EF73  F009         	goto	u6111
  2939   0012E2  EF75  F009         	goto	u6110
  2940   0012E6                     u6111:
  2941   0012E6  EF7F  F009         	goto	l135
  2942   0012EA                     u6110:
  2943   0012EA  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$431
  2944   0012EE  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$431+1
  2945   0012F2  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$431+2
  2946   0012F6  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$431+3
  2947   0012FA  EF87  F009         	goto	l137
  2948   0012FE                     l135:
  2949   0012FE  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$431
  2950   001302  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$431+1
  2951   001306  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$431+2
  2952   00130A  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$431+3
  2953   00130E                     l137:
  2954   00130E  C08C  F098         	movff	_convert_rgb2hue$431,convert_rgb2hue@max
  2955   001312  C08D  F099         	movff	_convert_rgb2hue$431+1,convert_rgb2hue@max+1
  2956   001316  C08E  F09A         	movff	_convert_rgb2hue$431+2,convert_rgb2hue@max+2
  2957   00131A  C08F  F09B         	movff	_convert_rgb2hue$431+3,convert_rgb2hue@max+3
  2958   00131E                     l6220:
  2959                           
  2960                           ;color.c: 301:     diff = max - min;
  2961   00131E  C098  F011         	movff	convert_rgb2hue@max,___flsub@b
  2962   001322  C099  F012         	movff	convert_rgb2hue@max+1,___flsub@b+1
  2963   001326  C09A  F013         	movff	convert_rgb2hue@max+2,___flsub@b+2
  2964   00132A  C09B  F014         	movff	convert_rgb2hue@max+3,___flsub@b+3
  2965   00132E  C090  F015         	movff	convert_rgb2hue@min,___flsub@a
  2966   001332  C091  F016         	movff	convert_rgb2hue@min+1,___flsub@a+1
  2967   001336  C092  F017         	movff	convert_rgb2hue@min+2,___flsub@a+2
  2968   00133A  C093  F018         	movff	convert_rgb2hue@min+3,___flsub@a+3
  2969   00133E  ECB8  F01F         	call	___flsub	;wreg free
  2970   001342  C011  F094         	movff	?___flsub,convert_rgb2hue@diff
  2971   001346  C012  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  2972   00134A  C013  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  2973   00134E  C014  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  2974                           
  2975                           ;color.c: 302:     if (max == min) {
  2976   001352  C098  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  2977   001356  C099  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2978   00135A  C09A  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2979   00135E  C09B  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2980   001362  C090  F005         	movff	convert_rgb2hue@min,___fleq@ff2
  2981   001366  C091  F006         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  2982   00136A  C092  F007         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  2983   00136E  C093  F008         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  2984   001372  ECEF  F01A         	call	___fleq	;wreg free
  2985   001376  A0D8               	btfss	status,0,c
  2986   001378  EFC0  F009         	goto	u6121
  2987   00137C  EFC2  F009         	goto	u6120
  2988   001380                     u6121:
  2989   001380  EFCD  F009         	goto	l6224
  2990   001384                     u6120:
  2991   001384                     
  2992                           ;color.c: 303:         hue = 0;
  2993   001384  0E00               	movlw	0
  2994   001386  0100               	movlb	0	; () banked
  2995   001388  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  2996   00138A  0E00               	movlw	0
  2997   00138C  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2998   00138E  0E00               	movlw	0
  2999   001390  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3000   001392  0E00               	movlw	0
  3001   001394  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3002                           
  3003                           ;color.c: 304:     } else if (max == r){
  3004   001396  EFD6  F00A         	goto	l6236
  3005   00139A                     l6224:
  3006   00139A  C098  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  3007   00139E  C099  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3008   0013A2  C09A  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3009   0013A6  C09B  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3010   0013AA  C0A0  F005         	movff	convert_rgb2hue@r,___fleq@ff2
  3011   0013AE  C0A1  F006         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3012   0013B2  C0A2  F007         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3013   0013B6  C0A3  F008         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3014   0013BA  ECEF  F01A         	call	___fleq	;wreg free
  3015   0013BE  A0D8               	btfss	status,0,c
  3016   0013C0  EFE4  F009         	goto	u6131
  3017   0013C4  EFE6  F009         	goto	u6130
  3018   0013C8                     u6131:
  3019   0013C8  EF14  F00A         	goto	l6228
  3020   0013CC                     u6130:
  3021   0013CC                     
  3022                           ;color.c: 305:         hue = (b - g) / diff;
  3023   0013CC  C0A4  F015         	movff	convert_rgb2hue@g,___flsub@a
  3024   0013D0  C0A5  F016         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3025   0013D4  C0A6  F017         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3026   0013D8  C0A7  F018         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3027   0013DC  C0A8  F011         	movff	convert_rgb2hue@b,___flsub@b
  3028   0013E0  C0A9  F012         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3029   0013E4  C0AA  F013         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3030   0013E8  C0AB  F014         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3031   0013EC  ECB8  F01F         	call	___flsub	;wreg free
  3032   0013F0  C011  F01A         	movff	?___flsub,___fldiv@b
  3033   0013F4  C012  F01B         	movff	?___flsub+1,___fldiv@b+1
  3034   0013F8  C013  F01C         	movff	?___flsub+2,___fldiv@b+2
  3035   0013FC  C014  F01D         	movff	?___flsub+3,___fldiv@b+3
  3036   001400  C094  F01E         	movff	convert_rgb2hue@diff,___fldiv@a
  3037   001404  C095  F01F         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3038   001408  C096  F020         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3039   00140C  C097  F021         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3040   001410  EC96  F00F         	call	___fldiv	;wreg free
  3041   001414  C01A  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3042   001418  C01B  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3043   00141C  C01C  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3044   001420  C01D  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3045                           
  3046                           ;color.c: 306:     } else if (max == g){
  3047   001424  EFD6  F00A         	goto	l6236
  3048   001428                     l6228:
  3049   001428  C098  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  3050   00142C  C099  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3051   001430  C09A  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3052   001434  C09B  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3053   001438  C0A4  F005         	movff	convert_rgb2hue@g,___fleq@ff2
  3054   00143C  C0A5  F006         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3055   001440  C0A6  F007         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3056   001444  C0A7  F008         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3057   001448  ECEF  F01A         	call	___fleq	;wreg free
  3058   00144C  A0D8               	btfss	status,0,c
  3059   00144E  EF2B  F00A         	goto	u6141
  3060   001452  EF2D  F00A         	goto	u6140
  3061   001456                     u6141:
  3062   001456  EF75  F00A         	goto	l6232
  3063   00145A                     u6140:
  3064   00145A                     
  3065                           ;color.c: 307:         hue = (b - r) / diff;
  3066   00145A  C0A0  F015         	movff	convert_rgb2hue@r,___flsub@a
  3067   00145E  C0A1  F016         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3068   001462  C0A2  F017         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3069   001466  C0A3  F018         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3070   00146A  C0A8  F011         	movff	convert_rgb2hue@b,___flsub@b
  3071   00146E  C0A9  F012         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3072   001472  C0AA  F013         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3073   001476  C0AB  F014         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3074   00147A  ECB8  F01F         	call	___flsub	;wreg free
  3075   00147E  C011  F01A         	movff	?___flsub,___fldiv@b
  3076   001482  C012  F01B         	movff	?___flsub+1,___fldiv@b+1
  3077   001486  C013  F01C         	movff	?___flsub+2,___fldiv@b+2
  3078   00148A  C014  F01D         	movff	?___flsub+3,___fldiv@b+3
  3079   00148E  C094  F01E         	movff	convert_rgb2hue@diff,___fldiv@a
  3080   001492  C095  F01F         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3081   001496  C096  F020         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3082   00149A  C097  F021         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3083   00149E  EC96  F00F         	call	___fldiv	;wreg free
  3084   0014A2  C01A  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3085   0014A6  C01B  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3086   0014AA  C01C  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3087   0014AE  C01D  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3088                           
  3089                           ;color.c: 308:         hue = hue + 2;
  3090   0014B2  C09C  F001         	movff	convert_rgb2hue@hue,___fladd@b
  3091   0014B6  C09D  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3092   0014BA  C09E  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3093   0014BE  C09F  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3094   0014C2  0E00               	movlw	0
  3095   0014C4  6E05               	movwf	___fladd@a^0,c
  3096   0014C6  0E00               	movlw	0
  3097   0014C8  6E06               	movwf	(___fladd@a+1)^0,c
  3098   0014CA  0E00               	movlw	0
  3099   0014CC  6E07               	movwf	(___fladd@a+2)^0,c
  3100   0014CE  0E40               	movlw	64
  3101   0014D0  6E08               	movwf	(___fladd@a+3)^0,c
  3102   0014D2  EC21  F00B         	call	___fladd	;wreg free
  3103   0014D6  C001  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3104   0014DA  C002  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3105   0014DE  C003  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3106   0014E2  C004  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3107                           
  3108                           ;color.c: 309:     } else if (max == b){
  3109   0014E6  EFD6  F00A         	goto	l6236
  3110   0014EA                     l6232:
  3111   0014EA  C098  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  3112   0014EE  C099  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3113   0014F2  C09A  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3114   0014F6  C09B  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3115   0014FA  C0A8  F005         	movff	convert_rgb2hue@b,___fleq@ff2
  3116   0014FE  C0A9  F006         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3117   001502  C0AA  F007         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3118   001506  C0AB  F008         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3119   00150A  ECEF  F01A         	call	___fleq	;wreg free
  3120   00150E  A0D8               	btfss	status,0,c
  3121   001510  EF8C  F00A         	goto	u6151
  3122   001514  EF8E  F00A         	goto	u6150
  3123   001518                     u6151:
  3124   001518  EFD6  F00A         	goto	l141
  3125   00151C                     u6150:
  3126   00151C                     
  3127                           ;color.c: 310:         hue = (r - g) / diff;
  3128   00151C  C0A4  F015         	movff	convert_rgb2hue@g,___flsub@a
  3129   001520  C0A5  F016         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3130   001524  C0A6  F017         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3131   001528  C0A7  F018         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3132   00152C  C0A0  F011         	movff	convert_rgb2hue@r,___flsub@b
  3133   001530  C0A1  F012         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3134   001534  C0A2  F013         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3135   001538  C0A3  F014         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3136   00153C  ECB8  F01F         	call	___flsub	;wreg free
  3137   001540  C011  F01A         	movff	?___flsub,___fldiv@b
  3138   001544  C012  F01B         	movff	?___flsub+1,___fldiv@b+1
  3139   001548  C013  F01C         	movff	?___flsub+2,___fldiv@b+2
  3140   00154C  C014  F01D         	movff	?___flsub+3,___fldiv@b+3
  3141   001550  C094  F01E         	movff	convert_rgb2hue@diff,___fldiv@a
  3142   001554  C095  F01F         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3143   001558  C096  F020         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3144   00155C  C097  F021         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3145   001560  EC96  F00F         	call	___fldiv	;wreg free
  3146   001564  C01A  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3147   001568  C01B  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3148   00156C  C01C  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3149   001570  C01D  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3150                           
  3151                           ;color.c: 311:         hue = hue + 4;
  3152   001574  C09C  F001         	movff	convert_rgb2hue@hue,___fladd@b
  3153   001578  C09D  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3154   00157C  C09E  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3155   001580  C09F  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3156   001584  0E00               	movlw	0
  3157   001586  6E05               	movwf	___fladd@a^0,c
  3158   001588  0E00               	movlw	0
  3159   00158A  6E06               	movwf	(___fladd@a+1)^0,c
  3160   00158C  0E80               	movlw	128
  3161   00158E  6E07               	movwf	(___fladd@a+2)^0,c
  3162   001590  0E40               	movlw	64
  3163   001592  6E08               	movwf	(___fladd@a+3)^0,c
  3164   001594  EC21  F00B         	call	___fladd	;wreg free
  3165   001598  C001  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3166   00159C  C002  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3167   0015A0  C003  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3168   0015A4  C004  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3169   0015A8  EFD6  F00A         	goto	l6236
  3170   0015AC                     l141:
  3171   0015AC                     l6236:
  3172                           
  3173                           ;color.c: 314:     hue = hue * 60;
  3174   0015AC  C09C  F001         	movff	convert_rgb2hue@hue,___flmul@b
  3175   0015B0  C09D  F002         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3176   0015B4  C09E  F003         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3177   0015B8  C09F  F004         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3178   0015BC  0E00               	movlw	0
  3179   0015BE  6E05               	movwf	___flmul@a^0,c
  3180   0015C0  0E00               	movlw	0
  3181   0015C2  6E06               	movwf	(___flmul@a+1)^0,c
  3182   0015C4  0E70               	movlw	112
  3183   0015C6  6E07               	movwf	(___flmul@a+2)^0,c
  3184   0015C8  0E42               	movlw	66
  3185   0015CA  6E08               	movwf	(___flmul@a+3)^0,c
  3186   0015CC  EC81  F00D         	call	___flmul	;wreg free
  3187   0015D0  C001  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3188   0015D4  C002  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3189   0015D8  C003  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3190   0015DC  C004  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3191   0015E0                     
  3192                           ;color.c: 315:     if (hue < 0) {
  3193   0015E0  0100               	movlb	0	; () banked
  3194   0015E2  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3195   0015E4  EFF8  F00A         	goto	u6160
  3196   0015E8  EFF6  F00A         	goto	u6161
  3197   0015EC                     u6161:
  3198   0015EC  EF12  F00B         	goto	l145
  3199   0015F0                     u6160:
  3200   0015F0                     
  3201                           ; BSR set to: 0
  3202                           ;color.c: 316:         hue = hue + 360;
  3203   0015F0  C09C  F001         	movff	convert_rgb2hue@hue,___fladd@b
  3204   0015F4  C09D  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3205   0015F8  C09E  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3206   0015FC  C09F  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3207   001600  0E00               	movlw	0
  3208   001602  6E05               	movwf	___fladd@a^0,c
  3209   001604  0E00               	movlw	0
  3210   001606  6E06               	movwf	(___fladd@a+1)^0,c
  3211   001608  0EB4               	movlw	180
  3212   00160A  6E07               	movwf	(___fladd@a+2)^0,c
  3213   00160C  0E43               	movlw	67
  3214   00160E  6E08               	movwf	(___fladd@a+3)^0,c
  3215   001610  EC21  F00B         	call	___fladd	;wreg free
  3216   001614  C001  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3217   001618  C002  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3218   00161C  C003  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3219   001620  C004  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3220   001624                     l145:
  3221                           
  3222                           ;color.c: 319:     return (unsigned int)hue;
  3223   001624  C09C  F033         	movff	convert_rgb2hue@hue,___fltol@f1
  3224   001628  C09D  F034         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3225   00162C  C09E  F035         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3226   001630  C09F  F036         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3227   001634  EC9B  F017         	call	___fltol	;wreg free
  3228   001638  C033  F03D         	movff	?___fltol,?_convert_rgb2hue
  3229   00163C  C034  F03E         	movff	?___fltol+1,?_convert_rgb2hue+1
  3230   001640  0012               	return		;funcret
  3231   001642                     __end_of_convert_rgb2hue:
  3232                           	callstack 0
  3233                           
  3234 ;; *************** function ___xxtofl *****************
  3235 ;; Defined at:
  3236 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  sign            1    wreg     unsigned char 
  3239 ;;  val             4    0[COMRAM] long 
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;  sign            1    8[COMRAM] unsigned char 
  3242 ;;  arg             4   10[COMRAM] unsigned long 
  3243 ;;  exp             1    9[COMRAM] unsigned char 
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  4    0[COMRAM] unsigned char 
  3246 ;; Registers used:
  3247 ;;		wreg, status,2, status,0
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3253 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3254 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3255 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3256 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3257 ;;Total ram usage:       14 bytes
  3258 ;; Hardware stack levels used: 1
  3259 ;; This function calls:
  3260 ;;		Nothing
  3261 ;; This function is called by:
  3262 ;;		_convert_rgb2hue
  3263 ;;		_main
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           	psect	text8
  3268   002932                     __ptext8:
  3269                           	callstack 0
  3270   002932                     ___xxtofl:
  3271                           	callstack 28
  3272                           
  3273                           ;incstack = 0
  3274                           ;___xxtofl@sign stored from wreg
  3275   002932  6E09               	movwf	___xxtofl@sign^0,c
  3276   002934  5009               	movf	___xxtofl@sign^0,w,c
  3277   002936  B4D8               	btfsc	status,2,c
  3278   002938  EFA0  F014         	goto	u5961
  3279   00293C  EFA2  F014         	goto	u5960
  3280   002940                     u5961:
  3281   002940  EFC4  F014         	goto	l1303
  3282   002944                     u5960:
  3283   002944  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  3284   002946  EFA9  F014         	goto	u5970
  3285   00294A  EFA7  F014         	goto	u5971
  3286   00294E                     u5971:
  3287   00294E  EFC4  F014         	goto	l1303
  3288   002952                     u5970:
  3289   002952  C001  F005         	movff	___xxtofl@val,??___xxtofl
  3290   002956  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  3291   00295A  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  3292   00295E  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  3293   002962  1E05               	comf	??___xxtofl^0,f,c
  3294   002964  1E06               	comf	(??___xxtofl+1)^0,f,c
  3295   002966  1E07               	comf	(??___xxtofl+2)^0,f,c
  3296   002968  1E08               	comf	(??___xxtofl+3)^0,f,c
  3297   00296A  2A05               	incf	??___xxtofl^0,f,c
  3298   00296C  0E00               	movlw	0
  3299   00296E  2206               	addwfc	(??___xxtofl+1)^0,f,c
  3300   002970  2207               	addwfc	(??___xxtofl+2)^0,f,c
  3301   002972  2208               	addwfc	(??___xxtofl+3)^0,f,c
  3302   002974  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  3303   002978  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  3304   00297C  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  3305   002980  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  3306   002984  EFCC  F014         	goto	l6096
  3307   002988                     l1303:
  3308   002988  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  3309   00298C  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3310   002990  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3311   002994  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3312   002998                     l6096:
  3313   002998  5001               	movf	___xxtofl@val^0,w,c
  3314   00299A  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  3315   00299C  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  3316   00299E  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  3317   0029A0  A4D8               	btfss	status,2,c
  3318   0029A2  EFD5  F014         	goto	u5981
  3319   0029A6  EFD7  F014         	goto	u5980
  3320   0029AA                     u5981:
  3321   0029AA  EFE1  F014         	goto	l6102
  3322   0029AE                     u5980:
  3323   0029AE  0E00               	movlw	0
  3324   0029B0  6E01               	movwf	?___xxtofl^0,c
  3325   0029B2  0E00               	movlw	0
  3326   0029B4  6E02               	movwf	(?___xxtofl+1)^0,c
  3327   0029B6  0E00               	movlw	0
  3328   0029B8  6E03               	movwf	(?___xxtofl+2)^0,c
  3329   0029BA  0E00               	movlw	0
  3330   0029BC  6E04               	movwf	(?___xxtofl+3)^0,c
  3331   0029BE  EF72  F015         	goto	l1306
  3332   0029C2                     l6102:
  3333   0029C2  0E96               	movlw	150
  3334   0029C4  6E0A               	movwf	___xxtofl@exp^0,c
  3335   0029C6  EFEB  F014         	goto	l6106
  3336   0029CA                     l6104:
  3337   0029CA  2A0A               	incf	___xxtofl@exp^0,f,c
  3338   0029CC  90D8               	bcf	status,0,c
  3339   0029CE  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  3340   0029D0  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  3341   0029D2  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  3342   0029D4  320B               	rrcf	___xxtofl@arg^0,f,c
  3343   0029D6                     l6106:
  3344   0029D6  0E00               	movlw	0
  3345   0029D8  140B               	andwf	___xxtofl@arg^0,w,c
  3346   0029DA  6E05               	movwf	??___xxtofl^0,c
  3347   0029DC  0E00               	movlw	0
  3348   0029DE  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  3349   0029E0  6E06               	movwf	(??___xxtofl+1)^0,c
  3350   0029E2  0E00               	movlw	0
  3351   0029E4  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  3352   0029E6  6E07               	movwf	(??___xxtofl+2)^0,c
  3353   0029E8  0EFE               	movlw	254
  3354   0029EA  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  3355   0029EC  6E08               	movwf	(??___xxtofl+3)^0,c
  3356   0029EE  5005               	movf	??___xxtofl^0,w,c
  3357   0029F0  1006               	iorwf	(??___xxtofl+1)^0,w,c
  3358   0029F2  1007               	iorwf	(??___xxtofl+2)^0,w,c
  3359   0029F4  1008               	iorwf	(??___xxtofl+3)^0,w,c
  3360   0029F6  A4D8               	btfss	status,2,c
  3361   0029F8  EF00  F015         	goto	u5991
  3362   0029FC  EF02  F015         	goto	u5990
  3363   002A00                     u5991:
  3364   002A00  EFE5  F014         	goto	l6104
  3365   002A04                     u5990:
  3366   002A04  EF10  F015         	goto	l1310
  3367   002A08                     l6108:
  3368   002A08  2A0A               	incf	___xxtofl@exp^0,f,c
  3369   002A0A  0E01               	movlw	1
  3370   002A0C  260B               	addwf	___xxtofl@arg^0,f,c
  3371   002A0E  0E00               	movlw	0
  3372   002A10  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  3373   002A12  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  3374   002A14  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  3375   002A16  90D8               	bcf	status,0,c
  3376   002A18  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  3377   002A1A  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  3378   002A1C  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  3379   002A1E  320B               	rrcf	___xxtofl@arg^0,f,c
  3380   002A20                     l1310:
  3381   002A20  0E00               	movlw	0
  3382   002A22  140B               	andwf	___xxtofl@arg^0,w,c
  3383   002A24  6E05               	movwf	??___xxtofl^0,c
  3384   002A26  0E00               	movlw	0
  3385   002A28  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  3386   002A2A  6E06               	movwf	(??___xxtofl+1)^0,c
  3387   002A2C  0E00               	movlw	0
  3388   002A2E  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  3389   002A30  6E07               	movwf	(??___xxtofl+2)^0,c
  3390   002A32  0EFF               	movlw	255
  3391   002A34  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  3392   002A36  6E08               	movwf	(??___xxtofl+3)^0,c
  3393   002A38  5005               	movf	??___xxtofl^0,w,c
  3394   002A3A  1006               	iorwf	(??___xxtofl+1)^0,w,c
  3395   002A3C  1007               	iorwf	(??___xxtofl+2)^0,w,c
  3396   002A3E  1008               	iorwf	(??___xxtofl+3)^0,w,c
  3397   002A40  A4D8               	btfss	status,2,c
  3398   002A42  EF25  F015         	goto	u6001
  3399   002A46  EF27  F015         	goto	u6000
  3400   002A4A                     u6001:
  3401   002A4A  EF04  F015         	goto	l6108
  3402   002A4E                     u6000:
  3403   002A4E  EF2F  F015         	goto	l6116
  3404   002A52                     l6114:
  3405   002A52  060A               	decf	___xxtofl@exp^0,f,c
  3406   002A54  90D8               	bcf	status,0,c
  3407   002A56  360B               	rlcf	___xxtofl@arg^0,f,c
  3408   002A58  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  3409   002A5A  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  3410   002A5C  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  3411   002A5E                     l6116:
  3412   002A5E  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  3413   002A60  EF34  F015         	goto	u6011
  3414   002A64  EF36  F015         	goto	u6010
  3415   002A68                     u6011:
  3416   002A68  EF3E  F015         	goto	l1317
  3417   002A6C                     u6010:
  3418   002A6C  0E02               	movlw	2
  3419   002A6E  600A               	cpfslt	___xxtofl@exp^0,c
  3420   002A70  EF3C  F015         	goto	u6021
  3421   002A74  EF3E  F015         	goto	u6020
  3422   002A78                     u6021:
  3423   002A78  EF29  F015         	goto	l6114
  3424   002A7C                     u6020:
  3425   002A7C                     l1317:
  3426   002A7C  B00A               	btfsc	___xxtofl@exp^0,0,c
  3427   002A7E  EF43  F015         	goto	u6031
  3428   002A82  EF45  F015         	goto	u6030
  3429   002A86                     u6031:
  3430   002A86  EF46  F015         	goto	l6122
  3431   002A8A                     u6030:
  3432   002A8A  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  3433   002A8C                     l6122:
  3434   002A8C  90D8               	bcf	status,0,c
  3435   002A8E  320A               	rrcf	___xxtofl@exp^0,f,c
  3436   002A90  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  3437   002A94  6A06               	clrf	(??___xxtofl+1)^0,c
  3438   002A96  6A07               	clrf	(??___xxtofl+2)^0,c
  3439   002A98  6A08               	clrf	(??___xxtofl+3)^0,c
  3440   002A9A  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  3441   002A9E  6A07               	clrf	(??___xxtofl+2)^0,c
  3442   002AA0  6A06               	clrf	(??___xxtofl+1)^0,c
  3443   002AA2  6A05               	clrf	??___xxtofl^0,c
  3444   002AA4  5005               	movf	??___xxtofl^0,w,c
  3445   002AA6  120B               	iorwf	___xxtofl@arg^0,f,c
  3446   002AA8  5006               	movf	(??___xxtofl+1)^0,w,c
  3447   002AAA  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  3448   002AAC  5007               	movf	(??___xxtofl+2)^0,w,c
  3449   002AAE  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  3450   002AB0  5008               	movf	(??___xxtofl+3)^0,w,c
  3451   002AB2  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  3452   002AB4  5009               	movf	___xxtofl@sign^0,w,c
  3453   002AB6  B4D8               	btfsc	status,2,c
  3454   002AB8  EF60  F015         	goto	u6041
  3455   002ABC  EF62  F015         	goto	u6040
  3456   002AC0                     u6041:
  3457   002AC0  EF6A  F015         	goto	l6132
  3458   002AC4                     u6040:
  3459   002AC4  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  3460   002AC6  EF69  F015         	goto	u6050
  3461   002ACA  EF67  F015         	goto	u6051
  3462   002ACE                     u6051:
  3463   002ACE  EF6A  F015         	goto	l6132
  3464   002AD2                     u6050:
  3465   002AD2  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  3466   002AD4                     l6132:
  3467   002AD4  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  3468   002AD8  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  3469   002ADC  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  3470   002AE0  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  3471   002AE4                     l1306:
  3472   002AE4  0012               	return		;funcret
  3473   002AE6                     __end_of___xxtofl:
  3474                           	callstack 0
  3475                           
  3476 ;; *************** function ___fltol *****************
  3477 ;; Defined at:
  3478 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;  f1              4   50[COMRAM] unsigned char 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  exp1            1   59[COMRAM] unsigned char 
  3483 ;;  sign1           1   58[COMRAM] unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  4   50[COMRAM] long 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3493 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3495 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3496 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3497 ;;Total ram usage:       10 bytes
  3498 ;; Hardware stack levels used: 1
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_convert_rgb2hue
  3503 ;;		_main
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text9
  3508   002F36                     __ptext9:
  3509                           	callstack 0
  3510   002F36                     ___fltol:
  3511                           	callstack 28
  3512   002F36  3435               	rlcf	(___fltol@f1+2)^0,w,c
  3513   002F38  3436               	rlcf	(___fltol@f1+3)^0,w,c
  3514   002F3A  6E3C               	movwf	___fltol@exp1^0,c
  3515   002F3C  503C               	movf	___fltol@exp1^0,w,c
  3516   002F3E  A4D8               	btfss	status,2,c
  3517   002F40  EFA4  F017         	goto	u5891
  3518   002F44  EFA6  F017         	goto	u5890
  3519   002F48                     u5891:
  3520   002F48  EFB0  F017         	goto	l6052
  3521   002F4C                     u5890:
  3522   002F4C                     l6048:
  3523   002F4C  0E00               	movlw	0
  3524   002F4E  6E33               	movwf	?___fltol^0,c
  3525   002F50  0E00               	movlw	0
  3526   002F52  6E34               	movwf	(?___fltol+1)^0,c
  3527   002F54  0E00               	movlw	0
  3528   002F56  6E35               	movwf	(?___fltol+2)^0,c
  3529   002F58  0E00               	movlw	0
  3530   002F5A  6E36               	movwf	(?___fltol+3)^0,c
  3531   002F5C  EF1D  F018         	goto	l945
  3532   002F60                     l6052:
  3533   002F60  C033  F037         	movff	___fltol@f1,??___fltol
  3534   002F64  C034  F038         	movff	___fltol@f1+1,??___fltol+1
  3535   002F68  C035  F039         	movff	___fltol@f1+2,??___fltol+2
  3536   002F6C  C036  F03A         	movff	___fltol@f1+3,??___fltol+3
  3537   002F70  0E20               	movlw	32
  3538   002F72  EFC0  F017         	goto	u5900
  3539   002F76                     u5905:
  3540   002F76  90D8               	bcf	status,0,c
  3541   002F78  323A               	rrcf	(??___fltol+3)^0,f,c
  3542   002F7A  3239               	rrcf	(??___fltol+2)^0,f,c
  3543   002F7C  3238               	rrcf	(??___fltol+1)^0,f,c
  3544   002F7E  3237               	rrcf	??___fltol^0,f,c
  3545   002F80                     u5900:
  3546   002F80  2EE8               	decfsz	wreg,f,c
  3547   002F82  EFBB  F017         	goto	u5905
  3548   002F86  5037               	movf	??___fltol^0,w,c
  3549   002F88  6E3B               	movwf	___fltol@sign1^0,c
  3550   002F8A  8E35               	bsf	(___fltol@f1+2)^0,7,c
  3551   002F8C  0EFF               	movlw	255
  3552   002F8E  1633               	andwf	___fltol@f1^0,f,c
  3553   002F90  0EFF               	movlw	255
  3554   002F92  1634               	andwf	(___fltol@f1+1)^0,f,c
  3555   002F94  0EFF               	movlw	255
  3556   002F96  1635               	andwf	(___fltol@f1+2)^0,f,c
  3557   002F98  0E00               	movlw	0
  3558   002F9A  1636               	andwf	(___fltol@f1+3)^0,f,c
  3559   002F9C  0E96               	movlw	150
  3560   002F9E  5E3C               	subwf	___fltol@exp1^0,f,c
  3561   002FA0  BE3C               	btfsc	___fltol@exp1^0,7,c
  3562   002FA2  EFD7  F017         	goto	u5910
  3563   002FA6  EFD5  F017         	goto	u5911
  3564   002FAA                     u5911:
  3565   002FAA  EFED  F017         	goto	l6072
  3566   002FAE                     u5910:
  3567   002FAE  503C               	movf	___fltol@exp1^0,w,c
  3568   002FB0  0A80               	xorlw	128
  3569   002FB2  0F97               	addlw	151
  3570   002FB4  B0D8               	btfsc	status,0,c
  3571   002FB6  EFDF  F017         	goto	u5921
  3572   002FBA  EFE1  F017         	goto	u5920
  3573   002FBE                     u5921:
  3574   002FBE  EFE3  F017         	goto	l6068
  3575   002FC2                     u5920:
  3576   002FC2  EFA6  F017         	goto	l6048
  3577   002FC6                     l6068:
  3578   002FC6  90D8               	bcf	status,0,c
  3579   002FC8  3236               	rrcf	(___fltol@f1+3)^0,f,c
  3580   002FCA  3235               	rrcf	(___fltol@f1+2)^0,f,c
  3581   002FCC  3234               	rrcf	(___fltol@f1+1)^0,f,c
  3582   002FCE  3233               	rrcf	___fltol@f1^0,f,c
  3583   002FD0  3E3C               	incfsz	___fltol@exp1^0,f,c
  3584   002FD2  EFE3  F017         	goto	l6068
  3585   002FD6  EF05  F018         	goto	l6082
  3586   002FDA                     l6072:
  3587   002FDA  0E1F               	movlw	31
  3588   002FDC  643C               	cpfsgt	___fltol@exp1^0,c
  3589   002FDE  EFF3  F017         	goto	u5931
  3590   002FE2  EFF5  F017         	goto	u5930
  3591   002FE6                     u5931:
  3592   002FE6  EFFD  F017         	goto	l6080
  3593   002FEA                     u5930:
  3594   002FEA  EFA6  F017         	goto	l6048
  3595   002FEE                     l6078:
  3596   002FEE  90D8               	bcf	status,0,c
  3597   002FF0  3633               	rlcf	___fltol@f1^0,f,c
  3598   002FF2  3634               	rlcf	(___fltol@f1+1)^0,f,c
  3599   002FF4  3635               	rlcf	(___fltol@f1+2)^0,f,c
  3600   002FF6  3636               	rlcf	(___fltol@f1+3)^0,f,c
  3601   002FF8  063C               	decf	___fltol@exp1^0,f,c
  3602   002FFA                     l6080:
  3603   002FFA  503C               	movf	___fltol@exp1^0,w,c
  3604   002FFC  A4D8               	btfss	status,2,c
  3605   002FFE  EF03  F018         	goto	u5941
  3606   003002  EF05  F018         	goto	u5940
  3607   003006                     u5941:
  3608   003006  EFF7  F017         	goto	l6078
  3609   00300A                     u5940:
  3610   00300A                     l6082:
  3611   00300A  503B               	movf	___fltol@sign1^0,w,c
  3612   00300C  B4D8               	btfsc	status,2,c
  3613   00300E  EF0B  F018         	goto	u5951
  3614   003012  EF0D  F018         	goto	u5950
  3615   003016                     u5951:
  3616   003016  EF15  F018         	goto	l6086
  3617   00301A                     u5950:
  3618   00301A  1E36               	comf	(___fltol@f1+3)^0,f,c
  3619   00301C  1E35               	comf	(___fltol@f1+2)^0,f,c
  3620   00301E  1E34               	comf	(___fltol@f1+1)^0,f,c
  3621   003020  6C33               	negf	___fltol@f1^0,c
  3622   003022  0E00               	movlw	0
  3623   003024  2234               	addwfc	(___fltol@f1+1)^0,f,c
  3624   003026  2235               	addwfc	(___fltol@f1+2)^0,f,c
  3625   003028  2236               	addwfc	(___fltol@f1+3)^0,f,c
  3626   00302A                     l6086:
  3627   00302A  C033  F033         	movff	___fltol@f1,?___fltol
  3628   00302E  C034  F034         	movff	___fltol@f1+1,?___fltol+1
  3629   003032  C035  F035         	movff	___fltol@f1+2,?___fltol+2
  3630   003036  C036  F036         	movff	___fltol@f1+3,?___fltol+3
  3631   00303A                     l945:
  3632   00303A  0012               	return		;funcret
  3633   00303C                     __end_of___fltol:
  3634                           	callstack 0
  3635                           
  3636 ;; *************** function ___flsub *****************
  3637 ;; Defined at:
  3638 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  b               4   16[COMRAM] long 
  3641 ;;  a               4   20[COMRAM] long 
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;		None
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  4   16[COMRAM] long 
  3646 ;; Registers used:
  3647 ;;		wreg, status,2, status,0, cstack
  3648 ;; Tracked objects:
  3649 ;;		On entry : 0/0
  3650 ;;		On exit  : 0/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3653 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3656 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3657 ;;Total ram usage:        8 bytes
  3658 ;; Hardware stack levels used: 1
  3659 ;; Hardware stack levels required when called: 1
  3660 ;; This function calls:
  3661 ;;		___fladd
  3662 ;; This function is called by:
  3663 ;;		_convert_rgb2hue
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           	psect	text10
  3668   003F70                     __ptext10:
  3669                           	callstack 0
  3670   003F70                     ___flsub:
  3671                           	callstack 27
  3672   003F70  0E00               	movlw	0
  3673   003F72  1A15               	xorwf	___flsub@a^0,f,c
  3674   003F74  0E00               	movlw	0
  3675   003F76  1A16               	xorwf	(___flsub@a+1)^0,f,c
  3676   003F78  0E00               	movlw	0
  3677   003F7A  1A17               	xorwf	(___flsub@a+2)^0,f,c
  3678   003F7C  0E80               	movlw	128
  3679   003F7E  1A18               	xorwf	(___flsub@a+3)^0,f,c
  3680   003F80  C011  F001         	movff	___flsub@b,___fladd@b
  3681   003F84  C012  F002         	movff	___flsub@b+1,___fladd@b+1
  3682   003F88  C013  F003         	movff	___flsub@b+2,___fladd@b+2
  3683   003F8C  C014  F004         	movff	___flsub@b+3,___fladd@b+3
  3684   003F90  C015  F005         	movff	___flsub@a,___fladd@a
  3685   003F94  C016  F006         	movff	___flsub@a+1,___fladd@a+1
  3686   003F98  C017  F007         	movff	___flsub@a+2,___fladd@a+2
  3687   003F9C  C018  F008         	movff	___flsub@a+3,___fladd@a+3
  3688   003FA0  EC21  F00B         	call	___fladd	;wreg free
  3689   003FA4  C001  F011         	movff	?___fladd,?___flsub
  3690   003FA8  C002  F012         	movff	?___fladd+1,?___flsub+1
  3691   003FAC  C003  F013         	movff	?___fladd+2,?___flsub+2
  3692   003FB0  C004  F014         	movff	?___fladd+3,?___flsub+3
  3693   003FB4  0012               	return		;funcret
  3694   003FB6                     __end_of___flsub:
  3695                           	callstack 0
  3696                           
  3697 ;; *************** function ___fladd *****************
  3698 ;; Defined at:
  3699 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;  b               4    0[COMRAM] long 
  3702 ;;  a               4    4[COMRAM] long 
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;  grs             1   15[COMRAM] unsigned char 
  3705 ;;  bexp            1   14[COMRAM] unsigned char 
  3706 ;;  aexp            1   13[COMRAM] unsigned char 
  3707 ;;  signs           1   12[COMRAM] unsigned char 
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  4    0[COMRAM] unsigned char 
  3710 ;; Registers used:
  3711 ;;		wreg, status,2, status,0
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3717 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3718 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3719 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3720 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3721 ;;Total ram usage:       16 bytes
  3722 ;; Hardware stack levels used: 1
  3723 ;; This function calls:
  3724 ;;		Nothing
  3725 ;; This function is called by:
  3726 ;;		_convert_rgb2hue
  3727 ;;		___flsub
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           	psect	text11
  3732   001642                     __ptext11:
  3733                           	callstack 0
  3734   001642                     ___fladd:
  3735                           	callstack 27
  3736   001642  5004               	movf	(___fladd@b+3)^0,w,c
  3737   001644  0B80               	andlw	128
  3738   001646  6E0D               	movwf	___fladd@signs^0,c
  3739   001648  5004               	movf	(___fladd@b+3)^0,w,c
  3740   00164A  2404               	addwf	(___fladd@b+3)^0,w,c
  3741   00164C  6E0F               	movwf	___fladd@bexp^0,c
  3742   00164E  AE03               	btfss	(___fladd@b+2)^0,7,c
  3743   001650  EF2C  F00B         	goto	u4931
  3744   001654  EF2E  F00B         	goto	u4930
  3745   001658                     u4931:
  3746   001658  EF2F  F00B         	goto	l5402
  3747   00165C                     u4930:
  3748   00165C  800F               	bsf	___fladd@bexp^0,0,c
  3749   00165E                     l5402:
  3750   00165E  500F               	movf	___fladd@bexp^0,w,c
  3751   001660  B4D8               	btfsc	status,2,c
  3752   001662  EF35  F00B         	goto	u4941
  3753   001666  EF37  F00B         	goto	u4940
  3754   00166A                     u4941:
  3755   00166A  EF4C  F00B         	goto	l5412
  3756   00166E                     u4940:
  3757   00166E  280F               	incf	___fladd@bexp^0,w,c
  3758   001670  A4D8               	btfss	status,2,c
  3759   001672  EF3D  F00B         	goto	u4951
  3760   001676  EF3F  F00B         	goto	u4950
  3761   00167A                     u4951:
  3762   00167A  EF47  F00B         	goto	l5408
  3763   00167E                     u4950:
  3764   00167E  0E00               	movlw	0
  3765   001680  6E01               	movwf	___fladd@b^0,c
  3766   001682  0E00               	movlw	0
  3767   001684  6E02               	movwf	(___fladd@b+1)^0,c
  3768   001686  0E00               	movlw	0
  3769   001688  6E03               	movwf	(___fladd@b+2)^0,c
  3770   00168A  0E00               	movlw	0
  3771   00168C  6E04               	movwf	(___fladd@b+3)^0,c
  3772   00168E                     l5408:
  3773   00168E  8E03               	bsf	(___fladd@b+2)^0,7,c
  3774   001690  0E00               	movlw	0
  3775   001692  6E04               	movwf	(___fladd@b+3)^0,c
  3776   001694  EF54  F00B         	goto	l5414
  3777   001698                     l5412:
  3778   001698  0E00               	movlw	0
  3779   00169A  6E01               	movwf	___fladd@b^0,c
  3780   00169C  0E00               	movlw	0
  3781   00169E  6E02               	movwf	(___fladd@b+1)^0,c
  3782   0016A0  0E00               	movlw	0
  3783   0016A2  6E03               	movwf	(___fladd@b+2)^0,c
  3784   0016A4  0E00               	movlw	0
  3785   0016A6  6E04               	movwf	(___fladd@b+3)^0,c
  3786   0016A8                     l5414:
  3787   0016A8  5008               	movf	(___fladd@a+3)^0,w,c
  3788   0016AA  0B80               	andlw	128
  3789   0016AC  6E0E               	movwf	___fladd@aexp^0,c
  3790   0016AE  500D               	movf	___fladd@signs^0,w,c
  3791   0016B0  180E               	xorwf	___fladd@aexp^0,w,c
  3792   0016B2  B4D8               	btfsc	status,2,c
  3793   0016B4  EF5E  F00B         	goto	u4961
  3794   0016B8  EF60  F00B         	goto	u4960
  3795   0016BC                     u4961:
  3796   0016BC  EF61  F00B         	goto	l5420
  3797   0016C0                     u4960:
  3798   0016C0  8C0D               	bsf	___fladd@signs^0,6,c
  3799   0016C2                     l5420:
  3800   0016C2  5008               	movf	(___fladd@a+3)^0,w,c
  3801   0016C4  2408               	addwf	(___fladd@a+3)^0,w,c
  3802   0016C6  6E0E               	movwf	___fladd@aexp^0,c
  3803   0016C8  AE07               	btfss	(___fladd@a+2)^0,7,c
  3804   0016CA  EF69  F00B         	goto	u4971
  3805   0016CE  EF6B  F00B         	goto	u4970
  3806   0016D2                     u4971:
  3807   0016D2  EF6C  F00B         	goto	l5426
  3808   0016D6                     u4970:
  3809   0016D6  800E               	bsf	___fladd@aexp^0,0,c
  3810   0016D8                     l5426:
  3811   0016D8  500E               	movf	___fladd@aexp^0,w,c
  3812   0016DA  B4D8               	btfsc	status,2,c
  3813   0016DC  EF72  F00B         	goto	u4981
  3814   0016E0  EF74  F00B         	goto	u4980
  3815   0016E4                     u4981:
  3816   0016E4  EF89  F00B         	goto	l5436
  3817   0016E8                     u4980:
  3818   0016E8  280E               	incf	___fladd@aexp^0,w,c
  3819   0016EA  A4D8               	btfss	status,2,c
  3820   0016EC  EF7A  F00B         	goto	u4991
  3821   0016F0  EF7C  F00B         	goto	u4990
  3822   0016F4                     u4991:
  3823   0016F4  EF84  F00B         	goto	l5432
  3824   0016F8                     u4990:
  3825   0016F8  0E00               	movlw	0
  3826   0016FA  6E05               	movwf	___fladd@a^0,c
  3827   0016FC  0E00               	movlw	0
  3828   0016FE  6E06               	movwf	(___fladd@a+1)^0,c
  3829   001700  0E00               	movlw	0
  3830   001702  6E07               	movwf	(___fladd@a+2)^0,c
  3831   001704  0E00               	movlw	0
  3832   001706  6E08               	movwf	(___fladd@a+3)^0,c
  3833   001708                     l5432:
  3834   001708  8E07               	bsf	(___fladd@a+2)^0,7,c
  3835   00170A  0E00               	movlw	0
  3836   00170C  6E08               	movwf	(___fladd@a+3)^0,c
  3837   00170E  EF91  F00B         	goto	l5438
  3838   001712                     l5436:
  3839   001712  0E00               	movlw	0
  3840   001714  6E05               	movwf	___fladd@a^0,c
  3841   001716  0E00               	movlw	0
  3842   001718  6E06               	movwf	(___fladd@a+1)^0,c
  3843   00171A  0E00               	movlw	0
  3844   00171C  6E07               	movwf	(___fladd@a+2)^0,c
  3845   00171E  0E00               	movlw	0
  3846   001720  6E08               	movwf	(___fladd@a+3)^0,c
  3847   001722                     l5438:
  3848   001722  500F               	movf	___fladd@bexp^0,w,c
  3849   001724  5C0E               	subwf	___fladd@aexp^0,w,c
  3850   001726  B0D8               	btfsc	status,0,c
  3851   001728  EF98  F00B         	goto	u5001
  3852   00172C  EF9A  F00B         	goto	u5000
  3853   001730                     u5001:
  3854   001730  EFC1  F00B         	goto	l5474
  3855   001734                     u5000:
  3856   001734  AC0D               	btfss	___fladd@signs^0,6,c
  3857   001736  EF9F  F00B         	goto	u5011
  3858   00173A  EFA1  F00B         	goto	u5010
  3859   00173E                     u5011:
  3860   00173E  EFA3  F00B         	goto	l5444
  3861   001742                     u5010:
  3862   001742  0E80               	movlw	128
  3863   001744  1A0D               	xorwf	___fladd@signs^0,f,c
  3864   001746                     l5444:
  3865   001746  C00F  F010         	movff	___fladd@bexp,___fladd@grs
  3866   00174A  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  3867   00174E  C010  F00E         	movff	___fladd@grs,___fladd@aexp
  3868   001752  C001  F010         	movff	___fladd@b,___fladd@grs
  3869   001756  C005  F001         	movff	___fladd@a,___fladd@b
  3870   00175A  C010  F005         	movff	___fladd@grs,___fladd@a
  3871   00175E  C002  F010         	movff	___fladd@b+1,___fladd@grs
  3872   001762  C006  F002         	movff	___fladd@a+1,___fladd@b+1
  3873   001766  C010  F006         	movff	___fladd@grs,___fladd@a+1
  3874   00176A  C003  F010         	movff	___fladd@b+2,___fladd@grs
  3875   00176E  C007  F003         	movff	___fladd@a+2,___fladd@b+2
  3876   001772  C010  F007         	movff	___fladd@grs,___fladd@a+2
  3877   001776  C004  F010         	movff	___fladd@b+3,___fladd@grs
  3878   00177A  C008  F004         	movff	___fladd@a+3,___fladd@b+3
  3879   00177E  C010  F008         	movff	___fladd@grs,___fladd@a+3
  3880   001782                     l5474:
  3881   001782  0E00               	movlw	0
  3882   001784  6E10               	movwf	___fladd@grs^0,c
  3883   001786  500F               	movf	___fladd@bexp^0,w,c
  3884   001788  C00E  F009         	movff	___fladd@aexp,??___fladd
  3885   00178C  6A0A               	clrf	(??___fladd+1)^0,c
  3886   00178E  5E09               	subwf	??___fladd^0,f,c
  3887   001790  0E00               	movlw	0
  3888   001792  5A0A               	subwfb	(??___fladd+1)^0,f,c
  3889   001794  BE0A               	btfsc	(??___fladd+1)^0,7,c
  3890   001796  EFD6  F00B         	goto	u5021
  3891   00179A  500A               	movf	(??___fladd+1)^0,w,c
  3892   00179C  E109               	bnz	u5020
  3893   00179E  0E1A               	movlw	26
  3894   0017A0  5C09               	subwf	??___fladd^0,w,c
  3895   0017A2  A0D8               	btfss	status,0,c
  3896   0017A4  EFD6  F00B         	goto	u5021
  3897   0017A8  EFD8  F00B         	goto	u5020
  3898   0017AC                     u5021:
  3899   0017AC  EF0F  F00C         	goto	l1177
  3900   0017B0                     u5020:
  3901   0017B0  5001               	movf	___fladd@b^0,w,c
  3902   0017B2  1002               	iorwf	(___fladd@b+1)^0,w,c
  3903   0017B4  1003               	iorwf	(___fladd@b+2)^0,w,c
  3904   0017B6  1004               	iorwf	(___fladd@b+3)^0,w,c
  3905   0017B8  A4D8               	btfss	status,2,c
  3906   0017BA  EFE1  F00B         	goto	u5031
  3907   0017BE  EFE4  F00B         	goto	u5030
  3908   0017C2                     u5031:
  3909   0017C2  0E01               	movlw	1
  3910   0017C4  EFE5  F00B         	goto	u5040
  3911   0017C8                     u5030:
  3912   0017C8  0E00               	movlw	0
  3913   0017CA                     u5040:
  3914   0017CA  6E10               	movwf	___fladd@grs^0,c
  3915   0017CC  0E00               	movlw	0
  3916   0017CE  6E01               	movwf	___fladd@b^0,c
  3917   0017D0  0E00               	movlw	0
  3918   0017D2  6E02               	movwf	(___fladd@b+1)^0,c
  3919   0017D4  0E00               	movlw	0
  3920   0017D6  6E03               	movwf	(___fladd@b+2)^0,c
  3921   0017D8  0E00               	movlw	0
  3922   0017DA  6E04               	movwf	(___fladd@b+3)^0,c
  3923   0017DC  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  3924   0017E0  EF18  F00C         	goto	l1176
  3925   0017E4                     l1178:
  3926   0017E4  A010               	btfss	___fladd@grs^0,0,c
  3927   0017E6  EFF7  F00B         	goto	u5051
  3928   0017EA  EFF9  F00B         	goto	u5050
  3929   0017EE                     u5051:
  3930   0017EE  EFFF  F00B         	goto	l5486
  3931   0017F2                     u5050:
  3932   0017F2  90D8               	bcf	status,0,c
  3933   0017F4  3010               	rrcf	___fladd@grs^0,w,c
  3934   0017F6  0901               	iorlw	1
  3935   0017F8  6E10               	movwf	___fladd@grs^0,c
  3936   0017FA  EF01  F00C         	goto	l5488
  3937   0017FE                     l5486:
  3938   0017FE  90D8               	bcf	status,0,c
  3939   001800  3210               	rrcf	___fladd@grs^0,f,c
  3940   001802                     l5488:
  3941   001802  A001               	btfss	___fladd@b^0,0,c
  3942   001804  EF06  F00C         	goto	u5061
  3943   001808  EF08  F00C         	goto	u5060
  3944   00180C                     u5061:
  3945   00180C  EF09  F00C         	goto	l5492
  3946   001810                     u5060:
  3947   001810  8E10               	bsf	___fladd@grs^0,7,c
  3948   001812                     l5492:
  3949   001812  3404               	rlcf	(___fladd@b+3)^0,w,c
  3950   001814  3204               	rrcf	(___fladd@b+3)^0,f,c
  3951   001816  3203               	rrcf	(___fladd@b+2)^0,f,c
  3952   001818  3202               	rrcf	(___fladd@b+1)^0,f,c
  3953   00181A  3201               	rrcf	___fladd@b^0,f,c
  3954   00181C  2A0F               	incf	___fladd@bexp^0,f,c
  3955   00181E                     l1177:
  3956   00181E  500E               	movf	___fladd@aexp^0,w,c
  3957   001820  5C0F               	subwf	___fladd@bexp^0,w,c
  3958   001822  A0D8               	btfss	status,0,c
  3959   001824  EF16  F00C         	goto	u5071
  3960   001828  EF18  F00C         	goto	u5070
  3961   00182C                     u5071:
  3962   00182C  EFF2  F00B         	goto	l1178
  3963   001830                     u5070:
  3964   001830                     l1176:
  3965   001830  BC0D               	btfsc	___fladd@signs^0,6,c
  3966   001832  EF1D  F00C         	goto	u5081
  3967   001836  EF1F  F00C         	goto	u5080
  3968   00183A                     u5081:
  3969   00183A  EF5F  F00C         	goto	l5520
  3970   00183E                     u5080:
  3971   00183E  500F               	movf	___fladd@bexp^0,w,c
  3972   001840  A4D8               	btfss	status,2,c
  3973   001842  EF25  F00C         	goto	u5091
  3974   001846  EF27  F00C         	goto	u5090
  3975   00184A                     u5091:
  3976   00184A  EF31  F00C         	goto	l5502
  3977   00184E                     u5090:
  3978   00184E  0E00               	movlw	0
  3979   001850  6E01               	movwf	?___fladd^0,c
  3980   001852  0E00               	movlw	0
  3981   001854  6E02               	movwf	(?___fladd+1)^0,c
  3982   001856  0E00               	movlw	0
  3983   001858  6E03               	movwf	(?___fladd+2)^0,c
  3984   00185A  0E00               	movlw	0
  3985   00185C  6E04               	movwf	(?___fladd+3)^0,c
  3986   00185E  EF80  F00D         	goto	l1185
  3987   001862                     l5502:
  3988   001862  5005               	movf	___fladd@a^0,w,c
  3989   001864  2601               	addwf	___fladd@b^0,f,c
  3990   001866  5006               	movf	(___fladd@a+1)^0,w,c
  3991   001868  2202               	addwfc	(___fladd@b+1)^0,f,c
  3992   00186A  5007               	movf	(___fladd@a+2)^0,w,c
  3993   00186C  2203               	addwfc	(___fladd@b+2)^0,f,c
  3994   00186E  5008               	movf	(___fladd@a+3)^0,w,c
  3995   001870  2204               	addwfc	(___fladd@b+3)^0,f,c
  3996   001872  A004               	btfss	(___fladd@b+3)^0,0,c
  3997   001874  EF3E  F00C         	goto	u5101
  3998   001878  EF40  F00C         	goto	u5100
  3999   00187C                     u5101:
  4000   00187C  EFEC  F00C         	goto	l5556
  4001   001880                     u5100:
  4002   001880  A010               	btfss	___fladd@grs^0,0,c
  4003   001882  EF45  F00C         	goto	u5111
  4004   001886  EF47  F00C         	goto	u5110
  4005   00188A                     u5111:
  4006   00188A  EF4D  F00C         	goto	l5510
  4007   00188E                     u5110:
  4008   00188E  90D8               	bcf	status,0,c
  4009   001890  3010               	rrcf	___fladd@grs^0,w,c
  4010   001892  0901               	iorlw	1
  4011   001894  6E10               	movwf	___fladd@grs^0,c
  4012   001896  EF4F  F00C         	goto	l5512
  4013   00189A                     l5510:
  4014   00189A  90D8               	bcf	status,0,c
  4015   00189C  3210               	rrcf	___fladd@grs^0,f,c
  4016   00189E                     l5512:
  4017   00189E  A001               	btfss	___fladd@b^0,0,c
  4018   0018A0  EF54  F00C         	goto	u5121
  4019   0018A4  EF56  F00C         	goto	u5120
  4020   0018A8                     u5121:
  4021   0018A8  EF57  F00C         	goto	l5516
  4022   0018AC                     u5120:
  4023   0018AC  8E10               	bsf	___fladd@grs^0,7,c
  4024   0018AE                     l5516:
  4025   0018AE  3404               	rlcf	(___fladd@b+3)^0,w,c
  4026   0018B0  3204               	rrcf	(___fladd@b+3)^0,f,c
  4027   0018B2  3203               	rrcf	(___fladd@b+2)^0,f,c
  4028   0018B4  3202               	rrcf	(___fladd@b+1)^0,f,c
  4029   0018B6  3201               	rrcf	___fladd@b^0,f,c
  4030   0018B8  2A0F               	incf	___fladd@bexp^0,f,c
  4031   0018BA  EFEC  F00C         	goto	l5556
  4032   0018BE                     l5520:
  4033   0018BE  5005               	movf	___fladd@a^0,w,c
  4034   0018C0  5C01               	subwf	___fladd@b^0,w,c
  4035   0018C2  5006               	movf	(___fladd@a+1)^0,w,c
  4036   0018C4  5802               	subwfb	(___fladd@b+1)^0,w,c
  4037   0018C6  5007               	movf	(___fladd@a+2)^0,w,c
  4038   0018C8  5803               	subwfb	(___fladd@b+2)^0,w,c
  4039   0018CA  5004               	movf	(___fladd@b+3)^0,w,c
  4040   0018CC  0A80               	xorlw	128
  4041   0018CE  6E09               	movwf	??___fladd^0,c
  4042   0018D0  5008               	movf	(___fladd@a+3)^0,w,c
  4043   0018D2  0A80               	xorlw	128
  4044   0018D4  5809               	subwfb	??___fladd^0,w,c
  4045   0018D6  B0D8               	btfsc	status,0,c
  4046   0018D8  EF70  F00C         	goto	u5131
  4047   0018DC  EF72  F00C         	goto	u5130
  4048   0018E0                     u5131:
  4049   0018E0  EF9D  F00C         	goto	l5530
  4050   0018E4                     u5130:
  4051   0018E4  5001               	movf	___fladd@b^0,w,c
  4052   0018E6  5C05               	subwf	___fladd@a^0,w,c
  4053   0018E8  6E09               	movwf	??___fladd^0,c
  4054   0018EA  5002               	movf	(___fladd@b+1)^0,w,c
  4055   0018EC  5806               	subwfb	(___fladd@a+1)^0,w,c
  4056   0018EE  6E0A               	movwf	(??___fladd+1)^0,c
  4057   0018F0  5003               	movf	(___fladd@b+2)^0,w,c
  4058   0018F2  5807               	subwfb	(___fladd@a+2)^0,w,c
  4059   0018F4  6E0B               	movwf	(??___fladd+2)^0,c
  4060   0018F6  5004               	movf	(___fladd@b+3)^0,w,c
  4061   0018F8  5808               	subwfb	(___fladd@a+3)^0,w,c
  4062   0018FA  6E0C               	movwf	(??___fladd+3)^0,c
  4063   0018FC  0EFF               	movlw	255
  4064   0018FE  2409               	addwf	??___fladd^0,w,c
  4065   001900  6E01               	movwf	___fladd@b^0,c
  4066   001902  0EFF               	movlw	255
  4067   001904  200A               	addwfc	(??___fladd+1)^0,w,c
  4068   001906  6E02               	movwf	(___fladd@b+1)^0,c
  4069   001908  0EFF               	movlw	255
  4070   00190A  200B               	addwfc	(??___fladd+2)^0,w,c
  4071   00190C  6E03               	movwf	(___fladd@b+2)^0,c
  4072   00190E  0EFF               	movlw	255
  4073   001910  200C               	addwfc	(??___fladd+3)^0,w,c
  4074   001912  6E04               	movwf	(___fladd@b+3)^0,c
  4075   001914  0E80               	movlw	128
  4076   001916  1A0D               	xorwf	___fladd@signs^0,f,c
  4077   001918  6C10               	negf	___fladd@grs^0,c
  4078   00191A  5010               	movf	___fladd@grs^0,w,c
  4079   00191C  A4D8               	btfss	status,2,c
  4080   00191E  EF93  F00C         	goto	u5141
  4081   001922  EF95  F00C         	goto	u5140
  4082   001926                     u5141:
  4083   001926  EFA5  F00C         	goto	l1193
  4084   00192A                     u5140:
  4085   00192A  0E01               	movlw	1
  4086   00192C  2601               	addwf	___fladd@b^0,f,c
  4087   00192E  0E00               	movlw	0
  4088   001930  2202               	addwfc	(___fladd@b+1)^0,f,c
  4089   001932  2203               	addwfc	(___fladd@b+2)^0,f,c
  4090   001934  2204               	addwfc	(___fladd@b+3)^0,f,c
  4091   001936  EFA5  F00C         	goto	l1193
  4092   00193A                     l5530:
  4093   00193A  5005               	movf	___fladd@a^0,w,c
  4094   00193C  5E01               	subwf	___fladd@b^0,f,c
  4095   00193E  5006               	movf	(___fladd@a+1)^0,w,c
  4096   001940  5A02               	subwfb	(___fladd@b+1)^0,f,c
  4097   001942  5007               	movf	(___fladd@a+2)^0,w,c
  4098   001944  5A03               	subwfb	(___fladd@b+2)^0,f,c
  4099   001946  5008               	movf	(___fladd@a+3)^0,w,c
  4100   001948  5A04               	subwfb	(___fladd@b+3)^0,f,c
  4101   00194A                     l1193:
  4102   00194A  5001               	movf	___fladd@b^0,w,c
  4103   00194C  1002               	iorwf	(___fladd@b+1)^0,w,c
  4104   00194E  1003               	iorwf	(___fladd@b+2)^0,w,c
  4105   001950  1004               	iorwf	(___fladd@b+3)^0,w,c
  4106   001952  A4D8               	btfss	status,2,c
  4107   001954  EFAE  F00C         	goto	u5151
  4108   001958  EFB0  F00C         	goto	u5150
  4109   00195C                     u5151:
  4110   00195C  EFE5  F00C         	goto	l5554
  4111   001960                     u5150:
  4112   001960  5010               	movf	___fladd@grs^0,w,c
  4113   001962  A4D8               	btfss	status,2,c
  4114   001964  EFB6  F00C         	goto	u5161
  4115   001968  EFB8  F00C         	goto	u5160
  4116   00196C                     u5161:
  4117   00196C  EFE5  F00C         	goto	l5554
  4118   001970                     u5160:
  4119   001970  0E00               	movlw	0
  4120   001972  6E01               	movwf	?___fladd^0,c
  4121   001974  0E00               	movlw	0
  4122   001976  6E02               	movwf	(?___fladd+1)^0,c
  4123   001978  0E00               	movlw	0
  4124   00197A  6E03               	movwf	(?___fladd+2)^0,c
  4125   00197C  0E00               	movlw	0
  4126   00197E  6E04               	movwf	(?___fladd+3)^0,c
  4127   001980  EF80  F00D         	goto	l1185
  4128   001984                     l5538:
  4129   001984  90D8               	bcf	status,0,c
  4130   001986  3601               	rlcf	___fladd@b^0,f,c
  4131   001988  3602               	rlcf	(___fladd@b+1)^0,f,c
  4132   00198A  3603               	rlcf	(___fladd@b+2)^0,f,c
  4133   00198C  3604               	rlcf	(___fladd@b+3)^0,f,c
  4134   00198E  AE10               	btfss	___fladd@grs^0,7,c
  4135   001990  EFCC  F00C         	goto	u5171
  4136   001994  EFCE  F00C         	goto	u5170
  4137   001998                     u5171:
  4138   001998  EFCF  F00C         	goto	l5544
  4139   00199C                     u5170:
  4140   00199C  8001               	bsf	___fladd@b^0,0,c
  4141   00199E                     l5544:
  4142   00199E  A010               	btfss	___fladd@grs^0,0,c
  4143   0019A0  EFD4  F00C         	goto	u5181
  4144   0019A4  EFD6  F00C         	goto	u5180
  4145   0019A8                     u5181:
  4146   0019A8  EFDA  F00C         	goto	l5548
  4147   0019AC                     u5180:
  4148   0019AC  80D8               	bsf	status,0,c
  4149   0019AE  3610               	rlcf	___fladd@grs^0,f,c
  4150   0019B0  EFDC  F00C         	goto	l5550
  4151   0019B4                     l5548:
  4152   0019B4  90D8               	bcf	status,0,c
  4153   0019B6  3610               	rlcf	___fladd@grs^0,f,c
  4154   0019B8                     l5550:
  4155   0019B8  500F               	movf	___fladd@bexp^0,w,c
  4156   0019BA  B4D8               	btfsc	status,2,c
  4157   0019BC  EFE2  F00C         	goto	u5191
  4158   0019C0  EFE4  F00C         	goto	u5190
  4159   0019C4                     u5191:
  4160   0019C4  EFE5  F00C         	goto	l5554
  4161   0019C8                     u5190:
  4162   0019C8  060F               	decf	___fladd@bexp^0,f,c
  4163   0019CA                     l5554:
  4164   0019CA  AE03               	btfss	(___fladd@b+2)^0,7,c
  4165   0019CC  EFEA  F00C         	goto	u5201
  4166   0019D0  EFEC  F00C         	goto	u5200
  4167   0019D4                     u5201:
  4168   0019D4  EFC2  F00C         	goto	l5538
  4169   0019D8                     u5200:
  4170   0019D8                     l5556:
  4171   0019D8  0E00               	movlw	0
  4172   0019DA  6E0E               	movwf	___fladd@aexp^0,c
  4173   0019DC  AE10               	btfss	___fladd@grs^0,7,c
  4174   0019DE  EFF3  F00C         	goto	u5211
  4175   0019E2  EFF5  F00C         	goto	u5210
  4176   0019E6                     u5211:
  4177   0019E6  EF0D  F00D         	goto	l1202
  4178   0019EA                     u5210:
  4179   0019EA  C010  F009         	movff	___fladd@grs,??___fladd
  4180   0019EE  0E7F               	movlw	127
  4181   0019F0  1609               	andwf	??___fladd^0,f,c
  4182   0019F2  B4D8               	btfsc	status,2,c
  4183   0019F4  EFFE  F00C         	goto	u5221
  4184   0019F8  EF00  F00D         	goto	u5220
  4185   0019FC                     u5221:
  4186   0019FC  EF04  F00D         	goto	l1203
  4187   001A00                     u5220:
  4188   001A00                     l5562:
  4189   001A00  0E01               	movlw	1
  4190   001A02  6E0E               	movwf	___fladd@aexp^0,c
  4191   001A04  EF0D  F00D         	goto	l1202
  4192   001A08                     l1203:
  4193   001A08  A001               	btfss	___fladd@b^0,0,c
  4194   001A0A  EF09  F00D         	goto	u5231
  4195   001A0E  EF0B  F00D         	goto	u5230
  4196   001A12                     u5231:
  4197   001A12  EF0D  F00D         	goto	l1202
  4198   001A16                     u5230:
  4199   001A16  EF00  F00D         	goto	l5562
  4200   001A1A                     l1202:
  4201   001A1A  500E               	movf	___fladd@aexp^0,w,c
  4202   001A1C  B4D8               	btfsc	status,2,c
  4203   001A1E  EF13  F00D         	goto	u5241
  4204   001A22  EF15  F00D         	goto	u5240
  4205   001A26                     u5241:
  4206   001A26  EF40  F00D         	goto	l5574
  4207   001A2A                     u5240:
  4208   001A2A  0E01               	movlw	1
  4209   001A2C  2601               	addwf	___fladd@b^0,f,c
  4210   001A2E  0E00               	movlw	0
  4211   001A30  2202               	addwfc	(___fladd@b+1)^0,f,c
  4212   001A32  2203               	addwfc	(___fladd@b+2)^0,f,c
  4213   001A34  2204               	addwfc	(___fladd@b+3)^0,f,c
  4214   001A36  A004               	btfss	(___fladd@b+3)^0,0,c
  4215   001A38  EF20  F00D         	goto	u5251
  4216   001A3C  EF22  F00D         	goto	u5250
  4217   001A40                     u5251:
  4218   001A40  EF40  F00D         	goto	l5574
  4219   001A44                     u5250:
  4220   001A44  C001  F009         	movff	___fladd@b,??___fladd
  4221   001A48  C002  F00A         	movff	___fladd@b+1,??___fladd+1
  4222   001A4C  C003  F00B         	movff	___fladd@b+2,??___fladd+2
  4223   001A50  C004  F00C         	movff	___fladd@b+3,??___fladd+3
  4224   001A54  340C               	rlcf	(??___fladd+3)^0,w,c
  4225   001A56  320C               	rrcf	(??___fladd+3)^0,f,c
  4226   001A58  320B               	rrcf	(??___fladd+2)^0,f,c
  4227   001A5A  320A               	rrcf	(??___fladd+1)^0,f,c
  4228   001A5C  3209               	rrcf	??___fladd^0,f,c
  4229   001A5E  C009  F001         	movff	??___fladd,___fladd@b
  4230   001A62  C00A  F002         	movff	??___fladd+1,___fladd@b+1
  4231   001A66  C00B  F003         	movff	??___fladd+2,___fladd@b+2
  4232   001A6A  C00C  F004         	movff	??___fladd+3,___fladd@b+3
  4233   001A6E  280F               	incf	___fladd@bexp^0,w,c
  4234   001A70  B4D8               	btfsc	status,2,c
  4235   001A72  EF3D  F00D         	goto	u5261
  4236   001A76  EF3F  F00D         	goto	u5260
  4237   001A7A                     u5261:
  4238   001A7A  EF40  F00D         	goto	l5574
  4239   001A7E                     u5260:
  4240   001A7E  2A0F               	incf	___fladd@bexp^0,f,c
  4241   001A80                     l5574:
  4242   001A80  280F               	incf	___fladd@bexp^0,w,c
  4243   001A82  B4D8               	btfsc	status,2,c
  4244   001A84  EF46  F00D         	goto	u5271
  4245   001A88  EF48  F00D         	goto	u5270
  4246   001A8C                     u5271:
  4247   001A8C  EF50  F00D         	goto	l5578
  4248   001A90                     u5270:
  4249   001A90  500F               	movf	___fladd@bexp^0,w,c
  4250   001A92  A4D8               	btfss	status,2,c
  4251   001A94  EF4E  F00D         	goto	u5281
  4252   001A98  EF50  F00D         	goto	u5280
  4253   001A9C                     u5281:
  4254   001A9C  EF62  F00D         	goto	l5582
  4255   001AA0                     u5280:
  4256   001AA0                     l5578:
  4257   001AA0  0E00               	movlw	0
  4258   001AA2  6E01               	movwf	___fladd@b^0,c
  4259   001AA4  0E00               	movlw	0
  4260   001AA6  6E02               	movwf	(___fladd@b+1)^0,c
  4261   001AA8  0E00               	movlw	0
  4262   001AAA  6E03               	movwf	(___fladd@b+2)^0,c
  4263   001AAC  0E00               	movlw	0
  4264   001AAE  6E04               	movwf	(___fladd@b+3)^0,c
  4265   001AB0  500F               	movf	___fladd@bexp^0,w,c
  4266   001AB2  A4D8               	btfss	status,2,c
  4267   001AB4  EF5E  F00D         	goto	u5291
  4268   001AB8  EF60  F00D         	goto	u5290
  4269   001ABC                     u5291:
  4270   001ABC  EF62  F00D         	goto	l5582
  4271   001AC0                     u5290:
  4272   001AC0  0E00               	movlw	0
  4273   001AC2  6E0D               	movwf	___fladd@signs^0,c
  4274   001AC4                     l5582:
  4275   001AC4  A00F               	btfss	___fladd@bexp^0,0,c
  4276   001AC6  EF67  F00D         	goto	u5301
  4277   001ACA  EF69  F00D         	goto	u5300
  4278   001ACE                     u5301:
  4279   001ACE  EF6C  F00D         	goto	l5586
  4280   001AD2                     u5300:
  4281   001AD2  8E03               	bsf	(___fladd@b+2)^0,7,c
  4282   001AD4  EF6D  F00D         	goto	l5588
  4283   001AD8                     l5586:
  4284   001AD8  9E03               	bcf	(___fladd@b+2)^0,7,c
  4285   001ADA                     l5588:
  4286   001ADA  90D8               	bcf	status,0,c
  4287   001ADC  300F               	rrcf	___fladd@bexp^0,w,c
  4288   001ADE  6E04               	movwf	(___fladd@b+3)^0,c
  4289   001AE0  AE0D               	btfss	___fladd@signs^0,7,c
  4290   001AE2  EF75  F00D         	goto	u5311
  4291   001AE6  EF77  F00D         	goto	u5310
  4292   001AEA                     u5311:
  4293   001AEA  EF78  F00D         	goto	l5594
  4294   001AEE                     u5310:
  4295   001AEE  8E04               	bsf	(___fladd@b+3)^0,7,c
  4296   001AF0                     l5594:
  4297   001AF0  C001  F001         	movff	___fladd@b,?___fladd
  4298   001AF4  C002  F002         	movff	___fladd@b+1,?___fladd+1
  4299   001AF8  C003  F003         	movff	___fladd@b+2,?___fladd+2
  4300   001AFC  C004  F004         	movff	___fladd@b+3,?___fladd+3
  4301   001B00                     l1185:
  4302   001B00  0012               	return		;funcret
  4303   001B02                     __end_of___fladd:
  4304                           	callstack 0
  4305                           
  4306 ;; *************** function ___flmul *****************
  4307 ;; Defined at:
  4308 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  b               4    0[COMRAM] unsigned char 
  4311 ;;  a               4    4[COMRAM] unsigned char 
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;  prod            4   19[COMRAM] struct .
  4314 ;;  grs             4   14[COMRAM] unsigned long 
  4315 ;;  temp            2   23[COMRAM] struct .
  4316 ;;  bexp            1   18[COMRAM] unsigned char 
  4317 ;;  aexp            1   13[COMRAM] unsigned char 
  4318 ;;  sign            1   12[COMRAM] unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  4    0[COMRAM] unsigned char 
  4321 ;; Registers used:
  4322 ;;		wreg, status,2, status,0, prodl, prodh
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4328 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4329 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4330 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4331 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4332 ;;Total ram usage:       25 bytes
  4333 ;; Hardware stack levels used: 1
  4334 ;; This function calls:
  4335 ;;		Nothing
  4336 ;; This function is called by:
  4337 ;;		_convert_rgb2hue
  4338 ;;		_main
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text12
  4343   001B02                     __ptext12:
  4344                           	callstack 0
  4345   001B02                     ___flmul:
  4346                           	callstack 28
  4347   001B02  5004               	movf	(___flmul@b+3)^0,w,c
  4348   001B04  0B80               	andlw	128
  4349   001B06  6E0D               	movwf	___flmul@sign^0,c
  4350   001B08  5004               	movf	(___flmul@b+3)^0,w,c
  4351   001B0A  2404               	addwf	(___flmul@b+3)^0,w,c
  4352   001B0C  6E13               	movwf	___flmul@bexp^0,c
  4353   001B0E  AE03               	btfss	(___flmul@b+2)^0,7,c
  4354   001B10  EF8C  F00D         	goto	u5621
  4355   001B14  EF8E  F00D         	goto	u5620
  4356   001B18                     u5621:
  4357   001B18  EF8F  F00D         	goto	l5878
  4358   001B1C                     u5620:
  4359   001B1C  8013               	bsf	___flmul@bexp^0,0,c
  4360   001B1E                     l5878:
  4361   001B1E  5013               	movf	___flmul@bexp^0,w,c
  4362   001B20  B4D8               	btfsc	status,2,c
  4363   001B22  EF95  F00D         	goto	u5631
  4364   001B26  EF97  F00D         	goto	u5630
  4365   001B2A                     u5631:
  4366   001B2A  EFAA  F00D         	goto	l5886
  4367   001B2E                     u5630:
  4368   001B2E  2813               	incf	___flmul@bexp^0,w,c
  4369   001B30  A4D8               	btfss	status,2,c
  4370   001B32  EF9D  F00D         	goto	u5641
  4371   001B36  EF9F  F00D         	goto	u5640
  4372   001B3A                     u5641:
  4373   001B3A  EFA7  F00D         	goto	l5884
  4374   001B3E                     u5640:
  4375   001B3E  0E00               	movlw	0
  4376   001B40  6E01               	movwf	___flmul@b^0,c
  4377   001B42  0E00               	movlw	0
  4378   001B44  6E02               	movwf	(___flmul@b+1)^0,c
  4379   001B46  0E00               	movlw	0
  4380   001B48  6E03               	movwf	(___flmul@b+2)^0,c
  4381   001B4A  0E00               	movlw	0
  4382   001B4C  6E04               	movwf	(___flmul@b+3)^0,c
  4383   001B4E                     l5884:
  4384   001B4E  8E03               	bsf	(___flmul@b+2)^0,7,c
  4385   001B50  EFB2  F00D         	goto	l5888
  4386   001B54                     l5886:
  4387   001B54  0E00               	movlw	0
  4388   001B56  6E01               	movwf	___flmul@b^0,c
  4389   001B58  0E00               	movlw	0
  4390   001B5A  6E02               	movwf	(___flmul@b+1)^0,c
  4391   001B5C  0E00               	movlw	0
  4392   001B5E  6E03               	movwf	(___flmul@b+2)^0,c
  4393   001B60  0E00               	movlw	0
  4394   001B62  6E04               	movwf	(___flmul@b+3)^0,c
  4395   001B64                     l5888:
  4396   001B64  5008               	movf	(___flmul@a+3)^0,w,c
  4397   001B66  0B80               	andlw	128
  4398   001B68  1A0D               	xorwf	___flmul@sign^0,f,c
  4399   001B6A  5008               	movf	(___flmul@a+3)^0,w,c
  4400   001B6C  2408               	addwf	(___flmul@a+3)^0,w,c
  4401   001B6E  6E0E               	movwf	___flmul@aexp^0,c
  4402   001B70  AE07               	btfss	(___flmul@a+2)^0,7,c
  4403   001B72  EFBD  F00D         	goto	u5651
  4404   001B76  EFBF  F00D         	goto	u5650
  4405   001B7A                     u5651:
  4406   001B7A  EFC0  F00D         	goto	l5896
  4407   001B7E                     u5650:
  4408   001B7E  800E               	bsf	___flmul@aexp^0,0,c
  4409   001B80                     l5896:
  4410   001B80  500E               	movf	___flmul@aexp^0,w,c
  4411   001B82  B4D8               	btfsc	status,2,c
  4412   001B84  EFC6  F00D         	goto	u5661
  4413   001B88  EFC8  F00D         	goto	u5660
  4414   001B8C                     u5661:
  4415   001B8C  EFDB  F00D         	goto	l5904
  4416   001B90                     u5660:
  4417   001B90  280E               	incf	___flmul@aexp^0,w,c
  4418   001B92  A4D8               	btfss	status,2,c
  4419   001B94  EFCE  F00D         	goto	u5671
  4420   001B98  EFD0  F00D         	goto	u5670
  4421   001B9C                     u5671:
  4422   001B9C  EFD8  F00D         	goto	l5902
  4423   001BA0                     u5670:
  4424   001BA0  0E00               	movlw	0
  4425   001BA2  6E05               	movwf	___flmul@a^0,c
  4426   001BA4  0E00               	movlw	0
  4427   001BA6  6E06               	movwf	(___flmul@a+1)^0,c
  4428   001BA8  0E00               	movlw	0
  4429   001BAA  6E07               	movwf	(___flmul@a+2)^0,c
  4430   001BAC  0E00               	movlw	0
  4431   001BAE  6E08               	movwf	(___flmul@a+3)^0,c
  4432   001BB0                     l5902:
  4433   001BB0  8E07               	bsf	(___flmul@a+2)^0,7,c
  4434   001BB2  EFE3  F00D         	goto	l1262
  4435   001BB6                     l5904:
  4436   001BB6  0E00               	movlw	0
  4437   001BB8  6E05               	movwf	___flmul@a^0,c
  4438   001BBA  0E00               	movlw	0
  4439   001BBC  6E06               	movwf	(___flmul@a+1)^0,c
  4440   001BBE  0E00               	movlw	0
  4441   001BC0  6E07               	movwf	(___flmul@a+2)^0,c
  4442   001BC2  0E00               	movlw	0
  4443   001BC4  6E08               	movwf	(___flmul@a+3)^0,c
  4444   001BC6                     l1262:
  4445   001BC6  500E               	movf	___flmul@aexp^0,w,c
  4446   001BC8  B4D8               	btfsc	status,2,c
  4447   001BCA  EFE9  F00D         	goto	u5681
  4448   001BCE  EFEB  F00D         	goto	u5680
  4449   001BD2                     u5681:
  4450   001BD2  EFF3  F00D         	goto	l5908
  4451   001BD6                     u5680:
  4452   001BD6  5013               	movf	___flmul@bexp^0,w,c
  4453   001BD8  A4D8               	btfss	status,2,c
  4454   001BDA  EFF1  F00D         	goto	u5691
  4455   001BDE  EFF3  F00D         	goto	u5690
  4456   001BE2                     u5691:
  4457   001BE2  EFFD  F00D         	goto	l5912
  4458   001BE6                     u5690:
  4459   001BE6                     l5908:
  4460   001BE6  0E00               	movlw	0
  4461   001BE8  6E01               	movwf	?___flmul^0,c
  4462   001BEA  0E00               	movlw	0
  4463   001BEC  6E02               	movwf	(?___flmul+1)^0,c
  4464   001BEE  0E00               	movlw	0
  4465   001BF0  6E03               	movwf	(?___flmul+2)^0,c
  4466   001BF2  0E00               	movlw	0
  4467   001BF4  6E04               	movwf	(?___flmul+3)^0,c
  4468   001BF6  EF95  F00F         	goto	l1266
  4469   001BFA                     l5912:
  4470   001BFA  5007               	movf	(___flmul@a+2)^0,w,c
  4471   001BFC  0201               	mulwf	___flmul@b^0,c
  4472   001BFE  CFF3 F018          	movff	prodl,___flmul@temp
  4473   001C02  CFF4 F019          	movff	prodh,___flmul@temp+1
  4474   001C06  5018               	movf	___flmul@temp^0,w,c
  4475   001C08  6E0F               	movwf	___flmul@grs^0,c
  4476   001C0A  6A10               	clrf	(___flmul@grs+1)^0,c
  4477   001C0C  6A11               	clrf	(___flmul@grs+2)^0,c
  4478   001C0E  6A12               	clrf	(___flmul@grs+3)^0,c
  4479   001C10  5019               	movf	(___flmul@temp+1)^0,w,c
  4480   001C12  6E14               	movwf	___flmul@prod^0,c
  4481   001C14  6A15               	clrf	(___flmul@prod+1)^0,c
  4482   001C16  6A16               	clrf	(___flmul@prod+2)^0,c
  4483   001C18  6A17               	clrf	(___flmul@prod+3)^0,c
  4484   001C1A  5006               	movf	(___flmul@a+1)^0,w,c
  4485   001C1C  0202               	mulwf	(___flmul@b+1)^0,c
  4486   001C1E  CFF3 F018          	movff	prodl,___flmul@temp
  4487   001C22  CFF4 F019          	movff	prodh,___flmul@temp+1
  4488   001C26  5018               	movf	___flmul@temp^0,w,c
  4489   001C28  260F               	addwf	___flmul@grs^0,f,c
  4490   001C2A  0E00               	movlw	0
  4491   001C2C  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4492   001C2E  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4493   001C30  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4494   001C32  5019               	movf	(___flmul@temp+1)^0,w,c
  4495   001C34  2614               	addwf	___flmul@prod^0,f,c
  4496   001C36  0E00               	movlw	0
  4497   001C38  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4498   001C3A  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4499   001C3C  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4500   001C3E  5005               	movf	___flmul@a^0,w,c
  4501   001C40  0203               	mulwf	(___flmul@b+2)^0,c
  4502   001C42  CFF3 F018          	movff	prodl,___flmul@temp
  4503   001C46  CFF4 F019          	movff	prodh,___flmul@temp+1
  4504   001C4A  5018               	movf	___flmul@temp^0,w,c
  4505   001C4C  260F               	addwf	___flmul@grs^0,f,c
  4506   001C4E  0E00               	movlw	0
  4507   001C50  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4508   001C52  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4509   001C54  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4510   001C56  5019               	movf	(___flmul@temp+1)^0,w,c
  4511   001C58  2614               	addwf	___flmul@prod^0,f,c
  4512   001C5A  0E00               	movlw	0
  4513   001C5C  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4514   001C5E  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4515   001C60  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4516   001C62  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4517   001C66  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4518   001C6A  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4519   001C6E  6A0F               	clrf	___flmul@grs^0,c
  4520   001C70  5005               	movf	___flmul@a^0,w,c
  4521   001C72  0202               	mulwf	(___flmul@b+1)^0,c
  4522   001C74  CFF3 F018          	movff	prodl,___flmul@temp
  4523   001C78  CFF4 F019          	movff	prodh,___flmul@temp+1
  4524   001C7C  5018               	movf	___flmul@temp^0,w,c
  4525   001C7E  260F               	addwf	___flmul@grs^0,f,c
  4526   001C80  5019               	movf	(___flmul@temp+1)^0,w,c
  4527   001C82  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4528   001C84  0E00               	movlw	0
  4529   001C86  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4530   001C88  0E00               	movlw	0
  4531   001C8A  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4532   001C8C  5006               	movf	(___flmul@a+1)^0,w,c
  4533   001C8E  0201               	mulwf	___flmul@b^0,c
  4534   001C90  CFF3 F018          	movff	prodl,___flmul@temp
  4535   001C94  CFF4 F019          	movff	prodh,___flmul@temp+1
  4536   001C98  5018               	movf	___flmul@temp^0,w,c
  4537   001C9A  260F               	addwf	___flmul@grs^0,f,c
  4538   001C9C  5019               	movf	(___flmul@temp+1)^0,w,c
  4539   001C9E  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4540   001CA0  0E00               	movlw	0
  4541   001CA2  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4542   001CA4  0E00               	movlw	0
  4543   001CA6  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4544   001CA8  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4545   001CAC  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4546   001CB0  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4547   001CB4  6A0F               	clrf	___flmul@grs^0,c
  4548   001CB6  5005               	movf	___flmul@a^0,w,c
  4549   001CB8  0201               	mulwf	___flmul@b^0,c
  4550   001CBA  CFF3 F018          	movff	prodl,___flmul@temp
  4551   001CBE  CFF4 F019          	movff	prodh,___flmul@temp+1
  4552   001CC2  5018               	movf	___flmul@temp^0,w,c
  4553   001CC4  260F               	addwf	___flmul@grs^0,f,c
  4554   001CC6  5019               	movf	(___flmul@temp+1)^0,w,c
  4555   001CC8  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4556   001CCA  0E00               	movlw	0
  4557   001CCC  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4558   001CCE  0E00               	movlw	0
  4559   001CD0  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4560   001CD2  5007               	movf	(___flmul@a+2)^0,w,c
  4561   001CD4  0202               	mulwf	(___flmul@b+1)^0,c
  4562   001CD6  CFF3 F018          	movff	prodl,___flmul@temp
  4563   001CDA  CFF4 F019          	movff	prodh,___flmul@temp+1
  4564   001CDE  5018               	movf	___flmul@temp^0,w,c
  4565   001CE0  2614               	addwf	___flmul@prod^0,f,c
  4566   001CE2  5019               	movf	(___flmul@temp+1)^0,w,c
  4567   001CE4  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4568   001CE6  0E00               	movlw	0
  4569   001CE8  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4570   001CEA  0E00               	movlw	0
  4571   001CEC  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4572   001CEE  5006               	movf	(___flmul@a+1)^0,w,c
  4573   001CF0  0203               	mulwf	(___flmul@b+2)^0,c
  4574   001CF2  CFF3 F018          	movff	prodl,___flmul@temp
  4575   001CF6  CFF4 F019          	movff	prodh,___flmul@temp+1
  4576   001CFA  5018               	movf	___flmul@temp^0,w,c
  4577   001CFC  2614               	addwf	___flmul@prod^0,f,c
  4578   001CFE  5019               	movf	(___flmul@temp+1)^0,w,c
  4579   001D00  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4580   001D02  0E00               	movlw	0
  4581   001D04  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4582   001D06  0E00               	movlw	0
  4583   001D08  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4584   001D0A  5007               	movf	(___flmul@a+2)^0,w,c
  4585   001D0C  0203               	mulwf	(___flmul@b+2)^0,c
  4586   001D0E  CFF3 F018          	movff	prodl,___flmul@temp
  4587   001D12  CFF4 F019          	movff	prodh,___flmul@temp+1
  4588   001D16  5018               	movf	___flmul@temp^0,w,c
  4589   001D18  6E09               	movwf	??___flmul^0,c
  4590   001D1A  5019               	movf	(___flmul@temp+1)^0,w,c
  4591   001D1C  6E0A               	movwf	(??___flmul+1)^0,c
  4592   001D1E  6A0B               	clrf	(??___flmul+2)^0,c
  4593   001D20  6A0C               	clrf	(??___flmul+3)^0,c
  4594   001D22  C00B  F00C         	movff	??___flmul+2,??___flmul+3
  4595   001D26  C00A  F00B         	movff	??___flmul+1,??___flmul+2
  4596   001D2A  C009  F00A         	movff	??___flmul,??___flmul+1
  4597   001D2E  6A09               	clrf	??___flmul^0,c
  4598   001D30  5009               	movf	??___flmul^0,w,c
  4599   001D32  2614               	addwf	___flmul@prod^0,f,c
  4600   001D34  500A               	movf	(??___flmul+1)^0,w,c
  4601   001D36  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4602   001D38  500B               	movf	(??___flmul+2)^0,w,c
  4603   001D3A  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4604   001D3C  500C               	movf	(??___flmul+3)^0,w,c
  4605   001D3E  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4606   001D40  C00F  F009         	movff	___flmul@grs,??___flmul
  4607   001D44  C010  F00A         	movff	___flmul@grs+1,??___flmul+1
  4608   001D48  C011  F00B         	movff	___flmul@grs+2,??___flmul+2
  4609   001D4C  C012  F00C         	movff	___flmul@grs+3,??___flmul+3
  4610   001D50  0E19               	movlw	25
  4611   001D52  EFB0  F00E         	goto	u5700
  4612   001D56                     u5705:
  4613   001D56  90D8               	bcf	status,0,c
  4614   001D58  320C               	rrcf	(??___flmul+3)^0,f,c
  4615   001D5A  320B               	rrcf	(??___flmul+2)^0,f,c
  4616   001D5C  320A               	rrcf	(??___flmul+1)^0,f,c
  4617   001D5E  3209               	rrcf	??___flmul^0,f,c
  4618   001D60                     u5700:
  4619   001D60  2EE8               	decfsz	wreg,f,c
  4620   001D62  EFAB  F00E         	goto	u5705
  4621   001D66  5009               	movf	??___flmul^0,w,c
  4622   001D68  2614               	addwf	___flmul@prod^0,f,c
  4623   001D6A  500A               	movf	(??___flmul+1)^0,w,c
  4624   001D6C  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4625   001D6E  500B               	movf	(??___flmul+2)^0,w,c
  4626   001D70  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4627   001D72  500C               	movf	(??___flmul+3)^0,w,c
  4628   001D74  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4629   001D76  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4630   001D7A  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4631   001D7E  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4632   001D82  6A0F               	clrf	___flmul@grs^0,c
  4633   001D84  500E               	movf	___flmul@aexp^0,w,c
  4634   001D86  C013  F009         	movff	___flmul@bexp,??___flmul
  4635   001D8A  6A0A               	clrf	(??___flmul+1)^0,c
  4636   001D8C  2609               	addwf	??___flmul^0,f,c
  4637   001D8E  0E00               	movlw	0
  4638   001D90  220A               	addwfc	(??___flmul+1)^0,f,c
  4639   001D92  0E82               	movlw	130
  4640   001D94  2409               	addwf	??___flmul^0,w,c
  4641   001D96  6E18               	movwf	___flmul@temp^0,c
  4642   001D98  0EFF               	movlw	255
  4643   001D9A  200A               	addwfc	(??___flmul+1)^0,w,c
  4644   001D9C  6E19               	movwf	(___flmul@temp+1)^0,c
  4645   001D9E  EFE6  F00E         	goto	l5960
  4646   001DA2                     l5954:
  4647   001DA2  90D8               	bcf	status,0,c
  4648   001DA4  3614               	rlcf	___flmul@prod^0,f,c
  4649   001DA6  3615               	rlcf	(___flmul@prod+1)^0,f,c
  4650   001DA8  3616               	rlcf	(___flmul@prod+2)^0,f,c
  4651   001DAA  3617               	rlcf	(___flmul@prod+3)^0,f,c
  4652   001DAC  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4653   001DAE  EFDB  F00E         	goto	u5711
  4654   001DB2  EFDD  F00E         	goto	u5710
  4655   001DB6                     u5711:
  4656   001DB6  EFDE  F00E         	goto	l1269
  4657   001DBA                     u5710:
  4658   001DBA  8014               	bsf	___flmul@prod^0,0,c
  4659   001DBC                     l1269:
  4660   001DBC  90D8               	bcf	status,0,c
  4661   001DBE  360F               	rlcf	___flmul@grs^0,f,c
  4662   001DC0  3610               	rlcf	(___flmul@grs+1)^0,f,c
  4663   001DC2  3611               	rlcf	(___flmul@grs+2)^0,f,c
  4664   001DC4  3612               	rlcf	(___flmul@grs+3)^0,f,c
  4665   001DC6  0618               	decf	___flmul@temp^0,f,c
  4666   001DC8  A0D8               	btfss	status,0,c
  4667   001DCA  0619               	decf	(___flmul@temp+1)^0,f,c
  4668   001DCC                     l5960:
  4669   001DCC  AE16               	btfss	(___flmul@prod+2)^0,7,c
  4670   001DCE  EFEB  F00E         	goto	u5721
  4671   001DD2  EFED  F00E         	goto	u5720
  4672   001DD6                     u5721:
  4673   001DD6  EFD1  F00E         	goto	l5954
  4674   001DDA                     u5720:
  4675   001DDA  0E00               	movlw	0
  4676   001DDC  6E0E               	movwf	___flmul@aexp^0,c
  4677   001DDE  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4678   001DE0  EFF4  F00E         	goto	u5731
  4679   001DE4  EFF6  F00E         	goto	u5730
  4680   001DE8                     u5731:
  4681   001DE8  EF1A  F00F         	goto	l1271
  4682   001DEC                     u5730:
  4683   001DEC  0EFF               	movlw	255
  4684   001DEE  140F               	andwf	___flmul@grs^0,w,c
  4685   001DF0  6E09               	movwf	??___flmul^0,c
  4686   001DF2  0EFF               	movlw	255
  4687   001DF4  1410               	andwf	(___flmul@grs+1)^0,w,c
  4688   001DF6  6E0A               	movwf	(??___flmul+1)^0,c
  4689   001DF8  0EFF               	movlw	255
  4690   001DFA  1411               	andwf	(___flmul@grs+2)^0,w,c
  4691   001DFC  6E0B               	movwf	(??___flmul+2)^0,c
  4692   001DFE  0E7F               	movlw	127
  4693   001E00  1412               	andwf	(___flmul@grs+3)^0,w,c
  4694   001E02  6E0C               	movwf	(??___flmul+3)^0,c
  4695   001E04  5009               	movf	??___flmul^0,w,c
  4696   001E06  100A               	iorwf	(??___flmul+1)^0,w,c
  4697   001E08  100B               	iorwf	(??___flmul+2)^0,w,c
  4698   001E0A  100C               	iorwf	(??___flmul+3)^0,w,c
  4699   001E0C  B4D8               	btfsc	status,2,c
  4700   001E0E  EF0B  F00F         	goto	u5741
  4701   001E12  EF0D  F00F         	goto	u5740
  4702   001E16                     u5741:
  4703   001E16  EF11  F00F         	goto	l1272
  4704   001E1A                     u5740:
  4705   001E1A                     l5968:
  4706   001E1A  0E01               	movlw	1
  4707   001E1C  6E0E               	movwf	___flmul@aexp^0,c
  4708   001E1E  EF1A  F00F         	goto	l1271
  4709   001E22                     l1272:
  4710   001E22  A014               	btfss	___flmul@prod^0,0,c
  4711   001E24  EF16  F00F         	goto	u5751
  4712   001E28  EF18  F00F         	goto	u5750
  4713   001E2C                     u5751:
  4714   001E2C  EF1A  F00F         	goto	l1271
  4715   001E30                     u5750:
  4716   001E30  EF0D  F00F         	goto	l5968
  4717   001E34                     l1271:
  4718   001E34  500E               	movf	___flmul@aexp^0,w,c
  4719   001E36  B4D8               	btfsc	status,2,c
  4720   001E38  EF20  F00F         	goto	u5761
  4721   001E3C  EF22  F00F         	goto	u5760
  4722   001E40                     u5761:
  4723   001E40  EF46  F00F         	goto	l5980
  4724   001E44                     u5760:
  4725   001E44  0E01               	movlw	1
  4726   001E46  2614               	addwf	___flmul@prod^0,f,c
  4727   001E48  0E00               	movlw	0
  4728   001E4A  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4729   001E4C  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4730   001E4E  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4731   001E50  A017               	btfss	(___flmul@prod+3)^0,0,c
  4732   001E52  EF2D  F00F         	goto	u5771
  4733   001E56  EF2F  F00F         	goto	u5770
  4734   001E5A                     u5771:
  4735   001E5A  EF46  F00F         	goto	l5980
  4736   001E5E                     u5770:
  4737   001E5E  C014  F009         	movff	___flmul@prod,??___flmul
  4738   001E62  C015  F00A         	movff	___flmul@prod+1,??___flmul+1
  4739   001E66  C016  F00B         	movff	___flmul@prod+2,??___flmul+2
  4740   001E6A  C017  F00C         	movff	___flmul@prod+3,??___flmul+3
  4741   001E6E  340C               	rlcf	(??___flmul+3)^0,w,c
  4742   001E70  320C               	rrcf	(??___flmul+3)^0,f,c
  4743   001E72  320B               	rrcf	(??___flmul+2)^0,f,c
  4744   001E74  320A               	rrcf	(??___flmul+1)^0,f,c
  4745   001E76  3209               	rrcf	??___flmul^0,f,c
  4746   001E78  C009  F014         	movff	??___flmul,___flmul@prod
  4747   001E7C  C00A  F015         	movff	??___flmul+1,___flmul@prod+1
  4748   001E80  C00B  F016         	movff	??___flmul+2,___flmul@prod+2
  4749   001E84  C00C  F017         	movff	??___flmul+3,___flmul@prod+3
  4750   001E88  4A18               	infsnz	___flmul@temp^0,f,c
  4751   001E8A  2A19               	incf	(___flmul@temp+1)^0,f,c
  4752   001E8C                     l5980:
  4753   001E8C  BE19               	btfsc	(___flmul@temp+1)^0,7,c
  4754   001E8E  EF51  F00F         	goto	u5781
  4755   001E92  5019               	movf	(___flmul@temp+1)^0,w,c
  4756   001E94  E108               	bnz	u5780
  4757   001E96  2818               	incf	___flmul@temp^0,w,c
  4758   001E98  A0D8               	btfss	status,0,c
  4759   001E9A  EF51  F00F         	goto	u5781
  4760   001E9E  EF53  F00F         	goto	u5780
  4761   001EA2                     u5781:
  4762   001EA2  EF5D  F00F         	goto	l5984
  4763   001EA6                     u5780:
  4764   001EA6  0E00               	movlw	0
  4765   001EA8  6E14               	movwf	___flmul@prod^0,c
  4766   001EAA  0E00               	movlw	0
  4767   001EAC  6E15               	movwf	(___flmul@prod+1)^0,c
  4768   001EAE  0E80               	movlw	128
  4769   001EB0  6E16               	movwf	(___flmul@prod+2)^0,c
  4770   001EB2  0E7F               	movlw	127
  4771   001EB4  6E17               	movwf	(___flmul@prod+3)^0,c
  4772   001EB6  EF8B  F00F         	goto	l5996
  4773   001EBA                     l5984:
  4774   001EBA  BE19               	btfsc	(___flmul@temp+1)^0,7,c
  4775   001EBC  EF6A  F00F         	goto	u5790
  4776   001EC0  5019               	movf	(___flmul@temp+1)^0,w,c
  4777   001EC2  E106               	bnz	u5791
  4778   001EC4  0418               	decf	___flmul@temp^0,w,c
  4779   001EC6  B0D8               	btfsc	status,0,c
  4780   001EC8  EF68  F00F         	goto	u5791
  4781   001ECC  EF6A  F00F         	goto	u5790
  4782   001ED0                     u5791:
  4783   001ED0  EF76  F00F         	goto	l1279
  4784   001ED4                     u5790:
  4785   001ED4  0E00               	movlw	0
  4786   001ED6  6E14               	movwf	___flmul@prod^0,c
  4787   001ED8  0E00               	movlw	0
  4788   001EDA  6E15               	movwf	(___flmul@prod+1)^0,c
  4789   001EDC  0E00               	movlw	0
  4790   001EDE  6E16               	movwf	(___flmul@prod+2)^0,c
  4791   001EE0  0E00               	movlw	0
  4792   001EE2  6E17               	movwf	(___flmul@prod+3)^0,c
  4793   001EE4  0E00               	movlw	0
  4794   001EE6  6E0D               	movwf	___flmul@sign^0,c
  4795   001EE8  EF8B  F00F         	goto	l5996
  4796   001EEC                     l1279:
  4797   001EEC  C018  F013         	movff	___flmul@temp,___flmul@bexp
  4798   001EF0  0EFF               	movlw	255
  4799   001EF2  1614               	andwf	___flmul@prod^0,f,c
  4800   001EF4  0EFF               	movlw	255
  4801   001EF6  1615               	andwf	(___flmul@prod+1)^0,f,c
  4802   001EF8  0E7F               	movlw	127
  4803   001EFA  1616               	andwf	(___flmul@prod+2)^0,f,c
  4804   001EFC  0E00               	movlw	0
  4805   001EFE  1617               	andwf	(___flmul@prod+3)^0,f,c
  4806   001F00  A013               	btfss	___flmul@bexp^0,0,c
  4807   001F02  EF85  F00F         	goto	u5801
  4808   001F06  EF87  F00F         	goto	u5800
  4809   001F0A                     u5801:
  4810   001F0A  EF88  F00F         	goto	l5994
  4811   001F0E                     u5800:
  4812   001F0E  8E16               	bsf	(___flmul@prod+2)^0,7,c
  4813   001F10                     l5994:
  4814   001F10  90D8               	bcf	status,0,c
  4815   001F12  3013               	rrcf	___flmul@bexp^0,w,c
  4816   001F14  6E17               	movwf	(___flmul@prod+3)^0,c
  4817   001F16                     l5996:
  4818   001F16  500D               	movf	___flmul@sign^0,w,c
  4819   001F18  1217               	iorwf	(___flmul@prod+3)^0,f,c
  4820   001F1A  C014  F001         	movff	___flmul@prod,?___flmul
  4821   001F1E  C015  F002         	movff	___flmul@prod+1,?___flmul+1
  4822   001F22  C016  F003         	movff	___flmul@prod+2,?___flmul+2
  4823   001F26  C017  F004         	movff	___flmul@prod+3,?___flmul+3
  4824   001F2A                     l1266:
  4825   001F2A  0012               	return		;funcret
  4826   001F2C                     __end_of___flmul:
  4827                           	callstack 0
  4828                           
  4829 ;; *************** function ___flge *****************
  4830 ;; Defined at:
  4831 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;  ff1             4    0[COMRAM] unsigned char 
  4834 ;;  ff2             4    4[COMRAM] unsigned char 
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;		None
  4837 ;; Return value:  Size  Location     Type
  4838 ;;		None               void
  4839 ;; Registers used:
  4840 ;;		wreg, status,2, status,0
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4846 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4848 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4849 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4850 ;;Total ram usage:       12 bytes
  4851 ;; Hardware stack levels used: 1
  4852 ;; This function calls:
  4853 ;;		Nothing
  4854 ;; This function is called by:
  4855 ;;		_convert_rgb2hue
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           	psect	text13
  4860   00303C                     __ptext13:
  4861                           	callstack 0
  4862   00303C                     ___flge:
  4863                           	callstack 28
  4864   00303C  0E00               	movlw	0
  4865   00303E  1401               	andwf	___flge@ff1^0,w,c
  4866   003040  6E09               	movwf	??___flge^0,c
  4867   003042  0E00               	movlw	0
  4868   003044  1402               	andwf	(___flge@ff1+1)^0,w,c
  4869   003046  6E0A               	movwf	(??___flge+1)^0,c
  4870   003048  0E80               	movlw	128
  4871   00304A  1403               	andwf	(___flge@ff1+2)^0,w,c
  4872   00304C  6E0B               	movwf	(??___flge+2)^0,c
  4873   00304E  0E7F               	movlw	127
  4874   003050  1404               	andwf	(___flge@ff1+3)^0,w,c
  4875   003052  6E0C               	movwf	(??___flge+3)^0,c
  4876   003054  5009               	movf	??___flge^0,w,c
  4877   003056  100A               	iorwf	(??___flge+1)^0,w,c
  4878   003058  100B               	iorwf	(??___flge+2)^0,w,c
  4879   00305A  100C               	iorwf	(??___flge+3)^0,w,c
  4880   00305C  A4D8               	btfss	status,2,c
  4881   00305E  EF33  F018         	goto	u5841
  4882   003062  EF35  F018         	goto	u5840
  4883   003066                     u5841:
  4884   003066  EF3D  F018         	goto	l6028
  4885   00306A                     u5840:
  4886   00306A  0E00               	movlw	0
  4887   00306C  6E01               	movwf	___flge@ff1^0,c
  4888   00306E  0E00               	movlw	0
  4889   003070  6E02               	movwf	(___flge@ff1+1)^0,c
  4890   003072  0E00               	movlw	0
  4891   003074  6E03               	movwf	(___flge@ff1+2)^0,c
  4892   003076  0E00               	movlw	0
  4893   003078  6E04               	movwf	(___flge@ff1+3)^0,c
  4894   00307A                     l6028:
  4895   00307A  0E00               	movlw	0
  4896   00307C  1405               	andwf	___flge@ff2^0,w,c
  4897   00307E  6E09               	movwf	??___flge^0,c
  4898   003080  0E00               	movlw	0
  4899   003082  1406               	andwf	(___flge@ff2+1)^0,w,c
  4900   003084  6E0A               	movwf	(??___flge+1)^0,c
  4901   003086  0E80               	movlw	128
  4902   003088  1407               	andwf	(___flge@ff2+2)^0,w,c
  4903   00308A  6E0B               	movwf	(??___flge+2)^0,c
  4904   00308C  0E7F               	movlw	127
  4905   00308E  1408               	andwf	(___flge@ff2+3)^0,w,c
  4906   003090  6E0C               	movwf	(??___flge+3)^0,c
  4907   003092  5009               	movf	??___flge^0,w,c
  4908   003094  100A               	iorwf	(??___flge+1)^0,w,c
  4909   003096  100B               	iorwf	(??___flge+2)^0,w,c
  4910   003098  100C               	iorwf	(??___flge+3)^0,w,c
  4911   00309A  A4D8               	btfss	status,2,c
  4912   00309C  EF52  F018         	goto	u5851
  4913   0030A0  EF54  F018         	goto	u5850
  4914   0030A4                     u5851:
  4915   0030A4  EF5C  F018         	goto	l6032
  4916   0030A8                     u5850:
  4917   0030A8  0E00               	movlw	0
  4918   0030AA  6E05               	movwf	___flge@ff2^0,c
  4919   0030AC  0E00               	movlw	0
  4920   0030AE  6E06               	movwf	(___flge@ff2+1)^0,c
  4921   0030B0  0E00               	movlw	0
  4922   0030B2  6E07               	movwf	(___flge@ff2+2)^0,c
  4923   0030B4  0E00               	movlw	0
  4924   0030B6  6E08               	movwf	(___flge@ff2+3)^0,c
  4925   0030B8                     l6032:
  4926   0030B8  AE04               	btfss	(___flge@ff1+3)^0,7,c
  4927   0030BA  EF61  F018         	goto	u5861
  4928   0030BE  EF63  F018         	goto	u5860
  4929   0030C2                     u5861:
  4930   0030C2  EF6C  F018         	goto	l6036
  4931   0030C6                     u5860:
  4932   0030C6  6C01               	negf	___flge@ff1^0,c
  4933   0030C8  1E02               	comf	(___flge@ff1+1)^0,f,c
  4934   0030CA  B0D8               	btfsc	status,0,c
  4935   0030CC  2A02               	incf	(___flge@ff1+1)^0,f,c
  4936   0030CE  1E03               	comf	(___flge@ff1+2)^0,f,c
  4937   0030D0  B0D8               	btfsc	status,0,c
  4938   0030D2  2A03               	incf	(___flge@ff1+2)^0,f,c
  4939   0030D4  0E80               	movlw	128
  4940   0030D6  5604               	subfwb	(___flge@ff1+3)^0,f,c
  4941   0030D8                     l6036:
  4942   0030D8  AE08               	btfss	(___flge@ff2+3)^0,7,c
  4943   0030DA  EF71  F018         	goto	u5871
  4944   0030DE  EF73  F018         	goto	u5870
  4945   0030E2                     u5871:
  4946   0030E2  EF7C  F018         	goto	l913
  4947   0030E6                     u5870:
  4948   0030E6  6C05               	negf	___flge@ff2^0,c
  4949   0030E8  1E06               	comf	(___flge@ff2+1)^0,f,c
  4950   0030EA  B0D8               	btfsc	status,0,c
  4951   0030EC  2A06               	incf	(___flge@ff2+1)^0,f,c
  4952   0030EE  1E07               	comf	(___flge@ff2+2)^0,f,c
  4953   0030F0  B0D8               	btfsc	status,0,c
  4954   0030F2  2A07               	incf	(___flge@ff2+2)^0,f,c
  4955   0030F4  0E80               	movlw	128
  4956   0030F6  5608               	subfwb	(___flge@ff2+3)^0,f,c
  4957   0030F8                     l913:
  4958   0030F8  0E00               	movlw	0
  4959   0030FA  1A01               	xorwf	___flge@ff1^0,f,c
  4960   0030FC  0E00               	movlw	0
  4961   0030FE  1A02               	xorwf	(___flge@ff1+1)^0,f,c
  4962   003100  0E00               	movlw	0
  4963   003102  1A03               	xorwf	(___flge@ff1+2)^0,f,c
  4964   003104  0E80               	movlw	128
  4965   003106  1A04               	xorwf	(___flge@ff1+3)^0,f,c
  4966   003108  0E00               	movlw	0
  4967   00310A  1A05               	xorwf	___flge@ff2^0,f,c
  4968   00310C  0E00               	movlw	0
  4969   00310E  1A06               	xorwf	(___flge@ff2+1)^0,f,c
  4970   003110  0E00               	movlw	0
  4971   003112  1A07               	xorwf	(___flge@ff2+2)^0,f,c
  4972   003114  0E80               	movlw	128
  4973   003116  1A08               	xorwf	(___flge@ff2+3)^0,f,c
  4974   003118  5005               	movf	___flge@ff2^0,w,c
  4975   00311A  5C01               	subwf	___flge@ff1^0,w,c
  4976   00311C  5006               	movf	(___flge@ff2+1)^0,w,c
  4977   00311E  5802               	subwfb	(___flge@ff1+1)^0,w,c
  4978   003120  5007               	movf	(___flge@ff2+2)^0,w,c
  4979   003122  5803               	subwfb	(___flge@ff1+2)^0,w,c
  4980   003124  5008               	movf	(___flge@ff2+3)^0,w,c
  4981   003126  5804               	subwfb	(___flge@ff1+3)^0,w,c
  4982   003128  B0D8               	btfsc	status,0,c
  4983   00312A  EF99  F018         	goto	u5881
  4984   00312E  EF9B  F018         	goto	u5880
  4985   003132                     u5881:
  4986   003132  EF9E  F018         	goto	l6042
  4987   003136                     u5880:
  4988   003136  90D8               	bcf	status,0,c
  4989   003138  EF9F  F018         	goto	l918
  4990   00313C                     l6042:
  4991   00313C  80D8               	bsf	status,0,c
  4992   00313E                     l918:
  4993   00313E  0012               	return		;funcret
  4994   003140                     __end_of___flge:
  4995                           	callstack 0
  4996                           
  4997 ;; *************** function ___fleq *****************
  4998 ;; Defined at:
  4999 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;  ff1             4    0[COMRAM] unsigned char 
  5002 ;;  ff2             4    4[COMRAM] unsigned char 
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;		None
  5005 ;; Return value:  Size  Location     Type
  5006 ;;		None               void
  5007 ;; Registers used:
  5008 ;;		wreg, status,2, status,0
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5014 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5016 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5017 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5018 ;;Total ram usage:       12 bytes
  5019 ;; Hardware stack levels used: 1
  5020 ;; This function calls:
  5021 ;;		Nothing
  5022 ;; This function is called by:
  5023 ;;		_convert_rgb2hue
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text14
  5028   0035DE                     __ptext14:
  5029                           	callstack 0
  5030   0035DE                     ___fleq:
  5031                           	callstack 28
  5032   0035DE  0E00               	movlw	0
  5033   0035E0  1401               	andwf	___fleq@ff1^0,w,c
  5034   0035E2  6E09               	movwf	??___fleq^0,c
  5035   0035E4  0E00               	movlw	0
  5036   0035E6  1402               	andwf	(___fleq@ff1+1)^0,w,c
  5037   0035E8  6E0A               	movwf	(??___fleq+1)^0,c
  5038   0035EA  0E80               	movlw	128
  5039   0035EC  1403               	andwf	(___fleq@ff1+2)^0,w,c
  5040   0035EE  6E0B               	movwf	(??___fleq+2)^0,c
  5041   0035F0  0E7F               	movlw	127
  5042   0035F2  1404               	andwf	(___fleq@ff1+3)^0,w,c
  5043   0035F4  6E0C               	movwf	(??___fleq+3)^0,c
  5044   0035F6  5009               	movf	??___fleq^0,w,c
  5045   0035F8  100A               	iorwf	(??___fleq+1)^0,w,c
  5046   0035FA  100B               	iorwf	(??___fleq+2)^0,w,c
  5047   0035FC  100C               	iorwf	(??___fleq+3)^0,w,c
  5048   0035FE  A4D8               	btfss	status,2,c
  5049   003600  EF04  F01B         	goto	u5811
  5050   003604  EF06  F01B         	goto	u5810
  5051   003608                     u5811:
  5052   003608  EF0E  F01B         	goto	l6012
  5053   00360C                     u5810:
  5054   00360C  0E00               	movlw	0
  5055   00360E  6E01               	movwf	___fleq@ff1^0,c
  5056   003610  0E00               	movlw	0
  5057   003612  6E02               	movwf	(___fleq@ff1+1)^0,c
  5058   003614  0E00               	movlw	0
  5059   003616  6E03               	movwf	(___fleq@ff1+2)^0,c
  5060   003618  0E00               	movlw	0
  5061   00361A  6E04               	movwf	(___fleq@ff1+3)^0,c
  5062   00361C                     l6012:
  5063   00361C  0E00               	movlw	0
  5064   00361E  1405               	andwf	___fleq@ff2^0,w,c
  5065   003620  6E09               	movwf	??___fleq^0,c
  5066   003622  0E00               	movlw	0
  5067   003624  1406               	andwf	(___fleq@ff2+1)^0,w,c
  5068   003626  6E0A               	movwf	(??___fleq+1)^0,c
  5069   003628  0E80               	movlw	128
  5070   00362A  1407               	andwf	(___fleq@ff2+2)^0,w,c
  5071   00362C  6E0B               	movwf	(??___fleq+2)^0,c
  5072   00362E  0E7F               	movlw	127
  5073   003630  1408               	andwf	(___fleq@ff2+3)^0,w,c
  5074   003632  6E0C               	movwf	(??___fleq+3)^0,c
  5075   003634  5009               	movf	??___fleq^0,w,c
  5076   003636  100A               	iorwf	(??___fleq+1)^0,w,c
  5077   003638  100B               	iorwf	(??___fleq+2)^0,w,c
  5078   00363A  100C               	iorwf	(??___fleq+3)^0,w,c
  5079   00363C  A4D8               	btfss	status,2,c
  5080   00363E  EF23  F01B         	goto	u5821
  5081   003642  EF25  F01B         	goto	u5820
  5082   003646                     u5821:
  5083   003646  EF2D  F01B         	goto	l6016
  5084   00364A                     u5820:
  5085   00364A  0E00               	movlw	0
  5086   00364C  6E05               	movwf	___fleq@ff2^0,c
  5087   00364E  0E00               	movlw	0
  5088   003650  6E06               	movwf	(___fleq@ff2+1)^0,c
  5089   003652  0E00               	movlw	0
  5090   003654  6E07               	movwf	(___fleq@ff2+2)^0,c
  5091   003656  0E00               	movlw	0
  5092   003658  6E08               	movwf	(___fleq@ff2+3)^0,c
  5093   00365A                     l6016:
  5094   00365A  5005               	movf	___fleq@ff2^0,w,c
  5095   00365C  1801               	xorwf	___fleq@ff1^0,w,c
  5096   00365E  E10F               	bnz	u5830
  5097   003660  5006               	movf	(___fleq@ff2+1)^0,w,c
  5098   003662  1802               	xorwf	(___fleq@ff1+1)^0,w,c
  5099   003664  E10C               	bnz	u5830
  5100   003666  5007               	movf	(___fleq@ff2+2)^0,w,c
  5101   003668  1803               	xorwf	(___fleq@ff1+2)^0,w,c
  5102   00366A  E109               	bnz	u5830
  5103   00366C  5008               	movf	(___fleq@ff2+3)^0,w,c
  5104   00366E  1804               	xorwf	(___fleq@ff1+3)^0,w,c
  5105   003670  B4D8               	btfsc	status,2,c
  5106   003672  EF3D  F01B         	goto	u5831
  5107   003676  EF3F  F01B         	goto	u5830
  5108   00367A                     u5831:
  5109   00367A  EF42  F01B         	goto	l6020
  5110   00367E                     u5830:
  5111   00367E  90D8               	bcf	status,0,c
  5112   003680  EF43  F01B         	goto	l907
  5113   003684                     l6020:
  5114   003684  80D8               	bsf	status,0,c
  5115   003686                     l907:
  5116   003686  0012               	return		;funcret
  5117   003688                     __end_of___fleq:
  5118                           	callstack 0
  5119                           
  5120 ;; *************** function ___fldiv *****************
  5121 ;; Defined at:
  5122 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  b               4   25[COMRAM] unsigned char 
  5125 ;;  a               4   29[COMRAM] unsigned char 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  grs             4   44[COMRAM] unsigned long 
  5128 ;;  rem             4   37[COMRAM] unsigned long 
  5129 ;;  new_exp         2   42[COMRAM] short 
  5130 ;;  aexp            1   49[COMRAM] unsigned char 
  5131 ;;  bexp            1   48[COMRAM] unsigned char 
  5132 ;;  sign            1   41[COMRAM] unsigned char 
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  4   25[COMRAM] unsigned char 
  5135 ;; Registers used:
  5136 ;;		wreg, status,2, status,0
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5142 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5143 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5144 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5145 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5146 ;;Total ram usage:       25 bytes
  5147 ;; Hardware stack levels used: 1
  5148 ;; This function calls:
  5149 ;;		Nothing
  5150 ;; This function is called by:
  5151 ;;		_convert_rgb2hue
  5152 ;;		_main
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text15
  5157   001F2C                     __ptext15:
  5158                           	callstack 0
  5159   001F2C                     ___fldiv:
  5160                           	callstack 28
  5161   001F2C  501D               	movf	(___fldiv@b+3)^0,w,c
  5162   001F2E  0B80               	andlw	128
  5163   001F30  6E2A               	movwf	___fldiv@sign^0,c
  5164   001F32  501D               	movf	(___fldiv@b+3)^0,w,c
  5165   001F34  241D               	addwf	(___fldiv@b+3)^0,w,c
  5166   001F36  6E31               	movwf	___fldiv@bexp^0,c
  5167   001F38  AE1C               	btfss	(___fldiv@b+2)^0,7,c
  5168   001F3A  EFA1  F00F         	goto	u5391
  5169   001F3E  EFA3  F00F         	goto	u5390
  5170   001F42                     u5391:
  5171   001F42  EFA4  F00F         	goto	l5740
  5172   001F46                     u5390:
  5173   001F46  8031               	bsf	___fldiv@bexp^0,0,c
  5174   001F48                     l5740:
  5175   001F48  5031               	movf	___fldiv@bexp^0,w,c
  5176   001F4A  B4D8               	btfsc	status,2,c
  5177   001F4C  EFAA  F00F         	goto	u5401
  5178   001F50  EFAC  F00F         	goto	u5400
  5179   001F54                     u5401:
  5180   001F54  EFC1  F00F         	goto	l5750
  5181   001F58                     u5400:
  5182   001F58  2831               	incf	___fldiv@bexp^0,w,c
  5183   001F5A  A4D8               	btfss	status,2,c
  5184   001F5C  EFB2  F00F         	goto	u5411
  5185   001F60  EFB4  F00F         	goto	u5410
  5186   001F64                     u5411:
  5187   001F64  EFBC  F00F         	goto	l5746
  5188   001F68                     u5410:
  5189   001F68  0E00               	movlw	0
  5190   001F6A  6E1A               	movwf	___fldiv@b^0,c
  5191   001F6C  0E00               	movlw	0
  5192   001F6E  6E1B               	movwf	(___fldiv@b+1)^0,c
  5193   001F70  0E00               	movlw	0
  5194   001F72  6E1C               	movwf	(___fldiv@b+2)^0,c
  5195   001F74  0E00               	movlw	0
  5196   001F76  6E1D               	movwf	(___fldiv@b+3)^0,c
  5197   001F78                     l5746:
  5198   001F78  8E1C               	bsf	(___fldiv@b+2)^0,7,c
  5199   001F7A  0E00               	movlw	0
  5200   001F7C  6E1D               	movwf	(___fldiv@b+3)^0,c
  5201   001F7E  EFC9  F00F         	goto	l5752
  5202   001F82                     l5750:
  5203   001F82  0E00               	movlw	0
  5204   001F84  6E1A               	movwf	___fldiv@b^0,c
  5205   001F86  0E00               	movlw	0
  5206   001F88  6E1B               	movwf	(___fldiv@b+1)^0,c
  5207   001F8A  0E00               	movlw	0
  5208   001F8C  6E1C               	movwf	(___fldiv@b+2)^0,c
  5209   001F8E  0E00               	movlw	0
  5210   001F90  6E1D               	movwf	(___fldiv@b+3)^0,c
  5211   001F92                     l5752:
  5212   001F92  5021               	movf	(___fldiv@a+3)^0,w,c
  5213   001F94  0B80               	andlw	128
  5214   001F96  1A2A               	xorwf	___fldiv@sign^0,f,c
  5215   001F98  5021               	movf	(___fldiv@a+3)^0,w,c
  5216   001F9A  2421               	addwf	(___fldiv@a+3)^0,w,c
  5217   001F9C  6E32               	movwf	___fldiv@aexp^0,c
  5218   001F9E  AE20               	btfss	(___fldiv@a+2)^0,7,c
  5219   001FA0  EFD4  F00F         	goto	u5421
  5220   001FA4  EFD6  F00F         	goto	u5420
  5221   001FA8                     u5421:
  5222   001FA8  EFD7  F00F         	goto	l5760
  5223   001FAC                     u5420:
  5224   001FAC  8032               	bsf	___fldiv@aexp^0,0,c
  5225   001FAE                     l5760:
  5226   001FAE  5032               	movf	___fldiv@aexp^0,w,c
  5227   001FB0  B4D8               	btfsc	status,2,c
  5228   001FB2  EFDD  F00F         	goto	u5431
  5229   001FB6  EFDF  F00F         	goto	u5430
  5230   001FBA                     u5431:
  5231   001FBA  EFF4  F00F         	goto	l5770
  5232   001FBE                     u5430:
  5233   001FBE  2832               	incf	___fldiv@aexp^0,w,c
  5234   001FC0  A4D8               	btfss	status,2,c
  5235   001FC2  EFE5  F00F         	goto	u5441
  5236   001FC6  EFE7  F00F         	goto	u5440
  5237   001FCA                     u5441:
  5238   001FCA  EFEF  F00F         	goto	l5766
  5239   001FCE                     u5440:
  5240   001FCE  0E00               	movlw	0
  5241   001FD0  6E1E               	movwf	___fldiv@a^0,c
  5242   001FD2  0E00               	movlw	0
  5243   001FD4  6E1F               	movwf	(___fldiv@a+1)^0,c
  5244   001FD6  0E00               	movlw	0
  5245   001FD8  6E20               	movwf	(___fldiv@a+2)^0,c
  5246   001FDA  0E00               	movlw	0
  5247   001FDC  6E21               	movwf	(___fldiv@a+3)^0,c
  5248   001FDE                     l5766:
  5249   001FDE  8E20               	bsf	(___fldiv@a+2)^0,7,c
  5250   001FE0  0E00               	movlw	0
  5251   001FE2  6E21               	movwf	(___fldiv@a+3)^0,c
  5252   001FE4  EFFC  F00F         	goto	l5772
  5253   001FE8                     l5770:
  5254   001FE8  0E00               	movlw	0
  5255   001FEA  6E1E               	movwf	___fldiv@a^0,c
  5256   001FEC  0E00               	movlw	0
  5257   001FEE  6E1F               	movwf	(___fldiv@a+1)^0,c
  5258   001FF0  0E00               	movlw	0
  5259   001FF2  6E20               	movwf	(___fldiv@a+2)^0,c
  5260   001FF4  0E00               	movlw	0
  5261   001FF6  6E21               	movwf	(___fldiv@a+3)^0,c
  5262   001FF8                     l5772:
  5263   001FF8  501E               	movf	___fldiv@a^0,w,c
  5264   001FFA  101F               	iorwf	(___fldiv@a+1)^0,w,c
  5265   001FFC  1020               	iorwf	(___fldiv@a+2)^0,w,c
  5266   001FFE  1021               	iorwf	(___fldiv@a+3)^0,w,c
  5267   002000  A4D8               	btfss	status,2,c
  5268   002002  EF05  F010         	goto	u5451
  5269   002006  EF07  F010         	goto	u5450
  5270   00200A                     u5451:
  5271   00200A  EF1F  F010         	goto	l5784
  5272   00200E                     u5450:
  5273   00200E  0E00               	movlw	0
  5274   002010  6E1A               	movwf	___fldiv@b^0,c
  5275   002012  0E00               	movlw	0
  5276   002014  6E1B               	movwf	(___fldiv@b+1)^0,c
  5277   002016  0E00               	movlw	0
  5278   002018  6E1C               	movwf	(___fldiv@b+2)^0,c
  5279   00201A  0E00               	movlw	0
  5280   00201C  6E1D               	movwf	(___fldiv@b+3)^0,c
  5281   00201E  0E80               	movlw	128
  5282   002020  121C               	iorwf	(___fldiv@b+2)^0,f,c
  5283   002022  0E7F               	movlw	127
  5284   002024  121D               	iorwf	(___fldiv@b+3)^0,f,c
  5285   002026                     l5778:
  5286   002026  502A               	movf	___fldiv@sign^0,w,c
  5287   002028  121D               	iorwf	(___fldiv@b+3)^0,f,c
  5288   00202A  C01A  F01A         	movff	___fldiv@b,?___fldiv
  5289   00202E  C01B  F01B         	movff	___fldiv@b+1,?___fldiv+1
  5290   002032  C01C  F01C         	movff	___fldiv@b+2,?___fldiv+2
  5291   002036  C01D  F01D         	movff	___fldiv@b+3,?___fldiv+3
  5292   00203A  EF62  F011         	goto	l1230
  5293   00203E                     l5784:
  5294   00203E  5031               	movf	___fldiv@bexp^0,w,c
  5295   002040  A4D8               	btfss	status,2,c
  5296   002042  EF25  F010         	goto	u5461
  5297   002046  EF27  F010         	goto	u5460
  5298   00204A                     u5461:
  5299   00204A  EF31  F010         	goto	l5792
  5300   00204E                     u5460:
  5301   00204E  0E00               	movlw	0
  5302   002050  6E1A               	movwf	?___fldiv^0,c
  5303   002052  0E00               	movlw	0
  5304   002054  6E1B               	movwf	(?___fldiv+1)^0,c
  5305   002056  0E00               	movlw	0
  5306   002058  6E1C               	movwf	(?___fldiv+2)^0,c
  5307   00205A  0E00               	movlw	0
  5308   00205C  6E1D               	movwf	(?___fldiv+3)^0,c
  5309   00205E  EF62  F011         	goto	l1230
  5310   002062                     l5792:
  5311   002062  5032               	movf	___fldiv@aexp^0,w,c
  5312   002064  C031  F022         	movff	___fldiv@bexp,??___fldiv
  5313   002068  6A23               	clrf	(??___fldiv+1)^0,c
  5314   00206A  5E22               	subwf	??___fldiv^0,f,c
  5315   00206C  0E00               	movlw	0
  5316   00206E  5A23               	subwfb	(??___fldiv+1)^0,f,c
  5317   002070  0E7F               	movlw	127
  5318   002072  2422               	addwf	??___fldiv^0,w,c
  5319   002074  6E2B               	movwf	___fldiv@new_exp^0,c
  5320   002076  0E00               	movlw	0
  5321   002078  2023               	addwfc	(??___fldiv+1)^0,w,c
  5322   00207A  6E2C               	movwf	(___fldiv@new_exp+1)^0,c
  5323   00207C  C01A  F026         	movff	___fldiv@b,___fldiv@rem
  5324   002080  C01B  F027         	movff	___fldiv@b+1,___fldiv@rem+1
  5325   002084  C01C  F028         	movff	___fldiv@b+2,___fldiv@rem+2
  5326   002088  C01D  F029         	movff	___fldiv@b+3,___fldiv@rem+3
  5327   00208C  0E00               	movlw	0
  5328   00208E  6E1A               	movwf	___fldiv@b^0,c
  5329   002090  0E00               	movlw	0
  5330   002092  6E1B               	movwf	(___fldiv@b+1)^0,c
  5331   002094  0E00               	movlw	0
  5332   002096  6E1C               	movwf	(___fldiv@b+2)^0,c
  5333   002098  0E00               	movlw	0
  5334   00209A  6E1D               	movwf	(___fldiv@b+3)^0,c
  5335   00209C  0E00               	movlw	0
  5336   00209E  6E2D               	movwf	___fldiv@grs^0,c
  5337   0020A0  0E00               	movlw	0
  5338   0020A2  6E2E               	movwf	(___fldiv@grs+1)^0,c
  5339   0020A4  0E00               	movlw	0
  5340   0020A6  6E2F               	movwf	(___fldiv@grs+2)^0,c
  5341   0020A8  0E00               	movlw	0
  5342   0020AA  6E30               	movwf	(___fldiv@grs+3)^0,c
  5343   0020AC  0E00               	movlw	0
  5344   0020AE  6E32               	movwf	___fldiv@aexp^0,c
  5345   0020B0  EF92  F010         	goto	l1232
  5346   0020B4                     l5802:
  5347   0020B4  5032               	movf	___fldiv@aexp^0,w,c
  5348   0020B6  B4D8               	btfsc	status,2,c
  5349   0020B8  EF60  F010         	goto	u5471
  5350   0020BC  EF62  F010         	goto	u5470
  5351   0020C0                     u5471:
  5352   0020C0  EF79  F010         	goto	l5810
  5353   0020C4                     u5470:
  5354   0020C4  90D8               	bcf	status,0,c
  5355   0020C6  3626               	rlcf	___fldiv@rem^0,f,c
  5356   0020C8  3627               	rlcf	(___fldiv@rem+1)^0,f,c
  5357   0020CA  3628               	rlcf	(___fldiv@rem+2)^0,f,c
  5358   0020CC  3629               	rlcf	(___fldiv@rem+3)^0,f,c
  5359   0020CE  90D8               	bcf	status,0,c
  5360   0020D0  361A               	rlcf	___fldiv@b^0,f,c
  5361   0020D2  361B               	rlcf	(___fldiv@b+1)^0,f,c
  5362   0020D4  361C               	rlcf	(___fldiv@b+2)^0,f,c
  5363   0020D6  361D               	rlcf	(___fldiv@b+3)^0,f,c
  5364   0020D8  AE30               	btfss	(___fldiv@grs+3)^0,7,c
  5365   0020DA  EF71  F010         	goto	u5481
  5366   0020DE  EF73  F010         	goto	u5480
  5367   0020E2                     u5481:
  5368   0020E2  EF74  F010         	goto	l1235
  5369   0020E6                     u5480:
  5370   0020E6  801A               	bsf	___fldiv@b^0,0,c
  5371   0020E8                     l1235:
  5372   0020E8  90D8               	bcf	status,0,c
  5373   0020EA  362D               	rlcf	___fldiv@grs^0,f,c
  5374   0020EC  362E               	rlcf	(___fldiv@grs+1)^0,f,c
  5375   0020EE  362F               	rlcf	(___fldiv@grs+2)^0,f,c
  5376   0020F0  3630               	rlcf	(___fldiv@grs+3)^0,f,c
  5377   0020F2                     l5810:
  5378   0020F2  501E               	movf	___fldiv@a^0,w,c
  5379   0020F4  5C26               	subwf	___fldiv@rem^0,w,c
  5380   0020F6  501F               	movf	(___fldiv@a+1)^0,w,c
  5381   0020F8  5827               	subwfb	(___fldiv@rem+1)^0,w,c
  5382   0020FA  5020               	movf	(___fldiv@a+2)^0,w,c
  5383   0020FC  5828               	subwfb	(___fldiv@rem+2)^0,w,c
  5384   0020FE  5021               	movf	(___fldiv@a+3)^0,w,c
  5385   002100  5829               	subwfb	(___fldiv@rem+3)^0,w,c
  5386   002102  A0D8               	btfss	status,0,c
  5387   002104  EF86  F010         	goto	u5491
  5388   002108  EF88  F010         	goto	u5490
  5389   00210C                     u5491:
  5390   00210C  EF91  F010         	goto	l5816
  5391   002110                     u5490:
  5392   002110  8C30               	bsf	(___fldiv@grs+3)^0,6,c
  5393   002112  501E               	movf	___fldiv@a^0,w,c
  5394   002114  5E26               	subwf	___fldiv@rem^0,f,c
  5395   002116  501F               	movf	(___fldiv@a+1)^0,w,c
  5396   002118  5A27               	subwfb	(___fldiv@rem+1)^0,f,c
  5397   00211A  5020               	movf	(___fldiv@a+2)^0,w,c
  5398   00211C  5A28               	subwfb	(___fldiv@rem+2)^0,f,c
  5399   00211E  5021               	movf	(___fldiv@a+3)^0,w,c
  5400   002120  5A29               	subwfb	(___fldiv@rem+3)^0,f,c
  5401   002122                     l5816:
  5402   002122  2A32               	incf	___fldiv@aexp^0,f,c
  5403   002124                     l1232:
  5404   002124  0E19               	movlw	25
  5405   002126  6432               	cpfsgt	___fldiv@aexp^0,c
  5406   002128  EF98  F010         	goto	u5501
  5407   00212C  EF9A  F010         	goto	u5500
  5408   002130                     u5501:
  5409   002130  EF5A  F010         	goto	l5802
  5410   002134                     u5500:
  5411   002134  5026               	movf	___fldiv@rem^0,w,c
  5412   002136  1027               	iorwf	(___fldiv@rem+1)^0,w,c
  5413   002138  1028               	iorwf	(___fldiv@rem+2)^0,w,c
  5414   00213A  1029               	iorwf	(___fldiv@rem+3)^0,w,c
  5415   00213C  B4D8               	btfsc	status,2,c
  5416   00213E  EFA3  F010         	goto	u5511
  5417   002142  EFA5  F010         	goto	u5510
  5418   002146                     u5511:
  5419   002146  EFBD  F010         	goto	l5828
  5420   00214A                     u5510:
  5421   00214A  802D               	bsf	___fldiv@grs^0,0,c
  5422   00214C  EFBD  F010         	goto	l5828
  5423   002150                     l5822:
  5424   002150  90D8               	bcf	status,0,c
  5425   002152  361A               	rlcf	___fldiv@b^0,f,c
  5426   002154  361B               	rlcf	(___fldiv@b+1)^0,f,c
  5427   002156  361C               	rlcf	(___fldiv@b+2)^0,f,c
  5428   002158  361D               	rlcf	(___fldiv@b+3)^0,f,c
  5429   00215A  AE30               	btfss	(___fldiv@grs+3)^0,7,c
  5430   00215C  EFB2  F010         	goto	u5521
  5431   002160  EFB4  F010         	goto	u5520
  5432   002164                     u5521:
  5433   002164  EFB5  F010         	goto	l1241
  5434   002168                     u5520:
  5435   002168  801A               	bsf	___fldiv@b^0,0,c
  5436   00216A                     l1241:
  5437   00216A  90D8               	bcf	status,0,c
  5438   00216C  362D               	rlcf	___fldiv@grs^0,f,c
  5439   00216E  362E               	rlcf	(___fldiv@grs+1)^0,f,c
  5440   002170  362F               	rlcf	(___fldiv@grs+2)^0,f,c
  5441   002172  3630               	rlcf	(___fldiv@grs+3)^0,f,c
  5442   002174  062B               	decf	___fldiv@new_exp^0,f,c
  5443   002176  A0D8               	btfss	status,0,c
  5444   002178  062C               	decf	(___fldiv@new_exp+1)^0,f,c
  5445   00217A                     l5828:
  5446   00217A  AE1C               	btfss	(___fldiv@b+2)^0,7,c
  5447   00217C  EFC2  F010         	goto	u5531
  5448   002180  EFC4  F010         	goto	u5530
  5449   002184                     u5531:
  5450   002184  EFA8  F010         	goto	l5822
  5451   002188                     u5530:
  5452   002188  0E00               	movlw	0
  5453   00218A  6E32               	movwf	___fldiv@aexp^0,c
  5454   00218C  AE30               	btfss	(___fldiv@grs+3)^0,7,c
  5455   00218E  EFCB  F010         	goto	u5541
  5456   002192  EFCD  F010         	goto	u5540
  5457   002196                     u5541:
  5458   002196  EFF1  F010         	goto	l1243
  5459   00219A                     u5540:
  5460   00219A  0EFF               	movlw	255
  5461   00219C  142D               	andwf	___fldiv@grs^0,w,c
  5462   00219E  6E22               	movwf	??___fldiv^0,c
  5463   0021A0  0EFF               	movlw	255
  5464   0021A2  142E               	andwf	(___fldiv@grs+1)^0,w,c
  5465   0021A4  6E23               	movwf	(??___fldiv+1)^0,c
  5466   0021A6  0EFF               	movlw	255
  5467   0021A8  142F               	andwf	(___fldiv@grs+2)^0,w,c
  5468   0021AA  6E24               	movwf	(??___fldiv+2)^0,c
  5469   0021AC  0E7F               	movlw	127
  5470   0021AE  1430               	andwf	(___fldiv@grs+3)^0,w,c
  5471   0021B0  6E25               	movwf	(??___fldiv+3)^0,c
  5472   0021B2  5022               	movf	??___fldiv^0,w,c
  5473   0021B4  1023               	iorwf	(??___fldiv+1)^0,w,c
  5474   0021B6  1024               	iorwf	(??___fldiv+2)^0,w,c
  5475   0021B8  1025               	iorwf	(??___fldiv+3)^0,w,c
  5476   0021BA  B4D8               	btfsc	status,2,c
  5477   0021BC  EFE2  F010         	goto	u5551
  5478   0021C0  EFE4  F010         	goto	u5550
  5479   0021C4                     u5551:
  5480   0021C4  EFE8  F010         	goto	l1244
  5481   0021C8                     u5550:
  5482   0021C8                     l5836:
  5483   0021C8  0E01               	movlw	1
  5484   0021CA  6E32               	movwf	___fldiv@aexp^0,c
  5485   0021CC  EFF1  F010         	goto	l1243
  5486   0021D0                     l1244:
  5487   0021D0  A01A               	btfss	___fldiv@b^0,0,c
  5488   0021D2  EFED  F010         	goto	u5561
  5489   0021D6  EFEF  F010         	goto	u5560
  5490   0021DA                     u5561:
  5491   0021DA  EFF1  F010         	goto	l1243
  5492   0021DE                     u5560:
  5493   0021DE  EFE4  F010         	goto	l5836
  5494   0021E2                     l1243:
  5495   0021E2  5032               	movf	___fldiv@aexp^0,w,c
  5496   0021E4  B4D8               	btfsc	status,2,c
  5497   0021E6  EFF7  F010         	goto	u5571
  5498   0021EA  EFF9  F010         	goto	u5570
  5499   0021EE                     u5571:
  5500   0021EE  EF1D  F011         	goto	l5848
  5501   0021F2                     u5570:
  5502   0021F2  0E01               	movlw	1
  5503   0021F4  261A               	addwf	___fldiv@b^0,f,c
  5504   0021F6  0E00               	movlw	0
  5505   0021F8  221B               	addwfc	(___fldiv@b+1)^0,f,c
  5506   0021FA  221C               	addwfc	(___fldiv@b+2)^0,f,c
  5507   0021FC  221D               	addwfc	(___fldiv@b+3)^0,f,c
  5508   0021FE  A01D               	btfss	(___fldiv@b+3)^0,0,c
  5509   002200  EF04  F011         	goto	u5581
  5510   002204  EF06  F011         	goto	u5580
  5511   002208                     u5581:
  5512   002208  EF1D  F011         	goto	l5848
  5513   00220C                     u5580:
  5514   00220C  C01A  F022         	movff	___fldiv@b,??___fldiv
  5515   002210  C01B  F023         	movff	___fldiv@b+1,??___fldiv+1
  5516   002214  C01C  F024         	movff	___fldiv@b+2,??___fldiv+2
  5517   002218  C01D  F025         	movff	___fldiv@b+3,??___fldiv+3
  5518   00221C  3425               	rlcf	(??___fldiv+3)^0,w,c
  5519   00221E  3225               	rrcf	(??___fldiv+3)^0,f,c
  5520   002220  3224               	rrcf	(??___fldiv+2)^0,f,c
  5521   002222  3223               	rrcf	(??___fldiv+1)^0,f,c
  5522   002224  3222               	rrcf	??___fldiv^0,f,c
  5523   002226  C022  F01A         	movff	??___fldiv,___fldiv@b
  5524   00222A  C023  F01B         	movff	??___fldiv+1,___fldiv@b+1
  5525   00222E  C024  F01C         	movff	??___fldiv+2,___fldiv@b+2
  5526   002232  C025  F01D         	movff	??___fldiv+3,___fldiv@b+3
  5527   002236  4A2B               	infsnz	___fldiv@new_exp^0,f,c
  5528   002238  2A2C               	incf	(___fldiv@new_exp+1)^0,f,c
  5529   00223A                     l5848:
  5530   00223A  BE2C               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5531   00223C  EF28  F011         	goto	u5591
  5532   002240  502C               	movf	(___fldiv@new_exp+1)^0,w,c
  5533   002242  E108               	bnz	u5590
  5534   002244  282B               	incf	___fldiv@new_exp^0,w,c
  5535   002246  A0D8               	btfss	status,0,c
  5536   002248  EF28  F011         	goto	u5591
  5537   00224C  EF2A  F011         	goto	u5590
  5538   002250                     u5591:
  5539   002250  EF35  F011         	goto	l5852
  5540   002254                     u5590:
  5541   002254  0E00               	movlw	0
  5542   002256  6E2C               	movwf	(___fldiv@new_exp+1)^0,c
  5543   002258  682B               	setf	___fldiv@new_exp^0,c
  5544   00225A  0E00               	movlw	0
  5545   00225C  6E1A               	movwf	___fldiv@b^0,c
  5546   00225E  0E00               	movlw	0
  5547   002260  6E1B               	movwf	(___fldiv@b+1)^0,c
  5548   002262  0E00               	movlw	0
  5549   002264  6E1C               	movwf	(___fldiv@b+2)^0,c
  5550   002266  0E00               	movlw	0
  5551   002268  6E1D               	movwf	(___fldiv@b+3)^0,c
  5552   00226A                     l5852:
  5553   00226A  BE2C               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5554   00226C  EF42  F011         	goto	u5600
  5555   002270  502C               	movf	(___fldiv@new_exp+1)^0,w,c
  5556   002272  E106               	bnz	u5601
  5557   002274  042B               	decf	___fldiv@new_exp^0,w,c
  5558   002276  B0D8               	btfsc	status,0,c
  5559   002278  EF40  F011         	goto	u5601
  5560   00227C  EF42  F011         	goto	u5600
  5561   002280                     u5601:
  5562   002280  EF50  F011         	goto	l5856
  5563   002284                     u5600:
  5564   002284  0E00               	movlw	0
  5565   002286  6E2C               	movwf	(___fldiv@new_exp+1)^0,c
  5566   002288  0E00               	movlw	0
  5567   00228A  6E2B               	movwf	___fldiv@new_exp^0,c
  5568   00228C  0E00               	movlw	0
  5569   00228E  6E1A               	movwf	___fldiv@b^0,c
  5570   002290  0E00               	movlw	0
  5571   002292  6E1B               	movwf	(___fldiv@b+1)^0,c
  5572   002294  0E00               	movlw	0
  5573   002296  6E1C               	movwf	(___fldiv@b+2)^0,c
  5574   002298  0E00               	movlw	0
  5575   00229A  6E1D               	movwf	(___fldiv@b+3)^0,c
  5576   00229C  0E00               	movlw	0
  5577   00229E  6E2A               	movwf	___fldiv@sign^0,c
  5578   0022A0                     l5856:
  5579   0022A0  C02B  F031         	movff	___fldiv@new_exp,___fldiv@bexp
  5580   0022A4  A031               	btfss	___fldiv@bexp^0,0,c
  5581   0022A6  EF57  F011         	goto	u5611
  5582   0022AA  EF59  F011         	goto	u5610
  5583   0022AE                     u5611:
  5584   0022AE  EF5C  F011         	goto	l5862
  5585   0022B2                     u5610:
  5586   0022B2  8E1C               	bsf	(___fldiv@b+2)^0,7,c
  5587   0022B4  EF5D  F011         	goto	l5864
  5588   0022B8                     l5862:
  5589   0022B8  9E1C               	bcf	(___fldiv@b+2)^0,7,c
  5590   0022BA                     l5864:
  5591   0022BA  90D8               	bcf	status,0,c
  5592   0022BC  3031               	rrcf	___fldiv@bexp^0,w,c
  5593   0022BE  6E1D               	movwf	(___fldiv@b+3)^0,c
  5594   0022C0  EF13  F010         	goto	l5778
  5595   0022C4                     l1230:
  5596   0022C4  0012               	return		;funcret
  5597   0022C6                     __end_of___fldiv:
  5598                           	callstack 0
  5599                           
  5600 ;; *************** function _initUSART4 *****************
  5601 ;; Defined at:
  5602 ;;		line 14 in file "serial.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;		None
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;		None
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  1    wreg      void 
  5609 ;; Registers used:
  5610 ;;		wreg, status,2
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5620 ;;Total ram usage:        0 bytes
  5621 ;; Hardware stack levels used: 1
  5622 ;; This function calls:
  5623 ;;		Nothing
  5624 ;; This function is called by:
  5625 ;;		_main
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text16
  5630   004396                     __ptext16:
  5631                           	callstack 0
  5632   004396                     _initUSART4:
  5633                           	callstack 30
  5634   004396                     
  5635                           ;serial.c: 15:     RC0PPS = 0x12;
  5636   004396  0E12               	movlw	18
  5637   004398  010E               	movlb	14	; () banked
  5638   00439A  6F62               	movwf	98,b	;volatile
  5639                           
  5640                           ;serial.c: 16:     RX4PPS = 0x11;
  5641   00439C  0E11               	movlw	17
  5642   00439E  6F15               	movwf	21,b	;volatile
  5643   0043A0                     
  5644                           ; BSR set to: 14
  5645                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  5646   0043A0  97E9               	bcf	233,3,b	;volatile
  5647   0043A2                     
  5648                           ; BSR set to: 14
  5649                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  5650   0043A2  95E8               	bcf	232,2,b	;volatile
  5651                           
  5652                           ;serial.c: 19:     SP4BRGL = 51;
  5653   0043A4  0E33               	movlw	51
  5654   0043A6  6FE5               	movwf	229,b	;volatile
  5655                           
  5656                           ;serial.c: 20:     SP4BRGH = 0;
  5657   0043A8  0E00               	movlw	0
  5658   0043AA  6FE6               	movwf	230,b	;volatile
  5659   0043AC                     
  5660                           ; BSR set to: 14
  5661                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  5662   0043AC  89E7               	bsf	231,4,b	;volatile
  5663   0043AE                     
  5664                           ; BSR set to: 14
  5665                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  5666   0043AE  8BE8               	bsf	232,5,b	;volatile
  5667   0043B0                     
  5668                           ; BSR set to: 14
  5669                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  5670   0043B0  8FE7               	bsf	231,7,b	;volatile
  5671   0043B2                     
  5672                           ; BSR set to: 14
  5673   0043B2  0012               	return		;funcret
  5674   0043B4                     __end_of_initUSART4:
  5675                           	callstack 0
  5676                           
  5677 ;; *************** function _initDCmotorsPWM *****************
  5678 ;; Defined at:
  5679 ;;		line 5 in file "dc_motor.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;		None
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      void 
  5686 ;; Registers used:
  5687 ;;		wreg, status,2
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5693 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5696 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5697 ;;Total ram usage:        2 bytes
  5698 ;; Hardware stack levels used: 1
  5699 ;; This function calls:
  5700 ;;		Nothing
  5701 ;; This function is called by:
  5702 ;;		_main
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           	psect	text17
  5707   0037C4                     __ptext17:
  5708                           	callstack 0
  5709   0037C4                     _initDCmotorsPWM:
  5710                           	callstack 30
  5711   0037C4                     
  5712                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  5713   0037C4  9485               	bcf	133,2,c	;volatile
  5714                           
  5715                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  5716   0037C6  9E83               	bcf	131,7,c	;volatile
  5717                           
  5718                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  5719   0037C8  9885               	bcf	133,4,c	;volatile
  5720                           
  5721                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  5722   0037CA  9C87               	bcf	135,6,c	;volatile
  5723                           
  5724                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5725   0037CC  947D               	bcf	125,2,c	;volatile
  5726                           
  5727                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  5728   0037CE  9E7B               	bcf	123,7,c	;volatile
  5729                           
  5730                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5731   0037D0  987D               	bcf	125,4,c	;volatile
  5732                           
  5733                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  5734   0037D2  9C7F               	bcf	127,6,c	;volatile
  5735   0037D4                     
  5736                           ;dc_motor.c: 18:     RE2PPS=0x05;
  5737   0037D4  0E05               	movlw	5
  5738   0037D6  010E               	movlb	14	; () banked
  5739   0037D8  6F74               	movwf	116,b	;volatile
  5740                           
  5741                           ;dc_motor.c: 19:     RE4PPS=0x06;
  5742   0037DA  0E06               	movlw	6
  5743   0037DC  6F76               	movwf	118,b	;volatile
  5744                           
  5745                           ;dc_motor.c: 20:     RC7PPS=0x07;
  5746   0037DE  0E07               	movlw	7
  5747   0037E0  6F69               	movwf	105,b	;volatile
  5748                           
  5749                           ;dc_motor.c: 21:     RG6PPS=0x08;
  5750   0037E2  0E08               	movlw	8
  5751   0037E4  6F88               	movwf	136,b	;volatile
  5752                           
  5753                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  5754   0037E6  50BD               	movf	189,w,c	;volatile
  5755   0037E8  0B8F               	andlw	-113
  5756   0037EA  0940               	iorlw	64
  5757   0037EC  6EBD               	movwf	189,c	;volatile
  5758                           
  5759                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  5760   0037EE  0EE0               	movlw	-32
  5761   0037F0  16BE               	andwf	190,f,c	;volatile
  5762                           
  5763                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  5764   0037F2  50BF               	movf	191,w,c	;volatile
  5765   0037F4  0BF0               	andlw	-16
  5766   0037F6  0901               	iorlw	1
  5767   0037F8  6EBF               	movwf	191,c	;volatile
  5768   0037FA                     
  5769                           ; BSR set to: 14
  5770                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  5771   0037FA  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5772   0037FE                     
  5773                           ; BSR set to: 14
  5774                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  5775   0037FE  8EBD               	bsf	189,7,c	;volatile
  5776                           
  5777                           ;dc_motor.c: 35:     CCPR1H=0;
  5778   003800  0E00               	movlw	0
  5779   003802  6EAA               	movwf	170,c	;volatile
  5780                           
  5781                           ;dc_motor.c: 36:     CCPR2H=0;
  5782   003804  0E00               	movlw	0
  5783   003806  6EA6               	movwf	166,c	;volatile
  5784                           
  5785                           ;dc_motor.c: 37:     CCPR3H=0;
  5786   003808  0E00               	movlw	0
  5787   00380A  010F               	movlb	15	; () banked
  5788   00380C  6F25               	movwf	37,b	;volatile
  5789                           
  5790                           ;dc_motor.c: 38:     CCPR4H=0;
  5791   00380E  0E00               	movlw	0
  5792   003810  6F21               	movwf	33,b	;volatile
  5793                           
  5794                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  5795   003812  0EFC               	movlw	-4
  5796   003814  16AD               	andwf	173,f,c	;volatile
  5797                           
  5798                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  5799   003816  0EF3               	movlw	-13
  5800   003818  16AD               	andwf	173,f,c	;volatile
  5801                           
  5802                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  5803   00381A  0ECF               	movlw	-49
  5804   00381C  16AD               	andwf	173,f,c	;volatile
  5805                           
  5806                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  5807   00381E  0E3F               	movlw	-193
  5808   003820  16AD               	andwf	173,f,c	;volatile
  5809   003822                     
  5810                           ; BSR set to: 15
  5811                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  5812   003822  88AB               	bsf	171,4,c	;volatile
  5813                           
  5814                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  5815   003824  50AB               	movf	171,w,c	;volatile
  5816   003826  0BF0               	andlw	-16
  5817   003828  090C               	iorlw	12
  5818   00382A  6EAB               	movwf	171,c	;volatile
  5819   00382C                     
  5820                           ; BSR set to: 15
  5821                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  5822   00382C  8EAB               	bsf	171,7,c	;volatile
  5823   00382E                     
  5824                           ; BSR set to: 15
  5825                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  5826   00382E  88A7               	bsf	167,4,c	;volatile
  5827                           
  5828                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  5829   003830  50A7               	movf	167,w,c	;volatile
  5830   003832  0BF0               	andlw	-16
  5831   003834  090C               	iorlw	12
  5832   003836  6EA7               	movwf	167,c	;volatile
  5833   003838                     
  5834                           ; BSR set to: 15
  5835                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  5836   003838  8EA7               	bsf	167,7,c	;volatile
  5837   00383A                     
  5838                           ; BSR set to: 15
  5839                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  5840   00383A  8926               	bsf	38,4,b	;volatile
  5841                           
  5842                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  5843   00383C  5126               	movf	38,w,b	;volatile
  5844   00383E  0BF0               	andlw	-16
  5845   003840  090C               	iorlw	12
  5846   003842  6F26               	movwf	38,b	;volatile
  5847   003844                     
  5848                           ; BSR set to: 15
  5849                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  5850   003844  8F26               	bsf	38,7,b	;volatile
  5851   003846                     
  5852                           ; BSR set to: 15
  5853                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  5854   003846  8922               	bsf	34,4,b	;volatile
  5855                           
  5856                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  5857   003848  5122               	movf	34,w,b	;volatile
  5858   00384A  0BF0               	andlw	-16
  5859   00384C  090C               	iorlw	12
  5860   00384E  6F22               	movwf	34,b	;volatile
  5861   003850                     
  5862                           ; BSR set to: 15
  5863                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  5864   003850  8F22               	bsf	34,7,b	;volatile
  5865   003852                     
  5866                           ; BSR set to: 15
  5867   003852  0012               	return		;funcret
  5868   003854                     __end_of_initDCmotorsPWM:
  5869                           	callstack 0
  5870                           
  5871 ;; *************** function _get16bitTMR0val *****************
  5872 ;; Defined at:
  5873 ;;		line 27 in file "timers.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;		None
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;  combined_val    2    6[COMRAM] unsigned int 
  5878 ;; Return value:  Size  Location     Type
  5879 ;;                  2    0[COMRAM] unsigned int 
  5880 ;; Registers used:
  5881 ;;		wreg, status,2, status,0
  5882 ;; Tracked objects:
  5883 ;;		On entry : 0/0
  5884 ;;		On exit  : 0/0
  5885 ;;		Unchanged: 0/0
  5886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5888 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5889 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5890 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5891 ;;Total ram usage:        8 bytes
  5892 ;; Hardware stack levels used: 1
  5893 ;; This function calls:
  5894 ;;		Nothing
  5895 ;; This function is called by:
  5896 ;;		_main
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           	psect	text18
  5901   004354                     __ptext18:
  5902                           	callstack 0
  5903   004354                     _get16bitTMR0val:
  5904                           	callstack 30
  5905   004354                     
  5906                           ;timers.c: 29:     unsigned int combined_value;;timers.c: 30:     combined_value = TMR0L
      +                           | (TMR0H << 8);
  5907   004354  50D4               	movf	212,w,c	;volatile
  5908   004356  6E04               	movwf	(??_get16bitTMR0val+1)^0,c
  5909   004358  6A03               	clrf	??_get16bitTMR0val^0,c
  5910   00435A  50D3               	movf	211,w,c	;volatile
  5911   00435C  6E05               	movwf	(??_get16bitTMR0val+2)^0,c
  5912   00435E  6A06               	clrf	(??_get16bitTMR0val+3)^0,c
  5913   004360  5003               	movf	??_get16bitTMR0val^0,w,c
  5914   004362  1005               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  5915   004364  6E07               	movwf	get16bitTMR0val@combined_value^0,c
  5916   004366  5004               	movf	(??_get16bitTMR0val+1)^0,w,c
  5917   004368  1006               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  5918   00436A  6E08               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  5919   00436C                     
  5920                           ;timers.c: 31:     return combined_value;
  5921   00436C  C007  F001         	movff	get16bitTMR0val@combined_value,?_get16bitTMR0val
  5922   004370  C008  F002         	movff	get16bitTMR0val@combined_value+1,?_get16bitTMR0val+1
  5923   004374  0012               	return		;funcret
  5924   004376                     __end_of_get16bitTMR0val:
  5925                           	callstack 0
  5926                           
  5927 ;; *************** function _decision *****************
  5928 ;; Defined at:
  5929 ;;		line 322 in file "color.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;  hue             2   69[COMRAM] unsigned int 
  5932 ;;  path_length     2   71[COMRAM] unsigned int 
  5933 ;; Auto vars:     Size  Location     Type
  5934 ;;  color           2   73[COMRAM] unsigned int 
  5935 ;; Return value:  Size  Location     Type
  5936 ;;                  1    wreg      void 
  5937 ;; Registers used:
  5938 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5939 ;; Tracked objects:
  5940 ;;		On entry : 0/0
  5941 ;;		On exit  : 0/0
  5942 ;;		Unchanged: 0/0
  5943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5944 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5945 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5947 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5948 ;;Total ram usage:        6 bytes
  5949 ;; Hardware stack levels used: 1
  5950 ;; Hardware stack levels required when called: 9
  5951 ;; This function calls:
  5952 ;;		_moveBlue
  5953 ;;		_moveGreen
  5954 ;;		_moveLightBlue
  5955 ;;		_moveOrange
  5956 ;;		_movePink
  5957 ;;		_moveRed
  5958 ;;		_moveYellow
  5959 ;;		_send2USART
  5960 ;; This function is called by:
  5961 ;;		_main
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           	psect	text19
  5966   00253E                     __ptext19:
  5967                           	callstack 0
  5968   00253E                     _decision:
  5969                           	callstack 21
  5970   00253E                     
  5971                           ;color.c: 327:     unsigned int color;;color.c: 329:     if (hue<=10 || hue>=355) {
  5972   00253E  5047               	movf	(decision@hue+1)^0,w,c
  5973   002540  E109               	bnz	u6300
  5974   002542  0E0B               	movlw	11
  5975   002544  5C46               	subwf	decision@hue^0,w,c
  5976   002546  A0D8               	btfss	status,0,c
  5977   002548  EFA8  F012         	goto	u6301
  5978   00254C  EFAA  F012         	goto	u6300
  5979   002550                     u6301:
  5980   002550  EFB5  F012         	goto	l6446
  5981   002554                     u6300:
  5982   002554  0E63               	movlw	99
  5983   002556  5C46               	subwf	decision@hue^0,w,c
  5984   002558  0E01               	movlw	1
  5985   00255A  5847               	subwfb	(decision@hue+1)^0,w,c
  5986   00255C  A0D8               	btfss	status,0,c
  5987   00255E  EFB3  F012         	goto	u6311
  5988   002562  EFB5  F012         	goto	u6310
  5989   002566                     u6311:
  5990   002566  EFC5  F012         	goto	l6450
  5991   00256A                     u6310:
  5992   00256A                     l6446:
  5993                           
  5994                           ;color.c: 330:         moveRed(&motorL, &motorR, path_length);
  5995   00256A  0ED8               	movlw	low _motorL
  5996   00256C  6E1C               	movwf	moveRed@mL^0,c
  5997   00256E  0ECF               	movlw	low _motorR
  5998   002570  6E1D               	movwf	moveRed@mR^0,c
  5999   002572  C048  F01E         	movff	decision@path_length,moveRed@path_length
  6000   002576  C049  F01F         	movff	decision@path_length+1,moveRed@path_length+1
  6001   00257A  EC9A  F01E         	call	_moveRed	;wreg free
  6002   00257E                     
  6003                           ;color.c: 331:         color = 1;
  6004   00257E  0E00               	movlw	0
  6005   002580  6E4B               	movwf	(decision@color+1)^0,c
  6006   002582  0E01               	movlw	1
  6007   002584  6E4A               	movwf	decision@color^0,c
  6008                           
  6009                           ;color.c: 332:     } else if (hue>=105 && hue<=130){
  6010   002586  EFA9  F013         	goto	l6498
  6011   00258A                     l6450:
  6012   00258A  5047               	movf	(decision@hue+1)^0,w,c
  6013   00258C  E109               	bnz	u6320
  6014   00258E  0E69               	movlw	105
  6015   002590  5C46               	subwf	decision@hue^0,w,c
  6016   002592  A0D8               	btfss	status,0,c
  6017   002594  EFCE  F012         	goto	u6321
  6018   002598  EFD0  F012         	goto	u6320
  6019   00259C                     u6321:
  6020   00259C  EFEB  F012         	goto	l6458
  6021   0025A0                     u6320:
  6022   0025A0  5047               	movf	(decision@hue+1)^0,w,c
  6023   0025A2  E107               	bnz	u6331
  6024   0025A4  0E83               	movlw	131
  6025   0025A6  5C46               	subwf	decision@hue^0,w,c
  6026   0025A8  B0D8               	btfsc	status,0,c
  6027   0025AA  EFD9  F012         	goto	u6331
  6028   0025AE  EFDB  F012         	goto	u6330
  6029   0025B2                     u6331:
  6030   0025B2  EFEB  F012         	goto	l6458
  6031   0025B6                     u6330:
  6032   0025B6                     
  6033                           ;color.c: 333:         moveGreen(&motorL, &motorR, path_length);
  6034   0025B6  0ED8               	movlw	low _motorL
  6035   0025B8  6E1C               	movwf	moveGreen@mL^0,c
  6036   0025BA  0ECF               	movlw	low _motorR
  6037   0025BC  6E1D               	movwf	moveGreen@mR^0,c
  6038   0025BE  C048  F01E         	movff	decision@path_length,moveGreen@path_length
  6039   0025C2  C049  F01F         	movff	decision@path_length+1,moveGreen@path_length+1
  6040   0025C6  EC2A  F01F         	call	_moveGreen	;wreg free
  6041   0025CA                     
  6042                           ;color.c: 334:         color = 2;
  6043   0025CA  0E00               	movlw	0
  6044   0025CC  6E4B               	movwf	(decision@color+1)^0,c
  6045   0025CE  0E02               	movlw	2
  6046   0025D0  6E4A               	movwf	decision@color^0,c
  6047                           
  6048                           ;color.c: 335:     } else if (hue>=230 && hue<=240){
  6049   0025D2  EFA9  F013         	goto	l6498
  6050   0025D6                     l6458:
  6051   0025D6  5047               	movf	(decision@hue+1)^0,w,c
  6052   0025D8  E109               	bnz	u6340
  6053   0025DA  0EE6               	movlw	230
  6054   0025DC  5C46               	subwf	decision@hue^0,w,c
  6055   0025DE  A0D8               	btfss	status,0,c
  6056   0025E0  EFF4  F012         	goto	u6341
  6057   0025E4  EFF6  F012         	goto	u6340
  6058   0025E8                     u6341:
  6059   0025E8  EF11  F013         	goto	l6466
  6060   0025EC                     u6340:
  6061   0025EC  5047               	movf	(decision@hue+1)^0,w,c
  6062   0025EE  E107               	bnz	u6351
  6063   0025F0  0EF1               	movlw	241
  6064   0025F2  5C46               	subwf	decision@hue^0,w,c
  6065   0025F4  B0D8               	btfsc	status,0,c
  6066   0025F6  EFFF  F012         	goto	u6351
  6067   0025FA  EF01  F013         	goto	u6350
  6068   0025FE                     u6351:
  6069   0025FE  EF11  F013         	goto	l6466
  6070   002602                     u6350:
  6071   002602                     
  6072                           ;color.c: 336:         moveBlue(&motorL,&motorR, path_length);
  6073   002602  0ED8               	movlw	low _motorL
  6074   002604  6E1C               	movwf	moveBlue@mL^0,c
  6075   002606  0ECF               	movlw	low _motorR
  6076   002608  6E1D               	movwf	moveBlue@mR^0,c
  6077   00260A  C048  F01E         	movff	decision@path_length,moveBlue@path_length
  6078   00260E  C049  F01F         	movff	decision@path_length+1,moveBlue@path_length+1
  6079   002612  EC4E  F01F         	call	_moveBlue	;wreg free
  6080   002616                     
  6081                           ;color.c: 337:         color = 3;
  6082   002616  0E00               	movlw	0
  6083   002618  6E4B               	movwf	(decision@color+1)^0,c
  6084   00261A  0E03               	movlw	3
  6085   00261C  6E4A               	movwf	decision@color^0,c
  6086                           
  6087                           ;color.c: 338:     } else if (hue>=216 && hue<=221){
  6088   00261E  EFA9  F013         	goto	l6498
  6089   002622                     l6466:
  6090   002622  5047               	movf	(decision@hue+1)^0,w,c
  6091   002624  E109               	bnz	u6360
  6092   002626  0ED8               	movlw	216
  6093   002628  5C46               	subwf	decision@hue^0,w,c
  6094   00262A  A0D8               	btfss	status,0,c
  6095   00262C  EF1A  F013         	goto	u6361
  6096   002630  EF1C  F013         	goto	u6360
  6097   002634                     u6361:
  6098   002634  EF37  F013         	goto	l6474
  6099   002638                     u6360:
  6100   002638  5047               	movf	(decision@hue+1)^0,w,c
  6101   00263A  E107               	bnz	u6371
  6102   00263C  0EDE               	movlw	222
  6103   00263E  5C46               	subwf	decision@hue^0,w,c
  6104   002640  B0D8               	btfsc	status,0,c
  6105   002642  EF25  F013         	goto	u6371
  6106   002646  EF27  F013         	goto	u6370
  6107   00264A                     u6371:
  6108   00264A  EF37  F013         	goto	l6474
  6109   00264E                     u6370:
  6110   00264E                     
  6111                           ;color.c: 339:         moveLightBlue(&motorL,&motorR, path_length);
  6112   00264E  0ED8               	movlw	low _motorL
  6113   002650  6E1C               	movwf	moveLightBlue@mL^0,c
  6114   002652  0ECF               	movlw	low _motorR
  6115   002654  6E1D               	movwf	moveLightBlue@mR^0,c
  6116   002656  C048  F01E         	movff	decision@path_length,moveLightBlue@path_length
  6117   00265A  C049  F01F         	movff	decision@path_length+1,moveLightBlue@path_length+1
  6118   00265E  EC06  F01F         	call	_moveLightBlue	;wreg free
  6119   002662                     
  6120                           ;color.c: 340:         color = 4;
  6121   002662  0E00               	movlw	0
  6122   002664  6E4B               	movwf	(decision@color+1)^0,c
  6123   002666  0E04               	movlw	4
  6124   002668  6E4A               	movwf	decision@color^0,c
  6125                           
  6126                           ;color.c: 341:     } else if (hue>=302 && hue<=346){
  6127   00266A  EFA9  F013         	goto	l6498
  6128   00266E                     l6474:
  6129   00266E  0E2E               	movlw	46
  6130   002670  5C46               	subwf	decision@hue^0,w,c
  6131   002672  0E01               	movlw	1
  6132   002674  5847               	subwfb	(decision@hue+1)^0,w,c
  6133   002676  A0D8               	btfss	status,0,c
  6134   002678  EF40  F013         	goto	u6381
  6135   00267C  EF42  F013         	goto	u6380
  6136   002680                     u6381:
  6137   002680  EF5D  F013         	goto	l6482
  6138   002684                     u6380:
  6139   002684  0E5B               	movlw	91
  6140   002686  5C46               	subwf	decision@hue^0,w,c
  6141   002688  0E01               	movlw	1
  6142   00268A  5847               	subwfb	(decision@hue+1)^0,w,c
  6143   00268C  B0D8               	btfsc	status,0,c
  6144   00268E  EF4B  F013         	goto	u6391
  6145   002692  EF4D  F013         	goto	u6390
  6146   002696                     u6391:
  6147   002696  EF5D  F013         	goto	l6482
  6148   00269A                     u6390:
  6149   00269A                     
  6150                           ;color.c: 342:         moveYellow(&motorL,&motorR, path_length);
  6151   00269A  0ED8               	movlw	low _motorL
  6152   00269C  6E1C               	movwf	moveYellow@mL^0,c
  6153   00269E  0ECF               	movlw	low _motorR
  6154   0026A0  6E1D               	movwf	moveYellow@mR^0,c
  6155   0026A2  C048  F01E         	movff	decision@path_length,moveYellow@path_length
  6156   0026A6  C049  F01F         	movff	decision@path_length+1,moveYellow@path_length+1
  6157   0026AA  EC76  F01E         	call	_moveYellow	;wreg free
  6158   0026AE                     
  6159                           ;color.c: 343:         color = 5;
  6160   0026AE  0E00               	movlw	0
  6161   0026B0  6E4B               	movwf	(decision@color+1)^0,c
  6162   0026B2  0E05               	movlw	5
  6163   0026B4  6E4A               	movwf	decision@color^0,c
  6164                           
  6165                           ;color.c: 344:     } else if (hue>14 && hue<=35){
  6166   0026B6  EFA9  F013         	goto	l6498
  6167   0026BA                     l6482:
  6168   0026BA  5047               	movf	(decision@hue+1)^0,w,c
  6169   0026BC  E109               	bnz	u6400
  6170   0026BE  0E0F               	movlw	15
  6171   0026C0  5C46               	subwf	decision@hue^0,w,c
  6172   0026C2  A0D8               	btfss	status,0,c
  6173   0026C4  EF66  F013         	goto	u6401
  6174   0026C8  EF68  F013         	goto	u6400
  6175   0026CC                     u6401:
  6176   0026CC  EF83  F013         	goto	l6490
  6177   0026D0                     u6400:
  6178   0026D0  5047               	movf	(decision@hue+1)^0,w,c
  6179   0026D2  E107               	bnz	u6411
  6180   0026D4  0E24               	movlw	36
  6181   0026D6  5C46               	subwf	decision@hue^0,w,c
  6182   0026D8  B0D8               	btfsc	status,0,c
  6183   0026DA  EF71  F013         	goto	u6411
  6184   0026DE  EF73  F013         	goto	u6410
  6185   0026E2                     u6411:
  6186   0026E2  EF83  F013         	goto	l6490
  6187   0026E6                     u6410:
  6188   0026E6                     
  6189                           ;color.c: 345:         moveOrange(&motorL,&motorR, path_length);
  6190   0026E6  0ED8               	movlw	low _motorL
  6191   0026E8  6E1C               	movwf	moveOrange@mL^0,c
  6192   0026EA  0ECF               	movlw	low _motorR
  6193   0026EC  6E1D               	movwf	moveOrange@mR^0,c
  6194   0026EE  C048  F01E         	movff	decision@path_length,moveOrange@path_length
  6195   0026F2  C049  F01F         	movff	decision@path_length+1,moveOrange@path_length+1
  6196   0026F6  ECE2  F01E         	call	_moveOrange	;wreg free
  6197   0026FA                     
  6198                           ;color.c: 346:         color= 6;
  6199   0026FA  0E00               	movlw	0
  6200   0026FC  6E4B               	movwf	(decision@color+1)^0,c
  6201   0026FE  0E06               	movlw	6
  6202   002700  6E4A               	movwf	decision@color^0,c
  6203                           
  6204                           ;color.c: 347:     } else if (hue>=244 && hue<=251){
  6205   002702  EFA9  F013         	goto	l6498
  6206   002706                     l6490:
  6207   002706  5047               	movf	(decision@hue+1)^0,w,c
  6208   002708  E109               	bnz	u6420
  6209   00270A  0EF4               	movlw	244
  6210   00270C  5C46               	subwf	decision@hue^0,w,c
  6211   00270E  A0D8               	btfss	status,0,c
  6212   002710  EF8C  F013         	goto	u6421
  6213   002714  EF8E  F013         	goto	u6420
  6214   002718                     u6421:
  6215   002718  EFA9  F013         	goto	l158
  6216   00271C                     u6420:
  6217   00271C  5047               	movf	(decision@hue+1)^0,w,c
  6218   00271E  E107               	bnz	u6431
  6219   002720  0EFC               	movlw	252
  6220   002722  5C46               	subwf	decision@hue^0,w,c
  6221   002724  B0D8               	btfsc	status,0,c
  6222   002726  EF97  F013         	goto	u6431
  6223   00272A  EF99  F013         	goto	u6430
  6224   00272E                     u6431:
  6225   00272E  EFA9  F013         	goto	l158
  6226   002732                     u6430:
  6227   002732                     
  6228                           ;color.c: 348:         movePink(&motorL,&motorR, path_length);
  6229   002732  0ED8               	movlw	low _motorL
  6230   002734  6E1C               	movwf	movePink@mL^0,c
  6231   002736  0ECF               	movlw	low _motorR
  6232   002738  6E1D               	movwf	movePink@mR^0,c
  6233   00273A  C048  F01E         	movff	decision@path_length,movePink@path_length
  6234   00273E  C049  F01F         	movff	decision@path_length+1,movePink@path_length+1
  6235   002742  ECBE  F01E         	call	_movePink	;wreg free
  6236   002746                     
  6237                           ;color.c: 349:         color = 7;
  6238   002746  0E00               	movlw	0
  6239   002748  6E4B               	movwf	(decision@color+1)^0,c
  6240   00274A  0E07               	movlw	7
  6241   00274C  6E4A               	movwf	decision@color^0,c
  6242   00274E  EFA9  F013         	goto	l6498
  6243   002752                     l158:
  6244   002752                     l6498:
  6245                           
  6246                           ;color.c: 352:     send2USART(color);
  6247   002752  C04A  F044         	movff	decision@color,send2USART@hue
  6248   002756  C04B  F045         	movff	decision@color+1,send2USART@hue+1
  6249   00275A  ECDA  F021         	call	_send2USART	;wreg free
  6250   00275E  0012               	return		;funcret
  6251   002760                     __end_of_decision:
  6252                           	callstack 0
  6253                           
  6254 ;; *************** function _send2USART *****************
  6255 ;; Defined at:
  6256 ;;		line 146 in file "serial.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;  hue             2   67[COMRAM] unsigned int 
  6259 ;; Auto vars:     Size  Location     Type
  6260 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  1    wreg      void 
  6263 ;; Registers used:
  6264 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6270 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6271 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6273 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6274 ;;Total ram usage:       52 bytes
  6275 ;; Hardware stack levels used: 1
  6276 ;; Hardware stack levels required when called: 8
  6277 ;; This function calls:
  6278 ;;		_sendStringSerial4
  6279 ;;		_sprintf
  6280 ;; This function is called by:
  6281 ;;		_decision
  6282 ;;		_main
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           	psect	text20
  6287   0043B4                     __ptext20:
  6288                           	callstack 0
  6289   0043B4                     _send2USART:
  6290                           	callstack 22
  6291   0043B4                     
  6292                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  6293   0043B4  0E60               	movlw	low send2USART@hue_char
  6294   0043B6  6E31               	movwf	sprintf@s^0,c
  6295   0043B8  0EA0               	movlw	low STR_12
  6296   0043BA  6E32               	movwf	sprintf@fmt^0,c
  6297   0043BC  C044  F033         	movff	send2USART@hue,?_sprintf+2
  6298   0043C0  C045  F034         	movff	send2USART@hue+1,?_sprintf+3
  6299   0043C4  EC73  F020         	call	_sprintf	;wreg free
  6300   0043C8                     
  6301                           ;serial.c: 158:         sendStringSerial4(hue_char);
  6302   0043C8  0E60               	movlw	low send2USART@hue_char
  6303   0043CA  6E02               	movwf	sendStringSerial4@string^0,c
  6304   0043CC  EC3D  F021         	call	_sendStringSerial4	;wreg free
  6305   0043D0  0012               	return		;funcret
  6306   0043D2                     __end_of_send2USART:
  6307                           	callstack 0
  6308                           
  6309 ;; *************** function _moveYellow *****************
  6310 ;; Defined at:
  6311 ;;		line 282 in file "dc_motor.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6314 ;;		 -> motorL(9), 
  6315 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6316 ;;		 -> motorR(9), 
  6317 ;;  path_length     2   29[COMRAM] unsigned int 
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;		None
  6320 ;; Return value:  Size  Location     Type
  6321 ;;                  1    wreg      void 
  6322 ;; Registers used:
  6323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6329 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6331 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6332 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6333 ;;Total ram usage:        6 bytes
  6334 ;; Hardware stack levels used: 1
  6335 ;; Hardware stack levels required when called: 4
  6336 ;; This function calls:
  6337 ;;		_backOneAndHalf
  6338 ;;		_logAction
  6339 ;;		_right90
  6340 ;; This function is called by:
  6341 ;;		_decision
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           	psect	text21
  6346   003CEC                     __ptext21:
  6347                           	callstack 0
  6348   003CEC                     _moveYellow:
  6349                           	callstack 25
  6350   003CEC                     
  6351                           ;dc_motor.c: 282: void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 283: {;dc_motor.c: 285:     backOneAndHalf(mL,mR);
  6352   003CEC  C01C  F018         	movff	moveYellow@mL,backOneAndHalf@mL
  6353   003CF0  C01D  F019         	movff	moveYellow@mR,backOneAndHalf@mR
  6354   003CF4  ECC0  F020         	call	_backOneAndHalf	;wreg free
  6355   003CF8                     
  6356                           ;dc_motor.c: 286:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6357   003CF8  0E29               	movlw	41
  6358   003CFA  6E21               	movwf	(??_moveYellow+1)^0,c
  6359   003CFC  0E96               	movlw	150
  6360   003CFE  6E20               	movwf	??_moveYellow^0,c
  6361   003D00  0E7F               	movlw	127
  6362   003D02                     u6587:
  6363   003D02  2EE8               	decfsz	wreg,f,c
  6364   003D04  D7FE               	bra	u6587
  6365   003D06  2E20               	decfsz	??_moveYellow^0,f,c
  6366   003D08  D7FC               	bra	u6587
  6367   003D0A  2E21               	decfsz	(??_moveYellow+1)^0,f,c
  6368   003D0C  D7FA               	bra	u6587
  6369   003D0E  0000               	nop	
  6370   003D10                     
  6371                           ;dc_motor.c: 287:     right90(mL,mR);
  6372   003D10  C01C  F018         	movff	moveYellow@mL,right90@mL
  6373   003D14  C01D  F019         	movff	moveYellow@mR,right90@mR
  6374   003D18  ECA7  F020         	call	_right90	;wreg free
  6375   003D1C                     
  6376                           ;dc_motor.c: 288:     logAction('R',0, path_length);
  6377   003D1C  0E00               	movlw	0
  6378   003D1E  6E08               	movwf	(logAction@time+1)^0,c
  6379   003D20  0E00               	movlw	0
  6380   003D22  6E07               	movwf	logAction@time^0,c
  6381   003D24  C01E  F009         	movff	moveYellow@path_length,logAction@pathLength
  6382   003D28  C01F  F00A         	movff	moveYellow@path_length+1,logAction@pathLength+1
  6383   003D2C  0E52               	movlw	82
  6384   003D2E  ECA1  F01D         	call	_logAction
  6385   003D32  0012               	return		;funcret
  6386   003D34                     __end_of_moveYellow:
  6387                           	callstack 0
  6388                           
  6389 ;; *************** function _moveRed *****************
  6390 ;; Defined at:
  6391 ;;		line 255 in file "dc_motor.c"
  6392 ;; Parameters:    Size  Location     Type
  6393 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6394 ;;		 -> motorL(9), 
  6395 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6396 ;;		 -> motorR(9), 
  6397 ;;  path_length     2   29[COMRAM] unsigned int 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;		None
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      void 
  6402 ;; Registers used:
  6403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6409 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6411 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6412 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6413 ;;Total ram usage:        6 bytes
  6414 ;; Hardware stack levels used: 1
  6415 ;; Hardware stack levels required when called: 4
  6416 ;; This function calls:
  6417 ;;		_backHalf
  6418 ;;		_logAction
  6419 ;;		_right90
  6420 ;; This function is called by:
  6421 ;;		_decision
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text22
  6426   003D34                     __ptext22:
  6427                           	callstack 0
  6428   003D34                     _moveRed:
  6429                           	callstack 25
  6430   003D34                     
  6431                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int pa
      +                          th_length);dc_motor.c: 256: {;dc_motor.c: 258:     backHalf(mL,mR);
  6432   003D34  C01C  F018         	movff	moveRed@mL,backHalf@mL
  6433   003D38  C01D  F019         	movff	moveRed@mR,backHalf@mR
  6434   003D3C  EC56  F021         	call	_backHalf	;wreg free
  6435   003D40                     
  6436                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6437   003D40  0E29               	movlw	41
  6438   003D42  6E21               	movwf	(??_moveRed+1)^0,c
  6439   003D44  0E96               	movlw	150
  6440   003D46  6E20               	movwf	??_moveRed^0,c
  6441   003D48  0E7F               	movlw	127
  6442   003D4A                     u6597:
  6443   003D4A  2EE8               	decfsz	wreg,f,c
  6444   003D4C  D7FE               	bra	u6597
  6445   003D4E  2E20               	decfsz	??_moveRed^0,f,c
  6446   003D50  D7FC               	bra	u6597
  6447   003D52  2E21               	decfsz	(??_moveRed+1)^0,f,c
  6448   003D54  D7FA               	bra	u6597
  6449   003D56  0000               	nop	
  6450   003D58                     
  6451                           ;dc_motor.c: 260:     right90(mL,mR);
  6452   003D58  C01C  F018         	movff	moveRed@mL,right90@mL
  6453   003D5C  C01D  F019         	movff	moveRed@mR,right90@mR
  6454   003D60  ECA7  F020         	call	_right90	;wreg free
  6455   003D64                     
  6456                           ;dc_motor.c: 261:     logAction('R',0, path_length);
  6457   003D64  0E00               	movlw	0
  6458   003D66  6E08               	movwf	(logAction@time+1)^0,c
  6459   003D68  0E00               	movlw	0
  6460   003D6A  6E07               	movwf	logAction@time^0,c
  6461   003D6C  C01E  F009         	movff	moveRed@path_length,logAction@pathLength
  6462   003D70  C01F  F00A         	movff	moveRed@path_length+1,logAction@pathLength+1
  6463   003D74  0E52               	movlw	82
  6464   003D76  ECA1  F01D         	call	_logAction
  6465   003D7A  0012               	return		;funcret
  6466   003D7C                     __end_of_moveRed:
  6467                           	callstack 0
  6468                           
  6469 ;; *************** function _right90 *****************
  6470 ;; Defined at:
  6471 ;;		line 193 in file "dc_motor.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6474 ;;		 -> motorL(9), 
  6475 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6476 ;;		 -> motorR(9), 
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;		None
  6479 ;; Return value:  Size  Location     Type
  6480 ;;                  1    wreg      void 
  6481 ;; Registers used:
  6482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6488 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6491 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6492 ;;Total ram usage:        4 bytes
  6493 ;; Hardware stack levels used: 1
  6494 ;; Hardware stack levels required when called: 3
  6495 ;; This function calls:
  6496 ;;		_stop
  6497 ;;		_turnRight
  6498 ;; This function is called by:
  6499 ;;		_moveRed
  6500 ;;		_moveYellow
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           	psect	text23
  6505   00414E                     __ptext23:
  6506                           	callstack 0
  6507   00414E                     _right90:
  6508                           	callstack 25
  6509   00414E                     
  6510                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  6511   00414E  C018  F013         	movff	right90@mL,turnRight@mL
  6512   004152  C019  F014         	movff	right90@mR,turnRight@mR
  6513   004156  EC71  F01C         	call	_turnRight	;wreg free
  6514   00415A                     
  6515                           ;dc_motor.c: 196:     _delay((unsigned long)((260)*(64000000/4000.0)));
  6516   00415A  0E16               	movlw	22
  6517   00415C  6E1B               	movwf	(??_right90+1)^0,c
  6518   00415E  0E1B               	movlw	27
  6519   004160  6E1A               	movwf	??_right90^0,c
  6520   004162  0E88               	movlw	136
  6521   004164                     u6607:
  6522   004164  2EE8               	decfsz	wreg,f,c
  6523   004166  D7FE               	bra	u6607
  6524   004168  2E1A               	decfsz	??_right90^0,f,c
  6525   00416A  D7FC               	bra	u6607
  6526   00416C  2E1B               	decfsz	(??_right90+1)^0,f,c
  6527   00416E  D7FA               	bra	u6607
  6528   004170  D000               	nop2	
  6529   004172                     
  6530                           ;dc_motor.c: 197:     stop(mL,mR);
  6531   004172  C018  F013         	movff	right90@mL,stop@mL
  6532   004176  C019  F014         	movff	right90@mR,stop@mR
  6533   00417A  EC2A  F01C         	call	_stop	;wreg free
  6534   00417E  0012               	return		;funcret
  6535   004180                     __end_of_right90:
  6536                           	callstack 0
  6537                           
  6538 ;; *************** function _movePink *****************
  6539 ;; Defined at:
  6540 ;;		line 291 in file "dc_motor.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6543 ;;		 -> motorL(9), 
  6544 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6545 ;;		 -> motorR(9), 
  6546 ;;  path_length     2   29[COMRAM] unsigned int 
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;		None
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  1    wreg      void 
  6551 ;; Registers used:
  6552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6558 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6560 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6561 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6562 ;;Total ram usage:        6 bytes
  6563 ;; Hardware stack levels used: 1
  6564 ;; Hardware stack levels required when called: 4
  6565 ;; This function calls:
  6566 ;;		_backOneAndHalf
  6567 ;;		_left90
  6568 ;;		_logAction
  6569 ;; This function is called by:
  6570 ;;		_decision
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text24
  6575   003D7C                     __ptext24:
  6576                           	callstack 0
  6577   003D7C                     _movePink:
  6578                           	callstack 25
  6579   003D7C                     
  6580                           ;dc_motor.c: 291: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 292: {;dc_motor.c: 294:     backOneAndHalf(mL,mR);
  6581   003D7C  C01C  F018         	movff	movePink@mL,backOneAndHalf@mL
  6582   003D80  C01D  F019         	movff	movePink@mR,backOneAndHalf@mR
  6583   003D84  ECC0  F020         	call	_backOneAndHalf	;wreg free
  6584   003D88                     
  6585                           ;dc_motor.c: 295:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6586   003D88  0E29               	movlw	41
  6587   003D8A  6E21               	movwf	(??_movePink+1)^0,c
  6588   003D8C  0E96               	movlw	150
  6589   003D8E  6E20               	movwf	??_movePink^0,c
  6590   003D90  0E7F               	movlw	127
  6591   003D92                     u6617:
  6592   003D92  2EE8               	decfsz	wreg,f,c
  6593   003D94  D7FE               	bra	u6617
  6594   003D96  2E20               	decfsz	??_movePink^0,f,c
  6595   003D98  D7FC               	bra	u6617
  6596   003D9A  2E21               	decfsz	(??_movePink+1)^0,f,c
  6597   003D9C  D7FA               	bra	u6617
  6598   003D9E  0000               	nop	
  6599   003DA0                     
  6600                           ;dc_motor.c: 296:     left90(mL,mR);
  6601   003DA0  C01C  F018         	movff	movePink@mL,left90@mL
  6602   003DA4  C01D  F019         	movff	movePink@mR,left90@mR
  6603   003DA8  EC0B  F021         	call	_left90	;wreg free
  6604   003DAC                     
  6605                           ;dc_motor.c: 297:     logAction('L',0, path_length);
  6606   003DAC  0E00               	movlw	0
  6607   003DAE  6E08               	movwf	(logAction@time+1)^0,c
  6608   003DB0  0E00               	movlw	0
  6609   003DB2  6E07               	movwf	logAction@time^0,c
  6610   003DB4  C01E  F009         	movff	movePink@path_length,logAction@pathLength
  6611   003DB8  C01F  F00A         	movff	movePink@path_length+1,logAction@pathLength+1
  6612   003DBC  0E4C               	movlw	76
  6613   003DBE  ECA1  F01D         	call	_logAction
  6614   003DC2  0012               	return		;funcret
  6615   003DC4                     __end_of_movePink:
  6616                           	callstack 0
  6617                           
  6618 ;; *************** function _backOneAndHalf *****************
  6619 ;; Defined at:
  6620 ;;		line 241 in file "dc_motor.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6623 ;;		 -> motorL(9), 
  6624 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6625 ;;		 -> motorR(9), 
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;		None
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  1    wreg      void 
  6630 ;; Registers used:
  6631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6632 ;; Tracked objects:
  6633 ;;		On entry : 0/0
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6637 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6639 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6640 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6641 ;;Total ram usage:        4 bytes
  6642 ;; Hardware stack levels used: 1
  6643 ;; Hardware stack levels required when called: 3
  6644 ;; This function calls:
  6645 ;;		_fullSpeedBack
  6646 ;;		_stop
  6647 ;; This function is called by:
  6648 ;;		_moveYellow
  6649 ;;		_movePink
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           	psect	text25
  6654   004180                     __ptext25:
  6655                           	callstack 0
  6656   004180                     _backOneAndHalf:
  6657                           	callstack 25
  6658   004180                     
  6659                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  6660   004180  C018  F013         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  6661   004184  C019  F014         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  6662   004188  EC2C  F01D         	call	_fullSpeedBack	;wreg free
  6663   00418C                     
  6664                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  6665   00418C  0E6A               	movlw	106
  6666   00418E  6E1B               	movwf	(??_backOneAndHalf+1)^0,c
  6667   004190  0E85               	movlw	133
  6668   004192  6E1A               	movwf	??_backOneAndHalf^0,c
  6669   004194  0EB4               	movlw	180
  6670   004196                     u6627:
  6671   004196  2EE8               	decfsz	wreg,f,c
  6672   004198  D7FE               	bra	u6627
  6673   00419A  2E1A               	decfsz	??_backOneAndHalf^0,f,c
  6674   00419C  D7FC               	bra	u6627
  6675   00419E  2E1B               	decfsz	(??_backOneAndHalf+1)^0,f,c
  6676   0041A0  D7FA               	bra	u6627
  6677   0041A2  D000               	nop2	
  6678   0041A4                     
  6679                           ;dc_motor.c: 245:     stop(mL,mR);
  6680   0041A4  C018  F013         	movff	backOneAndHalf@mL,stop@mL
  6681   0041A8  C019  F014         	movff	backOneAndHalf@mR,stop@mR
  6682   0041AC  EC2A  F01C         	call	_stop	;wreg free
  6683   0041B0  0012               	return		;funcret
  6684   0041B2                     __end_of_backOneAndHalf:
  6685                           	callstack 0
  6686                           
  6687 ;; *************** function _moveOrange *****************
  6688 ;; Defined at:
  6689 ;;		line 300 in file "dc_motor.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6692 ;;		 -> motorL(9), 
  6693 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6694 ;;		 -> motorR(9), 
  6695 ;;  path_length     2   29[COMRAM] unsigned int 
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;		None
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  1    wreg      void 
  6700 ;; Registers used:
  6701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6707 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6709 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6710 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6711 ;;Total ram usage:        6 bytes
  6712 ;; Hardware stack levels used: 1
  6713 ;; Hardware stack levels required when called: 4
  6714 ;; This function calls:
  6715 ;;		_backHalf
  6716 ;;		_logAction
  6717 ;;		_right135
  6718 ;; This function is called by:
  6719 ;;		_decision
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           	psect	text26
  6724   003DC4                     __ptext26:
  6725                           	callstack 0
  6726   003DC4                     _moveOrange:
  6727                           	callstack 25
  6728   003DC4                     
  6729                           ;dc_motor.c: 300: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 301: {;dc_motor.c: 303:     backHalf(mL,mR);
  6730   003DC4  C01C  F018         	movff	moveOrange@mL,backHalf@mL
  6731   003DC8  C01D  F019         	movff	moveOrange@mR,backHalf@mR
  6732   003DCC  EC56  F021         	call	_backHalf	;wreg free
  6733   003DD0                     
  6734                           ;dc_motor.c: 304:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6735   003DD0  0E29               	movlw	41
  6736   003DD2  6E21               	movwf	(??_moveOrange+1)^0,c
  6737   003DD4  0E96               	movlw	150
  6738   003DD6  6E20               	movwf	??_moveOrange^0,c
  6739   003DD8  0E7F               	movlw	127
  6740   003DDA                     u6637:
  6741   003DDA  2EE8               	decfsz	wreg,f,c
  6742   003DDC  D7FE               	bra	u6637
  6743   003DDE  2E20               	decfsz	??_moveOrange^0,f,c
  6744   003DE0  D7FC               	bra	u6637
  6745   003DE2  2E21               	decfsz	(??_moveOrange+1)^0,f,c
  6746   003DE4  D7FA               	bra	u6637
  6747   003DE6  0000               	nop	
  6748   003DE8                     
  6749                           ;dc_motor.c: 305:     right135(mL,mR);
  6750   003DE8  C01C  F018         	movff	moveOrange@mL,right135@mL
  6751   003DEC  C01D  F019         	movff	moveOrange@mR,right135@mR
  6752   003DF0  ECD9  F020         	call	_right135	;wreg free
  6753   003DF4                     
  6754                           ;dc_motor.c: 306:     logAction('135R',0, path_length);
  6755   003DF4  0E00               	movlw	0
  6756   003DF6  6E08               	movwf	(logAction@time+1)^0,c
  6757   003DF8  0E00               	movlw	0
  6758   003DFA  6E07               	movwf	logAction@time^0,c
  6759   003DFC  C01E  F009         	movff	moveOrange@path_length,logAction@pathLength
  6760   003E00  C01F  F00A         	movff	moveOrange@path_length+1,logAction@pathLength+1
  6761   003E04  0E52               	movlw	82
  6762   003E06  ECA1  F01D         	call	_logAction
  6763   003E0A  0012               	return		;funcret
  6764   003E0C                     __end_of_moveOrange:
  6765                           	callstack 0
  6766                           
  6767 ;; *************** function _right135 *****************
  6768 ;; Defined at:
  6769 ;;		line 217 in file "dc_motor.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6772 ;;		 -> motorL(9), 
  6773 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6774 ;;		 -> motorR(9), 
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6786 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6788 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6789 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6790 ;;Total ram usage:        4 bytes
  6791 ;; Hardware stack levels used: 1
  6792 ;; Hardware stack levels required when called: 3
  6793 ;; This function calls:
  6794 ;;		_stop
  6795 ;;		_turnRight
  6796 ;; This function is called by:
  6797 ;;		_moveOrange
  6798 ;;		_reverseTurn
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text27
  6803   0041B2                     __ptext27:
  6804                           	callstack 0
  6805   0041B2                     _right135:
  6806                           	callstack 25
  6807   0041B2                     
  6808                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  6809   0041B2  C018  F013         	movff	right135@mL,turnRight@mL
  6810   0041B6  C019  F014         	movff	right135@mR,turnRight@mR
  6811   0041BA  EC71  F01C         	call	_turnRight	;wreg free
  6812   0041BE                     
  6813                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  6814   0041BE  0E21               	movlw	33
  6815   0041C0  6E1B               	movwf	(??_right135+1)^0,c
  6816   0041C2  0E78               	movlw	120
  6817   0041C4  6E1A               	movwf	??_right135^0,c
  6818   0041C6  0E98               	movlw	152
  6819   0041C8                     u6647:
  6820   0041C8  2EE8               	decfsz	wreg,f,c
  6821   0041CA  D7FE               	bra	u6647
  6822   0041CC  2E1A               	decfsz	??_right135^0,f,c
  6823   0041CE  D7FC               	bra	u6647
  6824   0041D0  2E1B               	decfsz	(??_right135+1)^0,f,c
  6825   0041D2  D7FA               	bra	u6647
  6826   0041D4  D000               	nop2	
  6827   0041D6                     
  6828                           ;dc_motor.c: 221:     stop(mL,mR);
  6829   0041D6  C018  F013         	movff	right135@mL,stop@mL
  6830   0041DA  C019  F014         	movff	right135@mR,stop@mR
  6831   0041DE  EC2A  F01C         	call	_stop	;wreg free
  6832   0041E2  0012               	return		;funcret
  6833   0041E4                     __end_of_right135:
  6834                           	callstack 0
  6835                           
  6836 ;; *************** function _turnRight *****************
  6837 ;; Defined at:
  6838 ;;		line 125 in file "dc_motor.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6841 ;;		 -> motorL(9), 
  6842 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6843 ;;		 -> motorR(9), 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  i               2   21[COMRAM] unsigned int 
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  1    wreg      void 
  6848 ;; Registers used:
  6849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6855 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6856 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6857 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6858 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6859 ;;Total ram usage:        5 bytes
  6860 ;; Hardware stack levels used: 1
  6861 ;; Hardware stack levels required when called: 2
  6862 ;; This function calls:
  6863 ;;		_setMotorPWM
  6864 ;; This function is called by:
  6865 ;;		_right90
  6866 ;;		_right135
  6867 ;;		_reverseTurn
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           	psect	text28
  6872   0038E2                     __ptext28:
  6873                           	callstack 0
  6874   0038E2                     _turnRight:
  6875                           	callstack 26
  6876   0038E2                     
  6877                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  6878   0038E2  5013               	movf	turnRight@mL^0,w,c
  6879   0038E4  6ED9               	movwf	fsr2l,c
  6880   0038E6  6ADA               	clrf	fsr2h,c
  6881   0038E8  0E01               	movlw	1
  6882   0038EA  26D9               	addwf	fsr2l,f,c
  6883   0038EC  0E01               	movlw	1
  6884   0038EE  6EDF               	movwf	indf2,c
  6885                           
  6886                           ;dc_motor.c: 129:     mR->direction = 0;
  6887   0038F0  5014               	movf	turnRight@mR^0,w,c
  6888   0038F2  6ED9               	movwf	fsr2l,c
  6889   0038F4  6ADA               	clrf	fsr2h,c
  6890   0038F6  0E01               	movlw	1
  6891   0038F8  26D9               	addwf	fsr2l,f,c
  6892   0038FA  6ADF               	clrf	indf2,c
  6893   0038FC                     
  6894                           ;dc_motor.c: 131:     setMotorPWM(mL);
  6895   0038FC  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  6896   003900  ECF1  F016         	call	_setMotorPWM	;wreg free
  6897   003904                     
  6898                           ;dc_motor.c: 132:     setMotorPWM(mR);
  6899   003904  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  6900   003908  ECF1  F016         	call	_setMotorPWM	;wreg free
  6901   00390C                     
  6902                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  6903   00390C  0E00               	movlw	0
  6904   00390E  6E17               	movwf	(turnRight@i+1)^0,c
  6905   003910  0E00               	movlw	0
  6906   003912  6E16               	movwf	turnRight@i^0,c
  6907   003914                     l5360:
  6908                           
  6909                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  6910   003914  5013               	movf	turnRight@mL^0,w,c
  6911   003916  6ED9               	movwf	fsr2l,c
  6912   003918  6ADA               	clrf	fsr2h,c
  6913   00391A  2ADF               	incf	indf2,f,c
  6914                           
  6915                           ;dc_motor.c: 136:         mR->power++;
  6916   00391C  5014               	movf	turnRight@mR^0,w,c
  6917   00391E  6ED9               	movwf	fsr2l,c
  6918   003920  6ADA               	clrf	fsr2h,c
  6919   003922  2ADF               	incf	indf2,f,c
  6920   003924                     
  6921                           ;dc_motor.c: 137:         setMotorPWM(mL);
  6922   003924  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  6923   003928  ECF1  F016         	call	_setMotorPWM	;wreg free
  6924   00392C                     
  6925                           ;dc_motor.c: 138:         setMotorPWM(mR);
  6926   00392C  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  6927   003930  ECF1  F016         	call	_setMotorPWM	;wreg free
  6928   003934                     
  6929                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  6930   003934  0E0B               	movlw	11
  6931   003936  6E15               	movwf	??_turnRight^0,c
  6932   003938  0E62               	movlw	98
  6933   00393A                     u6657:
  6934   00393A  2EE8               	decfsz	wreg,f,c
  6935   00393C  D7FE               	bra	u6657
  6936   00393E  2E15               	decfsz	??_turnRight^0,f,c
  6937   003940  D7FC               	bra	u6657
  6938   003942  D000               	nop2	
  6939   003944                     
  6940                           ;dc_motor.c: 140:     }
  6941   003944  4A16               	infsnz	turnRight@i^0,f,c
  6942   003946  2A17               	incf	(turnRight@i+1)^0,f,c
  6943   003948  5017               	movf	(turnRight@i+1)^0,w,c
  6944   00394A  E109               	bnz	u4900
  6945   00394C  0E32               	movlw	50
  6946   00394E  5C16               	subwf	turnRight@i^0,w,c
  6947   003950  A0D8               	btfss	status,0,c
  6948   003952  EFAD  F01C         	goto	u4901
  6949   003956  EFAF  F01C         	goto	u4900
  6950   00395A                     u4901:
  6951   00395A  EF8A  F01C         	goto	l5360
  6952   00395E                     u4900:
  6953   00395E  0012               	return		;funcret
  6954   003960                     __end_of_turnRight:
  6955                           	callstack 0
  6956                           
  6957 ;; *************** function _moveLightBlue *****************
  6958 ;; Defined at:
  6959 ;;		line 309 in file "dc_motor.c"
  6960 ;; Parameters:    Size  Location     Type
  6961 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6962 ;;		 -> motorL(9), 
  6963 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6964 ;;		 -> motorR(9), 
  6965 ;;  path_length     2   29[COMRAM] unsigned int 
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;		None
  6968 ;; Return value:  Size  Location     Type
  6969 ;;                  1    wreg      void 
  6970 ;; Registers used:
  6971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6977 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6979 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6980 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6981 ;;Total ram usage:        6 bytes
  6982 ;; Hardware stack levels used: 1
  6983 ;; Hardware stack levels required when called: 4
  6984 ;; This function calls:
  6985 ;;		_backHalf
  6986 ;;		_left135
  6987 ;;		_logAction
  6988 ;; This function is called by:
  6989 ;;		_decision
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           	psect	text29
  6994   003E0C                     __ptext29:
  6995                           	callstack 0
  6996   003E0C                     _moveLightBlue:
  6997                           	callstack 25
  6998   003E0C                     
  6999                           ;dc_motor.c: 309: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_length);dc_motor.c: 310: {;dc_motor.c: 312:     backHalf(mL,mR);
  7000   003E0C  C01C  F018         	movff	moveLightBlue@mL,backHalf@mL
  7001   003E10  C01D  F019         	movff	moveLightBlue@mR,backHalf@mR
  7002   003E14  EC56  F021         	call	_backHalf	;wreg free
  7003   003E18                     
  7004                           ;dc_motor.c: 313:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7005   003E18  0E29               	movlw	41
  7006   003E1A  6E21               	movwf	(??_moveLightBlue+1)^0,c
  7007   003E1C  0E96               	movlw	150
  7008   003E1E  6E20               	movwf	??_moveLightBlue^0,c
  7009   003E20  0E7F               	movlw	127
  7010   003E22                     u6667:
  7011   003E22  2EE8               	decfsz	wreg,f,c
  7012   003E24  D7FE               	bra	u6667
  7013   003E26  2E20               	decfsz	??_moveLightBlue^0,f,c
  7014   003E28  D7FC               	bra	u6667
  7015   003E2A  2E21               	decfsz	(??_moveLightBlue+1)^0,f,c
  7016   003E2C  D7FA               	bra	u6667
  7017   003E2E  0000               	nop	
  7018   003E30                     
  7019                           ;dc_motor.c: 314:     left135(mL,mR);
  7020   003E30  C01C  F018         	movff	moveLightBlue@mL,left135@mL
  7021   003E34  C01D  F019         	movff	moveLightBlue@mR,left135@mR
  7022   003E38  ECF2  F020         	call	_left135	;wreg free
  7023   003E3C                     
  7024                           ;dc_motor.c: 315:     logAction('135L',0,path_length);
  7025   003E3C  0E00               	movlw	0
  7026   003E3E  6E08               	movwf	(logAction@time+1)^0,c
  7027   003E40  0E00               	movlw	0
  7028   003E42  6E07               	movwf	logAction@time^0,c
  7029   003E44  C01E  F009         	movff	moveLightBlue@path_length,logAction@pathLength
  7030   003E48  C01F  F00A         	movff	moveLightBlue@path_length+1,logAction@pathLength+1
  7031   003E4C  0E4C               	movlw	76
  7032   003E4E  ECA1  F01D         	call	_logAction
  7033   003E52  0012               	return		;funcret
  7034   003E54                     __end_of_moveLightBlue:
  7035                           	callstack 0
  7036                           
  7037 ;; *************** function _left135 *****************
  7038 ;; Defined at:
  7039 ;;		line 225 in file "dc_motor.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7042 ;;		 -> motorL(9), 
  7043 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7044 ;;		 -> motorR(9), 
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;		None
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  1    wreg      void 
  7049 ;; Registers used:
  7050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7056 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7058 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7059 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7060 ;;Total ram usage:        4 bytes
  7061 ;; Hardware stack levels used: 1
  7062 ;; Hardware stack levels required when called: 3
  7063 ;; This function calls:
  7064 ;;		_stop
  7065 ;;		_turnLeft
  7066 ;; This function is called by:
  7067 ;;		_moveLightBlue
  7068 ;;		_reverseTurn
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           	psect	text30
  7073   0041E4                     __ptext30:
  7074                           	callstack 0
  7075   0041E4                     _left135:
  7076                           	callstack 25
  7077   0041E4                     
  7078                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7079   0041E4  C018  F013         	movff	left135@mL,turnLeft@mL
  7080   0041E8  C019  F014         	movff	left135@mR,turnLeft@mR
  7081   0041EC  ECB0  F01C         	call	_turnLeft	;wreg free
  7082   0041F0                     
  7083                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7084   0041F0  0E21               	movlw	33
  7085   0041F2  6E1B               	movwf	(??_left135+1)^0,c
  7086   0041F4  0E78               	movlw	120
  7087   0041F6  6E1A               	movwf	??_left135^0,c
  7088   0041F8  0E98               	movlw	152
  7089   0041FA                     u6677:
  7090   0041FA  2EE8               	decfsz	wreg,f,c
  7091   0041FC  D7FE               	bra	u6677
  7092   0041FE  2E1A               	decfsz	??_left135^0,f,c
  7093   004200  D7FC               	bra	u6677
  7094   004202  2E1B               	decfsz	(??_left135+1)^0,f,c
  7095   004204  D7FA               	bra	u6677
  7096   004206  D000               	nop2	
  7097   004208                     
  7098                           ;dc_motor.c: 229:     stop(mL,mR);
  7099   004208  C018  F013         	movff	left135@mL,stop@mL
  7100   00420C  C019  F014         	movff	left135@mR,stop@mR
  7101   004210  EC2A  F01C         	call	_stop	;wreg free
  7102   004214  0012               	return		;funcret
  7103   004216                     __end_of_left135:
  7104                           	callstack 0
  7105                           
  7106 ;; *************** function _moveGreen *****************
  7107 ;; Defined at:
  7108 ;;		line 264 in file "dc_motor.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  7111 ;;		 -> motorL(9), 
  7112 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  7113 ;;		 -> motorR(9), 
  7114 ;;  path_length     2   29[COMRAM] unsigned int 
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;		None
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  1    wreg      void 
  7119 ;; Registers used:
  7120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7126 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7128 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7129 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7130 ;;Total ram usage:        6 bytes
  7131 ;; Hardware stack levels used: 1
  7132 ;; Hardware stack levels required when called: 4
  7133 ;; This function calls:
  7134 ;;		_backHalf
  7135 ;;		_left90
  7136 ;;		_logAction
  7137 ;; This function is called by:
  7138 ;;		_decision
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           	psect	text31
  7143   003E54                     __ptext31:
  7144                           	callstack 0
  7145   003E54                     _moveGreen:
  7146                           	callstack 25
  7147   003E54                     
  7148                           ;dc_motor.c: 264: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          path_length);dc_motor.c: 265: {;dc_motor.c: 267:     backHalf(mL,mR);
  7149   003E54  C01C  F018         	movff	moveGreen@mL,backHalf@mL
  7150   003E58  C01D  F019         	movff	moveGreen@mR,backHalf@mR
  7151   003E5C  EC56  F021         	call	_backHalf	;wreg free
  7152   003E60                     
  7153                           ;dc_motor.c: 268:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7154   003E60  0E29               	movlw	41
  7155   003E62  6E21               	movwf	(??_moveGreen+1)^0,c
  7156   003E64  0E96               	movlw	150
  7157   003E66  6E20               	movwf	??_moveGreen^0,c
  7158   003E68  0E7F               	movlw	127
  7159   003E6A                     u6687:
  7160   003E6A  2EE8               	decfsz	wreg,f,c
  7161   003E6C  D7FE               	bra	u6687
  7162   003E6E  2E20               	decfsz	??_moveGreen^0,f,c
  7163   003E70  D7FC               	bra	u6687
  7164   003E72  2E21               	decfsz	(??_moveGreen+1)^0,f,c
  7165   003E74  D7FA               	bra	u6687
  7166   003E76  0000               	nop	
  7167   003E78                     
  7168                           ;dc_motor.c: 269:     left90(mL,mR);
  7169   003E78  C01C  F018         	movff	moveGreen@mL,left90@mL
  7170   003E7C  C01D  F019         	movff	moveGreen@mR,left90@mR
  7171   003E80  EC0B  F021         	call	_left90	;wreg free
  7172   003E84                     
  7173                           ;dc_motor.c: 270:     logAction('L',0, path_length);
  7174   003E84  0E00               	movlw	0
  7175   003E86  6E08               	movwf	(logAction@time+1)^0,c
  7176   003E88  0E00               	movlw	0
  7177   003E8A  6E07               	movwf	logAction@time^0,c
  7178   003E8C  C01E  F009         	movff	moveGreen@path_length,logAction@pathLength
  7179   003E90  C01F  F00A         	movff	moveGreen@path_length+1,logAction@pathLength+1
  7180   003E94  0E4C               	movlw	76
  7181   003E96  ECA1  F01D         	call	_logAction
  7182   003E9A  0012               	return		;funcret
  7183   003E9C                     __end_of_moveGreen:
  7184                           	callstack 0
  7185                           
  7186 ;; *************** function _left90 *****************
  7187 ;; Defined at:
  7188 ;;		line 201 in file "dc_motor.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7191 ;;		 -> motorL(9), 
  7192 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7193 ;;		 -> motorR(9), 
  7194 ;; Auto vars:     Size  Location     Type
  7195 ;;		None
  7196 ;; Return value:  Size  Location     Type
  7197 ;;                  1    wreg      void 
  7198 ;; Registers used:
  7199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7200 ;; Tracked objects:
  7201 ;;		On entry : 0/0
  7202 ;;		On exit  : 0/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7205 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7207 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7208 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7209 ;;Total ram usage:        4 bytes
  7210 ;; Hardware stack levels used: 1
  7211 ;; Hardware stack levels required when called: 3
  7212 ;; This function calls:
  7213 ;;		_stop
  7214 ;;		_turnLeft
  7215 ;; This function is called by:
  7216 ;;		_moveGreen
  7217 ;;		_movePink
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           	psect	text32
  7222   004216                     __ptext32:
  7223                           	callstack 0
  7224   004216                     _left90:
  7225                           	callstack 25
  7226   004216                     
  7227                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  7228   004216  C018  F013         	movff	left90@mL,turnLeft@mL
  7229   00421A  C019  F014         	movff	left90@mR,turnLeft@mR
  7230   00421E  ECB0  F01C         	call	_turnLeft	;wreg free
  7231   004222                     
  7232                           ;dc_motor.c: 204:     _delay((unsigned long)((260)*(64000000/4000.0)));
  7233   004222  0E16               	movlw	22
  7234   004224  6E1B               	movwf	(??_left90+1)^0,c
  7235   004226  0E1B               	movlw	27
  7236   004228  6E1A               	movwf	??_left90^0,c
  7237   00422A  0E88               	movlw	136
  7238   00422C                     u6697:
  7239   00422C  2EE8               	decfsz	wreg,f,c
  7240   00422E  D7FE               	bra	u6697
  7241   004230  2E1A               	decfsz	??_left90^0,f,c
  7242   004232  D7FC               	bra	u6697
  7243   004234  2E1B               	decfsz	(??_left90+1)^0,f,c
  7244   004236  D7FA               	bra	u6697
  7245   004238  D000               	nop2	
  7246   00423A                     
  7247                           ;dc_motor.c: 205:     stop(mL,mR);
  7248   00423A  C018  F013         	movff	left90@mL,stop@mL
  7249   00423E  C019  F014         	movff	left90@mR,stop@mR
  7250   004242  EC2A  F01C         	call	_stop	;wreg free
  7251   004246  0012               	return		;funcret
  7252   004248                     __end_of_left90:
  7253                           	callstack 0
  7254                           
  7255 ;; *************** function _moveBlue *****************
  7256 ;; Defined at:
  7257 ;;		line 273 in file "dc_motor.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  7260 ;;		 -> motorL(9), 
  7261 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  7262 ;;		 -> motorR(9), 
  7263 ;;  path_length     2   29[COMRAM] unsigned int 
  7264 ;; Auto vars:     Size  Location     Type
  7265 ;;		None
  7266 ;; Return value:  Size  Location     Type
  7267 ;;                  1    wreg      void 
  7268 ;; Registers used:
  7269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7270 ;; Tracked objects:
  7271 ;;		On entry : 0/0
  7272 ;;		On exit  : 0/0
  7273 ;;		Unchanged: 0/0
  7274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7277 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7278 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7279 ;;Total ram usage:        6 bytes
  7280 ;; Hardware stack levels used: 1
  7281 ;; Hardware stack levels required when called: 4
  7282 ;; This function calls:
  7283 ;;		_backHalf
  7284 ;;		_logAction
  7285 ;;		_turn180
  7286 ;; This function is called by:
  7287 ;;		_decision
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           	psect	text33
  7292   003E9C                     __ptext33:
  7293                           	callstack 0
  7294   003E9C                     _moveBlue:
  7295                           	callstack 25
  7296   003E9C                     
  7297                           ;dc_motor.c: 273: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 274: {;dc_motor.c: 276:     backHalf(mL,mR);
  7298   003E9C  C01C  F018         	movff	moveBlue@mL,backHalf@mL
  7299   003EA0  C01D  F019         	movff	moveBlue@mR,backHalf@mR
  7300   003EA4  EC56  F021         	call	_backHalf	;wreg free
  7301   003EA8                     
  7302                           ;dc_motor.c: 277:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7303   003EA8  0E29               	movlw	41
  7304   003EAA  6E21               	movwf	(??_moveBlue+1)^0,c
  7305   003EAC  0E96               	movlw	150
  7306   003EAE  6E20               	movwf	??_moveBlue^0,c
  7307   003EB0  0E7F               	movlw	127
  7308   003EB2                     u6707:
  7309   003EB2  2EE8               	decfsz	wreg,f,c
  7310   003EB4  D7FE               	bra	u6707
  7311   003EB6  2E20               	decfsz	??_moveBlue^0,f,c
  7312   003EB8  D7FC               	bra	u6707
  7313   003EBA  2E21               	decfsz	(??_moveBlue+1)^0,f,c
  7314   003EBC  D7FA               	bra	u6707
  7315   003EBE  0000               	nop	
  7316   003EC0                     
  7317                           ;dc_motor.c: 278:     turn180(mL,mR);
  7318   003EC0  C01C  F018         	movff	moveBlue@mL,turn180@mL
  7319   003EC4  C01D  F019         	movff	moveBlue@mR,turn180@mR
  7320   003EC8  EC24  F021         	call	_turn180	;wreg free
  7321   003ECC                     
  7322                           ;dc_motor.c: 279:     logAction('180',0, path_length);
  7323   003ECC  0E00               	movlw	0
  7324   003ECE  6E08               	movwf	(logAction@time+1)^0,c
  7325   003ED0  0E00               	movlw	0
  7326   003ED2  6E07               	movwf	logAction@time^0,c
  7327   003ED4  C01E  F009         	movff	moveBlue@path_length,logAction@pathLength
  7328   003ED8  C01F  F00A         	movff	moveBlue@path_length+1,logAction@pathLength+1
  7329   003EDC  0E30               	movlw	48
  7330   003EDE  ECA1  F01D         	call	_logAction
  7331   003EE2  0012               	return		;funcret
  7332   003EE4                     __end_of_moveBlue:
  7333                           	callstack 0
  7334                           
  7335 ;; *************** function _turn180 *****************
  7336 ;; Defined at:
  7337 ;;		line 209 in file "dc_motor.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7340 ;;		 -> motorL(9), 
  7341 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7342 ;;		 -> motorR(9), 
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;		None
  7345 ;; Return value:  Size  Location     Type
  7346 ;;                  1    wreg      void 
  7347 ;; Registers used:
  7348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7356 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7357 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7358 ;;Total ram usage:        4 bytes
  7359 ;; Hardware stack levels used: 1
  7360 ;; Hardware stack levels required when called: 3
  7361 ;; This function calls:
  7362 ;;		_stop
  7363 ;;		_turnLeft
  7364 ;; This function is called by:
  7365 ;;		_moveBlue
  7366 ;;		_reverseTurn
  7367 ;;		_moveWhite
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371                           	psect	text34
  7372   004248                     __ptext34:
  7373                           	callstack 0
  7374   004248                     _turn180:
  7375                           	callstack 25
  7376   004248                     
  7377                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  7378   004248  C018  F013         	movff	turn180@mL,turnLeft@mL
  7379   00424C  C019  F014         	movff	turn180@mR,turnLeft@mR
  7380   004250  ECB0  F01C         	call	_turnLeft	;wreg free
  7381   004254                     
  7382                           ;dc_motor.c: 212:     _delay((unsigned long)((520)*(64000000/4000.0)));
  7383   004254  0E2B               	movlw	43
  7384   004256  6E1B               	movwf	(??_turn180+1)^0,c
  7385   004258  0E36               	movlw	54
  7386   00425A  6E1A               	movwf	??_turn180^0,c
  7387   00425C  0E13               	movlw	19
  7388   00425E                     u6717:
  7389   00425E  2EE8               	decfsz	wreg,f,c
  7390   004260  D7FE               	bra	u6717
  7391   004262  2E1A               	decfsz	??_turn180^0,f,c
  7392   004264  D7FC               	bra	u6717
  7393   004266  2E1B               	decfsz	(??_turn180+1)^0,f,c
  7394   004268  D7FA               	bra	u6717
  7395   00426A  0000               	nop	
  7396   00426C                     
  7397                           ;dc_motor.c: 213:     stop(mL,mR);
  7398   00426C  C018  F013         	movff	turn180@mL,stop@mL
  7399   004270  C019  F014         	movff	turn180@mR,stop@mR
  7400   004274  EC2A  F01C         	call	_stop	;wreg free
  7401   004278  0012               	return		;funcret
  7402   00427A                     __end_of_turn180:
  7403                           	callstack 0
  7404                           
  7405 ;; *************** function _turnLeft *****************
  7406 ;; Defined at:
  7407 ;;		line 105 in file "dc_motor.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7410 ;;		 -> motorL(9), 
  7411 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7412 ;;		 -> motorR(9), 
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;  i               2   21[COMRAM] unsigned int 
  7415 ;; Return value:  Size  Location     Type
  7416 ;;                  1    wreg      void 
  7417 ;; Registers used:
  7418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7424 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7425 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7426 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7427 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7428 ;;Total ram usage:        5 bytes
  7429 ;; Hardware stack levels used: 1
  7430 ;; Hardware stack levels required when called: 2
  7431 ;; This function calls:
  7432 ;;		_setMotorPWM
  7433 ;; This function is called by:
  7434 ;;		_left90
  7435 ;;		_turn180
  7436 ;;		_left135
  7437 ;;		_reverseTurn
  7438 ;; This function uses a non-reentrant model
  7439 ;;
  7440                           
  7441                           	psect	text35
  7442   003960                     __ptext35:
  7443                           	callstack 0
  7444   003960                     _turnLeft:
  7445                           	callstack 26
  7446   003960                     
  7447                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  7448   003960  5013               	movf	turnLeft@mL^0,w,c
  7449   003962  6ED9               	movwf	fsr2l,c
  7450   003964  6ADA               	clrf	fsr2h,c
  7451   003966  0E01               	movlw	1
  7452   003968  26D9               	addwf	fsr2l,f,c
  7453   00396A  6ADF               	clrf	indf2,c
  7454                           
  7455                           ;dc_motor.c: 109:     mR->direction = 1;
  7456   00396C  5014               	movf	turnLeft@mR^0,w,c
  7457   00396E  6ED9               	movwf	fsr2l,c
  7458   003970  6ADA               	clrf	fsr2h,c
  7459   003972  0E01               	movlw	1
  7460   003974  26D9               	addwf	fsr2l,f,c
  7461   003976  0E01               	movlw	1
  7462   003978  6EDF               	movwf	indf2,c
  7463   00397A                     
  7464                           ;dc_motor.c: 111:     setMotorPWM(mL);
  7465   00397A  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  7466   00397E  ECF1  F016         	call	_setMotorPWM	;wreg free
  7467   003982                     
  7468                           ;dc_motor.c: 112:     setMotorPWM(mR);
  7469   003982  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  7470   003986  ECF1  F016         	call	_setMotorPWM	;wreg free
  7471   00398A                     
  7472                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  7473   00398A  0E00               	movlw	0
  7474   00398C  6E17               	movwf	(turnLeft@i+1)^0,c
  7475   00398E  0E00               	movlw	0
  7476   003990  6E16               	movwf	turnLeft@i^0,c
  7477   003992                     l5336:
  7478                           
  7479                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  7480   003992  5013               	movf	turnLeft@mL^0,w,c
  7481   003994  6ED9               	movwf	fsr2l,c
  7482   003996  6ADA               	clrf	fsr2h,c
  7483   003998  2ADF               	incf	indf2,f,c
  7484                           
  7485                           ;dc_motor.c: 116:         mR->power++;
  7486   00399A  5014               	movf	turnLeft@mR^0,w,c
  7487   00399C  6ED9               	movwf	fsr2l,c
  7488   00399E  6ADA               	clrf	fsr2h,c
  7489   0039A0  2ADF               	incf	indf2,f,c
  7490   0039A2                     
  7491                           ;dc_motor.c: 117:         setMotorPWM(mL);
  7492   0039A2  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  7493   0039A6  ECF1  F016         	call	_setMotorPWM	;wreg free
  7494   0039AA                     
  7495                           ;dc_motor.c: 118:         setMotorPWM(mR);
  7496   0039AA  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  7497   0039AE  ECF1  F016         	call	_setMotorPWM	;wreg free
  7498   0039B2                     
  7499                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7500   0039B2  0E0B               	movlw	11
  7501   0039B4  6E15               	movwf	??_turnLeft^0,c
  7502   0039B6  0E62               	movlw	98
  7503   0039B8                     u6727:
  7504   0039B8  2EE8               	decfsz	wreg,f,c
  7505   0039BA  D7FE               	bra	u6727
  7506   0039BC  2E15               	decfsz	??_turnLeft^0,f,c
  7507   0039BE  D7FC               	bra	u6727
  7508   0039C0  D000               	nop2	
  7509   0039C2                     
  7510                           ;dc_motor.c: 120:     }
  7511   0039C2  4A16               	infsnz	turnLeft@i^0,f,c
  7512   0039C4  2A17               	incf	(turnLeft@i+1)^0,f,c
  7513   0039C6  5017               	movf	(turnLeft@i+1)^0,w,c
  7514   0039C8  E109               	bnz	u4890
  7515   0039CA  0E32               	movlw	50
  7516   0039CC  5C16               	subwf	turnLeft@i^0,w,c
  7517   0039CE  A0D8               	btfss	status,0,c
  7518   0039D0  EFEC  F01C         	goto	u4891
  7519   0039D4  EFEE  F01C         	goto	u4890
  7520   0039D8                     u4891:
  7521   0039D8  EFC9  F01C         	goto	l5336
  7522   0039DC                     u4890:
  7523   0039DC  0012               	return		;funcret
  7524   0039DE                     __end_of_turnLeft:
  7525                           	callstack 0
  7526                           
  7527 ;; *************** function _logAction *****************
  7528 ;; Defined at:
  7529 ;;		line 336 in file "dc_motor.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;  action          1    wreg     unsigned char 
  7532 ;;  time            2    6[COMRAM] int 
  7533 ;;  pathLength      2    8[COMRAM] unsigned int 
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;  action          1   10[COMRAM] unsigned char 
  7536 ;; Return value:  Size  Location     Type
  7537 ;;                  1    wreg      void 
  7538 ;; Registers used:
  7539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7546 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7548 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7549 ;;Total ram usage:        5 bytes
  7550 ;; Hardware stack levels used: 1
  7551 ;; Hardware stack levels required when called: 1
  7552 ;; This function calls:
  7553 ;;		___wmul
  7554 ;; This function is called by:
  7555 ;;		_main
  7556 ;;		_moveRed
  7557 ;;		_moveGreen
  7558 ;;		_moveBlue
  7559 ;;		_moveYellow
  7560 ;;		_movePink
  7561 ;;		_moveOrange
  7562 ;;		_moveLightBlue
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           	psect	text36
  7567   003B42                     __ptext36:
  7568                           	callstack 0
  7569   003B42                     _logAction:
  7570                           	callstack 29
  7571                           
  7572                           ;incstack = 0
  7573                           ;logAction@action stored from wreg
  7574   003B42  6E0B               	movwf	logAction@action^0,c
  7575   003B44                     
  7576                           ;dc_motor.c: 337:     if (pathLength < 50) {
  7577   003B44  500A               	movf	(logAction@pathLength+1)^0,w,c
  7578   003B46  E107               	bnz	u5371
  7579   003B48  0E32               	movlw	50
  7580   003B4A  5C09               	subwf	logAction@pathLength^0,w,c
  7581   003B4C  B0D8               	btfsc	status,0,c
  7582   003B4E  EFAB  F01D         	goto	u5371
  7583   003B52  EFAD  F01D         	goto	u5370
  7584   003B56                     u5371:
  7585   003B56  EFD5  F01D         	goto	l478
  7586   003B5A                     u5370:
  7587   003B5A                     
  7588                           ;dc_motor.c: 338:         path[pathLength].action = action;
  7589   003B5A  C009  F001         	movff	logAction@pathLength,___wmul@multiplier
  7590   003B5E  C00A  F002         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7591   003B62  0E00               	movlw	0
  7592   003B64  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  7593   003B66  0E03               	movlw	3
  7594   003B68  6E03               	movwf	___wmul@multiplicand^0,c
  7595   003B6A  EC97  F021         	call	___wmul	;wreg free
  7596   003B6E  0E00               	movlw	low _path
  7597   003B70  2401               	addwf	?___wmul^0,w,c
  7598   003B72  6ED9               	movwf	fsr2l,c
  7599   003B74  0E02               	movlw	high _path
  7600   003B76  2002               	addwfc	(?___wmul+1)^0,w,c
  7601   003B78  6EDA               	movwf	fsr2h,c
  7602   003B7A  C00B  FFDF         	movff	logAction@action,indf2
  7603                           
  7604                           ;dc_motor.c: 339:         path[pathLength].time = time;
  7605   003B7E  C009  F001         	movff	logAction@pathLength,___wmul@multiplier
  7606   003B82  C00A  F002         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7607   003B86  0E00               	movlw	0
  7608   003B88  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  7609   003B8A  0E03               	movlw	3
  7610   003B8C  6E03               	movwf	___wmul@multiplicand^0,c
  7611   003B8E  EC97  F021         	call	___wmul	;wreg free
  7612   003B92  0E01               	movlw	low (_path+1)
  7613   003B94  2401               	addwf	?___wmul^0,w,c
  7614   003B96  6ED9               	movwf	fsr2l,c
  7615   003B98  0E02               	movlw	high (_path+1)
  7616   003B9A  2002               	addwfc	(?___wmul+1)^0,w,c
  7617   003B9C  6EDA               	movwf	fsr2h,c
  7618   003B9E  C007  FFDE         	movff	logAction@time,postinc2
  7619   003BA2  C008  FFDD         	movff	logAction@time+1,postdec2
  7620   003BA6                     
  7621                           ;dc_motor.c: 340:         pathLength++;
  7622   003BA6  4A09               	infsnz	logAction@pathLength^0,f,c
  7623   003BA8  2A0A               	incf	(logAction@pathLength+1)^0,f,c
  7624   003BAA                     l478:
  7625   003BAA  0012               	return		;funcret
  7626   003BAC                     __end_of_logAction:
  7627                           	callstack 0
  7628                           
  7629 ;; *************** function _backHalf *****************
  7630 ;; Defined at:
  7631 ;;		line 233 in file "dc_motor.c"
  7632 ;; Parameters:    Size  Location     Type
  7633 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7634 ;;		 -> motorL(9), 
  7635 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7636 ;;		 -> motorR(9), 
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;		None
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  1    wreg      void 
  7641 ;; Registers used:
  7642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7643 ;; Tracked objects:
  7644 ;;		On entry : 0/0
  7645 ;;		On exit  : 0/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7648 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7650 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7651 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7652 ;;Total ram usage:        4 bytes
  7653 ;; Hardware stack levels used: 1
  7654 ;; Hardware stack levels required when called: 3
  7655 ;; This function calls:
  7656 ;;		_fullSpeedBack
  7657 ;;		_stop
  7658 ;; This function is called by:
  7659 ;;		_moveRed
  7660 ;;		_moveGreen
  7661 ;;		_moveBlue
  7662 ;;		_moveOrange
  7663 ;;		_moveLightBlue
  7664 ;;		_moveWhite
  7665 ;; This function uses a non-reentrant model
  7666 ;;
  7667                           
  7668                           	psect	text37
  7669   0042AC                     __ptext37:
  7670                           	callstack 0
  7671   0042AC                     _backHalf:
  7672                           	callstack 25
  7673   0042AC                     
  7674                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  7675   0042AC  C018  F013         	movff	backHalf@mL,fullSpeedBack@mL
  7676   0042B0  C019  F014         	movff	backHalf@mR,fullSpeedBack@mR
  7677   0042B4  EC2C  F01D         	call	_fullSpeedBack	;wreg free
  7678   0042B8                     
  7679                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  7680   0042B8  0E19               	movlw	25
  7681   0042BA  6E1B               	movwf	(??_backHalf+1)^0,c
  7682   0042BC  0E5A               	movlw	90
  7683   0042BE  6E1A               	movwf	??_backHalf^0,c
  7684   0042C0  0EB2               	movlw	178
  7685   0042C2                     u6737:
  7686   0042C2  2EE8               	decfsz	wreg,f,c
  7687   0042C4  D7FE               	bra	u6737
  7688   0042C6  2E1A               	decfsz	??_backHalf^0,f,c
  7689   0042C8  D7FC               	bra	u6737
  7690   0042CA  2E1B               	decfsz	(??_backHalf+1)^0,f,c
  7691   0042CC  D7FA               	bra	u6737
  7692   0042CE                     
  7693                           ;dc_motor.c: 237:     stop(mL,mR);
  7694   0042CE  C018  F013         	movff	backHalf@mL,stop@mL
  7695   0042D2  C019  F014         	movff	backHalf@mR,stop@mR
  7696   0042D6  EC2A  F01C         	call	_stop	;wreg free
  7697   0042DA  0012               	return		;funcret
  7698   0042DC                     __end_of_backHalf:
  7699                           	callstack 0
  7700                           
  7701 ;; *************** function _stop *****************
  7702 ;; Defined at:
  7703 ;;		line 88 in file "dc_motor.c"
  7704 ;; Parameters:    Size  Location     Type
  7705 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7706 ;;		 -> motorL(9), 
  7707 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7708 ;;		 -> motorR(9), 
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;		None
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      void 
  7713 ;; Registers used:
  7714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7720 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7722 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7723 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7724 ;;Total ram usage:        3 bytes
  7725 ;; Hardware stack levels used: 1
  7726 ;; Hardware stack levels required when called: 2
  7727 ;; This function calls:
  7728 ;;		_setMotorPWM
  7729 ;; This function is called by:
  7730 ;;		_main
  7731 ;;		_right90
  7732 ;;		_left90
  7733 ;;		_turn180
  7734 ;;		_right135
  7735 ;;		_left135
  7736 ;;		_backHalf
  7737 ;;		_backOneAndHalf
  7738 ;;		_reverseStraight
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text38
  7743   003854                     __ptext38:
  7744                           	callstack 0
  7745   003854                     _stop:
  7746                           	callstack 28
  7747   003854                     
  7748                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  7749   003854  EF5A  F01C         	goto	l5320
  7750   003858                     l5306:
  7751                           
  7752                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  7753   003858  5013               	movf	stop@mL^0,w,c
  7754   00385A  6ED9               	movwf	fsr2l,c
  7755   00385C  6ADA               	clrf	fsr2h,c
  7756   00385E  50DF               	movf	indf2,w,c
  7757   003860  B4D8               	btfsc	status,2,c
  7758   003862  EF35  F01C         	goto	u4851
  7759   003866  EF37  F01C         	goto	u4850
  7760   00386A                     u4851:
  7761   00386A  EF3B  F01C         	goto	l5310
  7762   00386E                     u4850:
  7763   00386E  5013               	movf	stop@mL^0,w,c
  7764   003870  6ED9               	movwf	fsr2l,c
  7765   003872  6ADA               	clrf	fsr2h,c
  7766   003874  06DF               	decf	indf2,f,c
  7767   003876                     l5310:
  7768                           
  7769                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  7770   003876  5014               	movf	stop@mR^0,w,c
  7771   003878  6ED9               	movwf	fsr2l,c
  7772   00387A  6ADA               	clrf	fsr2h,c
  7773   00387C  50DF               	movf	indf2,w,c
  7774   00387E  B4D8               	btfsc	status,2,c
  7775   003880  EF44  F01C         	goto	u4861
  7776   003884  EF46  F01C         	goto	u4860
  7777   003888                     u4861:
  7778   003888  EF4A  F01C         	goto	l5314
  7779   00388C                     u4860:
  7780   00388C  5014               	movf	stop@mR^0,w,c
  7781   00388E  6ED9               	movwf	fsr2l,c
  7782   003890  6ADA               	clrf	fsr2h,c
  7783   003892  06DF               	decf	indf2,f,c
  7784   003894                     l5314:
  7785                           
  7786                           ;dc_motor.c: 96:         setMotorPWM(mL);
  7787   003894  C013  F00E         	movff	stop@mL,setMotorPWM@m
  7788   003898  ECF1  F016         	call	_setMotorPWM	;wreg free
  7789   00389C                     
  7790                           ;dc_motor.c: 97:         setMotorPWM(mR);
  7791   00389C  C014  F00E         	movff	stop@mR,setMotorPWM@m
  7792   0038A0  ECF1  F016         	call	_setMotorPWM	;wreg free
  7793   0038A4                     
  7794                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7795   0038A4  0E0B               	movlw	11
  7796   0038A6  6E15               	movwf	??_stop^0,c
  7797   0038A8  0E62               	movlw	98
  7798   0038AA                     u6747:
  7799   0038AA  2EE8               	decfsz	wreg,f,c
  7800   0038AC  D7FE               	bra	u6747
  7801   0038AE  2E15               	decfsz	??_stop^0,f,c
  7802   0038B0  D7FC               	bra	u6747
  7803   0038B2  D000               	nop2	
  7804   0038B4                     l5320:
  7805                           
  7806                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  7807   0038B4  5013               	movf	stop@mL^0,w,c
  7808   0038B6  6ED9               	movwf	fsr2l,c
  7809   0038B8  6ADA               	clrf	fsr2h,c
  7810   0038BA  50DF               	movf	indf2,w,c
  7811   0038BC  A4D8               	btfss	status,2,c
  7812   0038BE  EF63  F01C         	goto	u4871
  7813   0038C2  EF65  F01C         	goto	u4870
  7814   0038C6                     u4871:
  7815   0038C6  EF2C  F01C         	goto	l5306
  7816   0038CA                     u4870:
  7817   0038CA  5014               	movf	stop@mR^0,w,c
  7818   0038CC  6ED9               	movwf	fsr2l,c
  7819   0038CE  6ADA               	clrf	fsr2h,c
  7820   0038D0  50DF               	movf	indf2,w,c
  7821   0038D2  A4D8               	btfss	status,2,c
  7822   0038D4  EF6E  F01C         	goto	u4881
  7823   0038D8  EF70  F01C         	goto	u4880
  7824   0038DC                     u4881:
  7825   0038DC  EF2C  F01C         	goto	l5306
  7826   0038E0                     u4880:
  7827   0038E0  0012               	return		;funcret
  7828   0038E2                     __end_of_stop:
  7829                           	callstack 0
  7830                           
  7831 ;; *************** function _fullSpeedBack *****************
  7832 ;; Defined at:
  7833 ;;		line 165 in file "dc_motor.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7836 ;;		 -> motorL(9), 
  7837 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7838 ;;		 -> motorR(9), 
  7839 ;; Auto vars:     Size  Location     Type
  7840 ;;  power           2   21[COMRAM] int 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  1    wreg      void 
  7843 ;; Registers used:
  7844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7850 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7851 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7853 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7854 ;;Total ram usage:        5 bytes
  7855 ;; Hardware stack levels used: 1
  7856 ;; Hardware stack levels required when called: 2
  7857 ;; This function calls:
  7858 ;;		_setMotorPWM
  7859 ;; This function is called by:
  7860 ;;		_backHalf
  7861 ;;		_backOneAndHalf
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text39
  7866   003A58                     __ptext39:
  7867                           	callstack 0
  7868   003A58                     _fullSpeedBack:
  7869                           	callstack 25
  7870   003A58                     
  7871                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  7872   003A58  5013               	movf	fullSpeedBack@mL^0,w,c
  7873   003A5A  6ED9               	movwf	fsr2l,c
  7874   003A5C  6ADA               	clrf	fsr2h,c
  7875   003A5E  0E01               	movlw	1
  7876   003A60  26D9               	addwf	fsr2l,f,c
  7877   003A62  6ADF               	clrf	indf2,c
  7878                           
  7879                           ;dc_motor.c: 169:     mR->direction = 0;
  7880   003A64  5014               	movf	fullSpeedBack@mR^0,w,c
  7881   003A66  6ED9               	movwf	fsr2l,c
  7882   003A68  6ADA               	clrf	fsr2h,c
  7883   003A6A  0E01               	movlw	1
  7884   003A6C  26D9               	addwf	fsr2l,f,c
  7885   003A6E  6ADF               	clrf	indf2,c
  7886   003A70                     
  7887                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  7888   003A70  0E00               	movlw	0
  7889   003A72  6E17               	movwf	(fullSpeedBack@power+1)^0,c
  7890   003A74  0E00               	movlw	0
  7891   003A76  6E16               	movwf	fullSpeedBack@power^0,c
  7892   003A78                     l5380:
  7893                           
  7894                           ;dc_motor.c: 172:         mL->power = power;
  7895   003A78  5013               	movf	fullSpeedBack@mL^0,w,c
  7896   003A7A  6ED9               	movwf	fsr2l,c
  7897   003A7C  6ADA               	clrf	fsr2h,c
  7898   003A7E  C016  FFDF         	movff	fullSpeedBack@power,indf2
  7899                           
  7900                           ;dc_motor.c: 173:         mR->power = power;
  7901   003A82  5014               	movf	fullSpeedBack@mR^0,w,c
  7902   003A84  6ED9               	movwf	fsr2l,c
  7903   003A86  6ADA               	clrf	fsr2h,c
  7904   003A88  C016  FFDF         	movff	fullSpeedBack@power,indf2
  7905   003A8C                     
  7906                           ;dc_motor.c: 176:         setMotorPWM(mL);
  7907   003A8C  C013  F00E         	movff	fullSpeedBack@mL,setMotorPWM@m
  7908   003A90  ECF1  F016         	call	_setMotorPWM	;wreg free
  7909   003A94                     
  7910                           ;dc_motor.c: 177:         setMotorPWM(mR);
  7911   003A94  C014  F00E         	movff	fullSpeedBack@mR,setMotorPWM@m
  7912   003A98  ECF1  F016         	call	_setMotorPWM	;wreg free
  7913   003A9C                     
  7914                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7915   003A9C  0E0B               	movlw	11
  7916   003A9E  6E15               	movwf	??_fullSpeedBack^0,c
  7917   003AA0  0E62               	movlw	98
  7918   003AA2                     u6757:
  7919   003AA2  2EE8               	decfsz	wreg,f,c
  7920   003AA4  D7FE               	bra	u6757
  7921   003AA6  2E15               	decfsz	??_fullSpeedBack^0,f,c
  7922   003AA8  D7FC               	bra	u6757
  7923   003AAA  D000               	nop2	
  7924   003AAC                     
  7925                           ;dc_motor.c: 181:     }
  7926   003AAC  4A16               	infsnz	fullSpeedBack@power^0,f,c
  7927   003AAE  2A17               	incf	(fullSpeedBack@power+1)^0,f,c
  7928   003AB0  BE17               	btfsc	(fullSpeedBack@power+1)^0,7,c
  7929   003AB2  EF64  F01D         	goto	u4911
  7930   003AB6  5017               	movf	(fullSpeedBack@power+1)^0,w,c
  7931   003AB8  E109               	bnz	u4910
  7932   003ABA  0E33               	movlw	51
  7933   003ABC  5C16               	subwf	fullSpeedBack@power^0,w,c
  7934   003ABE  A0D8               	btfss	status,0,c
  7935   003AC0  EF64  F01D         	goto	u4911
  7936   003AC4  EF66  F01D         	goto	u4910
  7937   003AC8                     u4911:
  7938   003AC8  EF3C  F01D         	goto	l5380
  7939   003ACC                     u4910:
  7940   003ACC  0012               	return		;funcret
  7941   003ACE                     __end_of_fullSpeedBack:
  7942                           	callstack 0
  7943                           
  7944 ;; *************** function _setMotorPWM *****************
  7945 ;; Defined at:
  7946 ;;		line 65 in file "dc_motor.c"
  7947 ;; Parameters:    Size  Location     Type
  7948 ;;  m               1   13[COMRAM] PTR struct DC_motor
  7949 ;;		 -> motorR(9), motorL(9), 
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;  negDuty         1   17[COMRAM] unsigned char 
  7952 ;;  posDuty         1   16[COMRAM] unsigned char 
  7953 ;; Return value:  Size  Location     Type
  7954 ;;                  1    wreg      void 
  7955 ;; Registers used:
  7956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7957 ;; Tracked objects:
  7958 ;;		On entry : 0/0
  7959 ;;		On exit  : 0/0
  7960 ;;		Unchanged: 0/0
  7961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7962 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7963 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7964 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7965 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7966 ;;Total ram usage:        5 bytes
  7967 ;; Hardware stack levels used: 1
  7968 ;; Hardware stack levels required when called: 1
  7969 ;; This function calls:
  7970 ;;		___lwdiv
  7971 ;;		___wmul
  7972 ;; This function is called by:
  7973 ;;		_stop
  7974 ;;		_turnLeft
  7975 ;;		_turnRight
  7976 ;;		_fullSpeedAhead
  7977 ;;		_fullSpeedBack
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           	psect	text40
  7982   002DE2                     __ptext40:
  7983                           	callstack 0
  7984   002DE2                     _setMotorPWM:
  7985                           	callstack 28
  7986   002DE2                     
  7987                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  7988   002DE2  500E               	movf	setMotorPWM@m^0,w,c
  7989   002DE4  6ED9               	movwf	fsr2l,c
  7990   002DE6  6ADA               	clrf	fsr2h,c
  7991   002DE8  0E02               	movlw	2
  7992   002DEA  26D9               	addwf	fsr2l,f,c
  7993   002DEC  50DF               	movf	indf2,w,c
  7994   002DEE  B4D8               	btfsc	status,2,c
  7995   002DF0  EFFC  F016         	goto	u4761
  7996   002DF4  EFFE  F016         	goto	u4760
  7997   002DF8                     u4761:
  7998   002DF8  EF2E  F017         	goto	l5234
  7999   002DFC                     u4760:
  8000   002DFC                     
  8001                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8002   002DFC  500E               	movf	setMotorPWM@m^0,w,c
  8003   002DFE  6ED9               	movwf	fsr2l,c
  8004   002E00  6ADA               	clrf	fsr2h,c
  8005   002E02  50DF               	movf	indf2,w,c
  8006   002E04  6E0F               	movwf	??_setMotorPWM^0,c
  8007   002E06  500F               	movf	??_setMotorPWM^0,w,c
  8008   002E08  6E01               	movwf	___wmul@multiplier^0,c
  8009   002E0A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  8010   002E0C  500E               	movf	setMotorPWM@m^0,w,c
  8011   002E0E  6ED9               	movwf	fsr2l,c
  8012   002E10  6ADA               	clrf	fsr2h,c
  8013   002E12  0E03               	movlw	3
  8014   002E14  26D9               	addwf	fsr2l,f,c
  8015   002E16  CFDE F003          	movff	postinc2,___wmul@multiplicand
  8016   002E1A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  8017   002E1E  EC97  F021         	call	___wmul	;wreg free
  8018   002E22  C001  F007         	movff	?___wmul,___lwdiv@dividend
  8019   002E26  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  8020   002E2A  0E00               	movlw	0
  8021   002E2C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  8022   002E2E  0E64               	movlw	100
  8023   002E30  6E09               	movwf	___lwdiv@divisor^0,c
  8024   002E32  EC67  F01D         	call	___lwdiv	;wreg free
  8025   002E36  500E               	movf	setMotorPWM@m^0,w,c
  8026   002E38  6ED9               	movwf	fsr2l,c
  8027   002E3A  6ADA               	clrf	fsr2h,c
  8028   002E3C  0E03               	movlw	3
  8029   002E3E  26D9               	addwf	fsr2l,f,c
  8030   002E40  50DF               	movf	indf2,w,c
  8031   002E42  6E10               	movwf	(??_setMotorPWM+1)^0,c
  8032   002E44  5007               	movf	?___lwdiv^0,w,c
  8033   002E46  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  8034   002E48  6E11               	movwf	setMotorPWM@posDuty^0,c
  8035   002E4A                     
  8036                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8037   002E4A  500E               	movf	setMotorPWM@m^0,w,c
  8038   002E4C  6ED9               	movwf	fsr2l,c
  8039   002E4E  6ADA               	clrf	fsr2h,c
  8040   002E50  0E03               	movlw	3
  8041   002E52  26D9               	addwf	fsr2l,f,c
  8042   002E54  50DF               	movf	indf2,w,c
  8043   002E56  6E12               	movwf	setMotorPWM@negDuty^0,c
  8044                           
  8045                           ;dc_motor.c: 72:     }
  8046   002E58  EF4F  F017         	goto	l5238
  8047   002E5C                     l5234:
  8048                           
  8049                           ;dc_motor.c: 74:         posDuty=0;
  8050   002E5C  0E00               	movlw	0
  8051   002E5E  6E11               	movwf	setMotorPWM@posDuty^0,c
  8052   002E60                     
  8053                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8054   002E60  500E               	movf	setMotorPWM@m^0,w,c
  8055   002E62  6ED9               	movwf	fsr2l,c
  8056   002E64  6ADA               	clrf	fsr2h,c
  8057   002E66  50DF               	movf	indf2,w,c
  8058   002E68  6E0F               	movwf	??_setMotorPWM^0,c
  8059   002E6A  500F               	movf	??_setMotorPWM^0,w,c
  8060   002E6C  6E01               	movwf	___wmul@multiplier^0,c
  8061   002E6E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  8062   002E70  500E               	movf	setMotorPWM@m^0,w,c
  8063   002E72  6ED9               	movwf	fsr2l,c
  8064   002E74  6ADA               	clrf	fsr2h,c
  8065   002E76  0E03               	movlw	3
  8066   002E78  26D9               	addwf	fsr2l,f,c
  8067   002E7A  CFDE F003          	movff	postinc2,___wmul@multiplicand
  8068   002E7E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  8069   002E82  EC97  F021         	call	___wmul	;wreg free
  8070   002E86  C001  F007         	movff	?___wmul,___lwdiv@dividend
  8071   002E8A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  8072   002E8E  0E00               	movlw	0
  8073   002E90  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  8074   002E92  0E64               	movlw	100
  8075   002E94  6E09               	movwf	___lwdiv@divisor^0,c
  8076   002E96  EC67  F01D         	call	___lwdiv	;wreg free
  8077   002E9A  5007               	movf	?___lwdiv^0,w,c
  8078   002E9C  6E12               	movwf	setMotorPWM@negDuty^0,c
  8079   002E9E                     l5238:
  8080                           
  8081                           ;dc_motor.c: 78:     if (m->direction) {
  8082   002E9E  500E               	movf	setMotorPWM@m^0,w,c
  8083   002EA0  6ED9               	movwf	fsr2l,c
  8084   002EA2  6ADA               	clrf	fsr2h,c
  8085   002EA4  0E01               	movlw	1
  8086   002EA6  26D9               	addwf	fsr2l,f,c
  8087   002EA8  50DF               	movf	indf2,w,c
  8088   002EAA  B4D8               	btfsc	status,2,c
  8089   002EAC  EF5A  F017         	goto	u4771
  8090   002EB0  EF5C  F017         	goto	u4770
  8091   002EB4                     u4771:
  8092   002EB4  EF7C  F017         	goto	l5242
  8093   002EB8                     u4770:
  8094   002EB8                     
  8095                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8096   002EB8  500E               	movf	setMotorPWM@m^0,w,c
  8097   002EBA  6ED9               	movwf	fsr2l,c
  8098   002EBC  6ADA               	clrf	fsr2h,c
  8099   002EBE  0E05               	movlw	5
  8100   002EC0  26D9               	addwf	fsr2l,f,c
  8101   002EC2  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8102   002EC6  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8103   002ECA  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8104   002ECE  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8105   002ED2  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  8106                           
  8107                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8108   002ED6  500E               	movf	setMotorPWM@m^0,w,c
  8109   002ED8  6ED9               	movwf	fsr2l,c
  8110   002EDA  6ADA               	clrf	fsr2h,c
  8111   002EDC  0E07               	movlw	7
  8112   002EDE  26D9               	addwf	fsr2l,f,c
  8113   002EE0  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8114   002EE4  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8115   002EE8  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8116   002EEC  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8117   002EF0  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  8118                           
  8119                           ;dc_motor.c: 81:     } else {
  8120   002EF4  EF9A  F017         	goto	l401
  8121   002EF8                     l5242:
  8122                           
  8123                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8124   002EF8  500E               	movf	setMotorPWM@m^0,w,c
  8125   002EFA  6ED9               	movwf	fsr2l,c
  8126   002EFC  6ADA               	clrf	fsr2h,c
  8127   002EFE  0E05               	movlw	5
  8128   002F00  26D9               	addwf	fsr2l,f,c
  8129   002F02  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8130   002F06  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8131   002F0A  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8132   002F0E  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8133   002F12  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  8134                           
  8135                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8136   002F16  500E               	movf	setMotorPWM@m^0,w,c
  8137   002F18  6ED9               	movwf	fsr2l,c
  8138   002F1A  6ADA               	clrf	fsr2h,c
  8139   002F1C  0E07               	movlw	7
  8140   002F1E  26D9               	addwf	fsr2l,f,c
  8141   002F20  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8142   002F24  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8143   002F28  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8144   002F2C  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8145   002F30  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  8146   002F34                     l401:
  8147   002F34  0012               	return		;funcret
  8148   002F36                     __end_of_setMotorPWM:
  8149                           	callstack 0
  8150                           
  8151 ;; *************** function ___lwdiv *****************
  8152 ;; Defined at:
  8153 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;  dividend        2    6[COMRAM] unsigned int 
  8156 ;;  divisor         2    8[COMRAM] unsigned int 
  8157 ;; Auto vars:     Size  Location     Type
  8158 ;;  quotient        2   11[COMRAM] unsigned int 
  8159 ;;  counter         1   10[COMRAM] unsigned char 
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  2    6[COMRAM] unsigned int 
  8162 ;; Registers used:
  8163 ;;		wreg, status,2, status,0
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8169 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8170 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8172 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8173 ;;Total ram usage:        7 bytes
  8174 ;; Hardware stack levels used: 1
  8175 ;; This function calls:
  8176 ;;		Nothing
  8177 ;; This function is called by:
  8178 ;;		_setMotorPWM
  8179 ;;		_ADC2String
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183                           	psect	text41
  8184   003ACE                     __ptext41:
  8185                           	callstack 0
  8186   003ACE                     ___lwdiv:
  8187                           	callstack 28
  8188   003ACE  0E00               	movlw	0
  8189   003AD0  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  8190   003AD2  0E00               	movlw	0
  8191   003AD4  6E0C               	movwf	___lwdiv@quotient^0,c
  8192   003AD6  5009               	movf	___lwdiv@divisor^0,w,c
  8193   003AD8  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8194   003ADA  B4D8               	btfsc	status,2,c
  8195   003ADC  EF72  F01D         	goto	u4611
  8196   003AE0  EF74  F01D         	goto	u4610
  8197   003AE4                     u4611:
  8198   003AE4  EF9C  F01D         	goto	l1139
  8199   003AE8                     u4610:
  8200   003AE8  0E01               	movlw	1
  8201   003AEA  6E0B               	movwf	___lwdiv@counter^0,c
  8202   003AEC  EF7C  F01D         	goto	l5150
  8203   003AF0                     l5148:
  8204   003AF0  90D8               	bcf	status,0,c
  8205   003AF2  3609               	rlcf	___lwdiv@divisor^0,f,c
  8206   003AF4  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8207   003AF6  2A0B               	incf	___lwdiv@counter^0,f,c
  8208   003AF8                     l5150:
  8209   003AF8  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  8210   003AFA  EF81  F01D         	goto	u4621
  8211   003AFE  EF83  F01D         	goto	u4620
  8212   003B02                     u4621:
  8213   003B02  EF78  F01D         	goto	l5148
  8214   003B06                     u4620:
  8215   003B06                     l5152:
  8216   003B06  90D8               	bcf	status,0,c
  8217   003B08  360C               	rlcf	___lwdiv@quotient^0,f,c
  8218   003B0A  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8219   003B0C  5009               	movf	___lwdiv@divisor^0,w,c
  8220   003B0E  5C07               	subwf	___lwdiv@dividend^0,w,c
  8221   003B10  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  8222   003B12  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8223   003B14  A0D8               	btfss	status,0,c
  8224   003B16  EF8F  F01D         	goto	u4631
  8225   003B1A  EF91  F01D         	goto	u4630
  8226   003B1E                     u4631:
  8227   003B1E  EF96  F01D         	goto	l5160
  8228   003B22                     u4630:
  8229   003B22  5009               	movf	___lwdiv@divisor^0,w,c
  8230   003B24  5E07               	subwf	___lwdiv@dividend^0,f,c
  8231   003B26  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  8232   003B28  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8233   003B2A  800C               	bsf	___lwdiv@quotient^0,0,c
  8234   003B2C                     l5160:
  8235   003B2C  90D8               	bcf	status,0,c
  8236   003B2E  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8237   003B30  3209               	rrcf	___lwdiv@divisor^0,f,c
  8238   003B32  2E0B               	decfsz	___lwdiv@counter^0,f,c
  8239   003B34  EF83  F01D         	goto	l5152
  8240   003B38                     l1139:
  8241   003B38  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  8242   003B3C  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8243   003B40  0012               	return		;funcret
  8244   003B42                     __end_of___lwdiv:
  8245                           	callstack 0
  8246                           
  8247 ;; *************** function _color_click_init *****************
  8248 ;; Defined at:
  8249 ;;		line 8 in file "color.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;		None
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;		None
  8254 ;; Return value:  Size  Location     Type
  8255 ;;                  1    wreg      void 
  8256 ;; Registers used:
  8257 ;;		wreg, status,2, status,0, cstack
  8258 ;; Tracked objects:
  8259 ;;		On entry : 0/0
  8260 ;;		On exit  : 0/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8265 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8266 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8267 ;;Total ram usage:        1 bytes
  8268 ;; Hardware stack levels used: 1
  8269 ;; Hardware stack levels required when called: 3
  8270 ;; This function calls:
  8271 ;;		_I2C_2_Master_Init
  8272 ;;		_color_writetoaddr
  8273 ;; This function is called by:
  8274 ;;		_main
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           	psect	text42
  8279   0040B2                     __ptext42:
  8280                           	callstack 0
  8281   0040B2                     _color_click_init:
  8282                           	callstack 27
  8283   0040B2                     
  8284                           ;color.c: 11:     I2C_2_Master_Init();
  8285   0040B2  EC6E  F021         	call	_I2C_2_Master_Init	;wreg free
  8286   0040B6                     
  8287                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  8288   0040B6  0E01               	movlw	1
  8289   0040B8  6E03               	movwf	color_writetoaddr@value^0,c
  8290   0040BA  0E00               	movlw	0
  8291   0040BC  ECBB  F021         	call	_color_writetoaddr
  8292   0040C0                     
  8293                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8294   0040C0  0E3F               	movlw	63
  8295   0040C2  6E05               	movwf	??_color_click_init^0,c
  8296   0040C4  0E55               	movlw	85
  8297   0040C6                     u6767:
  8298   0040C6  2EE8               	decfsz	wreg,f,c
  8299   0040C8  D7FE               	bra	u6767
  8300   0040CA  2E05               	decfsz	??_color_click_init^0,f,c
  8301   0040CC  D7FC               	bra	u6767
  8302   0040CE  0000               	nop	
  8303   0040D0                     
  8304                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  8305   0040D0  0E03               	movlw	3
  8306   0040D2  6E03               	movwf	color_writetoaddr@value^0,c
  8307   0040D4  0E00               	movlw	0
  8308   0040D6  ECBB  F021         	call	_color_writetoaddr
  8309   0040DA                     
  8310                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  8311   0040DA  0ED5               	movlw	213
  8312   0040DC  6E03               	movwf	color_writetoaddr@value^0,c
  8313   0040DE  0E01               	movlw	1
  8314   0040E0  ECBB  F021         	call	_color_writetoaddr
  8315   0040E4  0012               	return		;funcret
  8316   0040E6                     __end_of_color_click_init:
  8317                           	callstack 0
  8318                           
  8319 ;; *************** function _color_writetoaddr *****************
  8320 ;; Defined at:
  8321 ;;		line 24 in file "color.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;  address         1    wreg     unsigned char 
  8324 ;;  value           1    2[COMRAM] unsigned char 
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;  address         1    3[COMRAM] unsigned char 
  8327 ;; Return value:  Size  Location     Type
  8328 ;;                  1    wreg      void 
  8329 ;; Registers used:
  8330 ;;		wreg, status,2, status,0, cstack
  8331 ;; Tracked objects:
  8332 ;;		On entry : 0/0
  8333 ;;		On exit  : 0/0
  8334 ;;		Unchanged: 0/0
  8335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8336 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8337 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8339 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8340 ;;Total ram usage:        2 bytes
  8341 ;; Hardware stack levels used: 1
  8342 ;; Hardware stack levels required when called: 2
  8343 ;; This function calls:
  8344 ;;		_I2C_2_Master_Start
  8345 ;;		_I2C_2_Master_Stop
  8346 ;;		_I2C_2_Master_Write
  8347 ;; This function is called by:
  8348 ;;		_color_click_init
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           	psect	text43
  8353   004376                     __ptext43:
  8354                           	callstack 0
  8355   004376                     _color_writetoaddr:
  8356                           	callstack 27
  8357                           
  8358                           ;incstack = 0
  8359                           ;color_writetoaddr@address stored from wreg
  8360   004376  6E04               	movwf	color_writetoaddr@address^0,c
  8361   004378                     
  8362                           ;color.c: 25:     I2C_2_Master_Start();
  8363   004378  EC0D  F022         	call	_I2C_2_Master_Start	;wreg free
  8364                           
  8365                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  8366   00437C  0E52               	movlw	82
  8367   00437E  EC02  F022         	call	_I2C_2_Master_Write
  8368                           
  8369                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  8370   004382  5004               	movf	color_writetoaddr@address^0,w,c
  8371   004384  0980               	iorlw	128
  8372   004386  EC02  F022         	call	_I2C_2_Master_Write
  8373                           
  8374                           ;color.c: 28:     I2C_2_Master_Write(value);
  8375   00438A  5003               	movf	color_writetoaddr@value^0,w,c
  8376   00438C  EC02  F022         	call	_I2C_2_Master_Write
  8377                           
  8378                           ;color.c: 29:     I2C_2_Master_Stop();
  8379   004390  EC08  F022         	call	_I2C_2_Master_Stop	;wreg free
  8380   004394  0012               	return		;funcret
  8381   004396                     __end_of_color_writetoaddr:
  8382                           	callstack 0
  8383                           
  8384 ;; *************** function _I2C_2_Master_Init *****************
  8385 ;; Defined at:
  8386 ;;		line 4 in file "i2c.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;		None
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;		None
  8391 ;; Return value:  Size  Location     Type
  8392 ;;                  1    wreg      void 
  8393 ;; Registers used:
  8394 ;;		wreg, status,2
  8395 ;; Tracked objects:
  8396 ;;		On entry : 0/0
  8397 ;;		On exit  : 0/0
  8398 ;;		Unchanged: 0/0
  8399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8404 ;;Total ram usage:        0 bytes
  8405 ;; Hardware stack levels used: 1
  8406 ;; This function calls:
  8407 ;;		Nothing
  8408 ;; This function is called by:
  8409 ;;		_color_click_init
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           	psect	text44
  8414   0042DC                     __ptext44:
  8415                           	callstack 0
  8416   0042DC                     _I2C_2_Master_Init:
  8417                           	callstack 29
  8418   0042DC                     
  8419                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8420   0042DC  010E               	movlb	14	; () banked
  8421   0042DE  51D9               	movf	217,w,b	;volatile
  8422   0042E0  0BF0               	andlw	-16
  8423   0042E2  0908               	iorlw	8
  8424   0042E4  6FD9               	movwf	217,b	;volatile
  8425   0042E6                     
  8426                           ; BSR set to: 14
  8427                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8428   0042E6  8BD9               	bsf	217,5,b	;volatile
  8429                           
  8430                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8431   0042E8  0E9F               	movlw	159
  8432   0042EA  6FD6               	movwf	214,b	;volatile
  8433   0042EC                     
  8434                           ; BSR set to: 14
  8435                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8436   0042EC  8A84               	bsf	132,5,c	;volatile
  8437   0042EE                     
  8438                           ; BSR set to: 14
  8439                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8440   0042EE  8C84               	bsf	132,6,c	;volatile
  8441   0042F0                     
  8442                           ; BSR set to: 14
  8443                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8444   0042F0  9BA7               	bcf	167,5,b	;volatile
  8445   0042F2                     
  8446                           ; BSR set to: 14
  8447                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8448   0042F2  9DA7               	bcf	167,6,b	;volatile
  8449                           
  8450                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8451   0042F4  0E1D               	movlw	29
  8452   0042F6  6F1D               	movwf	29,b	;volatile
  8453                           
  8454                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8455   0042F8  0E1E               	movlw	30
  8456   0042FA  6F1C               	movwf	28,b	;volatile
  8457                           
  8458                           ;i2c.c: 18:   RD5PPS=0x1C;
  8459   0042FC  0E1C               	movlw	28
  8460   0042FE  6F6F               	movwf	111,b	;volatile
  8461                           
  8462                           ;i2c.c: 19:   RD6PPS=0x1B;
  8463   004300  0E1B               	movlw	27
  8464   004302  6F70               	movwf	112,b	;volatile
  8465   004304                     
  8466                           ; BSR set to: 14
  8467   004304  0012               	return		;funcret
  8468   004306                     __end_of_I2C_2_Master_Init:
  8469                           	callstack 0
  8470                           
  8471 ;; *************** function _calibration_routine *****************
  8472 ;; Defined at:
  8473 ;;		line 197 in file "color.c"
  8474 ;; Parameters:    Size  Location     Type
  8475 ;;  cCal            1   67[COMRAM] PTR struct colors
  8476 ;;		 -> colorCalibration(8), 
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  cal_state      20   70[COMRAM] unsigned char [20]
  8479 ;; Return value:  Size  Location     Type
  8480 ;;                  1    wreg      void 
  8481 ;; Registers used:
  8482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8488 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8489 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8491 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8492 ;;Total ram usage:       23 bytes
  8493 ;; Hardware stack levels used: 1
  8494 ;; Hardware stack levels required when called: 8
  8495 ;; This function calls:
  8496 ;;		_color_read_Blue
  8497 ;;		_color_read_Clear
  8498 ;;		_color_read_Green
  8499 ;;		_color_read_Red
  8500 ;;		_sendStringSerial4
  8501 ;;		_sprintf
  8502 ;; This function is called by:
  8503 ;;		_main
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           	psect	text45
  8508   002760                     __ptext45:
  8509                           	callstack 0
  8510   002760                     _calibration_routine:
  8511                           	callstack 22
  8512   002760                     
  8513                           ;color.c: 197: void calibration_routine(colors *cCal);color.c: 198: {;color.c: 200:     
      +                          LATGbits.LATG0 = 0;
  8514   002760  907F               	bcf	127,0,c	;volatile
  8515                           
  8516                           ;color.c: 201:     LATEbits.LATE7 = 0;
  8517   002762  9E7D               	bcf	125,7,c	;volatile
  8518                           
  8519                           ;color.c: 202:     LATAbits.LATA3 = 0;
  8520   002764  9679               	bcf	121,3,c	;volatile
  8521   002766                     
  8522                           ;color.c: 204:     char cal_state[20];;color.c: 208:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  8523   002766  0E47               	movlw	low calibration_routine@cal_state
  8524   002768  6E31               	movwf	sprintf@s^0,c
  8525   00276A  0E73               	movlw	low STR_1
  8526   00276C  6E32               	movwf	sprintf@fmt^0,c
  8527   00276E  0EAC               	movlw	low STR_2
  8528   002770  6E33               	movwf	(?_sprintf+2)^0,c
  8529   002772  5033               	movf	(?_sprintf+2)^0,w,c
  8530   002774  A4D8               	btfss	status,2,c
  8531   002776  0E0E               	movlw	high __smallconst
  8532   002778  6E34               	movwf	(?_sprintf+3)^0,c
  8533   00277A  EC73  F020         	call	_sprintf	;wreg free
  8534   00277E                     
  8535                           ;color.c: 209:     sendStringSerial4(cal_state);
  8536   00277E  0E47               	movlw	low calibration_routine@cal_state
  8537   002780  6E02               	movwf	sendStringSerial4@string^0,c
  8538   002782  EC3D  F021         	call	_sendStringSerial4	;wreg free
  8539   002786                     l96:
  8540                           
  8541                           ;color.c: 212:     while(PORTFbits.RF2 == 1){
  8542   002786  B48E               	btfsc	142,2,c	;volatile
  8543   002788  EFC8  F013         	goto	u6251
  8544   00278C  EFCA  F013         	goto	u6250
  8545   002790                     u6251:
  8546   002790  EFC3  F013         	goto	l96
  8547   002794                     u6250:
  8548   002794                     
  8549                           ;color.c: 216:     LATGbits.LATG0 = 1;
  8550   002794  807F               	bsf	127,0,c	;volatile
  8551   002796                     
  8552                           ;color.c: 217:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8553   002796  0E29               	movlw	41
  8554   002798  6E46               	movwf	(??_calibration_routine+1)^0,c
  8555   00279A  0E96               	movlw	150
  8556   00279C  6E45               	movwf	??_calibration_routine^0,c
  8557   00279E  0E7F               	movlw	127
  8558   0027A0                     u6777:
  8559   0027A0  2EE8               	decfsz	wreg,f,c
  8560   0027A2  D7FE               	bra	u6777
  8561   0027A4  2E45               	decfsz	??_calibration_routine^0,f,c
  8562   0027A6  D7FC               	bra	u6777
  8563   0027A8  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  8564   0027AA  D7FA               	bra	u6777
  8565   0027AC  0000               	nop	
  8566   0027AE                     
  8567                           ;color.c: 218:     (cCal->red) = color_read_Red();
  8568   0027AE  ECD6  F01D         	call	_color_read_Red	;wreg free
  8569   0027B2  5044               	movf	calibration_routine@cCal^0,w,c
  8570   0027B4  6ED9               	movwf	fsr2l,c
  8571   0027B6  6ADA               	clrf	fsr2h,c
  8572   0027B8  C005  FFDE         	movff	?_color_read_Red,postinc2
  8573   0027BC  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  8574   0027C0                     
  8575                           ;color.c: 219:     LATGbits.LATG0 = 0;
  8576   0027C0  907F               	bcf	127,0,c	;volatile
  8577   0027C2                     
  8578                           ;color.c: 222:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  8579   0027C2  0E47               	movlw	low calibration_routine@cal_state
  8580   0027C4  6E31               	movwf	sprintf@s^0,c
  8581   0027C6  0E22               	movlw	low STR_3
  8582   0027C8  6E32               	movwf	sprintf@fmt^0,c
  8583   0027CA  0EAC               	movlw	low STR_2
  8584   0027CC  6E33               	movwf	(?_sprintf+2)^0,c
  8585   0027CE  5033               	movf	(?_sprintf+2)^0,w,c
  8586   0027D0  A4D8               	btfss	status,2,c
  8587   0027D2  0E0E               	movlw	high __smallconst
  8588   0027D4  6E34               	movwf	(?_sprintf+3)^0,c
  8589   0027D6  EC73  F020         	call	_sprintf	;wreg free
  8590   0027DA                     
  8591                           ;color.c: 223:     sendStringSerial4(&cal_state);
  8592   0027DA  0E47               	movlw	low calibration_routine@cal_state
  8593   0027DC  6E02               	movwf	sendStringSerial4@string^0,c
  8594   0027DE  EC3D  F021         	call	_sendStringSerial4	;wreg free
  8595   0027E2                     l99:
  8596                           
  8597                           ;color.c: 225:     while(PORTFbits.RF2 == 1){
  8598   0027E2  B48E               	btfsc	142,2,c	;volatile
  8599   0027E4  EFF6  F013         	goto	u6261
  8600   0027E8  EFF8  F013         	goto	u6260
  8601   0027EC                     u6261:
  8602   0027EC  EFF1  F013         	goto	l99
  8603   0027F0                     u6260:
  8604   0027F0                     
  8605                           ;color.c: 229:     LATEbits.LATE7 = 1;
  8606   0027F0  8E7D               	bsf	125,7,c	;volatile
  8607   0027F2                     
  8608                           ;color.c: 230:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8609   0027F2  0E29               	movlw	41
  8610   0027F4  6E46               	movwf	(??_calibration_routine+1)^0,c
  8611   0027F6  0E96               	movlw	150
  8612   0027F8  6E45               	movwf	??_calibration_routine^0,c
  8613   0027FA  0E7F               	movlw	127
  8614   0027FC                     u6787:
  8615   0027FC  2EE8               	decfsz	wreg,f,c
  8616   0027FE  D7FE               	bra	u6787
  8617   002800  2E45               	decfsz	??_calibration_routine^0,f,c
  8618   002802  D7FC               	bra	u6787
  8619   002804  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  8620   002806  D7FA               	bra	u6787
  8621   002808  0000               	nop	
  8622   00280A                     
  8623                           ;color.c: 231:     (cCal->green) = color_read_Green();
  8624   00280A  ECFE  F01D         	call	_color_read_Green	;wreg free
  8625   00280E  5044               	movf	calibration_routine@cCal^0,w,c
  8626   002810  6ED9               	movwf	fsr2l,c
  8627   002812  6ADA               	clrf	fsr2h,c
  8628   002814  0E02               	movlw	2
  8629   002816  26D9               	addwf	fsr2l,f,c
  8630   002818  C005  FFDE         	movff	?_color_read_Green,postinc2
  8631   00281C  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  8632   002820                     
  8633                           ;color.c: 232:     LATEbits.LATE7 = 0;
  8634   002820  9E7D               	bcf	125,7,c	;volatile
  8635   002822                     
  8636                           ;color.c: 235:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  8637   002822  0E47               	movlw	low calibration_routine@cal_state
  8638   002824  6E31               	movwf	sprintf@s^0,c
  8639   002826  0E3F               	movlw	low STR_5
  8640   002828  6E32               	movwf	sprintf@fmt^0,c
  8641   00282A  0EAC               	movlw	low STR_2
  8642   00282C  6E33               	movwf	(?_sprintf+2)^0,c
  8643   00282E  5033               	movf	(?_sprintf+2)^0,w,c
  8644   002830  A4D8               	btfss	status,2,c
  8645   002832  0E0E               	movlw	high __smallconst
  8646   002834  6E34               	movwf	(?_sprintf+3)^0,c
  8647   002836  EC73  F020         	call	_sprintf	;wreg free
  8648   00283A                     
  8649                           ;color.c: 236:     sendStringSerial4(&cal_state);
  8650   00283A  0E47               	movlw	low calibration_routine@cal_state
  8651   00283C  6E02               	movwf	sendStringSerial4@string^0,c
  8652   00283E  EC3D  F021         	call	_sendStringSerial4	;wreg free
  8653   002842                     l102:
  8654                           
  8655                           ;color.c: 238:     while(PORTFbits.RF2 == 1){
  8656   002842  B48E               	btfsc	142,2,c	;volatile
  8657   002844  EF26  F014         	goto	u6271
  8658   002848  EF28  F014         	goto	u6270
  8659   00284C                     u6271:
  8660   00284C  EF21  F014         	goto	l102
  8661   002850                     u6270:
  8662   002850                     
  8663                           ;color.c: 242:     LATAbits.LATA3 = 1;
  8664   002850  8679               	bsf	121,3,c	;volatile
  8665   002852                     
  8666                           ;color.c: 243:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8667   002852  0E29               	movlw	41
  8668   002854  6E46               	movwf	(??_calibration_routine+1)^0,c
  8669   002856  0E96               	movlw	150
  8670   002858  6E45               	movwf	??_calibration_routine^0,c
  8671   00285A  0E7F               	movlw	127
  8672   00285C                     u6797:
  8673   00285C  2EE8               	decfsz	wreg,f,c
  8674   00285E  D7FE               	bra	u6797
  8675   002860  2E45               	decfsz	??_calibration_routine^0,f,c
  8676   002862  D7FC               	bra	u6797
  8677   002864  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  8678   002866  D7FA               	bra	u6797
  8679   002868  0000               	nop	
  8680   00286A                     
  8681                           ;color.c: 244:     (cCal->blue) = color_read_Blue();
  8682   00286A  EC4E  F01E         	call	_color_read_Blue	;wreg free
  8683   00286E  5044               	movf	calibration_routine@cCal^0,w,c
  8684   002870  6ED9               	movwf	fsr2l,c
  8685   002872  6ADA               	clrf	fsr2h,c
  8686   002874  0E04               	movlw	4
  8687   002876  26D9               	addwf	fsr2l,f,c
  8688   002878  C005  FFDE         	movff	?_color_read_Blue,postinc2
  8689   00287C  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  8690   002880                     
  8691                           ;color.c: 245:     LATAbits.LATA3 = 0;
  8692   002880  9679               	bcf	121,3,c	;volatile
  8693   002882                     
  8694                           ;color.c: 248:     sprintf(cal_state,"Calibration state =  white light", ".");
  8695   002882  0E47               	movlw	low calibration_routine@cal_state
  8696   002884  6E31               	movwf	sprintf@s^0,c
  8697   002886  0E01               	movlw	low STR_7
  8698   002888  6E32               	movwf	sprintf@fmt^0,c
  8699   00288A  0EAC               	movlw	low STR_2
  8700   00288C  6E33               	movwf	(?_sprintf+2)^0,c
  8701   00288E  5033               	movf	(?_sprintf+2)^0,w,c
  8702   002890  A4D8               	btfss	status,2,c
  8703   002892  0E0E               	movlw	high __smallconst
  8704   002894  6E34               	movwf	(?_sprintf+3)^0,c
  8705   002896  EC73  F020         	call	_sprintf	;wreg free
  8706   00289A                     
  8707                           ;color.c: 249:     sendStringSerial4(&cal_state);
  8708   00289A  0E47               	movlw	low calibration_routine@cal_state
  8709   00289C  6E02               	movwf	sendStringSerial4@string^0,c
  8710   00289E  EC3D  F021         	call	_sendStringSerial4	;wreg free
  8711   0028A2                     l105:
  8712                           
  8713                           ;color.c: 251:     while(PORTFbits.RF2 == 1){
  8714   0028A2  B48E               	btfsc	142,2,c	;volatile
  8715   0028A4  EF56  F014         	goto	u6281
  8716   0028A8  EF58  F014         	goto	u6280
  8717   0028AC                     u6281:
  8718   0028AC  EF51  F014         	goto	l105
  8719   0028B0                     u6280:
  8720   0028B0                     
  8721                           ;color.c: 254:     LATGbits.LATG0 = 1;
  8722   0028B0  807F               	bsf	127,0,c	;volatile
  8723                           
  8724                           ;color.c: 255:     LATEbits.LATE7 = 1;
  8725   0028B2  8E7D               	bsf	125,7,c	;volatile
  8726                           
  8727                           ;color.c: 256:     LATAbits.LATA3 = 1;
  8728   0028B4  8679               	bsf	121,3,c	;volatile
  8729   0028B6                     
  8730                           ;color.c: 257:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8731   0028B6  0E29               	movlw	41
  8732   0028B8  6E46               	movwf	(??_calibration_routine+1)^0,c
  8733   0028BA  0E96               	movlw	150
  8734   0028BC  6E45               	movwf	??_calibration_routine^0,c
  8735   0028BE  0E7F               	movlw	127
  8736   0028C0                     u6807:
  8737   0028C0  2EE8               	decfsz	wreg,f,c
  8738   0028C2  D7FE               	bra	u6807
  8739   0028C4  2E45               	decfsz	??_calibration_routine^0,f,c
  8740   0028C6  D7FC               	bra	u6807
  8741   0028C8  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  8742   0028CA  D7FA               	bra	u6807
  8743   0028CC  0000               	nop	
  8744   0028CE                     
  8745                           ;color.c: 258:     (cCal->clear) = color_read_Clear();
  8746   0028CE  EC26  F01E         	call	_color_read_Clear	;wreg free
  8747   0028D2  5044               	movf	calibration_routine@cCal^0,w,c
  8748   0028D4  6ED9               	movwf	fsr2l,c
  8749   0028D6  6ADA               	clrf	fsr2h,c
  8750   0028D8  0E06               	movlw	6
  8751   0028DA  26D9               	addwf	fsr2l,f,c
  8752   0028DC  C005  FFDE         	movff	?_color_read_Clear,postinc2
  8753   0028E0  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  8754   0028E4                     
  8755                           ;color.c: 259:     LATGbits.LATG0 = 0;
  8756   0028E4  907F               	bcf	127,0,c	;volatile
  8757   0028E6                     
  8758                           ;color.c: 260:     LATEbits.LATE7 = 0;
  8759   0028E6  9E7D               	bcf	125,7,c	;volatile
  8760   0028E8                     
  8761                           ;color.c: 261:     LATAbits.LATA3 = 0;
  8762   0028E8  9679               	bcf	121,3,c	;volatile
  8763   0028EA                     
  8764                           ;color.c: 264:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  8765   0028EA  0E47               	movlw	low calibration_routine@cal_state
  8766   0028EC  6E31               	movwf	sprintf@s^0,c
  8767   0028EE  0E5A               	movlw	low STR_9
  8768   0028F0  6E32               	movwf	sprintf@fmt^0,c
  8769   0028F2  0EAC               	movlw	low STR_2
  8770   0028F4  6E33               	movwf	(?_sprintf+2)^0,c
  8771   0028F6  5033               	movf	(?_sprintf+2)^0,w,c
  8772   0028F8  A4D8               	btfss	status,2,c
  8773   0028FA  0E0E               	movlw	high __smallconst
  8774   0028FC  6E34               	movwf	(?_sprintf+3)^0,c
  8775   0028FE  EC73  F020         	call	_sprintf	;wreg free
  8776   002902                     
  8777                           ;color.c: 265:     sendStringSerial4(&cal_state);
  8778   002902  0E47               	movlw	low calibration_routine@cal_state
  8779   002904  6E02               	movwf	sendStringSerial4@string^0,c
  8780   002906  EC3D  F021         	call	_sendStringSerial4	;wreg free
  8781   00290A                     l108:
  8782                           
  8783                           ;color.c: 267:     while(PORTFbits.RF2 == 1){
  8784   00290A  B48E               	btfsc	142,2,c	;volatile
  8785   00290C  EF8A  F014         	goto	u6291
  8786   002910  EF8C  F014         	goto	u6290
  8787   002914                     u6291:
  8788   002914  EF85  F014         	goto	l108
  8789   002918                     u6290:
  8790   002918                     
  8791                           ;color.c: 270:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8792   002918  0E29               	movlw	41
  8793   00291A  6E46               	movwf	(??_calibration_routine+1)^0,c
  8794   00291C  0E96               	movlw	150
  8795   00291E  6E45               	movwf	??_calibration_routine^0,c
  8796   002920  0E7F               	movlw	127
  8797   002922                     u6817:
  8798   002922  2EE8               	decfsz	wreg,f,c
  8799   002924  D7FE               	bra	u6817
  8800   002926  2E45               	decfsz	??_calibration_routine^0,f,c
  8801   002928  D7FC               	bra	u6817
  8802   00292A  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  8803   00292C  D7FA               	bra	u6817
  8804   00292E  0000               	nop	
  8805   002930  0012               	return		;funcret
  8806   002932                     __end_of_calibration_routine:
  8807                           	callstack 0
  8808                           
  8809 ;; *************** function _sprintf *****************
  8810 ;; Defined at:
  8811 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;  s               1   48[COMRAM] PTR unsigned char 
  8814 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  8815 ;;  fmt             1   49[COMRAM] PTR const unsigned char 
  8816 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  8817 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;  f              12   55[COMRAM] struct _IO_FILE
  8820 ;;  ret             2    0        int 
  8821 ;;  ap              1   54[COMRAM] PTR void [1]
  8822 ;;		 -> ?_sprintf(2), 
  8823 ;; Return value:  Size  Location     Type
  8824 ;;                  2   48[COMRAM] int 
  8825 ;; Registers used:
  8826 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8827 ;; Tracked objects:
  8828 ;;		On entry : 0/0
  8829 ;;		On exit  : 0/0
  8830 ;;		Unchanged: 0/0
  8831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8832 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8833 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8835 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8836 ;;Total ram usage:       19 bytes
  8837 ;; Hardware stack levels used: 1
  8838 ;; Hardware stack levels required when called: 7
  8839 ;; This function calls:
  8840 ;;		_vfprintf
  8841 ;; This function is called by:
  8842 ;;		_calibration_routine
  8843 ;;		_send2USART
  8844 ;;		_ADC2String
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           	psect	text46
  8849   0040E6                     __ptext46:
  8850                           	callstack 0
  8851   0040E6                     _sprintf:
  8852                           	callstack 22
  8853   0040E6  0E33               	movlw	low (?_sprintf+2)
  8854   0040E8  6E37               	movwf	sprintf@ap^0,c
  8855   0040EA  C031  F038         	movff	sprintf@s,sprintf@f
  8856   0040EE  0E00               	movlw	0
  8857   0040F0  6E3C               	movwf	(sprintf@f+4)^0,c
  8858   0040F2  0E00               	movlw	0
  8859   0040F4  6E3B               	movwf	(sprintf@f+3)^0,c
  8860   0040F6  0E00               	movlw	0
  8861   0040F8  6E43               	movwf	(sprintf@f+11)^0,c
  8862   0040FA  0E00               	movlw	0
  8863   0040FC  6E42               	movwf	(sprintf@f+10)^0,c
  8864   0040FE  0E38               	movlw	low sprintf@f
  8865   004100  6E2D               	movwf	vfprintf@fp^0,c
  8866   004102  C032  F02E         	movff	sprintf@fmt,vfprintf@fmt
  8867   004106  0E37               	movlw	low sprintf@ap
  8868   004108  6E2F               	movwf	vfprintf@ap^0,c
  8869   00410A  ECDB  F01F         	call	_vfprintf	;wreg free
  8870   00410E  5031               	movf	sprintf@s^0,w,c
  8871   004110  243B               	addwf	(sprintf@f+3)^0,w,c
  8872   004112  6ED9               	movwf	fsr2l,c
  8873   004114  6ADA               	clrf	fsr2h,c
  8874   004116  6ADF               	clrf	indf2,c
  8875   004118  0012               	return		;funcret
  8876   00411A                     __end_of_sprintf:
  8877                           	callstack 0
  8878                           
  8879 ;; *************** function _vfprintf *****************
  8880 ;; Defined at:
  8881 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;  fp              1   44[COMRAM] PTR struct _IO_FILE
  8884 ;;		 -> sprintf@f(12), 
  8885 ;;  fmt             1   45[COMRAM] PTR const unsigned char 
  8886 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  8887 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  8888 ;;  ap              1   46[COMRAM] PTR PTR void 
  8889 ;;		 -> sprintf@ap(1), 
  8890 ;; Auto vars:     Size  Location     Type
  8891 ;;  cfmt            1   47[COMRAM] PTR unsigned char 
  8892 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  8893 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  8894 ;; Return value:  Size  Location     Type
  8895 ;;                  2   44[COMRAM] int 
  8896 ;; Registers used:
  8897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8898 ;; Tracked objects:
  8899 ;;		On entry : 0/0
  8900 ;;		On exit  : 0/0
  8901 ;;		Unchanged: 0/0
  8902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8903 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8906 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8907 ;;Total ram usage:        4 bytes
  8908 ;; Hardware stack levels used: 1
  8909 ;; Hardware stack levels required when called: 6
  8910 ;; This function calls:
  8911 ;;		_vfpfcnvrt
  8912 ;; This function is called by:
  8913 ;;		_sprintf
  8914 ;; This function uses a non-reentrant model
  8915 ;;
  8916                           
  8917                           	psect	text47
  8918   003FB6                     __ptext47:
  8919                           	callstack 0
  8920   003FB6                     _vfprintf:
  8921                           	callstack 22
  8922   003FB6                     
  8923                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  8924   003FB6  C02E  F030         	movff	vfprintf@fmt,vfprintf@cfmt
  8925                           
  8926                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  8927   003FBA  EFE7  F01F         	goto	l5602
  8928   003FBE                     l5600:
  8929                           
  8930                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  8931   003FBE  C02D  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  8932   003FC2  0E30               	movlw	low vfprintf@cfmt
  8933   003FC4  6E23               	movwf	vfpfcnvrt@fmt^0,c
  8934   003FC6  C02F  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  8935   003FCA  EC73  F015         	call	_vfpfcnvrt	;wreg free
  8936   003FCE                     l5602:
  8937                           
  8938                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  8939   003FCE  C030  FFF6         	movff	vfprintf@cfmt,tblptrl
  8940   003FD2                     	if	1	;There is more than 1 active tblptr byte
  8941   003FD2  0E0E               	movlw	high __smallconst
  8942   003FD4  6EF7               	movwf	tblptrh,c
  8943   003FD6                     	endif
  8944   003FD6                     	if	0	;tblptru may be non-zero
  8945   003FD6                     	endif
  8946   003FD6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8947   003FD6  0E00               	movlw	low (__smallconst shr (0+16))
  8948   003FD8  6EF8               	movwf	tblptru,c
  8949   003FDA                     	endif
  8950   003FDA  0008               	tblrd		*
  8951   003FDC  50F5               	movf	tablat,w,c
  8952   003FDE  0900               	iorlw	0
  8953   003FE0  A4D8               	btfss	status,2,c
  8954   003FE2  EFF5  F01F         	goto	u5321
  8955   003FE6  EFF7  F01F         	goto	u5320
  8956   003FEA                     u5321:
  8957   003FEA  EFDF  F01F         	goto	l5600
  8958   003FEE                     u5320:
  8959   003FEE                     
  8960                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  8961   003FEE  0E00               	movlw	0
  8962   003FF0  6E2E               	movwf	(?_vfprintf+1)^0,c
  8963   003FF2  0E00               	movlw	0
  8964   003FF4  6E2D               	movwf	?_vfprintf^0,c
  8965   003FF6  0012               	return		;funcret
  8966   003FF8                     __end_of_vfprintf:
  8967                           	callstack 0
  8968                           
  8969 ;; *************** function _vfpfcnvrt *****************
  8970 ;; Defined at:
  8971 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  8974 ;;		 -> sprintf@f(12), 
  8975 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  8976 ;;		 -> vfprintf@cfmt(1), 
  8977 ;;  ap              1   35[COMRAM] PTR PTR void 
  8978 ;;		 -> sprintf@ap(1), 
  8979 ;; Auto vars:     Size  Location     Type
  8980 ;;  convarg         4   38[COMRAM] struct .
  8981 ;;  cp              1   43[COMRAM] PTR unsigned char 
  8982 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  8983 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  8984 ;;  done            1   42[COMRAM] _Bool 
  8985 ;;  c               1    0        unsigned char 
  8986 ;; Return value:  Size  Location     Type
  8987 ;;                  1    wreg      void 
  8988 ;; Registers used:
  8989 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8990 ;; Tracked objects:
  8991 ;;		On entry : 0/0
  8992 ;;		On exit  : 0/0
  8993 ;;		Unchanged: 0/0
  8994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8995 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8996 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8997 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8998 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8999 ;;Total ram usage:       11 bytes
  9000 ;; Hardware stack levels used: 1
  9001 ;; Hardware stack levels required when called: 5
  9002 ;; This function calls:
  9003 ;;		_dtoa
  9004 ;;		_fputc
  9005 ;;		_read_prec_or_width
  9006 ;; This function is called by:
  9007 ;;		_vfprintf
  9008 ;; This function uses a non-reentrant model
  9009 ;;
  9010                           
  9011                           	psect	text48
  9012   002AE6                     __ptext48:
  9013                           	callstack 0
  9014   002AE6                     _vfpfcnvrt:
  9015                           	callstack 22
  9016   002AE6                     
  9017                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9018   002AE6  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9019   002AE8  6ED9               	movwf	fsr2l,c
  9020   002AEA  6ADA               	clrf	fsr2h,c
  9021   002AEC  CFDF FFF6          	movff	indf2,tblptrl
  9022   002AF0                     	if	1	;There is more than 1 active tblptr byte
  9023   002AF0  0E0E               	movlw	high __smallconst
  9024   002AF2  6EF7               	movwf	tblptrh,c
  9025   002AF4                     	endif
  9026   002AF4                     	if	0	;tblptru may be non-zero
  9027   002AF4                     	endif
  9028   002AF4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9029   002AF4  0E00               	movlw	low (__smallconst shr (0+16))
  9030   002AF6  6EF8               	movwf	tblptru,c
  9031   002AF8                     	endif
  9032   002AF8  0008               	tblrd		*
  9033   002AFA  50F5               	movf	tablat,w,c
  9034   002AFC  0A25               	xorlw	37
  9035   002AFE  A4D8               	btfss	status,2,c
  9036   002B00  EF84  F015         	goto	u4781
  9037   002B04  EF86  F015         	goto	u4780
  9038   002B08                     u4781:
  9039   002B08  EF22  F016         	goto	l5290
  9040   002B0C                     u4780:
  9041   002B0C                     
  9042                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9043   002B0C  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9044   002B0E  6ED9               	movwf	fsr2l,c
  9045   002B10  6ADA               	clrf	fsr2h,c
  9046   002B12  2ADF               	incf	indf2,f,c
  9047   002B14                     
  9048                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9049   002B14  0E00               	movlw	0
  9050   002B16  0100               	movlb	0	; () banked
  9051   002B18  6FCB               	movwf	(_width+1)& (0+255),b
  9052   002B1A  0E00               	movlw	0
  9053   002B1C  6FCA               	movwf	_width& (0+255),b
  9054   002B1E  C0CA  F05B         	movff	_width,_flags
  9055   002B22                     
  9056                           ; BSR set to: 0
  9057                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9058   002B22  69CC               	setf	_prec& (0+255),b
  9059   002B24  69CD               	setf	(_prec+1)& (0+255),b
  9060   002B26                     
  9061                           ; BSR set to: 0
  9062                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9063   002B26  0E00               	movlw	0
  9064   002B28  6E2B               	movwf	vfpfcnvrt@done^0,c
  9065                           
  9066                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9067   002B2A  EFBD  F015         	goto	l5264
  9068   002B2E                     l5254:
  9069                           
  9070                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9071   002B2E  825B               	bsf	_flags^0,1,c
  9072   002B30                     
  9073                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9074   002B30  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9075   002B32  6ED9               	movwf	fsr2l,c
  9076   002B34  6ADA               	clrf	fsr2h,c
  9077   002B36  2ADF               	incf	indf2,f,c
  9078                           
  9079                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9080   002B38  EFBD  F015         	goto	l5264
  9081   002B3C                     l5258:
  9082                           
  9083                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9084   002B3C  0E01               	movlw	1
  9085   002B3E  6E2B               	movwf	vfpfcnvrt@done^0,c
  9086                           
  9087                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9088   002B40  EFBD  F015         	goto	l5264
  9089   002B44                     l5262:
  9090   002B44  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9091   002B46  6ED9               	movwf	fsr2l,c
  9092   002B48  6ADA               	clrf	fsr2h,c
  9093   002B4A  CFDF FFF6          	movff	indf2,tblptrl
  9094   002B4E                     	if	1	;There is more than 1 active tblptr byte
  9095   002B4E  0E0E               	movlw	high __smallconst
  9096   002B50  6EF7               	movwf	tblptrh,c
  9097   002B52                     	endif
  9098   002B52                     	if	0	;tblptru may be non-zero
  9099   002B52                     	endif
  9100   002B52                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9101   002B52  0E00               	movlw	low (__smallconst shr (0+16))
  9102   002B54  6EF8               	movwf	tblptru,c
  9103   002B56                     	endif
  9104   002B56  0008               	tblrd		*
  9105   002B58  50F5               	movf	tablat,w,c
  9106   002B5A  6E25               	movwf	??_vfpfcnvrt^0,c
  9107   002B5C  6A26               	clrf	(??_vfpfcnvrt+1)^0,c
  9108                           
  9109                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9110                           ; Switch size 1, requested type "simple"
  9111                           ; Number of cases is 1, Range of values is 0 to 0
  9112                           ; switch strategies available:
  9113                           ; Name         Instructions Cycles
  9114                           ; simple_byte            4     3 (average)
  9115                           ;	Chosen strategy is simple_byte
  9116   002B5E  5026               	movf	(??_vfpfcnvrt+1)^0,w,c
  9117   002B60  0A00               	xorlw	0	; case 0
  9118   002B62  B4D8               	btfsc	status,2,c
  9119   002B64  EFB6  F015         	goto	l6736
  9120   002B68  EF9E  F015         	goto	l5258
  9121   002B6C                     l6736:
  9122                           
  9123                           ; Switch size 1, requested type "simple"
  9124                           ; Number of cases is 1, Range of values is 48 to 48
  9125                           ; switch strategies available:
  9126                           ; Name         Instructions Cycles
  9127                           ; simple_byte            4     3 (average)
  9128                           ;	Chosen strategy is simple_byte
  9129   002B6C  5025               	movf	??_vfpfcnvrt^0,w,c
  9130   002B6E  0A30               	xorlw	48	; case 48
  9131   002B70  B4D8               	btfsc	status,2,c
  9132   002B72  EF97  F015         	goto	l5254
  9133   002B76  EF9E  F015         	goto	l5258
  9134   002B7A                     l5264:
  9135                           
  9136                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9137   002B7A  502B               	movf	vfpfcnvrt@done^0,w,c
  9138   002B7C  B4D8               	btfsc	status,2,c
  9139   002B7E  EFC3  F015         	goto	u4791
  9140   002B82  EFC5  F015         	goto	u4790
  9141   002B86                     u4791:
  9142   002B86  EFA2  F015         	goto	l5262
  9143   002B8A                     u4790:
  9144   002B8A                     
  9145                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9146   002B8A  C023  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9147   002B8E  C024  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9148   002B92  EC42  F01A         	call	_read_prec_or_width	;wreg free
  9149   002B96  C007  F0CA         	movff	?_read_prec_or_width,_width
  9150   002B9A  C008  F0CB         	movff	?_read_prec_or_width+1,_width+1
  9151   002B9E                     
  9152                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9153   002B9E  0100               	movlb	0	; () banked
  9154   002BA0  BFCB               	btfsc	(_width+1)& (0+255),7,b
  9155   002BA2  EFD7  F015         	goto	u4800
  9156   002BA6  EFD5  F015         	goto	u4801
  9157   002BAA                     u4801:
  9158   002BAA  EFDC  F015         	goto	l5272
  9159   002BAE                     u4800:
  9160   002BAE                     
  9161                           ; BSR set to: 0
  9162                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9163   002BAE  805B               	bsf	_flags^0,0,c
  9164                           
  9165                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9166   002BB0  6DCA               	negf	_width& (0+255),b
  9167   002BB2  1FCB               	comf	(_width+1)& (0+255),f,b
  9168   002BB4  B0D8               	btfsc	status,0,c
  9169   002BB6  2BCB               	incf	(_width+1)& (0+255),f,b
  9170   002BB8                     l5272:
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9174   002BB8  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9175   002BBA  6ED9               	movwf	fsr2l,c
  9176   002BBC  6ADA               	clrf	fsr2h,c
  9177   002BBE  50DF               	movf	indf2,w,c
  9178   002BC0  6E2C               	movwf	vfpfcnvrt@cp^0,c
  9179   002BC2                     
  9180                           ; BSR set to: 0
  9181                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9182   002BC2  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9183   002BC6                     	if	1	;There is more than 1 active tblptr byte
  9184   002BC6  0E0E               	movlw	high __smallconst
  9185   002BC8  6EF7               	movwf	tblptrh,c
  9186   002BCA                     	endif
  9187   002BCA                     	if	0	;tblptru may be non-zero
  9188   002BCA                     	endif
  9189   002BCA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9190   002BCA  0E00               	movlw	low (__smallconst shr (0+16))
  9191   002BCC  6EF8               	movwf	tblptru,c
  9192   002BCE                     	endif
  9193   002BCE  0008               	tblrd		*
  9194   002BD0  50F5               	movf	tablat,w,c
  9195   002BD2  0A64               	xorlw	100
  9196   002BD4  B4D8               	btfsc	status,2,c
  9197   002BD6  EFEF  F015         	goto	u4811
  9198   002BDA  EFF1  F015         	goto	u4810
  9199   002BDE                     u4811:
  9200   002BDE  EF01  F016         	goto	l5278
  9201   002BE2                     u4810:
  9202   002BE2                     
  9203                           ; BSR set to: 0
  9204   002BE2  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9205   002BE6                     	if	1	;There is more than 1 active tblptr byte
  9206   002BE6  0E0E               	movlw	high __smallconst
  9207   002BE8  6EF7               	movwf	tblptrh,c
  9208   002BEA                     	endif
  9209   002BEA                     	if	0	;tblptru may be non-zero
  9210   002BEA                     	endif
  9211   002BEA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9212   002BEA  0E00               	movlw	low (__smallconst shr (0+16))
  9213   002BEC  6EF8               	movwf	tblptru,c
  9214   002BEE                     	endif
  9215   002BEE  0008               	tblrd		*
  9216   002BF0  50F5               	movf	tablat,w,c
  9217   002BF2  0A69               	xorlw	105
  9218   002BF4  A4D8               	btfss	status,2,c
  9219   002BF6  EFFF  F015         	goto	u4821
  9220   002BFA  EF01  F016         	goto	u4820
  9221   002BFE                     u4821:
  9222   002BFE  EF1C  F016         	goto	l5286
  9223   002C02                     u4820:
  9224   002C02                     l5278:
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9228   002C02  5024               	movf	vfpfcnvrt@ap^0,w,c
  9229   002C04  6ED9               	movwf	fsr2l,c
  9230   002C06  6ADA               	clrf	fsr2h,c
  9231   002C08  0E02               	movlw	2
  9232   002C0A  26DF               	addwf	indf2,f,c
  9233   002C0C  5CDF               	subwf	indf2,w,c
  9234   002C0E  6ED9               	movwf	fsr2l,c
  9235   002C10  6ADA               	clrf	fsr2h,c
  9236   002C12  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  9237   002C16  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  9238   002C1A                     
  9239                           ; BSR set to: 0
  9240                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9241   002C1A  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9242   002C1C  6ED9               	movwf	fsr2l,c
  9243   002C1E  6ADA               	clrf	fsr2h,c
  9244   002C20  282C               	incf	vfpfcnvrt@cp^0,w,c
  9245   002C22  6EDF               	movwf	indf2,c
  9246   002C24                     
  9247                           ; BSR set to: 0
  9248                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9249   002C24  C022  F017         	movff	vfpfcnvrt@fp,dtoa@fp
  9250   002C28  C027  F018         	movff	vfpfcnvrt@convarg,dtoa@d
  9251   002C2C  C028  F019         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9252   002C30  EC36  F016         	call	_dtoa	;wreg free
  9253   002C34  EF35  F016         	goto	l1390
  9254   002C38                     l5286:
  9255                           
  9256                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9257   002C38  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9258   002C3A  6ED9               	movwf	fsr2l,c
  9259   002C3C  6ADA               	clrf	fsr2h,c
  9260   002C3E  2ADF               	incf	indf2,f,c
  9261   002C40  EF35  F016         	goto	l1390
  9262   002C44                     l5290:
  9263                           
  9264                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9265   002C44  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9266   002C46  6ED9               	movwf	fsr2l,c
  9267   002C48  6ADA               	clrf	fsr2h,c
  9268   002C4A  CFDF FFF6          	movff	indf2,tblptrl
  9269   002C4E                     	if	1	;There is more than 1 active tblptr byte
  9270   002C4E  0E0E               	movlw	high __smallconst
  9271   002C50  6EF7               	movwf	tblptrh,c
  9272   002C52                     	endif
  9273   002C52                     	if	0	;tblptru may be non-zero
  9274   002C52                     	endif
  9275   002C52                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9276   002C52  0E00               	movlw	low (__smallconst shr (0+16))
  9277   002C54  6EF8               	movwf	tblptru,c
  9278   002C56                     	endif
  9279   002C56  0008               	tblrd		*
  9280   002C58  50F5               	movf	tablat,w,c
  9281   002C5A  6E01               	movwf	fputc@c^0,c
  9282   002C5C  6A02               	clrf	(fputc@c+1)^0,c
  9283   002C5E  C022  F003         	movff	vfpfcnvrt@fp,fputc@fp
  9284   002C62  EC44  F01B         	call	_fputc	;wreg free
  9285   002C66  EF1C  F016         	goto	l5286
  9286   002C6A                     l1390:
  9287   002C6A  0012               	return		;funcret
  9288   002C6C                     __end_of_vfpfcnvrt:
  9289                           	callstack 0
  9290                           
  9291 ;; *************** function _read_prec_or_width *****************
  9292 ;; Defined at:
  9293 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  9296 ;;		 -> vfprintf@cfmt(1), 
  9297 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  9298 ;;		 -> sprintf@ap(1), 
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;  c               1    8[COMRAM] unsigned char 
  9301 ;;  n               2    9[COMRAM] int 
  9302 ;; Return value:  Size  Location     Type
  9303 ;;                  2    6[COMRAM] int 
  9304 ;; Registers used:
  9305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9306 ;; Tracked objects:
  9307 ;;		On entry : 0/0
  9308 ;;		On exit  : 0/0
  9309 ;;		Unchanged: 0/0
  9310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9311 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9312 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9314 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9315 ;;Total ram usage:        5 bytes
  9316 ;; Hardware stack levels used: 1
  9317 ;; Hardware stack levels required when called: 1
  9318 ;; This function calls:
  9319 ;;		___wmul
  9320 ;; This function is called by:
  9321 ;;		_vfpfcnvrt
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           	psect	text49
  9326   003484                     __ptext49:
  9327                           	callstack 0
  9328   003484                     _read_prec_or_width:
  9329                           	callstack 25
  9330   003484                     
  9331                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  9332   003484  0E00               	movlw	0
  9333   003486  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  9334   003488  0E00               	movlw	0
  9335   00348A  6E0A               	movwf	read_prec_or_width@n^0,c
  9336   00348C                     
  9337                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  9338   00348C  5007               	movf	read_prec_or_width@fmt^0,w,c
  9339   00348E  6ED9               	movwf	fsr2l,c
  9340   003490  6ADA               	clrf	fsr2h,c
  9341   003492  CFDF FFF6          	movff	indf2,tblptrl
  9342   003496                     	if	1	;There is more than 1 active tblptr byte
  9343   003496  0E0E               	movlw	high __smallconst
  9344   003498  6EF7               	movwf	tblptrh,c
  9345   00349A                     	endif
  9346   00349A                     	if	0	;tblptru may be non-zero
  9347   00349A                     	endif
  9348   00349A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9349   00349A  0E00               	movlw	low (__smallconst shr (0+16))
  9350   00349C  6EF8               	movwf	tblptru,c
  9351   00349E                     	endif
  9352   00349E  0008               	tblrd		*
  9353   0034A0  50F5               	movf	tablat,w,c
  9354   0034A2  0A2A               	xorlw	42
  9355   0034A4  A4D8               	btfss	status,2,c
  9356   0034A6  EF57  F01A         	goto	u4741
  9357   0034AA  EF59  F01A         	goto	u4740
  9358   0034AE                     u4741:
  9359   0034AE  EF7F  F01A         	goto	l5226
  9360   0034B2                     u4740:
  9361   0034B2                     
  9362                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  9363   0034B2  5007               	movf	read_prec_or_width@fmt^0,w,c
  9364   0034B4  6ED9               	movwf	fsr2l,c
  9365   0034B6  6ADA               	clrf	fsr2h,c
  9366   0034B8  2ADF               	incf	indf2,f,c
  9367   0034BA                     
  9368                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  9369   0034BA  5008               	movf	read_prec_or_width@ap^0,w,c
  9370   0034BC  6ED9               	movwf	fsr2l,c
  9371   0034BE  6ADA               	clrf	fsr2h,c
  9372   0034C0  0E02               	movlw	2
  9373   0034C2  26DF               	addwf	indf2,f,c
  9374   0034C4  5CDF               	subwf	indf2,w,c
  9375   0034C6  6ED9               	movwf	fsr2l,c
  9376   0034C8  6ADA               	clrf	fsr2h,c
  9377   0034CA  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  9378   0034CE  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  9379                           
  9380                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  9381   0034D2  EF94  F01A         	goto	l1371
  9382   0034D6                     l5222:
  9383                           
  9384                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  9385   0034D6  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  9386   0034DA  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  9387   0034DE  0E00               	movlw	0
  9388   0034E0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  9389   0034E2  0E0A               	movlw	10
  9390   0034E4  6E03               	movwf	___wmul@multiplicand^0,c
  9391   0034E6  EC97  F021         	call	___wmul	;wreg free
  9392   0034EA  5009               	movf	read_prec_or_width@c^0,w,c
  9393   0034EC  2401               	addwf	?___wmul^0,w,c
  9394   0034EE  6E0A               	movwf	read_prec_or_width@n^0,c
  9395   0034F0  0E00               	movlw	0
  9396   0034F2  2002               	addwfc	(?___wmul+1)^0,w,c
  9397   0034F4  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  9398   0034F6                     
  9399                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  9400   0034F6  5007               	movf	read_prec_or_width@fmt^0,w,c
  9401   0034F8  6ED9               	movwf	fsr2l,c
  9402   0034FA  6ADA               	clrf	fsr2h,c
  9403   0034FC  2ADF               	incf	indf2,f,c
  9404   0034FE                     l5226:
  9405                           
  9406                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  9407   0034FE  5007               	movf	read_prec_or_width@fmt^0,w,c
  9408   003500  6ED9               	movwf	fsr2l,c
  9409   003502  6ADA               	clrf	fsr2h,c
  9410   003504  CFDF FFF6          	movff	indf2,tblptrl
  9411   003508                     	if	1	;There is more than 1 active tblptr byte
  9412   003508  0E0E               	movlw	high __smallconst
  9413   00350A  6EF7               	movwf	tblptrh,c
  9414   00350C                     	endif
  9415   00350C                     	if	0	;tblptru may be non-zero
  9416   00350C                     	endif
  9417   00350C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9418   00350C  0E00               	movlw	low (__smallconst shr (0+16))
  9419   00350E  6EF8               	movwf	tblptru,c
  9420   003510                     	endif
  9421   003510  0008               	tblrd		*
  9422   003512  50F5               	movf	tablat,w,c
  9423   003514  0FD0               	addlw	208
  9424   003516  6E09               	movwf	read_prec_or_width@c^0,c
  9425   003518  0E09               	movlw	9
  9426   00351A  6409               	cpfsgt	read_prec_or_width@c^0,c
  9427   00351C  EF92  F01A         	goto	u4751
  9428   003520  EF94  F01A         	goto	u4750
  9429   003524                     u4751:
  9430   003524  EF6B  F01A         	goto	l5222
  9431   003528                     u4750:
  9432   003528                     l1371:
  9433                           
  9434                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  9435   003528  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  9436   00352C  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  9437   003530  0012               	return		;funcret
  9438   003532                     __end_of_read_prec_or_width:
  9439                           	callstack 0
  9440                           
  9441 ;; *************** function ___wmul *****************
  9442 ;; Defined at:
  9443 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;  multiplier      2    0[COMRAM] unsigned int 
  9446 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9447 ;; Auto vars:     Size  Location     Type
  9448 ;;  product         2    4[COMRAM] unsigned int 
  9449 ;; Return value:  Size  Location     Type
  9450 ;;                  2    0[COMRAM] unsigned int 
  9451 ;; Registers used:
  9452 ;;		wreg, status,2, status,0, prodl, prodh
  9453 ;; Tracked objects:
  9454 ;;		On entry : 0/0
  9455 ;;		On exit  : 0/0
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9458 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9461 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9462 ;;Total ram usage:        6 bytes
  9463 ;; Hardware stack levels used: 1
  9464 ;; This function calls:
  9465 ;;		Nothing
  9466 ;; This function is called by:
  9467 ;;		_setMotorPWM
  9468 ;;		_read_prec_or_width
  9469 ;;		_ADC2String
  9470 ;;		_logAction
  9471 ;; This function uses a non-reentrant model
  9472 ;;
  9473                           
  9474                           	psect	text50
  9475   00432E                     __ptext50:
  9476                           	callstack 0
  9477   00432E                     ___wmul:
  9478                           	callstack 28
  9479   00432E  5001               	movf	___wmul@multiplier^0,w,c
  9480   004330  0203               	mulwf	___wmul@multiplicand^0,c
  9481   004332  CFF3 F005          	movff	prodl,___wmul@product
  9482   004336  CFF4 F006          	movff	prodh,___wmul@product+1
  9483   00433A  5001               	movf	___wmul@multiplier^0,w,c
  9484   00433C  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  9485   00433E  50F3               	movf	243,w,c
  9486   004340  2606               	addwf	(___wmul@product+1)^0,f,c
  9487   004342  5002               	movf	(___wmul@multiplier+1)^0,w,c
  9488   004344  0203               	mulwf	___wmul@multiplicand^0,c
  9489   004346  50F3               	movf	243,w,c
  9490   004348  2606               	addwf	(___wmul@product+1)^0,f,c
  9491   00434A  C005  F001         	movff	___wmul@product,?___wmul
  9492   00434E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9493   004352  0012               	return		;funcret
  9494   004354                     __end_of___wmul:
  9495                           	callstack 0
  9496                           
  9497 ;; *************** function _dtoa *****************
  9498 ;; Defined at:
  9499 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  9502 ;;		 -> sprintf@f(12), 
  9503 ;;  d               2   23[COMRAM] int 
  9504 ;; Auto vars:     Size  Location     Type
  9505 ;;  i               2   31[COMRAM] int 
  9506 ;;  w               2   28[COMRAM] int 
  9507 ;;  s               1   30[COMRAM] unsigned char 
  9508 ;;  p               1   27[COMRAM] _Bool 
  9509 ;; Return value:  Size  Location     Type
  9510 ;;                  1    wreg      void 
  9511 ;; Registers used:
  9512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9513 ;; Tracked objects:
  9514 ;;		On entry : 0/0
  9515 ;;		On exit  : 0/0
  9516 ;;		Unchanged: 0/0
  9517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9518 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9519 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9521 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9522 ;;Total ram usage:       11 bytes
  9523 ;; Hardware stack levels used: 1
  9524 ;; Hardware stack levels required when called: 4
  9525 ;; This function calls:
  9526 ;;		___awdiv
  9527 ;;		___awmod
  9528 ;;		_abs
  9529 ;;		_pad
  9530 ;; This function is called by:
  9531 ;;		_vfpfcnvrt
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           	psect	text51
  9536   002C6C                     __ptext51:
  9537                           	callstack 0
  9538   002C6C                     _dtoa:
  9539                           	callstack 22
  9540   002C6C                     
  9541                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  9542   002C6C  0E01               	movlw	1
  9543   002C6E  6E1C               	movwf	dtoa@p^0,c
  9544   002C70                     
  9545                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  9546   002C70  BE19               	btfsc	(dtoa@d+1)^0,7,c
  9547   002C72  EF3D  F016         	goto	u4641
  9548   002C76  EF40  F016         	goto	u4640
  9549   002C7A                     u4641:
  9550   002C7A  0E01               	movlw	1
  9551   002C7C  EF41  F016         	goto	u4650
  9552   002C80                     u4640:
  9553   002C80  0E00               	movlw	0
  9554   002C82                     u4650:
  9555   002C82  6E1F               	movwf	dtoa@s^0,c
  9556   002C84                     
  9557                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  9558   002C84  C0CA  F01D         	movff	_width,dtoa@w
  9559   002C88  C0CB  F01E         	movff	_width+1,dtoa@w+1
  9560   002C8C                     
  9561                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  9562   002C8C  501F               	movf	dtoa@s^0,w,c
  9563   002C8E  B4D8               	btfsc	status,2,c
  9564   002C90  EF4C  F016         	goto	u4661
  9565   002C94  EF4E  F016         	goto	u4660
  9566   002C98                     u4661:
  9567   002C98  EF65  F016         	goto	l1354
  9568   002C9C                     u4660:
  9569   002C9C                     
  9570                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  9571   002C9C  061D               	decf	dtoa@w^0,f,c
  9572   002C9E  A0D8               	btfss	status,0,c
  9573   002CA0  061E               	decf	(dtoa@w+1)^0,f,c
  9574   002CA2                     
  9575                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  9576   002CA2  501F               	movf	dtoa@s^0,w,c
  9577   002CA4  A4D8               	btfss	status,2,c
  9578   002CA6  EF57  F016         	goto	u4671
  9579   002CAA  EF59  F016         	goto	u4670
  9580   002CAE                     u4671:
  9581   002CAE  EF5F  F016         	goto	l5178
  9582   002CB2                     u4670:
  9583   002CB2  0E00               	movlw	0
  9584   002CB4  6E1B               	movwf	(_dtoa$2968+1)^0,c
  9585   002CB6  0E2B               	movlw	43
  9586   002CB8  6E1A               	movwf	_dtoa$2968^0,c
  9587   002CBA  EF63  F016         	goto	l5180
  9588   002CBE                     l5178:
  9589   002CBE  0E00               	movlw	0
  9590   002CC0  6E1B               	movwf	(_dtoa$2968+1)^0,c
  9591   002CC2  0E2D               	movlw	45
  9592   002CC4  6E1A               	movwf	_dtoa$2968^0,c
  9593   002CC6                     l5180:
  9594   002CC6  C01A  F01F         	movff	_dtoa$2968,dtoa@s
  9595   002CCA                     l1354:
  9596                           
  9597                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  9598   002CCA  0E00               	movlw	0
  9599   002CCC  6E21               	movwf	(dtoa@i+1)^0,c
  9600   002CCE  0E1F               	movlw	31
  9601   002CD0  6E20               	movwf	dtoa@i^0,c
  9602   002CD2                     
  9603                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  9604   002CD2  0E00               	movlw	0
  9605   002CD4  0101               	movlb	1	; () banked
  9606   002CD6  6F6F               	movwf	(_dbuf+31)& (0+255),b
  9607                           
  9608                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9609   002CD8  EF9D  F016         	goto	l5194
  9610   002CDC                     l5184:
  9611                           
  9612                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  9613   002CDC  0620               	decf	dtoa@i^0,f,c
  9614   002CDE  A0D8               	btfss	status,0,c
  9615   002CE0  0621               	decf	(dtoa@i+1)^0,f,c
  9616   002CE2                     
  9617                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  9618   002CE2  0E50               	movlw	low _dbuf
  9619   002CE4  2420               	addwf	dtoa@i^0,w,c
  9620   002CE6  6ED9               	movwf	fsr2l,c
  9621   002CE8  0E01               	movlw	high _dbuf
  9622   002CEA  2021               	addwfc	(dtoa@i+1)^0,w,c
  9623   002CEC  6EDA               	movwf	fsr2h,c
  9624   002CEE  C018  F001         	movff	dtoa@d,___awmod@dividend
  9625   002CF2  C019  F002         	movff	dtoa@d+1,___awmod@dividend+1
  9626   002CF6  0E00               	movlw	0
  9627   002CF8  6E04               	movwf	(___awmod@divisor+1)^0,c
  9628   002CFA  0E0A               	movlw	10
  9629   002CFC  6E03               	movwf	___awmod@divisor^0,c
  9630   002CFE  ECEA  F019         	call	___awmod	;wreg free
  9631   002D02  C001  F007         	movff	?___awmod,abs@a
  9632   002D06  C002  F008         	movff	?___awmod+1,abs@a+1
  9633   002D0A  EC8D  F020         	call	_abs	;wreg free
  9634   002D0E  5007               	movf	?_abs^0,w,c
  9635   002D10  0F30               	addlw	48
  9636   002D12  6EDF               	movwf	indf2,c
  9637   002D14                     
  9638                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  9639   002D14  0E00               	movlw	0
  9640   002D16  6E1C               	movwf	dtoa@p^0,c
  9641   002D18                     
  9642                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  9643   002D18  061D               	decf	dtoa@w^0,f,c
  9644   002D1A  A0D8               	btfss	status,0,c
  9645   002D1C  061E               	decf	(dtoa@w+1)^0,f,c
  9646   002D1E                     
  9647                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  9648   002D1E  C018  F001         	movff	dtoa@d,___awdiv@dividend
  9649   002D22  C019  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  9650   002D26  0E00               	movlw	0
  9651   002D28  6E04               	movwf	(___awdiv@divisor+1)^0,c
  9652   002D2A  0E0A               	movlw	10
  9653   002D2C  6E03               	movwf	___awdiv@divisor^0,c
  9654   002D2E  EC88  F019         	call	___awdiv	;wreg free
  9655   002D32  C001  F018         	movff	?___awdiv,dtoa@d
  9656   002D36  C002  F019         	movff	?___awdiv+1,dtoa@d+1
  9657   002D3A                     l5194:
  9658                           
  9659                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9660   002D3A  BE21               	btfsc	(dtoa@i+1)^0,7,c
  9661   002D3C  EFA8  F016         	goto	u4681
  9662   002D40  5021               	movf	(dtoa@i+1)^0,w,c
  9663   002D42  E108               	bnz	u4680
  9664   002D44  0420               	decf	dtoa@i^0,w,c
  9665   002D46  A0D8               	btfss	status,0,c
  9666   002D48  EFA8  F016         	goto	u4681
  9667   002D4C  EFAA  F016         	goto	u4680
  9668   002D50                     u4681:
  9669   002D50  EFCF  F016         	goto	l5204
  9670   002D54                     u4680:
  9671   002D54  5018               	movf	dtoa@d^0,w,c
  9672   002D56  1019               	iorwf	(dtoa@d+1)^0,w,c
  9673   002D58  A4D8               	btfss	status,2,c
  9674   002D5A  EFB1  F016         	goto	u4691
  9675   002D5E  EFB3  F016         	goto	u4690
  9676   002D62                     u4691:
  9677   002D62  EF6E  F016         	goto	l5184
  9678   002D66                     u4690:
  9679   002D66  501C               	movf	dtoa@p^0,w,c
  9680   002D68  A4D8               	btfss	status,2,c
  9681   002D6A  EFB9  F016         	goto	u4701
  9682   002D6E  EFBB  F016         	goto	u4700
  9683   002D72                     u4701:
  9684   002D72  EF6E  F016         	goto	l5184
  9685   002D76                     u4700:
  9686   002D76  BE1E               	btfsc	(dtoa@w+1)^0,7,c
  9687   002D78  EFC6  F016         	goto	u4711
  9688   002D7C  501E               	movf	(dtoa@w+1)^0,w,c
  9689   002D7E  E108               	bnz	u4710
  9690   002D80  041D               	decf	dtoa@w^0,w,c
  9691   002D82  A0D8               	btfss	status,0,c
  9692   002D84  EFC6  F016         	goto	u4711
  9693   002D88  EFC8  F016         	goto	u4710
  9694   002D8C                     u4711:
  9695   002D8C  EFCF  F016         	goto	l5204
  9696   002D90                     u4710:
  9697   002D90  B25B               	btfsc	_flags^0,1,c
  9698   002D92  EFCD  F016         	goto	u4721
  9699   002D96  EFCF  F016         	goto	u4720
  9700   002D9A                     u4721:
  9701   002D9A  EF6E  F016         	goto	l5184
  9702   002D9E                     u4720:
  9703   002D9E                     l5204:
  9704                           
  9705                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  9706   002D9E  501F               	movf	dtoa@s^0,w,c
  9707   002DA0  B4D8               	btfsc	status,2,c
  9708   002DA2  EFD5  F016         	goto	u4731
  9709   002DA6  EFD7  F016         	goto	u4730
  9710   002DAA                     u4731:
  9711   002DAA  EFE2  F016         	goto	l5210
  9712   002DAE                     u4730:
  9713   002DAE                     
  9714                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  9715   002DAE  0620               	decf	dtoa@i^0,f,c
  9716   002DB0  A0D8               	btfss	status,0,c
  9717   002DB2  0621               	decf	(dtoa@i+1)^0,f,c
  9718   002DB4                     
  9719                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  9720   002DB4  0E50               	movlw	low _dbuf
  9721   002DB6  2420               	addwf	dtoa@i^0,w,c
  9722   002DB8  6ED9               	movwf	fsr2l,c
  9723   002DBA  0E01               	movlw	high _dbuf
  9724   002DBC  2021               	addwfc	(dtoa@i+1)^0,w,c
  9725   002DBE  6EDA               	movwf	fsr2h,c
  9726   002DC0  C01F  FFDF         	movff	dtoa@s,indf2
  9727   002DC4                     l5210:
  9728                           
  9729                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  9730   002DC4  C017  F00F         	movff	dtoa@fp,pad@fp
  9731   002DC8  0E50               	movlw	low _dbuf
  9732   002DCA  2420               	addwf	dtoa@i^0,w,c
  9733   002DCC  6E10               	movwf	pad@buf^0,c
  9734   002DCE  0E01               	movlw	high _dbuf
  9735   002DD0  2021               	addwfc	(dtoa@i+1)^0,w,c
  9736   002DD2  6E11               	movwf	(pad@buf+1)^0,c
  9737   002DD4  C01D  F012         	movff	dtoa@w,pad@p
  9738   002DD8  C01E  F013         	movff	dtoa@w+1,pad@p+1
  9739   002DDC  EC99  F01B         	call	_pad	;wreg free
  9740   002DE0  0012               	return		;funcret
  9741   002DE2                     __end_of_dtoa:
  9742                           	callstack 0
  9743                           
  9744 ;; *************** function _pad *****************
  9745 ;; Defined at:
  9746 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9747 ;; Parameters:    Size  Location     Type
  9748 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  9749 ;;		 -> sprintf@f(12), 
  9750 ;;  buf             2   15[COMRAM] PTR unsigned char 
  9751 ;;		 -> dbuf(32), 
  9752 ;;  p               2   17[COMRAM] int 
  9753 ;; Auto vars:     Size  Location     Type
  9754 ;;  i               2   20[COMRAM] int 
  9755 ;; Return value:  Size  Location     Type
  9756 ;;                  1    wreg      void 
  9757 ;; Registers used:
  9758 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9759 ;; Tracked objects:
  9760 ;;		On entry : 0/0
  9761 ;;		On exit  : 0/0
  9762 ;;		Unchanged: 0/0
  9763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9764 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9765 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9767 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9768 ;;Total ram usage:        8 bytes
  9769 ;; Hardware stack levels used: 1
  9770 ;; Hardware stack levels required when called: 3
  9771 ;; This function calls:
  9772 ;;		_fputc
  9773 ;;		_fputs
  9774 ;; This function is called by:
  9775 ;;		_dtoa
  9776 ;; This function uses a non-reentrant model
  9777 ;;
  9778                           
  9779                           	psect	text52
  9780   003732                     __ptext52:
  9781                           	callstack 0
  9782   003732                     _pad:
  9783                           	callstack 22
  9784   003732                     
  9785                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  9786   003732  A05B               	btfss	_flags^0,0,c
  9787   003734  EF9E  F01B         	goto	u4561
  9788   003738  EFA0  F01B         	goto	u4560
  9789   00373C                     u4561:
  9790   00373C  EFA8  F01B         	goto	l5126
  9791   003740                     u4560:
  9792   003740                     
  9793                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  9794   003740  C010  F009         	movff	pad@buf,fputs@s
  9795   003744  C011  F00A         	movff	pad@buf+1,fputs@s+1
  9796   003748  C00F  F00B         	movff	pad@fp,fputs@fp
  9797   00374C  EC1D  F020         	call	_fputs	;wreg free
  9798   003750                     l5126:
  9799                           
  9800                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  9801   003750  BE13               	btfsc	(pad@p+1)^0,7,c
  9802   003752  EFAF  F01B         	goto	u4570
  9803   003756  EFAD  F01B         	goto	u4571
  9804   00375A                     u4571:
  9805   00375A  EFB3  F01B         	goto	l1346
  9806   00375E                     u4570:
  9807   00375E                     
  9808                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  9809   00375E  0E00               	movlw	0
  9810   003760  6E13               	movwf	(pad@p+1)^0,c
  9811   003762  0E00               	movlw	0
  9812   003764  6E12               	movwf	pad@p^0,c
  9813   003766                     l1346:
  9814                           
  9815                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  9816   003766  0E00               	movlw	0
  9817   003768  6E16               	movwf	(pad@i+1)^0,c
  9818   00376A  0E00               	movlw	0
  9819   00376C  6E15               	movwf	pad@i^0,c
  9820                           
  9821                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9822   00376E  EFC3  F01B         	goto	l5134
  9823   003772                     l5130:
  9824                           
  9825                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  9826   003772  0E00               	movlw	0
  9827   003774  6E02               	movwf	(fputc@c+1)^0,c
  9828   003776  0E20               	movlw	32
  9829   003778  6E01               	movwf	fputc@c^0,c
  9830   00377A  C00F  F003         	movff	pad@fp,fputc@fp
  9831   00377E  EC44  F01B         	call	_fputc	;wreg free
  9832   003782                     
  9833                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  9834   003782  4A15               	infsnz	pad@i^0,f,c
  9835   003784  2A16               	incf	(pad@i+1)^0,f,c
  9836   003786                     l5134:
  9837                           
  9838                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9839   003786  5012               	movf	pad@p^0,w,c
  9840   003788  5C15               	subwf	pad@i^0,w,c
  9841   00378A  5016               	movf	(pad@i+1)^0,w,c
  9842   00378C  0A80               	xorlw	128
  9843   00378E  6E14               	movwf	??_pad^0,c
  9844   003790  5013               	movf	(pad@p+1)^0,w,c
  9845   003792  0A80               	xorlw	128
  9846   003794  5814               	subwfb	??_pad^0,w,c
  9847   003796  A0D8               	btfss	status,0,c
  9848   003798  EFD0  F01B         	goto	u4581
  9849   00379C  EFD2  F01B         	goto	u4580
  9850   0037A0                     u4581:
  9851   0037A0  EFB9  F01B         	goto	l5130
  9852   0037A4                     u4580:
  9853   0037A4                     
  9854                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  9855   0037A4  B05B               	btfsc	_flags^0,0,c
  9856   0037A6  EFD7  F01B         	goto	u4591
  9857   0037AA  EFD9  F01B         	goto	u4590
  9858   0037AE                     u4591:
  9859   0037AE  EFE1  F01B         	goto	l1351
  9860   0037B2                     u4590:
  9861   0037B2                     
  9862                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  9863   0037B2  C010  F009         	movff	pad@buf,fputs@s
  9864   0037B6  C011  F00A         	movff	pad@buf+1,fputs@s+1
  9865   0037BA  C00F  F00B         	movff	pad@fp,fputs@fp
  9866   0037BE  EC1D  F020         	call	_fputs	;wreg free
  9867   0037C2                     l1351:
  9868   0037C2  0012               	return		;funcret
  9869   0037C4                     __end_of_pad:
  9870                           	callstack 0
  9871                           
  9872 ;; *************** function _fputs *****************
  9873 ;; Defined at:
  9874 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;  s               2    8[COMRAM] PTR const unsigned char 
  9877 ;;		 -> dbuf(32), 
  9878 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  9879 ;;		 -> sprintf@f(12), 
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;  i               2   12[COMRAM] int 
  9882 ;;  c               1   11[COMRAM] unsigned char 
  9883 ;; Return value:  Size  Location     Type
  9884 ;;                  2    8[COMRAM] int 
  9885 ;; Registers used:
  9886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9887 ;; Tracked objects:
  9888 ;;		On entry : 0/0
  9889 ;;		On exit  : 0/0
  9890 ;;		Unchanged: 0/0
  9891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9892 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9893 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9895 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9896 ;;Total ram usage:        6 bytes
  9897 ;; Hardware stack levels used: 1
  9898 ;; Hardware stack levels required when called: 2
  9899 ;; This function calls:
  9900 ;;		_fputc
  9901 ;; This function is called by:
  9902 ;;		_pad
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           	psect	text53
  9907   00403A                     __ptext53:
  9908                           	callstack 0
  9909   00403A                     _fputs:
  9910                           	callstack 22
  9911   00403A  0E00               	movlw	0
  9912   00403C  6E0E               	movwf	(fputs@i+1)^0,c
  9913   00403E  0E00               	movlw	0
  9914   004040  6E0D               	movwf	fputs@i^0,c
  9915   004042  EF2C  F020         	goto	l5034
  9916   004046                     l5030:
  9917   004046  C00C  F001         	movff	fputs@c,fputc@c
  9918   00404A  6A02               	clrf	(fputc@c+1)^0,c
  9919   00404C  C00B  F003         	movff	fputs@fp,fputc@fp
  9920   004050  EC44  F01B         	call	_fputc	;wreg free
  9921   004054  4A0D               	infsnz	fputs@i^0,f,c
  9922   004056  2A0E               	incf	(fputs@i+1)^0,f,c
  9923   004058                     l5034:
  9924   004058  500D               	movf	fputs@i^0,w,c
  9925   00405A  2409               	addwf	fputs@s^0,w,c
  9926   00405C  6ED9               	movwf	fsr2l,c
  9927   00405E  500E               	movf	(fputs@i+1)^0,w,c
  9928   004060  200A               	addwfc	(fputs@s+1)^0,w,c
  9929   004062  6EDA               	movwf	fsr2h,c
  9930   004064  50DF               	movf	indf2,w,c
  9931   004066  6E0C               	movwf	fputs@c^0,c
  9932   004068  500C               	movf	fputs@c^0,w,c
  9933   00406A  A4D8               	btfss	status,2,c
  9934   00406C  EF3A  F020         	goto	u4431
  9935   004070  EF3C  F020         	goto	u4430
  9936   004074                     u4431:
  9937   004074  EF23  F020         	goto	l5030
  9938   004078                     u4430:
  9939   004078  0012               	return		;funcret
  9940   00407A                     __end_of_fputs:
  9941                           	callstack 0
  9942                           
  9943 ;; *************** function _fputc *****************
  9944 ;; Defined at:
  9945 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;  c               2    0[COMRAM] int 
  9948 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  9949 ;;		 -> sprintf@f(12), 
  9950 ;; Auto vars:     Size  Location     Type
  9951 ;;		None
  9952 ;; Return value:  Size  Location     Type
  9953 ;;                  2    0[COMRAM] int 
  9954 ;; Registers used:
  9955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9956 ;; Tracked objects:
  9957 ;;		On entry : 0/0
  9958 ;;		On exit  : 0/0
  9959 ;;		Unchanged: 0/0
  9960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9961 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9963 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9964 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9965 ;;Total ram usage:        8 bytes
  9966 ;; Hardware stack levels used: 1
  9967 ;; Hardware stack levels required when called: 1
  9968 ;; This function calls:
  9969 ;;		_putch
  9970 ;; This function is called by:
  9971 ;;		_pad
  9972 ;;		_vfpfcnvrt
  9973 ;;		_fputs
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           	psect	text54
  9978   003688                     __ptext54:
  9979                           	callstack 0
  9980   003688                     _fputc:
  9981                           	callstack 25
  9982   003688  5003               	movf	fputc@fp^0,w,c
  9983   00368A  B4D8               	btfsc	status,2,c
  9984   00368C  EF4A  F01B         	goto	u4391
  9985   003690  EF4C  F01B         	goto	u4390
  9986   003694                     u4391:
  9987   003694  EF54  F01B         	goto	l5018
  9988   003698                     u4390:
  9989   003698  5003               	movf	fputc@fp^0,w,c
  9990   00369A  A4D8               	btfss	status,2,c
  9991   00369C  EF52  F01B         	goto	u4401
  9992   0036A0  EF54  F01B         	goto	u4400
  9993   0036A4                     u4401:
  9994   0036A4  EF59  F01B         	goto	l5020
  9995   0036A8                     u4400:
  9996   0036A8                     l5018:
  9997   0036A8  5001               	movf	fputc@c^0,w,c
  9998   0036AA  EC17  F022         	call	_putch
  9999   0036AE  EF98  F01B         	goto	l1415
 10000   0036B2                     l5020:
 10001   0036B2  5003               	movf	fputc@fp^0,w,c
 10002   0036B4  6ED9               	movwf	fsr2l,c
 10003   0036B6  6ADA               	clrf	fsr2h,c
 10004   0036B8  0E0A               	movlw	10
 10005   0036BA  26D9               	addwf	fsr2l,f,c
 10006   0036BC  50DE               	movf	postinc2,w,c
 10007   0036BE  10DE               	iorwf	postinc2,w,c
 10008   0036C0  B4D8               	btfsc	status,2,c
 10009   0036C2  EF65  F01B         	goto	u4411
 10010   0036C6  EF67  F01B         	goto	u4410
 10011   0036CA                     u4411:
 10012   0036CA  EF80  F01B         	goto	l5024
 10013   0036CE                     u4410:
 10014   0036CE  5003               	movf	fputc@fp^0,w,c
 10015   0036D0  6ED9               	movwf	fsr2l,c
 10016   0036D2  6ADA               	clrf	fsr2h,c
 10017   0036D4  0E0A               	movlw	10
 10018   0036D6  26D9               	addwf	fsr2l,f,c
 10019   0036D8  5003               	movf	fputc@fp^0,w,c
 10020   0036DA  6EE1               	movwf	fsr1l,c
 10021   0036DC  6AE2               	clrf	fsr1h,c
 10022   0036DE  0E03               	movlw	3
 10023   0036E0  26E1               	addwf	fsr1l,f,c
 10024   0036E2  50DE               	movf	postinc2,w,c
 10025   0036E4  5CE6               	subwf	postinc1,w,c
 10026   0036E6  50E6               	movf	postinc1,w,c
 10027   0036E8  0A80               	xorlw	128
 10028   0036EA  6E08               	movwf	(??_fputc+4)^0,c
 10029   0036EC  50DE               	movf	postinc2,w,c
 10030   0036EE  0A80               	xorlw	128
 10031   0036F0  5808               	subwfb	(??_fputc+4)^0,w,c
 10032   0036F2  B0D8               	btfsc	status,0,c
 10033   0036F4  EF7E  F01B         	goto	u4421
 10034   0036F8  EF80  F01B         	goto	u4420
 10035   0036FC                     u4421:
 10036   0036FC  EF98  F01B         	goto	l1415
 10037   003700                     u4420:
 10038   003700                     l5024:
 10039   003700  5003               	movf	fputc@fp^0,w,c
 10040   003702  6ED9               	movwf	fsr2l,c
 10041   003704  6ADA               	clrf	fsr2h,c
 10042   003706  0E03               	movlw	3
 10043   003708  26D9               	addwf	fsr2l,f,c
 10044   00370A  50DF               	movf	indf2,w,c
 10045   00370C  6E04               	movwf	??_fputc^0,c
 10046   00370E  5003               	movf	fputc@fp^0,w,c
 10047   003710  6ED9               	movwf	fsr2l,c
 10048   003712  6ADA               	clrf	fsr2h,c
 10049   003714  50DF               	movf	indf2,w,c
 10050   003716  2404               	addwf	??_fputc^0,w,c
 10051   003718  6ED9               	movwf	fsr2l,c
 10052   00371A  6ADA               	clrf	fsr2h,c
 10053   00371C  C001  FFDF         	movff	fputc@c,indf2
 10054   003720  5003               	movf	fputc@fp^0,w,c
 10055   003722  6ED9               	movwf	fsr2l,c
 10056   003724  6ADA               	clrf	fsr2h,c
 10057   003726  0E03               	movlw	3
 10058   003728  26D9               	addwf	fsr2l,f,c
 10059   00372A  2ADE               	incf	postinc2,f,c
 10060   00372C  0E00               	movlw	0
 10061   00372E  22DD               	addwfc	postdec2,f,c
 10062   003730                     l1415:
 10063   003730  0012               	return		;funcret
 10064   003732                     __end_of_fputc:
 10065                           	callstack 0
 10066                           
 10067 ;; *************** function _putch *****************
 10068 ;; Defined at:
 10069 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10070 ;; Parameters:    Size  Location     Type
 10071 ;;  c               1    wreg     unsigned char 
 10072 ;; Auto vars:     Size  Location     Type
 10073 ;;  c               1    0[COMRAM] unsigned char 
 10074 ;; Return value:  Size  Location     Type
 10075 ;;                  1    wreg      void 
 10076 ;; Registers used:
 10077 ;;		wreg
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10087 ;;Total ram usage:        0 bytes
 10088 ;; Hardware stack levels used: 1
 10089 ;; This function calls:
 10090 ;;		Nothing
 10091 ;; This function is called by:
 10092 ;;		_fputc
 10093 ;; This function uses a non-reentrant model
 10094 ;;
 10095                           
 10096                           	psect	text55
 10097   00442E                     __ptext55:
 10098                           	callstack 0
 10099   00442E                     _putch:
 10100                           	callstack 25
 10101   00442E  0012               	return		;funcret
 10102   004430                     __end_of_putch:
 10103                           	callstack 0
 10104                           
 10105 ;; *************** function _abs *****************
 10106 ;; Defined at:
 10107 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;  a               2    6[COMRAM] int 
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;		None
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  2    6[COMRAM] int 
 10114 ;; Registers used:
 10115 ;;		wreg, status,2, status,0
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10121 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10123 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10124 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10125 ;;Total ram usage:        4 bytes
 10126 ;; Hardware stack levels used: 1
 10127 ;; This function calls:
 10128 ;;		Nothing
 10129 ;; This function is called by:
 10130 ;;		_dtoa
 10131 ;; This function uses a non-reentrant model
 10132 ;;
 10133                           
 10134                           	psect	text56
 10135   00411A                     __ptext56:
 10136                           	callstack 0
 10137   00411A                     _abs:
 10138                           	callstack 25
 10139   00411A  BE08               	btfsc	(abs@a+1)^0,7,c
 10140   00411C  EF92  F020         	goto	u4601
 10141   004120  EF94  F020         	goto	u4600
 10142   004124                     u4601:
 10143   004124  EF9A  F020         	goto	l1400
 10144   004128                     u4600:
 10145   004128  C007  F007         	movff	abs@a,?_abs
 10146   00412C  C008  F008         	movff	abs@a+1,?_abs+1
 10147   004130  EFA6  F020         	goto	l1403
 10148   004134                     l1400:
 10149   004134  C007  F009         	movff	abs@a,??_abs
 10150   004138  C008  F00A         	movff	abs@a+1,??_abs+1
 10151   00413C  1E09               	comf	??_abs^0,f,c
 10152   00413E  1E0A               	comf	(??_abs+1)^0,f,c
 10153   004140  4A09               	infsnz	??_abs^0,f,c
 10154   004142  2A0A               	incf	(??_abs+1)^0,f,c
 10155   004144  C009  F007         	movff	??_abs,?_abs
 10156   004148  C00A  F008         	movff	??_abs+1,?_abs+1
 10157   00414C                     l1403:
 10158   00414C  0012               	return		;funcret
 10159   00414E                     __end_of_abs:
 10160                           	callstack 0
 10161                           
 10162 ;; *************** function ___awmod *****************
 10163 ;; Defined at:
 10164 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10165 ;; Parameters:    Size  Location     Type
 10166 ;;  dividend        2    0[COMRAM] int 
 10167 ;;  divisor         2    2[COMRAM] int 
 10168 ;; Auto vars:     Size  Location     Type
 10169 ;;  sign            1    5[COMRAM] unsigned char 
 10170 ;;  counter         1    4[COMRAM] unsigned char 
 10171 ;; Return value:  Size  Location     Type
 10172 ;;                  2    0[COMRAM] int 
 10173 ;; Registers used:
 10174 ;;		wreg, status,2, status,0
 10175 ;; Tracked objects:
 10176 ;;		On entry : 0/0
 10177 ;;		On exit  : 0/0
 10178 ;;		Unchanged: 0/0
 10179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10180 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10181 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10183 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10184 ;;Total ram usage:        6 bytes
 10185 ;; Hardware stack levels used: 1
 10186 ;; This function calls:
 10187 ;;		Nothing
 10188 ;; This function is called by:
 10189 ;;		_dtoa
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           	psect	text57
 10194   0033D4                     __ptext57:
 10195                           	callstack 0
 10196   0033D4                     ___awmod:
 10197                           	callstack 25
 10198   0033D4  0E00               	movlw	0
 10199   0033D6  6E06               	movwf	___awmod@sign^0,c
 10200   0033D8  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
 10201   0033DA  EFF3  F019         	goto	u4500
 10202   0033DE  EFF1  F019         	goto	u4501
 10203   0033E2                     u4501:
 10204   0033E2  EFF9  F019         	goto	l5094
 10205   0033E6                     u4500:
 10206   0033E6  6C01               	negf	___awmod@dividend^0,c
 10207   0033E8  1E02               	comf	(___awmod@dividend+1)^0,f,c
 10208   0033EA  B0D8               	btfsc	status,0,c
 10209   0033EC  2A02               	incf	(___awmod@dividend+1)^0,f,c
 10210   0033EE  0E01               	movlw	1
 10211   0033F0  6E06               	movwf	___awmod@sign^0,c
 10212   0033F2                     l5094:
 10213   0033F2  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
 10214   0033F4  EF00  F01A         	goto	u4510
 10215   0033F8  EFFE  F019         	goto	u4511
 10216   0033FC                     u4511:
 10217   0033FC  EF04  F01A         	goto	l5098
 10218   003400                     u4510:
 10219   003400  6C03               	negf	___awmod@divisor^0,c
 10220   003402  1E04               	comf	(___awmod@divisor+1)^0,f,c
 10221   003404  B0D8               	btfsc	status,0,c
 10222   003406  2A04               	incf	(___awmod@divisor+1)^0,f,c
 10223   003408                     l5098:
 10224   003408  5003               	movf	___awmod@divisor^0,w,c
 10225   00340A  1004               	iorwf	(___awmod@divisor+1)^0,w,c
 10226   00340C  B4D8               	btfsc	status,2,c
 10227   00340E  EF0B  F01A         	goto	u4521
 10228   003412  EF0D  F01A         	goto	u4520
 10229   003416                     u4521:
 10230   003416  EF31  F01A         	goto	l5114
 10231   00341A                     u4520:
 10232   00341A  0E01               	movlw	1
 10233   00341C  6E05               	movwf	___awmod@counter^0,c
 10234   00341E  EF15  F01A         	goto	l5104
 10235   003422                     l5102:
 10236   003422  90D8               	bcf	status,0,c
 10237   003424  3603               	rlcf	___awmod@divisor^0,f,c
 10238   003426  3604               	rlcf	(___awmod@divisor+1)^0,f,c
 10239   003428  2A05               	incf	___awmod@counter^0,f,c
 10240   00342A                     l5104:
 10241   00342A  AE04               	btfss	(___awmod@divisor+1)^0,7,c
 10242   00342C  EF1A  F01A         	goto	u4531
 10243   003430  EF1C  F01A         	goto	u4530
 10244   003434                     u4531:
 10245   003434  EF11  F01A         	goto	l5102
 10246   003438                     u4530:
 10247   003438                     l5106:
 10248   003438  5003               	movf	___awmod@divisor^0,w,c
 10249   00343A  5C01               	subwf	___awmod@dividend^0,w,c
 10250   00343C  5004               	movf	(___awmod@divisor+1)^0,w,c
 10251   00343E  5802               	subwfb	(___awmod@dividend+1)^0,w,c
 10252   003440  A0D8               	btfss	status,0,c
 10253   003442  EF25  F01A         	goto	u4541
 10254   003446  EF27  F01A         	goto	u4540
 10255   00344A                     u4541:
 10256   00344A  EF2B  F01A         	goto	l5110
 10257   00344E                     u4540:
 10258   00344E  5003               	movf	___awmod@divisor^0,w,c
 10259   003450  5E01               	subwf	___awmod@dividend^0,f,c
 10260   003452  5004               	movf	(___awmod@divisor+1)^0,w,c
 10261   003454  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
 10262   003456                     l5110:
 10263   003456  90D8               	bcf	status,0,c
 10264   003458  3204               	rrcf	(___awmod@divisor+1)^0,f,c
 10265   00345A  3203               	rrcf	___awmod@divisor^0,f,c
 10266   00345C  2E05               	decfsz	___awmod@counter^0,f,c
 10267   00345E  EF1C  F01A         	goto	l5106
 10268   003462                     l5114:
 10269   003462  5006               	movf	___awmod@sign^0,w,c
 10270   003464  B4D8               	btfsc	status,2,c
 10271   003466  EF37  F01A         	goto	u4551
 10272   00346A  EF39  F01A         	goto	u4550
 10273   00346E                     u4551:
 10274   00346E  EF3D  F01A         	goto	l5118
 10275   003472                     u4550:
 10276   003472  6C01               	negf	___awmod@dividend^0,c
 10277   003474  1E02               	comf	(___awmod@dividend+1)^0,f,c
 10278   003476  B0D8               	btfsc	status,0,c
 10279   003478  2A02               	incf	(___awmod@dividend+1)^0,f,c
 10280   00347A                     l5118:
 10281   00347A  C001  F001         	movff	___awmod@dividend,?___awmod
 10282   00347E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 10283   003482  0012               	return		;funcret
 10284   003484                     __end_of___awmod:
 10285                           	callstack 0
 10286                           
 10287 ;; *************** function ___awdiv *****************
 10288 ;; Defined at:
 10289 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;  dividend        2    0[COMRAM] int 
 10292 ;;  divisor         2    2[COMRAM] int 
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;  quotient        2    6[COMRAM] int 
 10295 ;;  sign            1    5[COMRAM] unsigned char 
 10296 ;;  counter         1    4[COMRAM] unsigned char 
 10297 ;; Return value:  Size  Location     Type
 10298 ;;                  2    0[COMRAM] int 
 10299 ;; Registers used:
 10300 ;;		wreg, status,2, status,0
 10301 ;; Tracked objects:
 10302 ;;		On entry : 0/0
 10303 ;;		On exit  : 0/0
 10304 ;;		Unchanged: 0/0
 10305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10306 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10307 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10309 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10310 ;;Total ram usage:        8 bytes
 10311 ;; Hardware stack levels used: 1
 10312 ;; This function calls:
 10313 ;;		Nothing
 10314 ;; This function is called by:
 10315 ;;		_dtoa
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text58
 10320   003310                     __ptext58:
 10321                           	callstack 0
 10322   003310                     ___awdiv:
 10323                           	callstack 25
 10324   003310  0E00               	movlw	0
 10325   003312  6E06               	movwf	___awdiv@sign^0,c
 10326   003314  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
 10327   003316  EF91  F019         	goto	u4440
 10328   00331A  EF8F  F019         	goto	u4441
 10329   00331E                     u4441:
 10330   00331E  EF97  F019         	goto	l5050
 10331   003322                     u4440:
 10332   003322  6C03               	negf	___awdiv@divisor^0,c
 10333   003324  1E04               	comf	(___awdiv@divisor+1)^0,f,c
 10334   003326  B0D8               	btfsc	status,0,c
 10335   003328  2A04               	incf	(___awdiv@divisor+1)^0,f,c
 10336   00332A  0E01               	movlw	1
 10337   00332C  6E06               	movwf	___awdiv@sign^0,c
 10338   00332E                     l5050:
 10339   00332E  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
 10340   003330  EF9E  F019         	goto	u4450
 10341   003334  EF9C  F019         	goto	u4451
 10342   003338                     u4451:
 10343   003338  EFA4  F019         	goto	l5056
 10344   00333C                     u4450:
 10345   00333C  6C01               	negf	___awdiv@dividend^0,c
 10346   00333E  1E02               	comf	(___awdiv@dividend+1)^0,f,c
 10347   003340  B0D8               	btfsc	status,0,c
 10348   003342  2A02               	incf	(___awdiv@dividend+1)^0,f,c
 10349   003344  0E01               	movlw	1
 10350   003346  1A06               	xorwf	___awdiv@sign^0,f,c
 10351   003348                     l5056:
 10352   003348  0E00               	movlw	0
 10353   00334A  6E08               	movwf	(___awdiv@quotient+1)^0,c
 10354   00334C  0E00               	movlw	0
 10355   00334E  6E07               	movwf	___awdiv@quotient^0,c
 10356   003350  5003               	movf	___awdiv@divisor^0,w,c
 10357   003352  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
 10358   003354  B4D8               	btfsc	status,2,c
 10359   003356  EFAF  F019         	goto	u4461
 10360   00335A  EFB1  F019         	goto	u4460
 10361   00335E                     u4461:
 10362   00335E  EFD9  F019         	goto	l5078
 10363   003362                     u4460:
 10364   003362  0E01               	movlw	1
 10365   003364  6E05               	movwf	___awdiv@counter^0,c
 10366   003366  EFB9  F019         	goto	l5064
 10367   00336A                     l5062:
 10368   00336A  90D8               	bcf	status,0,c
 10369   00336C  3603               	rlcf	___awdiv@divisor^0,f,c
 10370   00336E  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
 10371   003370  2A05               	incf	___awdiv@counter^0,f,c
 10372   003372                     l5064:
 10373   003372  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
 10374   003374  EFBE  F019         	goto	u4471
 10375   003378  EFC0  F019         	goto	u4470
 10376   00337C                     u4471:
 10377   00337C  EFB5  F019         	goto	l5062
 10378   003380                     u4470:
 10379   003380                     l5066:
 10380   003380  90D8               	bcf	status,0,c
 10381   003382  3607               	rlcf	___awdiv@quotient^0,f,c
 10382   003384  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
 10383   003386  5003               	movf	___awdiv@divisor^0,w,c
 10384   003388  5C01               	subwf	___awdiv@dividend^0,w,c
 10385   00338A  5004               	movf	(___awdiv@divisor+1)^0,w,c
 10386   00338C  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
 10387   00338E  A0D8               	btfss	status,0,c
 10388   003390  EFCC  F019         	goto	u4481
 10389   003394  EFCE  F019         	goto	u4480
 10390   003398                     u4481:
 10391   003398  EFD3  F019         	goto	l5074
 10392   00339C                     u4480:
 10393   00339C  5003               	movf	___awdiv@divisor^0,w,c
 10394   00339E  5E01               	subwf	___awdiv@dividend^0,f,c
 10395   0033A0  5004               	movf	(___awdiv@divisor+1)^0,w,c
 10396   0033A2  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
 10397   0033A4  8007               	bsf	___awdiv@quotient^0,0,c
 10398   0033A6                     l5074:
 10399   0033A6  90D8               	bcf	status,0,c
 10400   0033A8  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
 10401   0033AA  3203               	rrcf	___awdiv@divisor^0,f,c
 10402   0033AC  2E05               	decfsz	___awdiv@counter^0,f,c
 10403   0033AE  EFC0  F019         	goto	l5066
 10404   0033B2                     l5078:
 10405   0033B2  5006               	movf	___awdiv@sign^0,w,c
 10406   0033B4  B4D8               	btfsc	status,2,c
 10407   0033B6  EFDF  F019         	goto	u4491
 10408   0033BA  EFE1  F019         	goto	u4490
 10409   0033BE                     u4491:
 10410   0033BE  EFE5  F019         	goto	l5082
 10411   0033C2                     u4490:
 10412   0033C2  6C07               	negf	___awdiv@quotient^0,c
 10413   0033C4  1E08               	comf	(___awdiv@quotient+1)^0,f,c
 10414   0033C6  B0D8               	btfsc	status,0,c
 10415   0033C8  2A08               	incf	(___awdiv@quotient+1)^0,f,c
 10416   0033CA                     l5082:
 10417   0033CA  C007  F001         	movff	___awdiv@quotient,?___awdiv
 10418   0033CE  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 10419   0033D2  0012               	return		;funcret
 10420   0033D4                     __end_of___awdiv:
 10421                           	callstack 0
 10422                           
 10423 ;; *************** function _sendStringSerial4 *****************
 10424 ;; Defined at:
 10425 ;;		line 41 in file "serial.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;  string          1    1[COMRAM] PTR unsigned char 
 10428 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 10429 ;; Auto vars:     Size  Location     Type
 10430 ;;		None
 10431 ;; Return value:  Size  Location     Type
 10432 ;;                  1    wreg      void 
 10433 ;; Registers used:
 10434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10435 ;; Tracked objects:
 10436 ;;		On entry : 0/0
 10437 ;;		On exit  : 0/0
 10438 ;;		Unchanged: 0/0
 10439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10440 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10443 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10444 ;;Total ram usage:        1 bytes
 10445 ;; Hardware stack levels used: 1
 10446 ;; Hardware stack levels required when called: 1
 10447 ;; This function calls:
 10448 ;;		_sendCharSerial4
 10449 ;; This function is called by:
 10450 ;;		_calibration_routine
 10451 ;;		_send2USART
 10452 ;;		_sendAllReadings
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456                           	psect	text59
 10457   00427A                     __ptext59:
 10458                           	callstack 0
 10459   00427A                     _sendStringSerial4:
 10460                           	callstack 28
 10461   00427A                     
 10462                           ;serial.c: 44:     while(*string != 0){
 10463   00427A  EF4A  F021         	goto	l5658
 10464   00427E                     l5652:
 10465                           
 10466                           ;serial.c: 46:   sendCharSerial4(*string++);
 10467   00427E  5002               	movf	sendStringSerial4@string^0,w,c
 10468   004280  6ED9               	movwf	fsr2l,c
 10469   004282  6ADA               	clrf	fsr2h,c
 10470   004284  50DF               	movf	indf2,w,c
 10471   004286  ECF6  F021         	call	_sendCharSerial4
 10472   00428A  2A02               	incf	sendStringSerial4@string^0,f,c
 10473   00428C                     
 10474                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 10475   00428C  0E6A               	movlw	106
 10476   00428E                     u6827:
 10477   00428E  2EE8               	decfsz	wreg,f,c
 10478   004290  D7FE               	bra	u6827
 10479   004292  D000               	nop2	
 10480   004294                     l5658:
 10481                           
 10482                           ;serial.c: 44:     while(*string != 0){
 10483   004294  5002               	movf	sendStringSerial4@string^0,w,c
 10484   004296  6ED9               	movwf	fsr2l,c
 10485   004298  6ADA               	clrf	fsr2h,c
 10486   00429A  50DF               	movf	indf2,w,c
 10487   00429C  A4D8               	btfss	status,2,c
 10488   00429E  EF53  F021         	goto	u5351
 10489   0042A2  EF55  F021         	goto	u5350
 10490   0042A6                     u5351:
 10491   0042A6  EF3F  F021         	goto	l5652
 10492   0042AA                     u5350:
 10493   0042AA  0012               	return		;funcret
 10494   0042AC                     __end_of_sendStringSerial4:
 10495                           	callstack 0
 10496                           
 10497 ;; *************** function _sendCharSerial4 *****************
 10498 ;; Defined at:
 10499 ;;		line 35 in file "serial.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;  charToSend      1    wreg     unsigned char 
 10502 ;; Auto vars:     Size  Location     Type
 10503 ;;  charToSend      1    0[COMRAM] unsigned char 
 10504 ;; Return value:  Size  Location     Type
 10505 ;;                  1    wreg      void 
 10506 ;; Registers used:
 10507 ;;		wreg
 10508 ;; Tracked objects:
 10509 ;;		On entry : 0/0
 10510 ;;		On exit  : 0/0
 10511 ;;		Unchanged: 0/0
 10512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10514 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10516 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10517 ;;Total ram usage:        1 bytes
 10518 ;; Hardware stack levels used: 1
 10519 ;; This function calls:
 10520 ;;		Nothing
 10521 ;; This function is called by:
 10522 ;;		_sendStringSerial4
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text60
 10527   0043EC                     __ptext60:
 10528                           	callstack 0
 10529   0043EC                     _sendCharSerial4:
 10530                           	callstack 28
 10531                           
 10532                           ;incstack = 0
 10533                           ;sendCharSerial4@charToSend stored from wreg
 10534   0043EC  6E01               	movwf	sendCharSerial4@charToSend^0,c
 10535   0043EE                     l569:
 10536   0043EE  010E               	movlb	14	; () banked
 10537   0043F0  A537               	btfss	55,2,b	;volatile
 10538   0043F2  EFFD  F021         	goto	u4921
 10539   0043F6  EFFF  F021         	goto	u4920
 10540   0043FA                     u4921:
 10541   0043FA  EFF7  F021         	goto	l569
 10542   0043FE                     u4920:
 10543   0043FE                     
 10544                           ; BSR set to: 14
 10545                           ;serial.c: 37:     TX4REG = charToSend;
 10546   0043FE  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 10547   004402                     
 10548                           ; BSR set to: 14
 10549   004402  0012               	return		;funcret
 10550   004404                     __end_of_sendCharSerial4:
 10551                           	callstack 0
 10552                           
 10553 ;; *************** function _color_read_Red *****************
 10554 ;; Defined at:
 10555 ;;		line 32 in file "color.c"
 10556 ;; Parameters:    Size  Location     Type
 10557 ;;		None
 10558 ;; Auto vars:     Size  Location     Type
 10559 ;;  tmp             2    9[COMRAM] unsigned int 
 10560 ;; Return value:  Size  Location     Type
 10561 ;;                  2    4[COMRAM] unsigned int 
 10562 ;; Registers used:
 10563 ;;		wreg, status,2, status,0, cstack
 10564 ;; Tracked objects:
 10565 ;;		On entry : 0/0
 10566 ;;		On exit  : 0/0
 10567 ;;		Unchanged: 0/0
 10568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10569 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10571 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10572 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10573 ;;Total ram usage:        7 bytes
 10574 ;; Hardware stack levels used: 1
 10575 ;; Hardware stack levels required when called: 2
 10576 ;; This function calls:
 10577 ;;		_I2C_2_Master_Read
 10578 ;;		_I2C_2_Master_RepStart
 10579 ;;		_I2C_2_Master_Start
 10580 ;;		_I2C_2_Master_Stop
 10581 ;;		_I2C_2_Master_Write
 10582 ;; This function is called by:
 10583 ;;		_reading_hue
 10584 ;;		_calibration_routine
 10585 ;; This function uses a non-reentrant model
 10586 ;;
 10587                           
 10588                           	psect	text61
 10589   003BAC                     __ptext61:
 10590                           	callstack 0
 10591   003BAC                     _color_read_Red:
 10592                           	callstack 27
 10593   003BAC                     
 10594                           ;color.c: 34:  unsigned int tmp;;color.c: 35:  I2C_2_Master_Start();
 10595   003BAC  EC0D  F022         	call	_I2C_2_Master_Start	;wreg free
 10596                           
 10597                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
 10598   003BB0  0E52               	movlw	82
 10599   003BB2  EC02  F022         	call	_I2C_2_Master_Write
 10600                           
 10601                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
 10602   003BB6  0EB6               	movlw	182
 10603   003BB8  EC02  F022         	call	_I2C_2_Master_Write
 10604                           
 10605                           ;color.c: 38:  I2C_2_Master_RepStart();
 10606   003BBC  EC12  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10607                           
 10608                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
 10609   003BC0  0E53               	movlw	83
 10610   003BC2  EC02  F022         	call	_I2C_2_Master_Write
 10611                           
 10612                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
 10613   003BC6  0E01               	movlw	1
 10614   003BC8  ECFC  F01F         	call	_I2C_2_Master_Read
 10615   003BCC  6E07               	movwf	??_color_read_Red^0,c
 10616   003BCE  5007               	movf	??_color_read_Red^0,w,c
 10617   003BD0  6E0A               	movwf	color_read_Red@tmp^0,c
 10618   003BD2  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
 10619                           
 10620                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10621   003BD4  0E00               	movlw	0
 10622   003BD6  ECFC  F01F         	call	_I2C_2_Master_Read
 10623   003BDA  6E07               	movwf	??_color_read_Red^0,c
 10624   003BDC  5007               	movf	??_color_read_Red^0,w,c
 10625   003BDE  6E09               	movwf	(??_color_read_Red+2)^0,c
 10626   003BE0  6A08               	clrf	(??_color_read_Red+1)^0,c
 10627   003BE2  500A               	movf	color_read_Red@tmp^0,w,c
 10628   003BE4  1008               	iorwf	(??_color_read_Red+1)^0,w,c
 10629   003BE6  6E0A               	movwf	color_read_Red@tmp^0,c
 10630   003BE8  500B               	movf	(color_read_Red@tmp+1)^0,w,c
 10631   003BEA  1009               	iorwf	(??_color_read_Red+2)^0,w,c
 10632   003BEC  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
 10633                           
 10634                           ;color.c: 42:  I2C_2_Master_Stop();
 10635   003BEE  EC08  F022         	call	_I2C_2_Master_Stop	;wreg free
 10636   003BF2                     
 10637                           ;color.c: 43:  return tmp;
 10638   003BF2  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
 10639   003BF6  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10640   003BFA  0012               	return		;funcret
 10641   003BFC                     __end_of_color_read_Red:
 10642                           	callstack 0
 10643                           
 10644 ;; *************** function _color_read_Green *****************
 10645 ;; Defined at:
 10646 ;;		line 46 in file "color.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;		None
 10649 ;; Auto vars:     Size  Location     Type
 10650 ;;  tmp             2    9[COMRAM] unsigned int 
 10651 ;; Return value:  Size  Location     Type
 10652 ;;                  2    4[COMRAM] unsigned int 
 10653 ;; Registers used:
 10654 ;;		wreg, status,2, status,0, cstack
 10655 ;; Tracked objects:
 10656 ;;		On entry : 0/0
 10657 ;;		On exit  : 0/0
 10658 ;;		Unchanged: 0/0
 10659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10660 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10661 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10662 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10663 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10664 ;;Total ram usage:        7 bytes
 10665 ;; Hardware stack levels used: 1
 10666 ;; Hardware stack levels required when called: 2
 10667 ;; This function calls:
 10668 ;;		_I2C_2_Master_Read
 10669 ;;		_I2C_2_Master_RepStart
 10670 ;;		_I2C_2_Master_Start
 10671 ;;		_I2C_2_Master_Stop
 10672 ;;		_I2C_2_Master_Write
 10673 ;; This function is called by:
 10674 ;;		_reading_hue
 10675 ;;		_calibration_routine
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           	psect	text62
 10680   003BFC                     __ptext62:
 10681                           	callstack 0
 10682   003BFC                     _color_read_Green:
 10683                           	callstack 27
 10684   003BFC                     
 10685                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
 10686   003BFC  EC0D  F022         	call	_I2C_2_Master_Start	;wreg free
 10687                           
 10688                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
 10689   003C00  0E52               	movlw	82
 10690   003C02  EC02  F022         	call	_I2C_2_Master_Write
 10691                           
 10692                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
 10693   003C06  0EB8               	movlw	184
 10694   003C08  EC02  F022         	call	_I2C_2_Master_Write
 10695                           
 10696                           ;color.c: 52:  I2C_2_Master_RepStart();
 10697   003C0C  EC12  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10698                           
 10699                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
 10700   003C10  0E53               	movlw	83
 10701   003C12  EC02  F022         	call	_I2C_2_Master_Write
 10702                           
 10703                           ;color.c: 54:  tmp=I2C_2_Master_Read(1);
 10704   003C16  0E01               	movlw	1
 10705   003C18  ECFC  F01F         	call	_I2C_2_Master_Read
 10706   003C1C  6E07               	movwf	??_color_read_Green^0,c
 10707   003C1E  5007               	movf	??_color_read_Green^0,w,c
 10708   003C20  6E0A               	movwf	color_read_Green@tmp^0,c
 10709   003C22  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
 10710                           
 10711                           ;color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10712   003C24  0E00               	movlw	0
 10713   003C26  ECFC  F01F         	call	_I2C_2_Master_Read
 10714   003C2A  6E07               	movwf	??_color_read_Green^0,c
 10715   003C2C  5007               	movf	??_color_read_Green^0,w,c
 10716   003C2E  6E09               	movwf	(??_color_read_Green+2)^0,c
 10717   003C30  6A08               	clrf	(??_color_read_Green+1)^0,c
 10718   003C32  500A               	movf	color_read_Green@tmp^0,w,c
 10719   003C34  1008               	iorwf	(??_color_read_Green+1)^0,w,c
 10720   003C36  6E0A               	movwf	color_read_Green@tmp^0,c
 10721   003C38  500B               	movf	(color_read_Green@tmp+1)^0,w,c
 10722   003C3A  1009               	iorwf	(??_color_read_Green+2)^0,w,c
 10723   003C3C  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
 10724                           
 10725                           ;color.c: 56:  I2C_2_Master_Stop();
 10726   003C3E  EC08  F022         	call	_I2C_2_Master_Stop	;wreg free
 10727   003C42                     
 10728                           ;color.c: 57:  return tmp;
 10729   003C42  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
 10730   003C46  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10731   003C4A  0012               	return		;funcret
 10732   003C4C                     __end_of_color_read_Green:
 10733                           	callstack 0
 10734                           
 10735 ;; *************** function _color_read_Clear *****************
 10736 ;; Defined at:
 10737 ;;		line 75 in file "color.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;		None
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;  tmp             2    9[COMRAM] unsigned int 
 10742 ;; Return value:  Size  Location     Type
 10743 ;;                  2    4[COMRAM] unsigned int 
 10744 ;; Registers used:
 10745 ;;		wreg, status,2, status,0, cstack
 10746 ;; Tracked objects:
 10747 ;;		On entry : 0/0
 10748 ;;		On exit  : 0/0
 10749 ;;		Unchanged: 0/0
 10750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10751 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10752 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10753 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10754 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10755 ;;Total ram usage:        7 bytes
 10756 ;; Hardware stack levels used: 1
 10757 ;; Hardware stack levels required when called: 2
 10758 ;; This function calls:
 10759 ;;		_I2C_2_Master_Read
 10760 ;;		_I2C_2_Master_RepStart
 10761 ;;		_I2C_2_Master_Start
 10762 ;;		_I2C_2_Master_Stop
 10763 ;;		_I2C_2_Master_Write
 10764 ;; This function is called by:
 10765 ;;		_reading_hue
 10766 ;;		_calibration_routine
 10767 ;;		_main
 10768 ;; This function uses a non-reentrant model
 10769 ;;
 10770                           
 10771                           	psect	text63
 10772   003C4C                     __ptext63:
 10773                           	callstack 0
 10774   003C4C                     _color_read_Clear:
 10775                           	callstack 27
 10776   003C4C                     
 10777                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
 10778   003C4C  EC0D  F022         	call	_I2C_2_Master_Start	;wreg free
 10779                           
 10780                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 10781   003C50  0E52               	movlw	82
 10782   003C52  EC02  F022         	call	_I2C_2_Master_Write
 10783                           
 10784                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
 10785   003C56  0EB4               	movlw	180
 10786   003C58  EC02  F022         	call	_I2C_2_Master_Write
 10787                           
 10788                           ;color.c: 81:  I2C_2_Master_RepStart();
 10789   003C5C  EC12  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10790                           
 10791                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 10792   003C60  0E53               	movlw	83
 10793   003C62  EC02  F022         	call	_I2C_2_Master_Write
 10794                           
 10795                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
 10796   003C66  0E01               	movlw	1
 10797   003C68  ECFC  F01F         	call	_I2C_2_Master_Read
 10798   003C6C  6E07               	movwf	??_color_read_Clear^0,c
 10799   003C6E  5007               	movf	??_color_read_Clear^0,w,c
 10800   003C70  6E0A               	movwf	color_read_Clear@tmp^0,c
 10801   003C72  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
 10802                           
 10803                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10804   003C74  0E00               	movlw	0
 10805   003C76  ECFC  F01F         	call	_I2C_2_Master_Read
 10806   003C7A  6E07               	movwf	??_color_read_Clear^0,c
 10807   003C7C  5007               	movf	??_color_read_Clear^0,w,c
 10808   003C7E  6E09               	movwf	(??_color_read_Clear+2)^0,c
 10809   003C80  6A08               	clrf	(??_color_read_Clear+1)^0,c
 10810   003C82  500A               	movf	color_read_Clear@tmp^0,w,c
 10811   003C84  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
 10812   003C86  6E0A               	movwf	color_read_Clear@tmp^0,c
 10813   003C88  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
 10814   003C8A  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
 10815   003C8C  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
 10816                           
 10817                           ;color.c: 85:  I2C_2_Master_Stop();
 10818   003C8E  EC08  F022         	call	_I2C_2_Master_Stop	;wreg free
 10819   003C92                     
 10820                           ;color.c: 86:  return tmp;
 10821   003C92  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
 10822   003C96  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10823   003C9A  0012               	return		;funcret
 10824   003C9C                     __end_of_color_read_Clear:
 10825                           	callstack 0
 10826                           
 10827 ;; *************** function _color_read_Blue *****************
 10828 ;; Defined at:
 10829 ;;		line 60 in file "color.c"
 10830 ;; Parameters:    Size  Location     Type
 10831 ;;		None
 10832 ;; Auto vars:     Size  Location     Type
 10833 ;;  tmp             2    9[COMRAM] unsigned int 
 10834 ;; Return value:  Size  Location     Type
 10835 ;;                  2    4[COMRAM] unsigned int 
 10836 ;; Registers used:
 10837 ;;		wreg, status,2, status,0, cstack
 10838 ;; Tracked objects:
 10839 ;;		On entry : 0/0
 10840 ;;		On exit  : 0/0
 10841 ;;		Unchanged: 0/0
 10842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10843 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10844 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10845 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10846 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10847 ;;Total ram usage:        7 bytes
 10848 ;; Hardware stack levels used: 1
 10849 ;; Hardware stack levels required when called: 2
 10850 ;; This function calls:
 10851 ;;		_I2C_2_Master_Read
 10852 ;;		_I2C_2_Master_RepStart
 10853 ;;		_I2C_2_Master_Start
 10854 ;;		_I2C_2_Master_Stop
 10855 ;;		_I2C_2_Master_Write
 10856 ;; This function is called by:
 10857 ;;		_reading_hue
 10858 ;;		_calibration_routine
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           	psect	text64
 10863   003C9C                     __ptext64:
 10864                           	callstack 0
 10865   003C9C                     _color_read_Blue:
 10866                           	callstack 27
 10867   003C9C                     
 10868                           ;color.c: 62:  unsigned int tmp;;color.c: 63:  I2C_2_Master_Start();
 10869   003C9C  EC0D  F022         	call	_I2C_2_Master_Start	;wreg free
 10870                           
 10871                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x00);
 10872   003CA0  0E52               	movlw	82
 10873   003CA2  EC02  F022         	call	_I2C_2_Master_Write
 10874                           
 10875                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x1A);
 10876   003CA6  0EBA               	movlw	186
 10877   003CA8  EC02  F022         	call	_I2C_2_Master_Write
 10878                           
 10879                           ;color.c: 66:  I2C_2_Master_RepStart();
 10880   003CAC  EC12  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10881                           
 10882                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
 10883   003CB0  0E53               	movlw	83
 10884   003CB2  EC02  F022         	call	_I2C_2_Master_Write
 10885                           
 10886                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
 10887   003CB6  0E01               	movlw	1
 10888   003CB8  ECFC  F01F         	call	_I2C_2_Master_Read
 10889   003CBC  6E07               	movwf	??_color_read_Blue^0,c
 10890   003CBE  5007               	movf	??_color_read_Blue^0,w,c
 10891   003CC0  6E0A               	movwf	color_read_Blue@tmp^0,c
 10892   003CC2  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
 10893                           
 10894                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10895   003CC4  0E00               	movlw	0
 10896   003CC6  ECFC  F01F         	call	_I2C_2_Master_Read
 10897   003CCA  6E07               	movwf	??_color_read_Blue^0,c
 10898   003CCC  5007               	movf	??_color_read_Blue^0,w,c
 10899   003CCE  6E09               	movwf	(??_color_read_Blue+2)^0,c
 10900   003CD0  6A08               	clrf	(??_color_read_Blue+1)^0,c
 10901   003CD2  500A               	movf	color_read_Blue@tmp^0,w,c
 10902   003CD4  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
 10903   003CD6  6E0A               	movwf	color_read_Blue@tmp^0,c
 10904   003CD8  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
 10905   003CDA  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
 10906   003CDC  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
 10907                           
 10908                           ;color.c: 70:  I2C_2_Master_Stop();
 10909   003CDE  EC08  F022         	call	_I2C_2_Master_Stop	;wreg free
 10910   003CE2                     
 10911                           ;color.c: 71:  return tmp;
 10912   003CE2  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
 10913   003CE6  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 10914   003CEA  0012               	return		;funcret
 10915   003CEC                     __end_of_color_read_Blue:
 10916                           	callstack 0
 10917                           
 10918 ;; *************** function _I2C_2_Master_Write *****************
 10919 ;; Defined at:
 10920 ;;		line 45 in file "i2c.c"
 10921 ;; Parameters:    Size  Location     Type
 10922 ;;  data_byte       1    wreg     unsigned char 
 10923 ;; Auto vars:     Size  Location     Type
 10924 ;;  data_byte       1    1[COMRAM] unsigned char 
 10925 ;; Return value:  Size  Location     Type
 10926 ;;                  1    wreg      void 
 10927 ;; Registers used:
 10928 ;;		wreg, status,2, status,0, cstack
 10929 ;; Tracked objects:
 10930 ;;		On entry : 0/0
 10931 ;;		On exit  : 0/0
 10932 ;;		Unchanged: 0/0
 10933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10935 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10937 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10938 ;;Total ram usage:        1 bytes
 10939 ;; Hardware stack levels used: 1
 10940 ;; Hardware stack levels required when called: 1
 10941 ;; This function calls:
 10942 ;;		_I2C_2_Master_Idle
 10943 ;; This function is called by:
 10944 ;;		_color_writetoaddr
 10945 ;;		_color_read_Red
 10946 ;;		_color_read_Green
 10947 ;;		_color_read_Blue
 10948 ;;		_color_read_Clear
 10949 ;; This function uses a non-reentrant model
 10950 ;;
 10951                           
 10952                           	psect	text65
 10953   004404                     __ptext65:
 10954                           	callstack 0
 10955   004404                     _I2C_2_Master_Write:
 10956                           	callstack 27
 10957                           
 10958                           ;incstack = 0
 10959                           ;I2C_2_Master_Write@data_byte stored from wreg
 10960   004404  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
 10961   004406                     
 10962                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 10963   004406  EC83  F021         	call	_I2C_2_Master_Idle	;wreg free
 10964   00440A                     
 10965                           ;i2c.c: 48:   SSP2BUF = data_byte;
 10966   00440A  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 10967   00440E  0012               	return		;funcret
 10968   004410                     __end_of_I2C_2_Master_Write:
 10969                           	callstack 0
 10970                           
 10971 ;; *************** function _I2C_2_Master_Stop *****************
 10972 ;; Defined at:
 10973 ;;		line 39 in file "i2c.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;		None
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;		None
 10978 ;; Return value:  Size  Location     Type
 10979 ;;                  1    wreg      void 
 10980 ;; Registers used:
 10981 ;;		wreg, status,2, status,0, cstack
 10982 ;; Tracked objects:
 10983 ;;		On entry : 0/0
 10984 ;;		On exit  : 0/0
 10985 ;;		Unchanged: 0/0
 10986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10991 ;;Total ram usage:        0 bytes
 10992 ;; Hardware stack levels used: 1
 10993 ;; Hardware stack levels required when called: 1
 10994 ;; This function calls:
 10995 ;;		_I2C_2_Master_Idle
 10996 ;; This function is called by:
 10997 ;;		_color_writetoaddr
 10998 ;;		_color_read_Red
 10999 ;;		_color_read_Green
 11000 ;;		_color_read_Blue
 11001 ;;		_color_read_Clear
 11002 ;; This function uses a non-reentrant model
 11003 ;;
 11004                           
 11005                           	psect	text66
 11006   004410                     __ptext66:
 11007                           	callstack 0
 11008   004410                     _I2C_2_Master_Stop:
 11009                           	callstack 27
 11010   004410                     
 11011                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11012   004410  EC83  F021         	call	_I2C_2_Master_Idle	;wreg free
 11013   004414                     
 11014                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11015   004414  010E               	movlb	14	; () banked
 11016   004416  85DA               	bsf	218,2,b	;volatile
 11017   004418                     
 11018                           ; BSR set to: 14
 11019   004418  0012               	return		;funcret
 11020   00441A                     __end_of_I2C_2_Master_Stop:
 11021                           	callstack 0
 11022                           
 11023 ;; *************** function _I2C_2_Master_Start *****************
 11024 ;; Defined at:
 11025 ;;		line 27 in file "i2c.c"
 11026 ;; Parameters:    Size  Location     Type
 11027 ;;		None
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;		None
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  1    wreg      void 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2, status,0, cstack
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11043 ;;Total ram usage:        0 bytes
 11044 ;; Hardware stack levels used: 1
 11045 ;; Hardware stack levels required when called: 1
 11046 ;; This function calls:
 11047 ;;		_I2C_2_Master_Idle
 11048 ;; This function is called by:
 11049 ;;		_color_writetoaddr
 11050 ;;		_color_read_Red
 11051 ;;		_color_read_Green
 11052 ;;		_color_read_Blue
 11053 ;;		_color_read_Clear
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           	psect	text67
 11058   00441A                     __ptext67:
 11059                           	callstack 0
 11060   00441A                     _I2C_2_Master_Start:
 11061                           	callstack 27
 11062   00441A                     
 11063                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11064   00441A  EC83  F021         	call	_I2C_2_Master_Idle	;wreg free
 11065   00441E                     
 11066                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11067   00441E  010E               	movlb	14	; () banked
 11068   004420  81DA               	bsf	218,0,b	;volatile
 11069   004422                     
 11070                           ; BSR set to: 14
 11071   004422  0012               	return		;funcret
 11072   004424                     __end_of_I2C_2_Master_Start:
 11073                           	callstack 0
 11074                           
 11075 ;; *************** function _I2C_2_Master_RepStart *****************
 11076 ;; Defined at:
 11077 ;;		line 33 in file "i2c.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;		None
 11080 ;; Auto vars:     Size  Location     Type
 11081 ;;		None
 11082 ;; Return value:  Size  Location     Type
 11083 ;;                  1    wreg      void 
 11084 ;; Registers used:
 11085 ;;		wreg, status,2, status,0, cstack
 11086 ;; Tracked objects:
 11087 ;;		On entry : 0/0
 11088 ;;		On exit  : 0/0
 11089 ;;		Unchanged: 0/0
 11090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11095 ;;Total ram usage:        0 bytes
 11096 ;; Hardware stack levels used: 1
 11097 ;; Hardware stack levels required when called: 1
 11098 ;; This function calls:
 11099 ;;		_I2C_2_Master_Idle
 11100 ;; This function is called by:
 11101 ;;		_color_read_Red
 11102 ;;		_color_read_Green
 11103 ;;		_color_read_Blue
 11104 ;;		_color_read_Clear
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           	psect	text68
 11109   004424                     __ptext68:
 11110                           	callstack 0
 11111   004424                     _I2C_2_Master_RepStart:
 11112                           	callstack 27
 11113   004424                     
 11114                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11115   004424  EC83  F021         	call	_I2C_2_Master_Idle	;wreg free
 11116   004428                     
 11117                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11118   004428  010E               	movlb	14	; () banked
 11119   00442A  83DA               	bsf	218,1,b	;volatile
 11120   00442C                     
 11121                           ; BSR set to: 14
 11122   00442C  0012               	return		;funcret
 11123   00442E                     __end_of_I2C_2_Master_RepStart:
 11124                           	callstack 0
 11125                           
 11126 ;; *************** function _I2C_2_Master_Read *****************
 11127 ;; Defined at:
 11128 ;;		line 51 in file "i2c.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;  ack             1    wreg     unsigned char 
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;  ack             1    2[COMRAM] unsigned char 
 11133 ;;  tmp             1    3[COMRAM] unsigned char 
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      unsigned char 
 11136 ;; Registers used:
 11137 ;;		wreg, status,2, status,0, cstack
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11145 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11146 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11147 ;;Total ram usage:        3 bytes
 11148 ;; Hardware stack levels used: 1
 11149 ;; Hardware stack levels required when called: 1
 11150 ;; This function calls:
 11151 ;;		_I2C_2_Master_Idle
 11152 ;; This function is called by:
 11153 ;;		_color_read_Red
 11154 ;;		_color_read_Green
 11155 ;;		_color_read_Blue
 11156 ;;		_color_read_Clear
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           	psect	text69
 11161   003FF8                     __ptext69:
 11162                           	callstack 0
 11163   003FF8                     _I2C_2_Master_Read:
 11164                           	callstack 27
 11165                           
 11166                           ; BSR set to: 14
 11167                           ;incstack = 0
 11168                           ;I2C_2_Master_Read@ack stored from wreg
 11169   003FF8  6E03               	movwf	I2C_2_Master_Read@ack^0,c
 11170   003FFA                     
 11171                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11172   003FFA  EC83  F021         	call	_I2C_2_Master_Idle	;wreg free
 11173   003FFE                     
 11174                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11175   003FFE  010E               	movlb	14	; () banked
 11176   004000  87DA               	bsf	218,3,b	;volatile
 11177                           
 11178                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11179   004002  EC83  F021         	call	_I2C_2_Master_Idle	;wreg free
 11180   004006                     
 11181                           ;i2c.c: 57:   tmp = SSP2BUF;
 11182   004006  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11183                           
 11184                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11185   00400A  EC83  F021         	call	_I2C_2_Master_Idle	;wreg free
 11186   00400E                     
 11187                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11188   00400E  5003               	movf	I2C_2_Master_Read@ack^0,w,c
 11189   004010  B4D8               	btfsc	status,2,c
 11190   004012  EF0D  F020         	goto	u5331
 11191   004016  EF11  F020         	goto	u5330
 11192   00401A                     u5331:
 11193   00401A  6A02               	clrf	??_I2C_2_Master_Read^0,c
 11194   00401C  2A02               	incf	??_I2C_2_Master_Read^0,f,c
 11195   00401E  EF12  F020         	goto	u5348
 11196   004022                     u5330:
 11197   004022  6A02               	clrf	??_I2C_2_Master_Read^0,c
 11198   004024                     u5348:
 11199   004024  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
 11200   004026  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
 11201   004028  010E               	movlb	14	; () banked
 11202   00402A  51DA               	movf	218,w,b	;volatile
 11203   00402C  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
 11204   00402E  0BDF               	andlw	-33
 11205   004030  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
 11206   004032  6FDA               	movwf	218,b	;volatile
 11207   004034                     
 11208                           ; BSR set to: 14
 11209                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11210   004034  89DA               	bsf	218,4,b	;volatile
 11211   004036                     
 11212                           ; BSR set to: 14
 11213                           ;i2c.c: 61:   return tmp;
 11214   004036  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
 11215   004038                     
 11216                           ; BSR set to: 14
 11217   004038  0012               	return		;funcret
 11218   00403A                     __end_of_I2C_2_Master_Read:
 11219                           	callstack 0
 11220                           
 11221 ;; *************** function _I2C_2_Master_Idle *****************
 11222 ;; Defined at:
 11223 ;;		line 22 in file "i2c.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;		None
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;		None
 11228 ;; Return value:  Size  Location     Type
 11229 ;;                  1    wreg      void 
 11230 ;; Registers used:
 11231 ;;		wreg, status,2, status,0
 11232 ;; Tracked objects:
 11233 ;;		On entry : 0/0
 11234 ;;		On exit  : 0/0
 11235 ;;		Unchanged: 0/0
 11236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11239 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11240 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11241 ;;Total ram usage:        1 bytes
 11242 ;; Hardware stack levels used: 1
 11243 ;; This function calls:
 11244 ;;		Nothing
 11245 ;; This function is called by:
 11246 ;;		_I2C_2_Master_Start
 11247 ;;		_I2C_2_Master_RepStart
 11248 ;;		_I2C_2_Master_Stop
 11249 ;;		_I2C_2_Master_Write
 11250 ;;		_I2C_2_Master_Read
 11251 ;; This function uses a non-reentrant model
 11252 ;;
 11253                           
 11254                           	psect	text70
 11255   004306                     __ptext70:
 11256                           	callstack 0
 11257   004306                     _I2C_2_Master_Idle:
 11258                           	callstack 27
 11259   004306                     l194:
 11260   004306  010E               	movlb	14	; () banked
 11261   004308  B5D8               	btfsc	216,2,b	;volatile
 11262   00430A  EF89  F021         	goto	u4831
 11263   00430E  EF8B  F021         	goto	u4830
 11264   004312                     u4831:
 11265   004312  EF83  F021         	goto	l194
 11266   004316                     u4830:
 11267   004316                     
 11268                           ; BSR set to: 14
 11269   004316  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11270   00431A  0E1F               	movlw	31
 11271   00431C  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
 11272   00431E  A4D8               	btfss	status,2,c
 11273   004320  EF94  F021         	goto	u4841
 11274   004324  EF96  F021         	goto	u4840
 11275   004328                     u4841:
 11276   004328  EF83  F021         	goto	l194
 11277   00432C                     u4840:
 11278   00432C                     
 11279                           ; BSR set to: 14
 11280   00432C  0012               	return		;funcret
 11281   00432E                     __end_of_I2C_2_Master_Idle:
 11282                           	callstack 0
 11283                           
 11284 ;; *************** function _ADC_init *****************
 11285 ;; Defined at:
 11286 ;;		line 9 in file "ADC.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;		None
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;		None
 11291 ;; Return value:  Size  Location     Type
 11292 ;;                  1    wreg      void 
 11293 ;; Registers used:
 11294 ;;		wreg, status,2
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11304 ;;Total ram usage:        0 bytes
 11305 ;; Hardware stack levels used: 1
 11306 ;; This function calls:
 11307 ;;		Nothing
 11308 ;; This function is called by:
 11309 ;;		_main
 11310 ;; This function uses a non-reentrant model
 11311 ;;
 11312                           
 11313                           	psect	text71
 11314   0043D2                     __ptext71:
 11315                           	callstack 0
 11316   0043D2                     _ADC_init:
 11317                           	callstack 30
 11318   0043D2                     
 11319                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 11320   0043D2  8C86               	bsf	134,6,c	;volatile
 11321                           
 11322                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 11323   0043D4  010E               	movlb	14	; () banked
 11324   0043D6  8DB4               	bsf	180,6,b	;volatile
 11325                           
 11326                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 11327   0043D8  010F               	movlb	15	; () banked
 11328   0043DA  9958               	bcf	88,4,b	;volatile
 11329   0043DC                     
 11330                           ; BSR set to: 15
 11331                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 11332   0043DC  0EFC               	movlw	-4
 11333   0043DE  1758               	andwf	88,f,b	;volatile
 11334                           
 11335                           ;ADC.c: 17:     ADPCH=0b101110;
 11336   0043E0  0E2E               	movlw	46
 11337   0043E2  6F5F               	movwf	95,b	;volatile
 11338   0043E4                     
 11339                           ; BSR set to: 15
 11340                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 11341   0043E4  9460               	bcf	96,2,c	;volatile
 11342   0043E6                     
 11343                           ; BSR set to: 15
 11344                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 11345   0043E6  8860               	bsf	96,4,c	;volatile
 11346   0043E8                     
 11347                           ; BSR set to: 15
 11348                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 11349   0043E8  8E60               	bsf	96,7,c	;volatile
 11350   0043EA                     
 11351                           ; BSR set to: 15
 11352   0043EA  0012               	return		;funcret
 11353   0043EC                     __end_of_ADC_init:
 11354                           	callstack 0
 11355                           
 11356                           	psect	rparam
 11357   000000                     
 11358                           	psect	config
 11359                           
 11360                           ;Config register CONFIG1L @ 0x300000
 11361                           ;	External Oscillator mode Selection bits
 11362                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11363                           ;	Power-up default value for COSC bits
 11364                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11365   300000                     	org	3145728
 11366   300000  AA                 	db	170
 11367                           
 11368                           ;Config register CONFIG1H @ 0x300001
 11369                           ;	unspecified, using default values
 11370                           ;	Clock Out Enable bit
 11371                           ;	CLKOUTEN = 0x1, unprogrammed default
 11372                           ;	Clock Switch Enable bit
 11373                           ;	CSWEN = 0x1, unprogrammed default
 11374                           ;	Fail-Safe Clock Monitor Enable bit
 11375                           ;	FCMEN = 0x1, unprogrammed default
 11376   300001                     	org	3145729
 11377   300001  FF                 	db	255
 11378                           
 11379                           ;Config register CONFIG3L @ 0x300004
 11380                           ;	WDT Period Select bits
 11381                           ;	WDTCPS = 0x1F, unprogrammed default
 11382                           ;	WDT operating mode
 11383                           ;	WDTE = OFF, WDT Disabled
 11384   300004                     	org	3145732
 11385   300004  9F                 	db	159
 11386                           
 11387                           ;Config register CONFIG3H @ 0x300005
 11388                           ;	unspecified, using default values
 11389                           ;	WDT Window Select bits
 11390                           ;	WDTCWS = 0x7, unprogrammed default
 11391                           ;	WDT input clock selector
 11392                           ;	WDTCCS = 0x7, unprogrammed default
 11393   300005                     	org	3145733
 11394   300005  FF                 	db	255
 11395                           tosu	equ	0xFFF
 11396                           tosh	equ	0xFFE
 11397                           tosl	equ	0xFFD
 11398                           stkptr	equ	0xFFC
 11399                           pclatu	equ	0xFFB
 11400                           pclath	equ	0xFFA
 11401                           pcl	equ	0xFF9
 11402                           tblptru	equ	0xFF8
 11403                           tblptrh	equ	0xFF7
 11404                           tblptrl	equ	0xFF6
 11405                           tablat	equ	0xFF5
 11406                           prodh	equ	0xFF4
 11407                           prodl	equ	0xFF3
 11408                           indf0	equ	0xFEF
 11409                           postinc0	equ	0xFEE
 11410                           postdec0	equ	0xFED
 11411                           preinc0	equ	0xFEC
 11412                           plusw0	equ	0xFEB
 11413                           fsr0h	equ	0xFEA
 11414                           fsr0l	equ	0xFE9
 11415                           wreg	equ	0xFE8
 11416                           indf1	equ	0xFE7
 11417                           postinc1	equ	0xFE6
 11418                           postdec1	equ	0xFE5
 11419                           preinc1	equ	0xFE4
 11420                           plusw1	equ	0xFE3
 11421                           fsr1h	equ	0xFE2
 11422                           fsr1l	equ	0xFE1
 11423                           bsr	equ	0xFE0
 11424                           indf2	equ	0xFDF
 11425                           postinc2	equ	0xFDE
 11426                           postdec2	equ	0xFDD
 11427                           preinc2	equ	0xFDC
 11428                           plusw2	equ	0xFDB
 11429                           fsr2h	equ	0xFDA
 11430                           fsr2l	equ	0xFD9
 11431                           status	equ	0xFD8

Data Sizes:
    Strings     173
    Constant    0
    Data        1
    BSS         334
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     90      95
    BANK0           160     78     146
    BANK1           256     16     128
    BANK2           256      0     150
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    returnHome@path	PTR PTR struct PathStep size(2) Largest target is 150
		 -> path(BANK2[150]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S2889$buffer	PTR unsigned char  size(2) Largest target is 0

    S2889$source	PTR const unsigned char  size(2) Largest target is 0

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_calibration_routine
    _returnHome->_reverseTurn
    _reverseTurn->_left135
    _reverseTurn->_right135
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fldiv->___flmul
    _decision->_send2USART
    _send2USART->_sprintf
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _logAction->___wmul
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _decision->_send2USART

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                52    52      0  323044
                                             76 BANK0      2     2      0
                                              0 BANK1     16    16      0
                           _ADC_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                          _logAction
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          13     7      6   57296
                                             30 COMRAM    13     7      6
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          3     0      3   44894
                                             27 COMRAM     3     0      3
                            _left135
                           _right135
                            _turn180
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                      6     2      4   11596
                                             23 COMRAM     6     2      4
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    4813
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     158
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   21815
                                             64 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   20911
                                             60 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1136
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     517
                                             50 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4727
                                             16 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    3802
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    2693
                                              0 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1346
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8    1130
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    3263
                                             25 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2      34
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  197480
                                             69 COMRAM     6     2      4
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
                         _send2USART
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11532
                                             67 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   25795
                                             27 COMRAM     6     2      4
                     _backOneAndHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   26515
                                             27 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   11302
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   25975
                                             27 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   11122
                                             23 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           6     2      4   26515
                                             27 COMRAM     6     2      4
                           _backHalf
                          _logAction
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   11302
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            5     3      2    4813
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        6     2      4   26695
                                             27 COMRAM     6     2      4
                           _backHalf
                            _left135
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   11482
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   26695
                                             27 COMRAM     6     2      4
                           _backHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   11482
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             6     2      4   26875
                                             27 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   11662
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             5     3      2    4993
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _logAction                                            5     1      4    2946
                                              6 COMRAM     5     1      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   11842
                                             23 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    6005
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4633
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    3957
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     841
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   12439
                                             67 COMRAM    23    22      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10515
                                             48 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    8943
                                             44 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8455
                                             33 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1788
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             22 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             14 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              8 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     726
                                              1 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___fldiv
     ___flmul (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _logAction
         ___wmul
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
       _logAction
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
       _logAction
     _moveOrange
       _backHalf
       _logAction
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
       _logAction
     _moveRed
       _backHalf
       _logAction
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _logAction
       _right90
     _send2USART
       _sendStringSerial4
       _sprintf
   _fullSpeedAhead
     _setMotorPWM
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _logAction
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _left135
       _right135
       _turn180
       _turnLeft
       _turnRight
   _send2USART
   _stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     10      80       7       50.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4E      92       5       91.2%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5A      5F       1      100.0%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     207      66        0.0%
DATA                 0      0     207       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 15:45:14 2024

               _color_read_Red 3BAC                   ___fldiv@aexp 0032                   ___fldiv@bexp 0031  
           fullSpeedBack@power 0016                   ___fldiv@sign 002A                _color_read_Blue 3C9C  
                           l81 3BFA                             l90 3C9A                             l75 40E4  
                           l84 3C4A                             l93 3228                             l78 4394  
                           l87 3CEA                             l96 2786                             l98 2794  
                           l99 27E2                   ___awdiv@sign 0006            ___wmul@multiplicand 0003  
              moveLightBlue@mL 001C                moveLightBlue@mR 001D             convert_rgb2hue@max 0098  
           convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090               _color_read_Clear 3C4C  
             _color_read_Green 3BFC                            l101 27F0                            l102 2842  
                          l111 2930                            l200 4422                            l104 2850  
                          l105 28A2                            l121 11A2                            l203 442C  
                          l107 28B0                            l131 1294                            l123 11FC  
                          l212 4038                            l108 290A                            l141 15AC  
                          l133 12A4                            l125 120C                            l206 4418  
                          l135 12FE                            l119 1192                            l209 440E  
                          l401 2F34                            l145 1624                            l137 130E  
                          l146 1640                            l164 275E                            l414 39DC  
                          l158 2752                            l502 330E                            l191 4304  
                          l432 417E                            l424 3A56                            l329 43EA  
                          l409 38E0                            l441 41E2                            l194 4306  
                          l450 41B0                            l435 4246                            l419 395E  
                          l444 4214                            l197 432C                            l429 3ACC  
                          l453 3D7A                            l509 35DC                            l438 4278  
                          l462 3D32                            l447 42DA                            l471 3E52  
                          l623 43D0                            l456 3E9A                            l560 43B2  
                          l465 3DC2                            l394 3852                            l490 3F6E  
                          l459 3EE2                            l572 4402                            l468 3E0A  
                          l645 4374                            l493 409A                            l478 3BAA  
                          l648 4352                            l496 40B0                            l569 43EE  
                          l913 30F8                            l489 3F6E                            l578 42AA  
                          l907 3686                            l918 313E                            l945 303A  
                          l892 3482                            l879 33D2                            _abs 411A  
                          _pad 3732                            _hue 00C2            convert_rgb2hue@cMax 003D  
                 ___awmod@sign 0006            convert_rgb2hue@diff 0094            logAction@pathLength 0009  
                          wreg 0FE8                   ___flmul@aexp 000E                   ___flmul@bexp 0013  
                 ___flmul@sign 000D                   ___flmul@temp 0018                   ___flmul@prod 0014  
                 ___fltol@exp1 003C                           l1202 1A1A                           l1203 1A08  
                         ?_abs 0007                           l1230 22C4                           l1310 2A20  
                         l1303 2988                           l1400 4134                           l1232 2124  
                         l1241 216A                           l1146 3B40                           l1218 3FB4  
                         l1306 2AE4                           l1403 414C                           l1139 3B38  
                         l1243 21E2                           l1235 20E8                           l1244 21D0  
                         l1317 2A7C                           l1326 4118                           l1262 1BC6  
                         l1415 3730                           l1423 4078                           l1351 37C2  
                         l1271 1E34                           l1272 1E22                           l1176 1830  
                         l1193 194A                           l1185 1B00                           l1177 181E  
                         l1426 442E                           l1346 3766                           l1354 2CCA  
                         l1266 1F2A                           l1178 17E4                           l1371 3528  
                         l1349 37A4                           l1269 1DBC                           l1390 2C6A  
                         l1367 2DE0                           l1375 3530                           l1279 1EEC  
                         l5100 341A                           l5020 36B2                           l1396 3FF6  
                         l5110 3456                           l5102 3422                           l5022 36CE  
                         l5014 3688                           l5030 4046                           l5112 345C  
                         l5104 342A                           l5024 3700                           l5016 3698  
                         l5032 4054                           l5200 2D76                           l5050 332E  
                         l5042 3310                           l5106 3438                           l5114 3462  
                         l5018 36A8                           l5034 4058                           l5130 3772  
                         l5122 3732                           l5210 2DC4                           l5202 2D90  
                         l6010 360C                           l6002 3F70                           l5300 4306  
                         l5060 3362                           l5052 333C                           l5044 3314  
                         l5116 3472                           l5108 344E                           l5140 4128  
                         l5028 403A                           l5132 3782                           l5124 3740  
                         l5204 2D9E                           l5036 432E                           l5220 34BA  
                         l6020 3684                           l6012 361C                           l6004 3F80  
                         l5302 4316                           l5070 339C                           l5062 336A  
                         l5054 3344                           l5046 3322                           l5118 347A  
                         l5134 3786                           l5126 3750                           l5206 2DAE  
                         l5038 434A                           l5222 34D6                           l5214 3484  
                         l5150 3AF8                           l5142 3ACE                           l5230 2DFC  
                         l5310 3876                           l6014 364A                           l6030 30A8  
                         l6110 2A0A                           l6102 29C2                           l5080 33C2  
                         l5072 33A4                           l5064 3372                           l5056 3348  
                         l5048 332A                           l5136 37B2                           l5128 375E  
                         l5208 2DB4                           l5224 34F6                           l5216 348C  
                         l5160 3B2C                           l5152 3B06                           l5144 3AD6  
                         l5240 2EB8                           l5232 2E4A                           l5312 388C  
                         l5320 38B4                           l5304 3854                           l6016 365A  
                         l6008 35DE                           l6040 3136                           l6032 30B8  
                         l6024 303C                           l5400 165C                           l6120 2A8A  
                         l6112 2A16                           l6104 29CA                           l6200 111A  
                         l5082 33CA                           l5074 33A6                           l5066 3380  
                         l5058 3350                           l5090 33E6                           l5138 411A  
                         l5170 2C8C                           l5218 34B2                           l5226 34FE  
                         l5250 2B22                           l5162 3B32                           l5154 3B0C  
                         l5146 3AE8                           l5242 2EF8                           l5234 2E5C  
                         l5322 38CA                           l5314 3894                           l5306 3858  
                         l5330 398A                           l6018 367E                           l6042 313C  
                         l6034 30C6                           l6026 306A                           l5410 1690  
                         l5402 165E                           l6130 2AD2                           l6122 2A8C  
                         l6114 2A52                           l6106 29D6                           l6210 121C  
                         l6202 114C                           l5076 33AC                           l5068 3386  
                         l5092 33EE                           l5180 2CC6                           l5172 2C9C  
                         l5164 2C6C                           l5252 2B26                           l5244 2AE6  
                         l6140 42EC                           l5156 3B22                           l5148 3AF0  
                         l5236 2E60                           l5228 2DE2                           l5316 389C  
                         l5308 386E                           l5340 39AA                           l5324 3960  
                         l6300 43B4                           l6036 30D8                           l6028 307A  
                         l5420 16C2                           l5404 166E                           l5412 1698  
                         l6060 2FA0                           l6052 2F60                           l6132 2AD4  
                         l6124 2A90                           l6116 2A5E                           l6108 2A08  
                         l6220 131E                           l6212 124E                           l6204 117E  
                         l6150 3BAC                           l5078 33B2                           l5094 33F2  
                         l5086 33D4                           l5190 2D18                           l5182 2CD2  
                         l5174 2CA2                           l5166 2C70                           l5270 2BAE  
                         l5262 2B44                           l5254 2B2E                           l5246 2B0C  
                         l6142 42EE                           l5158 3B2A                           l5238 2E9E  
                         l5318 38A4                           l5342 39B2                           l5326 397A  
                         l5350 38FC                           l6302 43C8                           l6038 30E6  
                         l5510 189A                           l5502 1862                           l5430 16F8  
                         l5422 16C8                           l5414 16A8                           l5406 167E  
                         l6070 2FD0                           l6062 2FAE                           l6054 2F8A  
                         l6046 2F36                           l6126 2AB4                           l6118 2A6C  
                         l6230 145A                           l6222 1384                           l6214 1280  
                         l6206 11B6                           l6310 3F5E                           ?_pad 000F  
                         l6152 3BF2                           l5096 3400                           l5088 33D8  
                         l5192 2D1E                           l5184 2CDC                           l5176 2CB2  
                         l5168 2C84                           l5280 2C1A                           l5272 2BB8  
                         l5256 2B30                           l5264 2B7A                           l5248 2B14  
                         l5600 3FBE                           l6400 27C0                           l6144 42F0  
                         l6136 42DC                           l5344 39C2                           l5336 3992  
                         l5328 3982                           l5360 3914                           l5352 3904  
                         l5512 189E                           l5504 1872                           l5520 18BE  
                         l5440 1734                           l5432 1708                           l5424 16D6  
                         l5416 16AE                           l5408 168E                           l6080 2FFA  
                         l6072 2FDA                           l6056 2F8C                           l6048 2F4C  
                         l6128 2AC4                           l6240 15F0                           l6232 14EA  
                         l6224 139A                           l6216 12B8                           l6208 11E8  
                         l6320 3246                           l6304 3F2A                           l5610 441E  
                         l6162 3C9C                           l6170 3C92                           l5098 3408  
                         l5186 2CE2                           l5194 2D3A                           l5178 2CBE  
                         l5282 2C24                           l5274 2BC2                           l5266 2B8A  
                         l5258 2B3C                           l5290 2C44                           l5602 3FCE  
                         l6410 2820                           l6402 27C2                           l6146 42F2  
                         l6138 42E6                           l5346 39C6                           l5338 39A2  
                         l5370 3948                           l5362 3924                           l5354 390C  
                         l6250 3D64                           l5522 18E4                           l5530 193A  
                         l5514 18AC                           l5506 1880                           l5450 1752  
                         l5442 1742                           l5434 170A                           l5426 16D8  
                         l5418 16C0                           l6082 300A                           l6058 2F9C  
                         l6090 2934                           l6234 151C                           l6226 13CC  
                         l6218 12EA                           l6330 32AA                           l6322 3262  
                         l6306 3F3C                           l6500 43D2                           l5620 4424  
                         l5612 4406                           l6164 3CE2                           l6156 3BFC  
                         l5196 2D54                           l5188 2D14                           l5276 2BE2  
                         l5268 2B9E                           l5604 3FEE                           l6420 2880  
                         l6412 2822                           l6404 27DA                           l6148 4378  
                         l5380 3A78                           l5372 3A58                           l5700 4254  
                         l6260 3E9C                           l6252 3E54                           l5364 392C  
                         l5348 38E2                           l6244 3D34                           l5540 198E  
                         l5532 1960                           l5524 1918                           l5516 18AE  
                         l5508 188E                           l5460 1766                           l5452 1756  
                         l5444 1746                           l5428 16E8                           l5436 1712  
                         l6084 301A                           l6068 2FC6                           l6092 2944  
                         l6228 1428                           l6236 15AC                           l6180 0F22  
                         l6340 3302                           l6332 32C6                           l6324 326A  
                         l6308 3F4C                           l6502 43DC                           l5630 400E  
                         l5622 4428                           l5614 440A                           l6158 3C42  
                         l5198 2D66                           l5286 2C38                           l5278 2C02  
                         l6430 28E4                           l6422 2882                           l6414 283A  
                         l6406 27F2                           l6350 40DA                           l6342 40B2  
                         l5390 3AB0                           l5382 3A8C                           l5374 3A70  
                         l5702 426C                           l6262 3EA8                           l6254 3E60  
                         l5710 41E4                           l6270 3E18                           l5366 3934  
                         l6246 3D40                           l6510 4396                           l5550 19B8  
                         l5542 199C                           l5534 1970                           l5526 191A  
                         l5518 18B8                           l5470 177A                           l5462 176A  
                         l5454 175A                           l5446 174A                           l5438 1722  
                         l6086 302A                           l6078 2FEE                           l6094 2952  
                         l6238 15E0                           l6190 1026                           l6182 0F56  
                         l6174 0EB0                           l6334 32E2                           l6326 3286  
                         l6318 322A                           l6504 43E4                           l5632 4034  
                         l5624 3FFA                           l5608 441A                           l5616 4410  
                         l6168 3C4C                           l5392 43EE                           l5640 40EE  
                         l6440 2918                           l6432 28E6                           l6424 289A  
                         l6416 2852                           l6408 280A                           l6344 40B6  
                         l5384 3A94                           l5720 42CE                           l6264 3EC0  
                         l6256 3E78                           l5712 41F0                           l6272 3E30  
                         l5368 3944                           l5704 41B2                           l6248 3D58  
                         l6280 3D10                           l6520 43B0                           l6512 43A0  
                         l5800 20AC                           l5560 19EA                           l5552 19C8  
                         l5544 199E                           l5528 192A                           l5480 17CC  
                         l5472 177E                           l5464 176E                           l5456 175E  
                         l5448 174E                           l6096 2998                           l6192 105A  
                         l6184 0F8A                           l6176 0EC2                           l6360 3172  
                         l6352 3140                           l6336 32EA                           l6328 32A2  
                         l6600 2310                           l6506 43E6                           l5634 4036  
                         l5626 3FFE                           l5618 4414                           l5394 43FE  
                         l5650 427A                           l5642 40F6                           l6434 28E8  
                         l6426 28B6                           l6418 286A                           l6346 40C0  
                         l5386 3A9C                           l6266 3ECC                           l6258 3E84  
                         l5714 4208                           l6274 3E3C                           l5706 41BE  
                         l6290 3DF4                           l5722 4180                           l6282 3D1C  
                         l6450 258A                           l6442 253E                           l6530 3822  
                         l6522 37C4                           l6514 43A2                           l5810 20F2  
                         l5802 20B4                           l5570 1A44                           l5562 1A00  
                         l5546 19AC                           l5538 1984                           l5554 19CA  
                         l5490 1810                           l5482 17DC                           l5466 1772  
                         l5458 1762                           l5474 1782                           l6098 29AE  
                         l6194 107E                           l6186 0FBE                           l6178 0EF2  
                         l6370 31A8                           l6362 3174                           l6354 3146  
                         l5730 4086                           l6338 32F6                           l6610 2330  
                         l6602 2328                           l6508 43E8                           l5628 4006  
                         l5652 427E                           l5644 40FE                           l6436 28EA  
                         l6428 28CE                           l6348 40D0                           l5388 3AAC  
                         l5716 42AC                           l6268 3E0C                           l5708 41D6  
                         l6284 3DC4                           l5724 418C                           l6292 3D7C  
                         l6276 3CEC                           l6460 25EC                           l6452 25A0  
                         l6444 2554                           l6540 3844                           l6532 382C  
                         l6524 37D4                           l6516 43AC                           l5820 214A  
                         l5812 2110                           l5804 20C4                           l5740 1F48  
                         l5900 1BA0                           l5580 1AC0                           l5572 1A7E  
                         l5548 19B4                           l5556 19D8                           l5492 1812  
                         l5484 17F2                           l5476 1786                           l5468 1776  
                         l5396 1642                           l6196 10B2                           l6188 0FF2  
                         l6380 31DC                           l6372 31AA                           l6364 3176  
                         l6356 315E                           l5732 4096                           l5660 39DE  
                         l6620 233A                           l6612 2332                           l6604 232A  
                         l5654 428A                           l5646 410E                           l5638 40E6  
                         l6438 2902                           l6390 2760                           l5718 42B8  
                         l6286 3DD0                           l5726 41A4                           l6294 3D88  
                         l6278 3CF8                           l6470 264E                           l6462 2602  
                         l6454 25B6                           l6446 256A                           l6542 3846  
                         l6534 382E                           l6526 37FA                           l6518 43AE  
                         l5830 2188                           l5822 2150                           l5814 2112  
                         l5806 20D8                           l5742 1F58                           l5750 1F82  
                         l5734 1F2C                           l5902 1BB0                           l5590 1AE0  
                         l5582 1AC4                           l5566 1A2A                           l5574 1A80  
                         l5558 19DC                           l5494 181C                           l5486 17FE  
                         l5478 17B0                           l5398 164E                           l6198 10E6  
                         l6382 31F6                           l6374 31C2                           l6366 31A4  
                         l6358 3170                           l5670 3A16                           l5662 39FA  
                         l6630 2366                           l6622 233E                           l6614 2334  
                         l6606 232C                           l5656 428C                           l6392 2766  
                         l5680 3B44                           l6288 3DE8                           l6296 3DA0  
                         l6480 26AE                           l6472 2662                           l6464 2616  
                         l6456 25CA                           l6448 257E                           l6544 3850  
                         l6536 3838                           l6528 37FE                           l5840 21F2  
                         l5832 218C                           l5824 215A                           l5816 2122  
                         l5808 20E6                           l5760 1FAE                           l5752 1F92  
                         l5744 1F68                           l5736 1F38                           l5920 1C32  
                         l5912 1BFA                           l5904 1BB6                           l5592 1AEE  
                         l5584 1AD2                           l5576 1A90                           l5568 1A36  
                         l5496 183E                           l5488 1802                           l6384 320C  
                         l6376 31D8                           l6368 31A6                           l5728 407A  
                         l5672 3A1E                           l6560 3572                           l6552 3532  
                         l6640 2378                           l6632 2368                           l6624 2348  
                         l6616 2336                           l6608 232E                           l5658 4294  
                         l6394 277E                           l5682 3B5A                           l6298 3DAC  
                         l5690 4172                           l6490 2706                           l6482 26BA  
                         l6474 266E                           l6466 2622                           l6458 25D6  
                         l6546 4354                           l6538 383A                           l5850 2254  
                         l5842 21FE                           l5834 219A                           l5826 2168  
                         l5818 2134                           l5762 1FBE                           l5770 1FE8  
                         l5754 1F98                           l5746 1F78                           l5738 1F46  
                         l5930 1C7C                           l5922 1C4A                           l5914 1C06  
                         l5906 1BD6                           l5594 1AF0                           l5586 1AD8  
                         l5578 1AA0                           l5498 184E                           l6386 3220  
                         l6378 31DA                           l5674 3A26                           l6562 3598  
                         l6554 353A                           l6650 238C                           l6642 237A  
                         l6634 236A                           l6626 234A                           l6618 2338  
                         l6396 2796                           l5684 3BA6                           l5692 4216  
                         l6492 271C                           l6484 26D0                           l6476 2684  
                         l6468 2638                           l6548 436C                           l5860 22B2  
                         l5852 226A                           l5844 220C                           l5836 21C8  
                         l5828 217A                           l5780 202A                           l5772 1FF8  
                         l5764 1FCE                           l5756 1F9E                           l5748 1F7A  
                         l5940 1CD2                           l5932 1C8C                           l5924 1C56  
                         l5916 1C10                           l5908 1BE6                           l5588 1ADA  
                         l5676 3A36                           l5668 3A02                           l6564 35AA  
                         l6660 2458                           l6652 2398                           l6644 237C  
                         l6636 236C                           l6628 234C                           l6580 22D2  
                         l6572 22C6                           l5598 3FB6                           l6398 27AE  
                         l5694 4222                           l5686 414E                           l6494 2732  
                         l6486 26E6                           l6478 269A                           l5862 22B8  
                         l5854 2284                           l5846 2236                           l5774 200E  
                         l5766 1FDE                           l5758 1FAC                           l5950 1D76  
                         l5942 1CEE                           l5934 1C98                           l5926 1C62  
                         l5918 1C26                           l5678 3A3A                           l6566 35C2  
                         l6558 354C                           l6670 2494                           l6662 2464  
                         l6654 23BA                           l6646 237E                           l6638 2370  
                         l6590 22F4                           l6582 22DE                           l6574 22CA  
                         l6736 2B6C                           l5696 423A                           l5688 415A  
                         l6496 2746                           l6488 26FA                           l5864 22BA  
                         l5856 22A0                           l5848 223A                           l5792 2062  
                         l5776 201E                           l5784 203E                           l5768 1FE0  
                         l5960 1DCC                           l5952 1D84                           l5944 1CFA  
                         l5936 1CA8                           l5928 1C70                           l5880 1B2E  
                         l5872 1B02                           l6568 35D2                           l6680 24EA  
                         l6672 24AE                           l6664 2470                           l6656 23DC  
                         l6648 238A                           l6592 22FC                           l6584 22E4  
                         l6576 22CE                           l5698 4248                           l6498 2752  
                         l5858 22A4                           l5794 207C                           l5786 204E  
                         l5778 2026                           l5962 1DDA                           l5954 1DA2  
                         l5946 1D16                           l5938 1CC2                           l5890 1B6A  
                         l5882 1B3E                           l5874 1B0E                           l6682 24F6  
                         l6674 24BA                           l6666 2472                           l6658 2440  
                         l6594 2304                           l6586 22E8                           l6578 22D2  
                         l5796 208C                           l5788 204E                           l5972 1E44  
                         l5980 1E8C                           l5964 1DDE                           l5956 1DAC  
                         l5948 1D40                           l5892 1B70                           l5884 1B4E  
                         l5876 1B1C                           l6684 2512                           l6676 24D2  
                         l6668 2488                           l6596 2308                           l6588 22EC  
                         l5798 209C                           l5990 1F00                           l5982 1EA6  
                         l5974 1E50                           l5966 1DEC                           l5958 1DBA  
                         l5894 1B7E                           l5886 1B54                           l5878 1B1E  
                         l6686 2522                           l6678 24EA                           l6598 230C  
                         l5992 1F0E                           l5984 1EBA                           l5976 1E5E  
                         l5968 1E1A                           l5896 1B80                           l5888 1B64  
                         l5994 1F10                           l5986 1ED4                           l5978 1E88  
                         l5898 1B90                           l5988 1EF0                           l5996 1F16  
                         l5998 1F1A                           STR_1 0E73                           STR_2 0EAC  
                         STR_3 0E22                           STR_4 0EAC                           STR_5 0E3F  
                         STR_6 0EAC                           STR_7 0E01                           STR_8 0EAC  
                         STR_9 0E5A                   _BAUD4CONbits 0EE9                           u5000 1734  
                         u5001 1730                           u5010 1742                           _T2PR 0FBC  
                         u5011 173E                           u5100 1880                           u5020 17B0  
                         u5101 187C                           u5021 17AC                           u5110 188E  
                         u5030 17C8                           u5111 188A                           u5031 17C2  
                         u4400 36A8                           u5200 19D8                           u5120 18AC  
                         u5040 17CA                           u6000 2A4E                           u4401 36A4  
                         u5201 19D4                           u5121 18A8                           u6001 2A4A  
                         u4410 36CE                           u5210 19EA                           u5130 18E4  
                         u5050 17F2                           u6010 2A6C                           u4411 36CA  
                         u5211 19E6                           u5131 18E0                           u5051 17EE  
                         u6011 2A68                           u4500 33E6                           u4420 3700  
                         u5300 1AD2                           u5220 1A00                           u5140 192A  
                         u5060 1810                           u6020 2A7C                           u6100 1280  
                         u4501 33E2                           u4421 36FC                           u5301 1ACE  
                         u5221 19FC                           u5141 1926                           u5061 180C  
                         u6021 2A78                           u6101 127C                           u4510 3400  
                         u4430 4078                           u5310 1AEE                           u5230 1A16  
                         u5150 1960                           u5070 1830                           u6030 2A8A  
                         u6110 12EA                           u4511 33FC                           u4431 4074  
                         u5311 1AEA                           u5231 1A12                           u5151 195C  
                         u5071 182C                           u6031 2A86                           u6111 12E6  
                         u4440 3322                           u4520 341A                           u4600 4128  
                         u5320 3FEE                           u5400 1F58                           u5240 1A2A  
                         u5160 1970                           u5080 183E                           u6040 2AC4  
                         u6120 1384                           u6200 3262                           u4441 331E  
                         u4521 3416                           u4601 4124                           u5321 3FEA  
                         u5401 1F54                           u5241 1A26                           u5161 196C  
                         u5081 183A                           u6041 2AC0                           u6121 1380  
                         u6201 325E                           u5330 4022                           u4450 333C  
                         u4530 3438                           u4610 3AE8                           u5410 1F68  
                         u5250 1A44                           u5170 199C                           u5090 184E  
                         u6050 2AD2                           u6130 13CC                           u6210 3286  
                         u5331 401A                           u4451 3338                           u4531 3434  
                         u4611 3AE4                           u5411 1F64                           u5251 1A40  
                         u5171 1998                           u5091 184A                           u6051 2ACE  
                         u6131 13C8                           u6211 3282                           u4460 3362  
                         u4540 344E                           u4700 2D76                           u4620 3B06  
                         u6300 2554                           u5500 2134                           u5420 1FAC  
                         u5260 1A7E                           u5180 19AC                           u6140 145A  
                         u6060 114C                           u6220 32A2                           u4461 335E  
                         u4541 344A                           u4701 2D72                           u4621 3B02  
                         u6301 2550                           u5501 2130                           u5421 1FA8  
                         u5261 1A7A                           u5181 19A8                           u6141 1456  
                         u6061 1148                           u6221 329E                           u5350 42AA  
                         u4470 3380                           u4550 3472                           u4390 3698  
                         u4710 2D90                           u4630 3B22                           u6310 256A  
                         u5510 214A                           u5430 1FBE                           u5270 1A90  
                         u5190 19C8                           u6150 151C                           u6070 117E  
                         u6230 32C6                           u5351 42A6                           u4471 337C  
                         u4551 346E                           u4391 3694                           u4711 2D8C  
                         u4631 3B1E                           u6311 2566                           u5511 2146  
                         u5431 1FBA                           u5271 1A8C                           u5191 19C4  
                         u6151 1518                           u6071 117A                           u6231 32C2  
                         u4480 339C                           u4560 3740                           u4720 2D9E  
                         u4640 2C80                           u4800 2BAE                           u6400 26D0  
                         u6320 25A0                           u5600 2284                           u5520 2168  
                         u5440 1FCE                           u5280 1AA0                           u6160 15F0  
                         u6080 11E8                           u5360 3A56                           u6240 32E2  
                         u4481 3398                           u4561 373C                           u4721 2D9A  
                         u4641 2C7A                           u4801 2BAA                           u6401 26CC  
                         u6321 259C                           u5601 2280                           u5521 2164  
                         u5441 1FCA                           u5281 1A9C                           u6161 15EC  
                         u6081 11E4                           u5361 3A52                           u6241 32DE  
                         u4490 33C2                           u4570 375E                           u4730 2DAE  
                         u4650 2C82                           u4810 2BE2                           u6250 2794  
                         u5370 3B5A                           u6410 26E6                           u6330 25B6  
                         u5610 22B2                           u5530 2188                           u5450 200E  
                         u5290 1AC0                           u6090 124E                           u6170 3F3C  
                         u4491 33BE                           u4571 375A                           u4731 2DAA  
                         u4811 2BDE                           u6251 2790                           u5371 3B56  
                         u6411 26E2                           u6331 25B2                           u5611 22AE  
                         u5531 2184                           u5451 200A                           u5291 1ABC  
                         u6091 124A                           u6171 3F38                           u5348 4024  
                         u4580 37A4                           u4660 2C9C                           u4740 34B2  
                         u4820 2C02                           u6260 27F0                           u4900 395E  
                         u6420 271C                           u6340 25EC                           u5540 219A  
                         u5460 204E                           u5700 1D60                           u5620 1B1C  
                         u5380 40B0                           u6180 3F5E                           u4581 37A0  
                         u4661 2C98                           u4741 34AE                           u4821 2BFE  
                         u6261 27EC                           u4901 395A                           u6421 2718  
                         u6341 25E8                           u5541 2196                           u5461 204A  
                         u5621 1B18                           u5381 40AC                           u6181 3F5A  
                         u4830 4316                           u4590 37B2                           u4670 2CB2  
                         u4750 3528                           u6270 2850                           u4910 3ACC  
                         u6430 2732                           u6350 2602                           u5550 21C8  
                         u5470 20C4                           u5390 1F46                           u5710 1DBA  
                         u5630 1B2E                           u6190 3246                           u4831 4312  
                         u4591 37AE                           u4671 2CAE                           u4751 3524  
                         u6271 284C                           u4911 3AC8                           u6431 272E  
                         u6351 25FE                           u5551 21C4                           u5471 20C0  
                         u5391 1F42                           u5711 1DB6                           u5631 1B2A  
                         u6191 3242                           u4840 432C                           u4920 43FE  
                         u4680 2D54                           u6280 28B0                           u4760 2DFC  
                         u6360 2638                           u5560 21DE                           u5480 20E6  
                         u5800 1F0E                           u5720 1DDA                           u5640 1B3E  
                         u6440 3548                           u4841 4328                           u4921 43FA  
                         u4681 2D50                           u6281 28AC                           u4761 2DF8  
                         u6361 2634                           u5561 21DA                           u5481 20E2  
                         u5801 1F0A                           u5721 1DD6                           u5705 1D56  
                         u5641 1B3A                           u6441 3544                           u4690 2D66  
                         u6290 2918                           u4770 2EB8                           u4850 386E  
                         u6370 264E                           u5570 21F2                           u5490 2110  
                         u5810 360C                           u5730 1DEC                           u5650 1B7E  
                         u4930 165C                           u6450 35AA                           u4691 2D62  
                         u6291 2914                           u4771 2EB4                           u4851 386A  
                         u6371 264A                           u5571 21EE                           u5491 210C  
                         u5811 3608                           u5731 1DE8                           u5651 1B7A  
                         u4931 1658                           u6451 35A6                           u6507 24A0  
                         u4780 2B0C                           u4860 388C                           u6380 2684  
                         u5580 220C                           u5820 364A                           u5740 1E1A  
                         u5660 1B90                           u4940 166E                           u5900 2F80  
                         u6460 2458                           u4781 2B08                           u4861 3888  
                         u6381 2680                           u5581 2208                           u5821 3646  
                         u5741 1E16                           u5661 1B8C                           u4941 166A  
                         u6517 24C6                           u6461 2454                           u4790 2B8A  
                         u4870 38CA                           u6390 269A                           u5590 2254  
                         u5830 367E                           u5750 1E30                           u5670 1BA0  
                         u4950 167E                           u5910 2FAE                           u6470 24EA  
                         u4791 2B86                           u4871 38C6                           u6607 4164  
                         u6391 2696                           u5591 2250                           u5831 367A  
                         u5751 1E2C                           u5671 1B9C                           u4951 167A  
                         u5911 2FAA                           u6527 3A2C                           u6471 24E6  
                         u4880 38E0                           u5840 306A                           u5760 1E44  
                         u5680 1BD6                           u4960 16C0                           u5920 2FC2  
                         u4881 38DC                           u6617 3D92                           u5841 3066  
                         u5761 1E40                           u5681 1BD2                           u4961 16BC  
                         u5921 2FBE                           u5905 2F76                           u6537 408C  
                         u4890 39DC                           u5850 30A8                           u5770 1E5E  
                         u5690 1BE6                           u4970 16D6                           u5930 2FEA  
                         u4891 39D8                           u6707 3EB2                           u6627 4196  
                         u5851 30A4                           u5771 1E5A                           u5691 1BE2  
                         u4971 16D2                           u5931 2FE6                           u6547 3150  
                         u5860 30C6                           u5780 1EA6                           u4980 16E8  
                         u5940 300A                           u6717 425E                           u6637 3DDA  
                         u5861 30C2                           u5781 1EA2                           u4981 16E4  
                         u5941 3006                           u6557 3180                           u5870 30E6  
                         u5790 1ED4                           u4990 16F8                           u5950 301A  
                         u6807 28C0                           u6727 39B8                           u6647 41C8  
                         u5871 30E2                           u5791 1ED0                           u4991 16F4  
                         u5951 3016                           u6567 31B4                           u5880 3136  
                         u5960 2944                           u6817 2922                           u6737 42C2  
                         u6657 393A                           u5881 3132                           u5961 2940  
                         u6577 31E8                           u6497 2358                           u5890 2F4C  
                         u5970 2952                           u6827 428E                           u6747 38AA  
                         u6667 3E22                           u6587 3D02                           u5891 2F48  
                         u5971 294E                           u5980 29AE                           u6757 3AA2  
                         u6677 41FA                           u6597 3D4A                           u5981 29AA  
                         u5990 2A04                           u6767 40C6                           u6687 3E6A  
                         u5991 2A00                           u6777 27A0                           u6697 422C  
                         u6787 27FC                           u6797 285C                    main@current 0170  
                  main@maximum 0174                           abs@a 0007                           _dbuf 0150  
                         _main 22C6                           _dtoa 2C6C                           _path 0200  
         convert_rgb2hue@cCurr 003E                           _prec 00CC                           pad@i 0015  
                         pad@p 0012                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         _stop 3854            fullSpeedAhead@power 0016                           prodh 0FF4  
                         prodl 0FF3                           start 0000               __end_of_ADC_init 43EC  
              ___fldiv@new_exp 002B         __end_of_color_read_Red 3BFC                   ___param_bank 0000  
               reading_hue@hue 0045                          ??_abs 0009                          ??_pad 0014  
                ___fltol@sign1 003B                __end_of___fladd 1B02                          ?_main 0001  
                        ?_dtoa 0017                          _ADPCH 0F5F                __end_of___fldiv 22C6  
              __end_of___awdiv 33D4                          STR_10 0EAC                          STR_11 0E8B  
                        STR_12 0EA0                __end_of___awmod 3484                __end_of___flmul 1F2C  
              __end_of___flsub 3FB6                __end_of___fltol 303C                          ?_stop 0013  
              ___awdiv@divisor 0003                __end_of___lwdiv 3B42                ___awdiv@counter 0005  
            ??_convert_rgb2hue 003F                   vfpfcnvrt@fmt 0023                          _TMR0H 0FD4  
                        _TMR0L 0FD3                __end_of_left135 4216        __end_of_sendCharSerial4 4404  
   __end_of_I2C_2_Master_Start 4424     __end_of_I2C_2_Master_Write 4410                          _flags 005B  
          read_prec_or_width@c 0009            read_prec_or_width@n 000A                          _fputc 3688  
                        _fputs 403A                          pad@fp 000F                          _width 00CA  
                        _putch 442E                          dtoa@d 0018                          dtoa@i 0020  
                        dtoa@p 001C                __end_of_right90 4180                          dtoa@s 001F  
                        dtoa@w 001D                   ?_reading_hue 0041                __end_of_moveRed 3D7C  
                        tablat 0FF5          moveYellow@path_length 001E                __end_of_turn180 427A  
                        status 0FD8                __end_of_sprintf 411A          convert_rgb2hue@redmax 0064  
      __end_of_color_read_Blue 3CEC          _I2C_2_Master_RepStart 4424                ?_color_read_Red 0005  
              __initialization 3EE4                   __end_of_main 253E                   __end_of_dtoa 2DE2  
                 __end_of_stop 38E2          __end_of_moveLightBlue 3E54                _get16bitTMR0val 4354  
                       ??_main 00AC                         ??_dtoa 001A                         ??_stop 0015  
                __activetblptr 0003     __end_of_read_prec_or_width 3532                _reverseStraight 322A  
                 ?_setMotorPWM 000E                         ?_fputc 0001                         ?_fputs 0009  
                       _ADRESH 0F64                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21               ___awdiv@dividend 0001  
             __end_of_backHalf 42DC                         ?_putch 0001                         _RC0PPS 0E62  
                       _RC4REG 0EE3                         _RE2PPS 0E74                         _RD5PPS 0E6F  
                       _RC7PPS 0E69                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       _RG6PPS 0E88                  vfpfcnvrt@done 002B       __end_of_color_click_init 40E6  
                       _RX4PPS 0E15                         _TX4REG 0EE4               __end_of___xxtofl 2AE6  
  convert_rgb2hue@greencurrent 0068               __end_of_decision 2760                   _CCPTMRS0bits 0FAD  
                 vfprintf@cfmt 0030                         ___flge 303C                         ___fleq 35DE  
                    ??___fladd 0009                         ___wmul 432E                      ??___fldiv 0022  
             backOneAndHalf@mL 0018                      ??___awdiv 0005               backOneAndHalf@mR 0019  
                    ??___awmod 0005                      ??___flmul 0009                      ??___flsub 0019  
                    ??___fltol 0037                      ??___lwdiv 000B                         _left90 4216  
         read_prec_or_width@ap 0008                   ?_reverseTurn 001C                         clear_0 3EFC  
                       clear_1 3F08                         clear_2 3F14               ___awdiv@quotient 0007  
              ___awmod@divisor 0003                         _motorL 00D8                         _motorR 00CF  
                       isa$std 0001                ___awmod@counter 0005                      ??_left135 001A  
           send2USART@hue_char 0060                         pad@buf 0010               __end_of_right135 41E4  
                       dtoa@fp 0017               __end_of_moveBlue 3EE4               __end_of_movePink 3DC4  
                       fputc@c 0001                         fputs@c 000C                         fputs@i 000D  
                       fputs@s 0009                      ??_right90 001A                   __mediumconst 0000  
      calibration_routine@cCal 0044                      ??_moveRed 0020                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8                      ?_ADC_init 0001  
             ?_sendCharSerial4 0001         convert_rgb2hue@bluemax 0074                         putch@c 0001  
             __end_of_vfprintf 3FF8                      ??_turn180 001A                         stop@mL 0013  
                       stop@mR 0014              ??_initDCmotorsPWM 0003                      ??_sprintf 0037  
             __end_of_turnLeft 39DE                     ___flge@ff1 0001                     ___flge@ff2 0005  
                 ___xxtofl@arg 000B                   ___xxtofl@exp 000A                   ___xxtofl@val 0001  
                   ___fleq@ff1 0001                     ___fleq@ff2 0005                fullSpeedBack@mL 0013  
              fullSpeedBack@mR 0014                     __accesstop 0060        __end_of__initialization 3F24  
     __end_of_color_read_Clear 3C9C       __end_of_color_read_Green 3C4C         ?_I2C_2_Master_RepStart 0001  
               _backOneAndHalf 4180                  ___rparam_used 0001                     ___fltol@f1 0033  
             ?_color_read_Blue 0005                 __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 4376  
                _fullSpeedBack 3A58                   __pidataBANK0 4430                  __end_of_fputc 3732  
                __end_of_fputs 407A                  __end_of_putch 4430        __end_of_reverseStraight 3310  
             reading_hue@cCurr 0041            moveBlue@path_length 001E                     ??_ADC_init 0001  
               main@clear_norm 017C                     backHalf@mL 0018                     backHalf@mR 0019  
                      ??_fputc 0004                        ??_fputs 000C                        ??_putch 0001  
                   __pbssBANK0 00AE                     __pbssBANK1 0100                     __pbssBANK2 0200  
       __end_of_backOneAndHalf 41B2              _color_writetoaddr 4376                   _T2CLKCONbits 0FBF  
               ?_fullSpeedBack 0013                _convert_rgb2hue 0EB0                        ?___flge 0001  
                      ?___fleq 0001             ?_color_writetoaddr 0003                  _customDelayMs 407A  
                      ?___wmul 0001                        ?_left90 0018                      ?_backHalf 0018  
          ??_color_writetoaddr 0004                      ?___xxtofl 0001            _convert_rgb2hue$430 0088  
          _convert_rgb2hue$431 008C            _convert_rgb2hue$428 0080            _convert_rgb2hue$429 0084  
                    ?_decision 0046                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
                decision@color 004A                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
                  moveGreen@mL 001C                    moveGreen@mR 001D                ?_backOneAndHalf 0018  
       color_writetoaddr@value 0003               ??_color_read_Red 0007      __end_of_color_writetoaddr 4396  
                    _ADREFbits 0F58                      ?_right135 0018             _I2C_2_Master_Start 441A  
                   _initUSART4 4396             _I2C_2_Master_Write 4404                      ?_moveBlue 001C  
                      __Hparam 0000                      ?_movePink 001C                        __Lparam 0000  
            color_read_Red@tmp 000A      customDelayMs@milliseconds 0001                 ?_customDelayMs 0001  
      sendStringSerial4@string 0002               ?_get16bitTMR0val 0001                        ___fladd 1642  
                      ___fldiv 1F2C                        ___awdiv 3310                        ___awmod 33D4  
                      ___flmul 1B02                        ___flsub 3F70                        ___fltol 2F36  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 3ACE            ?_I2C_2_Master_Write 0001  
                    ?_vfprintf 002D                   __psmallconst 0E00                        __pcinit 3EE4  
                   ??_backHalf 001A              __end_of_logAction 3BAC                        __ramtop 0E00  
             ?_reverseStraight 0018                     _send2USART 43B4                      ?_turnLeft 0013  
                      _left135 41E4                        __ptext0 22C6                        __ptext1 3532  
                      __ptext2 3F2A                        __ptext3 322A                        __ptext4 39DE  
                      __ptext5 407A                        __ptext6 3140                        __ptext7 0EB0  
                      __ptext8 2932                        __ptext9 2F36                      _T2CONbits 0FBD  
        read_prec_or_width@fmt 0007                     ??___xxtofl 0005               ___awmod@dividend 0001  
                   ??_decision 004A         reverseStraight@delayMs 001C                        _right90 414E  
                    _T2HLTbits 0FBE                        _moveRed 3D34                  _RxBufWriteCnt 005F  
                      _turn180 4248                        _sprintf 40E6                        main@hue 0178  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 3F24  
            __end_of_moveGreen 3E9C                        fputc@fp 0003        __end_of_convert_rgb2hue 1642  
                      fputs@fp 000B              ?_color_click_init 0001             _read_prec_or_width 3484  
                   _moveOrange 3DC4                     ??_right135 001A                     _moveYellow 3CEC  
              ??_fullSpeedBack 0015                     ??_moveBlue 0020             ??_color_click_init 0005  
      convert_rgb2hue@clearmax 007C                     ??_movePink 0020               _colorCalibration 00E9  
            __end_of_vfpfcnvrt 2C6C                        postdec1 0FE5                        postdec2 0FDD  
          ?_read_prec_or_width 0007                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0027                     ??_vfprintf 0030  
      convert_rgb2hue@greenmax 006C                   _colorCurrent 00E1                     _returnHome 3532  
              _initDCmotorsPWM 37C4                     ??_turnLeft 0015                      _PORTFbits 0F8E  
           setMotorPWM@negDuty 0012              __end_of_turnRight 3960                    ___fladd@grs 0010  
     reverseTurn@turnDirection 001E                  ___xxtofl@sign 0009                    returnHome@i 002A  
                    _TRISAbits 0F81             setMotorPWM@posDuty 0011                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88                  logAction@time 0007  
             convert_rgb2hue@b 00A8           ??_read_prec_or_width 0009               convert_rgb2hue@g 00A4  
                  ___fldiv@grs 002D               convert_rgb2hue@r 00A0                    ___fldiv@rem 0026  
             fullSpeedAhead@mL 0013               fullSpeedAhead@mR 0014       color_writetoaddr@address 0004  
      ??_I2C_2_Master_RepStart 0002                    ___flmul@grs 000F                    _CCP1CONbits 0FAB  
          _calibration_routine 2760              ?_color_read_Clear 0005                   _EUSART4RXbuf 00AE  
                 _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7              ?_color_read_Green 0005  
   convert_rgb2hue@bluecurrent 0070            movePink@path_length 001E                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001  
              ??_customDelayMs 0003             ??_color_read_Clear 0007             ??_color_read_Green 0007  
    convert_rgb2hue@redcurrent 0060                 __end_of___flge 3140                 __end_of___fleq 3688  
               _fullSpeedAhead 39DE                    vfpfcnvrt@ap 0024                    vfpfcnvrt@cp 002C  
                  vfpfcnvrt@fp 0022                 __end_of___wmul 4354                 __end_of_left90 4248  
                  ?_send2USART 0044           ?_calibration_routine 0044            reverseStraight@time 001A  
          color_read_Clear@tmp 000A            start_initialization 3EE4           moveGreen@path_length 001E  
 calibration_routine@cal_state 0047                    __end_of_abs 414E                    __end_of_pad 37C4  
                _TxBufWriteCnt 005D               ?_convert_rgb2hue 003D                    ?_moveOrange 001C  
                  ?_moveYellow 001C            color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 3854  
                  vfprintf@fmt 002E         __end_of_fullSpeedAhead 3A58                       ??___flge 0009  
                     ??___fleq 0009                       ??___wmul 0005                       ??_left90 001A  
                  __pdataBANK0 00F1                    ?_returnHome 001F          ??_calibration_routine 0045  
                _moveLightBlue 3E0C                      ___fladd@a 0005                      ___fladd@b 0001  
                    ___fldiv@a 001E                      ___fldiv@b 001A                      ___flmul@a 0005  
                    ___flmul@b 0001                    __pbssCOMRAM 005B                      ___flsub@a 0015  
                    ___flsub@b 0011                  __pcstackBANK0 0060                  __pcstackBANK1 0170  
             ??_backOneAndHalf 001A              reverseStraight@mL 0018              reverseStraight@mR 0019  
                ??_reading_hue 0043            decision@path_length 0048                     right135@mL 0018  
                   right135@mR 0019               ___lwdiv@dividend 0007                      _dtoa$2968 001A  
              ?_fullSpeedAhead 0013                       ?___fladd 0001                       ?___fldiv 001A  
                     ?___awdiv 0001                       ?___awmod 0001                       ?___flmul 0001  
                     ?___flsub 0011                       ?___fltol 0033                       ?___lwdiv 0007  
                   moveBlue@mL 001C                     moveBlue@mR 001D                 ?_moveLightBlue 001C  
                     ?_left135 0018                   _readingIndex 00CE           I2C_2_Master_Read@ack 0003  
         I2C_2_Master_Read@tmp 0004                    __smallconst 0E00                     movePink@mL 001C  
                   movePink@mR 001D              _I2C_2_Master_Idle 4306                      _logAction 3B42  
            _I2C_2_Master_Init 42DC              _I2C_2_Master_Read 3FF8                       ?_right90 0018  
            _I2C_2_Master_Stop 4410                       ?_moveRed 001C                   _RxBufReadCnt 005E  
                     _ADC_init 43D2             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 000F                       ?_turn180 0018  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0001  
                     ?_sprintf 0031              _sendStringSerial4 427A            ??_I2C_2_Master_Idle 0001  
          ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002                 ___wmul@product 0005  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0002                       _LATCbits 0F7B  
                     _LATDbits 0F7C                       _LATEbits 0F7D                       _LATFbits 0F7E  
                     _LATGbits 0F7F                       _LATHbits 0F80                       _IPR0bits 0E1F  
                     _PIE0bits 0E29             ?_sendStringSerial4 0002                      _moveGreen 3E54  
                     _PIE4bits 0E2D            __end_of_reading_hue 322A                    turnRight@mL 0013  
                  turnRight@mR 0014                       _PIR0bits 0E33                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0001                      left135@mL 0018                      left135@mR 0019  
            ??_sendCharSerial4 0001                       _SSP2CON2 0EDA            ??_sendStringSerial4 0003  
                     _SSP2STAT 0ED8                  ??_reverseTurn 001F                      _vfpfcnvrt 2AE6  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 432E      __end_of_I2C_2_Master_Init 4306  
    __end_of_I2C_2_Master_Read 403A              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 441A  
                 setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002                    _ldrReadings 013C  
                   ?_logAction 0007              ??_color_read_Blue 0007                   _TxBufReadCnt 005C  
                    _turnRight 38E2      __end_of_sendStringSerial4 42AC                   moveOrange@mL 001C  
                 moveOrange@mR 001D  __end_of_I2C_2_Master_RepStart 442E             color_read_Blue@tmp 000A  
          __end_of_setMotorPWM 2F36                main@path_length 017E                   ??_initUSART4 0001  
                   ?_moveGreen 001C                       __Hrparam 0000                     vfprintf@ap 002F  
                     __Lrparam 0000                     vfprintf@fp 002D          __end_of_fullSpeedBack 3ACE  
              ??_moveLightBlue 0020                   moveYellow@mL 001C                   moveYellow@mR 001D  
                   ?_vfpfcnvrt 0022          moveOrange@path_length 001E                       _backHalf 42AC  
                 ??_send2USART 0046                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                     _dataFlag 00F1                     sprintf@fmt 0032                       ___xxtofl 2932  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6                       _decision 253E  
          __end_of_reverseTurn 3F70                      right90@mL 0018                      right90@mR 0019  
              ___lwdiv@divisor 0009             __end_of_initUSART4 43B4                ___lwdiv@counter 000B  
                   ?_turnRight 0013                       __ptext10 3F70                       __ptext11 1642  
                     __ptext20 43B4                       __ptext12 1B02                       __ptext21 3CEC  
                     __ptext13 303C                       __ptext30 41E4                       __ptext22 3D34  
                     __ptext14 35DE                       __ptext31 3E54                       __ptext23 414E  
                     __ptext15 1F2C                       __ptext40 2DE2                       __ptext32 4216  
                     __ptext24 3D7C                       __ptext16 4396                       __ptext41 3ACE  
                     __ptext33 3E9C                       __ptext25 4180                       __ptext17 37C4  
                     __ptext50 432E                       __ptext42 40B2                       __ptext34 4248  
                     __ptext26 3DC4                       __ptext18 4354                       __ptext51 2C6C  
                     __ptext43 4376                       __ptext35 3960                       __ptext27 41B2  
                     __ptext19 253E                       __ptext60 43EC                       __ptext52 3732  
                     __ptext44 42DC                       __ptext36 3B42                       __ptext28 38E2  
                     __ptext61 3BAC                       __ptext53 403A                       __ptext45 2760  
                     __ptext37 42AC                       __ptext29 3E0C                       __ptext70 4306  
                     __ptext62 3BFC                       __ptext54 3688                       __ptext46 40E6  
                     __ptext38 3854                       __ptext71 43D2                       __ptext63 3C4C  
                     __ptext55 442E                       __ptext47 3FB6                       __ptext39 3A58  
                     __ptext64 3C9C                       __ptext56 411A                       __ptext48 2AE6  
                     __ptext65 4404                       __ptext57 33D4                       __ptext49 3484  
                     __ptext66 4410                       __ptext58 3310                       __ptext67 441A  
                     __ptext59 427A                       __ptext68 4424                       __ptext69 3FF8  
                  decision@hue 0046                      moveRed@mL 001C                      moveRed@mR 001D  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA                    _reading_hue 3140  
                reverseTurn@mL 001C                  reverseTurn@mR 001D                   ??_moveOrange 0020  
                   turnLeft@mL 0013                     turnLeft@mR 0014                   ??_moveYellow 0020  
           __end_of_send2USART 43D2                       _right135 41B2                       _moveBlue 3E9C  
                     _movePink 3D7C                     turnRight@i 0016             moveRed@path_length 001E  
        __end_of_customDelayMs 40B2                       isa$xinst 0000                       left90@mL 0018  
                     left90@mR 0019                     _RC4STAbits 0EE7                       _vfprintf 3FB6  
                 ??_returnHome 0025                       main@time 017A                       _turnLeft 3960  
                    turn180@mL 0018                      turn180@mR 0019                    ??_logAction 000B  
                   _INTCONbits 0FF2                 customDelayMs@i 0004             __end_of_moveOrange 3E0C  
           __end_of_moveYellow 3D34                    _setMotorPWM 2DE2              ??_get16bitTMR0val 0003  
                    sprintf@ap 0037           returnHome@pathLength 0023              ??_reverseStraight 001C  
             ??_fullSpeedAhead 0015       moveLightBlue@path_length 001E  get16bitTMR0val@combined_value 0007  
           __end_of_returnHome 35DE                    ??_moveGreen 0020               returnHome@action 0029  
                    turnLeft@i 0016    __end_of_calibration_routine 2932    convert_rgb2hue@clearcurrent 0078  
                send2USART@hue 0044                    ??_vfpfcnvrt 0025                    _reverseTurn 3F2A  
             _color_click_init 40B2                       sprintf@f 0038                       sprintf@s 0031  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                    ??_turnRight 0015  
                ___fladd@signs 000D                     _TX4STAbits 0EE8                _sendCharSerial4 43EC  
               returnHome@path 0021                 returnHome@time 0027                   ___fladd@aexp 000E  
                 ___fladd@bexp 000F                   returnHome@mL 001F                   returnHome@mR 0020  
              logAction@action 000B  
