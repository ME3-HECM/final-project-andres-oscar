

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Mar 11 12:12:16 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    54   000000                     
    55                           ; Generated 21/07/2023 GMT
    56                           ; 
    57                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution. Publication is not required when
    71                           ;        this file is used in an embedded application.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F67K40 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89   000000                     
    90                           	psect	idataBANK0
    91   001D82                     __pidataBANK0:
    92                           	callstack 0
    93                           
    94                           ;initializer for _dataFlag
    95   001D82  01                 	db	1
    96   000000                     _TX4REG	set	3812
    97   000000                     _RC4STAbits	set	3815
    98   000000                     _SP4BRGH	set	3814
    99   000000                     _TRISFbits	set	3974
   100   000000                     _TRISEbits	set	3973
   101   000000                     _TRISGbits	set	3975
   102   000000                     _CCPR2H	set	4006
   103   000000                     _CCPR1H	set	4010
   104   000000                     _SSP2CON2bits	set	3802
   105   000000                     _RX4PPS	set	3605
   106   000000                     _SSP2CLKPPS	set	3612
   107   000000                     _SSP2DATPPS	set	3613
   108   000000                     _ANSELDbits	set	3751
   109   000000                     _SSP2ADD	set	3798
   110   000000                     _SSP2CON1bits	set	3801
   111   000000                     _LATAbits	set	3961
   112   000000                     _LATEbits	set	3965
   113   000000                     _LATGbits	set	3967
   114   000000                     _TRISAbits	set	3969
   115   000000                     _TRISDbits	set	3972
   116   000000                     _LATCbits	set	3963
   117   000000                     _LATDbits	set	3964
   118   000000                     _RC4REG	set	3811
   119   000000                     _SP4BRGL	set	3813
   120   000000                     _TX4STAbits	set	3816
   121   000000                     _BAUD4CONbits	set	3817
   122   000000                     _SSP2CON2	set	3802
   123   000000                     _CCPR4H	set	3873
   124   000000                     _CCPR3H	set	3877
   125   000000                     _SSP2STAT	set	3800
   126   000000                     _ANSELFbits	set	3764
   127   000000                     _SSP2BUF	set	3797
   128   000000                     _PIE4bits	set	3629
   129   000000                     _PIR4bits	set	3639
   130   000000                     _RC0PPS	set	3682
   131   000000                     _RC7PPS	set	3689
   132   000000                     _RD5PPS	set	3695
   133   000000                     _RE2PPS	set	3700
   134   000000                     _RD6PPS	set	3696
   135   000000                     _CCP1CONbits	set	4011
   136   000000                     _CCPTMRS0bits	set	4013
   137   000000                     _T2PR	set	4028
   138   000000                     _T2CONbits	set	4029
   139   000000                     _CCP2CONbits	set	4007
   140   000000                     _CCP3CONbits	set	3878
   141   000000                     _ADREFbits	set	3928
   142   000000                     _CCP4CONbits	set	3874
   143   000000                     _TRISCbits	set	3971
   144   000000                     _ADPCH	set	3935
   145   000000                     _ADRESH	set	3940
   146   000000                     _ADCON0bits	set	3936
   147   000000                     _RE4PPS	set	3702
   148   000000                     _RG6PPS	set	3720
   149   000000                     _T2CLKCONbits	set	4031
   150   000000                     _T2HLTbits	set	4030
   151                           
   152                           	psect	smallconst
   153   000E00                     __psmallconst:
   154                           	callstack 0
   155   000E00  00                 	db	0
   156   000E01                     STR_5:
   157                           
   158                           ; BSR set to: 15
   159   000E01  56                 	db	86	;'V'
   160   000E02  6F                 	db	111	;'o'
   161   000E03  6C                 	db	108	;'l'
   162   000E04  74                 	db	116	;'t'
   163   000E05  61                 	db	97	;'a'
   164   000E06  67                 	db	103	;'g'
   165   000E07  65                 	db	101	;'e'
   166   000E08  20                 	db	32
   167   000E09  3D                 	db	61	;'='
   168   000E0A  20                 	db	32
   169   000E0B  25                 	db	37
   170   000E0C  64                 	db	100	;'d'
   171   000E0D  2E                 	db	46
   172   000E0E  25                 	db	37
   173   000E0F  30                 	db	48	;'0'
   174   000E10  32                 	db	50	;'2'
   175   000E11  64                 	db	100	;'d'
   176   000E12  2C                 	db	44
   177   000E13  20                 	db	32
   178   000E14  20                 	db	32
   179   000E15  00                 	db	0
   180   000E16                     STR_2:
   181                           
   182                           ; BSR set to: 15
   183   000E16  47                 	db	71	;'G'
   184   000E17  72                 	db	114	;'r'
   185   000E18  65                 	db	101	;'e'
   186   000E19  65                 	db	101	;'e'
   187   000E1A  6E                 	db	110	;'n'
   188   000E1B  5F                 	db	95	;'_'
   189   000E1C  6C                 	db	108	;'l'
   190   000E1D  69                 	db	105	;'i'
   191   000E1E  67                 	db	103	;'g'
   192   000E1F  68                 	db	104	;'h'
   193   000E20  74                 	db	116	;'t'
   194   000E21  3D                 	db	61	;'='
   195   000E22  25                 	db	37
   196   000E23  64                 	db	100	;'d'
   197   000E24  2C                 	db	44
   198   000E25  20                 	db	32
   199   000E26  0A                 	db	10
   200   000E27  0D                 	db	13
   201   000E28  00                 	db	0
   202   000E29                     STR_9:
   203                           
   204                           ; BSR set to: 15
   205   000E29  43                 	db	67	;'C'
   206   000E2A  6C                 	db	108	;'l'
   207   000E2B  65                 	db	101	;'e'
   208   000E2C  61                 	db	97	;'a'
   209   000E2D  72                 	db	114	;'r'
   210   000E2E  3D                 	db	61	;'='
   211   000E2F  25                 	db	37
   212   000E30  30                 	db	48	;'0'
   213   000E31  35                 	db	53	;'5'
   214   000E32  64                 	db	100	;'d'
   215   000E33  2C                 	db	44
   216   000E34  20                 	db	32
   217   000E35  20                 	db	32
   218   000E36  0A                 	db	10
   219   000E37  0A                 	db	10
   220   000E38  0D                 	db	13
   221   000E39  00                 	db	0
   222   000E3A                     STR_1:
   223                           
   224                           ; BSR set to: 15
   225   000E3A  52                 	db	82	;'R'
   226   000E3B  65                 	db	101	;'e'
   227   000E3C  64                 	db	100	;'d'
   228   000E3D  5F                 	db	95	;'_'
   229   000E3E  6C                 	db	108	;'l'
   230   000E3F  69                 	db	105	;'i'
   231   000E40  67                 	db	103	;'g'
   232   000E41  68                 	db	104	;'h'
   233   000E42  74                 	db	116	;'t'
   234   000E43  3D                 	db	61	;'='
   235   000E44  25                 	db	37
   236   000E45  64                 	db	100	;'d'
   237   000E46  2C                 	db	44
   238   000E47  20                 	db	32
   239   000E48  0A                 	db	10
   240   000E49  0D                 	db	13
   241   000E4A  00                 	db	0
   242   000E4B                     STR_4:
   243                           
   244                           ; BSR set to: 15
   245   000E4B  41                 	db	65	;'A'
   246   000E4C  6C                 	db	108	;'l'
   247   000E4D  6C                 	db	108	;'l'
   248   000E4E  5F                 	db	95	;'_'
   249   000E4F  6C                 	db	108	;'l'
   250   000E50  69                 	db	105	;'i'
   251   000E51  67                 	db	103	;'g'
   252   000E52  68                 	db	104	;'h'
   253   000E53  74                 	db	116	;'t'
   254   000E54  73                 	db	115	;'s'
   255   000E55  3D                 	db	61	;'='
   256   000E56  25                 	db	37
   257   000E57  64                 	db	100	;'d'
   258   000E58  20                 	db	32
   259   000E59  0A                 	db	10
   260   000E5A  0D                 	db	13
   261   000E5B  00                 	db	0
   262   000E5C                     STR_3:
   263                           
   264                           ; BSR set to: 15
   265   000E5C  42                 	db	66	;'B'
   266   000E5D  6C                 	db	108	;'l'
   267   000E5E  75                 	db	117	;'u'
   268   000E5F  65                 	db	101	;'e'
   269   000E60  5F                 	db	95	;'_'
   270   000E61  6C                 	db	108	;'l'
   271   000E62  69                 	db	105	;'i'
   272   000E63  67                 	db	103	;'g'
   273   000E64  68                 	db	104	;'h'
   274   000E65  74                 	db	116	;'t'
   275   000E66  3D                 	db	61	;'='
   276   000E67  25                 	db	37
   277   000E68  64                 	db	100	;'d'
   278   000E69  20                 	db	32
   279   000E6A  0A                 	db	10
   280   000E6B  0D                 	db	13
   281   000E6C  00                 	db	0
   282   000E6D                     STR_8:
   283                           
   284                           ; BSR set to: 15
   285   000E6D  47                 	db	71	;'G'
   286   000E6E  72                 	db	114	;'r'
   287   000E6F  65                 	db	101	;'e'
   288   000E70  65                 	db	101	;'e'
   289   000E71  6E                 	db	110	;'n'
   290   000E72  3D                 	db	61	;'='
   291   000E73  25                 	db	37
   292   000E74  30                 	db	48	;'0'
   293   000E75  35                 	db	53	;'5'
   294   000E76  64                 	db	100	;'d'
   295   000E77  2C                 	db	44
   296   000E78  20                 	db	32
   297   000E79  20                 	db	32
   298   000E7A  00                 	db	0
   299   000E7B                     STR_7:
   300                           
   301                           ; BSR set to: 15
   302   000E7B  42                 	db	66	;'B'
   303   000E7C  6C                 	db	108	;'l'
   304   000E7D  75                 	db	117	;'u'
   305   000E7E  65                 	db	101	;'e'
   306   000E7F  3D                 	db	61	;'='
   307   000E80  25                 	db	37
   308   000E81  30                 	db	48	;'0'
   309   000E82  35                 	db	53	;'5'
   310   000E83  64                 	db	100	;'d'
   311   000E84  2C                 	db	44
   312   000E85  20                 	db	32
   313   000E86  20                 	db	32
   314   000E87  00                 	db	0
   315   000E88                     STR_6:
   316                           
   317                           ; BSR set to: 15
   318   000E88  52                 	db	82	;'R'
   319   000E89  65                 	db	101	;'e'
   320   000E8A  64                 	db	100	;'d'
   321   000E8B  3D                 	db	61	;'='
   322   000E8C  25                 	db	37
   323   000E8D  30                 	db	48	;'0'
   324   000E8E  35                 	db	53	;'5'
   325   000E8F  64                 	db	100	;'d'
   326   000E90  2C                 	db	44
   327   000E91  20                 	db	32
   328   000E92  20                 	db	32
   329   000E93  00                 	db	0
   330   000E94  00                 	db	0	; dummy byte at the end
   331   000000                     
   332                           ; #config settings
   333                           
   334                           	psect	cinit
   335   001B96                     __pcinit:
   336                           	callstack 0
   337   001B96                     start_initialization:
   338                           	callstack 0
   339   001B96                     __initialization:
   340                           	callstack 0
   341                           
   342                           ; Initialize objects allocated to BANK0 (1 bytes)
   343                           ; load TBLPTR registers with __pidataBANK0
   344   001B96  0E82               	movlw	low __pidataBANK0
   345   001B98  6EF6               	movwf	tblptrl,c
   346   001B9A  0E1D               	movlw	high __pidataBANK0
   347   001B9C  6EF7               	movwf	tblptrh,c
   348   001B9E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   349   001BA0  6EF8               	movwf	tblptru,c
   350   001BA2  0009               	tblrd		*+	;fetch initializer
   351   001BA4  CFF5 F0FC          	movff	tablat,__pdataBANK0
   352                           
   353                           ; Clear objects allocated to BANK2 (60 bytes)
   354   001BA8  EE02  F000         	lfsr	0,__pbssBANK2
   355   001BAC  0E3C               	movlw	60
   356   001BAE                     clear_0:
   357   001BAE  6AEE               	clrf	postinc0,c
   358   001BB0  06E8               	decf	wreg,f,c
   359   001BB2  E1FD               	bnz	clear_0
   360                           
   361                           ; Clear objects allocated to BANK0 (96 bytes)
   362   001BB4  EE00  F060         	lfsr	0,__pbssBANK0
   363   001BB8  0E60               	movlw	96
   364   001BBA                     clear_1:
   365   001BBA  6AEE               	clrf	postinc0,c
   366   001BBC  06E8               	decf	wreg,f,c
   367   001BBE  E1FD               	bnz	clear_1
   368                           
   369                           ; Clear objects allocated to COMRAM (4 bytes)
   370   001BC0  6A5F               	clrf	(__pbssCOMRAM+3)& (0+255),c
   371   001BC2  6A5E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   372   001BC4  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   373   001BC6  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   374   001BC8                     end_of_initialization:
   375                           	callstack 0
   376   001BC8                     __end_of__initialization:
   377                           	callstack 0
   378   001BC8  0100               	movlb	0
   379   001BCA  EF30  F00C         	goto	_main	;jump to C main() function
   380                           
   381                           	psect	bssCOMRAM
   382   00005C                     __pbssCOMRAM:
   383                           	callstack 0
   384   00005C                     _TxBufReadCnt:
   385                           	callstack 0
   386   00005C                     	ds	1
   387   00005D                     _TxBufWriteCnt:
   388                           	callstack 0
   389   00005D                     	ds	1
   390   00005E                     _RxBufReadCnt:
   391                           	callstack 0
   392   00005E                     	ds	1
   393   00005F                     _RxBufWriteCnt:
   394                           	callstack 0
   395   00005F                     	ds	1
   396                           
   397                           	psect	bssBANK0
   398   000060                     __pbssBANK0:
   399                           	callstack 0
   400   000060                     _ldrReadings:
   401                           	callstack 0
   402   000060                     	ds	20
   403   000074                     _EUSART4RXbuf:
   404                           	callstack 0
   405   000074                     	ds	20
   406   000088                     _width:
   407                           	callstack 0
   408   000088                     	ds	2
   409   00008A                     _prec:
   410                           	callstack 0
   411   00008A                     	ds	2
   412   00008C                     _flags:
   413                           	callstack 0
   414   00008C                     	ds	1
   415   00008D                     _readingIndex:
   416                           	callstack 0
   417   00008D                     	ds	1
   418   00008E                     _dbuf:
   419                           	callstack 0
   420   00008E                     	ds	32
   421   0000AE                     _motorR:
   422                           	callstack 0
   423   0000AE                     	ds	9
   424   0000B7                     _motorL:
   425                           	callstack 0
   426   0000B7                     	ds	9
   427                           
   428                           	psect	dataBANK0
   429   0000FC                     __pdataBANK0:
   430                           	callstack 0
   431   0000FC                     _dataFlag:
   432                           	callstack 0
   433   0000FC                     	ds	1
   434                           
   435                           	psect	bssBANK2
   436   000200                     __pbssBANK2:
   437                           	callstack 0
   438   000200                     _EUSART4TXbuf:
   439                           	callstack 0
   440   000200                     	ds	60
   441                           
   442                           	psect	cstackBANK1
   443   000100                     __pcstackBANK1:
   444                           	callstack 0
   445   000100                     send2USART@buf:
   446                           	callstack 0
   447                           
   448                           ; 50 bytes @ 0x0
   449   000100                     	ds	50
   450   000132                     send2USART@red_char:
   451                           	callstack 0
   452                           
   453                           ; 50 bytes @ 0x32
   454   000132                     	ds	50
   455   000164                     send2USART@blue_char:
   456                           	callstack 0
   457                           
   458                           ; 50 bytes @ 0x64
   459   000164                     	ds	50
   460   000196                     send2USART@green_char:
   461                           	callstack 0
   462                           
   463                           ; 50 bytes @ 0x96
   464   000196                     	ds	50
   465   0001C8                     send2USART@clear_char:
   466                           	callstack 0
   467                           
   468                           ; 50 bytes @ 0xC8
   469   0001C8                     	ds	50
   470                           
   471                           	psect	cstackBANK0
   472   0000C0                     __pcstackBANK0:
   473                           	callstack 0
   474   0000C0                     test@led_state:
   475                           	callstack 0
   476                           
   477                           ; 50 bytes @ 0x0
   478   0000C0                     	ds	50
   479   0000F2                     test@red:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0x32
   483   0000F2                     	ds	2
   484   0000F4                     test@blue:
   485                           	callstack 0
   486                           
   487                           ; 2 bytes @ 0x34
   488   0000F4                     	ds	2
   489   0000F6                     test@green:
   490                           	callstack 0
   491                           
   492                           ; 2 bytes @ 0x36
   493   0000F6                     	ds	2
   494   0000F8                     test@clear:
   495                           	callstack 0
   496                           
   497                           ; 2 bytes @ 0x38
   498   0000F8                     	ds	2
   499   0000FA                     test@combo:
   500                           	callstack 0
   501                           
   502                           ; 2 bytes @ 0x3A
   503   0000FA                     	ds	2
   504                           
   505                           	psect	cstackCOMRAM
   506   000001                     __pcstackCOMRAM:
   507                           	callstack 0
   508   000001                     ??_I2C_2_Master_Idle:
   509   000001                     ?___wmul:
   510                           	callstack 0
   511   000001                     ?___awdiv:
   512                           	callstack 0
   513   000001                     ?___awmod:
   514                           	callstack 0
   515   000001                     sendCharSerial4@charToSend:
   516                           	callstack 0
   517   000001                     initDCmotorsPWM@PWMperiod:
   518                           	callstack 0
   519   000001                     ___wmul@multiplier:
   520                           	callstack 0
   521   000001                     ___awdiv@dividend:
   522                           	callstack 0
   523   000001                     ___awmod@dividend:
   524                           	callstack 0
   525   000001                     fputc@c:
   526                           	callstack 0
   527                           
   528                           ; 2 bytes @ 0x0
   529   000001                     	ds	1
   530   000002                     ??_I2C_2_Master_Read:
   531   000002                     I2C_2_Master_Write@data_byte:
   532                           	callstack 0
   533   000002                     sendStringSerial4@string:
   534                           	callstack 0
   535                           
   536                           ; 2 bytes @ 0x1
   537   000002                     	ds	1
   538   000003                     color_writetoaddr@value:
   539                           	callstack 0
   540   000003                     I2C_2_Master_Read@ack:
   541                           	callstack 0
   542   000003                     fputc@fp:
   543                           	callstack 0
   544   000003                     ___wmul@multiplicand:
   545                           	callstack 0
   546   000003                     ___awdiv@divisor:
   547                           	callstack 0
   548   000003                     ___awmod@divisor:
   549                           	callstack 0
   550                           
   551                           ; 2 bytes @ 0x2
   552   000003                     	ds	1
   553   000004                     ??_fputc:
   554   000004                     color_writetoaddr@address:
   555                           	callstack 0
   556   000004                     I2C_2_Master_Read@tmp:
   557                           	callstack 0
   558                           
   559                           ; 1 bytes @ 0x3
   560   000004                     	ds	1
   561   000005                     ??_color_click_init:
   562   000005                     ?_color_read_Red:
   563                           	callstack 0
   564   000005                     ?_color_read_Green:
   565                           	callstack 0
   566   000005                     ?_color_read_Blue:
   567                           	callstack 0
   568   000005                     ?_color_read_Clear:
   569                           	callstack 0
   570   000005                     ___awdiv@counter:
   571                           	callstack 0
   572   000005                     ___awmod@counter:
   573                           	callstack 0
   574   000005                     ___wmul@product:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0x4
   578   000005                     	ds	1
   579   000006                     ___awdiv@sign:
   580                           	callstack 0
   581   000006                     ___awmod@sign:
   582                           	callstack 0
   583                           
   584                           ; 1 bytes @ 0x5
   585   000006                     	ds	1
   586   000007                     ??_color_read_Red:
   587   000007                     ??_color_read_Green:
   588   000007                     ??_color_read_Blue:
   589   000007                     ??_color_read_Clear:
   590   000007                     ?_abs:
   591                           	callstack 0
   592   000007                     ?___lwdiv:
   593                           	callstack 0
   594   000007                     ?_read_prec_or_width:
   595                           	callstack 0
   596   000007                     read_prec_or_width@fmt:
   597                           	callstack 0
   598   000007                     ___awdiv@quotient:
   599                           	callstack 0
   600   000007                     ___lwdiv@dividend:
   601                           	callstack 0
   602   000007                     abs@a:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0x6
   606   000007                     	ds	1
   607   000008                     read_prec_or_width@ap:
   608                           	callstack 0
   609                           
   610                           ; 1 bytes @ 0x7
   611   000008                     	ds	1
   612   000009                     ??_abs:
   613   000009                     read_prec_or_width@c:
   614                           	callstack 0
   615   000009                     fputs@s:
   616                           	callstack 0
   617   000009                     ___lwdiv@divisor:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0x8
   621   000009                     	ds	1
   622   00000A                     fputs@fp:
   623                           	callstack 0
   624   00000A                     color_read_Red@tmp:
   625                           	callstack 0
   626   00000A                     color_read_Green@tmp:
   627                           	callstack 0
   628   00000A                     color_read_Blue@tmp:
   629                           	callstack 0
   630   00000A                     color_read_Clear@tmp:
   631                           	callstack 0
   632   00000A                     read_prec_or_width@n:
   633                           	callstack 0
   634                           
   635                           ; 2 bytes @ 0x9
   636   00000A                     	ds	1
   637   00000B                     fputs@c:
   638                           	callstack 0
   639   00000B                     ___lwdiv@quotient:
   640                           	callstack 0
   641                           
   642                           ; 2 bytes @ 0xA
   643   00000B                     	ds	1
   644   00000C                     fputs@i:
   645                           	callstack 0
   646                           
   647                           ; 2 bytes @ 0xB
   648   00000C                     	ds	1
   649   00000D                     ___lwdiv@counter:
   650                           	callstack 0
   651                           
   652                           ; 1 bytes @ 0xC
   653   00000D                     	ds	1
   654   00000E                     pad@fp:
   655                           	callstack 0
   656                           
   657                           ; 1 bytes @ 0xD
   658   00000E                     	ds	1
   659   00000F                     pad@buf:
   660                           	callstack 0
   661                           
   662                           ; 1 bytes @ 0xE
   663   00000F                     	ds	1
   664   000010                     pad@p:
   665                           	callstack 0
   666                           
   667                           ; 2 bytes @ 0xF
   668   000010                     	ds	2
   669   000012                     ??_pad:
   670                           
   671                           ; 1 bytes @ 0x11
   672   000012                     	ds	1
   673   000013                     pad@i:
   674                           	callstack 0
   675                           
   676                           ; 2 bytes @ 0x12
   677   000013                     	ds	2
   678   000015                     dtoa@fp:
   679                           	callstack 0
   680                           
   681                           ; 1 bytes @ 0x14
   682   000015                     	ds	1
   683   000016                     dtoa@d:
   684                           	callstack 0
   685                           
   686                           ; 2 bytes @ 0x15
   687   000016                     	ds	2
   688   000018                     _dtoa$2283:
   689                           	callstack 0
   690                           
   691                           ; 2 bytes @ 0x17
   692   000018                     	ds	2
   693   00001A                     dtoa@p:
   694                           	callstack 0
   695                           
   696                           ; 1 bytes @ 0x19
   697   00001A                     	ds	1
   698   00001B                     dtoa@w:
   699                           	callstack 0
   700                           
   701                           ; 2 bytes @ 0x1A
   702   00001B                     	ds	2
   703   00001D                     dtoa@s:
   704                           	callstack 0
   705                           
   706                           ; 1 bytes @ 0x1C
   707   00001D                     	ds	1
   708   00001E                     dtoa@i:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x1D
   712   00001E                     	ds	2
   713   000020                     vfpfcnvrt@fp:
   714                           	callstack 0
   715                           
   716                           ; 1 bytes @ 0x1F
   717   000020                     	ds	1
   718   000021                     vfpfcnvrt@fmt:
   719                           	callstack 0
   720                           
   721                           ; 1 bytes @ 0x20
   722   000021                     	ds	1
   723   000022                     vfpfcnvrt@ap:
   724                           	callstack 0
   725                           
   726                           ; 1 bytes @ 0x21
   727   000022                     	ds	1
   728   000023                     ??_vfpfcnvrt:
   729                           
   730                           ; 1 bytes @ 0x22
   731   000023                     	ds	2
   732   000025                     vfpfcnvrt@convarg:
   733                           	callstack 0
   734                           
   735                           ; 4 bytes @ 0x24
   736   000025                     	ds	4
   737   000029                     vfpfcnvrt@done:
   738                           	callstack 0
   739                           
   740                           ; 1 bytes @ 0x28
   741   000029                     	ds	1
   742   00002A                     vfpfcnvrt@cp:
   743                           	callstack 0
   744                           
   745                           ; 1 bytes @ 0x29
   746   00002A                     	ds	1
   747   00002B                     ?_vfprintf:
   748                           	callstack 0
   749   00002B                     vfprintf@fp:
   750                           	callstack 0
   751                           
   752                           ; 1 bytes @ 0x2A
   753   00002B                     	ds	1
   754   00002C                     vfprintf@fmt:
   755                           	callstack 0
   756                           
   757                           ; 1 bytes @ 0x2B
   758   00002C                     	ds	1
   759   00002D                     vfprintf@ap:
   760                           	callstack 0
   761                           
   762                           ; 1 bytes @ 0x2C
   763   00002D                     	ds	1
   764   00002E                     vfprintf@cfmt:
   765                           	callstack 0
   766                           
   767                           ; 1 bytes @ 0x2D
   768   00002E                     	ds	1
   769   00002F                     ?_sprintf:
   770                           	callstack 0
   771   00002F                     sprintf@s:
   772                           	callstack 0
   773                           
   774                           ; 2 bytes @ 0x2E
   775   00002F                     	ds	2
   776   000031                     sprintf@fmt:
   777                           	callstack 0
   778                           
   779                           ; 1 bytes @ 0x30
   780   000031                     	ds	5
   781   000036                     sprintf@ap:
   782                           	callstack 0
   783                           
   784                           ; 1 bytes @ 0x35
   785   000036                     	ds	1
   786   000037                     sprintf@f:
   787                           	callstack 0
   788                           
   789                           ; 12 bytes @ 0x36
   790   000037                     	ds	12
   791   000043                     ADC2String@buf:
   792                           	callstack 0
   793                           
   794                           ; 2 bytes @ 0x42
   795   000043                     	ds	2
   796   000045                     ADC2String@ADC_val:
   797                           	callstack 0
   798                           
   799                           ; 2 bytes @ 0x44
   800   000045                     	ds	2
   801   000047                     ??_ADC2String:
   802                           
   803                           ; 1 bytes @ 0x46
   804   000047                     	ds	2
   805   000049                     ADC2String@frac_part:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x48
   809   000049                     	ds	2
   810   00004B                     ADC2String@int_part:
   811                           	callstack 0
   812                           
   813                           ; 2 bytes @ 0x4A
   814   00004B                     	ds	2
   815   00004D                     send2USART@battery_level:
   816                           	callstack 0
   817                           
   818                           ; 2 bytes @ 0x4C
   819   00004D                     	ds	2
   820   00004F                     send2USART@red:
   821                           	callstack 0
   822                           
   823                           ; 2 bytes @ 0x4E
   824   00004F                     	ds	2
   825   000051                     send2USART@green:
   826                           	callstack 0
   827                           
   828                           ; 2 bytes @ 0x50
   829   000051                     	ds	2
   830   000053                     send2USART@blue:
   831                           	callstack 0
   832                           
   833                           ; 2 bytes @ 0x52
   834   000053                     	ds	2
   835   000055                     send2USART@clear:
   836                           	callstack 0
   837                           
   838                           ; 2 bytes @ 0x54
   839   000055                     	ds	2
   840   000057                     test@battery_level:
   841                           	callstack 0
   842                           
   843                           ; 2 bytes @ 0x56
   844   000057                     	ds	2
   845   000059                     ??_test:
   846                           
   847                           ; 1 bytes @ 0x58
   848   000059                     	ds	1
   849   00005A                     main@battery_level:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x59
   853   00005A                     	ds	2
   854                           
   855 ;;
   856 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   857 ;;
   858 ;; *************** function _main *****************
   859 ;; Defined at:
   860 ;;		line 28 in file "main.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;  PWMcycle        2    0        unsigned int 
   865 ;;  battery_leve    2   89[COMRAM] unsigned int 
   866 ;;  clear           2    0        unsigned int 
   867 ;;  green           2    0        unsigned int 
   868 ;;  blue            2    0        unsigned int 
   869 ;;  red             2    0        unsigned int 
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      void 
   872 ;; Registers used:
   873 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   880 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   882 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   883 ;;Total ram usage:        2 bytes
   884 ;; Hardware stack levels required when called: 11
   885 ;; This function calls:
   886 ;;		_ADC_init
   887 ;;		_color_click_init
   888 ;;		_initDCmotorsPWM
   889 ;;		_initUSART4
   890 ;;		_test
   891 ;; This function is called by:
   892 ;;		Startup code after reset
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896                           	psect	text0
   897   001860                     __ptext0:
   898                           	callstack 0
   899   001860                     _main:
   900                           	callstack 20
   901   001860                     
   902                           ;main.c: 30:     ADC_init();
   903   001860  EC92  F00E         	call	_ADC_init	;wreg free
   904   001864                     
   905                           ;main.c: 31:     color_click_init();
   906   001864  EC1D  F00E         	call	_color_click_init	;wreg free
   907   001868                     
   908                           ;main.c: 32:     initUSART4();
   909   001868  EC83  F00E         	call	_initUSART4	;wreg free
   910   00186C                     
   911                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
   912   00186C  0E00               	movlw	0
   913   00186E  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   914   001870  0E63               	movlw	99
   915   001872  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   916   001874  ECA1  F00B         	call	_initDCmotorsPWM	;wreg free
   917   001878                     
   918                           ;main.c: 39:     motorL.power = 0;
   919   001878  0E00               	movlw	0
   920   00187A  0100               	movlb	0	; () banked
   921   00187C  6FB7               	movwf	_motorL& (0+255),b
   922   00187E                     
   923                           ; BSR set to: 0
   924                           ;main.c: 40:     motorL.direction = 1;
   925   00187E  0E01               	movlw	1
   926   001880  6FB8               	movwf	(_motorL+1)& (0+255),b
   927   001882                     
   928                           ; BSR set to: 0
   929                           ;main.c: 41:     motorL.brakemode = 1;
   930   001882  0E01               	movlw	1
   931   001884  6FB9               	movwf	(_motorL+2)& (0+255),b
   932   001886                     
   933                           ; BSR set to: 0
   934                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
   935   001886  0E00               	movlw	0
   936   001888  6FBB               	movwf	(_motorL+4)& (0+255),b
   937   00188A  0E63               	movlw	99
   938   00188C  6FBA               	movwf	(_motorL+3)& (0+255),b
   939   00188E                     
   940                           ; BSR set to: 0
   941                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   942   00188E  0EAA               	movlw	170
   943   001890  6FBC               	movwf	(_motorL+5)& (0+255),b
   944   001892  0E0F               	movlw	15
   945   001894  6FBD               	movwf	(_motorL+6)& (0+255),b
   946   001896                     
   947                           ; BSR set to: 0
   948                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   949   001896  0EA6               	movlw	166
   950   001898  6FBE               	movwf	(_motorL+7)& (0+255),b
   951   00189A  0E0F               	movlw	15
   952   00189C  6FBF               	movwf	(_motorL+8)& (0+255),b
   953   00189E                     
   954                           ; BSR set to: 0
   955                           ;main.c: 46:     motorR.power = 0;
   956   00189E  0E00               	movlw	0
   957   0018A0  6FAE               	movwf	_motorR& (0+255),b
   958   0018A2                     
   959                           ; BSR set to: 0
   960                           ;main.c: 47:     motorR.direction = 1;
   961   0018A2  0E01               	movlw	1
   962   0018A4  6FAF               	movwf	(_motorR+1)& (0+255),b
   963   0018A6                     
   964                           ; BSR set to: 0
   965                           ;main.c: 48:     motorR.brakemode = 1;
   966   0018A6  0E01               	movlw	1
   967   0018A8  6FB0               	movwf	(_motorR+2)& (0+255),b
   968   0018AA                     
   969                           ; BSR set to: 0
   970                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
   971   0018AA  0E00               	movlw	0
   972   0018AC  6FB2               	movwf	(_motorR+4)& (0+255),b
   973   0018AE  0E63               	movlw	99
   974   0018B0  6FB1               	movwf	(_motorR+3)& (0+255),b
   975                           
   976                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   977   0018B2  0E25               	movlw	37
   978   0018B4  6FB3               	movwf	(_motorR+5)& (0+255),b
   979   0018B6  0E0F               	movlw	15
   980   0018B8  6FB4               	movwf	(_motorR+6)& (0+255),b
   981                           
   982                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   983   0018BA  0E21               	movlw	33
   984   0018BC  6FB5               	movwf	(_motorR+7)& (0+255),b
   985   0018BE  0E0F               	movlw	15
   986   0018C0  6FB6               	movwf	(_motorR+8)& (0+255),b
   987   0018C2                     
   988                           ; BSR set to: 0
   989                           ;main.c: 54:     LATDbits.LATD7=0;
   990   0018C2  9E7C               	bcf	124,7,c	;volatile
   991   0018C4                     
   992                           ; BSR set to: 0
   993                           ;main.c: 55:     TRISDbits.TRISD7=0;
   994   0018C4  9E84               	bcf	132,7,c	;volatile
   995   0018C6                     
   996                           ; BSR set to: 0
   997                           ;main.c: 59:     TRISGbits.TRISG0 = 0;
   998   0018C6  9087               	bcf	135,0,c	;volatile
   999   0018C8                     
  1000                           ; BSR set to: 0
  1001                           ;main.c: 60:     LATGbits.LATG0 = 0;
  1002   0018C8  907F               	bcf	127,0,c	;volatile
  1003   0018CA                     
  1004                           ; BSR set to: 0
  1005                           ;main.c: 61:     TRISEbits.TRISE7 = 0;
  1006   0018CA  9E85               	bcf	133,7,c	;volatile
  1007   0018CC                     
  1008                           ; BSR set to: 0
  1009                           ;main.c: 62:     LATEbits.LATE7 = 0;
  1010   0018CC  9E7D               	bcf	125,7,c	;volatile
  1011   0018CE                     
  1012                           ; BSR set to: 0
  1013                           ;main.c: 63:     TRISAbits.TRISA3 = 0;
  1014   0018CE  9681               	bcf	129,3,c	;volatile
  1015   0018D0                     
  1016                           ; BSR set to: 0
  1017                           ;main.c: 64:     LATAbits.LATA3 = 0;
  1018   0018D0  9679               	bcf	121,3,c	;volatile
  1019   0018D2                     l2661:
  1020                           
  1021                           ;main.c: 87:         test(battery_level);
  1022   0018D2  C05A  F057         	movff	main@battery_level,test@battery_level
  1023   0018D6  C05B  F058         	movff	main@battery_level+1,test@battery_level+1
  1024   0018DA  EC0F  F008         	call	_test	;wreg free
  1025   0018DE  EF69  F00C         	goto	l2661
  1026   0018E2  EF00  F000         	goto	start
  1027   0018E6                     __end_of_main:
  1028                           	callstack 0
  1029                           
  1030 ;; *************** function _test *****************
  1031 ;; Defined at:
  1032 ;;		line 98 in file "color.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;  battery_leve    2   86[COMRAM] unsigned int 
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;  clear           2   56[BANK0 ] unsigned int 
  1037 ;;  green           2   54[BANK0 ] unsigned int 
  1038 ;;  blue            2   52[BANK0 ] unsigned int 
  1039 ;;  red             2   50[BANK0 ] unsigned int 
  1040 ;;  combo           2   58[BANK0 ] unsigned int 
  1041 ;;  led_state      50    0[BANK0 ] unsigned char [50]
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      void 
  1044 ;; Registers used:
  1045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1052 ;;      Locals:         0      60       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1053 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1054 ;;      Totals:         3      60       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1055 ;;Total ram usage:       63 bytes
  1056 ;; Hardware stack levels used: 1
  1057 ;; Hardware stack levels required when called: 10
  1058 ;; This function calls:
  1059 ;;		_color_read_Blue
  1060 ;;		_color_read_Clear
  1061 ;;		_color_read_Green
  1062 ;;		_color_read_Red
  1063 ;;		_send2USART
  1064 ;;		_sendStringSerial4
  1065 ;;		_sprintf
  1066 ;; This function is called by:
  1067 ;;		_main
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text1
  1072   00101E                     __ptext1:
  1073                           	callstack 0
  1074   00101E                     _test:
  1075                           	callstack 20
  1076   00101E                     
  1077                           ;color.c: 101:     char led_state[50];;color.c: 104:     for (unsigned int combo = 0; co
      +                          mbo < 4; ++combo) {
  1078   00101E  0E00               	movlw	0
  1079   001020  0100               	movlb	0	; () banked
  1080   001022  6FFB               	movwf	(test@combo+1)& (0+255),b
  1081   001024  0E00               	movlw	0
  1082   001026  6FFA               	movwf	test@combo& (0+255),b
  1083   001028                     l2467:
  1084                           
  1085                           ; BSR set to: 0
  1086                           ;color.c: 107:         if (combo == 0) {
  1087   001028  51FA               	movf	test@combo& (0+255),w,b
  1088   00102A  11FB               	iorwf	(test@combo+1)& (0+255),w,b
  1089   00102C  A4D8               	btfss	status,2,c
  1090   00102E  EF1B  F008         	goto	u1351
  1091   001032  EF1D  F008         	goto	u1350
  1092   001036                     u1351:
  1093   001036  EF34  F008         	goto	l2473
  1094   00103A                     u1350:
  1095   00103A                     
  1096                           ; BSR set to: 0
  1097                           ;color.c: 109:             LATGbits.LATG0 = 1;
  1098   00103A  807F               	bsf	127,0,c	;volatile
  1099                           
  1100                           ;color.c: 110:             LATEbits.LATE7 = 0;
  1101   00103C  9E7D               	bcf	125,7,c	;volatile
  1102                           
  1103                           ;color.c: 111:             LATAbits.LATA3 = 0;
  1104   00103E  9679               	bcf	121,3,c	;volatile
  1105   001040                     
  1106                           ; BSR set to: 0
  1107                           ;color.c: 112:             sprintf(led_state,"Red_light=%d, \n\r", LATGbits.LATG0);
  1108   001040  0EC0               	movlw	low test@led_state
  1109   001042  6E2F               	movwf	sprintf@s^0,c
  1110   001044  6A30               	clrf	(sprintf@s+1)^0,c
  1111   001046  0E3A               	movlw	low STR_1
  1112   001048  6E31               	movwf	sprintf@fmt^0,c
  1113   00104A  B07F               	btfsc	127,0,c	;volatile
  1114   00104C  EF2A  F008         	goto	u1361
  1115   001050  EF2E  F008         	goto	u1360
  1116   001054                     u1361:
  1117   001054  6A59               	clrf	??_test^0,c
  1118   001056  2A59               	incf	??_test^0,f,c
  1119   001058  EF2F  F008         	goto	u1368
  1120   00105C                     u1360:
  1121   00105C  6A59               	clrf	??_test^0,c
  1122   00105E                     u1368:
  1123   00105E  5059               	movf	??_test^0,w,c
  1124   001060  6E32               	movwf	(?_sprintf+3)^0,c
  1125   001062  6A33               	clrf	(?_sprintf+4)^0,c
  1126   001064  EC8F  F00D         	call	_sprintf	;wreg free
  1127   001068                     l2473:
  1128                           
  1129                           ;color.c: 117:         if (combo == 1) {
  1130   001068  0100               	movlb	0	; () banked
  1131   00106A  05FA               	decf	test@combo& (0+255),w,b
  1132   00106C  11FB               	iorwf	(test@combo+1)& (0+255),w,b
  1133   00106E  A4D8               	btfss	status,2,c
  1134   001070  EF3C  F008         	goto	u1371
  1135   001074  EF3E  F008         	goto	u1370
  1136   001078                     u1371:
  1137   001078  EF55  F008         	goto	l2479
  1138   00107C                     u1370:
  1139   00107C                     
  1140                           ; BSR set to: 0
  1141                           ;color.c: 118:             LATGbits.LATG0 = 0;
  1142   00107C  907F               	bcf	127,0,c	;volatile
  1143                           
  1144                           ;color.c: 119:             LATEbits.LATE7 = 1;
  1145   00107E  8E7D               	bsf	125,7,c	;volatile
  1146                           
  1147                           ;color.c: 120:             LATAbits.LATA3 = 0;
  1148   001080  9679               	bcf	121,3,c	;volatile
  1149   001082                     
  1150                           ; BSR set to: 0
  1151                           ;color.c: 121:             sprintf(led_state,"Green_light=%d, \n\r", LATEbits.LATE7);
  1152   001082  0EC0               	movlw	low test@led_state
  1153   001084  6E2F               	movwf	sprintf@s^0,c
  1154   001086  6A30               	clrf	(sprintf@s+1)^0,c
  1155   001088  0E16               	movlw	low STR_2
  1156   00108A  6E31               	movwf	sprintf@fmt^0,c
  1157   00108C  BE7D               	btfsc	125,7,c	;volatile
  1158   00108E  EF4B  F008         	goto	u1381
  1159   001092  EF4F  F008         	goto	u1380
  1160   001096                     u1381:
  1161   001096  6A59               	clrf	??_test^0,c
  1162   001098  2A59               	incf	??_test^0,f,c
  1163   00109A  EF50  F008         	goto	u1388
  1164   00109E                     u1380:
  1165   00109E  6A59               	clrf	??_test^0,c
  1166   0010A0                     u1388:
  1167   0010A0  5059               	movf	??_test^0,w,c
  1168   0010A2  6E32               	movwf	(?_sprintf+3)^0,c
  1169   0010A4  6A33               	clrf	(?_sprintf+4)^0,c
  1170   0010A6  EC8F  F00D         	call	_sprintf	;wreg free
  1171   0010AA                     l2479:
  1172                           
  1173                           ;color.c: 125:         if (combo == 2) {
  1174   0010AA  0E02               	movlw	2
  1175   0010AC  0100               	movlb	0	; () banked
  1176   0010AE  19FA               	xorwf	test@combo& (0+255),w,b
  1177   0010B0  11FB               	iorwf	(test@combo+1)& (0+255),w,b
  1178   0010B2  A4D8               	btfss	status,2,c
  1179   0010B4  EF5E  F008         	goto	u1391
  1180   0010B8  EF60  F008         	goto	u1390
  1181   0010BC                     u1391:
  1182   0010BC  EF77  F008         	goto	l2485
  1183   0010C0                     u1390:
  1184   0010C0                     
  1185                           ; BSR set to: 0
  1186                           ;color.c: 126:             LATGbits.LATG0 = 0;
  1187   0010C0  907F               	bcf	127,0,c	;volatile
  1188                           
  1189                           ;color.c: 127:             LATEbits.LATE7 = 0;
  1190   0010C2  9E7D               	bcf	125,7,c	;volatile
  1191                           
  1192                           ;color.c: 128:             LATAbits.LATA3 = 1;
  1193   0010C4  8679               	bsf	121,3,c	;volatile
  1194   0010C6                     
  1195                           ; BSR set to: 0
  1196                           ;color.c: 129:             sprintf(led_state,"Blue_light=%d \n\r", LATAbits.LATA3);
  1197   0010C6  0EC0               	movlw	low test@led_state
  1198   0010C8  6E2F               	movwf	sprintf@s^0,c
  1199   0010CA  6A30               	clrf	(sprintf@s+1)^0,c
  1200   0010CC  0E5C               	movlw	low STR_3
  1201   0010CE  6E31               	movwf	sprintf@fmt^0,c
  1202   0010D0  B679               	btfsc	121,3,c	;volatile
  1203   0010D2  EF6D  F008         	goto	u1401
  1204   0010D6  EF71  F008         	goto	u1400
  1205   0010DA                     u1401:
  1206   0010DA  6A59               	clrf	??_test^0,c
  1207   0010DC  2A59               	incf	??_test^0,f,c
  1208   0010DE  EF72  F008         	goto	u1408
  1209   0010E2                     u1400:
  1210   0010E2  6A59               	clrf	??_test^0,c
  1211   0010E4                     u1408:
  1212   0010E4  5059               	movf	??_test^0,w,c
  1213   0010E6  6E32               	movwf	(?_sprintf+3)^0,c
  1214   0010E8  6A33               	clrf	(?_sprintf+4)^0,c
  1215   0010EA  EC8F  F00D         	call	_sprintf	;wreg free
  1216   0010EE                     l2485:
  1217                           
  1218                           ;color.c: 135:         if (combo == 3) {
  1219   0010EE  0E03               	movlw	3
  1220   0010F0  0100               	movlb	0	; () banked
  1221   0010F2  19FA               	xorwf	test@combo& (0+255),w,b
  1222   0010F4  11FB               	iorwf	(test@combo+1)& (0+255),w,b
  1223   0010F6  A4D8               	btfss	status,2,c
  1224   0010F8  EF80  F008         	goto	u1411
  1225   0010FC  EF82  F008         	goto	u1410
  1226   001100                     u1411:
  1227   001100  EF90  F008         	goto	l2491
  1228   001104                     u1410:
  1229   001104                     
  1230                           ; BSR set to: 0
  1231                           ;color.c: 136:             LATGbits.LATG0 = 1;
  1232   001104  807F               	bsf	127,0,c	;volatile
  1233                           
  1234                           ;color.c: 137:             LATEbits.LATE7 = 1;
  1235   001106  8E7D               	bsf	125,7,c	;volatile
  1236                           
  1237                           ;color.c: 138:             LATAbits.LATA3 = 1;
  1238   001108  8679               	bsf	121,3,c	;volatile
  1239   00110A                     
  1240                           ; BSR set to: 0
  1241                           ;color.c: 139:             sprintf(led_state,"All_lights=%d \n\r", 1);
  1242   00110A  0EC0               	movlw	low test@led_state
  1243   00110C  6E2F               	movwf	sprintf@s^0,c
  1244   00110E  6A30               	clrf	(sprintf@s+1)^0,c
  1245   001110  0E4B               	movlw	low STR_4
  1246   001112  6E31               	movwf	sprintf@fmt^0,c
  1247   001114  0E00               	movlw	0
  1248   001116  6E33               	movwf	(?_sprintf+4)^0,c
  1249   001118  0E01               	movlw	1
  1250   00111A  6E32               	movwf	(?_sprintf+3)^0,c
  1251   00111C  EC8F  F00D         	call	_sprintf	;wreg free
  1252   001120                     l2491:
  1253                           
  1254                           ;color.c: 144:         sendStringSerial4(led_state);
  1255   001120  0EC0               	movlw	low test@led_state
  1256   001122  6E02               	movwf	sendStringSerial4@string^0,c
  1257   001124  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1258   001126  ECE7  F00D         	call	_sendStringSerial4	;wreg free
  1259   00112A                     
  1260                           ;color.c: 147:         unsigned int red = color_read_Red();
  1261   00112A  ECAD  F00C         	call	_color_read_Red	;wreg free
  1262   00112E  C005  F0F2         	movff	?_color_read_Red,test@red
  1263   001132  C006  F0F3         	movff	?_color_read_Red+1,test@red+1
  1264   001136                     
  1265                           ;color.c: 148:         unsigned int blue = color_read_Blue();
  1266   001136  EC25  F00D         	call	_color_read_Blue	;wreg free
  1267   00113A  C005  F0F4         	movff	?_color_read_Blue,test@blue
  1268   00113E  C006  F0F5         	movff	?_color_read_Blue+1,test@blue+1
  1269   001142                     
  1270                           ;color.c: 149:         unsigned int green = color_read_Green();
  1271   001142  ECD5  F00C         	call	_color_read_Green	;wreg free
  1272   001146  C005  F0F6         	movff	?_color_read_Green,test@green
  1273   00114A  C006  F0F7         	movff	?_color_read_Green+1,test@green+1
  1274   00114E                     
  1275                           ;color.c: 150:         unsigned int clear = color_read_Clear();
  1276   00114E  ECFD  F00C         	call	_color_read_Clear	;wreg free
  1277   001152  C005  F0F8         	movff	?_color_read_Clear,test@clear
  1278   001156  C006  F0F9         	movff	?_color_read_Clear+1,test@clear+1
  1279   00115A                     
  1280                           ;color.c: 158:         send2USART(battery_level, red, green, blue, clear);
  1281   00115A  C057  F04D         	movff	test@battery_level,send2USART@battery_level
  1282   00115E  C058  F04E         	movff	test@battery_level+1,send2USART@battery_level+1
  1283   001162  C0F2  F04F         	movff	test@red,send2USART@red
  1284   001166  C0F3  F050         	movff	test@red+1,send2USART@red+1
  1285   00116A  C0F6  F051         	movff	test@green,send2USART@green
  1286   00116E  C0F7  F052         	movff	test@green+1,send2USART@green+1
  1287   001172  C0F4  F053         	movff	test@blue,send2USART@blue
  1288   001176  C0F5  F054         	movff	test@blue+1,send2USART@blue+1
  1289   00117A  C0F8  F055         	movff	test@clear,send2USART@clear
  1290   00117E  C0F9  F056         	movff	test@clear+1,send2USART@clear+1
  1291   001182  EC46  F00A         	call	_send2USART	;wreg free
  1292   001186                     
  1293                           ;color.c: 159:     }
  1294   001186  0100               	movlb	0	; () banked
  1295   001188  4BFA               	infsnz	test@combo& (0+255),f,b
  1296   00118A  2BFB               	incf	(test@combo+1)& (0+255),f,b
  1297   00118C                     
  1298                           ; BSR set to: 0
  1299   00118C  51FB               	movf	(test@combo+1)& (0+255),w,b
  1300   00118E  E109               	bnz	u1420
  1301   001190  0E04               	movlw	4
  1302   001192  5DFA               	subwf	test@combo& (0+255),w,b
  1303   001194  A0D8               	btfss	status,0,c
  1304   001196  EFCF  F008         	goto	u1421
  1305   00119A  EFD1  F008         	goto	u1420
  1306   00119E                     u1421:
  1307   00119E  EF14  F008         	goto	l2467
  1308   0011A2                     u1420:
  1309   0011A2                     
  1310                           ; BSR set to: 0
  1311   0011A2  0012               	return		;funcret
  1312   0011A4                     __end_of_test:
  1313                           	callstack 0
  1314                           
  1315 ;; *************** function _send2USART *****************
  1316 ;; Defined at:
  1317 ;;		line 146 in file "serial.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;  battery_leve    2   76[COMRAM] unsigned int 
  1320 ;;  red             2   78[COMRAM] unsigned int 
  1321 ;;  green           2   80[COMRAM] unsigned int 
  1322 ;;  blue            2   82[COMRAM] unsigned int 
  1323 ;;  clear           2   84[COMRAM] unsigned int 
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;  clear_char     50  200[BANK1 ] unsigned char [50]
  1326 ;;  green_char     50  150[BANK1 ] unsigned char [50]
  1327 ;;  blue_char      50  100[BANK1 ] unsigned char [50]
  1328 ;;  red_char       50   50[BANK1 ] unsigned char [50]
  1329 ;;  buf            50    0[BANK1 ] unsigned char [50]
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      void 
  1332 ;; Registers used:
  1333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1339 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1340 ;;      Locals:         0       0     250       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1342 ;;      Totals:        10       0     250       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1343 ;;Total ram usage:      260 bytes
  1344 ;; Hardware stack levels used: 1
  1345 ;; Hardware stack levels required when called: 9
  1346 ;; This function calls:
  1347 ;;		_ADC2String
  1348 ;;		_sendStringSerial4
  1349 ;;		_sprintf
  1350 ;; This function is called by:
  1351 ;;		_test
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	text2
  1356   00148C                     __ptext2:
  1357                           	callstack 0
  1358   00148C                     _send2USART:
  1359                           	callstack 20
  1360   00148C                     
  1361                           ;serial.c: 147:         char buf[50];;serial.c: 148:         char red_char[50];;serial.c
      +                          : 149:         char blue_char[50];;serial.c: 150:         char green_char[50];;serial.c:
      +                           151:         char clear_char[50];;serial.c: 155:         ADC2String(buf, battery_level)
      +                          ;
  1362   00148C  0E00               	movlw	low send2USART@buf
  1363   00148E  6E43               	movwf	ADC2String@buf^0,c
  1364   001490  0E01               	movlw	high send2USART@buf
  1365   001492  6E44               	movwf	(ADC2String@buf+1)^0,c
  1366   001494  C04D  F045         	movff	send2USART@battery_level,ADC2String@ADC_val
  1367   001498  C04E  F046         	movff	send2USART@battery_level+1,ADC2String@ADC_val+1
  1368   00149C  EC4E  F00B         	call	_ADC2String	;wreg free
  1369                           
  1370                           ;serial.c: 156:         sprintf(red_char,"Red=%05d,  ",red);
  1371   0014A0  0E32               	movlw	low send2USART@red_char
  1372   0014A2  6E2F               	movwf	sprintf@s^0,c
  1373   0014A4  0E01               	movlw	high send2USART@red_char
  1374   0014A6  6E30               	movwf	(sprintf@s+1)^0,c
  1375   0014A8  0E88               	movlw	low STR_6
  1376   0014AA  6E31               	movwf	sprintf@fmt^0,c
  1377   0014AC  C04F  F032         	movff	send2USART@red,?_sprintf+3
  1378   0014B0  C050  F033         	movff	send2USART@red+1,?_sprintf+4
  1379   0014B4  EC8F  F00D         	call	_sprintf	;wreg free
  1380                           
  1381                           ;serial.c: 157:         sprintf(blue_char,"Blue=%05d,  ",blue);
  1382   0014B8  0E64               	movlw	low send2USART@blue_char
  1383   0014BA  6E2F               	movwf	sprintf@s^0,c
  1384   0014BC  0E01               	movlw	high send2USART@blue_char
  1385   0014BE  6E30               	movwf	(sprintf@s+1)^0,c
  1386   0014C0  0E7B               	movlw	low STR_7
  1387   0014C2  6E31               	movwf	sprintf@fmt^0,c
  1388   0014C4  C053  F032         	movff	send2USART@blue,?_sprintf+3
  1389   0014C8  C054  F033         	movff	send2USART@blue+1,?_sprintf+4
  1390   0014CC  EC8F  F00D         	call	_sprintf	;wreg free
  1391                           
  1392                           ;serial.c: 158:         sprintf(green_char,"Green=%05d,  ",green);
  1393   0014D0  0E96               	movlw	low send2USART@green_char
  1394   0014D2  6E2F               	movwf	sprintf@s^0,c
  1395   0014D4  0E01               	movlw	high send2USART@green_char
  1396   0014D6  6E30               	movwf	(sprintf@s+1)^0,c
  1397   0014D8  0E6D               	movlw	low STR_8
  1398   0014DA  6E31               	movwf	sprintf@fmt^0,c
  1399   0014DC  C051  F032         	movff	send2USART@green,?_sprintf+3
  1400   0014E0  C052  F033         	movff	send2USART@green+1,?_sprintf+4
  1401   0014E4  EC8F  F00D         	call	_sprintf	;wreg free
  1402                           
  1403                           ;serial.c: 159:         sprintf(clear_char,"Clear=%05d,  \n\n\r",clear);
  1404   0014E8  0EC8               	movlw	low send2USART@clear_char
  1405   0014EA  6E2F               	movwf	sprintf@s^0,c
  1406   0014EC  0E01               	movlw	high send2USART@clear_char
  1407   0014EE  6E30               	movwf	(sprintf@s+1)^0,c
  1408   0014F0  0E29               	movlw	low STR_9
  1409   0014F2  6E31               	movwf	sprintf@fmt^0,c
  1410   0014F4  C055  F032         	movff	send2USART@clear,?_sprintf+3
  1411   0014F8  C056  F033         	movff	send2USART@clear+1,?_sprintf+4
  1412   0014FC  EC8F  F00D         	call	_sprintf	;wreg free
  1413   001500                     
  1414                           ;serial.c: 163:         sendStringSerial4(buf);
  1415   001500  0E00               	movlw	low send2USART@buf
  1416   001502  6E02               	movwf	sendStringSerial4@string^0,c
  1417   001504  0E01               	movlw	high send2USART@buf
  1418   001506  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1419   001508  ECE7  F00D         	call	_sendStringSerial4	;wreg free
  1420   00150C                     
  1421                           ;serial.c: 164:         sendStringSerial4(red_char);
  1422   00150C  0E32               	movlw	low send2USART@red_char
  1423   00150E  6E02               	movwf	sendStringSerial4@string^0,c
  1424   001510  0E01               	movlw	high send2USART@red_char
  1425   001512  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1426   001514  ECE7  F00D         	call	_sendStringSerial4	;wreg free
  1427   001518                     
  1428                           ;serial.c: 165:         sendStringSerial4(blue_char);
  1429   001518  0E64               	movlw	low send2USART@blue_char
  1430   00151A  6E02               	movwf	sendStringSerial4@string^0,c
  1431   00151C  0E01               	movlw	high send2USART@blue_char
  1432   00151E  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1433   001520  ECE7  F00D         	call	_sendStringSerial4	;wreg free
  1434   001524                     
  1435                           ;serial.c: 166:         sendStringSerial4(green_char);
  1436   001524  0E96               	movlw	low send2USART@green_char
  1437   001526  6E02               	movwf	sendStringSerial4@string^0,c
  1438   001528  0E01               	movlw	high send2USART@green_char
  1439   00152A  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1440   00152C  ECE7  F00D         	call	_sendStringSerial4	;wreg free
  1441   001530                     
  1442                           ;serial.c: 167:         sendStringSerial4(clear_char);
  1443   001530  0EC8               	movlw	low send2USART@clear_char
  1444   001532  6E02               	movwf	sendStringSerial4@string^0,c
  1445   001534  0E01               	movlw	high send2USART@clear_char
  1446   001536  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1447   001538  ECE7  F00D         	call	_sendStringSerial4	;wreg free
  1448   00153C  0012               	return		;funcret
  1449   00153E                     __end_of_send2USART:
  1450                           	callstack 0
  1451                           
  1452 ;; *************** function _sendStringSerial4 *****************
  1453 ;; Defined at:
  1454 ;;		line 41 in file "serial.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;  string          2    1[COMRAM] PTR unsigned char 
  1457 ;;		 -> send2USART@clear_char(50), send2USART@green_char(50), send2USART@blue_char(50), send2USART@red_char(50), 
  1458 ;;		 -> send2USART@buf(50), sendAllReadings@buffer(10), test@led_state(50), 
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;		None
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1470 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1473 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1474 ;;Total ram usage:        2 bytes
  1475 ;; Hardware stack levels used: 1
  1476 ;; Hardware stack levels required when called: 1
  1477 ;; This function calls:
  1478 ;;		_sendCharSerial4
  1479 ;; This function is called by:
  1480 ;;		_test
  1481 ;;		_send2USART
  1482 ;;		_sendAllReadings
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           	psect	text3
  1487   001BCE                     __ptext3:
  1488                           	callstack 0
  1489   001BCE                     _sendStringSerial4:
  1490                           	callstack 28
  1491   001BCE                     
  1492                           ;serial.c: 44:     while(*string != 0){
  1493   001BCE  EFF6  F00D         	goto	l2331
  1494   001BD2                     l2325:
  1495                           
  1496                           ;serial.c: 46:   sendCharSerial4(*string++);
  1497   001BD2  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  1498   001BD6  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  1499   001BDA  50DF               	movf	indf2,w,c
  1500   001BDC  EC9F  F00E         	call	_sendCharSerial4
  1501   001BE0  4A02               	infsnz	sendStringSerial4@string^0,f,c
  1502   001BE2  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  1503   001BE4                     
  1504                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  1505   001BE4  0E6A               	movlw	106
  1506   001BE6                     u1557:
  1507   001BE6  2EE8               	decfsz	wreg,f,c
  1508   001BE8  D7FE               	bra	u1557
  1509   001BEA  D000               	nop2	
  1510   001BEC                     l2331:
  1511                           
  1512                           ;serial.c: 44:     while(*string != 0){
  1513   001BEC  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  1514   001BF0  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  1515   001BF4  50DF               	movf	indf2,w,c
  1516   001BF6  A4D8               	btfss	status,2,c
  1517   001BF8  EF00  F00E         	goto	u1271
  1518   001BFC  EF02  F00E         	goto	u1270
  1519   001C00                     u1271:
  1520   001C00  EFE9  F00D         	goto	l2325
  1521   001C04                     u1270:
  1522   001C04  0012               	return		;funcret
  1523   001C06                     __end_of_sendStringSerial4:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function _sendCharSerial4 *****************
  1527 ;; Defined at:
  1528 ;;		line 35 in file "serial.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  charToSend      1    wreg     unsigned char 
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  charToSend      1    0[COMRAM] unsigned char 
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  1    wreg      void 
  1535 ;; Registers used:
  1536 ;;		wreg
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1545 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1546 ;;Total ram usage:        1 bytes
  1547 ;; Hardware stack levels used: 1
  1548 ;; This function calls:
  1549 ;;		Nothing
  1550 ;; This function is called by:
  1551 ;;		_sendStringSerial4
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text4
  1556   001D3E                     __ptext4:
  1557                           	callstack 0
  1558   001D3E                     _sendCharSerial4:
  1559                           	callstack 28
  1560                           
  1561                           ;incstack = 0
  1562                           ;sendCharSerial4@charToSend stored from wreg
  1563   001D3E  6E01               	movwf	sendCharSerial4@charToSend^0,c
  1564   001D40                     l354:
  1565   001D40  010E               	movlb	14	; () banked
  1566   001D42  A537               	btfss	55,2,b	;volatile
  1567   001D44  EFA6  F00E         	goto	u1211
  1568   001D48  EFA8  F00E         	goto	u1210
  1569   001D4C                     u1211:
  1570   001D4C  EFA0  F00E         	goto	l354
  1571   001D50                     u1210:
  1572   001D50                     
  1573                           ; BSR set to: 14
  1574                           ;serial.c: 37:     TX4REG = charToSend;
  1575   001D50  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  1576   001D54                     
  1577                           ; BSR set to: 14
  1578   001D54  0012               	return		;funcret
  1579   001D56                     __end_of_sendCharSerial4:
  1580                           	callstack 0
  1581                           
  1582 ;; *************** function _ADC2String *****************
  1583 ;; Defined at:
  1584 ;;		line 135 in file "serial.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;  buf             2   66[COMRAM] PTR unsigned char 
  1587 ;;		 -> send2USART@buf(50), sendAllReadings@buffer(10), 
  1588 ;;  ADC_val         2   68[COMRAM] unsigned int 
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;  int_part        2   74[COMRAM] unsigned int 
  1591 ;;  frac_part       2   72[COMRAM] unsigned int 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  1    wreg      void 
  1594 ;; Registers used:
  1595 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1601 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1602 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1603 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1604 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1605 ;;Total ram usage:       10 bytes
  1606 ;; Hardware stack levels used: 1
  1607 ;; Hardware stack levels required when called: 8
  1608 ;; This function calls:
  1609 ;;		___lwdiv
  1610 ;;		___wmul
  1611 ;;		_sprintf
  1612 ;; This function is called by:
  1613 ;;		_send2USART
  1614 ;;		_sendAllReadings
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text5
  1619   00169C                     __ptext5:
  1620                           	callstack 0
  1621   00169C                     _ADC2String:
  1622                           	callstack 20
  1623   00169C                     
  1624                           ;serial.c: 137:     unsigned int int_part=ADC_val/77;
  1625   00169C  C045  F007         	movff	ADC2String@ADC_val,___lwdiv@dividend
  1626   0016A0  C046  F008         	movff	ADC2String@ADC_val+1,___lwdiv@dividend+1
  1627   0016A4  0E00               	movlw	0
  1628   0016A6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1629   0016A8  0E4D               	movlw	77
  1630   0016AA  6E09               	movwf	___lwdiv@divisor^0,c
  1631   0016AC  EC73  F00C         	call	___lwdiv	;wreg free
  1632   0016B0  C007  F04B         	movff	?___lwdiv,ADC2String@int_part
  1633   0016B4  C008  F04C         	movff	?___lwdiv+1,ADC2String@int_part+1
  1634   0016B8                     
  1635                           ;serial.c: 139:     unsigned int frac_part=(ADC_val*100)/77 - int_part*100;
  1636   0016B8  C045  F001         	movff	ADC2String@ADC_val,___wmul@multiplier
  1637   0016BC  C046  F002         	movff	ADC2String@ADC_val+1,___wmul@multiplier+1
  1638   0016C0  0E00               	movlw	0
  1639   0016C2  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1640   0016C4  0E64               	movlw	100
  1641   0016C6  6E03               	movwf	___wmul@multiplicand^0,c
  1642   0016C8  EC60  F00E         	call	___wmul	;wreg free
  1643   0016CC  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1644   0016D0  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1645   0016D4  0E00               	movlw	0
  1646   0016D6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1647   0016D8  0E4D               	movlw	77
  1648   0016DA  6E09               	movwf	___lwdiv@divisor^0,c
  1649   0016DC  EC73  F00C         	call	___lwdiv	;wreg free
  1650   0016E0  C007  F047         	movff	?___lwdiv,??_ADC2String
  1651   0016E4  C008  F048         	movff	?___lwdiv+1,??_ADC2String+1
  1652   0016E8  C04B  F001         	movff	ADC2String@int_part,___wmul@multiplier
  1653   0016EC  C04C  F002         	movff	ADC2String@int_part+1,___wmul@multiplier+1
  1654   0016F0  0EFF               	movlw	255
  1655   0016F2  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1656   0016F4  0E9C               	movlw	156
  1657   0016F6  6E03               	movwf	___wmul@multiplicand^0,c
  1658   0016F8  EC60  F00E         	call	___wmul	;wreg free
  1659   0016FC  5001               	movf	?___wmul^0,w,c
  1660   0016FE  2447               	addwf	??_ADC2String^0,w,c
  1661   001700  6E49               	movwf	ADC2String@frac_part^0,c
  1662   001702  5002               	movf	(?___wmul+1)^0,w,c
  1663   001704  2048               	addwfc	(??_ADC2String+1)^0,w,c
  1664   001706  6E4A               	movwf	(ADC2String@frac_part+1)^0,c
  1665   001708                     
  1666                           ;serial.c: 141:     sprintf(buf,"Voltage = %d.%02d,  ",int_part,frac_part);
  1667   001708  C043  F02F         	movff	ADC2String@buf,sprintf@s
  1668   00170C  C044  F030         	movff	ADC2String@buf+1,sprintf@s+1
  1669   001710  0E01               	movlw	low STR_5
  1670   001712  6E31               	movwf	sprintf@fmt^0,c
  1671   001714  C04B  F032         	movff	ADC2String@int_part,?_sprintf+3
  1672   001718  C04C  F033         	movff	ADC2String@int_part+1,?_sprintf+4
  1673   00171C  C049  F034         	movff	ADC2String@frac_part,?_sprintf+5
  1674   001720  C04A  F035         	movff	ADC2String@frac_part+1,?_sprintf+6
  1675   001724  EC8F  F00D         	call	_sprintf	;wreg free
  1676   001728                     
  1677                           ;serial.c: 143:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1678   001728  0E52               	movlw	82
  1679   00172A  6E48               	movwf	(??_ADC2String+1)^0,c
  1680   00172C  0E2B               	movlw	43
  1681   00172E  6E47               	movwf	??_ADC2String^0,c
  1682   001730  0E00               	movlw	0
  1683   001732                     u1567:
  1684   001732  2EE8               	decfsz	wreg,f,c
  1685   001734  D7FE               	bra	u1567
  1686   001736  2E47               	decfsz	??_ADC2String^0,f,c
  1687   001738  D7FC               	bra	u1567
  1688   00173A  2E48               	decfsz	(??_ADC2String+1)^0,f,c
  1689   00173C  D7FA               	bra	u1567
  1690   00173E  D000               	nop2	
  1691   001740  0012               	return		;funcret
  1692   001742                     __end_of_ADC2String:
  1693                           	callstack 0
  1694                           
  1695 ;; *************** function _sprintf *****************
  1696 ;; Defined at:
  1697 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  s               2   46[COMRAM] PTR unsigned char 
  1700 ;;		 -> send2USART@clear_char(50), send2USART@green_char(50), send2USART@blue_char(50), send2USART@red_char(50), 
  1701 ;;		 -> send2USART@buf(50), sendAllReadings@buffer(10), test@led_state(50), 
  1702 ;;  fmt             1   48[COMRAM] PTR const unsigned char 
  1703 ;;		 -> STR_9(17), STR_8(14), STR_7(13), STR_6(12), 
  1704 ;;		 -> STR_5(21), STR_4(17), STR_3(17), STR_2(19), 
  1705 ;;		 -> STR_1(17), 
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;  f              12   54[COMRAM] struct _IO_FILE
  1708 ;;  ret             2    0        int 
  1709 ;;  ap              1   53[COMRAM] PTR void [1]
  1710 ;;		 -> ?_sprintf(2), 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  2   46[COMRAM] int 
  1713 ;; Registers used:
  1714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1720 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1721 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1723 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1724 ;;Total ram usage:       20 bytes
  1725 ;; Hardware stack levels used: 1
  1726 ;; Hardware stack levels required when called: 7
  1727 ;; This function calls:
  1728 ;;		_vfprintf
  1729 ;; This function is called by:
  1730 ;;		_test
  1731 ;;		_ADC2String
  1732 ;;		_send2USART
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text6
  1737   001B1E                     __ptext6:
  1738                           	callstack 0
  1739   001B1E                     _sprintf:
  1740                           	callstack 22
  1741   001B1E  0E32               	movlw	low (?_sprintf+3)
  1742   001B20  6E36               	movwf	sprintf@ap^0,c
  1743   001B22  C02F  F037         	movff	sprintf@s,sprintf@f
  1744   001B26  C030  F038         	movff	sprintf@s+1,sprintf@f+1
  1745   001B2A  0E00               	movlw	0
  1746   001B2C  6E3B               	movwf	(sprintf@f+4)^0,c
  1747   001B2E  0E00               	movlw	0
  1748   001B30  6E3A               	movwf	(sprintf@f+3)^0,c
  1749   001B32  0E00               	movlw	0
  1750   001B34  6E42               	movwf	(sprintf@f+11)^0,c
  1751   001B36  0E00               	movlw	0
  1752   001B38  6E41               	movwf	(sprintf@f+10)^0,c
  1753   001B3A  0E37               	movlw	low sprintf@f
  1754   001B3C  6E2B               	movwf	vfprintf@fp^0,c
  1755   001B3E  C031  F02C         	movff	sprintf@fmt,vfprintf@fmt
  1756   001B42  0E36               	movlw	low sprintf@ap
  1757   001B44  6E2D               	movwf	vfprintf@ap^0,c
  1758   001B46  EC4D  F00D         	call	_vfprintf	;wreg free
  1759   001B4A  503A               	movf	(sprintf@f+3)^0,w,c
  1760   001B4C  242F               	addwf	sprintf@s^0,w,c
  1761   001B4E  6ED9               	movwf	fsr2l,c
  1762   001B50  503B               	movf	(sprintf@f+4)^0,w,c
  1763   001B52  2030               	addwfc	(sprintf@s+1)^0,w,c
  1764   001B54  6EDA               	movwf	fsr2h,c
  1765   001B56  6ADF               	clrf	indf2,c
  1766   001B58  0012               	return		;funcret
  1767   001B5A                     __end_of_sprintf:
  1768                           	callstack 0
  1769                           
  1770 ;; *************** function _vfprintf *****************
  1771 ;; Defined at:
  1772 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  fp              1   42[COMRAM] PTR struct _IO_FILE
  1775 ;;		 -> sprintf@f(12), 
  1776 ;;  fmt             1   43[COMRAM] PTR const unsigned char 
  1777 ;;		 -> STR_9(17), STR_8(14), STR_7(13), STR_6(12), 
  1778 ;;		 -> STR_5(21), STR_4(17), STR_3(17), STR_2(19), 
  1779 ;;		 -> STR_1(17), 
  1780 ;;  ap              1   44[COMRAM] PTR PTR void 
  1781 ;;		 -> sprintf@ap(1), 
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  cfmt            1   45[COMRAM] PTR unsigned char 
  1784 ;;		 -> STR_9(17), STR_8(14), STR_7(13), STR_6(12), 
  1785 ;;		 -> STR_5(21), STR_4(17), STR_3(17), STR_2(19), 
  1786 ;;		 -> STR_1(17), 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  2   42[COMRAM] int 
  1789 ;; Registers used:
  1790 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1796 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1799 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1800 ;;Total ram usage:        4 bytes
  1801 ;; Hardware stack levels used: 1
  1802 ;; Hardware stack levels required when called: 6
  1803 ;; This function calls:
  1804 ;;		_vfpfcnvrt
  1805 ;; This function is called by:
  1806 ;;		_sprintf
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text7
  1811   001A9A                     __ptext7:
  1812                           	callstack 0
  1813   001A9A                     _vfprintf:
  1814                           	callstack 22
  1815   001A9A                     
  1816                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1817   001A9A  C02C  F02E         	movff	vfprintf@fmt,vfprintf@cfmt
  1818                           
  1819                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1820   001A9E  EF59  F00D         	goto	l2245
  1821   001AA2                     l2243:
  1822                           
  1823                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1824   001AA2  C02B  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
  1825   001AA6  0E2E               	movlw	low vfprintf@cfmt
  1826   001AA8  6E21               	movwf	vfpfcnvrt@fmt^0,c
  1827   001AAA  C02D  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
  1828   001AAE  EC4B  F007         	call	_vfpfcnvrt	;wreg free
  1829   001AB2                     l2245:
  1830                           
  1831                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1832   001AB2  C02E  FFF6         	movff	vfprintf@cfmt,tblptrl
  1833   001AB6                     	if	1	;There is more than 1 active tblptr byte
  1834   001AB6  0E0E               	movlw	high __smallconst
  1835   001AB8  6EF7               	movwf	tblptrh,c
  1836   001ABA                     	endif
  1837   001ABA                     	if	0	;tblptru may be non-zero
  1838   001ABA                     	endif
  1839   001ABA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1840   001ABA  0E00               	movlw	low (__smallconst shr (0+16))
  1841   001ABC  6EF8               	movwf	tblptru,c
  1842   001ABE                     	endif
  1843   001ABE  0008               	tblrd		*
  1844   001AC0  50F5               	movf	tablat,w,c
  1845   001AC2  0900               	iorlw	0
  1846   001AC4  A4D8               	btfss	status,2,c
  1847   001AC6  EF67  F00D         	goto	u1181
  1848   001ACA  EF69  F00D         	goto	u1180
  1849   001ACE                     u1181:
  1850   001ACE  EF51  F00D         	goto	l2243
  1851   001AD2                     u1180:
  1852   001AD2                     
  1853                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1854   001AD2  0E00               	movlw	0
  1855   001AD4  6E2C               	movwf	(?_vfprintf+1)^0,c
  1856   001AD6  0E00               	movlw	0
  1857   001AD8  6E2B               	movwf	?_vfprintf^0,c
  1858   001ADA  0012               	return		;funcret
  1859   001ADC                     __end_of_vfprintf:
  1860                           	callstack 0
  1861                           
  1862 ;; *************** function _vfpfcnvrt *****************
  1863 ;; Defined at:
  1864 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1867 ;;		 -> sprintf@f(12), 
  1868 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  1869 ;;		 -> vfprintf@cfmt(1), 
  1870 ;;  ap              1   33[COMRAM] PTR PTR void 
  1871 ;;		 -> sprintf@ap(1), 
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;  convarg         4   36[COMRAM] struct .
  1874 ;;  cp              1   41[COMRAM] PTR unsigned char 
  1875 ;;		 -> STR_9(17), STR_8(14), STR_7(13), STR_6(12), 
  1876 ;;		 -> STR_5(21), STR_4(17), STR_3(17), STR_2(19), 
  1877 ;;		 -> STR_1(17), 
  1878 ;;  done            1   40[COMRAM] _Bool 
  1879 ;;  c               1    0        unsigned char 
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  1    wreg      void 
  1882 ;; Registers used:
  1883 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1889 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1890 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1891 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1892 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1893 ;;Total ram usage:       11 bytes
  1894 ;; Hardware stack levels used: 1
  1895 ;; Hardware stack levels required when called: 5
  1896 ;; This function calls:
  1897 ;;		_dtoa
  1898 ;;		_fputc
  1899 ;;		_read_prec_or_width
  1900 ;; This function is called by:
  1901 ;;		_vfprintf
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           	psect	text8
  1906   000E96                     __ptext8:
  1907                           	callstack 0
  1908   000E96                     _vfpfcnvrt:
  1909                           	callstack 22
  1910   000E96                     
  1911                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1912   000E96  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1913   000E98  6ED9               	movwf	fsr2l,c
  1914   000E9A  6ADA               	clrf	fsr2h,c
  1915   000E9C  CFDF FFF6          	movff	indf2,tblptrl
  1916   000EA0                     	if	1	;There is more than 1 active tblptr byte
  1917   000EA0  0E0E               	movlw	high __smallconst
  1918   000EA2  6EF7               	movwf	tblptrh,c
  1919   000EA4                     	endif
  1920   000EA4                     	if	0	;tblptru may be non-zero
  1921   000EA4                     	endif
  1922   000EA4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1923   000EA4  0E00               	movlw	low (__smallconst shr (0+16))
  1924   000EA6  6EF8               	movwf	tblptru,c
  1925   000EA8                     	endif
  1926   000EA8  0008               	tblrd		*
  1927   000EAA  50F5               	movf	tablat,w,c
  1928   000EAC  0A25               	xorlw	37
  1929   000EAE  A4D8               	btfss	status,2,c
  1930   000EB0  EF5C  F007         	goto	u1131
  1931   000EB4  EF5E  F007         	goto	u1130
  1932   000EB8                     u1131:
  1933   000EB8  EFFB  F007         	goto	l2231
  1934   000EBC                     u1130:
  1935   000EBC                     
  1936                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1937   000EBC  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1938   000EBE  6ED9               	movwf	fsr2l,c
  1939   000EC0  6ADA               	clrf	fsr2h,c
  1940   000EC2  2ADF               	incf	indf2,f,c
  1941   000EC4                     
  1942                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1943   000EC4  0E00               	movlw	0
  1944   000EC6  0100               	movlb	0	; () banked
  1945   000EC8  6F89               	movwf	(_width+1)& (0+255),b
  1946   000ECA  0E00               	movlw	0
  1947   000ECC  6F88               	movwf	_width& (0+255),b
  1948   000ECE  C088  F08C         	movff	_width,_flags
  1949   000ED2                     
  1950                           ; BSR set to: 0
  1951                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1952   000ED2  698A               	setf	_prec& (0+255),b
  1953   000ED4  698B               	setf	(_prec+1)& (0+255),b
  1954   000ED6                     
  1955                           ; BSR set to: 0
  1956                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1957   000ED6  0E00               	movlw	0
  1958   000ED8  6E29               	movwf	vfpfcnvrt@done^0,c
  1959                           
  1960                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1961   000EDA  EF96  F007         	goto	l2205
  1962   000EDE                     l2195:
  1963                           
  1964                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1965   000EDE  0100               	movlb	0	; () banked
  1966   000EE0  838C               	bsf	_flags& (0+255),1,b
  1967   000EE2                     
  1968                           ; BSR set to: 0
  1969                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1970   000EE2  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1971   000EE4  6ED9               	movwf	fsr2l,c
  1972   000EE6  6ADA               	clrf	fsr2h,c
  1973   000EE8  2ADF               	incf	indf2,f,c
  1974                           
  1975                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1976   000EEA  EF96  F007         	goto	l2205
  1977   000EEE                     l2199:
  1978                           
  1979                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1980   000EEE  0E01               	movlw	1
  1981   000EF0  6E29               	movwf	vfpfcnvrt@done^0,c
  1982                           
  1983                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1984   000EF2  EF96  F007         	goto	l2205
  1985   000EF6                     l2203:
  1986   000EF6  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1987   000EF8  6ED9               	movwf	fsr2l,c
  1988   000EFA  6ADA               	clrf	fsr2h,c
  1989   000EFC  CFDF FFF6          	movff	indf2,tblptrl
  1990   000F00                     	if	1	;There is more than 1 active tblptr byte
  1991   000F00  0E0E               	movlw	high __smallconst
  1992   000F02  6EF7               	movwf	tblptrh,c
  1993   000F04                     	endif
  1994   000F04                     	if	0	;tblptru may be non-zero
  1995   000F04                     	endif
  1996   000F04                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1997   000F04  0E00               	movlw	low (__smallconst shr (0+16))
  1998   000F06  6EF8               	movwf	tblptru,c
  1999   000F08                     	endif
  2000   000F08  0008               	tblrd		*
  2001   000F0A  50F5               	movf	tablat,w,c
  2002   000F0C  6E23               	movwf	??_vfpfcnvrt^0,c
  2003   000F0E  6A24               	clrf	(??_vfpfcnvrt+1)^0,c
  2004                           
  2005                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2006                           ; Switch size 1, requested type "simple"
  2007                           ; Number of cases is 1, Range of values is 0 to 0
  2008                           ; switch strategies available:
  2009                           ; Name         Instructions Cycles
  2010                           ; simple_byte            4     3 (average)
  2011                           ;	Chosen strategy is simple_byte
  2012   000F10  5024               	movf	(??_vfpfcnvrt+1)^0,w,c
  2013   000F12  0A00               	xorlw	0	; case 0
  2014   000F14  B4D8               	btfsc	status,2,c
  2015   000F16  EF8F  F007         	goto	l2781
  2016   000F1A  EF77  F007         	goto	l2199
  2017   000F1E                     l2781:
  2018                           
  2019                           ; Switch size 1, requested type "simple"
  2020                           ; Number of cases is 1, Range of values is 48 to 48
  2021                           ; switch strategies available:
  2022                           ; Name         Instructions Cycles
  2023                           ; simple_byte            4     3 (average)
  2024                           ;	Chosen strategy is simple_byte
  2025   000F1E  5023               	movf	??_vfpfcnvrt^0,w,c
  2026   000F20  0A30               	xorlw	48	; case 48
  2027   000F22  B4D8               	btfsc	status,2,c
  2028   000F24  EF6F  F007         	goto	l2195
  2029   000F28  EF77  F007         	goto	l2199
  2030   000F2C                     l2205:
  2031                           
  2032                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2033   000F2C  5029               	movf	vfpfcnvrt@done^0,w,c
  2034   000F2E  B4D8               	btfsc	status,2,c
  2035   000F30  EF9C  F007         	goto	u1141
  2036   000F34  EF9E  F007         	goto	u1140
  2037   000F38                     u1141:
  2038   000F38  EF7B  F007         	goto	l2203
  2039   000F3C                     u1140:
  2040   000F3C                     
  2041                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  2042   000F3C  C021  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  2043   000F40  C022  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  2044   000F44  ECF7  F00A         	call	_read_prec_or_width	;wreg free
  2045   000F48  C007  F088         	movff	?_read_prec_or_width,_width
  2046   000F4C  C008  F089         	movff	?_read_prec_or_width+1,_width+1
  2047   000F50                     
  2048                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  2049   000F50  0100               	movlb	0	; () banked
  2050   000F52  BF89               	btfsc	(_width+1)& (0+255),7,b
  2051   000F54  EFB0  F007         	goto	u1150
  2052   000F58  EFAE  F007         	goto	u1151
  2053   000F5C                     u1151:
  2054   000F5C  EFB5  F007         	goto	l2213
  2055   000F60                     u1150:
  2056   000F60                     
  2057                           ; BSR set to: 0
  2058                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  2059   000F60  818C               	bsf	_flags& (0+255),0,b
  2060                           
  2061                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  2062   000F62  6D88               	negf	_width& (0+255),b
  2063   000F64  1F89               	comf	(_width+1)& (0+255),f,b
  2064   000F66  B0D8               	btfsc	status,0,c
  2065   000F68  2B89               	incf	(_width+1)& (0+255),f,b
  2066   000F6A                     l2213:
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2070   000F6A  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2071   000F6C  6ED9               	movwf	fsr2l,c
  2072   000F6E  6ADA               	clrf	fsr2h,c
  2073   000F70  50DF               	movf	indf2,w,c
  2074   000F72  6E2A               	movwf	vfpfcnvrt@cp^0,c
  2075   000F74                     
  2076                           ; BSR set to: 0
  2077                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2078   000F74  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2079   000F78                     	if	1	;There is more than 1 active tblptr byte
  2080   000F78  0E0E               	movlw	high __smallconst
  2081   000F7A  6EF7               	movwf	tblptrh,c
  2082   000F7C                     	endif
  2083   000F7C                     	if	0	;tblptru may be non-zero
  2084   000F7C                     	endif
  2085   000F7C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2086   000F7C  0E00               	movlw	low (__smallconst shr (0+16))
  2087   000F7E  6EF8               	movwf	tblptru,c
  2088   000F80                     	endif
  2089   000F80  0008               	tblrd		*
  2090   000F82  50F5               	movf	tablat,w,c
  2091   000F84  0A64               	xorlw	100
  2092   000F86  B4D8               	btfsc	status,2,c
  2093   000F88  EFC8  F007         	goto	u1161
  2094   000F8C  EFCA  F007         	goto	u1160
  2095   000F90                     u1161:
  2096   000F90  EFDA  F007         	goto	l2219
  2097   000F94                     u1160:
  2098   000F94                     
  2099                           ; BSR set to: 0
  2100   000F94  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2101   000F98                     	if	1	;There is more than 1 active tblptr byte
  2102   000F98  0E0E               	movlw	high __smallconst
  2103   000F9A  6EF7               	movwf	tblptrh,c
  2104   000F9C                     	endif
  2105   000F9C                     	if	0	;tblptru may be non-zero
  2106   000F9C                     	endif
  2107   000F9C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2108   000F9C  0E00               	movlw	low (__smallconst shr (0+16))
  2109   000F9E  6EF8               	movwf	tblptru,c
  2110   000FA0                     	endif
  2111   000FA0  0008               	tblrd		*
  2112   000FA2  50F5               	movf	tablat,w,c
  2113   000FA4  0A69               	xorlw	105
  2114   000FA6  A4D8               	btfss	status,2,c
  2115   000FA8  EFD8  F007         	goto	u1171
  2116   000FAC  EFDA  F007         	goto	u1170
  2117   000FB0                     u1171:
  2118   000FB0  EFF5  F007         	goto	l2227
  2119   000FB4                     u1170:
  2120   000FB4                     l2219:
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2124   000FB4  5022               	movf	vfpfcnvrt@ap^0,w,c
  2125   000FB6  6ED9               	movwf	fsr2l,c
  2126   000FB8  6ADA               	clrf	fsr2h,c
  2127   000FBA  0E02               	movlw	2
  2128   000FBC  26DF               	addwf	indf2,f,c
  2129   000FBE  5CDF               	subwf	indf2,w,c
  2130   000FC0  6ED9               	movwf	fsr2l,c
  2131   000FC2  6ADA               	clrf	fsr2h,c
  2132   000FC4  CFDE F025          	movff	postinc2,vfpfcnvrt@convarg
  2133   000FC8  CFDE F026          	movff	postinc2,vfpfcnvrt@convarg+1
  2134   000FCC                     
  2135                           ; BSR set to: 0
  2136                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  2137   000FCC  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2138   000FCE  6ED9               	movwf	fsr2l,c
  2139   000FD0  6ADA               	clrf	fsr2h,c
  2140   000FD2  282A               	incf	vfpfcnvrt@cp^0,w,c
  2141   000FD4  6EDF               	movwf	indf2,c
  2142   000FD6                     
  2143                           ; BSR set to: 0
  2144                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  2145   000FD6  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  2146   000FDA  C025  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  2147   000FDE  C026  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2148   000FE2  ECD2  F008         	call	_dtoa	;wreg free
  2149   000FE6  EF0E  F008         	goto	l1153
  2150   000FEA                     l2227:
  2151                           
  2152                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2153   000FEA  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2154   000FEC  6ED9               	movwf	fsr2l,c
  2155   000FEE  6ADA               	clrf	fsr2h,c
  2156   000FF0  2ADF               	incf	indf2,f,c
  2157   000FF2  EF0E  F008         	goto	l1153
  2158   000FF6                     l2231:
  2159                           
  2160                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2161   000FF6  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2162   000FF8  6ED9               	movwf	fsr2l,c
  2163   000FFA  6ADA               	clrf	fsr2h,c
  2164   000FFC  CFDF FFF6          	movff	indf2,tblptrl
  2165   001000                     	if	1	;There is more than 1 active tblptr byte
  2166   001000  0E0E               	movlw	high __smallconst
  2167   001002  6EF7               	movwf	tblptrh,c
  2168   001004                     	endif
  2169   001004                     	if	0	;tblptru may be non-zero
  2170   001004                     	endif
  2171   001004                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2172   001004  0E00               	movlw	low (__smallconst shr (0+16))
  2173   001006  6EF8               	movwf	tblptru,c
  2174   001008                     	endif
  2175   001008  0008               	tblrd		*
  2176   00100A  50F5               	movf	tablat,w,c
  2177   00100C  6E01               	movwf	fputc@c^0,c
  2178   00100E  6A02               	clrf	(fputc@c+1)^0,c
  2179   001010  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2180   001014  ECE9  F009         	call	_fputc	;wreg free
  2181   001018  EFF5  F007         	goto	l2227
  2182   00101C                     l1153:
  2183   00101C  0012               	return		;funcret
  2184   00101E                     __end_of_vfpfcnvrt:
  2185                           	callstack 0
  2186                           
  2187 ;; *************** function _read_prec_or_width *****************
  2188 ;; Defined at:
  2189 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  2192 ;;		 -> vfprintf@cfmt(1), 
  2193 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  2194 ;;		 -> sprintf@ap(1), 
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;  c               1    8[COMRAM] unsigned char 
  2197 ;;  n               2    9[COMRAM] int 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  2    6[COMRAM] int 
  2200 ;; Registers used:
  2201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2208 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2210 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2211 ;;Total ram usage:        5 bytes
  2212 ;; Hardware stack levels used: 1
  2213 ;; Hardware stack levels required when called: 1
  2214 ;; This function calls:
  2215 ;;		___wmul
  2216 ;; This function is called by:
  2217 ;;		_vfpfcnvrt
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text9
  2222   0015EE                     __ptext9:
  2223                           	callstack 0
  2224   0015EE                     _read_prec_or_width:
  2225                           	callstack 25
  2226   0015EE                     
  2227                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  2228   0015EE  0E00               	movlw	0
  2229   0015F0  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  2230   0015F2  0E00               	movlw	0
  2231   0015F4  6E0A               	movwf	read_prec_or_width@n^0,c
  2232   0015F6                     
  2233                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  2234   0015F6  5007               	movf	read_prec_or_width@fmt^0,w,c
  2235   0015F8  6ED9               	movwf	fsr2l,c
  2236   0015FA  6ADA               	clrf	fsr2h,c
  2237   0015FC  CFDF FFF6          	movff	indf2,tblptrl
  2238   001600                     	if	1	;There is more than 1 active tblptr byte
  2239   001600  0E0E               	movlw	high __smallconst
  2240   001602  6EF7               	movwf	tblptrh,c
  2241   001604                     	endif
  2242   001604                     	if	0	;tblptru may be non-zero
  2243   001604                     	endif
  2244   001604                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2245   001604  0E00               	movlw	low (__smallconst shr (0+16))
  2246   001606  6EF8               	movwf	tblptru,c
  2247   001608                     	endif
  2248   001608  0008               	tblrd		*
  2249   00160A  50F5               	movf	tablat,w,c
  2250   00160C  0A2A               	xorlw	42
  2251   00160E  A4D8               	btfss	status,2,c
  2252   001610  EF0C  F00B         	goto	u1111
  2253   001614  EF0E  F00B         	goto	u1110
  2254   001618                     u1111:
  2255   001618  EF34  F00B         	goto	l2183
  2256   00161C                     u1110:
  2257   00161C                     
  2258                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  2259   00161C  5007               	movf	read_prec_or_width@fmt^0,w,c
  2260   00161E  6ED9               	movwf	fsr2l,c
  2261   001620  6ADA               	clrf	fsr2h,c
  2262   001622  2ADF               	incf	indf2,f,c
  2263   001624                     
  2264                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  2265   001624  5008               	movf	read_prec_or_width@ap^0,w,c
  2266   001626  6ED9               	movwf	fsr2l,c
  2267   001628  6ADA               	clrf	fsr2h,c
  2268   00162A  0E02               	movlw	2
  2269   00162C  26DF               	addwf	indf2,f,c
  2270   00162E  5CDF               	subwf	indf2,w,c
  2271   001630  6ED9               	movwf	fsr2l,c
  2272   001632  6ADA               	clrf	fsr2h,c
  2273   001634  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  2274   001638  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  2275                           
  2276                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  2277   00163C  EF49  F00B         	goto	l1134
  2278   001640                     l2179:
  2279                           
  2280                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  2281   001640  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  2282   001644  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  2283   001648  0E00               	movlw	0
  2284   00164A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2285   00164C  0E0A               	movlw	10
  2286   00164E  6E03               	movwf	___wmul@multiplicand^0,c
  2287   001650  EC60  F00E         	call	___wmul	;wreg free
  2288   001654  5009               	movf	read_prec_or_width@c^0,w,c
  2289   001656  2401               	addwf	?___wmul^0,w,c
  2290   001658  6E0A               	movwf	read_prec_or_width@n^0,c
  2291   00165A  0E00               	movlw	0
  2292   00165C  2002               	addwfc	(?___wmul+1)^0,w,c
  2293   00165E  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  2294   001660                     
  2295                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  2296   001660  5007               	movf	read_prec_or_width@fmt^0,w,c
  2297   001662  6ED9               	movwf	fsr2l,c
  2298   001664  6ADA               	clrf	fsr2h,c
  2299   001666  2ADF               	incf	indf2,f,c
  2300   001668                     l2183:
  2301                           
  2302                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2303   001668  5007               	movf	read_prec_or_width@fmt^0,w,c
  2304   00166A  6ED9               	movwf	fsr2l,c
  2305   00166C  6ADA               	clrf	fsr2h,c
  2306   00166E  CFDF FFF6          	movff	indf2,tblptrl
  2307   001672                     	if	1	;There is more than 1 active tblptr byte
  2308   001672  0E0E               	movlw	high __smallconst
  2309   001674  6EF7               	movwf	tblptrh,c
  2310   001676                     	endif
  2311   001676                     	if	0	;tblptru may be non-zero
  2312   001676                     	endif
  2313   001676                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2314   001676  0E00               	movlw	low (__smallconst shr (0+16))
  2315   001678  6EF8               	movwf	tblptru,c
  2316   00167A                     	endif
  2317   00167A  0008               	tblrd		*
  2318   00167C  50F5               	movf	tablat,w,c
  2319   00167E  0FD0               	addlw	208
  2320   001680  6E09               	movwf	read_prec_or_width@c^0,c
  2321   001682  0E09               	movlw	9
  2322   001684  6409               	cpfsgt	read_prec_or_width@c^0,c
  2323   001686  EF47  F00B         	goto	u1121
  2324   00168A  EF49  F00B         	goto	u1120
  2325   00168E                     u1121:
  2326   00168E  EF20  F00B         	goto	l2179
  2327   001692                     u1120:
  2328   001692                     l1134:
  2329                           
  2330                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2331   001692  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  2332   001696  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  2333   00169A  0012               	return		;funcret
  2334   00169C                     __end_of_read_prec_or_width:
  2335                           	callstack 0
  2336                           
  2337 ;; *************** function ___wmul *****************
  2338 ;; Defined at:
  2339 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;  multiplier      2    0[COMRAM] unsigned int 
  2342 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  product         2    4[COMRAM] unsigned int 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  2    0[COMRAM] unsigned int 
  2347 ;; Registers used:
  2348 ;;		wreg, status,2, status,0, prodl, prodh
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2354 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2355 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2357 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2358 ;;Total ram usage:        6 bytes
  2359 ;; Hardware stack levels used: 1
  2360 ;; This function calls:
  2361 ;;		Nothing
  2362 ;; This function is called by:
  2363 ;;		_ADC2String
  2364 ;;		_read_prec_or_width
  2365 ;;		_setMotorPWM
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text10
  2370   001CC0                     __ptext10:
  2371                           	callstack 0
  2372   001CC0                     ___wmul:
  2373                           	callstack 25
  2374   001CC0  5001               	movf	___wmul@multiplier^0,w,c
  2375   001CC2  0203               	mulwf	___wmul@multiplicand^0,c
  2376   001CC4  CFF3 F005          	movff	prodl,___wmul@product
  2377   001CC8  CFF4 F006          	movff	prodh,___wmul@product+1
  2378   001CCC  5001               	movf	___wmul@multiplier^0,w,c
  2379   001CCE  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2380   001CD0  50F3               	movf	243,w,c
  2381   001CD2  2606               	addwf	(___wmul@product+1)^0,f,c
  2382   001CD4  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2383   001CD6  0203               	mulwf	___wmul@multiplicand^0,c
  2384   001CD8  50F3               	movf	243,w,c
  2385   001CDA  2606               	addwf	(___wmul@product+1)^0,f,c
  2386   001CDC  C005  F001         	movff	___wmul@product,?___wmul
  2387   001CE0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2388   001CE4  0012               	return		;funcret
  2389   001CE6                     __end_of___wmul:
  2390                           	callstack 0
  2391                           
  2392 ;; *************** function _dtoa *****************
  2393 ;; Defined at:
  2394 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  2397 ;;		 -> sprintf@f(12), 
  2398 ;;  d               2   21[COMRAM] int 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  i               2   29[COMRAM] int 
  2401 ;;  w               2   26[COMRAM] int 
  2402 ;;  s               1   28[COMRAM] unsigned char 
  2403 ;;  p               1   25[COMRAM] _Bool 
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2413 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2414 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2416 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2417 ;;Total ram usage:       11 bytes
  2418 ;; Hardware stack levels used: 1
  2419 ;; Hardware stack levels required when called: 4
  2420 ;; This function calls:
  2421 ;;		___awdiv
  2422 ;;		___awmod
  2423 ;;		_abs
  2424 ;;		_pad
  2425 ;; This function is called by:
  2426 ;;		_vfpfcnvrt
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text11
  2431   0011A4                     __ptext11:
  2432                           	callstack 0
  2433   0011A4                     _dtoa:
  2434                           	callstack 22
  2435   0011A4                     
  2436                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  2437   0011A4  0E01               	movlw	1
  2438   0011A6  6E1A               	movwf	dtoa@p^0,c
  2439   0011A8                     
  2440                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  2441   0011A8  BE17               	btfsc	(dtoa@d+1)^0,7,c
  2442   0011AA  EFD9  F008         	goto	u1011
  2443   0011AE  EFDC  F008         	goto	u1010
  2444   0011B2                     u1011:
  2445   0011B2  0E01               	movlw	1
  2446   0011B4  EFDD  F008         	goto	u1020
  2447   0011B8                     u1010:
  2448   0011B8  0E00               	movlw	0
  2449   0011BA                     u1020:
  2450   0011BA  6E1D               	movwf	dtoa@s^0,c
  2451   0011BC                     
  2452                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  2453   0011BC  C088  F01B         	movff	_width,dtoa@w
  2454   0011C0  C089  F01C         	movff	_width+1,dtoa@w+1
  2455   0011C4                     
  2456                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  2457   0011C4  501D               	movf	dtoa@s^0,w,c
  2458   0011C6  B4D8               	btfsc	status,2,c
  2459   0011C8  EFE8  F008         	goto	u1031
  2460   0011CC  EFEA  F008         	goto	u1030
  2461   0011D0                     u1031:
  2462   0011D0  EF01  F009         	goto	l1117
  2463   0011D4                     u1030:
  2464   0011D4                     
  2465                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  2466   0011D4  061B               	decf	dtoa@w^0,f,c
  2467   0011D6  A0D8               	btfss	status,0,c
  2468   0011D8  061C               	decf	(dtoa@w+1)^0,f,c
  2469   0011DA                     
  2470                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  2471   0011DA  501D               	movf	dtoa@s^0,w,c
  2472   0011DC  A4D8               	btfss	status,2,c
  2473   0011DE  EFF3  F008         	goto	u1041
  2474   0011E2  EFF5  F008         	goto	u1040
  2475   0011E6                     u1041:
  2476   0011E6  EFFB  F008         	goto	l2135
  2477   0011EA                     u1040:
  2478   0011EA  0E00               	movlw	0
  2479   0011EC  6E19               	movwf	(_dtoa$2283+1)^0,c
  2480   0011EE  0E2B               	movlw	43
  2481   0011F0  6E18               	movwf	_dtoa$2283^0,c
  2482   0011F2  EFFF  F008         	goto	l2137
  2483   0011F6                     l2135:
  2484   0011F6  0E00               	movlw	0
  2485   0011F8  6E19               	movwf	(_dtoa$2283+1)^0,c
  2486   0011FA  0E2D               	movlw	45
  2487   0011FC  6E18               	movwf	_dtoa$2283^0,c
  2488   0011FE                     l2137:
  2489   0011FE  C018  F01D         	movff	_dtoa$2283,dtoa@s
  2490   001202                     l1117:
  2491                           
  2492                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  2493   001202  0E00               	movlw	0
  2494   001204  6E1F               	movwf	(dtoa@i+1)^0,c
  2495   001206  0E1F               	movlw	31
  2496   001208  6E1E               	movwf	dtoa@i^0,c
  2497   00120A                     
  2498                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  2499   00120A  0E00               	movlw	0
  2500   00120C  0100               	movlb	0	; () banked
  2501   00120E  6FAD               	movwf	(_dbuf+31)& (0+255),b
  2502                           
  2503                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2504   001210  EF37  F009         	goto	l2151
  2505   001214                     l2141:
  2506                           
  2507                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  2508   001214  061E               	decf	dtoa@i^0,f,c
  2509   001216  A0D8               	btfss	status,0,c
  2510   001218  061F               	decf	(dtoa@i+1)^0,f,c
  2511   00121A                     
  2512                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  2513   00121A  501E               	movf	dtoa@i^0,w,c
  2514   00121C  0F8E               	addlw	low _dbuf
  2515   00121E  6ED9               	movwf	fsr2l,c
  2516   001220  6ADA               	clrf	fsr2h,c
  2517   001222  C016  F001         	movff	dtoa@d,___awmod@dividend
  2518   001226  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  2519   00122A  0E00               	movlw	0
  2520   00122C  6E04               	movwf	(___awmod@divisor+1)^0,c
  2521   00122E  0E0A               	movlw	10
  2522   001230  6E03               	movwf	___awmod@divisor^0,c
  2523   001232  EC9F  F00A         	call	___awmod	;wreg free
  2524   001236  C001  F007         	movff	?___awmod,abs@a
  2525   00123A  C002  F008         	movff	?___awmod+1,abs@a+1
  2526   00123E  EC03  F00E         	call	_abs	;wreg free
  2527   001242  5007               	movf	?_abs^0,w,c
  2528   001244  0F30               	addlw	48
  2529   001246  6EDF               	movwf	indf2,c
  2530   001248                     
  2531                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2532   001248  0E00               	movlw	0
  2533   00124A  6E1A               	movwf	dtoa@p^0,c
  2534   00124C                     
  2535                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  2536   00124C  061B               	decf	dtoa@w^0,f,c
  2537   00124E  A0D8               	btfss	status,0,c
  2538   001250  061C               	decf	(dtoa@w+1)^0,f,c
  2539   001252                     
  2540                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  2541   001252  C016  F001         	movff	dtoa@d,___awdiv@dividend
  2542   001256  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  2543   00125A  0E00               	movlw	0
  2544   00125C  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2545   00125E  0E0A               	movlw	10
  2546   001260  6E03               	movwf	___awdiv@divisor^0,c
  2547   001262  EC87  F009         	call	___awdiv	;wreg free
  2548   001266  C001  F016         	movff	?___awdiv,dtoa@d
  2549   00126A  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  2550   00126E                     l2151:
  2551                           
  2552                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2553   00126E  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  2554   001270  EF42  F009         	goto	u1051
  2555   001274  501F               	movf	(dtoa@i+1)^0,w,c
  2556   001276  E108               	bnz	u1050
  2557   001278  041E               	decf	dtoa@i^0,w,c
  2558   00127A  A0D8               	btfss	status,0,c
  2559   00127C  EF42  F009         	goto	u1051
  2560   001280  EF44  F009         	goto	u1050
  2561   001284                     u1051:
  2562   001284  EF6A  F009         	goto	l2161
  2563   001288                     u1050:
  2564   001288  5016               	movf	dtoa@d^0,w,c
  2565   00128A  1017               	iorwf	(dtoa@d+1)^0,w,c
  2566   00128C  A4D8               	btfss	status,2,c
  2567   00128E  EF4B  F009         	goto	u1061
  2568   001292  EF4D  F009         	goto	u1060
  2569   001296                     u1061:
  2570   001296  EF0A  F009         	goto	l2141
  2571   00129A                     u1060:
  2572   00129A  501A               	movf	dtoa@p^0,w,c
  2573   00129C  A4D8               	btfss	status,2,c
  2574   00129E  EF53  F009         	goto	u1071
  2575   0012A2  EF55  F009         	goto	u1070
  2576   0012A6                     u1071:
  2577   0012A6  EF0A  F009         	goto	l2141
  2578   0012AA                     u1070:
  2579   0012AA  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  2580   0012AC  EF60  F009         	goto	u1081
  2581   0012B0  501C               	movf	(dtoa@w+1)^0,w,c
  2582   0012B2  E108               	bnz	u1080
  2583   0012B4  041B               	decf	dtoa@w^0,w,c
  2584   0012B6  A0D8               	btfss	status,0,c
  2585   0012B8  EF60  F009         	goto	u1081
  2586   0012BC  EF62  F009         	goto	u1080
  2587   0012C0                     u1081:
  2588   0012C0  EF6A  F009         	goto	l2161
  2589   0012C4                     u1080:
  2590   0012C4  0100               	movlb	0	; () banked
  2591   0012C6  B38C               	btfsc	_flags& (0+255),1,b
  2592   0012C8  EF68  F009         	goto	u1091
  2593   0012CC  EF6A  F009         	goto	u1090
  2594   0012D0                     u1091:
  2595   0012D0  EF0A  F009         	goto	l2141
  2596   0012D4                     u1090:
  2597   0012D4                     l2161:
  2598                           
  2599                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  2600   0012D4  501D               	movf	dtoa@s^0,w,c
  2601   0012D6  B4D8               	btfsc	status,2,c
  2602   0012D8  EF70  F009         	goto	u1101
  2603   0012DC  EF72  F009         	goto	u1100
  2604   0012E0                     u1101:
  2605   0012E0  EF7B  F009         	goto	l2167
  2606   0012E4                     u1100:
  2607   0012E4                     
  2608                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  2609   0012E4  061E               	decf	dtoa@i^0,f,c
  2610   0012E6  A0D8               	btfss	status,0,c
  2611   0012E8  061F               	decf	(dtoa@i+1)^0,f,c
  2612   0012EA                     
  2613                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  2614   0012EA  501E               	movf	dtoa@i^0,w,c
  2615   0012EC  0F8E               	addlw	low _dbuf
  2616   0012EE  6ED9               	movwf	fsr2l,c
  2617   0012F0  6ADA               	clrf	fsr2h,c
  2618   0012F2  C01D  FFDF         	movff	dtoa@s,indf2
  2619   0012F6                     l2167:
  2620                           
  2621                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2622   0012F6  C015  F00E         	movff	dtoa@fp,pad@fp
  2623   0012FA  501E               	movf	dtoa@i^0,w,c
  2624   0012FC  0F8E               	addlw	low _dbuf
  2625   0012FE  6E0F               	movwf	pad@buf^0,c
  2626   001300  C01B  F010         	movff	dtoa@w,pad@p
  2627   001304  C01C  F011         	movff	dtoa@w+1,pad@p+1
  2628   001308  ECE9  F00B         	call	_pad	;wreg free
  2629   00130C  0012               	return		;funcret
  2630   00130E                     __end_of_dtoa:
  2631                           	callstack 0
  2632                           
  2633 ;; *************** function _pad *****************
  2634 ;; Defined at:
  2635 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  2638 ;;		 -> sprintf@f(12), 
  2639 ;;  buf             1   14[COMRAM] PTR unsigned char 
  2640 ;;		 -> dbuf(32), 
  2641 ;;  p               2   15[COMRAM] int 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  i               2   18[COMRAM] int 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2653 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2654 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2655 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2656 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2657 ;;Total ram usage:        7 bytes
  2658 ;; Hardware stack levels used: 1
  2659 ;; Hardware stack levels required when called: 3
  2660 ;; This function calls:
  2661 ;;		_fputc
  2662 ;;		_fputs
  2663 ;; This function is called by:
  2664 ;;		_dtoa
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           	psect	text12
  2669   0017D2                     __ptext12:
  2670                           	callstack 0
  2671   0017D2                     _pad:
  2672                           	callstack 22
  2673   0017D2                     
  2674                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2675   0017D2  0100               	movlb	0	; () banked
  2676   0017D4  A18C               	btfss	_flags& (0+255),0,b
  2677   0017D6  EFEF  F00B         	goto	u961
  2678   0017DA  EFF1  F00B         	goto	u960
  2679   0017DE                     u961:
  2680   0017DE  EFF7  F00B         	goto	l2105
  2681   0017E2                     u960:
  2682   0017E2                     
  2683                           ; BSR set to: 0
  2684                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2685   0017E2  C00F  F009         	movff	pad@buf,fputs@s
  2686   0017E6  C00E  F00A         	movff	pad@fp,fputs@fp
  2687   0017EA  ECAD  F00D         	call	_fputs	;wreg free
  2688   0017EE                     l2105:
  2689                           
  2690                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2691   0017EE  BE11               	btfsc	(pad@p+1)^0,7,c
  2692   0017F0  EFFE  F00B         	goto	u970
  2693   0017F4  EFFC  F00B         	goto	u971
  2694   0017F8                     u971:
  2695   0017F8  EF02  F00C         	goto	l1109
  2696   0017FC                     u970:
  2697   0017FC                     
  2698                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2699   0017FC  0E00               	movlw	0
  2700   0017FE  6E11               	movwf	(pad@p+1)^0,c
  2701   001800  0E00               	movlw	0
  2702   001802  6E10               	movwf	pad@p^0,c
  2703   001804                     l1109:
  2704                           
  2705                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2706   001804  0E00               	movlw	0
  2707   001806  6E14               	movwf	(pad@i+1)^0,c
  2708   001808  0E00               	movlw	0
  2709   00180A  6E13               	movwf	pad@i^0,c
  2710                           
  2711                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2712   00180C  EF12  F00C         	goto	l2113
  2713   001810                     l2109:
  2714                           
  2715                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2716   001810  0E00               	movlw	0
  2717   001812  6E02               	movwf	(fputc@c+1)^0,c
  2718   001814  0E20               	movlw	32
  2719   001816  6E01               	movwf	fputc@c^0,c
  2720   001818  C00E  F003         	movff	pad@fp,fputc@fp
  2721   00181C  ECE9  F009         	call	_fputc	;wreg free
  2722   001820                     
  2723                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2724   001820  4A13               	infsnz	pad@i^0,f,c
  2725   001822  2A14               	incf	(pad@i+1)^0,f,c
  2726   001824                     l2113:
  2727                           
  2728                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2729   001824  5010               	movf	pad@p^0,w,c
  2730   001826  5C13               	subwf	pad@i^0,w,c
  2731   001828  5014               	movf	(pad@i+1)^0,w,c
  2732   00182A  0A80               	xorlw	128
  2733   00182C  6E12               	movwf	??_pad^0,c
  2734   00182E  5011               	movf	(pad@p+1)^0,w,c
  2735   001830  0A80               	xorlw	128
  2736   001832  5812               	subwfb	??_pad^0,w,c
  2737   001834  A0D8               	btfss	status,0,c
  2738   001836  EF1F  F00C         	goto	u981
  2739   00183A  EF21  F00C         	goto	u980
  2740   00183E                     u981:
  2741   00183E  EF08  F00C         	goto	l2109
  2742   001842                     u980:
  2743   001842                     
  2744                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2745   001842  0100               	movlb	0	; () banked
  2746   001844  B18C               	btfsc	_flags& (0+255),0,b
  2747   001846  EF27  F00C         	goto	u991
  2748   00184A  EF29  F00C         	goto	u990
  2749   00184E                     u991:
  2750   00184E  EF2F  F00C         	goto	l1114
  2751   001852                     u990:
  2752   001852                     
  2753                           ; BSR set to: 0
  2754                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2755   001852  C00F  F009         	movff	pad@buf,fputs@s
  2756   001856  C00E  F00A         	movff	pad@fp,fputs@fp
  2757   00185A  ECAD  F00D         	call	_fputs	;wreg free
  2758   00185E                     l1114:
  2759   00185E  0012               	return		;funcret
  2760   001860                     __end_of_pad:
  2761                           	callstack 0
  2762                           
  2763 ;; *************** function _fputs *****************
  2764 ;; Defined at:
  2765 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;  s               1    8[COMRAM] PTR const unsigned char 
  2768 ;;		 -> dbuf(32), 
  2769 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  2770 ;;		 -> sprintf@f(12), 
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;  i               2   11[COMRAM] int 
  2773 ;;  c               1   10[COMRAM] unsigned char 
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  2    8[COMRAM] int 
  2776 ;; Registers used:
  2777 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2783 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2784 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2786 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2787 ;;Total ram usage:        5 bytes
  2788 ;; Hardware stack levels used: 1
  2789 ;; Hardware stack levels required when called: 2
  2790 ;; This function calls:
  2791 ;;		_fputc
  2792 ;; This function is called by:
  2793 ;;		_pad
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           	psect	text13
  2798   001B5A                     __ptext13:
  2799                           	callstack 0
  2800   001B5A                     _fputs:
  2801                           	callstack 22
  2802   001B5A  0E00               	movlw	0
  2803   001B5C  6E0D               	movwf	(fputs@i+1)^0,c
  2804   001B5E  0E00               	movlw	0
  2805   001B60  6E0C               	movwf	fputs@i^0,c
  2806   001B62  EFBC  F00D         	goto	l2013
  2807   001B66                     l2009:
  2808   001B66  C00B  F001         	movff	fputs@c,fputc@c
  2809   001B6A  6A02               	clrf	(fputc@c+1)^0,c
  2810   001B6C  C00A  F003         	movff	fputs@fp,fputc@fp
  2811   001B70  ECE9  F009         	call	_fputc	;wreg free
  2812   001B74  4A0C               	infsnz	fputs@i^0,f,c
  2813   001B76  2A0D               	incf	(fputs@i+1)^0,f,c
  2814   001B78                     l2013:
  2815   001B78  5009               	movf	fputs@s^0,w,c
  2816   001B7A  240C               	addwf	fputs@i^0,w,c
  2817   001B7C  6ED9               	movwf	fsr2l,c
  2818   001B7E  6ADA               	clrf	fsr2h,c
  2819   001B80  50DF               	movf	indf2,w,c
  2820   001B82  6E0B               	movwf	fputs@c^0,c
  2821   001B84  500B               	movf	fputs@c^0,w,c
  2822   001B86  A4D8               	btfss	status,2,c
  2823   001B88  EFC8  F00D         	goto	u831
  2824   001B8C  EFCA  F00D         	goto	u830
  2825   001B90                     u831:
  2826   001B90  EFB3  F00D         	goto	l2009
  2827   001B94                     u830:
  2828   001B94  0012               	return		;funcret
  2829   001B96                     __end_of_fputs:
  2830                           	callstack 0
  2831                           
  2832 ;; *************** function _fputc *****************
  2833 ;; Defined at:
  2834 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  c               2    0[COMRAM] int 
  2837 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2838 ;;		 -> sprintf@f(12), 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  2    0[COMRAM] int 
  2843 ;; Registers used:
  2844 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2850 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2852 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2853 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2854 ;;Total ram usage:        8 bytes
  2855 ;; Hardware stack levels used: 1
  2856 ;; Hardware stack levels required when called: 1
  2857 ;; This function calls:
  2858 ;;		_putch
  2859 ;; This function is called by:
  2860 ;;		_pad
  2861 ;;		_vfpfcnvrt
  2862 ;;		_fputs
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text14
  2867   0013D2                     __ptext14:
  2868                           	callstack 0
  2869   0013D2                     _fputc:
  2870                           	callstack 25
  2871   0013D2  5003               	movf	fputc@fp^0,w,c
  2872   0013D4  B4D8               	btfsc	status,2,c
  2873   0013D6  EFEF  F009         	goto	u791
  2874   0013DA  EFF1  F009         	goto	u790
  2875   0013DE                     u791:
  2876   0013DE  EFF9  F009         	goto	l1997
  2877   0013E2                     u790:
  2878   0013E2  5003               	movf	fputc@fp^0,w,c
  2879   0013E4  A4D8               	btfss	status,2,c
  2880   0013E6  EFF7  F009         	goto	u801
  2881   0013EA  EFF9  F009         	goto	u800
  2882   0013EE                     u801:
  2883   0013EE  EFFE  F009         	goto	l1999
  2884   0013F2                     u800:
  2885   0013F2                     l1997:
  2886   0013F2  5001               	movf	fputc@c^0,w,c
  2887   0013F4  ECC0  F00E         	call	_putch
  2888   0013F8  EF45  F00A         	goto	l1178
  2889   0013FC                     l1999:
  2890   0013FC  5003               	movf	fputc@fp^0,w,c
  2891   0013FE  6ED9               	movwf	fsr2l,c
  2892   001400  6ADA               	clrf	fsr2h,c
  2893   001402  0E0A               	movlw	10
  2894   001404  26D9               	addwf	fsr2l,f,c
  2895   001406  50DE               	movf	postinc2,w,c
  2896   001408  10DE               	iorwf	postinc2,w,c
  2897   00140A  B4D8               	btfsc	status,2,c
  2898   00140C  EF0A  F00A         	goto	u811
  2899   001410  EF0C  F00A         	goto	u810
  2900   001414                     u811:
  2901   001414  EF25  F00A         	goto	l2003
  2902   001418                     u810:
  2903   001418  5003               	movf	fputc@fp^0,w,c
  2904   00141A  6ED9               	movwf	fsr2l,c
  2905   00141C  6ADA               	clrf	fsr2h,c
  2906   00141E  0E0A               	movlw	10
  2907   001420  26D9               	addwf	fsr2l,f,c
  2908   001422  5003               	movf	fputc@fp^0,w,c
  2909   001424  6EE1               	movwf	fsr1l,c
  2910   001426  6AE2               	clrf	fsr1h,c
  2911   001428  0E03               	movlw	3
  2912   00142A  26E1               	addwf	fsr1l,f,c
  2913   00142C  50DE               	movf	postinc2,w,c
  2914   00142E  5CE6               	subwf	postinc1,w,c
  2915   001430  50E6               	movf	postinc1,w,c
  2916   001432  0A80               	xorlw	128
  2917   001434  6E08               	movwf	(??_fputc+4)^0,c
  2918   001436  50DE               	movf	postinc2,w,c
  2919   001438  0A80               	xorlw	128
  2920   00143A  5808               	subwfb	(??_fputc+4)^0,w,c
  2921   00143C  B0D8               	btfsc	status,0,c
  2922   00143E  EF23  F00A         	goto	u821
  2923   001442  EF25  F00A         	goto	u820
  2924   001446                     u821:
  2925   001446  EF45  F00A         	goto	l1178
  2926   00144A                     u820:
  2927   00144A                     l2003:
  2928   00144A  5003               	movf	fputc@fp^0,w,c
  2929   00144C  6ED9               	movwf	fsr2l,c
  2930   00144E  6ADA               	clrf	fsr2h,c
  2931   001450  0E03               	movlw	3
  2932   001452  26D9               	addwf	fsr2l,f,c
  2933   001454  CFDE F004          	movff	postinc2,??_fputc
  2934   001458  CFDD F005          	movff	postdec2,??_fputc+1
  2935   00145C  5003               	movf	fputc@fp^0,w,c
  2936   00145E  6ED9               	movwf	fsr2l,c
  2937   001460  6ADA               	clrf	fsr2h,c
  2938   001462  CFDE F006          	movff	postinc2,??_fputc+2
  2939   001466  CFDD F007          	movff	postdec2,??_fputc+3
  2940   00146A  5004               	movf	??_fputc^0,w,c
  2941   00146C  2406               	addwf	(??_fputc+2)^0,w,c
  2942   00146E  6ED9               	movwf	fsr2l,c
  2943   001470  5005               	movf	(??_fputc+1)^0,w,c
  2944   001472  2007               	addwfc	(??_fputc+3)^0,w,c
  2945   001474  6EDA               	movwf	fsr2h,c
  2946   001476  C001  FFDF         	movff	fputc@c,indf2
  2947   00147A  5003               	movf	fputc@fp^0,w,c
  2948   00147C  6ED9               	movwf	fsr2l,c
  2949   00147E  6ADA               	clrf	fsr2h,c
  2950   001480  0E03               	movlw	3
  2951   001482  26D9               	addwf	fsr2l,f,c
  2952   001484  2ADE               	incf	postinc2,f,c
  2953   001486  0E00               	movlw	0
  2954   001488  22DD               	addwfc	postdec2,f,c
  2955   00148A                     l1178:
  2956   00148A  0012               	return		;funcret
  2957   00148C                     __end_of_fputc:
  2958                           	callstack 0
  2959                           
  2960 ;; *************** function _putch *****************
  2961 ;; Defined at:
  2962 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;  c               1    wreg     unsigned char 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  c               1    0[COMRAM] unsigned char 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2980 ;;Total ram usage:        0 bytes
  2981 ;; Hardware stack levels used: 1
  2982 ;; This function calls:
  2983 ;;		Nothing
  2984 ;; This function is called by:
  2985 ;;		_fputc
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text15
  2990   001D80                     __ptext15:
  2991                           	callstack 0
  2992   001D80                     _putch:
  2993                           	callstack 25
  2994   001D80  0012               	return		;funcret
  2995   001D82                     __end_of_putch:
  2996                           	callstack 0
  2997                           
  2998 ;; *************** function _abs *****************
  2999 ;; Defined at:
  3000 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  a               2    6[COMRAM] int 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;		None
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  2    6[COMRAM] int 
  3007 ;; Registers used:
  3008 ;;		wreg, status,2, status,0
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3014 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3016 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3017 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3018 ;;Total ram usage:        4 bytes
  3019 ;; Hardware stack levels used: 1
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_dtoa
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text16
  3028   001C06                     __ptext16:
  3029                           	callstack 0
  3030   001C06                     _abs:
  3031                           	callstack 25
  3032   001C06  BE08               	btfsc	(abs@a+1)^0,7,c
  3033   001C08  EF08  F00E         	goto	u1001
  3034   001C0C  EF0A  F00E         	goto	u1000
  3035   001C10                     u1001:
  3036   001C10  EF10  F00E         	goto	l1163
  3037   001C14                     u1000:
  3038   001C14  C007  F007         	movff	abs@a,?_abs
  3039   001C18  C008  F008         	movff	abs@a+1,?_abs+1
  3040   001C1C  EF1C  F00E         	goto	l1166
  3041   001C20                     l1163:
  3042   001C20  C007  F009         	movff	abs@a,??_abs
  3043   001C24  C008  F00A         	movff	abs@a+1,??_abs+1
  3044   001C28  1E09               	comf	??_abs^0,f,c
  3045   001C2A  1E0A               	comf	(??_abs+1)^0,f,c
  3046   001C2C  4A09               	infsnz	??_abs^0,f,c
  3047   001C2E  2A0A               	incf	(??_abs+1)^0,f,c
  3048   001C30  C009  F007         	movff	??_abs,?_abs
  3049   001C34  C00A  F008         	movff	??_abs+1,?_abs+1
  3050   001C38                     l1166:
  3051   001C38  0012               	return		;funcret
  3052   001C3A                     __end_of_abs:
  3053                           	callstack 0
  3054                           
  3055 ;; *************** function ___awmod *****************
  3056 ;; Defined at:
  3057 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  dividend        2    0[COMRAM] int 
  3060 ;;  divisor         2    2[COMRAM] int 
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;  sign            1    5[COMRAM] unsigned char 
  3063 ;;  counter         1    4[COMRAM] unsigned char 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  2    0[COMRAM] int 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3073 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3076 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3077 ;;Total ram usage:        6 bytes
  3078 ;; Hardware stack levels used: 1
  3079 ;; This function calls:
  3080 ;;		Nothing
  3081 ;; This function is called by:
  3082 ;;		_dtoa
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text17
  3087   00153E                     __ptext17:
  3088                           	callstack 0
  3089   00153E                     ___awmod:
  3090                           	callstack 25
  3091   00153E  0E00               	movlw	0
  3092   001540  6E06               	movwf	___awmod@sign^0,c
  3093   001542  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  3094   001544  EFA8  F00A         	goto	u900
  3095   001548  EFA6  F00A         	goto	u901
  3096   00154C                     u901:
  3097   00154C  EFAE  F00A         	goto	l2073
  3098   001550                     u900:
  3099   001550  6C01               	negf	___awmod@dividend^0,c
  3100   001552  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3101   001554  B0D8               	btfsc	status,0,c
  3102   001556  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3103   001558  0E01               	movlw	1
  3104   00155A  6E06               	movwf	___awmod@sign^0,c
  3105   00155C                     l2073:
  3106   00155C  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  3107   00155E  EFB5  F00A         	goto	u910
  3108   001562  EFB3  F00A         	goto	u911
  3109   001566                     u911:
  3110   001566  EFB9  F00A         	goto	l2077
  3111   00156A                     u910:
  3112   00156A  6C03               	negf	___awmod@divisor^0,c
  3113   00156C  1E04               	comf	(___awmod@divisor+1)^0,f,c
  3114   00156E  B0D8               	btfsc	status,0,c
  3115   001570  2A04               	incf	(___awmod@divisor+1)^0,f,c
  3116   001572                     l2077:
  3117   001572  5003               	movf	___awmod@divisor^0,w,c
  3118   001574  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  3119   001576  B4D8               	btfsc	status,2,c
  3120   001578  EFC0  F00A         	goto	u921
  3121   00157C  EFC2  F00A         	goto	u920
  3122   001580                     u921:
  3123   001580  EFE6  F00A         	goto	l2093
  3124   001584                     u920:
  3125   001584  0E01               	movlw	1
  3126   001586  6E05               	movwf	___awmod@counter^0,c
  3127   001588  EFCA  F00A         	goto	l2083
  3128   00158C                     l2081:
  3129   00158C  90D8               	bcf	status,0,c
  3130   00158E  3603               	rlcf	___awmod@divisor^0,f,c
  3131   001590  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  3132   001592  2A05               	incf	___awmod@counter^0,f,c
  3133   001594                     l2083:
  3134   001594  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  3135   001596  EFCF  F00A         	goto	u931
  3136   00159A  EFD1  F00A         	goto	u930
  3137   00159E                     u931:
  3138   00159E  EFC6  F00A         	goto	l2081
  3139   0015A2                     u930:
  3140   0015A2                     l2085:
  3141   0015A2  5003               	movf	___awmod@divisor^0,w,c
  3142   0015A4  5C01               	subwf	___awmod@dividend^0,w,c
  3143   0015A6  5004               	movf	(___awmod@divisor+1)^0,w,c
  3144   0015A8  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  3145   0015AA  A0D8               	btfss	status,0,c
  3146   0015AC  EFDA  F00A         	goto	u941
  3147   0015B0  EFDC  F00A         	goto	u940
  3148   0015B4                     u941:
  3149   0015B4  EFE0  F00A         	goto	l2089
  3150   0015B8                     u940:
  3151   0015B8  5003               	movf	___awmod@divisor^0,w,c
  3152   0015BA  5E01               	subwf	___awmod@dividend^0,f,c
  3153   0015BC  5004               	movf	(___awmod@divisor+1)^0,w,c
  3154   0015BE  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  3155   0015C0                     l2089:
  3156   0015C0  90D8               	bcf	status,0,c
  3157   0015C2  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  3158   0015C4  3203               	rrcf	___awmod@divisor^0,f,c
  3159   0015C6  2E05               	decfsz	___awmod@counter^0,f,c
  3160   0015C8  EFD1  F00A         	goto	l2085
  3161   0015CC                     l2093:
  3162   0015CC  5006               	movf	___awmod@sign^0,w,c
  3163   0015CE  B4D8               	btfsc	status,2,c
  3164   0015D0  EFEC  F00A         	goto	u951
  3165   0015D4  EFEE  F00A         	goto	u950
  3166   0015D8                     u951:
  3167   0015D8  EFF2  F00A         	goto	l2097
  3168   0015DC                     u950:
  3169   0015DC  6C01               	negf	___awmod@dividend^0,c
  3170   0015DE  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3171   0015E0  B0D8               	btfsc	status,0,c
  3172   0015E2  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3173   0015E4                     l2097:
  3174   0015E4  C001  F001         	movff	___awmod@dividend,?___awmod
  3175   0015E8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3176   0015EC  0012               	return		;funcret
  3177   0015EE                     __end_of___awmod:
  3178                           	callstack 0
  3179                           
  3180 ;; *************** function ___awdiv *****************
  3181 ;; Defined at:
  3182 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;  dividend        2    0[COMRAM] int 
  3185 ;;  divisor         2    2[COMRAM] int 
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;  quotient        2    6[COMRAM] int 
  3188 ;;  sign            1    5[COMRAM] unsigned char 
  3189 ;;  counter         1    4[COMRAM] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  2    0[COMRAM] int 
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3199 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3200 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3202 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3203 ;;Total ram usage:        8 bytes
  3204 ;; Hardware stack levels used: 1
  3205 ;; This function calls:
  3206 ;;		Nothing
  3207 ;; This function is called by:
  3208 ;;		_dtoa
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text18
  3213   00130E                     __ptext18:
  3214                           	callstack 0
  3215   00130E                     ___awdiv:
  3216                           	callstack 25
  3217   00130E  0E00               	movlw	0
  3218   001310  6E06               	movwf	___awdiv@sign^0,c
  3219   001312  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  3220   001314  EF90  F009         	goto	u840
  3221   001318  EF8E  F009         	goto	u841
  3222   00131C                     u841:
  3223   00131C  EF96  F009         	goto	l2029
  3224   001320                     u840:
  3225   001320  6C03               	negf	___awdiv@divisor^0,c
  3226   001322  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  3227   001324  B0D8               	btfsc	status,0,c
  3228   001326  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  3229   001328  0E01               	movlw	1
  3230   00132A  6E06               	movwf	___awdiv@sign^0,c
  3231   00132C                     l2029:
  3232   00132C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  3233   00132E  EF9D  F009         	goto	u850
  3234   001332  EF9B  F009         	goto	u851
  3235   001336                     u851:
  3236   001336  EFA3  F009         	goto	l2035
  3237   00133A                     u850:
  3238   00133A  6C01               	negf	___awdiv@dividend^0,c
  3239   00133C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  3240   00133E  B0D8               	btfsc	status,0,c
  3241   001340  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  3242   001342  0E01               	movlw	1
  3243   001344  1A06               	xorwf	___awdiv@sign^0,f,c
  3244   001346                     l2035:
  3245   001346  0E00               	movlw	0
  3246   001348  6E08               	movwf	(___awdiv@quotient+1)^0,c
  3247   00134A  0E00               	movlw	0
  3248   00134C  6E07               	movwf	___awdiv@quotient^0,c
  3249   00134E  5003               	movf	___awdiv@divisor^0,w,c
  3250   001350  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  3251   001352  B4D8               	btfsc	status,2,c
  3252   001354  EFAE  F009         	goto	u861
  3253   001358  EFB0  F009         	goto	u860
  3254   00135C                     u861:
  3255   00135C  EFD8  F009         	goto	l2057
  3256   001360                     u860:
  3257   001360  0E01               	movlw	1
  3258   001362  6E05               	movwf	___awdiv@counter^0,c
  3259   001364  EFB8  F009         	goto	l2043
  3260   001368                     l2041:
  3261   001368  90D8               	bcf	status,0,c
  3262   00136A  3603               	rlcf	___awdiv@divisor^0,f,c
  3263   00136C  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  3264   00136E  2A05               	incf	___awdiv@counter^0,f,c
  3265   001370                     l2043:
  3266   001370  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  3267   001372  EFBD  F009         	goto	u871
  3268   001376  EFBF  F009         	goto	u870
  3269   00137A                     u871:
  3270   00137A  EFB4  F009         	goto	l2041
  3271   00137E                     u870:
  3272   00137E                     l2045:
  3273   00137E  90D8               	bcf	status,0,c
  3274   001380  3607               	rlcf	___awdiv@quotient^0,f,c
  3275   001382  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  3276   001384  5003               	movf	___awdiv@divisor^0,w,c
  3277   001386  5C01               	subwf	___awdiv@dividend^0,w,c
  3278   001388  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3279   00138A  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  3280   00138C  A0D8               	btfss	status,0,c
  3281   00138E  EFCB  F009         	goto	u881
  3282   001392  EFCD  F009         	goto	u880
  3283   001396                     u881:
  3284   001396  EFD2  F009         	goto	l2053
  3285   00139A                     u880:
  3286   00139A  5003               	movf	___awdiv@divisor^0,w,c
  3287   00139C  5E01               	subwf	___awdiv@dividend^0,f,c
  3288   00139E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3289   0013A0  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  3290   0013A2  8007               	bsf	___awdiv@quotient^0,0,c
  3291   0013A4                     l2053:
  3292   0013A4  90D8               	bcf	status,0,c
  3293   0013A6  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  3294   0013A8  3203               	rrcf	___awdiv@divisor^0,f,c
  3295   0013AA  2E05               	decfsz	___awdiv@counter^0,f,c
  3296   0013AC  EFBF  F009         	goto	l2045
  3297   0013B0                     l2057:
  3298   0013B0  5006               	movf	___awdiv@sign^0,w,c
  3299   0013B2  B4D8               	btfsc	status,2,c
  3300   0013B4  EFDE  F009         	goto	u891
  3301   0013B8  EFE0  F009         	goto	u890
  3302   0013BC                     u891:
  3303   0013BC  EFE4  F009         	goto	l2061
  3304   0013C0                     u890:
  3305   0013C0  6C07               	negf	___awdiv@quotient^0,c
  3306   0013C2  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  3307   0013C4  B0D8               	btfsc	status,0,c
  3308   0013C6  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  3309   0013C8                     l2061:
  3310   0013C8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3311   0013CC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3312   0013D0  0012               	return		;funcret
  3313   0013D2                     __end_of___awdiv:
  3314                           	callstack 0
  3315                           
  3316 ;; *************** function ___lwdiv *****************
  3317 ;; Defined at:
  3318 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  dividend        2    6[COMRAM] unsigned int 
  3321 ;;  divisor         2    8[COMRAM] unsigned int 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  quotient        2   10[COMRAM] unsigned int 
  3324 ;;  counter         1   12[COMRAM] unsigned char 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  2    6[COMRAM] unsigned int 
  3327 ;; Registers used:
  3328 ;;		wreg, status,2, status,0
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3334 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3335 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3337 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3338 ;;Total ram usage:        7 bytes
  3339 ;; Hardware stack levels used: 1
  3340 ;; This function calls:
  3341 ;;		Nothing
  3342 ;; This function is called by:
  3343 ;;		_ADC2String
  3344 ;;		_setMotorPWM
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text19
  3349   0018E6                     __ptext19:
  3350                           	callstack 0
  3351   0018E6                     ___lwdiv:
  3352                           	callstack 27
  3353   0018E6  0E00               	movlw	0
  3354   0018E8  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  3355   0018EA  0E00               	movlw	0
  3356   0018EC  6E0B               	movwf	___lwdiv@quotient^0,c
  3357   0018EE  5009               	movf	___lwdiv@divisor^0,w,c
  3358   0018F0  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3359   0018F2  B4D8               	btfsc	status,2,c
  3360   0018F4  EF7E  F00C         	goto	u1221
  3361   0018F8  EF80  F00C         	goto	u1220
  3362   0018FC                     u1221:
  3363   0018FC  EFA8  F00C         	goto	l902
  3364   001900                     u1220:
  3365   001900  0E01               	movlw	1
  3366   001902  6E0D               	movwf	___lwdiv@counter^0,c
  3367   001904  EF88  F00C         	goto	l2279
  3368   001908                     l2277:
  3369   001908  90D8               	bcf	status,0,c
  3370   00190A  3609               	rlcf	___lwdiv@divisor^0,f,c
  3371   00190C  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3372   00190E  2A0D               	incf	___lwdiv@counter^0,f,c
  3373   001910                     l2279:
  3374   001910  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  3375   001912  EF8D  F00C         	goto	u1231
  3376   001916  EF8F  F00C         	goto	u1230
  3377   00191A                     u1231:
  3378   00191A  EF84  F00C         	goto	l2277
  3379   00191E                     u1230:
  3380   00191E                     l2281:
  3381   00191E  90D8               	bcf	status,0,c
  3382   001920  360B               	rlcf	___lwdiv@quotient^0,f,c
  3383   001922  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3384   001924  5009               	movf	___lwdiv@divisor^0,w,c
  3385   001926  5C07               	subwf	___lwdiv@dividend^0,w,c
  3386   001928  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3387   00192A  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3388   00192C  A0D8               	btfss	status,0,c
  3389   00192E  EF9B  F00C         	goto	u1241
  3390   001932  EF9D  F00C         	goto	u1240
  3391   001936                     u1241:
  3392   001936  EFA2  F00C         	goto	l2289
  3393   00193A                     u1240:
  3394   00193A  5009               	movf	___lwdiv@divisor^0,w,c
  3395   00193C  5E07               	subwf	___lwdiv@dividend^0,f,c
  3396   00193E  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3397   001940  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3398   001942  800B               	bsf	___lwdiv@quotient^0,0,c
  3399   001944                     l2289:
  3400   001944  90D8               	bcf	status,0,c
  3401   001946  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3402   001948  3209               	rrcf	___lwdiv@divisor^0,f,c
  3403   00194A  2E0D               	decfsz	___lwdiv@counter^0,f,c
  3404   00194C  EF8F  F00C         	goto	l2281
  3405   001950                     l902:
  3406   001950  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  3407   001954  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3408   001958  0012               	return		;funcret
  3409   00195A                     __end_of___lwdiv:
  3410                           	callstack 0
  3411                           
  3412 ;; *************** function _color_read_Red *****************
  3413 ;; Defined at:
  3414 ;;		line 30 in file "color.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;		None
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  tmp             2    9[COMRAM] unsigned int 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  2    4[COMRAM] unsigned int 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3428 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3430 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3431 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3432 ;;Total ram usage:        7 bytes
  3433 ;; Hardware stack levels used: 1
  3434 ;; Hardware stack levels required when called: 2
  3435 ;; This function calls:
  3436 ;;		_I2C_2_Master_Read
  3437 ;;		_I2C_2_Master_RepStart
  3438 ;;		_I2C_2_Master_Start
  3439 ;;		_I2C_2_Master_Stop
  3440 ;;		_I2C_2_Master_Write
  3441 ;; This function is called by:
  3442 ;;		_test
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text20
  3447   00195A                     __ptext20:
  3448                           	callstack 0
  3449   00195A                     _color_read_Red:
  3450                           	callstack 27
  3451   00195A                     
  3452                           ;color.c: 32:  unsigned int tmp;;color.c: 33:  I2C_2_Master_Start();
  3453   00195A  ECBB  F00E         	call	_I2C_2_Master_Start	;wreg free
  3454                           
  3455                           ;color.c: 34:  I2C_2_Master_Write(0x52 | 0x00);
  3456   00195E  0E52               	movlw	82
  3457   001960  ECAB  F00E         	call	_I2C_2_Master_Write
  3458                           
  3459                           ;color.c: 35:  I2C_2_Master_Write(0xA0 | 0x16);
  3460   001964  0EB6               	movlw	182
  3461   001966  ECAB  F00E         	call	_I2C_2_Master_Write
  3462                           
  3463                           ;color.c: 36:  I2C_2_Master_RepStart();
  3464   00196A  ECB1  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  3465                           
  3466                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x01);
  3467   00196E  0E53               	movlw	83
  3468   001970  ECAB  F00E         	call	_I2C_2_Master_Write
  3469                           
  3470                           ;color.c: 38:  tmp=I2C_2_Master_Read(1);
  3471   001974  0E01               	movlw	1
  3472   001976  EC6E  F00D         	call	_I2C_2_Master_Read
  3473   00197A  6E07               	movwf	??_color_read_Red^0,c
  3474   00197C  5007               	movf	??_color_read_Red^0,w,c
  3475   00197E  6E0A               	movwf	color_read_Red@tmp^0,c
  3476   001980  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3477                           
  3478                           ;color.c: 39:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3479   001982  0E00               	movlw	0
  3480   001984  EC6E  F00D         	call	_I2C_2_Master_Read
  3481   001988  6E07               	movwf	??_color_read_Red^0,c
  3482   00198A  5007               	movf	??_color_read_Red^0,w,c
  3483   00198C  6E09               	movwf	(??_color_read_Red+2)^0,c
  3484   00198E  6A08               	clrf	(??_color_read_Red+1)^0,c
  3485   001990  500A               	movf	color_read_Red@tmp^0,w,c
  3486   001992  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3487   001994  6E0A               	movwf	color_read_Red@tmp^0,c
  3488   001996  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3489   001998  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3490   00199A  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3491                           
  3492                           ;color.c: 40:  I2C_2_Master_Stop();
  3493   00199C  ECB6  F00E         	call	_I2C_2_Master_Stop	;wreg free
  3494   0019A0                     
  3495                           ;color.c: 41:  return tmp;
  3496   0019A0  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3497   0019A4  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3498   0019A8  0012               	return		;funcret
  3499   0019AA                     __end_of_color_read_Red:
  3500                           	callstack 0
  3501                           
  3502 ;; *************** function _color_read_Green *****************
  3503 ;; Defined at:
  3504 ;;		line 44 in file "color.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;		None
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;  tmp             2    9[COMRAM] unsigned int 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  2    4[COMRAM] unsigned int 
  3511 ;; Registers used:
  3512 ;;		wreg, status,2, status,0, cstack
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3518 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3519 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3520 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3521 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3522 ;;Total ram usage:        7 bytes
  3523 ;; Hardware stack levels used: 1
  3524 ;; Hardware stack levels required when called: 2
  3525 ;; This function calls:
  3526 ;;		_I2C_2_Master_Read
  3527 ;;		_I2C_2_Master_RepStart
  3528 ;;		_I2C_2_Master_Start
  3529 ;;		_I2C_2_Master_Stop
  3530 ;;		_I2C_2_Master_Write
  3531 ;; This function is called by:
  3532 ;;		_test
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text21
  3537   0019AA                     __ptext21:
  3538                           	callstack 0
  3539   0019AA                     _color_read_Green:
  3540                           	callstack 27
  3541   0019AA                     
  3542                           ;color.c: 46:  unsigned int tmp;;color.c: 47:  I2C_2_Master_Start();
  3543   0019AA  ECBB  F00E         	call	_I2C_2_Master_Start	;wreg free
  3544                           
  3545                           ;color.c: 48:  I2C_2_Master_Write(0x52 | 0x00);
  3546   0019AE  0E52               	movlw	82
  3547   0019B0  ECAB  F00E         	call	_I2C_2_Master_Write
  3548                           
  3549                           ;color.c: 49:  I2C_2_Master_Write(0xA0 | 0x18);
  3550   0019B4  0EB8               	movlw	184
  3551   0019B6  ECAB  F00E         	call	_I2C_2_Master_Write
  3552                           
  3553                           ;color.c: 50:  I2C_2_Master_RepStart();
  3554   0019BA  ECB1  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  3555                           
  3556                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x01);
  3557   0019BE  0E53               	movlw	83
  3558   0019C0  ECAB  F00E         	call	_I2C_2_Master_Write
  3559                           
  3560                           ;color.c: 52:  tmp=I2C_2_Master_Read(1);
  3561   0019C4  0E01               	movlw	1
  3562   0019C6  EC6E  F00D         	call	_I2C_2_Master_Read
  3563   0019CA  6E07               	movwf	??_color_read_Green^0,c
  3564   0019CC  5007               	movf	??_color_read_Green^0,w,c
  3565   0019CE  6E0A               	movwf	color_read_Green@tmp^0,c
  3566   0019D0  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3567                           
  3568                           ;color.c: 53:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3569   0019D2  0E00               	movlw	0
  3570   0019D4  EC6E  F00D         	call	_I2C_2_Master_Read
  3571   0019D8  6E07               	movwf	??_color_read_Green^0,c
  3572   0019DA  5007               	movf	??_color_read_Green^0,w,c
  3573   0019DC  6E09               	movwf	(??_color_read_Green+2)^0,c
  3574   0019DE  6A08               	clrf	(??_color_read_Green+1)^0,c
  3575   0019E0  500A               	movf	color_read_Green@tmp^0,w,c
  3576   0019E2  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3577   0019E4  6E0A               	movwf	color_read_Green@tmp^0,c
  3578   0019E6  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3579   0019E8  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3580   0019EA  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3581                           
  3582                           ;color.c: 54:  I2C_2_Master_Stop();
  3583   0019EC  ECB6  F00E         	call	_I2C_2_Master_Stop	;wreg free
  3584   0019F0                     
  3585                           ;color.c: 55:  return tmp;
  3586   0019F0  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3587   0019F4  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3588   0019F8  0012               	return		;funcret
  3589   0019FA                     __end_of_color_read_Green:
  3590                           	callstack 0
  3591                           
  3592 ;; *************** function _color_read_Clear *****************
  3593 ;; Defined at:
  3594 ;;		line 73 in file "color.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;		None
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;  tmp             2    9[COMRAM] unsigned int 
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  2    4[COMRAM] unsigned int 
  3601 ;; Registers used:
  3602 ;;		wreg, status,2, status,0, cstack
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3608 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3610 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3611 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3612 ;;Total ram usage:        7 bytes
  3613 ;; Hardware stack levels used: 1
  3614 ;; Hardware stack levels required when called: 2
  3615 ;; This function calls:
  3616 ;;		_I2C_2_Master_Read
  3617 ;;		_I2C_2_Master_RepStart
  3618 ;;		_I2C_2_Master_Start
  3619 ;;		_I2C_2_Master_Stop
  3620 ;;		_I2C_2_Master_Write
  3621 ;; This function is called by:
  3622 ;;		_test
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text22
  3627   0019FA                     __ptext22:
  3628                           	callstack 0
  3629   0019FA                     _color_read_Clear:
  3630                           	callstack 27
  3631   0019FA                     
  3632                           ;color.c: 75:  unsigned int tmp;;color.c: 76:  I2C_2_Master_Start();
  3633   0019FA  ECBB  F00E         	call	_I2C_2_Master_Start	;wreg free
  3634                           
  3635                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x00);
  3636   0019FE  0E52               	movlw	82
  3637   001A00  ECAB  F00E         	call	_I2C_2_Master_Write
  3638                           
  3639                           ;color.c: 78:  I2C_2_Master_Write(0xA0 | 0x14);
  3640   001A04  0EB4               	movlw	180
  3641   001A06  ECAB  F00E         	call	_I2C_2_Master_Write
  3642                           
  3643                           ;color.c: 79:  I2C_2_Master_RepStart();
  3644   001A0A  ECB1  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  3645                           
  3646                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x01);
  3647   001A0E  0E53               	movlw	83
  3648   001A10  ECAB  F00E         	call	_I2C_2_Master_Write
  3649                           
  3650                           ;color.c: 81:  tmp=I2C_2_Master_Read(1);
  3651   001A14  0E01               	movlw	1
  3652   001A16  EC6E  F00D         	call	_I2C_2_Master_Read
  3653   001A1A  6E07               	movwf	??_color_read_Clear^0,c
  3654   001A1C  5007               	movf	??_color_read_Clear^0,w,c
  3655   001A1E  6E0A               	movwf	color_read_Clear@tmp^0,c
  3656   001A20  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3657                           
  3658                           ;color.c: 82:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3659   001A22  0E00               	movlw	0
  3660   001A24  EC6E  F00D         	call	_I2C_2_Master_Read
  3661   001A28  6E07               	movwf	??_color_read_Clear^0,c
  3662   001A2A  5007               	movf	??_color_read_Clear^0,w,c
  3663   001A2C  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3664   001A2E  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3665   001A30  500A               	movf	color_read_Clear@tmp^0,w,c
  3666   001A32  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3667   001A34  6E0A               	movwf	color_read_Clear@tmp^0,c
  3668   001A36  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3669   001A38  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3670   001A3A  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3671                           
  3672                           ;color.c: 83:  I2C_2_Master_Stop();
  3673   001A3C  ECB6  F00E         	call	_I2C_2_Master_Stop	;wreg free
  3674   001A40                     
  3675                           ;color.c: 84:  return tmp;
  3676   001A40  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3677   001A44  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3678   001A48  0012               	return		;funcret
  3679   001A4A                     __end_of_color_read_Clear:
  3680                           	callstack 0
  3681                           
  3682 ;; *************** function _color_read_Blue *****************
  3683 ;; Defined at:
  3684 ;;		line 58 in file "color.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;		None
  3687 ;; Auto vars:     Size  Location     Type
  3688 ;;  tmp             2    9[COMRAM] unsigned int 
  3689 ;; Return value:  Size  Location     Type
  3690 ;;                  2    4[COMRAM] unsigned int 
  3691 ;; Registers used:
  3692 ;;		wreg, status,2, status,0, cstack
  3693 ;; Tracked objects:
  3694 ;;		On entry : 0/0
  3695 ;;		On exit  : 0/0
  3696 ;;		Unchanged: 0/0
  3697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3698 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3700 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3701 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3702 ;;Total ram usage:        7 bytes
  3703 ;; Hardware stack levels used: 1
  3704 ;; Hardware stack levels required when called: 2
  3705 ;; This function calls:
  3706 ;;		_I2C_2_Master_Read
  3707 ;;		_I2C_2_Master_RepStart
  3708 ;;		_I2C_2_Master_Start
  3709 ;;		_I2C_2_Master_Stop
  3710 ;;		_I2C_2_Master_Write
  3711 ;; This function is called by:
  3712 ;;		_test
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           	psect	text23
  3717   001A4A                     __ptext23:
  3718                           	callstack 0
  3719   001A4A                     _color_read_Blue:
  3720                           	callstack 27
  3721   001A4A                     
  3722                           ;color.c: 60:  unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
  3723   001A4A  ECBB  F00E         	call	_I2C_2_Master_Start	;wreg free
  3724                           
  3725                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  3726   001A4E  0E52               	movlw	82
  3727   001A50  ECAB  F00E         	call	_I2C_2_Master_Write
  3728                           
  3729                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x1A);
  3730   001A54  0EBA               	movlw	186
  3731   001A56  ECAB  F00E         	call	_I2C_2_Master_Write
  3732                           
  3733                           ;color.c: 64:  I2C_2_Master_RepStart();
  3734   001A5A  ECB1  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  3735                           
  3736                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  3737   001A5E  0E53               	movlw	83
  3738   001A60  ECAB  F00E         	call	_I2C_2_Master_Write
  3739                           
  3740                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  3741   001A64  0E01               	movlw	1
  3742   001A66  EC6E  F00D         	call	_I2C_2_Master_Read
  3743   001A6A  6E07               	movwf	??_color_read_Blue^0,c
  3744   001A6C  5007               	movf	??_color_read_Blue^0,w,c
  3745   001A6E  6E0A               	movwf	color_read_Blue@tmp^0,c
  3746   001A70  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3747                           
  3748                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3749   001A72  0E00               	movlw	0
  3750   001A74  EC6E  F00D         	call	_I2C_2_Master_Read
  3751   001A78  6E07               	movwf	??_color_read_Blue^0,c
  3752   001A7A  5007               	movf	??_color_read_Blue^0,w,c
  3753   001A7C  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3754   001A7E  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3755   001A80  500A               	movf	color_read_Blue@tmp^0,w,c
  3756   001A82  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3757   001A84  6E0A               	movwf	color_read_Blue@tmp^0,c
  3758   001A86  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3759   001A88  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3760   001A8A  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3761                           
  3762                           ;color.c: 68:  I2C_2_Master_Stop();
  3763   001A8C  ECB6  F00E         	call	_I2C_2_Master_Stop	;wreg free
  3764   001A90                     
  3765                           ;color.c: 69:  return tmp;
  3766   001A90  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3767   001A94  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3768   001A98  0012               	return		;funcret
  3769   001A9A                     __end_of_color_read_Blue:
  3770                           	callstack 0
  3771                           
  3772 ;; *************** function _I2C_2_Master_RepStart *****************
  3773 ;; Defined at:
  3774 ;;		line 33 in file "i2c.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;		None
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3792 ;;Total ram usage:        0 bytes
  3793 ;; Hardware stack levels used: 1
  3794 ;; Hardware stack levels required when called: 1
  3795 ;; This function calls:
  3796 ;;		_I2C_2_Master_Idle
  3797 ;; This function is called by:
  3798 ;;		_color_read_Red
  3799 ;;		_color_read_Green
  3800 ;;		_color_read_Blue
  3801 ;;		_color_read_Clear
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           	psect	text24
  3806   001D62                     __ptext24:
  3807                           	callstack 0
  3808   001D62                     _I2C_2_Master_RepStart:
  3809                           	callstack 27
  3810   001D62                     
  3811                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3812   001D62  EC4C  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3813   001D66                     
  3814                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3815   001D66  010E               	movlb	14	; () banked
  3816   001D68  83DA               	bsf	218,1,b	;volatile
  3817   001D6A                     
  3818                           ; BSR set to: 14
  3819   001D6A  0012               	return		;funcret
  3820   001D6C                     __end_of_I2C_2_Master_RepStart:
  3821                           	callstack 0
  3822                           
  3823 ;; *************** function _I2C_2_Master_Read *****************
  3824 ;; Defined at:
  3825 ;;		line 51 in file "i2c.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  ack             1    wreg     unsigned char 
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;  ack             1    2[COMRAM] unsigned char 
  3830 ;;  tmp             1    3[COMRAM] unsigned char 
  3831 ;; Return value:  Size  Location     Type
  3832 ;;                  1    wreg      unsigned char 
  3833 ;; Registers used:
  3834 ;;		wreg, status,2, status,0, cstack
  3835 ;; Tracked objects:
  3836 ;;		On entry : 0/0
  3837 ;;		On exit  : 0/0
  3838 ;;		Unchanged: 0/0
  3839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3842 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3843 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3844 ;;Total ram usage:        3 bytes
  3845 ;; Hardware stack levels used: 1
  3846 ;; Hardware stack levels required when called: 1
  3847 ;; This function calls:
  3848 ;;		_I2C_2_Master_Idle
  3849 ;; This function is called by:
  3850 ;;		_color_read_Red
  3851 ;;		_color_read_Green
  3852 ;;		_color_read_Blue
  3853 ;;		_color_read_Clear
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text25
  3858   001ADC                     __ptext25:
  3859                           	callstack 0
  3860   001ADC                     _I2C_2_Master_Read:
  3861                           	callstack 27
  3862                           
  3863                           ; BSR set to: 14
  3864                           ;incstack = 0
  3865                           ;I2C_2_Master_Read@ack stored from wreg
  3866   001ADC  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3867   001ADE                     
  3868                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3869   001ADE  EC4C  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3870   001AE2                     
  3871                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3872   001AE2  010E               	movlb	14	; () banked
  3873   001AE4  87DA               	bsf	218,3,b	;volatile
  3874                           
  3875                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3876   001AE6  EC4C  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3877   001AEA                     
  3878                           ;i2c.c: 57:   tmp = SSP2BUF;
  3879   001AEA  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3880                           
  3881                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3882   001AEE  EC4C  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3883   001AF2                     
  3884                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3885   001AF2  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3886   001AF4  B4D8               	btfsc	status,2,c
  3887   001AF6  EF7F  F00D         	goto	u1251
  3888   001AFA  EF83  F00D         	goto	u1250
  3889   001AFE                     u1251:
  3890   001AFE  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3891   001B00  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3892   001B02  EF84  F00D         	goto	u1268
  3893   001B06                     u1250:
  3894   001B06  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3895   001B08                     u1268:
  3896   001B08  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3897   001B0A  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3898   001B0C  010E               	movlb	14	; () banked
  3899   001B0E  51DA               	movf	218,w,b	;volatile
  3900   001B10  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3901   001B12  0BDF               	andlw	-33
  3902   001B14  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3903   001B16  6FDA               	movwf	218,b	;volatile
  3904   001B18                     
  3905                           ; BSR set to: 14
  3906                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3907   001B18  89DA               	bsf	218,4,b	;volatile
  3908   001B1A                     
  3909                           ; BSR set to: 14
  3910                           ;i2c.c: 61:   return tmp;
  3911   001B1A  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3912   001B1C                     
  3913                           ; BSR set to: 14
  3914   001B1C  0012               	return		;funcret
  3915   001B1E                     __end_of_I2C_2_Master_Read:
  3916                           	callstack 0
  3917                           
  3918 ;; *************** function _initUSART4 *****************
  3919 ;; Defined at:
  3920 ;;		line 14 in file "serial.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;		None
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, status,2
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3938 ;;Total ram usage:        0 bytes
  3939 ;; Hardware stack levels used: 1
  3940 ;; This function calls:
  3941 ;;		Nothing
  3942 ;; This function is called by:
  3943 ;;		_main
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text26
  3948   001D06                     __ptext26:
  3949                           	callstack 0
  3950   001D06                     _initUSART4:
  3951                           	callstack 30
  3952   001D06                     
  3953                           ;serial.c: 15:     RC0PPS = 0x12;
  3954   001D06  0E12               	movlw	18
  3955   001D08  010E               	movlb	14	; () banked
  3956   001D0A  6F62               	movwf	98,b	;volatile
  3957                           
  3958                           ;serial.c: 16:     RX4PPS = 0x11;
  3959   001D0C  0E11               	movlw	17
  3960   001D0E  6F15               	movwf	21,b	;volatile
  3961   001D10                     
  3962                           ; BSR set to: 14
  3963                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  3964   001D10  97E9               	bcf	233,3,b	;volatile
  3965   001D12                     
  3966                           ; BSR set to: 14
  3967                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  3968   001D12  95E8               	bcf	232,2,b	;volatile
  3969                           
  3970                           ;serial.c: 19:     SP4BRGL = 51;
  3971   001D14  0E33               	movlw	51
  3972   001D16  6FE5               	movwf	229,b	;volatile
  3973                           
  3974                           ;serial.c: 20:     SP4BRGH = 0;
  3975   001D18  0E00               	movlw	0
  3976   001D1A  6FE6               	movwf	230,b	;volatile
  3977   001D1C                     
  3978                           ; BSR set to: 14
  3979                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  3980   001D1C  89E7               	bsf	231,4,b	;volatile
  3981   001D1E                     
  3982                           ; BSR set to: 14
  3983                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  3984   001D1E  8BE8               	bsf	232,5,b	;volatile
  3985   001D20                     
  3986                           ; BSR set to: 14
  3987                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  3988   001D20  8FE7               	bsf	231,7,b	;volatile
  3989   001D22                     
  3990                           ; BSR set to: 14
  3991   001D22  0012               	return		;funcret
  3992   001D24                     __end_of_initUSART4:
  3993                           	callstack 0
  3994                           
  3995 ;; *************** function _initDCmotorsPWM *****************
  3996 ;; Defined at:
  3997 ;;		line 5 in file "dc_motor.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;		None
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  1    wreg      void 
  4004 ;; Registers used:
  4005 ;;		wreg, status,2
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4011 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4014 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4015 ;;Total ram usage:        2 bytes
  4016 ;; Hardware stack levels used: 1
  4017 ;; This function calls:
  4018 ;;		Nothing
  4019 ;; This function is called by:
  4020 ;;		_main
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text27
  4025   001742                     __ptext27:
  4026                           	callstack 0
  4027   001742                     _initDCmotorsPWM:
  4028                           	callstack 30
  4029   001742                     
  4030                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  4031   001742  9485               	bcf	133,2,c	;volatile
  4032                           
  4033                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  4034   001744  9E83               	bcf	131,7,c	;volatile
  4035                           
  4036                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  4037   001746  9885               	bcf	133,4,c	;volatile
  4038                           
  4039                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  4040   001748  9C87               	bcf	135,6,c	;volatile
  4041                           
  4042                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  4043   00174A  947D               	bcf	125,2,c	;volatile
  4044                           
  4045                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  4046   00174C  9E7B               	bcf	123,7,c	;volatile
  4047                           
  4048                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  4049   00174E  987D               	bcf	125,4,c	;volatile
  4050                           
  4051                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  4052   001750  9C7F               	bcf	127,6,c	;volatile
  4053   001752                     
  4054                           ;dc_motor.c: 18:     RE2PPS=0x05;
  4055   001752  0E05               	movlw	5
  4056   001754  010E               	movlb	14	; () banked
  4057   001756  6F74               	movwf	116,b	;volatile
  4058                           
  4059                           ;dc_motor.c: 19:     RE4PPS=0x06;
  4060   001758  0E06               	movlw	6
  4061   00175A  6F76               	movwf	118,b	;volatile
  4062                           
  4063                           ;dc_motor.c: 20:     RC7PPS=0x07;
  4064   00175C  0E07               	movlw	7
  4065   00175E  6F69               	movwf	105,b	;volatile
  4066                           
  4067                           ;dc_motor.c: 21:     RG6PPS=0x08;
  4068   001760  0E08               	movlw	8
  4069   001762  6F88               	movwf	136,b	;volatile
  4070                           
  4071                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  4072   001764  50BD               	movf	189,w,c	;volatile
  4073   001766  0B8F               	andlw	-113
  4074   001768  0940               	iorlw	64
  4075   00176A  6EBD               	movwf	189,c	;volatile
  4076                           
  4077                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  4078   00176C  0EE0               	movlw	-32
  4079   00176E  16BE               	andwf	190,f,c	;volatile
  4080                           
  4081                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  4082   001770  50BF               	movf	191,w,c	;volatile
  4083   001772  0BF0               	andlw	-16
  4084   001774  0901               	iorlw	1
  4085   001776  6EBF               	movwf	191,c	;volatile
  4086   001778                     
  4087                           ; BSR set to: 14
  4088                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  4089   001778  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4090   00177C                     
  4091                           ; BSR set to: 14
  4092                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  4093   00177C  8EBD               	bsf	189,7,c	;volatile
  4094                           
  4095                           ;dc_motor.c: 35:     CCPR1H=0;
  4096   00177E  0E00               	movlw	0
  4097   001780  6EAA               	movwf	170,c	;volatile
  4098                           
  4099                           ;dc_motor.c: 36:     CCPR2H=0;
  4100   001782  0E00               	movlw	0
  4101   001784  6EA6               	movwf	166,c	;volatile
  4102                           
  4103                           ;dc_motor.c: 37:     CCPR3H=0;
  4104   001786  0E00               	movlw	0
  4105   001788  010F               	movlb	15	; () banked
  4106   00178A  6F25               	movwf	37,b	;volatile
  4107                           
  4108                           ;dc_motor.c: 38:     CCPR4H=0;
  4109   00178C  0E00               	movlw	0
  4110   00178E  6F21               	movwf	33,b	;volatile
  4111                           
  4112                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  4113   001790  0EFC               	movlw	-4
  4114   001792  16AD               	andwf	173,f,c	;volatile
  4115                           
  4116                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  4117   001794  0EF3               	movlw	-13
  4118   001796  16AD               	andwf	173,f,c	;volatile
  4119                           
  4120                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  4121   001798  0ECF               	movlw	-49
  4122   00179A  16AD               	andwf	173,f,c	;volatile
  4123                           
  4124                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  4125   00179C  0E3F               	movlw	-193
  4126   00179E  16AD               	andwf	173,f,c	;volatile
  4127   0017A0                     
  4128                           ; BSR set to: 15
  4129                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  4130   0017A0  88AB               	bsf	171,4,c	;volatile
  4131                           
  4132                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  4133   0017A2  50AB               	movf	171,w,c	;volatile
  4134   0017A4  0BF0               	andlw	-16
  4135   0017A6  090C               	iorlw	12
  4136   0017A8  6EAB               	movwf	171,c	;volatile
  4137   0017AA                     
  4138                           ; BSR set to: 15
  4139                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  4140   0017AA  8EAB               	bsf	171,7,c	;volatile
  4141   0017AC                     
  4142                           ; BSR set to: 15
  4143                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  4144   0017AC  88A7               	bsf	167,4,c	;volatile
  4145                           
  4146                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  4147   0017AE  50A7               	movf	167,w,c	;volatile
  4148   0017B0  0BF0               	andlw	-16
  4149   0017B2  090C               	iorlw	12
  4150   0017B4  6EA7               	movwf	167,c	;volatile
  4151   0017B6                     
  4152                           ; BSR set to: 15
  4153                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  4154   0017B6  8EA7               	bsf	167,7,c	;volatile
  4155   0017B8                     
  4156                           ; BSR set to: 15
  4157                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  4158   0017B8  8926               	bsf	38,4,b	;volatile
  4159                           
  4160                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  4161   0017BA  5126               	movf	38,w,b	;volatile
  4162   0017BC  0BF0               	andlw	-16
  4163   0017BE  090C               	iorlw	12
  4164   0017C0  6F26               	movwf	38,b	;volatile
  4165   0017C2                     
  4166                           ; BSR set to: 15
  4167                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  4168   0017C2  8F26               	bsf	38,7,b	;volatile
  4169   0017C4                     
  4170                           ; BSR set to: 15
  4171                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  4172   0017C4  8922               	bsf	34,4,b	;volatile
  4173                           
  4174                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  4175   0017C6  5122               	movf	34,w,b	;volatile
  4176   0017C8  0BF0               	andlw	-16
  4177   0017CA  090C               	iorlw	12
  4178   0017CC  6F22               	movwf	34,b	;volatile
  4179   0017CE                     
  4180                           ; BSR set to: 15
  4181                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  4182   0017CE  8F22               	bsf	34,7,b	;volatile
  4183   0017D0                     
  4184                           ; BSR set to: 15
  4185   0017D0  0012               	return		;funcret
  4186   0017D2                     __end_of_initDCmotorsPWM:
  4187                           	callstack 0
  4188                           
  4189 ;; *************** function _color_click_init *****************
  4190 ;; Defined at:
  4191 ;;		line 6 in file "color.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;		None
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		wreg, status,2, status,0, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4207 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4208 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4209 ;;Total ram usage:        1 bytes
  4210 ;; Hardware stack levels used: 1
  4211 ;; Hardware stack levels required when called: 3
  4212 ;; This function calls:
  4213 ;;		_I2C_2_Master_Init
  4214 ;;		_color_writetoaddr
  4215 ;; This function is called by:
  4216 ;;		_main
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text28
  4221   001C3A                     __ptext28:
  4222                           	callstack 0
  4223   001C3A                     _color_click_init:
  4224                           	callstack 27
  4225   001C3A                     
  4226                           ;color.c: 9:     I2C_2_Master_Init();
  4227   001C3A  EC37  F00E         	call	_I2C_2_Master_Init	;wreg free
  4228   001C3E                     
  4229                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  4230   001C3E  0E01               	movlw	1
  4231   001C40  6E03               	movwf	color_writetoaddr@value^0,c
  4232   001C42  0E00               	movlw	0
  4233   001C44  EC73  F00E         	call	_color_writetoaddr
  4234   001C48                     
  4235                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4236   001C48  0E3F               	movlw	63
  4237   001C4A  6E05               	movwf	??_color_click_init^0,c
  4238   001C4C  0E55               	movlw	85
  4239   001C4E                     u1577:
  4240   001C4E  2EE8               	decfsz	wreg,f,c
  4241   001C50  D7FE               	bra	u1577
  4242   001C52  2E05               	decfsz	??_color_click_init^0,f,c
  4243   001C54  D7FC               	bra	u1577
  4244   001C56  0000               	nop	
  4245   001C58                     
  4246                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  4247   001C58  0E03               	movlw	3
  4248   001C5A  6E03               	movwf	color_writetoaddr@value^0,c
  4249   001C5C  0E00               	movlw	0
  4250   001C5E  EC73  F00E         	call	_color_writetoaddr
  4251   001C62                     
  4252                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  4253   001C62  0ED5               	movlw	213
  4254   001C64  6E03               	movwf	color_writetoaddr@value^0,c
  4255   001C66  0E01               	movlw	1
  4256   001C68  EC73  F00E         	call	_color_writetoaddr
  4257   001C6C  0012               	return		;funcret
  4258   001C6E                     __end_of_color_click_init:
  4259                           	callstack 0
  4260                           
  4261 ;; *************** function _color_writetoaddr *****************
  4262 ;; Defined at:
  4263 ;;		line 22 in file "color.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  address         1    wreg     unsigned char 
  4266 ;;  value           1    2[COMRAM] unsigned char 
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;  address         1    3[COMRAM] unsigned char 
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      void 
  4271 ;; Registers used:
  4272 ;;		wreg, status,2, status,0, cstack
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4278 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4279 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4281 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4282 ;;Total ram usage:        2 bytes
  4283 ;; Hardware stack levels used: 1
  4284 ;; Hardware stack levels required when called: 2
  4285 ;; This function calls:
  4286 ;;		_I2C_2_Master_Start
  4287 ;;		_I2C_2_Master_Stop
  4288 ;;		_I2C_2_Master_Write
  4289 ;; This function is called by:
  4290 ;;		_color_click_init
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           	psect	text29
  4295   001CE6                     __ptext29:
  4296                           	callstack 0
  4297   001CE6                     _color_writetoaddr:
  4298                           	callstack 27
  4299                           
  4300                           ;incstack = 0
  4301                           ;color_writetoaddr@address stored from wreg
  4302   001CE6  6E04               	movwf	color_writetoaddr@address^0,c
  4303   001CE8                     
  4304                           ;color.c: 23:     I2C_2_Master_Start();
  4305   001CE8  ECBB  F00E         	call	_I2C_2_Master_Start	;wreg free
  4306                           
  4307                           ;color.c: 24:     I2C_2_Master_Write(0x52 | 0x00);
  4308   001CEC  0E52               	movlw	82
  4309   001CEE  ECAB  F00E         	call	_I2C_2_Master_Write
  4310                           
  4311                           ;color.c: 25:     I2C_2_Master_Write(0x80 | address);
  4312   001CF2  5004               	movf	color_writetoaddr@address^0,w,c
  4313   001CF4  0980               	iorlw	128
  4314   001CF6  ECAB  F00E         	call	_I2C_2_Master_Write
  4315                           
  4316                           ;color.c: 26:     I2C_2_Master_Write(value);
  4317   001CFA  5003               	movf	color_writetoaddr@value^0,w,c
  4318   001CFC  ECAB  F00E         	call	_I2C_2_Master_Write
  4319                           
  4320                           ;color.c: 27:     I2C_2_Master_Stop();
  4321   001D00  ECB6  F00E         	call	_I2C_2_Master_Stop	;wreg free
  4322   001D04  0012               	return		;funcret
  4323   001D06                     __end_of_color_writetoaddr:
  4324                           	callstack 0
  4325                           
  4326 ;; *************** function _I2C_2_Master_Write *****************
  4327 ;; Defined at:
  4328 ;;		line 45 in file "i2c.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;  data_byte       1    wreg     unsigned char 
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;  data_byte       1    1[COMRAM] unsigned char 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  1    wreg      void 
  4335 ;; Registers used:
  4336 ;;		wreg, status,2, status,0, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4343 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4345 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4346 ;;Total ram usage:        1 bytes
  4347 ;; Hardware stack levels used: 1
  4348 ;; Hardware stack levels required when called: 1
  4349 ;; This function calls:
  4350 ;;		_I2C_2_Master_Idle
  4351 ;; This function is called by:
  4352 ;;		_color_writetoaddr
  4353 ;;		_color_read_Red
  4354 ;;		_color_read_Green
  4355 ;;		_color_read_Blue
  4356 ;;		_color_read_Clear
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text30
  4361   001D56                     __ptext30:
  4362                           	callstack 0
  4363   001D56                     _I2C_2_Master_Write:
  4364                           	callstack 27
  4365                           
  4366                           ;incstack = 0
  4367                           ;I2C_2_Master_Write@data_byte stored from wreg
  4368   001D56  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  4369   001D58                     
  4370                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4371   001D58  EC4C  F00E         	call	_I2C_2_Master_Idle	;wreg free
  4372   001D5C                     
  4373                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4374   001D5C  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4375   001D60  0012               	return		;funcret
  4376   001D62                     __end_of_I2C_2_Master_Write:
  4377                           	callstack 0
  4378                           
  4379 ;; *************** function _I2C_2_Master_Stop *****************
  4380 ;; Defined at:
  4381 ;;		line 39 in file "i2c.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;		None
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;		None
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      void 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4399 ;;Total ram usage:        0 bytes
  4400 ;; Hardware stack levels used: 1
  4401 ;; Hardware stack levels required when called: 1
  4402 ;; This function calls:
  4403 ;;		_I2C_2_Master_Idle
  4404 ;; This function is called by:
  4405 ;;		_color_writetoaddr
  4406 ;;		_color_read_Red
  4407 ;;		_color_read_Green
  4408 ;;		_color_read_Blue
  4409 ;;		_color_read_Clear
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text31
  4414   001D6C                     __ptext31:
  4415                           	callstack 0
  4416   001D6C                     _I2C_2_Master_Stop:
  4417                           	callstack 27
  4418   001D6C                     
  4419                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4420   001D6C  EC4C  F00E         	call	_I2C_2_Master_Idle	;wreg free
  4421   001D70                     
  4422                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4423   001D70  010E               	movlb	14	; () banked
  4424   001D72  85DA               	bsf	218,2,b	;volatile
  4425   001D74                     
  4426                           ; BSR set to: 14
  4427   001D74  0012               	return		;funcret
  4428   001D76                     __end_of_I2C_2_Master_Stop:
  4429                           	callstack 0
  4430                           
  4431 ;; *************** function _I2C_2_Master_Start *****************
  4432 ;; Defined at:
  4433 ;;		line 27 in file "i2c.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;		None
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;		None
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  1    wreg      void 
  4440 ;; Registers used:
  4441 ;;		wreg, status,2, status,0, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4451 ;;Total ram usage:        0 bytes
  4452 ;; Hardware stack levels used: 1
  4453 ;; Hardware stack levels required when called: 1
  4454 ;; This function calls:
  4455 ;;		_I2C_2_Master_Idle
  4456 ;; This function is called by:
  4457 ;;		_color_writetoaddr
  4458 ;;		_color_read_Red
  4459 ;;		_color_read_Green
  4460 ;;		_color_read_Blue
  4461 ;;		_color_read_Clear
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           	psect	text32
  4466   001D76                     __ptext32:
  4467                           	callstack 0
  4468   001D76                     _I2C_2_Master_Start:
  4469                           	callstack 27
  4470   001D76                     
  4471                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4472   001D76  EC4C  F00E         	call	_I2C_2_Master_Idle	;wreg free
  4473   001D7A                     
  4474                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4475   001D7A  010E               	movlb	14	; () banked
  4476   001D7C  81DA               	bsf	218,0,b	;volatile
  4477   001D7E                     
  4478                           ; BSR set to: 14
  4479   001D7E  0012               	return		;funcret
  4480   001D80                     __end_of_I2C_2_Master_Start:
  4481                           	callstack 0
  4482                           
  4483 ;; *************** function _I2C_2_Master_Idle *****************
  4484 ;; Defined at:
  4485 ;;		line 22 in file "i2c.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;		None
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  1    wreg      void 
  4492 ;; Registers used:
  4493 ;;		wreg, status,2, status,0
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4501 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4502 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4503 ;;Total ram usage:        1 bytes
  4504 ;; Hardware stack levels used: 1
  4505 ;; This function calls:
  4506 ;;		Nothing
  4507 ;; This function is called by:
  4508 ;;		_I2C_2_Master_Start
  4509 ;;		_I2C_2_Master_RepStart
  4510 ;;		_I2C_2_Master_Stop
  4511 ;;		_I2C_2_Master_Write
  4512 ;;		_I2C_2_Master_Read
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text33
  4517   001C98                     __ptext33:
  4518                           	callstack 0
  4519   001C98                     _I2C_2_Master_Idle:
  4520                           	callstack 27
  4521   001C98                     l99:
  4522   001C98  010E               	movlb	14	; () banked
  4523   001C9A  B5D8               	btfsc	216,2,b	;volatile
  4524   001C9C  EF52  F00E         	goto	u1191
  4525   001CA0  EF54  F00E         	goto	u1190
  4526   001CA4                     u1191:
  4527   001CA4  EF4C  F00E         	goto	l99
  4528   001CA8                     u1190:
  4529   001CA8                     
  4530                           ; BSR set to: 14
  4531   001CA8  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4532   001CAC  0E1F               	movlw	31
  4533   001CAE  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4534   001CB0  A4D8               	btfss	status,2,c
  4535   001CB2  EF5D  F00E         	goto	u1201
  4536   001CB6  EF5F  F00E         	goto	u1200
  4537   001CBA                     u1201:
  4538   001CBA  EF4C  F00E         	goto	l99
  4539   001CBE                     u1200:
  4540   001CBE                     
  4541                           ; BSR set to: 14
  4542   001CBE  0012               	return		;funcret
  4543   001CC0                     __end_of_I2C_2_Master_Idle:
  4544                           	callstack 0
  4545                           
  4546 ;; *************** function _I2C_2_Master_Init *****************
  4547 ;; Defined at:
  4548 ;;		line 4 in file "i2c.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;		None
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;		None
  4553 ;; Return value:  Size  Location     Type
  4554 ;;                  1    wreg      void 
  4555 ;; Registers used:
  4556 ;;		wreg, status,2
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4566 ;;Total ram usage:        0 bytes
  4567 ;; Hardware stack levels used: 1
  4568 ;; This function calls:
  4569 ;;		Nothing
  4570 ;; This function is called by:
  4571 ;;		_color_click_init
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text34
  4576   001C6E                     __ptext34:
  4577                           	callstack 0
  4578   001C6E                     _I2C_2_Master_Init:
  4579                           	callstack 29
  4580   001C6E                     
  4581                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4582   001C6E  010E               	movlb	14	; () banked
  4583   001C70  51D9               	movf	217,w,b	;volatile
  4584   001C72  0BF0               	andlw	-16
  4585   001C74  0908               	iorlw	8
  4586   001C76  6FD9               	movwf	217,b	;volatile
  4587   001C78                     
  4588                           ; BSR set to: 14
  4589                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4590   001C78  8BD9               	bsf	217,5,b	;volatile
  4591                           
  4592                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4593   001C7A  0E9F               	movlw	159
  4594   001C7C  6FD6               	movwf	214,b	;volatile
  4595   001C7E                     
  4596                           ; BSR set to: 14
  4597                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4598   001C7E  8A84               	bsf	132,5,c	;volatile
  4599   001C80                     
  4600                           ; BSR set to: 14
  4601                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4602   001C80  8C84               	bsf	132,6,c	;volatile
  4603   001C82                     
  4604                           ; BSR set to: 14
  4605                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4606   001C82  9BA7               	bcf	167,5,b	;volatile
  4607   001C84                     
  4608                           ; BSR set to: 14
  4609                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4610   001C84  9DA7               	bcf	167,6,b	;volatile
  4611                           
  4612                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4613   001C86  0E1D               	movlw	29
  4614   001C88  6F1D               	movwf	29,b	;volatile
  4615                           
  4616                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4617   001C8A  0E1E               	movlw	30
  4618   001C8C  6F1C               	movwf	28,b	;volatile
  4619                           
  4620                           ;i2c.c: 18:   RD5PPS=0x1C;
  4621   001C8E  0E1C               	movlw	28
  4622   001C90  6F6F               	movwf	111,b	;volatile
  4623                           
  4624                           ;i2c.c: 19:   RD6PPS=0x1B;
  4625   001C92  0E1B               	movlw	27
  4626   001C94  6F70               	movwf	112,b	;volatile
  4627   001C96                     
  4628                           ; BSR set to: 14
  4629   001C96  0012               	return		;funcret
  4630   001C98                     __end_of_I2C_2_Master_Init:
  4631                           	callstack 0
  4632                           
  4633 ;; *************** function _ADC_init *****************
  4634 ;; Defined at:
  4635 ;;		line 9 in file "ADC.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;		None
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;		None
  4640 ;; Return value:  Size  Location     Type
  4641 ;;                  1    wreg      void 
  4642 ;; Registers used:
  4643 ;;		wreg, status,2
  4644 ;; Tracked objects:
  4645 ;;		On entry : 0/0
  4646 ;;		On exit  : 0/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4653 ;;Total ram usage:        0 bytes
  4654 ;; Hardware stack levels used: 1
  4655 ;; This function calls:
  4656 ;;		Nothing
  4657 ;; This function is called by:
  4658 ;;		_main
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text35
  4663   001D24                     __ptext35:
  4664                           	callstack 0
  4665   001D24                     _ADC_init:
  4666                           	callstack 30
  4667   001D24                     
  4668                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  4669   001D24  8C86               	bsf	134,6,c	;volatile
  4670                           
  4671                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  4672   001D26  010E               	movlb	14	; () banked
  4673   001D28  8DB4               	bsf	180,6,b	;volatile
  4674                           
  4675                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  4676   001D2A  010F               	movlb	15	; () banked
  4677   001D2C  9958               	bcf	88,4,b	;volatile
  4678   001D2E                     
  4679                           ; BSR set to: 15
  4680                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  4681   001D2E  0EFC               	movlw	-4
  4682   001D30  1758               	andwf	88,f,b	;volatile
  4683                           
  4684                           ;ADC.c: 17:     ADPCH=0b101110;
  4685   001D32  0E2E               	movlw	46
  4686   001D34  6F5F               	movwf	95,b	;volatile
  4687   001D36                     
  4688                           ; BSR set to: 15
  4689                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  4690   001D36  9460               	bcf	96,2,c	;volatile
  4691   001D38                     
  4692                           ; BSR set to: 15
  4693                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  4694   001D38  8860               	bsf	96,4,c	;volatile
  4695   001D3A                     
  4696                           ; BSR set to: 15
  4697                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  4698   001D3A  8E60               	bsf	96,7,c	;volatile
  4699   001D3C                     
  4700                           ; BSR set to: 15
  4701   001D3C  0012               	return		;funcret
  4702   001D3E                     __end_of_ADC_init:
  4703                           	callstack 0
  4704                           
  4705                           	psect	rparam
  4706   000000                     
  4707                           	psect	config
  4708                           
  4709                           ;Config register CONFIG1L @ 0x300000
  4710                           ;	External Oscillator mode Selection bits
  4711                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  4712                           ;	Power-up default value for COSC bits
  4713                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  4714   300000                     	org	3145728
  4715   300000  AA                 	db	170
  4716                           
  4717                           ;Config register CONFIG1H @ 0x300001
  4718                           ;	unspecified, using default values
  4719                           ;	Clock Out Enable bit
  4720                           ;	CLKOUTEN = 0x1, unprogrammed default
  4721                           ;	Clock Switch Enable bit
  4722                           ;	CSWEN = 0x1, unprogrammed default
  4723                           ;	Fail-Safe Clock Monitor Enable bit
  4724                           ;	FCMEN = 0x1, unprogrammed default
  4725   300001                     	org	3145729
  4726   300001  FF                 	db	255
  4727                           
  4728                           ;Config register CONFIG3L @ 0x300004
  4729                           ;	WDT Period Select bits
  4730                           ;	WDTCPS = 0x1F, unprogrammed default
  4731                           ;	WDT operating mode
  4732                           ;	WDTE = OFF, WDT Disabled
  4733   300004                     	org	3145732
  4734   300004  9F                 	db	159
  4735                           
  4736                           ;Config register CONFIG3H @ 0x300005
  4737                           ;	unspecified, using default values
  4738                           ;	WDT Window Select bits
  4739                           ;	WDTCWS = 0x7, unprogrammed default
  4740                           ;	WDT input clock selector
  4741                           ;	WDTCCS = 0x7, unprogrammed default
  4742   300005                     	org	3145733
  4743   300005  FF                 	db	255
  4744                           tosu	equ	0xFFF
  4745                           tosh	equ	0xFFE
  4746                           tosl	equ	0xFFD
  4747                           stkptr	equ	0xFFC
  4748                           pclatu	equ	0xFFB
  4749                           pclath	equ	0xFFA
  4750                           pcl	equ	0xFF9
  4751                           tblptru	equ	0xFF8
  4752                           tblptrh	equ	0xFF7
  4753                           tblptrl	equ	0xFF6
  4754                           tablat	equ	0xFF5
  4755                           prodh	equ	0xFF4
  4756                           prodl	equ	0xFF3
  4757                           indf0	equ	0xFEF
  4758                           postinc0	equ	0xFEE
  4759                           postdec0	equ	0xFED
  4760                           preinc0	equ	0xFEC
  4761                           plusw0	equ	0xFEB
  4762                           fsr0h	equ	0xFEA
  4763                           fsr0l	equ	0xFE9
  4764                           wreg	equ	0xFE8
  4765                           indf1	equ	0xFE7
  4766                           postinc1	equ	0xFE6
  4767                           postdec1	equ	0xFE5
  4768                           preinc1	equ	0xFE4
  4769                           plusw1	equ	0xFE3
  4770                           fsr1h	equ	0xFE2
  4771                           fsr1l	equ	0xFE1
  4772                           bsr	equ	0xFE0
  4773                           indf2	equ	0xFDF
  4774                           postinc2	equ	0xFDE
  4775                           postdec2	equ	0xFDD
  4776                           preinc2	equ	0xFDC
  4777                           plusw2	equ	0xFDB
  4778                           fsr2h	equ	0xFDA
  4779                           fsr2l	equ	0xFD9
  4780                           status	equ	0xFD8

Data Sizes:
    Strings     147
    Constant    0
    Data        1
    BSS         160
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     91      95
    BANK0           160     60     157
    BANK1           256    250     250
    BANK2           256      0      60
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    ADC2String@buf	PTR unsigned char  size(2) Largest target is 50
		 -> send2USART@buf(BANK1[50]), sendAllReadings@buffer(COMRAM[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    S2204$buffer	PTR unsigned char  size(2) Largest target is 0

    S2204$source	PTR const unsigned char  size(2) Largest target is 0

    S465DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S465DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 50
		 -> send2USART@blue_char(BANK1[50]), send2USART@buf(BANK1[50]), send2USART@clear_char(BANK1[50]), send2USART@green_char(BANK1[50]), 
		 -> send2USART@red_char(BANK1[50]), sendAllReadings@buffer(COMRAM[10]), test@led_state(BANK0[50]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[21]), STR_6(CODE[12]), STR_7(CODE[13]), STR_8(CODE[14]), 
		 -> STR_9(CODE[17]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 50
		 -> send2USART@blue_char(BANK1[50]), send2USART@buf(BANK1[50]), send2USART@clear_char(BANK1[50]), send2USART@green_char(BANK1[50]), 
		 -> send2USART@red_char(BANK1[50]), sendAllReadings@buffer(COMRAM[10]), test@led_state(BANK0[50]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[21]), STR_6(CODE[12]), STR_7(CODE[13]), STR_8(CODE[14]), 
		 -> STR_9(CODE[17]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[21]), STR_6(CODE[12]), STR_7(CODE[13]), STR_8(CODE[14]), 
		 -> STR_9(CODE[17]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[21]), STR_6(CODE[12]), STR_7(CODE[13]), STR_8(CODE[14]), 
		 -> STR_9(CODE[17]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_test
    _test->_send2USART
    _send2USART->_ADC2String
    _sendStringSerial4->_sendCharSerial4
    _ADC2String->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    ___lwdiv->___wmul
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_test

Critical Paths under _main in BANK1

    _test->_send2USART

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   29756
                                             89 COMRAM     2     2      0
                           _ADC_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                               _test
 ---------------------------------------------------------------------------------
 (1) _test                                                63    61      2   29275
                                             86 COMRAM     3     1      2
                                              0 BANK0     60    60      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _send2USART                                         260   250     10   19606
                                             76 COMRAM    10     0     10
                                              0 BANK1    250   250      0
                         _ADC2String
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2     599
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC2String                                          10     6      4   10089
                                             66 COMRAM    10     6      4
                            ___lwdiv
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    15      7    8178
                                             46 COMRAM    20    13      7
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    6609
                                             42 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    6250
                                             31 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1143
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     811
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    3775
                                             20 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  7     3      4    2172
                                             13 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                5     3      2    1083
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     682
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initUSART4
   _test
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _send2USART
       _ADC2String
         ___lwdiv
           ___wmul (ARG)
         ___wmul
         _sprintf
           _vfprintf
             _vfpfcnvrt
               _dtoa
                 ___awdiv
                 ___awmod
                 _abs
                   ___awmod (ARG)
                 _pad
                   _fputc
                     _putch
                   _fputs
                     _fputc
               _fputc
               _read_prec_or_width
                 ___wmul
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
     _sendStringSerial4
     _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      3C       9       23.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FA       7       97.7%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      9D       5       98.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5B      5F       1      100.0%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllhll     37      0       0      46        0.0%
BITBIGSFRlllhhl     31      0       0      44        0.0%
BITBIGSFRllllll     2A      0       0      57        0.0%
BITBIGSFRllllll     26      0       0      61        0.0%
BITBIGSFRlllllh     20      0       0      49        0.0%
BITBIGSFRllllll     1E      0       0      51        0.0%
BITBIGSFRhhllh      1E      0       0      36        0.0%
BITBIGSFRlllhhh     14      0       0      41        0.0%
BITBIGSFRllllll     11      0       0      52        0.0%
BITBIGSFRllllll      F      0       0      59        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRlllllh      C      0       0      50        0.0%
BITBIGSFRllllll      9      0       0      58        0.0%
BITBIGSFRlllhll      8      0       0      47        0.0%
BITBIGSFRllllll      6      0       0      60        0.0%
BITBIGSFRllllll      6      0       0      56        0.0%
BITBIGSFRlllhhh      6      0       0      43        0.0%
BITBIGSFRllllll      5      0       0      55        0.0%
BITBIGSFRlllhhh      3      0       0      42        0.0%
BITBIGSFRllllll      3      0       0      54        0.0%
BITBIGSFRlllhlh      2      0       0      45        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRhlh         1      0       0      37        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRllllh       1      0       0      48        0.0%
BITBIGSFRllh         1      0       0      40        0.0%
BITBIGSFRlh          1      0       0      39        0.0%
BITBIGSFRhll         1      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     232      62        0.0%
DATA                 0      0     232       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Mar 11 12:12:16 2024

               _color_read_Red 195A                _color_read_Blue 1A4A                             l51 19A8  
                           l60 1A48                             l45 1C6C                             l54 19F8  
                           l48 1D04                             l57 1A98                             l69 11A2  
                           l96 1C96                             l99 1C98                   ___awdiv@sign 0006  
          ___wmul@multiplicand 0003               _color_read_Clear 19FA               _color_read_Green 19AA  
                          l102 1CBE                            l111 1D74                            l105 1D7E  
                          l114 1D60                            l108 1D6A                            l117 1B1C  
                          l411 1CE4                            l253 17D0                            l405 1740  
                          l192 1D3C                            l408 153C                            l345 1D22  
                          l354 1D40                            l363 1C04                            l357 1D54  
                          l642 13D0                            l902 1950                            l655 15EC  
                          l909 1958                            u800 13F2                            u801 13EE  
                          u810 1418                            u811 1414                            u900 1550  
                          u820 144A                            u901 154C                            u821 1446  
                          u910 156A                            u830 1B94                            u911 1566  
                          u831 1B90                            u840 1320                            u920 1584  
                          u841 131C                            u921 1580                            u850 133A  
                          u930 15A2                            u851 1336                            u931 159E  
                          u860 1360                            u940 15B8                            u861 135C  
                          u941 15B4                            u870 137E                            u950 15DC  
                          u790 13E2                            u871 137A                            u951 15D8  
                          u791 13DE                            u880 139A                            u960 17E2  
                          u881 1396                            u961 17DE                            u890 13C0  
                          u970 17FC                            u891 13BC                            u971 17F8  
                          u980 1842                            u981 183E                            u990 1852  
                          u991 184E                            _abs 1C06                            _pad 17D2  
                 ___awmod@sign 0006                            wreg 0FE8                           l1112 1842  
                         l2001 1418                           l1114 185E                           l1130 130C  
                         l2003 144A                           l2011 1B74                           ?_abs 0007  
                         l2021 130E                           l2013 1B78                           l1109 1804  
                         l2101 17D2                           l1117 1202                           l1134 1692  
                         l2031 133A                           l2023 1312                           l2007 1B5A  
                         l2111 1820                           l2103 17E2                           l2015 1CC0  
                         l2041 1368                           l2033 1342                           l2025 1320  
                         l2009 1B66                           l2113 1824                           l2105 17EE  
                         l2121 11A4                           l2017 1CDC                           l1153 101C  
                         l1138 169A                           l2051 13A2                           l2043 1370  
                         l2035 1346                           l2027 1328                           l1163 1C20  
                         l2115 1852                           l2107 17FC                           l2131 11DA  
                         l2123 11A8                           l2211 0F60                           l2203 0EF6  
                         l2301 1D6C                           l2061 13C8                           l2053 13A4  
                         l2045 137E                           l2037 134E                           l2029 132C  
                         l2117 1C06                           l2109 1810                           l2141 1214  
                         l2133 11EA                           l2125 11BC                           l2221 0FCC  
                         l2213 0F6A                           l2205 0F2C                           l1166 1C38  
                         l2303 1D70                           l2311 1AE2                           l2055 13AA  
                         l2047 1384                           l2039 1360                           l2071 1558  
                         l2119 1C14                           l2143 121A                           l2151 126E  
                         l2135 11F6                           l2127 11C4                           l2223 0FD6  
                         l2215 0F74                           l2207 0F3C                           l2231 0FF6  
                         l1159 1ADA                           l2313 1AEA                           l2305 1D62  
                         l2049 139A                           l2057 13B0                           l2081 158C  
                         l2073 155C                           l2065 153E                           l2153 1288  
                         l2161 12D4                           l2145 1248                           l2137 11FE  
                         l2129 11D4                           l2217 0F94                           l2209 0F50  
                         l2241 1A9A                           l1089 1B58                           l2401 1518  
                         l1178 148A                           l1186 1B94                           l2315 1AF2  
                         l2307 1D66                           l2059 13C0                           l2091 15C6  
                         l2083 1594                           l2075 156A                           l2067 1542  
                         l2163 12E4                           l2155 129A                           l2147 124C  
                         l2139 120A                           l2171 15EE                           l2227 0FEA  
                         l2219 0FB4                           l2243 1AA2                           l2251 1B1E  
                         l2331 1BEC                           l2323 1BCE                           l2403 1524  
                         l2317 1B18                           l2309 1ADE                           l2085 15A2  
                         l2093 15CC                           l2077 1572                           l2069 1550  
                         l1189 1D80                           l2165 12EA                           l2157 12AA  
                         l2149 1252                           l2181 1660                           l2173 15F6  
                         l2245 1AB2                           l2253 1B2A                           l2325 1BD2  
                         l2405 1530                           l2501 115A                           l2511 1D36  
                         l2263 1C98                           l2319 1B1A                           l2271 18E6  
                         l2095 15DC                           l2087 15B8                           l2079 1584  
                         l2167 12F6                           l2159 12C4                           l2175 161C  
                         l2183 1668                           l2191 0ED2                           l2247 1AD2  
                         l2255 1B32                           l2351 16B8                           l2327 1BE0  
                         l2503 1186                           l2513 1D38                           l2361 1C7E  
                         l2265 1CA8                           l2521 1D12                           l2281 191E  
                         l2273 18EE                           l2097 15E4                           l2089 15C0  
                         l2177 1624                           l2193 0ED6                           l2185 0E96  
                         l2257 1B3A                           l2353 1708                           l2329 1BE4  
                         l2505 118C                           l2515 1D3A                           l2507 1D24  
                         l2363 1C80                           l2451 1C3A                           l2531 1752  
                         l2523 1D1C                           l2371 195A                           l2291 194A  
                         l2283 1924                           l2275 1900                           l2179 1640  
                         l2195 0EDE                           l2187 0EBC                           l2259 1B4A  
                         l2355 1728                           l2267 1D40                           l2509 1D2E  
                         l2365 1C82                           l2357 1C6E                           l2293 1D76  
                         l2453 1C3E                           l2541 17AC                           l2533 1778  
                         l2525 1D1E                           l2517 1D06                           l2373 19A0  
                         l2285 193A                           l2277 1908                           l2197 0EE2  
                         l2189 0EC4                           l2349 169C                           l2269 1D50  
                         l2461 101E                           l2621 186C                           l2367 1C84  
                         l2359 1C78                           l2295 1D7A                           l2455 1C48  
                         l2551 17CE                           l2543 17B6                           l2535 177C  
                         l2527 1D20                           l2519 1D10                           l2383 1A4A  
                         l2391 1A40                           l2287 1942                           l2279 1910  
                         l2199 0EEE                           l2471 1040                           l2631 1886  
                         l2623 186C                           l2615 1860                           l2297 1D58  
                         l2369 1CE8                           l2457 1C58                           l2545 17B8  
                         l2537 17A0                           l2529 1742                           l2385 1A90  
                         l2377 19AA                           l2289 1944                           l2481 10C0  
                         l2473 1068                           l2641 18A6                           l2633 188E  
                         l2625 1878                           l2617 1864                           l2299 1D5C  
                         l2459 1C62                           l2547 17C2                           l2539 17AA  
                         l2379 19F0                           l2395 148C                           l2491 1120  
                         l2483 10C6                           l2475 107C                           l2467 1028  
                         l2651 18C8                           l2643 18AA                           l2635 1896  
                         l2627 187E                           l2619 1868                           l2549 17C4  
                         l2389 19FA                           l2397 1500                           l2493 112A  
                         l2485 10EE                           l2477 1082                           l2469 103A  
                         l2661 18D2                           l2653 18CA                           l2645 18C2  
                         l2637 189E                           l2629 1882                           l2399 150C  
                         l2495 1136                           l2487 1104                           l2479 10AA  
                         l2655 18CC                           l2647 18C4                           l2639 18A2  
                         l2497 1142                           l2489 110A                           l2657 18CE  
                         l2649 18C6                           l2499 114E                           l2659 18D0  
                         l2781 0F1E                           ?_pad 000E                           l1993 13D2  
                         l1995 13E2                           l1997 13F2                           l1999 13FC  
                         STR_1 0E3A                           STR_2 0E16                           STR_3 0E5C  
                         STR_4 0E4B                           STR_5 0E01                           STR_6 0E88  
                         STR_7 0E7B                           STR_8 0E6D                           STR_9 0E29  
                         u1000 1C14                           u1001 1C10                           u1010 11B8  
                         u1011 11B2                           u1100 12E4                           u1020 11BA  
                         u1101 12E0                           u1030 11D4                           u1110 161C  
                         u1031 11D0                           u1111 1618                           u1200 1CBE  
                         u1040 11EA                           u1120 1692                           u1201 1CBA  
                         u1041 11E6                           u1121 168E                           u1050 1288  
                         u1130 0EBC                           u1210 1D50                           u1051 1284  
                         u1131 0EB8                           u1211 1D4C                           u1220 1900  
                         u1060 129A                           u1140 0F3C                           u1221 18FC  
                         u1061 1296                           u1141 0F38                           u1230 191E  
                         u1070 12AA                           u1150 0F60                           u1231 191A  
                         u1071 12A6                           u1151 0F5C                           u1240 193A  
                         u1080 12C4                           u1160 0F94                           u1400 10E2  
                         u1241 1936                           u1081 12C0                           u1161 0F90  
                         u1401 10DA                           u1250 1B06                           u1090 12D4  
                         u1170 0FB4                           u1410 1104                           u1251 1AFE  
                         u1091 12D0                           u1171 0FB0                           u1411 1100  
                         u1180 1AD2                           u1420 11A2                           u1181 1ACE  
                         u1421 119E                           u1190 1CA8                           u1270 1C04  
                         u1350 103A                           u1191 1CA4                           u1271 1C00  
                         u1351 1036                           u1408 10E4                           u1360 105C  
                 _BAUD4CONbits 0EE9                           u1361 1054                           u1370 107C  
                         u1371 1078                           u1268 1B08                           u1380 109E  
                         u1381 1096                           u1390 10C0                           u1391 10BC  
                         u1368 105E                           _T2PR 0FBC                           u1388 10A0  
                         u1557 1BE6                           u1567 1732                           u1577 1C4E  
                         abs@a 0007                           _dbuf 008E                           _main 1860  
                         _dtoa 11A4                           _prec 008A                           _test 101E  
                         pad@i 0013                           pad@p 0010                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           prodh 0FF4                           prodl 0FF3  
                         start 0000               __end_of_ADC_init 1D3E         __end_of_color_read_Red 19AA  
                 ___param_bank 0000                          ??_abs 0009                          ??_pad 0012  
                        ?_main 0001                          ?_dtoa 0015                          _ADPCH 0F5F  
              __end_of___awdiv 13D2                __end_of___awmod 15EE                          ?_test 0057  
              ___awdiv@divisor 0003                __end_of___lwdiv 195A                ___awdiv@counter 0005  
                 vfpfcnvrt@fmt 0021        __end_of_sendCharSerial4 1D56     __end_of_I2C_2_Master_Start 1D80  
   __end_of_I2C_2_Master_Write 1D62                          _flags 008C            read_prec_or_width@c 0009  
          read_prec_or_width@n 000A                          _fputc 13D2                          _fputs 1B5A  
                        pad@fp 000E                          _width 0088                          _putch 1D80  
                        dtoa@d 0016                          dtoa@i 001E                          dtoa@p 001A  
                        dtoa@s 001D                          dtoa@w 001B                          tablat 0FF5  
                        status 0FD8                __end_of_sprintf 1B5A        __end_of_color_read_Blue 1A9A  
        _I2C_2_Master_RepStart 1D62                ?_color_read_Red 0005                __initialization 1B96  
                 __end_of_main 18E6                   __end_of_dtoa 130E                   __end_of_test 11A4  
                 ??_ADC2String 0047                         ??_main 005A                         ??_dtoa 0018  
                       ??_test 0059                  __activetblptr 0003     __end_of_read_prec_or_width 169C  
                       ?_fputc 0001                         ?_fputs 0009                         _ADRESH 0F64  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21                  ADC2String@buf 0043               ___awdiv@dividend 0001  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
          ADC2String@frac_part 0049                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       _RG6PPS 0E88                  vfpfcnvrt@done 0029       __end_of_color_click_init 1C6E  
                       _RX4PPS 0E15             __end_of_ADC2String 1742                         _TX4REG 0EE4  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 002E                         ___wmul 1CC0  
                    ??___awdiv 0005                      ??___awmod 0005                      ??___lwdiv 000B  
         read_prec_or_width@ap 0008                         clear_0 1BAE                         clear_1 1BBA  
             ___awdiv@quotient 0007                ___awmod@divisor 0003                         _motorL 00B7  
                       _motorR 00AE                         isa$std 0001                ___awmod@counter 0005  
                       pad@buf 000F                         dtoa@fp 0015             send2USART@red_char 0132  
                       fputc@c 0001                         fputs@c 000B                         fputs@i 000C  
                       fputs@s 0009                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8                      ?_ADC_init 0001  
             ?_sendCharSerial4 0001                         putch@c 0001               __end_of_vfprintf 1ADC  
            ??_initDCmotorsPWM 0003                      ??_sprintf 0036                     __accesstop 0060  
      __end_of__initialization 1BC8       __end_of_color_read_Clear 1A4A       __end_of_color_read_Green 19FA  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001               ?_color_read_Blue 0005  
               __pcstackCOMRAM 0001                   __pidataBANK0 1D82                  __end_of_fputc 148C  
                __end_of_fputs 1B96                  __end_of_putch 1D82                     ??_ADC_init 0001  
                      ??_fputc 0004                        ??_fputs 000B                        ??_putch 0001  
                   __pbssBANK0 0060                     __pbssBANK2 0200              _color_writetoaddr 1CE6  
                 _T2CLKCONbits 0FBF             ?_color_writetoaddr 0003                        ?___wmul 0001  
          ??_color_writetoaddr 0004                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
            main@battery_level 005A                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
       color_writetoaddr@value 0003               ??_color_read_Red 0007        send2USART@battery_level 004D  
    __end_of_color_writetoaddr 1D06                      _ADREFbits 0F58             _I2C_2_Master_Start 1D76  
                   _initUSART4 1D06             _I2C_2_Master_Write 1D56                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 000A        sendStringSerial4@string 0002  
                      ___awdiv 130E                        ___awmod 153E            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 18E6            ?_I2C_2_Master_Write 0001                      ?_vfprintf 002B  
          send2USART@blue_char 0164                   __psmallconst 0E00                        __pcinit 1B96  
                      __ramtop 0E00                     _send2USART 148C                        __ptext0 1860  
                      __ptext1 101E                        __ptext2 148C                        __ptext3 1BCE  
                      __ptext4 1D3E                        __ptext5 169C                        __ptext6 1B1E  
                      __ptext7 1A9A                        __ptext8 0E96                        __ptext9 15EE  
                    _T2CONbits 0FBD          read_prec_or_width@fmt 0007               ___awmod@dividend 0001  
                    _T2HLTbits 0FBE                  _RxBufWriteCnt 005F                        _sprintf 1B1E  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 1BC8  
                      fputc@fp 0003                        fputs@fp 000A              ?_color_click_init 0001  
           _read_prec_or_width 15EE             ??_color_click_init 0005                        test@red 00F2  
            __end_of_vfpfcnvrt 101E                        postdec2 0FDD            ?_read_prec_or_width 0007  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0025                     ??_vfprintf 002E                _initDCmotorsPWM 1742  
                    _TRISAbits 0F81                      _TRISCbits 0F83                      _TRISDbits 0F84  
                    _TRISEbits 0F85                      _TRISFbits 0F86                      _TRISGbits 0F87  
         ??_read_prec_or_width 0009       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
                  _CCP1CONbits 0FAB              ?_color_read_Clear 0005                   _EUSART4RXbuf 0074  
                 _EUSART4TXbuf 0200                    _CCP2CONbits 0FA7              ?_color_read_Green 0005  
                  _CCP3CONbits 0F26                    ?_initUSART4 0001                    _CCP4CONbits 0F22  
    sendCharSerial4@charToSend 0001             ??_color_read_Clear 0007             ??_color_read_Green 0007  
                  vfpfcnvrt@ap 0022                    vfpfcnvrt@cp 002A                    vfpfcnvrt@fp 0020  
               __end_of___wmul 1CE6                    ?_send2USART 004D            color_read_Clear@tmp 000A  
          start_initialization 1B96                    __end_of_abs 1C3A                    __end_of_pad 1860  
                _TxBufWriteCnt 005D            color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 17D2  
                  vfprintf@fmt 002C             ADC2String@int_part 004B                       ??___wmul 0005  
                  __pdataBANK0 00FC                    __pbssCOMRAM 005C                  __pcstackBANK0 00C0  
                __pcstackBANK1 0100               ___lwdiv@dividend 0007                      _dtoa$2283 0018  
                     ?___awdiv 0001                       ?___awmod 0001                       ?___lwdiv 0007  
                 _readingIndex 008D           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
                  __smallconst 0E00              _I2C_2_Master_Idle 1C98              _I2C_2_Master_Init 1C6E  
            _I2C_2_Master_Read 1ADC              _I2C_2_Master_Stop 1D6C                   _RxBufReadCnt 005E  
                     _ADC_init 1D24             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B  
     initDCmotorsPWM@PWMperiod 0001                       ?_sprintf 002F              _sendStringSerial4 1BCE  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 0F7B                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATGbits 0F7F              ADC2String@ADC_val 0045             ?_sendStringSerial4 0002  
                     _PIE4bits 0E2D                       _PIR4bits 0E37               ?_initDCmotorsPWM 0001  
            ??_sendCharSerial4 0001                       _SSP2CON2 0EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 0ED8                     _ADC2String 169C                      _vfpfcnvrt 0E96  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 1CC0      __end_of_I2C_2_Master_Init 1C98  
    __end_of_I2C_2_Master_Read 1B1E              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 1D76  
  I2C_2_Master_Write@data_byte 0002                    _ldrReadings 0060              ??_color_read_Blue 0007  
                 _TxBufReadCnt 005C                send2USART@clear 0055      __end_of_sendStringSerial4 1C06  
              send2USART@green 0051  __end_of_I2C_2_Master_RepStart 1D6C             color_read_Blue@tmp 000A  
                 ??_initUSART4 0001                       __Hrparam 0000                     vfprintf@ap 002D  
                     __Lrparam 0000           send2USART@clear_char 01C8                     vfprintf@fp 002B  
                   ?_vfpfcnvrt 0020                   ??_send2USART 0057                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                       _dataFlag 00FC                     sprintf@fmt 0031  
                test@led_state 00C0                ___lwdiv@divisor 0009             __end_of_initUSART4 1D24  
              ___lwdiv@counter 000D                       __ptext10 1CC0                       __ptext11 11A4  
                     __ptext20 195A                       __ptext12 17D2                       __ptext21 19AA  
                     __ptext13 1B5A                       __ptext30 1D56                       __ptext22 19FA  
                     __ptext14 13D2                       __ptext31 1D6C                       __ptext23 1A4A  
                     __ptext15 1D80                       __ptext32 1D76                       __ptext24 1D62  
                     __ptext16 1C06                       __ptext33 1C98                       __ptext25 1ADC  
                     __ptext17 153E                       __ptext34 1C6E                       __ptext26 1D06  
                     __ptext18 130E                       __ptext35 1D24                       __ptext27 1742  
                     __ptext19 18E6                       __ptext28 1C3A                       __ptext29 1CE6  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA             __end_of_send2USART 153E  
         send2USART@green_char 0196                      test@clear 00F8                      test@combo 00FA  
                    test@green 00F6                       isa$xinst 0000                     _RC4STAbits 0EE7  
                  ?_ADC2String 0043                       _vfprintf 1A9A                 send2USART@blue 0053  
            test@battery_level 0057                      sprintf@ap 0036                       test@blue 00F4  
                send2USART@buf 0100                  send2USART@red 004F                    ??_vfpfcnvrt 0023  
             _color_click_init 1C3A                       sprintf@f 0037                       sprintf@s 002F  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                     _TX4STAbits 0EE8  
              _sendCharSerial4 1D3E  
