

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Mar 12 12:11:43 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=3
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=3
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Generated 21/07/2023 GMT
    61                           ; 
    62                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F67K40 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94   000000                     
    95                           	psect	idataBANK1
    96   002930                     __pidataBANK1:
    97                           	callstack 0
    98                           
    99                           ;initializer for _dataFlag
   100   002930  01                 	db	1
   101   000000                     _TX4REG	set	3812
   102   000000                     _RC4STAbits	set	3815
   103   000000                     _SP4BRGH	set	3814
   104   000000                     _TRISFbits	set	3974
   105   000000                     _LATFbits	set	3966
   106   000000                     _LATHbits	set	3968
   107   000000                     _TRISAbits	set	3969
   108   000000                     _TRISEbits	set	3973
   109   000000                     _TRISGbits	set	3975
   110   000000                     _TRISDbits	set	3972
   111   000000                     _PORTFbits	set	3982
   112   000000                     _SSP2CON2bits	set	3802
   113   000000                     _RX4PPS	set	3605
   114   000000                     _SSP2CLKPPS	set	3612
   115   000000                     _SSP2DATPPS	set	3613
   116   000000                     _ANSELDbits	set	3751
   117   000000                     _SSP2ADD	set	3798
   118   000000                     _SSP2CON1bits	set	3801
   119   000000                     _LATAbits	set	3961
   120   000000                     _LATEbits	set	3965
   121   000000                     _LATGbits	set	3967
   122   000000                     _LATCbits	set	3963
   123   000000                     _LATDbits	set	3964
   124   000000                     _CCPR2H	set	4006
   125   000000                     _CCPR1H	set	4010
   126   000000                     _RC4REG	set	3811
   127   000000                     _SP4BRGL	set	3813
   128   000000                     _TX4STAbits	set	3816
   129   000000                     _BAUD4CONbits	set	3817
   130   000000                     _SSP2CON2	set	3802
   131   000000                     _CCPR4H	set	3873
   132   000000                     _CCPR3H	set	3877
   133   000000                     _SSP2STAT	set	3800
   134   000000                     _ANSELFbits	set	3764
   135   000000                     _SSP2BUF	set	3797
   136   000000                     _PIE4bits	set	3629
   137   000000                     _PIR4bits	set	3639
   138   000000                     _RC0PPS	set	3682
   139   000000                     _RC7PPS	set	3689
   140   000000                     _RD5PPS	set	3695
   141   000000                     _RE2PPS	set	3700
   142   000000                     _RD6PPS	set	3696
   143   000000                     _CCP1CONbits	set	4011
   144   000000                     _CCPTMRS0bits	set	4013
   145   000000                     _T2PR	set	4028
   146   000000                     _T2CONbits	set	4029
   147   000000                     _CCP2CONbits	set	4007
   148   000000                     _CCP3CONbits	set	3878
   149   000000                     _ADREFbits	set	3928
   150   000000                     _CCP4CONbits	set	3874
   151   000000                     _TRISHbits	set	3976
   152   000000                     _TRISCbits	set	3971
   153   000000                     _ADPCH	set	3935
   154   000000                     _ADRESH	set	3940
   155   000000                     _ADCON0bits	set	3936
   156   000000                     _RE4PPS	set	3702
   157   000000                     _RG6PPS	set	3720
   158   000000                     _T2CLKCONbits	set	4031
   159   000000                     _T2HLTbits	set	4030
   160                           
   161                           	psect	smallconst
   162   000E00                     __psmallconst:
   163                           	callstack 0
   164   000E00  00                 	db	0
   165   000E01                     STR_11:
   166                           
   167                           ; BSR set to: 15
   168   000E01  43                 	db	67	;'C'
   169   000E02  61                 	db	97	;'a'
   170   000E03  6C                 	db	108	;'l'
   171   000E04  69                 	db	105	;'i'
   172   000E05  62                 	db	98	;'b'
   173   000E06  72                 	db	114	;'r'
   174   000E07  61                 	db	97	;'a'
   175   000E08  74                 	db	116	;'t'
   176   000E09  69                 	db	105	;'i'
   177   000E0A  6F                 	db	111	;'o'
   178   000E0B  6E                 	db	110	;'n'
   179   000E0C  20                 	db	32
   180   000E0D  73                 	db	115	;'s'
   181   000E0E  74                 	db	116	;'t'
   182   000E0F  61                 	db	97	;'a'
   183   000E10  74                 	db	116	;'t'
   184   000E11  65                 	db	101	;'e'
   185   000E12  20                 	db	32
   186   000E13  3D                 	db	61	;'='
   187   000E14  20                 	db	32
   188   000E15  61                 	db	97	;'a'
   189   000E16  6D                 	db	109	;'m'
   190   000E17  62                 	db	98	;'b'
   191   000E18  69                 	db	105	;'i'
   192   000E19  65                 	db	101	;'e'
   193   000E1A  6E                 	db	110	;'n'
   194   000E1B  74                 	db	116	;'t'
   195   000E1C  20                 	db	32
   196   000E1D  6C                 	db	108	;'l'
   197   000E1E  69                 	db	105	;'i'
   198   000E1F  67                 	db	103	;'g'
   199   000E20  68                 	db	104	;'h'
   200   000E21  74                 	db	116	;'t'
   201   000E22  00                 	db	0
   202   000E23                     STR_7:
   203                           
   204                           ; BSR set to: 15
   205   000E23  43                 	db	67	;'C'
   206   000E24  61                 	db	97	;'a'
   207   000E25  6C                 	db	108	;'l'
   208   000E26  69                 	db	105	;'i'
   209   000E27  62                 	db	98	;'b'
   210   000E28  72                 	db	114	;'r'
   211   000E29  61                 	db	97	;'a'
   212   000E2A  74                 	db	116	;'t'
   213   000E2B  69                 	db	105	;'i'
   214   000E2C  6F                 	db	111	;'o'
   215   000E2D  6E                 	db	110	;'n'
   216   000E2E  20                 	db	32
   217   000E2F  73                 	db	115	;'s'
   218   000E30  74                 	db	116	;'t'
   219   000E31  61                 	db	97	;'a'
   220   000E32  74                 	db	116	;'t'
   221   000E33  65                 	db	101	;'e'
   222   000E34  20                 	db	32
   223   000E35  3D                 	db	61	;'='
   224   000E36  20                 	db	32
   225   000E37  67                 	db	103	;'g'
   226   000E38  72                 	db	114	;'r'
   227   000E39  65                 	db	101	;'e'
   228   000E3A  65                 	db	101	;'e'
   229   000E3B  6E                 	db	110	;'n'
   230   000E3C  20                 	db	32
   231   000E3D  0A                 	db	10
   232   000E3E  0D                 	db	13
   233   000E3F  00                 	db	0
   234   000E40                     STR_9:
   235                           
   236                           ; BSR set to: 15
   237   000E40  43                 	db	67	;'C'
   238   000E41  61                 	db	97	;'a'
   239   000E42  6C                 	db	108	;'l'
   240   000E43  69                 	db	105	;'i'
   241   000E44  62                 	db	98	;'b'
   242   000E45  72                 	db	114	;'r'
   243   000E46  61                 	db	97	;'a'
   244   000E47  74                 	db	116	;'t'
   245   000E48  69                 	db	105	;'i'
   246   000E49  6F                 	db	111	;'o'
   247   000E4A  6E                 	db	110	;'n'
   248   000E4B  20                 	db	32
   249   000E4C  73                 	db	115	;'s'
   250   000E4D  74                 	db	116	;'t'
   251   000E4E  61                 	db	97	;'a'
   252   000E4F  74                 	db	116	;'t'
   253   000E50  65                 	db	101	;'e'
   254   000E51  3D                 	db	61	;'='
   255   000E52  20                 	db	32
   256   000E53  62                 	db	98	;'b'
   257   000E54  6C                 	db	108	;'l'
   258   000E55  75                 	db	117	;'u'
   259   000E56  65                 	db	101	;'e'
   260   000E57  20                 	db	32
   261   000E58  0A                 	db	10
   262   000E59  0D                 	db	13
   263   000E5A  00                 	db	0
   264   000E5B                     STR_13:
   265                           
   266                           ; BSR set to: 15
   267   000E5B  43                 	db	67	;'C'
   268   000E5C  41                 	db	65	;'A'
   269   000E5D  4C                 	db	76	;'L'
   270   000E5E  49                 	db	73	;'I'
   271   000E5F  42                 	db	66	;'B'
   272   000E60  52                 	db	82	;'R'
   273   000E61  41                 	db	65	;'A'
   274   000E62  54                 	db	84	;'T'
   275   000E63  49                 	db	73	;'I'
   276   000E64  4F                 	db	79	;'O'
   277   000E65  4E                 	db	78	;'N'
   278   000E66  20                 	db	32
   279   000E67  43                 	db	67	;'C'
   280   000E68  4F                 	db	79	;'O'
   281   000E69  4D                 	db	77	;'M'
   282   000E6A  50                 	db	80	;'P'
   283   000E6B  4C                 	db	76	;'L'
   284   000E6C  45                 	db	69	;'E'
   285   000E6D  54                 	db	84	;'T'
   286   000E6E  45                 	db	69	;'E'
   287   000E6F  44                 	db	68	;'D'
   288   000E70  20                 	db	32
   289   000E71  0A                 	db	10
   290   000E72  0D                 	db	13
   291   000E73  00                 	db	0
   292   000E74                     STR_5:
   293                           
   294                           ; BSR set to: 15
   295   000E74  43                 	db	67	;'C'
   296   000E75  61                 	db	97	;'a'
   297   000E76  6C                 	db	108	;'l'
   298   000E77  69                 	db	105	;'i'
   299   000E78  62                 	db	98	;'b'
   300   000E79  72                 	db	114	;'r'
   301   000E7A  61                 	db	97	;'a'
   302   000E7B  74                 	db	116	;'t'
   303   000E7C  69                 	db	105	;'i'
   304   000E7D  6F                 	db	111	;'o'
   305   000E7E  6E                 	db	110	;'n'
   306   000E7F  20                 	db	32
   307   000E80  73                 	db	115	;'s'
   308   000E81  74                 	db	116	;'t'
   309   000E82  61                 	db	97	;'a'
   310   000E83  74                 	db	116	;'t'
   311   000E84  65                 	db	101	;'e'
   312   000E85  20                 	db	32
   313   000E86  3D                 	db	61	;'='
   314   000E87  20                 	db	32
   315   000E88  72                 	db	114	;'r'
   316   000E89  65                 	db	101	;'e'
   317   000E8A  64                 	db	100	;'d'
   318   000E8B  00                 	db	0
   319   000E8C                     STR_15:
   320                           
   321                           ; BSR set to: 15
   322   000E8C  56                 	db	86	;'V'
   323   000E8D  6F                 	db	111	;'o'
   324   000E8E  6C                 	db	108	;'l'
   325   000E8F  74                 	db	116	;'t'
   326   000E90  61                 	db	97	;'a'
   327   000E91  67                 	db	103	;'g'
   328   000E92  65                 	db	101	;'e'
   329   000E93  20                 	db	32
   330   000E94  3D                 	db	61	;'='
   331   000E95  20                 	db	32
   332   000E96  25                 	db	37
   333   000E97  64                 	db	100	;'d'
   334   000E98  2E                 	db	46
   335   000E99  25                 	db	37
   336   000E9A  30                 	db	48	;'0'
   337   000E9B  32                 	db	50	;'2'
   338   000E9C  64                 	db	100	;'d'
   339   000E9D  2C                 	db	44
   340   000E9E  20                 	db	32
   341   000E9F  20                 	db	32
   342   000EA0  00                 	db	0
   343   000EA1                     STR_2:
   344                           
   345                           ; BSR set to: 15
   346   000EA1  47                 	db	71	;'G'
   347   000EA2  72                 	db	114	;'r'
   348   000EA3  65                 	db	101	;'e'
   349   000EA4  65                 	db	101	;'e'
   350   000EA5  6E                 	db	110	;'n'
   351   000EA6  5F                 	db	95	;'_'
   352   000EA7  6C                 	db	108	;'l'
   353   000EA8  69                 	db	105	;'i'
   354   000EA9  67                 	db	103	;'g'
   355   000EAA  68                 	db	104	;'h'
   356   000EAB  74                 	db	116	;'t'
   357   000EAC  3D                 	db	61	;'='
   358   000EAD  25                 	db	37
   359   000EAE  64                 	db	100	;'d'
   360   000EAF  2C                 	db	44
   361   000EB0  20                 	db	32
   362   000EB1  0A                 	db	10
   363   000EB2  0D                 	db	13
   364   000EB3  00                 	db	0
   365   000EB4                     STR_1:
   366                           
   367                           ; BSR set to: 15
   368   000EB4  52                 	db	82	;'R'
   369   000EB5  65                 	db	101	;'e'
   370   000EB6  64                 	db	100	;'d'
   371   000EB7  5F                 	db	95	;'_'
   372   000EB8  6C                 	db	108	;'l'
   373   000EB9  69                 	db	105	;'i'
   374   000EBA  67                 	db	103	;'g'
   375   000EBB  68                 	db	104	;'h'
   376   000EBC  74                 	db	116	;'t'
   377   000EBD  3D                 	db	61	;'='
   378   000EBE  25                 	db	37
   379   000EBF  64                 	db	100	;'d'
   380   000EC0  2C                 	db	44
   381   000EC1  20                 	db	32
   382   000EC2  0A                 	db	10
   383   000EC3  0D                 	db	13
   384   000EC4  00                 	db	0
   385   000EC5                     STR_4:
   386                           
   387                           ; BSR set to: 15
   388   000EC5  41                 	db	65	;'A'
   389   000EC6  6C                 	db	108	;'l'
   390   000EC7  6C                 	db	108	;'l'
   391   000EC8  5F                 	db	95	;'_'
   392   000EC9  6C                 	db	108	;'l'
   393   000ECA  69                 	db	105	;'i'
   394   000ECB  67                 	db	103	;'g'
   395   000ECC  68                 	db	104	;'h'
   396   000ECD  74                 	db	116	;'t'
   397   000ECE  73                 	db	115	;'s'
   398   000ECF  3D                 	db	61	;'='
   399   000ED0  25                 	db	37
   400   000ED1  64                 	db	100	;'d'
   401   000ED2  20                 	db	32
   402   000ED3  0A                 	db	10
   403   000ED4  0D                 	db	13
   404   000ED5  00                 	db	0
   405   000ED6                     STR_3:
   406                           
   407                           ; BSR set to: 15
   408   000ED6  42                 	db	66	;'B'
   409   000ED7  6C                 	db	108	;'l'
   410   000ED8  75                 	db	117	;'u'
   411   000ED9  65                 	db	101	;'e'
   412   000EDA  5F                 	db	95	;'_'
   413   000EDB  6C                 	db	108	;'l'
   414   000EDC  69                 	db	105	;'i'
   415   000EDD  67                 	db	103	;'g'
   416   000EDE  68                 	db	104	;'h'
   417   000EDF  74                 	db	116	;'t'
   418   000EE0  3D                 	db	61	;'='
   419   000EE1  25                 	db	37
   420   000EE2  64                 	db	100	;'d'
   421   000EE3  20                 	db	32
   422   000EE4  0A                 	db	10
   423   000EE5  0D                 	db	13
   424   000EE6  00                 	db	0
   425   000EE7                     STR_16:
   426                           
   427                           ; BSR set to: 15
   428   000EE7  68                 	db	104	;'h'
   429   000EE8  75                 	db	117	;'u'
   430   000EE9  65                 	db	101	;'e'
   431   000EEA  3D                 	db	61	;'='
   432   000EEB  25                 	db	37
   433   000EEC  30                 	db	48	;'0'
   434   000EED  33                 	db	51	;'3'
   435   000EEE  64                 	db	100	;'d'
   436   000EEF  2C                 	db	44
   437   000EF0  20                 	db	32
   438   000EF1  20                 	db	32
   439   000EF2  00                 	db	0
   440   000EF3                     STR_6:
   441                           
   442                           ; BSR set to: 15
   443   000EF3  2E                 	db	46
   444   000EF4  00                 	db	0
   445   000EF5  00                 	db	0	; dummy byte at the end
   446   000000                     
   447                           ; #config settings
   448                           
   449                           	psect	cinit
   450   0027EC                     __pcinit:
   451                           	callstack 0
   452   0027EC                     start_initialization:
   453                           	callstack 0
   454   0027EC                     __initialization:
   455                           	callstack 0
   456                           
   457                           ; Initialize objects allocated to BANK1 (1 bytes)
   458                           ; load TBLPTR registers with __pidataBANK1
   459   0027EC  0E30               	movlw	low __pidataBANK1
   460   0027EE  6EF6               	movwf	tblptrl,c
   461   0027F0  0E29               	movlw	high __pidataBANK1
   462   0027F2  6EF7               	movwf	tblptrh,c
   463   0027F4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   464   0027F6  6EF8               	movwf	tblptru,c
   465   0027F8  0009               	tblrd		*+	;fetch initializer
   466   0027FA  CFF5 F1AD          	movff	tablat,__pdataBANK1
   467                           
   468                           ; Clear objects allocated to BANK1 (171 bytes)
   469   0027FE  EE01  F000         	lfsr	0,__pbssBANK1
   470   002802  0EAB               	movlw	171
   471   002804                     clear_0:
   472   002804  6AEE               	clrf	postinc0,c
   473   002806  06E8               	decf	wreg,f,c
   474   002808  E1FD               	bnz	clear_0
   475                           
   476                           ; Clear objects allocated to BANK0 (4 bytes)
   477   00280A  0100               	movlb	0
   478   00280C  6BFF               	clrf	(__pbssBANK0+3)& (0+255),b
   479   00280E  6BFE               	clrf	(__pbssBANK0+2)& (0+255),b
   480   002810  6BFD               	clrf	(__pbssBANK0+1)& (0+255),b
   481   002812  6BFC               	clrf	__pbssBANK0& (0+255),b
   482                           
   483                           ; Clear objects allocated to COMRAM (1 bytes)
   484   002814  6A5F               	clrf	__pbssCOMRAM& (0+255),c
   485   002816                     end_of_initialization:
   486                           	callstack 0
   487   002816                     __end_of__initialization:
   488                           	callstack 0
   489   002816  0100               	movlb	0
   490   002818  EF04  F00F         	goto	_main	;jump to C main() function
   491                           
   492                           	psect	bssCOMRAM
   493   00005F                     __pbssCOMRAM:
   494                           	callstack 0
   495   00005F                     _TxBufWriteCnt:
   496                           	callstack 0
   497   00005F                     	ds	1
   498                           
   499                           	psect	bssBANK0
   500   0000FC                     __pbssBANK0:
   501                           	callstack 0
   502   0000FC                     _flags:
   503                           	callstack 0
   504   0000FC                     	ds	1
   505   0000FD                     _TxBufReadCnt:
   506                           	callstack 0
   507   0000FD                     	ds	1
   508   0000FE                     _RxBufReadCnt:
   509                           	callstack 0
   510   0000FE                     	ds	1
   511   0000FF                     _RxBufWriteCnt:
   512                           	callstack 0
   513   0000FF                     	ds	1
   514                           
   515                           	psect	bssBANK1
   516   000100                     __pbssBANK1:
   517                           	callstack 0
   518   000100                     _EUSART4TXbuf:
   519                           	callstack 0
   520   000100                     	ds	60
   521   00013C                     _ldrReadings:
   522                           	callstack 0
   523   00013C                     	ds	20
   524   000150                     _EUSART4RXbuf:
   525                           	callstack 0
   526   000150                     	ds	20
   527   000164                     _width:
   528                           	callstack 0
   529   000164                     	ds	2
   530   000166                     _prec:
   531                           	callstack 0
   532   000166                     	ds	2
   533   000168                     _readingIndex:
   534                           	callstack 0
   535   000168                     	ds	1
   536   000169                     _dbuf:
   537                           	callstack 0
   538   000169                     	ds	32
   539   000189                     _motorR:
   540                           	callstack 0
   541   000189                     	ds	9
   542   000192                     _motorL:
   543                           	callstack 0
   544   000192                     	ds	9
   545   00019B                     _colorCurrent:
   546                           	callstack 0
   547   00019B                     	ds	8
   548   0001A3                     _colorCalibration:
   549                           	callstack 0
   550   0001A3                     	ds	8
   551                           
   552                           	psect	dataBANK1
   553   0001AD                     __pdataBANK1:
   554                           	callstack 0
   555   0001AD                     _dataFlag:
   556                           	callstack 0
   557   0001AD                     	ds	1
   558                           
   559                           	psect	cstackBANK1
   560   0001AB                     __pcstackBANK1:
   561                           	callstack 0
   562   0001AB                     main@battery_level:
   563                           	callstack 0
   564                           
   565                           ; 2 bytes @ 0x0
   566   0001AB                     	ds	2
   567                           
   568                           	psect	cstackBANK0
   569   000060                     __pcstackBANK0:
   570                           	callstack 0
   571   000060                     _convert_rgb2hue$2847:
   572                           	callstack 0
   573   000060                     send2USART@buf:
   574                           	callstack 0
   575                           
   576                           ; 50 bytes @ 0x0
   577   000060                     	ds	8
   578   000068                     convert_rgb2hue@hue:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0x8
   582   000068                     	ds	2
   583   00006A                     convert_rgb2hue@total:
   584                           	callstack 0
   585                           
   586                           ; 8 bytes @ 0xA
   587   00006A                     	ds	8
   588   000072                     _convert_rgb2hue$2845:
   589                           	callstack 0
   590                           
   591                           ; 8 bytes @ 0x12
   592   000072                     	ds	8
   593   00007A                     _convert_rgb2hue$2846:
   594                           	callstack 0
   595                           
   596                           ; 8 bytes @ 0x1A
   597   00007A                     	ds	8
   598   000082                     convert_rgb2hue@b:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x22
   602   000082                     	ds	2
   603   000084                     convert_rgb2hue@r:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x24
   607   000084                     	ds	2
   608   000086                     convert_rgb2hue@g:
   609                           	callstack 0
   610                           
   611                           ; 2 bytes @ 0x26
   612   000086                     	ds	12
   613   000092                     send2USART@hue_char:
   614                           	callstack 0
   615                           
   616                           ; 50 bytes @ 0x32
   617   000092                     	ds	50
   618   0000C4                     test@led_state:
   619                           	callstack 0
   620                           
   621                           ; 50 bytes @ 0x64
   622   0000C4                     	ds	50
   623   0000F6                     test@hue:
   624                           	callstack 0
   625                           
   626                           ; 2 bytes @ 0x96
   627   0000F6                     	ds	2
   628   0000F8                     test@combo:
   629                           	callstack 0
   630                           
   631                           ; 2 bytes @ 0x98
   632   0000F8                     	ds	2
   633   0000FA                     ??_main:
   634                           
   635                           ; 1 bytes @ 0x9A
   636   0000FA                     	ds	2
   637                           
   638                           	psect	cstackCOMRAM
   639   000001                     __pcstackCOMRAM:
   640                           	callstack 0
   641   000001                     ??_I2C_2_Master_Idle:
   642   000001                     ?___wmul:
   643                           	callstack 0
   644   000001                     ?___awdiv:
   645                           	callstack 0
   646   000001                     ?___awmod:
   647                           	callstack 0
   648   000001                     ?___omul:
   649                           	callstack 0
   650   000001                     sendCharSerial4@charToSend:
   651                           	callstack 0
   652   000001                     initDCmotorsPWM@PWMperiod:
   653                           	callstack 0
   654   000001                     ___wmul@multiplier:
   655                           	callstack 0
   656   000001                     ___awdiv@dividend:
   657                           	callstack 0
   658   000001                     ___awmod@dividend:
   659                           	callstack 0
   660   000001                     fputc@c:
   661                           	callstack 0
   662   000001                     ___omul@multiplier:
   663                           	callstack 0
   664                           
   665                           ; 8 bytes @ 0x0
   666   000001                     	ds	1
   667   000002                     ??_I2C_2_Master_Read:
   668   000002                     I2C_2_Master_Write@data_byte:
   669                           	callstack 0
   670   000002                     sendStringSerial4@string:
   671                           	callstack 0
   672                           
   673                           ; 1 bytes @ 0x1
   674   000002                     	ds	1
   675   000003                     color_writetoaddr@value:
   676                           	callstack 0
   677   000003                     I2C_2_Master_Read@ack:
   678                           	callstack 0
   679   000003                     fputc@fp:
   680                           	callstack 0
   681   000003                     ___wmul@multiplicand:
   682                           	callstack 0
   683   000003                     ___awdiv@divisor:
   684                           	callstack 0
   685   000003                     ___awmod@divisor:
   686                           	callstack 0
   687                           
   688                           ; 2 bytes @ 0x2
   689   000003                     	ds	1
   690   000004                     ??_fputc:
   691   000004                     color_writetoaddr@address:
   692                           	callstack 0
   693   000004                     I2C_2_Master_Read@tmp:
   694                           	callstack 0
   695                           
   696                           ; 1 bytes @ 0x3
   697   000004                     	ds	1
   698   000005                     ??_color_click_init:
   699   000005                     ?_color_read_Red:
   700                           	callstack 0
   701   000005                     ?_color_read_Green:
   702                           	callstack 0
   703   000005                     ?_color_read_Blue:
   704                           	callstack 0
   705   000005                     ?_color_read_Clear:
   706                           	callstack 0
   707   000005                     ___awdiv@counter:
   708                           	callstack 0
   709   000005                     ___awmod@counter:
   710                           	callstack 0
   711   000005                     ___wmul@product:
   712                           	callstack 0
   713                           
   714                           ; 2 bytes @ 0x4
   715   000005                     	ds	1
   716   000006                     ___awdiv@sign:
   717                           	callstack 0
   718   000006                     ___awmod@sign:
   719                           	callstack 0
   720                           
   721                           ; 1 bytes @ 0x5
   722   000006                     	ds	1
   723   000007                     ??_color_read_Red:
   724   000007                     ??_color_read_Green:
   725   000007                     ??_color_read_Blue:
   726   000007                     ??_color_read_Clear:
   727   000007                     ?_abs:
   728                           	callstack 0
   729   000007                     ?___lwdiv:
   730                           	callstack 0
   731   000007                     ?_read_prec_or_width:
   732                           	callstack 0
   733   000007                     read_prec_or_width@fmt:
   734                           	callstack 0
   735   000007                     ___awdiv@quotient:
   736                           	callstack 0
   737   000007                     ___lwdiv@dividend:
   738                           	callstack 0
   739   000007                     abs@a:
   740                           	callstack 0
   741                           
   742                           ; 2 bytes @ 0x6
   743   000007                     	ds	1
   744   000008                     read_prec_or_width@ap:
   745                           	callstack 0
   746                           
   747                           ; 1 bytes @ 0x7
   748   000008                     	ds	1
   749   000009                     ??_abs:
   750   000009                     read_prec_or_width@c:
   751                           	callstack 0
   752   000009                     ___lwdiv@divisor:
   753                           	callstack 0
   754   000009                     fputs@s:
   755                           	callstack 0
   756   000009                     ___omul@multiplicand:
   757                           	callstack 0
   758                           
   759                           ; 8 bytes @ 0x8
   760   000009                     	ds	1
   761   00000A                     color_read_Red@tmp:
   762                           	callstack 0
   763   00000A                     color_read_Green@tmp:
   764                           	callstack 0
   765   00000A                     color_read_Blue@tmp:
   766                           	callstack 0
   767   00000A                     color_read_Clear@tmp:
   768                           	callstack 0
   769   00000A                     read_prec_or_width@n:
   770                           	callstack 0
   771                           
   772                           ; 2 bytes @ 0x9
   773   00000A                     	ds	1
   774   00000B                     ___lwdiv@counter:
   775                           	callstack 0
   776   00000B                     fputs@fp:
   777                           	callstack 0
   778                           
   779                           ; 1 bytes @ 0xA
   780   00000B                     	ds	1
   781   00000C                     fputs@c:
   782                           	callstack 0
   783   00000C                     reading_values@cCurr:
   784                           	callstack 0
   785   00000C                     ___lwdiv@quotient:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0xB
   789   00000C                     	ds	1
   790   00000D                     fputs@i:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0xC
   794   00000D                     	ds	1
   795   00000E                     
   796                           ; 1 bytes @ 0xD
   797   00000E                     	ds	1
   798   00000F                     pad@fp:
   799                           	callstack 0
   800                           
   801                           ; 1 bytes @ 0xE
   802   00000F                     	ds	1
   803   000010                     pad@buf:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0xF
   807   000010                     	ds	1
   808   000011                     ___omul@product:
   809                           	callstack 0
   810                           
   811                           ; 8 bytes @ 0x10
   812   000011                     	ds	1
   813   000012                     pad@p:
   814                           	callstack 0
   815                           
   816                           ; 2 bytes @ 0x11
   817   000012                     	ds	2
   818   000014                     ??_pad:
   819                           
   820                           ; 1 bytes @ 0x13
   821   000014                     	ds	1
   822   000015                     pad@i:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0x14
   826   000015                     	ds	2
   827   000017                     dtoa@fp:
   828                           	callstack 0
   829                           
   830                           ; 1 bytes @ 0x16
   831   000017                     	ds	1
   832   000018                     dtoa@d:
   833                           	callstack 0
   834                           
   835                           ; 2 bytes @ 0x17
   836   000018                     	ds	1
   837   000019                     ?___lodiv:
   838                           	callstack 0
   839   000019                     ___lodiv@dividend:
   840                           	callstack 0
   841                           
   842                           ; 8 bytes @ 0x18
   843   000019                     	ds	1
   844   00001A                     _dtoa$2524:
   845                           	callstack 0
   846                           
   847                           ; 2 bytes @ 0x19
   848   00001A                     	ds	2
   849   00001C                     dtoa@p:
   850                           	callstack 0
   851                           
   852                           ; 1 bytes @ 0x1B
   853   00001C                     	ds	1
   854   00001D                     dtoa@w:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x1C
   858   00001D                     	ds	2
   859   00001F                     dtoa@s:
   860                           	callstack 0
   861                           
   862                           ; 1 bytes @ 0x1E
   863   00001F                     	ds	1
   864   000020                     dtoa@i:
   865                           	callstack 0
   866                           
   867                           ; 2 bytes @ 0x1F
   868   000020                     	ds	1
   869   000021                     ___lodiv@divisor:
   870                           	callstack 0
   871                           
   872                           ; 8 bytes @ 0x20
   873   000021                     	ds	1
   874   000022                     vfpfcnvrt@fp:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x21
   878   000022                     	ds	1
   879   000023                     vfpfcnvrt@fmt:
   880                           	callstack 0
   881                           
   882                           ; 1 bytes @ 0x22
   883   000023                     	ds	1
   884   000024                     vfpfcnvrt@ap:
   885                           	callstack 0
   886                           
   887                           ; 1 bytes @ 0x23
   888   000024                     	ds	1
   889   000025                     ??_vfpfcnvrt:
   890                           
   891                           ; 1 bytes @ 0x24
   892   000025                     	ds	2
   893   000027                     vfpfcnvrt@convarg:
   894                           	callstack 0
   895                           
   896                           ; 4 bytes @ 0x26
   897   000027                     	ds	2
   898   000029                     ___lodiv@quotient:
   899                           	callstack 0
   900                           
   901                           ; 8 bytes @ 0x28
   902   000029                     	ds	2
   903   00002B                     vfpfcnvrt@done:
   904                           	callstack 0
   905                           
   906                           ; 1 bytes @ 0x2A
   907   00002B                     	ds	1
   908   00002C                     vfpfcnvrt@cp:
   909                           	callstack 0
   910                           
   911                           ; 1 bytes @ 0x2B
   912   00002C                     	ds	1
   913   00002D                     ?_vfprintf:
   914                           	callstack 0
   915   00002D                     vfprintf@fp:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x2C
   919   00002D                     	ds	1
   920   00002E                     vfprintf@fmt:
   921                           	callstack 0
   922                           
   923                           ; 1 bytes @ 0x2D
   924   00002E                     	ds	1
   925   00002F                     vfprintf@ap:
   926                           	callstack 0
   927                           
   928                           ; 1 bytes @ 0x2E
   929   00002F                     	ds	1
   930   000030                     vfprintf@cfmt:
   931                           	callstack 0
   932                           
   933                           ; 1 bytes @ 0x2F
   934   000030                     	ds	1
   935   000031                     ?_sprintf:
   936                           	callstack 0
   937   000031                     ___lodiv@counter:
   938                           	callstack 0
   939   000031                     sprintf@s:
   940                           	callstack 0
   941                           
   942                           ; 1 bytes @ 0x30
   943   000031                     	ds	1
   944   000032                     ?_convert_rgb2hue:
   945                           	callstack 0
   946   000032                     sprintf@fmt:
   947                           	callstack 0
   948   000032                     convert_rgb2hue@cMax:
   949                           	callstack 0
   950                           
   951                           ; 2 bytes @ 0x31
   952   000032                     	ds	2
   953   000034                     convert_rgb2hue@cCurr:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x33
   957   000034                     	ds	2
   958   000036                     ??_convert_rgb2hue:
   959                           
   960                           ; 1 bytes @ 0x35
   961   000036                     	ds	1
   962   000037                     sprintf@ap:
   963                           	callstack 0
   964                           
   965                           ; 1 bytes @ 0x36
   966   000037                     	ds	1
   967   000038                     sprintf@f:
   968                           	callstack 0
   969                           
   970                           ; 12 bytes @ 0x37
   971   000038                     	ds	12
   972   000044                     ADC2String@buf:
   973                           	callstack 0
   974   000044                     calibration_routine@cCal:
   975                           	callstack 0
   976                           
   977                           ; 2 bytes @ 0x43
   978   000044                     	ds	1
   979   000045                     ADC2String@ADC_val:
   980                           	callstack 0
   981                           
   982                           ; 2 bytes @ 0x44
   983   000045                     	ds	1
   984   000046                     ??_calibration_routine:
   985                           
   986                           ; 1 bytes @ 0x45
   987   000046                     	ds	1
   988   000047                     ??_ADC2String:
   989                           
   990                           ; 1 bytes @ 0x46
   991   000047                     	ds	1
   992   000048                     calibration_routine@cal_state:
   993                           	callstack 0
   994                           
   995                           ; 20 bytes @ 0x47
   996   000048                     	ds	1
   997   000049                     ADC2String@frac_part:
   998                           	callstack 0
   999                           
  1000                           ; 2 bytes @ 0x48
  1001   000049                     	ds	2
  1002   00004B                     ADC2String@int_part:
  1003                           	callstack 0
  1004                           
  1005                           ; 2 bytes @ 0x4A
  1006   00004B                     	ds	2
  1007   00004D                     send2USART@battery_level:
  1008                           	callstack 0
  1009                           
  1010                           ; 2 bytes @ 0x4C
  1011   00004D                     	ds	2
  1012   00004F                     send2USART@hue:
  1013                           	callstack 0
  1014                           
  1015                           ; 2 bytes @ 0x4E
  1016   00004F                     	ds	2
  1017   000051                     
  1018                           ; 1 bytes @ 0x50
  1019   000051                     	ds	11
  1020   00005C                     test@battery_level:
  1021                           	callstack 0
  1022                           
  1023                           ; 2 bytes @ 0x5B
  1024   00005C                     	ds	2
  1025   00005E                     ??_test:
  1026                           
  1027                           ; 1 bytes @ 0x5D
  1028   00005E                     	ds	1
  1029                           
  1030 ;;
  1031 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1032 ;;
  1033 ;; *************** function _main *****************
  1034 ;; Defined at:
  1035 ;;		line 28 in file "main.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;		None
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;  PWMcycle        2    0        unsigned int 
  1040 ;;  battery_leve    2    0[BANK1 ] unsigned int 
  1041 ;;  clear           2    0        unsigned int 
  1042 ;;  green           2    0        unsigned int 
  1043 ;;  blue            2    0        unsigned int 
  1044 ;;  red             2    0        unsigned int 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  1    wreg      void 
  1047 ;; Registers used:
  1048 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1055 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1056 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1057 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1058 ;;Total ram usage:        4 bytes
  1059 ;; Hardware stack levels required when called: 11
  1060 ;; This function calls:
  1061 ;;		_ADC_init
  1062 ;;		_calibration_routine
  1063 ;;		_color_click_init
  1064 ;;		_initDCmotorsPWM
  1065 ;;		_initUSART4
  1066 ;;		_test
  1067 ;; This function is called by:
  1068 ;;		Startup code after reset
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text0
  1073   001E08                     __ptext0:
  1074                           	callstack 0
  1075   001E08                     _main:
  1076                           	callstack 20
  1077   001E08                     
  1078                           ;main.c: 30:     ADC_init();
  1079   001E08  EC69  F014         	call	_ADC_init	;wreg free
  1080   001E0C                     
  1081                           ;main.c: 31:     color_click_init();
  1082   001E0C  EC8F  F013         	call	_color_click_init	;wreg free
  1083   001E10                     
  1084                           ;main.c: 32:     initUSART4();
  1085   001E10  EC5A  F014         	call	_initUSART4	;wreg free
  1086   001E14                     
  1087                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
  1088   001E14  0E00               	movlw	0
  1089   001E16  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1090   001E18  0E63               	movlw	99
  1091   001E1A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1092   001E1C  ECC1  F011         	call	_initDCmotorsPWM	;wreg free
  1093   001E20                     
  1094                           ;main.c: 39:     motorL.power = 0;
  1095   001E20  0E00               	movlw	0
  1096   001E22  0101               	movlb	1	; () banked
  1097   001E24  6F92               	movwf	_motorL& (0+255),b
  1098   001E26                     
  1099                           ; BSR set to: 1
  1100                           ;main.c: 40:     motorL.direction = 1;
  1101   001E26  0E01               	movlw	1
  1102   001E28  6F93               	movwf	(_motorL+1)& (0+255),b
  1103   001E2A                     
  1104                           ; BSR set to: 1
  1105                           ;main.c: 41:     motorL.brakemode = 1;
  1106   001E2A  0E01               	movlw	1
  1107   001E2C  6F94               	movwf	(_motorL+2)& (0+255),b
  1108   001E2E                     
  1109                           ; BSR set to: 1
  1110                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
  1111   001E2E  0E00               	movlw	0
  1112   001E30  6F96               	movwf	(_motorL+4)& (0+255),b
  1113   001E32  0E63               	movlw	99
  1114   001E34  6F95               	movwf	(_motorL+3)& (0+255),b
  1115   001E36                     
  1116                           ; BSR set to: 1
  1117                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1118   001E36  0EAA               	movlw	170
  1119   001E38  6F97               	movwf	(_motorL+5)& (0+255),b
  1120   001E3A  0E0F               	movlw	15
  1121   001E3C  6F98               	movwf	(_motorL+6)& (0+255),b
  1122   001E3E                     
  1123                           ; BSR set to: 1
  1124                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1125   001E3E  0EA6               	movlw	166
  1126   001E40  6F99               	movwf	(_motorL+7)& (0+255),b
  1127   001E42  0E0F               	movlw	15
  1128   001E44  6F9A               	movwf	(_motorL+8)& (0+255),b
  1129   001E46                     
  1130                           ; BSR set to: 1
  1131                           ;main.c: 46:     motorR.power = 0;
  1132   001E46  0E00               	movlw	0
  1133   001E48  6F89               	movwf	_motorR& (0+255),b
  1134   001E4A                     
  1135                           ; BSR set to: 1
  1136                           ;main.c: 47:     motorR.direction = 1;
  1137   001E4A  0E01               	movlw	1
  1138   001E4C  6F8A               	movwf	(_motorR+1)& (0+255),b
  1139   001E4E                     
  1140                           ; BSR set to: 1
  1141                           ;main.c: 48:     motorR.brakemode = 1;
  1142   001E4E  0E01               	movlw	1
  1143   001E50  6F8B               	movwf	(_motorR+2)& (0+255),b
  1144   001E52                     
  1145                           ; BSR set to: 1
  1146                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
  1147   001E52  0E00               	movlw	0
  1148   001E54  6F8D               	movwf	(_motorR+4)& (0+255),b
  1149   001E56  0E63               	movlw	99
  1150   001E58  6F8C               	movwf	(_motorR+3)& (0+255),b
  1151                           
  1152                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1153   001E5A  0E25               	movlw	37
  1154   001E5C  6F8E               	movwf	(_motorR+5)& (0+255),b
  1155   001E5E  0E0F               	movlw	15
  1156   001E60  6F8F               	movwf	(_motorR+6)& (0+255),b
  1157                           
  1158                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1159   001E62  0E21               	movlw	33
  1160   001E64  6F90               	movwf	(_motorR+7)& (0+255),b
  1161   001E66  0E0F               	movlw	15
  1162   001E68  6F91               	movwf	(_motorR+8)& (0+255),b
  1163   001E6A                     
  1164                           ; BSR set to: 1
  1165                           ;main.c: 54:     LATDbits.LATD7=0;
  1166   001E6A  9E7C               	bcf	124,7,c	;volatile
  1167   001E6C                     
  1168                           ; BSR set to: 1
  1169                           ;main.c: 55:     TRISDbits.TRISD7=0;
  1170   001E6C  9E84               	bcf	132,7,c	;volatile
  1171   001E6E                     
  1172                           ; BSR set to: 1
  1173                           ;main.c: 57:     TRISDbits.TRISD3 = 0;
  1174   001E6E  9684               	bcf	132,3,c	;volatile
  1175   001E70                     
  1176                           ; BSR set to: 1
  1177                           ;main.c: 58:     LATDbits.LATD3 = 1;
  1178   001E70  867C               	bsf	124,3,c	;volatile
  1179   001E72                     
  1180                           ; BSR set to: 1
  1181                           ;main.c: 61:     TRISGbits.TRISG0 = 0;
  1182   001E72  9087               	bcf	135,0,c	;volatile
  1183   001E74                     
  1184                           ; BSR set to: 1
  1185                           ;main.c: 62:     LATGbits.LATG0 = 0;
  1186   001E74  907F               	bcf	127,0,c	;volatile
  1187   001E76                     
  1188                           ; BSR set to: 1
  1189                           ;main.c: 63:     TRISEbits.TRISE7 = 0;
  1190   001E76  9E85               	bcf	133,7,c	;volatile
  1191   001E78                     
  1192                           ; BSR set to: 1
  1193                           ;main.c: 64:     LATEbits.LATE7 = 0;
  1194   001E78  9E7D               	bcf	125,7,c	;volatile
  1195   001E7A                     
  1196                           ; BSR set to: 1
  1197                           ;main.c: 65:     TRISAbits.TRISA3 = 0;
  1198   001E7A  9681               	bcf	129,3,c	;volatile
  1199   001E7C                     
  1200                           ; BSR set to: 1
  1201                           ;main.c: 66:     LATAbits.LATA3 = 0;
  1202   001E7C  9679               	bcf	121,3,c	;volatile
  1203   001E7E                     
  1204                           ; BSR set to: 1
  1205                           ;main.c: 71:     unsigned int battery_level;;main.c: 72:     unsigned int red;;main.c: 7
      +                          3:     unsigned int blue;;main.c: 74:     unsigned int green;;main.c: 75:     unsigned i
      +                          nt clear;;main.c: 76:     TRISHbits.TRISH3 = 0;
  1206   001E7E  9688               	bcf	136,3,c	;volatile
  1207   001E80                     
  1208                           ; BSR set to: 1
  1209                           ;main.c: 77:     LATHbits.LATH3 = 1;
  1210   001E80  8680               	bsf	128,3,c	;volatile
  1211   001E82                     
  1212                           ; BSR set to: 1
  1213                           ;main.c: 78:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1214   001E82  0E19               	movlw	25
  1215   001E84  0100               	movlb	0	; () banked
  1216   001E86  6FFB               	movwf	(??_main+1)& (0+255),b
  1217   001E88  0E5A               	movlw	90
  1218   001E8A  6FFA               	movwf	??_main& (0+255),b
  1219   001E8C  0EB1               	movlw	177
  1220   001E8E                     u2867:
  1221   001E8E  2EE8               	decfsz	wreg,f,c
  1222   001E90  D7FE               	bra	u2867
  1223   001E92  2FFA               	decfsz	??_main& (0+255),f,b
  1224   001E94  D7FC               	bra	u2867
  1225   001E96  2FFB               	decfsz	(??_main+1)& (0+255),f,b
  1226   001E98  D7FA               	bra	u2867
  1227   001E9A  D000               	nop2	
  1228   001E9C                     
  1229                           ;main.c: 79:     LATHbits.LATH3 = 0;
  1230   001E9C  9680               	bcf	128,3,c	;volatile
  1231   001E9E                     
  1232                           ;main.c: 80:     LATFbits.LATF2 = 0;
  1233   001E9E  947E               	bcf	126,2,c	;volatile
  1234   001EA0                     
  1235                           ;main.c: 81:     TRISFbits.TRISF2 = 1;
  1236   001EA0  8486               	bsf	134,2,c	;volatile
  1237   001EA2                     
  1238                           ;main.c: 82:     ANSELFbits.ANSELF2 = 0;
  1239   001EA2  010E               	movlb	14	; () banked
  1240   001EA4  95B4               	bcf	180,2,b	;volatile
  1241   001EA6                     
  1242                           ; BSR set to: 14
  1243                           ;main.c: 85:     calibration_routine(&colorCalibration);
  1244   001EA6  0EA3               	movlw	low _colorCalibration
  1245   001EA8  6E44               	movwf	calibration_routine@cCal^0,c
  1246   001EAA  0E01               	movlw	high _colorCalibration
  1247   001EAC  6E45               	movwf	(calibration_routine@cCal+1)^0,c
  1248   001EAE  EC82  F00B         	call	_calibration_routine	;wreg free
  1249   001EB2                     l3955:
  1250                           
  1251                           ;main.c: 93:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1252   001EB2  0E52               	movlw	82
  1253   001EB4  0100               	movlb	0	; () banked
  1254   001EB6  6FFB               	movwf	(??_main+1)& (0+255),b
  1255   001EB8  0E2B               	movlw	43
  1256   001EBA  6FFA               	movwf	??_main& (0+255),b
  1257   001EBC  0E00               	movlw	0
  1258   001EBE                     u2877:
  1259   001EBE  2EE8               	decfsz	wreg,f,c
  1260   001EC0  D7FE               	bra	u2877
  1261   001EC2  2FFA               	decfsz	??_main& (0+255),f,b
  1262   001EC4  D7FC               	bra	u2877
  1263   001EC6  2FFB               	decfsz	(??_main+1)& (0+255),f,b
  1264   001EC8  D7FA               	bra	u2877
  1265   001ECA  0000               	nop	
  1266   001ECC                     
  1267                           ;main.c: 94:         test(battery_level);
  1268   001ECC  C1AB  F05C         	movff	main@battery_level,test@battery_level
  1269   001ED0  C1AC  F05D         	movff	main@battery_level+1,test@battery_level+1
  1270   001ED4  ECDE  F00D         	call	_test	;wreg free
  1271   001ED8  EF59  F00F         	goto	l3955
  1272   001EDC  EF00  F000         	goto	start
  1273   001EE0                     __end_of_main:
  1274                           	callstack 0
  1275                           
  1276 ;; *************** function _test *****************
  1277 ;; Defined at:
  1278 ;;		line 152 in file "color.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  battery_leve    2   91[COMRAM] unsigned int 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  combo           2  152[BANK0 ] unsigned int 
  1283 ;;  led_state      50  100[BANK0 ] unsigned char [50]
  1284 ;;  hue             2  150[BANK0 ] unsigned int 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      void 
  1287 ;; Registers used:
  1288 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1294 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1295 ;;      Locals:         0      54       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1296 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1297 ;;      Totals:         3      54       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1298 ;;Total ram usage:       57 bytes
  1299 ;; Hardware stack levels used: 1
  1300 ;; Hardware stack levels required when called: 10
  1301 ;; This function calls:
  1302 ;;		_convert_rgb2hue
  1303 ;;		_reading_values
  1304 ;;		_send2USART
  1305 ;;		_sendStringSerial4
  1306 ;;		_sprintf
  1307 ;; This function is called by:
  1308 ;;		_main
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text1
  1313   001BBC                     __ptext1:
  1314                           	callstack 0
  1315   001BBC                     _test:
  1316                           	callstack 20
  1317   001BBC                     
  1318                           ;color.c: 152: void test(unsigned int battery_level);color.c: 153: {;color.c: 154:     u
      +                          nsigned int hue;;color.c: 156:     char led_state[50];;color.c: 159:     for (unsigned i
      +                          nt combo = 0; combo < 4; ++combo) {
  1319   001BBC  0E00               	movlw	0
  1320   001BBE  0100               	movlb	0	; () banked
  1321   001BC0  6FF9               	movwf	(test@combo+1)& (0+255),b
  1322   001BC2  0E00               	movlw	0
  1323   001BC4  6FF8               	movwf	test@combo& (0+255),b
  1324   001BC6                     l3707:
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;color.c: 162:         if (combo == 0) {
  1328   001BC6  51F8               	movf	test@combo& (0+255),w,b
  1329   001BC8  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1330   001BCA  A4D8               	btfss	status,2,c
  1331   001BCC  EFEA  F00D         	goto	u2701
  1332   001BD0  EFEC  F00D         	goto	u2700
  1333   001BD4                     u2701:
  1334   001BD4  EF02  F00E         	goto	l3713
  1335   001BD8                     u2700:
  1336   001BD8                     
  1337                           ; BSR set to: 0
  1338                           ;color.c: 164:             LATGbits.LATG0 = 1;
  1339   001BD8  807F               	bsf	127,0,c	;volatile
  1340                           
  1341                           ;color.c: 165:             LATEbits.LATE7 = 0;
  1342   001BDA  9E7D               	bcf	125,7,c	;volatile
  1343                           
  1344                           ;color.c: 166:             LATAbits.LATA3 = 0;
  1345   001BDC  9679               	bcf	121,3,c	;volatile
  1346   001BDE                     
  1347                           ; BSR set to: 0
  1348                           ;color.c: 167:             sprintf(led_state,"Red_light=%d, \n\r", LATGbits.LATG0);
  1349   001BDE  0EC4               	movlw	low test@led_state
  1350   001BE0  6E31               	movwf	sprintf@s^0,c
  1351   001BE2  0EB4               	movlw	low STR_1
  1352   001BE4  6E32               	movwf	sprintf@fmt^0,c
  1353   001BE6  B07F               	btfsc	127,0,c	;volatile
  1354   001BE8  EFF8  F00D         	goto	u2711
  1355   001BEC  EFFC  F00D         	goto	u2710
  1356   001BF0                     u2711:
  1357   001BF0  6A5E               	clrf	??_test^0,c
  1358   001BF2  2A5E               	incf	??_test^0,f,c
  1359   001BF4  EFFD  F00D         	goto	u2718
  1360   001BF8                     u2710:
  1361   001BF8  6A5E               	clrf	??_test^0,c
  1362   001BFA                     u2718:
  1363   001BFA  505E               	movf	??_test^0,w,c
  1364   001BFC  6E33               	movwf	(?_sprintf+2)^0,c
  1365   001BFE  6A34               	clrf	(?_sprintf+3)^0,c
  1366   001C00  ECA9  F013         	call	_sprintf	;wreg free
  1367   001C04                     l3713:
  1368                           
  1369                           ;color.c: 172:         if (combo == 1) {
  1370   001C04  0100               	movlb	0	; () banked
  1371   001C06  05F8               	decf	test@combo& (0+255),w,b
  1372   001C08  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1373   001C0A  A4D8               	btfss	status,2,c
  1374   001C0C  EF0A  F00E         	goto	u2721
  1375   001C10  EF0C  F00E         	goto	u2720
  1376   001C14                     u2721:
  1377   001C14  EF22  F00E         	goto	l3719
  1378   001C18                     u2720:
  1379   001C18                     
  1380                           ; BSR set to: 0
  1381                           ;color.c: 173:             LATGbits.LATG0 = 0;
  1382   001C18  907F               	bcf	127,0,c	;volatile
  1383                           
  1384                           ;color.c: 174:             LATEbits.LATE7 = 1;
  1385   001C1A  8E7D               	bsf	125,7,c	;volatile
  1386                           
  1387                           ;color.c: 175:             LATAbits.LATA3 = 0;
  1388   001C1C  9679               	bcf	121,3,c	;volatile
  1389   001C1E                     
  1390                           ; BSR set to: 0
  1391                           ;color.c: 176:             sprintf(led_state,"Green_light=%d, \n\r", LATEbits.LATE7);
  1392   001C1E  0EC4               	movlw	low test@led_state
  1393   001C20  6E31               	movwf	sprintf@s^0,c
  1394   001C22  0EA1               	movlw	low STR_2
  1395   001C24  6E32               	movwf	sprintf@fmt^0,c
  1396   001C26  BE7D               	btfsc	125,7,c	;volatile
  1397   001C28  EF18  F00E         	goto	u2731
  1398   001C2C  EF1C  F00E         	goto	u2730
  1399   001C30                     u2731:
  1400   001C30  6A5E               	clrf	??_test^0,c
  1401   001C32  2A5E               	incf	??_test^0,f,c
  1402   001C34  EF1D  F00E         	goto	u2738
  1403   001C38                     u2730:
  1404   001C38  6A5E               	clrf	??_test^0,c
  1405   001C3A                     u2738:
  1406   001C3A  505E               	movf	??_test^0,w,c
  1407   001C3C  6E33               	movwf	(?_sprintf+2)^0,c
  1408   001C3E  6A34               	clrf	(?_sprintf+3)^0,c
  1409   001C40  ECA9  F013         	call	_sprintf	;wreg free
  1410   001C44                     l3719:
  1411                           
  1412                           ;color.c: 180:         if (combo == 2) {
  1413   001C44  0E02               	movlw	2
  1414   001C46  0100               	movlb	0	; () banked
  1415   001C48  19F8               	xorwf	test@combo& (0+255),w,b
  1416   001C4A  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1417   001C4C  A4D8               	btfss	status,2,c
  1418   001C4E  EF2B  F00E         	goto	u2741
  1419   001C52  EF2D  F00E         	goto	u2740
  1420   001C56                     u2741:
  1421   001C56  EF43  F00E         	goto	l3725
  1422   001C5A                     u2740:
  1423   001C5A                     
  1424                           ; BSR set to: 0
  1425                           ;color.c: 181:             LATGbits.LATG0 = 0;
  1426   001C5A  907F               	bcf	127,0,c	;volatile
  1427                           
  1428                           ;color.c: 182:             LATEbits.LATE7 = 0;
  1429   001C5C  9E7D               	bcf	125,7,c	;volatile
  1430                           
  1431                           ;color.c: 183:             LATAbits.LATA3 = 1;
  1432   001C5E  8679               	bsf	121,3,c	;volatile
  1433   001C60                     
  1434                           ; BSR set to: 0
  1435                           ;color.c: 184:             sprintf(led_state,"Blue_light=%d \n\r", LATAbits.LATA3);
  1436   001C60  0EC4               	movlw	low test@led_state
  1437   001C62  6E31               	movwf	sprintf@s^0,c
  1438   001C64  0ED6               	movlw	low STR_3
  1439   001C66  6E32               	movwf	sprintf@fmt^0,c
  1440   001C68  B679               	btfsc	121,3,c	;volatile
  1441   001C6A  EF39  F00E         	goto	u2751
  1442   001C6E  EF3D  F00E         	goto	u2750
  1443   001C72                     u2751:
  1444   001C72  6A5E               	clrf	??_test^0,c
  1445   001C74  2A5E               	incf	??_test^0,f,c
  1446   001C76  EF3E  F00E         	goto	u2758
  1447   001C7A                     u2750:
  1448   001C7A  6A5E               	clrf	??_test^0,c
  1449   001C7C                     u2758:
  1450   001C7C  505E               	movf	??_test^0,w,c
  1451   001C7E  6E33               	movwf	(?_sprintf+2)^0,c
  1452   001C80  6A34               	clrf	(?_sprintf+3)^0,c
  1453   001C82  ECA9  F013         	call	_sprintf	;wreg free
  1454   001C86                     l3725:
  1455                           
  1456                           ;color.c: 190:         if (combo == 3) {
  1457   001C86  0E03               	movlw	3
  1458   001C88  0100               	movlb	0	; () banked
  1459   001C8A  19F8               	xorwf	test@combo& (0+255),w,b
  1460   001C8C  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1461   001C8E  A4D8               	btfss	status,2,c
  1462   001C90  EF4C  F00E         	goto	u2761
  1463   001C94  EF4E  F00E         	goto	u2760
  1464   001C98                     u2761:
  1465   001C98  EF5B  F00E         	goto	l3731
  1466   001C9C                     u2760:
  1467   001C9C                     
  1468                           ; BSR set to: 0
  1469                           ;color.c: 191:             LATGbits.LATG0 = 1;
  1470   001C9C  807F               	bsf	127,0,c	;volatile
  1471                           
  1472                           ;color.c: 192:             LATEbits.LATE7 = 1;
  1473   001C9E  8E7D               	bsf	125,7,c	;volatile
  1474                           
  1475                           ;color.c: 193:             LATAbits.LATA3 = 1;
  1476   001CA0  8679               	bsf	121,3,c	;volatile
  1477   001CA2                     
  1478                           ; BSR set to: 0
  1479                           ;color.c: 194:             sprintf(led_state,"All_lights=%d \n\r", 1);
  1480   001CA2  0EC4               	movlw	low test@led_state
  1481   001CA4  6E31               	movwf	sprintf@s^0,c
  1482   001CA6  0EC5               	movlw	low STR_4
  1483   001CA8  6E32               	movwf	sprintf@fmt^0,c
  1484   001CAA  0E00               	movlw	0
  1485   001CAC  6E34               	movwf	(?_sprintf+3)^0,c
  1486   001CAE  0E01               	movlw	1
  1487   001CB0  6E33               	movwf	(?_sprintf+2)^0,c
  1488   001CB2  ECA9  F013         	call	_sprintf	;wreg free
  1489   001CB6                     l3731:
  1490                           
  1491                           ;color.c: 198:         sendStringSerial4(led_state);
  1492   001CB6  0EC4               	movlw	low test@led_state
  1493   001CB8  6E02               	movwf	sendStringSerial4@string^0,c
  1494   001CBA  ECDD  F013         	call	_sendStringSerial4	;wreg free
  1495   001CBE                     
  1496                           ;color.c: 200:         reading_values(&colorCurrent);
  1497   001CBE  0E9B               	movlw	low _colorCurrent
  1498   001CC0  6E0C               	movwf	reading_values@cCurr^0,c
  1499   001CC2  0E01               	movlw	high _colorCurrent
  1500   001CC4  6E0D               	movwf	(reading_values@cCurr+1)^0,c
  1501   001CC6  EC43  F012         	call	_reading_values	;wreg free
  1502   001CCA                     
  1503                           ;color.c: 202:         hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  1504   001CCA  0EA3               	movlw	low _colorCalibration
  1505   001CCC  6E32               	movwf	convert_rgb2hue@cMax^0,c
  1506   001CCE  0E01               	movlw	high _colorCalibration
  1507   001CD0  6E33               	movwf	(convert_rgb2hue@cMax+1)^0,c
  1508   001CD2  0E9B               	movlw	low _colorCurrent
  1509   001CD4  6E34               	movwf	convert_rgb2hue@cCurr^0,c
  1510   001CD6  0E01               	movlw	high _colorCurrent
  1511   001CD8  6E35               	movwf	(convert_rgb2hue@cCurr+1)^0,c
  1512   001CDA  EC7B  F007         	call	_convert_rgb2hue	;wreg free
  1513   001CDE  C032  F0F6         	movff	?_convert_rgb2hue,test@hue
  1514   001CE2  C033  F0F7         	movff	?_convert_rgb2hue+1,test@hue+1
  1515   001CE6                     
  1516                           ;color.c: 208:         send2USART(battery_level,hue);
  1517   001CE6  C05C  F04D         	movff	test@battery_level,send2USART@battery_level
  1518   001CEA  C05D  F04E         	movff	test@battery_level+1,send2USART@battery_level+1
  1519   001CEE  C0F6  F04F         	movff	test@hue,send2USART@hue
  1520   001CF2  C0F7  F050         	movff	test@hue+1,send2USART@hue+1
  1521   001CF6  EC74  F013         	call	_send2USART	;wreg free
  1522   001CFA                     
  1523                           ;color.c: 209:     }
  1524   001CFA  0100               	movlb	0	; () banked
  1525   001CFC  4BF8               	infsnz	test@combo& (0+255),f,b
  1526   001CFE  2BF9               	incf	(test@combo+1)& (0+255),f,b
  1527   001D00                     
  1528                           ; BSR set to: 0
  1529   001D00  51F9               	movf	(test@combo+1)& (0+255),w,b
  1530   001D02  E109               	bnz	u2770
  1531   001D04  0E04               	movlw	4
  1532   001D06  5DF8               	subwf	test@combo& (0+255),w,b
  1533   001D08  A0D8               	btfss	status,0,c
  1534   001D0A  EF89  F00E         	goto	u2771
  1535   001D0E  EF8B  F00E         	goto	u2770
  1536   001D12                     u2771:
  1537   001D12  EFE3  F00D         	goto	l3707
  1538   001D16                     u2770:
  1539   001D16                     
  1540                           ; BSR set to: 0
  1541   001D16  0012               	return		;funcret
  1542   001D18                     __end_of_test:
  1543                           	callstack 0
  1544                           
  1545 ;; *************** function _send2USART *****************
  1546 ;; Defined at:
  1547 ;;		line 146 in file "serial.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  battery_leve    2   76[COMRAM] unsigned int 
  1550 ;;  hue             2   78[COMRAM] unsigned int 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  hue_char       50   50[BANK0 ] unsigned char [50]
  1553 ;;  buf            50    0[BANK0 ] unsigned char [50]
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  1    wreg      void 
  1556 ;; Registers used:
  1557 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1563 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1564 ;;      Locals:         0     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1566 ;;      Totals:         4     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1567 ;;Total ram usage:      104 bytes
  1568 ;; Hardware stack levels used: 1
  1569 ;; Hardware stack levels required when called: 9
  1570 ;; This function calls:
  1571 ;;		_ADC2String
  1572 ;;		_sendStringSerial4
  1573 ;;		_sprintf
  1574 ;; This function is called by:
  1575 ;;		_test
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text2
  1580   0026E8                     __ptext2:
  1581                           	callstack 0
  1582   0026E8                     _send2USART:
  1583                           	callstack 20
  1584   0026E8                     
  1585                           ;serial.c: 146: void send2USART(unsigned int battery_level, unsigned int hue);serial.c: 
      +                          147: {;serial.c: 148:         char buf[50];;serial.c: 149:         char hue_char[50];;se
      +                          rial.c: 154:         ADC2String(buf, battery_level);
  1586   0026E8  0E60               	movlw	low send2USART@buf
  1587   0026EA  6E44               	movwf	ADC2String@buf^0,c
  1588   0026EC  C04D  F045         	movff	send2USART@battery_level,ADC2String@ADC_val
  1589   0026F0  C04E  F046         	movff	send2USART@battery_level+1,ADC2String@ADC_val+1
  1590   0026F4  ECD6  F010         	call	_ADC2String	;wreg free
  1591                           
  1592                           ;serial.c: 155:         sprintf(hue_char,"hue=%03d,  ",hue);
  1593   0026F8  0E92               	movlw	low send2USART@hue_char
  1594   0026FA  6E31               	movwf	sprintf@s^0,c
  1595   0026FC  0EE7               	movlw	low STR_16
  1596   0026FE  6E32               	movwf	sprintf@fmt^0,c
  1597   002700  C04F  F033         	movff	send2USART@hue,?_sprintf+2
  1598   002704  C050  F034         	movff	send2USART@hue+1,?_sprintf+3
  1599   002708  ECA9  F013         	call	_sprintf	;wreg free
  1600   00270C                     
  1601                           ;serial.c: 160:         sendStringSerial4(buf);
  1602   00270C  0E60               	movlw	low send2USART@buf
  1603   00270E  6E02               	movwf	sendStringSerial4@string^0,c
  1604   002710  ECDD  F013         	call	_sendStringSerial4	;wreg free
  1605   002714                     
  1606                           ;serial.c: 161:         sendStringSerial4(hue_char);
  1607   002714  0E92               	movlw	low send2USART@hue_char
  1608   002716  6E02               	movwf	sendStringSerial4@string^0,c
  1609   002718  ECDD  F013         	call	_sendStringSerial4	;wreg free
  1610   00271C  0012               	return		;funcret
  1611   00271E                     __end_of_send2USART:
  1612                           	callstack 0
  1613                           
  1614 ;; *************** function _ADC2String *****************
  1615 ;; Defined at:
  1616 ;;		line 135 in file "serial.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  buf             1   67[COMRAM] PTR unsigned char 
  1619 ;;		 -> send2USART@buf(50), sendAllReadings@buffer(10), 
  1620 ;;  ADC_val         2   68[COMRAM] unsigned int 
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  int_part        2   74[COMRAM] unsigned int 
  1623 ;;  frac_part       2   72[COMRAM] unsigned int 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      void 
  1626 ;; Registers used:
  1627 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1633 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1634 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1635 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1636 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1637 ;;Total ram usage:        9 bytes
  1638 ;; Hardware stack levels used: 1
  1639 ;; Hardware stack levels required when called: 8
  1640 ;; This function calls:
  1641 ;;		___lwdiv
  1642 ;;		___wmul
  1643 ;;		_sprintf
  1644 ;; This function is called by:
  1645 ;;		_send2USART
  1646 ;;		_sendAllReadings
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           	psect	text3
  1651   0021AC                     __ptext3:
  1652                           	callstack 0
  1653   0021AC                     _ADC2String:
  1654                           	callstack 20
  1655   0021AC                     
  1656                           ;serial.c: 137:     unsigned int int_part=ADC_val/77;
  1657   0021AC  C045  F007         	movff	ADC2String@ADC_val,___lwdiv@dividend
  1658   0021B0  C046  F008         	movff	ADC2String@ADC_val+1,___lwdiv@dividend+1
  1659   0021B4  0E00               	movlw	0
  1660   0021B6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1661   0021B8  0E4D               	movlw	77
  1662   0021BA  6E09               	movwf	___lwdiv@divisor^0,c
  1663   0021BC  EC09  F012         	call	___lwdiv	;wreg free
  1664   0021C0  C007  F04B         	movff	?___lwdiv,ADC2String@int_part
  1665   0021C4  C008  F04C         	movff	?___lwdiv+1,ADC2String@int_part+1
  1666   0021C8                     
  1667                           ;serial.c: 139:     unsigned int frac_part=(ADC_val*100)/77 - int_part*100;
  1668   0021C8  C045  F001         	movff	ADC2String@ADC_val,___wmul@multiplier
  1669   0021CC  C046  F002         	movff	ADC2String@ADC_val+1,___wmul@multiplier+1
  1670   0021D0  0E00               	movlw	0
  1671   0021D2  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1672   0021D4  0E64               	movlw	100
  1673   0021D6  6E03               	movwf	___wmul@multiplicand^0,c
  1674   0021D8  EC37  F014         	call	___wmul	;wreg free
  1675   0021DC  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1676   0021E0  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1677   0021E4  0E00               	movlw	0
  1678   0021E6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1679   0021E8  0E4D               	movlw	77
  1680   0021EA  6E09               	movwf	___lwdiv@divisor^0,c
  1681   0021EC  EC09  F012         	call	___lwdiv	;wreg free
  1682   0021F0  C007  F047         	movff	?___lwdiv,??_ADC2String
  1683   0021F4  C008  F048         	movff	?___lwdiv+1,??_ADC2String+1
  1684   0021F8  C04B  F001         	movff	ADC2String@int_part,___wmul@multiplier
  1685   0021FC  C04C  F002         	movff	ADC2String@int_part+1,___wmul@multiplier+1
  1686   002200  0EFF               	movlw	255
  1687   002202  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1688   002204  0E9C               	movlw	156
  1689   002206  6E03               	movwf	___wmul@multiplicand^0,c
  1690   002208  EC37  F014         	call	___wmul	;wreg free
  1691   00220C  5001               	movf	?___wmul^0,w,c
  1692   00220E  2447               	addwf	??_ADC2String^0,w,c
  1693   002210  6E49               	movwf	ADC2String@frac_part^0,c
  1694   002212  5002               	movf	(?___wmul+1)^0,w,c
  1695   002214  2048               	addwfc	(??_ADC2String+1)^0,w,c
  1696   002216  6E4A               	movwf	(ADC2String@frac_part+1)^0,c
  1697   002218                     
  1698                           ;serial.c: 141:     sprintf(buf,"Voltage = %d.%02d,  ",int_part,frac_part);
  1699   002218  C044  F031         	movff	ADC2String@buf,sprintf@s
  1700   00221C  0E8C               	movlw	low STR_15
  1701   00221E  6E32               	movwf	sprintf@fmt^0,c
  1702   002220  C04B  F033         	movff	ADC2String@int_part,?_sprintf+2
  1703   002224  C04C  F034         	movff	ADC2String@int_part+1,?_sprintf+3
  1704   002228  C049  F035         	movff	ADC2String@frac_part,?_sprintf+4
  1705   00222C  C04A  F036         	movff	ADC2String@frac_part+1,?_sprintf+5
  1706   002230  ECA9  F013         	call	_sprintf	;wreg free
  1707   002234                     
  1708                           ;serial.c: 143:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1709   002234  0E52               	movlw	82
  1710   002236  6E48               	movwf	(??_ADC2String+1)^0,c
  1711   002238  0E2B               	movlw	43
  1712   00223A  6E47               	movwf	??_ADC2String^0,c
  1713   00223C  0E00               	movlw	0
  1714   00223E                     u2887:
  1715   00223E  2EE8               	decfsz	wreg,f,c
  1716   002240  D7FE               	bra	u2887
  1717   002242  2E47               	decfsz	??_ADC2String^0,f,c
  1718   002244  D7FC               	bra	u2887
  1719   002246  2E48               	decfsz	(??_ADC2String+1)^0,f,c
  1720   002248  D7FA               	bra	u2887
  1721   00224A  D000               	nop2	
  1722   00224C  0012               	return		;funcret
  1723   00224E                     __end_of_ADC2String:
  1724                           	callstack 0
  1725                           
  1726 ;; *************** function _reading_values *****************
  1727 ;; Defined at:
  1728 ;;		line 283 in file "color.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  cCurr           2   11[COMRAM] PTR struct colors
  1731 ;;		 -> colorCurrent(8), 
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1743 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1747 ;;Total ram usage:        2 bytes
  1748 ;; Hardware stack levels used: 1
  1749 ;; Hardware stack levels required when called: 3
  1750 ;; This function calls:
  1751 ;;		_color_read_Blue
  1752 ;;		_color_read_Clear
  1753 ;;		_color_read_Green
  1754 ;;		_color_read_Red
  1755 ;; This function is called by:
  1756 ;;		_test
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text4
  1761   002486                     __ptext4:
  1762                           	callstack 0
  1763   002486                     _reading_values:
  1764                           	callstack 26
  1765   002486                     
  1766                           ;color.c: 283: void reading_values(colors *cCurr);color.c: 284: {;color.c: 287:     (cCu
      +                          rr->red)= color_read_Red();
  1767   002486  EC72  F012         	call	_color_read_Red	;wreg free
  1768   00248A  C00C  FFD9         	movff	reading_values@cCurr,fsr2l
  1769   00248E  C00D  FFDA         	movff	reading_values@cCurr+1,fsr2h
  1770   002492  C005  FFDE         	movff	?_color_read_Red,postinc2
  1771   002496  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  1772                           
  1773                           ;color.c: 288:     (cCurr->blue) = color_read_Blue();
  1774   00249A  ECEA  F012         	call	_color_read_Blue	;wreg free
  1775   00249E  EE20 F004          	lfsr	2,4
  1776   0024A2  500C               	movf	reading_values@cCurr^0,w,c
  1777   0024A4  26D9               	addwf	fsr2l,f,c
  1778   0024A6  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1779   0024A8  22DA               	addwfc	fsr2h,f,c
  1780   0024AA  C005  FFDE         	movff	?_color_read_Blue,postinc2
  1781   0024AE  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  1782                           
  1783                           ;color.c: 289:     (cCurr->green) = color_read_Green();
  1784   0024B2  EC9A  F012         	call	_color_read_Green	;wreg free
  1785   0024B6  EE20 F002          	lfsr	2,2
  1786   0024BA  500C               	movf	reading_values@cCurr^0,w,c
  1787   0024BC  26D9               	addwf	fsr2l,f,c
  1788   0024BE  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1789   0024C0  22DA               	addwfc	fsr2h,f,c
  1790   0024C2  C005  FFDE         	movff	?_color_read_Green,postinc2
  1791   0024C6  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  1792                           
  1793                           ;color.c: 290:     (cCurr->clear) = color_read_Clear();
  1794   0024CA  ECC2  F012         	call	_color_read_Clear	;wreg free
  1795   0024CE  EE20 F006          	lfsr	2,6
  1796   0024D2  500C               	movf	reading_values@cCurr^0,w,c
  1797   0024D4  26D9               	addwf	fsr2l,f,c
  1798   0024D6  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1799   0024D8  22DA               	addwfc	fsr2h,f,c
  1800   0024DA  C005  FFDE         	movff	?_color_read_Clear,postinc2
  1801   0024DE  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  1802   0024E2  0012               	return		;funcret
  1803   0024E4                     __end_of_reading_values:
  1804                           	callstack 0
  1805                           
  1806 ;; *************** function _convert_rgb2hue *****************
  1807 ;; Defined at:
  1808 ;;		line 98 in file "color.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  cMax            2   49[COMRAM] PTR struct colors
  1811 ;;		 -> colorCalibration(8), 
  1812 ;;  cCurr           2   51[COMRAM] PTR struct colors
  1813 ;;		 -> colorCurrent(8), 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  total           8   10[BANK0 ] unsigned long long 
  1816 ;;  g               2   38[BANK0 ] unsigned int 
  1817 ;;  r               2   36[BANK0 ] unsigned int 
  1818 ;;  b               2   34[BANK0 ] unsigned int 
  1819 ;;  hue             2    8[BANK0 ] unsigned int 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  2   49[COMRAM] unsigned int 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1829 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1830 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1831 ;;      Temps:         38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1832 ;;      Totals:        42      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1833 ;;Total ram usage:       82 bytes
  1834 ;; Hardware stack levels used: 1
  1835 ;; Hardware stack levels required when called: 1
  1836 ;; This function calls:
  1837 ;;		___lodiv
  1838 ;;		___lwdiv
  1839 ;;		___omul
  1840 ;; This function is called by:
  1841 ;;		_test
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text5
  1846   000EF6                     __ptext5:
  1847                           	callstack 0
  1848   000EF6                     _convert_rgb2hue:
  1849                           	callstack 28
  1850   000EF6                     
  1851                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  1852   000EF6  EE20 F004          	lfsr	2,4
  1853   000EFA  5032               	movf	convert_rgb2hue@cMax^0,w,c
  1854   000EFC  26D9               	addwf	fsr2l,f,c
  1855   000EFE  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1856   000F00  22DA               	addwfc	fsr2h,f,c
  1857   000F02  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  1858   000F06  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  1859   000F0A  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  1860   000F0E  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  1861   000F12  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  1862   000F14  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  1863   000F16  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  1864   000F18  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  1865   000F1A  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  1866   000F1C  6A10               	clrf	(___omul@multiplicand+7)^0,c
  1867   000F1E  EE20 F002          	lfsr	2,2
  1868   000F22  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  1869   000F24  26D9               	addwf	fsr2l,f,c
  1870   000F26  5035               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1871   000F28  22DA               	addwfc	fsr2h,f,c
  1872   000F2A  CFDE F038          	movff	postinc2,??_convert_rgb2hue+2
  1873   000F2E  CFDD F039          	movff	postdec2,??_convert_rgb2hue+3
  1874   000F32  C038  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  1875   000F36  C039  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  1876   000F3A  6A03               	clrf	(___omul@multiplier+2)^0,c
  1877   000F3C  6A04               	clrf	(___omul@multiplier+3)^0,c
  1878   000F3E  6A05               	clrf	(___omul@multiplier+4)^0,c
  1879   000F40  6A06               	clrf	(___omul@multiplier+5)^0,c
  1880   000F42  6A07               	clrf	(___omul@multiplier+6)^0,c
  1881   000F44  6A08               	clrf	(___omul@multiplier+7)^0,c
  1882   000F46  EC27  F011         	call	___omul	;wreg free
  1883   000F4A  C001  F072         	movff	?___omul,_convert_rgb2hue$2845
  1884   000F4E  C002  F073         	movff	?___omul+1,_convert_rgb2hue$2845+1
  1885   000F52  C003  F074         	movff	?___omul+2,_convert_rgb2hue$2845+2
  1886   000F56  C004  F075         	movff	?___omul+3,_convert_rgb2hue$2845+3
  1887   000F5A  C005  F076         	movff	?___omul+4,_convert_rgb2hue$2845+4
  1888   000F5E  C006  F077         	movff	?___omul+5,_convert_rgb2hue$2845+5
  1889   000F62  C007  F078         	movff	?___omul+6,_convert_rgb2hue$2845+6
  1890   000F66  C008  F079         	movff	?___omul+7,_convert_rgb2hue$2845+7
  1891                           
  1892                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  1893   000F6A  C032  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  1894   000F6E  C033  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  1895   000F72  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  1896   000F76  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  1897   000F7A  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  1898   000F7E  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  1899   000F82  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  1900   000F84  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  1901   000F86  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  1902   000F88  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  1903   000F8A  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  1904   000F8C  6A10               	clrf	(___omul@multiplicand+7)^0,c
  1905   000F8E  EE20 F004          	lfsr	2,4
  1906   000F92  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  1907   000F94  26D9               	addwf	fsr2l,f,c
  1908   000F96  5035               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1909   000F98  22DA               	addwfc	fsr2h,f,c
  1910   000F9A  CFDE F038          	movff	postinc2,??_convert_rgb2hue+2
  1911   000F9E  CFDD F039          	movff	postdec2,??_convert_rgb2hue+3
  1912   000FA2  C038  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  1913   000FA6  C039  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  1914   000FAA  6A03               	clrf	(___omul@multiplier+2)^0,c
  1915   000FAC  6A04               	clrf	(___omul@multiplier+3)^0,c
  1916   000FAE  6A05               	clrf	(___omul@multiplier+4)^0,c
  1917   000FB0  6A06               	clrf	(___omul@multiplier+5)^0,c
  1918   000FB2  6A07               	clrf	(___omul@multiplier+6)^0,c
  1919   000FB4  6A08               	clrf	(___omul@multiplier+7)^0,c
  1920   000FB6  EC27  F011         	call	___omul	;wreg free
  1921   000FBA  C001  F07A         	movff	?___omul,_convert_rgb2hue$2846
  1922   000FBE  C002  F07B         	movff	?___omul+1,_convert_rgb2hue$2846+1
  1923   000FC2  C003  F07C         	movff	?___omul+2,_convert_rgb2hue$2846+2
  1924   000FC6  C004  F07D         	movff	?___omul+3,_convert_rgb2hue$2846+3
  1925   000FCA  C005  F07E         	movff	?___omul+4,_convert_rgb2hue$2846+4
  1926   000FCE  C006  F07F         	movff	?___omul+5,_convert_rgb2hue$2846+5
  1927   000FD2  C007  F080         	movff	?___omul+6,_convert_rgb2hue$2846+6
  1928   000FD6  C008  F081         	movff	?___omul+7,_convert_rgb2hue$2846+7
  1929                           
  1930                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  1931   000FDA  EE20 F004          	lfsr	2,4
  1932   000FDE  5032               	movf	convert_rgb2hue@cMax^0,w,c
  1933   000FE0  26D9               	addwf	fsr2l,f,c
  1934   000FE2  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1935   000FE4  22DA               	addwfc	fsr2h,f,c
  1936   000FE6  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  1937   000FEA  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  1938   000FEE  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  1939   000FF2  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  1940   000FF6  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  1941   000FF8  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  1942   000FFA  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  1943   000FFC  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  1944   000FFE  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  1945   001000  6A10               	clrf	(___omul@multiplicand+7)^0,c
  1946   001002  C034  FFD9         	movff	convert_rgb2hue@cCurr,fsr2l
  1947   001006  C035  FFDA         	movff	convert_rgb2hue@cCurr+1,fsr2h
  1948   00100A  CFDE F038          	movff	postinc2,??_convert_rgb2hue+2
  1949   00100E  CFDD F039          	movff	postdec2,??_convert_rgb2hue+3
  1950   001012  C038  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  1951   001016  C039  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  1952   00101A  6A03               	clrf	(___omul@multiplier+2)^0,c
  1953   00101C  6A04               	clrf	(___omul@multiplier+3)^0,c
  1954   00101E  6A05               	clrf	(___omul@multiplier+4)^0,c
  1955   001020  6A06               	clrf	(___omul@multiplier+5)^0,c
  1956   001022  6A07               	clrf	(___omul@multiplier+6)^0,c
  1957   001024  6A08               	clrf	(___omul@multiplier+7)^0,c
  1958   001026  EC27  F011         	call	___omul	;wreg free
  1959   00102A  C001  F060         	movff	?___omul,_convert_rgb2hue$2847
  1960   00102E  C002  F061         	movff	?___omul+1,_convert_rgb2hue$2847+1
  1961   001032  C003  F062         	movff	?___omul+2,_convert_rgb2hue$2847+2
  1962   001036  C004  F063         	movff	?___omul+3,_convert_rgb2hue$2847+3
  1963   00103A  C005  F064         	movff	?___omul+4,_convert_rgb2hue$2847+4
  1964   00103E  C006  F065         	movff	?___omul+5,_convert_rgb2hue$2847+5
  1965   001042  C007  F066         	movff	?___omul+6,_convert_rgb2hue$2847+6
  1966   001046  C008  F067         	movff	?___omul+7,_convert_rgb2hue$2847+7
  1967                           
  1968                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  1969   00104A  C072  F001         	movff	_convert_rgb2hue$2845,___omul@multiplier
  1970   00104E  C073  F002         	movff	_convert_rgb2hue$2845+1,___omul@multiplier+1
  1971   001052  C074  F003         	movff	_convert_rgb2hue$2845+2,___omul@multiplier+2
  1972   001056  C075  F004         	movff	_convert_rgb2hue$2845+3,___omul@multiplier+3
  1973   00105A  C076  F005         	movff	_convert_rgb2hue$2845+4,___omul@multiplier+4
  1974   00105E  C077  F006         	movff	_convert_rgb2hue$2845+5,___omul@multiplier+5
  1975   001062  C078  F007         	movff	_convert_rgb2hue$2845+6,___omul@multiplier+6
  1976   001066  C079  F008         	movff	_convert_rgb2hue$2845+7,___omul@multiplier+7
  1977   00106A  C032  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  1978   00106E  C033  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  1979   001072  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  1980   001076  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  1981   00107A  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  1982   00107E  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  1983   001082  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  1984   001084  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  1985   001086  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  1986   001088  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  1987   00108A  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  1988   00108C  6A10               	clrf	(___omul@multiplicand+7)^0,c
  1989   00108E  EC27  F011         	call	___omul	;wreg free
  1990   001092  C001  F038         	movff	?___omul,??_convert_rgb2hue+2
  1991   001096  C002  F039         	movff	?___omul+1,??_convert_rgb2hue+3
  1992   00109A  C003  F03A         	movff	?___omul+2,??_convert_rgb2hue+4
  1993   00109E  C004  F03B         	movff	?___omul+3,??_convert_rgb2hue+5
  1994   0010A2  C005  F03C         	movff	?___omul+4,??_convert_rgb2hue+6
  1995   0010A6  C006  F03D         	movff	?___omul+5,??_convert_rgb2hue+7
  1996   0010AA  C007  F03E         	movff	?___omul+6,??_convert_rgb2hue+8
  1997   0010AE  C008  F03F         	movff	?___omul+7,??_convert_rgb2hue+9
  1998   0010B2  C07A  F001         	movff	_convert_rgb2hue$2846,___omul@multiplier
  1999   0010B6  C07B  F002         	movff	_convert_rgb2hue$2846+1,___omul@multiplier+1
  2000   0010BA  C07C  F003         	movff	_convert_rgb2hue$2846+2,___omul@multiplier+2
  2001   0010BE  C07D  F004         	movff	_convert_rgb2hue$2846+3,___omul@multiplier+3
  2002   0010C2  C07E  F005         	movff	_convert_rgb2hue$2846+4,___omul@multiplier+4
  2003   0010C6  C07F  F006         	movff	_convert_rgb2hue$2846+5,___omul@multiplier+5
  2004   0010CA  C080  F007         	movff	_convert_rgb2hue$2846+6,___omul@multiplier+6
  2005   0010CE  C081  F008         	movff	_convert_rgb2hue$2846+7,___omul@multiplier+7
  2006   0010D2  EE20 F002          	lfsr	2,2
  2007   0010D6  5032               	movf	convert_rgb2hue@cMax^0,w,c
  2008   0010D8  26D9               	addwf	fsr2l,f,c
  2009   0010DA  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2010   0010DC  22DA               	addwfc	fsr2h,f,c
  2011   0010DE  CFDE F040          	movff	postinc2,??_convert_rgb2hue+10
  2012   0010E2  CFDD F041          	movff	postdec2,??_convert_rgb2hue+11
  2013   0010E6  C040  F009         	movff	??_convert_rgb2hue+10,___omul@multiplicand
  2014   0010EA  C041  F00A         	movff	??_convert_rgb2hue+11,___omul@multiplicand+1
  2015   0010EE  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2016   0010F0  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2017   0010F2  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2018   0010F4  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2019   0010F6  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2020   0010F8  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2021   0010FA  EC27  F011         	call	___omul	;wreg free
  2022   0010FE  C001  F042         	movff	?___omul,??_convert_rgb2hue+12
  2023   001102  C002  F043         	movff	?___omul+1,??_convert_rgb2hue+13
  2024   001106  C003  F044         	movff	?___omul+2,??_convert_rgb2hue+14
  2025   00110A  C004  F045         	movff	?___omul+3,??_convert_rgb2hue+15
  2026   00110E  C005  F046         	movff	?___omul+4,??_convert_rgb2hue+16
  2027   001112  C006  F047         	movff	?___omul+5,??_convert_rgb2hue+17
  2028   001116  C007  F048         	movff	?___omul+6,??_convert_rgb2hue+18
  2029   00111A  C008  F049         	movff	?___omul+7,??_convert_rgb2hue+19
  2030   00111E  C060  F001         	movff	_convert_rgb2hue$2847,___omul@multiplier
  2031   001122  C061  F002         	movff	_convert_rgb2hue$2847+1,___omul@multiplier+1
  2032   001126  C062  F003         	movff	_convert_rgb2hue$2847+2,___omul@multiplier+2
  2033   00112A  C063  F004         	movff	_convert_rgb2hue$2847+3,___omul@multiplier+3
  2034   00112E  C064  F005         	movff	_convert_rgb2hue$2847+4,___omul@multiplier+4
  2035   001132  C065  F006         	movff	_convert_rgb2hue$2847+5,___omul@multiplier+5
  2036   001136  C066  F007         	movff	_convert_rgb2hue$2847+6,___omul@multiplier+6
  2037   00113A  C067  F008         	movff	_convert_rgb2hue$2847+7,___omul@multiplier+7
  2038   00113E  EE20 F002          	lfsr	2,2
  2039   001142  5032               	movf	convert_rgb2hue@cMax^0,w,c
  2040   001144  26D9               	addwf	fsr2l,f,c
  2041   001146  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2042   001148  22DA               	addwfc	fsr2h,f,c
  2043   00114A  CFDE F04A          	movff	postinc2,??_convert_rgb2hue+20
  2044   00114E  CFDD F04B          	movff	postdec2,??_convert_rgb2hue+21
  2045   001152  C04A  F009         	movff	??_convert_rgb2hue+20,___omul@multiplicand
  2046   001156  C04B  F00A         	movff	??_convert_rgb2hue+21,___omul@multiplicand+1
  2047   00115A  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2048   00115C  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2049   00115E  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2050   001160  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2051   001162  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2052   001164  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2053   001166  EC27  F011         	call	___omul	;wreg free
  2054   00116A  C001  F04C         	movff	?___omul,??_convert_rgb2hue+22
  2055   00116E  C002  F04D         	movff	?___omul+1,??_convert_rgb2hue+23
  2056   001172  C003  F04E         	movff	?___omul+2,??_convert_rgb2hue+24
  2057   001176  C004  F04F         	movff	?___omul+3,??_convert_rgb2hue+25
  2058   00117A  C005  F050         	movff	?___omul+4,??_convert_rgb2hue+26
  2059   00117E  C006  F051         	movff	?___omul+5,??_convert_rgb2hue+27
  2060   001182  C007  F052         	movff	?___omul+6,??_convert_rgb2hue+28
  2061   001186  C008  F053         	movff	?___omul+7,??_convert_rgb2hue+29
  2062   00118A  5042               	movf	(??_convert_rgb2hue+12)^0,w,c
  2063   00118C  244C               	addwf	(??_convert_rgb2hue+22)^0,w,c
  2064   00118E  6E54               	movwf	(??_convert_rgb2hue+30)^0,c
  2065   001190  5043               	movf	(??_convert_rgb2hue+13)^0,w,c
  2066   001192  204D               	addwfc	(??_convert_rgb2hue+23)^0,w,c
  2067   001194  6E55               	movwf	(??_convert_rgb2hue+31)^0,c
  2068   001196  5044               	movf	(??_convert_rgb2hue+14)^0,w,c
  2069   001198  204E               	addwfc	(??_convert_rgb2hue+24)^0,w,c
  2070   00119A  6E56               	movwf	(??_convert_rgb2hue+32)^0,c
  2071   00119C  5045               	movf	(??_convert_rgb2hue+15)^0,w,c
  2072   00119E  204F               	addwfc	(??_convert_rgb2hue+25)^0,w,c
  2073   0011A0  6E57               	movwf	(??_convert_rgb2hue+33)^0,c
  2074   0011A2  5046               	movf	(??_convert_rgb2hue+16)^0,w,c
  2075   0011A4  2050               	addwfc	(??_convert_rgb2hue+26)^0,w,c
  2076   0011A6  6E58               	movwf	(??_convert_rgb2hue+34)^0,c
  2077   0011A8  5047               	movf	(??_convert_rgb2hue+17)^0,w,c
  2078   0011AA  2051               	addwfc	(??_convert_rgb2hue+27)^0,w,c
  2079   0011AC  6E59               	movwf	(??_convert_rgb2hue+35)^0,c
  2080   0011AE  5048               	movf	(??_convert_rgb2hue+18)^0,w,c
  2081   0011B0  2052               	addwfc	(??_convert_rgb2hue+28)^0,w,c
  2082   0011B2  6E5A               	movwf	(??_convert_rgb2hue+36)^0,c
  2083   0011B4  5049               	movf	(??_convert_rgb2hue+19)^0,w,c
  2084   0011B6  2053               	addwfc	(??_convert_rgb2hue+29)^0,w,c
  2085   0011B8  6E5B               	movwf	(??_convert_rgb2hue+37)^0,c
  2086   0011BA  5038               	movf	(??_convert_rgb2hue+2)^0,w,c
  2087   0011BC  2454               	addwf	(??_convert_rgb2hue+30)^0,w,c
  2088   0011BE  0100               	movlb	0	; () banked
  2089   0011C0  6F6A               	movwf	convert_rgb2hue@total& (0+255),b
  2090   0011C2  5039               	movf	(??_convert_rgb2hue+3)^0,w,c
  2091   0011C4  2055               	addwfc	(??_convert_rgb2hue+31)^0,w,c
  2092   0011C6  6F6B               	movwf	(convert_rgb2hue@total+1)& (0+255),b
  2093   0011C8  503A               	movf	(??_convert_rgb2hue+4)^0,w,c
  2094   0011CA  2056               	addwfc	(??_convert_rgb2hue+32)^0,w,c
  2095   0011CC  6F6C               	movwf	(convert_rgb2hue@total+2)& (0+255),b
  2096   0011CE  503B               	movf	(??_convert_rgb2hue+5)^0,w,c
  2097   0011D0  2057               	addwfc	(??_convert_rgb2hue+33)^0,w,c
  2098   0011D2  6F6D               	movwf	(convert_rgb2hue@total+3)& (0+255),b
  2099   0011D4  503C               	movf	(??_convert_rgb2hue+6)^0,w,c
  2100   0011D6  2058               	addwfc	(??_convert_rgb2hue+34)^0,w,c
  2101   0011D8  6F6E               	movwf	(convert_rgb2hue@total+4)& (0+255),b
  2102   0011DA  503D               	movf	(??_convert_rgb2hue+7)^0,w,c
  2103   0011DC  2059               	addwfc	(??_convert_rgb2hue+35)^0,w,c
  2104   0011DE  6F6F               	movwf	(convert_rgb2hue@total+5)& (0+255),b
  2105   0011E0  503E               	movf	(??_convert_rgb2hue+8)^0,w,c
  2106   0011E2  205A               	addwfc	(??_convert_rgb2hue+36)^0,w,c
  2107   0011E4  6F70               	movwf	(convert_rgb2hue@total+6)& (0+255),b
  2108   0011E6  503F               	movf	(??_convert_rgb2hue+9)^0,w,c
  2109   0011E8  205B               	addwfc	(??_convert_rgb2hue+37)^0,w,c
  2110   0011EA  6F71               	movwf	(convert_rgb2hue@total+7)& (0+255),b
  2111   0011EC                     
  2112                           ; BSR set to: 0
  2113                           ;color.c: 103:     unsigned int r = 0;
  2114   0011EC  0E00               	movlw	0
  2115   0011EE  6F85               	movwf	(convert_rgb2hue@r+1)& (0+255),b
  2116   0011F0  0E00               	movlw	0
  2117   0011F2  6F84               	movwf	convert_rgb2hue@r& (0+255),b
  2118   0011F4                     
  2119                           ; BSR set to: 0
  2120                           ;color.c: 104:     unsigned int g = 0;
  2121   0011F4  0E00               	movlw	0
  2122   0011F6  6F87               	movwf	(convert_rgb2hue@g+1)& (0+255),b
  2123   0011F8  0E00               	movlw	0
  2124   0011FA  6F86               	movwf	convert_rgb2hue@g& (0+255),b
  2125   0011FC                     
  2126                           ; BSR set to: 0
  2127                           ;color.c: 105:     unsigned int b = 0;
  2128   0011FC  0E00               	movlw	0
  2129   0011FE  6F83               	movwf	(convert_rgb2hue@b+1)& (0+255),b
  2130   001200  0E00               	movlw	0
  2131   001202  6F82               	movwf	convert_rgb2hue@b& (0+255),b
  2132   001204                     
  2133                           ; BSR set to: 0
  2134                           ;color.c: 107:     if (total > 0) {
  2135   001204  516A               	movf	convert_rgb2hue@total& (0+255),w,b
  2136   001206  116B               	iorwf	(convert_rgb2hue@total+1)& (0+255),w,b
  2137   001208  116C               	iorwf	(convert_rgb2hue@total+2)& (0+255),w,b
  2138   00120A  116D               	iorwf	(convert_rgb2hue@total+3)& (0+255),w,b
  2139   00120C  116E               	iorwf	(convert_rgb2hue@total+4)& (0+255),w,b
  2140   00120E  116F               	iorwf	(convert_rgb2hue@total+5)& (0+255),w,b
  2141   001210  1170               	iorwf	(convert_rgb2hue@total+6)& (0+255),w,b
  2142   001212  1171               	iorwf	(convert_rgb2hue@total+7)& (0+255),w,b
  2143   001214  B4D8               	btfsc	status,2,c
  2144   001216  EF0F  F009         	goto	u2551
  2145   00121A  EF11  F009         	goto	u2550
  2146   00121E                     u2551:
  2147   00121E  EFB0  F00A         	goto	l3605
  2148   001222                     u2550:
  2149   001222                     
  2150                           ; BSR set to: 0
  2151                           ;color.c: 108:         r = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) *
      +                           100 / total;
  2152   001222  EE20 F004          	lfsr	2,4
  2153   001226  5032               	movf	convert_rgb2hue@cMax^0,w,c
  2154   001228  26D9               	addwf	fsr2l,f,c
  2155   00122A  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2156   00122C  22DA               	addwfc	fsr2h,f,c
  2157   00122E  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  2158   001232  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  2159   001236  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2160   00123A  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2161   00123E  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2162   001240  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2163   001242  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2164   001244  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2165   001246  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2166   001248  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2167   00124A  C034  FFD9         	movff	convert_rgb2hue@cCurr,fsr2l
  2168   00124E  C035  FFDA         	movff	convert_rgb2hue@cCurr+1,fsr2h
  2169   001252  CFDE F038          	movff	postinc2,??_convert_rgb2hue+2
  2170   001256  CFDD F039          	movff	postdec2,??_convert_rgb2hue+3
  2171   00125A  C038  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  2172   00125E  C039  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  2173   001262  6A03               	clrf	(___omul@multiplier+2)^0,c
  2174   001264  6A04               	clrf	(___omul@multiplier+3)^0,c
  2175   001266  6A05               	clrf	(___omul@multiplier+4)^0,c
  2176   001268  6A06               	clrf	(___omul@multiplier+5)^0,c
  2177   00126A  6A07               	clrf	(___omul@multiplier+6)^0,c
  2178   00126C  6A08               	clrf	(___omul@multiplier+7)^0,c
  2179   00126E  EC27  F011         	call	___omul	;wreg free
  2180   001272  C001  F072         	movff	?___omul,_convert_rgb2hue$2845
  2181   001276  C002  F073         	movff	?___omul+1,_convert_rgb2hue$2845+1
  2182   00127A  C003  F074         	movff	?___omul+2,_convert_rgb2hue$2845+2
  2183   00127E  C004  F075         	movff	?___omul+3,_convert_rgb2hue$2845+3
  2184   001282  C005  F076         	movff	?___omul+4,_convert_rgb2hue$2845+4
  2185   001286  C006  F077         	movff	?___omul+5,_convert_rgb2hue$2845+5
  2186   00128A  C007  F078         	movff	?___omul+6,_convert_rgb2hue$2845+6
  2187   00128E  C008  F079         	movff	?___omul+7,_convert_rgb2hue$2845+7
  2188                           
  2189                           ;color.c: 108:         r = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) *
      +                           100 / total;
  2190   001292  EE20 F002          	lfsr	2,2
  2191   001296  5032               	movf	convert_rgb2hue@cMax^0,w,c
  2192   001298  26D9               	addwf	fsr2l,f,c
  2193   00129A  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2194   00129C  22DA               	addwfc	fsr2h,f,c
  2195   00129E  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  2196   0012A2  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  2197   0012A6  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2198   0012AA  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2199   0012AE  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2200   0012B0  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2201   0012B2  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2202   0012B4  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2203   0012B6  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2204   0012B8  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2205   0012BA  C072  F001         	movff	_convert_rgb2hue$2845,___omul@multiplier
  2206   0012BE  C073  F002         	movff	_convert_rgb2hue$2845+1,___omul@multiplier+1
  2207   0012C2  C074  F003         	movff	_convert_rgb2hue$2845+2,___omul@multiplier+2
  2208   0012C6  C075  F004         	movff	_convert_rgb2hue$2845+3,___omul@multiplier+3
  2209   0012CA  C076  F005         	movff	_convert_rgb2hue$2845+4,___omul@multiplier+4
  2210   0012CE  C077  F006         	movff	_convert_rgb2hue$2845+5,___omul@multiplier+5
  2211   0012D2  C078  F007         	movff	_convert_rgb2hue$2845+6,___omul@multiplier+6
  2212   0012D6  C079  F008         	movff	_convert_rgb2hue$2845+7,___omul@multiplier+7
  2213   0012DA  EC27  F011         	call	___omul	;wreg free
  2214   0012DE  C001  F07A         	movff	?___omul,_convert_rgb2hue$2846
  2215   0012E2  C002  F07B         	movff	?___omul+1,_convert_rgb2hue$2846+1
  2216   0012E6  C003  F07C         	movff	?___omul+2,_convert_rgb2hue$2846+2
  2217   0012EA  C004  F07D         	movff	?___omul+3,_convert_rgb2hue$2846+3
  2218   0012EE  C005  F07E         	movff	?___omul+4,_convert_rgb2hue$2846+4
  2219   0012F2  C006  F07F         	movff	?___omul+5,_convert_rgb2hue$2846+5
  2220   0012F6  C007  F080         	movff	?___omul+6,_convert_rgb2hue$2846+6
  2221   0012FA  C008  F081         	movff	?___omul+7,_convert_rgb2hue$2846+7
  2222                           
  2223                           ;color.c: 108:         r = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) *
      +                           100 / total;
  2224   0012FE  0E64               	movlw	100
  2225   001300  6E09               	movwf	___omul@multiplicand^0,c
  2226   001302  0E00               	movlw	0
  2227   001304  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2228   001306  0E00               	movlw	0
  2229   001308  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2230   00130A  0E00               	movlw	0
  2231   00130C  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2232   00130E  0E00               	movlw	0
  2233   001310  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2234   001312  0E00               	movlw	0
  2235   001314  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2236   001316  0E00               	movlw	0
  2237   001318  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2238   00131A  0E00               	movlw	0
  2239   00131C  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2240   00131E  C07A  F001         	movff	_convert_rgb2hue$2846,___omul@multiplier
  2241   001322  C07B  F002         	movff	_convert_rgb2hue$2846+1,___omul@multiplier+1
  2242   001326  C07C  F003         	movff	_convert_rgb2hue$2846+2,___omul@multiplier+2
  2243   00132A  C07D  F004         	movff	_convert_rgb2hue$2846+3,___omul@multiplier+3
  2244   00132E  C07E  F005         	movff	_convert_rgb2hue$2846+4,___omul@multiplier+4
  2245   001332  C07F  F006         	movff	_convert_rgb2hue$2846+5,___omul@multiplier+5
  2246   001336  C080  F007         	movff	_convert_rgb2hue$2846+6,___omul@multiplier+6
  2247   00133A  C081  F008         	movff	_convert_rgb2hue$2846+7,___omul@multiplier+7
  2248   00133E  EC27  F011         	call	___omul	;wreg free
  2249   001342  C001  F019         	movff	?___omul,___lodiv@dividend
  2250   001346  C002  F01A         	movff	?___omul+1,___lodiv@dividend+1
  2251   00134A  C003  F01B         	movff	?___omul+2,___lodiv@dividend+2
  2252   00134E  C004  F01C         	movff	?___omul+3,___lodiv@dividend+3
  2253   001352  C005  F01D         	movff	?___omul+4,___lodiv@dividend+4
  2254   001356  C006  F01E         	movff	?___omul+5,___lodiv@dividend+5
  2255   00135A  C007  F01F         	movff	?___omul+6,___lodiv@dividend+6
  2256   00135E  C008  F020         	movff	?___omul+7,___lodiv@dividend+7
  2257   001362  C06A  F021         	movff	convert_rgb2hue@total,___lodiv@divisor
  2258   001366  C06B  F022         	movff	convert_rgb2hue@total+1,___lodiv@divisor+1
  2259   00136A  C06C  F023         	movff	convert_rgb2hue@total+2,___lodiv@divisor+2
  2260   00136E  C06D  F024         	movff	convert_rgb2hue@total+3,___lodiv@divisor+3
  2261   001372  C06E  F025         	movff	convert_rgb2hue@total+4,___lodiv@divisor+4
  2262   001376  C06F  F026         	movff	convert_rgb2hue@total+5,___lodiv@divisor+5
  2263   00137A  C070  F027         	movff	convert_rgb2hue@total+6,___lodiv@divisor+6
  2264   00137E  C071  F028         	movff	convert_rgb2hue@total+7,___lodiv@divisor+7
  2265   001382  EC8C  F00E         	call	___lodiv	;wreg free
  2266   001386  C019  F036         	movff	?___lodiv,??_convert_rgb2hue
  2267   00138A  C01A  F037         	movff	?___lodiv+1,??_convert_rgb2hue+1
  2268   00138E  C01B  F038         	movff	?___lodiv+2,??_convert_rgb2hue+2
  2269   001392  C01C  F039         	movff	?___lodiv+3,??_convert_rgb2hue+3
  2270   001396  C01D  F03A         	movff	?___lodiv+4,??_convert_rgb2hue+4
  2271   00139A  C01E  F03B         	movff	?___lodiv+5,??_convert_rgb2hue+5
  2272   00139E  C01F  F03C         	movff	?___lodiv+6,??_convert_rgb2hue+6
  2273   0013A2  C020  F03D         	movff	?___lodiv+7,??_convert_rgb2hue+7
  2274   0013A6  C036  F084         	movff	??_convert_rgb2hue,convert_rgb2hue@r
  2275   0013AA  C037  F085         	movff	??_convert_rgb2hue+1,convert_rgb2hue@r+1
  2276                           
  2277                           ;color.c: 109:         g = ((unsigned long long)cCurr->green * cMax->blue * cMax->red) *
      +                           100 / total;
  2278   0013AE  EE20 F004          	lfsr	2,4
  2279   0013B2  5032               	movf	convert_rgb2hue@cMax^0,w,c
  2280   0013B4  26D9               	addwf	fsr2l,f,c
  2281   0013B6  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2282   0013B8  22DA               	addwfc	fsr2h,f,c
  2283   0013BA  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  2284   0013BE  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  2285   0013C2  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2286   0013C6  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2287   0013CA  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2288   0013CC  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2289   0013CE  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2290   0013D0  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2291   0013D2  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2292   0013D4  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2293   0013D6  EE20 F002          	lfsr	2,2
  2294   0013DA  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  2295   0013DC  26D9               	addwf	fsr2l,f,c
  2296   0013DE  5035               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  2297   0013E0  22DA               	addwfc	fsr2h,f,c
  2298   0013E2  CFDE F038          	movff	postinc2,??_convert_rgb2hue+2
  2299   0013E6  CFDD F039          	movff	postdec2,??_convert_rgb2hue+3
  2300   0013EA  C038  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  2301   0013EE  C039  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  2302   0013F2  6A03               	clrf	(___omul@multiplier+2)^0,c
  2303   0013F4  6A04               	clrf	(___omul@multiplier+3)^0,c
  2304   0013F6  6A05               	clrf	(___omul@multiplier+4)^0,c
  2305   0013F8  6A06               	clrf	(___omul@multiplier+5)^0,c
  2306   0013FA  6A07               	clrf	(___omul@multiplier+6)^0,c
  2307   0013FC  6A08               	clrf	(___omul@multiplier+7)^0,c
  2308   0013FE  EC27  F011         	call	___omul	;wreg free
  2309   001402  C001  F072         	movff	?___omul,_convert_rgb2hue$2845
  2310   001406  C002  F073         	movff	?___omul+1,_convert_rgb2hue$2845+1
  2311   00140A  C003  F074         	movff	?___omul+2,_convert_rgb2hue$2845+2
  2312   00140E  C004  F075         	movff	?___omul+3,_convert_rgb2hue$2845+3
  2313   001412  C005  F076         	movff	?___omul+4,_convert_rgb2hue$2845+4
  2314   001416  C006  F077         	movff	?___omul+5,_convert_rgb2hue$2845+5
  2315   00141A  C007  F078         	movff	?___omul+6,_convert_rgb2hue$2845+6
  2316   00141E  C008  F079         	movff	?___omul+7,_convert_rgb2hue$2845+7
  2317                           
  2318                           ;color.c: 109:         g = ((unsigned long long)cCurr->green * cMax->blue * cMax->red) *
      +                           100 / total;
  2319   001422  C032  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  2320   001426  C033  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  2321   00142A  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  2322   00142E  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  2323   001432  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2324   001436  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2325   00143A  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2326   00143C  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2327   00143E  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2328   001440  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2329   001442  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2330   001444  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2331   001446  C072  F001         	movff	_convert_rgb2hue$2845,___omul@multiplier
  2332   00144A  C073  F002         	movff	_convert_rgb2hue$2845+1,___omul@multiplier+1
  2333   00144E  C074  F003         	movff	_convert_rgb2hue$2845+2,___omul@multiplier+2
  2334   001452  C075  F004         	movff	_convert_rgb2hue$2845+3,___omul@multiplier+3
  2335   001456  C076  F005         	movff	_convert_rgb2hue$2845+4,___omul@multiplier+4
  2336   00145A  C077  F006         	movff	_convert_rgb2hue$2845+5,___omul@multiplier+5
  2337   00145E  C078  F007         	movff	_convert_rgb2hue$2845+6,___omul@multiplier+6
  2338   001462  C079  F008         	movff	_convert_rgb2hue$2845+7,___omul@multiplier+7
  2339   001466  EC27  F011         	call	___omul	;wreg free
  2340   00146A  C001  F07A         	movff	?___omul,_convert_rgb2hue$2846
  2341   00146E  C002  F07B         	movff	?___omul+1,_convert_rgb2hue$2846+1
  2342   001472  C003  F07C         	movff	?___omul+2,_convert_rgb2hue$2846+2
  2343   001476  C004  F07D         	movff	?___omul+3,_convert_rgb2hue$2846+3
  2344   00147A  C005  F07E         	movff	?___omul+4,_convert_rgb2hue$2846+4
  2345   00147E  C006  F07F         	movff	?___omul+5,_convert_rgb2hue$2846+5
  2346   001482  C007  F080         	movff	?___omul+6,_convert_rgb2hue$2846+6
  2347   001486  C008  F081         	movff	?___omul+7,_convert_rgb2hue$2846+7
  2348                           
  2349                           ;color.c: 109:         g = ((unsigned long long)cCurr->green * cMax->blue * cMax->red) *
      +                           100 / total;
  2350   00148A  0E64               	movlw	100
  2351   00148C  6E09               	movwf	___omul@multiplicand^0,c
  2352   00148E  0E00               	movlw	0
  2353   001490  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2354   001492  0E00               	movlw	0
  2355   001494  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2356   001496  0E00               	movlw	0
  2357   001498  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2358   00149A  0E00               	movlw	0
  2359   00149C  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2360   00149E  0E00               	movlw	0
  2361   0014A0  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2362   0014A2  0E00               	movlw	0
  2363   0014A4  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2364   0014A6  0E00               	movlw	0
  2365   0014A8  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2366   0014AA  C07A  F001         	movff	_convert_rgb2hue$2846,___omul@multiplier
  2367   0014AE  C07B  F002         	movff	_convert_rgb2hue$2846+1,___omul@multiplier+1
  2368   0014B2  C07C  F003         	movff	_convert_rgb2hue$2846+2,___omul@multiplier+2
  2369   0014B6  C07D  F004         	movff	_convert_rgb2hue$2846+3,___omul@multiplier+3
  2370   0014BA  C07E  F005         	movff	_convert_rgb2hue$2846+4,___omul@multiplier+4
  2371   0014BE  C07F  F006         	movff	_convert_rgb2hue$2846+5,___omul@multiplier+5
  2372   0014C2  C080  F007         	movff	_convert_rgb2hue$2846+6,___omul@multiplier+6
  2373   0014C6  C081  F008         	movff	_convert_rgb2hue$2846+7,___omul@multiplier+7
  2374   0014CA  EC27  F011         	call	___omul	;wreg free
  2375   0014CE  C001  F019         	movff	?___omul,___lodiv@dividend
  2376   0014D2  C002  F01A         	movff	?___omul+1,___lodiv@dividend+1
  2377   0014D6  C003  F01B         	movff	?___omul+2,___lodiv@dividend+2
  2378   0014DA  C004  F01C         	movff	?___omul+3,___lodiv@dividend+3
  2379   0014DE  C005  F01D         	movff	?___omul+4,___lodiv@dividend+4
  2380   0014E2  C006  F01E         	movff	?___omul+5,___lodiv@dividend+5
  2381   0014E6  C007  F01F         	movff	?___omul+6,___lodiv@dividend+6
  2382   0014EA  C008  F020         	movff	?___omul+7,___lodiv@dividend+7
  2383   0014EE  C06A  F021         	movff	convert_rgb2hue@total,___lodiv@divisor
  2384   0014F2  C06B  F022         	movff	convert_rgb2hue@total+1,___lodiv@divisor+1
  2385   0014F6  C06C  F023         	movff	convert_rgb2hue@total+2,___lodiv@divisor+2
  2386   0014FA  C06D  F024         	movff	convert_rgb2hue@total+3,___lodiv@divisor+3
  2387   0014FE  C06E  F025         	movff	convert_rgb2hue@total+4,___lodiv@divisor+4
  2388   001502  C06F  F026         	movff	convert_rgb2hue@total+5,___lodiv@divisor+5
  2389   001506  C070  F027         	movff	convert_rgb2hue@total+6,___lodiv@divisor+6
  2390   00150A  C071  F028         	movff	convert_rgb2hue@total+7,___lodiv@divisor+7
  2391   00150E  EC8C  F00E         	call	___lodiv	;wreg free
  2392   001512  C019  F036         	movff	?___lodiv,??_convert_rgb2hue
  2393   001516  C01A  F037         	movff	?___lodiv+1,??_convert_rgb2hue+1
  2394   00151A  C01B  F038         	movff	?___lodiv+2,??_convert_rgb2hue+2
  2395   00151E  C01C  F039         	movff	?___lodiv+3,??_convert_rgb2hue+3
  2396   001522  C01D  F03A         	movff	?___lodiv+4,??_convert_rgb2hue+4
  2397   001526  C01E  F03B         	movff	?___lodiv+5,??_convert_rgb2hue+5
  2398   00152A  C01F  F03C         	movff	?___lodiv+6,??_convert_rgb2hue+6
  2399   00152E  C020  F03D         	movff	?___lodiv+7,??_convert_rgb2hue+7
  2400   001532  C036  F086         	movff	??_convert_rgb2hue,convert_rgb2hue@g
  2401   001536  C037  F087         	movff	??_convert_rgb2hue+1,convert_rgb2hue@g+1
  2402   00153A                     
  2403                           ;color.c: 110:         b = 100 - r - g;
  2404   00153A  C084  F036         	movff	convert_rgb2hue@r,??_convert_rgb2hue
  2405   00153E  C085  F037         	movff	convert_rgb2hue@r+1,??_convert_rgb2hue+1
  2406   001542  1E36               	comf	??_convert_rgb2hue^0,f,c
  2407   001544  1E37               	comf	(??_convert_rgb2hue+1)^0,f,c
  2408   001546  4A36               	infsnz	??_convert_rgb2hue^0,f,c
  2409   001548  2A37               	incf	(??_convert_rgb2hue+1)^0,f,c
  2410   00154A  0100               	movlb	0	; () banked
  2411   00154C  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2412   00154E  5E36               	subwf	??_convert_rgb2hue^0,f,c
  2413   001550  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2414   001552  5A37               	subwfb	(??_convert_rgb2hue+1)^0,f,c
  2415   001554  0E64               	movlw	100
  2416   001556  2436               	addwf	??_convert_rgb2hue^0,w,c
  2417   001558  6F82               	movwf	convert_rgb2hue@b& (0+255),b
  2418   00155A  0E00               	movlw	0
  2419   00155C  2037               	addwfc	(??_convert_rgb2hue+1)^0,w,c
  2420   00155E  6F83               	movwf	(convert_rgb2hue@b+1)& (0+255),b
  2421   001560                     l3605:
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;color.c: 126:     if (r>g & r>b){
  2425   001560  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2426   001562  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2427   001564  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2428   001566  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2429   001568  B0D8               	btfsc	status,0,c
  2430   00156A  EFB9  F00A         	goto	u2561
  2431   00156E  EFBB  F00A         	goto	u2560
  2432   001572                     u2561:
  2433   001572  EFEF  F00A         	goto	l3615
  2434   001576                     u2560:
  2435   001576                     
  2436                           ; BSR set to: 0
  2437   001576  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2438   001578  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2439   00157A  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2440   00157C  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2441   00157E  B0D8               	btfsc	status,0,c
  2442   001580  EFC4  F00A         	goto	u2571
  2443   001584  EFC6  F00A         	goto	u2570
  2444   001588                     u2571:
  2445   001588  EFEF  F00A         	goto	l3615
  2446   00158C                     u2570:
  2447   00158C                     
  2448                           ; BSR set to: 0
  2449                           ;color.c: 127:         if (b>g){
  2450   00158C  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2451   00158E  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2452   001590  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2453   001592  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2454   001594  B0D8               	btfsc	status,0,c
  2455   001596  EFCF  F00A         	goto	u2581
  2456   00159A  EFD1  F00A         	goto	u2580
  2457   00159E                     u2581:
  2458   00159E  EFE1  F00A         	goto	l3613
  2459   0015A2                     u2580:
  2460   0015A2                     
  2461                           ; BSR set to: 0
  2462   0015A2  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2463   0015A4  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2464   0015A6  6E07               	movwf	___lwdiv@dividend^0,c
  2465   0015A8  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2466   0015AA  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2467   0015AC  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2468   0015AE  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2469   0015B0  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2470   0015B2  6E09               	movwf	___lwdiv@divisor^0,c
  2471   0015B4  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2472   0015B6  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2473   0015B8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2474   0015BA  EC09  F012         	call	___lwdiv	;wreg free
  2475                           
  2476                           ;color.c: 129:         } else {
  2477   0015BE  EFEF  F00A         	goto	l3615
  2478   0015C2                     l3613:
  2479                           
  2480                           ; BSR set to: 0
  2481   0015C2  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2482   0015C4  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2483   0015C6  6E07               	movwf	___lwdiv@dividend^0,c
  2484   0015C8  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2485   0015CA  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2486   0015CC  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2487   0015CE  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2488   0015D0  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2489   0015D2  6E09               	movwf	___lwdiv@divisor^0,c
  2490   0015D4  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2491   0015D6  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2492   0015D8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2493   0015DA  EC09  F012         	call	___lwdiv	;wreg free
  2494   0015DE                     l3615:
  2495                           
  2496                           ;color.c: 134:     if (g>r & g>b){
  2497   0015DE  0100               	movlb	0	; () banked
  2498   0015E0  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2499   0015E2  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2500   0015E4  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2501   0015E6  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2502   0015E8  B0D8               	btfsc	status,0,c
  2503   0015EA  EFF9  F00A         	goto	u2591
  2504   0015EE  EFFB  F00A         	goto	u2590
  2505   0015F2                     u2591:
  2506   0015F2  EF2F  F00B         	goto	l3625
  2507   0015F6                     u2590:
  2508   0015F6                     
  2509                           ; BSR set to: 0
  2510   0015F6  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2511   0015F8  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2512   0015FA  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2513   0015FC  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2514   0015FE  B0D8               	btfsc	status,0,c
  2515   001600  EF04  F00B         	goto	u2601
  2516   001604  EF06  F00B         	goto	u2600
  2517   001608                     u2601:
  2518   001608  EF2F  F00B         	goto	l3625
  2519   00160C                     u2600:
  2520   00160C                     
  2521                           ; BSR set to: 0
  2522                           ;color.c: 135:         if (r>b){
  2523   00160C  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2524   00160E  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2525   001610  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2526   001612  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2527   001614  B0D8               	btfsc	status,0,c
  2528   001616  EF0F  F00B         	goto	u2611
  2529   00161A  EF11  F00B         	goto	u2610
  2530   00161E                     u2611:
  2531   00161E  EF21  F00B         	goto	l3623
  2532   001622                     u2610:
  2533   001622                     
  2534                           ; BSR set to: 0
  2535   001622  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2536   001624  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2537   001626  6E07               	movwf	___lwdiv@dividend^0,c
  2538   001628  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2539   00162A  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2540   00162C  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2541   00162E  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2542   001630  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2543   001632  6E09               	movwf	___lwdiv@divisor^0,c
  2544   001634  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2545   001636  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2546   001638  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2547   00163A  EC09  F012         	call	___lwdiv	;wreg free
  2548                           
  2549                           ;color.c: 137:         } else {
  2550   00163E  EF2F  F00B         	goto	l3625
  2551   001642                     l3623:
  2552                           
  2553                           ; BSR set to: 0
  2554   001642  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2555   001644  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2556   001646  6E07               	movwf	___lwdiv@dividend^0,c
  2557   001648  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2558   00164A  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2559   00164C  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2560   00164E  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2561   001650  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2562   001652  6E09               	movwf	___lwdiv@divisor^0,c
  2563   001654  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2564   001656  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2565   001658  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2566   00165A  EC09  F012         	call	___lwdiv	;wreg free
  2567   00165E                     l3625:
  2568                           
  2569                           ;color.c: 141:     if (b>r & b>g){
  2570   00165E  0100               	movlb	0	; () banked
  2571   001660  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2572   001662  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2573   001664  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2574   001666  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2575   001668  B0D8               	btfsc	status,0,c
  2576   00166A  EF39  F00B         	goto	u2621
  2577   00166E  EF3B  F00B         	goto	u2620
  2578   001672                     u2621:
  2579   001672  EF81  F00B         	goto	l81
  2580   001676                     u2620:
  2581   001676                     
  2582                           ; BSR set to: 0
  2583   001676  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2584   001678  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2585   00167A  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2586   00167C  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2587   00167E  B0D8               	btfsc	status,0,c
  2588   001680  EF44  F00B         	goto	u2631
  2589   001684  EF46  F00B         	goto	u2630
  2590   001688                     u2631:
  2591   001688  EF81  F00B         	goto	l81
  2592   00168C                     u2630:
  2593   00168C                     
  2594                           ; BSR set to: 0
  2595                           ;color.c: 142:         if (r>g){
  2596   00168C  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2597   00168E  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2598   001690  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2599   001692  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2600   001694  B0D8               	btfsc	status,0,c
  2601   001696  EF4F  F00B         	goto	u2641
  2602   00169A  EF51  F00B         	goto	u2640
  2603   00169E                     u2641:
  2604   00169E  EF68  F00B         	goto	l3633
  2605   0016A2                     u2640:
  2606   0016A2                     
  2607                           ; BSR set to: 0
  2608                           ;color.c: 143:             hue=4+(r-g)/(b-g);
  2609   0016A2  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2610   0016A4  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2611   0016A6  6E07               	movwf	___lwdiv@dividend^0,c
  2612   0016A8  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2613   0016AA  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2614   0016AC  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2615   0016AE  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2616   0016B0  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2617   0016B2  6E09               	movwf	___lwdiv@divisor^0,c
  2618   0016B4  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2619   0016B6  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2620   0016B8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2621   0016BA  EC09  F012         	call	___lwdiv	;wreg free
  2622   0016BE  0E04               	movlw	4
  2623   0016C0  2407               	addwf	?___lwdiv^0,w,c
  2624   0016C2  0100               	movlb	0	; () banked
  2625   0016C4  6F68               	movwf	convert_rgb2hue@hue& (0+255),b
  2626   0016C6  0E00               	movlw	0
  2627   0016C8  2008               	addwfc	(?___lwdiv+1)^0,w,c
  2628   0016CA  6F69               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2629                           
  2630                           ;color.c: 144:         } else {
  2631   0016CC  EF7D  F00B         	goto	l3635
  2632   0016D0                     l3633:
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;color.c: 145:             hue=4+(r-g)/(b-r);
  2636   0016D0  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2637   0016D2  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2638   0016D4  6E07               	movwf	___lwdiv@dividend^0,c
  2639   0016D6  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2640   0016D8  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2641   0016DA  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2642   0016DC  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2643   0016DE  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2644   0016E0  6E09               	movwf	___lwdiv@divisor^0,c
  2645   0016E2  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2646   0016E4  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2647   0016E6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2648   0016E8  EC09  F012         	call	___lwdiv	;wreg free
  2649   0016EC  0E04               	movlw	4
  2650   0016EE  2407               	addwf	?___lwdiv^0,w,c
  2651   0016F0  0100               	movlb	0	; () banked
  2652   0016F2  6F68               	movwf	convert_rgb2hue@hue& (0+255),b
  2653   0016F4  0E00               	movlw	0
  2654   0016F6  2008               	addwfc	(?___lwdiv+1)^0,w,c
  2655   0016F8  6F69               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2656   0016FA                     l3635:
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;color.c: 148:     return hue;
  2660   0016FA  C068  F032         	movff	convert_rgb2hue@hue,?_convert_rgb2hue
  2661   0016FE  C069  F033         	movff	convert_rgb2hue@hue+1,?_convert_rgb2hue+1
  2662   001702                     l81:
  2663                           
  2664                           ; BSR set to: 0
  2665   001702  0012               	return		;funcret
  2666   001704                     __end_of_convert_rgb2hue:
  2667                           	callstack 0
  2668                           
  2669 ;; *************** function ___omul *****************
  2670 ;; Defined at:
  2671 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul64.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  multiplier      8    0[COMRAM] unsigned long long 
  2674 ;;  multiplicand    8    8[COMRAM] unsigned long long 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  product         8   16[COMRAM] unsigned long long 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  8    0[COMRAM] unsigned long long 
  2679 ;; Registers used:
  2680 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2686 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2687 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2689 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2690 ;;Total ram usage:       24 bytes
  2691 ;; Hardware stack levels used: 1
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		_convert_rgb2hue
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text6
  2700   00224E                     __ptext6:
  2701                           	callstack 0
  2702   00224E                     ___omul:
  2703                           	callstack 28
  2704   00224E  EE20  F011         	lfsr	2,___omul@product
  2705   002252  0E07               	movlw	7
  2706   002254                     u2481:
  2707   002254  6ADE               	clrf	postinc2,c
  2708   002256  06E8               	decf	wreg,f,c
  2709   002258  E2FD               	bc	u2481
  2710   00225A                     l3547:
  2711   00225A  A001               	btfss	___omul@multiplier^0,0,c
  2712   00225C  EF32  F011         	goto	u2491
  2713   002260  EF34  F011         	goto	u2490
  2714   002264                     u2491:
  2715   002264  EF44  F011         	goto	l3551
  2716   002268                     u2490:
  2717   002268  5009               	movf	___omul@multiplicand^0,w,c
  2718   00226A  2611               	addwf	___omul@product^0,f,c
  2719   00226C  500A               	movf	(___omul@multiplicand+1)^0,w,c
  2720   00226E  2212               	addwfc	(___omul@product+1)^0,f,c
  2721   002270  500B               	movf	(___omul@multiplicand+2)^0,w,c
  2722   002272  2213               	addwfc	(___omul@product+2)^0,f,c
  2723   002274  500C               	movf	(___omul@multiplicand+3)^0,w,c
  2724   002276  2214               	addwfc	(___omul@product+3)^0,f,c
  2725   002278  500D               	movf	(___omul@multiplicand+4)^0,w,c
  2726   00227A  2215               	addwfc	(___omul@product+4)^0,f,c
  2727   00227C  500E               	movf	(___omul@multiplicand+5)^0,w,c
  2728   00227E  2216               	addwfc	(___omul@product+5)^0,f,c
  2729   002280  500F               	movf	(___omul@multiplicand+6)^0,w,c
  2730   002282  2217               	addwfc	(___omul@product+6)^0,f,c
  2731   002284  5010               	movf	(___omul@multiplicand+7)^0,w,c
  2732   002286  2218               	addwfc	(___omul@product+7)^0,f,c
  2733   002288                     l3551:
  2734   002288  90D8               	bcf	status,0,c
  2735   00228A  3609               	rlcf	___omul@multiplicand^0,f,c
  2736   00228C  360A               	rlcf	(___omul@multiplicand+1)^0,f,c
  2737   00228E  360B               	rlcf	(___omul@multiplicand+2)^0,f,c
  2738   002290  360C               	rlcf	(___omul@multiplicand+3)^0,f,c
  2739   002292  360D               	rlcf	(___omul@multiplicand+4)^0,f,c
  2740   002294  360E               	rlcf	(___omul@multiplicand+5)^0,f,c
  2741   002296  360F               	rlcf	(___omul@multiplicand+6)^0,f,c
  2742   002298  3610               	rlcf	(___omul@multiplicand+7)^0,f,c
  2743   00229A  90D8               	bcf	status,0,c
  2744   00229C  3208               	rrcf	(___omul@multiplier+7)^0,f,c
  2745   00229E  3207               	rrcf	(___omul@multiplier+6)^0,f,c
  2746   0022A0  3206               	rrcf	(___omul@multiplier+5)^0,f,c
  2747   0022A2  3205               	rrcf	(___omul@multiplier+4)^0,f,c
  2748   0022A4  3204               	rrcf	(___omul@multiplier+3)^0,f,c
  2749   0022A6  3203               	rrcf	(___omul@multiplier+2)^0,f,c
  2750   0022A8  3202               	rrcf	(___omul@multiplier+1)^0,f,c
  2751   0022AA  3201               	rrcf	___omul@multiplier^0,f,c
  2752   0022AC  5001               	movf	___omul@multiplier^0,w,c
  2753   0022AE  1002               	iorwf	(___omul@multiplier+1)^0,w,c
  2754   0022B0  1003               	iorwf	(___omul@multiplier+2)^0,w,c
  2755   0022B2  1004               	iorwf	(___omul@multiplier+3)^0,w,c
  2756   0022B4  1005               	iorwf	(___omul@multiplier+4)^0,w,c
  2757   0022B6  1006               	iorwf	(___omul@multiplier+5)^0,w,c
  2758   0022B8  1007               	iorwf	(___omul@multiplier+6)^0,w,c
  2759   0022BA  1008               	iorwf	(___omul@multiplier+7)^0,w,c
  2760   0022BC  A4D8               	btfss	status,2,c
  2761   0022BE  EF63  F011         	goto	u2501
  2762   0022C2  EF65  F011         	goto	u2500
  2763   0022C6                     u2501:
  2764   0022C6  EF2D  F011         	goto	l3547
  2765   0022CA                     u2500:
  2766   0022CA  C011  F001         	movff	___omul@product,?___omul
  2767   0022CE  C012  F002         	movff	___omul@product+1,?___omul+1
  2768   0022D2  C013  F003         	movff	___omul@product+2,?___omul+2
  2769   0022D6  C014  F004         	movff	___omul@product+3,?___omul+3
  2770   0022DA  C015  F005         	movff	___omul@product+4,?___omul+4
  2771   0022DE  C016  F006         	movff	___omul@product+5,?___omul+5
  2772   0022E2  C017  F007         	movff	___omul@product+6,?___omul+6
  2773   0022E6  C018  F008         	movff	___omul@product+7,?___omul+7
  2774   0022EA  0012               	return		;funcret
  2775   0022EC                     __end_of___omul:
  2776                           	callstack 0
  2777                           
  2778 ;; *************** function ___lwdiv *****************
  2779 ;; Defined at:
  2780 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  dividend        2    6[COMRAM] unsigned int 
  2783 ;;  divisor         2    8[COMRAM] unsigned int 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  quotient        2   11[COMRAM] unsigned int 
  2786 ;;  counter         1   10[COMRAM] unsigned char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  2    6[COMRAM] unsigned int 
  2789 ;; Registers used:
  2790 ;;		wreg, status,2, status,0
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2796 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2797 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2799 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2800 ;;Total ram usage:        7 bytes
  2801 ;; Hardware stack levels used: 1
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_convert_rgb2hue
  2806 ;;		_ADC2String
  2807 ;;		_setMotorPWM
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text7
  2812   002412                     __ptext7:
  2813                           	callstack 0
  2814   002412                     ___lwdiv:
  2815                           	callstack 27
  2816   002412  0E00               	movlw	0
  2817   002414  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  2818   002416  0E00               	movlw	0
  2819   002418  6E0C               	movwf	___lwdiv@quotient^0,c
  2820   00241A  5009               	movf	___lwdiv@divisor^0,w,c
  2821   00241C  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2822   00241E  B4D8               	btfsc	status,2,c
  2823   002420  EF14  F012         	goto	u2421
  2824   002424  EF16  F012         	goto	u2420
  2825   002428                     u2421:
  2826   002428  EF3E  F012         	goto	l962
  2827   00242C                     u2420:
  2828   00242C  0E01               	movlw	1
  2829   00242E  6E0B               	movwf	___lwdiv@counter^0,c
  2830   002430  EF1E  F012         	goto	l3473
  2831   002434                     l3471:
  2832   002434  90D8               	bcf	status,0,c
  2833   002436  3609               	rlcf	___lwdiv@divisor^0,f,c
  2834   002438  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2835   00243A  2A0B               	incf	___lwdiv@counter^0,f,c
  2836   00243C                     l3473:
  2837   00243C  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2838   00243E  EF23  F012         	goto	u2431
  2839   002442  EF25  F012         	goto	u2430
  2840   002446                     u2431:
  2841   002446  EF1A  F012         	goto	l3471
  2842   00244A                     u2430:
  2843   00244A                     l3475:
  2844   00244A  90D8               	bcf	status,0,c
  2845   00244C  360C               	rlcf	___lwdiv@quotient^0,f,c
  2846   00244E  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2847   002450  5009               	movf	___lwdiv@divisor^0,w,c
  2848   002452  5C07               	subwf	___lwdiv@dividend^0,w,c
  2849   002454  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2850   002456  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2851   002458  A0D8               	btfss	status,0,c
  2852   00245A  EF31  F012         	goto	u2441
  2853   00245E  EF33  F012         	goto	u2440
  2854   002462                     u2441:
  2855   002462  EF38  F012         	goto	l3483
  2856   002466                     u2440:
  2857   002466  5009               	movf	___lwdiv@divisor^0,w,c
  2858   002468  5E07               	subwf	___lwdiv@dividend^0,f,c
  2859   00246A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2860   00246C  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2861   00246E  800C               	bsf	___lwdiv@quotient^0,0,c
  2862   002470                     l3483:
  2863   002470  90D8               	bcf	status,0,c
  2864   002472  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2865   002474  3209               	rrcf	___lwdiv@divisor^0,f,c
  2866   002476  2E0B               	decfsz	___lwdiv@counter^0,f,c
  2867   002478  EF25  F012         	goto	l3475
  2868   00247C                     l962:
  2869   00247C  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  2870   002480  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2871   002484  0012               	return		;funcret
  2872   002486                     __end_of___lwdiv:
  2873                           	callstack 0
  2874                           
  2875 ;; *************** function ___lodiv *****************
  2876 ;; Defined at:
  2877 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lodiv.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  dividend        8   24[COMRAM] unsigned long long 
  2880 ;;  divisor         8   32[COMRAM] unsigned long long 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  quotient        8   40[COMRAM] unsigned long long 
  2883 ;;  counter         1   48[COMRAM] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  8   24[COMRAM] unsigned long long 
  2886 ;; Registers used:
  2887 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2893 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2894 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2896 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2897 ;;Total ram usage:       25 bytes
  2898 ;; Hardware stack levels used: 1
  2899 ;; This function calls:
  2900 ;;		Nothing
  2901 ;; This function is called by:
  2902 ;;		_convert_rgb2hue
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text8
  2907   001D18                     __ptext8:
  2908                           	callstack 0
  2909   001D18                     ___lodiv:
  2910                           	callstack 28
  2911   001D18  EE20  F029         	lfsr	2,___lodiv@quotient
  2912   001D1C  0E07               	movlw	7
  2913   001D1E                     u2511:
  2914   001D1E  6ADE               	clrf	postinc2,c
  2915   001D20  06E8               	decf	wreg,f,c
  2916   001D22  E2FD               	bc	u2511
  2917   001D24  5021               	movf	___lodiv@divisor^0,w,c
  2918   001D26  1022               	iorwf	(___lodiv@divisor+1)^0,w,c
  2919   001D28  1023               	iorwf	(___lodiv@divisor+2)^0,w,c
  2920   001D2A  1024               	iorwf	(___lodiv@divisor+3)^0,w,c
  2921   001D2C  1025               	iorwf	(___lodiv@divisor+4)^0,w,c
  2922   001D2E  1026               	iorwf	(___lodiv@divisor+5)^0,w,c
  2923   001D30  1027               	iorwf	(___lodiv@divisor+6)^0,w,c
  2924   001D32  1028               	iorwf	(___lodiv@divisor+7)^0,w,c
  2925   001D34  B4D8               	btfsc	status,2,c
  2926   001D36  EF9F  F00E         	goto	u2521
  2927   001D3A  EFA1  F00E         	goto	u2520
  2928   001D3E                     u2521:
  2929   001D3E  EFF3  F00E         	goto	l909
  2930   001D42                     u2520:
  2931   001D42  0E01               	movlw	1
  2932   001D44  6E31               	movwf	___lodiv@counter^0,c
  2933   001D46  EFAF  F00E         	goto	l3563
  2934   001D4A                     l3561:
  2935   001D4A  90D8               	bcf	status,0,c
  2936   001D4C  3621               	rlcf	___lodiv@divisor^0,f,c
  2937   001D4E  3622               	rlcf	(___lodiv@divisor+1)^0,f,c
  2938   001D50  3623               	rlcf	(___lodiv@divisor+2)^0,f,c
  2939   001D52  3624               	rlcf	(___lodiv@divisor+3)^0,f,c
  2940   001D54  3625               	rlcf	(___lodiv@divisor+4)^0,f,c
  2941   001D56  3626               	rlcf	(___lodiv@divisor+5)^0,f,c
  2942   001D58  3627               	rlcf	(___lodiv@divisor+6)^0,f,c
  2943   001D5A  3628               	rlcf	(___lodiv@divisor+7)^0,f,c
  2944   001D5C  2A31               	incf	___lodiv@counter^0,f,c
  2945   001D5E                     l3563:
  2946   001D5E  AE28               	btfss	(___lodiv@divisor+7)^0,7,c
  2947   001D60  EFB4  F00E         	goto	u2531
  2948   001D64  EFB6  F00E         	goto	u2530
  2949   001D68                     u2531:
  2950   001D68  EFA5  F00E         	goto	l3561
  2951   001D6C                     u2530:
  2952   001D6C                     l3565:
  2953   001D6C  90D8               	bcf	status,0,c
  2954   001D6E  3629               	rlcf	___lodiv@quotient^0,f,c
  2955   001D70  362A               	rlcf	(___lodiv@quotient+1)^0,f,c
  2956   001D72  362B               	rlcf	(___lodiv@quotient+2)^0,f,c
  2957   001D74  362C               	rlcf	(___lodiv@quotient+3)^0,f,c
  2958   001D76  362D               	rlcf	(___lodiv@quotient+4)^0,f,c
  2959   001D78  362E               	rlcf	(___lodiv@quotient+5)^0,f,c
  2960   001D7A  362F               	rlcf	(___lodiv@quotient+6)^0,f,c
  2961   001D7C  3630               	rlcf	(___lodiv@quotient+7)^0,f,c
  2962   001D7E  5021               	movf	___lodiv@divisor^0,w,c
  2963   001D80  5C19               	subwf	___lodiv@dividend^0,w,c
  2964   001D82  5022               	movf	(___lodiv@divisor+1)^0,w,c
  2965   001D84  581A               	subwfb	(___lodiv@dividend+1)^0,w,c
  2966   001D86  5023               	movf	(___lodiv@divisor+2)^0,w,c
  2967   001D88  581B               	subwfb	(___lodiv@dividend+2)^0,w,c
  2968   001D8A  5024               	movf	(___lodiv@divisor+3)^0,w,c
  2969   001D8C  581C               	subwfb	(___lodiv@dividend+3)^0,w,c
  2970   001D8E  5025               	movf	(___lodiv@divisor+4)^0,w,c
  2971   001D90  581D               	subwfb	(___lodiv@dividend+4)^0,w,c
  2972   001D92  5026               	movf	(___lodiv@divisor+5)^0,w,c
  2973   001D94  581E               	subwfb	(___lodiv@dividend+5)^0,w,c
  2974   001D96  5027               	movf	(___lodiv@divisor+6)^0,w,c
  2975   001D98  581F               	subwfb	(___lodiv@dividend+6)^0,w,c
  2976   001D9A  5028               	movf	(___lodiv@divisor+7)^0,w,c
  2977   001D9C  5820               	subwfb	(___lodiv@dividend+7)^0,w,c
  2978   001D9E  A0D8               	btfss	status,0,c
  2979   001DA0  EFD4  F00E         	goto	u2541
  2980   001DA4  EFD6  F00E         	goto	u2540
  2981   001DA8                     u2541:
  2982   001DA8  EFE7  F00E         	goto	l3573
  2983   001DAC                     u2540:
  2984   001DAC  5021               	movf	___lodiv@divisor^0,w,c
  2985   001DAE  5E19               	subwf	___lodiv@dividend^0,f,c
  2986   001DB0  5022               	movf	(___lodiv@divisor+1)^0,w,c
  2987   001DB2  5A1A               	subwfb	(___lodiv@dividend+1)^0,f,c
  2988   001DB4  5023               	movf	(___lodiv@divisor+2)^0,w,c
  2989   001DB6  5A1B               	subwfb	(___lodiv@dividend+2)^0,f,c
  2990   001DB8  5024               	movf	(___lodiv@divisor+3)^0,w,c
  2991   001DBA  5A1C               	subwfb	(___lodiv@dividend+3)^0,f,c
  2992   001DBC  5025               	movf	(___lodiv@divisor+4)^0,w,c
  2993   001DBE  5A1D               	subwfb	(___lodiv@dividend+4)^0,f,c
  2994   001DC0  5026               	movf	(___lodiv@divisor+5)^0,w,c
  2995   001DC2  5A1E               	subwfb	(___lodiv@dividend+5)^0,f,c
  2996   001DC4  5027               	movf	(___lodiv@divisor+6)^0,w,c
  2997   001DC6  5A1F               	subwfb	(___lodiv@dividend+6)^0,f,c
  2998   001DC8  5028               	movf	(___lodiv@divisor+7)^0,w,c
  2999   001DCA  5A20               	subwfb	(___lodiv@dividend+7)^0,f,c
  3000   001DCC  8029               	bsf	___lodiv@quotient^0,0,c
  3001   001DCE                     l3573:
  3002   001DCE  90D8               	bcf	status,0,c
  3003   001DD0  3228               	rrcf	(___lodiv@divisor+7)^0,f,c
  3004   001DD2  3227               	rrcf	(___lodiv@divisor+6)^0,f,c
  3005   001DD4  3226               	rrcf	(___lodiv@divisor+5)^0,f,c
  3006   001DD6  3225               	rrcf	(___lodiv@divisor+4)^0,f,c
  3007   001DD8  3224               	rrcf	(___lodiv@divisor+3)^0,f,c
  3008   001DDA  3223               	rrcf	(___lodiv@divisor+2)^0,f,c
  3009   001DDC  3222               	rrcf	(___lodiv@divisor+1)^0,f,c
  3010   001DDE  3221               	rrcf	___lodiv@divisor^0,f,c
  3011   001DE0  2E31               	decfsz	___lodiv@counter^0,f,c
  3012   001DE2  EFB6  F00E         	goto	l3565
  3013   001DE6                     l909:
  3014   001DE6  C029  F019         	movff	___lodiv@quotient,?___lodiv
  3015   001DEA  C02A  F01A         	movff	___lodiv@quotient+1,?___lodiv+1
  3016   001DEE  C02B  F01B         	movff	___lodiv@quotient+2,?___lodiv+2
  3017   001DF2  C02C  F01C         	movff	___lodiv@quotient+3,?___lodiv+3
  3018   001DF6  C02D  F01D         	movff	___lodiv@quotient+4,?___lodiv+4
  3019   001DFA  C02E  F01E         	movff	___lodiv@quotient+5,?___lodiv+5
  3020   001DFE  C02F  F01F         	movff	___lodiv@quotient+6,?___lodiv+6
  3021   001E02  C030  F020         	movff	___lodiv@quotient+7,?___lodiv+7
  3022   001E06  0012               	return		;funcret
  3023   001E08                     __end_of___lodiv:
  3024                           	callstack 0
  3025                           
  3026 ;; *************** function _initUSART4 *****************
  3027 ;; Defined at:
  3028 ;;		line 14 in file "serial.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, status,2
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3046 ;;Total ram usage:        0 bytes
  3047 ;; Hardware stack levels used: 1
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text9
  3056   0028B4                     __ptext9:
  3057                           	callstack 0
  3058   0028B4                     _initUSART4:
  3059                           	callstack 30
  3060   0028B4                     
  3061                           ;serial.c: 15:     RC0PPS = 0x12;
  3062   0028B4  0E12               	movlw	18
  3063   0028B6  010E               	movlb	14	; () banked
  3064   0028B8  6F62               	movwf	98,b	;volatile
  3065                           
  3066                           ;serial.c: 16:     RX4PPS = 0x11;
  3067   0028BA  0E11               	movlw	17
  3068   0028BC  6F15               	movwf	21,b	;volatile
  3069   0028BE                     
  3070                           ; BSR set to: 14
  3071                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  3072   0028BE  97E9               	bcf	233,3,b	;volatile
  3073   0028C0                     
  3074                           ; BSR set to: 14
  3075                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  3076   0028C0  95E8               	bcf	232,2,b	;volatile
  3077                           
  3078                           ;serial.c: 19:     SP4BRGL = 51;
  3079   0028C2  0E33               	movlw	51
  3080   0028C4  6FE5               	movwf	229,b	;volatile
  3081                           
  3082                           ;serial.c: 20:     SP4BRGH = 0;
  3083   0028C6  0E00               	movlw	0
  3084   0028C8  6FE6               	movwf	230,b	;volatile
  3085   0028CA                     
  3086                           ; BSR set to: 14
  3087                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  3088   0028CA  89E7               	bsf	231,4,b	;volatile
  3089   0028CC                     
  3090                           ; BSR set to: 14
  3091                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  3092   0028CC  8BE8               	bsf	232,5,b	;volatile
  3093   0028CE                     
  3094                           ; BSR set to: 14
  3095                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  3096   0028CE  8FE7               	bsf	231,7,b	;volatile
  3097   0028D0                     
  3098                           ; BSR set to: 14
  3099   0028D0  0012               	return		;funcret
  3100   0028D2                     __end_of_initUSART4:
  3101                           	callstack 0
  3102                           
  3103 ;; *************** function _initDCmotorsPWM *****************
  3104 ;; Defined at:
  3105 ;;		line 5 in file "dc_motor.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;		None
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      void 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3119 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3122 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3123 ;;Total ram usage:        2 bytes
  3124 ;; Hardware stack levels used: 1
  3125 ;; This function calls:
  3126 ;;		Nothing
  3127 ;; This function is called by:
  3128 ;;		_main
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           	psect	text10
  3133   002382                     __ptext10:
  3134                           	callstack 0
  3135   002382                     _initDCmotorsPWM:
  3136                           	callstack 30
  3137   002382                     
  3138                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  3139   002382  9485               	bcf	133,2,c	;volatile
  3140                           
  3141                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  3142   002384  9E83               	bcf	131,7,c	;volatile
  3143                           
  3144                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  3145   002386  9885               	bcf	133,4,c	;volatile
  3146                           
  3147                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  3148   002388  9C87               	bcf	135,6,c	;volatile
  3149                           
  3150                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  3151   00238A  947D               	bcf	125,2,c	;volatile
  3152                           
  3153                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  3154   00238C  9E7B               	bcf	123,7,c	;volatile
  3155                           
  3156                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  3157   00238E  987D               	bcf	125,4,c	;volatile
  3158                           
  3159                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  3160   002390  9C7F               	bcf	127,6,c	;volatile
  3161   002392                     
  3162                           ;dc_motor.c: 18:     RE2PPS=0x05;
  3163   002392  0E05               	movlw	5
  3164   002394  010E               	movlb	14	; () banked
  3165   002396  6F74               	movwf	116,b	;volatile
  3166                           
  3167                           ;dc_motor.c: 19:     RE4PPS=0x06;
  3168   002398  0E06               	movlw	6
  3169   00239A  6F76               	movwf	118,b	;volatile
  3170                           
  3171                           ;dc_motor.c: 20:     RC7PPS=0x07;
  3172   00239C  0E07               	movlw	7
  3173   00239E  6F69               	movwf	105,b	;volatile
  3174                           
  3175                           ;dc_motor.c: 21:     RG6PPS=0x08;
  3176   0023A0  0E08               	movlw	8
  3177   0023A2  6F88               	movwf	136,b	;volatile
  3178                           
  3179                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  3180   0023A4  50BD               	movf	189,w,c	;volatile
  3181   0023A6  0B8F               	andlw	-113
  3182   0023A8  0940               	iorlw	64
  3183   0023AA  6EBD               	movwf	189,c	;volatile
  3184                           
  3185                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  3186   0023AC  0EE0               	movlw	-32
  3187   0023AE  16BE               	andwf	190,f,c	;volatile
  3188                           
  3189                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  3190   0023B0  50BF               	movf	191,w,c	;volatile
  3191   0023B2  0BF0               	andlw	-16
  3192   0023B4  0901               	iorlw	1
  3193   0023B6  6EBF               	movwf	191,c	;volatile
  3194   0023B8                     
  3195                           ; BSR set to: 14
  3196                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  3197   0023B8  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  3198   0023BC                     
  3199                           ; BSR set to: 14
  3200                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  3201   0023BC  8EBD               	bsf	189,7,c	;volatile
  3202                           
  3203                           ;dc_motor.c: 35:     CCPR1H=0;
  3204   0023BE  0E00               	movlw	0
  3205   0023C0  6EAA               	movwf	170,c	;volatile
  3206                           
  3207                           ;dc_motor.c: 36:     CCPR2H=0;
  3208   0023C2  0E00               	movlw	0
  3209   0023C4  6EA6               	movwf	166,c	;volatile
  3210                           
  3211                           ;dc_motor.c: 37:     CCPR3H=0;
  3212   0023C6  0E00               	movlw	0
  3213   0023C8  010F               	movlb	15	; () banked
  3214   0023CA  6F25               	movwf	37,b	;volatile
  3215                           
  3216                           ;dc_motor.c: 38:     CCPR4H=0;
  3217   0023CC  0E00               	movlw	0
  3218   0023CE  6F21               	movwf	33,b	;volatile
  3219                           
  3220                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  3221   0023D0  0EFC               	movlw	-4
  3222   0023D2  16AD               	andwf	173,f,c	;volatile
  3223                           
  3224                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  3225   0023D4  0EF3               	movlw	-13
  3226   0023D6  16AD               	andwf	173,f,c	;volatile
  3227                           
  3228                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  3229   0023D8  0ECF               	movlw	-49
  3230   0023DA  16AD               	andwf	173,f,c	;volatile
  3231                           
  3232                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  3233   0023DC  0E3F               	movlw	-193
  3234   0023DE  16AD               	andwf	173,f,c	;volatile
  3235   0023E0                     
  3236                           ; BSR set to: 15
  3237                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  3238   0023E0  88AB               	bsf	171,4,c	;volatile
  3239                           
  3240                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  3241   0023E2  50AB               	movf	171,w,c	;volatile
  3242   0023E4  0BF0               	andlw	-16
  3243   0023E6  090C               	iorlw	12
  3244   0023E8  6EAB               	movwf	171,c	;volatile
  3245   0023EA                     
  3246                           ; BSR set to: 15
  3247                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  3248   0023EA  8EAB               	bsf	171,7,c	;volatile
  3249   0023EC                     
  3250                           ; BSR set to: 15
  3251                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  3252   0023EC  88A7               	bsf	167,4,c	;volatile
  3253                           
  3254                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  3255   0023EE  50A7               	movf	167,w,c	;volatile
  3256   0023F0  0BF0               	andlw	-16
  3257   0023F2  090C               	iorlw	12
  3258   0023F4  6EA7               	movwf	167,c	;volatile
  3259   0023F6                     
  3260                           ; BSR set to: 15
  3261                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  3262   0023F6  8EA7               	bsf	167,7,c	;volatile
  3263   0023F8                     
  3264                           ; BSR set to: 15
  3265                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  3266   0023F8  8926               	bsf	38,4,b	;volatile
  3267                           
  3268                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  3269   0023FA  5126               	movf	38,w,b	;volatile
  3270   0023FC  0BF0               	andlw	-16
  3271   0023FE  090C               	iorlw	12
  3272   002400  6F26               	movwf	38,b	;volatile
  3273   002402                     
  3274                           ; BSR set to: 15
  3275                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  3276   002402  8F26               	bsf	38,7,b	;volatile
  3277   002404                     
  3278                           ; BSR set to: 15
  3279                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  3280   002404  8922               	bsf	34,4,b	;volatile
  3281                           
  3282                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  3283   002406  5122               	movf	34,w,b	;volatile
  3284   002408  0BF0               	andlw	-16
  3285   00240A  090C               	iorlw	12
  3286   00240C  6F22               	movwf	34,b	;volatile
  3287   00240E                     
  3288                           ; BSR set to: 15
  3289                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  3290   00240E  8F22               	bsf	34,7,b	;volatile
  3291   002410                     
  3292                           ; BSR set to: 15
  3293   002410  0012               	return		;funcret
  3294   002412                     __end_of_initDCmotorsPWM:
  3295                           	callstack 0
  3296                           
  3297 ;; *************** function _color_click_init *****************
  3298 ;; Defined at:
  3299 ;;		line 6 in file "color.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;		None
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;		None
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  1    wreg      void 
  3306 ;; Registers used:
  3307 ;;		wreg, status,2, status,0, cstack
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3315 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3317 ;;Total ram usage:        1 bytes
  3318 ;; Hardware stack levels used: 1
  3319 ;; Hardware stack levels required when called: 3
  3320 ;; This function calls:
  3321 ;;		_I2C_2_Master_Init
  3322 ;;		_color_writetoaddr
  3323 ;; This function is called by:
  3324 ;;		_main
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           	psect	text11
  3329   00271E                     __ptext11:
  3330                           	callstack 0
  3331   00271E                     _color_click_init:
  3332                           	callstack 27
  3333   00271E                     
  3334                           ;color.c: 9:     I2C_2_Master_Init();
  3335   00271E  EC0E  F014         	call	_I2C_2_Master_Init	;wreg free
  3336   002722                     
  3337                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  3338   002722  0E01               	movlw	1
  3339   002724  6E03               	movwf	color_writetoaddr@value^0,c
  3340   002726  0E00               	movlw	0
  3341   002728  EC4A  F014         	call	_color_writetoaddr
  3342   00272C                     
  3343                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  3344   00272C  0E3F               	movlw	63
  3345   00272E  6E05               	movwf	??_color_click_init^0,c
  3346   002730  0E55               	movlw	85
  3347   002732                     u2897:
  3348   002732  2EE8               	decfsz	wreg,f,c
  3349   002734  D7FE               	bra	u2897
  3350   002736  2E05               	decfsz	??_color_click_init^0,f,c
  3351   002738  D7FC               	bra	u2897
  3352   00273A  0000               	nop	
  3353   00273C                     
  3354                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  3355   00273C  0E03               	movlw	3
  3356   00273E  6E03               	movwf	color_writetoaddr@value^0,c
  3357   002740  0E00               	movlw	0
  3358   002742  EC4A  F014         	call	_color_writetoaddr
  3359   002746                     
  3360                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  3361   002746  0ED5               	movlw	213
  3362   002748  6E03               	movwf	color_writetoaddr@value^0,c
  3363   00274A  0E01               	movlw	1
  3364   00274C  EC4A  F014         	call	_color_writetoaddr
  3365   002750  0012               	return		;funcret
  3366   002752                     __end_of_color_click_init:
  3367                           	callstack 0
  3368                           
  3369 ;; *************** function _color_writetoaddr *****************
  3370 ;; Defined at:
  3371 ;;		line 22 in file "color.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  address         1    wreg     unsigned char 
  3374 ;;  value           1    2[COMRAM] unsigned char 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  address         1    3[COMRAM] unsigned char 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      void 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3386 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3387 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3389 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3390 ;;Total ram usage:        2 bytes
  3391 ;; Hardware stack levels used: 1
  3392 ;; Hardware stack levels required when called: 2
  3393 ;; This function calls:
  3394 ;;		_I2C_2_Master_Start
  3395 ;;		_I2C_2_Master_Stop
  3396 ;;		_I2C_2_Master_Write
  3397 ;; This function is called by:
  3398 ;;		_color_click_init
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text12
  3403   002894                     __ptext12:
  3404                           	callstack 0
  3405   002894                     _color_writetoaddr:
  3406                           	callstack 27
  3407                           
  3408                           ;incstack = 0
  3409                           ;color_writetoaddr@address stored from wreg
  3410   002894  6E04               	movwf	color_writetoaddr@address^0,c
  3411   002896                     
  3412                           ;color.c: 23:     I2C_2_Master_Start();
  3413   002896  EC8D  F014         	call	_I2C_2_Master_Start	;wreg free
  3414                           
  3415                           ;color.c: 24:     I2C_2_Master_Write(0x52 | 0x00);
  3416   00289A  0E52               	movlw	82
  3417   00289C  EC82  F014         	call	_I2C_2_Master_Write
  3418                           
  3419                           ;color.c: 25:     I2C_2_Master_Write(0x80 | address);
  3420   0028A0  5004               	movf	color_writetoaddr@address^0,w,c
  3421   0028A2  0980               	iorlw	128
  3422   0028A4  EC82  F014         	call	_I2C_2_Master_Write
  3423                           
  3424                           ;color.c: 26:     I2C_2_Master_Write(value);
  3425   0028A8  5003               	movf	color_writetoaddr@value^0,w,c
  3426   0028AA  EC82  F014         	call	_I2C_2_Master_Write
  3427                           
  3428                           ;color.c: 27:     I2C_2_Master_Stop();
  3429   0028AE  EC88  F014         	call	_I2C_2_Master_Stop	;wreg free
  3430   0028B2  0012               	return		;funcret
  3431   0028B4                     __end_of_color_writetoaddr:
  3432                           	callstack 0
  3433                           
  3434 ;; *************** function _I2C_2_Master_Init *****************
  3435 ;; Defined at:
  3436 ;;		line 4 in file "i2c.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3454 ;;Total ram usage:        0 bytes
  3455 ;; Hardware stack levels used: 1
  3456 ;; This function calls:
  3457 ;;		Nothing
  3458 ;; This function is called by:
  3459 ;;		_color_click_init
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text13
  3464   00281C                     __ptext13:
  3465                           	callstack 0
  3466   00281C                     _I2C_2_Master_Init:
  3467                           	callstack 29
  3468   00281C                     
  3469                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  3470   00281C  010E               	movlb	14	; () banked
  3471   00281E  51D9               	movf	217,w,b	;volatile
  3472   002820  0BF0               	andlw	-16
  3473   002822  0908               	iorlw	8
  3474   002824  6FD9               	movwf	217,b	;volatile
  3475   002826                     
  3476                           ; BSR set to: 14
  3477                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  3478   002826  8BD9               	bsf	217,5,b	;volatile
  3479                           
  3480                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  3481   002828  0E9F               	movlw	159
  3482   00282A  6FD6               	movwf	214,b	;volatile
  3483   00282C                     
  3484                           ; BSR set to: 14
  3485                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  3486   00282C  8A84               	bsf	132,5,c	;volatile
  3487   00282E                     
  3488                           ; BSR set to: 14
  3489                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  3490   00282E  8C84               	bsf	132,6,c	;volatile
  3491   002830                     
  3492                           ; BSR set to: 14
  3493                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  3494   002830  9BA7               	bcf	167,5,b	;volatile
  3495   002832                     
  3496                           ; BSR set to: 14
  3497                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  3498   002832  9DA7               	bcf	167,6,b	;volatile
  3499                           
  3500                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  3501   002834  0E1D               	movlw	29
  3502   002836  6F1D               	movwf	29,b	;volatile
  3503                           
  3504                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  3505   002838  0E1E               	movlw	30
  3506   00283A  6F1C               	movwf	28,b	;volatile
  3507                           
  3508                           ;i2c.c: 18:   RD5PPS=0x1C;
  3509   00283C  0E1C               	movlw	28
  3510   00283E  6F6F               	movwf	111,b	;volatile
  3511                           
  3512                           ;i2c.c: 19:   RD6PPS=0x1B;
  3513   002840  0E1B               	movlw	27
  3514   002842  6F70               	movwf	112,b	;volatile
  3515   002844                     
  3516                           ; BSR set to: 14
  3517   002844  0012               	return		;funcret
  3518   002846                     __end_of_I2C_2_Master_Init:
  3519                           	callstack 0
  3520                           
  3521 ;; *************** function _calibration_routine *****************
  3522 ;; Defined at:
  3523 ;;		line 212 in file "color.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;  cCal            2   67[COMRAM] PTR struct colors
  3526 ;;		 -> colorCalibration(8), 
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;  cal_state      20   71[COMRAM] unsigned char [20]
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3538 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3539 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3540 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3541 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3542 ;;Total ram usage:       24 bytes
  3543 ;; Hardware stack levels used: 1
  3544 ;; Hardware stack levels required when called: 8
  3545 ;; This function calls:
  3546 ;;		_color_read_Blue
  3547 ;;		_color_read_Clear
  3548 ;;		_color_read_Green
  3549 ;;		_color_read_Red
  3550 ;;		_sendStringSerial4
  3551 ;;		_sprintf
  3552 ;; This function is called by:
  3553 ;;		_main
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text14
  3558   001704                     __ptext14:
  3559                           	callstack 0
  3560   001704                     _calibration_routine:
  3561                           	callstack 22
  3562   001704                     
  3563                           ;color.c: 212: void calibration_routine(colors *cCal);color.c: 213: {;color.c: 215:     
      +                          LATGbits.LATG0 = 0;
  3564   001704  907F               	bcf	127,0,c	;volatile
  3565                           
  3566                           ;color.c: 216:     LATEbits.LATE7 = 0;
  3567   001706  9E7D               	bcf	125,7,c	;volatile
  3568                           
  3569                           ;color.c: 217:     LATAbits.LATA3 = 0;
  3570   001708  9679               	bcf	121,3,c	;volatile
  3571   00170A                     
  3572                           ;color.c: 219:     char cal_state[20];;color.c: 223:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  3573   00170A  0E48               	movlw	low calibration_routine@cal_state
  3574   00170C  6E31               	movwf	sprintf@s^0,c
  3575   00170E  0E74               	movlw	low STR_5
  3576   001710  6E32               	movwf	sprintf@fmt^0,c
  3577   001712  0EF3               	movlw	low STR_6
  3578   001714  6E33               	movwf	(?_sprintf+2)^0,c
  3579   001716  5033               	movf	(?_sprintf+2)^0,w,c
  3580   001718  A4D8               	btfss	status,2,c
  3581   00171A  0E0E               	movlw	high __smallconst
  3582   00171C  6E34               	movwf	(?_sprintf+3)^0,c
  3583   00171E  ECA9  F013         	call	_sprintf	;wreg free
  3584   001722                     
  3585                           ;color.c: 224:     sendStringSerial4(cal_state);
  3586   001722  0E48               	movlw	low calibration_routine@cal_state
  3587   001724  6E02               	movwf	sendStringSerial4@string^0,c
  3588   001726  ECDD  F013         	call	_sendStringSerial4	;wreg free
  3589   00172A                     l93:
  3590                           
  3591                           ;color.c: 227:     while(PORTFbits.RF2 == 1){
  3592   00172A  B48E               	btfsc	142,2,c	;volatile
  3593   00172C  EF9A  F00B         	goto	u2781
  3594   001730  EF9C  F00B         	goto	u2780
  3595   001734                     u2781:
  3596   001734  EF95  F00B         	goto	l93
  3597   001738                     u2780:
  3598   001738                     
  3599                           ;color.c: 231:     LATGbits.LATG0 = 1;
  3600   001738  807F               	bsf	127,0,c	;volatile
  3601   00173A                     
  3602                           ;color.c: 232:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3603   00173A  0E29               	movlw	41
  3604   00173C  6E47               	movwf	(??_calibration_routine+1)^0,c
  3605   00173E  0E96               	movlw	150
  3606   001740  6E46               	movwf	??_calibration_routine^0,c
  3607   001742  0E7F               	movlw	127
  3608   001744                     u2907:
  3609   001744  2EE8               	decfsz	wreg,f,c
  3610   001746  D7FE               	bra	u2907
  3611   001748  2E46               	decfsz	??_calibration_routine^0,f,c
  3612   00174A  D7FC               	bra	u2907
  3613   00174C  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  3614   00174E  D7FA               	bra	u2907
  3615   001750  0000               	nop	
  3616   001752                     
  3617                           ;color.c: 233:     (cCal->red) = color_read_Red();
  3618   001752  EC72  F012         	call	_color_read_Red	;wreg free
  3619   001756  C044  FFD9         	movff	calibration_routine@cCal,fsr2l
  3620   00175A  C045  FFDA         	movff	calibration_routine@cCal+1,fsr2h
  3621   00175E  C005  FFDE         	movff	?_color_read_Red,postinc2
  3622   001762  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  3623   001766                     
  3624                           ;color.c: 234:     LATGbits.LATG0 = 0;
  3625   001766  907F               	bcf	127,0,c	;volatile
  3626   001768                     
  3627                           ;color.c: 237:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  3628   001768  0E48               	movlw	low calibration_routine@cal_state
  3629   00176A  6E31               	movwf	sprintf@s^0,c
  3630   00176C  0E23               	movlw	low STR_7
  3631   00176E  6E32               	movwf	sprintf@fmt^0,c
  3632   001770  0EF3               	movlw	low STR_6
  3633   001772  6E33               	movwf	(?_sprintf+2)^0,c
  3634   001774  5033               	movf	(?_sprintf+2)^0,w,c
  3635   001776  A4D8               	btfss	status,2,c
  3636   001778  0E0E               	movlw	high __smallconst
  3637   00177A  6E34               	movwf	(?_sprintf+3)^0,c
  3638   00177C  ECA9  F013         	call	_sprintf	;wreg free
  3639   001780                     
  3640                           ;color.c: 238:     sendStringSerial4(&cal_state);
  3641   001780  0E48               	movlw	low calibration_routine@cal_state
  3642   001782  6E02               	movwf	sendStringSerial4@string^0,c
  3643   001784  ECDD  F013         	call	_sendStringSerial4	;wreg free
  3644   001788                     l96:
  3645                           
  3646                           ;color.c: 240:     while(PORTFbits.RF2 == 1){
  3647   001788  B48E               	btfsc	142,2,c	;volatile
  3648   00178A  EFC9  F00B         	goto	u2791
  3649   00178E  EFCB  F00B         	goto	u2790
  3650   001792                     u2791:
  3651   001792  EFC4  F00B         	goto	l96
  3652   001796                     u2790:
  3653   001796                     
  3654                           ;color.c: 244:     LATEbits.LATE7 = 1;
  3655   001796  8E7D               	bsf	125,7,c	;volatile
  3656   001798                     
  3657                           ;color.c: 245:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3658   001798  0E29               	movlw	41
  3659   00179A  6E47               	movwf	(??_calibration_routine+1)^0,c
  3660   00179C  0E96               	movlw	150
  3661   00179E  6E46               	movwf	??_calibration_routine^0,c
  3662   0017A0  0E7F               	movlw	127
  3663   0017A2                     u2917:
  3664   0017A2  2EE8               	decfsz	wreg,f,c
  3665   0017A4  D7FE               	bra	u2917
  3666   0017A6  2E46               	decfsz	??_calibration_routine^0,f,c
  3667   0017A8  D7FC               	bra	u2917
  3668   0017AA  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  3669   0017AC  D7FA               	bra	u2917
  3670   0017AE  0000               	nop	
  3671   0017B0                     
  3672                           ;color.c: 246:     (cCal->green) = color_read_Green();
  3673   0017B0  EC9A  F012         	call	_color_read_Green	;wreg free
  3674   0017B4  EE20 F002          	lfsr	2,2
  3675   0017B8  5044               	movf	calibration_routine@cCal^0,w,c
  3676   0017BA  26D9               	addwf	fsr2l,f,c
  3677   0017BC  5045               	movf	(calibration_routine@cCal+1)^0,w,c
  3678   0017BE  22DA               	addwfc	fsr2h,f,c
  3679   0017C0  C005  FFDE         	movff	?_color_read_Green,postinc2
  3680   0017C4  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  3681   0017C8                     
  3682                           ;color.c: 247:     LATEbits.LATE7 = 0;
  3683   0017C8  9E7D               	bcf	125,7,c	;volatile
  3684   0017CA                     
  3685                           ;color.c: 250:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  3686   0017CA  0E48               	movlw	low calibration_routine@cal_state
  3687   0017CC  6E31               	movwf	sprintf@s^0,c
  3688   0017CE  0E40               	movlw	low STR_9
  3689   0017D0  6E32               	movwf	sprintf@fmt^0,c
  3690   0017D2  0EF3               	movlw	low STR_6
  3691   0017D4  6E33               	movwf	(?_sprintf+2)^0,c
  3692   0017D6  5033               	movf	(?_sprintf+2)^0,w,c
  3693   0017D8  A4D8               	btfss	status,2,c
  3694   0017DA  0E0E               	movlw	high __smallconst
  3695   0017DC  6E34               	movwf	(?_sprintf+3)^0,c
  3696   0017DE  ECA9  F013         	call	_sprintf	;wreg free
  3697   0017E2                     
  3698                           ;color.c: 251:     sendStringSerial4(&cal_state);
  3699   0017E2  0E48               	movlw	low calibration_routine@cal_state
  3700   0017E4  6E02               	movwf	sendStringSerial4@string^0,c
  3701   0017E6  ECDD  F013         	call	_sendStringSerial4	;wreg free
  3702   0017EA                     l99:
  3703                           
  3704                           ;color.c: 253:     while(PORTFbits.RF2 == 1){
  3705   0017EA  B48E               	btfsc	142,2,c	;volatile
  3706   0017EC  EFFA  F00B         	goto	u2801
  3707   0017F0  EFFC  F00B         	goto	u2800
  3708   0017F4                     u2801:
  3709   0017F4  EFF5  F00B         	goto	l99
  3710   0017F8                     u2800:
  3711   0017F8                     
  3712                           ;color.c: 257:     LATAbits.LATA3 = 1;
  3713   0017F8  8679               	bsf	121,3,c	;volatile
  3714   0017FA                     
  3715                           ;color.c: 258:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3716   0017FA  0E29               	movlw	41
  3717   0017FC  6E47               	movwf	(??_calibration_routine+1)^0,c
  3718   0017FE  0E96               	movlw	150
  3719   001800  6E46               	movwf	??_calibration_routine^0,c
  3720   001802  0E7F               	movlw	127
  3721   001804                     u2927:
  3722   001804  2EE8               	decfsz	wreg,f,c
  3723   001806  D7FE               	bra	u2927
  3724   001808  2E46               	decfsz	??_calibration_routine^0,f,c
  3725   00180A  D7FC               	bra	u2927
  3726   00180C  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  3727   00180E  D7FA               	bra	u2927
  3728   001810  0000               	nop	
  3729   001812                     
  3730                           ;color.c: 259:     (cCal->blue) = color_read_Blue();
  3731   001812  ECEA  F012         	call	_color_read_Blue	;wreg free
  3732   001816  EE20 F004          	lfsr	2,4
  3733   00181A  5044               	movf	calibration_routine@cCal^0,w,c
  3734   00181C  26D9               	addwf	fsr2l,f,c
  3735   00181E  5045               	movf	(calibration_routine@cCal+1)^0,w,c
  3736   001820  22DA               	addwfc	fsr2h,f,c
  3737   001822  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3738   001826  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3739   00182A                     
  3740                           ;color.c: 260:     LATAbits.LATA3 = 0;
  3741   00182A  9679               	bcf	121,3,c	;volatile
  3742   00182C                     
  3743                           ;color.c: 263:     sprintf(cal_state,"Calibration state = ambient light", ".");
  3744   00182C  0E48               	movlw	low calibration_routine@cal_state
  3745   00182E  6E31               	movwf	sprintf@s^0,c
  3746   001830  0E01               	movlw	low STR_11
  3747   001832  6E32               	movwf	sprintf@fmt^0,c
  3748   001834  0EF3               	movlw	low STR_6
  3749   001836  6E33               	movwf	(?_sprintf+2)^0,c
  3750   001838  5033               	movf	(?_sprintf+2)^0,w,c
  3751   00183A  A4D8               	btfss	status,2,c
  3752   00183C  0E0E               	movlw	high __smallconst
  3753   00183E  6E34               	movwf	(?_sprintf+3)^0,c
  3754   001840  ECA9  F013         	call	_sprintf	;wreg free
  3755   001844                     
  3756                           ;color.c: 264:     sendStringSerial4(&cal_state);
  3757   001844  0E48               	movlw	low calibration_routine@cal_state
  3758   001846  6E02               	movwf	sendStringSerial4@string^0,c
  3759   001848  ECDD  F013         	call	_sendStringSerial4	;wreg free
  3760   00184C                     l102:
  3761                           
  3762                           ;color.c: 266:     while(PORTFbits.RF2 == 1){
  3763   00184C  B48E               	btfsc	142,2,c	;volatile
  3764   00184E  EF2B  F00C         	goto	u2811
  3765   001852  EF2D  F00C         	goto	u2810
  3766   001856                     u2811:
  3767   001856  EF26  F00C         	goto	l102
  3768   00185A                     u2810:
  3769   00185A                     
  3770                           ;color.c: 269:     LATGbits.LATG0 = 1;
  3771   00185A  807F               	bsf	127,0,c	;volatile
  3772                           
  3773                           ;color.c: 270:     LATEbits.LATE7 = 1;
  3774   00185C  8E7D               	bsf	125,7,c	;volatile
  3775                           
  3776                           ;color.c: 271:     LATAbits.LATA3 = 1;
  3777   00185E  8679               	bsf	121,3,c	;volatile
  3778   001860                     
  3779                           ;color.c: 272:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3780   001860  0E29               	movlw	41
  3781   001862  6E47               	movwf	(??_calibration_routine+1)^0,c
  3782   001864  0E96               	movlw	150
  3783   001866  6E46               	movwf	??_calibration_routine^0,c
  3784   001868  0E7F               	movlw	127
  3785   00186A                     u2937:
  3786   00186A  2EE8               	decfsz	wreg,f,c
  3787   00186C  D7FE               	bra	u2937
  3788   00186E  2E46               	decfsz	??_calibration_routine^0,f,c
  3789   001870  D7FC               	bra	u2937
  3790   001872  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  3791   001874  D7FA               	bra	u2937
  3792   001876  0000               	nop	
  3793   001878                     
  3794                           ;color.c: 273:     (cCal->clear) = color_read_Clear();
  3795   001878  ECC2  F012         	call	_color_read_Clear	;wreg free
  3796   00187C  EE20 F006          	lfsr	2,6
  3797   001880  5044               	movf	calibration_routine@cCal^0,w,c
  3798   001882  26D9               	addwf	fsr2l,f,c
  3799   001884  5045               	movf	(calibration_routine@cCal+1)^0,w,c
  3800   001886  22DA               	addwfc	fsr2h,f,c
  3801   001888  C005  FFDE         	movff	?_color_read_Clear,postinc2
  3802   00188C  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  3803   001890                     
  3804                           ;color.c: 274:     LATGbits.LATG0 = 0;
  3805   001890  907F               	bcf	127,0,c	;volatile
  3806   001892                     
  3807                           ;color.c: 275:     LATEbits.LATE7 = 0;
  3808   001892  9E7D               	bcf	125,7,c	;volatile
  3809   001894                     
  3810                           ;color.c: 276:     LATAbits.LATA3 = 0;
  3811   001894  9679               	bcf	121,3,c	;volatile
  3812   001896                     
  3813                           ;color.c: 279:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  3814   001896  0E48               	movlw	low calibration_routine@cal_state
  3815   001898  6E31               	movwf	sprintf@s^0,c
  3816   00189A  0E5B               	movlw	low STR_13
  3817   00189C  6E32               	movwf	sprintf@fmt^0,c
  3818   00189E  0EF3               	movlw	low STR_6
  3819   0018A0  6E33               	movwf	(?_sprintf+2)^0,c
  3820   0018A2  5033               	movf	(?_sprintf+2)^0,w,c
  3821   0018A4  A4D8               	btfss	status,2,c
  3822   0018A6  0E0E               	movlw	high __smallconst
  3823   0018A8  6E34               	movwf	(?_sprintf+3)^0,c
  3824   0018AA  ECA9  F013         	call	_sprintf	;wreg free
  3825   0018AE                     
  3826                           ;color.c: 280:     sendStringSerial4(&cal_state);
  3827   0018AE  0E48               	movlw	low calibration_routine@cal_state
  3828   0018B0  6E02               	movwf	sendStringSerial4@string^0,c
  3829   0018B2  ECDD  F013         	call	_sendStringSerial4	;wreg free
  3830   0018B6  0012               	return		;funcret
  3831   0018B8                     __end_of_calibration_routine:
  3832                           	callstack 0
  3833                           
  3834 ;; *************** function _sprintf *****************
  3835 ;; Defined at:
  3836 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  s               1   48[COMRAM] PTR unsigned char 
  3839 ;;		 -> send2USART@hue_char(50), send2USART@buf(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  3840 ;;		 -> test@led_state(50), 
  3841 ;;  fmt             1   49[COMRAM] PTR const unsigned char 
  3842 ;;		 -> STR_16(12), STR_15(21), STR_13(25), STR_11(34), 
  3843 ;;		 -> STR_9(27), STR_7(29), STR_5(24), STR_4(17), 
  3844 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  f              12   55[COMRAM] struct _IO_FILE
  3847 ;;  ret             2    0        int 
  3848 ;;  ap              1   54[COMRAM] PTR void [1]
  3849 ;;		 -> ?_sprintf(2), 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  2   48[COMRAM] int 
  3852 ;; Registers used:
  3853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3859 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3860 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3862 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3863 ;;Total ram usage:       19 bytes
  3864 ;; Hardware stack levels used: 1
  3865 ;; Hardware stack levels required when called: 7
  3866 ;; This function calls:
  3867 ;;		_vfprintf
  3868 ;; This function is called by:
  3869 ;;		_test
  3870 ;;		_calibration_routine
  3871 ;;		_ADC2String
  3872 ;;		_send2USART
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           	psect	text15
  3877   002752                     __ptext15:
  3878                           	callstack 0
  3879   002752                     _sprintf:
  3880                           	callstack 22
  3881   002752  0E33               	movlw	low (?_sprintf+2)
  3882   002754  6E37               	movwf	sprintf@ap^0,c
  3883   002756  C031  F038         	movff	sprintf@s,sprintf@f
  3884   00275A  0E00               	movlw	0
  3885   00275C  6E3C               	movwf	(sprintf@f+4)^0,c
  3886   00275E  0E00               	movlw	0
  3887   002760  6E3B               	movwf	(sprintf@f+3)^0,c
  3888   002762  0E00               	movlw	0
  3889   002764  6E43               	movwf	(sprintf@f+11)^0,c
  3890   002766  0E00               	movlw	0
  3891   002768  6E42               	movwf	(sprintf@f+10)^0,c
  3892   00276A  0E38               	movlw	low sprintf@f
  3893   00276C  6E2D               	movwf	vfprintf@fp^0,c
  3894   00276E  C032  F02E         	movff	sprintf@fmt,vfprintf@fmt
  3895   002772  0E37               	movlw	low sprintf@ap
  3896   002774  6E2F               	movwf	vfprintf@ap^0,c
  3897   002776  EC12  F013         	call	_vfprintf	;wreg free
  3898   00277A  5031               	movf	sprintf@s^0,w,c
  3899   00277C  243B               	addwf	(sprintf@f+3)^0,w,c
  3900   00277E  6ED9               	movwf	fsr2l,c
  3901   002780  6ADA               	clrf	fsr2h,c
  3902   002782  6ADF               	clrf	indf2,c
  3903   002784  0012               	return		;funcret
  3904   002786                     __end_of_sprintf:
  3905                           	callstack 0
  3906                           
  3907 ;; *************** function _vfprintf *****************
  3908 ;; Defined at:
  3909 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  fp              1   44[COMRAM] PTR struct _IO_FILE
  3912 ;;		 -> sprintf@f(12), 
  3913 ;;  fmt             1   45[COMRAM] PTR const unsigned char 
  3914 ;;		 -> STR_16(12), STR_15(21), STR_13(25), STR_11(34), 
  3915 ;;		 -> STR_9(27), STR_7(29), STR_5(24), STR_4(17), 
  3916 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  3917 ;;  ap              1   46[COMRAM] PTR PTR void 
  3918 ;;		 -> sprintf@ap(1), 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  cfmt            1   47[COMRAM] PTR unsigned char 
  3921 ;;		 -> STR_16(12), STR_15(21), STR_13(25), STR_11(34), 
  3922 ;;		 -> STR_9(27), STR_7(29), STR_5(24), STR_4(17), 
  3923 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  2   44[COMRAM] int 
  3926 ;; Registers used:
  3927 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3933 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3936 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3937 ;;Total ram usage:        4 bytes
  3938 ;; Hardware stack levels used: 1
  3939 ;; Hardware stack levels required when called: 6
  3940 ;; This function calls:
  3941 ;;		_vfpfcnvrt
  3942 ;; This function is called by:
  3943 ;;		_sprintf
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text16
  3948   002624                     __ptext16:
  3949                           	callstack 0
  3950   002624                     _vfprintf:
  3951                           	callstack 22
  3952   002624                     
  3953                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  3954   002624  C02E  F030         	movff	vfprintf@fmt,vfprintf@cfmt
  3955                           
  3956                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3957   002628  EF1E  F013         	goto	l3413
  3958   00262C                     l3411:
  3959                           
  3960                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  3961   00262C  C02D  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  3962   002630  0E30               	movlw	low vfprintf@cfmt
  3963   002632  6E23               	movwf	vfpfcnvrt@fmt^0,c
  3964   002634  C02F  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  3965   002638  EC5C  F00C         	call	_vfpfcnvrt	;wreg free
  3966   00263C                     l3413:
  3967                           
  3968                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3969   00263C  C030  FFF6         	movff	vfprintf@cfmt,tblptrl
  3970   002640                     	if	1	;There is more than 1 active tblptr byte
  3971   002640  0E0E               	movlw	high __smallconst
  3972   002642  6EF7               	movwf	tblptrh,c
  3973   002644                     	endif
  3974   002644                     	if	0	;tblptru may be non-zero
  3975   002644                     	endif
  3976   002644                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3977   002644  0E00               	movlw	low (__smallconst shr (0+16))
  3978   002646  6EF8               	movwf	tblptru,c
  3979   002648                     	endif
  3980   002648  0008               	tblrd		*
  3981   00264A  50F5               	movf	tablat,w,c
  3982   00264C  0900               	iorlw	0
  3983   00264E  A4D8               	btfss	status,2,c
  3984   002650  EF2C  F013         	goto	u2381
  3985   002654  EF2E  F013         	goto	u2380
  3986   002658                     u2381:
  3987   002658  EF16  F013         	goto	l3411
  3988   00265C                     u2380:
  3989   00265C                     
  3990                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  3991   00265C  0E00               	movlw	0
  3992   00265E  6E2E               	movwf	(?_vfprintf+1)^0,c
  3993   002660  0E00               	movlw	0
  3994   002662  6E2D               	movwf	?_vfprintf^0,c
  3995   002664  0012               	return		;funcret
  3996   002666                     __end_of_vfprintf:
  3997                           	callstack 0
  3998                           
  3999 ;; *************** function _vfpfcnvrt *****************
  4000 ;; Defined at:
  4001 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  4004 ;;		 -> sprintf@f(12), 
  4005 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  4006 ;;		 -> vfprintf@cfmt(1), 
  4007 ;;  ap              1   35[COMRAM] PTR PTR void 
  4008 ;;		 -> sprintf@ap(1), 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  convarg         4   38[COMRAM] struct .
  4011 ;;  cp              1   43[COMRAM] PTR unsigned char 
  4012 ;;		 -> STR_16(12), STR_15(21), STR_13(25), STR_11(34), 
  4013 ;;		 -> STR_9(27), STR_7(29), STR_5(24), STR_4(17), 
  4014 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  4015 ;;  done            1   42[COMRAM] _Bool 
  4016 ;;  c               1    0        unsigned char 
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      void 
  4019 ;; Registers used:
  4020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4026 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4027 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4028 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4029 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4030 ;;Total ram usage:       11 bytes
  4031 ;; Hardware stack levels used: 1
  4032 ;; Hardware stack levels required when called: 5
  4033 ;; This function calls:
  4034 ;;		_dtoa
  4035 ;;		_fputc
  4036 ;;		_read_prec_or_width
  4037 ;; This function is called by:
  4038 ;;		_vfprintf
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           	psect	text17
  4043   0018B8                     __ptext17:
  4044                           	callstack 0
  4045   0018B8                     _vfpfcnvrt:
  4046                           	callstack 22
  4047   0018B8                     
  4048                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  4049   0018B8  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4050   0018BA  6ED9               	movwf	fsr2l,c
  4051   0018BC  6ADA               	clrf	fsr2h,c
  4052   0018BE  CFDF FFF6          	movff	indf2,tblptrl
  4053   0018C2                     	if	1	;There is more than 1 active tblptr byte
  4054   0018C2  0E0E               	movlw	high __smallconst
  4055   0018C4  6EF7               	movwf	tblptrh,c
  4056   0018C6                     	endif
  4057   0018C6                     	if	0	;tblptru may be non-zero
  4058   0018C6                     	endif
  4059   0018C6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4060   0018C6  0E00               	movlw	low (__smallconst shr (0+16))
  4061   0018C8  6EF8               	movwf	tblptru,c
  4062   0018CA                     	endif
  4063   0018CA  0008               	tblrd		*
  4064   0018CC  50F5               	movf	tablat,w,c
  4065   0018CE  0A25               	xorlw	37
  4066   0018D0  A4D8               	btfss	status,2,c
  4067   0018D2  EF6D  F00C         	goto	u2311
  4068   0018D6  EF6F  F00C         	goto	u2310
  4069   0018DA                     u2311:
  4070   0018DA  EF0E  F00D         	goto	l3391
  4071   0018DE                     u2310:
  4072   0018DE                     
  4073                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4074   0018DE  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4075   0018E0  6ED9               	movwf	fsr2l,c
  4076   0018E2  6ADA               	clrf	fsr2h,c
  4077   0018E4  2ADF               	incf	indf2,f,c
  4078   0018E6                     
  4079                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4080   0018E6  0E00               	movlw	0
  4081   0018E8  0101               	movlb	1	; () banked
  4082   0018EA  6F65               	movwf	(_width+1)& (0+255),b
  4083   0018EC  0E00               	movlw	0
  4084   0018EE  6F64               	movwf	_width& (0+255),b
  4085   0018F0  C164  F0FC         	movff	_width,_flags
  4086   0018F4                     
  4087                           ; BSR set to: 1
  4088                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4089   0018F4  6966               	setf	_prec& (0+255),b
  4090   0018F6  6967               	setf	(_prec+1)& (0+255),b
  4091   0018F8                     
  4092                           ; BSR set to: 1
  4093                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  4094   0018F8  0E00               	movlw	0
  4095   0018FA  6E2B               	movwf	vfpfcnvrt@done^0,c
  4096                           
  4097                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4098   0018FC  EFA7  F00C         	goto	l3365
  4099   001900                     l3355:
  4100                           
  4101                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  4102   001900  0100               	movlb	0	; () banked
  4103   001902  83FC               	bsf	_flags& (0+255),1,b
  4104   001904                     
  4105                           ; BSR set to: 0
  4106                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  4107   001904  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4108   001906  6ED9               	movwf	fsr2l,c
  4109   001908  6ADA               	clrf	fsr2h,c
  4110   00190A  2ADF               	incf	indf2,f,c
  4111                           
  4112                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  4113   00190C  EFA7  F00C         	goto	l3365
  4114   001910                     l3359:
  4115                           
  4116                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  4117   001910  0E01               	movlw	1
  4118   001912  6E2B               	movwf	vfpfcnvrt@done^0,c
  4119                           
  4120                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  4121   001914  EFA7  F00C         	goto	l3365
  4122   001918                     l3363:
  4123   001918  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4124   00191A  6ED9               	movwf	fsr2l,c
  4125   00191C  6ADA               	clrf	fsr2h,c
  4126   00191E  CFDF FFF6          	movff	indf2,tblptrl
  4127   001922                     	if	1	;There is more than 1 active tblptr byte
  4128   001922  0E0E               	movlw	high __smallconst
  4129   001924  6EF7               	movwf	tblptrh,c
  4130   001926                     	endif
  4131   001926                     	if	0	;tblptru may be non-zero
  4132   001926                     	endif
  4133   001926                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4134   001926  0E00               	movlw	low (__smallconst shr (0+16))
  4135   001928  6EF8               	movwf	tblptru,c
  4136   00192A                     	endif
  4137   00192A  0008               	tblrd		*
  4138   00192C  50F5               	movf	tablat,w,c
  4139   00192E  6E25               	movwf	??_vfpfcnvrt^0,c
  4140   001930  6A26               	clrf	(??_vfpfcnvrt+1)^0,c
  4141                           
  4142                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4143                           ; Switch size 1, requested type "simple"
  4144                           ; Number of cases is 1, Range of values is 0 to 0
  4145                           ; switch strategies available:
  4146                           ; Name         Instructions Cycles
  4147                           ; simple_byte            4     3 (average)
  4148                           ;	Chosen strategy is simple_byte
  4149   001932  5026               	movf	(??_vfpfcnvrt+1)^0,w,c
  4150   001934  0A00               	xorlw	0	; case 0
  4151   001936  B4D8               	btfsc	status,2,c
  4152   001938  EFA0  F00C         	goto	l4053
  4153   00193C  EF88  F00C         	goto	l3359
  4154   001940                     l4053:
  4155                           
  4156                           ; Switch size 1, requested type "simple"
  4157                           ; Number of cases is 1, Range of values is 48 to 48
  4158                           ; switch strategies available:
  4159                           ; Name         Instructions Cycles
  4160                           ; simple_byte            4     3 (average)
  4161                           ;	Chosen strategy is simple_byte
  4162   001940  5025               	movf	??_vfpfcnvrt^0,w,c
  4163   001942  0A30               	xorlw	48	; case 48
  4164   001944  B4D8               	btfsc	status,2,c
  4165   001946  EF80  F00C         	goto	l3355
  4166   00194A  EF88  F00C         	goto	l3359
  4167   00194E                     l3365:
  4168                           
  4169                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4170   00194E  502B               	movf	vfpfcnvrt@done^0,w,c
  4171   001950  B4D8               	btfsc	status,2,c
  4172   001952  EFAD  F00C         	goto	u2321
  4173   001956  EFAF  F00C         	goto	u2320
  4174   00195A                     u2321:
  4175   00195A  EF8C  F00C         	goto	l3363
  4176   00195E                     u2320:
  4177   00195E                     
  4178                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  4179   00195E  C023  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  4180   001962  C024  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  4181   001966  EC2A  F010         	call	_read_prec_or_width	;wreg free
  4182   00196A  C007  F164         	movff	?_read_prec_or_width,_width
  4183   00196E  C008  F165         	movff	?_read_prec_or_width+1,_width+1
  4184   001972                     
  4185                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  4186   001972  0101               	movlb	1	; () banked
  4187   001974  BF65               	btfsc	(_width+1)& (0+255),7,b
  4188   001976  EFC1  F00C         	goto	u2330
  4189   00197A  EFBF  F00C         	goto	u2331
  4190   00197E                     u2331:
  4191   00197E  EFC8  F00C         	goto	l3373
  4192   001982                     u2330:
  4193   001982                     
  4194                           ; BSR set to: 1
  4195                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  4196   001982  0100               	movlb	0	; () banked
  4197   001984  81FC               	bsf	_flags& (0+255),0,b
  4198                           
  4199                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  4200   001986  0101               	movlb	1	; () banked
  4201   001988  6D64               	negf	_width& (0+255),b
  4202   00198A  1F65               	comf	(_width+1)& (0+255),f,b
  4203   00198C  B0D8               	btfsc	status,0,c
  4204   00198E  2B65               	incf	(_width+1)& (0+255),f,b
  4205   001990                     l3373:
  4206                           
  4207                           ; BSR set to: 1
  4208                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  4209   001990  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4210   001992  6ED9               	movwf	fsr2l,c
  4211   001994  6ADA               	clrf	fsr2h,c
  4212   001996  50DF               	movf	indf2,w,c
  4213   001998  6E2C               	movwf	vfpfcnvrt@cp^0,c
  4214   00199A                     
  4215                           ; BSR set to: 1
  4216                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4217   00199A  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4218   00199E                     	if	1	;There is more than 1 active tblptr byte
  4219   00199E  0E0E               	movlw	high __smallconst
  4220   0019A0  6EF7               	movwf	tblptrh,c
  4221   0019A2                     	endif
  4222   0019A2                     	if	0	;tblptru may be non-zero
  4223   0019A2                     	endif
  4224   0019A2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4225   0019A2  0E00               	movlw	low (__smallconst shr (0+16))
  4226   0019A4  6EF8               	movwf	tblptru,c
  4227   0019A6                     	endif
  4228   0019A6  0008               	tblrd		*
  4229   0019A8  50F5               	movf	tablat,w,c
  4230   0019AA  0A64               	xorlw	100
  4231   0019AC  B4D8               	btfsc	status,2,c
  4232   0019AE  EFDB  F00C         	goto	u2341
  4233   0019B2  EFDD  F00C         	goto	u2340
  4234   0019B6                     u2341:
  4235   0019B6  EFED  F00C         	goto	l3379
  4236   0019BA                     u2340:
  4237   0019BA                     
  4238                           ; BSR set to: 1
  4239   0019BA  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4240   0019BE                     	if	1	;There is more than 1 active tblptr byte
  4241   0019BE  0E0E               	movlw	high __smallconst
  4242   0019C0  6EF7               	movwf	tblptrh,c
  4243   0019C2                     	endif
  4244   0019C2                     	if	0	;tblptru may be non-zero
  4245   0019C2                     	endif
  4246   0019C2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4247   0019C2  0E00               	movlw	low (__smallconst shr (0+16))
  4248   0019C4  6EF8               	movwf	tblptru,c
  4249   0019C6                     	endif
  4250   0019C6  0008               	tblrd		*
  4251   0019C8  50F5               	movf	tablat,w,c
  4252   0019CA  0A69               	xorlw	105
  4253   0019CC  A4D8               	btfss	status,2,c
  4254   0019CE  EFEB  F00C         	goto	u2351
  4255   0019D2  EFED  F00C         	goto	u2350
  4256   0019D6                     u2351:
  4257   0019D6  EF08  F00D         	goto	l3387
  4258   0019DA                     u2350:
  4259   0019DA                     l3379:
  4260                           
  4261                           ; BSR set to: 1
  4262                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4263   0019DA  5024               	movf	vfpfcnvrt@ap^0,w,c
  4264   0019DC  6ED9               	movwf	fsr2l,c
  4265   0019DE  6ADA               	clrf	fsr2h,c
  4266   0019E0  0E02               	movlw	2
  4267   0019E2  26DF               	addwf	indf2,f,c
  4268   0019E4  5CDF               	subwf	indf2,w,c
  4269   0019E6  6ED9               	movwf	fsr2l,c
  4270   0019E8  6ADA               	clrf	fsr2h,c
  4271   0019EA  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  4272   0019EE  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  4273   0019F2                     
  4274                           ; BSR set to: 1
  4275                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  4276   0019F2  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4277   0019F4  6ED9               	movwf	fsr2l,c
  4278   0019F6  6ADA               	clrf	fsr2h,c
  4279   0019F8  282C               	incf	vfpfcnvrt@cp^0,w,c
  4280   0019FA  6EDF               	movwf	indf2,c
  4281   0019FC                     
  4282                           ; BSR set to: 1
  4283                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  4284   0019FC  C022  F017         	movff	vfpfcnvrt@fp,dtoa@fp
  4285   001A00  C027  F018         	movff	vfpfcnvrt@convarg,dtoa@d
  4286   001A04  C028  F019         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4287   001A08  EC22  F00D         	call	_dtoa	;wreg free
  4288   001A0C  EF21  F00D         	goto	l1213
  4289   001A10                     l3387:
  4290                           
  4291                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  4292   001A10  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4293   001A12  6ED9               	movwf	fsr2l,c
  4294   001A14  6ADA               	clrf	fsr2h,c
  4295   001A16  2ADF               	incf	indf2,f,c
  4296   001A18  EF21  F00D         	goto	l1213
  4297   001A1C                     l3391:
  4298                           
  4299                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  4300   001A1C  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4301   001A1E  6ED9               	movwf	fsr2l,c
  4302   001A20  6ADA               	clrf	fsr2h,c
  4303   001A22  CFDF FFF6          	movff	indf2,tblptrl
  4304   001A26                     	if	1	;There is more than 1 active tblptr byte
  4305   001A26  0E0E               	movlw	high __smallconst
  4306   001A28  6EF7               	movwf	tblptrh,c
  4307   001A2A                     	endif
  4308   001A2A                     	if	0	;tblptru may be non-zero
  4309   001A2A                     	endif
  4310   001A2A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4311   001A2A  0E00               	movlw	low (__smallconst shr (0+16))
  4312   001A2C  6EF8               	movwf	tblptru,c
  4313   001A2E                     	endif
  4314   001A2E  0008               	tblrd		*
  4315   001A30  50F5               	movf	tablat,w,c
  4316   001A32  6E01               	movwf	fputc@c^0,c
  4317   001A34  6A02               	clrf	(fputc@c+1)^0,c
  4318   001A36  C022  F003         	movff	vfpfcnvrt@fp,fputc@fp
  4319   001A3A  EC81  F010         	call	_fputc	;wreg free
  4320   001A3E  EF08  F00D         	goto	l3387
  4321   001A42                     l1213:
  4322   001A42  0012               	return		;funcret
  4323   001A44                     __end_of_vfpfcnvrt:
  4324                           	callstack 0
  4325                           
  4326 ;; *************** function _read_prec_or_width *****************
  4327 ;; Defined at:
  4328 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  4331 ;;		 -> vfprintf@cfmt(1), 
  4332 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  4333 ;;		 -> sprintf@ap(1), 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  c               1    8[COMRAM] unsigned char 
  4336 ;;  n               2    9[COMRAM] int 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  2    6[COMRAM] int 
  4339 ;; Registers used:
  4340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4347 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4349 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4350 ;;Total ram usage:        5 bytes
  4351 ;; Hardware stack levels used: 1
  4352 ;; Hardware stack levels required when called: 1
  4353 ;; This function calls:
  4354 ;;		___wmul
  4355 ;; This function is called by:
  4356 ;;		_vfpfcnvrt
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text18
  4361   002054                     __ptext18:
  4362                           	callstack 0
  4363   002054                     _read_prec_or_width:
  4364                           	callstack 25
  4365   002054                     
  4366                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  4367   002054  0E00               	movlw	0
  4368   002056  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  4369   002058  0E00               	movlw	0
  4370   00205A  6E0A               	movwf	read_prec_or_width@n^0,c
  4371   00205C                     
  4372                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  4373   00205C  5007               	movf	read_prec_or_width@fmt^0,w,c
  4374   00205E  6ED9               	movwf	fsr2l,c
  4375   002060  6ADA               	clrf	fsr2h,c
  4376   002062  CFDF FFF6          	movff	indf2,tblptrl
  4377   002066                     	if	1	;There is more than 1 active tblptr byte
  4378   002066  0E0E               	movlw	high __smallconst
  4379   002068  6EF7               	movwf	tblptrh,c
  4380   00206A                     	endif
  4381   00206A                     	if	0	;tblptru may be non-zero
  4382   00206A                     	endif
  4383   00206A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4384   00206A  0E00               	movlw	low (__smallconst shr (0+16))
  4385   00206C  6EF8               	movwf	tblptru,c
  4386   00206E                     	endif
  4387   00206E  0008               	tblrd		*
  4388   002070  50F5               	movf	tablat,w,c
  4389   002072  0A2A               	xorlw	42
  4390   002074  A4D8               	btfss	status,2,c
  4391   002076  EF3F  F010         	goto	u2291
  4392   00207A  EF41  F010         	goto	u2290
  4393   00207E                     u2291:
  4394   00207E  EF67  F010         	goto	l3343
  4395   002082                     u2290:
  4396   002082                     
  4397                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  4398   002082  5007               	movf	read_prec_or_width@fmt^0,w,c
  4399   002084  6ED9               	movwf	fsr2l,c
  4400   002086  6ADA               	clrf	fsr2h,c
  4401   002088  2ADF               	incf	indf2,f,c
  4402   00208A                     
  4403                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  4404   00208A  5008               	movf	read_prec_or_width@ap^0,w,c
  4405   00208C  6ED9               	movwf	fsr2l,c
  4406   00208E  6ADA               	clrf	fsr2h,c
  4407   002090  0E02               	movlw	2
  4408   002092  26DF               	addwf	indf2,f,c
  4409   002094  5CDF               	subwf	indf2,w,c
  4410   002096  6ED9               	movwf	fsr2l,c
  4411   002098  6ADA               	clrf	fsr2h,c
  4412   00209A  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  4413   00209E  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  4414                           
  4415                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  4416   0020A2  EF7C  F010         	goto	l1194
  4417   0020A6                     l3339:
  4418                           
  4419                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  4420   0020A6  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  4421   0020AA  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  4422   0020AE  0E00               	movlw	0
  4423   0020B0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4424   0020B2  0E0A               	movlw	10
  4425   0020B4  6E03               	movwf	___wmul@multiplicand^0,c
  4426   0020B6  EC37  F014         	call	___wmul	;wreg free
  4427   0020BA  5009               	movf	read_prec_or_width@c^0,w,c
  4428   0020BC  2401               	addwf	?___wmul^0,w,c
  4429   0020BE  6E0A               	movwf	read_prec_or_width@n^0,c
  4430   0020C0  0E00               	movlw	0
  4431   0020C2  2002               	addwfc	(?___wmul+1)^0,w,c
  4432   0020C4  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  4433   0020C6                     
  4434                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  4435   0020C6  5007               	movf	read_prec_or_width@fmt^0,w,c
  4436   0020C8  6ED9               	movwf	fsr2l,c
  4437   0020CA  6ADA               	clrf	fsr2h,c
  4438   0020CC  2ADF               	incf	indf2,f,c
  4439   0020CE                     l3343:
  4440                           
  4441                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  4442   0020CE  5007               	movf	read_prec_or_width@fmt^0,w,c
  4443   0020D0  6ED9               	movwf	fsr2l,c
  4444   0020D2  6ADA               	clrf	fsr2h,c
  4445   0020D4  CFDF FFF6          	movff	indf2,tblptrl
  4446   0020D8                     	if	1	;There is more than 1 active tblptr byte
  4447   0020D8  0E0E               	movlw	high __smallconst
  4448   0020DA  6EF7               	movwf	tblptrh,c
  4449   0020DC                     	endif
  4450   0020DC                     	if	0	;tblptru may be non-zero
  4451   0020DC                     	endif
  4452   0020DC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4453   0020DC  0E00               	movlw	low (__smallconst shr (0+16))
  4454   0020DE  6EF8               	movwf	tblptru,c
  4455   0020E0                     	endif
  4456   0020E0  0008               	tblrd		*
  4457   0020E2  50F5               	movf	tablat,w,c
  4458   0020E4  0FD0               	addlw	208
  4459   0020E6  6E09               	movwf	read_prec_or_width@c^0,c
  4460   0020E8  0E09               	movlw	9
  4461   0020EA  6409               	cpfsgt	read_prec_or_width@c^0,c
  4462   0020EC  EF7A  F010         	goto	u2301
  4463   0020F0  EF7C  F010         	goto	u2300
  4464   0020F4                     u2301:
  4465   0020F4  EF53  F010         	goto	l3339
  4466   0020F8                     u2300:
  4467   0020F8                     l1194:
  4468                           
  4469                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  4470   0020F8  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  4471   0020FC  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  4472   002100  0012               	return		;funcret
  4473   002102                     __end_of_read_prec_or_width:
  4474                           	callstack 0
  4475                           
  4476 ;; *************** function ___wmul *****************
  4477 ;; Defined at:
  4478 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  multiplier      2    0[COMRAM] unsigned int 
  4481 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  product         2    4[COMRAM] unsigned int 
  4484 ;; Return value:  Size  Location     Type
  4485 ;;                  2    0[COMRAM] unsigned int 
  4486 ;; Registers used:
  4487 ;;		wreg, status,2, status,0, prodl, prodh
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4493 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4496 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4497 ;;Total ram usage:        6 bytes
  4498 ;; Hardware stack levels used: 1
  4499 ;; This function calls:
  4500 ;;		Nothing
  4501 ;; This function is called by:
  4502 ;;		_ADC2String
  4503 ;;		_read_prec_or_width
  4504 ;;		_setMotorPWM
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           	psect	text19
  4509   00286E                     __ptext19:
  4510                           	callstack 0
  4511   00286E                     ___wmul:
  4512                           	callstack 25
  4513   00286E  5001               	movf	___wmul@multiplier^0,w,c
  4514   002870  0203               	mulwf	___wmul@multiplicand^0,c
  4515   002872  CFF3 F005          	movff	prodl,___wmul@product
  4516   002876  CFF4 F006          	movff	prodh,___wmul@product+1
  4517   00287A  5001               	movf	___wmul@multiplier^0,w,c
  4518   00287C  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4519   00287E  50F3               	movf	243,w,c
  4520   002880  2606               	addwf	(___wmul@product+1)^0,f,c
  4521   002882  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4522   002884  0203               	mulwf	___wmul@multiplicand^0,c
  4523   002886  50F3               	movf	243,w,c
  4524   002888  2606               	addwf	(___wmul@product+1)^0,f,c
  4525   00288A  C005  F001         	movff	___wmul@product,?___wmul
  4526   00288E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4527   002892  0012               	return		;funcret
  4528   002894                     __end_of___wmul:
  4529                           	callstack 0
  4530                           
  4531 ;; *************** function _dtoa *****************
  4532 ;; Defined at:
  4533 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  4536 ;;		 -> sprintf@f(12), 
  4537 ;;  d               2   23[COMRAM] int 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  i               2   31[COMRAM] int 
  4540 ;;  w               2   28[COMRAM] int 
  4541 ;;  s               1   30[COMRAM] unsigned char 
  4542 ;;  p               1   27[COMRAM] _Bool 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1    wreg      void 
  4545 ;; Registers used:
  4546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4552 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4553 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4555 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4556 ;;Total ram usage:       11 bytes
  4557 ;; Hardware stack levels used: 1
  4558 ;; Hardware stack levels required when called: 4
  4559 ;; This function calls:
  4560 ;;		___awdiv
  4561 ;;		___awmod
  4562 ;;		_abs
  4563 ;;		_pad
  4564 ;; This function is called by:
  4565 ;;		_vfpfcnvrt
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text20
  4570   001A44                     __ptext20:
  4571                           	callstack 0
  4572   001A44                     _dtoa:
  4573                           	callstack 22
  4574   001A44                     
  4575                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  4576   001A44  0E01               	movlw	1
  4577   001A46  6E1C               	movwf	dtoa@p^0,c
  4578   001A48                     
  4579                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  4580   001A48  BE19               	btfsc	(dtoa@d+1)^0,7,c
  4581   001A4A  EF29  F00D         	goto	u2191
  4582   001A4E  EF2C  F00D         	goto	u2190
  4583   001A52                     u2191:
  4584   001A52  0E01               	movlw	1
  4585   001A54  EF2D  F00D         	goto	u2200
  4586   001A58                     u2190:
  4587   001A58  0E00               	movlw	0
  4588   001A5A                     u2200:
  4589   001A5A  6E1F               	movwf	dtoa@s^0,c
  4590   001A5C                     
  4591                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  4592   001A5C  C164  F01D         	movff	_width,dtoa@w
  4593   001A60  C165  F01E         	movff	_width+1,dtoa@w+1
  4594   001A64                     
  4595                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  4596   001A64  501F               	movf	dtoa@s^0,w,c
  4597   001A66  B4D8               	btfsc	status,2,c
  4598   001A68  EF38  F00D         	goto	u2211
  4599   001A6C  EF3A  F00D         	goto	u2210
  4600   001A70                     u2211:
  4601   001A70  EF51  F00D         	goto	l1177
  4602   001A74                     u2210:
  4603   001A74                     
  4604                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  4605   001A74  061D               	decf	dtoa@w^0,f,c
  4606   001A76  A0D8               	btfss	status,0,c
  4607   001A78  061E               	decf	(dtoa@w+1)^0,f,c
  4608   001A7A                     
  4609                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  4610   001A7A  501F               	movf	dtoa@s^0,w,c
  4611   001A7C  A4D8               	btfss	status,2,c
  4612   001A7E  EF43  F00D         	goto	u2221
  4613   001A82  EF45  F00D         	goto	u2220
  4614   001A86                     u2221:
  4615   001A86  EF4B  F00D         	goto	l3295
  4616   001A8A                     u2220:
  4617   001A8A  0E00               	movlw	0
  4618   001A8C  6E1B               	movwf	(_dtoa$2524+1)^0,c
  4619   001A8E  0E2B               	movlw	43
  4620   001A90  6E1A               	movwf	_dtoa$2524^0,c
  4621   001A92  EF4F  F00D         	goto	l3297
  4622   001A96                     l3295:
  4623   001A96  0E00               	movlw	0
  4624   001A98  6E1B               	movwf	(_dtoa$2524+1)^0,c
  4625   001A9A  0E2D               	movlw	45
  4626   001A9C  6E1A               	movwf	_dtoa$2524^0,c
  4627   001A9E                     l3297:
  4628   001A9E  C01A  F01F         	movff	_dtoa$2524,dtoa@s
  4629   001AA2                     l1177:
  4630                           
  4631                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  4632   001AA2  0E00               	movlw	0
  4633   001AA4  6E21               	movwf	(dtoa@i+1)^0,c
  4634   001AA6  0E1F               	movlw	31
  4635   001AA8  6E20               	movwf	dtoa@i^0,c
  4636   001AAA                     
  4637                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  4638   001AAA  0E00               	movlw	0
  4639   001AAC  0101               	movlb	1	; () banked
  4640   001AAE  6F88               	movwf	(_dbuf+31)& (0+255),b
  4641                           
  4642                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  4643   001AB0  EF89  F00D         	goto	l3311
  4644   001AB4                     l3301:
  4645                           
  4646                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  4647   001AB4  0620               	decf	dtoa@i^0,f,c
  4648   001AB6  A0D8               	btfss	status,0,c
  4649   001AB8  0621               	decf	(dtoa@i+1)^0,f,c
  4650   001ABA                     
  4651                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  4652   001ABA  0E69               	movlw	low _dbuf
  4653   001ABC  2420               	addwf	dtoa@i^0,w,c
  4654   001ABE  6ED9               	movwf	fsr2l,c
  4655   001AC0  0E01               	movlw	high _dbuf
  4656   001AC2  2021               	addwfc	(dtoa@i+1)^0,w,c
  4657   001AC4  6EDA               	movwf	fsr2h,c
  4658   001AC6  C018  F001         	movff	dtoa@d,___awmod@dividend
  4659   001ACA  C019  F002         	movff	dtoa@d+1,___awmod@dividend+1
  4660   001ACE  0E00               	movlw	0
  4661   001AD0  6E04               	movwf	(___awmod@divisor+1)^0,c
  4662   001AD2  0E0A               	movlw	10
  4663   001AD4  6E03               	movwf	___awmod@divisor^0,c
  4664   001AD6  ECD2  F00F         	call	___awmod	;wreg free
  4665   001ADA  C001  F007         	movff	?___awmod,abs@a
  4666   001ADE  C002  F008         	movff	?___awmod+1,abs@a+1
  4667   001AE2  ECC3  F013         	call	_abs	;wreg free
  4668   001AE6  5007               	movf	?_abs^0,w,c
  4669   001AE8  0F30               	addlw	48
  4670   001AEA  6EDF               	movwf	indf2,c
  4671   001AEC                     
  4672                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  4673   001AEC  0E00               	movlw	0
  4674   001AEE  6E1C               	movwf	dtoa@p^0,c
  4675   001AF0                     
  4676                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  4677   001AF0  061D               	decf	dtoa@w^0,f,c
  4678   001AF2  A0D8               	btfss	status,0,c
  4679   001AF4  061E               	decf	(dtoa@w+1)^0,f,c
  4680   001AF6                     
  4681                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  4682   001AF6  C018  F001         	movff	dtoa@d,___awdiv@dividend
  4683   001AFA  C019  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  4684   001AFE  0E00               	movlw	0
  4685   001B00  6E04               	movwf	(___awdiv@divisor+1)^0,c
  4686   001B02  0E0A               	movlw	10
  4687   001B04  6E03               	movwf	___awdiv@divisor^0,c
  4688   001B06  EC70  F00F         	call	___awdiv	;wreg free
  4689   001B0A  C001  F018         	movff	?___awdiv,dtoa@d
  4690   001B0E  C002  F019         	movff	?___awdiv+1,dtoa@d+1
  4691   001B12                     l3311:
  4692                           
  4693                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  4694   001B12  BE21               	btfsc	(dtoa@i+1)^0,7,c
  4695   001B14  EF94  F00D         	goto	u2231
  4696   001B18  5021               	movf	(dtoa@i+1)^0,w,c
  4697   001B1A  E108               	bnz	u2230
  4698   001B1C  0420               	decf	dtoa@i^0,w,c
  4699   001B1E  A0D8               	btfss	status,0,c
  4700   001B20  EF94  F00D         	goto	u2231
  4701   001B24  EF96  F00D         	goto	u2230
  4702   001B28                     u2231:
  4703   001B28  EFBC  F00D         	goto	l3321
  4704   001B2C                     u2230:
  4705   001B2C  5018               	movf	dtoa@d^0,w,c
  4706   001B2E  1019               	iorwf	(dtoa@d+1)^0,w,c
  4707   001B30  A4D8               	btfss	status,2,c
  4708   001B32  EF9D  F00D         	goto	u2241
  4709   001B36  EF9F  F00D         	goto	u2240
  4710   001B3A                     u2241:
  4711   001B3A  EF5A  F00D         	goto	l3301
  4712   001B3E                     u2240:
  4713   001B3E  501C               	movf	dtoa@p^0,w,c
  4714   001B40  A4D8               	btfss	status,2,c
  4715   001B42  EFA5  F00D         	goto	u2251
  4716   001B46  EFA7  F00D         	goto	u2250
  4717   001B4A                     u2251:
  4718   001B4A  EF5A  F00D         	goto	l3301
  4719   001B4E                     u2250:
  4720   001B4E  BE1E               	btfsc	(dtoa@w+1)^0,7,c
  4721   001B50  EFB2  F00D         	goto	u2261
  4722   001B54  501E               	movf	(dtoa@w+1)^0,w,c
  4723   001B56  E108               	bnz	u2260
  4724   001B58  041D               	decf	dtoa@w^0,w,c
  4725   001B5A  A0D8               	btfss	status,0,c
  4726   001B5C  EFB2  F00D         	goto	u2261
  4727   001B60  EFB4  F00D         	goto	u2260
  4728   001B64                     u2261:
  4729   001B64  EFBC  F00D         	goto	l3321
  4730   001B68                     u2260:
  4731   001B68  0100               	movlb	0	; () banked
  4732   001B6A  B3FC               	btfsc	_flags& (0+255),1,b
  4733   001B6C  EFBA  F00D         	goto	u2271
  4734   001B70  EFBC  F00D         	goto	u2270
  4735   001B74                     u2271:
  4736   001B74  EF5A  F00D         	goto	l3301
  4737   001B78                     u2270:
  4738   001B78                     l3321:
  4739                           
  4740                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  4741   001B78  501F               	movf	dtoa@s^0,w,c
  4742   001B7A  B4D8               	btfsc	status,2,c
  4743   001B7C  EFC2  F00D         	goto	u2281
  4744   001B80  EFC4  F00D         	goto	u2280
  4745   001B84                     u2281:
  4746   001B84  EFCF  F00D         	goto	l3327
  4747   001B88                     u2280:
  4748   001B88                     
  4749                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  4750   001B88  0620               	decf	dtoa@i^0,f,c
  4751   001B8A  A0D8               	btfss	status,0,c
  4752   001B8C  0621               	decf	(dtoa@i+1)^0,f,c
  4753   001B8E                     
  4754                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  4755   001B8E  0E69               	movlw	low _dbuf
  4756   001B90  2420               	addwf	dtoa@i^0,w,c
  4757   001B92  6ED9               	movwf	fsr2l,c
  4758   001B94  0E01               	movlw	high _dbuf
  4759   001B96  2021               	addwfc	(dtoa@i+1)^0,w,c
  4760   001B98  6EDA               	movwf	fsr2h,c
  4761   001B9A  C01F  FFDF         	movff	dtoa@s,indf2
  4762   001B9E                     l3327:
  4763                           
  4764                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  4765   001B9E  C017  F00F         	movff	dtoa@fp,pad@fp
  4766   001BA2  0E69               	movlw	low _dbuf
  4767   001BA4  2420               	addwf	dtoa@i^0,w,c
  4768   001BA6  6E10               	movwf	pad@buf^0,c
  4769   001BA8  0E01               	movlw	high _dbuf
  4770   001BAA  2021               	addwfc	(dtoa@i+1)^0,w,c
  4771   001BAC  6E11               	movwf	(pad@buf+1)^0,c
  4772   001BAE  C01D  F012         	movff	dtoa@w,pad@p
  4773   001BB2  C01E  F013         	movff	dtoa@w+1,pad@p+1
  4774   001BB6  EC76  F011         	call	_pad	;wreg free
  4775   001BBA  0012               	return		;funcret
  4776   001BBC                     __end_of_dtoa:
  4777                           	callstack 0
  4778                           
  4779 ;; *************** function _pad *****************
  4780 ;; Defined at:
  4781 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  4784 ;;		 -> sprintf@f(12), 
  4785 ;;  buf             2   15[COMRAM] PTR unsigned char 
  4786 ;;		 -> dbuf(32), 
  4787 ;;  p               2   17[COMRAM] int 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  i               2   20[COMRAM] int 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      void 
  4792 ;; Registers used:
  4793 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4799 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4801 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4802 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4803 ;;Total ram usage:        8 bytes
  4804 ;; Hardware stack levels used: 1
  4805 ;; Hardware stack levels required when called: 3
  4806 ;; This function calls:
  4807 ;;		_fputc
  4808 ;;		_fputs
  4809 ;; This function is called by:
  4810 ;;		_dtoa
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           	psect	text21
  4815   0022EC                     __ptext21:
  4816                           	callstack 0
  4817   0022EC                     _pad:
  4818                           	callstack 22
  4819   0022EC                     
  4820                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  4821   0022EC  0100               	movlb	0	; () banked
  4822   0022EE  A1FC               	btfss	_flags& (0+255),0,b
  4823   0022F0  EF7C  F011         	goto	u2141
  4824   0022F4  EF7E  F011         	goto	u2140
  4825   0022F8                     u2141:
  4826   0022F8  EF86  F011         	goto	l3265
  4827   0022FC                     u2140:
  4828   0022FC                     
  4829                           ; BSR set to: 0
  4830                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  4831   0022FC  C010  F009         	movff	pad@buf,fputs@s
  4832   002300  C011  F00A         	movff	pad@buf+1,fputs@s+1
  4833   002304  C00F  F00B         	movff	pad@fp,fputs@fp
  4834   002308  EC54  F013         	call	_fputs	;wreg free
  4835   00230C                     l3265:
  4836                           
  4837                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  4838   00230C  BE13               	btfsc	(pad@p+1)^0,7,c
  4839   00230E  EF8D  F011         	goto	u2150
  4840   002312  EF8B  F011         	goto	u2151
  4841   002316                     u2151:
  4842   002316  EF91  F011         	goto	l1169
  4843   00231A                     u2150:
  4844   00231A                     
  4845                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  4846   00231A  0E00               	movlw	0
  4847   00231C  6E13               	movwf	(pad@p+1)^0,c
  4848   00231E  0E00               	movlw	0
  4849   002320  6E12               	movwf	pad@p^0,c
  4850   002322                     l1169:
  4851                           
  4852                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  4853   002322  0E00               	movlw	0
  4854   002324  6E16               	movwf	(pad@i+1)^0,c
  4855   002326  0E00               	movlw	0
  4856   002328  6E15               	movwf	pad@i^0,c
  4857                           
  4858                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  4859   00232A  EFA1  F011         	goto	l3273
  4860   00232E                     l3269:
  4861                           
  4862                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  4863   00232E  0E00               	movlw	0
  4864   002330  6E02               	movwf	(fputc@c+1)^0,c
  4865   002332  0E20               	movlw	32
  4866   002334  6E01               	movwf	fputc@c^0,c
  4867   002336  C00F  F003         	movff	pad@fp,fputc@fp
  4868   00233A  EC81  F010         	call	_fputc	;wreg free
  4869   00233E                     
  4870                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  4871   00233E  4A15               	infsnz	pad@i^0,f,c
  4872   002340  2A16               	incf	(pad@i+1)^0,f,c
  4873   002342                     l3273:
  4874                           
  4875                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  4876   002342  5012               	movf	pad@p^0,w,c
  4877   002344  5C15               	subwf	pad@i^0,w,c
  4878   002346  5016               	movf	(pad@i+1)^0,w,c
  4879   002348  0A80               	xorlw	128
  4880   00234A  6E14               	movwf	??_pad^0,c
  4881   00234C  5013               	movf	(pad@p+1)^0,w,c
  4882   00234E  0A80               	xorlw	128
  4883   002350  5814               	subwfb	??_pad^0,w,c
  4884   002352  A0D8               	btfss	status,0,c
  4885   002354  EFAE  F011         	goto	u2161
  4886   002358  EFB0  F011         	goto	u2160
  4887   00235C                     u2161:
  4888   00235C  EF97  F011         	goto	l3269
  4889   002360                     u2160:
  4890   002360                     
  4891                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  4892   002360  0100               	movlb	0	; () banked
  4893   002362  B1FC               	btfsc	_flags& (0+255),0,b
  4894   002364  EFB6  F011         	goto	u2171
  4895   002368  EFB8  F011         	goto	u2170
  4896   00236C                     u2171:
  4897   00236C  EFC0  F011         	goto	l1174
  4898   002370                     u2170:
  4899   002370                     
  4900                           ; BSR set to: 0
  4901                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  4902   002370  C010  F009         	movff	pad@buf,fputs@s
  4903   002374  C011  F00A         	movff	pad@buf+1,fputs@s+1
  4904   002378  C00F  F00B         	movff	pad@fp,fputs@fp
  4905   00237C  EC54  F013         	call	_fputs	;wreg free
  4906   002380                     l1174:
  4907   002380  0012               	return		;funcret
  4908   002382                     __end_of_pad:
  4909                           	callstack 0
  4910                           
  4911 ;; *************** function _fputs *****************
  4912 ;; Defined at:
  4913 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  s               2    8[COMRAM] PTR const unsigned char 
  4916 ;;		 -> dbuf(32), 
  4917 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  4918 ;;		 -> sprintf@f(12), 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  i               2   12[COMRAM] int 
  4921 ;;  c               1   11[COMRAM] unsigned char 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  2    8[COMRAM] int 
  4924 ;; Registers used:
  4925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4931 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4932 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4934 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4935 ;;Total ram usage:        6 bytes
  4936 ;; Hardware stack levels used: 1
  4937 ;; Hardware stack levels required when called: 2
  4938 ;; This function calls:
  4939 ;;		_fputc
  4940 ;; This function is called by:
  4941 ;;		_pad
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text22
  4946   0026A8                     __ptext22:
  4947                           	callstack 0
  4948   0026A8                     _fputs:
  4949                           	callstack 22
  4950   0026A8  0E00               	movlw	0
  4951   0026AA  6E0E               	movwf	(fputs@i+1)^0,c
  4952   0026AC  0E00               	movlw	0
  4953   0026AE  6E0D               	movwf	fputs@i^0,c
  4954   0026B0  EF63  F013         	goto	l3173
  4955   0026B4                     l3169:
  4956   0026B4  C00C  F001         	movff	fputs@c,fputc@c
  4957   0026B8  6A02               	clrf	(fputc@c+1)^0,c
  4958   0026BA  C00B  F003         	movff	fputs@fp,fputc@fp
  4959   0026BE  EC81  F010         	call	_fputc	;wreg free
  4960   0026C2  4A0D               	infsnz	fputs@i^0,f,c
  4961   0026C4  2A0E               	incf	(fputs@i+1)^0,f,c
  4962   0026C6                     l3173:
  4963   0026C6  500D               	movf	fputs@i^0,w,c
  4964   0026C8  2409               	addwf	fputs@s^0,w,c
  4965   0026CA  6ED9               	movwf	fsr2l,c
  4966   0026CC  500E               	movf	(fputs@i+1)^0,w,c
  4967   0026CE  200A               	addwfc	(fputs@s+1)^0,w,c
  4968   0026D0  6EDA               	movwf	fsr2h,c
  4969   0026D2  50DF               	movf	indf2,w,c
  4970   0026D4  6E0C               	movwf	fputs@c^0,c
  4971   0026D6  500C               	movf	fputs@c^0,w,c
  4972   0026D8  A4D8               	btfss	status,2,c
  4973   0026DA  EF71  F013         	goto	u2011
  4974   0026DE  EF73  F013         	goto	u2010
  4975   0026E2                     u2011:
  4976   0026E2  EF5A  F013         	goto	l3169
  4977   0026E6                     u2010:
  4978   0026E6  0012               	return		;funcret
  4979   0026E8                     __end_of_fputs:
  4980                           	callstack 0
  4981                           
  4982 ;; *************** function _fputc *****************
  4983 ;; Defined at:
  4984 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;  c               2    0[COMRAM] int 
  4987 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  4988 ;;		 -> sprintf@f(12), 
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;		None
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  2    0[COMRAM] int 
  4993 ;; Registers used:
  4994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5000 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5002 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5003 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5004 ;;Total ram usage:        8 bytes
  5005 ;; Hardware stack levels used: 1
  5006 ;; Hardware stack levels required when called: 1
  5007 ;; This function calls:
  5008 ;;		_putch
  5009 ;; This function is called by:
  5010 ;;		_pad
  5011 ;;		_vfpfcnvrt
  5012 ;;		_fputs
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text23
  5017   002102                     __ptext23:
  5018                           	callstack 0
  5019   002102                     _fputc:
  5020                           	callstack 25
  5021   002102  5003               	movf	fputc@fp^0,w,c
  5022   002104  B4D8               	btfsc	status,2,c
  5023   002106  EF87  F010         	goto	u1971
  5024   00210A  EF89  F010         	goto	u1970
  5025   00210E                     u1971:
  5026   00210E  EF91  F010         	goto	l3157
  5027   002112                     u1970:
  5028   002112  5003               	movf	fputc@fp^0,w,c
  5029   002114  A4D8               	btfss	status,2,c
  5030   002116  EF8F  F010         	goto	u1981
  5031   00211A  EF91  F010         	goto	u1980
  5032   00211E                     u1981:
  5033   00211E  EF96  F010         	goto	l3159
  5034   002122                     u1980:
  5035   002122                     l3157:
  5036   002122  5001               	movf	fputc@c^0,w,c
  5037   002124  EC97  F014         	call	_putch
  5038   002128  EFD5  F010         	goto	l1238
  5039   00212C                     l3159:
  5040   00212C  5003               	movf	fputc@fp^0,w,c
  5041   00212E  6ED9               	movwf	fsr2l,c
  5042   002130  6ADA               	clrf	fsr2h,c
  5043   002132  0E0A               	movlw	10
  5044   002134  26D9               	addwf	fsr2l,f,c
  5045   002136  50DE               	movf	postinc2,w,c
  5046   002138  10DE               	iorwf	postinc2,w,c
  5047   00213A  B4D8               	btfsc	status,2,c
  5048   00213C  EFA2  F010         	goto	u1991
  5049   002140  EFA4  F010         	goto	u1990
  5050   002144                     u1991:
  5051   002144  EFBD  F010         	goto	l3163
  5052   002148                     u1990:
  5053   002148  5003               	movf	fputc@fp^0,w,c
  5054   00214A  6ED9               	movwf	fsr2l,c
  5055   00214C  6ADA               	clrf	fsr2h,c
  5056   00214E  0E0A               	movlw	10
  5057   002150  26D9               	addwf	fsr2l,f,c
  5058   002152  5003               	movf	fputc@fp^0,w,c
  5059   002154  6EE1               	movwf	fsr1l,c
  5060   002156  6AE2               	clrf	fsr1h,c
  5061   002158  0E03               	movlw	3
  5062   00215A  26E1               	addwf	fsr1l,f,c
  5063   00215C  50DE               	movf	postinc2,w,c
  5064   00215E  5CE6               	subwf	postinc1,w,c
  5065   002160  50E6               	movf	postinc1,w,c
  5066   002162  0A80               	xorlw	128
  5067   002164  6E08               	movwf	(??_fputc+4)^0,c
  5068   002166  50DE               	movf	postinc2,w,c
  5069   002168  0A80               	xorlw	128
  5070   00216A  5808               	subwfb	(??_fputc+4)^0,w,c
  5071   00216C  B0D8               	btfsc	status,0,c
  5072   00216E  EFBB  F010         	goto	u2001
  5073   002172  EFBD  F010         	goto	u2000
  5074   002176                     u2001:
  5075   002176  EFD5  F010         	goto	l1238
  5076   00217A                     u2000:
  5077   00217A                     l3163:
  5078   00217A  5003               	movf	fputc@fp^0,w,c
  5079   00217C  6ED9               	movwf	fsr2l,c
  5080   00217E  6ADA               	clrf	fsr2h,c
  5081   002180  0E03               	movlw	3
  5082   002182  26D9               	addwf	fsr2l,f,c
  5083   002184  50DF               	movf	indf2,w,c
  5084   002186  6E04               	movwf	??_fputc^0,c
  5085   002188  5003               	movf	fputc@fp^0,w,c
  5086   00218A  6ED9               	movwf	fsr2l,c
  5087   00218C  6ADA               	clrf	fsr2h,c
  5088   00218E  50DF               	movf	indf2,w,c
  5089   002190  2404               	addwf	??_fputc^0,w,c
  5090   002192  6ED9               	movwf	fsr2l,c
  5091   002194  6ADA               	clrf	fsr2h,c
  5092   002196  C001  FFDF         	movff	fputc@c,indf2
  5093   00219A  5003               	movf	fputc@fp^0,w,c
  5094   00219C  6ED9               	movwf	fsr2l,c
  5095   00219E  6ADA               	clrf	fsr2h,c
  5096   0021A0  0E03               	movlw	3
  5097   0021A2  26D9               	addwf	fsr2l,f,c
  5098   0021A4  2ADE               	incf	postinc2,f,c
  5099   0021A6  0E00               	movlw	0
  5100   0021A8  22DD               	addwfc	postdec2,f,c
  5101   0021AA                     l1238:
  5102   0021AA  0012               	return		;funcret
  5103   0021AC                     __end_of_fputc:
  5104                           	callstack 0
  5105                           
  5106 ;; *************** function _putch *****************
  5107 ;; Defined at:
  5108 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;  c               1    wreg     unsigned char 
  5111 ;; Auto vars:     Size  Location     Type
  5112 ;;  c               1    0[COMRAM] unsigned char 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  1    wreg      void 
  5115 ;; Registers used:
  5116 ;;		wreg
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5126 ;;Total ram usage:        0 bytes
  5127 ;; Hardware stack levels used: 1
  5128 ;; This function calls:
  5129 ;;		Nothing
  5130 ;; This function is called by:
  5131 ;;		_fputc
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           	psect	text24
  5136   00292E                     __ptext24:
  5137                           	callstack 0
  5138   00292E                     _putch:
  5139                           	callstack 25
  5140   00292E  0012               	return		;funcret
  5141   002930                     __end_of_putch:
  5142                           	callstack 0
  5143                           
  5144 ;; *************** function _abs *****************
  5145 ;; Defined at:
  5146 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  a               2    6[COMRAM] int 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;		None
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  2    6[COMRAM] int 
  5153 ;; Registers used:
  5154 ;;		wreg, status,2, status,0
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5160 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5162 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5163 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5164 ;;Total ram usage:        4 bytes
  5165 ;; Hardware stack levels used: 1
  5166 ;; This function calls:
  5167 ;;		Nothing
  5168 ;; This function is called by:
  5169 ;;		_dtoa
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           	psect	text25
  5174   002786                     __ptext25:
  5175                           	callstack 0
  5176   002786                     _abs:
  5177                           	callstack 25
  5178   002786  BE08               	btfsc	(abs@a+1)^0,7,c
  5179   002788  EFC8  F013         	goto	u2181
  5180   00278C  EFCA  F013         	goto	u2180
  5181   002790                     u2181:
  5182   002790  EFD0  F013         	goto	l1223
  5183   002794                     u2180:
  5184   002794  C007  F007         	movff	abs@a,?_abs
  5185   002798  C008  F008         	movff	abs@a+1,?_abs+1
  5186   00279C  EFDC  F013         	goto	l1226
  5187   0027A0                     l1223:
  5188   0027A0  C007  F009         	movff	abs@a,??_abs
  5189   0027A4  C008  F00A         	movff	abs@a+1,??_abs+1
  5190   0027A8  1E09               	comf	??_abs^0,f,c
  5191   0027AA  1E0A               	comf	(??_abs+1)^0,f,c
  5192   0027AC  4A09               	infsnz	??_abs^0,f,c
  5193   0027AE  2A0A               	incf	(??_abs+1)^0,f,c
  5194   0027B0  C009  F007         	movff	??_abs,?_abs
  5195   0027B4  C00A  F008         	movff	??_abs+1,?_abs+1
  5196   0027B8                     l1226:
  5197   0027B8  0012               	return		;funcret
  5198   0027BA                     __end_of_abs:
  5199                           	callstack 0
  5200                           
  5201 ;; *************** function ___awmod *****************
  5202 ;; Defined at:
  5203 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;  dividend        2    0[COMRAM] int 
  5206 ;;  divisor         2    2[COMRAM] int 
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;  sign            1    5[COMRAM] unsigned char 
  5209 ;;  counter         1    4[COMRAM] unsigned char 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  2    0[COMRAM] int 
  5212 ;; Registers used:
  5213 ;;		wreg, status,2, status,0
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5219 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5222 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5223 ;;Total ram usage:        6 bytes
  5224 ;; Hardware stack levels used: 1
  5225 ;; This function calls:
  5226 ;;		Nothing
  5227 ;; This function is called by:
  5228 ;;		_dtoa
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           	psect	text26
  5233   001FA4                     __ptext26:
  5234                           	callstack 0
  5235   001FA4                     ___awmod:
  5236                           	callstack 25
  5237   001FA4  0E00               	movlw	0
  5238   001FA6  6E06               	movwf	___awmod@sign^0,c
  5239   001FA8  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  5240   001FAA  EFDB  F00F         	goto	u2080
  5241   001FAE  EFD9  F00F         	goto	u2081
  5242   001FB2                     u2081:
  5243   001FB2  EFE1  F00F         	goto	l3233
  5244   001FB6                     u2080:
  5245   001FB6  6C01               	negf	___awmod@dividend^0,c
  5246   001FB8  1E02               	comf	(___awmod@dividend+1)^0,f,c
  5247   001FBA  B0D8               	btfsc	status,0,c
  5248   001FBC  2A02               	incf	(___awmod@dividend+1)^0,f,c
  5249   001FBE  0E01               	movlw	1
  5250   001FC0  6E06               	movwf	___awmod@sign^0,c
  5251   001FC2                     l3233:
  5252   001FC2  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  5253   001FC4  EFE8  F00F         	goto	u2090
  5254   001FC8  EFE6  F00F         	goto	u2091
  5255   001FCC                     u2091:
  5256   001FCC  EFEC  F00F         	goto	l3237
  5257   001FD0                     u2090:
  5258   001FD0  6C03               	negf	___awmod@divisor^0,c
  5259   001FD2  1E04               	comf	(___awmod@divisor+1)^0,f,c
  5260   001FD4  B0D8               	btfsc	status,0,c
  5261   001FD6  2A04               	incf	(___awmod@divisor+1)^0,f,c
  5262   001FD8                     l3237:
  5263   001FD8  5003               	movf	___awmod@divisor^0,w,c
  5264   001FDA  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  5265   001FDC  B4D8               	btfsc	status,2,c
  5266   001FDE  EFF3  F00F         	goto	u2101
  5267   001FE2  EFF5  F00F         	goto	u2100
  5268   001FE6                     u2101:
  5269   001FE6  EF19  F010         	goto	l3253
  5270   001FEA                     u2100:
  5271   001FEA  0E01               	movlw	1
  5272   001FEC  6E05               	movwf	___awmod@counter^0,c
  5273   001FEE  EFFD  F00F         	goto	l3243
  5274   001FF2                     l3241:
  5275   001FF2  90D8               	bcf	status,0,c
  5276   001FF4  3603               	rlcf	___awmod@divisor^0,f,c
  5277   001FF6  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  5278   001FF8  2A05               	incf	___awmod@counter^0,f,c
  5279   001FFA                     l3243:
  5280   001FFA  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  5281   001FFC  EF02  F010         	goto	u2111
  5282   002000  EF04  F010         	goto	u2110
  5283   002004                     u2111:
  5284   002004  EFF9  F00F         	goto	l3241
  5285   002008                     u2110:
  5286   002008                     l3245:
  5287   002008  5003               	movf	___awmod@divisor^0,w,c
  5288   00200A  5C01               	subwf	___awmod@dividend^0,w,c
  5289   00200C  5004               	movf	(___awmod@divisor+1)^0,w,c
  5290   00200E  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  5291   002010  A0D8               	btfss	status,0,c
  5292   002012  EF0D  F010         	goto	u2121
  5293   002016  EF0F  F010         	goto	u2120
  5294   00201A                     u2121:
  5295   00201A  EF13  F010         	goto	l3249
  5296   00201E                     u2120:
  5297   00201E  5003               	movf	___awmod@divisor^0,w,c
  5298   002020  5E01               	subwf	___awmod@dividend^0,f,c
  5299   002022  5004               	movf	(___awmod@divisor+1)^0,w,c
  5300   002024  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  5301   002026                     l3249:
  5302   002026  90D8               	bcf	status,0,c
  5303   002028  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  5304   00202A  3203               	rrcf	___awmod@divisor^0,f,c
  5305   00202C  2E05               	decfsz	___awmod@counter^0,f,c
  5306   00202E  EF04  F010         	goto	l3245
  5307   002032                     l3253:
  5308   002032  5006               	movf	___awmod@sign^0,w,c
  5309   002034  B4D8               	btfsc	status,2,c
  5310   002036  EF1F  F010         	goto	u2131
  5311   00203A  EF21  F010         	goto	u2130
  5312   00203E                     u2131:
  5313   00203E  EF25  F010         	goto	l3257
  5314   002042                     u2130:
  5315   002042  6C01               	negf	___awmod@dividend^0,c
  5316   002044  1E02               	comf	(___awmod@dividend+1)^0,f,c
  5317   002046  B0D8               	btfsc	status,0,c
  5318   002048  2A02               	incf	(___awmod@dividend+1)^0,f,c
  5319   00204A                     l3257:
  5320   00204A  C001  F001         	movff	___awmod@dividend,?___awmod
  5321   00204E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5322   002052  0012               	return		;funcret
  5323   002054                     __end_of___awmod:
  5324                           	callstack 0
  5325                           
  5326 ;; *************** function ___awdiv *****************
  5327 ;; Defined at:
  5328 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  dividend        2    0[COMRAM] int 
  5331 ;;  divisor         2    2[COMRAM] int 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  quotient        2    6[COMRAM] int 
  5334 ;;  sign            1    5[COMRAM] unsigned char 
  5335 ;;  counter         1    4[COMRAM] unsigned char 
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  2    0[COMRAM] int 
  5338 ;; Registers used:
  5339 ;;		wreg, status,2, status,0
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5346 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5348 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5349 ;;Total ram usage:        8 bytes
  5350 ;; Hardware stack levels used: 1
  5351 ;; This function calls:
  5352 ;;		Nothing
  5353 ;; This function is called by:
  5354 ;;		_dtoa
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text27
  5359   001EE0                     __ptext27:
  5360                           	callstack 0
  5361   001EE0                     ___awdiv:
  5362                           	callstack 25
  5363   001EE0  0E00               	movlw	0
  5364   001EE2  6E06               	movwf	___awdiv@sign^0,c
  5365   001EE4  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  5366   001EE6  EF79  F00F         	goto	u2020
  5367   001EEA  EF77  F00F         	goto	u2021
  5368   001EEE                     u2021:
  5369   001EEE  EF7F  F00F         	goto	l3189
  5370   001EF2                     u2020:
  5371   001EF2  6C03               	negf	___awdiv@divisor^0,c
  5372   001EF4  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  5373   001EF6  B0D8               	btfsc	status,0,c
  5374   001EF8  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  5375   001EFA  0E01               	movlw	1
  5376   001EFC  6E06               	movwf	___awdiv@sign^0,c
  5377   001EFE                     l3189:
  5378   001EFE  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  5379   001F00  EF86  F00F         	goto	u2030
  5380   001F04  EF84  F00F         	goto	u2031
  5381   001F08                     u2031:
  5382   001F08  EF8C  F00F         	goto	l3195
  5383   001F0C                     u2030:
  5384   001F0C  6C01               	negf	___awdiv@dividend^0,c
  5385   001F0E  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  5386   001F10  B0D8               	btfsc	status,0,c
  5387   001F12  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  5388   001F14  0E01               	movlw	1
  5389   001F16  1A06               	xorwf	___awdiv@sign^0,f,c
  5390   001F18                     l3195:
  5391   001F18  0E00               	movlw	0
  5392   001F1A  6E08               	movwf	(___awdiv@quotient+1)^0,c
  5393   001F1C  0E00               	movlw	0
  5394   001F1E  6E07               	movwf	___awdiv@quotient^0,c
  5395   001F20  5003               	movf	___awdiv@divisor^0,w,c
  5396   001F22  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  5397   001F24  B4D8               	btfsc	status,2,c
  5398   001F26  EF97  F00F         	goto	u2041
  5399   001F2A  EF99  F00F         	goto	u2040
  5400   001F2E                     u2041:
  5401   001F2E  EFC1  F00F         	goto	l3217
  5402   001F32                     u2040:
  5403   001F32  0E01               	movlw	1
  5404   001F34  6E05               	movwf	___awdiv@counter^0,c
  5405   001F36  EFA1  F00F         	goto	l3203
  5406   001F3A                     l3201:
  5407   001F3A  90D8               	bcf	status,0,c
  5408   001F3C  3603               	rlcf	___awdiv@divisor^0,f,c
  5409   001F3E  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  5410   001F40  2A05               	incf	___awdiv@counter^0,f,c
  5411   001F42                     l3203:
  5412   001F42  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  5413   001F44  EFA6  F00F         	goto	u2051
  5414   001F48  EFA8  F00F         	goto	u2050
  5415   001F4C                     u2051:
  5416   001F4C  EF9D  F00F         	goto	l3201
  5417   001F50                     u2050:
  5418   001F50                     l3205:
  5419   001F50  90D8               	bcf	status,0,c
  5420   001F52  3607               	rlcf	___awdiv@quotient^0,f,c
  5421   001F54  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  5422   001F56  5003               	movf	___awdiv@divisor^0,w,c
  5423   001F58  5C01               	subwf	___awdiv@dividend^0,w,c
  5424   001F5A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  5425   001F5C  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  5426   001F5E  A0D8               	btfss	status,0,c
  5427   001F60  EFB4  F00F         	goto	u2061
  5428   001F64  EFB6  F00F         	goto	u2060
  5429   001F68                     u2061:
  5430   001F68  EFBB  F00F         	goto	l3213
  5431   001F6C                     u2060:
  5432   001F6C  5003               	movf	___awdiv@divisor^0,w,c
  5433   001F6E  5E01               	subwf	___awdiv@dividend^0,f,c
  5434   001F70  5004               	movf	(___awdiv@divisor+1)^0,w,c
  5435   001F72  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  5436   001F74  8007               	bsf	___awdiv@quotient^0,0,c
  5437   001F76                     l3213:
  5438   001F76  90D8               	bcf	status,0,c
  5439   001F78  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  5440   001F7A  3203               	rrcf	___awdiv@divisor^0,f,c
  5441   001F7C  2E05               	decfsz	___awdiv@counter^0,f,c
  5442   001F7E  EFA8  F00F         	goto	l3205
  5443   001F82                     l3217:
  5444   001F82  5006               	movf	___awdiv@sign^0,w,c
  5445   001F84  B4D8               	btfsc	status,2,c
  5446   001F86  EFC7  F00F         	goto	u2071
  5447   001F8A  EFC9  F00F         	goto	u2070
  5448   001F8E                     u2071:
  5449   001F8E  EFCD  F00F         	goto	l3221
  5450   001F92                     u2070:
  5451   001F92  6C07               	negf	___awdiv@quotient^0,c
  5452   001F94  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  5453   001F96  B0D8               	btfsc	status,0,c
  5454   001F98  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  5455   001F9A                     l3221:
  5456   001F9A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5457   001F9E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5458   001FA2  0012               	return		;funcret
  5459   001FA4                     __end_of___awdiv:
  5460                           	callstack 0
  5461                           
  5462 ;; *************** function _sendStringSerial4 *****************
  5463 ;; Defined at:
  5464 ;;		line 41 in file "serial.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  string          1    1[COMRAM] PTR unsigned char 
  5467 ;;		 -> send2USART@hue_char(50), send2USART@buf(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  5468 ;;		 -> test@led_state(50), 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5480 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5483 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5484 ;;Total ram usage:        1 bytes
  5485 ;; Hardware stack levels used: 1
  5486 ;; Hardware stack levels required when called: 1
  5487 ;; This function calls:
  5488 ;;		_sendCharSerial4
  5489 ;; This function is called by:
  5490 ;;		_test
  5491 ;;		_calibration_routine
  5492 ;;		_send2USART
  5493 ;;		_sendAllReadings
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text28
  5498   0027BA                     __ptext28:
  5499                           	callstack 0
  5500   0027BA                     _sendStringSerial4:
  5501                           	callstack 28
  5502   0027BA                     
  5503                           ;serial.c: 44:     while(*string != 0){
  5504   0027BA  EFEA  F013         	goto	l3519
  5505   0027BE                     l3513:
  5506                           
  5507                           ;serial.c: 46:   sendCharSerial4(*string++);
  5508   0027BE  5002               	movf	sendStringSerial4@string^0,w,c
  5509   0027C0  6ED9               	movwf	fsr2l,c
  5510   0027C2  6ADA               	clrf	fsr2h,c
  5511   0027C4  50DF               	movf	indf2,w,c
  5512   0027C6  EC76  F014         	call	_sendCharSerial4
  5513   0027CA  2A02               	incf	sendStringSerial4@string^0,f,c
  5514   0027CC                     
  5515                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  5516   0027CC  0E6A               	movlw	106
  5517   0027CE                     u2947:
  5518   0027CE  2EE8               	decfsz	wreg,f,c
  5519   0027D0  D7FE               	bra	u2947
  5520   0027D2  D000               	nop2	
  5521   0027D4                     l3519:
  5522                           
  5523                           ;serial.c: 44:     while(*string != 0){
  5524   0027D4  5002               	movf	sendStringSerial4@string^0,w,c
  5525   0027D6  6ED9               	movwf	fsr2l,c
  5526   0027D8  6ADA               	clrf	fsr2h,c
  5527   0027DA  50DF               	movf	indf2,w,c
  5528   0027DC  A4D8               	btfss	status,2,c
  5529   0027DE  EFF3  F013         	goto	u2451
  5530   0027E2  EFF5  F013         	goto	u2450
  5531   0027E6                     u2451:
  5532   0027E6  EFDF  F013         	goto	l3513
  5533   0027EA                     u2450:
  5534   0027EA  0012               	return		;funcret
  5535   0027EC                     __end_of_sendStringSerial4:
  5536                           	callstack 0
  5537                           
  5538 ;; *************** function _sendCharSerial4 *****************
  5539 ;; Defined at:
  5540 ;;		line 35 in file "serial.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;  charToSend      1    wreg     unsigned char 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  charToSend      1    0[COMRAM] unsigned char 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  1    wreg      void 
  5547 ;; Registers used:
  5548 ;;		wreg
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5555 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5557 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5558 ;;Total ram usage:        1 bytes
  5559 ;; Hardware stack levels used: 1
  5560 ;; This function calls:
  5561 ;;		Nothing
  5562 ;; This function is called by:
  5563 ;;		_sendStringSerial4
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           	psect	text29
  5568   0028EC                     __ptext29:
  5569                           	callstack 0
  5570   0028EC                     _sendCharSerial4:
  5571                           	callstack 28
  5572                           
  5573                           ;incstack = 0
  5574                           ;sendCharSerial4@charToSend stored from wreg
  5575   0028EC  6E01               	movwf	sendCharSerial4@charToSend^0,c
  5576   0028EE                     l414:
  5577   0028EE  010E               	movlb	14	; () banked
  5578   0028F0  A537               	btfss	55,2,b	;volatile
  5579   0028F2  EF7D  F014         	goto	u2411
  5580   0028F6  EF7F  F014         	goto	u2410
  5581   0028FA                     u2411:
  5582   0028FA  EF77  F014         	goto	l414
  5583   0028FE                     u2410:
  5584   0028FE                     
  5585                           ; BSR set to: 14
  5586                           ;serial.c: 37:     TX4REG = charToSend;
  5587   0028FE  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  5588   002902                     
  5589                           ; BSR set to: 14
  5590   002902  0012               	return		;funcret
  5591   002904                     __end_of_sendCharSerial4:
  5592                           	callstack 0
  5593                           
  5594 ;; *************** function _color_read_Red *****************
  5595 ;; Defined at:
  5596 ;;		line 30 in file "color.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;		None
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;  tmp             2    9[COMRAM] unsigned int 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  2    4[COMRAM] unsigned int 
  5603 ;; Registers used:
  5604 ;;		wreg, status,2, status,0, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5610 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5611 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5612 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5613 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5614 ;;Total ram usage:        7 bytes
  5615 ;; Hardware stack levels used: 1
  5616 ;; Hardware stack levels required when called: 2
  5617 ;; This function calls:
  5618 ;;		_I2C_2_Master_Read
  5619 ;;		_I2C_2_Master_RepStart
  5620 ;;		_I2C_2_Master_Start
  5621 ;;		_I2C_2_Master_Stop
  5622 ;;		_I2C_2_Master_Write
  5623 ;; This function is called by:
  5624 ;;		_calibration_routine
  5625 ;;		_reading_values
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text30
  5630   0024E4                     __ptext30:
  5631                           	callstack 0
  5632   0024E4                     _color_read_Red:
  5633                           	callstack 26
  5634   0024E4                     
  5635                           ;color.c: 32:  unsigned int tmp;;color.c: 33:  I2C_2_Master_Start();
  5636   0024E4  EC8D  F014         	call	_I2C_2_Master_Start	;wreg free
  5637                           
  5638                           ;color.c: 34:  I2C_2_Master_Write(0x52 | 0x00);
  5639   0024E8  0E52               	movlw	82
  5640   0024EA  EC82  F014         	call	_I2C_2_Master_Write
  5641                           
  5642                           ;color.c: 35:  I2C_2_Master_Write(0xA0 | 0x16);
  5643   0024EE  0EB6               	movlw	182
  5644   0024F0  EC82  F014         	call	_I2C_2_Master_Write
  5645                           
  5646                           ;color.c: 36:  I2C_2_Master_RepStart();
  5647   0024F4  EC92  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5648                           
  5649                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x01);
  5650   0024F8  0E53               	movlw	83
  5651   0024FA  EC82  F014         	call	_I2C_2_Master_Write
  5652                           
  5653                           ;color.c: 38:  tmp=I2C_2_Master_Read(1);
  5654   0024FE  0E01               	movlw	1
  5655   002500  EC33  F013         	call	_I2C_2_Master_Read
  5656   002504  6E07               	movwf	??_color_read_Red^0,c
  5657   002506  5007               	movf	??_color_read_Red^0,w,c
  5658   002508  6E0A               	movwf	color_read_Red@tmp^0,c
  5659   00250A  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5660                           
  5661                           ;color.c: 39:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5662   00250C  0E00               	movlw	0
  5663   00250E  EC33  F013         	call	_I2C_2_Master_Read
  5664   002512  6E07               	movwf	??_color_read_Red^0,c
  5665   002514  5007               	movf	??_color_read_Red^0,w,c
  5666   002516  6E09               	movwf	(??_color_read_Red+2)^0,c
  5667   002518  6A08               	clrf	(??_color_read_Red+1)^0,c
  5668   00251A  500A               	movf	color_read_Red@tmp^0,w,c
  5669   00251C  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5670   00251E  6E0A               	movwf	color_read_Red@tmp^0,c
  5671   002520  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5672   002522  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5673   002524  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5674                           
  5675                           ;color.c: 40:  I2C_2_Master_Stop();
  5676   002526  EC88  F014         	call	_I2C_2_Master_Stop	;wreg free
  5677   00252A                     
  5678                           ;color.c: 41:  return tmp;
  5679   00252A  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5680   00252E  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5681   002532  0012               	return		;funcret
  5682   002534                     __end_of_color_read_Red:
  5683                           	callstack 0
  5684                           
  5685 ;; *************** function _color_read_Green *****************
  5686 ;; Defined at:
  5687 ;;		line 44 in file "color.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;		None
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;  tmp             2    9[COMRAM] unsigned int 
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  2    4[COMRAM] unsigned int 
  5694 ;; Registers used:
  5695 ;;		wreg, status,2, status,0, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5702 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5703 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5704 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5705 ;;Total ram usage:        7 bytes
  5706 ;; Hardware stack levels used: 1
  5707 ;; Hardware stack levels required when called: 2
  5708 ;; This function calls:
  5709 ;;		_I2C_2_Master_Read
  5710 ;;		_I2C_2_Master_RepStart
  5711 ;;		_I2C_2_Master_Start
  5712 ;;		_I2C_2_Master_Stop
  5713 ;;		_I2C_2_Master_Write
  5714 ;; This function is called by:
  5715 ;;		_calibration_routine
  5716 ;;		_reading_values
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text31
  5721   002534                     __ptext31:
  5722                           	callstack 0
  5723   002534                     _color_read_Green:
  5724                           	callstack 26
  5725   002534                     
  5726                           ;color.c: 46:  unsigned int tmp;;color.c: 47:  I2C_2_Master_Start();
  5727   002534  EC8D  F014         	call	_I2C_2_Master_Start	;wreg free
  5728                           
  5729                           ;color.c: 48:  I2C_2_Master_Write(0x52 | 0x00);
  5730   002538  0E52               	movlw	82
  5731   00253A  EC82  F014         	call	_I2C_2_Master_Write
  5732                           
  5733                           ;color.c: 49:  I2C_2_Master_Write(0xA0 | 0x18);
  5734   00253E  0EB8               	movlw	184
  5735   002540  EC82  F014         	call	_I2C_2_Master_Write
  5736                           
  5737                           ;color.c: 50:  I2C_2_Master_RepStart();
  5738   002544  EC92  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5739                           
  5740                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x01);
  5741   002548  0E53               	movlw	83
  5742   00254A  EC82  F014         	call	_I2C_2_Master_Write
  5743                           
  5744                           ;color.c: 52:  tmp=I2C_2_Master_Read(1);
  5745   00254E  0E01               	movlw	1
  5746   002550  EC33  F013         	call	_I2C_2_Master_Read
  5747   002554  6E07               	movwf	??_color_read_Green^0,c
  5748   002556  5007               	movf	??_color_read_Green^0,w,c
  5749   002558  6E0A               	movwf	color_read_Green@tmp^0,c
  5750   00255A  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5751                           
  5752                           ;color.c: 53:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5753   00255C  0E00               	movlw	0
  5754   00255E  EC33  F013         	call	_I2C_2_Master_Read
  5755   002562  6E07               	movwf	??_color_read_Green^0,c
  5756   002564  5007               	movf	??_color_read_Green^0,w,c
  5757   002566  6E09               	movwf	(??_color_read_Green+2)^0,c
  5758   002568  6A08               	clrf	(??_color_read_Green+1)^0,c
  5759   00256A  500A               	movf	color_read_Green@tmp^0,w,c
  5760   00256C  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5761   00256E  6E0A               	movwf	color_read_Green@tmp^0,c
  5762   002570  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5763   002572  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5764   002574  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5765                           
  5766                           ;color.c: 54:  I2C_2_Master_Stop();
  5767   002576  EC88  F014         	call	_I2C_2_Master_Stop	;wreg free
  5768   00257A                     
  5769                           ;color.c: 55:  return tmp;
  5770   00257A  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5771   00257E  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5772   002582  0012               	return		;funcret
  5773   002584                     __end_of_color_read_Green:
  5774                           	callstack 0
  5775                           
  5776 ;; *************** function _color_read_Clear *****************
  5777 ;; Defined at:
  5778 ;;		line 73 in file "color.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  tmp             2    9[COMRAM] unsigned int 
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  2    4[COMRAM] unsigned int 
  5785 ;; Registers used:
  5786 ;;		wreg, status,2, status,0, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5793 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5794 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5795 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5796 ;;Total ram usage:        7 bytes
  5797 ;; Hardware stack levels used: 1
  5798 ;; Hardware stack levels required when called: 2
  5799 ;; This function calls:
  5800 ;;		_I2C_2_Master_Read
  5801 ;;		_I2C_2_Master_RepStart
  5802 ;;		_I2C_2_Master_Start
  5803 ;;		_I2C_2_Master_Stop
  5804 ;;		_I2C_2_Master_Write
  5805 ;; This function is called by:
  5806 ;;		_calibration_routine
  5807 ;;		_reading_values
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           	psect	text32
  5812   002584                     __ptext32:
  5813                           	callstack 0
  5814   002584                     _color_read_Clear:
  5815                           	callstack 26
  5816   002584                     
  5817                           ;color.c: 75:  unsigned int tmp;;color.c: 76:  I2C_2_Master_Start();
  5818   002584  EC8D  F014         	call	_I2C_2_Master_Start	;wreg free
  5819                           
  5820                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x00);
  5821   002588  0E52               	movlw	82
  5822   00258A  EC82  F014         	call	_I2C_2_Master_Write
  5823                           
  5824                           ;color.c: 78:  I2C_2_Master_Write(0xA0 | 0x14);
  5825   00258E  0EB4               	movlw	180
  5826   002590  EC82  F014         	call	_I2C_2_Master_Write
  5827                           
  5828                           ;color.c: 79:  I2C_2_Master_RepStart();
  5829   002594  EC92  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5830                           
  5831                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x01);
  5832   002598  0E53               	movlw	83
  5833   00259A  EC82  F014         	call	_I2C_2_Master_Write
  5834                           
  5835                           ;color.c: 81:  tmp=I2C_2_Master_Read(1);
  5836   00259E  0E01               	movlw	1
  5837   0025A0  EC33  F013         	call	_I2C_2_Master_Read
  5838   0025A4  6E07               	movwf	??_color_read_Clear^0,c
  5839   0025A6  5007               	movf	??_color_read_Clear^0,w,c
  5840   0025A8  6E0A               	movwf	color_read_Clear@tmp^0,c
  5841   0025AA  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  5842                           
  5843                           ;color.c: 82:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5844   0025AC  0E00               	movlw	0
  5845   0025AE  EC33  F013         	call	_I2C_2_Master_Read
  5846   0025B2  6E07               	movwf	??_color_read_Clear^0,c
  5847   0025B4  5007               	movf	??_color_read_Clear^0,w,c
  5848   0025B6  6E09               	movwf	(??_color_read_Clear+2)^0,c
  5849   0025B8  6A08               	clrf	(??_color_read_Clear+1)^0,c
  5850   0025BA  500A               	movf	color_read_Clear@tmp^0,w,c
  5851   0025BC  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  5852   0025BE  6E0A               	movwf	color_read_Clear@tmp^0,c
  5853   0025C0  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  5854   0025C2  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  5855   0025C4  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  5856                           
  5857                           ;color.c: 83:  I2C_2_Master_Stop();
  5858   0025C6  EC88  F014         	call	_I2C_2_Master_Stop	;wreg free
  5859   0025CA                     
  5860                           ;color.c: 84:  return tmp;
  5861   0025CA  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  5862   0025CE  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5863   0025D2  0012               	return		;funcret
  5864   0025D4                     __end_of_color_read_Clear:
  5865                           	callstack 0
  5866                           
  5867 ;; *************** function _color_read_Blue *****************
  5868 ;; Defined at:
  5869 ;;		line 58 in file "color.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;		None
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  tmp             2    9[COMRAM] unsigned int 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  2    4[COMRAM] unsigned int 
  5876 ;; Registers used:
  5877 ;;		wreg, status,2, status,0, cstack
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5883 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5884 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5885 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5886 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5887 ;;Total ram usage:        7 bytes
  5888 ;; Hardware stack levels used: 1
  5889 ;; Hardware stack levels required when called: 2
  5890 ;; This function calls:
  5891 ;;		_I2C_2_Master_Read
  5892 ;;		_I2C_2_Master_RepStart
  5893 ;;		_I2C_2_Master_Start
  5894 ;;		_I2C_2_Master_Stop
  5895 ;;		_I2C_2_Master_Write
  5896 ;; This function is called by:
  5897 ;;		_calibration_routine
  5898 ;;		_reading_values
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           	psect	text33
  5903   0025D4                     __ptext33:
  5904                           	callstack 0
  5905   0025D4                     _color_read_Blue:
  5906                           	callstack 26
  5907   0025D4                     
  5908                           ;color.c: 60:  unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
  5909   0025D4  EC8D  F014         	call	_I2C_2_Master_Start	;wreg free
  5910                           
  5911                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  5912   0025D8  0E52               	movlw	82
  5913   0025DA  EC82  F014         	call	_I2C_2_Master_Write
  5914                           
  5915                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x1A);
  5916   0025DE  0EBA               	movlw	186
  5917   0025E0  EC82  F014         	call	_I2C_2_Master_Write
  5918                           
  5919                           ;color.c: 64:  I2C_2_Master_RepStart();
  5920   0025E4  EC92  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5921                           
  5922                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  5923   0025E8  0E53               	movlw	83
  5924   0025EA  EC82  F014         	call	_I2C_2_Master_Write
  5925                           
  5926                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  5927   0025EE  0E01               	movlw	1
  5928   0025F0  EC33  F013         	call	_I2C_2_Master_Read
  5929   0025F4  6E07               	movwf	??_color_read_Blue^0,c
  5930   0025F6  5007               	movf	??_color_read_Blue^0,w,c
  5931   0025F8  6E0A               	movwf	color_read_Blue@tmp^0,c
  5932   0025FA  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5933                           
  5934                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5935   0025FC  0E00               	movlw	0
  5936   0025FE  EC33  F013         	call	_I2C_2_Master_Read
  5937   002602  6E07               	movwf	??_color_read_Blue^0,c
  5938   002604  5007               	movf	??_color_read_Blue^0,w,c
  5939   002606  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5940   002608  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5941   00260A  500A               	movf	color_read_Blue@tmp^0,w,c
  5942   00260C  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5943   00260E  6E0A               	movwf	color_read_Blue@tmp^0,c
  5944   002610  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5945   002612  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5946   002614  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5947                           
  5948                           ;color.c: 68:  I2C_2_Master_Stop();
  5949   002616  EC88  F014         	call	_I2C_2_Master_Stop	;wreg free
  5950   00261A                     
  5951                           ;color.c: 69:  return tmp;
  5952   00261A  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5953   00261E  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5954   002622  0012               	return		;funcret
  5955   002624                     __end_of_color_read_Blue:
  5956                           	callstack 0
  5957                           
  5958 ;; *************** function _I2C_2_Master_Write *****************
  5959 ;; Defined at:
  5960 ;;		line 45 in file "i2c.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;  data_byte       1    wreg     unsigned char 
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;  data_byte       1    1[COMRAM] unsigned char 
  5965 ;; Return value:  Size  Location     Type
  5966 ;;                  1    wreg      void 
  5967 ;; Registers used:
  5968 ;;		wreg, status,2, status,0, cstack
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5977 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5978 ;;Total ram usage:        1 bytes
  5979 ;; Hardware stack levels used: 1
  5980 ;; Hardware stack levels required when called: 1
  5981 ;; This function calls:
  5982 ;;		_I2C_2_Master_Idle
  5983 ;; This function is called by:
  5984 ;;		_color_writetoaddr
  5985 ;;		_color_read_Red
  5986 ;;		_color_read_Green
  5987 ;;		_color_read_Blue
  5988 ;;		_color_read_Clear
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text34
  5993   002904                     __ptext34:
  5994                           	callstack 0
  5995   002904                     _I2C_2_Master_Write:
  5996                           	callstack 26
  5997                           
  5998                           ;incstack = 0
  5999                           ;I2C_2_Master_Write@data_byte stored from wreg
  6000   002904  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6001   002906                     
  6002                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6003   002906  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6004   00290A                     
  6005                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6006   00290A  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6007   00290E  0012               	return		;funcret
  6008   002910                     __end_of_I2C_2_Master_Write:
  6009                           	callstack 0
  6010                           
  6011 ;; *************** function _I2C_2_Master_Stop *****************
  6012 ;; Defined at:
  6013 ;;		line 39 in file "i2c.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;		None
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, status,2, status,0, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6031 ;;Total ram usage:        0 bytes
  6032 ;; Hardware stack levels used: 1
  6033 ;; Hardware stack levels required when called: 1
  6034 ;; This function calls:
  6035 ;;		_I2C_2_Master_Idle
  6036 ;; This function is called by:
  6037 ;;		_color_writetoaddr
  6038 ;;		_color_read_Red
  6039 ;;		_color_read_Green
  6040 ;;		_color_read_Blue
  6041 ;;		_color_read_Clear
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           	psect	text35
  6046   002910                     __ptext35:
  6047                           	callstack 0
  6048   002910                     _I2C_2_Master_Stop:
  6049                           	callstack 26
  6050   002910                     
  6051                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6052   002910  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6053   002914                     
  6054                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6055   002914  010E               	movlb	14	; () banked
  6056   002916  85DA               	bsf	218,2,b	;volatile
  6057   002918                     
  6058                           ; BSR set to: 14
  6059   002918  0012               	return		;funcret
  6060   00291A                     __end_of_I2C_2_Master_Stop:
  6061                           	callstack 0
  6062                           
  6063 ;; *************** function _I2C_2_Master_Start *****************
  6064 ;; Defined at:
  6065 ;;		line 27 in file "i2c.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;		None
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;		None
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  1    wreg      void 
  6072 ;; Registers used:
  6073 ;;		wreg, status,2, status,0, cstack
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6083 ;;Total ram usage:        0 bytes
  6084 ;; Hardware stack levels used: 1
  6085 ;; Hardware stack levels required when called: 1
  6086 ;; This function calls:
  6087 ;;		_I2C_2_Master_Idle
  6088 ;; This function is called by:
  6089 ;;		_color_writetoaddr
  6090 ;;		_color_read_Red
  6091 ;;		_color_read_Green
  6092 ;;		_color_read_Blue
  6093 ;;		_color_read_Clear
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           	psect	text36
  6098   00291A                     __ptext36:
  6099                           	callstack 0
  6100   00291A                     _I2C_2_Master_Start:
  6101                           	callstack 26
  6102   00291A                     
  6103                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6104   00291A  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6105   00291E                     
  6106                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6107   00291E  010E               	movlb	14	; () banked
  6108   002920  81DA               	bsf	218,0,b	;volatile
  6109   002922                     
  6110                           ; BSR set to: 14
  6111   002922  0012               	return		;funcret
  6112   002924                     __end_of_I2C_2_Master_Start:
  6113                           	callstack 0
  6114                           
  6115 ;; *************** function _I2C_2_Master_RepStart *****************
  6116 ;; Defined at:
  6117 ;;		line 33 in file "i2c.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, status,2, status,0, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6135 ;;Total ram usage:        0 bytes
  6136 ;; Hardware stack levels used: 1
  6137 ;; Hardware stack levels required when called: 1
  6138 ;; This function calls:
  6139 ;;		_I2C_2_Master_Idle
  6140 ;; This function is called by:
  6141 ;;		_color_read_Red
  6142 ;;		_color_read_Green
  6143 ;;		_color_read_Blue
  6144 ;;		_color_read_Clear
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           	psect	text37
  6149   002924                     __ptext37:
  6150                           	callstack 0
  6151   002924                     _I2C_2_Master_RepStart:
  6152                           	callstack 26
  6153   002924                     
  6154                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6155   002924  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6156   002928                     
  6157                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6158   002928  010E               	movlb	14	; () banked
  6159   00292A  83DA               	bsf	218,1,b	;volatile
  6160   00292C                     
  6161                           ; BSR set to: 14
  6162   00292C  0012               	return		;funcret
  6163   00292E                     __end_of_I2C_2_Master_RepStart:
  6164                           	callstack 0
  6165                           
  6166 ;; *************** function _I2C_2_Master_Read *****************
  6167 ;; Defined at:
  6168 ;;		line 51 in file "i2c.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;  ack             1    wreg     unsigned char 
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  ack             1    2[COMRAM] unsigned char 
  6173 ;;  tmp             1    3[COMRAM] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  1    wreg      unsigned char 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2, status,0, cstack
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6184 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6185 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6186 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6187 ;;Total ram usage:        3 bytes
  6188 ;; Hardware stack levels used: 1
  6189 ;; Hardware stack levels required when called: 1
  6190 ;; This function calls:
  6191 ;;		_I2C_2_Master_Idle
  6192 ;; This function is called by:
  6193 ;;		_color_read_Red
  6194 ;;		_color_read_Green
  6195 ;;		_color_read_Blue
  6196 ;;		_color_read_Clear
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text38
  6201   002666                     __ptext38:
  6202                           	callstack 0
  6203   002666                     _I2C_2_Master_Read:
  6204                           	callstack 26
  6205                           
  6206                           ; BSR set to: 14
  6207                           ;incstack = 0
  6208                           ;I2C_2_Master_Read@ack stored from wreg
  6209   002666  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6210   002668                     
  6211                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6212   002668  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6213   00266C                     
  6214                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6215   00266C  010E               	movlb	14	; () banked
  6216   00266E  87DA               	bsf	218,3,b	;volatile
  6217                           
  6218                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6219   002670  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6220   002674                     
  6221                           ;i2c.c: 57:   tmp = SSP2BUF;
  6222   002674  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6223                           
  6224                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6225   002678  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6226   00267C                     
  6227                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6228   00267C  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6229   00267E  B4D8               	btfsc	status,2,c
  6230   002680  EF44  F013         	goto	u2391
  6231   002684  EF48  F013         	goto	u2390
  6232   002688                     u2391:
  6233   002688  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6234   00268A  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6235   00268C  EF49  F013         	goto	u2408
  6236   002690                     u2390:
  6237   002690  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6238   002692                     u2408:
  6239   002692  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6240   002694  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6241   002696  010E               	movlb	14	; () banked
  6242   002698  51DA               	movf	218,w,b	;volatile
  6243   00269A  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6244   00269C  0BDF               	andlw	-33
  6245   00269E  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6246   0026A0  6FDA               	movwf	218,b	;volatile
  6247   0026A2                     
  6248                           ; BSR set to: 14
  6249                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6250   0026A2  89DA               	bsf	218,4,b	;volatile
  6251   0026A4                     
  6252                           ; BSR set to: 14
  6253                           ;i2c.c: 61:   return tmp;
  6254   0026A4  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6255   0026A6                     
  6256                           ; BSR set to: 14
  6257   0026A6  0012               	return		;funcret
  6258   0026A8                     __end_of_I2C_2_Master_Read:
  6259                           	callstack 0
  6260                           
  6261 ;; *************** function _I2C_2_Master_Idle *****************
  6262 ;; Defined at:
  6263 ;;		line 22 in file "i2c.c"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;		None
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;		None
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  1    wreg      void 
  6270 ;; Registers used:
  6271 ;;		wreg, status,2, status,0
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6279 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6280 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6281 ;;Total ram usage:        1 bytes
  6282 ;; Hardware stack levels used: 1
  6283 ;; This function calls:
  6284 ;;		Nothing
  6285 ;; This function is called by:
  6286 ;;		_I2C_2_Master_Start
  6287 ;;		_I2C_2_Master_RepStart
  6288 ;;		_I2C_2_Master_Stop
  6289 ;;		_I2C_2_Master_Write
  6290 ;;		_I2C_2_Master_Read
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text39
  6295   002846                     __ptext39:
  6296                           	callstack 0
  6297   002846                     _I2C_2_Master_Idle:
  6298                           	callstack 26
  6299   002846                     l141:
  6300   002846  010E               	movlb	14	; () banked
  6301   002848  B5D8               	btfsc	216,2,b	;volatile
  6302   00284A  EF29  F014         	goto	u2361
  6303   00284E  EF2B  F014         	goto	u2360
  6304   002852                     u2361:
  6305   002852  EF23  F014         	goto	l141
  6306   002856                     u2360:
  6307   002856                     
  6308                           ; BSR set to: 14
  6309   002856  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6310   00285A  0E1F               	movlw	31
  6311   00285C  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6312   00285E  A4D8               	btfss	status,2,c
  6313   002860  EF34  F014         	goto	u2371
  6314   002864  EF36  F014         	goto	u2370
  6315   002868                     u2371:
  6316   002868  EF23  F014         	goto	l141
  6317   00286C                     u2370:
  6318   00286C                     
  6319                           ; BSR set to: 14
  6320   00286C  0012               	return		;funcret
  6321   00286E                     __end_of_I2C_2_Master_Idle:
  6322                           	callstack 0
  6323                           
  6324 ;; *************** function _ADC_init *****************
  6325 ;; Defined at:
  6326 ;;		line 9 in file "ADC.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;		None
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  1    wreg      void 
  6333 ;; Registers used:
  6334 ;;		wreg, status,2
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6344 ;;Total ram usage:        0 bytes
  6345 ;; Hardware stack levels used: 1
  6346 ;; This function calls:
  6347 ;;		Nothing
  6348 ;; This function is called by:
  6349 ;;		_main
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text40
  6354   0028D2                     __ptext40:
  6355                           	callstack 0
  6356   0028D2                     _ADC_init:
  6357                           	callstack 30
  6358   0028D2                     
  6359                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  6360   0028D2  8C86               	bsf	134,6,c	;volatile
  6361                           
  6362                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  6363   0028D4  010E               	movlb	14	; () banked
  6364   0028D6  8DB4               	bsf	180,6,b	;volatile
  6365                           
  6366                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  6367   0028D8  010F               	movlb	15	; () banked
  6368   0028DA  9958               	bcf	88,4,b	;volatile
  6369   0028DC                     
  6370                           ; BSR set to: 15
  6371                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  6372   0028DC  0EFC               	movlw	-4
  6373   0028DE  1758               	andwf	88,f,b	;volatile
  6374                           
  6375                           ;ADC.c: 17:     ADPCH=0b101110;
  6376   0028E0  0E2E               	movlw	46
  6377   0028E2  6F5F               	movwf	95,b	;volatile
  6378   0028E4                     
  6379                           ; BSR set to: 15
  6380                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  6381   0028E4  9460               	bcf	96,2,c	;volatile
  6382   0028E6                     
  6383                           ; BSR set to: 15
  6384                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  6385   0028E6  8860               	bsf	96,4,c	;volatile
  6386   0028E8                     
  6387                           ; BSR set to: 15
  6388                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  6389   0028E8  8E60               	bsf	96,7,c	;volatile
  6390   0028EA                     
  6391                           ; BSR set to: 15
  6392   0028EA  0012               	return		;funcret
  6393   0028EC                     __end_of_ADC_init:
  6394                           	callstack 0
  6395                           
  6396                           	psect	rparam
  6397   000000                     
  6398                           	psect	config
  6399                           
  6400                           ;Config register CONFIG1L @ 0x300000
  6401                           ;	External Oscillator mode Selection bits
  6402                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6403                           ;	Power-up default value for COSC bits
  6404                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6405   300000                     	org	3145728
  6406   300000  AA                 	db	170
  6407                           
  6408                           ;Config register CONFIG1H @ 0x300001
  6409                           ;	unspecified, using default values
  6410                           ;	Clock Out Enable bit
  6411                           ;	CLKOUTEN = 0x1, unprogrammed default
  6412                           ;	Clock Switch Enable bit
  6413                           ;	CSWEN = 0x1, unprogrammed default
  6414                           ;	Fail-Safe Clock Monitor Enable bit
  6415                           ;	FCMEN = 0x1, unprogrammed default
  6416   300001                     	org	3145729
  6417   300001  FF                 	db	255
  6418                           
  6419                           ;Config register CONFIG3L @ 0x300004
  6420                           ;	WDT Period Select bits
  6421                           ;	WDTCPS = 0x1F, unprogrammed default
  6422                           ;	WDT operating mode
  6423                           ;	WDTE = OFF, WDT Disabled
  6424   300004                     	org	3145732
  6425   300004  9F                 	db	159
  6426                           
  6427                           ;Config register CONFIG3H @ 0x300005
  6428                           ;	unspecified, using default values
  6429                           ;	WDT Window Select bits
  6430                           ;	WDTCWS = 0x7, unprogrammed default
  6431                           ;	WDT input clock selector
  6432                           ;	WDTCCS = 0x7, unprogrammed default
  6433   300005                     	org	3145733
  6434   300005  FF                 	db	255
  6435                           tosu	equ	0xFFF
  6436                           tosh	equ	0xFFE
  6437                           tosl	equ	0xFFD
  6438                           stkptr	equ	0xFFC
  6439                           pclatu	equ	0xFFB
  6440                           pclath	equ	0xFFA
  6441                           pcl	equ	0xFF9
  6442                           tblptru	equ	0xFF8
  6443                           tblptrh	equ	0xFF7
  6444                           tblptrl	equ	0xFF6
  6445                           tablat	equ	0xFF5
  6446                           prodh	equ	0xFF4
  6447                           prodl	equ	0xFF3
  6448                           indf0	equ	0xFEF
  6449                           postinc0	equ	0xFEE
  6450                           postdec0	equ	0xFED
  6451                           preinc0	equ	0xFEC
  6452                           plusw0	equ	0xFEB
  6453                           fsr0h	equ	0xFEA
  6454                           fsr0l	equ	0xFE9
  6455                           wreg	equ	0xFE8
  6456                           indf1	equ	0xFE7
  6457                           postinc1	equ	0xFE6
  6458                           postdec1	equ	0xFE5
  6459                           preinc1	equ	0xFE4
  6460                           plusw1	equ	0xFE3
  6461                           fsr1h	equ	0xFE2
  6462                           fsr1l	equ	0xFE1
  6463                           bsr	equ	0xFE0
  6464                           indf2	equ	0xFDF
  6465                           postinc2	equ	0xFDE
  6466                           postdec2	equ	0xFDD
  6467                           preinc2	equ	0xFDC
  6468                           plusw2	equ	0xFDB
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8

Data Sizes:
    Strings     244
    Constant    0
    Data        1
    BSS         176
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      95
    BANK0           160    156     160
    BANK1           256      2     174
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    ADC2String@buf	PTR unsigned char  size(1) Largest target is 50
		 -> send2USART@buf(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    calibration_routine@cCal	PTR struct colors size(2) Largest target is 8
		 -> colorCalibration(BANK1[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(2) Largest target is 8
		 -> colorCurrent(BANK1[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(2) Largest target is 8
		 -> colorCalibration(BANK1[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_values@cCurr	PTR struct colors size(2) Largest target is 8
		 -> colorCurrent(BANK1[8]), 

    S2445$buffer	PTR unsigned char  size(2) Largest target is 0

    S2445$source	PTR const unsigned char  size(2) Largest target is 0

    S564DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S564DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@buf(BANK0[50]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 
		 -> test@led_state(BANK0[50]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 34
		 -> STR_1(CODE[17]), STR_11(CODE[34]), STR_13(CODE[25]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[24]), STR_7(CODE[29]), STR_9(CODE[27]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@buf(BANK0[50]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 
		 -> test@led_state(BANK0[50]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 34
		 -> STR_1(CODE[17]), STR_11(CODE[34]), STR_13(CODE[25]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[24]), STR_7(CODE[29]), STR_9(CODE[27]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 34
		 -> STR_1(CODE[17]), STR_11(CODE[34]), STR_13(CODE[25]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[24]), STR_7(CODE[29]), STR_9(CODE[27]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 34
		 -> STR_1(CODE[17]), STR_11(CODE[34]), STR_13(CODE[25]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[24]), STR_7(CODE[29]), STR_9(CODE[27]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_test
    _test->_convert_rgb2hue
    _send2USART->_ADC2String
    _ADC2String->_sprintf
    _reading_values->_color_read_Blue
    _reading_values->_color_read_Clear
    _reading_values->_color_read_Green
    _reading_values->_color_read_Red
    _convert_rgb2hue->___lodiv
    ___lwdiv->___wmul
    ___lodiv->___omul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_test
    _test->_send2USART

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   59928
                                            154 BANK0      2     2      0
                                              0 BANK1      2     2      0
                           _ADC_init
                _calibration_routine
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                               _test
 ---------------------------------------------------------------------------------
 (1) _test                                                57    55      2   46314
                                             91 COMRAM     3     1      2
                                            100 BANK0     54    54      0
                    _convert_rgb2hue
                     _reading_values
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _send2USART                                         104   100      4   26591
                                             76 COMRAM     4     0      4
                                              0 BANK0    100   100      0
                         _ADC2String
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _ADC2String                                           9     6      3   14384
                                             67 COMRAM     9     6      3
                            ___lwdiv
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _reading_values                                       2     0      2     870
                                             11 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                     82    78      4    6528
                                             49 COMRAM    42    38      4
                                              0 BANK0     40    40      0
                            ___lodiv
                            ___lwdiv
                             ___omul
 ---------------------------------------------------------------------------------
 (3) ___omul                                              24     8     16    1716
                                              0 COMRAM    24     8     16
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4    1921
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lodiv                                             25     9     16     481
                                             24 COMRAM    25     9     16
                             ___omul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 24    22      2   13003
                                             67 COMRAM    24    22      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10899
                                             48 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    8607
                                             44 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8119
                                             33 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1452
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1012
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             22 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             14 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              8 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     906
                                              1 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      31
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      65
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _test
     _convert_rgb2hue
       ___lodiv
         ___omul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___omul
     _reading_values
       _color_read_Blue
       _color_read_Clear
       _color_read_Green
       _color_read_Red
     _send2USART
       _ADC2String
         ___lwdiv
         ___wmul
         _sprintf
       _sendStringSerial4
       _sprintf
     _sendStringSerial4
     _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      2      AE       7       68.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9C      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5F       1      100.0%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllhll     37      0       0      45        0.0%
BITBIGSFRlllhhl     31      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllllh     20      0       0      48        0.0%
BITBIGSFRllllll     1E      0       0      50        0.0%
BITBIGSFRhhll       17      0       0      36        0.0%
BITBIGSFRlllhhh     14      0       0      40        0.0%
BITBIGSFRllllll     11      0       0      51        0.0%
BITBIGSFRllllll      F      0       0      58        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRlllllh      C      0       0      49        0.0%
BITBIGSFRllllll      9      0       0      57        0.0%
BITBIGSFRlllhll      8      0       0      46        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRlllhhh      6      0       0      42        0.0%
BITBIGSFRllllll      5      0       0      54        0.0%
BITBIGSFRhlhh        5      0       0      37        0.0%
BITBIGSFRlllhhh      3      0       0      41        0.0%
BITBIGSFRllllll      3      0       0      53        0.0%
BITBIGSFRlllhlh      2      0       0      44        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      52        0.0%
BITBIGSFRhllh        1      0       0      38        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRllllh       1      0       0      47        0.0%
BITBIGSFRllh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1AD      61        0.0%
DATA                 0      0     1AD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Mar 12 12:11:43 2024

               _color_read_Red 24E4                _color_read_Blue 25D4                             l53 2750  
                           l62 2582                             l56 28B2                             l65 2622  
                           l81 1702                             l90 1D16                             l59 2532  
                           l68 25D2                             l93 172A                             l95 1738  
                           l96 1788                             l98 1796                             l99 17EA  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003             convert_rgb2hue@hue 0068  
             _color_read_Clear 2584               _color_read_Green 2534                            l101 17F8  
                          l102 184C                            l104 185A                            l105 18B6  
                          l108 24E2                            l141 2846                            l150 292C  
                          l144 286C                            l153 2918                            l313 2410  
                          l138 2844                            l147 2922                            l252 28EA  
                          l156 290E                            l405 28D0                            l414 28EE  
                          l159 26A6                            l423 27EA                            l417 2902  
                          l702 1FA2                            l471 2892                            l465 224C  
                          l715 2052                            l468 271C                            l488 22CA  
                          l489 22EA                            l916 1E06                            l909 1DE6  
                          l962 247C                            l969 2484                            _abs 2786  
                          _pad 22EC            convert_rgb2hue@cMax 0032                   ___awmod@sign 0006  
                          wreg 0FE8                           ?_abs 0007                           l1213 1A42  
                         l1223 27A0                           l1226 27B8                           l1219 2664  
                         l1172 2360                           l1149 2784                           l1238 21AA  
                         l1246 26E6                           l1174 2380                           l1190 1BBA  
                         l3201 1F3A                           l1249 292E                           l1169 2322  
                         l1177 1AA2                           l1194 20F8                           l3211 1F74  
                         l3203 1F42                           l3221 1F9A                           l3213 1F76  
                         l3205 1F50                           l3301 1AB4                           l1198 2100  
                         l3215 1F7C                           l3207 1F56                           l3231 1FBE  
                         l3303 1ABA                           l3311 1B12                           l3209 1F6C  
                         l3217 1F82                           l3241 1FF2                           l3233 1FC2  
                         l3225 1FA4                           l3161 2148                           l3153 2102  
                         l3313 1B2C                           l3321 1B78                           l3305 1AEC  
                         l3219 1F92                           l3251 202C                           l3243 1FFA  
                         l3235 1FD0                           l3227 1FA8                           l3163 217A  
                         l3155 2112                           l3171 26C2                           l3323 1B88  
                         l3315 1B3E                           l3307 1AF0                           l3331 2054  
                         l3411 262C                           l3405 2846                           l3421 291E  
                         l3501 261A                           l3181 1EE0                           l3245 2008  
                         l3253 2032                           l3237 1FD8                           l3229 1FB6  
                         l3157 2122                           l3173 26C6                           l3261 22EC  
                         l3325 1B8E                           l3317 1B4E                           l3309 1AF6  
                         l3341 20C6                           l3333 205C                           l4053 1940  
                         l3413 263C                           l3407 2856                           l3431 2924  
                         l3423 2906                           l3511 27BA                           l3191 1F0C  
                         l3183 1EE4                           l3255 2042                           l3247 201E  
                         l3239 1FEA                           l3159 212C                           l3167 26A8  
                         l3271 233E                           l3263 22FC                           l3327 1B9E  
                         l3319 1B68                           l3175 286E                           l3335 2082  
                         l3343 20CE                           l3351 18F4                           l3415 265C  
                         l3441 267C                           l3433 2928                           l3425 290A  
                         l3505 2584                           l3513 27BE                           l3193 1F14  
                         l3185 1EF2                           l3257 204A                           l3249 2026  
                         l3169 26B4                           l3273 2342                           l3265 230C  
                         l3281 1A44                           l3177 288A                           l3337 208A  
                         l3353 18F8                           l3345 18B8                           l3409 2624  
                         l3601 1222                           l3443 26A2                           l3435 2668  
                         l3419 291A                           l3427 2910                           l3507 25CA  
                         l3515 27CA                           l3195 1F18                           l3187 1EFA  
                         l3275 2370                           l3267 231A                           l3291 1A7A  
                         l3283 1A48                           l3339 20A6                           l3371 1982  
                         l3363 1918                           l3355 1900                           l3347 18DE  
                         l3451 275A                           l3611 15A2                           l3603 153A  
                         l3445 26A4                           l3437 266C                           l3429 2914  
                         l3461 28EE                           l3517 27CC                           l3197 1F20  
                         l3189 1EFE                           l3277 2786                           l3269 232E  
                         l3293 1A8A                           l3285 1A5C                           l3381 19F2  
                         l3373 1990                           l3357 1904                           l3365 194E  
                         l3349 18E6                           l3453 2762                           l3621 1622  
                         l3613 15C2                           l3605 1560                           l3541 2218  
                         l3701 1BBC                           l3439 2674                           l3463 28FE  
                         l3519 27D4                           l3199 1F32                           l3279 2794  
                         l3295 1A96                           l3287 1A64                           l3383 19FC  
                         l3375 199A                           l3367 195E                           l3359 1910  
                         l3391 1A1C                           l3455 276A                           l3471 2434  
                         l3551 2288                           l3631 16A2                           l3623 1642  
                         l3607 1576                           l3615 15DE                           l3543 2234  
                         l3711 1BDE                           l3801 28E8                           l3297 1A9E  
                         l3289 1A74                           l3377 19BA                           l3369 1972  
                         l3457 277A                           l3449 2752                           l3561 1D4A  
                         l3481 246E                           l3473 243C                           l3465 2412  
                         l3553 229A                           l3545 224E                           l3633 16D0  
                         l3617 15F6                           l3625 165E                           l3609 158C  
                         l3537 21AC                           l3641 26E8                           l3721 1C5A  
                         l3713 1C04                           l3299 1AAA                           l3387 1A10  
                         l3379 19DA                           l3811 28CC                           l3803 28B4  
                         l3571 1DCC                           l3563 1D5E                           l3555 1D18  
                         l3483 2470                           l3475 244A                           l3467 241A  
                         l3547 225A                           l3635 16FA                           l3627 1676  
                         l3619 160C                           l3539 21C8                           l3643 270C  
                         l3731 1CB6                           l3723 1C60                           l3715 1C18  
                         l3707 1BC6                           l3493 2534                           l3581 282C  
                         l3821 23BC                           l3813 28CE                           l3805 28BE  
                         l3573 1DCE                           l3565 1D6C                           l3557 1D24  
                         l3485 2476                           l3477 2450                           l3469 242C  
                         l3549 2268                           l3629 168C                           l3645 2714  
                         l3741 1D00                           l3733 1CBE                           l3725 1C86  
                         l3717 1C1E                           l3709 1BD8                           l3901 1E26  
                         ?_pad 000F                           l3495 257A                           l3487 24E4  
                         l3751 1752                           l3743 1704                           l3583 282E  
                         l3831 23F8                           l3823 23E0                           l3815 2382  
                         l3807 28C0                           l3575 1DE0                           l3567 1D7E  
                         l3559 1D42                           l3479 2466                           l3591 0EF6  
                         l3639 2486                           l3735 1CCA                           l3727 1C9C  
                         l3719 1C44                           l3911 1E46                           l3903 1E2A  
                         l3489 252A                           l3761 17B0                           l3753 1766  
                         l3745 170A                           l3585 2830                           l3577 281C  
                         l3833 2402                           l3825 23EA                           l3817 2392  
                         l3809 28CA                           l3569 1DAC                           l3593 11EC  
                         l3737 1CE6                           l3729 1CA2                           l3921 1E6C  
                         l3913 1E4A                           l3905 1E2E                           l3499 25D4  
                         l3771 1812                           l3763 17C8                           l3755 1768  
                         l3747 1722                           l3587 2832                           l3579 2826  
                         l3691 271E                           l3835 2404                           l3827 23EC  
                         l3819 23B8                           l3595 11F4                           l3739 1CFA  
                         l3931 1E76                           l3923 1E6E                           l3915 1E4E  
                         l3907 1E36                           l3781 1878                           l3773 182A  
                         l3765 17CA                           l3757 1780                           l3749 173A  
                         l3589 2896                           l3693 2722                           l3837 240E  
                         l3829 23F6                           l3597 11FC                           l3941 1E80  
                         l3933 1E78                           l3925 1E70                           l3917 1E52  
                         l3909 1E3E                           l3791 18AE                           l3783 1890  
                         l3775 182C                           l3767 17E2                           l3759 1798  
                         l3695 272C                           l3599 1204                           l3951 1EA2  
                         l3943 1E82                           l3935 1E7A                           l3927 1E72  
                         l3919 1E6A                           l3793 28D2                           l3785 1892  
                         l3777 1844                           l3769 17FA                           l3697 273C  
                         l3953 1EA6                           l3945 1E9C                           l3937 1E7C  
                         l3929 1E74                           l3795 28DC                           l3787 1894  
                         l3779 1860                           l3699 2746                           l3955 1EB2  
                         l3947 1E9E                           l3939 1E7E                           l3891 1E0C  
                         l3797 28E4                           l3789 1896                           l3957 1ECC  
                         l3949 1EA0                           l3893 1E10                           l3799 28E6  
                         l3895 1E14                           l3897 1E14                           l3889 1E08  
                         l3899 1E20                           STR_1 0EB4                           STR_2 0EA1  
                         STR_3 0ED6                           STR_4 0EC5                           STR_5 0E74  
                         STR_6 0EF3                           STR_7 0E23                           STR_8 0EF3  
                         STR_9 0E40                           u2000 217A                           u2001 2176  
                         u2010 26E6                           u2011 26E2                           u2020 1EF2  
                         u2100 1FEA                           u2021 1EEE                           u2101 1FE6  
                         u2030 1F0C                           u2110 2008                           u2031 1F08  
                         u2111 2004                           u2040 1F32                           u2120 201E  
                         u2200 1A5A                           u2041 1F2E                           u2121 201A  
                         u2050 1F50                           u2130 2042                           u2210 1A74  
                         u2051 1F4C                           u2131 203E                           u2211 1A70  
                         u2060 1F6C                           u2140 22FC                           u2220 1A8A  
                         u2300 20F8                           u2061 1F68                           u2141 22F8  
                         u2221 1A86                           u2301 20F4                           u2070 1F92  
                         u2150 231A                           u2230 1B2C                           u2310 18DE  
                         u2071 1F8E                           u2151 2316                           u2231 1B28  
                         u2311 18DA                           u2080 1FB6                           u2160 2360  
                         u2240 1B3E                           u2320 195E                   _BAUD4CONbits 0EE9  
                         u2081 1FB2                           u2161 235C                           u2241 1B3A  
                         u2321 195A                           u2410 28FE                           u2090 1FD0  
                         u2170 2370                           u2250 1B4E                           u2330 1982  
                         u2411 28FA                           u2091 1FCC                           u2171 236C  
                         u2251 1B4A                           u2331 197E                           u2180 2794  
                         u2260 1B68                           u2340 19BA                           u2420 242C  
                         u2500 22CA                           u2181 2790                           u2261 1B64  
                         u2341 19B6                           u2421 2428                           u2501 22C6  
                         u2270 1B78                           u2190 1A58                           u2350 19DA  
                         u2430 244A                           u2271 1B74                           u2191 1A52  
                         u2351 19D6                           u2511 1D1E                           u2431 2446  
                         u2360 2856                           u2408 2692                           u2280 1B88  
                         u2520 1D42                           u2440 2466                           u2600 160C  
                         u2361 2852                           u2281 1B84                           u2521 1D3E  
                         u2441 2462                           u2601 1608                           u2370 286C  
                         u2450 27EA                           u2290 2082                           u2530 1D6C  
                         u2610 1622                           _T2PR 0FBC                           u2371 2868  
                         u2451 27E6                           u2291 207E                           u2531 1D68  
                         u2611 161E                           u2380 265C                           u2540 1DAC  
                         u2620 1676                           u2700 1BD8                           u2381 2658  
                         u2541 1DA8                           u2621 1672                           u2701 1BD4  
                         u2390 2690                           u2630 168C                           u2550 1222  
                         u2710 1BF8                           u2391 2688                           u2631 1688  
                         u2551 121E                           u2711 1BF0                           u2800 17F8  
                         u2640 16A2                           u2560 1576                           u2720 1C18  
                         u2801 17F4                           u2481 2254                           u2641 169E  
                         u2561 1572                           u2721 1C14                           u2810 185A  
                         u2490 2268                           u2570 158C                           u2730 1C38  
                         u2811 1856                           u2491 2264                           u2571 1588  
                         u2731 1C30                           u2580 15A2                           u2740 1C5A  
                         u2581 159E                           u2741 1C56                           u2590 15F6  
                         u2750 1C7A                           u2718 1BFA                           u2591 15F2  
                         u2751 1C72                           u2760 1C9C                           u2761 1C98  
                         u1970 2112                           u2770 1D16                           u2738 1C3A  
                         u1971 210E                           u2907 1744                           u2771 1D12  
                         u1980 2122                           u2780 1738                           u1981 211E  
                         u2917 17A2                           u2781 1734                           u1990 2148  
                         u2790 1796                           u2758 1C7C                           u1991 2144  
                         u2927 1804                           u2791 1792                           u2937 186A  
                         u2947 27CE                           u2867 1E8E                           u2877 1EBE  
                         u2887 223E                           u2897 2732                           abs@a 0007  
                         _dbuf 0169                           _main 1E08                           _dtoa 1A44  
         convert_rgb2hue@cCurr 0034                           _prec 0166                           _test 1BBC  
                         pad@i 0015                           pad@p 0012                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           prodh 0FF4                           prodl 0FF3  
                         start 0000               __end_of_ADC_init 28EC           convert_rgb2hue@total 006A  
       __end_of_color_read_Red 2534                   ___param_bank 0000                          ??_abs 0009  
                        ??_pad 0014                          ?_main 0001                          ?_dtoa 0017  
                        _ADPCH 0F5F                __end_of___awdiv 1FA4                          STR_10 0EF3  
                        STR_11 0E01                          STR_12 0EF3                          STR_13 0E5B  
                        STR_14 0EF3                          STR_15 0E8C                          STR_16 0EE7  
              __end_of___awmod 2054                          ?_test 005C                __end_of___lodiv 1E08  
              ___awdiv@divisor 0003                __end_of___lwdiv 2486                ___awdiv@counter 0005  
            ??_convert_rgb2hue 0036                   vfpfcnvrt@fmt 0023        __end_of_sendCharSerial4 2904  
   __end_of_I2C_2_Master_Start 2924     __end_of_I2C_2_Master_Write 2910                          _flags 00FC  
          read_prec_or_width@c 0009            read_prec_or_width@n 000A                          _fputc 2102  
                        _fputs 26A8                          pad@fp 000F                          _width 0164  
                        _putch 292E                          dtoa@d 0018                          dtoa@i 0020  
                        dtoa@p 001C                          dtoa@s 001F                          dtoa@w 001D  
                        tablat 0FF5                          status 0FD8                __end_of_sprintf 2786  
             ___lodiv@dividend 0019        __end_of_color_read_Blue 2624          _I2C_2_Master_RepStart 2924  
              ?_color_read_Red 0005                __initialization 27EC                   __end_of_main 1EE0  
                 __end_of_dtoa 1BBC                   __end_of_test 1D18                   ??_ADC2String 0047  
             ??_reading_values 000E                         ??_main 00FA                         ??_dtoa 001A  
                       ??_test 005E                  __activetblptr 0003     __end_of_read_prec_or_width 2102  
             ___lodiv@quotient 0029                         ?_fputc 0001                         ?_fputs 0009  
                       _ADRESH 0F64                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21                  ADC2String@buf 0044  
             ___awdiv@dividend 0001                         ?_putch 0001                         _RC0PPS 0E62  
                       _RC4REG 0EE3                         _RE2PPS 0E74                         _RD5PPS 0E6F  
                       _RC7PPS 0E69            ADC2String@frac_part 0049                         _RE4PPS 0E76  
                       _RD6PPS 0E70                         _RG6PPS 0E88                  vfpfcnvrt@done 002B  
     __end_of_color_click_init 2752                         _RX4PPS 0E15             __end_of_ADC2String 224E  
                       _TX4REG 0EE4                   _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0030  
                       ___omul 224E                         ___wmul 286E                      ??___awdiv 0005  
                    ??___awmod 0005                      ??___lodiv 0029                      ??___lwdiv 000B  
         read_prec_or_width@ap 0008                         clear_0 2804               ___awdiv@quotient 0007  
              ___awmod@divisor 0003                         _motorL 0192                         _motorR 0189  
                       isa$std 0001                ___awmod@counter 0005             send2USART@hue_char 0092  
                       pad@buf 0010                         dtoa@fp 0017                         fputc@c 0001  
                       fputs@c 000C                         fputs@i 000D                         fputs@s 0009  
                 __mediumconst 0000        calibration_routine@cCal 0044                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8                      ?_ADC_init 0001  
             ?_sendCharSerial4 0001                         putch@c 0001               __end_of_vfprintf 2666  
            ??_initDCmotorsPWM 0003                      ??_sprintf 0037                     __accesstop 0060  
      __end_of__initialization 2816       __end_of_color_read_Clear 25D4       __end_of_color_read_Green 2584  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001               ?_color_read_Blue 0005  
               __pcstackCOMRAM 0001                   __pidataBANK1 2930                  __end_of_fputc 21AC  
                __end_of_fputs 26E8                  __end_of_putch 2930                     ??_ADC_init 0001  
                      ??_fputc 0004                        ??_fputs 000C                        ??_putch 0001  
                   __pbssBANK0 00FC                     __pbssBANK1 0100              _color_writetoaddr 2894  
                 _T2CLKCONbits 0FBF                _convert_rgb2hue 0EF6             ?_color_writetoaddr 0003  
                      ?___omul 0001                        ?___wmul 0001            ___omul@multiplicand 0009  
          ??_color_writetoaddr 0004                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
            main@battery_level 01AB                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
       color_writetoaddr@value 0003               ??_color_read_Red 0007        send2USART@battery_level 004D  
    __end_of_color_writetoaddr 28B4                      _ADREFbits 0F58             _I2C_2_Master_Start 291A  
                   _initUSART4 28B4             _I2C_2_Master_Write 2904                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 000A        sendStringSerial4@string 0002  
                      ___awdiv 1EE0                        ___awmod 1FA4                        ___lodiv 1D18  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 2412            ?_I2C_2_Master_Write 0001  
                    ?_vfprintf 002D                   __psmallconst 0E00                        __pcinit 27EC  
                      __ramtop 0E00                     _send2USART 26E8                        __ptext0 1E08  
                      __ptext1 1BBC                        __ptext2 26E8                        __ptext3 21AC  
                      __ptext4 2486                        __ptext5 0EF6                        __ptext6 224E  
                      __ptext7 2412                        __ptext8 1D18                        __ptext9 28B4  
                    _T2CONbits 0FBD          read_prec_or_width@fmt 0007               ___awmod@dividend 0001  
                    _T2HLTbits 0FBE                  _RxBufWriteCnt 00FF                        _sprintf 2752  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 2816  
               ___omul@product 0011                        fputc@fp 0003        __end_of_convert_rgb2hue 1704  
                      fputs@fp 000B              ?_color_click_init 0001             _read_prec_or_width 2054  
           ??_color_click_init 0005               _colorCalibration 01A3                        test@hue 00F6  
            __end_of_vfpfcnvrt 1A44                        postdec2 0FDD            ?_read_prec_or_width 0007  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0027                     ??_vfprintf 0030                   _colorCurrent 019B  
              _initDCmotorsPWM 2382                      _PORTFbits 0F8E                      _TRISAbits 0F81  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
             convert_rgb2hue@b 0082           ??_read_prec_or_width 0009               convert_rgb2hue@g 0086  
             convert_rgb2hue@r 0084       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
                  _CCP1CONbits 0FAB            _calibration_routine 1704              ?_color_read_Clear 0005  
                 _EUSART4RXbuf 0150                   _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0005                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001             ??_color_read_Clear 0007  
           ??_color_read_Green 0007                 __end_of___omul 22EC                    vfpfcnvrt@ap 0024  
                  vfpfcnvrt@cp 002C                    vfpfcnvrt@fp 0022                 __end_of___wmul 2894  
                  ?_send2USART 004D           ?_calibration_routine 0044            color_read_Clear@tmp 000A  
          start_initialization 27EC                ___lodiv@divisor 0021                ___lodiv@counter 0031  
 calibration_routine@cal_state 0048                    __end_of_abs 27BA                    __end_of_pad 2382  
                _TxBufWriteCnt 005F              ___omul@multiplier 0001               ?_convert_rgb2hue 0032  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 2412                    vfprintf@fmt 002E  
           ADC2String@int_part 004B                       ??___omul 0011                       ??___wmul 0005  
                  __pdataBANK1 01AD          ??_calibration_routine 0046                    __pbssCOMRAM 005F  
                __pcstackBANK0 0060                  __pcstackBANK1 01AB               ___lwdiv@dividend 0007  
                    _dtoa$2524 001A                       ?___awdiv 0001                       ?___awmod 0001  
                     ?___lodiv 0019                       ?___lwdiv 0007                   _readingIndex 0168  
         I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004                    __smallconst 0E00  
            _I2C_2_Master_Idle 2846              _I2C_2_Master_Init 281C              _I2C_2_Master_Read 2666  
            _I2C_2_Master_Stop 2910                   _RxBufReadCnt 00FE                       _ADC_init 28D2  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0001  
                     ?_sprintf 0031              _sendStringSerial4 27BA            ??_I2C_2_Master_Idle 0001  
          ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002                 ___wmul@product 0005  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0002                       _LATCbits 0F7B  
                     _LATDbits 0F7C                       _LATEbits 0F7D                       _LATFbits 0F7E  
                     _LATGbits 0F7F                       _LATHbits 0F80           _convert_rgb2hue$2845 0072  
         _convert_rgb2hue$2846 007A           _convert_rgb2hue$2847 0060              ADC2String@ADC_val 0045  
           ?_sendStringSerial4 0002                       _PIE4bits 0E2D                       _PIR4bits 0E37  
          reading_values@cCurr 000C               ?_initDCmotorsPWM 0001              ??_sendCharSerial4 0001  
                     _SSP2CON2 0EDA            ??_sendStringSerial4 0003                       _SSP2STAT 0ED8  
                   _ADC2String 21AC                      _vfpfcnvrt 18B8                     _ADCON0bits 0F60  
    __end_of_I2C_2_Master_Idle 286E      __end_of_I2C_2_Master_Init 2846      __end_of_I2C_2_Master_Read 26A8  
            ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 291A    I2C_2_Master_Write@data_byte 0002  
                  _ldrReadings 013C              ??_color_read_Blue 0007                   _TxBufReadCnt 00FD  
               _reading_values 2486      __end_of_sendStringSerial4 27EC  __end_of_I2C_2_Master_RepStart 292E  
           color_read_Blue@tmp 000A                   ??_initUSART4 0001                       __Hrparam 0000  
                   vfprintf@ap 002F                       __Lrparam 0000                     vfprintf@fp 002D  
                   ?_vfpfcnvrt 0022                   ??_send2USART 0051                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                       _dataFlag 01AD                     sprintf@fmt 0032  
       __end_of_reading_values 24E4                  test@led_state 00C4                ___lwdiv@divisor 0009  
           __end_of_initUSART4 28D2                ___lwdiv@counter 000B                       __ptext10 2382  
                     __ptext11 271E                       __ptext20 1A44                       __ptext12 2894  
                     __ptext21 22EC                       __ptext13 281C                       __ptext30 24E4  
                     __ptext22 26A8                       __ptext14 1704                       __ptext31 2534  
                     __ptext23 2102                       __ptext15 2752                       __ptext40 28D2  
                     __ptext32 2584                       __ptext24 292E                       __ptext16 2624  
                     __ptext33 25D4                       __ptext25 2786                       __ptext17 18B8  
                     __ptext34 2904                       __ptext26 1FA4                       __ptext18 2054  
                     __ptext35 2910                       __ptext27 1EE0                       __ptext19 286E  
                     __ptext36 291A                       __ptext28 27BA                       __ptext37 2924  
                     __ptext29 28EC                       __ptext38 2666                       __ptext39 2846  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA             __end_of_send2USART 271E  
                    test@combo 00F8                       isa$xinst 0000                     _RC4STAbits 0EE7  
                  ?_ADC2String 0044                       _vfprintf 2624                ?_reading_values 000C  
            test@battery_level 005C                      sprintf@ap 0037    __end_of_calibration_routine 18B8  
                send2USART@buf 0060                  send2USART@hue 004F                    ??_vfpfcnvrt 0025  
             _color_click_init 271E                       sprintf@f 0038                       sprintf@s 0031  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                     _TX4STAbits 0EE8  
              _sendCharSerial4 28EC  
