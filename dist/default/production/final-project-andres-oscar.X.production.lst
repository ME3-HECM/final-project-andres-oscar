

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Mar 12 23:09:20 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=3
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=3
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=3
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=3
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=3
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    73   000000                     
    74                           ; Generated 21/07/2023 GMT
    75                           ; 
    76                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution. Publication is not required when
    90                           ;        this file is used in an embedded application.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F67K40 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108   000000                     
   109                           	psect	idataBANK0
   110   012DB0                     __pidataBANK0:
   111                           	callstack 0
   112                           
   113                           ;initializer for _dataFlag
   114   012DB0  01                 	db	1
   115   000000                     _TX4REG	set	3812
   116   000000                     _RC4STAbits	set	3815
   117   000000                     _SP4BRGH	set	3814
   118   000000                     _LATFbits	set	3966
   119   000000                     _LATHbits	set	3968
   120   000000                     _TRISFbits	set	3974
   121   000000                     _TRISAbits	set	3969
   122   000000                     _TRISEbits	set	3973
   123   000000                     _TRISGbits	set	3975
   124   000000                     _TRISDbits	set	3972
   125   000000                     _PORTFbits	set	3982
   126   000000                     _SSP2CON2bits	set	3802
   127   000000                     _RX4PPS	set	3605
   128   000000                     _SSP2CLKPPS	set	3612
   129   000000                     _SSP2DATPPS	set	3613
   130   000000                     _ANSELDbits	set	3751
   131   000000                     _SSP2ADD	set	3798
   132   000000                     _SSP2CON1bits	set	3801
   133   000000                     _LATAbits	set	3961
   134   000000                     _LATEbits	set	3965
   135   000000                     _LATGbits	set	3967
   136   000000                     _LATCbits	set	3963
   137   000000                     _LATDbits	set	3964
   138   000000                     _CCPR2H	set	4006
   139   000000                     _CCPR1H	set	4010
   140   000000                     _RC4REG	set	3811
   141   000000                     _SP4BRGL	set	3813
   142   000000                     _TX4STAbits	set	3816
   143   000000                     _BAUD4CONbits	set	3817
   144   000000                     _SSP2CON2	set	3802
   145   000000                     _CCPR4H	set	3873
   146   000000                     _CCPR3H	set	3877
   147   000000                     _SSP2STAT	set	3800
   148   000000                     _ANSELFbits	set	3764
   149   000000                     _SSP2BUF	set	3797
   150   000000                     _PIE4bits	set	3629
   151   000000                     _PIR4bits	set	3639
   152   000000                     _RC0PPS	set	3682
   153   000000                     _RC7PPS	set	3689
   154   000000                     _RD5PPS	set	3695
   155   000000                     _RE2PPS	set	3700
   156   000000                     _RD6PPS	set	3696
   157   000000                     _CCP1CONbits	set	4011
   158   000000                     _CCPTMRS0bits	set	4013
   159   000000                     _T2PR	set	4028
   160   000000                     _T2CONbits	set	4029
   161   000000                     _CCP2CONbits	set	4007
   162   000000                     _CCP3CONbits	set	3878
   163   000000                     _ADREFbits	set	3928
   164   000000                     _CCP4CONbits	set	3874
   165   000000                     _TRISHbits	set	3976
   166   000000                     _TRISCbits	set	3971
   167   000000                     _ADPCH	set	3935
   168   000000                     _ADRESH	set	3940
   169   000000                     _ADCON0bits	set	3936
   170   000000                     _RE4PPS	set	3702
   171   000000                     _RG6PPS	set	3720
   172   000000                     _T2CLKCONbits	set	4031
   173   000000                     _T2HLTbits	set	4030
   174                           
   175                           	psect	mediumconst
   176   00FEE2                     __pmediumconst:
   177                           	callstack 0
   178   00FEE2  00                 	db	0
   179   00FEE3                     STR_14:
   180                           
   181                           ; BSR set to: 15
   182   00FEE3  43                 	db	67	;'C'
   183   00FEE4  61                 	db	97	;'a'
   184   00FEE5  6C                 	db	108	;'l'
   185   00FEE6  69                 	db	105	;'i'
   186   00FEE7  62                 	db	98	;'b'
   187   00FEE8  72                 	db	114	;'r'
   188   00FEE9  61                 	db	97	;'a'
   189   00FEEA  74                 	db	116	;'t'
   190   00FEEB  69                 	db	105	;'i'
   191   00FEEC  6F                 	db	111	;'o'
   192   00FEED  6E                 	db	110	;'n'
   193   00FEEE  20                 	db	32
   194   00FEEF  73                 	db	115	;'s'
   195   00FEF0  74                 	db	116	;'t'
   196   00FEF1  61                 	db	97	;'a'
   197   00FEF2  74                 	db	116	;'t'
   198   00FEF3  65                 	db	101	;'e'
   199   00FEF4  20                 	db	32
   200   00FEF5  3D                 	db	61	;'='
   201   00FEF6  20                 	db	32
   202   00FEF7  61                 	db	97	;'a'
   203   00FEF8  6D                 	db	109	;'m'
   204   00FEF9  62                 	db	98	;'b'
   205   00FEFA  69                 	db	105	;'i'
   206   00FEFB  65                 	db	101	;'e'
   207   00FEFC  6E                 	db	110	;'n'
   208   00FEFD  74                 	db	116	;'t'
   209   00FEFE  20                 	db	32
   210   00FEFF  6C                 	db	108	;'l'
   211   00FF00  69                 	db	105	;'i'
   212   00FF01  67                 	db	103	;'g'
   213   00FF02  68                 	db	104	;'h'
   214   00FF03  74                 	db	116	;'t'
   215   00FF04  00                 	db	0
   216   00FF05                     STR_10:
   217                           
   218                           ; BSR set to: 15
   219   00FF05  43                 	db	67	;'C'
   220   00FF06  61                 	db	97	;'a'
   221   00FF07  6C                 	db	108	;'l'
   222   00FF08  69                 	db	105	;'i'
   223   00FF09  62                 	db	98	;'b'
   224   00FF0A  72                 	db	114	;'r'
   225   00FF0B  61                 	db	97	;'a'
   226   00FF0C  74                 	db	116	;'t'
   227   00FF0D  69                 	db	105	;'i'
   228   00FF0E  6F                 	db	111	;'o'
   229   00FF0F  6E                 	db	110	;'n'
   230   00FF10  20                 	db	32
   231   00FF11  73                 	db	115	;'s'
   232   00FF12  74                 	db	116	;'t'
   233   00FF13  61                 	db	97	;'a'
   234   00FF14  74                 	db	116	;'t'
   235   00FF15  65                 	db	101	;'e'
   236   00FF16  20                 	db	32
   237   00FF17  3D                 	db	61	;'='
   238   00FF18  20                 	db	32
   239   00FF19  67                 	db	103	;'g'
   240   00FF1A  72                 	db	114	;'r'
   241   00FF1B  65                 	db	101	;'e'
   242   00FF1C  65                 	db	101	;'e'
   243   00FF1D  6E                 	db	110	;'n'
   244   00FF1E  20                 	db	32
   245   00FF1F  0A                 	db	10
   246   00FF20  0D                 	db	13
   247   00FF21  00                 	db	0
   248   00FF22                     STR_12:
   249                           
   250                           ; BSR set to: 15
   251   00FF22  43                 	db	67	;'C'
   252   00FF23  61                 	db	97	;'a'
   253   00FF24  6C                 	db	108	;'l'
   254   00FF25  69                 	db	105	;'i'
   255   00FF26  62                 	db	98	;'b'
   256   00FF27  72                 	db	114	;'r'
   257   00FF28  61                 	db	97	;'a'
   258   00FF29  74                 	db	116	;'t'
   259   00FF2A  69                 	db	105	;'i'
   260   00FF2B  6F                 	db	111	;'o'
   261   00FF2C  6E                 	db	110	;'n'
   262   00FF2D  20                 	db	32
   263   00FF2E  73                 	db	115	;'s'
   264   00FF2F  74                 	db	116	;'t'
   265   00FF30  61                 	db	97	;'a'
   266   00FF31  74                 	db	116	;'t'
   267   00FF32  65                 	db	101	;'e'
   268   00FF33  3D                 	db	61	;'='
   269   00FF34  20                 	db	32
   270   00FF35  62                 	db	98	;'b'
   271   00FF36  6C                 	db	108	;'l'
   272   00FF37  75                 	db	117	;'u'
   273   00FF38  65                 	db	101	;'e'
   274   00FF39  20                 	db	32
   275   00FF3A  0A                 	db	10
   276   00FF3B  0D                 	db	13
   277   00FF3C  00                 	db	0
   278   00FF3D                     STR_16:
   279                           
   280                           ; BSR set to: 15
   281   00FF3D  43                 	db	67	;'C'
   282   00FF3E  41                 	db	65	;'A'
   283   00FF3F  4C                 	db	76	;'L'
   284   00FF40  49                 	db	73	;'I'
   285   00FF41  42                 	db	66	;'B'
   286   00FF42  52                 	db	82	;'R'
   287   00FF43  41                 	db	65	;'A'
   288   00FF44  54                 	db	84	;'T'
   289   00FF45  49                 	db	73	;'I'
   290   00FF46  4F                 	db	79	;'O'
   291   00FF47  4E                 	db	78	;'N'
   292   00FF48  20                 	db	32
   293   00FF49  43                 	db	67	;'C'
   294   00FF4A  4F                 	db	79	;'O'
   295   00FF4B  4D                 	db	77	;'M'
   296   00FF4C  50                 	db	80	;'P'
   297   00FF4D  4C                 	db	76	;'L'
   298   00FF4E  45                 	db	69	;'E'
   299   00FF4F  54                 	db	84	;'T'
   300   00FF50  45                 	db	69	;'E'
   301   00FF51  44                 	db	68	;'D'
   302   00FF52  20                 	db	32
   303   00FF53  0A                 	db	10
   304   00FF54  0D                 	db	13
   305   00FF55  00                 	db	0
   306   00FF56                     STR_8:
   307                           
   308                           ; BSR set to: 15
   309   00FF56  43                 	db	67	;'C'
   310   00FF57  61                 	db	97	;'a'
   311   00FF58  6C                 	db	108	;'l'
   312   00FF59  69                 	db	105	;'i'
   313   00FF5A  62                 	db	98	;'b'
   314   00FF5B  72                 	db	114	;'r'
   315   00FF5C  61                 	db	97	;'a'
   316   00FF5D  74                 	db	116	;'t'
   317   00FF5E  69                 	db	105	;'i'
   318   00FF5F  6F                 	db	111	;'o'
   319   00FF60  6E                 	db	110	;'n'
   320   00FF61  20                 	db	32
   321   00FF62  73                 	db	115	;'s'
   322   00FF63  74                 	db	116	;'t'
   323   00FF64  61                 	db	97	;'a'
   324   00FF65  74                 	db	116	;'t'
   325   00FF66  65                 	db	101	;'e'
   326   00FF67  20                 	db	32
   327   00FF68  3D                 	db	61	;'='
   328   00FF69  20                 	db	32
   329   00FF6A  72                 	db	114	;'r'
   330   00FF6B  65                 	db	101	;'e'
   331   00FF6C  64                 	db	100	;'d'
   332   00FF6D  00                 	db	0
   333   00FF6E                     
   334                           ; BSR set to: 15
   335   00FF6E  56                 	db	86	;'V'
   336   00FF6F  6F                 	db	111	;'o'
   337   00FF70  6C                 	db	108	;'l'
   338   00FF71  74                 	db	116	;'t'
   339   00FF72  61                 	db	97	;'a'
   340   00FF73  67                 	db	103	;'g'
   341   00FF74  65                 	db	101	;'e'
   342   00FF75  20                 	db	32
   343   00FF76  3D                 	db	61	;'='
   344   00FF77  20                 	db	32
   345   00FF78  25                 	db	37
   346   00FF79  64                 	db	100	;'d'
   347   00FF7A  2E                 	db	46
   348   00FF7B  25                 	db	37
   349   00FF7C  30                 	db	48	;'0'
   350   00FF7D  32                 	db	50	;'2'
   351   00FF7E  64                 	db	100	;'d'
   352   00FF7F  2C                 	db	44
   353   00FF80  20                 	db	32
   354   00FF81  20                 	db	32
   355   00FF82  00                 	db	0
   356   00FF83                     STR_5:
   357                           
   358                           ; BSR set to: 15
   359   00FF83  47                 	db	71	;'G'
   360   00FF84  72                 	db	114	;'r'
   361   00FF85  65                 	db	101	;'e'
   362   00FF86  65                 	db	101	;'e'
   363   00FF87  6E                 	db	110	;'n'
   364   00FF88  5F                 	db	95	;'_'
   365   00FF89  6C                 	db	108	;'l'
   366   00FF8A  69                 	db	105	;'i'
   367   00FF8B  67                 	db	103	;'g'
   368   00FF8C  68                 	db	104	;'h'
   369   00FF8D  74                 	db	116	;'t'
   370   00FF8E  3D                 	db	61	;'='
   371   00FF8F  25                 	db	37
   372   00FF90  64                 	db	100	;'d'
   373   00FF91  2C                 	db	44
   374   00FF92  20                 	db	32
   375   00FF93  0A                 	db	10
   376   00FF94  0D                 	db	13
   377   00FF95  00                 	db	0
   378   00FF96                     STR_4:
   379                           
   380                           ; BSR set to: 15
   381   00FF96  52                 	db	82	;'R'
   382   00FF97  65                 	db	101	;'e'
   383   00FF98  64                 	db	100	;'d'
   384   00FF99  5F                 	db	95	;'_'
   385   00FF9A  6C                 	db	108	;'l'
   386   00FF9B  69                 	db	105	;'i'
   387   00FF9C  67                 	db	103	;'g'
   388   00FF9D  68                 	db	104	;'h'
   389   00FF9E  74                 	db	116	;'t'
   390   00FF9F  3D                 	db	61	;'='
   391   00FFA0  25                 	db	37
   392   00FFA1  64                 	db	100	;'d'
   393   00FFA2  2C                 	db	44
   394   00FFA3  20                 	db	32
   395   00FFA4  0A                 	db	10
   396   00FFA5  0D                 	db	13
   397   00FFA6  00                 	db	0
   398   00FFA7                     STR_7:
   399                           
   400                           ; BSR set to: 15
   401   00FFA7  41                 	db	65	;'A'
   402   00FFA8  6C                 	db	108	;'l'
   403   00FFA9  6C                 	db	108	;'l'
   404   00FFAA  5F                 	db	95	;'_'
   405   00FFAB  6C                 	db	108	;'l'
   406   00FFAC  69                 	db	105	;'i'
   407   00FFAD  67                 	db	103	;'g'
   408   00FFAE  68                 	db	104	;'h'
   409   00FFAF  74                 	db	116	;'t'
   410   00FFB0  73                 	db	115	;'s'
   411   00FFB1  3D                 	db	61	;'='
   412   00FFB2  25                 	db	37
   413   00FFB3  64                 	db	100	;'d'
   414   00FFB4  20                 	db	32
   415   00FFB5  0A                 	db	10
   416   00FFB6  0D                 	db	13
   417   00FFB7  00                 	db	0
   418   00FFB8                     STR_6:
   419                           
   420                           ; BSR set to: 15
   421   00FFB8  42                 	db	66	;'B'
   422   00FFB9  6C                 	db	108	;'l'
   423   00FFBA  75                 	db	117	;'u'
   424   00FFBB  65                 	db	101	;'e'
   425   00FFBC  5F                 	db	95	;'_'
   426   00FFBD  6C                 	db	108	;'l'
   427   00FFBE  69                 	db	105	;'i'
   428   00FFBF  67                 	db	103	;'g'
   429   00FFC0  68                 	db	104	;'h'
   430   00FFC1  74                 	db	116	;'t'
   431   00FFC2  3D                 	db	61	;'='
   432   00FFC3  25                 	db	37
   433   00FFC4  64                 	db	100	;'d'
   434   00FFC5  20                 	db	32
   435   00FFC6  0A                 	db	10
   436   00FFC7  0D                 	db	13
   437   00FFC8  00                 	db	0
   438   00FFC9                     STR_2:
   439                           
   440                           ; BSR set to: 15
   441   00FFC9  67                 	db	103	;'g'
   442   00FFCA  72                 	db	114	;'r'
   443   00FFCB  65                 	db	101	;'e'
   444   00FFCC  65                 	db	101	;'e'
   445   00FFCD  6E                 	db	110	;'n'
   446   00FFCE  3D                 	db	61	;'='
   447   00FFCF  25                 	db	37
   448   00FFD0  30                 	db	48	;'0'
   449   00FFD1  33                 	db	51	;'3'
   450   00FFD2  64                 	db	100	;'d'
   451   00FFD3  2C                 	db	44
   452   00FFD4  20                 	db	32
   453   00FFD5  20                 	db	32
   454   00FFD6  00                 	db	0
   455   00FFD7                     STR_3:
   456                           
   457                           ; BSR set to: 15
   458   00FFD7  62                 	db	98	;'b'
   459   00FFD8  6C                 	db	108	;'l'
   460   00FFD9  75                 	db	117	;'u'
   461   00FFDA  65                 	db	101	;'e'
   462   00FFDB  3D                 	db	61	;'='
   463   00FFDC  25                 	db	37
   464   00FFDD  30                 	db	48	;'0'
   465   00FFDE  33                 	db	51	;'3'
   466   00FFDF  64                 	db	100	;'d'
   467   00FFE0  2C                 	db	44
   468   00FFE1  20                 	db	32
   469   00FFE2  20                 	db	32
   470   00FFE3  00                 	db	0
   471   00FFE4                     STR_19:
   472                           
   473                           ; BSR set to: 15
   474   00FFE4  68                 	db	104	;'h'
   475   00FFE5  75                 	db	117	;'u'
   476   00FFE6  65                 	db	101	;'e'
   477   00FFE7  3D                 	db	61	;'='
   478   00FFE8  25                 	db	37
   479   00FFE9  30                 	db	48	;'0'
   480   00FFEA  33                 	db	51	;'3'
   481   00FFEB  64                 	db	100	;'d'
   482   00FFEC  2C                 	db	44
   483   00FFED  20                 	db	32
   484   00FFEE  20                 	db	32
   485   00FFEF  00                 	db	0
   486   00FFF0                     STR_1:
   487                           
   488                           ; BSR set to: 15
   489   00FFF0  72                 	db	114	;'r'
   490   00FFF1  65                 	db	101	;'e'
   491   00FFF2  64                 	db	100	;'d'
   492   00FFF3  3D                 	db	61	;'='
   493   00FFF4  25                 	db	37
   494   00FFF5  30                 	db	48	;'0'
   495   00FFF6  33                 	db	51	;'3'
   496   00FFF7  64                 	db	100	;'d'
   497   00FFF8  2C                 	db	44
   498   00FFF9  20                 	db	32
   499   00FFFA  20                 	db	32
   500   00FFFB  00                 	db	0
   501   00FFFC                     STR_9:
   502                           
   503                           ; BSR set to: 15
   504   00FFFC  2E                 	db	46
   505   00FFFD  00                 	db	0
   506   00FFFE  00                 	db	0	; dummy byte at the end
   507   000000                     
   508                           ; #config settings
   509                           
   510                           	psect	cinit
   511   012C16                     __pcinit:
   512                           	callstack 0
   513   012C16                     start_initialization:
   514                           	callstack 0
   515   012C16                     __initialization:
   516                           	callstack 0
   517                           
   518                           ; Initialize objects allocated to BANK0 (1 bytes)
   519                           ; load TBLPTR registers with __pidataBANK0
   520   012C16  0EB0               	movlw	low __pidataBANK0
   521   012C18  6EF6               	movwf	tblptrl,c
   522   012C1A  0E2D               	movlw	high __pidataBANK0
   523   012C1C  6EF7               	movwf	tblptrh,c
   524   012C1E  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   525   012C20  6EF8               	movwf	tblptru,c
   526   012C22  0009               	tblrd		*+	;fetch initializer
   527   012C24  CFF5 F0FC          	movff	tablat,__pdataBANK0
   528                           
   529                           ; Clear objects allocated to BANK1 (156 bytes)
   530   012C28  EE01  F000         	lfsr	0,__pbssBANK1
   531   012C2C  0E9C               	movlw	156
   532   012C2E                     clear_0:
   533   012C2E  6AEE               	clrf	postinc0,c
   534   012C30  06E8               	decf	wreg,f,c
   535   012C32  E1FD               	bnz	clear_0
   536                           
   537                           ; Clear objects allocated to BANK0 (28 bytes)
   538   012C34  EE00  F0E0         	lfsr	0,__pbssBANK0
   539   012C38  0E1C               	movlw	28
   540   012C3A                     clear_1:
   541   012C3A  6AEE               	clrf	postinc0,c
   542   012C3C  06E8               	decf	wreg,f,c
   543   012C3E  E1FD               	bnz	clear_1
   544   012C40                     end_of_initialization:
   545                           	callstack 0
   546   012C40                     __end_of__initialization:
   547                           	callstack 0
   548   012C40  0100               	movlb	0
   549   012C42  EFE6  F08F         	goto	_main	;jump to C main() function
   550                           
   551                           	psect	bssBANK0
   552   0000E0                     __pbssBANK0:
   553                           	callstack 0
   554   0000E0                     _width:
   555                           	callstack 0
   556   0000E0                     	ds	2
   557   0000E2                     _prec:
   558                           	callstack 0
   559   0000E2                     	ds	2
   560   0000E4                     _flags:
   561                           	callstack 0
   562   0000E4                     	ds	1
   563   0000E5                     _readingIndex:
   564                           	callstack 0
   565   0000E5                     	ds	1
   566   0000E6                     _TxBufReadCnt:
   567                           	callstack 0
   568   0000E6                     	ds	1
   569   0000E7                     _TxBufWriteCnt:
   570                           	callstack 0
   571   0000E7                     	ds	1
   572   0000E8                     _RxBufReadCnt:
   573                           	callstack 0
   574   0000E8                     	ds	1
   575   0000E9                     _RxBufWriteCnt:
   576                           	callstack 0
   577   0000E9                     	ds	1
   578   0000EA                     _motorR:
   579                           	callstack 0
   580   0000EA                     	ds	9
   581   0000F3                     _motorL:
   582                           	callstack 0
   583   0000F3                     	ds	9
   584                           
   585                           	psect	dataBANK0
   586   0000FC                     __pdataBANK0:
   587                           	callstack 0
   588   0000FC                     _dataFlag:
   589                           	callstack 0
   590   0000FC                     	ds	1
   591                           
   592                           	psect	bssBANK1
   593   000100                     __pbssBANK1:
   594                           	callstack 0
   595   000100                     _EUSART4TXbuf:
   596                           	callstack 0
   597   000100                     	ds	60
   598   00013C                     _ldrReadings:
   599                           	callstack 0
   600   00013C                     	ds	20
   601   000150                     _EUSART4RXbuf:
   602                           	callstack 0
   603   000150                     	ds	20
   604   000164                     _hue:
   605                           	callstack 0
   606   000164                     	ds	8
   607   00016C                     _dbuf:
   608                           	callstack 0
   609   00016C                     	ds	32
   610   00018C                     _colorCurrent:
   611                           	callstack 0
   612   00018C                     	ds	8
   613   000194                     _colorCalibration:
   614                           	callstack 0
   615   000194                     	ds	8
   616                           
   617                           	psect	cstackBANK1
   618   00019C                     __pcstackBANK1:
   619                           	callstack 0
   620   00019C                     test@led_state:
   621                           	callstack 0
   622                           
   623                           ; 50 bytes @ 0x0
   624   00019C                     	ds	50
   625   0001CE                     test@hue:
   626                           	callstack 0
   627                           
   628                           ; 2 bytes @ 0x32
   629   0001CE                     	ds	2
   630                           
   631                           	psect	cstackBANK0
   632   000060                     __pcstackBANK0:
   633                           	callstack 0
   634   000060                     convert_rgb2hue@char1:
   635                           	callstack 0
   636   000060                     calibration_routine@cal_state:
   637                           	callstack 0
   638   000060                     send2USART@hue_char:
   639                           	callstack 0
   640                           
   641                           ; 50 bytes @ 0x0
   642   000060                     	ds	20
   643   000074                     convert_rgb2hue@char2:
   644                           	callstack 0
   645                           
   646                           ; 20 bytes @ 0x14
   647   000074                     	ds	20
   648   000088                     convert_rgb2hue@char3:
   649                           	callstack 0
   650                           
   651                           ; 20 bytes @ 0x28
   652   000088                     	ds	20
   653   00009C                     convert_rgb2hue@redmax:
   654                           	callstack 0
   655                           
   656                           ; 4 bytes @ 0x3C
   657   00009C                     	ds	4
   658   0000A0                     convert_rgb2hue@greenmax:
   659                           	callstack 0
   660                           
   661                           ; 4 bytes @ 0x40
   662   0000A0                     	ds	4
   663   0000A4                     convert_rgb2hue@bluemax:
   664                           	callstack 0
   665                           
   666                           ; 4 bytes @ 0x44
   667   0000A4                     	ds	4
   668   0000A8                     _convert_rgb2hue$322:
   669                           	callstack 0
   670                           
   671                           ; 4 bytes @ 0x48
   672   0000A8                     	ds	4
   673   0000AC                     _convert_rgb2hue$323:
   674                           	callstack 0
   675                           
   676                           ; 4 bytes @ 0x4C
   677   0000AC                     	ds	4
   678   0000B0                     _convert_rgb2hue$324:
   679                           	callstack 0
   680                           
   681                           ; 4 bytes @ 0x50
   682   0000B0                     	ds	4
   683   0000B4                     _convert_rgb2hue$325:
   684                           	callstack 0
   685                           
   686                           ; 4 bytes @ 0x54
   687   0000B4                     	ds	4
   688   0000B8                     convert_rgb2hue@redcurrent:
   689                           	callstack 0
   690                           
   691                           ; 4 bytes @ 0x58
   692   0000B8                     	ds	4
   693   0000BC                     convert_rgb2hue@greencurrent:
   694                           	callstack 0
   695                           
   696                           ; 4 bytes @ 0x5C
   697   0000BC                     	ds	4
   698   0000C0                     convert_rgb2hue@bluecurrent:
   699                           	callstack 0
   700                           
   701                           ; 4 bytes @ 0x60
   702   0000C0                     	ds	4
   703   0000C4                     convert_rgb2hue@min:
   704                           	callstack 0
   705                           
   706                           ; 4 bytes @ 0x64
   707   0000C4                     	ds	4
   708   0000C8                     convert_rgb2hue@diff:
   709                           	callstack 0
   710                           
   711                           ; 4 bytes @ 0x68
   712   0000C8                     	ds	4
   713   0000CC                     convert_rgb2hue@max:
   714                           	callstack 0
   715                           
   716                           ; 4 bytes @ 0x6C
   717   0000CC                     	ds	4
   718   0000D0                     convert_rgb2hue@hue:
   719                           	callstack 0
   720                           
   721                           ; 4 bytes @ 0x70
   722   0000D0                     	ds	4
   723   0000D4                     convert_rgb2hue@r:
   724                           	callstack 0
   725                           
   726                           ; 4 bytes @ 0x74
   727   0000D4                     	ds	4
   728   0000D8                     convert_rgb2hue@g:
   729                           	callstack 0
   730                           
   731                           ; 4 bytes @ 0x78
   732   0000D8                     	ds	4
   733   0000DC                     convert_rgb2hue@b:
   734                           	callstack 0
   735                           
   736                           ; 4 bytes @ 0x7C
   737   0000DC                     	ds	4
   738                           
   739                           	psect	cstackCOMRAM
   740   000001                     __pcstackCOMRAM:
   741                           	callstack 0
   742   000001                     ??_I2C_2_Master_Idle:
   743   000001                     ?___wmul:
   744                           	callstack 0
   745   000001                     ?___awdiv:
   746                           	callstack 0
   747   000001                     ?___awmod:
   748                           	callstack 0
   749   000001                     ?___fladd:
   750                           	callstack 0
   751   000001                     ?___flmul:
   752                           	callstack 0
   753   000001                     ?___fltol:
   754                           	callstack 0
   755   000001                     ?___xxtofl:
   756                           	callstack 0
   757   000001                     sendCharSerial4@charToSend:
   758                           	callstack 0
   759   000001                     initDCmotorsPWM@PWMperiod:
   760                           	callstack 0
   761   000001                     ___wmul@multiplier:
   762                           	callstack 0
   763   000001                     ___awdiv@dividend:
   764                           	callstack 0
   765   000001                     ___awmod@dividend:
   766                           	callstack 0
   767   000001                     fputc@c:
   768                           	callstack 0
   769   000001                     ___fleq@ff1:
   770                           	callstack 0
   771   000001                     ___flge@ff1:
   772                           	callstack 0
   773   000001                     ___fltol@f1:
   774                           	callstack 0
   775   000001                     ___fladd@b:
   776                           	callstack 0
   777   000001                     ___flmul@b:
   778                           	callstack 0
   779   000001                     ___xxtofl@val:
   780                           	callstack 0
   781                           
   782                           ; 4 bytes @ 0x0
   783   000001                     	ds	1
   784   000002                     ??_I2C_2_Master_Read:
   785   000002                     I2C_2_Master_Write@data_byte:
   786                           	callstack 0
   787   000002                     sendStringSerial4@string:
   788                           	callstack 0
   789                           
   790                           ; 2 bytes @ 0x1
   791   000002                     	ds	1
   792   000003                     color_writetoaddr@value:
   793                           	callstack 0
   794   000003                     I2C_2_Master_Read@ack:
   795                           	callstack 0
   796   000003                     fputc@fp:
   797                           	callstack 0
   798   000003                     ___wmul@multiplicand:
   799                           	callstack 0
   800   000003                     ___awdiv@divisor:
   801                           	callstack 0
   802   000003                     ___awmod@divisor:
   803                           	callstack 0
   804                           
   805                           ; 2 bytes @ 0x2
   806   000003                     	ds	1
   807   000004                     ??_fputc:
   808   000004                     color_writetoaddr@address:
   809                           	callstack 0
   810   000004                     I2C_2_Master_Read@tmp:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0x3
   814   000004                     	ds	1
   815   000005                     ??_color_click_init:
   816   000005                     ??___fltol:
   817   000005                     ??___xxtofl:
   818   000005                     ?_color_read_Red:
   819                           	callstack 0
   820   000005                     ?_color_read_Green:
   821                           	callstack 0
   822   000005                     ?_color_read_Blue:
   823                           	callstack 0
   824   000005                     ?_color_read_Clear:
   825                           	callstack 0
   826   000005                     ___awdiv@counter:
   827                           	callstack 0
   828   000005                     ___awmod@counter:
   829                           	callstack 0
   830   000005                     ___wmul@product:
   831                           	callstack 0
   832   000005                     ___fleq@ff2:
   833                           	callstack 0
   834   000005                     ___flge@ff2:
   835                           	callstack 0
   836   000005                     ___fladd@a:
   837                           	callstack 0
   838   000005                     ___flmul@a:
   839                           	callstack 0
   840                           
   841                           ; 4 bytes @ 0x4
   842   000005                     	ds	1
   843   000006                     ___awdiv@sign:
   844                           	callstack 0
   845   000006                     ___awmod@sign:
   846                           	callstack 0
   847                           
   848                           ; 1 bytes @ 0x5
   849   000006                     	ds	1
   850   000007                     ??_color_read_Red:
   851   000007                     ??_color_read_Green:
   852   000007                     ??_color_read_Blue:
   853   000007                     ??_color_read_Clear:
   854   000007                     ?_abs:
   855                           	callstack 0
   856   000007                     ?___lwdiv:
   857                           	callstack 0
   858   000007                     ?_read_prec_or_width:
   859                           	callstack 0
   860   000007                     read_prec_or_width@fmt:
   861                           	callstack 0
   862   000007                     ___awdiv@quotient:
   863                           	callstack 0
   864   000007                     ___lwdiv@dividend:
   865                           	callstack 0
   866   000007                     abs@a:
   867                           	callstack 0
   868                           
   869                           ; 2 bytes @ 0x6
   870   000007                     	ds	1
   871   000008                     read_prec_or_width@ap:
   872                           	callstack 0
   873                           
   874                           ; 1 bytes @ 0x7
   875   000008                     	ds	1
   876   000009                     ??___fladd:
   877   000009                     ??___flmul:
   878   000009                     ??_abs:
   879   000009                     ??___fleq:
   880   000009                     ??___flge:
   881   000009                     ___fltol@sign1:
   882                           	callstack 0
   883   000009                     ___xxtofl@sign:
   884                           	callstack 0
   885   000009                     read_prec_or_width@c:
   886                           	callstack 0
   887   000009                     ___lwdiv@divisor:
   888                           	callstack 0
   889   000009                     fputs@s:
   890                           	callstack 0
   891                           
   892                           ; 2 bytes @ 0x8
   893   000009                     	ds	1
   894   00000A                     ___fltol@exp1:
   895                           	callstack 0
   896   00000A                     ___xxtofl@exp:
   897                           	callstack 0
   898   00000A                     color_read_Red@tmp:
   899                           	callstack 0
   900   00000A                     color_read_Green@tmp:
   901                           	callstack 0
   902   00000A                     color_read_Blue@tmp:
   903                           	callstack 0
   904   00000A                     color_read_Clear@tmp:
   905                           	callstack 0
   906   00000A                     read_prec_or_width@n:
   907                           	callstack 0
   908                           
   909                           ; 2 bytes @ 0x9
   910   00000A                     	ds	1
   911   00000B                     ___lwdiv@counter:
   912                           	callstack 0
   913   00000B                     fputs@fp:
   914                           	callstack 0
   915   00000B                     ___xxtofl@arg:
   916                           	callstack 0
   917                           
   918                           ; 4 bytes @ 0xA
   919   00000B                     	ds	1
   920   00000C                     fputs@c:
   921                           	callstack 0
   922   00000C                     ___lwdiv@quotient:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0xB
   926   00000C                     	ds	1
   927   00000D                     ___fladd@signs:
   928                           	callstack 0
   929   00000D                     ___flmul@sign:
   930                           	callstack 0
   931   00000D                     fputs@i:
   932                           	callstack 0
   933                           
   934                           ; 2 bytes @ 0xC
   935   00000D                     	ds	1
   936   00000E                     setMotorPWM@m:
   937                           	callstack 0
   938   00000E                     ___fladd@aexp:
   939                           	callstack 0
   940   00000E                     ___flmul@aexp:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0xD
   944   00000E                     	ds	1
   945   00000F                     ??_setMotorPWM:
   946   00000F                     ___fladd@bexp:
   947                           	callstack 0
   948   00000F                     pad@fp:
   949                           	callstack 0
   950   00000F                     ___flmul@grs:
   951                           	callstack 0
   952                           
   953                           ; 4 bytes @ 0xE
   954   00000F                     	ds	1
   955   000010                     ___fladd@grs:
   956                           	callstack 0
   957   000010                     pad@buf:
   958                           	callstack 0
   959                           
   960                           ; 2 bytes @ 0xF
   961   000010                     	ds	1
   962   000011                     ?___flsub:
   963                           	callstack 0
   964   000011                     setMotorPWM@posDuty:
   965                           	callstack 0
   966   000011                     ___flsub@b:
   967                           	callstack 0
   968                           
   969                           ; 4 bytes @ 0x10
   970   000011                     	ds	1
   971   000012                     setMotorPWM@negDuty:
   972                           	callstack 0
   973   000012                     pad@p:
   974                           	callstack 0
   975                           
   976                           ; 2 bytes @ 0x11
   977   000012                     	ds	1
   978   000013                     stop@mL:
   979                           	callstack 0
   980   000013                     turnLeft@mL:
   981                           	callstack 0
   982   000013                     turnRight@mL:
   983                           	callstack 0
   984   000013                     fullSpeedBack@mL:
   985                           	callstack 0
   986   000013                     ___flmul@bexp:
   987                           	callstack 0
   988                           
   989                           ; 1 bytes @ 0x12
   990   000013                     	ds	1
   991   000014                     ??_pad:
   992   000014                     stop@mR:
   993                           	callstack 0
   994   000014                     turnLeft@mR:
   995                           	callstack 0
   996   000014                     turnRight@mR:
   997                           	callstack 0
   998   000014                     fullSpeedBack@mR:
   999                           	callstack 0
  1000   000014                     ___flmul@prod:
  1001                           	callstack 0
  1002                           
  1003                           ; 4 bytes @ 0x13
  1004   000014                     	ds	1
  1005   000015                     ??_stop:
  1006   000015                     ??_turnLeft:
  1007   000015                     ??_turnRight:
  1008   000015                     ??_fullSpeedBack:
  1009   000015                     pad@i:
  1010                           	callstack 0
  1011   000015                     ___flsub@a:
  1012                           	callstack 0
  1013                           
  1014                           ; 4 bytes @ 0x14
  1015   000015                     	ds	1
  1016   000016                     turnLeft@i:
  1017                           	callstack 0
  1018   000016                     turnRight@i:
  1019                           	callstack 0
  1020   000016                     fullSpeedBack@power:
  1021                           	callstack 0
  1022                           
  1023                           ; 2 bytes @ 0x15
  1024   000016                     	ds	1
  1025   000017                     dtoa@fp:
  1026                           	callstack 0
  1027                           
  1028                           ; 1 bytes @ 0x16
  1029   000017                     	ds	1
  1030   000018                     right90@mL:
  1031                           	callstack 0
  1032   000018                     left90@mL:
  1033                           	callstack 0
  1034   000018                     backHalf@mL:
  1035                           	callstack 0
  1036   000018                     ___flmul@temp:
  1037                           	callstack 0
  1038   000018                     dtoa@d:
  1039                           	callstack 0
  1040                           
  1041                           ; 2 bytes @ 0x17
  1042   000018                     	ds	1
  1043   000019                     ?___fldiv:
  1044                           	callstack 0
  1045   000019                     right90@mR:
  1046                           	callstack 0
  1047   000019                     left90@mR:
  1048                           	callstack 0
  1049   000019                     backHalf@mR:
  1050                           	callstack 0
  1051   000019                     ___fldiv@b:
  1052                           	callstack 0
  1053                           
  1054                           ; 4 bytes @ 0x18
  1055   000019                     	ds	1
  1056   00001A                     ??_right90:
  1057   00001A                     ??_left90:
  1058   00001A                     ??_backHalf:
  1059   00001A                     _dtoa$2623:
  1060                           	callstack 0
  1061                           
  1062                           ; 2 bytes @ 0x19
  1063   00001A                     	ds	2
  1064   00001C                     moveRed@mL:
  1065                           	callstack 0
  1066   00001C                     moveGreen@mL:
  1067                           	callstack 0
  1068   00001C                     dtoa@p:
  1069                           	callstack 0
  1070                           
  1071                           ; 1 bytes @ 0x1B
  1072   00001C                     	ds	1
  1073   00001D                     moveRed@mR:
  1074                           	callstack 0
  1075   00001D                     moveGreen@mR:
  1076                           	callstack 0
  1077   00001D                     dtoa@w:
  1078                           	callstack 0
  1079   00001D                     ___fldiv@a:
  1080                           	callstack 0
  1081                           
  1082                           ; 4 bytes @ 0x1C
  1083   00001D                     	ds	1
  1084   00001E                     ??_moveRed:
  1085   00001E                     ??_moveGreen:
  1086                           
  1087                           ; 1 bytes @ 0x1D
  1088   00001E                     	ds	1
  1089   00001F                     dtoa@s:
  1090                           	callstack 0
  1091                           
  1092                           ; 1 bytes @ 0x1E
  1093   00001F                     	ds	1
  1094   000020                     decision@hue:
  1095                           	callstack 0
  1096   000020                     dtoa@i:
  1097                           	callstack 0
  1098                           
  1099                           ; 2 bytes @ 0x1F
  1100   000020                     	ds	1
  1101   000021                     ??___fldiv:
  1102                           
  1103                           ; 1 bytes @ 0x20
  1104   000021                     	ds	1
  1105   000022                     vfpfcnvrt@fp:
  1106                           	callstack 0
  1107                           
  1108                           ; 1 bytes @ 0x21
  1109   000022                     	ds	1
  1110   000023                     vfpfcnvrt@fmt:
  1111                           	callstack 0
  1112                           
  1113                           ; 1 bytes @ 0x22
  1114   000023                     	ds	1
  1115   000024                     vfpfcnvrt@ap:
  1116                           	callstack 0
  1117                           
  1118                           ; 1 bytes @ 0x23
  1119   000024                     	ds	1
  1120   000025                     ??_vfpfcnvrt:
  1121   000025                     ___fldiv@rem:
  1122                           	callstack 0
  1123                           
  1124                           ; 4 bytes @ 0x24
  1125   000025                     	ds	2
  1126   000027                     vfpfcnvrt@convarg:
  1127                           	callstack 0
  1128                           
  1129                           ; 4 bytes @ 0x26
  1130   000027                     	ds	2
  1131   000029                     ___fldiv@sign:
  1132                           	callstack 0
  1133                           
  1134                           ; 1 bytes @ 0x28
  1135   000029                     	ds	1
  1136   00002A                     ___fldiv@new_exp:
  1137                           	callstack 0
  1138                           
  1139                           ; 2 bytes @ 0x29
  1140   00002A                     	ds	1
  1141   00002B                     vfpfcnvrt@done:
  1142                           	callstack 0
  1143                           
  1144                           ; 1 bytes @ 0x2A
  1145   00002B                     	ds	1
  1146   00002C                     vfpfcnvrt@cp:
  1147                           	callstack 0
  1148   00002C                     ___fldiv@grs:
  1149                           	callstack 0
  1150                           
  1151                           ; 4 bytes @ 0x2B
  1152   00002C                     	ds	2
  1153   00002E                     ?_vfprintf:
  1154                           	callstack 0
  1155   00002E                     vfprintf@fp:
  1156                           	callstack 0
  1157                           
  1158                           ; 1 bytes @ 0x2D
  1159   00002E                     	ds	1
  1160   00002F                     vfprintf@fmt:
  1161                           	callstack 0
  1162                           
  1163                           ; 2 bytes @ 0x2E
  1164   00002F                     	ds	1
  1165   000030                     ___fldiv@bexp:
  1166                           	callstack 0
  1167                           
  1168                           ; 1 bytes @ 0x2F
  1169   000030                     	ds	1
  1170   000031                     ___fldiv@aexp:
  1171                           	callstack 0
  1172   000031                     vfprintf@ap:
  1173                           	callstack 0
  1174                           
  1175                           ; 1 bytes @ 0x30
  1176   000031                     	ds	1
  1177   000032                     vfprintf@cfmt:
  1178                           	callstack 0
  1179                           
  1180                           ; 2 bytes @ 0x31
  1181   000032                     	ds	2
  1182   000034                     ?_sprintf:
  1183                           	callstack 0
  1184   000034                     sprintf@s:
  1185                           	callstack 0
  1186                           
  1187                           ; 2 bytes @ 0x33
  1188   000034                     	ds	2
  1189   000036                     sprintf@fmt:
  1190                           	callstack 0
  1191                           
  1192                           ; 2 bytes @ 0x35
  1193   000036                     	ds	6
  1194   00003C                     sprintf@ap:
  1195                           	callstack 0
  1196                           
  1197                           ; 1 bytes @ 0x3B
  1198   00003C                     	ds	1
  1199   00003D                     sprintf@f:
  1200                           	callstack 0
  1201                           
  1202                           ; 12 bytes @ 0x3C
  1203   00003D                     	ds	12
  1204   000049                     ?_convert_rgb2hue:
  1205                           	callstack 0
  1206   000049                     convert_rgb2hue@cMax:
  1207                           	callstack 0
  1208   000049                     calibration_routine@cCal:
  1209                           	callstack 0
  1210   000049                     send2USART@hue:
  1211                           	callstack 0
  1212                           
  1213                           ; 2 bytes @ 0x48
  1214   000049                     	ds	2
  1215   00004B                     ??_calibration_routine:
  1216   00004B                     convert_rgb2hue@cCurr:
  1217                           	callstack 0
  1218                           
  1219                           ; 2 bytes @ 0x4A
  1220   00004B                     	ds	2
  1221   00004D                     ??_convert_rgb2hue:
  1222                           
  1223                           ; 1 bytes @ 0x4C
  1224   00004D                     	ds	2
  1225   00004F                     ?_test:
  1226                           	callstack 0
  1227   00004F                     test@cCurr:
  1228                           	callstack 0
  1229                           
  1230                           ; 2 bytes @ 0x4E
  1231   00004F                     	ds	2
  1232   000051                     ??_test:
  1233                           
  1234                           ; 1 bytes @ 0x50
  1235   000051                     	ds	2
  1236   000053                     ??_main:
  1237                           
  1238                           ; 1 bytes @ 0x52
  1239   000053                     	ds	2
  1240   000055                     main@hue:
  1241                           	callstack 0
  1242                           
  1243                           ; 2 bytes @ 0x54
  1244   000055                     	ds	2
  1245                           
  1246 ;;
  1247 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1248 ;;
  1249 ;; *************** function _main *****************
  1250 ;; Defined at:
  1251 ;;		line 28 in file "main.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;		None
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;  PWMcycle        2    0        unsigned int 
  1256 ;;  hue             2   84[COMRAM] unsigned int 
  1257 ;;  clear           2    0        unsigned int 
  1258 ;;  green           2    0        unsigned int 
  1259 ;;  blue            2    0        unsigned int 
  1260 ;;  red             2    0        unsigned int 
  1261 ;;  battery_leve    2    0        unsigned int 
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  1    wreg      void 
  1264 ;; Registers used:
  1265 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1272 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1273 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1274 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1275 ;;Total ram usage:        4 bytes
  1276 ;; Hardware stack levels required when called: 10
  1277 ;; This function calls:
  1278 ;;		_ADC_init
  1279 ;;		_calibration_routine
  1280 ;;		_color_click_init
  1281 ;;		_decision
  1282 ;;		_initDCmotorsPWM
  1283 ;;		_initUSART4
  1284 ;;		_test
  1285 ;; This function is called by:
  1286 ;;		Startup code after reset
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           	psect	text0
  1291   011FCC                     __ptext0:
  1292                           	callstack 0
  1293   011FCC                     _main:
  1294                           	callstack 21
  1295   011FCC                     
  1296                           ;main.c: 30:     ADC_init();
  1297   011FCC  ECA9  F096         	call	_ADC_init	;wreg free
  1298   011FD0                     
  1299                           ;main.c: 31:     color_click_init();
  1300   011FD0  EC73  F095         	call	_color_click_init	;wreg free
  1301   011FD4                     
  1302                           ;main.c: 32:     initUSART4();
  1303   011FD4  EC9A  F096         	call	_initUSART4	;wreg free
  1304   011FD8                     
  1305                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
  1306   011FD8  0E00               	movlw	0
  1307   011FDA  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1308   011FDC  0E63               	movlw	99
  1309   011FDE  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1310   011FE0  EC60  F092         	call	_initDCmotorsPWM	;wreg free
  1311   011FE4                     
  1312                           ;main.c: 39:     motorL.power = 0;
  1313   011FE4  0E00               	movlw	0
  1314   011FE6  0100               	movlb	0	; () banked
  1315   011FE8  6FF3               	movwf	_motorL& (0+255),b
  1316   011FEA                     
  1317                           ; BSR set to: 0
  1318                           ;main.c: 40:     motorL.direction = 1;
  1319   011FEA  0E01               	movlw	1
  1320   011FEC  6FF4               	movwf	(_motorL+1)& (0+255),b
  1321   011FEE                     
  1322                           ; BSR set to: 0
  1323                           ;main.c: 41:     motorL.brakemode = 1;
  1324   011FEE  0E01               	movlw	1
  1325   011FF0  6FF5               	movwf	(_motorL+2)& (0+255),b
  1326   011FF2                     
  1327                           ; BSR set to: 0
  1328                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
  1329   011FF2  0E00               	movlw	0
  1330   011FF4  6FF7               	movwf	(_motorL+4)& (0+255),b
  1331   011FF6  0E63               	movlw	99
  1332   011FF8  6FF6               	movwf	(_motorL+3)& (0+255),b
  1333   011FFA                     
  1334                           ; BSR set to: 0
  1335                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1336   011FFA  0EAA               	movlw	170
  1337   011FFC  6FF8               	movwf	(_motorL+5)& (0+255),b
  1338   011FFE  0E0F               	movlw	15
  1339   012000  6FF9               	movwf	(_motorL+6)& (0+255),b
  1340   012002                     
  1341                           ; BSR set to: 0
  1342                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1343   012002  0EA6               	movlw	166
  1344   012004  6FFA               	movwf	(_motorL+7)& (0+255),b
  1345   012006  0E0F               	movlw	15
  1346   012008  6FFB               	movwf	(_motorL+8)& (0+255),b
  1347   01200A                     
  1348                           ; BSR set to: 0
  1349                           ;main.c: 46:     motorR.power = 0;
  1350   01200A  0E00               	movlw	0
  1351   01200C  6FEA               	movwf	_motorR& (0+255),b
  1352   01200E                     
  1353                           ; BSR set to: 0
  1354                           ;main.c: 47:     motorR.direction = 1;
  1355   01200E  0E01               	movlw	1
  1356   012010  6FEB               	movwf	(_motorR+1)& (0+255),b
  1357   012012                     
  1358                           ; BSR set to: 0
  1359                           ;main.c: 48:     motorR.brakemode = 1;
  1360   012012  0E01               	movlw	1
  1361   012014  6FEC               	movwf	(_motorR+2)& (0+255),b
  1362   012016                     
  1363                           ; BSR set to: 0
  1364                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
  1365   012016  0E00               	movlw	0
  1366   012018  6FEE               	movwf	(_motorR+4)& (0+255),b
  1367   01201A  0E63               	movlw	99
  1368   01201C  6FED               	movwf	(_motorR+3)& (0+255),b
  1369                           
  1370                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1371   01201E  0E25               	movlw	37
  1372   012020  6FEF               	movwf	(_motorR+5)& (0+255),b
  1373   012022  0E0F               	movlw	15
  1374   012024  6FF0               	movwf	(_motorR+6)& (0+255),b
  1375                           
  1376                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1377   012026  0E21               	movlw	33
  1378   012028  6FF1               	movwf	(_motorR+7)& (0+255),b
  1379   01202A  0E0F               	movlw	15
  1380   01202C  6FF2               	movwf	(_motorR+8)& (0+255),b
  1381   01202E                     
  1382                           ; BSR set to: 0
  1383                           ;main.c: 54:     LATDbits.LATD7=0;
  1384   01202E  9E7C               	bcf	124,7,c	;volatile
  1385   012030                     
  1386                           ; BSR set to: 0
  1387                           ;main.c: 55:     TRISDbits.TRISD7=0;
  1388   012030  9E84               	bcf	132,7,c	;volatile
  1389   012032                     
  1390                           ; BSR set to: 0
  1391                           ;main.c: 62:     TRISGbits.TRISG0 = 0;
  1392   012032  9087               	bcf	135,0,c	;volatile
  1393   012034                     
  1394                           ; BSR set to: 0
  1395                           ;main.c: 63:     LATGbits.LATG0 = 0;
  1396   012034  907F               	bcf	127,0,c	;volatile
  1397   012036                     
  1398                           ; BSR set to: 0
  1399                           ;main.c: 64:     TRISEbits.TRISE7 = 0;
  1400   012036  9E85               	bcf	133,7,c	;volatile
  1401   012038                     
  1402                           ; BSR set to: 0
  1403                           ;main.c: 65:     LATEbits.LATE7 = 0;
  1404   012038  9E7D               	bcf	125,7,c	;volatile
  1405   01203A                     
  1406                           ; BSR set to: 0
  1407                           ;main.c: 66:     TRISAbits.TRISA3 = 0;
  1408   01203A  9681               	bcf	129,3,c	;volatile
  1409   01203C                     
  1410                           ; BSR set to: 0
  1411                           ;main.c: 67:     LATAbits.LATA3 = 0;
  1412   01203C  9679               	bcf	121,3,c	;volatile
  1413   01203E                     
  1414                           ; BSR set to: 0
  1415                           ;main.c: 72:     TRISFbits.TRISF3=1;
  1416   01203E  8686               	bsf	134,3,c	;volatile
  1417   012040                     
  1418                           ; BSR set to: 0
  1419                           ;main.c: 73:     ANSELFbits.ANSELF3=0;
  1420   012040  010E               	movlb	14	; () banked
  1421   012042  97B4               	bcf	180,3,b	;volatile
  1422   012044                     
  1423                           ; BSR set to: 14
  1424                           ;main.c: 75:     unsigned int battery_level;;main.c: 76:     unsigned int red;;main.c: 7
      +                          7:     unsigned int blue;;main.c: 78:     unsigned int green;;main.c: 79:     unsigned i
      +                          nt clear;;main.c: 80:     unsigned int hue;;main.c: 81:     TRISHbits.TRISH3 = 0;
  1425   012044  9688               	bcf	136,3,c	;volatile
  1426   012046                     
  1427                           ; BSR set to: 14
  1428                           ;main.c: 82:     LATHbits.LATH3 = 1;
  1429   012046  8680               	bsf	128,3,c	;volatile
  1430   012048                     
  1431                           ; BSR set to: 14
  1432                           ;main.c: 83:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1433   012048  0E19               	movlw	25
  1434   01204A  6E54               	movwf	(??_main+1)^0,c
  1435   01204C  0E5A               	movlw	90
  1436   01204E  6E53               	movwf	??_main^0,c
  1437   012050  0EB2               	movlw	178
  1438   012052                     u5807:
  1439   012052  2EE8               	decfsz	wreg,f,c
  1440   012054  D7FE               	bra	u5807
  1441   012056  2E53               	decfsz	??_main^0,f,c
  1442   012058  D7FC               	bra	u5807
  1443   01205A  2E54               	decfsz	(??_main+1)^0,f,c
  1444   01205C  D7FA               	bra	u5807
  1445   01205E                     
  1446                           ;main.c: 84:     LATHbits.LATH3 = 0;
  1447   01205E  9680               	bcf	128,3,c	;volatile
  1448   012060                     
  1449                           ;main.c: 85:     LATFbits.LATF2 = 0;
  1450   012060  947E               	bcf	126,2,c	;volatile
  1451   012062                     
  1452                           ;main.c: 86:     TRISFbits.TRISF2 = 1;
  1453   012062  8486               	bsf	134,2,c	;volatile
  1454   012064                     
  1455                           ;main.c: 87:     ANSELFbits.ANSELF2 = 0;
  1456   012064  010E               	movlb	14	; () banked
  1457   012066  95B4               	bcf	180,2,b	;volatile
  1458   012068                     
  1459                           ; BSR set to: 14
  1460                           ;main.c: 90:     calibration_routine(&colorCalibration);
  1461   012068  0E94               	movlw	low _colorCalibration
  1462   01206A  6E49               	movwf	calibration_routine@cCal^0,c
  1463   01206C  0E01               	movlw	high _colorCalibration
  1464   01206E  6E4A               	movwf	(calibration_routine@cCal+1)^0,c
  1465   012070  EC0D  F08A         	call	_calibration_routine	;wreg free
  1466   012074                     l5985:
  1467                           
  1468                           ;main.c: 96:         hue = test(&colorCurrent);
  1469   012074  0E8C               	movlw	low _colorCurrent
  1470   012076  6E4F               	movwf	test@cCurr^0,c
  1471   012078  0E01               	movlw	high _colorCurrent
  1472   01207A  6E50               	movwf	(test@cCurr+1)^0,c
  1473   01207C  ECF1  F08A         	call	_test	;wreg free
  1474   012080  C04F  F055         	movff	?_test,main@hue
  1475   012084  C050  F056         	movff	?_test+1,main@hue+1
  1476   012088                     
  1477                           ;main.c: 97:         decision(hue);
  1478   012088  C055  F020         	movff	main@hue,decision@hue
  1479   01208C  C056  F021         	movff	main@hue+1,decision@hue+1
  1480   012090  ECE2  F093         	call	_decision	;wreg free
  1481   012094  EF3A  F090         	goto	l5985
  1482   012098  EF00  F000         	goto	start
  1483   01209C                     __end_of_main:
  1484                           	callstack 0
  1485                           
  1486 ;; *************** function _test *****************
  1487 ;; Defined at:
  1488 ;;		line 186 in file "color.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  cCurr           2   78[COMRAM] PTR struct colors
  1491 ;;		 -> colorCurrent(8), 
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  led_state      50    0[BANK1 ] unsigned char [50]
  1494 ;;  hue             2   50[BANK1 ] unsigned int 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  2   78[COMRAM] unsigned int 
  1497 ;; Registers used:
  1498 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1505 ;;      Locals:         0       0      52       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1506 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1507 ;;      Totals:         4       0      52       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1508 ;;Total ram usage:       56 bytes
  1509 ;; Hardware stack levels used: 1
  1510 ;; Hardware stack levels required when called: 9
  1511 ;; This function calls:
  1512 ;;		_color_read_Blue
  1513 ;;		_color_read_Clear
  1514 ;;		_color_read_Green
  1515 ;;		_color_read_Red
  1516 ;;		_convert_rgb2hue
  1517 ;;		_send2USART
  1518 ;;		_sendStringSerial4
  1519 ;;		_sprintf
  1520 ;; This function is called by:
  1521 ;;		_main
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text1
  1526   0115E2                     __ptext1:
  1527                           	callstack 0
  1528   0115E2                     _test:
  1529                           	callstack 21
  1530   0115E2                     
  1531                           ;color.c: 186: unsigned int test(colors *cCurr);color.c: 187: {;color.c: 188:     unsign
      +                          ed int hue;;color.c: 190:     char led_state[50];;color.c: 195:     LATGbits.LATG0 = 1;
  1532   0115E2  807F               	bsf	127,0,c	;volatile
  1533                           
  1534                           ;color.c: 196:     LATEbits.LATE7 = 0;
  1535   0115E4  9E7D               	bcf	125,7,c	;volatile
  1536                           
  1537                           ;color.c: 197:     LATAbits.LATA3 = 0;
  1538   0115E6  9679               	bcf	121,3,c	;volatile
  1539   0115E8                     
  1540                           ;color.c: 198:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1541   0115E8  0E29               	movlw	41
  1542   0115EA  6E52               	movwf	(??_test+1)^0,c
  1543   0115EC  0E96               	movlw	150
  1544   0115EE  6E51               	movwf	??_test^0,c
  1545   0115F0  0E7F               	movlw	127
  1546   0115F2                     u5817:
  1547   0115F2  2EE8               	decfsz	wreg,f,c
  1548   0115F4  D7FE               	bra	u5817
  1549   0115F6  2E51               	decfsz	??_test^0,f,c
  1550   0115F8  D7FC               	bra	u5817
  1551   0115FA  2E52               	decfsz	(??_test+1)^0,f,c
  1552   0115FC  D7FA               	bra	u5817
  1553   0115FE  0000               	nop	
  1554   011600                     
  1555                           ;color.c: 199:     sprintf(led_state,"Red_light=%d, \n\r", LATGbits.LATG0);
  1556   011600  0E9C               	movlw	low test@led_state
  1557   011602  6E34               	movwf	sprintf@s^0,c
  1558   011604  0E01               	movlw	high test@led_state
  1559   011606  6E35               	movwf	(sprintf@s+1)^0,c
  1560   011608  0E96               	movlw	low STR_4
  1561   01160A  6E36               	movwf	sprintf@fmt^0,c
  1562   01160C  0EFF               	movlw	high STR_4
  1563   01160E  6E37               	movwf	(sprintf@fmt+1)^0,c
  1564   011610  B07F               	btfsc	127,0,c	;volatile
  1565   011612  EF0D  F08B         	goto	u5681
  1566   011616  EF11  F08B         	goto	u5680
  1567   01161A                     u5681:
  1568   01161A  6A51               	clrf	??_test^0,c
  1569   01161C  2A51               	incf	??_test^0,f,c
  1570   01161E  EF12  F08B         	goto	u5688
  1571   011622                     u5680:
  1572   011622  6A51               	clrf	??_test^0,c
  1573   011624                     u5688:
  1574   011624  5051               	movf	??_test^0,w,c
  1575   011626  6E38               	movwf	(?_sprintf+4)^0,c
  1576   011628  6A39               	clrf	(?_sprintf+5)^0,c
  1577   01162A  EC17  F095         	call	_sprintf	;wreg free
  1578   01162E                     
  1579                           ;color.c: 200:     (cCurr->red)= color_read_Red();
  1580   01162E  EC10  F094         	call	_color_read_Red	;wreg free
  1581   011632  C04F  FFD9         	movff	test@cCurr,fsr2l
  1582   011636  C050  FFDA         	movff	test@cCurr+1,fsr2h
  1583   01163A  C005  FFDE         	movff	?_color_read_Red,postinc2
  1584   01163E  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  1585   011642                     
  1586                           ;color.c: 205:     LATGbits.LATG0 = 0;
  1587   011642  907F               	bcf	127,0,c	;volatile
  1588   011644                     
  1589                           ;color.c: 206:     LATEbits.LATE7 = 1;
  1590   011644  8E7D               	bsf	125,7,c	;volatile
  1591   011646                     
  1592                           ;color.c: 207:     LATAbits.LATA3 = 0;
  1593   011646  9679               	bcf	121,3,c	;volatile
  1594   011648                     
  1595                           ;color.c: 208:     _delay((unsigned long)((100)*(64000000/4000.0)));
  1596   011648  0E09               	movlw	9
  1597   01164A  6E52               	movwf	(??_test+1)^0,c
  1598   01164C  0E1E               	movlw	30
  1599   01164E  6E51               	movwf	??_test^0,c
  1600   011650  0EE4               	movlw	228
  1601   011652                     u5827:
  1602   011652  2EE8               	decfsz	wreg,f,c
  1603   011654  D7FE               	bra	u5827
  1604   011656  2E51               	decfsz	??_test^0,f,c
  1605   011658  D7FC               	bra	u5827
  1606   01165A  2E52               	decfsz	(??_test+1)^0,f,c
  1607   01165C  D7FA               	bra	u5827
  1608   01165E  D000               	nop2	
  1609   011660                     
  1610                           ;color.c: 210:     sprintf(led_state,"Green_light=%d, \n\r", LATEbits.LATE7);
  1611   011660  0E9C               	movlw	low test@led_state
  1612   011662  6E34               	movwf	sprintf@s^0,c
  1613   011664  0E01               	movlw	high test@led_state
  1614   011666  6E35               	movwf	(sprintf@s+1)^0,c
  1615   011668  0E83               	movlw	low STR_5
  1616   01166A  6E36               	movwf	sprintf@fmt^0,c
  1617   01166C  0EFF               	movlw	high STR_5
  1618   01166E  6E37               	movwf	(sprintf@fmt+1)^0,c
  1619   011670  BE7D               	btfsc	125,7,c	;volatile
  1620   011672  EF3D  F08B         	goto	u5691
  1621   011676  EF41  F08B         	goto	u5690
  1622   01167A                     u5691:
  1623   01167A  6A51               	clrf	??_test^0,c
  1624   01167C  2A51               	incf	??_test^0,f,c
  1625   01167E  EF42  F08B         	goto	u5698
  1626   011682                     u5690:
  1627   011682  6A51               	clrf	??_test^0,c
  1628   011684                     u5698:
  1629   011684  5051               	movf	??_test^0,w,c
  1630   011686  6E38               	movwf	(?_sprintf+4)^0,c
  1631   011688  6A39               	clrf	(?_sprintf+5)^0,c
  1632   01168A  EC17  F095         	call	_sprintf	;wreg free
  1633                           
  1634                           ;color.c: 211:     (cCurr->green) = color_read_Green();
  1635   01168E  EC38  F094         	call	_color_read_Green	;wreg free
  1636   011692  EE20 F002          	lfsr	2,2
  1637   011696  504F               	movf	test@cCurr^0,w,c
  1638   011698  26D9               	addwf	fsr2l,f,c
  1639   01169A  5050               	movf	(test@cCurr+1)^0,w,c
  1640   01169C  22DA               	addwfc	fsr2h,f,c
  1641   01169E  C005  FFDE         	movff	?_color_read_Green,postinc2
  1642   0116A2  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  1643   0116A6                     
  1644                           ;color.c: 217:     LATGbits.LATG0 = 0;
  1645   0116A6  907F               	bcf	127,0,c	;volatile
  1646   0116A8                     
  1647                           ;color.c: 218:     LATEbits.LATE7 = 0;
  1648   0116A8  9E7D               	bcf	125,7,c	;volatile
  1649   0116AA                     
  1650                           ;color.c: 219:     LATAbits.LATA3 = 1;
  1651   0116AA  8679               	bsf	121,3,c	;volatile
  1652   0116AC                     
  1653                           ;color.c: 220:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1654   0116AC  0E52               	movlw	82
  1655   0116AE  6E52               	movwf	(??_test+1)^0,c
  1656   0116B0  0E2B               	movlw	43
  1657   0116B2  6E51               	movwf	??_test^0,c
  1658   0116B4  0E00               	movlw	0
  1659   0116B6                     u5837:
  1660   0116B6  2EE8               	decfsz	wreg,f,c
  1661   0116B8  D7FE               	bra	u5837
  1662   0116BA  2E51               	decfsz	??_test^0,f,c
  1663   0116BC  D7FC               	bra	u5837
  1664   0116BE  2E52               	decfsz	(??_test+1)^0,f,c
  1665   0116C0  D7FA               	bra	u5837
  1666   0116C2  D000               	nop2	
  1667   0116C4                     
  1668                           ;color.c: 222:     sprintf(led_state,"Blue_light=%d \n\r", LATAbits.LATA3);
  1669   0116C4  0E9C               	movlw	low test@led_state
  1670   0116C6  6E34               	movwf	sprintf@s^0,c
  1671   0116C8  0E01               	movlw	high test@led_state
  1672   0116CA  6E35               	movwf	(sprintf@s+1)^0,c
  1673   0116CC  0EB8               	movlw	low STR_6
  1674   0116CE  6E36               	movwf	sprintf@fmt^0,c
  1675   0116D0  0EFF               	movlw	high STR_6
  1676   0116D2  6E37               	movwf	(sprintf@fmt+1)^0,c
  1677   0116D4  B679               	btfsc	121,3,c	;volatile
  1678   0116D6  EF6F  F08B         	goto	u5701
  1679   0116DA  EF73  F08B         	goto	u5700
  1680   0116DE                     u5701:
  1681   0116DE  6A51               	clrf	??_test^0,c
  1682   0116E0  2A51               	incf	??_test^0,f,c
  1683   0116E2  EF74  F08B         	goto	u5708
  1684   0116E6                     u5700:
  1685   0116E6  6A51               	clrf	??_test^0,c
  1686   0116E8                     u5708:
  1687   0116E8  5051               	movf	??_test^0,w,c
  1688   0116EA  6E38               	movwf	(?_sprintf+4)^0,c
  1689   0116EC  6A39               	clrf	(?_sprintf+5)^0,c
  1690   0116EE  EC17  F095         	call	_sprintf	;wreg free
  1691   0116F2                     
  1692                           ;color.c: 223:     (cCurr->blue) = color_read_Blue();
  1693   0116F2  EC88  F094         	call	_color_read_Blue	;wreg free
  1694   0116F6  EE20 F004          	lfsr	2,4
  1695   0116FA  504F               	movf	test@cCurr^0,w,c
  1696   0116FC  26D9               	addwf	fsr2l,f,c
  1697   0116FE  5050               	movf	(test@cCurr+1)^0,w,c
  1698   011700  22DA               	addwfc	fsr2h,f,c
  1699   011702  C005  FFDE         	movff	?_color_read_Blue,postinc2
  1700   011706  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  1701   01170A                     
  1702                           ;color.c: 228:     LATGbits.LATG0 = 1;
  1703   01170A  807F               	bsf	127,0,c	;volatile
  1704   01170C                     
  1705                           ;color.c: 229:     LATEbits.LATE7 = 1;
  1706   01170C  8E7D               	bsf	125,7,c	;volatile
  1707   01170E                     
  1708                           ;color.c: 230:     LATAbits.LATA3 = 1;
  1709   01170E  8679               	bsf	121,3,c	;volatile
  1710   011710                     
  1711                           ;color.c: 231:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1712   011710  0E52               	movlw	82
  1713   011712  6E52               	movwf	(??_test+1)^0,c
  1714   011714  0E2B               	movlw	43
  1715   011716  6E51               	movwf	??_test^0,c
  1716   011718  0E00               	movlw	0
  1717   01171A                     u5847:
  1718   01171A  2EE8               	decfsz	wreg,f,c
  1719   01171C  D7FE               	bra	u5847
  1720   01171E  2E51               	decfsz	??_test^0,f,c
  1721   011720  D7FC               	bra	u5847
  1722   011722  2E52               	decfsz	(??_test+1)^0,f,c
  1723   011724  D7FA               	bra	u5847
  1724   011726  D000               	nop2	
  1725                           
  1726                           ;color.c: 232:     sprintf(led_state,"All_lights=%d \n\r", 1);
  1727   011728  0E9C               	movlw	low test@led_state
  1728   01172A  6E34               	movwf	sprintf@s^0,c
  1729   01172C  0E01               	movlw	high test@led_state
  1730   01172E  6E35               	movwf	(sprintf@s+1)^0,c
  1731   011730  0EA7               	movlw	low STR_7
  1732   011732  6E36               	movwf	sprintf@fmt^0,c
  1733   011734  0EFF               	movlw	high STR_7
  1734   011736  6E37               	movwf	(sprintf@fmt+1)^0,c
  1735   011738  0E00               	movlw	0
  1736   01173A  6E39               	movwf	(?_sprintf+5)^0,c
  1737   01173C  0E01               	movlw	1
  1738   01173E  6E38               	movwf	(?_sprintf+4)^0,c
  1739   011740  EC17  F095         	call	_sprintf	;wreg free
  1740   011744                     
  1741                           ;color.c: 233:     (cCurr->clear) = color_read_Clear();
  1742   011744  EC60  F094         	call	_color_read_Clear	;wreg free
  1743   011748  EE20 F006          	lfsr	2,6
  1744   01174C  504F               	movf	test@cCurr^0,w,c
  1745   01174E  26D9               	addwf	fsr2l,f,c
  1746   011750  5050               	movf	(test@cCurr+1)^0,w,c
  1747   011752  22DA               	addwfc	fsr2h,f,c
  1748   011754  C005  FFDE         	movff	?_color_read_Clear,postinc2
  1749   011758  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  1750   01175C                     
  1751                           ;color.c: 237:     sendStringSerial4(led_state);
  1752   01175C  0E9C               	movlw	low test@led_state
  1753   01175E  6E02               	movwf	sendStringSerial4@string^0,c
  1754   011760  0E01               	movlw	high test@led_state
  1755   011762  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1756   011764  EC57  F095         	call	_sendStringSerial4	;wreg free
  1757                           
  1758                           ;color.c: 241:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  1759   011768  0E94               	movlw	low _colorCalibration
  1760   01176A  6E49               	movwf	convert_rgb2hue@cMax^0,c
  1761   01176C  0E01               	movlw	high _colorCalibration
  1762   01176E  6E4A               	movwf	(convert_rgb2hue@cMax+1)^0,c
  1763   011770  0E8C               	movlw	low _colorCurrent
  1764   011772  6E4B               	movwf	convert_rgb2hue@cCurr^0,c
  1765   011774  0E01               	movlw	high _colorCurrent
  1766   011776  6E4C               	movwf	(convert_rgb2hue@cCurr+1)^0,c
  1767   011778  EC00  F080         	call	_convert_rgb2hue	;wreg free
  1768   01177C  C049  F1CE         	movff	?_convert_rgb2hue,test@hue
  1769   011780  C04A  F1CF         	movff	?_convert_rgb2hue+1,test@hue+1
  1770                           
  1771                           ;color.c: 246:     send2USART(hue);
  1772   011784  C1CE  F049         	movff	test@hue,send2USART@hue
  1773   011788  C1CF  F04A         	movff	test@hue+1,send2USART@hue+1
  1774   01178C  EC64  F096         	call	_send2USART	;wreg free
  1775   011790                     
  1776                           ;color.c: 248:     return hue;
  1777   011790  C1CE  F04F         	movff	test@hue,?_test
  1778   011794  C1CF  F050         	movff	test@hue+1,?_test+1
  1779   011798  0012               	return		;funcret
  1780   01179A                     __end_of_test:
  1781                           	callstack 0
  1782                           
  1783 ;; *************** function _send2USART *****************
  1784 ;; Defined at:
  1785 ;;		line 146 in file "serial.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  hue             2   72[COMRAM] unsigned int 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1799 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1800 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1802 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1803 ;;Total ram usage:       52 bytes
  1804 ;; Hardware stack levels used: 1
  1805 ;; Hardware stack levels required when called: 8
  1806 ;; This function calls:
  1807 ;;		_sendStringSerial4
  1808 ;;		_sprintf
  1809 ;; This function is called by:
  1810 ;;		_test
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text2
  1815   012CC8                     __ptext2:
  1816                           	callstack 0
  1817   012CC8                     _send2USART:
  1818                           	callstack 21
  1819   012CC8                     
  1820                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  1821   012CC8  0E60               	movlw	low send2USART@hue_char
  1822   012CCA  6E34               	movwf	sprintf@s^0,c
  1823   012CCC  6A35               	clrf	(sprintf@s+1)^0,c
  1824   012CCE  0EE4               	movlw	low STR_19
  1825   012CD0  6E36               	movwf	sprintf@fmt^0,c
  1826   012CD2  0EFF               	movlw	high STR_19
  1827   012CD4  6E37               	movwf	(sprintf@fmt+1)^0,c
  1828   012CD6  C049  F038         	movff	send2USART@hue,?_sprintf+4
  1829   012CDA  C04A  F039         	movff	send2USART@hue+1,?_sprintf+5
  1830   012CDE  EC17  F095         	call	_sprintf	;wreg free
  1831   012CE2                     
  1832                           ;serial.c: 158:         sendStringSerial4(hue_char);
  1833   012CE2  0E60               	movlw	low send2USART@hue_char
  1834   012CE4  6E02               	movwf	sendStringSerial4@string^0,c
  1835   012CE6  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1836   012CE8  EC57  F095         	call	_sendStringSerial4	;wreg free
  1837   012CEC  0012               	return		;funcret
  1838   012CEE                     __end_of_send2USART:
  1839                           	callstack 0
  1840                           
  1841 ;; *************** function _convert_rgb2hue *****************
  1842 ;; Defined at:
  1843 ;;		line 100 in file "color.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;  cMax            2   72[COMRAM] PTR struct colors
  1846 ;;		 -> colorCalibration(8), 
  1847 ;;  cCurr           2   74[COMRAM] PTR struct colors
  1848 ;;		 -> colorCurrent(8), 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  char3          20   40[BANK0 ] unsigned char [20]
  1851 ;;  char2          20   20[BANK0 ] unsigned char [20]
  1852 ;;  char1          20    0[BANK0 ] unsigned char [20]
  1853 ;;  b               4  124[BANK0 ] float 
  1854 ;;  g               4  120[BANK0 ] float 
  1855 ;;  r               4  116[BANK0 ] float 
  1856 ;;  hue             4  112[BANK0 ] float 
  1857 ;;  max             4  108[BANK0 ] float 
  1858 ;;  diff            4  104[BANK0 ] float 
  1859 ;;  min             4  100[BANK0 ] float 
  1860 ;;  bluecurrent     4   96[BANK0 ] float 
  1861 ;;  greencurrent    4   92[BANK0 ] float 
  1862 ;;  redcurrent      4   88[BANK0 ] float 
  1863 ;;  bluemax         4   68[BANK0 ] float 
  1864 ;;  greenmax        4   64[BANK0 ] float 
  1865 ;;  redmax          4   60[BANK0 ] float 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  2   72[COMRAM] unsigned int 
  1868 ;; Registers used:
  1869 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1875 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1876 ;;      Locals:         0     128       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1877 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1878 ;;      Totals:         6     128       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1879 ;;Total ram usage:      134 bytes
  1880 ;; Hardware stack levels used: 1
  1881 ;; Hardware stack levels required when called: 8
  1882 ;; This function calls:
  1883 ;;		___fladd
  1884 ;;		___fldiv
  1885 ;;		___fleq
  1886 ;;		___flge
  1887 ;;		___flmul
  1888 ;;		___flsub
  1889 ;;		___fltol
  1890 ;;		___xxtofl
  1891 ;;		_sendStringSerial4
  1892 ;;		_sprintf
  1893 ;; This function is called by:
  1894 ;;		_test
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           	psect	text3
  1899   010000                     __ptext3:
  1900                           	callstack 0
  1901   010000                     _convert_rgb2hue:
  1902                           	callstack 21
  1903   010000                     
  1904                           ;color.c: 100: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 101: {;color.c: 102:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax;;color.c: 103:     float r, g, b, min, max, diff, hue = 0.0;
  1905   010000  0E00               	movlw	0
  1906   010002  0100               	movlb	0	; () banked
  1907   010004  6FD0               	movwf	convert_rgb2hue@hue& (0+255),b
  1908   010006  0E00               	movlw	0
  1909   010008  6FD1               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  1910   01000A  0E00               	movlw	0
  1911   01000C  6FD2               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  1912   01000E  0E00               	movlw	0
  1913   010010  6FD3               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  1914   010012                     
  1915                           ; BSR set to: 0
  1916                           ;color.c: 105:     redcurrent = cCurr->red;
  1917   010012  C04B  FFD9         	movff	convert_rgb2hue@cCurr,fsr2l
  1918   010016  C04C  FFDA         	movff	convert_rgb2hue@cCurr+1,fsr2h
  1919   01001A  CFDE F04D          	movff	postinc2,??_convert_rgb2hue
  1920   01001E  CFDD F04E          	movff	postdec2,??_convert_rgb2hue+1
  1921   010022  C04D  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1922   010026  C04E  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1923   01002A  6A03               	clrf	(___xxtofl@val+2)^0,c
  1924   01002C  6A04               	clrf	(___xxtofl@val+3)^0,c
  1925   01002E  0E00               	movlw	0
  1926   010030  ECCD  F08B         	call	___xxtofl
  1927   010034  C001  F0B8         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  1928   010038  C002  F0B9         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  1929   01003C  C003  F0BA         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  1930   010040  C004  F0BB         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  1931   010044                     
  1932                           ;color.c: 106:     redmax = cMax->red;
  1933   010044  C049  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  1934   010048  C04A  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  1935   01004C  CFDE F04D          	movff	postinc2,??_convert_rgb2hue
  1936   010050  CFDD F04E          	movff	postdec2,??_convert_rgb2hue+1
  1937   010054  C04D  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1938   010058  C04E  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1939   01005C  6A03               	clrf	(___xxtofl@val+2)^0,c
  1940   01005E  6A04               	clrf	(___xxtofl@val+3)^0,c
  1941   010060  0E00               	movlw	0
  1942   010062  ECCD  F08B         	call	___xxtofl
  1943   010066  C001  F09C         	movff	?___xxtofl,convert_rgb2hue@redmax
  1944   01006A  C002  F09D         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  1945   01006E  C003  F09E         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  1946   010072  C004  F09F         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  1947   010076                     
  1948                           ;color.c: 107:     greencurrent = cCurr->green;
  1949   010076  EE20 F002          	lfsr	2,2
  1950   01007A  504B               	movf	convert_rgb2hue@cCurr^0,w,c
  1951   01007C  26D9               	addwf	fsr2l,f,c
  1952   01007E  504C               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1953   010080  22DA               	addwfc	fsr2h,f,c
  1954   010082  CFDE F04D          	movff	postinc2,??_convert_rgb2hue
  1955   010086  CFDD F04E          	movff	postdec2,??_convert_rgb2hue+1
  1956   01008A  C04D  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1957   01008E  C04E  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1958   010092  6A03               	clrf	(___xxtofl@val+2)^0,c
  1959   010094  6A04               	clrf	(___xxtofl@val+3)^0,c
  1960   010096  0E00               	movlw	0
  1961   010098  ECCD  F08B         	call	___xxtofl
  1962   01009C  C001  F0BC         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  1963   0100A0  C002  F0BD         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  1964   0100A4  C003  F0BE         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  1965   0100A8  C004  F0BF         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  1966   0100AC                     
  1967                           ;color.c: 108:     greenmax = cMax->green;
  1968   0100AC  EE20 F002          	lfsr	2,2
  1969   0100B0  5049               	movf	convert_rgb2hue@cMax^0,w,c
  1970   0100B2  26D9               	addwf	fsr2l,f,c
  1971   0100B4  504A               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1972   0100B6  22DA               	addwfc	fsr2h,f,c
  1973   0100B8  CFDE F04D          	movff	postinc2,??_convert_rgb2hue
  1974   0100BC  CFDD F04E          	movff	postdec2,??_convert_rgb2hue+1
  1975   0100C0  C04D  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1976   0100C4  C04E  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1977   0100C8  6A03               	clrf	(___xxtofl@val+2)^0,c
  1978   0100CA  6A04               	clrf	(___xxtofl@val+3)^0,c
  1979   0100CC  0E00               	movlw	0
  1980   0100CE  ECCD  F08B         	call	___xxtofl
  1981   0100D2  C001  F0A0         	movff	?___xxtofl,convert_rgb2hue@greenmax
  1982   0100D6  C002  F0A1         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  1983   0100DA  C003  F0A2         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  1984   0100DE  C004  F0A3         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  1985   0100E2                     
  1986                           ;color.c: 109:     bluecurrent = cCurr->blue;
  1987   0100E2  EE20 F004          	lfsr	2,4
  1988   0100E6  504B               	movf	convert_rgb2hue@cCurr^0,w,c
  1989   0100E8  26D9               	addwf	fsr2l,f,c
  1990   0100EA  504C               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1991   0100EC  22DA               	addwfc	fsr2h,f,c
  1992   0100EE  CFDE F04D          	movff	postinc2,??_convert_rgb2hue
  1993   0100F2  CFDD F04E          	movff	postdec2,??_convert_rgb2hue+1
  1994   0100F6  C04D  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1995   0100FA  C04E  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1996   0100FE  6A03               	clrf	(___xxtofl@val+2)^0,c
  1997   010100  6A04               	clrf	(___xxtofl@val+3)^0,c
  1998   010102  0E00               	movlw	0
  1999   010104  ECCD  F08B         	call	___xxtofl
  2000   010108  C001  F0C0         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  2001   01010C  C002  F0C1         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  2002   010110  C003  F0C2         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  2003   010114  C004  F0C3         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  2004   010118                     
  2005                           ;color.c: 110:     bluemax = cMax->blue;
  2006   010118  EE20 F004          	lfsr	2,4
  2007   01011C  5049               	movf	convert_rgb2hue@cMax^0,w,c
  2008   01011E  26D9               	addwf	fsr2l,f,c
  2009   010120  504A               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2010   010122  22DA               	addwfc	fsr2h,f,c
  2011   010124  CFDE F04D          	movff	postinc2,??_convert_rgb2hue
  2012   010128  CFDD F04E          	movff	postdec2,??_convert_rgb2hue+1
  2013   01012C  C04D  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2014   010130  C04E  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2015   010134  6A03               	clrf	(___xxtofl@val+2)^0,c
  2016   010136  6A04               	clrf	(___xxtofl@val+3)^0,c
  2017   010138  0E00               	movlw	0
  2018   01013A  ECCD  F08B         	call	___xxtofl
  2019   01013E  C001  F0A4         	movff	?___xxtofl,convert_rgb2hue@bluemax
  2020   010142  C002  F0A5         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  2021   010146  C003  F0A6         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  2022   01014A  C004  F0A7         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  2023   01014E                     
  2024                           ;color.c: 111:     char char1[20];;color.c: 112:     char char2[20];;color.c: 113:     c
      +                          har char3[20];;color.c: 115:     sprintf(char1,"red=%03d,  ",redcurrent);
  2025   01014E  0E60               	movlw	low convert_rgb2hue@char1
  2026   010150  6E34               	movwf	sprintf@s^0,c
  2027   010152  6A35               	clrf	(sprintf@s+1)^0,c
  2028   010154  0EF0               	movlw	low STR_1
  2029   010156  6E36               	movwf	sprintf@fmt^0,c
  2030   010158  0EFF               	movlw	high STR_1
  2031   01015A  6E37               	movwf	(sprintf@fmt+1)^0,c
  2032   01015C  C0B8  F038         	movff	convert_rgb2hue@redcurrent,?_sprintf+4
  2033   010160  C0B9  F039         	movff	convert_rgb2hue@redcurrent+1,?_sprintf+5
  2034   010164  C0BA  F03A         	movff	convert_rgb2hue@redcurrent+2,?_sprintf+6
  2035   010168  C0BB  F03B         	movff	convert_rgb2hue@redcurrent+3,?_sprintf+7
  2036   01016C  EC17  F095         	call	_sprintf	;wreg free
  2037   010170                     
  2038                           ;color.c: 116:     sprintf(char2,"green=%03d,  ",bluecurrent);
  2039   010170  0E74               	movlw	low convert_rgb2hue@char2
  2040   010172  6E34               	movwf	sprintf@s^0,c
  2041   010174  6A35               	clrf	(sprintf@s+1)^0,c
  2042   010176  0EC9               	movlw	low STR_2
  2043   010178  6E36               	movwf	sprintf@fmt^0,c
  2044   01017A  0EFF               	movlw	high STR_2
  2045   01017C  6E37               	movwf	(sprintf@fmt+1)^0,c
  2046   01017E  C0C0  F038         	movff	convert_rgb2hue@bluecurrent,?_sprintf+4
  2047   010182  C0C1  F039         	movff	convert_rgb2hue@bluecurrent+1,?_sprintf+5
  2048   010186  C0C2  F03A         	movff	convert_rgb2hue@bluecurrent+2,?_sprintf+6
  2049   01018A  C0C3  F03B         	movff	convert_rgb2hue@bluecurrent+3,?_sprintf+7
  2050   01018E  EC17  F095         	call	_sprintf	;wreg free
  2051   010192                     
  2052                           ;color.c: 117:     sprintf(char3,"blue=%03d,  ",greencurrent);
  2053   010192  0E88               	movlw	low convert_rgb2hue@char3
  2054   010194  6E34               	movwf	sprintf@s^0,c
  2055   010196  6A35               	clrf	(sprintf@s+1)^0,c
  2056   010198  0ED7               	movlw	low STR_3
  2057   01019A  6E36               	movwf	sprintf@fmt^0,c
  2058   01019C  0EFF               	movlw	high STR_3
  2059   01019E  6E37               	movwf	(sprintf@fmt+1)^0,c
  2060   0101A0  C0BC  F038         	movff	convert_rgb2hue@greencurrent,?_sprintf+4
  2061   0101A4  C0BD  F039         	movff	convert_rgb2hue@greencurrent+1,?_sprintf+5
  2062   0101A8  C0BE  F03A         	movff	convert_rgb2hue@greencurrent+2,?_sprintf+6
  2063   0101AC  C0BF  F03B         	movff	convert_rgb2hue@greencurrent+3,?_sprintf+7
  2064   0101B0  EC17  F095         	call	_sprintf	;wreg free
  2065   0101B4                     
  2066                           ;color.c: 121:     sendStringSerial4(char1);
  2067   0101B4  0E60               	movlw	low convert_rgb2hue@char1
  2068   0101B6  6E02               	movwf	sendStringSerial4@string^0,c
  2069   0101B8  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2070   0101BA  EC57  F095         	call	_sendStringSerial4	;wreg free
  2071   0101BE                     
  2072                           ;color.c: 122:     sendStringSerial4(char2);
  2073   0101BE  0E74               	movlw	low convert_rgb2hue@char2
  2074   0101C0  6E02               	movwf	sendStringSerial4@string^0,c
  2075   0101C2  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2076   0101C4  EC57  F095         	call	_sendStringSerial4	;wreg free
  2077   0101C8                     
  2078                           ;color.c: 123:     sendStringSerial4(char3);
  2079   0101C8  0E88               	movlw	low convert_rgb2hue@char3
  2080   0101CA  6E02               	movwf	sendStringSerial4@string^0,c
  2081   0101CC  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2082   0101CE  EC57  F095         	call	_sendStringSerial4	;wreg free
  2083   0101D2                     
  2084                           ;color.c: 125:     r = redcurrent/redmax;
  2085   0101D2  C0B8  F019         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  2086   0101D6  C0B9  F01A         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  2087   0101DA  C0BA  F01B         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  2088   0101DE  C0BB  F01C         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  2089   0101E2  C09C  F01D         	movff	convert_rgb2hue@redmax,___fldiv@a
  2090   0101E6  C09D  F01E         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  2091   0101EA  C09E  F01F         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  2092   0101EE  C09F  F020         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  2093   0101F2  EC40  F088         	call	___fldiv	;wreg free
  2094   0101F6  C019  F0D4         	movff	?___fldiv,convert_rgb2hue@r
  2095   0101FA  C01A  F0D5         	movff	?___fldiv+1,convert_rgb2hue@r+1
  2096   0101FE  C01B  F0D6         	movff	?___fldiv+2,convert_rgb2hue@r+2
  2097   010202  C01C  F0D7         	movff	?___fldiv+3,convert_rgb2hue@r+3
  2098   010206                     
  2099                           ;color.c: 126:     g = greencurrent/greenmax;
  2100   010206  C0BC  F019         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  2101   01020A  C0BD  F01A         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  2102   01020E  C0BE  F01B         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  2103   010212  C0BF  F01C         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  2104   010216  C0A0  F01D         	movff	convert_rgb2hue@greenmax,___fldiv@a
  2105   01021A  C0A1  F01E         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  2106   01021E  C0A2  F01F         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  2107   010222  C0A3  F020         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  2108   010226  EC40  F088         	call	___fldiv	;wreg free
  2109   01022A  C019  F0D8         	movff	?___fldiv,convert_rgb2hue@g
  2110   01022E  C01A  F0D9         	movff	?___fldiv+1,convert_rgb2hue@g+1
  2111   010232  C01B  F0DA         	movff	?___fldiv+2,convert_rgb2hue@g+2
  2112   010236  C01C  F0DB         	movff	?___fldiv+3,convert_rgb2hue@g+3
  2113   01023A                     
  2114                           ;color.c: 127:     b = bluecurrent/bluemax;
  2115   01023A  C0C0  F019         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  2116   01023E  C0C1  F01A         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  2117   010242  C0C2  F01B         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  2118   010246  C0C3  F01C         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  2119   01024A  C0A4  F01D         	movff	convert_rgb2hue@bluemax,___fldiv@a
  2120   01024E  C0A5  F01E         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  2121   010252  C0A6  F01F         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  2122   010256  C0A7  F020         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  2123   01025A  EC40  F088         	call	___fldiv	;wreg free
  2124   01025E  C019  F0DC         	movff	?___fldiv,convert_rgb2hue@b
  2125   010262  C01A  F0DD         	movff	?___fldiv+1,convert_rgb2hue@b+1
  2126   010266  C01B  F0DE         	movff	?___fldiv+2,convert_rgb2hue@b+2
  2127   01026A  C01C  F0DF         	movff	?___fldiv+3,convert_rgb2hue@b+3
  2128   01026E                     
  2129                           ;color.c: 129:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  2130   01026E  C0D4  F001         	movff	convert_rgb2hue@r,___flge@ff1
  2131   010272  C0D5  F002         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2132   010276  C0D6  F003         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2133   01027A  C0D7  F004         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2134   01027E  C0D8  F005         	movff	convert_rgb2hue@g,___flge@ff2
  2135   010282  C0D9  F006         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2136   010286  C0DA  F007         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2137   01028A  C0DB  F008         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2138   01028E  EC64  F08F         	call	___flge	;wreg free
  2139   010292  A0D8               	btfss	status,0,c
  2140   010294  EF4E  F081         	goto	u5571
  2141   010298  EF50  F081         	goto	u5570
  2142   01029C                     u5571:
  2143   01029C  EF85  F081         	goto	l5677
  2144   0102A0                     u5570:
  2145   0102A0  C0D8  F001         	movff	convert_rgb2hue@g,___flge@ff1
  2146   0102A4  C0D9  F002         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2147   0102A8  C0DA  F003         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2148   0102AC  C0DB  F004         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2149   0102B0  C0DC  F005         	movff	convert_rgb2hue@b,___flge@ff2
  2150   0102B4  C0DD  F006         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2151   0102B8  C0DE  F007         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2152   0102BC  C0DF  F008         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2153   0102C0  EC64  F08F         	call	___flge	;wreg free
  2154   0102C4  A0D8               	btfss	status,0,c
  2155   0102C6  EF67  F081         	goto	u5581
  2156   0102CA  EF69  F081         	goto	u5580
  2157   0102CE                     u5581:
  2158   0102CE  EF73  F081         	goto	l84
  2159   0102D2                     u5580:
  2160   0102D2  C0DC  F0A8         	movff	convert_rgb2hue@b,_convert_rgb2hue$322
  2161   0102D6  C0DD  F0A9         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$322+1
  2162   0102DA  C0DE  F0AA         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$322+2
  2163   0102DE  C0DF  F0AB         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$322+3
  2164   0102E2  EF7B  F081         	goto	l86
  2165   0102E6                     l84:
  2166   0102E6  C0D8  F0A8         	movff	convert_rgb2hue@g,_convert_rgb2hue$322
  2167   0102EA  C0D9  F0A9         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$322+1
  2168   0102EE  C0DA  F0AA         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$322+2
  2169   0102F2  C0DB  F0AB         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$322+3
  2170   0102F6                     l86:
  2171   0102F6  C0A8  F0C4         	movff	_convert_rgb2hue$322,convert_rgb2hue@min
  2172   0102FA  C0A9  F0C5         	movff	_convert_rgb2hue$322+1,convert_rgb2hue@min+1
  2173   0102FE  C0AA  F0C6         	movff	_convert_rgb2hue$322+2,convert_rgb2hue@min+2
  2174   010302  C0AB  F0C7         	movff	_convert_rgb2hue$322+3,convert_rgb2hue@min+3
  2175   010306  EFB8  F081         	goto	l5681
  2176   01030A                     l5677:
  2177   01030A  C0D4  F001         	movff	convert_rgb2hue@r,___flge@ff1
  2178   01030E  C0D5  F002         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2179   010312  C0D6  F003         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2180   010316  C0D7  F004         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2181   01031A  C0DC  F005         	movff	convert_rgb2hue@b,___flge@ff2
  2182   01031E  C0DD  F006         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2183   010322  C0DE  F007         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2184   010326  C0DF  F008         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2185   01032A  EC64  F08F         	call	___flge	;wreg free
  2186   01032E  A0D8               	btfss	status,0,c
  2187   010330  EF9C  F081         	goto	u5591
  2188   010334  EF9E  F081         	goto	u5590
  2189   010338                     u5591:
  2190   010338  EFA8  F081         	goto	l88
  2191   01033C                     u5590:
  2192   01033C  C0DC  F0AC         	movff	convert_rgb2hue@b,_convert_rgb2hue$323
  2193   010340  C0DD  F0AD         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$323+1
  2194   010344  C0DE  F0AE         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$323+2
  2195   010348  C0DF  F0AF         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$323+3
  2196   01034C  EFB0  F081         	goto	l90
  2197   010350                     l88:
  2198   010350  C0D4  F0AC         	movff	convert_rgb2hue@r,_convert_rgb2hue$323
  2199   010354  C0D5  F0AD         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$323+1
  2200   010358  C0D6  F0AE         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$323+2
  2201   01035C  C0D7  F0AF         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$323+3
  2202   010360                     l90:
  2203   010360  C0AC  F0C4         	movff	_convert_rgb2hue$323,convert_rgb2hue@min
  2204   010364  C0AD  F0C5         	movff	_convert_rgb2hue$323+1,convert_rgb2hue@min+1
  2205   010368  C0AE  F0C6         	movff	_convert_rgb2hue$323+2,convert_rgb2hue@min+2
  2206   01036C  C0AF  F0C7         	movff	_convert_rgb2hue$323+3,convert_rgb2hue@min+3
  2207   010370                     l5681:
  2208                           
  2209                           ;color.c: 130:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  2210   010370  C0D8  F001         	movff	convert_rgb2hue@g,___flge@ff1
  2211   010374  C0D9  F002         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2212   010378  C0DA  F003         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2213   01037C  C0DB  F004         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2214   010380  C0D4  F005         	movff	convert_rgb2hue@r,___flge@ff2
  2215   010384  C0D5  F006         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2216   010388  C0D6  F007         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2217   01038C  C0D7  F008         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2218   010390  EC64  F08F         	call	___flge	;wreg free
  2219   010394  A0D8               	btfss	status,0,c
  2220   010396  EFCF  F081         	goto	u5601
  2221   01039A  EFD1  F081         	goto	u5600
  2222   01039E                     u5601:
  2223   01039E  EF06  F082         	goto	l5687
  2224   0103A2                     u5600:
  2225   0103A2  C0DC  F001         	movff	convert_rgb2hue@b,___flge@ff1
  2226   0103A6  C0DD  F002         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2227   0103AA  C0DE  F003         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2228   0103AE  C0DF  F004         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2229   0103B2  C0D8  F005         	movff	convert_rgb2hue@g,___flge@ff2
  2230   0103B6  C0D9  F006         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2231   0103BA  C0DA  F007         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2232   0103BE  C0DB  F008         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2233   0103C2  EC64  F08F         	call	___flge	;wreg free
  2234   0103C6  A0D8               	btfss	status,0,c
  2235   0103C8  EFE8  F081         	goto	u5611
  2236   0103CC  EFEA  F081         	goto	u5610
  2237   0103D0                     u5611:
  2238   0103D0  EFF4  F081         	goto	l96
  2239   0103D4                     u5610:
  2240   0103D4  C0DC  F0B0         	movff	convert_rgb2hue@b,_convert_rgb2hue$324
  2241   0103D8  C0DD  F0B1         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$324+1
  2242   0103DC  C0DE  F0B2         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$324+2
  2243   0103E0  C0DF  F0B3         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$324+3
  2244   0103E4  EFFC  F081         	goto	l98
  2245   0103E8                     l96:
  2246   0103E8  C0D8  F0B0         	movff	convert_rgb2hue@g,_convert_rgb2hue$324
  2247   0103EC  C0D9  F0B1         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$324+1
  2248   0103F0  C0DA  F0B2         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$324+2
  2249   0103F4  C0DB  F0B3         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$324+3
  2250   0103F8                     l98:
  2251   0103F8  C0B0  F0CC         	movff	_convert_rgb2hue$324,convert_rgb2hue@max
  2252   0103FC  C0B1  F0CD         	movff	_convert_rgb2hue$324+1,convert_rgb2hue@max+1
  2253   010400  C0B2  F0CE         	movff	_convert_rgb2hue$324+2,convert_rgb2hue@max+2
  2254   010404  C0B3  F0CF         	movff	_convert_rgb2hue$324+3,convert_rgb2hue@max+3
  2255   010408  EF39  F082         	goto	l5691
  2256   01040C                     l5687:
  2257   01040C  C0DC  F001         	movff	convert_rgb2hue@b,___flge@ff1
  2258   010410  C0DD  F002         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2259   010414  C0DE  F003         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2260   010418  C0DF  F004         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2261   01041C  C0D4  F005         	movff	convert_rgb2hue@r,___flge@ff2
  2262   010420  C0D5  F006         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2263   010424  C0D6  F007         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2264   010428  C0D7  F008         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2265   01042C  EC64  F08F         	call	___flge	;wreg free
  2266   010430  A0D8               	btfss	status,0,c
  2267   010432  EF1D  F082         	goto	u5621
  2268   010436  EF1F  F082         	goto	u5620
  2269   01043A                     u5621:
  2270   01043A  EF29  F082         	goto	l100
  2271   01043E                     u5620:
  2272   01043E  C0DC  F0B4         	movff	convert_rgb2hue@b,_convert_rgb2hue$325
  2273   010442  C0DD  F0B5         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$325+1
  2274   010446  C0DE  F0B6         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$325+2
  2275   01044A  C0DF  F0B7         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$325+3
  2276   01044E  EF31  F082         	goto	l102
  2277   010452                     l100:
  2278   010452  C0D4  F0B4         	movff	convert_rgb2hue@r,_convert_rgb2hue$325
  2279   010456  C0D5  F0B5         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$325+1
  2280   01045A  C0D6  F0B6         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$325+2
  2281   01045E  C0D7  F0B7         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$325+3
  2282   010462                     l102:
  2283   010462  C0B4  F0CC         	movff	_convert_rgb2hue$325,convert_rgb2hue@max
  2284   010466  C0B5  F0CD         	movff	_convert_rgb2hue$325+1,convert_rgb2hue@max+1
  2285   01046A  C0B6  F0CE         	movff	_convert_rgb2hue$325+2,convert_rgb2hue@max+2
  2286   01046E  C0B7  F0CF         	movff	_convert_rgb2hue$325+3,convert_rgb2hue@max+3
  2287   010472                     l5691:
  2288                           
  2289                           ;color.c: 131:     diff = max - min;
  2290   010472  C0CC  F011         	movff	convert_rgb2hue@max,___flsub@b
  2291   010476  C0CD  F012         	movff	convert_rgb2hue@max+1,___flsub@b+1
  2292   01047A  C0CE  F013         	movff	convert_rgb2hue@max+2,___flsub@b+2
  2293   01047E  C0CF  F014         	movff	convert_rgb2hue@max+3,___flsub@b+3
  2294   010482  C0C4  F015         	movff	convert_rgb2hue@min,___flsub@a
  2295   010486  C0C5  F016         	movff	convert_rgb2hue@min+1,___flsub@a+1
  2296   01048A  C0C6  F017         	movff	convert_rgb2hue@min+2,___flsub@a+2
  2297   01048E  C0C7  F018         	movff	convert_rgb2hue@min+3,___flsub@a+3
  2298   010492  ECB0  F094         	call	___flsub	;wreg free
  2299   010496  C011  F0C8         	movff	?___flsub,convert_rgb2hue@diff
  2300   01049A  C012  F0C9         	movff	?___flsub+1,convert_rgb2hue@diff+1
  2301   01049E  C013  F0CA         	movff	?___flsub+2,convert_rgb2hue@diff+2
  2302   0104A2  C014  F0CB         	movff	?___flsub+3,convert_rgb2hue@diff+3
  2303                           
  2304                           ;color.c: 132:     if (max == min) {
  2305   0104A6  C0CC  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  2306   0104AA  C0CD  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2307   0104AE  C0CE  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2308   0104B2  C0CF  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2309   0104B6  C0C4  F005         	movff	convert_rgb2hue@min,___fleq@ff2
  2310   0104BA  C0C5  F006         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  2311   0104BE  C0C6  F007         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  2312   0104C2  C0C7  F008         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  2313   0104C6  ECC0  F091         	call	___fleq	;wreg free
  2314   0104CA  A0D8               	btfss	status,0,c
  2315   0104CC  EF6A  F082         	goto	u5631
  2316   0104D0  EF6C  F082         	goto	u5630
  2317   0104D4                     u5631:
  2318   0104D4  EF77  F082         	goto	l5695
  2319   0104D8                     u5630:
  2320   0104D8                     
  2321                           ;color.c: 133:         hue = 0;
  2322   0104D8  0E00               	movlw	0
  2323   0104DA  0100               	movlb	0	; () banked
  2324   0104DC  6FD0               	movwf	convert_rgb2hue@hue& (0+255),b
  2325   0104DE  0E00               	movlw	0
  2326   0104E0  6FD1               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2327   0104E2  0E00               	movlw	0
  2328   0104E4  6FD2               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2329   0104E6  0E00               	movlw	0
  2330   0104E8  6FD3               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2331                           
  2332                           ;color.c: 134:     } else if (max == r){
  2333   0104EA  EF80  F083         	goto	l5707
  2334   0104EE                     l5695:
  2335   0104EE  C0CC  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  2336   0104F2  C0CD  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2337   0104F6  C0CE  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2338   0104FA  C0CF  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2339   0104FE  C0D4  F005         	movff	convert_rgb2hue@r,___fleq@ff2
  2340   010502  C0D5  F006         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  2341   010506  C0D6  F007         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  2342   01050A  C0D7  F008         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  2343   01050E  ECC0  F091         	call	___fleq	;wreg free
  2344   010512  A0D8               	btfss	status,0,c
  2345   010514  EF8E  F082         	goto	u5641
  2346   010518  EF90  F082         	goto	u5640
  2347   01051C                     u5641:
  2348   01051C  EFBE  F082         	goto	l5699
  2349   010520                     u5640:
  2350   010520                     
  2351                           ;color.c: 135:         hue = (b - g) / diff;
  2352   010520  C0D8  F015         	movff	convert_rgb2hue@g,___flsub@a
  2353   010524  C0D9  F016         	movff	convert_rgb2hue@g+1,___flsub@a+1
  2354   010528  C0DA  F017         	movff	convert_rgb2hue@g+2,___flsub@a+2
  2355   01052C  C0DB  F018         	movff	convert_rgb2hue@g+3,___flsub@a+3
  2356   010530  C0DC  F011         	movff	convert_rgb2hue@b,___flsub@b
  2357   010534  C0DD  F012         	movff	convert_rgb2hue@b+1,___flsub@b+1
  2358   010538  C0DE  F013         	movff	convert_rgb2hue@b+2,___flsub@b+2
  2359   01053C  C0DF  F014         	movff	convert_rgb2hue@b+3,___flsub@b+3
  2360   010540  ECB0  F094         	call	___flsub	;wreg free
  2361   010544  C011  F019         	movff	?___flsub,___fldiv@b
  2362   010548  C012  F01A         	movff	?___flsub+1,___fldiv@b+1
  2363   01054C  C013  F01B         	movff	?___flsub+2,___fldiv@b+2
  2364   010550  C014  F01C         	movff	?___flsub+3,___fldiv@b+3
  2365   010554  C0C8  F01D         	movff	convert_rgb2hue@diff,___fldiv@a
  2366   010558  C0C9  F01E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  2367   01055C  C0CA  F01F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  2368   010560  C0CB  F020         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  2369   010564  EC40  F088         	call	___fldiv	;wreg free
  2370   010568  C019  F0D0         	movff	?___fldiv,convert_rgb2hue@hue
  2371   01056C  C01A  F0D1         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  2372   010570  C01B  F0D2         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  2373   010574  C01C  F0D3         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  2374                           
  2375                           ;color.c: 136:     } else if (max == g){
  2376   010578  EF80  F083         	goto	l5707
  2377   01057C                     l5699:
  2378   01057C  C0CC  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  2379   010580  C0CD  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2380   010584  C0CE  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2381   010588  C0CF  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2382   01058C  C0D8  F005         	movff	convert_rgb2hue@g,___fleq@ff2
  2383   010590  C0D9  F006         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  2384   010594  C0DA  F007         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  2385   010598  C0DB  F008         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  2386   01059C  ECC0  F091         	call	___fleq	;wreg free
  2387   0105A0  A0D8               	btfss	status,0,c
  2388   0105A2  EFD5  F082         	goto	u5651
  2389   0105A6  EFD7  F082         	goto	u5650
  2390   0105AA                     u5651:
  2391   0105AA  EF1F  F083         	goto	l5703
  2392   0105AE                     u5650:
  2393   0105AE                     
  2394                           ;color.c: 137:         hue = (b - r) / diff;
  2395   0105AE  C0D4  F015         	movff	convert_rgb2hue@r,___flsub@a
  2396   0105B2  C0D5  F016         	movff	convert_rgb2hue@r+1,___flsub@a+1
  2397   0105B6  C0D6  F017         	movff	convert_rgb2hue@r+2,___flsub@a+2
  2398   0105BA  C0D7  F018         	movff	convert_rgb2hue@r+3,___flsub@a+3
  2399   0105BE  C0DC  F011         	movff	convert_rgb2hue@b,___flsub@b
  2400   0105C2  C0DD  F012         	movff	convert_rgb2hue@b+1,___flsub@b+1
  2401   0105C6  C0DE  F013         	movff	convert_rgb2hue@b+2,___flsub@b+2
  2402   0105CA  C0DF  F014         	movff	convert_rgb2hue@b+3,___flsub@b+3
  2403   0105CE  ECB0  F094         	call	___flsub	;wreg free
  2404   0105D2  C011  F019         	movff	?___flsub,___fldiv@b
  2405   0105D6  C012  F01A         	movff	?___flsub+1,___fldiv@b+1
  2406   0105DA  C013  F01B         	movff	?___flsub+2,___fldiv@b+2
  2407   0105DE  C014  F01C         	movff	?___flsub+3,___fldiv@b+3
  2408   0105E2  C0C8  F01D         	movff	convert_rgb2hue@diff,___fldiv@a
  2409   0105E6  C0C9  F01E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  2410   0105EA  C0CA  F01F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  2411   0105EE  C0CB  F020         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  2412   0105F2  EC40  F088         	call	___fldiv	;wreg free
  2413   0105F6  C019  F0D0         	movff	?___fldiv,convert_rgb2hue@hue
  2414   0105FA  C01A  F0D1         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  2415   0105FE  C01B  F0D2         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  2416   010602  C01C  F0D3         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  2417                           
  2418                           ;color.c: 138:         hue = hue + 2;
  2419   010606  C0D0  F001         	movff	convert_rgb2hue@hue,___fladd@b
  2420   01060A  C0D1  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  2421   01060E  C0D2  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  2422   010612  C0D3  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  2423   010616  0E00               	movlw	0
  2424   010618  6E05               	movwf	___fladd@a^0,c
  2425   01061A  0E00               	movlw	0
  2426   01061C  6E06               	movwf	(___fladd@a+1)^0,c
  2427   01061E  0E00               	movlw	0
  2428   010620  6E07               	movwf	(___fladd@a+2)^0,c
  2429   010622  0E40               	movlw	64
  2430   010624  6E08               	movwf	(___fladd@a+3)^0,c
  2431   010626  ECCB  F083         	call	___fladd	;wreg free
  2432   01062A  C001  F0D0         	movff	?___fladd,convert_rgb2hue@hue
  2433   01062E  C002  F0D1         	movff	?___fladd+1,convert_rgb2hue@hue+1
  2434   010632  C003  F0D2         	movff	?___fladd+2,convert_rgb2hue@hue+2
  2435   010636  C004  F0D3         	movff	?___fladd+3,convert_rgb2hue@hue+3
  2436                           
  2437                           ;color.c: 139:     } else if (max == b){
  2438   01063A  EF80  F083         	goto	l5707
  2439   01063E                     l5703:
  2440   01063E  C0CC  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  2441   010642  C0CD  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2442   010646  C0CE  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2443   01064A  C0CF  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2444   01064E  C0DC  F005         	movff	convert_rgb2hue@b,___fleq@ff2
  2445   010652  C0DD  F006         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  2446   010656  C0DE  F007         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  2447   01065A  C0DF  F008         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  2448   01065E  ECC0  F091         	call	___fleq	;wreg free
  2449   010662  A0D8               	btfss	status,0,c
  2450   010664  EF36  F083         	goto	u5661
  2451   010668  EF38  F083         	goto	u5660
  2452   01066C                     u5661:
  2453   01066C  EF80  F083         	goto	l106
  2454   010670                     u5660:
  2455   010670                     
  2456                           ;color.c: 140:         hue = (r - g) / diff;
  2457   010670  C0D8  F015         	movff	convert_rgb2hue@g,___flsub@a
  2458   010674  C0D9  F016         	movff	convert_rgb2hue@g+1,___flsub@a+1
  2459   010678  C0DA  F017         	movff	convert_rgb2hue@g+2,___flsub@a+2
  2460   01067C  C0DB  F018         	movff	convert_rgb2hue@g+3,___flsub@a+3
  2461   010680  C0D4  F011         	movff	convert_rgb2hue@r,___flsub@b
  2462   010684  C0D5  F012         	movff	convert_rgb2hue@r+1,___flsub@b+1
  2463   010688  C0D6  F013         	movff	convert_rgb2hue@r+2,___flsub@b+2
  2464   01068C  C0D7  F014         	movff	convert_rgb2hue@r+3,___flsub@b+3
  2465   010690  ECB0  F094         	call	___flsub	;wreg free
  2466   010694  C011  F019         	movff	?___flsub,___fldiv@b
  2467   010698  C012  F01A         	movff	?___flsub+1,___fldiv@b+1
  2468   01069C  C013  F01B         	movff	?___flsub+2,___fldiv@b+2
  2469   0106A0  C014  F01C         	movff	?___flsub+3,___fldiv@b+3
  2470   0106A4  C0C8  F01D         	movff	convert_rgb2hue@diff,___fldiv@a
  2471   0106A8  C0C9  F01E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  2472   0106AC  C0CA  F01F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  2473   0106B0  C0CB  F020         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  2474   0106B4  EC40  F088         	call	___fldiv	;wreg free
  2475   0106B8  C019  F0D0         	movff	?___fldiv,convert_rgb2hue@hue
  2476   0106BC  C01A  F0D1         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  2477   0106C0  C01B  F0D2         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  2478   0106C4  C01C  F0D3         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  2479                           
  2480                           ;color.c: 141:         hue = hue + 4;
  2481   0106C8  C0D0  F001         	movff	convert_rgb2hue@hue,___fladd@b
  2482   0106CC  C0D1  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  2483   0106D0  C0D2  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  2484   0106D4  C0D3  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  2485   0106D8  0E00               	movlw	0
  2486   0106DA  6E05               	movwf	___fladd@a^0,c
  2487   0106DC  0E00               	movlw	0
  2488   0106DE  6E06               	movwf	(___fladd@a+1)^0,c
  2489   0106E0  0E80               	movlw	128
  2490   0106E2  6E07               	movwf	(___fladd@a+2)^0,c
  2491   0106E4  0E40               	movlw	64
  2492   0106E6  6E08               	movwf	(___fladd@a+3)^0,c
  2493   0106E8  ECCB  F083         	call	___fladd	;wreg free
  2494   0106EC  C001  F0D0         	movff	?___fladd,convert_rgb2hue@hue
  2495   0106F0  C002  F0D1         	movff	?___fladd+1,convert_rgb2hue@hue+1
  2496   0106F4  C003  F0D2         	movff	?___fladd+2,convert_rgb2hue@hue+2
  2497   0106F8  C004  F0D3         	movff	?___fladd+3,convert_rgb2hue@hue+3
  2498   0106FC  EF80  F083         	goto	l5707
  2499   010700                     l106:
  2500   010700                     l5707:
  2501                           
  2502                           ;color.c: 144:     hue = hue * 60;
  2503   010700  C0D0  F001         	movff	convert_rgb2hue@hue,___flmul@b
  2504   010704  C0D1  F002         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  2505   010708  C0D2  F003         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  2506   01070C  C0D3  F004         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  2507   010710  0E00               	movlw	0
  2508   010712  6E05               	movwf	___flmul@a^0,c
  2509   010714  0E00               	movlw	0
  2510   010716  6E06               	movwf	(___flmul@a+1)^0,c
  2511   010718  0E70               	movlw	112
  2512   01071A  6E07               	movwf	(___flmul@a+2)^0,c
  2513   01071C  0E42               	movlw	66
  2514   01071E  6E08               	movwf	(___flmul@a+3)^0,c
  2515   010720  EC2B  F086         	call	___flmul	;wreg free
  2516   010724  C001  F0D0         	movff	?___flmul,convert_rgb2hue@hue
  2517   010728  C002  F0D1         	movff	?___flmul+1,convert_rgb2hue@hue+1
  2518   01072C  C003  F0D2         	movff	?___flmul+2,convert_rgb2hue@hue+2
  2519   010730  C004  F0D3         	movff	?___flmul+3,convert_rgb2hue@hue+3
  2520   010734                     
  2521                           ;color.c: 145:     if (hue < 0) {
  2522   010734  0100               	movlb	0	; () banked
  2523   010736  BFD3               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  2524   010738  EFA2  F083         	goto	u5670
  2525   01073C  EFA0  F083         	goto	u5671
  2526   010740                     u5671:
  2527   010740  EFBC  F083         	goto	l110
  2528   010744                     u5670:
  2529   010744                     
  2530                           ; BSR set to: 0
  2531                           ;color.c: 146:         hue = hue + 360;
  2532   010744  C0D0  F001         	movff	convert_rgb2hue@hue,___fladd@b
  2533   010748  C0D1  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  2534   01074C  C0D2  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  2535   010750  C0D3  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  2536   010754  0E00               	movlw	0
  2537   010756  6E05               	movwf	___fladd@a^0,c
  2538   010758  0E00               	movlw	0
  2539   01075A  6E06               	movwf	(___fladd@a+1)^0,c
  2540   01075C  0EB4               	movlw	180
  2541   01075E  6E07               	movwf	(___fladd@a+2)^0,c
  2542   010760  0E43               	movlw	67
  2543   010762  6E08               	movwf	(___fladd@a+3)^0,c
  2544   010764  ECCB  F083         	call	___fladd	;wreg free
  2545   010768  C001  F0D0         	movff	?___fladd,convert_rgb2hue@hue
  2546   01076C  C002  F0D1         	movff	?___fladd+1,convert_rgb2hue@hue+1
  2547   010770  C003  F0D2         	movff	?___fladd+2,convert_rgb2hue@hue+2
  2548   010774  C004  F0D3         	movff	?___fladd+3,convert_rgb2hue@hue+3
  2549   010778                     l110:
  2550                           
  2551                           ;color.c: 149:     return (unsigned int)hue;
  2552   010778  C0D0  F001         	movff	convert_rgb2hue@hue,___fltol@f1
  2553   01077C  C0D1  F002         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  2554   010780  C0D2  F003         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  2555   010784  C0D3  F004         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  2556   010788  ECE1  F08E         	call	___fltol	;wreg free
  2557   01078C  C001  F049         	movff	?___fltol,?_convert_rgb2hue
  2558   010790  C002  F04A         	movff	?___fltol+1,?_convert_rgb2hue+1
  2559   010794  0012               	return		;funcret
  2560   010796                     __end_of_convert_rgb2hue:
  2561                           	callstack 0
  2562                           
  2563 ;; *************** function ___xxtofl *****************
  2564 ;; Defined at:
  2565 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  sign            1    wreg     unsigned char 
  2568 ;;  val             4    0[COMRAM] long 
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;  sign            1    8[COMRAM] unsigned char 
  2571 ;;  arg             4   10[COMRAM] unsigned long 
  2572 ;;  exp             1    9[COMRAM] unsigned char 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  4    0[COMRAM] unsigned char 
  2575 ;; Registers used:
  2576 ;;		wreg, status,2, status,0
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2582 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2583 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2584 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2585 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2586 ;;Total ram usage:       14 bytes
  2587 ;; Hardware stack levels used: 1
  2588 ;; This function calls:
  2589 ;;		Nothing
  2590 ;; This function is called by:
  2591 ;;		_convert_rgb2hue
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           	psect	text4
  2596   01179A                     __ptext4:
  2597                           	callstack 0
  2598   01179A                     ___xxtofl:
  2599                           	callstack 28
  2600                           
  2601                           ;incstack = 0
  2602                           ;___xxtofl@sign stored from wreg
  2603   01179A  6E09               	movwf	___xxtofl@sign^0,c
  2604   01179C  5009               	movf	___xxtofl@sign^0,w,c
  2605   01179E  B4D8               	btfsc	status,2,c
  2606   0117A0  EFD4  F08B         	goto	u5471
  2607   0117A4  EFD6  F08B         	goto	u5470
  2608   0117A8                     u5471:
  2609   0117A8  EFF8  F08B         	goto	l1192
  2610   0117AC                     u5470:
  2611   0117AC  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2612   0117AE  EFDD  F08B         	goto	u5480
  2613   0117B2  EFDB  F08B         	goto	u5481
  2614   0117B6                     u5481:
  2615   0117B6  EFF8  F08B         	goto	l1192
  2616   0117BA                     u5480:
  2617   0117BA  C001  F005         	movff	___xxtofl@val,??___xxtofl
  2618   0117BE  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  2619   0117C2  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  2620   0117C6  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  2621   0117CA  1E05               	comf	??___xxtofl^0,f,c
  2622   0117CC  1E06               	comf	(??___xxtofl+1)^0,f,c
  2623   0117CE  1E07               	comf	(??___xxtofl+2)^0,f,c
  2624   0117D0  1E08               	comf	(??___xxtofl+3)^0,f,c
  2625   0117D2  2A05               	incf	??___xxtofl^0,f,c
  2626   0117D4  0E00               	movlw	0
  2627   0117D6  2206               	addwfc	(??___xxtofl+1)^0,f,c
  2628   0117D8  2207               	addwfc	(??___xxtofl+2)^0,f,c
  2629   0117DA  2208               	addwfc	(??___xxtofl+3)^0,f,c
  2630   0117DC  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  2631   0117E0  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  2632   0117E4  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  2633   0117E8  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  2634   0117EC  EF00  F08C         	goto	l5561
  2635   0117F0                     l1192:
  2636   0117F0  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  2637   0117F4  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  2638   0117F8  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  2639   0117FC  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  2640   011800                     l5561:
  2641   011800  5001               	movf	___xxtofl@val^0,w,c
  2642   011802  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  2643   011804  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  2644   011806  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  2645   011808  A4D8               	btfss	status,2,c
  2646   01180A  EF09  F08C         	goto	u5491
  2647   01180E  EF0B  F08C         	goto	u5490
  2648   011812                     u5491:
  2649   011812  EF15  F08C         	goto	l5567
  2650   011816                     u5490:
  2651   011816  0E00               	movlw	0
  2652   011818  6E01               	movwf	?___xxtofl^0,c
  2653   01181A  0E00               	movlw	0
  2654   01181C  6E02               	movwf	(?___xxtofl+1)^0,c
  2655   01181E  0E00               	movlw	0
  2656   011820  6E03               	movwf	(?___xxtofl+2)^0,c
  2657   011822  0E00               	movlw	0
  2658   011824  6E04               	movwf	(?___xxtofl+3)^0,c
  2659   011826  EFA6  F08C         	goto	l1195
  2660   01182A                     l5567:
  2661   01182A  0E96               	movlw	150
  2662   01182C  6E0A               	movwf	___xxtofl@exp^0,c
  2663   01182E  EF1F  F08C         	goto	l5571
  2664   011832                     l5569:
  2665   011832  2A0A               	incf	___xxtofl@exp^0,f,c
  2666   011834  90D8               	bcf	status,0,c
  2667   011836  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2668   011838  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2669   01183A  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2670   01183C  320B               	rrcf	___xxtofl@arg^0,f,c
  2671   01183E                     l5571:
  2672   01183E  0E00               	movlw	0
  2673   011840  140B               	andwf	___xxtofl@arg^0,w,c
  2674   011842  6E05               	movwf	??___xxtofl^0,c
  2675   011844  0E00               	movlw	0
  2676   011846  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2677   011848  6E06               	movwf	(??___xxtofl+1)^0,c
  2678   01184A  0E00               	movlw	0
  2679   01184C  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2680   01184E  6E07               	movwf	(??___xxtofl+2)^0,c
  2681   011850  0EFE               	movlw	254
  2682   011852  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2683   011854  6E08               	movwf	(??___xxtofl+3)^0,c
  2684   011856  5005               	movf	??___xxtofl^0,w,c
  2685   011858  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2686   01185A  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2687   01185C  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2688   01185E  A4D8               	btfss	status,2,c
  2689   011860  EF34  F08C         	goto	u5501
  2690   011864  EF36  F08C         	goto	u5500
  2691   011868                     u5501:
  2692   011868  EF19  F08C         	goto	l5569
  2693   01186C                     u5500:
  2694   01186C  EF44  F08C         	goto	l1199
  2695   011870                     l5573:
  2696   011870  2A0A               	incf	___xxtofl@exp^0,f,c
  2697   011872  0E01               	movlw	1
  2698   011874  260B               	addwf	___xxtofl@arg^0,f,c
  2699   011876  0E00               	movlw	0
  2700   011878  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  2701   01187A  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  2702   01187C  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  2703   01187E  90D8               	bcf	status,0,c
  2704   011880  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2705   011882  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2706   011884  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2707   011886  320B               	rrcf	___xxtofl@arg^0,f,c
  2708   011888                     l1199:
  2709   011888  0E00               	movlw	0
  2710   01188A  140B               	andwf	___xxtofl@arg^0,w,c
  2711   01188C  6E05               	movwf	??___xxtofl^0,c
  2712   01188E  0E00               	movlw	0
  2713   011890  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2714   011892  6E06               	movwf	(??___xxtofl+1)^0,c
  2715   011894  0E00               	movlw	0
  2716   011896  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2717   011898  6E07               	movwf	(??___xxtofl+2)^0,c
  2718   01189A  0EFF               	movlw	255
  2719   01189C  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2720   01189E  6E08               	movwf	(??___xxtofl+3)^0,c
  2721   0118A0  5005               	movf	??___xxtofl^0,w,c
  2722   0118A2  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2723   0118A4  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2724   0118A6  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2725   0118A8  A4D8               	btfss	status,2,c
  2726   0118AA  EF59  F08C         	goto	u5511
  2727   0118AE  EF5B  F08C         	goto	u5510
  2728   0118B2                     u5511:
  2729   0118B2  EF38  F08C         	goto	l5573
  2730   0118B6                     u5510:
  2731   0118B6  EF63  F08C         	goto	l5581
  2732   0118BA                     l5579:
  2733   0118BA  060A               	decf	___xxtofl@exp^0,f,c
  2734   0118BC  90D8               	bcf	status,0,c
  2735   0118BE  360B               	rlcf	___xxtofl@arg^0,f,c
  2736   0118C0  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  2737   0118C2  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  2738   0118C4  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  2739   0118C6                     l5581:
  2740   0118C6  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  2741   0118C8  EF68  F08C         	goto	u5521
  2742   0118CC  EF6A  F08C         	goto	u5520
  2743   0118D0                     u5521:
  2744   0118D0  EF72  F08C         	goto	l1206
  2745   0118D4                     u5520:
  2746   0118D4  0E02               	movlw	2
  2747   0118D6  600A               	cpfslt	___xxtofl@exp^0,c
  2748   0118D8  EF70  F08C         	goto	u5531
  2749   0118DC  EF72  F08C         	goto	u5530
  2750   0118E0                     u5531:
  2751   0118E0  EF5D  F08C         	goto	l5579
  2752   0118E4                     u5530:
  2753   0118E4                     l1206:
  2754   0118E4  B00A               	btfsc	___xxtofl@exp^0,0,c
  2755   0118E6  EF77  F08C         	goto	u5541
  2756   0118EA  EF79  F08C         	goto	u5540
  2757   0118EE                     u5541:
  2758   0118EE  EF7A  F08C         	goto	l5587
  2759   0118F2                     u5540:
  2760   0118F2  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  2761   0118F4                     l5587:
  2762   0118F4  90D8               	bcf	status,0,c
  2763   0118F6  320A               	rrcf	___xxtofl@exp^0,f,c
  2764   0118F8  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  2765   0118FC  6A06               	clrf	(??___xxtofl+1)^0,c
  2766   0118FE  6A07               	clrf	(??___xxtofl+2)^0,c
  2767   011900  6A08               	clrf	(??___xxtofl+3)^0,c
  2768   011902  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  2769   011906  6A07               	clrf	(??___xxtofl+2)^0,c
  2770   011908  6A06               	clrf	(??___xxtofl+1)^0,c
  2771   01190A  6A05               	clrf	??___xxtofl^0,c
  2772   01190C  5005               	movf	??___xxtofl^0,w,c
  2773   01190E  120B               	iorwf	___xxtofl@arg^0,f,c
  2774   011910  5006               	movf	(??___xxtofl+1)^0,w,c
  2775   011912  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  2776   011914  5007               	movf	(??___xxtofl+2)^0,w,c
  2777   011916  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  2778   011918  5008               	movf	(??___xxtofl+3)^0,w,c
  2779   01191A  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  2780   01191C  5009               	movf	___xxtofl@sign^0,w,c
  2781   01191E  B4D8               	btfsc	status,2,c
  2782   011920  EF94  F08C         	goto	u5551
  2783   011924  EF96  F08C         	goto	u5550
  2784   011928                     u5551:
  2785   011928  EF9E  F08C         	goto	l5597
  2786   01192C                     u5550:
  2787   01192C  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2788   01192E  EF9D  F08C         	goto	u5560
  2789   011932  EF9B  F08C         	goto	u5561
  2790   011936                     u5561:
  2791   011936  EF9E  F08C         	goto	l5597
  2792   01193A                     u5560:
  2793   01193A  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  2794   01193C                     l5597:
  2795   01193C  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  2796   011940  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  2797   011944  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  2798   011948  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  2799   01194C                     l1195:
  2800   01194C  0012               	return		;funcret
  2801   01194E                     __end_of___xxtofl:
  2802                           	callstack 0
  2803                           
  2804 ;; *************** function ___fltol *****************
  2805 ;; Defined at:
  2806 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  f1              4    0[COMRAM] unsigned char 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;  exp1            1    9[COMRAM] unsigned char 
  2811 ;;  sign1           1    8[COMRAM] unsigned char 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  4    0[COMRAM] long 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2, status,0
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2821 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2822 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2823 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2824 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2825 ;;Total ram usage:       10 bytes
  2826 ;; Hardware stack levels used: 1
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_convert_rgb2hue
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text5
  2835   011DC2                     __ptext5:
  2836                           	callstack 0
  2837   011DC2                     ___fltol:
  2838                           	callstack 28
  2839   011DC2  3403               	rlcf	(___fltol@f1+2)^0,w,c
  2840   011DC4  3404               	rlcf	(___fltol@f1+3)^0,w,c
  2841   011DC6  6E0A               	movwf	___fltol@exp1^0,c
  2842   011DC8  500A               	movf	___fltol@exp1^0,w,c
  2843   011DCA  A4D8               	btfss	status,2,c
  2844   011DCC  EFEA  F08E         	goto	u5401
  2845   011DD0  EFEC  F08E         	goto	u5400
  2846   011DD4                     u5401:
  2847   011DD4  EFF6  F08E         	goto	l5517
  2848   011DD8                     u5400:
  2849   011DD8                     l5513:
  2850   011DD8  0E00               	movlw	0
  2851   011DDA  6E01               	movwf	?___fltol^0,c
  2852   011DDC  0E00               	movlw	0
  2853   011DDE  6E02               	movwf	(?___fltol+1)^0,c
  2854   011DE0  0E00               	movlw	0
  2855   011DE2  6E03               	movwf	(?___fltol+2)^0,c
  2856   011DE4  0E00               	movlw	0
  2857   011DE6  6E04               	movwf	(?___fltol+3)^0,c
  2858   011DE8  EF63  F08F         	goto	l834
  2859   011DEC                     l5517:
  2860   011DEC  C001  F005         	movff	___fltol@f1,??___fltol
  2861   011DF0  C002  F006         	movff	___fltol@f1+1,??___fltol+1
  2862   011DF4  C003  F007         	movff	___fltol@f1+2,??___fltol+2
  2863   011DF8  C004  F008         	movff	___fltol@f1+3,??___fltol+3
  2864   011DFC  0E20               	movlw	32
  2865   011DFE  EF06  F08F         	goto	u5410
  2866   011E02                     u5415:
  2867   011E02  90D8               	bcf	status,0,c
  2868   011E04  3208               	rrcf	(??___fltol+3)^0,f,c
  2869   011E06  3207               	rrcf	(??___fltol+2)^0,f,c
  2870   011E08  3206               	rrcf	(??___fltol+1)^0,f,c
  2871   011E0A  3205               	rrcf	??___fltol^0,f,c
  2872   011E0C                     u5410:
  2873   011E0C  2EE8               	decfsz	wreg,f,c
  2874   011E0E  EF01  F08F         	goto	u5415
  2875   011E12  5005               	movf	??___fltol^0,w,c
  2876   011E14  6E09               	movwf	___fltol@sign1^0,c
  2877   011E16  8E03               	bsf	(___fltol@f1+2)^0,7,c
  2878   011E18  0EFF               	movlw	255
  2879   011E1A  1601               	andwf	___fltol@f1^0,f,c
  2880   011E1C  0EFF               	movlw	255
  2881   011E1E  1602               	andwf	(___fltol@f1+1)^0,f,c
  2882   011E20  0EFF               	movlw	255
  2883   011E22  1603               	andwf	(___fltol@f1+2)^0,f,c
  2884   011E24  0E00               	movlw	0
  2885   011E26  1604               	andwf	(___fltol@f1+3)^0,f,c
  2886   011E28  0E96               	movlw	150
  2887   011E2A  5E0A               	subwf	___fltol@exp1^0,f,c
  2888   011E2C  BE0A               	btfsc	___fltol@exp1^0,7,c
  2889   011E2E  EF1D  F08F         	goto	u5420
  2890   011E32  EF1B  F08F         	goto	u5421
  2891   011E36                     u5421:
  2892   011E36  EF33  F08F         	goto	l5537
  2893   011E3A                     u5420:
  2894   011E3A  500A               	movf	___fltol@exp1^0,w,c
  2895   011E3C  0A80               	xorlw	128
  2896   011E3E  0F97               	addlw	151
  2897   011E40  B0D8               	btfsc	status,0,c
  2898   011E42  EF25  F08F         	goto	u5431
  2899   011E46  EF27  F08F         	goto	u5430
  2900   011E4A                     u5431:
  2901   011E4A  EF29  F08F         	goto	l5533
  2902   011E4E                     u5430:
  2903   011E4E  EFEC  F08E         	goto	l5513
  2904   011E52                     l5533:
  2905   011E52  90D8               	bcf	status,0,c
  2906   011E54  3204               	rrcf	(___fltol@f1+3)^0,f,c
  2907   011E56  3203               	rrcf	(___fltol@f1+2)^0,f,c
  2908   011E58  3202               	rrcf	(___fltol@f1+1)^0,f,c
  2909   011E5A  3201               	rrcf	___fltol@f1^0,f,c
  2910   011E5C  3E0A               	incfsz	___fltol@exp1^0,f,c
  2911   011E5E  EF29  F08F         	goto	l5533
  2912   011E62  EF4B  F08F         	goto	l5547
  2913   011E66                     l5537:
  2914   011E66  0E1F               	movlw	31
  2915   011E68  640A               	cpfsgt	___fltol@exp1^0,c
  2916   011E6A  EF39  F08F         	goto	u5441
  2917   011E6E  EF3B  F08F         	goto	u5440
  2918   011E72                     u5441:
  2919   011E72  EF43  F08F         	goto	l5545
  2920   011E76                     u5440:
  2921   011E76  EFEC  F08E         	goto	l5513
  2922   011E7A                     l5543:
  2923   011E7A  90D8               	bcf	status,0,c
  2924   011E7C  3601               	rlcf	___fltol@f1^0,f,c
  2925   011E7E  3602               	rlcf	(___fltol@f1+1)^0,f,c
  2926   011E80  3603               	rlcf	(___fltol@f1+2)^0,f,c
  2927   011E82  3604               	rlcf	(___fltol@f1+3)^0,f,c
  2928   011E84  060A               	decf	___fltol@exp1^0,f,c
  2929   011E86                     l5545:
  2930   011E86  500A               	movf	___fltol@exp1^0,w,c
  2931   011E88  A4D8               	btfss	status,2,c
  2932   011E8A  EF49  F08F         	goto	u5451
  2933   011E8E  EF4B  F08F         	goto	u5450
  2934   011E92                     u5451:
  2935   011E92  EF3D  F08F         	goto	l5543
  2936   011E96                     u5450:
  2937   011E96                     l5547:
  2938   011E96  5009               	movf	___fltol@sign1^0,w,c
  2939   011E98  B4D8               	btfsc	status,2,c
  2940   011E9A  EF51  F08F         	goto	u5461
  2941   011E9E  EF53  F08F         	goto	u5460
  2942   011EA2                     u5461:
  2943   011EA2  EF5B  F08F         	goto	l5551
  2944   011EA6                     u5460:
  2945   011EA6  1E04               	comf	(___fltol@f1+3)^0,f,c
  2946   011EA8  1E03               	comf	(___fltol@f1+2)^0,f,c
  2947   011EAA  1E02               	comf	(___fltol@f1+1)^0,f,c
  2948   011EAC  6C01               	negf	___fltol@f1^0,c
  2949   011EAE  0E00               	movlw	0
  2950   011EB0  2202               	addwfc	(___fltol@f1+1)^0,f,c
  2951   011EB2  2203               	addwfc	(___fltol@f1+2)^0,f,c
  2952   011EB4  2204               	addwfc	(___fltol@f1+3)^0,f,c
  2953   011EB6                     l5551:
  2954   011EB6  C001  F001         	movff	___fltol@f1,?___fltol
  2955   011EBA  C002  F002         	movff	___fltol@f1+1,?___fltol+1
  2956   011EBE  C003  F003         	movff	___fltol@f1+2,?___fltol+2
  2957   011EC2  C004  F004         	movff	___fltol@f1+3,?___fltol+3
  2958   011EC6                     l834:
  2959   011EC6  0012               	return		;funcret
  2960   011EC8                     __end_of___fltol:
  2961                           	callstack 0
  2962                           
  2963 ;; *************** function ___flsub *****************
  2964 ;; Defined at:
  2965 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;  b               4   16[COMRAM] long 
  2968 ;;  a               4   20[COMRAM] long 
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;		None
  2971 ;; Return value:  Size  Location     Type
  2972 ;;                  4   16[COMRAM] long 
  2973 ;; Registers used:
  2974 ;;		wreg, status,2, status,0, cstack
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2980 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2983 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2984 ;;Total ram usage:        8 bytes
  2985 ;; Hardware stack levels used: 1
  2986 ;; Hardware stack levels required when called: 1
  2987 ;; This function calls:
  2988 ;;		___fladd
  2989 ;; This function is called by:
  2990 ;;		_convert_rgb2hue
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text6
  2995   012960                     __ptext6:
  2996                           	callstack 0
  2997   012960                     ___flsub:
  2998                           	callstack 27
  2999   012960  0E00               	movlw	0
  3000   012962  1A15               	xorwf	___flsub@a^0,f,c
  3001   012964  0E00               	movlw	0
  3002   012966  1A16               	xorwf	(___flsub@a+1)^0,f,c
  3003   012968  0E00               	movlw	0
  3004   01296A  1A17               	xorwf	(___flsub@a+2)^0,f,c
  3005   01296C  0E80               	movlw	128
  3006   01296E  1A18               	xorwf	(___flsub@a+3)^0,f,c
  3007   012970  C011  F001         	movff	___flsub@b,___fladd@b
  3008   012974  C012  F002         	movff	___flsub@b+1,___fladd@b+1
  3009   012978  C013  F003         	movff	___flsub@b+2,___fladd@b+2
  3010   01297C  C014  F004         	movff	___flsub@b+3,___fladd@b+3
  3011   012980  C015  F005         	movff	___flsub@a,___fladd@a
  3012   012984  C016  F006         	movff	___flsub@a+1,___fladd@a+1
  3013   012988  C017  F007         	movff	___flsub@a+2,___fladd@a+2
  3014   01298C  C018  F008         	movff	___flsub@a+3,___fladd@a+3
  3015   012990  ECCB  F083         	call	___fladd	;wreg free
  3016   012994  C001  F011         	movff	?___fladd,?___flsub
  3017   012998  C002  F012         	movff	?___fladd+1,?___flsub+1
  3018   01299C  C003  F013         	movff	?___fladd+2,?___flsub+2
  3019   0129A0  C004  F014         	movff	?___fladd+3,?___flsub+3
  3020   0129A4  0012               	return		;funcret
  3021   0129A6                     __end_of___flsub:
  3022                           	callstack 0
  3023                           
  3024 ;; *************** function ___fladd *****************
  3025 ;; Defined at:
  3026 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  b               4    0[COMRAM] long 
  3029 ;;  a               4    4[COMRAM] long 
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  grs             1   15[COMRAM] unsigned char 
  3032 ;;  bexp            1   14[COMRAM] unsigned char 
  3033 ;;  aexp            1   13[COMRAM] unsigned char 
  3034 ;;  signs           1   12[COMRAM] unsigned char 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  4    0[COMRAM] unsigned char 
  3037 ;; Registers used:
  3038 ;;		wreg, status,2, status,0
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3044 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3045 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3046 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3047 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3048 ;;Total ram usage:       16 bytes
  3049 ;; Hardware stack levels used: 1
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_convert_rgb2hue
  3054 ;;		___flsub
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text7
  3059   010796                     __ptext7:
  3060                           	callstack 0
  3061   010796                     ___fladd:
  3062                           	callstack 27
  3063   010796  5004               	movf	(___fladd@b+3)^0,w,c
  3064   010798  0B80               	andlw	128
  3065   01079A  6E0D               	movwf	___fladd@signs^0,c
  3066   01079C  5004               	movf	(___fladd@b+3)^0,w,c
  3067   01079E  2404               	addwf	(___fladd@b+3)^0,w,c
  3068   0107A0  6E0F               	movwf	___fladd@bexp^0,c
  3069   0107A2  AE03               	btfss	(___fladd@b+2)^0,7,c
  3070   0107A4  EFD6  F083         	goto	u4471
  3071   0107A8  EFD8  F083         	goto	u4470
  3072   0107AC                     u4471:
  3073   0107AC  EFD9  F083         	goto	l4923
  3074   0107B0                     u4470:
  3075   0107B0  800F               	bsf	___fladd@bexp^0,0,c
  3076   0107B2                     l4923:
  3077   0107B2  500F               	movf	___fladd@bexp^0,w,c
  3078   0107B4  B4D8               	btfsc	status,2,c
  3079   0107B6  EFDF  F083         	goto	u4481
  3080   0107BA  EFE1  F083         	goto	u4480
  3081   0107BE                     u4481:
  3082   0107BE  EFF6  F083         	goto	l4933
  3083   0107C2                     u4480:
  3084   0107C2  280F               	incf	___fladd@bexp^0,w,c
  3085   0107C4  A4D8               	btfss	status,2,c
  3086   0107C6  EFE7  F083         	goto	u4491
  3087   0107CA  EFE9  F083         	goto	u4490
  3088   0107CE                     u4491:
  3089   0107CE  EFF1  F083         	goto	l4929
  3090   0107D2                     u4490:
  3091   0107D2  0E00               	movlw	0
  3092   0107D4  6E01               	movwf	___fladd@b^0,c
  3093   0107D6  0E00               	movlw	0
  3094   0107D8  6E02               	movwf	(___fladd@b+1)^0,c
  3095   0107DA  0E00               	movlw	0
  3096   0107DC  6E03               	movwf	(___fladd@b+2)^0,c
  3097   0107DE  0E00               	movlw	0
  3098   0107E0  6E04               	movwf	(___fladd@b+3)^0,c
  3099   0107E2                     l4929:
  3100   0107E2  8E03               	bsf	(___fladd@b+2)^0,7,c
  3101   0107E4  0E00               	movlw	0
  3102   0107E6  6E04               	movwf	(___fladd@b+3)^0,c
  3103   0107E8  EFFE  F083         	goto	l4935
  3104   0107EC                     l4933:
  3105   0107EC  0E00               	movlw	0
  3106   0107EE  6E01               	movwf	___fladd@b^0,c
  3107   0107F0  0E00               	movlw	0
  3108   0107F2  6E02               	movwf	(___fladd@b+1)^0,c
  3109   0107F4  0E00               	movlw	0
  3110   0107F6  6E03               	movwf	(___fladd@b+2)^0,c
  3111   0107F8  0E00               	movlw	0
  3112   0107FA  6E04               	movwf	(___fladd@b+3)^0,c
  3113   0107FC                     l4935:
  3114   0107FC  5008               	movf	(___fladd@a+3)^0,w,c
  3115   0107FE  0B80               	andlw	128
  3116   010800  6E0E               	movwf	___fladd@aexp^0,c
  3117   010802  500D               	movf	___fladd@signs^0,w,c
  3118   010804  180E               	xorwf	___fladd@aexp^0,w,c
  3119   010806  B4D8               	btfsc	status,2,c
  3120   010808  EF08  F084         	goto	u4501
  3121   01080C  EF0A  F084         	goto	u4500
  3122   010810                     u4501:
  3123   010810  EF0B  F084         	goto	l4941
  3124   010814                     u4500:
  3125   010814  8C0D               	bsf	___fladd@signs^0,6,c
  3126   010816                     l4941:
  3127   010816  5008               	movf	(___fladd@a+3)^0,w,c
  3128   010818  2408               	addwf	(___fladd@a+3)^0,w,c
  3129   01081A  6E0E               	movwf	___fladd@aexp^0,c
  3130   01081C  AE07               	btfss	(___fladd@a+2)^0,7,c
  3131   01081E  EF13  F084         	goto	u4511
  3132   010822  EF15  F084         	goto	u4510
  3133   010826                     u4511:
  3134   010826  EF16  F084         	goto	l4947
  3135   01082A                     u4510:
  3136   01082A  800E               	bsf	___fladd@aexp^0,0,c
  3137   01082C                     l4947:
  3138   01082C  500E               	movf	___fladd@aexp^0,w,c
  3139   01082E  B4D8               	btfsc	status,2,c
  3140   010830  EF1C  F084         	goto	u4521
  3141   010834  EF1E  F084         	goto	u4520
  3142   010838                     u4521:
  3143   010838  EF33  F084         	goto	l4957
  3144   01083C                     u4520:
  3145   01083C  280E               	incf	___fladd@aexp^0,w,c
  3146   01083E  A4D8               	btfss	status,2,c
  3147   010840  EF24  F084         	goto	u4531
  3148   010844  EF26  F084         	goto	u4530
  3149   010848                     u4531:
  3150   010848  EF2E  F084         	goto	l4953
  3151   01084C                     u4530:
  3152   01084C  0E00               	movlw	0
  3153   01084E  6E05               	movwf	___fladd@a^0,c
  3154   010850  0E00               	movlw	0
  3155   010852  6E06               	movwf	(___fladd@a+1)^0,c
  3156   010854  0E00               	movlw	0
  3157   010856  6E07               	movwf	(___fladd@a+2)^0,c
  3158   010858  0E00               	movlw	0
  3159   01085A  6E08               	movwf	(___fladd@a+3)^0,c
  3160   01085C                     l4953:
  3161   01085C  8E07               	bsf	(___fladd@a+2)^0,7,c
  3162   01085E  0E00               	movlw	0
  3163   010860  6E08               	movwf	(___fladd@a+3)^0,c
  3164   010862  EF3B  F084         	goto	l4959
  3165   010866                     l4957:
  3166   010866  0E00               	movlw	0
  3167   010868  6E05               	movwf	___fladd@a^0,c
  3168   01086A  0E00               	movlw	0
  3169   01086C  6E06               	movwf	(___fladd@a+1)^0,c
  3170   01086E  0E00               	movlw	0
  3171   010870  6E07               	movwf	(___fladd@a+2)^0,c
  3172   010872  0E00               	movlw	0
  3173   010874  6E08               	movwf	(___fladd@a+3)^0,c
  3174   010876                     l4959:
  3175   010876  500F               	movf	___fladd@bexp^0,w,c
  3176   010878  5C0E               	subwf	___fladd@aexp^0,w,c
  3177   01087A  B0D8               	btfsc	status,0,c
  3178   01087C  EF42  F084         	goto	u4541
  3179   010880  EF44  F084         	goto	u4540
  3180   010884                     u4541:
  3181   010884  EF6B  F084         	goto	l4995
  3182   010888                     u4540:
  3183   010888  AC0D               	btfss	___fladd@signs^0,6,c
  3184   01088A  EF49  F084         	goto	u4551
  3185   01088E  EF4B  F084         	goto	u4550
  3186   010892                     u4551:
  3187   010892  EF4D  F084         	goto	l4965
  3188   010896                     u4550:
  3189   010896  0E80               	movlw	128
  3190   010898  1A0D               	xorwf	___fladd@signs^0,f,c
  3191   01089A                     l4965:
  3192   01089A  C00F  F010         	movff	___fladd@bexp,___fladd@grs
  3193   01089E  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  3194   0108A2  C010  F00E         	movff	___fladd@grs,___fladd@aexp
  3195   0108A6  C001  F010         	movff	___fladd@b,___fladd@grs
  3196   0108AA  C005  F001         	movff	___fladd@a,___fladd@b
  3197   0108AE  C010  F005         	movff	___fladd@grs,___fladd@a
  3198   0108B2  C002  F010         	movff	___fladd@b+1,___fladd@grs
  3199   0108B6  C006  F002         	movff	___fladd@a+1,___fladd@b+1
  3200   0108BA  C010  F006         	movff	___fladd@grs,___fladd@a+1
  3201   0108BE  C003  F010         	movff	___fladd@b+2,___fladd@grs
  3202   0108C2  C007  F003         	movff	___fladd@a+2,___fladd@b+2
  3203   0108C6  C010  F007         	movff	___fladd@grs,___fladd@a+2
  3204   0108CA  C004  F010         	movff	___fladd@b+3,___fladd@grs
  3205   0108CE  C008  F004         	movff	___fladd@a+3,___fladd@b+3
  3206   0108D2  C010  F008         	movff	___fladd@grs,___fladd@a+3
  3207   0108D6                     l4995:
  3208   0108D6  0E00               	movlw	0
  3209   0108D8  6E10               	movwf	___fladd@grs^0,c
  3210   0108DA  500F               	movf	___fladd@bexp^0,w,c
  3211   0108DC  C00E  F009         	movff	___fladd@aexp,??___fladd
  3212   0108E0  6A0A               	clrf	(??___fladd+1)^0,c
  3213   0108E2  5E09               	subwf	??___fladd^0,f,c
  3214   0108E4  0E00               	movlw	0
  3215   0108E6  5A0A               	subwfb	(??___fladd+1)^0,f,c
  3216   0108E8  BE0A               	btfsc	(??___fladd+1)^0,7,c
  3217   0108EA  EF80  F084         	goto	u4561
  3218   0108EE  500A               	movf	(??___fladd+1)^0,w,c
  3219   0108F0  E109               	bnz	u4560
  3220   0108F2  0E1A               	movlw	26
  3221   0108F4  5C09               	subwf	??___fladd^0,w,c
  3222   0108F6  A0D8               	btfss	status,0,c
  3223   0108F8  EF80  F084         	goto	u4561
  3224   0108FC  EF82  F084         	goto	u4560
  3225   010900                     u4561:
  3226   010900  EFB9  F084         	goto	l1066
  3227   010904                     u4560:
  3228   010904  5001               	movf	___fladd@b^0,w,c
  3229   010906  1002               	iorwf	(___fladd@b+1)^0,w,c
  3230   010908  1003               	iorwf	(___fladd@b+2)^0,w,c
  3231   01090A  1004               	iorwf	(___fladd@b+3)^0,w,c
  3232   01090C  A4D8               	btfss	status,2,c
  3233   01090E  EF8B  F084         	goto	u4571
  3234   010912  EF8E  F084         	goto	u4570
  3235   010916                     u4571:
  3236   010916  0E01               	movlw	1
  3237   010918  EF8F  F084         	goto	u4580
  3238   01091C                     u4570:
  3239   01091C  0E00               	movlw	0
  3240   01091E                     u4580:
  3241   01091E  6E10               	movwf	___fladd@grs^0,c
  3242   010920  0E00               	movlw	0
  3243   010922  6E01               	movwf	___fladd@b^0,c
  3244   010924  0E00               	movlw	0
  3245   010926  6E02               	movwf	(___fladd@b+1)^0,c
  3246   010928  0E00               	movlw	0
  3247   01092A  6E03               	movwf	(___fladd@b+2)^0,c
  3248   01092C  0E00               	movlw	0
  3249   01092E  6E04               	movwf	(___fladd@b+3)^0,c
  3250   010930  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  3251   010934  EFC2  F084         	goto	l1065
  3252   010938                     l1067:
  3253   010938  A010               	btfss	___fladd@grs^0,0,c
  3254   01093A  EFA1  F084         	goto	u4591
  3255   01093E  EFA3  F084         	goto	u4590
  3256   010942                     u4591:
  3257   010942  EFA9  F084         	goto	l5007
  3258   010946                     u4590:
  3259   010946  90D8               	bcf	status,0,c
  3260   010948  3010               	rrcf	___fladd@grs^0,w,c
  3261   01094A  0901               	iorlw	1
  3262   01094C  6E10               	movwf	___fladd@grs^0,c
  3263   01094E  EFAB  F084         	goto	l5009
  3264   010952                     l5007:
  3265   010952  90D8               	bcf	status,0,c
  3266   010954  3210               	rrcf	___fladd@grs^0,f,c
  3267   010956                     l5009:
  3268   010956  A001               	btfss	___fladd@b^0,0,c
  3269   010958  EFB0  F084         	goto	u4601
  3270   01095C  EFB2  F084         	goto	u4600
  3271   010960                     u4601:
  3272   010960  EFB3  F084         	goto	l5013
  3273   010964                     u4600:
  3274   010964  8E10               	bsf	___fladd@grs^0,7,c
  3275   010966                     l5013:
  3276   010966  3404               	rlcf	(___fladd@b+3)^0,w,c
  3277   010968  3204               	rrcf	(___fladd@b+3)^0,f,c
  3278   01096A  3203               	rrcf	(___fladd@b+2)^0,f,c
  3279   01096C  3202               	rrcf	(___fladd@b+1)^0,f,c
  3280   01096E  3201               	rrcf	___fladd@b^0,f,c
  3281   010970  2A0F               	incf	___fladd@bexp^0,f,c
  3282   010972                     l1066:
  3283   010972  500E               	movf	___fladd@aexp^0,w,c
  3284   010974  5C0F               	subwf	___fladd@bexp^0,w,c
  3285   010976  A0D8               	btfss	status,0,c
  3286   010978  EFC0  F084         	goto	u4611
  3287   01097C  EFC2  F084         	goto	u4610
  3288   010980                     u4611:
  3289   010980  EF9C  F084         	goto	l1067
  3290   010984                     u4610:
  3291   010984                     l1065:
  3292   010984  BC0D               	btfsc	___fladd@signs^0,6,c
  3293   010986  EFC7  F084         	goto	u4621
  3294   01098A  EFC9  F084         	goto	u4620
  3295   01098E                     u4621:
  3296   01098E  EF09  F085         	goto	l5041
  3297   010992                     u4620:
  3298   010992  500F               	movf	___fladd@bexp^0,w,c
  3299   010994  A4D8               	btfss	status,2,c
  3300   010996  EFCF  F084         	goto	u4631
  3301   01099A  EFD1  F084         	goto	u4630
  3302   01099E                     u4631:
  3303   01099E  EFDB  F084         	goto	l5023
  3304   0109A2                     u4630:
  3305   0109A2  0E00               	movlw	0
  3306   0109A4  6E01               	movwf	?___fladd^0,c
  3307   0109A6  0E00               	movlw	0
  3308   0109A8  6E02               	movwf	(?___fladd+1)^0,c
  3309   0109AA  0E00               	movlw	0
  3310   0109AC  6E03               	movwf	(?___fladd+2)^0,c
  3311   0109AE  0E00               	movlw	0
  3312   0109B0  6E04               	movwf	(?___fladd+3)^0,c
  3313   0109B2  EF2A  F086         	goto	l1074
  3314   0109B6                     l5023:
  3315   0109B6  5005               	movf	___fladd@a^0,w,c
  3316   0109B8  2601               	addwf	___fladd@b^0,f,c
  3317   0109BA  5006               	movf	(___fladd@a+1)^0,w,c
  3318   0109BC  2202               	addwfc	(___fladd@b+1)^0,f,c
  3319   0109BE  5007               	movf	(___fladd@a+2)^0,w,c
  3320   0109C0  2203               	addwfc	(___fladd@b+2)^0,f,c
  3321   0109C2  5008               	movf	(___fladd@a+3)^0,w,c
  3322   0109C4  2204               	addwfc	(___fladd@b+3)^0,f,c
  3323   0109C6  A004               	btfss	(___fladd@b+3)^0,0,c
  3324   0109C8  EFE8  F084         	goto	u4641
  3325   0109CC  EFEA  F084         	goto	u4640
  3326   0109D0                     u4641:
  3327   0109D0  EF96  F085         	goto	l5077
  3328   0109D4                     u4640:
  3329   0109D4  A010               	btfss	___fladd@grs^0,0,c
  3330   0109D6  EFEF  F084         	goto	u4651
  3331   0109DA  EFF1  F084         	goto	u4650
  3332   0109DE                     u4651:
  3333   0109DE  EFF7  F084         	goto	l5031
  3334   0109E2                     u4650:
  3335   0109E2  90D8               	bcf	status,0,c
  3336   0109E4  3010               	rrcf	___fladd@grs^0,w,c
  3337   0109E6  0901               	iorlw	1
  3338   0109E8  6E10               	movwf	___fladd@grs^0,c
  3339   0109EA  EFF9  F084         	goto	l5033
  3340   0109EE                     l5031:
  3341   0109EE  90D8               	bcf	status,0,c
  3342   0109F0  3210               	rrcf	___fladd@grs^0,f,c
  3343   0109F2                     l5033:
  3344   0109F2  A001               	btfss	___fladd@b^0,0,c
  3345   0109F4  EFFE  F084         	goto	u4661
  3346   0109F8  EF00  F085         	goto	u4660
  3347   0109FC                     u4661:
  3348   0109FC  EF01  F085         	goto	l5037
  3349   010A00                     u4660:
  3350   010A00  8E10               	bsf	___fladd@grs^0,7,c
  3351   010A02                     l5037:
  3352   010A02  3404               	rlcf	(___fladd@b+3)^0,w,c
  3353   010A04  3204               	rrcf	(___fladd@b+3)^0,f,c
  3354   010A06  3203               	rrcf	(___fladd@b+2)^0,f,c
  3355   010A08  3202               	rrcf	(___fladd@b+1)^0,f,c
  3356   010A0A  3201               	rrcf	___fladd@b^0,f,c
  3357   010A0C  2A0F               	incf	___fladd@bexp^0,f,c
  3358   010A0E  EF96  F085         	goto	l5077
  3359   010A12                     l5041:
  3360   010A12  5005               	movf	___fladd@a^0,w,c
  3361   010A14  5C01               	subwf	___fladd@b^0,w,c
  3362   010A16  5006               	movf	(___fladd@a+1)^0,w,c
  3363   010A18  5802               	subwfb	(___fladd@b+1)^0,w,c
  3364   010A1A  5007               	movf	(___fladd@a+2)^0,w,c
  3365   010A1C  5803               	subwfb	(___fladd@b+2)^0,w,c
  3366   010A1E  5004               	movf	(___fladd@b+3)^0,w,c
  3367   010A20  0A80               	xorlw	128
  3368   010A22  6E09               	movwf	??___fladd^0,c
  3369   010A24  5008               	movf	(___fladd@a+3)^0,w,c
  3370   010A26  0A80               	xorlw	128
  3371   010A28  5809               	subwfb	??___fladd^0,w,c
  3372   010A2A  B0D8               	btfsc	status,0,c
  3373   010A2C  EF1A  F085         	goto	u4671
  3374   010A30  EF1C  F085         	goto	u4670
  3375   010A34                     u4671:
  3376   010A34  EF47  F085         	goto	l5051
  3377   010A38                     u4670:
  3378   010A38  5001               	movf	___fladd@b^0,w,c
  3379   010A3A  5C05               	subwf	___fladd@a^0,w,c
  3380   010A3C  6E09               	movwf	??___fladd^0,c
  3381   010A3E  5002               	movf	(___fladd@b+1)^0,w,c
  3382   010A40  5806               	subwfb	(___fladd@a+1)^0,w,c
  3383   010A42  6E0A               	movwf	(??___fladd+1)^0,c
  3384   010A44  5003               	movf	(___fladd@b+2)^0,w,c
  3385   010A46  5807               	subwfb	(___fladd@a+2)^0,w,c
  3386   010A48  6E0B               	movwf	(??___fladd+2)^0,c
  3387   010A4A  5004               	movf	(___fladd@b+3)^0,w,c
  3388   010A4C  5808               	subwfb	(___fladd@a+3)^0,w,c
  3389   010A4E  6E0C               	movwf	(??___fladd+3)^0,c
  3390   010A50  0EFF               	movlw	255
  3391   010A52  2409               	addwf	??___fladd^0,w,c
  3392   010A54  6E01               	movwf	___fladd@b^0,c
  3393   010A56  0EFF               	movlw	255
  3394   010A58  200A               	addwfc	(??___fladd+1)^0,w,c
  3395   010A5A  6E02               	movwf	(___fladd@b+1)^0,c
  3396   010A5C  0EFF               	movlw	255
  3397   010A5E  200B               	addwfc	(??___fladd+2)^0,w,c
  3398   010A60  6E03               	movwf	(___fladd@b+2)^0,c
  3399   010A62  0EFF               	movlw	255
  3400   010A64  200C               	addwfc	(??___fladd+3)^0,w,c
  3401   010A66  6E04               	movwf	(___fladd@b+3)^0,c
  3402   010A68  0E80               	movlw	128
  3403   010A6A  1A0D               	xorwf	___fladd@signs^0,f,c
  3404   010A6C  6C10               	negf	___fladd@grs^0,c
  3405   010A6E  5010               	movf	___fladd@grs^0,w,c
  3406   010A70  A4D8               	btfss	status,2,c
  3407   010A72  EF3D  F085         	goto	u4681
  3408   010A76  EF3F  F085         	goto	u4680
  3409   010A7A                     u4681:
  3410   010A7A  EF4F  F085         	goto	l1082
  3411   010A7E                     u4680:
  3412   010A7E  0E01               	movlw	1
  3413   010A80  2601               	addwf	___fladd@b^0,f,c
  3414   010A82  0E00               	movlw	0
  3415   010A84  2202               	addwfc	(___fladd@b+1)^0,f,c
  3416   010A86  2203               	addwfc	(___fladd@b+2)^0,f,c
  3417   010A88  2204               	addwfc	(___fladd@b+3)^0,f,c
  3418   010A8A  EF4F  F085         	goto	l1082
  3419   010A8E                     l5051:
  3420   010A8E  5005               	movf	___fladd@a^0,w,c
  3421   010A90  5E01               	subwf	___fladd@b^0,f,c
  3422   010A92  5006               	movf	(___fladd@a+1)^0,w,c
  3423   010A94  5A02               	subwfb	(___fladd@b+1)^0,f,c
  3424   010A96  5007               	movf	(___fladd@a+2)^0,w,c
  3425   010A98  5A03               	subwfb	(___fladd@b+2)^0,f,c
  3426   010A9A  5008               	movf	(___fladd@a+3)^0,w,c
  3427   010A9C  5A04               	subwfb	(___fladd@b+3)^0,f,c
  3428   010A9E                     l1082:
  3429   010A9E  5001               	movf	___fladd@b^0,w,c
  3430   010AA0  1002               	iorwf	(___fladd@b+1)^0,w,c
  3431   010AA2  1003               	iorwf	(___fladd@b+2)^0,w,c
  3432   010AA4  1004               	iorwf	(___fladd@b+3)^0,w,c
  3433   010AA6  A4D8               	btfss	status,2,c
  3434   010AA8  EF58  F085         	goto	u4691
  3435   010AAC  EF5A  F085         	goto	u4690
  3436   010AB0                     u4691:
  3437   010AB0  EF8F  F085         	goto	l5075
  3438   010AB4                     u4690:
  3439   010AB4  5010               	movf	___fladd@grs^0,w,c
  3440   010AB6  A4D8               	btfss	status,2,c
  3441   010AB8  EF60  F085         	goto	u4701
  3442   010ABC  EF62  F085         	goto	u4700
  3443   010AC0                     u4701:
  3444   010AC0  EF8F  F085         	goto	l5075
  3445   010AC4                     u4700:
  3446   010AC4  0E00               	movlw	0
  3447   010AC6  6E01               	movwf	?___fladd^0,c
  3448   010AC8  0E00               	movlw	0
  3449   010ACA  6E02               	movwf	(?___fladd+1)^0,c
  3450   010ACC  0E00               	movlw	0
  3451   010ACE  6E03               	movwf	(?___fladd+2)^0,c
  3452   010AD0  0E00               	movlw	0
  3453   010AD2  6E04               	movwf	(?___fladd+3)^0,c
  3454   010AD4  EF2A  F086         	goto	l1074
  3455   010AD8                     l5059:
  3456   010AD8  90D8               	bcf	status,0,c
  3457   010ADA  3601               	rlcf	___fladd@b^0,f,c
  3458   010ADC  3602               	rlcf	(___fladd@b+1)^0,f,c
  3459   010ADE  3603               	rlcf	(___fladd@b+2)^0,f,c
  3460   010AE0  3604               	rlcf	(___fladd@b+3)^0,f,c
  3461   010AE2  AE10               	btfss	___fladd@grs^0,7,c
  3462   010AE4  EF76  F085         	goto	u4711
  3463   010AE8  EF78  F085         	goto	u4710
  3464   010AEC                     u4711:
  3465   010AEC  EF79  F085         	goto	l5065
  3466   010AF0                     u4710:
  3467   010AF0  8001               	bsf	___fladd@b^0,0,c
  3468   010AF2                     l5065:
  3469   010AF2  A010               	btfss	___fladd@grs^0,0,c
  3470   010AF4  EF7E  F085         	goto	u4721
  3471   010AF8  EF80  F085         	goto	u4720
  3472   010AFC                     u4721:
  3473   010AFC  EF84  F085         	goto	l5069
  3474   010B00                     u4720:
  3475   010B00  80D8               	bsf	status,0,c
  3476   010B02  3610               	rlcf	___fladd@grs^0,f,c
  3477   010B04  EF86  F085         	goto	l5071
  3478   010B08                     l5069:
  3479   010B08  90D8               	bcf	status,0,c
  3480   010B0A  3610               	rlcf	___fladd@grs^0,f,c
  3481   010B0C                     l5071:
  3482   010B0C  500F               	movf	___fladd@bexp^0,w,c
  3483   010B0E  B4D8               	btfsc	status,2,c
  3484   010B10  EF8C  F085         	goto	u4731
  3485   010B14  EF8E  F085         	goto	u4730
  3486   010B18                     u4731:
  3487   010B18  EF8F  F085         	goto	l5075
  3488   010B1C                     u4730:
  3489   010B1C  060F               	decf	___fladd@bexp^0,f,c
  3490   010B1E                     l5075:
  3491   010B1E  AE03               	btfss	(___fladd@b+2)^0,7,c
  3492   010B20  EF94  F085         	goto	u4741
  3493   010B24  EF96  F085         	goto	u4740
  3494   010B28                     u4741:
  3495   010B28  EF6C  F085         	goto	l5059
  3496   010B2C                     u4740:
  3497   010B2C                     l5077:
  3498   010B2C  0E00               	movlw	0
  3499   010B2E  6E0E               	movwf	___fladd@aexp^0,c
  3500   010B30  AE10               	btfss	___fladd@grs^0,7,c
  3501   010B32  EF9D  F085         	goto	u4751
  3502   010B36  EF9F  F085         	goto	u4750
  3503   010B3A                     u4751:
  3504   010B3A  EFB7  F085         	goto	l1091
  3505   010B3E                     u4750:
  3506   010B3E  C010  F009         	movff	___fladd@grs,??___fladd
  3507   010B42  0E7F               	movlw	127
  3508   010B44  1609               	andwf	??___fladd^0,f,c
  3509   010B46  B4D8               	btfsc	status,2,c
  3510   010B48  EFA8  F085         	goto	u4761
  3511   010B4C  EFAA  F085         	goto	u4760
  3512   010B50                     u4761:
  3513   010B50  EFAE  F085         	goto	l1092
  3514   010B54                     u4760:
  3515   010B54                     l5083:
  3516   010B54  0E01               	movlw	1
  3517   010B56  6E0E               	movwf	___fladd@aexp^0,c
  3518   010B58  EFB7  F085         	goto	l1091
  3519   010B5C                     l1092:
  3520   010B5C  A001               	btfss	___fladd@b^0,0,c
  3521   010B5E  EFB3  F085         	goto	u4771
  3522   010B62  EFB5  F085         	goto	u4770
  3523   010B66                     u4771:
  3524   010B66  EFB7  F085         	goto	l1091
  3525   010B6A                     u4770:
  3526   010B6A  EFAA  F085         	goto	l5083
  3527   010B6E                     l1091:
  3528   010B6E  500E               	movf	___fladd@aexp^0,w,c
  3529   010B70  B4D8               	btfsc	status,2,c
  3530   010B72  EFBD  F085         	goto	u4781
  3531   010B76  EFBF  F085         	goto	u4780
  3532   010B7A                     u4781:
  3533   010B7A  EFEA  F085         	goto	l5095
  3534   010B7E                     u4780:
  3535   010B7E  0E01               	movlw	1
  3536   010B80  2601               	addwf	___fladd@b^0,f,c
  3537   010B82  0E00               	movlw	0
  3538   010B84  2202               	addwfc	(___fladd@b+1)^0,f,c
  3539   010B86  2203               	addwfc	(___fladd@b+2)^0,f,c
  3540   010B88  2204               	addwfc	(___fladd@b+3)^0,f,c
  3541   010B8A  A004               	btfss	(___fladd@b+3)^0,0,c
  3542   010B8C  EFCA  F085         	goto	u4791
  3543   010B90  EFCC  F085         	goto	u4790
  3544   010B94                     u4791:
  3545   010B94  EFEA  F085         	goto	l5095
  3546   010B98                     u4790:
  3547   010B98  C001  F009         	movff	___fladd@b,??___fladd
  3548   010B9C  C002  F00A         	movff	___fladd@b+1,??___fladd+1
  3549   010BA0  C003  F00B         	movff	___fladd@b+2,??___fladd+2
  3550   010BA4  C004  F00C         	movff	___fladd@b+3,??___fladd+3
  3551   010BA8  340C               	rlcf	(??___fladd+3)^0,w,c
  3552   010BAA  320C               	rrcf	(??___fladd+3)^0,f,c
  3553   010BAC  320B               	rrcf	(??___fladd+2)^0,f,c
  3554   010BAE  320A               	rrcf	(??___fladd+1)^0,f,c
  3555   010BB0  3209               	rrcf	??___fladd^0,f,c
  3556   010BB2  C009  F001         	movff	??___fladd,___fladd@b
  3557   010BB6  C00A  F002         	movff	??___fladd+1,___fladd@b+1
  3558   010BBA  C00B  F003         	movff	??___fladd+2,___fladd@b+2
  3559   010BBE  C00C  F004         	movff	??___fladd+3,___fladd@b+3
  3560   010BC2  280F               	incf	___fladd@bexp^0,w,c
  3561   010BC4  B4D8               	btfsc	status,2,c
  3562   010BC6  EFE7  F085         	goto	u4801
  3563   010BCA  EFE9  F085         	goto	u4800
  3564   010BCE                     u4801:
  3565   010BCE  EFEA  F085         	goto	l5095
  3566   010BD2                     u4800:
  3567   010BD2  2A0F               	incf	___fladd@bexp^0,f,c
  3568   010BD4                     l5095:
  3569   010BD4  280F               	incf	___fladd@bexp^0,w,c
  3570   010BD6  B4D8               	btfsc	status,2,c
  3571   010BD8  EFF0  F085         	goto	u4811
  3572   010BDC  EFF2  F085         	goto	u4810
  3573   010BE0                     u4811:
  3574   010BE0  EFFA  F085         	goto	l5099
  3575   010BE4                     u4810:
  3576   010BE4  500F               	movf	___fladd@bexp^0,w,c
  3577   010BE6  A4D8               	btfss	status,2,c
  3578   010BE8  EFF8  F085         	goto	u4821
  3579   010BEC  EFFA  F085         	goto	u4820
  3580   010BF0                     u4821:
  3581   010BF0  EF0C  F086         	goto	l5103
  3582   010BF4                     u4820:
  3583   010BF4                     l5099:
  3584   010BF4  0E00               	movlw	0
  3585   010BF6  6E01               	movwf	___fladd@b^0,c
  3586   010BF8  0E00               	movlw	0
  3587   010BFA  6E02               	movwf	(___fladd@b+1)^0,c
  3588   010BFC  0E00               	movlw	0
  3589   010BFE  6E03               	movwf	(___fladd@b+2)^0,c
  3590   010C00  0E00               	movlw	0
  3591   010C02  6E04               	movwf	(___fladd@b+3)^0,c
  3592   010C04  500F               	movf	___fladd@bexp^0,w,c
  3593   010C06  A4D8               	btfss	status,2,c
  3594   010C08  EF08  F086         	goto	u4831
  3595   010C0C  EF0A  F086         	goto	u4830
  3596   010C10                     u4831:
  3597   010C10  EF0C  F086         	goto	l5103
  3598   010C14                     u4830:
  3599   010C14  0E00               	movlw	0
  3600   010C16  6E0D               	movwf	___fladd@signs^0,c
  3601   010C18                     l5103:
  3602   010C18  A00F               	btfss	___fladd@bexp^0,0,c
  3603   010C1A  EF11  F086         	goto	u4841
  3604   010C1E  EF13  F086         	goto	u4840
  3605   010C22                     u4841:
  3606   010C22  EF16  F086         	goto	l5107
  3607   010C26                     u4840:
  3608   010C26  8E03               	bsf	(___fladd@b+2)^0,7,c
  3609   010C28  EF17  F086         	goto	l5109
  3610   010C2C                     l5107:
  3611   010C2C  9E03               	bcf	(___fladd@b+2)^0,7,c
  3612   010C2E                     l5109:
  3613   010C2E  90D8               	bcf	status,0,c
  3614   010C30  300F               	rrcf	___fladd@bexp^0,w,c
  3615   010C32  6E04               	movwf	(___fladd@b+3)^0,c
  3616   010C34  AE0D               	btfss	___fladd@signs^0,7,c
  3617   010C36  EF1F  F086         	goto	u4851
  3618   010C3A  EF21  F086         	goto	u4850
  3619   010C3E                     u4851:
  3620   010C3E  EF22  F086         	goto	l5115
  3621   010C42                     u4850:
  3622   010C42  8E04               	bsf	(___fladd@b+3)^0,7,c
  3623   010C44                     l5115:
  3624   010C44  C001  F001         	movff	___fladd@b,?___fladd
  3625   010C48  C002  F002         	movff	___fladd@b+1,?___fladd+1
  3626   010C4C  C003  F003         	movff	___fladd@b+2,?___fladd+2
  3627   010C50  C004  F004         	movff	___fladd@b+3,?___fladd+3
  3628   010C54                     l1074:
  3629   010C54  0012               	return		;funcret
  3630   010C56                     __end_of___fladd:
  3631                           	callstack 0
  3632                           
  3633 ;; *************** function ___flmul *****************
  3634 ;; Defined at:
  3635 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;  b               4    0[COMRAM] unsigned char 
  3638 ;;  a               4    4[COMRAM] unsigned char 
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;  prod            4   19[COMRAM] struct .
  3641 ;;  grs             4   14[COMRAM] unsigned long 
  3642 ;;  temp            2   23[COMRAM] struct .
  3643 ;;  bexp            1   18[COMRAM] unsigned char 
  3644 ;;  aexp            1   13[COMRAM] unsigned char 
  3645 ;;  sign            1   12[COMRAM] unsigned char 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  4    0[COMRAM] unsigned char 
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0, prodl, prodh
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3655 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3656 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3657 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3658 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3659 ;;Total ram usage:       25 bytes
  3660 ;; Hardware stack levels used: 1
  3661 ;; This function calls:
  3662 ;;		Nothing
  3663 ;; This function is called by:
  3664 ;;		_convert_rgb2hue
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text8
  3669   010C56                     __ptext8:
  3670                           	callstack 0
  3671   010C56                     ___flmul:
  3672                           	callstack 28
  3673   010C56  5004               	movf	(___flmul@b+3)^0,w,c
  3674   010C58  0B80               	andlw	128
  3675   010C5A  6E0D               	movwf	___flmul@sign^0,c
  3676   010C5C  5004               	movf	(___flmul@b+3)^0,w,c
  3677   010C5E  2404               	addwf	(___flmul@b+3)^0,w,c
  3678   010C60  6E13               	movwf	___flmul@bexp^0,c
  3679   010C62  AE03               	btfss	(___flmul@b+2)^0,7,c
  3680   010C64  EF36  F086         	goto	u5131
  3681   010C68  EF38  F086         	goto	u5130
  3682   010C6C                     u5131:
  3683   010C6C  EF39  F086         	goto	l5343
  3684   010C70                     u5130:
  3685   010C70  8013               	bsf	___flmul@bexp^0,0,c
  3686   010C72                     l5343:
  3687   010C72  5013               	movf	___flmul@bexp^0,w,c
  3688   010C74  B4D8               	btfsc	status,2,c
  3689   010C76  EF3F  F086         	goto	u5141
  3690   010C7A  EF41  F086         	goto	u5140
  3691   010C7E                     u5141:
  3692   010C7E  EF54  F086         	goto	l5351
  3693   010C82                     u5140:
  3694   010C82  2813               	incf	___flmul@bexp^0,w,c
  3695   010C84  A4D8               	btfss	status,2,c
  3696   010C86  EF47  F086         	goto	u5151
  3697   010C8A  EF49  F086         	goto	u5150
  3698   010C8E                     u5151:
  3699   010C8E  EF51  F086         	goto	l5349
  3700   010C92                     u5150:
  3701   010C92  0E00               	movlw	0
  3702   010C94  6E01               	movwf	___flmul@b^0,c
  3703   010C96  0E00               	movlw	0
  3704   010C98  6E02               	movwf	(___flmul@b+1)^0,c
  3705   010C9A  0E00               	movlw	0
  3706   010C9C  6E03               	movwf	(___flmul@b+2)^0,c
  3707   010C9E  0E00               	movlw	0
  3708   010CA0  6E04               	movwf	(___flmul@b+3)^0,c
  3709   010CA2                     l5349:
  3710   010CA2  8E03               	bsf	(___flmul@b+2)^0,7,c
  3711   010CA4  EF5C  F086         	goto	l5353
  3712   010CA8                     l5351:
  3713   010CA8  0E00               	movlw	0
  3714   010CAA  6E01               	movwf	___flmul@b^0,c
  3715   010CAC  0E00               	movlw	0
  3716   010CAE  6E02               	movwf	(___flmul@b+1)^0,c
  3717   010CB0  0E00               	movlw	0
  3718   010CB2  6E03               	movwf	(___flmul@b+2)^0,c
  3719   010CB4  0E00               	movlw	0
  3720   010CB6  6E04               	movwf	(___flmul@b+3)^0,c
  3721   010CB8                     l5353:
  3722   010CB8  5008               	movf	(___flmul@a+3)^0,w,c
  3723   010CBA  0B80               	andlw	128
  3724   010CBC  1A0D               	xorwf	___flmul@sign^0,f,c
  3725   010CBE  5008               	movf	(___flmul@a+3)^0,w,c
  3726   010CC0  2408               	addwf	(___flmul@a+3)^0,w,c
  3727   010CC2  6E0E               	movwf	___flmul@aexp^0,c
  3728   010CC4  AE07               	btfss	(___flmul@a+2)^0,7,c
  3729   010CC6  EF67  F086         	goto	u5161
  3730   010CCA  EF69  F086         	goto	u5160
  3731   010CCE                     u5161:
  3732   010CCE  EF6A  F086         	goto	l5361
  3733   010CD2                     u5160:
  3734   010CD2  800E               	bsf	___flmul@aexp^0,0,c
  3735   010CD4                     l5361:
  3736   010CD4  500E               	movf	___flmul@aexp^0,w,c
  3737   010CD6  B4D8               	btfsc	status,2,c
  3738   010CD8  EF70  F086         	goto	u5171
  3739   010CDC  EF72  F086         	goto	u5170
  3740   010CE0                     u5171:
  3741   010CE0  EF85  F086         	goto	l5369
  3742   010CE4                     u5170:
  3743   010CE4  280E               	incf	___flmul@aexp^0,w,c
  3744   010CE6  A4D8               	btfss	status,2,c
  3745   010CE8  EF78  F086         	goto	u5181
  3746   010CEC  EF7A  F086         	goto	u5180
  3747   010CF0                     u5181:
  3748   010CF0  EF82  F086         	goto	l5367
  3749   010CF4                     u5180:
  3750   010CF4  0E00               	movlw	0
  3751   010CF6  6E05               	movwf	___flmul@a^0,c
  3752   010CF8  0E00               	movlw	0
  3753   010CFA  6E06               	movwf	(___flmul@a+1)^0,c
  3754   010CFC  0E00               	movlw	0
  3755   010CFE  6E07               	movwf	(___flmul@a+2)^0,c
  3756   010D00  0E00               	movlw	0
  3757   010D02  6E08               	movwf	(___flmul@a+3)^0,c
  3758   010D04                     l5367:
  3759   010D04  8E07               	bsf	(___flmul@a+2)^0,7,c
  3760   010D06  EF8D  F086         	goto	l1151
  3761   010D0A                     l5369:
  3762   010D0A  0E00               	movlw	0
  3763   010D0C  6E05               	movwf	___flmul@a^0,c
  3764   010D0E  0E00               	movlw	0
  3765   010D10  6E06               	movwf	(___flmul@a+1)^0,c
  3766   010D12  0E00               	movlw	0
  3767   010D14  6E07               	movwf	(___flmul@a+2)^0,c
  3768   010D16  0E00               	movlw	0
  3769   010D18  6E08               	movwf	(___flmul@a+3)^0,c
  3770   010D1A                     l1151:
  3771   010D1A  500E               	movf	___flmul@aexp^0,w,c
  3772   010D1C  B4D8               	btfsc	status,2,c
  3773   010D1E  EF93  F086         	goto	u5191
  3774   010D22  EF95  F086         	goto	u5190
  3775   010D26                     u5191:
  3776   010D26  EF9D  F086         	goto	l5373
  3777   010D2A                     u5190:
  3778   010D2A  5013               	movf	___flmul@bexp^0,w,c
  3779   010D2C  A4D8               	btfss	status,2,c
  3780   010D2E  EF9B  F086         	goto	u5201
  3781   010D32  EF9D  F086         	goto	u5200
  3782   010D36                     u5201:
  3783   010D36  EFA7  F086         	goto	l5377
  3784   010D3A                     u5200:
  3785   010D3A                     l5373:
  3786   010D3A  0E00               	movlw	0
  3787   010D3C  6E01               	movwf	?___flmul^0,c
  3788   010D3E  0E00               	movlw	0
  3789   010D40  6E02               	movwf	(?___flmul+1)^0,c
  3790   010D42  0E00               	movlw	0
  3791   010D44  6E03               	movwf	(?___flmul+2)^0,c
  3792   010D46  0E00               	movlw	0
  3793   010D48  6E04               	movwf	(?___flmul+3)^0,c
  3794   010D4A  EF3F  F088         	goto	l1155
  3795   010D4E                     l5377:
  3796   010D4E  5007               	movf	(___flmul@a+2)^0,w,c
  3797   010D50  0201               	mulwf	___flmul@b^0,c
  3798   010D52  CFF3 F018          	movff	prodl,___flmul@temp
  3799   010D56  CFF4 F019          	movff	prodh,___flmul@temp+1
  3800   010D5A  5018               	movf	___flmul@temp^0,w,c
  3801   010D5C  6E0F               	movwf	___flmul@grs^0,c
  3802   010D5E  6A10               	clrf	(___flmul@grs+1)^0,c
  3803   010D60  6A11               	clrf	(___flmul@grs+2)^0,c
  3804   010D62  6A12               	clrf	(___flmul@grs+3)^0,c
  3805   010D64  5019               	movf	(___flmul@temp+1)^0,w,c
  3806   010D66  6E14               	movwf	___flmul@prod^0,c
  3807   010D68  6A15               	clrf	(___flmul@prod+1)^0,c
  3808   010D6A  6A16               	clrf	(___flmul@prod+2)^0,c
  3809   010D6C  6A17               	clrf	(___flmul@prod+3)^0,c
  3810   010D6E  5006               	movf	(___flmul@a+1)^0,w,c
  3811   010D70  0202               	mulwf	(___flmul@b+1)^0,c
  3812   010D72  CFF3 F018          	movff	prodl,___flmul@temp
  3813   010D76  CFF4 F019          	movff	prodh,___flmul@temp+1
  3814   010D7A  5018               	movf	___flmul@temp^0,w,c
  3815   010D7C  260F               	addwf	___flmul@grs^0,f,c
  3816   010D7E  0E00               	movlw	0
  3817   010D80  2210               	addwfc	(___flmul@grs+1)^0,f,c
  3818   010D82  2211               	addwfc	(___flmul@grs+2)^0,f,c
  3819   010D84  2212               	addwfc	(___flmul@grs+3)^0,f,c
  3820   010D86  5019               	movf	(___flmul@temp+1)^0,w,c
  3821   010D88  2614               	addwf	___flmul@prod^0,f,c
  3822   010D8A  0E00               	movlw	0
  3823   010D8C  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3824   010D8E  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3825   010D90  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3826   010D92  5005               	movf	___flmul@a^0,w,c
  3827   010D94  0203               	mulwf	(___flmul@b+2)^0,c
  3828   010D96  CFF3 F018          	movff	prodl,___flmul@temp
  3829   010D9A  CFF4 F019          	movff	prodh,___flmul@temp+1
  3830   010D9E  5018               	movf	___flmul@temp^0,w,c
  3831   010DA0  260F               	addwf	___flmul@grs^0,f,c
  3832   010DA2  0E00               	movlw	0
  3833   010DA4  2210               	addwfc	(___flmul@grs+1)^0,f,c
  3834   010DA6  2211               	addwfc	(___flmul@grs+2)^0,f,c
  3835   010DA8  2212               	addwfc	(___flmul@grs+3)^0,f,c
  3836   010DAA  5019               	movf	(___flmul@temp+1)^0,w,c
  3837   010DAC  2614               	addwf	___flmul@prod^0,f,c
  3838   010DAE  0E00               	movlw	0
  3839   010DB0  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3840   010DB2  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3841   010DB4  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3842   010DB6  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  3843   010DBA  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  3844   010DBE  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  3845   010DC2  6A0F               	clrf	___flmul@grs^0,c
  3846   010DC4  5005               	movf	___flmul@a^0,w,c
  3847   010DC6  0202               	mulwf	(___flmul@b+1)^0,c
  3848   010DC8  CFF3 F018          	movff	prodl,___flmul@temp
  3849   010DCC  CFF4 F019          	movff	prodh,___flmul@temp+1
  3850   010DD0  5018               	movf	___flmul@temp^0,w,c
  3851   010DD2  260F               	addwf	___flmul@grs^0,f,c
  3852   010DD4  5019               	movf	(___flmul@temp+1)^0,w,c
  3853   010DD6  2210               	addwfc	(___flmul@grs+1)^0,f,c
  3854   010DD8  0E00               	movlw	0
  3855   010DDA  2211               	addwfc	(___flmul@grs+2)^0,f,c
  3856   010DDC  0E00               	movlw	0
  3857   010DDE  2212               	addwfc	(___flmul@grs+3)^0,f,c
  3858   010DE0  5006               	movf	(___flmul@a+1)^0,w,c
  3859   010DE2  0201               	mulwf	___flmul@b^0,c
  3860   010DE4  CFF3 F018          	movff	prodl,___flmul@temp
  3861   010DE8  CFF4 F019          	movff	prodh,___flmul@temp+1
  3862   010DEC  5018               	movf	___flmul@temp^0,w,c
  3863   010DEE  260F               	addwf	___flmul@grs^0,f,c
  3864   010DF0  5019               	movf	(___flmul@temp+1)^0,w,c
  3865   010DF2  2210               	addwfc	(___flmul@grs+1)^0,f,c
  3866   010DF4  0E00               	movlw	0
  3867   010DF6  2211               	addwfc	(___flmul@grs+2)^0,f,c
  3868   010DF8  0E00               	movlw	0
  3869   010DFA  2212               	addwfc	(___flmul@grs+3)^0,f,c
  3870   010DFC  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  3871   010E00  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  3872   010E04  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  3873   010E08  6A0F               	clrf	___flmul@grs^0,c
  3874   010E0A  5005               	movf	___flmul@a^0,w,c
  3875   010E0C  0201               	mulwf	___flmul@b^0,c
  3876   010E0E  CFF3 F018          	movff	prodl,___flmul@temp
  3877   010E12  CFF4 F019          	movff	prodh,___flmul@temp+1
  3878   010E16  5018               	movf	___flmul@temp^0,w,c
  3879   010E18  260F               	addwf	___flmul@grs^0,f,c
  3880   010E1A  5019               	movf	(___flmul@temp+1)^0,w,c
  3881   010E1C  2210               	addwfc	(___flmul@grs+1)^0,f,c
  3882   010E1E  0E00               	movlw	0
  3883   010E20  2211               	addwfc	(___flmul@grs+2)^0,f,c
  3884   010E22  0E00               	movlw	0
  3885   010E24  2212               	addwfc	(___flmul@grs+3)^0,f,c
  3886   010E26  5007               	movf	(___flmul@a+2)^0,w,c
  3887   010E28  0202               	mulwf	(___flmul@b+1)^0,c
  3888   010E2A  CFF3 F018          	movff	prodl,___flmul@temp
  3889   010E2E  CFF4 F019          	movff	prodh,___flmul@temp+1
  3890   010E32  5018               	movf	___flmul@temp^0,w,c
  3891   010E34  2614               	addwf	___flmul@prod^0,f,c
  3892   010E36  5019               	movf	(___flmul@temp+1)^0,w,c
  3893   010E38  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3894   010E3A  0E00               	movlw	0
  3895   010E3C  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3896   010E3E  0E00               	movlw	0
  3897   010E40  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3898   010E42  5006               	movf	(___flmul@a+1)^0,w,c
  3899   010E44  0203               	mulwf	(___flmul@b+2)^0,c
  3900   010E46  CFF3 F018          	movff	prodl,___flmul@temp
  3901   010E4A  CFF4 F019          	movff	prodh,___flmul@temp+1
  3902   010E4E  5018               	movf	___flmul@temp^0,w,c
  3903   010E50  2614               	addwf	___flmul@prod^0,f,c
  3904   010E52  5019               	movf	(___flmul@temp+1)^0,w,c
  3905   010E54  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3906   010E56  0E00               	movlw	0
  3907   010E58  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3908   010E5A  0E00               	movlw	0
  3909   010E5C  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3910   010E5E  5007               	movf	(___flmul@a+2)^0,w,c
  3911   010E60  0203               	mulwf	(___flmul@b+2)^0,c
  3912   010E62  CFF3 F018          	movff	prodl,___flmul@temp
  3913   010E66  CFF4 F019          	movff	prodh,___flmul@temp+1
  3914   010E6A  5018               	movf	___flmul@temp^0,w,c
  3915   010E6C  6E09               	movwf	??___flmul^0,c
  3916   010E6E  5019               	movf	(___flmul@temp+1)^0,w,c
  3917   010E70  6E0A               	movwf	(??___flmul+1)^0,c
  3918   010E72  6A0B               	clrf	(??___flmul+2)^0,c
  3919   010E74  6A0C               	clrf	(??___flmul+3)^0,c
  3920   010E76  C00B  F00C         	movff	??___flmul+2,??___flmul+3
  3921   010E7A  C00A  F00B         	movff	??___flmul+1,??___flmul+2
  3922   010E7E  C009  F00A         	movff	??___flmul,??___flmul+1
  3923   010E82  6A09               	clrf	??___flmul^0,c
  3924   010E84  5009               	movf	??___flmul^0,w,c
  3925   010E86  2614               	addwf	___flmul@prod^0,f,c
  3926   010E88  500A               	movf	(??___flmul+1)^0,w,c
  3927   010E8A  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3928   010E8C  500B               	movf	(??___flmul+2)^0,w,c
  3929   010E8E  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3930   010E90  500C               	movf	(??___flmul+3)^0,w,c
  3931   010E92  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3932   010E94  C00F  F009         	movff	___flmul@grs,??___flmul
  3933   010E98  C010  F00A         	movff	___flmul@grs+1,??___flmul+1
  3934   010E9C  C011  F00B         	movff	___flmul@grs+2,??___flmul+2
  3935   010EA0  C012  F00C         	movff	___flmul@grs+3,??___flmul+3
  3936   010EA4  0E19               	movlw	25
  3937   010EA6  EF5A  F087         	goto	u5210
  3938   010EAA                     u5215:
  3939   010EAA  90D8               	bcf	status,0,c
  3940   010EAC  320C               	rrcf	(??___flmul+3)^0,f,c
  3941   010EAE  320B               	rrcf	(??___flmul+2)^0,f,c
  3942   010EB0  320A               	rrcf	(??___flmul+1)^0,f,c
  3943   010EB2  3209               	rrcf	??___flmul^0,f,c
  3944   010EB4                     u5210:
  3945   010EB4  2EE8               	decfsz	wreg,f,c
  3946   010EB6  EF55  F087         	goto	u5215
  3947   010EBA  5009               	movf	??___flmul^0,w,c
  3948   010EBC  2614               	addwf	___flmul@prod^0,f,c
  3949   010EBE  500A               	movf	(??___flmul+1)^0,w,c
  3950   010EC0  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3951   010EC2  500B               	movf	(??___flmul+2)^0,w,c
  3952   010EC4  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3953   010EC6  500C               	movf	(??___flmul+3)^0,w,c
  3954   010EC8  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3955   010ECA  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  3956   010ECE  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  3957   010ED2  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  3958   010ED6  6A0F               	clrf	___flmul@grs^0,c
  3959   010ED8  500E               	movf	___flmul@aexp^0,w,c
  3960   010EDA  C013  F009         	movff	___flmul@bexp,??___flmul
  3961   010EDE  6A0A               	clrf	(??___flmul+1)^0,c
  3962   010EE0  2609               	addwf	??___flmul^0,f,c
  3963   010EE2  0E00               	movlw	0
  3964   010EE4  220A               	addwfc	(??___flmul+1)^0,f,c
  3965   010EE6  0E82               	movlw	130
  3966   010EE8  2409               	addwf	??___flmul^0,w,c
  3967   010EEA  6E18               	movwf	___flmul@temp^0,c
  3968   010EEC  0EFF               	movlw	255
  3969   010EEE  200A               	addwfc	(??___flmul+1)^0,w,c
  3970   010EF0  6E19               	movwf	(___flmul@temp+1)^0,c
  3971   010EF2  EF90  F087         	goto	l5425
  3972   010EF6                     l5419:
  3973   010EF6  90D8               	bcf	status,0,c
  3974   010EF8  3614               	rlcf	___flmul@prod^0,f,c
  3975   010EFA  3615               	rlcf	(___flmul@prod+1)^0,f,c
  3976   010EFC  3616               	rlcf	(___flmul@prod+2)^0,f,c
  3977   010EFE  3617               	rlcf	(___flmul@prod+3)^0,f,c
  3978   010F00  AE12               	btfss	(___flmul@grs+3)^0,7,c
  3979   010F02  EF85  F087         	goto	u5221
  3980   010F06  EF87  F087         	goto	u5220
  3981   010F0A                     u5221:
  3982   010F0A  EF88  F087         	goto	l1158
  3983   010F0E                     u5220:
  3984   010F0E  8014               	bsf	___flmul@prod^0,0,c
  3985   010F10                     l1158:
  3986   010F10  90D8               	bcf	status,0,c
  3987   010F12  360F               	rlcf	___flmul@grs^0,f,c
  3988   010F14  3610               	rlcf	(___flmul@grs+1)^0,f,c
  3989   010F16  3611               	rlcf	(___flmul@grs+2)^0,f,c
  3990   010F18  3612               	rlcf	(___flmul@grs+3)^0,f,c
  3991   010F1A  0618               	decf	___flmul@temp^0,f,c
  3992   010F1C  A0D8               	btfss	status,0,c
  3993   010F1E  0619               	decf	(___flmul@temp+1)^0,f,c
  3994   010F20                     l5425:
  3995   010F20  AE16               	btfss	(___flmul@prod+2)^0,7,c
  3996   010F22  EF95  F087         	goto	u5231
  3997   010F26  EF97  F087         	goto	u5230
  3998   010F2A                     u5231:
  3999   010F2A  EF7B  F087         	goto	l5419
  4000   010F2E                     u5230:
  4001   010F2E  0E00               	movlw	0
  4002   010F30  6E0E               	movwf	___flmul@aexp^0,c
  4003   010F32  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4004   010F34  EF9E  F087         	goto	u5241
  4005   010F38  EFA0  F087         	goto	u5240
  4006   010F3C                     u5241:
  4007   010F3C  EFC4  F087         	goto	l1160
  4008   010F40                     u5240:
  4009   010F40  0EFF               	movlw	255
  4010   010F42  140F               	andwf	___flmul@grs^0,w,c
  4011   010F44  6E09               	movwf	??___flmul^0,c
  4012   010F46  0EFF               	movlw	255
  4013   010F48  1410               	andwf	(___flmul@grs+1)^0,w,c
  4014   010F4A  6E0A               	movwf	(??___flmul+1)^0,c
  4015   010F4C  0EFF               	movlw	255
  4016   010F4E  1411               	andwf	(___flmul@grs+2)^0,w,c
  4017   010F50  6E0B               	movwf	(??___flmul+2)^0,c
  4018   010F52  0E7F               	movlw	127
  4019   010F54  1412               	andwf	(___flmul@grs+3)^0,w,c
  4020   010F56  6E0C               	movwf	(??___flmul+3)^0,c
  4021   010F58  5009               	movf	??___flmul^0,w,c
  4022   010F5A  100A               	iorwf	(??___flmul+1)^0,w,c
  4023   010F5C  100B               	iorwf	(??___flmul+2)^0,w,c
  4024   010F5E  100C               	iorwf	(??___flmul+3)^0,w,c
  4025   010F60  B4D8               	btfsc	status,2,c
  4026   010F62  EFB5  F087         	goto	u5251
  4027   010F66  EFB7  F087         	goto	u5250
  4028   010F6A                     u5251:
  4029   010F6A  EFBB  F087         	goto	l1161
  4030   010F6E                     u5250:
  4031   010F6E                     l5433:
  4032   010F6E  0E01               	movlw	1
  4033   010F70  6E0E               	movwf	___flmul@aexp^0,c
  4034   010F72  EFC4  F087         	goto	l1160
  4035   010F76                     l1161:
  4036   010F76  A014               	btfss	___flmul@prod^0,0,c
  4037   010F78  EFC0  F087         	goto	u5261
  4038   010F7C  EFC2  F087         	goto	u5260
  4039   010F80                     u5261:
  4040   010F80  EFC4  F087         	goto	l1160
  4041   010F84                     u5260:
  4042   010F84  EFB7  F087         	goto	l5433
  4043   010F88                     l1160:
  4044   010F88  500E               	movf	___flmul@aexp^0,w,c
  4045   010F8A  B4D8               	btfsc	status,2,c
  4046   010F8C  EFCA  F087         	goto	u5271
  4047   010F90  EFCC  F087         	goto	u5270
  4048   010F94                     u5271:
  4049   010F94  EFF0  F087         	goto	l5445
  4050   010F98                     u5270:
  4051   010F98  0E01               	movlw	1
  4052   010F9A  2614               	addwf	___flmul@prod^0,f,c
  4053   010F9C  0E00               	movlw	0
  4054   010F9E  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4055   010FA0  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4056   010FA2  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4057   010FA4  A017               	btfss	(___flmul@prod+3)^0,0,c
  4058   010FA6  EFD7  F087         	goto	u5281
  4059   010FAA  EFD9  F087         	goto	u5280
  4060   010FAE                     u5281:
  4061   010FAE  EFF0  F087         	goto	l5445
  4062   010FB2                     u5280:
  4063   010FB2  C014  F009         	movff	___flmul@prod,??___flmul
  4064   010FB6  C015  F00A         	movff	___flmul@prod+1,??___flmul+1
  4065   010FBA  C016  F00B         	movff	___flmul@prod+2,??___flmul+2
  4066   010FBE  C017  F00C         	movff	___flmul@prod+3,??___flmul+3
  4067   010FC2  340C               	rlcf	(??___flmul+3)^0,w,c
  4068   010FC4  320C               	rrcf	(??___flmul+3)^0,f,c
  4069   010FC6  320B               	rrcf	(??___flmul+2)^0,f,c
  4070   010FC8  320A               	rrcf	(??___flmul+1)^0,f,c
  4071   010FCA  3209               	rrcf	??___flmul^0,f,c
  4072   010FCC  C009  F014         	movff	??___flmul,___flmul@prod
  4073   010FD0  C00A  F015         	movff	??___flmul+1,___flmul@prod+1
  4074   010FD4  C00B  F016         	movff	??___flmul+2,___flmul@prod+2
  4075   010FD8  C00C  F017         	movff	??___flmul+3,___flmul@prod+3
  4076   010FDC  4A18               	infsnz	___flmul@temp^0,f,c
  4077   010FDE  2A19               	incf	(___flmul@temp+1)^0,f,c
  4078   010FE0                     l5445:
  4079   010FE0  BE19               	btfsc	(___flmul@temp+1)^0,7,c
  4080   010FE2  EFFB  F087         	goto	u5291
  4081   010FE6  5019               	movf	(___flmul@temp+1)^0,w,c
  4082   010FE8  E108               	bnz	u5290
  4083   010FEA  2818               	incf	___flmul@temp^0,w,c
  4084   010FEC  A0D8               	btfss	status,0,c
  4085   010FEE  EFFB  F087         	goto	u5291
  4086   010FF2  EFFD  F087         	goto	u5290
  4087   010FF6                     u5291:
  4088   010FF6  EF07  F088         	goto	l5449
  4089   010FFA                     u5290:
  4090   010FFA  0E00               	movlw	0
  4091   010FFC  6E14               	movwf	___flmul@prod^0,c
  4092   010FFE  0E00               	movlw	0
  4093   011000  6E15               	movwf	(___flmul@prod+1)^0,c
  4094   011002  0E80               	movlw	128
  4095   011004  6E16               	movwf	(___flmul@prod+2)^0,c
  4096   011006  0E7F               	movlw	127
  4097   011008  6E17               	movwf	(___flmul@prod+3)^0,c
  4098   01100A  EF35  F088         	goto	l5461
  4099   01100E                     l5449:
  4100   01100E  BE19               	btfsc	(___flmul@temp+1)^0,7,c
  4101   011010  EF14  F088         	goto	u5300
  4102   011014  5019               	movf	(___flmul@temp+1)^0,w,c
  4103   011016  E106               	bnz	u5301
  4104   011018  0418               	decf	___flmul@temp^0,w,c
  4105   01101A  B0D8               	btfsc	status,0,c
  4106   01101C  EF12  F088         	goto	u5301
  4107   011020  EF14  F088         	goto	u5300
  4108   011024                     u5301:
  4109   011024  EF20  F088         	goto	l1168
  4110   011028                     u5300:
  4111   011028  0E00               	movlw	0
  4112   01102A  6E14               	movwf	___flmul@prod^0,c
  4113   01102C  0E00               	movlw	0
  4114   01102E  6E15               	movwf	(___flmul@prod+1)^0,c
  4115   011030  0E00               	movlw	0
  4116   011032  6E16               	movwf	(___flmul@prod+2)^0,c
  4117   011034  0E00               	movlw	0
  4118   011036  6E17               	movwf	(___flmul@prod+3)^0,c
  4119   011038  0E00               	movlw	0
  4120   01103A  6E0D               	movwf	___flmul@sign^0,c
  4121   01103C  EF35  F088         	goto	l5461
  4122   011040                     l1168:
  4123   011040  C018  F013         	movff	___flmul@temp,___flmul@bexp
  4124   011044  0EFF               	movlw	255
  4125   011046  1614               	andwf	___flmul@prod^0,f,c
  4126   011048  0EFF               	movlw	255
  4127   01104A  1615               	andwf	(___flmul@prod+1)^0,f,c
  4128   01104C  0E7F               	movlw	127
  4129   01104E  1616               	andwf	(___flmul@prod+2)^0,f,c
  4130   011050  0E00               	movlw	0
  4131   011052  1617               	andwf	(___flmul@prod+3)^0,f,c
  4132   011054  A013               	btfss	___flmul@bexp^0,0,c
  4133   011056  EF2F  F088         	goto	u5311
  4134   01105A  EF31  F088         	goto	u5310
  4135   01105E                     u5311:
  4136   01105E  EF32  F088         	goto	l5459
  4137   011062                     u5310:
  4138   011062  8E16               	bsf	(___flmul@prod+2)^0,7,c
  4139   011064                     l5459:
  4140   011064  90D8               	bcf	status,0,c
  4141   011066  3013               	rrcf	___flmul@bexp^0,w,c
  4142   011068  6E17               	movwf	(___flmul@prod+3)^0,c
  4143   01106A                     l5461:
  4144   01106A  500D               	movf	___flmul@sign^0,w,c
  4145   01106C  1217               	iorwf	(___flmul@prod+3)^0,f,c
  4146   01106E  C014  F001         	movff	___flmul@prod,?___flmul
  4147   011072  C015  F002         	movff	___flmul@prod+1,?___flmul+1
  4148   011076  C016  F003         	movff	___flmul@prod+2,?___flmul+2
  4149   01107A  C017  F004         	movff	___flmul@prod+3,?___flmul+3
  4150   01107E                     l1155:
  4151   01107E  0012               	return		;funcret
  4152   011080                     __end_of___flmul:
  4153                           	callstack 0
  4154                           
  4155 ;; *************** function ___flge *****************
  4156 ;; Defined at:
  4157 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  ff1             4    0[COMRAM] unsigned char 
  4160 ;;  ff2             4    4[COMRAM] unsigned char 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;		None
  4163 ;; Return value:  Size  Location     Type
  4164 ;;		None               void
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4172 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4174 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4175 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4176 ;;Total ram usage:       12 bytes
  4177 ;; Hardware stack levels used: 1
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_convert_rgb2hue
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text9
  4186   011EC8                     __ptext9:
  4187                           	callstack 0
  4188   011EC8                     ___flge:
  4189                           	callstack 28
  4190   011EC8  0E00               	movlw	0
  4191   011ECA  1401               	andwf	___flge@ff1^0,w,c
  4192   011ECC  6E09               	movwf	??___flge^0,c
  4193   011ECE  0E00               	movlw	0
  4194   011ED0  1402               	andwf	(___flge@ff1+1)^0,w,c
  4195   011ED2  6E0A               	movwf	(??___flge+1)^0,c
  4196   011ED4  0E80               	movlw	128
  4197   011ED6  1403               	andwf	(___flge@ff1+2)^0,w,c
  4198   011ED8  6E0B               	movwf	(??___flge+2)^0,c
  4199   011EDA  0E7F               	movlw	127
  4200   011EDC  1404               	andwf	(___flge@ff1+3)^0,w,c
  4201   011EDE  6E0C               	movwf	(??___flge+3)^0,c
  4202   011EE0  5009               	movf	??___flge^0,w,c
  4203   011EE2  100A               	iorwf	(??___flge+1)^0,w,c
  4204   011EE4  100B               	iorwf	(??___flge+2)^0,w,c
  4205   011EE6  100C               	iorwf	(??___flge+3)^0,w,c
  4206   011EE8  A4D8               	btfss	status,2,c
  4207   011EEA  EF79  F08F         	goto	u5351
  4208   011EEE  EF7B  F08F         	goto	u5350
  4209   011EF2                     u5351:
  4210   011EF2  EF83  F08F         	goto	l5493
  4211   011EF6                     u5350:
  4212   011EF6  0E00               	movlw	0
  4213   011EF8  6E01               	movwf	___flge@ff1^0,c
  4214   011EFA  0E00               	movlw	0
  4215   011EFC  6E02               	movwf	(___flge@ff1+1)^0,c
  4216   011EFE  0E00               	movlw	0
  4217   011F00  6E03               	movwf	(___flge@ff1+2)^0,c
  4218   011F02  0E00               	movlw	0
  4219   011F04  6E04               	movwf	(___flge@ff1+3)^0,c
  4220   011F06                     l5493:
  4221   011F06  0E00               	movlw	0
  4222   011F08  1405               	andwf	___flge@ff2^0,w,c
  4223   011F0A  6E09               	movwf	??___flge^0,c
  4224   011F0C  0E00               	movlw	0
  4225   011F0E  1406               	andwf	(___flge@ff2+1)^0,w,c
  4226   011F10  6E0A               	movwf	(??___flge+1)^0,c
  4227   011F12  0E80               	movlw	128
  4228   011F14  1407               	andwf	(___flge@ff2+2)^0,w,c
  4229   011F16  6E0B               	movwf	(??___flge+2)^0,c
  4230   011F18  0E7F               	movlw	127
  4231   011F1A  1408               	andwf	(___flge@ff2+3)^0,w,c
  4232   011F1C  6E0C               	movwf	(??___flge+3)^0,c
  4233   011F1E  5009               	movf	??___flge^0,w,c
  4234   011F20  100A               	iorwf	(??___flge+1)^0,w,c
  4235   011F22  100B               	iorwf	(??___flge+2)^0,w,c
  4236   011F24  100C               	iorwf	(??___flge+3)^0,w,c
  4237   011F26  A4D8               	btfss	status,2,c
  4238   011F28  EF98  F08F         	goto	u5361
  4239   011F2C  EF9A  F08F         	goto	u5360
  4240   011F30                     u5361:
  4241   011F30  EFA2  F08F         	goto	l5497
  4242   011F34                     u5360:
  4243   011F34  0E00               	movlw	0
  4244   011F36  6E05               	movwf	___flge@ff2^0,c
  4245   011F38  0E00               	movlw	0
  4246   011F3A  6E06               	movwf	(___flge@ff2+1)^0,c
  4247   011F3C  0E00               	movlw	0
  4248   011F3E  6E07               	movwf	(___flge@ff2+2)^0,c
  4249   011F40  0E00               	movlw	0
  4250   011F42  6E08               	movwf	(___flge@ff2+3)^0,c
  4251   011F44                     l5497:
  4252   011F44  AE04               	btfss	(___flge@ff1+3)^0,7,c
  4253   011F46  EFA7  F08F         	goto	u5371
  4254   011F4A  EFA9  F08F         	goto	u5370
  4255   011F4E                     u5371:
  4256   011F4E  EFB2  F08F         	goto	l5501
  4257   011F52                     u5370:
  4258   011F52  6C01               	negf	___flge@ff1^0,c
  4259   011F54  1E02               	comf	(___flge@ff1+1)^0,f,c
  4260   011F56  B0D8               	btfsc	status,0,c
  4261   011F58  2A02               	incf	(___flge@ff1+1)^0,f,c
  4262   011F5A  1E03               	comf	(___flge@ff1+2)^0,f,c
  4263   011F5C  B0D8               	btfsc	status,0,c
  4264   011F5E  2A03               	incf	(___flge@ff1+2)^0,f,c
  4265   011F60  0E80               	movlw	128
  4266   011F62  5604               	subfwb	(___flge@ff1+3)^0,f,c
  4267   011F64                     l5501:
  4268   011F64  AE08               	btfss	(___flge@ff2+3)^0,7,c
  4269   011F66  EFB7  F08F         	goto	u5381
  4270   011F6A  EFB9  F08F         	goto	u5380
  4271   011F6E                     u5381:
  4272   011F6E  EFC2  F08F         	goto	l802
  4273   011F72                     u5380:
  4274   011F72  6C05               	negf	___flge@ff2^0,c
  4275   011F74  1E06               	comf	(___flge@ff2+1)^0,f,c
  4276   011F76  B0D8               	btfsc	status,0,c
  4277   011F78  2A06               	incf	(___flge@ff2+1)^0,f,c
  4278   011F7A  1E07               	comf	(___flge@ff2+2)^0,f,c
  4279   011F7C  B0D8               	btfsc	status,0,c
  4280   011F7E  2A07               	incf	(___flge@ff2+2)^0,f,c
  4281   011F80  0E80               	movlw	128
  4282   011F82  5608               	subfwb	(___flge@ff2+3)^0,f,c
  4283   011F84                     l802:
  4284   011F84  0E00               	movlw	0
  4285   011F86  1A01               	xorwf	___flge@ff1^0,f,c
  4286   011F88  0E00               	movlw	0
  4287   011F8A  1A02               	xorwf	(___flge@ff1+1)^0,f,c
  4288   011F8C  0E00               	movlw	0
  4289   011F8E  1A03               	xorwf	(___flge@ff1+2)^0,f,c
  4290   011F90  0E80               	movlw	128
  4291   011F92  1A04               	xorwf	(___flge@ff1+3)^0,f,c
  4292   011F94  0E00               	movlw	0
  4293   011F96  1A05               	xorwf	___flge@ff2^0,f,c
  4294   011F98  0E00               	movlw	0
  4295   011F9A  1A06               	xorwf	(___flge@ff2+1)^0,f,c
  4296   011F9C  0E00               	movlw	0
  4297   011F9E  1A07               	xorwf	(___flge@ff2+2)^0,f,c
  4298   011FA0  0E80               	movlw	128
  4299   011FA2  1A08               	xorwf	(___flge@ff2+3)^0,f,c
  4300   011FA4  5005               	movf	___flge@ff2^0,w,c
  4301   011FA6  5C01               	subwf	___flge@ff1^0,w,c
  4302   011FA8  5006               	movf	(___flge@ff2+1)^0,w,c
  4303   011FAA  5802               	subwfb	(___flge@ff1+1)^0,w,c
  4304   011FAC  5007               	movf	(___flge@ff2+2)^0,w,c
  4305   011FAE  5803               	subwfb	(___flge@ff1+2)^0,w,c
  4306   011FB0  5008               	movf	(___flge@ff2+3)^0,w,c
  4307   011FB2  5804               	subwfb	(___flge@ff1+3)^0,w,c
  4308   011FB4  B0D8               	btfsc	status,0,c
  4309   011FB6  EFDF  F08F         	goto	u5391
  4310   011FBA  EFE1  F08F         	goto	u5390
  4311   011FBE                     u5391:
  4312   011FBE  EFE4  F08F         	goto	l5507
  4313   011FC2                     u5390:
  4314   011FC2  90D8               	bcf	status,0,c
  4315   011FC4  EFE5  F08F         	goto	l807
  4316   011FC8                     l5507:
  4317   011FC8  80D8               	bsf	status,0,c
  4318   011FCA                     l807:
  4319   011FCA  0012               	return		;funcret
  4320   011FCC                     __end_of___flge:
  4321                           	callstack 0
  4322                           
  4323 ;; *************** function ___fleq *****************
  4324 ;; Defined at:
  4325 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  ff1             4    0[COMRAM] unsigned char 
  4328 ;;  ff2             4    4[COMRAM] unsigned char 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;		None
  4331 ;; Return value:  Size  Location     Type
  4332 ;;		None               void
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4340 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4342 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4343 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4344 ;;Total ram usage:       12 bytes
  4345 ;; Hardware stack levels used: 1
  4346 ;; This function calls:
  4347 ;;		Nothing
  4348 ;; This function is called by:
  4349 ;;		_convert_rgb2hue
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           	psect	text10
  4354   012380                     __ptext10:
  4355                           	callstack 0
  4356   012380                     ___fleq:
  4357                           	callstack 28
  4358   012380  0E00               	movlw	0
  4359   012382  1401               	andwf	___fleq@ff1^0,w,c
  4360   012384  6E09               	movwf	??___fleq^0,c
  4361   012386  0E00               	movlw	0
  4362   012388  1402               	andwf	(___fleq@ff1+1)^0,w,c
  4363   01238A  6E0A               	movwf	(??___fleq+1)^0,c
  4364   01238C  0E80               	movlw	128
  4365   01238E  1403               	andwf	(___fleq@ff1+2)^0,w,c
  4366   012390  6E0B               	movwf	(??___fleq+2)^0,c
  4367   012392  0E7F               	movlw	127
  4368   012394  1404               	andwf	(___fleq@ff1+3)^0,w,c
  4369   012396  6E0C               	movwf	(??___fleq+3)^0,c
  4370   012398  5009               	movf	??___fleq^0,w,c
  4371   01239A  100A               	iorwf	(??___fleq+1)^0,w,c
  4372   01239C  100B               	iorwf	(??___fleq+2)^0,w,c
  4373   01239E  100C               	iorwf	(??___fleq+3)^0,w,c
  4374   0123A0  A4D8               	btfss	status,2,c
  4375   0123A2  EFD5  F091         	goto	u5321
  4376   0123A6  EFD7  F091         	goto	u5320
  4377   0123AA                     u5321:
  4378   0123AA  EFDF  F091         	goto	l5477
  4379   0123AE                     u5320:
  4380   0123AE  0E00               	movlw	0
  4381   0123B0  6E01               	movwf	___fleq@ff1^0,c
  4382   0123B2  0E00               	movlw	0
  4383   0123B4  6E02               	movwf	(___fleq@ff1+1)^0,c
  4384   0123B6  0E00               	movlw	0
  4385   0123B8  6E03               	movwf	(___fleq@ff1+2)^0,c
  4386   0123BA  0E00               	movlw	0
  4387   0123BC  6E04               	movwf	(___fleq@ff1+3)^0,c
  4388   0123BE                     l5477:
  4389   0123BE  0E00               	movlw	0
  4390   0123C0  1405               	andwf	___fleq@ff2^0,w,c
  4391   0123C2  6E09               	movwf	??___fleq^0,c
  4392   0123C4  0E00               	movlw	0
  4393   0123C6  1406               	andwf	(___fleq@ff2+1)^0,w,c
  4394   0123C8  6E0A               	movwf	(??___fleq+1)^0,c
  4395   0123CA  0E80               	movlw	128
  4396   0123CC  1407               	andwf	(___fleq@ff2+2)^0,w,c
  4397   0123CE  6E0B               	movwf	(??___fleq+2)^0,c
  4398   0123D0  0E7F               	movlw	127
  4399   0123D2  1408               	andwf	(___fleq@ff2+3)^0,w,c
  4400   0123D4  6E0C               	movwf	(??___fleq+3)^0,c
  4401   0123D6  5009               	movf	??___fleq^0,w,c
  4402   0123D8  100A               	iorwf	(??___fleq+1)^0,w,c
  4403   0123DA  100B               	iorwf	(??___fleq+2)^0,w,c
  4404   0123DC  100C               	iorwf	(??___fleq+3)^0,w,c
  4405   0123DE  A4D8               	btfss	status,2,c
  4406   0123E0  EFF4  F091         	goto	u5331
  4407   0123E4  EFF6  F091         	goto	u5330
  4408   0123E8                     u5331:
  4409   0123E8  EFFE  F091         	goto	l5481
  4410   0123EC                     u5330:
  4411   0123EC  0E00               	movlw	0
  4412   0123EE  6E05               	movwf	___fleq@ff2^0,c
  4413   0123F0  0E00               	movlw	0
  4414   0123F2  6E06               	movwf	(___fleq@ff2+1)^0,c
  4415   0123F4  0E00               	movlw	0
  4416   0123F6  6E07               	movwf	(___fleq@ff2+2)^0,c
  4417   0123F8  0E00               	movlw	0
  4418   0123FA  6E08               	movwf	(___fleq@ff2+3)^0,c
  4419   0123FC                     l5481:
  4420   0123FC  5005               	movf	___fleq@ff2^0,w,c
  4421   0123FE  1801               	xorwf	___fleq@ff1^0,w,c
  4422   012400  E10F               	bnz	u5340
  4423   012402  5006               	movf	(___fleq@ff2+1)^0,w,c
  4424   012404  1802               	xorwf	(___fleq@ff1+1)^0,w,c
  4425   012406  E10C               	bnz	u5340
  4426   012408  5007               	movf	(___fleq@ff2+2)^0,w,c
  4427   01240A  1803               	xorwf	(___fleq@ff1+2)^0,w,c
  4428   01240C  E109               	bnz	u5340
  4429   01240E  5008               	movf	(___fleq@ff2+3)^0,w,c
  4430   012410  1804               	xorwf	(___fleq@ff1+3)^0,w,c
  4431   012412  B4D8               	btfsc	status,2,c
  4432   012414  EF0E  F092         	goto	u5341
  4433   012418  EF10  F092         	goto	u5340
  4434   01241C                     u5341:
  4435   01241C  EF13  F092         	goto	l5485
  4436   012420                     u5340:
  4437   012420  90D8               	bcf	status,0,c
  4438   012422  EF14  F092         	goto	l796
  4439   012426                     l5485:
  4440   012426  80D8               	bsf	status,0,c
  4441   012428                     l796:
  4442   012428  0012               	return		;funcret
  4443   01242A                     __end_of___fleq:
  4444                           	callstack 0
  4445                           
  4446 ;; *************** function ___fldiv *****************
  4447 ;; Defined at:
  4448 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  b               4   24[COMRAM] unsigned char 
  4451 ;;  a               4   28[COMRAM] unsigned char 
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;  grs             4   43[COMRAM] unsigned long 
  4454 ;;  rem             4   36[COMRAM] unsigned long 
  4455 ;;  new_exp         2   41[COMRAM] short 
  4456 ;;  aexp            1   48[COMRAM] unsigned char 
  4457 ;;  bexp            1   47[COMRAM] unsigned char 
  4458 ;;  sign            1   40[COMRAM] unsigned char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  4   24[COMRAM] unsigned char 
  4461 ;; Registers used:
  4462 ;;		wreg, status,2, status,0
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4468 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4469 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4470 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4471 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4472 ;;Total ram usage:       25 bytes
  4473 ;; Hardware stack levels used: 1
  4474 ;; This function calls:
  4475 ;;		Nothing
  4476 ;; This function is called by:
  4477 ;;		_convert_rgb2hue
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text11
  4482   011080                     __ptext11:
  4483                           	callstack 0
  4484   011080                     ___fldiv:
  4485                           	callstack 28
  4486   011080  501C               	movf	(___fldiv@b+3)^0,w,c
  4487   011082  0B80               	andlw	128
  4488   011084  6E29               	movwf	___fldiv@sign^0,c
  4489   011086  501C               	movf	(___fldiv@b+3)^0,w,c
  4490   011088  241C               	addwf	(___fldiv@b+3)^0,w,c
  4491   01108A  6E30               	movwf	___fldiv@bexp^0,c
  4492   01108C  AE1B               	btfss	(___fldiv@b+2)^0,7,c
  4493   01108E  EF4B  F088         	goto	u4901
  4494   011092  EF4D  F088         	goto	u4900
  4495   011096                     u4901:
  4496   011096  EF4E  F088         	goto	l5205
  4497   01109A                     u4900:
  4498   01109A  8030               	bsf	___fldiv@bexp^0,0,c
  4499   01109C                     l5205:
  4500   01109C  5030               	movf	___fldiv@bexp^0,w,c
  4501   01109E  B4D8               	btfsc	status,2,c
  4502   0110A0  EF54  F088         	goto	u4911
  4503   0110A4  EF56  F088         	goto	u4910
  4504   0110A8                     u4911:
  4505   0110A8  EF6B  F088         	goto	l5215
  4506   0110AC                     u4910:
  4507   0110AC  2830               	incf	___fldiv@bexp^0,w,c
  4508   0110AE  A4D8               	btfss	status,2,c
  4509   0110B0  EF5C  F088         	goto	u4921
  4510   0110B4  EF5E  F088         	goto	u4920
  4511   0110B8                     u4921:
  4512   0110B8  EF66  F088         	goto	l5211
  4513   0110BC                     u4920:
  4514   0110BC  0E00               	movlw	0
  4515   0110BE  6E19               	movwf	___fldiv@b^0,c
  4516   0110C0  0E00               	movlw	0
  4517   0110C2  6E1A               	movwf	(___fldiv@b+1)^0,c
  4518   0110C4  0E00               	movlw	0
  4519   0110C6  6E1B               	movwf	(___fldiv@b+2)^0,c
  4520   0110C8  0E00               	movlw	0
  4521   0110CA  6E1C               	movwf	(___fldiv@b+3)^0,c
  4522   0110CC                     l5211:
  4523   0110CC  8E1B               	bsf	(___fldiv@b+2)^0,7,c
  4524   0110CE  0E00               	movlw	0
  4525   0110D0  6E1C               	movwf	(___fldiv@b+3)^0,c
  4526   0110D2  EF73  F088         	goto	l5217
  4527   0110D6                     l5215:
  4528   0110D6  0E00               	movlw	0
  4529   0110D8  6E19               	movwf	___fldiv@b^0,c
  4530   0110DA  0E00               	movlw	0
  4531   0110DC  6E1A               	movwf	(___fldiv@b+1)^0,c
  4532   0110DE  0E00               	movlw	0
  4533   0110E0  6E1B               	movwf	(___fldiv@b+2)^0,c
  4534   0110E2  0E00               	movlw	0
  4535   0110E4  6E1C               	movwf	(___fldiv@b+3)^0,c
  4536   0110E6                     l5217:
  4537   0110E6  5020               	movf	(___fldiv@a+3)^0,w,c
  4538   0110E8  0B80               	andlw	128
  4539   0110EA  1A29               	xorwf	___fldiv@sign^0,f,c
  4540   0110EC  5020               	movf	(___fldiv@a+3)^0,w,c
  4541   0110EE  2420               	addwf	(___fldiv@a+3)^0,w,c
  4542   0110F0  6E31               	movwf	___fldiv@aexp^0,c
  4543   0110F2  AE1F               	btfss	(___fldiv@a+2)^0,7,c
  4544   0110F4  EF7E  F088         	goto	u4931
  4545   0110F8  EF80  F088         	goto	u4930
  4546   0110FC                     u4931:
  4547   0110FC  EF81  F088         	goto	l5225
  4548   011100                     u4930:
  4549   011100  8031               	bsf	___fldiv@aexp^0,0,c
  4550   011102                     l5225:
  4551   011102  5031               	movf	___fldiv@aexp^0,w,c
  4552   011104  B4D8               	btfsc	status,2,c
  4553   011106  EF87  F088         	goto	u4941
  4554   01110A  EF89  F088         	goto	u4940
  4555   01110E                     u4941:
  4556   01110E  EF9E  F088         	goto	l5235
  4557   011112                     u4940:
  4558   011112  2831               	incf	___fldiv@aexp^0,w,c
  4559   011114  A4D8               	btfss	status,2,c
  4560   011116  EF8F  F088         	goto	u4951
  4561   01111A  EF91  F088         	goto	u4950
  4562   01111E                     u4951:
  4563   01111E  EF99  F088         	goto	l5231
  4564   011122                     u4950:
  4565   011122  0E00               	movlw	0
  4566   011124  6E1D               	movwf	___fldiv@a^0,c
  4567   011126  0E00               	movlw	0
  4568   011128  6E1E               	movwf	(___fldiv@a+1)^0,c
  4569   01112A  0E00               	movlw	0
  4570   01112C  6E1F               	movwf	(___fldiv@a+2)^0,c
  4571   01112E  0E00               	movlw	0
  4572   011130  6E20               	movwf	(___fldiv@a+3)^0,c
  4573   011132                     l5231:
  4574   011132  8E1F               	bsf	(___fldiv@a+2)^0,7,c
  4575   011134  0E00               	movlw	0
  4576   011136  6E20               	movwf	(___fldiv@a+3)^0,c
  4577   011138  EFA6  F088         	goto	l5237
  4578   01113C                     l5235:
  4579   01113C  0E00               	movlw	0
  4580   01113E  6E1D               	movwf	___fldiv@a^0,c
  4581   011140  0E00               	movlw	0
  4582   011142  6E1E               	movwf	(___fldiv@a+1)^0,c
  4583   011144  0E00               	movlw	0
  4584   011146  6E1F               	movwf	(___fldiv@a+2)^0,c
  4585   011148  0E00               	movlw	0
  4586   01114A  6E20               	movwf	(___fldiv@a+3)^0,c
  4587   01114C                     l5237:
  4588   01114C  501D               	movf	___fldiv@a^0,w,c
  4589   01114E  101E               	iorwf	(___fldiv@a+1)^0,w,c
  4590   011150  101F               	iorwf	(___fldiv@a+2)^0,w,c
  4591   011152  1020               	iorwf	(___fldiv@a+3)^0,w,c
  4592   011154  A4D8               	btfss	status,2,c
  4593   011156  EFAF  F088         	goto	u4961
  4594   01115A  EFB1  F088         	goto	u4960
  4595   01115E                     u4961:
  4596   01115E  EFC9  F088         	goto	l5249
  4597   011162                     u4960:
  4598   011162  0E00               	movlw	0
  4599   011164  6E19               	movwf	___fldiv@b^0,c
  4600   011166  0E00               	movlw	0
  4601   011168  6E1A               	movwf	(___fldiv@b+1)^0,c
  4602   01116A  0E00               	movlw	0
  4603   01116C  6E1B               	movwf	(___fldiv@b+2)^0,c
  4604   01116E  0E00               	movlw	0
  4605   011170  6E1C               	movwf	(___fldiv@b+3)^0,c
  4606   011172  0E80               	movlw	128
  4607   011174  121B               	iorwf	(___fldiv@b+2)^0,f,c
  4608   011176  0E7F               	movlw	127
  4609   011178  121C               	iorwf	(___fldiv@b+3)^0,f,c
  4610   01117A                     l5243:
  4611   01117A  5029               	movf	___fldiv@sign^0,w,c
  4612   01117C  121C               	iorwf	(___fldiv@b+3)^0,f,c
  4613   01117E  C019  F019         	movff	___fldiv@b,?___fldiv
  4614   011182  C01A  F01A         	movff	___fldiv@b+1,?___fldiv+1
  4615   011186  C01B  F01B         	movff	___fldiv@b+2,?___fldiv+2
  4616   01118A  C01C  F01C         	movff	___fldiv@b+3,?___fldiv+3
  4617   01118E  EF0C  F08A         	goto	l1119
  4618   011192                     l5249:
  4619   011192  5030               	movf	___fldiv@bexp^0,w,c
  4620   011194  A4D8               	btfss	status,2,c
  4621   011196  EFCF  F088         	goto	u4971
  4622   01119A  EFD1  F088         	goto	u4970
  4623   01119E                     u4971:
  4624   01119E  EFDB  F088         	goto	l5257
  4625   0111A2                     u4970:
  4626   0111A2  0E00               	movlw	0
  4627   0111A4  6E19               	movwf	?___fldiv^0,c
  4628   0111A6  0E00               	movlw	0
  4629   0111A8  6E1A               	movwf	(?___fldiv+1)^0,c
  4630   0111AA  0E00               	movlw	0
  4631   0111AC  6E1B               	movwf	(?___fldiv+2)^0,c
  4632   0111AE  0E00               	movlw	0
  4633   0111B0  6E1C               	movwf	(?___fldiv+3)^0,c
  4634   0111B2  EF0C  F08A         	goto	l1119
  4635   0111B6                     l5257:
  4636   0111B6  5031               	movf	___fldiv@aexp^0,w,c
  4637   0111B8  C030  F021         	movff	___fldiv@bexp,??___fldiv
  4638   0111BC  6A22               	clrf	(??___fldiv+1)^0,c
  4639   0111BE  5E21               	subwf	??___fldiv^0,f,c
  4640   0111C0  0E00               	movlw	0
  4641   0111C2  5A22               	subwfb	(??___fldiv+1)^0,f,c
  4642   0111C4  0E7F               	movlw	127
  4643   0111C6  2421               	addwf	??___fldiv^0,w,c
  4644   0111C8  6E2A               	movwf	___fldiv@new_exp^0,c
  4645   0111CA  0E00               	movlw	0
  4646   0111CC  2022               	addwfc	(??___fldiv+1)^0,w,c
  4647   0111CE  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  4648   0111D0  C019  F025         	movff	___fldiv@b,___fldiv@rem
  4649   0111D4  C01A  F026         	movff	___fldiv@b+1,___fldiv@rem+1
  4650   0111D8  C01B  F027         	movff	___fldiv@b+2,___fldiv@rem+2
  4651   0111DC  C01C  F028         	movff	___fldiv@b+3,___fldiv@rem+3
  4652   0111E0  0E00               	movlw	0
  4653   0111E2  6E19               	movwf	___fldiv@b^0,c
  4654   0111E4  0E00               	movlw	0
  4655   0111E6  6E1A               	movwf	(___fldiv@b+1)^0,c
  4656   0111E8  0E00               	movlw	0
  4657   0111EA  6E1B               	movwf	(___fldiv@b+2)^0,c
  4658   0111EC  0E00               	movlw	0
  4659   0111EE  6E1C               	movwf	(___fldiv@b+3)^0,c
  4660   0111F0  0E00               	movlw	0
  4661   0111F2  6E2C               	movwf	___fldiv@grs^0,c
  4662   0111F4  0E00               	movlw	0
  4663   0111F6  6E2D               	movwf	(___fldiv@grs+1)^0,c
  4664   0111F8  0E00               	movlw	0
  4665   0111FA  6E2E               	movwf	(___fldiv@grs+2)^0,c
  4666   0111FC  0E00               	movlw	0
  4667   0111FE  6E2F               	movwf	(___fldiv@grs+3)^0,c
  4668   011200  0E00               	movlw	0
  4669   011202  6E31               	movwf	___fldiv@aexp^0,c
  4670   011204  EF3C  F089         	goto	l1121
  4671   011208                     l5267:
  4672   011208  5031               	movf	___fldiv@aexp^0,w,c
  4673   01120A  B4D8               	btfsc	status,2,c
  4674   01120C  EF0A  F089         	goto	u4981
  4675   011210  EF0C  F089         	goto	u4980
  4676   011214                     u4981:
  4677   011214  EF23  F089         	goto	l5275
  4678   011218                     u4980:
  4679   011218  90D8               	bcf	status,0,c
  4680   01121A  3625               	rlcf	___fldiv@rem^0,f,c
  4681   01121C  3626               	rlcf	(___fldiv@rem+1)^0,f,c
  4682   01121E  3627               	rlcf	(___fldiv@rem+2)^0,f,c
  4683   011220  3628               	rlcf	(___fldiv@rem+3)^0,f,c
  4684   011222  90D8               	bcf	status,0,c
  4685   011224  3619               	rlcf	___fldiv@b^0,f,c
  4686   011226  361A               	rlcf	(___fldiv@b+1)^0,f,c
  4687   011228  361B               	rlcf	(___fldiv@b+2)^0,f,c
  4688   01122A  361C               	rlcf	(___fldiv@b+3)^0,f,c
  4689   01122C  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  4690   01122E  EF1B  F089         	goto	u4991
  4691   011232  EF1D  F089         	goto	u4990
  4692   011236                     u4991:
  4693   011236  EF1E  F089         	goto	l1124
  4694   01123A                     u4990:
  4695   01123A  8019               	bsf	___fldiv@b^0,0,c
  4696   01123C                     l1124:
  4697   01123C  90D8               	bcf	status,0,c
  4698   01123E  362C               	rlcf	___fldiv@grs^0,f,c
  4699   011240  362D               	rlcf	(___fldiv@grs+1)^0,f,c
  4700   011242  362E               	rlcf	(___fldiv@grs+2)^0,f,c
  4701   011244  362F               	rlcf	(___fldiv@grs+3)^0,f,c
  4702   011246                     l5275:
  4703   011246  501D               	movf	___fldiv@a^0,w,c
  4704   011248  5C25               	subwf	___fldiv@rem^0,w,c
  4705   01124A  501E               	movf	(___fldiv@a+1)^0,w,c
  4706   01124C  5826               	subwfb	(___fldiv@rem+1)^0,w,c
  4707   01124E  501F               	movf	(___fldiv@a+2)^0,w,c
  4708   011250  5827               	subwfb	(___fldiv@rem+2)^0,w,c
  4709   011252  5020               	movf	(___fldiv@a+3)^0,w,c
  4710   011254  5828               	subwfb	(___fldiv@rem+3)^0,w,c
  4711   011256  A0D8               	btfss	status,0,c
  4712   011258  EF30  F089         	goto	u5001
  4713   01125C  EF32  F089         	goto	u5000
  4714   011260                     u5001:
  4715   011260  EF3B  F089         	goto	l5281
  4716   011264                     u5000:
  4717   011264  8C2F               	bsf	(___fldiv@grs+3)^0,6,c
  4718   011266  501D               	movf	___fldiv@a^0,w,c
  4719   011268  5E25               	subwf	___fldiv@rem^0,f,c
  4720   01126A  501E               	movf	(___fldiv@a+1)^0,w,c
  4721   01126C  5A26               	subwfb	(___fldiv@rem+1)^0,f,c
  4722   01126E  501F               	movf	(___fldiv@a+2)^0,w,c
  4723   011270  5A27               	subwfb	(___fldiv@rem+2)^0,f,c
  4724   011272  5020               	movf	(___fldiv@a+3)^0,w,c
  4725   011274  5A28               	subwfb	(___fldiv@rem+3)^0,f,c
  4726   011276                     l5281:
  4727   011276  2A31               	incf	___fldiv@aexp^0,f,c
  4728   011278                     l1121:
  4729   011278  0E19               	movlw	25
  4730   01127A  6431               	cpfsgt	___fldiv@aexp^0,c
  4731   01127C  EF42  F089         	goto	u5011
  4732   011280  EF44  F089         	goto	u5010
  4733   011284                     u5011:
  4734   011284  EF04  F089         	goto	l5267
  4735   011288                     u5010:
  4736   011288  5025               	movf	___fldiv@rem^0,w,c
  4737   01128A  1026               	iorwf	(___fldiv@rem+1)^0,w,c
  4738   01128C  1027               	iorwf	(___fldiv@rem+2)^0,w,c
  4739   01128E  1028               	iorwf	(___fldiv@rem+3)^0,w,c
  4740   011290  B4D8               	btfsc	status,2,c
  4741   011292  EF4D  F089         	goto	u5021
  4742   011296  EF4F  F089         	goto	u5020
  4743   01129A                     u5021:
  4744   01129A  EF67  F089         	goto	l5293
  4745   01129E                     u5020:
  4746   01129E  802C               	bsf	___fldiv@grs^0,0,c
  4747   0112A0  EF67  F089         	goto	l5293
  4748   0112A4                     l5287:
  4749   0112A4  90D8               	bcf	status,0,c
  4750   0112A6  3619               	rlcf	___fldiv@b^0,f,c
  4751   0112A8  361A               	rlcf	(___fldiv@b+1)^0,f,c
  4752   0112AA  361B               	rlcf	(___fldiv@b+2)^0,f,c
  4753   0112AC  361C               	rlcf	(___fldiv@b+3)^0,f,c
  4754   0112AE  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  4755   0112B0  EF5C  F089         	goto	u5031
  4756   0112B4  EF5E  F089         	goto	u5030
  4757   0112B8                     u5031:
  4758   0112B8  EF5F  F089         	goto	l1130
  4759   0112BC                     u5030:
  4760   0112BC  8019               	bsf	___fldiv@b^0,0,c
  4761   0112BE                     l1130:
  4762   0112BE  90D8               	bcf	status,0,c
  4763   0112C0  362C               	rlcf	___fldiv@grs^0,f,c
  4764   0112C2  362D               	rlcf	(___fldiv@grs+1)^0,f,c
  4765   0112C4  362E               	rlcf	(___fldiv@grs+2)^0,f,c
  4766   0112C6  362F               	rlcf	(___fldiv@grs+3)^0,f,c
  4767   0112C8  062A               	decf	___fldiv@new_exp^0,f,c
  4768   0112CA  A0D8               	btfss	status,0,c
  4769   0112CC  062B               	decf	(___fldiv@new_exp+1)^0,f,c
  4770   0112CE                     l5293:
  4771   0112CE  AE1B               	btfss	(___fldiv@b+2)^0,7,c
  4772   0112D0  EF6C  F089         	goto	u5041
  4773   0112D4  EF6E  F089         	goto	u5040
  4774   0112D8                     u5041:
  4775   0112D8  EF52  F089         	goto	l5287
  4776   0112DC                     u5040:
  4777   0112DC  0E00               	movlw	0
  4778   0112DE  6E31               	movwf	___fldiv@aexp^0,c
  4779   0112E0  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  4780   0112E2  EF75  F089         	goto	u5051
  4781   0112E6  EF77  F089         	goto	u5050
  4782   0112EA                     u5051:
  4783   0112EA  EF9B  F089         	goto	l1132
  4784   0112EE                     u5050:
  4785   0112EE  0EFF               	movlw	255
  4786   0112F0  142C               	andwf	___fldiv@grs^0,w,c
  4787   0112F2  6E21               	movwf	??___fldiv^0,c
  4788   0112F4  0EFF               	movlw	255
  4789   0112F6  142D               	andwf	(___fldiv@grs+1)^0,w,c
  4790   0112F8  6E22               	movwf	(??___fldiv+1)^0,c
  4791   0112FA  0EFF               	movlw	255
  4792   0112FC  142E               	andwf	(___fldiv@grs+2)^0,w,c
  4793   0112FE  6E23               	movwf	(??___fldiv+2)^0,c
  4794   011300  0E7F               	movlw	127
  4795   011302  142F               	andwf	(___fldiv@grs+3)^0,w,c
  4796   011304  6E24               	movwf	(??___fldiv+3)^0,c
  4797   011306  5021               	movf	??___fldiv^0,w,c
  4798   011308  1022               	iorwf	(??___fldiv+1)^0,w,c
  4799   01130A  1023               	iorwf	(??___fldiv+2)^0,w,c
  4800   01130C  1024               	iorwf	(??___fldiv+3)^0,w,c
  4801   01130E  B4D8               	btfsc	status,2,c
  4802   011310  EF8C  F089         	goto	u5061
  4803   011314  EF8E  F089         	goto	u5060
  4804   011318                     u5061:
  4805   011318  EF92  F089         	goto	l1133
  4806   01131C                     u5060:
  4807   01131C                     l5301:
  4808   01131C  0E01               	movlw	1
  4809   01131E  6E31               	movwf	___fldiv@aexp^0,c
  4810   011320  EF9B  F089         	goto	l1132
  4811   011324                     l1133:
  4812   011324  A019               	btfss	___fldiv@b^0,0,c
  4813   011326  EF97  F089         	goto	u5071
  4814   01132A  EF99  F089         	goto	u5070
  4815   01132E                     u5071:
  4816   01132E  EF9B  F089         	goto	l1132
  4817   011332                     u5070:
  4818   011332  EF8E  F089         	goto	l5301
  4819   011336                     l1132:
  4820   011336  5031               	movf	___fldiv@aexp^0,w,c
  4821   011338  B4D8               	btfsc	status,2,c
  4822   01133A  EFA1  F089         	goto	u5081
  4823   01133E  EFA3  F089         	goto	u5080
  4824   011342                     u5081:
  4825   011342  EFC7  F089         	goto	l5313
  4826   011346                     u5080:
  4827   011346  0E01               	movlw	1
  4828   011348  2619               	addwf	___fldiv@b^0,f,c
  4829   01134A  0E00               	movlw	0
  4830   01134C  221A               	addwfc	(___fldiv@b+1)^0,f,c
  4831   01134E  221B               	addwfc	(___fldiv@b+2)^0,f,c
  4832   011350  221C               	addwfc	(___fldiv@b+3)^0,f,c
  4833   011352  A01C               	btfss	(___fldiv@b+3)^0,0,c
  4834   011354  EFAE  F089         	goto	u5091
  4835   011358  EFB0  F089         	goto	u5090
  4836   01135C                     u5091:
  4837   01135C  EFC7  F089         	goto	l5313
  4838   011360                     u5090:
  4839   011360  C019  F021         	movff	___fldiv@b,??___fldiv
  4840   011364  C01A  F022         	movff	___fldiv@b+1,??___fldiv+1
  4841   011368  C01B  F023         	movff	___fldiv@b+2,??___fldiv+2
  4842   01136C  C01C  F024         	movff	___fldiv@b+3,??___fldiv+3
  4843   011370  3424               	rlcf	(??___fldiv+3)^0,w,c
  4844   011372  3224               	rrcf	(??___fldiv+3)^0,f,c
  4845   011374  3223               	rrcf	(??___fldiv+2)^0,f,c
  4846   011376  3222               	rrcf	(??___fldiv+1)^0,f,c
  4847   011378  3221               	rrcf	??___fldiv^0,f,c
  4848   01137A  C021  F019         	movff	??___fldiv,___fldiv@b
  4849   01137E  C022  F01A         	movff	??___fldiv+1,___fldiv@b+1
  4850   011382  C023  F01B         	movff	??___fldiv+2,___fldiv@b+2
  4851   011386  C024  F01C         	movff	??___fldiv+3,___fldiv@b+3
  4852   01138A  4A2A               	infsnz	___fldiv@new_exp^0,f,c
  4853   01138C  2A2B               	incf	(___fldiv@new_exp+1)^0,f,c
  4854   01138E                     l5313:
  4855   01138E  BE2B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  4856   011390  EFD2  F089         	goto	u5101
  4857   011394  502B               	movf	(___fldiv@new_exp+1)^0,w,c
  4858   011396  E108               	bnz	u5100
  4859   011398  282A               	incf	___fldiv@new_exp^0,w,c
  4860   01139A  A0D8               	btfss	status,0,c
  4861   01139C  EFD2  F089         	goto	u5101
  4862   0113A0  EFD4  F089         	goto	u5100
  4863   0113A4                     u5101:
  4864   0113A4  EFDF  F089         	goto	l5317
  4865   0113A8                     u5100:
  4866   0113A8  0E00               	movlw	0
  4867   0113AA  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  4868   0113AC  682A               	setf	___fldiv@new_exp^0,c
  4869   0113AE  0E00               	movlw	0
  4870   0113B0  6E19               	movwf	___fldiv@b^0,c
  4871   0113B2  0E00               	movlw	0
  4872   0113B4  6E1A               	movwf	(___fldiv@b+1)^0,c
  4873   0113B6  0E00               	movlw	0
  4874   0113B8  6E1B               	movwf	(___fldiv@b+2)^0,c
  4875   0113BA  0E00               	movlw	0
  4876   0113BC  6E1C               	movwf	(___fldiv@b+3)^0,c
  4877   0113BE                     l5317:
  4878   0113BE  BE2B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  4879   0113C0  EFEC  F089         	goto	u5110
  4880   0113C4  502B               	movf	(___fldiv@new_exp+1)^0,w,c
  4881   0113C6  E106               	bnz	u5111
  4882   0113C8  042A               	decf	___fldiv@new_exp^0,w,c
  4883   0113CA  B0D8               	btfsc	status,0,c
  4884   0113CC  EFEA  F089         	goto	u5111
  4885   0113D0  EFEC  F089         	goto	u5110
  4886   0113D4                     u5111:
  4887   0113D4  EFFA  F089         	goto	l5321
  4888   0113D8                     u5110:
  4889   0113D8  0E00               	movlw	0
  4890   0113DA  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  4891   0113DC  0E00               	movlw	0
  4892   0113DE  6E2A               	movwf	___fldiv@new_exp^0,c
  4893   0113E0  0E00               	movlw	0
  4894   0113E2  6E19               	movwf	___fldiv@b^0,c
  4895   0113E4  0E00               	movlw	0
  4896   0113E6  6E1A               	movwf	(___fldiv@b+1)^0,c
  4897   0113E8  0E00               	movlw	0
  4898   0113EA  6E1B               	movwf	(___fldiv@b+2)^0,c
  4899   0113EC  0E00               	movlw	0
  4900   0113EE  6E1C               	movwf	(___fldiv@b+3)^0,c
  4901   0113F0  0E00               	movlw	0
  4902   0113F2  6E29               	movwf	___fldiv@sign^0,c
  4903   0113F4                     l5321:
  4904   0113F4  C02A  F030         	movff	___fldiv@new_exp,___fldiv@bexp
  4905   0113F8  A030               	btfss	___fldiv@bexp^0,0,c
  4906   0113FA  EF01  F08A         	goto	u5121
  4907   0113FE  EF03  F08A         	goto	u5120
  4908   011402                     u5121:
  4909   011402  EF06  F08A         	goto	l5327
  4910   011406                     u5120:
  4911   011406  8E1B               	bsf	(___fldiv@b+2)^0,7,c
  4912   011408  EF07  F08A         	goto	l5329
  4913   01140C                     l5327:
  4914   01140C  9E1B               	bcf	(___fldiv@b+2)^0,7,c
  4915   01140E                     l5329:
  4916   01140E  90D8               	bcf	status,0,c
  4917   011410  3030               	rrcf	___fldiv@bexp^0,w,c
  4918   011412  6E1C               	movwf	(___fldiv@b+3)^0,c
  4919   011414  EFBD  F088         	goto	l5243
  4920   011418                     l1119:
  4921   011418  0012               	return		;funcret
  4922   01141A                     __end_of___fldiv:
  4923                           	callstack 0
  4924                           
  4925 ;; *************** function _initUSART4 *****************
  4926 ;; Defined at:
  4927 ;;		line 14 in file "serial.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;		None
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;		None
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  1    wreg      void 
  4934 ;; Registers used:
  4935 ;;		wreg, status,2
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4945 ;;Total ram usage:        0 bytes
  4946 ;; Hardware stack levels used: 1
  4947 ;; This function calls:
  4948 ;;		Nothing
  4949 ;; This function is called by:
  4950 ;;		_main
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text12
  4955   012D34                     __ptext12:
  4956                           	callstack 0
  4957   012D34                     _initUSART4:
  4958                           	callstack 30
  4959   012D34                     
  4960                           ;serial.c: 15:     RC0PPS = 0x12;
  4961   012D34  0E12               	movlw	18
  4962   012D36  010E               	movlb	14	; () banked
  4963   012D38  6F62               	movwf	98,b	;volatile
  4964                           
  4965                           ;serial.c: 16:     RX4PPS = 0x11;
  4966   012D3A  0E11               	movlw	17
  4967   012D3C  6F15               	movwf	21,b	;volatile
  4968   012D3E                     
  4969                           ; BSR set to: 14
  4970                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  4971   012D3E  97E9               	bcf	233,3,b	;volatile
  4972   012D40                     
  4973                           ; BSR set to: 14
  4974                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  4975   012D40  95E8               	bcf	232,2,b	;volatile
  4976                           
  4977                           ;serial.c: 19:     SP4BRGL = 51;
  4978   012D42  0E33               	movlw	51
  4979   012D44  6FE5               	movwf	229,b	;volatile
  4980                           
  4981                           ;serial.c: 20:     SP4BRGH = 0;
  4982   012D46  0E00               	movlw	0
  4983   012D48  6FE6               	movwf	230,b	;volatile
  4984   012D4A                     
  4985                           ; BSR set to: 14
  4986                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  4987   012D4A  89E7               	bsf	231,4,b	;volatile
  4988   012D4C                     
  4989                           ; BSR set to: 14
  4990                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  4991   012D4C  8BE8               	bsf	232,5,b	;volatile
  4992   012D4E                     
  4993                           ; BSR set to: 14
  4994                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  4995   012D4E  8FE7               	bsf	231,7,b	;volatile
  4996   012D50                     
  4997                           ; BSR set to: 14
  4998   012D50  0012               	return		;funcret
  4999   012D52                     __end_of_initUSART4:
  5000                           	callstack 0
  5001                           
  5002 ;; *************** function _initDCmotorsPWM *****************
  5003 ;; Defined at:
  5004 ;;		line 5 in file "dc_motor.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;		None
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  1    wreg      void 
  5011 ;; Registers used:
  5012 ;;		wreg, status,2
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5022 ;;Total ram usage:        2 bytes
  5023 ;; Hardware stack levels used: 1
  5024 ;; This function calls:
  5025 ;;		Nothing
  5026 ;; This function is called by:
  5027 ;;		_main
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text13
  5032   0124C0                     __ptext13:
  5033                           	callstack 0
  5034   0124C0                     _initDCmotorsPWM:
  5035                           	callstack 30
  5036   0124C0                     
  5037                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  5038   0124C0  9485               	bcf	133,2,c	;volatile
  5039                           
  5040                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  5041   0124C2  9E83               	bcf	131,7,c	;volatile
  5042                           
  5043                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  5044   0124C4  9885               	bcf	133,4,c	;volatile
  5045                           
  5046                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  5047   0124C6  9C87               	bcf	135,6,c	;volatile
  5048                           
  5049                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5050   0124C8  947D               	bcf	125,2,c	;volatile
  5051                           
  5052                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  5053   0124CA  9E7B               	bcf	123,7,c	;volatile
  5054                           
  5055                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5056   0124CC  987D               	bcf	125,4,c	;volatile
  5057                           
  5058                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  5059   0124CE  9C7F               	bcf	127,6,c	;volatile
  5060   0124D0                     
  5061                           ;dc_motor.c: 18:     RE2PPS=0x05;
  5062   0124D0  0E05               	movlw	5
  5063   0124D2  010E               	movlb	14	; () banked
  5064   0124D4  6F74               	movwf	116,b	;volatile
  5065                           
  5066                           ;dc_motor.c: 19:     RE4PPS=0x06;
  5067   0124D6  0E06               	movlw	6
  5068   0124D8  6F76               	movwf	118,b	;volatile
  5069                           
  5070                           ;dc_motor.c: 20:     RC7PPS=0x07;
  5071   0124DA  0E07               	movlw	7
  5072   0124DC  6F69               	movwf	105,b	;volatile
  5073                           
  5074                           ;dc_motor.c: 21:     RG6PPS=0x08;
  5075   0124DE  0E08               	movlw	8
  5076   0124E0  6F88               	movwf	136,b	;volatile
  5077                           
  5078                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  5079   0124E2  50BD               	movf	189,w,c	;volatile
  5080   0124E4  0B8F               	andlw	-113
  5081   0124E6  0940               	iorlw	64
  5082   0124E8  6EBD               	movwf	189,c	;volatile
  5083                           
  5084                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  5085   0124EA  0EE0               	movlw	-32
  5086   0124EC  16BE               	andwf	190,f,c	;volatile
  5087                           
  5088                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  5089   0124EE  50BF               	movf	191,w,c	;volatile
  5090   0124F0  0BF0               	andlw	-16
  5091   0124F2  0901               	iorlw	1
  5092   0124F4  6EBF               	movwf	191,c	;volatile
  5093   0124F6                     
  5094                           ; BSR set to: 14
  5095                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  5096   0124F6  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5097   0124FA                     
  5098                           ; BSR set to: 14
  5099                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  5100   0124FA  8EBD               	bsf	189,7,c	;volatile
  5101                           
  5102                           ;dc_motor.c: 35:     CCPR1H=0;
  5103   0124FC  0E00               	movlw	0
  5104   0124FE  6EAA               	movwf	170,c	;volatile
  5105                           
  5106                           ;dc_motor.c: 36:     CCPR2H=0;
  5107   012500  0E00               	movlw	0
  5108   012502  6EA6               	movwf	166,c	;volatile
  5109                           
  5110                           ;dc_motor.c: 37:     CCPR3H=0;
  5111   012504  0E00               	movlw	0
  5112   012506  010F               	movlb	15	; () banked
  5113   012508  6F25               	movwf	37,b	;volatile
  5114                           
  5115                           ;dc_motor.c: 38:     CCPR4H=0;
  5116   01250A  0E00               	movlw	0
  5117   01250C  6F21               	movwf	33,b	;volatile
  5118                           
  5119                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  5120   01250E  0EFC               	movlw	-4
  5121   012510  16AD               	andwf	173,f,c	;volatile
  5122                           
  5123                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  5124   012512  0EF3               	movlw	-13
  5125   012514  16AD               	andwf	173,f,c	;volatile
  5126                           
  5127                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  5128   012516  0ECF               	movlw	-49
  5129   012518  16AD               	andwf	173,f,c	;volatile
  5130                           
  5131                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  5132   01251A  0E3F               	movlw	-193
  5133   01251C  16AD               	andwf	173,f,c	;volatile
  5134   01251E                     
  5135                           ; BSR set to: 15
  5136                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  5137   01251E  88AB               	bsf	171,4,c	;volatile
  5138                           
  5139                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  5140   012520  50AB               	movf	171,w,c	;volatile
  5141   012522  0BF0               	andlw	-16
  5142   012524  090C               	iorlw	12
  5143   012526  6EAB               	movwf	171,c	;volatile
  5144   012528                     
  5145                           ; BSR set to: 15
  5146                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  5147   012528  8EAB               	bsf	171,7,c	;volatile
  5148   01252A                     
  5149                           ; BSR set to: 15
  5150                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  5151   01252A  88A7               	bsf	167,4,c	;volatile
  5152                           
  5153                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  5154   01252C  50A7               	movf	167,w,c	;volatile
  5155   01252E  0BF0               	andlw	-16
  5156   012530  090C               	iorlw	12
  5157   012532  6EA7               	movwf	167,c	;volatile
  5158   012534                     
  5159                           ; BSR set to: 15
  5160                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  5161   012534  8EA7               	bsf	167,7,c	;volatile
  5162   012536                     
  5163                           ; BSR set to: 15
  5164                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  5165   012536  8926               	bsf	38,4,b	;volatile
  5166                           
  5167                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  5168   012538  5126               	movf	38,w,b	;volatile
  5169   01253A  0BF0               	andlw	-16
  5170   01253C  090C               	iorlw	12
  5171   01253E  6F26               	movwf	38,b	;volatile
  5172   012540                     
  5173                           ; BSR set to: 15
  5174                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  5175   012540  8F26               	bsf	38,7,b	;volatile
  5176   012542                     
  5177                           ; BSR set to: 15
  5178                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  5179   012542  8922               	bsf	34,4,b	;volatile
  5180                           
  5181                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  5182   012544  5122               	movf	34,w,b	;volatile
  5183   012546  0BF0               	andlw	-16
  5184   012548  090C               	iorlw	12
  5185   01254A  6F22               	movwf	34,b	;volatile
  5186   01254C                     
  5187                           ; BSR set to: 15
  5188                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  5189   01254C  8F22               	bsf	34,7,b	;volatile
  5190   01254E                     
  5191                           ; BSR set to: 15
  5192   01254E  0012               	return		;funcret
  5193   012550                     __end_of_initDCmotorsPWM:
  5194                           	callstack 0
  5195                           
  5196 ;; *************** function _decision *****************
  5197 ;; Defined at:
  5198 ;;		line 335 in file "color.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  hue             2   31[COMRAM] unsigned int 
  5201 ;; Auto vars:     Size  Location     Type
  5202 ;;		None
  5203 ;; Return value:  Size  Location     Type
  5204 ;;                  1    wreg      void 
  5205 ;; Registers used:
  5206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5207 ;; Tracked objects:
  5208 ;;		On entry : 0/0
  5209 ;;		On exit  : 0/0
  5210 ;;		Unchanged: 0/0
  5211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5212 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5215 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5216 ;;Total ram usage:        2 bytes
  5217 ;; Hardware stack levels used: 1
  5218 ;; Hardware stack levels required when called: 5
  5219 ;; This function calls:
  5220 ;;		_moveGreen
  5221 ;;		_moveRed
  5222 ;; This function is called by:
  5223 ;;		_main
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           	psect	text14
  5228   0127C4                     __ptext14:
  5229                           	callstack 0
  5230   0127C4                     _decision:
  5231                           	callstack 25
  5232   0127C4                     
  5233                           ;color.c: 339:     if (hue<=20) {
  5234   0127C4  5021               	movf	(decision@hue+1)^0,w,c
  5235   0127C6  E107               	bnz	u5751
  5236   0127C8  0E15               	movlw	21
  5237   0127CA  5C20               	subwf	decision@hue^0,w,c
  5238   0127CC  B0D8               	btfsc	status,0,c
  5239   0127CE  EFEB  F093         	goto	u5751
  5240   0127D2  EFED  F093         	goto	u5750
  5241   0127D6                     u5751:
  5242   0127D6  EFF3  F093         	goto	l5841
  5243   0127DA                     u5750:
  5244   0127DA                     
  5245                           ;color.c: 340:         moveRed(&motorL, &motorR);
  5246   0127DA  0EF3               	movlw	low _motorL
  5247   0127DC  6E1C               	movwf	moveRed@mL^0,c
  5248   0127DE  0EEA               	movlw	low _motorR
  5249   0127E0  6E1D               	movwf	moveRed@mR^0,c
  5250   0127E2  ECA7  F095         	call	_moveRed	;wreg free
  5251   0127E6                     l5841:
  5252                           
  5253                           ;color.c: 342:     if (hue>=105 && hue<=130){
  5254   0127E6  5021               	movf	(decision@hue+1)^0,w,c
  5255   0127E8  E109               	bnz	u5760
  5256   0127EA  0E69               	movlw	105
  5257   0127EC  5C20               	subwf	decision@hue^0,w,c
  5258   0127EE  A0D8               	btfss	status,0,c
  5259   0127F0  EFFC  F093         	goto	u5761
  5260   0127F4  EFFE  F093         	goto	u5760
  5261   0127F8                     u5761:
  5262   0127F8  EF0F  F094         	goto	l137
  5263   0127FC                     u5760:
  5264   0127FC  5021               	movf	(decision@hue+1)^0,w,c
  5265   0127FE  E107               	bnz	u5771
  5266   012800  0E83               	movlw	131
  5267   012802  5C20               	subwf	decision@hue^0,w,c
  5268   012804  B0D8               	btfsc	status,0,c
  5269   012806  EF07  F094         	goto	u5771
  5270   01280A  EF09  F094         	goto	u5770
  5271   01280E                     u5771:
  5272   01280E  EF0F  F094         	goto	l137
  5273   012812                     u5770:
  5274   012812                     
  5275                           ;color.c: 343:         moveGreen(&motorL, &motorR);
  5276   012812  0EF3               	movlw	low _motorL
  5277   012814  6E1C               	movwf	moveGreen@mL^0,c
  5278   012816  0EEA               	movlw	low _motorR
  5279   012818  6E1D               	movwf	moveGreen@mR^0,c
  5280   01281A  ECD9  F095         	call	_moveGreen	;wreg free
  5281   01281E                     l137:
  5282   01281E  0012               	return		;funcret
  5283   012820                     __end_of_decision:
  5284                           	callstack 0
  5285                           
  5286 ;; *************** function _moveRed *****************
  5287 ;; Defined at:
  5288 ;;		line 254 in file "dc_motor.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5291 ;;		 -> motorL(9), 
  5292 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5293 ;;		 -> motorR(9), 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5305 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5308 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5309 ;;Total ram usage:        4 bytes
  5310 ;; Hardware stack levels used: 1
  5311 ;; Hardware stack levels required when called: 4
  5312 ;; This function calls:
  5313 ;;		_backHalf
  5314 ;;		_right90
  5315 ;; This function is called by:
  5316 ;;		_decision
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text15
  5321   012B4E                     __ptext15:
  5322                           	callstack 0
  5323   012B4E                     _moveRed:
  5324                           	callstack 25
  5325   012B4E                     
  5326                           ;dc_motor.c: 254: void moveRed(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 255
      +                          : {;dc_motor.c: 257:     backHalf(mL,mR);
  5327   012B4E  C01C  F018         	movff	moveRed@mL,backHalf@mL
  5328   012B52  C01D  F019         	movff	moveRed@mR,backHalf@mR
  5329   012B56  EC23  F096         	call	_backHalf	;wreg free
  5330   012B5A                     
  5331                           ;dc_motor.c: 258:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5332   012B5A  0E29               	movlw	41
  5333   012B5C  6E1F               	movwf	(??_moveRed+1)^0,c
  5334   012B5E  0E96               	movlw	150
  5335   012B60  6E1E               	movwf	??_moveRed^0,c
  5336   012B62  0E7F               	movlw	127
  5337   012B64                     u5857:
  5338   012B64  2EE8               	decfsz	wreg,f,c
  5339   012B66  D7FE               	bra	u5857
  5340   012B68  2E1E               	decfsz	??_moveRed^0,f,c
  5341   012B6A  D7FC               	bra	u5857
  5342   012B6C  2E1F               	decfsz	(??_moveRed+1)^0,f,c
  5343   012B6E  D7FA               	bra	u5857
  5344   012B70  0000               	nop	
  5345   012B72                     
  5346                           ;dc_motor.c: 259:     right90(mL,mR);
  5347   012B72  C01C  F018         	movff	moveRed@mL,right90@mL
  5348   012B76  C01D  F019         	movff	moveRed@mR,right90@mR
  5349   012B7A  ECC0  F095         	call	_right90	;wreg free
  5350   012B7E  0012               	return		;funcret
  5351   012B80                     __end_of_moveRed:
  5352                           	callstack 0
  5353                           
  5354 ;; *************** function _right90 *****************
  5355 ;; Defined at:
  5356 ;;		line 193 in file "dc_motor.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5359 ;;		 -> motorL(9), 
  5360 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5361 ;;		 -> motorR(9), 
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      void 
  5366 ;; Registers used:
  5367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5373 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5375 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5376 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5377 ;;Total ram usage:        4 bytes
  5378 ;; Hardware stack levels used: 1
  5379 ;; Hardware stack levels required when called: 3
  5380 ;; This function calls:
  5381 ;;		_stop
  5382 ;;		_turnRight
  5383 ;; This function is called by:
  5384 ;;		_moveRed
  5385 ;;		_moveYellow
  5386 ;; This function uses a non-reentrant model
  5387 ;;
  5388                           
  5389                           	psect	text16
  5390   012B80                     __ptext16:
  5391                           	callstack 0
  5392   012B80                     _right90:
  5393                           	callstack 25
  5394   012B80                     
  5395                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  5396   012B80  C018  F013         	movff	right90@mL,turnRight@mL
  5397   012B84  C019  F014         	movff	right90@mR,turnRight@mR
  5398   012B88  ECEF  F092         	call	_turnRight	;wreg free
  5399   012B8C                     
  5400                           ;dc_motor.c: 196:     _delay((unsigned long)((260)*(64000000/4000.0)));
  5401   012B8C  0E16               	movlw	22
  5402   012B8E  6E1B               	movwf	(??_right90+1)^0,c
  5403   012B90  0E1B               	movlw	27
  5404   012B92  6E1A               	movwf	??_right90^0,c
  5405   012B94  0E88               	movlw	136
  5406   012B96                     u5867:
  5407   012B96  2EE8               	decfsz	wreg,f,c
  5408   012B98  D7FE               	bra	u5867
  5409   012B9A  2E1A               	decfsz	??_right90^0,f,c
  5410   012B9C  D7FC               	bra	u5867
  5411   012B9E  2E1B               	decfsz	(??_right90+1)^0,f,c
  5412   012BA0  D7FA               	bra	u5867
  5413   012BA2  D000               	nop2	
  5414   012BA4                     
  5415                           ;dc_motor.c: 197:     stop(mL,mR);
  5416   012BA4  C018  F013         	movff	right90@mL,stop@mL
  5417   012BA8  C019  F014         	movff	right90@mR,stop@mR
  5418   012BAC  ECA8  F092         	call	_stop	;wreg free
  5419   012BB0  0012               	return		;funcret
  5420   012BB2                     __end_of_right90:
  5421                           	callstack 0
  5422                           
  5423 ;; *************** function _turnRight *****************
  5424 ;; Defined at:
  5425 ;;		line 125 in file "dc_motor.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5428 ;;		 -> motorL(9), 
  5429 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5430 ;;		 -> motorR(9), 
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;  i               2   21[COMRAM] unsigned int 
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  1    wreg      void 
  5435 ;; Registers used:
  5436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5443 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5445 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5446 ;;Total ram usage:        5 bytes
  5447 ;; Hardware stack levels used: 1
  5448 ;; Hardware stack levels required when called: 2
  5449 ;; This function calls:
  5450 ;;		_setMotorPWM
  5451 ;; This function is called by:
  5452 ;;		_right90
  5453 ;;		_right135
  5454 ;; This function uses a non-reentrant model
  5455 ;;
  5456                           
  5457                           	psect	text17
  5458   0125DE                     __ptext17:
  5459                           	callstack 0
  5460   0125DE                     _turnRight:
  5461                           	callstack 25
  5462   0125DE                     
  5463                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  5464   0125DE  5013               	movf	turnRight@mL^0,w,c
  5465   0125E0  6ED9               	movwf	fsr2l,c
  5466   0125E2  6ADA               	clrf	fsr2h,c
  5467   0125E4  0E01               	movlw	1
  5468   0125E6  26D9               	addwf	fsr2l,f,c
  5469   0125E8  0E01               	movlw	1
  5470   0125EA  6EDF               	movwf	indf2,c
  5471                           
  5472                           ;dc_motor.c: 129:     mR->direction = 0;
  5473   0125EC  5014               	movf	turnRight@mR^0,w,c
  5474   0125EE  6ED9               	movwf	fsr2l,c
  5475   0125F0  6ADA               	clrf	fsr2h,c
  5476   0125F2  0E01               	movlw	1
  5477   0125F4  26D9               	addwf	fsr2l,f,c
  5478   0125F6  6ADF               	clrf	indf2,c
  5479   0125F8                     
  5480                           ;dc_motor.c: 131:     setMotorPWM(mL);
  5481   0125F8  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  5482   0125FC  EC37  F08E         	call	_setMotorPWM	;wreg free
  5483   012600                     
  5484                           ;dc_motor.c: 132:     setMotorPWM(mR);
  5485   012600  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  5486   012604  EC37  F08E         	call	_setMotorPWM	;wreg free
  5487   012608                     
  5488                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  5489   012608  0E00               	movlw	0
  5490   01260A  6E17               	movwf	(turnRight@i+1)^0,c
  5491   01260C  0E00               	movlw	0
  5492   01260E  6E16               	movwf	turnRight@i^0,c
  5493   012610                     l4881:
  5494                           
  5495                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  5496   012610  5013               	movf	turnRight@mL^0,w,c
  5497   012612  6ED9               	movwf	fsr2l,c
  5498   012614  6ADA               	clrf	fsr2h,c
  5499   012616  2ADF               	incf	indf2,f,c
  5500                           
  5501                           ;dc_motor.c: 136:         mR->power++;
  5502   012618  5014               	movf	turnRight@mR^0,w,c
  5503   01261A  6ED9               	movwf	fsr2l,c
  5504   01261C  6ADA               	clrf	fsr2h,c
  5505   01261E  2ADF               	incf	indf2,f,c
  5506   012620                     
  5507                           ;dc_motor.c: 137:         setMotorPWM(mL);
  5508   012620  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  5509   012624  EC37  F08E         	call	_setMotorPWM	;wreg free
  5510   012628                     
  5511                           ;dc_motor.c: 138:         setMotorPWM(mR);
  5512   012628  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  5513   01262C  EC37  F08E         	call	_setMotorPWM	;wreg free
  5514   012630                     
  5515                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  5516   012630  0E0B               	movlw	11
  5517   012632  6E15               	movwf	??_turnRight^0,c
  5518   012634  0E62               	movlw	98
  5519   012636                     u5877:
  5520   012636  2EE8               	decfsz	wreg,f,c
  5521   012638  D7FE               	bra	u5877
  5522   01263A  2E15               	decfsz	??_turnRight^0,f,c
  5523   01263C  D7FC               	bra	u5877
  5524   01263E  D000               	nop2	
  5525   012640                     
  5526                           ;dc_motor.c: 140:     }
  5527   012640  4A16               	infsnz	turnRight@i^0,f,c
  5528   012642  2A17               	incf	(turnRight@i+1)^0,f,c
  5529   012644  5017               	movf	(turnRight@i+1)^0,w,c
  5530   012646  E109               	bnz	u4440
  5531   012648  0E32               	movlw	50
  5532   01264A  5C16               	subwf	turnRight@i^0,w,c
  5533   01264C  A0D8               	btfss	status,0,c
  5534   01264E  EF2B  F093         	goto	u4441
  5535   012652  EF2D  F093         	goto	u4440
  5536   012656                     u4441:
  5537   012656  EF08  F093         	goto	l4881
  5538   01265A                     u4440:
  5539   01265A  0012               	return		;funcret
  5540   01265C                     __end_of_turnRight:
  5541                           	callstack 0
  5542                           
  5543 ;; *************** function _moveGreen *****************
  5544 ;; Defined at:
  5545 ;;		line 262 in file "dc_motor.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5548 ;;		 -> motorL(9), 
  5549 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5550 ;;		 -> motorR(9), 
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;		None
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  1    wreg      void 
  5555 ;; Registers used:
  5556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5562 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5564 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5565 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5566 ;;Total ram usage:        4 bytes
  5567 ;; Hardware stack levels used: 1
  5568 ;; Hardware stack levels required when called: 4
  5569 ;; This function calls:
  5570 ;;		_backHalf
  5571 ;;		_left90
  5572 ;; This function is called by:
  5573 ;;		_decision
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text18
  5578   012BB2                     __ptext18:
  5579                           	callstack 0
  5580   012BB2                     _moveGreen:
  5581                           	callstack 25
  5582   012BB2                     
  5583                           ;dc_motor.c: 262: void moveGreen(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          63: {;dc_motor.c: 265:     backHalf(mL,mR);
  5584   012BB2  C01C  F018         	movff	moveGreen@mL,backHalf@mL
  5585   012BB6  C01D  F019         	movff	moveGreen@mR,backHalf@mR
  5586   012BBA  EC23  F096         	call	_backHalf	;wreg free
  5587   012BBE                     
  5588                           ;dc_motor.c: 266:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5589   012BBE  0E29               	movlw	41
  5590   012BC0  6E1F               	movwf	(??_moveGreen+1)^0,c
  5591   012BC2  0E96               	movlw	150
  5592   012BC4  6E1E               	movwf	??_moveGreen^0,c
  5593   012BC6  0E7F               	movlw	127
  5594   012BC8                     u5887:
  5595   012BC8  2EE8               	decfsz	wreg,f,c
  5596   012BCA  D7FE               	bra	u5887
  5597   012BCC  2E1E               	decfsz	??_moveGreen^0,f,c
  5598   012BCE  D7FC               	bra	u5887
  5599   012BD0  2E1F               	decfsz	(??_moveGreen+1)^0,f,c
  5600   012BD2  D7FA               	bra	u5887
  5601   012BD4  0000               	nop	
  5602   012BD6                     
  5603                           ;dc_motor.c: 267:     left90(mL,mR);
  5604   012BD6  C01C  F018         	movff	moveGreen@mL,left90@mL
  5605   012BDA  C01D  F019         	movff	moveGreen@mR,left90@mR
  5606   012BDE  ECF2  F095         	call	_left90	;wreg free
  5607   012BE2  0012               	return		;funcret
  5608   012BE4                     __end_of_moveGreen:
  5609                           	callstack 0
  5610                           
  5611 ;; *************** function _left90 *****************
  5612 ;; Defined at:
  5613 ;;		line 201 in file "dc_motor.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5616 ;;		 -> motorL(9), 
  5617 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5618 ;;		 -> motorR(9), 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;		None
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5630 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5632 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5633 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5634 ;;Total ram usage:        4 bytes
  5635 ;; Hardware stack levels used: 1
  5636 ;; Hardware stack levels required when called: 3
  5637 ;; This function calls:
  5638 ;;		_stop
  5639 ;;		_turnLeft
  5640 ;; This function is called by:
  5641 ;;		_moveGreen
  5642 ;;		_movePink
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           	psect	text19
  5647   012BE4                     __ptext19:
  5648                           	callstack 0
  5649   012BE4                     _left90:
  5650                           	callstack 25
  5651   012BE4                     
  5652                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  5653   012BE4  C018  F013         	movff	left90@mL,turnLeft@mL
  5654   012BE8  C019  F014         	movff	left90@mR,turnLeft@mR
  5655   012BEC  EC2E  F093         	call	_turnLeft	;wreg free
  5656   012BF0                     
  5657                           ;dc_motor.c: 204:     _delay((unsigned long)((260)*(64000000/4000.0)));
  5658   012BF0  0E16               	movlw	22
  5659   012BF2  6E1B               	movwf	(??_left90+1)^0,c
  5660   012BF4  0E1B               	movlw	27
  5661   012BF6  6E1A               	movwf	??_left90^0,c
  5662   012BF8  0E88               	movlw	136
  5663   012BFA                     u5897:
  5664   012BFA  2EE8               	decfsz	wreg,f,c
  5665   012BFC  D7FE               	bra	u5897
  5666   012BFE  2E1A               	decfsz	??_left90^0,f,c
  5667   012C00  D7FC               	bra	u5897
  5668   012C02  2E1B               	decfsz	(??_left90+1)^0,f,c
  5669   012C04  D7FA               	bra	u5897
  5670   012C06  D000               	nop2	
  5671   012C08                     
  5672                           ;dc_motor.c: 205:     stop(mL,mR);
  5673   012C08  C018  F013         	movff	left90@mL,stop@mL
  5674   012C0C  C019  F014         	movff	left90@mR,stop@mR
  5675   012C10  ECA8  F092         	call	_stop	;wreg free
  5676   012C14  0012               	return		;funcret
  5677   012C16                     __end_of_left90:
  5678                           	callstack 0
  5679                           
  5680 ;; *************** function _turnLeft *****************
  5681 ;; Defined at:
  5682 ;;		line 105 in file "dc_motor.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5685 ;;		 -> motorL(9), 
  5686 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5687 ;;		 -> motorR(9), 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  i               2   21[COMRAM] unsigned int 
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      void 
  5692 ;; Registers used:
  5693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5699 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5700 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5701 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5702 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5703 ;;Total ram usage:        5 bytes
  5704 ;; Hardware stack levels used: 1
  5705 ;; Hardware stack levels required when called: 2
  5706 ;; This function calls:
  5707 ;;		_setMotorPWM
  5708 ;; This function is called by:
  5709 ;;		_left90
  5710 ;;		_turn180
  5711 ;;		_left135
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text20
  5716   01265C                     __ptext20:
  5717                           	callstack 0
  5718   01265C                     _turnLeft:
  5719                           	callstack 25
  5720   01265C                     
  5721                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  5722   01265C  5013               	movf	turnLeft@mL^0,w,c
  5723   01265E  6ED9               	movwf	fsr2l,c
  5724   012660  6ADA               	clrf	fsr2h,c
  5725   012662  0E01               	movlw	1
  5726   012664  26D9               	addwf	fsr2l,f,c
  5727   012666  6ADF               	clrf	indf2,c
  5728                           
  5729                           ;dc_motor.c: 109:     mR->direction = 1;
  5730   012668  5014               	movf	turnLeft@mR^0,w,c
  5731   01266A  6ED9               	movwf	fsr2l,c
  5732   01266C  6ADA               	clrf	fsr2h,c
  5733   01266E  0E01               	movlw	1
  5734   012670  26D9               	addwf	fsr2l,f,c
  5735   012672  0E01               	movlw	1
  5736   012674  6EDF               	movwf	indf2,c
  5737   012676                     
  5738                           ;dc_motor.c: 111:     setMotorPWM(mL);
  5739   012676  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5740   01267A  EC37  F08E         	call	_setMotorPWM	;wreg free
  5741   01267E                     
  5742                           ;dc_motor.c: 112:     setMotorPWM(mR);
  5743   01267E  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5744   012682  EC37  F08E         	call	_setMotorPWM	;wreg free
  5745   012686                     
  5746                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  5747   012686  0E00               	movlw	0
  5748   012688  6E17               	movwf	(turnLeft@i+1)^0,c
  5749   01268A  0E00               	movlw	0
  5750   01268C  6E16               	movwf	turnLeft@i^0,c
  5751   01268E                     l4857:
  5752                           
  5753                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  5754   01268E  5013               	movf	turnLeft@mL^0,w,c
  5755   012690  6ED9               	movwf	fsr2l,c
  5756   012692  6ADA               	clrf	fsr2h,c
  5757   012694  2ADF               	incf	indf2,f,c
  5758                           
  5759                           ;dc_motor.c: 116:         mR->power++;
  5760   012696  5014               	movf	turnLeft@mR^0,w,c
  5761   012698  6ED9               	movwf	fsr2l,c
  5762   01269A  6ADA               	clrf	fsr2h,c
  5763   01269C  2ADF               	incf	indf2,f,c
  5764   01269E                     
  5765                           ;dc_motor.c: 117:         setMotorPWM(mL);
  5766   01269E  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5767   0126A2  EC37  F08E         	call	_setMotorPWM	;wreg free
  5768   0126A6                     
  5769                           ;dc_motor.c: 118:         setMotorPWM(mR);
  5770   0126A6  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5771   0126AA  EC37  F08E         	call	_setMotorPWM	;wreg free
  5772   0126AE                     
  5773                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  5774   0126AE  0E0B               	movlw	11
  5775   0126B0  6E15               	movwf	??_turnLeft^0,c
  5776   0126B2  0E62               	movlw	98
  5777   0126B4                     u5907:
  5778   0126B4  2EE8               	decfsz	wreg,f,c
  5779   0126B6  D7FE               	bra	u5907
  5780   0126B8  2E15               	decfsz	??_turnLeft^0,f,c
  5781   0126BA  D7FC               	bra	u5907
  5782   0126BC  D000               	nop2	
  5783   0126BE                     
  5784                           ;dc_motor.c: 120:     }
  5785   0126BE  4A16               	infsnz	turnLeft@i^0,f,c
  5786   0126C0  2A17               	incf	(turnLeft@i+1)^0,f,c
  5787   0126C2  5017               	movf	(turnLeft@i+1)^0,w,c
  5788   0126C4  E109               	bnz	u4430
  5789   0126C6  0E32               	movlw	50
  5790   0126C8  5C16               	subwf	turnLeft@i^0,w,c
  5791   0126CA  A0D8               	btfss	status,0,c
  5792   0126CC  EF6A  F093         	goto	u4431
  5793   0126D0  EF6C  F093         	goto	u4430
  5794   0126D4                     u4431:
  5795   0126D4  EF47  F093         	goto	l4857
  5796   0126D8                     u4430:
  5797   0126D8  0012               	return		;funcret
  5798   0126DA                     __end_of_turnLeft:
  5799                           	callstack 0
  5800                           
  5801 ;; *************** function _backHalf *****************
  5802 ;; Defined at:
  5803 ;;		line 233 in file "dc_motor.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5806 ;;		 -> motorL(9), 
  5807 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5808 ;;		 -> motorR(9), 
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;		None
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  1    wreg      void 
  5813 ;; Registers used:
  5814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5820 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5822 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5823 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5824 ;;Total ram usage:        4 bytes
  5825 ;; Hardware stack levels used: 1
  5826 ;; Hardware stack levels required when called: 3
  5827 ;; This function calls:
  5828 ;;		_fullSpeedBack
  5829 ;;		_stop
  5830 ;; This function is called by:
  5831 ;;		_moveRed
  5832 ;;		_moveGreen
  5833 ;;		_moveBlue
  5834 ;;		_moveOrange
  5835 ;;		_moveLightBlue
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           	psect	text21
  5840   012C46                     __ptext21:
  5841                           	callstack 0
  5842   012C46                     _backHalf:
  5843                           	callstack 25
  5844   012C46                     
  5845                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  5846   012C46  C018  F013         	movff	backHalf@mL,fullSpeedBack@mL
  5847   012C4A  C019  F014         	movff	backHalf@mR,fullSpeedBack@mR
  5848   012C4E  EC6D  F093         	call	_fullSpeedBack	;wreg free
  5849   012C52                     
  5850                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  5851   012C52  0E19               	movlw	25
  5852   012C54  6E1B               	movwf	(??_backHalf+1)^0,c
  5853   012C56  0E5A               	movlw	90
  5854   012C58  6E1A               	movwf	??_backHalf^0,c
  5855   012C5A  0EB2               	movlw	178
  5856   012C5C                     u5917:
  5857   012C5C  2EE8               	decfsz	wreg,f,c
  5858   012C5E  D7FE               	bra	u5917
  5859   012C60  2E1A               	decfsz	??_backHalf^0,f,c
  5860   012C62  D7FC               	bra	u5917
  5861   012C64  2E1B               	decfsz	(??_backHalf+1)^0,f,c
  5862   012C66  D7FA               	bra	u5917
  5863   012C68                     
  5864                           ;dc_motor.c: 237:     stop(mL,mR);
  5865   012C68  C018  F013         	movff	backHalf@mL,stop@mL
  5866   012C6C  C019  F014         	movff	backHalf@mR,stop@mR
  5867   012C70  ECA8  F092         	call	_stop	;wreg free
  5868   012C74  0012               	return		;funcret
  5869   012C76                     __end_of_backHalf:
  5870                           	callstack 0
  5871                           
  5872 ;; *************** function _stop *****************
  5873 ;; Defined at:
  5874 ;;		line 88 in file "dc_motor.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5877 ;;		 -> motorL(9), 
  5878 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5879 ;;		 -> motorR(9), 
  5880 ;; Auto vars:     Size  Location     Type
  5881 ;;		None
  5882 ;; Return value:  Size  Location     Type
  5883 ;;                  1    wreg      void 
  5884 ;; Registers used:
  5885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5891 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5893 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5894 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5895 ;;Total ram usage:        3 bytes
  5896 ;; Hardware stack levels used: 1
  5897 ;; Hardware stack levels required when called: 2
  5898 ;; This function calls:
  5899 ;;		_setMotorPWM
  5900 ;; This function is called by:
  5901 ;;		_right90
  5902 ;;		_left90
  5903 ;;		_backHalf
  5904 ;;		_turn180
  5905 ;;		_right135
  5906 ;;		_left135
  5907 ;;		_backOneAndHalf
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910                           
  5911                           	psect	text22
  5912   012550                     __ptext22:
  5913                           	callstack 0
  5914   012550                     _stop:
  5915                           	callstack 25
  5916   012550                     
  5917                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  5918   012550  EFD8  F092         	goto	l4841
  5919   012554                     l4827:
  5920                           
  5921                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  5922   012554  5013               	movf	stop@mL^0,w,c
  5923   012556  6ED9               	movwf	fsr2l,c
  5924   012558  6ADA               	clrf	fsr2h,c
  5925   01255A  50DF               	movf	indf2,w,c
  5926   01255C  B4D8               	btfsc	status,2,c
  5927   01255E  EFB3  F092         	goto	u4391
  5928   012562  EFB5  F092         	goto	u4390
  5929   012566                     u4391:
  5930   012566  EFB9  F092         	goto	l4831
  5931   01256A                     u4390:
  5932   01256A  5013               	movf	stop@mL^0,w,c
  5933   01256C  6ED9               	movwf	fsr2l,c
  5934   01256E  6ADA               	clrf	fsr2h,c
  5935   012570  06DF               	decf	indf2,f,c
  5936   012572                     l4831:
  5937                           
  5938                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  5939   012572  5014               	movf	stop@mR^0,w,c
  5940   012574  6ED9               	movwf	fsr2l,c
  5941   012576  6ADA               	clrf	fsr2h,c
  5942   012578  50DF               	movf	indf2,w,c
  5943   01257A  B4D8               	btfsc	status,2,c
  5944   01257C  EFC2  F092         	goto	u4401
  5945   012580  EFC4  F092         	goto	u4400
  5946   012584                     u4401:
  5947   012584  EFC8  F092         	goto	l4835
  5948   012588                     u4400:
  5949   012588  5014               	movf	stop@mR^0,w,c
  5950   01258A  6ED9               	movwf	fsr2l,c
  5951   01258C  6ADA               	clrf	fsr2h,c
  5952   01258E  06DF               	decf	indf2,f,c
  5953   012590                     l4835:
  5954                           
  5955                           ;dc_motor.c: 96:         setMotorPWM(mL);
  5956   012590  C013  F00E         	movff	stop@mL,setMotorPWM@m
  5957   012594  EC37  F08E         	call	_setMotorPWM	;wreg free
  5958   012598                     
  5959                           ;dc_motor.c: 97:         setMotorPWM(mR);
  5960   012598  C014  F00E         	movff	stop@mR,setMotorPWM@m
  5961   01259C  EC37  F08E         	call	_setMotorPWM	;wreg free
  5962   0125A0                     
  5963                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  5964   0125A0  0E0B               	movlw	11
  5965   0125A2  6E15               	movwf	??_stop^0,c
  5966   0125A4  0E62               	movlw	98
  5967   0125A6                     u5927:
  5968   0125A6  2EE8               	decfsz	wreg,f,c
  5969   0125A8  D7FE               	bra	u5927
  5970   0125AA  2E15               	decfsz	??_stop^0,f,c
  5971   0125AC  D7FC               	bra	u5927
  5972   0125AE  D000               	nop2	
  5973   0125B0                     l4841:
  5974                           
  5975                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  5976   0125B0  5013               	movf	stop@mL^0,w,c
  5977   0125B2  6ED9               	movwf	fsr2l,c
  5978   0125B4  6ADA               	clrf	fsr2h,c
  5979   0125B6  50DF               	movf	indf2,w,c
  5980   0125B8  A4D8               	btfss	status,2,c
  5981   0125BA  EFE1  F092         	goto	u4411
  5982   0125BE  EFE3  F092         	goto	u4410
  5983   0125C2                     u4411:
  5984   0125C2  EFAA  F092         	goto	l4827
  5985   0125C6                     u4410:
  5986   0125C6  5014               	movf	stop@mR^0,w,c
  5987   0125C8  6ED9               	movwf	fsr2l,c
  5988   0125CA  6ADA               	clrf	fsr2h,c
  5989   0125CC  50DF               	movf	indf2,w,c
  5990   0125CE  A4D8               	btfss	status,2,c
  5991   0125D0  EFEC  F092         	goto	u4421
  5992   0125D4  EFEE  F092         	goto	u4420
  5993   0125D8                     u4421:
  5994   0125D8  EFAA  F092         	goto	l4827
  5995   0125DC                     u4420:
  5996   0125DC  0012               	return		;funcret
  5997   0125DE                     __end_of_stop:
  5998                           	callstack 0
  5999                           
  6000 ;; *************** function _fullSpeedBack *****************
  6001 ;; Defined at:
  6002 ;;		line 165 in file "dc_motor.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6005 ;;		 -> motorL(9), 
  6006 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6007 ;;		 -> motorR(9), 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  power           2   21[COMRAM] int 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      void 
  6012 ;; Registers used:
  6013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6019 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6020 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6021 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6022 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6023 ;;Total ram usage:        5 bytes
  6024 ;; Hardware stack levels used: 1
  6025 ;; Hardware stack levels required when called: 2
  6026 ;; This function calls:
  6027 ;;		_setMotorPWM
  6028 ;; This function is called by:
  6029 ;;		_backHalf
  6030 ;;		_backOneAndHalf
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           	psect	text23
  6035   0126DA                     __ptext23:
  6036                           	callstack 0
  6037   0126DA                     _fullSpeedBack:
  6038                           	callstack 25
  6039   0126DA                     
  6040                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  6041   0126DA  5013               	movf	fullSpeedBack@mL^0,w,c
  6042   0126DC  6ED9               	movwf	fsr2l,c
  6043   0126DE  6ADA               	clrf	fsr2h,c
  6044   0126E0  0E01               	movlw	1
  6045   0126E2  26D9               	addwf	fsr2l,f,c
  6046   0126E4  6ADF               	clrf	indf2,c
  6047                           
  6048                           ;dc_motor.c: 169:     mR->direction = 0;
  6049   0126E6  5014               	movf	fullSpeedBack@mR^0,w,c
  6050   0126E8  6ED9               	movwf	fsr2l,c
  6051   0126EA  6ADA               	clrf	fsr2h,c
  6052   0126EC  0E01               	movlw	1
  6053   0126EE  26D9               	addwf	fsr2l,f,c
  6054   0126F0  6ADF               	clrf	indf2,c
  6055   0126F2                     
  6056                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  6057   0126F2  0E00               	movlw	0
  6058   0126F4  6E17               	movwf	(fullSpeedBack@power+1)^0,c
  6059   0126F6  0E00               	movlw	0
  6060   0126F8  6E16               	movwf	fullSpeedBack@power^0,c
  6061   0126FA                     l4901:
  6062                           
  6063                           ;dc_motor.c: 172:         mL->power = power;
  6064   0126FA  5013               	movf	fullSpeedBack@mL^0,w,c
  6065   0126FC  6ED9               	movwf	fsr2l,c
  6066   0126FE  6ADA               	clrf	fsr2h,c
  6067   012700  C016  FFDF         	movff	fullSpeedBack@power,indf2
  6068                           
  6069                           ;dc_motor.c: 173:         mR->power = power;
  6070   012704  5014               	movf	fullSpeedBack@mR^0,w,c
  6071   012706  6ED9               	movwf	fsr2l,c
  6072   012708  6ADA               	clrf	fsr2h,c
  6073   01270A  C016  FFDF         	movff	fullSpeedBack@power,indf2
  6074   01270E                     
  6075                           ;dc_motor.c: 176:         setMotorPWM(mL);
  6076   01270E  C013  F00E         	movff	fullSpeedBack@mL,setMotorPWM@m
  6077   012712  EC37  F08E         	call	_setMotorPWM	;wreg free
  6078   012716                     
  6079                           ;dc_motor.c: 177:         setMotorPWM(mR);
  6080   012716  C014  F00E         	movff	fullSpeedBack@mR,setMotorPWM@m
  6081   01271A  EC37  F08E         	call	_setMotorPWM	;wreg free
  6082   01271E                     
  6083                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  6084   01271E  0E0B               	movlw	11
  6085   012720  6E15               	movwf	??_fullSpeedBack^0,c
  6086   012722  0E62               	movlw	98
  6087   012724                     u5937:
  6088   012724  2EE8               	decfsz	wreg,f,c
  6089   012726  D7FE               	bra	u5937
  6090   012728  2E15               	decfsz	??_fullSpeedBack^0,f,c
  6091   01272A  D7FC               	bra	u5937
  6092   01272C  D000               	nop2	
  6093   01272E                     
  6094                           ;dc_motor.c: 181:     }
  6095   01272E  4A16               	infsnz	fullSpeedBack@power^0,f,c
  6096   012730  2A17               	incf	(fullSpeedBack@power+1)^0,f,c
  6097   012732  BE17               	btfsc	(fullSpeedBack@power+1)^0,7,c
  6098   012734  EFA5  F093         	goto	u4451
  6099   012738  5017               	movf	(fullSpeedBack@power+1)^0,w,c
  6100   01273A  E109               	bnz	u4450
  6101   01273C  0E33               	movlw	51
  6102   01273E  5C16               	subwf	fullSpeedBack@power^0,w,c
  6103   012740  A0D8               	btfss	status,0,c
  6104   012742  EFA5  F093         	goto	u4451
  6105   012746  EFA7  F093         	goto	u4450
  6106   01274A                     u4451:
  6107   01274A  EF7D  F093         	goto	l4901
  6108   01274E                     u4450:
  6109   01274E  0012               	return		;funcret
  6110   012750                     __end_of_fullSpeedBack:
  6111                           	callstack 0
  6112                           
  6113 ;; *************** function _setMotorPWM *****************
  6114 ;; Defined at:
  6115 ;;		line 65 in file "dc_motor.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;  m               1   13[COMRAM] PTR struct DC_motor
  6118 ;;		 -> motorR(9), motorL(9), 
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;  negDuty         1   17[COMRAM] unsigned char 
  6121 ;;  posDuty         1   16[COMRAM] unsigned char 
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6131 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6133 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6134 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6135 ;;Total ram usage:        5 bytes
  6136 ;; Hardware stack levels used: 1
  6137 ;; Hardware stack levels required when called: 1
  6138 ;; This function calls:
  6139 ;;		___lwdiv
  6140 ;;		___wmul
  6141 ;; This function is called by:
  6142 ;;		_stop
  6143 ;;		_turnLeft
  6144 ;;		_turnRight
  6145 ;;		_fullSpeedBack
  6146 ;;		_fullSpeedAhead
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text24
  6151   011C6E                     __ptext24:
  6152                           	callstack 0
  6153   011C6E                     _setMotorPWM:
  6154                           	callstack 25
  6155   011C6E                     
  6156                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  6157   011C6E  500E               	movf	setMotorPWM@m^0,w,c
  6158   011C70  6ED9               	movwf	fsr2l,c
  6159   011C72  6ADA               	clrf	fsr2h,c
  6160   011C74  0E02               	movlw	2
  6161   011C76  26D9               	addwf	fsr2l,f,c
  6162   011C78  50DF               	movf	indf2,w,c
  6163   011C7A  B4D8               	btfsc	status,2,c
  6164   011C7C  EF42  F08E         	goto	u4301
  6165   011C80  EF44  F08E         	goto	u4300
  6166   011C84                     u4301:
  6167   011C84  EF74  F08E         	goto	l4755
  6168   011C88                     u4300:
  6169   011C88                     
  6170                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6171   011C88  500E               	movf	setMotorPWM@m^0,w,c
  6172   011C8A  6ED9               	movwf	fsr2l,c
  6173   011C8C  6ADA               	clrf	fsr2h,c
  6174   011C8E  50DF               	movf	indf2,w,c
  6175   011C90  6E0F               	movwf	??_setMotorPWM^0,c
  6176   011C92  500F               	movf	??_setMotorPWM^0,w,c
  6177   011C94  6E01               	movwf	___wmul@multiplier^0,c
  6178   011C96  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6179   011C98  500E               	movf	setMotorPWM@m^0,w,c
  6180   011C9A  6ED9               	movwf	fsr2l,c
  6181   011C9C  6ADA               	clrf	fsr2h,c
  6182   011C9E  0E03               	movlw	3
  6183   011CA0  26D9               	addwf	fsr2l,f,c
  6184   011CA2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6185   011CA6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6186   011CAA  EC77  F096         	call	___wmul	;wreg free
  6187   011CAE  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6188   011CB2  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6189   011CB6  0E00               	movlw	0
  6190   011CB8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6191   011CBA  0E64               	movlw	100
  6192   011CBC  6E09               	movwf	___lwdiv@divisor^0,c
  6193   011CBE  ECA8  F093         	call	___lwdiv	;wreg free
  6194   011CC2  500E               	movf	setMotorPWM@m^0,w,c
  6195   011CC4  6ED9               	movwf	fsr2l,c
  6196   011CC6  6ADA               	clrf	fsr2h,c
  6197   011CC8  0E03               	movlw	3
  6198   011CCA  26D9               	addwf	fsr2l,f,c
  6199   011CCC  50DF               	movf	indf2,w,c
  6200   011CCE  6E10               	movwf	(??_setMotorPWM+1)^0,c
  6201   011CD0  5007               	movf	?___lwdiv^0,w,c
  6202   011CD2  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  6203   011CD4  6E11               	movwf	setMotorPWM@posDuty^0,c
  6204   011CD6                     
  6205                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  6206   011CD6  500E               	movf	setMotorPWM@m^0,w,c
  6207   011CD8  6ED9               	movwf	fsr2l,c
  6208   011CDA  6ADA               	clrf	fsr2h,c
  6209   011CDC  0E03               	movlw	3
  6210   011CDE  26D9               	addwf	fsr2l,f,c
  6211   011CE0  50DF               	movf	indf2,w,c
  6212   011CE2  6E12               	movwf	setMotorPWM@negDuty^0,c
  6213                           
  6214                           ;dc_motor.c: 72:     }
  6215   011CE4  EF95  F08E         	goto	l4759
  6216   011CE8                     l4755:
  6217                           
  6218                           ;dc_motor.c: 74:         posDuty=0;
  6219   011CE8  0E00               	movlw	0
  6220   011CEA  6E11               	movwf	setMotorPWM@posDuty^0,c
  6221   011CEC                     
  6222                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6223   011CEC  500E               	movf	setMotorPWM@m^0,w,c
  6224   011CEE  6ED9               	movwf	fsr2l,c
  6225   011CF0  6ADA               	clrf	fsr2h,c
  6226   011CF2  50DF               	movf	indf2,w,c
  6227   011CF4  6E0F               	movwf	??_setMotorPWM^0,c
  6228   011CF6  500F               	movf	??_setMotorPWM^0,w,c
  6229   011CF8  6E01               	movwf	___wmul@multiplier^0,c
  6230   011CFA  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6231   011CFC  500E               	movf	setMotorPWM@m^0,w,c
  6232   011CFE  6ED9               	movwf	fsr2l,c
  6233   011D00  6ADA               	clrf	fsr2h,c
  6234   011D02  0E03               	movlw	3
  6235   011D04  26D9               	addwf	fsr2l,f,c
  6236   011D06  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6237   011D0A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6238   011D0E  EC77  F096         	call	___wmul	;wreg free
  6239   011D12  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6240   011D16  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6241   011D1A  0E00               	movlw	0
  6242   011D1C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6243   011D1E  0E64               	movlw	100
  6244   011D20  6E09               	movwf	___lwdiv@divisor^0,c
  6245   011D22  ECA8  F093         	call	___lwdiv	;wreg free
  6246   011D26  5007               	movf	?___lwdiv^0,w,c
  6247   011D28  6E12               	movwf	setMotorPWM@negDuty^0,c
  6248   011D2A                     l4759:
  6249                           
  6250                           ;dc_motor.c: 78:     if (m->direction) {
  6251   011D2A  500E               	movf	setMotorPWM@m^0,w,c
  6252   011D2C  6ED9               	movwf	fsr2l,c
  6253   011D2E  6ADA               	clrf	fsr2h,c
  6254   011D30  0E01               	movlw	1
  6255   011D32  26D9               	addwf	fsr2l,f,c
  6256   011D34  50DF               	movf	indf2,w,c
  6257   011D36  B4D8               	btfsc	status,2,c
  6258   011D38  EFA0  F08E         	goto	u4311
  6259   011D3C  EFA2  F08E         	goto	u4310
  6260   011D40                     u4311:
  6261   011D40  EFC2  F08E         	goto	l4763
  6262   011D44                     u4310:
  6263   011D44                     
  6264                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  6265   011D44  500E               	movf	setMotorPWM@m^0,w,c
  6266   011D46  6ED9               	movwf	fsr2l,c
  6267   011D48  6ADA               	clrf	fsr2h,c
  6268   011D4A  0E05               	movlw	5
  6269   011D4C  26D9               	addwf	fsr2l,f,c
  6270   011D4E  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6271   011D52  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6272   011D56  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6273   011D5A  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6274   011D5E  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  6275                           
  6276                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  6277   011D62  500E               	movf	setMotorPWM@m^0,w,c
  6278   011D64  6ED9               	movwf	fsr2l,c
  6279   011D66  6ADA               	clrf	fsr2h,c
  6280   011D68  0E07               	movlw	7
  6281   011D6A  26D9               	addwf	fsr2l,f,c
  6282   011D6C  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6283   011D70  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6284   011D74  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6285   011D78  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6286   011D7C  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  6287                           
  6288                           ;dc_motor.c: 81:     } else {
  6289   011D80  EFE0  F08E         	goto	l350
  6290   011D84                     l4763:
  6291                           
  6292                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  6293   011D84  500E               	movf	setMotorPWM@m^0,w,c
  6294   011D86  6ED9               	movwf	fsr2l,c
  6295   011D88  6ADA               	clrf	fsr2h,c
  6296   011D8A  0E05               	movlw	5
  6297   011D8C  26D9               	addwf	fsr2l,f,c
  6298   011D8E  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6299   011D92  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6300   011D96  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6301   011D9A  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6302   011D9E  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  6303                           
  6304                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  6305   011DA2  500E               	movf	setMotorPWM@m^0,w,c
  6306   011DA4  6ED9               	movwf	fsr2l,c
  6307   011DA6  6ADA               	clrf	fsr2h,c
  6308   011DA8  0E07               	movlw	7
  6309   011DAA  26D9               	addwf	fsr2l,f,c
  6310   011DAC  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6311   011DB0  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6312   011DB4  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6313   011DB8  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6314   011DBC  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  6315   011DC0                     l350:
  6316   011DC0  0012               	return		;funcret
  6317   011DC2                     __end_of_setMotorPWM:
  6318                           	callstack 0
  6319                           
  6320 ;; *************** function ___lwdiv *****************
  6321 ;; Defined at:
  6322 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  dividend        2    6[COMRAM] unsigned int 
  6325 ;;  divisor         2    8[COMRAM] unsigned int 
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;  quotient        2   11[COMRAM] unsigned int 
  6328 ;;  counter         1   10[COMRAM] unsigned char 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  2    6[COMRAM] unsigned int 
  6331 ;; Registers used:
  6332 ;;		wreg, status,2, status,0
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6338 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6339 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6341 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6342 ;;Total ram usage:        7 bytes
  6343 ;; Hardware stack levels used: 1
  6344 ;; This function calls:
  6345 ;;		Nothing
  6346 ;; This function is called by:
  6347 ;;		_setMotorPWM
  6348 ;;		_ADC2String
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           	psect	text25
  6353   012750                     __ptext25:
  6354                           	callstack 0
  6355   012750                     ___lwdiv:
  6356                           	callstack 25
  6357   012750  0E00               	movlw	0
  6358   012752  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  6359   012754  0E00               	movlw	0
  6360   012756  6E0C               	movwf	___lwdiv@quotient^0,c
  6361   012758  5009               	movf	___lwdiv@divisor^0,w,c
  6362   01275A  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6363   01275C  B4D8               	btfsc	status,2,c
  6364   01275E  EFB3  F093         	goto	u4151
  6365   012762  EFB5  F093         	goto	u4150
  6366   012766                     u4151:
  6367   012766  EFDD  F093         	goto	l1028
  6368   01276A                     u4150:
  6369   01276A  0E01               	movlw	1
  6370   01276C  6E0B               	movwf	___lwdiv@counter^0,c
  6371   01276E  EFBD  F093         	goto	l4671
  6372   012772                     l4669:
  6373   012772  90D8               	bcf	status,0,c
  6374   012774  3609               	rlcf	___lwdiv@divisor^0,f,c
  6375   012776  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6376   012778  2A0B               	incf	___lwdiv@counter^0,f,c
  6377   01277A                     l4671:
  6378   01277A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6379   01277C  EFC2  F093         	goto	u4161
  6380   012780  EFC4  F093         	goto	u4160
  6381   012784                     u4161:
  6382   012784  EFB9  F093         	goto	l4669
  6383   012788                     u4160:
  6384   012788                     l4673:
  6385   012788  90D8               	bcf	status,0,c
  6386   01278A  360C               	rlcf	___lwdiv@quotient^0,f,c
  6387   01278C  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6388   01278E  5009               	movf	___lwdiv@divisor^0,w,c
  6389   012790  5C07               	subwf	___lwdiv@dividend^0,w,c
  6390   012792  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6391   012794  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6392   012796  A0D8               	btfss	status,0,c
  6393   012798  EFD0  F093         	goto	u4171
  6394   01279C  EFD2  F093         	goto	u4170
  6395   0127A0                     u4171:
  6396   0127A0  EFD7  F093         	goto	l4681
  6397   0127A4                     u4170:
  6398   0127A4  5009               	movf	___lwdiv@divisor^0,w,c
  6399   0127A6  5E07               	subwf	___lwdiv@dividend^0,f,c
  6400   0127A8  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6401   0127AA  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6402   0127AC  800C               	bsf	___lwdiv@quotient^0,0,c
  6403   0127AE                     l4681:
  6404   0127AE  90D8               	bcf	status,0,c
  6405   0127B0  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6406   0127B2  3209               	rrcf	___lwdiv@divisor^0,f,c
  6407   0127B4  2E0B               	decfsz	___lwdiv@counter^0,f,c
  6408   0127B6  EFC4  F093         	goto	l4673
  6409   0127BA                     l1028:
  6410   0127BA  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  6411   0127BE  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6412   0127C2  0012               	return		;funcret
  6413   0127C4                     __end_of___lwdiv:
  6414                           	callstack 0
  6415                           
  6416 ;; *************** function _color_click_init *****************
  6417 ;; Defined at:
  6418 ;;		line 8 in file "color.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;		None
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;		None
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  1    wreg      void 
  6425 ;; Registers used:
  6426 ;;		wreg, status,2, status,0, cstack
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6434 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6435 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6436 ;;Total ram usage:        1 bytes
  6437 ;; Hardware stack levels used: 1
  6438 ;; Hardware stack levels required when called: 3
  6439 ;; This function calls:
  6440 ;;		_I2C_2_Master_Init
  6441 ;;		_color_writetoaddr
  6442 ;; This function is called by:
  6443 ;;		_main
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           	psect	text26
  6448   012AE6                     __ptext26:
  6449                           	callstack 0
  6450   012AE6                     _color_click_init:
  6451                           	callstack 27
  6452   012AE6                     
  6453                           ;color.c: 11:     I2C_2_Master_Init();
  6454   012AE6  EC3B  F096         	call	_I2C_2_Master_Init	;wreg free
  6455   012AEA                     
  6456                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  6457   012AEA  0E01               	movlw	1
  6458   012AEC  6E03               	movwf	color_writetoaddr@value^0,c
  6459   012AEE  0E00               	movlw	0
  6460   012AF0  EC8A  F096         	call	_color_writetoaddr
  6461   012AF4                     
  6462                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6463   012AF4  0E3F               	movlw	63
  6464   012AF6  6E05               	movwf	??_color_click_init^0,c
  6465   012AF8  0E55               	movlw	85
  6466   012AFA                     u5947:
  6467   012AFA  2EE8               	decfsz	wreg,f,c
  6468   012AFC  D7FE               	bra	u5947
  6469   012AFE  2E05               	decfsz	??_color_click_init^0,f,c
  6470   012B00  D7FC               	bra	u5947
  6471   012B02  0000               	nop	
  6472   012B04                     
  6473                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  6474   012B04  0E03               	movlw	3
  6475   012B06  6E03               	movwf	color_writetoaddr@value^0,c
  6476   012B08  0E00               	movlw	0
  6477   012B0A  EC8A  F096         	call	_color_writetoaddr
  6478   012B0E                     
  6479                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  6480   012B0E  0ED5               	movlw	213
  6481   012B10  6E03               	movwf	color_writetoaddr@value^0,c
  6482   012B12  0E01               	movlw	1
  6483   012B14  EC8A  F096         	call	_color_writetoaddr
  6484   012B18  0012               	return		;funcret
  6485   012B1A                     __end_of_color_click_init:
  6486                           	callstack 0
  6487                           
  6488 ;; *************** function _color_writetoaddr *****************
  6489 ;; Defined at:
  6490 ;;		line 24 in file "color.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;  address         1    wreg     unsigned char 
  6493 ;;  value           1    2[COMRAM] unsigned char 
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;  address         1    3[COMRAM] unsigned char 
  6496 ;; Return value:  Size  Location     Type
  6497 ;;                  1    wreg      void 
  6498 ;; Registers used:
  6499 ;;		wreg, status,2, status,0, cstack
  6500 ;; Tracked objects:
  6501 ;;		On entry : 0/0
  6502 ;;		On exit  : 0/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6505 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6506 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6508 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6509 ;;Total ram usage:        2 bytes
  6510 ;; Hardware stack levels used: 1
  6511 ;; Hardware stack levels required when called: 2
  6512 ;; This function calls:
  6513 ;;		_I2C_2_Master_Start
  6514 ;;		_I2C_2_Master_Stop
  6515 ;;		_I2C_2_Master_Write
  6516 ;; This function is called by:
  6517 ;;		_color_click_init
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text27
  6522   012D14                     __ptext27:
  6523                           	callstack 0
  6524   012D14                     _color_writetoaddr:
  6525                           	callstack 27
  6526                           
  6527                           ;incstack = 0
  6528                           ;color_writetoaddr@address stored from wreg
  6529   012D14  6E04               	movwf	color_writetoaddr@address^0,c
  6530   012D16                     
  6531                           ;color.c: 25:     I2C_2_Master_Start();
  6532   012D16  ECCD  F096         	call	_I2C_2_Master_Start	;wreg free
  6533                           
  6534                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  6535   012D1A  0E52               	movlw	82
  6536   012D1C  ECC2  F096         	call	_I2C_2_Master_Write
  6537                           
  6538                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  6539   012D20  5004               	movf	color_writetoaddr@address^0,w,c
  6540   012D22  0980               	iorlw	128
  6541   012D24  ECC2  F096         	call	_I2C_2_Master_Write
  6542                           
  6543                           ;color.c: 28:     I2C_2_Master_Write(value);
  6544   012D28  5003               	movf	color_writetoaddr@value^0,w,c
  6545   012D2A  ECC2  F096         	call	_I2C_2_Master_Write
  6546                           
  6547                           ;color.c: 29:     I2C_2_Master_Stop();
  6548   012D2E  ECC8  F096         	call	_I2C_2_Master_Stop	;wreg free
  6549   012D32  0012               	return		;funcret
  6550   012D34                     __end_of_color_writetoaddr:
  6551                           	callstack 0
  6552                           
  6553 ;; *************** function _I2C_2_Master_Init *****************
  6554 ;; Defined at:
  6555 ;;		line 4 in file "i2c.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      void 
  6562 ;; Registers used:
  6563 ;;		wreg, status,2
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6573 ;;Total ram usage:        0 bytes
  6574 ;; Hardware stack levels used: 1
  6575 ;; This function calls:
  6576 ;;		Nothing
  6577 ;; This function is called by:
  6578 ;;		_color_click_init
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           	psect	text28
  6583   012C76                     __ptext28:
  6584                           	callstack 0
  6585   012C76                     _I2C_2_Master_Init:
  6586                           	callstack 29
  6587   012C76                     
  6588                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6589   012C76  010E               	movlb	14	; () banked
  6590   012C78  51D9               	movf	217,w,b	;volatile
  6591   012C7A  0BF0               	andlw	-16
  6592   012C7C  0908               	iorlw	8
  6593   012C7E  6FD9               	movwf	217,b	;volatile
  6594   012C80                     
  6595                           ; BSR set to: 14
  6596                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6597   012C80  8BD9               	bsf	217,5,b	;volatile
  6598                           
  6599                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6600   012C82  0E9F               	movlw	159
  6601   012C84  6FD6               	movwf	214,b	;volatile
  6602   012C86                     
  6603                           ; BSR set to: 14
  6604                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6605   012C86  8A84               	bsf	132,5,c	;volatile
  6606   012C88                     
  6607                           ; BSR set to: 14
  6608                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6609   012C88  8C84               	bsf	132,6,c	;volatile
  6610   012C8A                     
  6611                           ; BSR set to: 14
  6612                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6613   012C8A  9BA7               	bcf	167,5,b	;volatile
  6614   012C8C                     
  6615                           ; BSR set to: 14
  6616                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6617   012C8C  9DA7               	bcf	167,6,b	;volatile
  6618                           
  6619                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  6620   012C8E  0E1D               	movlw	29
  6621   012C90  6F1D               	movwf	29,b	;volatile
  6622                           
  6623                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  6624   012C92  0E1E               	movlw	30
  6625   012C94  6F1C               	movwf	28,b	;volatile
  6626                           
  6627                           ;i2c.c: 18:   RD5PPS=0x1C;
  6628   012C96  0E1C               	movlw	28
  6629   012C98  6F6F               	movwf	111,b	;volatile
  6630                           
  6631                           ;i2c.c: 19:   RD6PPS=0x1B;
  6632   012C9A  0E1B               	movlw	27
  6633   012C9C  6F70               	movwf	112,b	;volatile
  6634   012C9E                     
  6635                           ; BSR set to: 14
  6636   012C9E  0012               	return		;funcret
  6637   012CA0                     __end_of_I2C_2_Master_Init:
  6638                           	callstack 0
  6639                           
  6640 ;; *************** function _calibration_routine *****************
  6641 ;; Defined at:
  6642 ;;		line 254 in file "color.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  cCal            2   72[COMRAM] PTR struct colors
  6645 ;;		 -> colorCalibration(8), 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  cal_state      20    0[BANK0 ] unsigned char [20]
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6657 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6658 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6659 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6660 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6661 ;;Total ram usage:       24 bytes
  6662 ;; Hardware stack levels used: 1
  6663 ;; Hardware stack levels required when called: 8
  6664 ;; This function calls:
  6665 ;;		_color_read_Blue
  6666 ;;		_color_read_Clear
  6667 ;;		_color_read_Green
  6668 ;;		_color_read_Red
  6669 ;;		_sendStringSerial4
  6670 ;;		_sprintf
  6671 ;; This function is called by:
  6672 ;;		_main
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text29
  6677   01141A                     __ptext29:
  6678                           	callstack 0
  6679   01141A                     _calibration_routine:
  6680                           	callstack 22
  6681   01141A                     
  6682                           ;color.c: 254: void calibration_routine(colors *cCal);color.c: 255: {;color.c: 257:     
      +                          LATGbits.LATG0 = 0;
  6683   01141A  907F               	bcf	127,0,c	;volatile
  6684                           
  6685                           ;color.c: 258:     LATEbits.LATE7 = 0;
  6686   01141C  9E7D               	bcf	125,7,c	;volatile
  6687                           
  6688                           ;color.c: 259:     LATAbits.LATA3 = 0;
  6689   01141E  9679               	bcf	121,3,c	;volatile
  6690   011420                     
  6691                           ;color.c: 261:     char cal_state[20];;color.c: 265:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  6692   011420  0E60               	movlw	low calibration_routine@cal_state
  6693   011422  6E34               	movwf	sprintf@s^0,c
  6694   011424  6A35               	clrf	(sprintf@s+1)^0,c
  6695   011426  0E56               	movlw	low STR_8
  6696   011428  6E36               	movwf	sprintf@fmt^0,c
  6697   01142A  0EFF               	movlw	high STR_8
  6698   01142C  6E37               	movwf	(sprintf@fmt+1)^0,c
  6699   01142E  0EFC               	movlw	low STR_9
  6700   011430  6E38               	movwf	(?_sprintf+4)^0,c
  6701   011432  0EFF               	movlw	high STR_9
  6702   011434  6E39               	movwf	(?_sprintf+5)^0,c
  6703   011436  EC17  F095         	call	_sprintf	;wreg free
  6704   01143A                     
  6705                           ;color.c: 266:     sendStringSerial4(cal_state);
  6706   01143A  0E60               	movlw	low calibration_routine@cal_state
  6707   01143C  6E02               	movwf	sendStringSerial4@string^0,c
  6708   01143E  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  6709   011440  EC57  F095         	call	_sendStringSerial4	;wreg free
  6710   011444                     l117:
  6711                           
  6712                           ;color.c: 269:     while(PORTFbits.RF2 == 1){
  6713   011444  B48E               	btfsc	142,2,c	;volatile
  6714   011446  EF27  F08A         	goto	u5711
  6715   01144A  EF29  F08A         	goto	u5710
  6716   01144E                     u5711:
  6717   01144E  EF22  F08A         	goto	l117
  6718   011452                     u5710:
  6719   011452                     
  6720                           ;color.c: 273:     LATGbits.LATG0 = 1;
  6721   011452  807F               	bsf	127,0,c	;volatile
  6722   011454                     
  6723                           ;color.c: 274:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6724   011454  0E29               	movlw	41
  6725   011456  6E4C               	movwf	(??_calibration_routine+1)^0,c
  6726   011458  0E96               	movlw	150
  6727   01145A  6E4B               	movwf	??_calibration_routine^0,c
  6728   01145C  0E7F               	movlw	127
  6729   01145E                     u5957:
  6730   01145E  2EE8               	decfsz	wreg,f,c
  6731   011460  D7FE               	bra	u5957
  6732   011462  2E4B               	decfsz	??_calibration_routine^0,f,c
  6733   011464  D7FC               	bra	u5957
  6734   011466  2E4C               	decfsz	(??_calibration_routine+1)^0,f,c
  6735   011468  D7FA               	bra	u5957
  6736   01146A  0000               	nop	
  6737   01146C                     
  6738                           ;color.c: 275:     (cCal->red) = color_read_Red();
  6739   01146C  EC10  F094         	call	_color_read_Red	;wreg free
  6740   011470  C049  FFD9         	movff	calibration_routine@cCal,fsr2l
  6741   011474  C04A  FFDA         	movff	calibration_routine@cCal+1,fsr2h
  6742   011478  C005  FFDE         	movff	?_color_read_Red,postinc2
  6743   01147C  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  6744   011480                     
  6745                           ;color.c: 276:     LATGbits.LATG0 = 0;
  6746   011480  907F               	bcf	127,0,c	;volatile
  6747   011482                     
  6748                           ;color.c: 279:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  6749   011482  0E60               	movlw	low calibration_routine@cal_state
  6750   011484  6E34               	movwf	sprintf@s^0,c
  6751   011486  6A35               	clrf	(sprintf@s+1)^0,c
  6752   011488  0E05               	movlw	low STR_10
  6753   01148A  6E36               	movwf	sprintf@fmt^0,c
  6754   01148C  0EFF               	movlw	high STR_10
  6755   01148E  6E37               	movwf	(sprintf@fmt+1)^0,c
  6756   011490  0EFC               	movlw	low STR_9
  6757   011492  6E38               	movwf	(?_sprintf+4)^0,c
  6758   011494  0EFF               	movlw	high STR_9
  6759   011496  6E39               	movwf	(?_sprintf+5)^0,c
  6760   011498  EC17  F095         	call	_sprintf	;wreg free
  6761   01149C                     
  6762                           ;color.c: 280:     sendStringSerial4(&cal_state);
  6763   01149C  0E60               	movlw	low calibration_routine@cal_state
  6764   01149E  6E02               	movwf	sendStringSerial4@string^0,c
  6765   0114A0  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  6766   0114A2  EC57  F095         	call	_sendStringSerial4	;wreg free
  6767   0114A6                     l120:
  6768                           
  6769                           ;color.c: 282:     while(PORTFbits.RF2 == 1){
  6770   0114A6  B48E               	btfsc	142,2,c	;volatile
  6771   0114A8  EF58  F08A         	goto	u5721
  6772   0114AC  EF5A  F08A         	goto	u5720
  6773   0114B0                     u5721:
  6774   0114B0  EF53  F08A         	goto	l120
  6775   0114B4                     u5720:
  6776   0114B4                     
  6777                           ;color.c: 286:     LATEbits.LATE7 = 1;
  6778   0114B4  8E7D               	bsf	125,7,c	;volatile
  6779   0114B6                     
  6780                           ;color.c: 287:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6781   0114B6  0E29               	movlw	41
  6782   0114B8  6E4C               	movwf	(??_calibration_routine+1)^0,c
  6783   0114BA  0E96               	movlw	150
  6784   0114BC  6E4B               	movwf	??_calibration_routine^0,c
  6785   0114BE  0E7F               	movlw	127
  6786   0114C0                     u5967:
  6787   0114C0  2EE8               	decfsz	wreg,f,c
  6788   0114C2  D7FE               	bra	u5967
  6789   0114C4  2E4B               	decfsz	??_calibration_routine^0,f,c
  6790   0114C6  D7FC               	bra	u5967
  6791   0114C8  2E4C               	decfsz	(??_calibration_routine+1)^0,f,c
  6792   0114CA  D7FA               	bra	u5967
  6793   0114CC  0000               	nop	
  6794   0114CE                     
  6795                           ;color.c: 288:     (cCal->green) = color_read_Green();
  6796   0114CE  EC38  F094         	call	_color_read_Green	;wreg free
  6797   0114D2  EE20 F002          	lfsr	2,2
  6798   0114D6  5049               	movf	calibration_routine@cCal^0,w,c
  6799   0114D8  26D9               	addwf	fsr2l,f,c
  6800   0114DA  504A               	movf	(calibration_routine@cCal+1)^0,w,c
  6801   0114DC  22DA               	addwfc	fsr2h,f,c
  6802   0114DE  C005  FFDE         	movff	?_color_read_Green,postinc2
  6803   0114E2  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  6804   0114E6                     
  6805                           ;color.c: 289:     LATEbits.LATE7 = 0;
  6806   0114E6  9E7D               	bcf	125,7,c	;volatile
  6807   0114E8                     
  6808                           ;color.c: 292:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  6809   0114E8  0E60               	movlw	low calibration_routine@cal_state
  6810   0114EA  6E34               	movwf	sprintf@s^0,c
  6811   0114EC  6A35               	clrf	(sprintf@s+1)^0,c
  6812   0114EE  0E22               	movlw	low STR_12
  6813   0114F0  6E36               	movwf	sprintf@fmt^0,c
  6814   0114F2  0EFF               	movlw	high STR_12
  6815   0114F4  6E37               	movwf	(sprintf@fmt+1)^0,c
  6816   0114F6  0EFC               	movlw	low STR_9
  6817   0114F8  6E38               	movwf	(?_sprintf+4)^0,c
  6818   0114FA  0EFF               	movlw	high STR_9
  6819   0114FC  6E39               	movwf	(?_sprintf+5)^0,c
  6820   0114FE  EC17  F095         	call	_sprintf	;wreg free
  6821   011502                     
  6822                           ;color.c: 293:     sendStringSerial4(&cal_state);
  6823   011502  0E60               	movlw	low calibration_routine@cal_state
  6824   011504  6E02               	movwf	sendStringSerial4@string^0,c
  6825   011506  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  6826   011508  EC57  F095         	call	_sendStringSerial4	;wreg free
  6827   01150C                     l123:
  6828                           
  6829                           ;color.c: 295:     while(PORTFbits.RF2 == 1){
  6830   01150C  B48E               	btfsc	142,2,c	;volatile
  6831   01150E  EF8B  F08A         	goto	u5731
  6832   011512  EF8D  F08A         	goto	u5730
  6833   011516                     u5731:
  6834   011516  EF86  F08A         	goto	l123
  6835   01151A                     u5730:
  6836   01151A                     
  6837                           ;color.c: 299:     LATAbits.LATA3 = 1;
  6838   01151A  8679               	bsf	121,3,c	;volatile
  6839   01151C                     
  6840                           ;color.c: 300:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6841   01151C  0E29               	movlw	41
  6842   01151E  6E4C               	movwf	(??_calibration_routine+1)^0,c
  6843   011520  0E96               	movlw	150
  6844   011522  6E4B               	movwf	??_calibration_routine^0,c
  6845   011524  0E7F               	movlw	127
  6846   011526                     u5977:
  6847   011526  2EE8               	decfsz	wreg,f,c
  6848   011528  D7FE               	bra	u5977
  6849   01152A  2E4B               	decfsz	??_calibration_routine^0,f,c
  6850   01152C  D7FC               	bra	u5977
  6851   01152E  2E4C               	decfsz	(??_calibration_routine+1)^0,f,c
  6852   011530  D7FA               	bra	u5977
  6853   011532  0000               	nop	
  6854   011534                     
  6855                           ;color.c: 301:     (cCal->blue) = color_read_Blue();
  6856   011534  EC88  F094         	call	_color_read_Blue	;wreg free
  6857   011538  EE20 F004          	lfsr	2,4
  6858   01153C  5049               	movf	calibration_routine@cCal^0,w,c
  6859   01153E  26D9               	addwf	fsr2l,f,c
  6860   011540  504A               	movf	(calibration_routine@cCal+1)^0,w,c
  6861   011542  22DA               	addwfc	fsr2h,f,c
  6862   011544  C005  FFDE         	movff	?_color_read_Blue,postinc2
  6863   011548  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  6864   01154C                     
  6865                           ;color.c: 302:     LATAbits.LATA3 = 0;
  6866   01154C  9679               	bcf	121,3,c	;volatile
  6867   01154E                     
  6868                           ;color.c: 305:     sprintf(cal_state,"Calibration state = ambient light", ".");
  6869   01154E  0E60               	movlw	low calibration_routine@cal_state
  6870   011550  6E34               	movwf	sprintf@s^0,c
  6871   011552  6A35               	clrf	(sprintf@s+1)^0,c
  6872   011554  0EE3               	movlw	low STR_14
  6873   011556  6E36               	movwf	sprintf@fmt^0,c
  6874   011558  0EFE               	movlw	high STR_14
  6875   01155A  6E37               	movwf	(sprintf@fmt+1)^0,c
  6876   01155C  0EFC               	movlw	low STR_9
  6877   01155E  6E38               	movwf	(?_sprintf+4)^0,c
  6878   011560  0EFF               	movlw	high STR_9
  6879   011562  6E39               	movwf	(?_sprintf+5)^0,c
  6880   011564  EC17  F095         	call	_sprintf	;wreg free
  6881   011568                     
  6882                           ;color.c: 306:     sendStringSerial4(&cal_state);
  6883   011568  0E60               	movlw	low calibration_routine@cal_state
  6884   01156A  6E02               	movwf	sendStringSerial4@string^0,c
  6885   01156C  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  6886   01156E  EC57  F095         	call	_sendStringSerial4	;wreg free
  6887   011572                     l126:
  6888                           
  6889                           ;color.c: 308:     while(PORTFbits.RF2 == 1){
  6890   011572  B48E               	btfsc	142,2,c	;volatile
  6891   011574  EFBE  F08A         	goto	u5741
  6892   011578  EFC0  F08A         	goto	u5740
  6893   01157C                     u5741:
  6894   01157C  EFB9  F08A         	goto	l126
  6895   011580                     u5740:
  6896   011580                     
  6897                           ;color.c: 311:     LATGbits.LATG0 = 1;
  6898   011580  807F               	bsf	127,0,c	;volatile
  6899                           
  6900                           ;color.c: 312:     LATEbits.LATE7 = 1;
  6901   011582  8E7D               	bsf	125,7,c	;volatile
  6902                           
  6903                           ;color.c: 313:     LATAbits.LATA3 = 1;
  6904   011584  8679               	bsf	121,3,c	;volatile
  6905   011586                     
  6906                           ;color.c: 314:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6907   011586  0E29               	movlw	41
  6908   011588  6E4C               	movwf	(??_calibration_routine+1)^0,c
  6909   01158A  0E96               	movlw	150
  6910   01158C  6E4B               	movwf	??_calibration_routine^0,c
  6911   01158E  0E7F               	movlw	127
  6912   011590                     u5987:
  6913   011590  2EE8               	decfsz	wreg,f,c
  6914   011592  D7FE               	bra	u5987
  6915   011594  2E4B               	decfsz	??_calibration_routine^0,f,c
  6916   011596  D7FC               	bra	u5987
  6917   011598  2E4C               	decfsz	(??_calibration_routine+1)^0,f,c
  6918   01159A  D7FA               	bra	u5987
  6919   01159C  0000               	nop	
  6920   01159E                     
  6921                           ;color.c: 315:     (cCal->clear) = color_read_Clear();
  6922   01159E  EC60  F094         	call	_color_read_Clear	;wreg free
  6923   0115A2  EE20 F006          	lfsr	2,6
  6924   0115A6  5049               	movf	calibration_routine@cCal^0,w,c
  6925   0115A8  26D9               	addwf	fsr2l,f,c
  6926   0115AA  504A               	movf	(calibration_routine@cCal+1)^0,w,c
  6927   0115AC  22DA               	addwfc	fsr2h,f,c
  6928   0115AE  C005  FFDE         	movff	?_color_read_Clear,postinc2
  6929   0115B2  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  6930   0115B6                     
  6931                           ;color.c: 316:     LATGbits.LATG0 = 0;
  6932   0115B6  907F               	bcf	127,0,c	;volatile
  6933   0115B8                     
  6934                           ;color.c: 317:     LATEbits.LATE7 = 0;
  6935   0115B8  9E7D               	bcf	125,7,c	;volatile
  6936   0115BA                     
  6937                           ;color.c: 318:     LATAbits.LATA3 = 0;
  6938   0115BA  9679               	bcf	121,3,c	;volatile
  6939   0115BC                     
  6940                           ;color.c: 321:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  6941   0115BC  0E60               	movlw	low calibration_routine@cal_state
  6942   0115BE  6E34               	movwf	sprintf@s^0,c
  6943   0115C0  6A35               	clrf	(sprintf@s+1)^0,c
  6944   0115C2  0E3D               	movlw	low STR_16
  6945   0115C4  6E36               	movwf	sprintf@fmt^0,c
  6946   0115C6  0EFF               	movlw	high STR_16
  6947   0115C8  6E37               	movwf	(sprintf@fmt+1)^0,c
  6948   0115CA  0EFC               	movlw	low STR_9
  6949   0115CC  6E38               	movwf	(?_sprintf+4)^0,c
  6950   0115CE  0EFF               	movlw	high STR_9
  6951   0115D0  6E39               	movwf	(?_sprintf+5)^0,c
  6952   0115D2  EC17  F095         	call	_sprintf	;wreg free
  6953   0115D6                     
  6954                           ;color.c: 322:     sendStringSerial4(&cal_state);
  6955   0115D6  0E60               	movlw	low calibration_routine@cal_state
  6956   0115D8  6E02               	movwf	sendStringSerial4@string^0,c
  6957   0115DA  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  6958   0115DC  EC57  F095         	call	_sendStringSerial4	;wreg free
  6959   0115E0  0012               	return		;funcret
  6960   0115E2                     __end_of_calibration_routine:
  6961                           	callstack 0
  6962                           
  6963 ;; *************** function _sprintf *****************
  6964 ;; Defined at:
  6965 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;  s               2   51[COMRAM] PTR unsigned char 
  6968 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), test@led_state(50), 
  6969 ;;		 -> convert_rgb2hue@char3(20), convert_rgb2hue@char2(20), convert_rgb2hue@char1(20), 
  6970 ;;  fmt             2   53[COMRAM] PTR const unsigned char 
  6971 ;;		 -> STR_19(12), STR_18(21), STR_16(25), STR_14(34), 
  6972 ;;		 -> STR_12(27), STR_10(29), STR_8(24), STR_7(17), 
  6973 ;;		 -> STR_6(17), STR_5(19), STR_4(17), STR_3(13), 
  6974 ;;		 -> STR_2(14), STR_1(12), 
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;  f              12   60[COMRAM] struct _IO_FILE
  6977 ;;  ret             2    0        int 
  6978 ;;  ap              1   59[COMRAM] PTR void [1]
  6979 ;;		 -> ?_sprintf(2), 
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  2   51[COMRAM] int 
  6982 ;; Registers used:
  6983 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6989 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6990 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6992 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6993 ;;Total ram usage:       21 bytes
  6994 ;; Hardware stack levels used: 1
  6995 ;; Hardware stack levels required when called: 7
  6996 ;; This function calls:
  6997 ;;		_vfprintf
  6998 ;; This function is called by:
  6999 ;;		_convert_rgb2hue
  7000 ;;		_test
  7001 ;;		_calibration_routine
  7002 ;;		_send2USART
  7003 ;;		_ADC2String
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	text30
  7008   012A2E                     __ptext30:
  7009                           	callstack 0
  7010   012A2E                     _sprintf:
  7011                           	callstack 22
  7012   012A2E  0E38               	movlw	low (?_sprintf+4)
  7013   012A30  6E3C               	movwf	sprintf@ap^0,c
  7014   012A32  C034  F03D         	movff	sprintf@s,sprintf@f
  7015   012A36  C035  F03E         	movff	sprintf@s+1,sprintf@f+1
  7016   012A3A  0E00               	movlw	0
  7017   012A3C  6E41               	movwf	(sprintf@f+4)^0,c
  7018   012A3E  0E00               	movlw	0
  7019   012A40  6E40               	movwf	(sprintf@f+3)^0,c
  7020   012A42  0E00               	movlw	0
  7021   012A44  6E48               	movwf	(sprintf@f+11)^0,c
  7022   012A46  0E00               	movlw	0
  7023   012A48  6E47               	movwf	(sprintf@f+10)^0,c
  7024   012A4A  0E3D               	movlw	low sprintf@f
  7025   012A4C  6E2E               	movwf	vfprintf@fp^0,c
  7026   012A4E  C036  F02F         	movff	sprintf@fmt,vfprintf@fmt
  7027   012A52  C037  F030         	movff	sprintf@fmt+1,vfprintf@fmt+1
  7028   012A56  0E3C               	movlw	low sprintf@ap
  7029   012A58  6E31               	movwf	vfprintf@ap^0,c
  7030   012A5A  ECD3  F094         	call	_vfprintf	;wreg free
  7031   012A5E  5040               	movf	(sprintf@f+3)^0,w,c
  7032   012A60  2434               	addwf	sprintf@s^0,w,c
  7033   012A62  6ED9               	movwf	fsr2l,c
  7034   012A64  5041               	movf	(sprintf@f+4)^0,w,c
  7035   012A66  2035               	addwfc	(sprintf@s+1)^0,w,c
  7036   012A68  6EDA               	movwf	fsr2h,c
  7037   012A6A  6ADF               	clrf	indf2,c
  7038   012A6C  0012               	return		;funcret
  7039   012A6E                     __end_of_sprintf:
  7040                           	callstack 0
  7041                           
  7042 ;; *************** function _vfprintf *****************
  7043 ;; Defined at:
  7044 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  7047 ;;		 -> sprintf@f(12), 
  7048 ;;  fmt             2   46[COMRAM] PTR const unsigned char 
  7049 ;;		 -> STR_19(12), STR_18(21), STR_16(25), STR_14(34), 
  7050 ;;		 -> STR_12(27), STR_10(29), STR_8(24), STR_7(17), 
  7051 ;;		 -> STR_6(17), STR_5(19), STR_4(17), STR_3(13), 
  7052 ;;		 -> STR_2(14), STR_1(12), 
  7053 ;;  ap              1   48[COMRAM] PTR PTR void 
  7054 ;;		 -> sprintf@ap(1), 
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;  cfmt            2   49[COMRAM] PTR unsigned char 
  7057 ;;		 -> STR_19(12), STR_18(21), STR_16(25), STR_14(34), 
  7058 ;;		 -> STR_12(27), STR_10(29), STR_8(24), STR_7(17), 
  7059 ;;		 -> STR_6(17), STR_5(19), STR_4(17), STR_3(13), 
  7060 ;;		 -> STR_2(14), STR_1(12), 
  7061 ;; Return value:  Size  Location     Type
  7062 ;;                  2   45[COMRAM] int 
  7063 ;; Registers used:
  7064 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7065 ;; Tracked objects:
  7066 ;;		On entry : 0/0
  7067 ;;		On exit  : 0/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7070 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7073 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7074 ;;Total ram usage:        6 bytes
  7075 ;; Hardware stack levels used: 1
  7076 ;; Hardware stack levels required when called: 6
  7077 ;; This function calls:
  7078 ;;		_vfpfcnvrt
  7079 ;; This function is called by:
  7080 ;;		_sprintf
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           	psect	text31
  7085   0129A6                     __ptext31:
  7086                           	callstack 0
  7087   0129A6                     _vfprintf:
  7088                           	callstack 22
  7089   0129A6                     
  7090                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  7091   0129A6  C02F  F032         	movff	vfprintf@fmt,vfprintf@cfmt
  7092   0129AA  C030  F033         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  7093                           
  7094                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  7095   0129AE  EFE1  F094         	goto	l5123
  7096   0129B2                     l5121:
  7097                           
  7098                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  7099   0129B2  C02E  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  7100   0129B6  0E32               	movlw	low vfprintf@cfmt
  7101   0129B8  6E23               	movwf	vfpfcnvrt@fmt^0,c
  7102   0129BA  C031  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  7103   0129BE  ECA7  F08C         	call	_vfpfcnvrt	;wreg free
  7104   0129C2                     l5123:
  7105                           
  7106                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  7107   0129C2  C032  FFF6         	movff	vfprintf@cfmt,tblptrl
  7108   0129C6  C033  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  7109   0129CA                     	if	0	;tblptru may be non-zero
  7110   0129CA                     	endif
  7111   0129CA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7112   0129CA  0E00               	movlw	low (__mediumconst shr (0+16))
  7113   0129CC  6EF8               	movwf	tblptru,c
  7114   0129CE                     	endif
  7115   0129CE  0008               	tblrd		*
  7116   0129D0  50F5               	movf	tablat,w,c
  7117   0129D2  0900               	iorlw	0
  7118   0129D4  A4D8               	btfss	status,2,c
  7119   0129D6  EFEF  F094         	goto	u4861
  7120   0129DA  EFF1  F094         	goto	u4860
  7121   0129DE                     u4861:
  7122   0129DE  EFD9  F094         	goto	l5121
  7123   0129E2                     u4860:
  7124   0129E2                     
  7125                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  7126   0129E2  0E00               	movlw	0
  7127   0129E4  6E2F               	movwf	(?_vfprintf+1)^0,c
  7128   0129E6  0E00               	movlw	0
  7129   0129E8  6E2E               	movwf	?_vfprintf^0,c
  7130   0129EA  0012               	return		;funcret
  7131   0129EC                     __end_of_vfprintf:
  7132                           	callstack 0
  7133                           
  7134 ;; *************** function _vfpfcnvrt *****************
  7135 ;; Defined at:
  7136 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  7139 ;;		 -> sprintf@f(12), 
  7140 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  7141 ;;		 -> vfprintf@cfmt(2), 
  7142 ;;  ap              1   35[COMRAM] PTR PTR void 
  7143 ;;		 -> sprintf@ap(1), 
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;  convarg         4   38[COMRAM] struct .
  7146 ;;  cp              2   43[COMRAM] PTR unsigned char 
  7147 ;;		 -> STR_19(12), STR_18(21), STR_16(25), STR_14(34), 
  7148 ;;		 -> STR_12(27), STR_10(29), STR_8(24), STR_7(17), 
  7149 ;;		 -> STR_6(17), STR_5(19), STR_4(17), STR_3(13), 
  7150 ;;		 -> STR_2(14), STR_1(12), 
  7151 ;;  done            1   42[COMRAM] _Bool 
  7152 ;;  c               1    0        unsigned char 
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      void 
  7155 ;; Registers used:
  7156 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7162 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7163 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7164 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7165 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7166 ;;Total ram usage:       12 bytes
  7167 ;; Hardware stack levels used: 1
  7168 ;; Hardware stack levels required when called: 5
  7169 ;; This function calls:
  7170 ;;		_dtoa
  7171 ;;		_fputc
  7172 ;;		_read_prec_or_width
  7173 ;; This function is called by:
  7174 ;;		_vfprintf
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           	psect	text32
  7179   01194E                     __ptext32:
  7180                           	callstack 0
  7181   01194E                     _vfpfcnvrt:
  7182                           	callstack 22
  7183   01194E                     
  7184                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  7185   01194E  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7186   011950  6ED9               	movwf	fsr2l,c
  7187   011952  6ADA               	clrf	fsr2h,c
  7188   011954  CFDE FFF6          	movff	postinc2,tblptrl
  7189   011958  CFDD FFF7          	movff	postdec2,tblptrh
  7190   01195C                     	if	0	;tblptru may be non-zero
  7191   01195C                     	endif
  7192   01195C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7193   01195C  0E00               	movlw	low (__mediumconst shr (0+16))
  7194   01195E  6EF8               	movwf	tblptru,c
  7195   011960                     	endif
  7196   011960  0008               	tblrd		*
  7197   011962  50F5               	movf	tablat,w,c
  7198   011964  0A25               	xorlw	37
  7199   011966  A4D8               	btfss	status,2,c
  7200   011968  EFB8  F08C         	goto	u4321
  7201   01196C  EFBA  F08C         	goto	u4320
  7202   011970                     u4321:
  7203   011970  EF67  F08D         	goto	l4811
  7204   011974                     u4320:
  7205   011974                     
  7206                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  7207   011974  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7208   011976  6ED9               	movwf	fsr2l,c
  7209   011978  6ADA               	clrf	fsr2h,c
  7210   01197A  2ADE               	incf	postinc2,f,c
  7211   01197C  0E00               	movlw	0
  7212   01197E  22DD               	addwfc	postdec2,f,c
  7213   011980                     
  7214                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  7215   011980  0E00               	movlw	0
  7216   011982  0100               	movlb	0	; () banked
  7217   011984  6FE1               	movwf	(_width+1)& (0+255),b
  7218   011986  0E00               	movlw	0
  7219   011988  6FE0               	movwf	_width& (0+255),b
  7220   01198A  C0E0  F0E4         	movff	_width,_flags
  7221   01198E                     
  7222                           ; BSR set to: 0
  7223                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  7224   01198E  69E2               	setf	_prec& (0+255),b
  7225   011990  69E3               	setf	(_prec+1)& (0+255),b
  7226   011992                     
  7227                           ; BSR set to: 0
  7228                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  7229   011992  0E00               	movlw	0
  7230   011994  6E2B               	movwf	vfpfcnvrt@done^0,c
  7231                           
  7232                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  7233   011996  EFF6  F08C         	goto	l4785
  7234   01199A                     l4775:
  7235                           
  7236                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  7237   01199A  0100               	movlb	0	; () banked
  7238   01199C  83E4               	bsf	_flags& (0+255),1,b
  7239   01199E                     
  7240                           ; BSR set to: 0
  7241                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  7242   01199E  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7243   0119A0  6ED9               	movwf	fsr2l,c
  7244   0119A2  6ADA               	clrf	fsr2h,c
  7245   0119A4  2ADE               	incf	postinc2,f,c
  7246   0119A6  0E00               	movlw	0
  7247   0119A8  22DD               	addwfc	postdec2,f,c
  7248                           
  7249                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  7250   0119AA  EFF6  F08C         	goto	l4785
  7251   0119AE                     l4779:
  7252                           
  7253                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  7254   0119AE  0E01               	movlw	1
  7255   0119B0  6E2B               	movwf	vfpfcnvrt@done^0,c
  7256                           
  7257                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  7258   0119B2  EFF6  F08C         	goto	l4785
  7259   0119B6                     l4783:
  7260   0119B6  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7261   0119B8  6ED9               	movwf	fsr2l,c
  7262   0119BA  6ADA               	clrf	fsr2h,c
  7263   0119BC  CFDE FFF6          	movff	postinc2,tblptrl
  7264   0119C0  CFDD FFF7          	movff	postdec2,tblptrh
  7265   0119C4                     	if	0	;tblptru may be non-zero
  7266   0119C4                     	endif
  7267   0119C4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7268   0119C4  0E00               	movlw	low (__mediumconst shr (0+16))
  7269   0119C6  6EF8               	movwf	tblptru,c
  7270   0119C8                     	endif
  7271   0119C8  0008               	tblrd		*
  7272   0119CA  50F5               	movf	tablat,w,c
  7273   0119CC  6E25               	movwf	??_vfpfcnvrt^0,c
  7274   0119CE  6A26               	clrf	(??_vfpfcnvrt+1)^0,c
  7275                           
  7276                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7277                           ; Switch size 1, requested type "simple"
  7278                           ; Number of cases is 1, Range of values is 0 to 0
  7279                           ; switch strategies available:
  7280                           ; Name         Instructions Cycles
  7281                           ; simple_byte            4     3 (average)
  7282                           ;	Chosen strategy is simple_byte
  7283   0119D0  5026               	movf	(??_vfpfcnvrt+1)^0,w,c
  7284   0119D2  0A00               	xorlw	0	; case 0
  7285   0119D4  B4D8               	btfsc	status,2,c
  7286   0119D6  EFEF  F08C         	goto	l6081
  7287   0119DA  EFD7  F08C         	goto	l4779
  7288   0119DE                     l6081:
  7289                           
  7290                           ; Switch size 1, requested type "simple"
  7291                           ; Number of cases is 1, Range of values is 48 to 48
  7292                           ; switch strategies available:
  7293                           ; Name         Instructions Cycles
  7294                           ; simple_byte            4     3 (average)
  7295                           ;	Chosen strategy is simple_byte
  7296   0119DE  5025               	movf	??_vfpfcnvrt^0,w,c
  7297   0119E0  0A30               	xorlw	48	; case 48
  7298   0119E2  B4D8               	btfsc	status,2,c
  7299   0119E4  EFCD  F08C         	goto	l4775
  7300   0119E8  EFD7  F08C         	goto	l4779
  7301   0119EC                     l4785:
  7302                           
  7303                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  7304   0119EC  502B               	movf	vfpfcnvrt@done^0,w,c
  7305   0119EE  B4D8               	btfsc	status,2,c
  7306   0119F0  EFFC  F08C         	goto	u4331
  7307   0119F4  EFFE  F08C         	goto	u4330
  7308   0119F8                     u4331:
  7309   0119F8  EFDB  F08C         	goto	l4783
  7310   0119FC                     u4330:
  7311   0119FC                     
  7312                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  7313   0119FC  C023  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  7314   011A00  C024  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  7315   011A04  EC0D  F091         	call	_read_prec_or_width	;wreg free
  7316   011A08  C007  F0E0         	movff	?_read_prec_or_width,_width
  7317   011A0C  C008  F0E1         	movff	?_read_prec_or_width+1,_width+1
  7318   011A10                     
  7319                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  7320   011A10  0100               	movlb	0	; () banked
  7321   011A12  BFE1               	btfsc	(_width+1)& (0+255),7,b
  7322   011A14  EF10  F08D         	goto	u4340
  7323   011A18  EF0E  F08D         	goto	u4341
  7324   011A1C                     u4341:
  7325   011A1C  EF15  F08D         	goto	l4793
  7326   011A20                     u4340:
  7327   011A20                     
  7328                           ; BSR set to: 0
  7329                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  7330   011A20  81E4               	bsf	_flags& (0+255),0,b
  7331                           
  7332                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  7333   011A22  6DE0               	negf	_width& (0+255),b
  7334   011A24  1FE1               	comf	(_width+1)& (0+255),f,b
  7335   011A26  B0D8               	btfsc	status,0,c
  7336   011A28  2BE1               	incf	(_width+1)& (0+255),f,b
  7337   011A2A                     l4793:
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  7341   011A2A  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7342   011A2C  6ED9               	movwf	fsr2l,c
  7343   011A2E  6ADA               	clrf	fsr2h,c
  7344   011A30  CFDE F02C          	movff	postinc2,vfpfcnvrt@cp
  7345   011A34  CFDD F02D          	movff	postdec2,vfpfcnvrt@cp+1
  7346   011A38                     
  7347                           ; BSR set to: 0
  7348                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  7349   011A38  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  7350   011A3C  C02D  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  7351   011A40                     	if	0	;tblptru may be non-zero
  7352   011A40                     	endif
  7353   011A40                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7354   011A40  0E00               	movlw	low (__mediumconst shr (0+16))
  7355   011A42  6EF8               	movwf	tblptru,c
  7356   011A44                     	endif
  7357   011A44  0008               	tblrd		*
  7358   011A46  50F5               	movf	tablat,w,c
  7359   011A48  0A64               	xorlw	100
  7360   011A4A  B4D8               	btfsc	status,2,c
  7361   011A4C  EF2A  F08D         	goto	u4351
  7362   011A50  EF2C  F08D         	goto	u4350
  7363   011A54                     u4351:
  7364   011A54  EF3C  F08D         	goto	l4799
  7365   011A58                     u4350:
  7366   011A58                     
  7367                           ; BSR set to: 0
  7368   011A58  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  7369   011A5C  C02D  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  7370   011A60                     	if	0	;tblptru may be non-zero
  7371   011A60                     	endif
  7372   011A60                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7373   011A60  0E00               	movlw	low (__mediumconst shr (0+16))
  7374   011A62  6EF8               	movwf	tblptru,c
  7375   011A64                     	endif
  7376   011A64  0008               	tblrd		*
  7377   011A66  50F5               	movf	tablat,w,c
  7378   011A68  0A69               	xorlw	105
  7379   011A6A  A4D8               	btfss	status,2,c
  7380   011A6C  EF3A  F08D         	goto	u4361
  7381   011A70  EF3C  F08D         	goto	u4360
  7382   011A74                     u4361:
  7383   011A74  EF5F  F08D         	goto	l4807
  7384   011A78                     u4360:
  7385   011A78                     l4799:
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  7389   011A78  5024               	movf	vfpfcnvrt@ap^0,w,c
  7390   011A7A  6ED9               	movwf	fsr2l,c
  7391   011A7C  6ADA               	clrf	fsr2h,c
  7392   011A7E  0E02               	movlw	2
  7393   011A80  26DF               	addwf	indf2,f,c
  7394   011A82  5CDF               	subwf	indf2,w,c
  7395   011A84  6ED9               	movwf	fsr2l,c
  7396   011A86  6ADA               	clrf	fsr2h,c
  7397   011A88  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  7398   011A8C  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  7399   011A90                     
  7400                           ; BSR set to: 0
  7401                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  7402   011A90  0E01               	movlw	1
  7403   011A92  242C               	addwf	vfpfcnvrt@cp^0,w,c
  7404   011A94  6E25               	movwf	??_vfpfcnvrt^0,c
  7405   011A96  0E00               	movlw	0
  7406   011A98  202D               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  7407   011A9A  6E26               	movwf	(??_vfpfcnvrt+1)^0,c
  7408   011A9C  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7409   011A9E  6ED9               	movwf	fsr2l,c
  7410   011AA0  6ADA               	clrf	fsr2h,c
  7411   011AA2  C025  FFDE         	movff	??_vfpfcnvrt,postinc2
  7412   011AA6  C026  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  7413   011AAA                     
  7414                           ; BSR set to: 0
  7415                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  7416   011AAA  C022  F017         	movff	vfpfcnvrt@fp,dtoa@fp
  7417   011AAE  C027  F018         	movff	vfpfcnvrt@convarg,dtoa@d
  7418   011AB2  C028  F019         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  7419   011AB6  EC7B  F08D         	call	_dtoa	;wreg free
  7420   011ABA  EF7A  F08D         	goto	l1279
  7421   011ABE                     l4807:
  7422                           
  7423                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  7424   011ABE  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7425   011AC0  6ED9               	movwf	fsr2l,c
  7426   011AC2  6ADA               	clrf	fsr2h,c
  7427   011AC4  2ADE               	incf	postinc2,f,c
  7428   011AC6  0E00               	movlw	0
  7429   011AC8  22DD               	addwfc	postdec2,f,c
  7430   011ACA  EF7A  F08D         	goto	l1279
  7431   011ACE                     l4811:
  7432                           
  7433                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  7434   011ACE  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7435   011AD0  6ED9               	movwf	fsr2l,c
  7436   011AD2  6ADA               	clrf	fsr2h,c
  7437   011AD4  CFDE FFF6          	movff	postinc2,tblptrl
  7438   011AD8  CFDD FFF7          	movff	postdec2,tblptrh
  7439   011ADC                     	if	0	;tblptru may be non-zero
  7440   011ADC                     	endif
  7441   011ADC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7442   011ADC  0E00               	movlw	low (__mediumconst shr (0+16))
  7443   011ADE  6EF8               	movwf	tblptru,c
  7444   011AE0                     	endif
  7445   011AE0  0008               	tblrd		*
  7446   011AE2  50F5               	movf	tablat,w,c
  7447   011AE4  6E01               	movwf	fputc@c^0,c
  7448   011AE6  6A02               	clrf	(fputc@c+1)^0,c
  7449   011AE8  C022  F003         	movff	vfpfcnvrt@fp,fputc@fp
  7450   011AEC  ECB0  F090         	call	_fputc	;wreg free
  7451   011AF0  EF5F  F08D         	goto	l4807
  7452   011AF4                     l1279:
  7453   011AF4  0012               	return		;funcret
  7454   011AF6                     __end_of_vfpfcnvrt:
  7455                           	callstack 0
  7456                           
  7457 ;; *************** function _read_prec_or_width *****************
  7458 ;; Defined at:
  7459 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  7462 ;;		 -> vfprintf@cfmt(2), 
  7463 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  7464 ;;		 -> sprintf@ap(1), 
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  c               1    8[COMRAM] unsigned char 
  7467 ;;  n               2    9[COMRAM] int 
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  2    6[COMRAM] int 
  7470 ;; Registers used:
  7471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7477 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7478 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7480 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7481 ;;Total ram usage:        5 bytes
  7482 ;; Hardware stack levels used: 1
  7483 ;; Hardware stack levels required when called: 1
  7484 ;; This function calls:
  7485 ;;		___wmul
  7486 ;; This function is called by:
  7487 ;;		_vfpfcnvrt
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491                           	psect	text33
  7492   01221A                     __ptext33:
  7493                           	callstack 0
  7494   01221A                     _read_prec_or_width:
  7495                           	callstack 25
  7496   01221A                     
  7497                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  7498   01221A  0E00               	movlw	0
  7499   01221C  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  7500   01221E  0E00               	movlw	0
  7501   012220  6E0A               	movwf	read_prec_or_width@n^0,c
  7502   012222                     
  7503                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  7504   012222  5007               	movf	read_prec_or_width@fmt^0,w,c
  7505   012224  6ED9               	movwf	fsr2l,c
  7506   012226  6ADA               	clrf	fsr2h,c
  7507   012228  CFDE FFF6          	movff	postinc2,tblptrl
  7508   01222C  CFDD FFF7          	movff	postdec2,tblptrh
  7509   012230                     	if	0	;tblptru may be non-zero
  7510   012230                     	endif
  7511   012230                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7512   012230  0E00               	movlw	low (__mediumconst shr (0+16))
  7513   012232  6EF8               	movwf	tblptru,c
  7514   012234                     	endif
  7515   012234  0008               	tblrd		*
  7516   012236  50F5               	movf	tablat,w,c
  7517   012238  0A2A               	xorlw	42
  7518   01223A  A4D8               	btfss	status,2,c
  7519   01223C  EF22  F091         	goto	u4281
  7520   012240  EF24  F091         	goto	u4280
  7521   012244                     u4281:
  7522   012244  EF4E  F091         	goto	l4747
  7523   012248                     u4280:
  7524   012248                     
  7525                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  7526   012248  5007               	movf	read_prec_or_width@fmt^0,w,c
  7527   01224A  6ED9               	movwf	fsr2l,c
  7528   01224C  6ADA               	clrf	fsr2h,c
  7529   01224E  2ADE               	incf	postinc2,f,c
  7530   012250  0E00               	movlw	0
  7531   012252  22DD               	addwfc	postdec2,f,c
  7532   012254                     
  7533                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  7534   012254  5008               	movf	read_prec_or_width@ap^0,w,c
  7535   012256  6ED9               	movwf	fsr2l,c
  7536   012258  6ADA               	clrf	fsr2h,c
  7537   01225A  0E02               	movlw	2
  7538   01225C  26DF               	addwf	indf2,f,c
  7539   01225E  5CDF               	subwf	indf2,w,c
  7540   012260  6ED9               	movwf	fsr2l,c
  7541   012262  6ADA               	clrf	fsr2h,c
  7542   012264  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  7543   012268  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  7544                           
  7545                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  7546   01226C  EF63  F091         	goto	l1260
  7547   012270                     l4743:
  7548                           
  7549                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  7550   012270  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  7551   012274  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  7552   012278  0E00               	movlw	0
  7553   01227A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  7554   01227C  0E0A               	movlw	10
  7555   01227E  6E03               	movwf	___wmul@multiplicand^0,c
  7556   012280  EC77  F096         	call	___wmul	;wreg free
  7557   012284  5009               	movf	read_prec_or_width@c^0,w,c
  7558   012286  2401               	addwf	?___wmul^0,w,c
  7559   012288  6E0A               	movwf	read_prec_or_width@n^0,c
  7560   01228A  0E00               	movlw	0
  7561   01228C  2002               	addwfc	(?___wmul+1)^0,w,c
  7562   01228E  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  7563   012290                     
  7564                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  7565   012290  5007               	movf	read_prec_or_width@fmt^0,w,c
  7566   012292  6ED9               	movwf	fsr2l,c
  7567   012294  6ADA               	clrf	fsr2h,c
  7568   012296  2ADE               	incf	postinc2,f,c
  7569   012298  0E00               	movlw	0
  7570   01229A  22DD               	addwfc	postdec2,f,c
  7571   01229C                     l4747:
  7572                           
  7573                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  7574   01229C  5007               	movf	read_prec_or_width@fmt^0,w,c
  7575   01229E  6ED9               	movwf	fsr2l,c
  7576   0122A0  6ADA               	clrf	fsr2h,c
  7577   0122A2  CFDE FFF6          	movff	postinc2,tblptrl
  7578   0122A6  CFDD FFF7          	movff	postdec2,tblptrh
  7579   0122AA                     	if	0	;tblptru may be non-zero
  7580   0122AA                     	endif
  7581   0122AA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7582   0122AA  0E00               	movlw	low (__mediumconst shr (0+16))
  7583   0122AC  6EF8               	movwf	tblptru,c
  7584   0122AE                     	endif
  7585   0122AE  0008               	tblrd		*
  7586   0122B0  50F5               	movf	tablat,w,c
  7587   0122B2  0FD0               	addlw	208
  7588   0122B4  6E09               	movwf	read_prec_or_width@c^0,c
  7589   0122B6  0E09               	movlw	9
  7590   0122B8  6409               	cpfsgt	read_prec_or_width@c^0,c
  7591   0122BA  EF61  F091         	goto	u4291
  7592   0122BE  EF63  F091         	goto	u4290
  7593   0122C2                     u4291:
  7594   0122C2  EF38  F091         	goto	l4743
  7595   0122C6                     u4290:
  7596   0122C6                     l1260:
  7597                           
  7598                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  7599   0122C6  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  7600   0122CA  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  7601   0122CE  0012               	return		;funcret
  7602   0122D0                     __end_of_read_prec_or_width:
  7603                           	callstack 0
  7604                           
  7605 ;; *************** function ___wmul *****************
  7606 ;; Defined at:
  7607 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;  multiplier      2    0[COMRAM] unsigned int 
  7610 ;;  multiplicand    2    2[COMRAM] unsigned int 
  7611 ;; Auto vars:     Size  Location     Type
  7612 ;;  product         2    4[COMRAM] unsigned int 
  7613 ;; Return value:  Size  Location     Type
  7614 ;;                  2    0[COMRAM] unsigned int 
  7615 ;; Registers used:
  7616 ;;		wreg, status,2, status,0, prodl, prodh
  7617 ;; Tracked objects:
  7618 ;;		On entry : 0/0
  7619 ;;		On exit  : 0/0
  7620 ;;		Unchanged: 0/0
  7621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7622 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7623 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7625 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7626 ;;Total ram usage:        6 bytes
  7627 ;; Hardware stack levels used: 1
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		_setMotorPWM
  7632 ;;		_read_prec_or_width
  7633 ;;		_ADC2String
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           	psect	text34
  7638   012CEE                     __ptext34:
  7639                           	callstack 0
  7640   012CEE                     ___wmul:
  7641                           	callstack 25
  7642   012CEE  5001               	movf	___wmul@multiplier^0,w,c
  7643   012CF0  0203               	mulwf	___wmul@multiplicand^0,c
  7644   012CF2  CFF3 F005          	movff	prodl,___wmul@product
  7645   012CF6  CFF4 F006          	movff	prodh,___wmul@product+1
  7646   012CFA  5001               	movf	___wmul@multiplier^0,w,c
  7647   012CFC  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  7648   012CFE  50F3               	movf	243,w,c
  7649   012D00  2606               	addwf	(___wmul@product+1)^0,f,c
  7650   012D02  5002               	movf	(___wmul@multiplier+1)^0,w,c
  7651   012D04  0203               	mulwf	___wmul@multiplicand^0,c
  7652   012D06  50F3               	movf	243,w,c
  7653   012D08  2606               	addwf	(___wmul@product+1)^0,f,c
  7654   012D0A  C005  F001         	movff	___wmul@product,?___wmul
  7655   012D0E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  7656   012D12  0012               	return		;funcret
  7657   012D14                     __end_of___wmul:
  7658                           	callstack 0
  7659                           
  7660 ;; *************** function _dtoa *****************
  7661 ;; Defined at:
  7662 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  7665 ;;		 -> sprintf@f(12), 
  7666 ;;  d               2   23[COMRAM] int 
  7667 ;; Auto vars:     Size  Location     Type
  7668 ;;  i               2   31[COMRAM] int 
  7669 ;;  w               2   28[COMRAM] int 
  7670 ;;  s               1   30[COMRAM] unsigned char 
  7671 ;;  p               1   27[COMRAM] _Bool 
  7672 ;; Return value:  Size  Location     Type
  7673 ;;                  1    wreg      void 
  7674 ;; Registers used:
  7675 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7681 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7682 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7684 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7685 ;;Total ram usage:       11 bytes
  7686 ;; Hardware stack levels used: 1
  7687 ;; Hardware stack levels required when called: 4
  7688 ;; This function calls:
  7689 ;;		___awdiv
  7690 ;;		___awmod
  7691 ;;		_abs
  7692 ;;		_pad
  7693 ;; This function is called by:
  7694 ;;		_vfpfcnvrt
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           	psect	text35
  7699   011AF6                     __ptext35:
  7700                           	callstack 0
  7701   011AF6                     _dtoa:
  7702                           	callstack 22
  7703   011AF6                     
  7704                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  7705   011AF6  0E01               	movlw	1
  7706   011AF8  6E1C               	movwf	dtoa@p^0,c
  7707   011AFA                     
  7708                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  7709   011AFA  BE19               	btfsc	(dtoa@d+1)^0,7,c
  7710   011AFC  EF82  F08D         	goto	u4181
  7711   011B00  EF85  F08D         	goto	u4180
  7712   011B04                     u4181:
  7713   011B04  0E01               	movlw	1
  7714   011B06  EF86  F08D         	goto	u4190
  7715   011B0A                     u4180:
  7716   011B0A  0E00               	movlw	0
  7717   011B0C                     u4190:
  7718   011B0C  6E1F               	movwf	dtoa@s^0,c
  7719   011B0E                     
  7720                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  7721   011B0E  C0E0  F01D         	movff	_width,dtoa@w
  7722   011B12  C0E1  F01E         	movff	_width+1,dtoa@w+1
  7723   011B16                     
  7724                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  7725   011B16  501F               	movf	dtoa@s^0,w,c
  7726   011B18  B4D8               	btfsc	status,2,c
  7727   011B1A  EF91  F08D         	goto	u4201
  7728   011B1E  EF93  F08D         	goto	u4200
  7729   011B22                     u4201:
  7730   011B22  EFAA  F08D         	goto	l1243
  7731   011B26                     u4200:
  7732   011B26                     
  7733                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  7734   011B26  061D               	decf	dtoa@w^0,f,c
  7735   011B28  A0D8               	btfss	status,0,c
  7736   011B2A  061E               	decf	(dtoa@w+1)^0,f,c
  7737   011B2C                     
  7738                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  7739   011B2C  501F               	movf	dtoa@s^0,w,c
  7740   011B2E  A4D8               	btfss	status,2,c
  7741   011B30  EF9C  F08D         	goto	u4211
  7742   011B34  EF9E  F08D         	goto	u4210
  7743   011B38                     u4211:
  7744   011B38  EFA4  F08D         	goto	l4699
  7745   011B3C                     u4210:
  7746   011B3C  0E00               	movlw	0
  7747   011B3E  6E1B               	movwf	(_dtoa$2623+1)^0,c
  7748   011B40  0E2B               	movlw	43
  7749   011B42  6E1A               	movwf	_dtoa$2623^0,c
  7750   011B44  EFA8  F08D         	goto	l4701
  7751   011B48                     l4699:
  7752   011B48  0E00               	movlw	0
  7753   011B4A  6E1B               	movwf	(_dtoa$2623+1)^0,c
  7754   011B4C  0E2D               	movlw	45
  7755   011B4E  6E1A               	movwf	_dtoa$2623^0,c
  7756   011B50                     l4701:
  7757   011B50  C01A  F01F         	movff	_dtoa$2623,dtoa@s
  7758   011B54                     l1243:
  7759                           
  7760                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  7761   011B54  0E00               	movlw	0
  7762   011B56  6E21               	movwf	(dtoa@i+1)^0,c
  7763   011B58  0E1F               	movlw	31
  7764   011B5A  6E20               	movwf	dtoa@i^0,c
  7765   011B5C                     
  7766                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  7767   011B5C  0E00               	movlw	0
  7768   011B5E  0101               	movlb	1	; () banked
  7769   011B60  6F8B               	movwf	(_dbuf+31)& (0+255),b
  7770                           
  7771                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  7772   011B62  EFE2  F08D         	goto	l4715
  7773   011B66                     l4705:
  7774                           
  7775                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  7776   011B66  0620               	decf	dtoa@i^0,f,c
  7777   011B68  A0D8               	btfss	status,0,c
  7778   011B6A  0621               	decf	(dtoa@i+1)^0,f,c
  7779   011B6C                     
  7780                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  7781   011B6C  0E6C               	movlw	low _dbuf
  7782   011B6E  2420               	addwf	dtoa@i^0,w,c
  7783   011B70  6ED9               	movwf	fsr2l,c
  7784   011B72  0E01               	movlw	high _dbuf
  7785   011B74  2021               	addwfc	(dtoa@i+1)^0,w,c
  7786   011B76  6EDA               	movwf	fsr2h,c
  7787   011B78  C018  F001         	movff	dtoa@d,___awmod@dividend
  7788   011B7C  C019  F002         	movff	dtoa@d+1,___awmod@dividend+1
  7789   011B80  0E00               	movlw	0
  7790   011B82  6E04               	movwf	(___awmod@divisor+1)^0,c
  7791   011B84  0E0A               	movlw	10
  7792   011B86  6E03               	movwf	___awmod@divisor^0,c
  7793   011B88  EC68  F091         	call	___awmod	;wreg free
  7794   011B8C  C001  F007         	movff	?___awmod,abs@a
  7795   011B90  C002  F008         	movff	?___awmod+1,abs@a+1
  7796   011B94  EC8D  F095         	call	_abs	;wreg free
  7797   011B98  5007               	movf	?_abs^0,w,c
  7798   011B9A  0F30               	addlw	48
  7799   011B9C  6EDF               	movwf	indf2,c
  7800   011B9E                     
  7801                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  7802   011B9E  0E00               	movlw	0
  7803   011BA0  6E1C               	movwf	dtoa@p^0,c
  7804   011BA2                     
  7805                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  7806   011BA2  061D               	decf	dtoa@w^0,f,c
  7807   011BA4  A0D8               	btfss	status,0,c
  7808   011BA6  061E               	decf	(dtoa@w+1)^0,f,c
  7809   011BA8                     
  7810                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  7811   011BA8  C018  F001         	movff	dtoa@d,___awdiv@dividend
  7812   011BAC  C019  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  7813   011BB0  0E00               	movlw	0
  7814   011BB2  6E04               	movwf	(___awdiv@divisor+1)^0,c
  7815   011BB4  0E0A               	movlw	10
  7816   011BB6  6E03               	movwf	___awdiv@divisor^0,c
  7817   011BB8  EC4E  F090         	call	___awdiv	;wreg free
  7818   011BBC  C001  F018         	movff	?___awdiv,dtoa@d
  7819   011BC0  C002  F019         	movff	?___awdiv+1,dtoa@d+1
  7820   011BC4                     l4715:
  7821                           
  7822                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  7823   011BC4  BE21               	btfsc	(dtoa@i+1)^0,7,c
  7824   011BC6  EFED  F08D         	goto	u4221
  7825   011BCA  5021               	movf	(dtoa@i+1)^0,w,c
  7826   011BCC  E108               	bnz	u4220
  7827   011BCE  0420               	decf	dtoa@i^0,w,c
  7828   011BD0  A0D8               	btfss	status,0,c
  7829   011BD2  EFED  F08D         	goto	u4221
  7830   011BD6  EFEF  F08D         	goto	u4220
  7831   011BDA                     u4221:
  7832   011BDA  EF15  F08E         	goto	l4725
  7833   011BDE                     u4220:
  7834   011BDE  5018               	movf	dtoa@d^0,w,c
  7835   011BE0  1019               	iorwf	(dtoa@d+1)^0,w,c
  7836   011BE2  A4D8               	btfss	status,2,c
  7837   011BE4  EFF6  F08D         	goto	u4231
  7838   011BE8  EFF8  F08D         	goto	u4230
  7839   011BEC                     u4231:
  7840   011BEC  EFB3  F08D         	goto	l4705
  7841   011BF0                     u4230:
  7842   011BF0  501C               	movf	dtoa@p^0,w,c
  7843   011BF2  A4D8               	btfss	status,2,c
  7844   011BF4  EFFE  F08D         	goto	u4241
  7845   011BF8  EF00  F08E         	goto	u4240
  7846   011BFC                     u4241:
  7847   011BFC  EFB3  F08D         	goto	l4705
  7848   011C00                     u4240:
  7849   011C00  BE1E               	btfsc	(dtoa@w+1)^0,7,c
  7850   011C02  EF0B  F08E         	goto	u4251
  7851   011C06  501E               	movf	(dtoa@w+1)^0,w,c
  7852   011C08  E108               	bnz	u4250
  7853   011C0A  041D               	decf	dtoa@w^0,w,c
  7854   011C0C  A0D8               	btfss	status,0,c
  7855   011C0E  EF0B  F08E         	goto	u4251
  7856   011C12  EF0D  F08E         	goto	u4250
  7857   011C16                     u4251:
  7858   011C16  EF15  F08E         	goto	l4725
  7859   011C1A                     u4250:
  7860   011C1A  0100               	movlb	0	; () banked
  7861   011C1C  B3E4               	btfsc	_flags& (0+255),1,b
  7862   011C1E  EF13  F08E         	goto	u4261
  7863   011C22  EF15  F08E         	goto	u4260
  7864   011C26                     u4261:
  7865   011C26  EFB3  F08D         	goto	l4705
  7866   011C2A                     u4260:
  7867   011C2A                     l4725:
  7868                           
  7869                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  7870   011C2A  501F               	movf	dtoa@s^0,w,c
  7871   011C2C  B4D8               	btfsc	status,2,c
  7872   011C2E  EF1B  F08E         	goto	u4271
  7873   011C32  EF1D  F08E         	goto	u4270
  7874   011C36                     u4271:
  7875   011C36  EF28  F08E         	goto	l4731
  7876   011C3A                     u4270:
  7877   011C3A                     
  7878                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  7879   011C3A  0620               	decf	dtoa@i^0,f,c
  7880   011C3C  A0D8               	btfss	status,0,c
  7881   011C3E  0621               	decf	(dtoa@i+1)^0,f,c
  7882   011C40                     
  7883                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  7884   011C40  0E6C               	movlw	low _dbuf
  7885   011C42  2420               	addwf	dtoa@i^0,w,c
  7886   011C44  6ED9               	movwf	fsr2l,c
  7887   011C46  0E01               	movlw	high _dbuf
  7888   011C48  2021               	addwfc	(dtoa@i+1)^0,w,c
  7889   011C4A  6EDA               	movwf	fsr2h,c
  7890   011C4C  C01F  FFDF         	movff	dtoa@s,indf2
  7891   011C50                     l4731:
  7892                           
  7893                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  7894   011C50  C017  F00F         	movff	dtoa@fp,pad@fp
  7895   011C54  0E6C               	movlw	low _dbuf
  7896   011C56  2420               	addwf	dtoa@i^0,w,c
  7897   011C58  6E10               	movwf	pad@buf^0,c
  7898   011C5A  0E01               	movlw	high _dbuf
  7899   011C5C  2021               	addwfc	(dtoa@i+1)^0,w,c
  7900   011C5E  6E11               	movwf	(pad@buf+1)^0,c
  7901   011C60  C01D  F012         	movff	dtoa@w,pad@p
  7902   011C64  C01E  F013         	movff	dtoa@w+1,pad@p+1
  7903   011C68  EC15  F092         	call	_pad	;wreg free
  7904   011C6C  0012               	return		;funcret
  7905   011C6E                     __end_of_dtoa:
  7906                           	callstack 0
  7907                           
  7908 ;; *************** function _pad *****************
  7909 ;; Defined at:
  7910 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  7913 ;;		 -> sprintf@f(12), 
  7914 ;;  buf             2   15[COMRAM] PTR unsigned char 
  7915 ;;		 -> dbuf(32), 
  7916 ;;  p               2   17[COMRAM] int 
  7917 ;; Auto vars:     Size  Location     Type
  7918 ;;  i               2   20[COMRAM] int 
  7919 ;; Return value:  Size  Location     Type
  7920 ;;                  1    wreg      void 
  7921 ;; Registers used:
  7922 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7923 ;; Tracked objects:
  7924 ;;		On entry : 0/0
  7925 ;;		On exit  : 0/0
  7926 ;;		Unchanged: 0/0
  7927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7928 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7930 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7931 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7932 ;;Total ram usage:        8 bytes
  7933 ;; Hardware stack levels used: 1
  7934 ;; Hardware stack levels required when called: 3
  7935 ;; This function calls:
  7936 ;;		_fputc
  7937 ;;		_fputs
  7938 ;; This function is called by:
  7939 ;;		_dtoa
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           	psect	text36
  7944   01242A                     __ptext36:
  7945                           	callstack 0
  7946   01242A                     _pad:
  7947                           	callstack 22
  7948   01242A                     
  7949                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  7950   01242A  0100               	movlb	0	; () banked
  7951   01242C  A1E4               	btfss	_flags& (0+255),0,b
  7952   01242E  EF1B  F092         	goto	u4101
  7953   012432  EF1D  F092         	goto	u4100
  7954   012436                     u4101:
  7955   012436  EF25  F092         	goto	l4647
  7956   01243A                     u4100:
  7957   01243A                     
  7958                           ; BSR set to: 0
  7959                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  7960   01243A  C010  F009         	movff	pad@buf,fputs@s
  7961   01243E  C011  F00A         	movff	pad@buf+1,fputs@s+1
  7962   012442  C00F  F00B         	movff	pad@fp,fputs@fp
  7963   012446  EC37  F095         	call	_fputs	;wreg free
  7964   01244A                     l4647:
  7965                           
  7966                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  7967   01244A  BE13               	btfsc	(pad@p+1)^0,7,c
  7968   01244C  EF2C  F092         	goto	u4110
  7969   012450  EF2A  F092         	goto	u4111
  7970   012454                     u4111:
  7971   012454  EF30  F092         	goto	l1235
  7972   012458                     u4110:
  7973   012458                     
  7974                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  7975   012458  0E00               	movlw	0
  7976   01245A  6E13               	movwf	(pad@p+1)^0,c
  7977   01245C  0E00               	movlw	0
  7978   01245E  6E12               	movwf	pad@p^0,c
  7979   012460                     l1235:
  7980                           
  7981                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  7982   012460  0E00               	movlw	0
  7983   012462  6E16               	movwf	(pad@i+1)^0,c
  7984   012464  0E00               	movlw	0
  7985   012466  6E15               	movwf	pad@i^0,c
  7986                           
  7987                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  7988   012468  EF40  F092         	goto	l4655
  7989   01246C                     l4651:
  7990                           
  7991                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  7992   01246C  0E00               	movlw	0
  7993   01246E  6E02               	movwf	(fputc@c+1)^0,c
  7994   012470  0E20               	movlw	32
  7995   012472  6E01               	movwf	fputc@c^0,c
  7996   012474  C00F  F003         	movff	pad@fp,fputc@fp
  7997   012478  ECB0  F090         	call	_fputc	;wreg free
  7998   01247C                     
  7999                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  8000   01247C  4A15               	infsnz	pad@i^0,f,c
  8001   01247E  2A16               	incf	(pad@i+1)^0,f,c
  8002   012480                     l4655:
  8003                           
  8004                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  8005   012480  5012               	movf	pad@p^0,w,c
  8006   012482  5C15               	subwf	pad@i^0,w,c
  8007   012484  5016               	movf	(pad@i+1)^0,w,c
  8008   012486  0A80               	xorlw	128
  8009   012488  6E14               	movwf	??_pad^0,c
  8010   01248A  5013               	movf	(pad@p+1)^0,w,c
  8011   01248C  0A80               	xorlw	128
  8012   01248E  5814               	subwfb	??_pad^0,w,c
  8013   012490  A0D8               	btfss	status,0,c
  8014   012492  EF4D  F092         	goto	u4121
  8015   012496  EF4F  F092         	goto	u4120
  8016   01249A                     u4121:
  8017   01249A  EF36  F092         	goto	l4651
  8018   01249E                     u4120:
  8019   01249E                     
  8020                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  8021   01249E  0100               	movlb	0	; () banked
  8022   0124A0  B1E4               	btfsc	_flags& (0+255),0,b
  8023   0124A2  EF55  F092         	goto	u4131
  8024   0124A6  EF57  F092         	goto	u4130
  8025   0124AA                     u4131:
  8026   0124AA  EF5F  F092         	goto	l1240
  8027   0124AE                     u4130:
  8028   0124AE                     
  8029                           ; BSR set to: 0
  8030                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  8031   0124AE  C010  F009         	movff	pad@buf,fputs@s
  8032   0124B2  C011  F00A         	movff	pad@buf+1,fputs@s+1
  8033   0124B6  C00F  F00B         	movff	pad@fp,fputs@fp
  8034   0124BA  EC37  F095         	call	_fputs	;wreg free
  8035   0124BE                     l1240:
  8036   0124BE  0012               	return		;funcret
  8037   0124C0                     __end_of_pad:
  8038                           	callstack 0
  8039                           
  8040 ;; *************** function _fputs *****************
  8041 ;; Defined at:
  8042 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  8043 ;; Parameters:    Size  Location     Type
  8044 ;;  s               2    8[COMRAM] PTR const unsigned char 
  8045 ;;		 -> dbuf(32), 
  8046 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  8047 ;;		 -> sprintf@f(12), 
  8048 ;; Auto vars:     Size  Location     Type
  8049 ;;  i               2   12[COMRAM] int 
  8050 ;;  c               1   11[COMRAM] unsigned char 
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  2    8[COMRAM] int 
  8053 ;; Registers used:
  8054 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8060 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8061 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8063 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8064 ;;Total ram usage:        6 bytes
  8065 ;; Hardware stack levels used: 1
  8066 ;; Hardware stack levels required when called: 2
  8067 ;; This function calls:
  8068 ;;		_fputc
  8069 ;; This function is called by:
  8070 ;;		_pad
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           	psect	text37
  8075   012A6E                     __ptext37:
  8076                           	callstack 0
  8077   012A6E                     _fputs:
  8078                           	callstack 22
  8079   012A6E  0E00               	movlw	0
  8080   012A70  6E0E               	movwf	(fputs@i+1)^0,c
  8081   012A72  0E00               	movlw	0
  8082   012A74  6E0D               	movwf	fputs@i^0,c
  8083   012A76  EF46  F095         	goto	l4555
  8084   012A7A                     l4551:
  8085   012A7A  C00C  F001         	movff	fputs@c,fputc@c
  8086   012A7E  6A02               	clrf	(fputc@c+1)^0,c
  8087   012A80  C00B  F003         	movff	fputs@fp,fputc@fp
  8088   012A84  ECB0  F090         	call	_fputc	;wreg free
  8089   012A88  4A0D               	infsnz	fputs@i^0,f,c
  8090   012A8A  2A0E               	incf	(fputs@i+1)^0,f,c
  8091   012A8C                     l4555:
  8092   012A8C  500D               	movf	fputs@i^0,w,c
  8093   012A8E  2409               	addwf	fputs@s^0,w,c
  8094   012A90  6ED9               	movwf	fsr2l,c
  8095   012A92  500E               	movf	(fputs@i+1)^0,w,c
  8096   012A94  200A               	addwfc	(fputs@s+1)^0,w,c
  8097   012A96  6EDA               	movwf	fsr2h,c
  8098   012A98  50DF               	movf	indf2,w,c
  8099   012A9A  6E0C               	movwf	fputs@c^0,c
  8100   012A9C  500C               	movf	fputs@c^0,w,c
  8101   012A9E  A4D8               	btfss	status,2,c
  8102   012AA0  EF54  F095         	goto	u3971
  8103   012AA4  EF56  F095         	goto	u3970
  8104   012AA8                     u3971:
  8105   012AA8  EF3D  F095         	goto	l4551
  8106   012AAC                     u3970:
  8107   012AAC  0012               	return		;funcret
  8108   012AAE                     __end_of_fputs:
  8109                           	callstack 0
  8110                           
  8111 ;; *************** function _fputc *****************
  8112 ;; Defined at:
  8113 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  c               2    0[COMRAM] int 
  8116 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  8117 ;;		 -> sprintf@f(12), 
  8118 ;; Auto vars:     Size  Location     Type
  8119 ;;		None
  8120 ;; Return value:  Size  Location     Type
  8121 ;;                  2    0[COMRAM] int 
  8122 ;; Registers used:
  8123 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8124 ;; Tracked objects:
  8125 ;;		On entry : 0/0
  8126 ;;		On exit  : 0/0
  8127 ;;		Unchanged: 0/0
  8128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8129 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8131 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8132 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8133 ;;Total ram usage:        8 bytes
  8134 ;; Hardware stack levels used: 1
  8135 ;; Hardware stack levels required when called: 1
  8136 ;; This function calls:
  8137 ;;		_putch
  8138 ;; This function is called by:
  8139 ;;		_pad
  8140 ;;		_vfpfcnvrt
  8141 ;;		_fputs
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           	psect	text38
  8146   012160                     __ptext38:
  8147                           	callstack 0
  8148   012160                     _fputc:
  8149                           	callstack 25
  8150   012160  5003               	movf	fputc@fp^0,w,c
  8151   012162  B4D8               	btfsc	status,2,c
  8152   012164  EFB6  F090         	goto	u3931
  8153   012168  EFB8  F090         	goto	u3930
  8154   01216C                     u3931:
  8155   01216C  EFC0  F090         	goto	l4539
  8156   012170                     u3930:
  8157   012170  5003               	movf	fputc@fp^0,w,c
  8158   012172  A4D8               	btfss	status,2,c
  8159   012174  EFBE  F090         	goto	u3941
  8160   012178  EFC0  F090         	goto	u3940
  8161   01217C                     u3941:
  8162   01217C  EFC5  F090         	goto	l4541
  8163   012180                     u3940:
  8164   012180                     l4539:
  8165   012180  5001               	movf	fputc@c^0,w,c
  8166   012182  ECD7  F096         	call	_putch
  8167   012186  EF0C  F091         	goto	l1304
  8168   01218A                     l4541:
  8169   01218A  5003               	movf	fputc@fp^0,w,c
  8170   01218C  6ED9               	movwf	fsr2l,c
  8171   01218E  6ADA               	clrf	fsr2h,c
  8172   012190  0E0A               	movlw	10
  8173   012192  26D9               	addwf	fsr2l,f,c
  8174   012194  50DE               	movf	postinc2,w,c
  8175   012196  10DE               	iorwf	postinc2,w,c
  8176   012198  B4D8               	btfsc	status,2,c
  8177   01219A  EFD1  F090         	goto	u3951
  8178   01219E  EFD3  F090         	goto	u3950
  8179   0121A2                     u3951:
  8180   0121A2  EFEC  F090         	goto	l4545
  8181   0121A6                     u3950:
  8182   0121A6  5003               	movf	fputc@fp^0,w,c
  8183   0121A8  6ED9               	movwf	fsr2l,c
  8184   0121AA  6ADA               	clrf	fsr2h,c
  8185   0121AC  0E0A               	movlw	10
  8186   0121AE  26D9               	addwf	fsr2l,f,c
  8187   0121B0  5003               	movf	fputc@fp^0,w,c
  8188   0121B2  6EE1               	movwf	fsr1l,c
  8189   0121B4  6AE2               	clrf	fsr1h,c
  8190   0121B6  0E03               	movlw	3
  8191   0121B8  26E1               	addwf	fsr1l,f,c
  8192   0121BA  50DE               	movf	postinc2,w,c
  8193   0121BC  5CE6               	subwf	postinc1,w,c
  8194   0121BE  50E6               	movf	postinc1,w,c
  8195   0121C0  0A80               	xorlw	128
  8196   0121C2  6E08               	movwf	(??_fputc+4)^0,c
  8197   0121C4  50DE               	movf	postinc2,w,c
  8198   0121C6  0A80               	xorlw	128
  8199   0121C8  5808               	subwfb	(??_fputc+4)^0,w,c
  8200   0121CA  B0D8               	btfsc	status,0,c
  8201   0121CC  EFEA  F090         	goto	u3961
  8202   0121D0  EFEC  F090         	goto	u3960
  8203   0121D4                     u3961:
  8204   0121D4  EF0C  F091         	goto	l1304
  8205   0121D8                     u3960:
  8206   0121D8                     l4545:
  8207   0121D8  5003               	movf	fputc@fp^0,w,c
  8208   0121DA  6ED9               	movwf	fsr2l,c
  8209   0121DC  6ADA               	clrf	fsr2h,c
  8210   0121DE  0E03               	movlw	3
  8211   0121E0  26D9               	addwf	fsr2l,f,c
  8212   0121E2  CFDE F004          	movff	postinc2,??_fputc
  8213   0121E6  CFDD F005          	movff	postdec2,??_fputc+1
  8214   0121EA  5003               	movf	fputc@fp^0,w,c
  8215   0121EC  6ED9               	movwf	fsr2l,c
  8216   0121EE  6ADA               	clrf	fsr2h,c
  8217   0121F0  CFDE F006          	movff	postinc2,??_fputc+2
  8218   0121F4  CFDD F007          	movff	postdec2,??_fputc+3
  8219   0121F8  5004               	movf	??_fputc^0,w,c
  8220   0121FA  2406               	addwf	(??_fputc+2)^0,w,c
  8221   0121FC  6ED9               	movwf	fsr2l,c
  8222   0121FE  5005               	movf	(??_fputc+1)^0,w,c
  8223   012200  2007               	addwfc	(??_fputc+3)^0,w,c
  8224   012202  6EDA               	movwf	fsr2h,c
  8225   012204  C001  FFDF         	movff	fputc@c,indf2
  8226   012208  5003               	movf	fputc@fp^0,w,c
  8227   01220A  6ED9               	movwf	fsr2l,c
  8228   01220C  6ADA               	clrf	fsr2h,c
  8229   01220E  0E03               	movlw	3
  8230   012210  26D9               	addwf	fsr2l,f,c
  8231   012212  2ADE               	incf	postinc2,f,c
  8232   012214  0E00               	movlw	0
  8233   012216  22DD               	addwfc	postdec2,f,c
  8234   012218                     l1304:
  8235   012218  0012               	return		;funcret
  8236   01221A                     __end_of_fputc:
  8237                           	callstack 0
  8238                           
  8239 ;; *************** function _putch *****************
  8240 ;; Defined at:
  8241 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;  c               1    wreg     unsigned char 
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;  c               1    0[COMRAM] unsigned char 
  8246 ;; Return value:  Size  Location     Type
  8247 ;;                  1    wreg      void 
  8248 ;; Registers used:
  8249 ;;		wreg
  8250 ;; Tracked objects:
  8251 ;;		On entry : 0/0
  8252 ;;		On exit  : 0/0
  8253 ;;		Unchanged: 0/0
  8254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8259 ;;Total ram usage:        0 bytes
  8260 ;; Hardware stack levels used: 1
  8261 ;; This function calls:
  8262 ;;		Nothing
  8263 ;; This function is called by:
  8264 ;;		_fputc
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           	psect	text39
  8269   012DAE                     __ptext39:
  8270                           	callstack 0
  8271   012DAE                     _putch:
  8272                           	callstack 25
  8273   012DAE  0012               	return		;funcret
  8274   012DB0                     __end_of_putch:
  8275                           	callstack 0
  8276                           
  8277 ;; *************** function _abs *****************
  8278 ;; Defined at:
  8279 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  8280 ;; Parameters:    Size  Location     Type
  8281 ;;  a               2    6[COMRAM] int 
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;		None
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  2    6[COMRAM] int 
  8286 ;; Registers used:
  8287 ;;		wreg, status,2, status,0
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8293 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8295 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8296 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8297 ;;Total ram usage:        4 bytes
  8298 ;; Hardware stack levels used: 1
  8299 ;; This function calls:
  8300 ;;		Nothing
  8301 ;; This function is called by:
  8302 ;;		_dtoa
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           	psect	text40
  8307   012B1A                     __ptext40:
  8308                           	callstack 0
  8309   012B1A                     _abs:
  8310                           	callstack 25
  8311   012B1A  BE08               	btfsc	(abs@a+1)^0,7,c
  8312   012B1C  EF92  F095         	goto	u4141
  8313   012B20  EF94  F095         	goto	u4140
  8314   012B24                     u4141:
  8315   012B24  EF9A  F095         	goto	l1289
  8316   012B28                     u4140:
  8317   012B28  C007  F007         	movff	abs@a,?_abs
  8318   012B2C  C008  F008         	movff	abs@a+1,?_abs+1
  8319   012B30  EFA6  F095         	goto	l1292
  8320   012B34                     l1289:
  8321   012B34  C007  F009         	movff	abs@a,??_abs
  8322   012B38  C008  F00A         	movff	abs@a+1,??_abs+1
  8323   012B3C  1E09               	comf	??_abs^0,f,c
  8324   012B3E  1E0A               	comf	(??_abs+1)^0,f,c
  8325   012B40  4A09               	infsnz	??_abs^0,f,c
  8326   012B42  2A0A               	incf	(??_abs+1)^0,f,c
  8327   012B44  C009  F007         	movff	??_abs,?_abs
  8328   012B48  C00A  F008         	movff	??_abs+1,?_abs+1
  8329   012B4C                     l1292:
  8330   012B4C  0012               	return		;funcret
  8331   012B4E                     __end_of_abs:
  8332                           	callstack 0
  8333                           
  8334 ;; *************** function ___awmod *****************
  8335 ;; Defined at:
  8336 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  8337 ;; Parameters:    Size  Location     Type
  8338 ;;  dividend        2    0[COMRAM] int 
  8339 ;;  divisor         2    2[COMRAM] int 
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;  sign            1    5[COMRAM] unsigned char 
  8342 ;;  counter         1    4[COMRAM] unsigned char 
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  2    0[COMRAM] int 
  8345 ;; Registers used:
  8346 ;;		wreg, status,2, status,0
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8352 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8353 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8355 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8356 ;;Total ram usage:        6 bytes
  8357 ;; Hardware stack levels used: 1
  8358 ;; This function calls:
  8359 ;;		Nothing
  8360 ;; This function is called by:
  8361 ;;		_dtoa
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           	psect	text41
  8366   0122D0                     __ptext41:
  8367                           	callstack 0
  8368   0122D0                     ___awmod:
  8369                           	callstack 25
  8370   0122D0  0E00               	movlw	0
  8371   0122D2  6E06               	movwf	___awmod@sign^0,c
  8372   0122D4  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  8373   0122D6  EF71  F091         	goto	u4040
  8374   0122DA  EF6F  F091         	goto	u4041
  8375   0122DE                     u4041:
  8376   0122DE  EF77  F091         	goto	l4615
  8377   0122E2                     u4040:
  8378   0122E2  6C01               	negf	___awmod@dividend^0,c
  8379   0122E4  1E02               	comf	(___awmod@dividend+1)^0,f,c
  8380   0122E6  B0D8               	btfsc	status,0,c
  8381   0122E8  2A02               	incf	(___awmod@dividend+1)^0,f,c
  8382   0122EA  0E01               	movlw	1
  8383   0122EC  6E06               	movwf	___awmod@sign^0,c
  8384   0122EE                     l4615:
  8385   0122EE  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  8386   0122F0  EF7E  F091         	goto	u4050
  8387   0122F4  EF7C  F091         	goto	u4051
  8388   0122F8                     u4051:
  8389   0122F8  EF82  F091         	goto	l4619
  8390   0122FC                     u4050:
  8391   0122FC  6C03               	negf	___awmod@divisor^0,c
  8392   0122FE  1E04               	comf	(___awmod@divisor+1)^0,f,c
  8393   012300  B0D8               	btfsc	status,0,c
  8394   012302  2A04               	incf	(___awmod@divisor+1)^0,f,c
  8395   012304                     l4619:
  8396   012304  5003               	movf	___awmod@divisor^0,w,c
  8397   012306  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  8398   012308  B4D8               	btfsc	status,2,c
  8399   01230A  EF89  F091         	goto	u4061
  8400   01230E  EF8B  F091         	goto	u4060
  8401   012312                     u4061:
  8402   012312  EFAF  F091         	goto	l4635
  8403   012316                     u4060:
  8404   012316  0E01               	movlw	1
  8405   012318  6E05               	movwf	___awmod@counter^0,c
  8406   01231A  EF93  F091         	goto	l4625
  8407   01231E                     l4623:
  8408   01231E  90D8               	bcf	status,0,c
  8409   012320  3603               	rlcf	___awmod@divisor^0,f,c
  8410   012322  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  8411   012324  2A05               	incf	___awmod@counter^0,f,c
  8412   012326                     l4625:
  8413   012326  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  8414   012328  EF98  F091         	goto	u4071
  8415   01232C  EF9A  F091         	goto	u4070
  8416   012330                     u4071:
  8417   012330  EF8F  F091         	goto	l4623
  8418   012334                     u4070:
  8419   012334                     l4627:
  8420   012334  5003               	movf	___awmod@divisor^0,w,c
  8421   012336  5C01               	subwf	___awmod@dividend^0,w,c
  8422   012338  5004               	movf	(___awmod@divisor+1)^0,w,c
  8423   01233A  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  8424   01233C  A0D8               	btfss	status,0,c
  8425   01233E  EFA3  F091         	goto	u4081
  8426   012342  EFA5  F091         	goto	u4080
  8427   012346                     u4081:
  8428   012346  EFA9  F091         	goto	l4631
  8429   01234A                     u4080:
  8430   01234A  5003               	movf	___awmod@divisor^0,w,c
  8431   01234C  5E01               	subwf	___awmod@dividend^0,f,c
  8432   01234E  5004               	movf	(___awmod@divisor+1)^0,w,c
  8433   012350  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  8434   012352                     l4631:
  8435   012352  90D8               	bcf	status,0,c
  8436   012354  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  8437   012356  3203               	rrcf	___awmod@divisor^0,f,c
  8438   012358  2E05               	decfsz	___awmod@counter^0,f,c
  8439   01235A  EF9A  F091         	goto	l4627
  8440   01235E                     l4635:
  8441   01235E  5006               	movf	___awmod@sign^0,w,c
  8442   012360  B4D8               	btfsc	status,2,c
  8443   012362  EFB5  F091         	goto	u4091
  8444   012366  EFB7  F091         	goto	u4090
  8445   01236A                     u4091:
  8446   01236A  EFBB  F091         	goto	l4639
  8447   01236E                     u4090:
  8448   01236E  6C01               	negf	___awmod@dividend^0,c
  8449   012370  1E02               	comf	(___awmod@dividend+1)^0,f,c
  8450   012372  B0D8               	btfsc	status,0,c
  8451   012374  2A02               	incf	(___awmod@dividend+1)^0,f,c
  8452   012376                     l4639:
  8453   012376  C001  F001         	movff	___awmod@dividend,?___awmod
  8454   01237A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  8455   01237E  0012               	return		;funcret
  8456   012380                     __end_of___awmod:
  8457                           	callstack 0
  8458                           
  8459 ;; *************** function ___awdiv *****************
  8460 ;; Defined at:
  8461 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  8462 ;; Parameters:    Size  Location     Type
  8463 ;;  dividend        2    0[COMRAM] int 
  8464 ;;  divisor         2    2[COMRAM] int 
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;  quotient        2    6[COMRAM] int 
  8467 ;;  sign            1    5[COMRAM] unsigned char 
  8468 ;;  counter         1    4[COMRAM] unsigned char 
  8469 ;; Return value:  Size  Location     Type
  8470 ;;                  2    0[COMRAM] int 
  8471 ;; Registers used:
  8472 ;;		wreg, status,2, status,0
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/0
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8478 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8479 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8481 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8482 ;;Total ram usage:        8 bytes
  8483 ;; Hardware stack levels used: 1
  8484 ;; This function calls:
  8485 ;;		Nothing
  8486 ;; This function is called by:
  8487 ;;		_dtoa
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           	psect	text42
  8492   01209C                     __ptext42:
  8493                           	callstack 0
  8494   01209C                     ___awdiv:
  8495                           	callstack 25
  8496   01209C  0E00               	movlw	0
  8497   01209E  6E06               	movwf	___awdiv@sign^0,c
  8498   0120A0  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  8499   0120A2  EF57  F090         	goto	u3980
  8500   0120A6  EF55  F090         	goto	u3981
  8501   0120AA                     u3981:
  8502   0120AA  EF5D  F090         	goto	l4571
  8503   0120AE                     u3980:
  8504   0120AE  6C03               	negf	___awdiv@divisor^0,c
  8505   0120B0  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  8506   0120B2  B0D8               	btfsc	status,0,c
  8507   0120B4  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  8508   0120B6  0E01               	movlw	1
  8509   0120B8  6E06               	movwf	___awdiv@sign^0,c
  8510   0120BA                     l4571:
  8511   0120BA  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  8512   0120BC  EF64  F090         	goto	u3990
  8513   0120C0  EF62  F090         	goto	u3991
  8514   0120C4                     u3991:
  8515   0120C4  EF6A  F090         	goto	l4577
  8516   0120C8                     u3990:
  8517   0120C8  6C01               	negf	___awdiv@dividend^0,c
  8518   0120CA  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  8519   0120CC  B0D8               	btfsc	status,0,c
  8520   0120CE  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  8521   0120D0  0E01               	movlw	1
  8522   0120D2  1A06               	xorwf	___awdiv@sign^0,f,c
  8523   0120D4                     l4577:
  8524   0120D4  0E00               	movlw	0
  8525   0120D6  6E08               	movwf	(___awdiv@quotient+1)^0,c
  8526   0120D8  0E00               	movlw	0
  8527   0120DA  6E07               	movwf	___awdiv@quotient^0,c
  8528   0120DC  5003               	movf	___awdiv@divisor^0,w,c
  8529   0120DE  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  8530   0120E0  B4D8               	btfsc	status,2,c
  8531   0120E2  EF75  F090         	goto	u4001
  8532   0120E6  EF77  F090         	goto	u4000
  8533   0120EA                     u4001:
  8534   0120EA  EF9F  F090         	goto	l4599
  8535   0120EE                     u4000:
  8536   0120EE  0E01               	movlw	1
  8537   0120F0  6E05               	movwf	___awdiv@counter^0,c
  8538   0120F2  EF7F  F090         	goto	l4585
  8539   0120F6                     l4583:
  8540   0120F6  90D8               	bcf	status,0,c
  8541   0120F8  3603               	rlcf	___awdiv@divisor^0,f,c
  8542   0120FA  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  8543   0120FC  2A05               	incf	___awdiv@counter^0,f,c
  8544   0120FE                     l4585:
  8545   0120FE  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  8546   012100  EF84  F090         	goto	u4011
  8547   012104  EF86  F090         	goto	u4010
  8548   012108                     u4011:
  8549   012108  EF7B  F090         	goto	l4583
  8550   01210C                     u4010:
  8551   01210C                     l4587:
  8552   01210C  90D8               	bcf	status,0,c
  8553   01210E  3607               	rlcf	___awdiv@quotient^0,f,c
  8554   012110  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  8555   012112  5003               	movf	___awdiv@divisor^0,w,c
  8556   012114  5C01               	subwf	___awdiv@dividend^0,w,c
  8557   012116  5004               	movf	(___awdiv@divisor+1)^0,w,c
  8558   012118  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  8559   01211A  A0D8               	btfss	status,0,c
  8560   01211C  EF92  F090         	goto	u4021
  8561   012120  EF94  F090         	goto	u4020
  8562   012124                     u4021:
  8563   012124  EF99  F090         	goto	l4595
  8564   012128                     u4020:
  8565   012128  5003               	movf	___awdiv@divisor^0,w,c
  8566   01212A  5E01               	subwf	___awdiv@dividend^0,f,c
  8567   01212C  5004               	movf	(___awdiv@divisor+1)^0,w,c
  8568   01212E  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  8569   012130  8007               	bsf	___awdiv@quotient^0,0,c
  8570   012132                     l4595:
  8571   012132  90D8               	bcf	status,0,c
  8572   012134  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  8573   012136  3203               	rrcf	___awdiv@divisor^0,f,c
  8574   012138  2E05               	decfsz	___awdiv@counter^0,f,c
  8575   01213A  EF86  F090         	goto	l4587
  8576   01213E                     l4599:
  8577   01213E  5006               	movf	___awdiv@sign^0,w,c
  8578   012140  B4D8               	btfsc	status,2,c
  8579   012142  EFA5  F090         	goto	u4031
  8580   012146  EFA7  F090         	goto	u4030
  8581   01214A                     u4031:
  8582   01214A  EFAB  F090         	goto	l4603
  8583   01214E                     u4030:
  8584   01214E  6C07               	negf	___awdiv@quotient^0,c
  8585   012150  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  8586   012152  B0D8               	btfsc	status,0,c
  8587   012154  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  8588   012156                     l4603:
  8589   012156  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8590   01215A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8591   01215E  0012               	return		;funcret
  8592   012160                     __end_of___awdiv:
  8593                           	callstack 0
  8594                           
  8595 ;; *************** function _sendStringSerial4 *****************
  8596 ;; Defined at:
  8597 ;;		line 41 in file "serial.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;  string          2    1[COMRAM] PTR unsigned char 
  8600 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), test@led_state(50), 
  8601 ;;		 -> convert_rgb2hue@char3(20), convert_rgb2hue@char2(20), convert_rgb2hue@char1(20), 
  8602 ;; Auto vars:     Size  Location     Type
  8603 ;;		None
  8604 ;; Return value:  Size  Location     Type
  8605 ;;                  1    wreg      void 
  8606 ;; Registers used:
  8607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8608 ;; Tracked objects:
  8609 ;;		On entry : 0/0
  8610 ;;		On exit  : 0/0
  8611 ;;		Unchanged: 0/0
  8612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8613 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8616 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8617 ;;Total ram usage:        2 bytes
  8618 ;; Hardware stack levels used: 1
  8619 ;; Hardware stack levels required when called: 1
  8620 ;; This function calls:
  8621 ;;		_sendCharSerial4
  8622 ;; This function is called by:
  8623 ;;		_convert_rgb2hue
  8624 ;;		_test
  8625 ;;		_calibration_routine
  8626 ;;		_send2USART
  8627 ;;		_sendAllReadings
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           	psect	text43
  8632   012AAE                     __ptext43:
  8633                           	callstack 0
  8634   012AAE                     _sendStringSerial4:
  8635                           	callstack 28
  8636   012AAE                     
  8637                           ;serial.c: 44:     while(*string != 0){
  8638   012AAE  EF66  F095         	goto	l5179
  8639   012AB2                     l5173:
  8640                           
  8641                           ;serial.c: 46:   sendCharSerial4(*string++);
  8642   012AB2  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  8643   012AB6  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  8644   012ABA  50DF               	movf	indf2,w,c
  8645   012ABC  ECB6  F096         	call	_sendCharSerial4
  8646   012AC0  4A02               	infsnz	sendStringSerial4@string^0,f,c
  8647   012AC2  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  8648   012AC4                     
  8649                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  8650   012AC4  0E6A               	movlw	106
  8651   012AC6                     u5997:
  8652   012AC6  2EE8               	decfsz	wreg,f,c
  8653   012AC8  D7FE               	bra	u5997
  8654   012ACA  D000               	nop2	
  8655   012ACC                     l5179:
  8656                           
  8657                           ;serial.c: 44:     while(*string != 0){
  8658   012ACC  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  8659   012AD0  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  8660   012AD4  50DF               	movf	indf2,w,c
  8661   012AD6  A4D8               	btfss	status,2,c
  8662   012AD8  EF70  F095         	goto	u4891
  8663   012ADC  EF72  F095         	goto	u4890
  8664   012AE0                     u4891:
  8665   012AE0  EF59  F095         	goto	l5173
  8666   012AE4                     u4890:
  8667   012AE4  0012               	return		;funcret
  8668   012AE6                     __end_of_sendStringSerial4:
  8669                           	callstack 0
  8670                           
  8671 ;; *************** function _sendCharSerial4 *****************
  8672 ;; Defined at:
  8673 ;;		line 35 in file "serial.c"
  8674 ;; Parameters:    Size  Location     Type
  8675 ;;  charToSend      1    wreg     unsigned char 
  8676 ;; Auto vars:     Size  Location     Type
  8677 ;;  charToSend      1    0[COMRAM] unsigned char 
  8678 ;; Return value:  Size  Location     Type
  8679 ;;                  1    wreg      void 
  8680 ;; Registers used:
  8681 ;;		wreg
  8682 ;; Tracked objects:
  8683 ;;		On entry : 0/0
  8684 ;;		On exit  : 0/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8690 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8691 ;;Total ram usage:        1 bytes
  8692 ;; Hardware stack levels used: 1
  8693 ;; This function calls:
  8694 ;;		Nothing
  8695 ;; This function is called by:
  8696 ;;		_sendStringSerial4
  8697 ;; This function uses a non-reentrant model
  8698 ;;
  8699                           
  8700                           	psect	text44
  8701   012D6C                     __ptext44:
  8702                           	callstack 0
  8703   012D6C                     _sendCharSerial4:
  8704                           	callstack 28
  8705                           
  8706                           ;incstack = 0
  8707                           ;sendCharSerial4@charToSend stored from wreg
  8708   012D6C  6E01               	movwf	sendCharSerial4@charToSend^0,c
  8709   012D6E                     l480:
  8710   012D6E  010E               	movlb	14	; () banked
  8711   012D70  A537               	btfss	55,2,b	;volatile
  8712   012D72  EFBD  F096         	goto	u4461
  8713   012D76  EFBF  F096         	goto	u4460
  8714   012D7A                     u4461:
  8715   012D7A  EFB7  F096         	goto	l480
  8716   012D7E                     u4460:
  8717   012D7E                     
  8718                           ; BSR set to: 14
  8719                           ;serial.c: 37:     TX4REG = charToSend;
  8720   012D7E  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  8721   012D82                     
  8722                           ; BSR set to: 14
  8723   012D82  0012               	return		;funcret
  8724   012D84                     __end_of_sendCharSerial4:
  8725                           	callstack 0
  8726                           
  8727 ;; *************** function _color_read_Red *****************
  8728 ;; Defined at:
  8729 ;;		line 32 in file "color.c"
  8730 ;; Parameters:    Size  Location     Type
  8731 ;;		None
  8732 ;; Auto vars:     Size  Location     Type
  8733 ;;  tmp             2    9[COMRAM] unsigned int 
  8734 ;; Return value:  Size  Location     Type
  8735 ;;                  2    4[COMRAM] unsigned int 
  8736 ;; Registers used:
  8737 ;;		wreg, status,2, status,0, cstack
  8738 ;; Tracked objects:
  8739 ;;		On entry : 0/0
  8740 ;;		On exit  : 0/0
  8741 ;;		Unchanged: 0/0
  8742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8743 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8744 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8745 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8746 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8747 ;;Total ram usage:        7 bytes
  8748 ;; Hardware stack levels used: 1
  8749 ;; Hardware stack levels required when called: 2
  8750 ;; This function calls:
  8751 ;;		_I2C_2_Master_Read
  8752 ;;		_I2C_2_Master_RepStart
  8753 ;;		_I2C_2_Master_Start
  8754 ;;		_I2C_2_Master_Stop
  8755 ;;		_I2C_2_Master_Write
  8756 ;; This function is called by:
  8757 ;;		_test
  8758 ;;		_calibration_routine
  8759 ;;		_reading_values
  8760 ;; This function uses a non-reentrant model
  8761 ;;
  8762                           
  8763                           	psect	text45
  8764   012820                     __ptext45:
  8765                           	callstack 0
  8766   012820                     _color_read_Red:
  8767                           	callstack 27
  8768   012820                     
  8769                           ;color.c: 34:  unsigned int tmp;;color.c: 35:  I2C_2_Master_Start();
  8770   012820  ECCD  F096         	call	_I2C_2_Master_Start	;wreg free
  8771                           
  8772                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
  8773   012824  0E52               	movlw	82
  8774   012826  ECC2  F096         	call	_I2C_2_Master_Write
  8775                           
  8776                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
  8777   01282A  0EB6               	movlw	182
  8778   01282C  ECC2  F096         	call	_I2C_2_Master_Write
  8779                           
  8780                           ;color.c: 38:  I2C_2_Master_RepStart();
  8781   012830  ECD2  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8782                           
  8783                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
  8784   012834  0E53               	movlw	83
  8785   012836  ECC2  F096         	call	_I2C_2_Master_Write
  8786                           
  8787                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
  8788   01283A  0E01               	movlw	1
  8789   01283C  ECF6  F094         	call	_I2C_2_Master_Read
  8790   012840  6E07               	movwf	??_color_read_Red^0,c
  8791   012842  5007               	movf	??_color_read_Red^0,w,c
  8792   012844  6E0A               	movwf	color_read_Red@tmp^0,c
  8793   012846  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  8794                           
  8795                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8796   012848  0E00               	movlw	0
  8797   01284A  ECF6  F094         	call	_I2C_2_Master_Read
  8798   01284E  6E07               	movwf	??_color_read_Red^0,c
  8799   012850  5007               	movf	??_color_read_Red^0,w,c
  8800   012852  6E09               	movwf	(??_color_read_Red+2)^0,c
  8801   012854  6A08               	clrf	(??_color_read_Red+1)^0,c
  8802   012856  500A               	movf	color_read_Red@tmp^0,w,c
  8803   012858  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  8804   01285A  6E0A               	movwf	color_read_Red@tmp^0,c
  8805   01285C  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  8806   01285E  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  8807   012860  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  8808                           
  8809                           ;color.c: 42:  I2C_2_Master_Stop();
  8810   012862  ECC8  F096         	call	_I2C_2_Master_Stop	;wreg free
  8811   012866                     
  8812                           ;color.c: 43:  return tmp;
  8813   012866  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  8814   01286A  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  8815   01286E  0012               	return		;funcret
  8816   012870                     __end_of_color_read_Red:
  8817                           	callstack 0
  8818                           
  8819 ;; *************** function _color_read_Green *****************
  8820 ;; Defined at:
  8821 ;;		line 46 in file "color.c"
  8822 ;; Parameters:    Size  Location     Type
  8823 ;;		None
  8824 ;; Auto vars:     Size  Location     Type
  8825 ;;  tmp             2    9[COMRAM] unsigned int 
  8826 ;; Return value:  Size  Location     Type
  8827 ;;                  2    4[COMRAM] unsigned int 
  8828 ;; Registers used:
  8829 ;;		wreg, status,2, status,0, cstack
  8830 ;; Tracked objects:
  8831 ;;		On entry : 0/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8835 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8836 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8837 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8838 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8839 ;;Total ram usage:        7 bytes
  8840 ;; Hardware stack levels used: 1
  8841 ;; Hardware stack levels required when called: 2
  8842 ;; This function calls:
  8843 ;;		_I2C_2_Master_Read
  8844 ;;		_I2C_2_Master_RepStart
  8845 ;;		_I2C_2_Master_Start
  8846 ;;		_I2C_2_Master_Stop
  8847 ;;		_I2C_2_Master_Write
  8848 ;; This function is called by:
  8849 ;;		_test
  8850 ;;		_calibration_routine
  8851 ;;		_reading_values
  8852 ;; This function uses a non-reentrant model
  8853 ;;
  8854                           
  8855                           	psect	text46
  8856   012870                     __ptext46:
  8857                           	callstack 0
  8858   012870                     _color_read_Green:
  8859                           	callstack 27
  8860   012870                     
  8861                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
  8862   012870  ECCD  F096         	call	_I2C_2_Master_Start	;wreg free
  8863                           
  8864                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
  8865   012874  0E52               	movlw	82
  8866   012876  ECC2  F096         	call	_I2C_2_Master_Write
  8867                           
  8868                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
  8869   01287A  0EB8               	movlw	184
  8870   01287C  ECC2  F096         	call	_I2C_2_Master_Write
  8871                           
  8872                           ;color.c: 52:  I2C_2_Master_RepStart();
  8873   012880  ECD2  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8874                           
  8875                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
  8876   012884  0E53               	movlw	83
  8877   012886  ECC2  F096         	call	_I2C_2_Master_Write
  8878                           
  8879                           ;color.c: 54:  tmp=I2C_2_Master_Read(1);
  8880   01288A  0E01               	movlw	1
  8881   01288C  ECF6  F094         	call	_I2C_2_Master_Read
  8882   012890  6E07               	movwf	??_color_read_Green^0,c
  8883   012892  5007               	movf	??_color_read_Green^0,w,c
  8884   012894  6E0A               	movwf	color_read_Green@tmp^0,c
  8885   012896  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  8886                           
  8887                           ;color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8888   012898  0E00               	movlw	0
  8889   01289A  ECF6  F094         	call	_I2C_2_Master_Read
  8890   01289E  6E07               	movwf	??_color_read_Green^0,c
  8891   0128A0  5007               	movf	??_color_read_Green^0,w,c
  8892   0128A2  6E09               	movwf	(??_color_read_Green+2)^0,c
  8893   0128A4  6A08               	clrf	(??_color_read_Green+1)^0,c
  8894   0128A6  500A               	movf	color_read_Green@tmp^0,w,c
  8895   0128A8  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  8896   0128AA  6E0A               	movwf	color_read_Green@tmp^0,c
  8897   0128AC  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  8898   0128AE  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  8899   0128B0  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  8900                           
  8901                           ;color.c: 56:  I2C_2_Master_Stop();
  8902   0128B2  ECC8  F096         	call	_I2C_2_Master_Stop	;wreg free
  8903   0128B6                     
  8904                           ;color.c: 57:  return tmp;
  8905   0128B6  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  8906   0128BA  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8907   0128BE  0012               	return		;funcret
  8908   0128C0                     __end_of_color_read_Green:
  8909                           	callstack 0
  8910                           
  8911 ;; *************** function _color_read_Clear *****************
  8912 ;; Defined at:
  8913 ;;		line 75 in file "color.c"
  8914 ;; Parameters:    Size  Location     Type
  8915 ;;		None
  8916 ;; Auto vars:     Size  Location     Type
  8917 ;;  tmp             2    9[COMRAM] unsigned int 
  8918 ;; Return value:  Size  Location     Type
  8919 ;;                  2    4[COMRAM] unsigned int 
  8920 ;; Registers used:
  8921 ;;		wreg, status,2, status,0, cstack
  8922 ;; Tracked objects:
  8923 ;;		On entry : 0/0
  8924 ;;		On exit  : 0/0
  8925 ;;		Unchanged: 0/0
  8926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8927 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8928 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8929 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8930 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8931 ;;Total ram usage:        7 bytes
  8932 ;; Hardware stack levels used: 1
  8933 ;; Hardware stack levels required when called: 2
  8934 ;; This function calls:
  8935 ;;		_I2C_2_Master_Read
  8936 ;;		_I2C_2_Master_RepStart
  8937 ;;		_I2C_2_Master_Start
  8938 ;;		_I2C_2_Master_Stop
  8939 ;;		_I2C_2_Master_Write
  8940 ;; This function is called by:
  8941 ;;		_test
  8942 ;;		_calibration_routine
  8943 ;;		_reading_values
  8944 ;; This function uses a non-reentrant model
  8945 ;;
  8946                           
  8947                           	psect	text47
  8948   0128C0                     __ptext47:
  8949                           	callstack 0
  8950   0128C0                     _color_read_Clear:
  8951                           	callstack 27
  8952   0128C0                     
  8953                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  8954   0128C0  ECCD  F096         	call	_I2C_2_Master_Start	;wreg free
  8955                           
  8956                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  8957   0128C4  0E52               	movlw	82
  8958   0128C6  ECC2  F096         	call	_I2C_2_Master_Write
  8959                           
  8960                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
  8961   0128CA  0EB4               	movlw	180
  8962   0128CC  ECC2  F096         	call	_I2C_2_Master_Write
  8963                           
  8964                           ;color.c: 81:  I2C_2_Master_RepStart();
  8965   0128D0  ECD2  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8966                           
  8967                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
  8968   0128D4  0E53               	movlw	83
  8969   0128D6  ECC2  F096         	call	_I2C_2_Master_Write
  8970                           
  8971                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
  8972   0128DA  0E01               	movlw	1
  8973   0128DC  ECF6  F094         	call	_I2C_2_Master_Read
  8974   0128E0  6E07               	movwf	??_color_read_Clear^0,c
  8975   0128E2  5007               	movf	??_color_read_Clear^0,w,c
  8976   0128E4  6E0A               	movwf	color_read_Clear@tmp^0,c
  8977   0128E6  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  8978                           
  8979                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8980   0128E8  0E00               	movlw	0
  8981   0128EA  ECF6  F094         	call	_I2C_2_Master_Read
  8982   0128EE  6E07               	movwf	??_color_read_Clear^0,c
  8983   0128F0  5007               	movf	??_color_read_Clear^0,w,c
  8984   0128F2  6E09               	movwf	(??_color_read_Clear+2)^0,c
  8985   0128F4  6A08               	clrf	(??_color_read_Clear+1)^0,c
  8986   0128F6  500A               	movf	color_read_Clear@tmp^0,w,c
  8987   0128F8  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  8988   0128FA  6E0A               	movwf	color_read_Clear@tmp^0,c
  8989   0128FC  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  8990   0128FE  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  8991   012900  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  8992                           
  8993                           ;color.c: 85:  I2C_2_Master_Stop();
  8994   012902  ECC8  F096         	call	_I2C_2_Master_Stop	;wreg free
  8995   012906                     
  8996                           ;color.c: 86:  return tmp;
  8997   012906  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  8998   01290A  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8999   01290E  0012               	return		;funcret
  9000   012910                     __end_of_color_read_Clear:
  9001                           	callstack 0
  9002                           
  9003 ;; *************** function _color_read_Blue *****************
  9004 ;; Defined at:
  9005 ;;		line 60 in file "color.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;		None
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  tmp             2    9[COMRAM] unsigned int 
  9010 ;; Return value:  Size  Location     Type
  9011 ;;                  2    4[COMRAM] unsigned int 
  9012 ;; Registers used:
  9013 ;;		wreg, status,2, status,0, cstack
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9019 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9020 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9021 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9022 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9023 ;;Total ram usage:        7 bytes
  9024 ;; Hardware stack levels used: 1
  9025 ;; Hardware stack levels required when called: 2
  9026 ;; This function calls:
  9027 ;;		_I2C_2_Master_Read
  9028 ;;		_I2C_2_Master_RepStart
  9029 ;;		_I2C_2_Master_Start
  9030 ;;		_I2C_2_Master_Stop
  9031 ;;		_I2C_2_Master_Write
  9032 ;; This function is called by:
  9033 ;;		_test
  9034 ;;		_calibration_routine
  9035 ;;		_reading_values
  9036 ;; This function uses a non-reentrant model
  9037 ;;
  9038                           
  9039                           	psect	text48
  9040   012910                     __ptext48:
  9041                           	callstack 0
  9042   012910                     _color_read_Blue:
  9043                           	callstack 27
  9044   012910                     
  9045                           ;color.c: 62:  unsigned int tmp;;color.c: 63:  I2C_2_Master_Start();
  9046   012910  ECCD  F096         	call	_I2C_2_Master_Start	;wreg free
  9047                           
  9048                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x00);
  9049   012914  0E52               	movlw	82
  9050   012916  ECC2  F096         	call	_I2C_2_Master_Write
  9051                           
  9052                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x1A);
  9053   01291A  0EBA               	movlw	186
  9054   01291C  ECC2  F096         	call	_I2C_2_Master_Write
  9055                           
  9056                           ;color.c: 66:  I2C_2_Master_RepStart();
  9057   012920  ECD2  F096         	call	_I2C_2_Master_RepStart	;wreg free
  9058                           
  9059                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
  9060   012924  0E53               	movlw	83
  9061   012926  ECC2  F096         	call	_I2C_2_Master_Write
  9062                           
  9063                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
  9064   01292A  0E01               	movlw	1
  9065   01292C  ECF6  F094         	call	_I2C_2_Master_Read
  9066   012930  6E07               	movwf	??_color_read_Blue^0,c
  9067   012932  5007               	movf	??_color_read_Blue^0,w,c
  9068   012934  6E0A               	movwf	color_read_Blue@tmp^0,c
  9069   012936  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  9070                           
  9071                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  9072   012938  0E00               	movlw	0
  9073   01293A  ECF6  F094         	call	_I2C_2_Master_Read
  9074   01293E  6E07               	movwf	??_color_read_Blue^0,c
  9075   012940  5007               	movf	??_color_read_Blue^0,w,c
  9076   012942  6E09               	movwf	(??_color_read_Blue+2)^0,c
  9077   012944  6A08               	clrf	(??_color_read_Blue+1)^0,c
  9078   012946  500A               	movf	color_read_Blue@tmp^0,w,c
  9079   012948  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  9080   01294A  6E0A               	movwf	color_read_Blue@tmp^0,c
  9081   01294C  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  9082   01294E  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  9083   012950  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  9084                           
  9085                           ;color.c: 70:  I2C_2_Master_Stop();
  9086   012952  ECC8  F096         	call	_I2C_2_Master_Stop	;wreg free
  9087   012956                     
  9088                           ;color.c: 71:  return tmp;
  9089   012956  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  9090   01295A  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  9091   01295E  0012               	return		;funcret
  9092   012960                     __end_of_color_read_Blue:
  9093                           	callstack 0
  9094                           
  9095 ;; *************** function _I2C_2_Master_Write *****************
  9096 ;; Defined at:
  9097 ;;		line 45 in file "i2c.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;  data_byte       1    wreg     unsigned char 
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;  data_byte       1    1[COMRAM] unsigned char 
  9102 ;; Return value:  Size  Location     Type
  9103 ;;                  1    wreg      void 
  9104 ;; Registers used:
  9105 ;;		wreg, status,2, status,0, cstack
  9106 ;; Tracked objects:
  9107 ;;		On entry : 0/0
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9114 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9115 ;;Total ram usage:        1 bytes
  9116 ;; Hardware stack levels used: 1
  9117 ;; Hardware stack levels required when called: 1
  9118 ;; This function calls:
  9119 ;;		_I2C_2_Master_Idle
  9120 ;; This function is called by:
  9121 ;;		_color_writetoaddr
  9122 ;;		_color_read_Red
  9123 ;;		_color_read_Green
  9124 ;;		_color_read_Blue
  9125 ;;		_color_read_Clear
  9126 ;; This function uses a non-reentrant model
  9127 ;;
  9128                           
  9129                           	psect	text49
  9130   012D84                     __ptext49:
  9131                           	callstack 0
  9132   012D84                     _I2C_2_Master_Write:
  9133                           	callstack 27
  9134                           
  9135                           ;incstack = 0
  9136                           ;I2C_2_Master_Write@data_byte stored from wreg
  9137   012D84  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  9138   012D86                     
  9139                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  9140   012D86  EC50  F096         	call	_I2C_2_Master_Idle	;wreg free
  9141   012D8A                     
  9142                           ;i2c.c: 48:   SSP2BUF = data_byte;
  9143   012D8A  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  9144   012D8E  0012               	return		;funcret
  9145   012D90                     __end_of_I2C_2_Master_Write:
  9146                           	callstack 0
  9147                           
  9148 ;; *************** function _I2C_2_Master_Stop *****************
  9149 ;; Defined at:
  9150 ;;		line 39 in file "i2c.c"
  9151 ;; Parameters:    Size  Location     Type
  9152 ;;		None
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;		None
  9155 ;; Return value:  Size  Location     Type
  9156 ;;                  1    wreg      void 
  9157 ;; Registers used:
  9158 ;;		wreg, status,2, status,0, cstack
  9159 ;; Tracked objects:
  9160 ;;		On entry : 0/0
  9161 ;;		On exit  : 0/0
  9162 ;;		Unchanged: 0/0
  9163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9168 ;;Total ram usage:        0 bytes
  9169 ;; Hardware stack levels used: 1
  9170 ;; Hardware stack levels required when called: 1
  9171 ;; This function calls:
  9172 ;;		_I2C_2_Master_Idle
  9173 ;; This function is called by:
  9174 ;;		_color_writetoaddr
  9175 ;;		_color_read_Red
  9176 ;;		_color_read_Green
  9177 ;;		_color_read_Blue
  9178 ;;		_color_read_Clear
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           	psect	text50
  9183   012D90                     __ptext50:
  9184                           	callstack 0
  9185   012D90                     _I2C_2_Master_Stop:
  9186                           	callstack 27
  9187   012D90                     
  9188                           ;i2c.c: 41:   I2C_2_Master_Idle();
  9189   012D90  EC50  F096         	call	_I2C_2_Master_Idle	;wreg free
  9190   012D94                     
  9191                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  9192   012D94  010E               	movlb	14	; () banked
  9193   012D96  85DA               	bsf	218,2,b	;volatile
  9194   012D98                     
  9195                           ; BSR set to: 14
  9196   012D98  0012               	return		;funcret
  9197   012D9A                     __end_of_I2C_2_Master_Stop:
  9198                           	callstack 0
  9199                           
  9200 ;; *************** function _I2C_2_Master_Start *****************
  9201 ;; Defined at:
  9202 ;;		line 27 in file "i2c.c"
  9203 ;; Parameters:    Size  Location     Type
  9204 ;;		None
  9205 ;; Auto vars:     Size  Location     Type
  9206 ;;		None
  9207 ;; Return value:  Size  Location     Type
  9208 ;;                  1    wreg      void 
  9209 ;; Registers used:
  9210 ;;		wreg, status,2, status,0, cstack
  9211 ;; Tracked objects:
  9212 ;;		On entry : 0/0
  9213 ;;		On exit  : 0/0
  9214 ;;		Unchanged: 0/0
  9215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9220 ;;Total ram usage:        0 bytes
  9221 ;; Hardware stack levels used: 1
  9222 ;; Hardware stack levels required when called: 1
  9223 ;; This function calls:
  9224 ;;		_I2C_2_Master_Idle
  9225 ;; This function is called by:
  9226 ;;		_color_writetoaddr
  9227 ;;		_color_read_Red
  9228 ;;		_color_read_Green
  9229 ;;		_color_read_Blue
  9230 ;;		_color_read_Clear
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           	psect	text51
  9235   012D9A                     __ptext51:
  9236                           	callstack 0
  9237   012D9A                     _I2C_2_Master_Start:
  9238                           	callstack 27
  9239   012D9A                     
  9240                           ;i2c.c: 29:   I2C_2_Master_Idle();
  9241   012D9A  EC50  F096         	call	_I2C_2_Master_Idle	;wreg free
  9242   012D9E                     
  9243                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  9244   012D9E  010E               	movlb	14	; () banked
  9245   012DA0  81DA               	bsf	218,0,b	;volatile
  9246   012DA2                     
  9247                           ; BSR set to: 14
  9248   012DA2  0012               	return		;funcret
  9249   012DA4                     __end_of_I2C_2_Master_Start:
  9250                           	callstack 0
  9251                           
  9252 ;; *************** function _I2C_2_Master_RepStart *****************
  9253 ;; Defined at:
  9254 ;;		line 33 in file "i2c.c"
  9255 ;; Parameters:    Size  Location     Type
  9256 ;;		None
  9257 ;; Auto vars:     Size  Location     Type
  9258 ;;		None
  9259 ;; Return value:  Size  Location     Type
  9260 ;;                  1    wreg      void 
  9261 ;; Registers used:
  9262 ;;		wreg, status,2, status,0, cstack
  9263 ;; Tracked objects:
  9264 ;;		On entry : 0/0
  9265 ;;		On exit  : 0/0
  9266 ;;		Unchanged: 0/0
  9267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9272 ;;Total ram usage:        0 bytes
  9273 ;; Hardware stack levels used: 1
  9274 ;; Hardware stack levels required when called: 1
  9275 ;; This function calls:
  9276 ;;		_I2C_2_Master_Idle
  9277 ;; This function is called by:
  9278 ;;		_color_read_Red
  9279 ;;		_color_read_Green
  9280 ;;		_color_read_Blue
  9281 ;;		_color_read_Clear
  9282 ;; This function uses a non-reentrant model
  9283 ;;
  9284                           
  9285                           	psect	text52
  9286   012DA4                     __ptext52:
  9287                           	callstack 0
  9288   012DA4                     _I2C_2_Master_RepStart:
  9289                           	callstack 27
  9290   012DA4                     
  9291                           ;i2c.c: 35:   I2C_2_Master_Idle();
  9292   012DA4  EC50  F096         	call	_I2C_2_Master_Idle	;wreg free
  9293   012DA8                     
  9294                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  9295   012DA8  010E               	movlb	14	; () banked
  9296   012DAA  83DA               	bsf	218,1,b	;volatile
  9297   012DAC                     
  9298                           ; BSR set to: 14
  9299   012DAC  0012               	return		;funcret
  9300   012DAE                     __end_of_I2C_2_Master_RepStart:
  9301                           	callstack 0
  9302                           
  9303 ;; *************** function _I2C_2_Master_Read *****************
  9304 ;; Defined at:
  9305 ;;		line 51 in file "i2c.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;  ack             1    wreg     unsigned char 
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  ack             1    2[COMRAM] unsigned char 
  9310 ;;  tmp             1    3[COMRAM] unsigned char 
  9311 ;; Return value:  Size  Location     Type
  9312 ;;                  1    wreg      unsigned char 
  9313 ;; Registers used:
  9314 ;;		wreg, status,2, status,0, cstack
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9322 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9323 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9324 ;;Total ram usage:        3 bytes
  9325 ;; Hardware stack levels used: 1
  9326 ;; Hardware stack levels required when called: 1
  9327 ;; This function calls:
  9328 ;;		_I2C_2_Master_Idle
  9329 ;; This function is called by:
  9330 ;;		_color_read_Red
  9331 ;;		_color_read_Green
  9332 ;;		_color_read_Blue
  9333 ;;		_color_read_Clear
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           	psect	text53
  9338   0129EC                     __ptext53:
  9339                           	callstack 0
  9340   0129EC                     _I2C_2_Master_Read:
  9341                           	callstack 27
  9342                           
  9343                           ; BSR set to: 14
  9344                           ;incstack = 0
  9345                           ;I2C_2_Master_Read@ack stored from wreg
  9346   0129EC  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  9347   0129EE                     
  9348                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  9349   0129EE  EC50  F096         	call	_I2C_2_Master_Idle	;wreg free
  9350   0129F2                     
  9351                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  9352   0129F2  010E               	movlb	14	; () banked
  9353   0129F4  87DA               	bsf	218,3,b	;volatile
  9354                           
  9355                           ;i2c.c: 56:   I2C_2_Master_Idle();
  9356   0129F6  EC50  F096         	call	_I2C_2_Master_Idle	;wreg free
  9357   0129FA                     
  9358                           ;i2c.c: 57:   tmp = SSP2BUF;
  9359   0129FA  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  9360                           
  9361                           ;i2c.c: 58:   I2C_2_Master_Idle();
  9362   0129FE  EC50  F096         	call	_I2C_2_Master_Idle	;wreg free
  9363   012A02                     
  9364                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  9365   012A02  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  9366   012A04  B4D8               	btfsc	status,2,c
  9367   012A06  EF07  F095         	goto	u4871
  9368   012A0A  EF0B  F095         	goto	u4870
  9369   012A0E                     u4871:
  9370   012A0E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9371   012A10  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  9372   012A12  EF0C  F095         	goto	u4888
  9373   012A16                     u4870:
  9374   012A16  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9375   012A18                     u4888:
  9376   012A18  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  9377   012A1A  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  9378   012A1C  010E               	movlb	14	; () banked
  9379   012A1E  51DA               	movf	218,w,b	;volatile
  9380   012A20  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9381   012A22  0BDF               	andlw	-33
  9382   012A24  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9383   012A26  6FDA               	movwf	218,b	;volatile
  9384   012A28                     
  9385                           ; BSR set to: 14
  9386                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  9387   012A28  89DA               	bsf	218,4,b	;volatile
  9388   012A2A                     
  9389                           ; BSR set to: 14
  9390                           ;i2c.c: 61:   return tmp;
  9391   012A2A  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  9392   012A2C                     
  9393                           ; BSR set to: 14
  9394   012A2C  0012               	return		;funcret
  9395   012A2E                     __end_of_I2C_2_Master_Read:
  9396                           	callstack 0
  9397                           
  9398 ;; *************** function _I2C_2_Master_Idle *****************
  9399 ;; Defined at:
  9400 ;;		line 22 in file "i2c.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;		None
  9403 ;; Auto vars:     Size  Location     Type
  9404 ;;		None
  9405 ;; Return value:  Size  Location     Type
  9406 ;;                  1    wreg      void 
  9407 ;; Registers used:
  9408 ;;		wreg, status,2, status,0
  9409 ;; Tracked objects:
  9410 ;;		On entry : 0/0
  9411 ;;		On exit  : 0/0
  9412 ;;		Unchanged: 0/0
  9413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9416 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9417 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9418 ;;Total ram usage:        1 bytes
  9419 ;; Hardware stack levels used: 1
  9420 ;; This function calls:
  9421 ;;		Nothing
  9422 ;; This function is called by:
  9423 ;;		_I2C_2_Master_Start
  9424 ;;		_I2C_2_Master_RepStart
  9425 ;;		_I2C_2_Master_Stop
  9426 ;;		_I2C_2_Master_Write
  9427 ;;		_I2C_2_Master_Read
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431                           	psect	text54
  9432   012CA0                     __ptext54:
  9433                           	callstack 0
  9434   012CA0                     _I2C_2_Master_Idle:
  9435                           	callstack 27
  9436   012CA0                     l167:
  9437   012CA0  010E               	movlb	14	; () banked
  9438   012CA2  B5D8               	btfsc	216,2,b	;volatile
  9439   012CA4  EF56  F096         	goto	u4371
  9440   012CA8  EF58  F096         	goto	u4370
  9441   012CAC                     u4371:
  9442   012CAC  EF50  F096         	goto	l167
  9443   012CB0                     u4370:
  9444   012CB0                     
  9445                           ; BSR set to: 14
  9446   012CB0  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  9447   012CB4  0E1F               	movlw	31
  9448   012CB6  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  9449   012CB8  A4D8               	btfss	status,2,c
  9450   012CBA  EF61  F096         	goto	u4381
  9451   012CBE  EF63  F096         	goto	u4380
  9452   012CC2                     u4381:
  9453   012CC2  EF50  F096         	goto	l167
  9454   012CC6                     u4380:
  9455   012CC6                     
  9456                           ; BSR set to: 14
  9457   012CC6  0012               	return		;funcret
  9458   012CC8                     __end_of_I2C_2_Master_Idle:
  9459                           	callstack 0
  9460                           
  9461 ;; *************** function _ADC_init *****************
  9462 ;; Defined at:
  9463 ;;		line 9 in file "ADC.c"
  9464 ;; Parameters:    Size  Location     Type
  9465 ;;		None
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;		None
  9468 ;; Return value:  Size  Location     Type
  9469 ;;                  1    wreg      void 
  9470 ;; Registers used:
  9471 ;;		wreg, status,2
  9472 ;; Tracked objects:
  9473 ;;		On entry : 0/0
  9474 ;;		On exit  : 0/0
  9475 ;;		Unchanged: 0/0
  9476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9481 ;;Total ram usage:        0 bytes
  9482 ;; Hardware stack levels used: 1
  9483 ;; This function calls:
  9484 ;;		Nothing
  9485 ;; This function is called by:
  9486 ;;		_main
  9487 ;; This function uses a non-reentrant model
  9488 ;;
  9489                           
  9490                           	psect	text55
  9491   012D52                     __ptext55:
  9492                           	callstack 0
  9493   012D52                     _ADC_init:
  9494                           	callstack 30
  9495   012D52                     
  9496                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  9497   012D52  8C86               	bsf	134,6,c	;volatile
  9498                           
  9499                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  9500   012D54  010E               	movlb	14	; () banked
  9501   012D56  8DB4               	bsf	180,6,b	;volatile
  9502                           
  9503                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  9504   012D58  010F               	movlb	15	; () banked
  9505   012D5A  9958               	bcf	88,4,b	;volatile
  9506   012D5C                     
  9507                           ; BSR set to: 15
  9508                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  9509   012D5C  0EFC               	movlw	-4
  9510   012D5E  1758               	andwf	88,f,b	;volatile
  9511                           
  9512                           ;ADC.c: 17:     ADPCH=0b101110;
  9513   012D60  0E2E               	movlw	46
  9514   012D62  6F5F               	movwf	95,b	;volatile
  9515   012D64                     
  9516                           ; BSR set to: 15
  9517                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  9518   012D64  9460               	bcf	96,2,c	;volatile
  9519   012D66                     
  9520                           ; BSR set to: 15
  9521                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  9522   012D66  8860               	bsf	96,4,c	;volatile
  9523   012D68                     
  9524                           ; BSR set to: 15
  9525                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  9526   012D68  8E60               	bsf	96,7,c	;volatile
  9527   012D6A                     
  9528                           ; BSR set to: 15
  9529   012D6A  0012               	return		;funcret
  9530   012D6C                     __end_of_ADC_init:
  9531                           	callstack 0
  9532                           
  9533                           	psect	rparam
  9534   000000                     
  9535                           	psect	config
  9536                           
  9537                           ;Config register CONFIG1L @ 0x300000
  9538                           ;	External Oscillator mode Selection bits
  9539                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  9540                           ;	Power-up default value for COSC bits
  9541                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  9542   300000                     	org	3145728
  9543   300000  AA                 	db	170
  9544                           
  9545                           ;Config register CONFIG1H @ 0x300001
  9546                           ;	unspecified, using default values
  9547                           ;	Clock Out Enable bit
  9548                           ;	CLKOUTEN = 0x1, unprogrammed default
  9549                           ;	Clock Switch Enable bit
  9550                           ;	CSWEN = 0x1, unprogrammed default
  9551                           ;	Fail-Safe Clock Monitor Enable bit
  9552                           ;	FCMEN = 0x1, unprogrammed default
  9553   300001                     	org	3145729
  9554   300001  FF                 	db	255
  9555                           
  9556                           ;Config register CONFIG3L @ 0x300004
  9557                           ;	WDT Period Select bits
  9558                           ;	WDTCPS = 0x1F, unprogrammed default
  9559                           ;	WDT operating mode
  9560                           ;	WDTE = OFF, WDT Disabled
  9561   300004                     	org	3145732
  9562   300004  9F                 	db	159
  9563                           
  9564                           ;Config register CONFIG3H @ 0x300005
  9565                           ;	unspecified, using default values
  9566                           ;	WDT Window Select bits
  9567                           ;	WDTCWS = 0x7, unprogrammed default
  9568                           ;	WDT input clock selector
  9569                           ;	WDTCCS = 0x7, unprogrammed default
  9570   300005                     	org	3145733
  9571   300005  FF                 	db	255
  9572                           tosu	equ	0xFFF
  9573                           tosh	equ	0xFFE
  9574                           tosl	equ	0xFFD
  9575                           stkptr	equ	0xFFC
  9576                           pclatu	equ	0xFFB
  9577                           pclath	equ	0xFFA
  9578                           pcl	equ	0xFF9
  9579                           tblptru	equ	0xFF8
  9580                           tblptrh	equ	0xFF7
  9581                           tblptrl	equ	0xFF6
  9582                           tablat	equ	0xFF5
  9583                           prodh	equ	0xFF4
  9584                           prodl	equ	0xFF3
  9585                           indf0	equ	0xFEF
  9586                           postinc0	equ	0xFEE
  9587                           postdec0	equ	0xFED
  9588                           preinc0	equ	0xFEC
  9589                           plusw0	equ	0xFEB
  9590                           fsr0h	equ	0xFEA
  9591                           fsr0l	equ	0xFE9
  9592                           wreg	equ	0xFE8
  9593                           indf1	equ	0xFE7
  9594                           postinc1	equ	0xFE6
  9595                           postdec1	equ	0xFE5
  9596                           preinc1	equ	0xFE4
  9597                           plusw1	equ	0xFE3
  9598                           fsr1h	equ	0xFE2
  9599                           fsr1l	equ	0xFE1
  9600                           bsr	equ	0xFE0
  9601                           indf2	equ	0xFDF
  9602                           postinc2	equ	0xFDE
  9603                           postdec2	equ	0xFDD
  9604                           preinc2	equ	0xFDC
  9605                           plusw2	equ	0xFDB
  9606                           fsr2h	equ	0xFDA
  9607                           fsr2l	equ	0xFD9
  9608                           status	equ	0xFD8

Data Sizes:
    Strings     283
    Constant    0
    Data        1
    BSS         184
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     86      86
    BANK0           160    128     157
    BANK1           256     52     208
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(2) Largest target is 8
		 -> colorCalibration(BANK1[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(2) Largest target is 8
		 -> colorCurrent(BANK1[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(2) Largest target is 8
		 -> colorCalibration(BANK1[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S2544$buffer	PTR unsigned char  size(2) Largest target is 0

    S2544$source	PTR const unsigned char  size(2) Largest target is 0

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), convert_rgb2hue@char1(BANK0[20]), convert_rgb2hue@char2(BANK0[20]), convert_rgb2hue@char3(BANK0[20]), 
		 -> send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), test@led_state(BANK1[50]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_1(CODE[12]), STR_10(CODE[29]), STR_12(CODE[27]), STR_14(CODE[34]), 
		 -> STR_16(CODE[25]), STR_18(CODE[21]), STR_19(CODE[12]), STR_2(CODE[14]), 
		 -> STR_3(CODE[13]), STR_4(CODE[17]), STR_5(CODE[19]), STR_6(CODE[17]), 
		 -> STR_7(CODE[17]), STR_8(CODE[24]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), convert_rgb2hue@char1(BANK0[20]), convert_rgb2hue@char2(BANK0[20]), convert_rgb2hue@char3(BANK0[20]), 
		 -> send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), test@led_state(BANK1[50]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    test@cCurr	PTR struct colors size(2) Largest target is 8
		 -> colorCurrent(BANK1[8]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 34
		 -> STR_1(CODE[12]), STR_10(CODE[29]), STR_12(CODE[27]), STR_14(CODE[34]), 
		 -> STR_16(CODE[25]), STR_18(CODE[21]), STR_19(CODE[12]), STR_2(CODE[14]), 
		 -> STR_3(CODE[13]), STR_4(CODE[17]), STR_5(CODE[19]), STR_6(CODE[17]), 
		 -> STR_7(CODE[17]), STR_8(CODE[24]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 34
		 -> STR_1(CODE[12]), STR_10(CODE[29]), STR_12(CODE[27]), STR_14(CODE[34]), 
		 -> STR_16(CODE[25]), STR_18(CODE[21]), STR_19(CODE[12]), STR_2(CODE[14]), 
		 -> STR_3(CODE[13]), STR_4(CODE[17]), STR_5(CODE[19]), STR_6(CODE[17]), 
		 -> STR_7(CODE[17]), STR_8(CODE[24]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_1(CODE[12]), STR_10(CODE[29]), STR_12(CODE[27]), STR_14(CODE[34]), 
		 -> STR_16(CODE[25]), STR_18(CODE[21]), STR_19(CODE[12]), STR_2(CODE[14]), 
		 -> STR_3(CODE[13]), STR_4(CODE[17]), STR_5(CODE[19]), STR_6(CODE[17]), 
		 -> STR_7(CODE[17]), STR_8(CODE[24]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_test
    _test->_convert_rgb2hue
    _send2USART->_sprintf
    _convert_rgb2hue->_sprintf
    ___flsub->___fladd
    ___fldiv->___flsub
    _decision->_moveGreen
    _decision->_moveRed
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _turnRight->_setMotorPWM
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _test->_convert_rgb2hue

Critical Paths under _main in BANK1

    _main->_test

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0  115093
                                             82 COMRAM     4     4      0
                           _ADC_init
                _calibration_routine
                   _color_click_init
                           _decision
                    _initDCmotorsPWM
                         _initUSART4
                               _test
 ---------------------------------------------------------------------------------
 (1) _test                                                56    54      2   59065
                                             78 COMRAM     4     2      2
                                              0 BANK1     52    52      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _send2USART                                          52    50      2   12726
                                             72 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    134   130      4   32706
                                             72 COMRAM     6     2      4
                                              0 BANK0    128   128      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     836
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4727
                                             16 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    3802
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    2513
                                              0 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1346
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8    1130
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2903
                                             24 COMRAM    25    17      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _decision                                             2     0      2   41691
                                             31 COMRAM     2     0      2
                          _moveGreen
                            _moveRed
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              4     2      2   20664
                                             27 COMRAM     4     2      2
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2    9910
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    4297
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            4     2      2   20844
                                             27 COMRAM     4     2      2
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   10090
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    4477
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   10450
                                             23 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (4) _stop                                                 3     1      2    5129
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4297
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _setMotorPWM                                          5     4      1    3621
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     841
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 24    22      2   13723
                                             72 COMRAM     4     2      2
                                              0 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    15      8   11439
                                             51 COMRAM    21    13      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             6     2      4    8607
                                             45 COMRAM     6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           13    10      3    8119
                                             33 COMRAM    12     9      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1452
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1012
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             22 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             14 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              8 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2    1086
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _decision
     _moveGreen
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _left90
         _stop
         _turnLeft
           _setMotorPWM
     _moveRed
       _backHalf
       _right90
         _stop
         _turnRight
           _setMotorPWM
   _initDCmotorsPWM
   _initUSART4
   _test
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
         ___flsub (ARG)
           ___fladd
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
       _sendStringSerial4
       _sprintf
     _send2USART
       _sendStringSerial4
       _sprintf
     _sendStringSerial4
     _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     34      D0       7       81.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     80      9D       5       98.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     56      56       1       90.5%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllhll     37      0       0      45        0.0%
BITBIGSFRlllhhl     31      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllllh     20      0       0      48        0.0%
BITBIGSFRllllll     1E      0       0      50        0.0%
BITBIGSFRhhll       17      0       0      36        0.0%
BITBIGSFRlllhhh     14      0       0      40        0.0%
BITBIGSFRllllll     11      0       0      51        0.0%
BITBIGSFRllllll      F      0       0      58        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRlllllh      C      0       0      49        0.0%
BITBIGSFRllllll      9      0       0      57        0.0%
BITBIGSFRlllhll      8      0       0      46        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRlllhhh      6      0       0      42        0.0%
BITBIGSFRllllll      5      0       0      54        0.0%
BITBIGSFRhlhh        5      0       0      37        0.0%
BITBIGSFRlllhhh      3      0       0      41        0.0%
BITBIGSFRllllll      3      0       0      53        0.0%
BITBIGSFRlllhlh      2      0       0      44        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      52        0.0%
BITBIGSFRhllh        1      0       0      38        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRllllh       1      0       0      47        0.0%
BITBIGSFRllh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C3      61        0.0%
DATA                 0      0     1C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Mar 12 23:09:20 2024

               _color_read_Red 2820                   ___fldiv@aexp 0031                   ___fldiv@bexp 0030  
           fullSpeedBack@power 0016                   ___fldiv@sign 0029                _color_read_Blue 2910  
                           l61 2B18                             l70 28BE                             l64 2D32  
                           l73 295E                             l90 0360                             l67 286E  
                           l76 290E                             l84 02E6                             l86 02F6  
                           l96 03E8                             l88 0350                             l98 03F8  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003             convert_rgb2hue@max 00CC  
           convert_rgb2hue@hue 00D0             convert_rgb2hue@min 00C4               _color_read_Clear 28C0  
             _color_read_Green 2870                            l100 0452                            l110 0778  
                          l102 0462                            l111 0794                            l120 14A6  
                          l122 14B4                            l106 0700                            l114 1798  
                          l123 150C                            l125 151A                            l117 1444  
                          l126 1572                            l119 1452                            l128 1580  
                          l129 15E0                            l137 281E                            l170 2CC6  
                          l402 2B7E                            l164 2C9E                            l173 2DA2  
                          l405 2BE2                            l182 2D8E                            l350 1DC0  
                          l167 2CA0                            l343 254E                            l176 2DAC  
                          l185 2A2C                            l282 2D6A                            l179 2D98  
                          l363 26D8                            l381 2BB0                            l358 25DC  
                          l534 2CEC                            l471 2D50                            l480 2D6E  
                          l384 2C14                            l368 265A                            l537 2D12  
                          l378 274E                            l802 1F84                            l483 2D82  
                          l396 2C74                            l807 1FCA                            l489 2AE4  
                          l834 1EC6                            l781 237E                            l768 215E  
                          l796 2428                            _abs 2B1A                            _pad 242A  
                          _hue 0164            convert_rgb2hue@cMax 0049                   ___awmod@sign 0006  
          convert_rgb2hue@diff 00C8                            wreg 0FE8                   ___flmul@aexp 000E  
                 ___flmul@bexp 0013                   ___flmul@sign 000D                   ___flmul@temp 0018  
                 ___flmul@prod 0014                   ___fltol@exp1 000A                           l1121 1278  
                         l1130 12BE                           l1035 27C2                           l1107 29A4  
                         ?_abs 0007                           l1028 27BA                           l1132 1336  
                         l1124 123C                           l1133 1324                           l1206 18E4  
                         l1215 2A6C                           l1119 1418                           l1151 0D1A  
                         l1304 2218                           l1312 2AAC                           l1240 24BE  
                         l1160 0F88                           l1161 0F76                           l1065 0984  
                         l1082 0A9E                           l1074 0C54                           l1066 0972  
                         l1315 2DAE                           l1235 2460                           l1243 1B54  
                         l1155 107E                           l1091 0B6E                           l1067 0938  
                         l1260 22C6                           l1092 0B5C                           l1238 249E  
                         l1158 0F10                           l1256 1C6C                           l1264 22CE  
                         l1168 1040                           l1192 17F0                           l1195 194C  
                         l1292 2B4C                           l1285 29EA                           l1279 1AF4  
                         l1199 1888                           l1289 2B34                           l5001 0920  
                         l5011 0964                           l5003 0930                           l5101 0C14  
                         l5013 0966                           l5005 0946                           l5111 0C34  
                         l5103 0C18                           l5031 09EE                           l5023 09B6  
                         l5015 0970                           l5007 0952                           l5121 29B2  
                         l5201 108C                           l5113 0C42                           l5105 0C26  
                         l5033 09F2                           l5025 09C6                           l5017 0992  
                         l5041 0A12                           l5009 0956                           l5131 2D9E  
                         l5123 29C2                           l5211 10CC                           l5203 109A  
                         l5115 0C44                           l5107 0C2C                           l5043 0A38  
                         l5051 0A8E                           l5035 0A00                           l5027 09D4  
                         l5019 09A2                           l5141 2DA4                           l5133 2D86  
                         l5125 29E2                           l5301 131C                           l5221 10F2  
                         l5213 10CE                           l5205 109C                           l5109 0C2E  
                         l5061 0AE2                           l5053 0AB4                           l5045 0A6C  
                         l5037 0A02                           l5029 09E2                           l5151 2A02  
                         l5143 2DA8                           l5135 2D8A                           l5119 29A6  
                         l5311 138A                           l5231 1132                           l5223 1100  
                         l5207 10AC                           l5215 10D6                           l5071 0B0C  
                         l5063 0AF0                           l5055 0AC4                           l5047 0A6E  
                         l5039 0A0C                           l5153 2A28                           l5145 29EE  
                         l5129 2D9A                           l5137 2D90                           l4601 214E  
                         l5161 2A3A                           l5321 13F4                           l5305 1346  
                         l5313 138E                           l5241 1172                           l5233 1134  
                         l5225 1102                           l5217 10E6                           l5209 10BC  
                         l5401 0DFC                           l5081 0B3E                           l5073 0B1C  
                         l5065 0AF2                           l5049 0A7E                           l5155 2A2A  
                         l5147 29F2                           l5139 2D94                           l5171 2AAE  
                         l4603 2156                           l4611 22E2                           l5163 2A42  
                         l5323 13F8                           l5315 13A8                           l5307 1352  
                         l5251 11A2                           l5243 117A                           l5227 1112  
                         l5235 113C                           l5219 10EC                           l5411 0E6A  
                         l5403 0E16                           l5091 0B98                           l5083 0B54  
                         l5067 0B00                           l5059 0AD8                           l5075 0B1E  
                         l5149 29FA                           l5173 2AB2                           l4621 2316  
                         l4613 22EA                           l4541 218A                           l4701 1B50  
                         l5165 2A4A                           l5181 2B80                           l5325 1406  
                         l5317 13BE                           l5309 1360                           l5261 11E0  
                         l5253 11A2                           l5245 117E                           l5237 114C  
                         l5229 1122                           l5501 1F64                           l5421 0F00  
                         l5413 0E94                           l5405 0E26                           l5341 0C70  
                         l5093 0BD2                           l5069 0B08                           l5077 0B2C  
                         ?_pad 000F                           l5175 2AC0                           l4631 2352  
                         l4623 231E                           l4615 22EE                           l4607 22D0  
                         l4543 21A6                           l4535 2160                           l4551 2A7A  
                         l4711 1BA2                           l4703 1B5C                           l5167 2A5E  
                         l5159 2A2E                           l5191 2C08                           l5183 2B8C  
                         l5327 140C                           l5319 13D8                           l5271 122C  
                         l5263 11F0                           l5239 1162                           l5503 1F72  
                         l5431 0F40                           l5423 0F0E                           l5415 0ECA  
                         l5407 0E42                           l5351 0CA8                           l5343 0C72  
                         l5087 0B7E                           l5095 0BD4                           l5079 0B30  
                         l5511 1DC2                           l5177 2AC4                           l4633 2358  
                         l4625 2326                           l4617 22FC                           l4609 22D4  
                         l4545 21D8                           l4537 2170                           l4553 2A88  
                         l4721 1C00                           l4713 1BA8                           l4705 1B66  
                         l4801 1A90                           l6081 19DE                           l5601 2C76  
                         l5193 2C46                           l5185 2BA4                           l5329 140E  
                         l5281 1276                           l5273 123A                           l5265 1200  
                         l5257 11B6                           l5249 1192                           l5505 1FC2  
                         l5441 0FB2                           l5433 0F6E                           l5425 0F20  
                         l5417 0ED8                           l5409 0E4E                           l5361 0CD4  
                         l5353 0CB8                           l5345 0C82                           l5337 0C56  
                         l5097 0BE4                           l5089 0B8A                           l5521 1E18  
                         l5513 1DD8                           l5179 2ACC                           l4571 20BA  
                         l4563 209C                           l4627 2334                           l4635 235E  
                         l4619 2304                           l4539 2180                           l4555 2A8C  
                         l4651 246C                           l4643 242A                           l4731 1C50  
                         l4723 1C1A                           l4707 1B6C                           l4715 1BC4  
                         l4803 1AAA                           l4811 1ACE                           l5611 2C8C  
                         l5603 2C80                           l5195 2C52                           l5187 2BE4  
                         l5291 12BC                           l5283 1288                           l5275 1246  
                         l5267 1208                           l5259 11D0                           l5507 1FC8  
                         l5451 1028                           l5443 0FDC                           l5427 0F2E  
                         l5419 0EF6                           l5371 0D2A                           l5363 0CE4  
                         l5355 0CBE                           l5347 0C92                           l5339 0C62  
                         l5099 0BF4                           l5523 1E28                           l4821 2CA0  
                         l5621 2870                           l4581 20EE                           l4573 20C8  
                         l4565 20A0                           l4637 236E                           l4629 234A  
                         l4661 2B28                           l4549 2A6E                           l4653 247C  
                         l4645 243A                           l4717 1BDE                           l4725 1C2A  
                         l4709 1B9E                           l4557 2CEE                           l4741 2254  
                         l5605 2C86                           l5613 2D16                           l4901 26FA  
                         l5197 2C68                           l5189 2BF0                           l5285 129E  
                         l5293 12CE                           l5277 1264                           l5269 1218  
                         l5453 1044                           l5461 106A                           l5437 0F98  
                         l5445 0FE0                           l5429 0F32                           l5381 0D64  
                         l5373 0D3A                           l5365 0CF4                           l5357 0CC4  
                         l5349 0CA2                           l5533 1E52                           l5525 1E2C  
                         l5517 1DEC                           l5701 05AE                           l4823 2CB0  
                         l5623 28B6                           l5615 2820                           l4591 2128  
                         l4583 20F6                           l4575 20D0                           l4567 20AE  
                         l4639 2376                           l4655 2480                           l4647 244A  
                         l4727 1C3A                           l4719 1BF0                           l4559 2D0A  
                         l4743 2270                           l4735 221A                           l4807 1ABE  
                         l5607 2C88                           l4671 277A                           l4663 2750  
                         l4751 1C88                           l4911 2732                           l4903 270E  
                         l4831 2572                           l5295 12DC                           l5287 12A4  
                         l5279 1266                           l5199 1080                           l5463 106E  
                         l5455 1054                           l5447 0FFA                           l5439 0FA4  
                         l5391 0DB6                           l5383 0D7A                           l5367 0D04  
                         l5359 0CD2                           l5551 1EB6                           l5543 1E7A  
                         l5535 1E5C                           l5527 1E3A                           l5519 1E16  
                         l5711 0744                           l5703 063E                           l5633 28C0  
                         l5617 2866                           l4913 2D6E                           l4593 2130  
                         l4585 20FE                           l4577 20D4                           l4569 20B6  
                         l4657 24AE                           l4649 2458                           l4729 1C40  
                         l4745 2290                           l4737 2222                           l5801 149C  
                         l5609 2C8A                           l4681 27AE                           l4673 2788  
                         l4665 2758                           l4761 1D44                           l4753 1CD6  
                         l4905 2716                           l4833 2588                           l4841 25B0  
                         l4825 2550                           l5721 2B5A                           l5297 12E0  
                         l5289 12AE                           l5481 23FC                           l5473 2380  
                         l5457 1062                           l5449 100E                           l5393 0DC4  
                         l5385 0D86                           l5377 0D4E                           l5369 0D0A  
                         l4921 07B0                           l5545 1E86                           l5537 1E66  
                         l5561 1800                           l5705 0670                           l5641 0012  
                         l5627 2910                           l5635 2906                           l4915 2D7E  
                         l4595 2132                           l4587 210C                           l4579 20DC  
                         l4659 2B1A                           l4691 1B16                           l4739 2248  
                         l4747 229C                           l4771 198E                           l5811 1502  
                         l5803 14B6                           l5731 2AE6                           l4683 27B4  
                         l4675 278E                           l4667 276A                           l4763 1D84  
                         l4755 1CE8                           l4907 271E                           l4843 25C6  
                         l4835 2590                           l4827 2554                           l4851 2686  
                         l5723 2B72                           l5299 12EE                           l5483 2420  
                         l5475 23AE                           l5491 1EF6                           l5459 1064  
                         l5395 0DD0                           l5387 0D9E                           l5379 0D5A  
                         l4931 07E4                           l4923 07B2                           l5467 2960  
                         l5547 1E96                           l5571 183E                           l5563 1816  
                         l5555 179C                           l5707 0700                           l5651 0118  
                         l5643 0044                           l5715 2CC8                           l5629 2956  
                         l4597 2138                           l4589 2112                           l4693 1B26  
                         l4685 1AF6                           l4773 1992                           l4765 194E  
                         l5821 1568                           l5813 151C                           l5805 14CE  
                         l5733 2AEA                           l4677 27A4                           l4669 2772  
                         l4757 1CEC                           l4749 1C6E                           l4909 272E  
                         l4837 2598                           l4829 256A                           l4861 26A6  
                         l4845 265C                           l5725 2BB2                           l5485 2426  
                         l5477 23BE                           l5493 1F06                           l5397 0DE0  
                         l5389 0DAA                           l4941 0816                           l4925 07C2  
                         l4933 07EC                           l4917 0796                           l5469 2970  
                         l5549 1EA6                           l5581 18C6                           l5573 1870  
                         l5557 17AC                           l5709 0734                           l5661 01BE  
                         l5653 014E                           l5645 0076                           l5717 2CE2  
                         l5741 15E2                           l4599 213E                           l4695 1B2C  
                         l4687 1AFA                           l4791 1A20                           l4783 19B6  
                         l4775 199A                           l4767 1974                           l5831 15BA  
                         l5823 1586                           l5815 1534                           l5807 14E6  
                         l5735 2AF4                           l4679 27AC                           l4759 1D2A  
                         l4839 25A0                           l4863 26AE                           l4847 2676  
                         l5727 2BBE                           l4871 25F8                           l5719 2B4E  
                         l5479 23EC                           l5495 1F34                           l5399 0DEC  
                         l4951 084C                           l4943 081C                           l4935 07FC  
                         l4927 07D2                           l4919 07A2                           l5591 191C  
                         l5583 18D4                           l5575 1872                           l5567 182A  
                         l5559 17BA                           l5671 026E                           l5663 01C8  
                         l5655 0170                           l5647 00AC                           l5639 0000  
                         l5751 1644                           l5743 15E8                           l4697 1B3C  
                         l4689 1B0E                           l4793 1A2A                           l4777 199E  
                         l4785 19EC                           l4769 1980                           l5833 15BC  
                         l5825 159E                           l5817 154C                           l5809 14E8  
                         l5737 2B04                           l4865 26BE                           l4857 268E  
                         l4849 267E                           l5729 2BD6                           l4881 2610  
                         l4873 2600                           l5841 27E6                           l5497 1F44  
                         l5489 1EC8                           l4961 0888                           l4953 085C  
                         l4945 082A                           l4937 0802                           l4929 07E2  
                         l5593 192C                           l5585 18F2                           l5577 187E  
                         l5569 1832                           l5681 0370                           l5673 02A0  
                         l5665 01D2                           l5657 0192                           l5649 00E2  
                         l5761 16A8                           l5753 1646                           l5745 1600  
                         l5921 1FD0                           l5851 2D64                           l4699 1B48  
                         l4795 1A38                           l4787 19FC                           l4779 19AE  
                         l5835 15D6                           l5827 15B6                           l5819 154E  
                         l5739 2B0E                           l4867 26C2                           l4859 269E  
                         l4891 2644                           l4883 2620                           l4875 2608  
                         l5843 27FC                           l5499 1F52                           l4971 08A6  
                         l4963 0896                           l4955 085E                           l4947 082C  
                         l4939 0814                           l5595 193A                           l5587 18F4  
                         l5579 18BA                           l5691 0472                           l5683 03A2  
                         l5675 02D2                           l5667 0206                           l5659 01B4  
                         l5771 170A                           l5763 16AA                           l5755 1648  
                         l5747 162E                           l5931 1FEA                           l5923 1FD4  
                         l5853 2D66                           l4797 1A58                           l4789 1A10  
                         l5829 15B8                           l4893 26DA                           l4885 2628  
                         l4869 25DE                           l5845 2812                           l5837 27C4  
                         l5861 2D40                           l4981 08BA                           l4973 08AA  
                         l4965 089A                           l4949 083C                           l4957 0866  
                         l5597 193C                           l5589 18F8                           l5693 04D8  
                         l5685 03D4                           l5677 030A                           l5669 023A  
                         l5781 175C                           l5773 170C                           l5765 16AC  
                         l5757 1660                           l5749 1642                           l5941 200A  
                         l5933 1FEE                           l5925 1FD8                           l5855 2D68  
                         l5847 2D52                           l4799 1A78                           l5791 143A  
                         l4895 26F2                           l4887 2630                           l5839 27DA  
                         l5871 24D0                           l5863 2D4A                           l4991 08CE  
                         l4983 08BE                           l4975 08AE                           l4967 089E  
                         l4959 0876                           l5695 04EE                           l5687 040C  
                         l5679 033C                           l5783 1790                           l5775 170E  
                         l5767 16C4                           l5759 16A6                           l5951 2030  
                         l5943 200E                           l5935 1FF2                           l5927 1FD8  
                         l5919 1FCC                           l5849 2D5C                           l5793 1454  
                         l4889 2640                           l5881 252A                           l5873 24F6  
                         l5865 2D4C                           l5857 2D34                           l4993 08D2  
                         l4985 08C2                           l4977 08B2                           l4969 08A2  
                         l5697 0520                           l5689 043E                           l5777 1710  
                         l5769 16F2                           l5961 203A                           l5953 2032  
                         l5945 2012                           l5937 1FFA                           l5929 1FE4  
                         l5795 146C                           l5787 141A                           l5891 254C  
                         l5883 2534                           l5875 24FA                           l5867 2D4E  
                         l5859 2D3E                           l4987 08C6                           l4979 08B6  
                         l4995 08D6                           l5699 057C                           l5779 1744  
                         l5971 2046                           l5963 203C                           l5955 2034  
                         l5947 2016                           l5939 2002                           l5797 1480  
                         l5789 1420                           l5885 2536                           l5877 251E  
                         l5869 24C0                           l4997 08DA                           l4989 08CA  
                         l5981 2064                           l5973 2048                           l5965 203E  
                         l5957 2036                           l5949 202E                           l5799 1482  
                         l5887 2540                           l5879 2528                           l4999 0904  
                         l5983 2068                           l5975 205E                           l5967 2040  
                         l5959 2038                           l5889 2542                           l5985 2074  
                         l5977 2060                           l5969 2044                           l5987 2088  
                         l5979 2062                           STR_1 FFF0                           STR_2 FFC9  
                         STR_3 FFD7                           STR_4 FF96                           STR_5 FF83  
                         STR_6 FFB8                           STR_7 FFA7                           STR_8 FF56  
                         STR_9 FFFC                           u4000 20EE                   _BAUD4CONbits 0EE9  
                         u4001 20EA                           u4010 210C                           u4011 2108  
                         u4020 2128                           u4100 243A                           u4021 2124  
                         u4101 2436                           u4030 214E                           u4110 2458  
                         u4031 214A                           u4111 2454                           u4040 22E2  
                         u4120 249E                           u4200 1B26                           u5000 1264  
                         u4041 22DE                           u4121 249A                           u4201 1B22  
                         u5001 1260                           u4050 22FC                           u4130 24AE  
                         u4210 1B3C                           u5010 1288                           _T2PR 0FBC  
                         u4051 22F8                           u4131 24AA                           u4211 1B38  
                         u5011 1284                           u4060 2316                           u4140 2B28  
                         u4220 1BDE                           u4300 1C88                           u5100 13A8  
                         u5020 129E                           u4061 2312                           u4141 2B24  
                         u4221 1BDA                           u4301 1C84                           u5101 13A4  
                         u5021 129A                           u4070 2334                           u4230 1BF0  
                         u4150 276A                           u4310 1D44                           u5110 13D8  
                         u5030 12BC                           u4071 2330                           u4231 1BEC  
                         u4151 2766                           u4311 1D40                           u5111 13D4  
                         u5031 12B8                           u4080 234A                           u4240 1C00  
                         u4320 1974                           u4160 2788                           u4400 2588  
                         u5120 1406                           u5040 12DC                           u5200 0D3A  
                         u4081 2346                           u4241 1BFC                           u4321 1970  
                         u4161 2784                           u4401 2584                           u5121 1402  
                         u5041 12D8                           u5201 0D36                           u4090 236E  
                         u4250 1C1A                           u4330 19FC                           u4170 27A4  
                         u4410 25C6                           u5050 12EE                           u5210 0EB4  
                         u5130 0C70                           u4091 236A                           u4251 1C16  
                         u4331 19F8                           u4171 27A0                           u4411 25C2  
                         u5051 12EA                           u5131 0C6C                           u4260 1C2A  
                         u4180 1B0A                           u4340 1A20                           u4420 25DC  
                         u5060 131C                           u5300 1028                           u5220 0F0E  
                         u5140 0C82                           u4500 0814                           u4261 1C26  
                         u4181 1B04                           u4341 1A1C                           u4421 25D8  
                         u5061 1318                           u5301 1024                           u5221 0F0A  
                         u5141 0C7E                           u4501 0810                           u4270 1C3A  
                         u4190 1B0C                           u4350 1A58                           u4430 26D8  
                         u5070 1332                           u5310 1062                           u5230 0F2E  
                         u5150 0C92                           u4510 082A                           u4271 1C36  
                         u4351 1A54                           u4431 26D4                           u5071 132E  
                         u5311 105E                           u5231 0F2A                           u5215 0EAA  
                         u5151 0C8E                           u4511 0826                           u4280 2248  
                         u4360 1A78                           u4440 265A                           u5080 1346  
                         u5320 23AE                           u5240 0F40                           u5160 0CD2  
                         u4600 0964                           u4520 083C                           u5400 1DD8  
                         u4281 2244                           u4361 1A74                           u4441 2656  
                         u5081 1342                           u5321 23AA                           u5241 0F3C  
                         u5161 0CCE                           u4601 0960                           u4521 0838  
                         u5401 1DD4                           u4370 2CB0                           u4290 22C6  
                         u4450 274E                           u5090 1360                           u5330 23EC  
                         u5250 0F6E                           u5170 0CE4                           u4610 0984  
                         u4530 084C                           u5410 1E0C                           u4371 2CAC  
                         u4291 22C2                           u4451 274A                           u5091 135C  
                         u5331 23E8                           u5251 0F6A                           u5171 0CE0  
                         u4611 0980                           u4531 0848                           u4380 2CC6  
                         u4460 2D7E                           u5340 2420                           u5260 0F84  
                         u5180 0CF4                           u4700 0AC4                           u4620 0992  
                         u4540 0888                           u5420 1E3A                           u5500 186C  
                         u4381 2CC2                           u4461 2D7A                           u5341 241C  
                         u5261 0F80                           u5181 0CF0                           u4701 0AC0  
                         u4621 098E                           u4541 0884                           u5421 1E36  
                         u5501 1868                           u4390 256A                           u5350 1EF6  
                         u5270 0F98                           u5190 0D2A                           u4710 0AF0  
                         u4630 09A2                           u4550 0896                           u4470 07B0  
                         u5430 1E4E                           u5510 18B6                           u4391 2566  
                         u5351 1EF2                           u5271 0F94                           u5191 0D26  
                         u4711 0AEC                           u4631 099E                           u4551 0892  
                         u4471 07AC                           u5431 1E4A                           u5415 1E02  
                         u5511 18B2                           u5360 1F34                           u5280 0FB2  
                         u4800 0BD2                           u4720 0B00                           u4640 09D4  
                         u4560 0904                           u4480 07C2                           u5440 1E76  
                         u5520 18D4                           u5600 03A2                           u5361 1F30  
                         u5281 0FAE                           u4801 0BCE                           u4721 0AFC  
                         u4641 09D0                           u4561 0900                           u4481 07BE  
                         u5441 1E72                           u5521 18D0                           u5601 039E  
                         u3930 2170                           u5370 1F52                           u5290 0FFA  
                         u4810 0BE4                           u4730 0B1C                           u4650 09E2  
                         u4570 091C                           u4490 07D2                           u5450 1E96  
                         u5530 18E4                           u5610 03D4                           u3931 216C  
                         u5371 1F4E                           u5291 0FF6                           u4811 0BE0  
                         u4731 0B18                           u4651 09DE                           u4571 0916  
                         u4491 07CE                           u5451 1E92                           u5531 18E0  
                         u5611 03D0                           u3940 2180                           u4900 109A  
                         u5380 1F72                           u4820 0BF4                           u4740 0B2C  
                         u4660 0A00                           u4580 091E                           u5460 1EA6  
                         u5540 18F2                           u5620 043E                           u5700 16E6  
                         u3941 217C                           u4901 1096                           u5381 1F6E  
                         u4821 0BF0                           u4741 0B28                           u4661 09FC  
                         u5461 1EA2                           u5541 18EE                           u5621 043A  
                         u5701 16DE                           u3950 21A6                           u5710 1452  
                         u4910 10AC                           u5390 1FC2                           u4830 0C14  
                         u4750 0B3E                           u4670 0A38                           u4590 0946  
                         u5550 192C                           u5470 17AC                           u5630 04D8  
                         u3951 21A2                           u5711 144E                           u4911 10A8  
                         u5391 1FBE                           u4831 0C10                           u4751 0B3A  
                         u4671 0A34                           u4591 0942                           u5551 1928  
                         u5471 17A8                           u5631 04D4                           u3960 21D8  
                         u5720 14B4                           u4920 10BC                           u4840 0C26  
                         u4760 0B54                           u4680 0A7E                           u5560 193A  
                         u5480 17BA                           u5640 0520                           u3961 21D4  
                         u5721 14B0                           u4921 10B8                           u4841 0C22  
                         u4761 0B50                           u4681 0A7A                           u5561 1936  
                         u5481 17B6                           u5641 051C                           u3970 2AAC  
                         u5730 151A                           u4930 1100                           u4850 0C42  
                         u4770 0B6A                           u4690 0AB4                           u5490 1816  
                         u5650 05AE                           u5570 02A0                           u3971 2AA8  
                         u5731 1516                           u4931 10FC                           u4851 0C3E  
                         u4771 0B66                           u4691 0AB0                           u5491 1812  
                         u5651 05AA                           u5571 029C                           u3980 20AE  
                         u4860 29E2                           u5740 1580                           u4940 1112  
                         u4780 0B7E                           u5660 0670                           u5580 02D2  
                         u5708 16E8                           u3981 20AA                           u4861 29DE  
                         u5741 157C                           u4941 110E                           u4781 0B7A  
                         u5661 066C                           u5581 02CE                           u4870 2A16  
                         u3990 20C8                           u5750 27DA                           u4950 1122  
                         u4790 0B98                           u5670 0744                           u5590 033C  
                         u4871 2A0E                           u3991 20C4                           u5751 27D6  
                         u4951 111E                           u4791 0B94                           u5671 0740  
                         u5591 0338                           u5807 2052                           u5760 27FC  
                         u4960 1162                           u5680 1622                           u5761 27F8  
                         u4961 115E                           u5681 161A                           u5817 15F2  
                         u4890 2AE4                           u5770 2812                           u4970 11A2  
                         u5690 1682                           u4891 2AE0                           u5907 26B4  
                         u5771 280E                           u4971 119E                           u5691 167A  
                         u5827 1652                           u4980 1218                           u5917 2C5C  
                         u4981 1214                           u5837 16B6                           u4990 123A  
                         u5927 25A6                           u4991 1236                           u5847 171A  
                         u4888 2A18                           u5688 1624                           u5937 2724  
                         u5857 2B64                           u5698 1684                           u5947 2AFA  
                         u5867 2B96                           u5957 145E                           u5877 2636  
                         u5967 14C0                           u5887 2BC8                           u5977 1526  
                         u5897 2BFA                           u5987 1590                           u5997 2AC6  
                         abs@a 0007                           _dbuf 016C                           _main 1FCC  
                         _dtoa 1AF6           convert_rgb2hue@cCurr 004B                           _prec 00E2  
                         _test 15E2                           pad@i 0015                           pad@p 0012  
                         fsr1h 0FE2                           fsr2h 0FDA                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           _stop 2550  
         convert_rgb2hue@char1 0060           convert_rgb2hue@char2 0074           convert_rgb2hue@char3 0088  
                         prodh 0FF4                           prodl 0FF3                           start 0000  
             __end_of_ADC_init 2D6C                ___fldiv@new_exp 002A         __end_of_color_read_Red 2870  
                 ___param_bank 0000                          ??_abs 0009                          ??_pad 0014  
                ___fltol@sign1 0009                __end_of___fladd 0C56                          ?_main 0001  
                        ?_dtoa 0017                          _ADPCH 0F5F                __end_of___fldiv 141A  
              __end_of___awdiv 2160                          STR_10 FF05                          STR_11 FFFC  
                        STR_12 FF22                          STR_13 FFFC                          STR_14 FEE3  
                        STR_15 FFFC                          STR_16 FF3D                          STR_17 FFFC  
                        STR_18 FF6E                          STR_19 FFE4                __end_of___awmod 2380  
              __end_of___flmul 1080                          ?_test 004F                __end_of___flsub 29A6  
              __end_of___fltol 1EC8                          ?_stop 0013                ___awdiv@divisor 0003  
              __end_of___lwdiv 27C4                ___awdiv@counter 0005              ??_convert_rgb2hue 004D  
                 vfpfcnvrt@fmt 0023        __end_of_sendCharSerial4 2D84     __end_of_I2C_2_Master_Start 2DA4  
   __end_of_I2C_2_Master_Write 2D90                          _flags 00E4            read_prec_or_width@c 0009  
          read_prec_or_width@n 000A                          _fputc 2160                          _fputs 2A6E  
                        pad@fp 000F                          _width 00E0                          _putch 2DAE  
                        dtoa@d 0018                          dtoa@i 0020                          dtoa@p 001C  
              __end_of_right90 2BB2                          dtoa@s 001F                          dtoa@w 001D  
              __end_of_moveRed 2B80                          tablat 0FF5                          status 0FD8  
              __end_of_sprintf 2A6E          convert_rgb2hue@redmax 009C        __end_of_color_read_Blue 2960  
        _I2C_2_Master_RepStart 2DA4                ?_color_read_Red 0005                __initialization 2C16  
                 __end_of_main 209C                   __end_of_dtoa 1C6E                   __end_of_test 179A  
                 __end_of_stop 25DE                         ??_main 0053                         ??_dtoa 001A  
                       ??_test 0051                         ??_stop 0015                  __activetblptr 0003  
   __end_of_read_prec_or_width 22D0                   ?_setMotorPWM 000E                         ?_fputc 0001  
                       ?_fputs 0009                         _ADRESH 0F64                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
             ___awdiv@dividend 0001               __end_of_backHalf 2C76                         ?_putch 0001  
                       _RC0PPS 0E62                         _RC4REG 0EE3                         _RE2PPS 0E74  
                       _RD5PPS 0E6F                         _RC7PPS 0E69                         _RE4PPS 0E76  
                       _RD6PPS 0E70                         _RG6PPS 0E88                  vfpfcnvrt@done 002B  
     __end_of_color_click_init 2B1A                         _RX4PPS 0E15                         _TX4REG 0EE4  
             __end_of___xxtofl 194E    convert_rgb2hue@greencurrent 00BC               __end_of_decision 2820  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0032                         ___flge 1EC8  
                       ___fleq 2380                      ??___fladd 0009                         ___wmul 2CEE  
                    ??___fldiv 0021                      ??___awdiv 0005                      ??___awmod 0005  
                    ??___flmul 0009                      ??___flsub 0019                      ??___fltol 0005  
                    ??___lwdiv 000B                         _left90 2BE4           read_prec_or_width@ap 0008  
                       clear_0 2C2E                         clear_1 2C3A               ___awdiv@quotient 0007  
              ___awmod@divisor 0003                         _motorL 00F3                         _motorR 00EA  
                       isa$std 0001                ___awmod@counter 0005             send2USART@hue_char 0060  
                       pad@buf 0010                         dtoa@fp 0017                         fputc@c 0001  
                       fputs@c 000C                         fputs@i 000D                         fputs@s 0009  
                    ??_right90 001A                   __mediumconst FEE2        calibration_routine@cCal 0049  
                    ??_moveRed 001E                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8                      ?_ADC_init 0001               ?_sendCharSerial4 0001  
       convert_rgb2hue@bluemax 00A4                         putch@c 0001               __end_of_vfprintf 29EC  
                       stop@mL 0013                         stop@mR 0014              ??_initDCmotorsPWM 0003  
                    ??_sprintf 003C               __end_of_turnLeft 26DA                     ___flge@ff1 0001  
                   ___flge@ff2 0005                   ___xxtofl@arg 000B                   ___xxtofl@exp 000A  
                 ___xxtofl@val 0001                     ___fleq@ff1 0001                     ___fleq@ff2 0005  
              fullSpeedBack@mL 0013                fullSpeedBack@mR 0014                     __accesstop 0060  
      __end_of__initialization 2C40       __end_of_color_read_Clear 2910       __end_of_color_read_Green 28C0  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001                     ___fltol@f1 0001  
             ?_color_read_Blue 0005                 __pcstackCOMRAM 0001                  _fullSpeedBack 26DA  
                 __pidataBANK0 2DB0                  __end_of_fputc 221A                  __end_of_fputs 2AAE  
                __end_of_putch 2DB0                     ??_ADC_init 0001                     backHalf@mL 0018  
                   backHalf@mR 0019                        ??_fputc 0004                        ??_fputs 000C  
                      ??_putch 0001                     __pbssBANK0 00E0                     __pbssBANK1 0100  
            _color_writetoaddr 2D14                   _T2CLKCONbits 0FBF                 ?_fullSpeedBack 0013  
              _convert_rgb2hue 0000                        ?___flge 0001                        ?___fleq 0001  
           ?_color_writetoaddr 0003                        ?___wmul 0001                        ?_left90 0018  
                    ?_backHalf 0018            ??_color_writetoaddr 0004                      ?___xxtofl 0001  
          _convert_rgb2hue$322 00A8            _convert_rgb2hue$323 00AC            _convert_rgb2hue$324 00B0  
          _convert_rgb2hue$325 00B4                      ?_decision 0020                        _SP4BRGH 0EE6  
                      _SP4BRGL 0EE5                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
                  moveGreen@mL 001C                    moveGreen@mR 001D         color_writetoaddr@value 0003  
             ??_color_read_Red 0007      __end_of_color_writetoaddr 2D34                      _ADREFbits 0F58  
           _I2C_2_Master_Start 2D9A                     _initUSART4 2D34             _I2C_2_Master_Write 2D84  
                      __Hparam 0000                        __Lparam 0000              color_read_Red@tmp 000A  
      sendStringSerial4@string 0002                        ___fladd 0796                        ___fldiv 1080  
                      ___awdiv 209C                        ___awmod 22D0                        ___flmul 0C56  
                      ___flsub 2960                        ___fltol 1DC2            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 2750            ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E  
                      __pcinit 2C16                     ??_backHalf 001A                        __ramtop 0E00  
                   _send2USART 2CC8                      ?_turnLeft 0013                        __ptext0 1FCC  
                      __ptext1 15E2                        __ptext2 2CC8                        __ptext3 0000  
                      __ptext4 179A                        __ptext5 1DC2                        __ptext6 2960  
                      __ptext7 0796                        __ptext8 0C56                        __ptext9 1EC8  
                    _T2CONbits 0FBD          read_prec_or_width@fmt 0007                     ??___xxtofl 0005  
             ___awmod@dividend 0001                     ??_decision 0022                        _right90 2B80  
                    _T2HLTbits 0FBE                        _moveRed 2B4E                  _RxBufWriteCnt 00E9  
                      _sprintf 2A2E                        main@hue 0055           ??_I2C_2_Master_Start 0002  
         ??_I2C_2_Master_Write 0002           end_of_initialization 2C40              __end_of_moveGreen 2BE4  
                      fputc@fp 0003        __end_of_convert_rgb2hue 0796                        fputs@fp 000B  
            ?_color_click_init 0001             _read_prec_or_width 221A                ??_fullSpeedBack 0015  
           ??_color_click_init 0005               _colorCalibration 0194                        test@hue 01CE  
            __end_of_vfpfcnvrt 1AF6                        postdec2 0FDD            ?_read_prec_or_width 0007  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0027                     ??_vfprintf 0032        convert_rgb2hue@greenmax 00A0  
                 _colorCurrent 018C                _initDCmotorsPWM 24C0                     ??_turnLeft 0015  
                    _PORTFbits 0F8E             setMotorPWM@negDuty 0012              __end_of_turnRight 265C  
                  ___fladd@grs 0010                  ___xxtofl@sign 0009                      _TRISAbits 0F81  
           setMotorPWM@posDuty 0011                      _TRISCbits 0F83                      _TRISDbits 0F84  
                    _TRISEbits 0F85                      _TRISFbits 0F86                      _TRISGbits 0F87  
                    _TRISHbits 0F88               convert_rgb2hue@b 00DC           ??_read_prec_or_width 0009  
             convert_rgb2hue@g 00D8                    ___fldiv@grs 002C               convert_rgb2hue@r 00D4  
                  ___fldiv@rem 0025       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
                  ___flmul@grs 000F                    _CCP1CONbits 0FAB            _calibration_routine 141A  
            ?_color_read_Clear 0005                   _EUSART4RXbuf 0150                   _EUSART4TXbuf 0100  
                  _CCP2CONbits 0FA7              ?_color_read_Green 0005     convert_rgb2hue@bluecurrent 00C0  
                  _CCP3CONbits 0F26                    ?_initUSART4 0001                    _CCP4CONbits 0F22  
    sendCharSerial4@charToSend 0001             ??_color_read_Clear 0007             ??_color_read_Green 0007  
    convert_rgb2hue@redcurrent 00B8                 __end_of___flge 1FCC                 __end_of___fleq 242A  
                  vfpfcnvrt@ap 0024                    vfpfcnvrt@cp 002C                    vfpfcnvrt@fp 0022  
               __end_of___wmul 2D14                 __end_of_left90 2C16                    ?_send2USART 0049  
         ?_calibration_routine 0049            color_read_Clear@tmp 000A            start_initialization 2C16  
 calibration_routine@cal_state 0060                    __end_of_abs 2B4E                    __end_of_pad 24C0  
                _TxBufWriteCnt 00E7               ?_convert_rgb2hue 0049            color_read_Green@tmp 000A  
      __end_of_initDCmotorsPWM 2550                    vfprintf@fmt 002F                       ??___flge 0009  
                     ??___fleq 0009                       ??___wmul 0005                       ??_left90 001A  
                  __pdataBANK0 00FC          ??_calibration_routine 004B                      ___fladd@a 0005  
                    ___fladd@b 0001                      ___fldiv@a 001D                      ___fldiv@b 0019  
                    ___flmul@a 0005                      ___flmul@b 0001                      ___flsub@a 0015  
                    ___flsub@b 0011                  __pcstackBANK0 0060                  __pcstackBANK1 019C  
             ___lwdiv@dividend 0007                      _dtoa$2623 001A                  __pmediumconst FEE2  
                     ?___fladd 0001                       ?___fldiv 0019                       ?___awdiv 0001  
                     ?___awmod 0001                       ?___flmul 0001                       ?___flsub 0011  
                     ?___fltol 0001                       ?___lwdiv 0007                   _readingIndex 00E5  
         I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004              _I2C_2_Master_Idle 2CA0  
            _I2C_2_Master_Init 2C76              _I2C_2_Master_Read 29EC                       ?_right90 0018  
            _I2C_2_Master_Stop 2D90                       ?_moveRed 001C                   _RxBufReadCnt 00E8  
                     _ADC_init 2D52             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 000F             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0001                       ?_sprintf 0034  
            _sendStringSerial4 2AAE            ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001  
          ??_I2C_2_Master_Read 0002                 ___wmul@product 0005                       _LATAbits 0F79  
          ??_I2C_2_Master_Stop 0002                       _LATCbits 0F7B                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATFbits 0F7E                       _LATGbits 0F7F  
                     _LATHbits 0F80             ?_sendStringSerial4 0002                      _moveGreen 2BB2  
                     _PIE4bits 0E2D                    turnRight@mL 0013                    turnRight@mR 0014  
                     _PIR4bits 0E37               ?_initDCmotorsPWM 0001              ??_sendCharSerial4 0001  
                     _SSP2CON2 0EDA            ??_sendStringSerial4 0004                       _SSP2STAT 0ED8  
                    _vfpfcnvrt 194E                     _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 2CC8  
    __end_of_I2C_2_Master_Init 2CA0      __end_of_I2C_2_Master_Read 2A2E              ___wmul@multiplier 0001  
    __end_of_I2C_2_Master_Stop 2D9A                   setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002  
                  _ldrReadings 013C              ??_color_read_Blue 0007                   _TxBufReadCnt 00E6  
                    _turnRight 25DE      __end_of_sendStringSerial4 2AE6  __end_of_I2C_2_Master_RepStart 2DAE  
           color_read_Blue@tmp 000A            __end_of_setMotorPWM 1DC2                   ??_initUSART4 0001  
                   ?_moveGreen 001C                       __Hrparam 0000                     vfprintf@ap 0031  
                     __Lrparam 0000                     vfprintf@fp 002E          __end_of_fullSpeedBack 2750  
                   ?_vfpfcnvrt 0022                       _backHalf 2C46                   ??_send2USART 004B  
                   _ANSELDbits 0EA7                     _ANSELFbits 0EB4                       _dataFlag 00FC  
                   sprintf@fmt 0036                       ___xxtofl 179A                       _decision 27C4  
                    right90@mL 0018                      right90@mR 0019                  test@led_state 019C  
              ___lwdiv@divisor 0009             __end_of_initUSART4 2D52                ___lwdiv@counter 000B  
                   ?_turnRight 0013                       __ptext10 2380                       __ptext11 1080  
                     __ptext20 265C                       __ptext12 2D34                       __ptext21 2C46  
                     __ptext13 24C0                       __ptext30 2A2E                       __ptext22 2550  
                     __ptext14 27C4                       __ptext31 29A6                       __ptext23 26DA  
                     __ptext15 2B4E                       __ptext40 2B1A                       __ptext32 194E  
                     __ptext24 1C6E                       __ptext16 2B80                       __ptext41 22D0  
                     __ptext33 221A                       __ptext25 2750                       __ptext17 25DE  
                     __ptext50 2D90                       __ptext42 209C                       __ptext34 2CEE  
                     __ptext26 2AE6                       __ptext18 2BB2                       __ptext51 2D9A  
                     __ptext43 2AAE                       __ptext35 1AF6                       __ptext27 2D14  
                     __ptext19 2BE4                       __ptext52 2DA4                       __ptext44 2D6C  
                     __ptext36 242A                       __ptext28 2C76                       __ptext53 29EC  
                     __ptext45 2820                       __ptext37 2A6E                       __ptext29 141A  
                     __ptext54 2CA0                       __ptext46 2870                       __ptext38 2160  
                     __ptext55 2D52                       __ptext47 28C0                       __ptext39 2DAE  
                     __ptext48 2910                       __ptext49 2D84                    decision@hue 0020  
                    moveRed@mL 001C                      moveRed@mR 001D                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA                     turnLeft@mL 0013                     turnLeft@mR 0014  
           __end_of_send2USART 2CEE                      test@cCurr 004F                     turnRight@i 0016  
                     isa$xinst 0000                       left90@mL 0018                       left90@mR 0019  
                   _RC4STAbits 0EE7                       _vfprintf 29A6                       _turnLeft 265C  
                  _setMotorPWM 1C6E                      sprintf@ap 003C                    ??_moveGreen 001E  
                    turnLeft@i 0016    __end_of_calibration_routine 15E2                  send2USART@hue 0049  
                  ??_vfpfcnvrt 0025               _color_click_init 2AE6                       sprintf@f 003D  
                     sprintf@s 0034                     _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C  
                  ??_turnRight 0015                  ___fladd@signs 000D                     _TX4STAbits 0EE8  
              _sendCharSerial4 2D6C                   ___fladd@aexp 000E                   ___fladd@bexp 000F  
