

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
<<<<<<< HEAD
<<<<<<< HEAD
                                                                                               Mon Mar 11 15:55:11 2024
=======
                                                                                               Mon Mar 11 20:55:49 2024
>>>>>>> Movement
=======
                                                                                               Tue Mar 12 12:11:43 2024
>>>>>>> Calibrating-Colors

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
<<<<<<< HEAD
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    36   000000                     
    37                           ; Generated 21/07/2023 GMT
    38                           ; 
    39                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
<<<<<<< HEAD
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F67K40 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89   000000                     
    90                           	psect	idataBANK0
    91   001C7E                     __pidataBANK0:
    92                           	callstack 0
    93                           
    94                           ;initializer for _dataFlag
    95   001C7E  01                 	db	1
    96   000000                     _TX4REG	set	3812
    97   000000                     _RC4STAbits	set	3815
    98   000000                     _SP4BRGH	set	3814
    99   000000                     _TRISFbits	set	3974
   100   000000                     _TRISEbits	set	3973
   101   000000                     _TRISGbits	set	3975
   102   000000                     _CCPR2H	set	4006
   103   000000                     _CCPR1H	set	4010
   104   000000                     _SSP2CON2bits	set	3802
   105   000000                     _RX4PPS	set	3605
   106   000000                     _SSP2CLKPPS	set	3612
   107   000000                     _SSP2DATPPS	set	3613
   108   000000                     _ANSELDbits	set	3751
   109   000000                     _SSP2ADD	set	3798
   110   000000                     _SSP2CON1bits	set	3801
   111   000000                     _LATAbits	set	3961
   112   000000                     _LATEbits	set	3965
   113   000000                     _LATGbits	set	3967
   114   000000                     _TRISAbits	set	3969
   115   000000                     _TRISDbits	set	3972
   116   000000                     _LATCbits	set	3963
   117   000000                     _LATDbits	set	3964
   118   000000                     _RC4REG	set	3811
   119   000000                     _SP4BRGL	set	3813
   120   000000                     _TX4STAbits	set	3816
   121   000000                     _BAUD4CONbits	set	3817
   122   000000                     _SSP2CON2	set	3802
   123   000000                     _CCPR4H	set	3873
   124   000000                     _CCPR3H	set	3877
   125   000000                     _SSP2STAT	set	3800
   126   000000                     _ANSELFbits	set	3764
   127   000000                     _SSP2BUF	set	3797
   128   000000                     _PIE4bits	set	3629
   129   000000                     _PIR4bits	set	3639
   130   000000                     _RC0PPS	set	3682
   131   000000                     _RC7PPS	set	3689
   132   000000                     _RD5PPS	set	3695
   133   000000                     _RE2PPS	set	3700
   134   000000                     _RD6PPS	set	3696
   135   000000                     _CCP1CONbits	set	4011
   136   000000                     _CCPTMRS0bits	set	4013
   137   000000                     _T2PR	set	4028
   138   000000                     _T2CONbits	set	4029
   139   000000                     _CCP2CONbits	set	4007
   140   000000                     _CCP3CONbits	set	3878
   141   000000                     _ADREFbits	set	3928
   142   000000                     _CCP4CONbits	set	3874
   143   000000                     _TRISCbits	set	3971
   144   000000                     _ADPCH	set	3935
   145   000000                     _ADRESH	set	3940
   146   000000                     _ADCON0bits	set	3936
   147   000000                     _RE4PPS	set	3702
   148   000000                     _RG6PPS	set	3720
   149   000000                     _T2CLKCONbits	set	4031
   150   000000                     _T2HLTbits	set	4030
   151                           
   152                           	psect	smallconst
   153   000E00                     __psmallconst:
   154                           	callstack 0
   155   000E00  00                 	db	0
   156   000E01                     STR_2:
   157                           
   158                           ; BSR set to: 15
   159   000E01  56                 	db	86	;'V'
   160   000E02  6F                 	db	111	;'o'
   161   000E03  6C                 	db	108	;'l'
   162   000E04  74                 	db	116	;'t'
   163   000E05  61                 	db	97	;'a'
   164   000E06  67                 	db	103	;'g'
   165   000E07  65                 	db	101	;'e'
   166   000E08  20                 	db	32
   167   000E09  3D                 	db	61	;'='
   168   000E0A  20                 	db	32
   169   000E0B  25                 	db	37
   170   000E0C  64                 	db	100	;'d'
   171   000E0D  2E                 	db	46
   172   000E0E  25                 	db	37
   173   000E0F  30                 	db	48	;'0'
   174   000E10  32                 	db	50	;'2'
   175   000E11  64                 	db	100	;'d'
   176   000E12  2C                 	db	44
   177   000E13  20                 	db	32
   178   000E14  20                 	db	32
   179   000E15  00                 	db	0
   180   000E16                     STR_6:
   181                           
   182                           ; BSR set to: 15
   183   000E16  43                 	db	67	;'C'
   184   000E17  6C                 	db	108	;'l'
   185   000E18  65                 	db	101	;'e'
   186   000E19  61                 	db	97	;'a'
   187   000E1A  72                 	db	114	;'r'
   188   000E1B  3D                 	db	61	;'='
   189   000E1C  25                 	db	37
   190   000E1D  30                 	db	48	;'0'
   191   000E1E  35                 	db	53	;'5'
   192   000E1F  64                 	db	100	;'d'
   193   000E20  2C                 	db	44
   194   000E21  20                 	db	32
   195   000E22  20                 	db	32
   196   000E23  0A                 	db	10
   197   000E24  0A                 	db	10
   198   000E25  0D                 	db	13
   199   000E26  00                 	db	0
   200   000E27                     STR_1:
   201                           
   202                           ; BSR set to: 15
   203   000E27  41                 	db	65	;'A'
   204   000E28  6C                 	db	108	;'l'
   205   000E29  6C                 	db	108	;'l'
   206   000E2A  5F                 	db	95	;'_'
   207   000E2B  6C                 	db	108	;'l'
   208   000E2C  69                 	db	105	;'i'
   209   000E2D  67                 	db	103	;'g'
   210   000E2E  68                 	db	104	;'h'
   211   000E2F  74                 	db	116	;'t'
   212   000E30  73                 	db	115	;'s'
   213   000E31  3D                 	db	61	;'='
   214   000E32  25                 	db	37
   215   000E33  64                 	db	100	;'d'
   216   000E34  20                 	db	32
   217   000E35  0A                 	db	10
   218   000E36  0D                 	db	13
   219   000E37  00                 	db	0
   220   000E38                     STR_5:
   221                           
   222                           ; BSR set to: 15
   223   000E38  47                 	db	71	;'G'
   224   000E39  72                 	db	114	;'r'
   225   000E3A  65                 	db	101	;'e'
   226   000E3B  65                 	db	101	;'e'
   227   000E3C  6E                 	db	110	;'n'
   228   000E3D  3D                 	db	61	;'='
   229   000E3E  25                 	db	37
   230   000E3F  30                 	db	48	;'0'
   231   000E40  35                 	db	53	;'5'
   232   000E41  64                 	db	100	;'d'
   233   000E42  2C                 	db	44
   234   000E43  20                 	db	32
   235   000E44  20                 	db	32
   236   000E45  00                 	db	0
   237   000E46                     STR_4:
   238                           
   239                           ; BSR set to: 15
   240   000E46  42                 	db	66	;'B'
   241   000E47  6C                 	db	108	;'l'
   242   000E48  75                 	db	117	;'u'
   243   000E49  65                 	db	101	;'e'
   244   000E4A  3D                 	db	61	;'='
   245   000E4B  25                 	db	37
   246   000E4C  30                 	db	48	;'0'
   247   000E4D  35                 	db	53	;'5'
   248   000E4E  64                 	db	100	;'d'
   249   000E4F  2C                 	db	44
   250   000E50  20                 	db	32
   251   000E51  20                 	db	32
   252   000E52  00                 	db	0
   253   000E53                     STR_3:
   254                           
   255                           ; BSR set to: 15
   256   000E53  52                 	db	82	;'R'
   257   000E54  65                 	db	101	;'e'
   258   000E55  64                 	db	100	;'d'
   259   000E56  3D                 	db	61	;'='
   260   000E57  25                 	db	37
   261   000E58  30                 	db	48	;'0'
   262   000E59  35                 	db	53	;'5'
   263   000E5A  64                 	db	100	;'d'
   264   000E5B  2C                 	db	44
   265   000E5C  20                 	db	32
   266   000E5D  20                 	db	32
   267   000E5E  00                 	db	0
   268   000E5F  00                 	db	0	; dummy byte at the end
   269   000000                     
   270                           ; #config settings
   271                           
   272                           	psect	cinit
   273   001A90                     __pcinit:
   274                           	callstack 0
   275   001A90                     start_initialization:
   276                           	callstack 0
   277   001A90                     __initialization:
   278                           	callstack 0
   279                           
   280                           ; Initialize objects allocated to BANK0 (1 bytes)
   281                           ; load TBLPTR registers with __pidataBANK0
   282   001A90  0E7E               	movlw	low __pidataBANK0
   283   001A92  6EF6               	movwf	tblptrl,c
   284   001A94  0E1C               	movlw	high __pidataBANK0
   285   001A96  6EF7               	movwf	tblptrh,c
   286   001A98  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   287   001A9A  6EF8               	movwf	tblptru,c
   288   001A9C  0009               	tblrd		*+	;fetch initializer
   289   001A9E  CFF5 F0FB          	movff	tablat,__pdataBANK0
   290                           
   291                           ; Clear objects allocated to BANK2 (60 bytes)
   292   001AA2  EE02  F000         	lfsr	0,__pbssBANK2
   293   001AA6  0E3C               	movlw	60
   294   001AA8                     clear_0:
   295   001AA8  6AEE               	clrf	postinc0,c
   296   001AAA  06E8               	decf	wreg,f,c
   297   001AAC  E1FD               	bnz	clear_0
   298                           
   299                           ; Clear objects allocated to BANK0 (95 bytes)
   300   001AAE  EE00  F060         	lfsr	0,__pbssBANK0
   301   001AB2  0E5F               	movlw	95
   302   001AB4                     clear_1:
   303   001AB4  6AEE               	clrf	postinc0,c
   304   001AB6  06E8               	decf	wreg,f,c
   305   001AB8  E1FD               	bnz	clear_1
   306                           
   307                           ; Clear objects allocated to COMRAM (5 bytes)
   308   001ABA  6A5F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   309   001ABC  6A5E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   310   001ABE  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   311   001AC0  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   312   001AC2  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   313   001AC4                     end_of_initialization:
   314                           	callstack 0
   315   001AC4                     __end_of__initialization:
   316                           	callstack 0
   317   001AC4  0100               	movlb	0
   318   001AC6  EFAD  F00B         	goto	_main	;jump to C main() function
   319                           
   320                           	psect	bssCOMRAM
   321   00005B                     __pbssCOMRAM:
   322                           	callstack 0
   323   00005B                     _flags:
   324                           	callstack 0
   325   00005B                     	ds	1
   326   00005C                     _TxBufReadCnt:
   327                           	callstack 0
   328   00005C                     	ds	1
   329   00005D                     _TxBufWriteCnt:
   330                           	callstack 0
   331   00005D                     	ds	1
   332   00005E                     _RxBufReadCnt:
   333                           	callstack 0
   334   00005E                     	ds	1
   335   00005F                     _RxBufWriteCnt:
   336                           	callstack 0
   337   00005F                     	ds	1
   338                           
   339                           	psect	bssBANK0
   340   000060                     __pbssBANK0:
   341                           	callstack 0
   342   000060                     _ldrReadings:
   343                           	callstack 0
   344   000060                     	ds	20
   345   000074                     _EUSART4RXbuf:
   346                           	callstack 0
   347   000074                     	ds	20
   348   000088                     _width:
   349                           	callstack 0
   350   000088                     	ds	2
   351   00008A                     _prec:
   352                           	callstack 0
   353   00008A                     	ds	2
   354   00008C                     _readingIndex:
   355                           	callstack 0
   356   00008C                     	ds	1
   357   00008D                     _dbuf:
   358                           	callstack 0
   359   00008D                     	ds	32
   360   0000AD                     _motorR:
   361                           	callstack 0
   362   0000AD                     	ds	9
   363   0000B6                     _motorL:
   364                           	callstack 0
   365   0000B6                     	ds	9
   366                           
   367                           	psect	dataBANK0
   368   0000FB                     __pdataBANK0:
   369                           	callstack 0
   370   0000FB                     _dataFlag:
   371                           	callstack 0
   372   0000FB                     	ds	1
   373                           
   374                           	psect	bssBANK2
   375   000200                     __pbssBANK2:
   376                           	callstack 0
   377   000200                     _EUSART4TXbuf:
   378                           	callstack 0
   379   000200                     	ds	60
   380                           
   381                           	psect	cstackBANK1
   382   000100                     __pcstackBANK1:
   383                           	callstack 0
   384   000100                     send2USART@buf:
   385                           	callstack 0
   386                           
   387                           ; 50 bytes @ 0x0
   388   000100                     	ds	50
   389   000132                     send2USART@red_char:
   390                           	callstack 0
   391                           
   392                           ; 50 bytes @ 0x32
   393   000132                     	ds	50
   394   000164                     send2USART@blue_char:
   395                           	callstack 0
   396                           
   397                           ; 50 bytes @ 0x64
   398   000164                     	ds	50
   399   000196                     send2USART@green_char:
   400                           	callstack 0
   401                           
   402                           ; 50 bytes @ 0x96
   403   000196                     	ds	50
   404   0001C8                     send2USART@clear_char:
   405                           	callstack 0
   406                           
   407                           ; 50 bytes @ 0xC8
   408   0001C8                     	ds	50
   409                           
   410                           	psect	cstackBANK0
   411   0000BF                     __pcstackBANK0:
   412                           	callstack 0
   413   0000BF                     test@led_state:
   414                           	callstack 0
   415                           
   416                           ; 50 bytes @ 0x0
   417   0000BF                     	ds	50
   418   0000F1                     test@red:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0x32
   422   0000F1                     	ds	2
   423   0000F3                     test@blue:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0x34
   427   0000F3                     	ds	2
   428   0000F5                     test@green:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x36
   432   0000F5                     	ds	2
   433   0000F7                     test@clear:
   434                           	callstack 0
   435                           
   436                           ; 2 bytes @ 0x38
   437   0000F7                     	ds	2
   438   0000F9                     test@combo:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x3A
   442   0000F9                     	ds	2
   443                           
   444                           	psect	cstackCOMRAM
   445   000001                     __pcstackCOMRAM:
   446                           	callstack 0
   447   000001                     ??_I2C_2_Master_Idle:
   448   000001                     ?___wmul:
   449                           	callstack 0
   450   000001                     ?___awdiv:
   451                           	callstack 0
   452   000001                     ?___awmod:
   453                           	callstack 0
   454   000001                     sendCharSerial4@charToSend:
   455                           	callstack 0
   456   000001                     initDCmotorsPWM@PWMperiod:
   457                           	callstack 0
   458   000001                     ___wmul@multiplier:
   459                           	callstack 0
   460   000001                     ___awdiv@dividend:
   461                           	callstack 0
   462   000001                     ___awmod@dividend:
   463                           	callstack 0
   464   000001                     fputc@c:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x0
   468   000001                     	ds	1
   469   000002                     ??_I2C_2_Master_Read:
   470   000002                     I2C_2_Master_Write@data_byte:
   471                           	callstack 0
   472   000002                     sendStringSerial4@string:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x1
   476   000002                     	ds	1
   477   000003                     color_writetoaddr@value:
   478                           	callstack 0
   479   000003                     I2C_2_Master_Read@ack:
   480                           	callstack 0
   481   000003                     fputc@fp:
   482                           	callstack 0
   483   000003                     ___wmul@multiplicand:
   484                           	callstack 0
   485   000003                     ___awdiv@divisor:
   486                           	callstack 0
   487   000003                     ___awmod@divisor:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x2
   491   000003                     	ds	1
   492   000004                     ??_fputc:
   493   000004                     color_writetoaddr@address:
   494                           	callstack 0
   495   000004                     I2C_2_Master_Read@tmp:
   496                           	callstack 0
   497                           
   498                           ; 1 bytes @ 0x3
   499   000004                     	ds	1
   500   000005                     ??_color_click_init:
   501   000005                     ?_color_read_Red:
   502                           	callstack 0
   503   000005                     ?_color_read_Green:
   504                           	callstack 0
   505   000005                     ?_color_read_Blue:
   506                           	callstack 0
   507   000005                     ?_color_read_Clear:
   508                           	callstack 0
   509   000005                     ___awdiv@counter:
   510                           	callstack 0
   511   000005                     ___awmod@counter:
   512                           	callstack 0
   513   000005                     ___wmul@product:
   514                           	callstack 0
   515                           
   516                           ; 2 bytes @ 0x4
   517   000005                     	ds	1
   518   000006                     ___awdiv@sign:
   519                           	callstack 0
   520   000006                     ___awmod@sign:
   521                           	callstack 0
   522                           
   523                           ; 1 bytes @ 0x5
   524   000006                     	ds	1
   525   000007                     ??_color_read_Red:
   526   000007                     ??_color_read_Green:
   527   000007                     ??_color_read_Blue:
   528   000007                     ??_color_read_Clear:
   529   000007                     ?_abs:
   530                           	callstack 0
   531   000007                     ?___lwdiv:
   532                           	callstack 0
   533   000007                     ?_read_prec_or_width:
   534                           	callstack 0
   535   000007                     read_prec_or_width@fmt:
   536                           	callstack 0
   537   000007                     ___awdiv@quotient:
   538                           	callstack 0
   539   000007                     ___lwdiv@dividend:
   540                           	callstack 0
   541   000007                     abs@a:
   542                           	callstack 0
   543                           
   544                           ; 2 bytes @ 0x6
   545   000007                     	ds	1
   546   000008                     read_prec_or_width@ap:
   547                           	callstack 0
   548                           
   549                           ; 1 bytes @ 0x7
   550   000008                     	ds	1
   551   000009                     ??_abs:
   552   000009                     read_prec_or_width@c:
   553                           	callstack 0
   554   000009                     fputs@s:
   555                           	callstack 0
   556   000009                     ___lwdiv@divisor:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0x8
   560   000009                     	ds	1
   561   00000A                     fputs@fp:
   562                           	callstack 0
   563   00000A                     color_read_Red@tmp:
   564                           	callstack 0
   565   00000A                     color_read_Green@tmp:
   566                           	callstack 0
   567   00000A                     color_read_Blue@tmp:
   568                           	callstack 0
   569   00000A                     color_read_Clear@tmp:
   570                           	callstack 0
   571   00000A                     read_prec_or_width@n:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x9
   575   00000A                     	ds	1
   576   00000B                     fputs@c:
   577                           	callstack 0
   578   00000B                     ___lwdiv@quotient:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0xA
   582   00000B                     	ds	1
   583   00000C                     fputs@i:
   584                           	callstack 0
   585                           
   586                           ; 2 bytes @ 0xB
   587   00000C                     	ds	1
   588   00000D                     ___lwdiv@counter:
   589                           	callstack 0
   590                           
   591                           ; 1 bytes @ 0xC
   592   00000D                     	ds	1
   593   00000E                     pad@fp:
   594                           	callstack 0
   595                           
   596                           ; 1 bytes @ 0xD
   597   00000E                     	ds	1
   598   00000F                     pad@buf:
   599                           	callstack 0
   600                           
   601                           ; 1 bytes @ 0xE
   602   00000F                     	ds	1
   603   000010                     pad@p:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0xF
   607   000010                     	ds	2
   608   000012                     ??_pad:
   609                           
   610                           ; 1 bytes @ 0x11
   611   000012                     	ds	1
   612   000013                     pad@i:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x12
   616   000013                     	ds	2
   617   000015                     dtoa@fp:
   618                           	callstack 0
   619                           
   620                           ; 1 bytes @ 0x14
   621   000015                     	ds	1
   622   000016                     dtoa@d:
   623                           	callstack 0
   624                           
   625                           ; 2 bytes @ 0x15
   626   000016                     	ds	2
   627   000018                     _dtoa$2280:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0x17
   631   000018                     	ds	2
   632   00001A                     dtoa@p:
   633                           	callstack 0
   634                           
   635                           ; 1 bytes @ 0x19
   636   00001A                     	ds	1
   637   00001B                     dtoa@w:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0x1A
   641   00001B                     	ds	2
   642   00001D                     dtoa@s:
   643                           	callstack 0
   644                           
   645                           ; 1 bytes @ 0x1C
   646   00001D                     	ds	1
   647   00001E                     dtoa@i:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0x1D
   651   00001E                     	ds	2
   652   000020                     vfpfcnvrt@fp:
   653                           	callstack 0
   654                           
   655                           ; 1 bytes @ 0x1F
   656   000020                     	ds	1
   657   000021                     vfpfcnvrt@fmt:
   658                           	callstack 0
   659                           
   660                           ; 1 bytes @ 0x20
   661   000021                     	ds	1
   662   000022                     vfpfcnvrt@ap:
   663                           	callstack 0
   664                           
   665                           ; 1 bytes @ 0x21
   666   000022                     	ds	1
   667   000023                     ??_vfpfcnvrt:
   668                           
   669                           ; 1 bytes @ 0x22
   670   000023                     	ds	2
   671   000025                     vfpfcnvrt@convarg:
   672                           	callstack 0
   673                           
   674                           ; 4 bytes @ 0x24
   675   000025                     	ds	4
   676   000029                     vfpfcnvrt@done:
   677                           	callstack 0
   678                           
   679                           ; 1 bytes @ 0x28
   680   000029                     	ds	1
   681   00002A                     vfpfcnvrt@cp:
   682                           	callstack 0
   683                           
   684                           ; 1 bytes @ 0x29
   685   00002A                     	ds	1
   686   00002B                     ?_vfprintf:
   687                           	callstack 0
   688   00002B                     vfprintf@fp:
   689                           	callstack 0
   690                           
   691                           ; 1 bytes @ 0x2A
   692   00002B                     	ds	1
   693   00002C                     vfprintf@fmt:
   694                           	callstack 0
   695                           
   696                           ; 1 bytes @ 0x2B
   697   00002C                     	ds	1
   698   00002D                     vfprintf@ap:
   699                           	callstack 0
   700                           
   701                           ; 1 bytes @ 0x2C
   702   00002D                     	ds	1
   703   00002E                     vfprintf@cfmt:
   704                           	callstack 0
   705                           
   706                           ; 1 bytes @ 0x2D
   707   00002E                     	ds	1
   708   00002F                     ?_sprintf:
   709                           	callstack 0
   710   00002F                     sprintf@s:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0x2E
   714   00002F                     	ds	2
   715   000031                     sprintf@fmt:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x30
   719   000031                     	ds	5
   720   000036                     sprintf@ap:
   721                           	callstack 0
   722                           
   723                           ; 1 bytes @ 0x35
   724   000036                     	ds	1
   725   000037                     sprintf@f:
   726                           	callstack 0
   727                           
   728                           ; 12 bytes @ 0x36
   729   000037                     	ds	12
   730   000043                     ADC2String@buf:
   731                           	callstack 0
   732                           
   733                           ; 2 bytes @ 0x42
   734   000043                     	ds	2
   735   000045                     ADC2String@ADC_val:
   736                           	callstack 0
   737                           
   738                           ; 2 bytes @ 0x44
   739   000045                     	ds	2
   740   000047                     ??_ADC2String:
   741                           
   742                           ; 1 bytes @ 0x46
   743   000047                     	ds	2
   744   000049                     ADC2String@frac_part:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x48
   748   000049                     	ds	2
   749   00004B                     ADC2String@int_part:
   750                           	callstack 0
   751                           
   752                           ; 2 bytes @ 0x4A
   753   00004B                     	ds	2
   754   00004D                     send2USART@battery_level:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x4C
   758   00004D                     	ds	2
   759   00004F                     send2USART@red:
   760                           	callstack 0
   761                           
   762                           ; 2 bytes @ 0x4E
   763   00004F                     	ds	2
   764   000051                     send2USART@green:
   765                           	callstack 0
   766                           
   767                           ; 2 bytes @ 0x50
   768   000051                     	ds	2
   769   000053                     send2USART@blue:
   770                           	callstack 0
   771                           
   772                           ; 2 bytes @ 0x52
   773   000053                     	ds	2
   774   000055                     send2USART@clear:
   775                           	callstack 0
   776                           
   777                           ; 2 bytes @ 0x54
   778   000055                     	ds	2
   779   000057                     test@battery_level:
   780                           	callstack 0
   781                           
   782                           ; 2 bytes @ 0x56
   783   000057                     	ds	2
   784   000059                     main@battery_level:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x58
   788   000059                     	ds	2
   789                           
   790 ;;
   791 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   792 ;;
   793 ;; *************** function _main *****************
   794 ;; Defined at:
   795 ;;		line 28 in file "main.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;  PWMcycle        2    0        unsigned int 
   800 ;;  battery_leve    2   88[COMRAM] unsigned int 
   801 ;;  clear           2    0        unsigned int 
   802 ;;  green           2    0        unsigned int 
   803 ;;  blue            2    0        unsigned int 
   804 ;;  red             2    0        unsigned int 
   805 ;; Return value:  Size  Location     Type
   806 ;;                  1    wreg      void 
   807 ;; Registers used:
   808 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   815 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   817 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   818 ;;Total ram usage:        2 bytes
   819 ;; Hardware stack levels required when called: 11
   820 ;; This function calls:
   821 ;;		_ADC_init
   822 ;;		_color_click_init
   823 ;;		_initDCmotorsPWM
   824 ;;		_initUSART4
   825 ;;		_test
   826 ;; This function is called by:
   827 ;;		Startup code after reset
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text0
   832   00175A                     __ptext0:
   833                           	callstack 0
   834   00175A                     _main:
   835                           	callstack 20
   836   00175A                     
   837                           ;main.c: 30:     ADC_init();
   838   00175A  EC10  F00E         	call	_ADC_init	;wreg free
   839   00175E                     
   840                           ;main.c: 31:     color_click_init();
   841   00175E  EC9B  F00D         	call	_color_click_init	;wreg free
   842   001762                     
   843                           ;main.c: 32:     initUSART4();
   844   001762  EC01  F00E         	call	_initUSART4	;wreg free
   845   001766                     
   846                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
   847   001766  0E00               	movlw	0
   848   001768  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   849   00176A  0E63               	movlw	99
   850   00176C  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   851   00176E  EC20  F00B         	call	_initDCmotorsPWM	;wreg free
   852   001772                     
   853                           ;main.c: 39:     motorL.power = 0;
   854   001772  0E00               	movlw	0
   855   001774  0100               	movlb	0	; () banked
   856   001776  6FB6               	movwf	_motorL& (0+255),b
   857   001778                     
   858                           ; BSR set to: 0
   859                           ;main.c: 40:     motorL.direction = 1;
   860   001778  0E01               	movlw	1
   861   00177A  6FB7               	movwf	(_motorL+1)& (0+255),b
   862   00177C                     
   863                           ; BSR set to: 0
   864                           ;main.c: 41:     motorL.brakemode = 1;
   865   00177C  0E01               	movlw	1
   866   00177E  6FB8               	movwf	(_motorL+2)& (0+255),b
   867   001780                     
   868                           ; BSR set to: 0
   869                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
   870   001780  0E00               	movlw	0
   871   001782  6FBA               	movwf	(_motorL+4)& (0+255),b
   872   001784  0E63               	movlw	99
   873   001786  6FB9               	movwf	(_motorL+3)& (0+255),b
   874   001788                     
   875                           ; BSR set to: 0
   876                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   877   001788  0EAA               	movlw	170
   878   00178A  6FBB               	movwf	(_motorL+5)& (0+255),b
   879   00178C  0E0F               	movlw	15
   880   00178E  6FBC               	movwf	(_motorL+6)& (0+255),b
   881   001790                     
   882                           ; BSR set to: 0
   883                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   884   001790  0EA6               	movlw	166
   885   001792  6FBD               	movwf	(_motorL+7)& (0+255),b
   886   001794  0E0F               	movlw	15
   887   001796  6FBE               	movwf	(_motorL+8)& (0+255),b
   888   001798                     
   889                           ; BSR set to: 0
   890                           ;main.c: 46:     motorR.power = 0;
   891   001798  0E00               	movlw	0
   892   00179A  6FAD               	movwf	_motorR& (0+255),b
   893   00179C                     
   894                           ; BSR set to: 0
   895                           ;main.c: 47:     motorR.direction = 1;
   896   00179C  0E01               	movlw	1
   897   00179E  6FAE               	movwf	(_motorR+1)& (0+255),b
   898   0017A0                     
   899                           ; BSR set to: 0
   900                           ;main.c: 48:     motorR.brakemode = 1;
   901   0017A0  0E01               	movlw	1
   902   0017A2  6FAF               	movwf	(_motorR+2)& (0+255),b
   903   0017A4                     
   904                           ; BSR set to: 0
   905                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
   906   0017A4  0E00               	movlw	0
   907   0017A6  6FB1               	movwf	(_motorR+4)& (0+255),b
   908   0017A8  0E63               	movlw	99
   909   0017AA  6FB0               	movwf	(_motorR+3)& (0+255),b
   910                           
   911                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   912   0017AC  0E25               	movlw	37
   913   0017AE  6FB2               	movwf	(_motorR+5)& (0+255),b
   914   0017B0  0E0F               	movlw	15
   915   0017B2  6FB3               	movwf	(_motorR+6)& (0+255),b
   916                           
   917                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   918   0017B4  0E21               	movlw	33
   919   0017B6  6FB4               	movwf	(_motorR+7)& (0+255),b
   920   0017B8  0E0F               	movlw	15
   921   0017BA  6FB5               	movwf	(_motorR+8)& (0+255),b
   922   0017BC                     
   923                           ; BSR set to: 0
   924                           ;main.c: 54:     LATDbits.LATD7=0;
   925   0017BC  9E7C               	bcf	124,7,c	;volatile
   926   0017BE                     
   927                           ; BSR set to: 0
   928                           ;main.c: 55:     TRISDbits.TRISD7=0;
   929   0017BE  9E84               	bcf	132,7,c	;volatile
   930   0017C0                     
   931                           ; BSR set to: 0
   932                           ;main.c: 59:     TRISGbits.TRISG0 = 0;
   933   0017C0  9087               	bcf	135,0,c	;volatile
   934   0017C2                     
   935                           ; BSR set to: 0
   936                           ;main.c: 60:     LATGbits.LATG0 = 0;
   937   0017C2  907F               	bcf	127,0,c	;volatile
   938   0017C4                     
   939                           ; BSR set to: 0
   940                           ;main.c: 61:     TRISEbits.TRISE7 = 0;
   941   0017C4  9E85               	bcf	133,7,c	;volatile
   942   0017C6                     
   943                           ; BSR set to: 0
   944                           ;main.c: 62:     LATEbits.LATE7 = 0;
   945   0017C6  9E7D               	bcf	125,7,c	;volatile
   946   0017C8                     
   947                           ; BSR set to: 0
   948                           ;main.c: 63:     TRISAbits.TRISA3 = 0;
   949   0017C8  9681               	bcf	129,3,c	;volatile
   950   0017CA                     
   951                           ; BSR set to: 0
   952                           ;main.c: 64:     LATAbits.LATA3 = 0;
   953   0017CA  9679               	bcf	121,3,c	;volatile
   954   0017CC                     l2622:
   955                           
   956                           ;main.c: 87:         test(battery_level);
   957   0017CC  C059  F057         	movff	main@battery_level,test@battery_level
   958   0017D0  C05A  F058         	movff	main@battery_level+1,test@battery_level+1
   959   0017D4  EC09  F009         	call	_test	;wreg free
   960   0017D8  EFE6  F00B         	goto	l2622
   961   0017DC  EF00  F000         	goto	start
   962   0017E0                     __end_of_main:
   963                           	callstack 0
   964                           
   965 ;; *************** function _test *****************
   966 ;; Defined at:
   967 ;;		line 98 in file "color.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;  battery_leve    2   86[COMRAM] unsigned int 
   970 ;; Auto vars:     Size  Location     Type
   971 ;;  clear           2   56[BANK0 ] unsigned int 
   972 ;;  green           2   54[BANK0 ] unsigned int 
   973 ;;  blue            2   52[BANK0 ] unsigned int 
   974 ;;  red             2   50[BANK0 ] unsigned int 
   975 ;;  combo           2   58[BANK0 ] unsigned int 
   976 ;;  led_state      50    0[BANK0 ] unsigned char [50]
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   986 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   987 ;;      Locals:         0      60       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   989 ;;      Totals:         2      60       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   990 ;;Total ram usage:       62 bytes
   991 ;; Hardware stack levels used: 1
   992 ;; Hardware stack levels required when called: 10
   993 ;; This function calls:
   994 ;;		_color_read_Blue
   995 ;;		_color_read_Clear
   996 ;;		_color_read_Green
   997 ;;		_color_read_Red
   998 ;;		_send2USART
   999 ;;		_sendStringSerial4
  1000 ;;		_sprintf
  1001 ;; This function is called by:
  1002 ;;		_main
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006                           	psect	text1
  1007   001212                     __ptext1:
  1008                           	callstack 0
  1009   001212                     _test:
  1010                           	callstack 20
  1011   001212                     
  1012                           ;color.c: 101:     char led_state[50];;color.c: 104:     for (unsigned int combo = 0; co
      +                          mbo < 4; ++combo) {
  1013   001212  0E00               	movlw	0
  1014   001214  0100               	movlb	0	; () banked
  1015   001216  6FFA               	movwf	(test@combo+1)& (0+255),b
  1016   001218  0E00               	movlw	0
  1017   00121A  6FF9               	movwf	test@combo& (0+255),b
  1018   00121C                     l2446:
  1019                           
  1020                           ; BSR set to: 0
  1021                           ;color.c: 135:         if (combo == 3) {
  1022   00121C  0E03               	movlw	3
  1023   00121E  19F9               	xorwf	test@combo& (0+255),w,b
  1024   001220  11FA               	iorwf	(test@combo+1)& (0+255),w,b
  1025   001222  A4D8               	btfss	status,2,c
  1026   001224  EF16  F009         	goto	u1291
  1027   001228  EF18  F009         	goto	u1290
  1028   00122C                     u1291:
  1029   00122C  EF26  F009         	goto	l2452
  1030   001230                     u1290:
  1031   001230                     
  1032                           ; BSR set to: 0
  1033                           ;color.c: 136:             LATGbits.LATG0 = 1;
  1034   001230  807F               	bsf	127,0,c	;volatile
  1035                           
  1036                           ;color.c: 137:             LATEbits.LATE7 = 1;
  1037   001232  8E7D               	bsf	125,7,c	;volatile
  1038                           
  1039                           ;color.c: 138:             LATAbits.LATA3 = 1;
  1040   001234  8679               	bsf	121,3,c	;volatile
  1041   001236                     
  1042                           ; BSR set to: 0
  1043                           ;color.c: 139:             sprintf(led_state,"All_lights=%d \n\r", 1);
  1044   001236  0EBF               	movlw	low test@led_state
  1045   001238  6E2F               	movwf	sprintf@s^0,c
  1046   00123A  6A30               	clrf	(sprintf@s+1)^0,c
  1047   00123C  0E27               	movlw	low STR_1
  1048   00123E  6E31               	movwf	sprintf@fmt^0,c
  1049   001240  0E00               	movlw	0
  1050   001242  6E33               	movwf	(?_sprintf+4)^0,c
  1051   001244  0E01               	movlw	1
  1052   001246  6E32               	movwf	(?_sprintf+3)^0,c
  1053   001248  EC0C  F00D         	call	_sprintf	;wreg free
  1054   00124C                     l2452:
  1055                           
  1056                           ;color.c: 144:         sendStringSerial4(led_state);
  1057   00124C  0EBF               	movlw	low test@led_state
  1058   00124E  6E02               	movwf	sendStringSerial4@string^0,c
  1059   001250  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1060   001252  EC65  F00D         	call	_sendStringSerial4	;wreg free
  1061   001256                     
  1062                           ;color.c: 147:         unsigned int red = color_read_Red();
  1063   001256  EC2A  F00C         	call	_color_read_Red	;wreg free
  1064   00125A  C005  F0F1         	movff	?_color_read_Red,test@red
  1065   00125E  C006  F0F2         	movff	?_color_read_Red+1,test@red+1
  1066   001262                     
  1067                           ;color.c: 148:         unsigned int blue = color_read_Blue();
  1068   001262  ECA2  F00C         	call	_color_read_Blue	;wreg free
  1069   001266  C005  F0F3         	movff	?_color_read_Blue,test@blue
  1070   00126A  C006  F0F4         	movff	?_color_read_Blue+1,test@blue+1
  1071   00126E                     
  1072                           ;color.c: 149:         unsigned int green = color_read_Green();
  1073   00126E  EC52  F00C         	call	_color_read_Green	;wreg free
  1074   001272  C005  F0F5         	movff	?_color_read_Green,test@green
  1075   001276  C006  F0F6         	movff	?_color_read_Green+1,test@green+1
  1076   00127A                     
  1077                           ;color.c: 150:         unsigned int clear = color_read_Clear();
  1078   00127A  EC7A  F00C         	call	_color_read_Clear	;wreg free
  1079   00127E  C005  F0F7         	movff	?_color_read_Clear,test@clear
  1080   001282  C006  F0F8         	movff	?_color_read_Clear+1,test@clear+1
  1081   001286                     
  1082                           ;color.c: 158:         send2USART(battery_level, red, green, blue, clear);
  1083   001286  C057  F04D         	movff	test@battery_level,send2USART@battery_level
  1084   00128A  C058  F04E         	movff	test@battery_level+1,send2USART@battery_level+1
  1085   00128E  C0F1  F04F         	movff	test@red,send2USART@red
  1086   001292  C0F2  F050         	movff	test@red+1,send2USART@red+1
  1087   001296  C0F5  F051         	movff	test@green,send2USART@green
  1088   00129A  C0F6  F052         	movff	test@green+1,send2USART@green+1
  1089   00129E  C0F3  F053         	movff	test@blue,send2USART@blue
  1090   0012A2  C0F4  F054         	movff	test@blue+1,send2USART@blue+1
  1091   0012A6  C0F7  F055         	movff	test@clear,send2USART@clear
  1092   0012AA  C0F8  F056         	movff	test@clear+1,send2USART@clear+1
  1093   0012AE  ECC5  F009         	call	_send2USART	;wreg free
  1094   0012B2                     
  1095                           ;color.c: 159:     }
  1096   0012B2  0100               	movlb	0	; () banked
  1097   0012B4  4BF9               	infsnz	test@combo& (0+255),f,b
  1098   0012B6  2BFA               	incf	(test@combo+1)& (0+255),f,b
  1099   0012B8                     
  1100                           ; BSR set to: 0
  1101   0012B8  51FA               	movf	(test@combo+1)& (0+255),w,b
  1102   0012BA  E109               	bnz	u1300
  1103   0012BC  0E04               	movlw	4
  1104   0012BE  5DF9               	subwf	test@combo& (0+255),w,b
  1105   0012C0  A0D8               	btfss	status,0,c
  1106   0012C2  EF65  F009         	goto	u1301
  1107   0012C6  EF67  F009         	goto	u1300
  1108   0012CA                     u1301:
  1109   0012CA  EF0E  F009         	goto	l2446
  1110   0012CE                     u1300:
  1111   0012CE                     
  1112                           ; BSR set to: 0
  1113   0012CE  0012               	return		;funcret
  1114   0012D0                     __end_of_test:
  1115                           	callstack 0
  1116                           
  1117 ;; *************** function _send2USART *****************
  1118 ;; Defined at:
  1119 ;;		line 146 in file "serial.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  battery_leve    2   76[COMRAM] unsigned int 
  1122 ;;  red             2   78[COMRAM] unsigned int 
  1123 ;;  green           2   80[COMRAM] unsigned int 
  1124 ;;  blue            2   82[COMRAM] unsigned int 
  1125 ;;  clear           2   84[COMRAM] unsigned int 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;  clear_char     50  200[BANK1 ] unsigned char [50]
  1128 ;;  green_char     50  150[BANK1 ] unsigned char [50]
  1129 ;;  blue_char      50  100[BANK1 ] unsigned char [50]
  1130 ;;  red_char       50   50[BANK1 ] unsigned char [50]
  1131 ;;  buf            50    0[BANK1 ] unsigned char [50]
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1141 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1142 ;;      Locals:         0       0     250       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1144 ;;      Totals:        10       0     250       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1145 ;;Total ram usage:      260 bytes
  1146 ;; Hardware stack levels used: 1
  1147 ;; Hardware stack levels required when called: 9
  1148 ;; This function calls:
  1149 ;;		_ADC2String
  1150 ;;		_sendStringSerial4
  1151 ;;		_sprintf
  1152 ;; This function is called by:
  1153 ;;		_test
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text2
  1158   00138A                     __ptext2:
  1159                           	callstack 0
  1160   00138A                     _send2USART:
  1161                           	callstack 20
  1162   00138A                     
  1163                           ;serial.c: 147:         char buf[50];;serial.c: 148:         char red_char[50];;serial.c
      +                          : 149:         char blue_char[50];;serial.c: 150:         char green_char[50];;serial.c:
      +                           151:         char clear_char[50];;serial.c: 155:         ADC2String(buf, battery_level)
      +                          ;
  1164   00138A  0E00               	movlw	low send2USART@buf
  1165   00138C  6E43               	movwf	ADC2String@buf^0,c
  1166   00138E  0E01               	movlw	high send2USART@buf
  1167   001390  6E44               	movwf	(ADC2String@buf+1)^0,c
  1168   001392  C04D  F045         	movff	send2USART@battery_level,ADC2String@ADC_val
  1169   001396  C04E  F046         	movff	send2USART@battery_level+1,ADC2String@ADC_val+1
  1170   00139A  ECCD  F00A         	call	_ADC2String	;wreg free
  1171                           
  1172                           ;serial.c: 156:         sprintf(red_char,"Red=%05d,  ",red);
  1173   00139E  0E32               	movlw	low send2USART@red_char
  1174   0013A0  6E2F               	movwf	sprintf@s^0,c
  1175   0013A2  0E01               	movlw	high send2USART@red_char
  1176   0013A4  6E30               	movwf	(sprintf@s+1)^0,c
  1177   0013A6  0E53               	movlw	low STR_3
  1178   0013A8  6E31               	movwf	sprintf@fmt^0,c
  1179   0013AA  C04F  F032         	movff	send2USART@red,?_sprintf+3
  1180   0013AE  C050  F033         	movff	send2USART@red+1,?_sprintf+4
  1181   0013B2  EC0C  F00D         	call	_sprintf	;wreg free
  1182                           
  1183                           ;serial.c: 157:         sprintf(blue_char,"Blue=%05d,  ",blue);
  1184   0013B6  0E64               	movlw	low send2USART@blue_char
  1185   0013B8  6E2F               	movwf	sprintf@s^0,c
  1186   0013BA  0E01               	movlw	high send2USART@blue_char
  1187   0013BC  6E30               	movwf	(sprintf@s+1)^0,c
  1188   0013BE  0E46               	movlw	low STR_4
  1189   0013C0  6E31               	movwf	sprintf@fmt^0,c
  1190   0013C2  C053  F032         	movff	send2USART@blue,?_sprintf+3
  1191   0013C6  C054  F033         	movff	send2USART@blue+1,?_sprintf+4
  1192   0013CA  EC0C  F00D         	call	_sprintf	;wreg free
  1193                           
  1194                           ;serial.c: 158:         sprintf(green_char,"Green=%05d,  ",green);
  1195   0013CE  0E96               	movlw	low send2USART@green_char
  1196   0013D0  6E2F               	movwf	sprintf@s^0,c
  1197   0013D2  0E01               	movlw	high send2USART@green_char
  1198   0013D4  6E30               	movwf	(sprintf@s+1)^0,c
  1199   0013D6  0E38               	movlw	low STR_5
  1200   0013D8  6E31               	movwf	sprintf@fmt^0,c
  1201   0013DA  C051  F032         	movff	send2USART@green,?_sprintf+3
  1202   0013DE  C052  F033         	movff	send2USART@green+1,?_sprintf+4
  1203   0013E2  EC0C  F00D         	call	_sprintf	;wreg free
  1204                           
  1205                           ;serial.c: 159:         sprintf(clear_char,"Clear=%05d,  \n\n\r",clear);
  1206   0013E6  0EC8               	movlw	low send2USART@clear_char
  1207   0013E8  6E2F               	movwf	sprintf@s^0,c
  1208   0013EA  0E01               	movlw	high send2USART@clear_char
  1209   0013EC  6E30               	movwf	(sprintf@s+1)^0,c
  1210   0013EE  0E16               	movlw	low STR_6
  1211   0013F0  6E31               	movwf	sprintf@fmt^0,c
  1212   0013F2  C055  F032         	movff	send2USART@clear,?_sprintf+3
  1213   0013F6  C056  F033         	movff	send2USART@clear+1,?_sprintf+4
  1214   0013FA  EC0C  F00D         	call	_sprintf	;wreg free
  1215   0013FE                     
  1216                           ;serial.c: 163:         sendStringSerial4(buf);
  1217   0013FE  0E00               	movlw	low send2USART@buf
  1218   001400  6E02               	movwf	sendStringSerial4@string^0,c
  1219   001402  0E01               	movlw	high send2USART@buf
  1220   001404  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1221   001406  EC65  F00D         	call	_sendStringSerial4	;wreg free
  1222   00140A                     
  1223                           ;serial.c: 164:         sendStringSerial4(red_char);
  1224   00140A  0E32               	movlw	low send2USART@red_char
  1225   00140C  6E02               	movwf	sendStringSerial4@string^0,c
  1226   00140E  0E01               	movlw	high send2USART@red_char
  1227   001410  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1228   001412  EC65  F00D         	call	_sendStringSerial4	;wreg free
  1229   001416                     
  1230                           ;serial.c: 165:         sendStringSerial4(blue_char);
  1231   001416  0E64               	movlw	low send2USART@blue_char
  1232   001418  6E02               	movwf	sendStringSerial4@string^0,c
  1233   00141A  0E01               	movlw	high send2USART@blue_char
  1234   00141C  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1235   00141E  EC65  F00D         	call	_sendStringSerial4	;wreg free
  1236   001422                     
  1237                           ;serial.c: 166:         sendStringSerial4(green_char);
  1238   001422  0E96               	movlw	low send2USART@green_char
  1239   001424  6E02               	movwf	sendStringSerial4@string^0,c
  1240   001426  0E01               	movlw	high send2USART@green_char
  1241   001428  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1242   00142A  EC65  F00D         	call	_sendStringSerial4	;wreg free
  1243   00142E                     
  1244                           ;serial.c: 167:         sendStringSerial4(clear_char);
  1245   00142E  0EC8               	movlw	low send2USART@clear_char
  1246   001430  6E02               	movwf	sendStringSerial4@string^0,c
  1247   001432  0E01               	movlw	high send2USART@clear_char
  1248   001434  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1249   001436  EC65  F00D         	call	_sendStringSerial4	;wreg free
  1250   00143A  0012               	return		;funcret
  1251   00143C                     __end_of_send2USART:
  1252                           	callstack 0
  1253                           
  1254 ;; *************** function _sendStringSerial4 *****************
  1255 ;; Defined at:
  1256 ;;		line 41 in file "serial.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;  string          2    1[COMRAM] PTR unsigned char 
  1259 ;;		 -> send2USART@clear_char(50), send2USART@green_char(50), send2USART@blue_char(50), send2USART@red_char(50), 
  1260 ;;		 -> send2USART@buf(50), sendAllReadings@buffer(10), test@led_state(50), 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;		None
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  1    wreg      void 
  1265 ;; Registers used:
  1266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1272 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1275 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1276 ;;Total ram usage:        2 bytes
  1277 ;; Hardware stack levels used: 1
  1278 ;; Hardware stack levels required when called: 1
  1279 ;; This function calls:
  1280 ;;		_sendCharSerial4
  1281 ;; This function is called by:
  1282 ;;		_test
  1283 ;;		_send2USART
  1284 ;;		_sendAllReadings
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           	psect	text3
  1289   001ACA                     __ptext3:
  1290                           	callstack 0
  1291   001ACA                     _sendStringSerial4:
  1292                           	callstack 28
  1293   001ACA                     
  1294                           ;serial.c: 44:     while(*string != 0){
  1295   001ACA  EF74  F00D         	goto	l2310
  1296   001ACE                     l2304:
  1297                           
  1298                           ;serial.c: 46:   sendCharSerial4(*string++);
  1299   001ACE  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  1300   001AD2  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  1301   001AD6  50DF               	movf	indf2,w,c
  1302   001AD8  EC1D  F00E         	call	_sendCharSerial4
  1303   001ADC  4A02               	infsnz	sendStringSerial4@string^0,f,c
  1304   001ADE  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  1305   001AE0                     
  1306                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  1307   001AE0  0E6A               	movlw	106
  1308   001AE2                     u1437:
  1309   001AE2  2EE8               	decfsz	wreg,f,c
  1310   001AE4  D7FE               	bra	u1437
  1311   001AE6  D000               	nop2	
  1312   001AE8                     l2310:
  1313                           
  1314                           ;serial.c: 44:     while(*string != 0){
  1315   001AE8  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  1316   001AEC  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  1317   001AF0  50DF               	movf	indf2,w,c
  1318   001AF2  A4D8               	btfss	status,2,c
  1319   001AF4  EF7E  F00D         	goto	u1211
  1320   001AF8  EF80  F00D         	goto	u1210
  1321   001AFC                     u1211:
  1322   001AFC  EF67  F00D         	goto	l2304
  1323   001B00                     u1210:
  1324   001B00  0012               	return		;funcret
  1325   001B02                     __end_of_sendStringSerial4:
  1326                           	callstack 0
  1327                           
  1328 ;; *************** function _sendCharSerial4 *****************
  1329 ;; Defined at:
  1330 ;;		line 35 in file "serial.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;  charToSend      1    wreg     unsigned char 
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;  charToSend      1    0[COMRAM] unsigned char 
  1335 ;; Return value:  Size  Location     Type
  1336 ;;                  1    wreg      void 
  1337 ;; Registers used:
  1338 ;;		wreg
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 0/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1345 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1347 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1348 ;;Total ram usage:        1 bytes
  1349 ;; Hardware stack levels used: 1
  1350 ;; This function calls:
  1351 ;;		Nothing
  1352 ;; This function is called by:
  1353 ;;		_sendStringSerial4
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text4
  1358   001C3A                     __ptext4:
  1359                           	callstack 0
  1360   001C3A                     _sendCharSerial4:
  1361                           	callstack 28
  1362                           
  1363                           ;incstack = 0
  1364                           ;sendCharSerial4@charToSend stored from wreg
  1365   001C3A  6E01               	movwf	sendCharSerial4@charToSend^0,c
  1366   001C3C                     l351:
  1367   001C3C  010E               	movlb	14	; () banked
  1368   001C3E  A537               	btfss	55,2,b	;volatile
  1369   001C40  EF24  F00E         	goto	u1151
  1370   001C44  EF26  F00E         	goto	u1150
  1371   001C48                     u1151:
  1372   001C48  EF1E  F00E         	goto	l351
  1373   001C4C                     u1150:
  1374   001C4C                     
  1375                           ; BSR set to: 14
  1376                           ;serial.c: 37:     TX4REG = charToSend;
  1377   001C4C  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  1378   001C50                     
  1379                           ; BSR set to: 14
  1380   001C50  0012               	return		;funcret
  1381   001C52                     __end_of_sendCharSerial4:
  1382                           	callstack 0
  1383                           
  1384 ;; *************** function _ADC2String *****************
  1385 ;; Defined at:
  1386 ;;		line 135 in file "serial.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  buf             2   66[COMRAM] PTR unsigned char 
  1389 ;;		 -> send2USART@buf(50), sendAllReadings@buffer(10), 
  1390 ;;  ADC_val         2   68[COMRAM] unsigned int 
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  int_part        2   74[COMRAM] unsigned int 
  1393 ;;  frac_part       2   72[COMRAM] unsigned int 
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1403 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1404 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1405 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1406 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1407 ;;Total ram usage:       10 bytes
  1408 ;; Hardware stack levels used: 1
  1409 ;; Hardware stack levels required when called: 8
  1410 ;; This function calls:
  1411 ;;		___lwdiv
  1412 ;;		___wmul
  1413 ;;		_sprintf
  1414 ;; This function is called by:
  1415 ;;		_send2USART
  1416 ;;		_sendAllReadings
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text5
  1421   00159A                     __ptext5:
  1422                           	callstack 0
  1423   00159A                     _ADC2String:
  1424                           	callstack 20
  1425   00159A                     
  1426                           ;serial.c: 137:     unsigned int int_part=ADC_val/77;
  1427   00159A  C045  F007         	movff	ADC2String@ADC_val,___lwdiv@dividend
  1428   00159E  C046  F008         	movff	ADC2String@ADC_val+1,___lwdiv@dividend+1
  1429   0015A2  0E00               	movlw	0
  1430   0015A4  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1431   0015A6  0E4D               	movlw	77
  1432   0015A8  6E09               	movwf	___lwdiv@divisor^0,c
  1433   0015AA  ECF0  F00B         	call	___lwdiv	;wreg free
  1434   0015AE  C007  F04B         	movff	?___lwdiv,ADC2String@int_part
  1435   0015B2  C008  F04C         	movff	?___lwdiv+1,ADC2String@int_part+1
  1436   0015B6                     
  1437                           ;serial.c: 139:     unsigned int frac_part=(ADC_val*100)/77 - int_part*100;
  1438   0015B6  C045  F001         	movff	ADC2String@ADC_val,___wmul@multiplier
  1439   0015BA  C046  F002         	movff	ADC2String@ADC_val+1,___wmul@multiplier+1
  1440   0015BE  0E00               	movlw	0
  1441   0015C0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1442   0015C2  0E64               	movlw	100
  1443   0015C4  6E03               	movwf	___wmul@multiplicand^0,c
  1444   0015C6  ECDE  F00D         	call	___wmul	;wreg free
  1445   0015CA  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1446   0015CE  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1447   0015D2  0E00               	movlw	0
  1448   0015D4  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1449   0015D6  0E4D               	movlw	77
  1450   0015D8  6E09               	movwf	___lwdiv@divisor^0,c
  1451   0015DA  ECF0  F00B         	call	___lwdiv	;wreg free
  1452   0015DE  C007  F047         	movff	?___lwdiv,??_ADC2String
  1453   0015E2  C008  F048         	movff	?___lwdiv+1,??_ADC2String+1
  1454   0015E6  C04B  F001         	movff	ADC2String@int_part,___wmul@multiplier
  1455   0015EA  C04C  F002         	movff	ADC2String@int_part+1,___wmul@multiplier+1
  1456   0015EE  0EFF               	movlw	255
  1457   0015F0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1458   0015F2  0E9C               	movlw	156
  1459   0015F4  6E03               	movwf	___wmul@multiplicand^0,c
  1460   0015F6  ECDE  F00D         	call	___wmul	;wreg free
  1461   0015FA  5001               	movf	?___wmul^0,w,c
  1462   0015FC  2447               	addwf	??_ADC2String^0,w,c
  1463   0015FE  6E49               	movwf	ADC2String@frac_part^0,c
  1464   001600  5002               	movf	(?___wmul+1)^0,w,c
  1465   001602  2048               	addwfc	(??_ADC2String+1)^0,w,c
  1466   001604  6E4A               	movwf	(ADC2String@frac_part+1)^0,c
  1467   001606                     
  1468                           ;serial.c: 141:     sprintf(buf,"Voltage = %d.%02d,  ",int_part,frac_part);
  1469   001606  C043  F02F         	movff	ADC2String@buf,sprintf@s
  1470   00160A  C044  F030         	movff	ADC2String@buf+1,sprintf@s+1
  1471   00160E  0E01               	movlw	low STR_2
  1472   001610  6E31               	movwf	sprintf@fmt^0,c
  1473   001612  C04B  F032         	movff	ADC2String@int_part,?_sprintf+3
  1474   001616  C04C  F033         	movff	ADC2String@int_part+1,?_sprintf+4
  1475   00161A  C049  F034         	movff	ADC2String@frac_part,?_sprintf+5
  1476   00161E  C04A  F035         	movff	ADC2String@frac_part+1,?_sprintf+6
  1477   001622  EC0C  F00D         	call	_sprintf	;wreg free
  1478   001626                     
  1479                           ;serial.c: 143:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1480   001626  0E52               	movlw	82
  1481   001628  6E48               	movwf	(??_ADC2String+1)^0,c
  1482   00162A  0E2B               	movlw	43
  1483   00162C  6E47               	movwf	??_ADC2String^0,c
  1484   00162E  0E00               	movlw	0
  1485   001630                     u1447:
  1486   001630  2EE8               	decfsz	wreg,f,c
  1487   001632  D7FE               	bra	u1447
  1488   001634  2E47               	decfsz	??_ADC2String^0,f,c
  1489   001636  D7FC               	bra	u1447
  1490   001638  2E48               	decfsz	(??_ADC2String+1)^0,f,c
  1491   00163A  D7FA               	bra	u1447
  1492   00163C  D000               	nop2	
  1493   00163E  0012               	return		;funcret
  1494   001640                     __end_of_ADC2String:
  1495                           	callstack 0
  1496                           
  1497 ;; *************** function _sprintf *****************
  1498 ;; Defined at:
  1499 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;  s               2   46[COMRAM] PTR unsigned char 
  1502 ;;		 -> send2USART@clear_char(50), send2USART@green_char(50), send2USART@blue_char(50), send2USART@red_char(50), 
  1503 ;;		 -> send2USART@buf(50), sendAllReadings@buffer(10), test@led_state(50), 
  1504 ;;  fmt             1   48[COMRAM] PTR const unsigned char 
  1505 ;;		 -> STR_6(17), STR_5(14), STR_4(13), STR_3(12), 
  1506 ;;		 -> STR_2(21), STR_1(17), 
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;  f              12   54[COMRAM] struct _IO_FILE
  1509 ;;  ret             2    0        int 
  1510 ;;  ap              1   53[COMRAM] PTR void [1]
  1511 ;;		 -> ?_sprintf(2), 
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  2   46[COMRAM] int 
  1514 ;; Registers used:
  1515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1521 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1522 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1524 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1525 ;;Total ram usage:       20 bytes
  1526 ;; Hardware stack levels used: 1
  1527 ;; Hardware stack levels required when called: 7
  1528 ;; This function calls:
  1529 ;;		_vfprintf
  1530 ;; This function is called by:
  1531 ;;		_test
  1532 ;;		_ADC2String
  1533 ;;		_send2USART
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           	psect	text6
  1538   001A18                     __ptext6:
  1539                           	callstack 0
  1540   001A18                     _sprintf:
  1541                           	callstack 22
  1542   001A18  0E32               	movlw	low (?_sprintf+3)
  1543   001A1A  6E36               	movwf	sprintf@ap^0,c
  1544   001A1C  C02F  F037         	movff	sprintf@s,sprintf@f
  1545   001A20  C030  F038         	movff	sprintf@s+1,sprintf@f+1
  1546   001A24  0E00               	movlw	0
  1547   001A26  6E3B               	movwf	(sprintf@f+4)^0,c
  1548   001A28  0E00               	movlw	0
  1549   001A2A  6E3A               	movwf	(sprintf@f+3)^0,c
  1550   001A2C  0E00               	movlw	0
  1551   001A2E  6E42               	movwf	(sprintf@f+11)^0,c
  1552   001A30  0E00               	movlw	0
  1553   001A32  6E41               	movwf	(sprintf@f+10)^0,c
  1554   001A34  0E37               	movlw	low sprintf@f
  1555   001A36  6E2B               	movwf	vfprintf@fp^0,c
  1556   001A38  C031  F02C         	movff	sprintf@fmt,vfprintf@fmt
  1557   001A3C  0E36               	movlw	low sprintf@ap
  1558   001A3E  6E2D               	movwf	vfprintf@ap^0,c
  1559   001A40  ECCA  F00C         	call	_vfprintf	;wreg free
  1560   001A44  503A               	movf	(sprintf@f+3)^0,w,c
  1561   001A46  242F               	addwf	sprintf@s^0,w,c
  1562   001A48  6ED9               	movwf	fsr2l,c
  1563   001A4A  503B               	movf	(sprintf@f+4)^0,w,c
  1564   001A4C  2030               	addwfc	(sprintf@s+1)^0,w,c
  1565   001A4E  6EDA               	movwf	fsr2h,c
  1566   001A50  6ADF               	clrf	indf2,c
  1567   001A52  0012               	return		;funcret
  1568   001A54                     __end_of_sprintf:
  1569                           	callstack 0
  1570                           
  1571 ;; *************** function _vfprintf *****************
  1572 ;; Defined at:
  1573 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  fp              1   42[COMRAM] PTR struct _IO_FILE
  1576 ;;		 -> sprintf@f(12), 
  1577 ;;  fmt             1   43[COMRAM] PTR const unsigned char 
  1578 ;;		 -> STR_6(17), STR_5(14), STR_4(13), STR_3(12), 
  1579 ;;		 -> STR_2(21), STR_1(17), 
  1580 ;;  ap              1   44[COMRAM] PTR PTR void 
  1581 ;;		 -> sprintf@ap(1), 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  cfmt            1   45[COMRAM] PTR unsigned char 
  1584 ;;		 -> STR_6(17), STR_5(14), STR_4(13), STR_3(12), 
  1585 ;;		 -> STR_2(21), STR_1(17), 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;                  2   42[COMRAM] int 
  1588 ;; Registers used:
  1589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1595 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1596 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1598 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1599 ;;Total ram usage:        4 bytes
  1600 ;; Hardware stack levels used: 1
  1601 ;; Hardware stack levels required when called: 6
  1602 ;; This function calls:
  1603 ;;		_vfpfcnvrt
  1604 ;; This function is called by:
  1605 ;;		_sprintf
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           	psect	text7
  1610   001994                     __ptext7:
  1611                           	callstack 0
  1612   001994                     _vfprintf:
  1613                           	callstack 22
  1614   001994                     
  1615                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
=======
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=3
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=3
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Generated 21/07/2023 GMT
    61                           ; 
    62                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F67K40 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94   000000                     
    95                           	psect	idataBANK1
    96   002930                     __pidataBANK1:
    97                           	callstack 0
    98                           
    99                           ;initializer for _dataFlag
   100   002930  01                 	db	1
   101   000000                     _TX4REG	set	3812
   102   000000                     _RC4STAbits	set	3815
   103   000000                     _SP4BRGH	set	3814
   104   000000                     _TRISFbits	set	3974
   105   000000                     _LATFbits	set	3966
   106   000000                     _LATHbits	set	3968
   107   000000                     _TRISAbits	set	3969
   108   000000                     _TRISEbits	set	3973
   109   000000                     _TRISGbits	set	3975
   110   000000                     _TRISDbits	set	3972
   111   000000                     _PORTFbits	set	3982
   112   000000                     _SSP2CON2bits	set	3802
   113   000000                     _RX4PPS	set	3605
   114   000000                     _SSP2CLKPPS	set	3612
   115   000000                     _SSP2DATPPS	set	3613
   116   000000                     _ANSELDbits	set	3751
   117   000000                     _SSP2ADD	set	3798
   118   000000                     _SSP2CON1bits	set	3801
   119   000000                     _LATAbits	set	3961
   120   000000                     _LATEbits	set	3965
   121   000000                     _LATGbits	set	3967
   122   000000                     _LATCbits	set	3963
   123   000000                     _LATDbits	set	3964
   124   000000                     _CCPR2H	set	4006
   125   000000                     _CCPR1H	set	4010
   126   000000                     _RC4REG	set	3811
   127   000000                     _SP4BRGL	set	3813
   128   000000                     _TX4STAbits	set	3816
   129   000000                     _BAUD4CONbits	set	3817
   130   000000                     _SSP2CON2	set	3802
   131   000000                     _CCPR4H	set	3873
   132   000000                     _CCPR3H	set	3877
   133   000000                     _SSP2STAT	set	3800
   134   000000                     _ANSELFbits	set	3764
   135   000000                     _SSP2BUF	set	3797
   136   000000                     _PIE4bits	set	3629
   137   000000                     _PIR4bits	set	3639
   138   000000                     _RC0PPS	set	3682
   139   000000                     _RC7PPS	set	3689
   140   000000                     _RD5PPS	set	3695
   141   000000                     _RE2PPS	set	3700
   142   000000                     _RD6PPS	set	3696
   143   000000                     _CCP1CONbits	set	4011
   144   000000                     _CCPTMRS0bits	set	4013
   145   000000                     _T2PR	set	4028
   146   000000                     _T2CONbits	set	4029
   147   000000                     _CCP2CONbits	set	4007
   148   000000                     _CCP3CONbits	set	3878
   149   000000                     _ADREFbits	set	3928
   150   000000                     _CCP4CONbits	set	3874
   151   000000                     _TRISHbits	set	3976
   152   000000                     _TRISCbits	set	3971
   153   000000                     _ADPCH	set	3935
   154   000000                     _ADRESH	set	3940
   155   000000                     _ADCON0bits	set	3936
   156   000000                     _RE4PPS	set	3702
   157   000000                     _RG6PPS	set	3720
   158   000000                     _T2CLKCONbits	set	4031
   159   000000                     _T2HLTbits	set	4030
   160                           
   161                           	psect	smallconst
   162   000E00                     __psmallconst:
   163                           	callstack 0
   164   000E00  00                 	db	0
   165   000E01                     STR_11:
   166                           
   167                           ; BSR set to: 15
   168   000E01  43                 	db	67	;'C'
   169   000E02  61                 	db	97	;'a'
   170   000E03  6C                 	db	108	;'l'
   171   000E04  69                 	db	105	;'i'
   172   000E05  62                 	db	98	;'b'
   173   000E06  72                 	db	114	;'r'
   174   000E07  61                 	db	97	;'a'
   175   000E08  74                 	db	116	;'t'
   176   000E09  69                 	db	105	;'i'
   177   000E0A  6F                 	db	111	;'o'
   178   000E0B  6E                 	db	110	;'n'
   179   000E0C  20                 	db	32
   180   000E0D  73                 	db	115	;'s'
   181   000E0E  74                 	db	116	;'t'
   182   000E0F  61                 	db	97	;'a'
   183   000E10  74                 	db	116	;'t'
   184   000E11  65                 	db	101	;'e'
   185   000E12  20                 	db	32
   186   000E13  3D                 	db	61	;'='
   187   000E14  20                 	db	32
   188   000E15  61                 	db	97	;'a'
   189   000E16  6D                 	db	109	;'m'
   190   000E17  62                 	db	98	;'b'
   191   000E18  69                 	db	105	;'i'
   192   000E19  65                 	db	101	;'e'
   193   000E1A  6E                 	db	110	;'n'
   194   000E1B  74                 	db	116	;'t'
   195   000E1C  20                 	db	32
   196   000E1D  6C                 	db	108	;'l'
   197   000E1E  69                 	db	105	;'i'
   198   000E1F  67                 	db	103	;'g'
   199   000E20  68                 	db	104	;'h'
   200   000E21  74                 	db	116	;'t'
   201   000E22  00                 	db	0
   202   000E23                     STR_7:
   203                           
   204                           ; BSR set to: 15
   205   000E23  43                 	db	67	;'C'
   206   000E24  61                 	db	97	;'a'
   207   000E25  6C                 	db	108	;'l'
   208   000E26  69                 	db	105	;'i'
   209   000E27  62                 	db	98	;'b'
   210   000E28  72                 	db	114	;'r'
   211   000E29  61                 	db	97	;'a'
   212   000E2A  74                 	db	116	;'t'
   213   000E2B  69                 	db	105	;'i'
   214   000E2C  6F                 	db	111	;'o'
   215   000E2D  6E                 	db	110	;'n'
   216   000E2E  20                 	db	32
   217   000E2F  73                 	db	115	;'s'
   218   000E30  74                 	db	116	;'t'
   219   000E31  61                 	db	97	;'a'
   220   000E32  74                 	db	116	;'t'
   221   000E33  65                 	db	101	;'e'
   222   000E34  20                 	db	32
   223   000E35  3D                 	db	61	;'='
   224   000E36  20                 	db	32
   225   000E37  67                 	db	103	;'g'
   226   000E38  72                 	db	114	;'r'
   227   000E39  65                 	db	101	;'e'
   228   000E3A  65                 	db	101	;'e'
   229   000E3B  6E                 	db	110	;'n'
   230   000E3C  20                 	db	32
   231   000E3D  0A                 	db	10
   232   000E3E  0D                 	db	13
   233   000E3F  00                 	db	0
   234   000E40                     STR_9:
   235                           
   236                           ; BSR set to: 15
   237   000E40  43                 	db	67	;'C'
   238   000E41  61                 	db	97	;'a'
   239   000E42  6C                 	db	108	;'l'
   240   000E43  69                 	db	105	;'i'
   241   000E44  62                 	db	98	;'b'
   242   000E45  72                 	db	114	;'r'
   243   000E46  61                 	db	97	;'a'
   244   000E47  74                 	db	116	;'t'
   245   000E48  69                 	db	105	;'i'
   246   000E49  6F                 	db	111	;'o'
   247   000E4A  6E                 	db	110	;'n'
   248   000E4B  20                 	db	32
   249   000E4C  73                 	db	115	;'s'
   250   000E4D  74                 	db	116	;'t'
   251   000E4E  61                 	db	97	;'a'
   252   000E4F  74                 	db	116	;'t'
   253   000E50  65                 	db	101	;'e'
   254   000E51  3D                 	db	61	;'='
   255   000E52  20                 	db	32
   256   000E53  62                 	db	98	;'b'
   257   000E54  6C                 	db	108	;'l'
   258   000E55  75                 	db	117	;'u'
   259   000E56  65                 	db	101	;'e'
   260   000E57  20                 	db	32
   261   000E58  0A                 	db	10
   262   000E59  0D                 	db	13
   263   000E5A  00                 	db	0
   264   000E5B                     STR_13:
   265                           
   266                           ; BSR set to: 15
   267   000E5B  43                 	db	67	;'C'
   268   000E5C  41                 	db	65	;'A'
   269   000E5D  4C                 	db	76	;'L'
   270   000E5E  49                 	db	73	;'I'
   271   000E5F  42                 	db	66	;'B'
   272   000E60  52                 	db	82	;'R'
   273   000E61  41                 	db	65	;'A'
   274   000E62  54                 	db	84	;'T'
   275   000E63  49                 	db	73	;'I'
   276   000E64  4F                 	db	79	;'O'
   277   000E65  4E                 	db	78	;'N'
   278   000E66  20                 	db	32
   279   000E67  43                 	db	67	;'C'
   280   000E68  4F                 	db	79	;'O'
   281   000E69  4D                 	db	77	;'M'
   282   000E6A  50                 	db	80	;'P'
   283   000E6B  4C                 	db	76	;'L'
   284   000E6C  45                 	db	69	;'E'
   285   000E6D  54                 	db	84	;'T'
   286   000E6E  45                 	db	69	;'E'
   287   000E6F  44                 	db	68	;'D'
   288   000E70  20                 	db	32
   289   000E71  0A                 	db	10
   290   000E72  0D                 	db	13
   291   000E73  00                 	db	0
   292   000E74                     STR_5:
   293                           
   294                           ; BSR set to: 15
   295   000E74  43                 	db	67	;'C'
   296   000E75  61                 	db	97	;'a'
   297   000E76  6C                 	db	108	;'l'
   298   000E77  69                 	db	105	;'i'
   299   000E78  62                 	db	98	;'b'
   300   000E79  72                 	db	114	;'r'
   301   000E7A  61                 	db	97	;'a'
   302   000E7B  74                 	db	116	;'t'
   303   000E7C  69                 	db	105	;'i'
   304   000E7D  6F                 	db	111	;'o'
   305   000E7E  6E                 	db	110	;'n'
   306   000E7F  20                 	db	32
   307   000E80  73                 	db	115	;'s'
   308   000E81  74                 	db	116	;'t'
   309   000E82  61                 	db	97	;'a'
   310   000E83  74                 	db	116	;'t'
   311   000E84  65                 	db	101	;'e'
   312   000E85  20                 	db	32
   313   000E86  3D                 	db	61	;'='
   314   000E87  20                 	db	32
   315   000E88  72                 	db	114	;'r'
   316   000E89  65                 	db	101	;'e'
   317   000E8A  64                 	db	100	;'d'
   318   000E8B  00                 	db	0
   319   000E8C                     STR_15:
   320                           
   321                           ; BSR set to: 15
   322   000E8C  56                 	db	86	;'V'
   323   000E8D  6F                 	db	111	;'o'
   324   000E8E  6C                 	db	108	;'l'
   325   000E8F  74                 	db	116	;'t'
   326   000E90  61                 	db	97	;'a'
   327   000E91  67                 	db	103	;'g'
   328   000E92  65                 	db	101	;'e'
   329   000E93  20                 	db	32
   330   000E94  3D                 	db	61	;'='
   331   000E95  20                 	db	32
   332   000E96  25                 	db	37
   333   000E97  64                 	db	100	;'d'
   334   000E98  2E                 	db	46
   335   000E99  25                 	db	37
   336   000E9A  30                 	db	48	;'0'
   337   000E9B  32                 	db	50	;'2'
   338   000E9C  64                 	db	100	;'d'
   339   000E9D  2C                 	db	44
   340   000E9E  20                 	db	32
   341   000E9F  20                 	db	32
   342   000EA0  00                 	db	0
   343   000EA1                     STR_2:
   344                           
   345                           ; BSR set to: 15
   346   000EA1  47                 	db	71	;'G'
   347   000EA2  72                 	db	114	;'r'
   348   000EA3  65                 	db	101	;'e'
   349   000EA4  65                 	db	101	;'e'
   350   000EA5  6E                 	db	110	;'n'
   351   000EA6  5F                 	db	95	;'_'
   352   000EA7  6C                 	db	108	;'l'
   353   000EA8  69                 	db	105	;'i'
   354   000EA9  67                 	db	103	;'g'
   355   000EAA  68                 	db	104	;'h'
   356   000EAB  74                 	db	116	;'t'
   357   000EAC  3D                 	db	61	;'='
   358   000EAD  25                 	db	37
   359   000EAE  64                 	db	100	;'d'
   360   000EAF  2C                 	db	44
   361   000EB0  20                 	db	32
   362   000EB1  0A                 	db	10
   363   000EB2  0D                 	db	13
   364   000EB3  00                 	db	0
   365   000EB4                     STR_1:
   366                           
   367                           ; BSR set to: 15
   368   000EB4  52                 	db	82	;'R'
   369   000EB5  65                 	db	101	;'e'
   370   000EB6  64                 	db	100	;'d'
   371   000EB7  5F                 	db	95	;'_'
   372   000EB8  6C                 	db	108	;'l'
   373   000EB9  69                 	db	105	;'i'
   374   000EBA  67                 	db	103	;'g'
   375   000EBB  68                 	db	104	;'h'
   376   000EBC  74                 	db	116	;'t'
   377   000EBD  3D                 	db	61	;'='
   378   000EBE  25                 	db	37
   379   000EBF  64                 	db	100	;'d'
   380   000EC0  2C                 	db	44
   381   000EC1  20                 	db	32
   382   000EC2  0A                 	db	10
   383   000EC3  0D                 	db	13
   384   000EC4  00                 	db	0
   385   000EC5                     STR_4:
   386                           
   387                           ; BSR set to: 15
   388   000EC5  41                 	db	65	;'A'
   389   000EC6  6C                 	db	108	;'l'
   390   000EC7  6C                 	db	108	;'l'
   391   000EC8  5F                 	db	95	;'_'
   392   000EC9  6C                 	db	108	;'l'
   393   000ECA  69                 	db	105	;'i'
   394   000ECB  67                 	db	103	;'g'
   395   000ECC  68                 	db	104	;'h'
   396   000ECD  74                 	db	116	;'t'
   397   000ECE  73                 	db	115	;'s'
   398   000ECF  3D                 	db	61	;'='
   399   000ED0  25                 	db	37
   400   000ED1  64                 	db	100	;'d'
   401   000ED2  20                 	db	32
   402   000ED3  0A                 	db	10
   403   000ED4  0D                 	db	13
   404   000ED5  00                 	db	0
   405   000ED6                     STR_3:
   406                           
   407                           ; BSR set to: 15
   408   000ED6  42                 	db	66	;'B'
   409   000ED7  6C                 	db	108	;'l'
   410   000ED8  75                 	db	117	;'u'
   411   000ED9  65                 	db	101	;'e'
   412   000EDA  5F                 	db	95	;'_'
   413   000EDB  6C                 	db	108	;'l'
   414   000EDC  69                 	db	105	;'i'
   415   000EDD  67                 	db	103	;'g'
   416   000EDE  68                 	db	104	;'h'
   417   000EDF  74                 	db	116	;'t'
   418   000EE0  3D                 	db	61	;'='
   419   000EE1  25                 	db	37
   420   000EE2  64                 	db	100	;'d'
   421   000EE3  20                 	db	32
   422   000EE4  0A                 	db	10
   423   000EE5  0D                 	db	13
   424   000EE6  00                 	db	0
   425   000EE7                     STR_16:
   426                           
   427                           ; BSR set to: 15
   428   000EE7  68                 	db	104	;'h'
   429   000EE8  75                 	db	117	;'u'
   430   000EE9  65                 	db	101	;'e'
   431   000EEA  3D                 	db	61	;'='
   432   000EEB  25                 	db	37
   433   000EEC  30                 	db	48	;'0'
   434   000EED  33                 	db	51	;'3'
   435   000EEE  64                 	db	100	;'d'
   436   000EEF  2C                 	db	44
   437   000EF0  20                 	db	32
   438   000EF1  20                 	db	32
   439   000EF2  00                 	db	0
   440   000EF3                     STR_6:
   441                           
   442                           ; BSR set to: 15
   443   000EF3  2E                 	db	46
   444   000EF4  00                 	db	0
   445   000EF5  00                 	db	0	; dummy byte at the end
   446   000000                     
   447                           ; #config settings
   448                           
   449                           	psect	cinit
   450   0027EC                     __pcinit:
   451                           	callstack 0
   452   0027EC                     start_initialization:
   453                           	callstack 0
   454   0027EC                     __initialization:
   455                           	callstack 0
   456                           
   457                           ; Initialize objects allocated to BANK1 (1 bytes)
   458                           ; load TBLPTR registers with __pidataBANK1
   459   0027EC  0E30               	movlw	low __pidataBANK1
   460   0027EE  6EF6               	movwf	tblptrl,c
   461   0027F0  0E29               	movlw	high __pidataBANK1
   462   0027F2  6EF7               	movwf	tblptrh,c
   463   0027F4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   464   0027F6  6EF8               	movwf	tblptru,c
   465   0027F8  0009               	tblrd		*+	;fetch initializer
   466   0027FA  CFF5 F1AD          	movff	tablat,__pdataBANK1
   467                           
   468                           ; Clear objects allocated to BANK1 (171 bytes)
   469   0027FE  EE01  F000         	lfsr	0,__pbssBANK1
   470   002802  0EAB               	movlw	171
   471   002804                     clear_0:
   472   002804  6AEE               	clrf	postinc0,c
   473   002806  06E8               	decf	wreg,f,c
   474   002808  E1FD               	bnz	clear_0
   475                           
   476                           ; Clear objects allocated to BANK0 (4 bytes)
   477   00280A  0100               	movlb	0
   478   00280C  6BFF               	clrf	(__pbssBANK0+3)& (0+255),b
   479   00280E  6BFE               	clrf	(__pbssBANK0+2)& (0+255),b
   480   002810  6BFD               	clrf	(__pbssBANK0+1)& (0+255),b
   481   002812  6BFC               	clrf	__pbssBANK0& (0+255),b
   482                           
   483                           ; Clear objects allocated to COMRAM (1 bytes)
   484   002814  6A5F               	clrf	__pbssCOMRAM& (0+255),c
   485   002816                     end_of_initialization:
   486                           	callstack 0
   487   002816                     __end_of__initialization:
   488                           	callstack 0
   489   002816  0100               	movlb	0
   490   002818  EF04  F00F         	goto	_main	;jump to C main() function
   491                           
   492                           	psect	bssCOMRAM
   493   00005F                     __pbssCOMRAM:
   494                           	callstack 0
   495   00005F                     _TxBufWriteCnt:
   496                           	callstack 0
   497   00005F                     	ds	1
   498                           
   499                           	psect	bssBANK0
   500   0000FC                     __pbssBANK0:
   501                           	callstack 0
   502   0000FC                     _flags:
   503                           	callstack 0
   504   0000FC                     	ds	1
   505   0000FD                     _TxBufReadCnt:
   506                           	callstack 0
   507   0000FD                     	ds	1
   508   0000FE                     _RxBufReadCnt:
   509                           	callstack 0
   510   0000FE                     	ds	1
   511   0000FF                     _RxBufWriteCnt:
   512                           	callstack 0
   513   0000FF                     	ds	1
   514                           
   515                           	psect	bssBANK1
   516   000100                     __pbssBANK1:
   517                           	callstack 0
   518   000100                     _EUSART4TXbuf:
   519                           	callstack 0
   520   000100                     	ds	60
   521   00013C                     _ldrReadings:
   522                           	callstack 0
   523   00013C                     	ds	20
   524   000150                     _EUSART4RXbuf:
   525                           	callstack 0
   526   000150                     	ds	20
   527   000164                     _width:
   528                           	callstack 0
   529   000164                     	ds	2
   530   000166                     _prec:
   531                           	callstack 0
   532   000166                     	ds	2
   533   000168                     _readingIndex:
   534                           	callstack 0
   535   000168                     	ds	1
   536   000169                     _dbuf:
   537                           	callstack 0
   538   000169                     	ds	32
   539   000189                     _motorR:
   540                           	callstack 0
   541   000189                     	ds	9
   542   000192                     _motorL:
   543                           	callstack 0
   544   000192                     	ds	9
   545   00019B                     _colorCurrent:
   546                           	callstack 0
   547   00019B                     	ds	8
   548   0001A3                     _colorCalibration:
   549                           	callstack 0
   550   0001A3                     	ds	8
   551                           
   552                           	psect	dataBANK1
   553   0001AD                     __pdataBANK1:
   554                           	callstack 0
   555   0001AD                     _dataFlag:
   556                           	callstack 0
   557   0001AD                     	ds	1
   558                           
   559                           	psect	cstackBANK1
   560   0001AB                     __pcstackBANK1:
   561                           	callstack 0
   562   0001AB                     main@battery_level:
   563                           	callstack 0
   564                           
   565                           ; 2 bytes @ 0x0
   566   0001AB                     	ds	2
   567                           
   568                           	psect	cstackBANK0
   569   000060                     __pcstackBANK0:
   570                           	callstack 0
   571   000060                     _convert_rgb2hue$2847:
   572                           	callstack 0
   573   000060                     send2USART@buf:
   574                           	callstack 0
   575                           
   576                           ; 50 bytes @ 0x0
   577   000060                     	ds	8
   578   000068                     convert_rgb2hue@hue:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0x8
   582   000068                     	ds	2
   583   00006A                     convert_rgb2hue@total:
   584                           	callstack 0
   585                           
   586                           ; 8 bytes @ 0xA
   587   00006A                     	ds	8
   588   000072                     _convert_rgb2hue$2845:
   589                           	callstack 0
   590                           
   591                           ; 8 bytes @ 0x12
   592   000072                     	ds	8
   593   00007A                     _convert_rgb2hue$2846:
   594                           	callstack 0
   595                           
   596                           ; 8 bytes @ 0x1A
   597   00007A                     	ds	8
   598   000082                     convert_rgb2hue@b:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x22
   602   000082                     	ds	2
   603   000084                     convert_rgb2hue@r:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x24
   607   000084                     	ds	2
   608   000086                     convert_rgb2hue@g:
   609                           	callstack 0
   610                           
   611                           ; 2 bytes @ 0x26
   612   000086                     	ds	12
   613   000092                     send2USART@hue_char:
   614                           	callstack 0
   615                           
   616                           ; 50 bytes @ 0x32
   617   000092                     	ds	50
   618   0000C4                     test@led_state:
   619                           	callstack 0
   620                           
   621                           ; 50 bytes @ 0x64
   622   0000C4                     	ds	50
   623   0000F6                     test@hue:
   624                           	callstack 0
   625                           
   626                           ; 2 bytes @ 0x96
   627   0000F6                     	ds	2
   628   0000F8                     test@combo:
   629                           	callstack 0
   630                           
   631                           ; 2 bytes @ 0x98
   632   0000F8                     	ds	2
   633   0000FA                     ??_main:
   634                           
   635                           ; 1 bytes @ 0x9A
   636   0000FA                     	ds	2
   637                           
   638                           	psect	cstackCOMRAM
   639   000001                     __pcstackCOMRAM:
   640                           	callstack 0
   641   000001                     ??_I2C_2_Master_Idle:
   642   000001                     ?___wmul:
   643                           	callstack 0
   644   000001                     ?___awdiv:
   645                           	callstack 0
   646   000001                     ?___awmod:
   647                           	callstack 0
   648   000001                     ?___omul:
   649                           	callstack 0
   650   000001                     sendCharSerial4@charToSend:
   651                           	callstack 0
   652   000001                     initDCmotorsPWM@PWMperiod:
   653                           	callstack 0
   654   000001                     ___wmul@multiplier:
   655                           	callstack 0
   656   000001                     ___awdiv@dividend:
   657                           	callstack 0
   658   000001                     ___awmod@dividend:
   659                           	callstack 0
   660   000001                     fputc@c:
   661                           	callstack 0
   662   000001                     ___omul@multiplier:
   663                           	callstack 0
   664                           
   665                           ; 8 bytes @ 0x0
   666   000001                     	ds	1
   667   000002                     ??_I2C_2_Master_Read:
   668   000002                     I2C_2_Master_Write@data_byte:
   669                           	callstack 0
   670   000002                     sendStringSerial4@string:
   671                           	callstack 0
   672                           
   673                           ; 1 bytes @ 0x1
   674   000002                     	ds	1
   675   000003                     color_writetoaddr@value:
   676                           	callstack 0
   677   000003                     I2C_2_Master_Read@ack:
   678                           	callstack 0
   679   000003                     fputc@fp:
   680                           	callstack 0
   681   000003                     ___wmul@multiplicand:
   682                           	callstack 0
   683   000003                     ___awdiv@divisor:
   684                           	callstack 0
   685   000003                     ___awmod@divisor:
   686                           	callstack 0
   687                           
   688                           ; 2 bytes @ 0x2
   689   000003                     	ds	1
   690   000004                     ??_fputc:
   691   000004                     color_writetoaddr@address:
   692                           	callstack 0
   693   000004                     I2C_2_Master_Read@tmp:
   694                           	callstack 0
   695                           
   696                           ; 1 bytes @ 0x3
   697   000004                     	ds	1
   698   000005                     ??_color_click_init:
   699   000005                     ?_color_read_Red:
   700                           	callstack 0
   701   000005                     ?_color_read_Green:
   702                           	callstack 0
   703   000005                     ?_color_read_Blue:
   704                           	callstack 0
   705   000005                     ?_color_read_Clear:
   706                           	callstack 0
   707   000005                     ___awdiv@counter:
   708                           	callstack 0
   709   000005                     ___awmod@counter:
   710                           	callstack 0
   711   000005                     ___wmul@product:
   712                           	callstack 0
   713                           
   714                           ; 2 bytes @ 0x4
   715   000005                     	ds	1
   716   000006                     ___awdiv@sign:
   717                           	callstack 0
   718   000006                     ___awmod@sign:
   719                           	callstack 0
   720                           
   721                           ; 1 bytes @ 0x5
   722   000006                     	ds	1
   723   000007                     ??_color_read_Red:
   724   000007                     ??_color_read_Green:
   725   000007                     ??_color_read_Blue:
   726   000007                     ??_color_read_Clear:
   727   000007                     ?_abs:
   728                           	callstack 0
   729   000007                     ?___lwdiv:
   730                           	callstack 0
   731   000007                     ?_read_prec_or_width:
   732                           	callstack 0
   733   000007                     read_prec_or_width@fmt:
   734                           	callstack 0
   735   000007                     ___awdiv@quotient:
   736                           	callstack 0
   737   000007                     ___lwdiv@dividend:
   738                           	callstack 0
   739   000007                     abs@a:
   740                           	callstack 0
   741                           
   742                           ; 2 bytes @ 0x6
   743   000007                     	ds	1
   744   000008                     read_prec_or_width@ap:
   745                           	callstack 0
   746                           
   747                           ; 1 bytes @ 0x7
   748   000008                     	ds	1
   749   000009                     ??_abs:
   750   000009                     read_prec_or_width@c:
   751                           	callstack 0
   752   000009                     ___lwdiv@divisor:
   753                           	callstack 0
   754   000009                     fputs@s:
   755                           	callstack 0
   756   000009                     ___omul@multiplicand:
   757                           	callstack 0
   758                           
   759                           ; 8 bytes @ 0x8
   760   000009                     	ds	1
   761   00000A                     color_read_Red@tmp:
   762                           	callstack 0
   763   00000A                     color_read_Green@tmp:
   764                           	callstack 0
   765   00000A                     color_read_Blue@tmp:
   766                           	callstack 0
   767   00000A                     color_read_Clear@tmp:
   768                           	callstack 0
   769   00000A                     read_prec_or_width@n:
   770                           	callstack 0
   771                           
   772                           ; 2 bytes @ 0x9
   773   00000A                     	ds	1
   774   00000B                     ___lwdiv@counter:
   775                           	callstack 0
   776   00000B                     fputs@fp:
   777                           	callstack 0
   778                           
   779                           ; 1 bytes @ 0xA
   780   00000B                     	ds	1
   781   00000C                     fputs@c:
   782                           	callstack 0
   783   00000C                     reading_values@cCurr:
   784                           	callstack 0
   785   00000C                     ___lwdiv@quotient:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0xB
   789   00000C                     	ds	1
   790   00000D                     fputs@i:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0xC
   794   00000D                     	ds	1
   795   00000E                     
   796                           ; 1 bytes @ 0xD
   797   00000E                     	ds	1
   798   00000F                     pad@fp:
   799                           	callstack 0
   800                           
   801                           ; 1 bytes @ 0xE
   802   00000F                     	ds	1
   803   000010                     pad@buf:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0xF
   807   000010                     	ds	1
   808   000011                     ___omul@product:
   809                           	callstack 0
   810                           
   811                           ; 8 bytes @ 0x10
   812   000011                     	ds	1
   813   000012                     pad@p:
   814                           	callstack 0
   815                           
   816                           ; 2 bytes @ 0x11
   817   000012                     	ds	2
   818   000014                     ??_pad:
   819                           
   820                           ; 1 bytes @ 0x13
   821   000014                     	ds	1
   822   000015                     pad@i:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0x14
   826   000015                     	ds	2
   827   000017                     dtoa@fp:
   828                           	callstack 0
   829                           
   830                           ; 1 bytes @ 0x16
   831   000017                     	ds	1
   832   000018                     dtoa@d:
   833                           	callstack 0
   834                           
   835                           ; 2 bytes @ 0x17
   836   000018                     	ds	1
   837   000019                     ?___lodiv:
   838                           	callstack 0
   839   000019                     ___lodiv@dividend:
   840                           	callstack 0
   841                           
   842                           ; 8 bytes @ 0x18
   843   000019                     	ds	1
   844   00001A                     _dtoa$2524:
   845                           	callstack 0
   846                           
   847                           ; 2 bytes @ 0x19
   848   00001A                     	ds	2
   849   00001C                     dtoa@p:
   850                           	callstack 0
   851                           
   852                           ; 1 bytes @ 0x1B
   853   00001C                     	ds	1
   854   00001D                     dtoa@w:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x1C
   858   00001D                     	ds	2
   859   00001F                     dtoa@s:
   860                           	callstack 0
   861                           
   862                           ; 1 bytes @ 0x1E
   863   00001F                     	ds	1
   864   000020                     dtoa@i:
   865                           	callstack 0
   866                           
   867                           ; 2 bytes @ 0x1F
   868   000020                     	ds	1
   869   000021                     ___lodiv@divisor:
   870                           	callstack 0
   871                           
   872                           ; 8 bytes @ 0x20
   873   000021                     	ds	1
   874   000022                     vfpfcnvrt@fp:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x21
   878   000022                     	ds	1
   879   000023                     vfpfcnvrt@fmt:
   880                           	callstack 0
   881                           
   882                           ; 1 bytes @ 0x22
   883   000023                     	ds	1
   884   000024                     vfpfcnvrt@ap:
   885                           	callstack 0
   886                           
   887                           ; 1 bytes @ 0x23
   888   000024                     	ds	1
   889   000025                     ??_vfpfcnvrt:
   890                           
   891                           ; 1 bytes @ 0x24
   892   000025                     	ds	2
   893   000027                     vfpfcnvrt@convarg:
   894                           	callstack 0
   895                           
   896                           ; 4 bytes @ 0x26
   897   000027                     	ds	2
   898   000029                     ___lodiv@quotient:
   899                           	callstack 0
   900                           
   901                           ; 8 bytes @ 0x28
   902   000029                     	ds	2
   903   00002B                     vfpfcnvrt@done:
   904                           	callstack 0
   905                           
   906                           ; 1 bytes @ 0x2A
   907   00002B                     	ds	1
   908   00002C                     vfpfcnvrt@cp:
   909                           	callstack 0
   910                           
   911                           ; 1 bytes @ 0x2B
   912   00002C                     	ds	1
   913   00002D                     ?_vfprintf:
   914                           	callstack 0
   915   00002D                     vfprintf@fp:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x2C
   919   00002D                     	ds	1
   920   00002E                     vfprintf@fmt:
   921                           	callstack 0
   922                           
   923                           ; 1 bytes @ 0x2D
   924   00002E                     	ds	1
   925   00002F                     vfprintf@ap:
   926                           	callstack 0
   927                           
   928                           ; 1 bytes @ 0x2E
   929   00002F                     	ds	1
   930   000030                     vfprintf@cfmt:
   931                           	callstack 0
   932                           
   933                           ; 1 bytes @ 0x2F
   934   000030                     	ds	1
   935   000031                     ?_sprintf:
   936                           	callstack 0
   937   000031                     ___lodiv@counter:
   938                           	callstack 0
   939   000031                     sprintf@s:
   940                           	callstack 0
   941                           
   942                           ; 1 bytes @ 0x30
   943   000031                     	ds	1
   944   000032                     ?_convert_rgb2hue:
   945                           	callstack 0
   946   000032                     sprintf@fmt:
   947                           	callstack 0
   948   000032                     convert_rgb2hue@cMax:
   949                           	callstack 0
   950                           
   951                           ; 2 bytes @ 0x31
   952   000032                     	ds	2
   953   000034                     convert_rgb2hue@cCurr:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x33
   957   000034                     	ds	2
   958   000036                     ??_convert_rgb2hue:
   959                           
   960                           ; 1 bytes @ 0x35
   961   000036                     	ds	1
   962   000037                     sprintf@ap:
   963                           	callstack 0
   964                           
   965                           ; 1 bytes @ 0x36
   966   000037                     	ds	1
   967   000038                     sprintf@f:
   968                           	callstack 0
   969                           
   970                           ; 12 bytes @ 0x37
   971   000038                     	ds	12
   972   000044                     ADC2String@buf:
   973                           	callstack 0
   974   000044                     calibration_routine@cCal:
   975                           	callstack 0
   976                           
   977                           ; 2 bytes @ 0x43
   978   000044                     	ds	1
   979   000045                     ADC2String@ADC_val:
   980                           	callstack 0
   981                           
   982                           ; 2 bytes @ 0x44
   983   000045                     	ds	1
   984   000046                     ??_calibration_routine:
   985                           
   986                           ; 1 bytes @ 0x45
   987   000046                     	ds	1
   988   000047                     ??_ADC2String:
   989                           
   990                           ; 1 bytes @ 0x46
   991   000047                     	ds	1
   992   000048                     calibration_routine@cal_state:
   993                           	callstack 0
   994                           
   995                           ; 20 bytes @ 0x47
   996   000048                     	ds	1
   997   000049                     ADC2String@frac_part:
   998                           	callstack 0
   999                           
  1000                           ; 2 bytes @ 0x48
  1001   000049                     	ds	2
  1002   00004B                     ADC2String@int_part:
  1003                           	callstack 0
  1004                           
  1005                           ; 2 bytes @ 0x4A
  1006   00004B                     	ds	2
  1007   00004D                     send2USART@battery_level:
  1008                           	callstack 0
  1009                           
  1010                           ; 2 bytes @ 0x4C
  1011   00004D                     	ds	2
  1012   00004F                     send2USART@hue:
  1013                           	callstack 0
  1014                           
  1015                           ; 2 bytes @ 0x4E
  1016   00004F                     	ds	2
  1017   000051                     
  1018                           ; 1 bytes @ 0x50
  1019   000051                     	ds	11
  1020   00005C                     test@battery_level:
  1021                           	callstack 0
  1022                           
  1023                           ; 2 bytes @ 0x5B
  1024   00005C                     	ds	2
  1025   00005E                     ??_test:
  1026                           
  1027                           ; 1 bytes @ 0x5D
  1028   00005E                     	ds	1
  1029                           
  1030 ;;
  1031 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1032 ;;
  1033 ;; *************** function _main *****************
  1034 ;; Defined at:
  1035 ;;		line 28 in file "main.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;		None
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;  PWMcycle        2    0        unsigned int 
  1040 ;;  battery_leve    2    0[BANK1 ] unsigned int 
  1041 ;;  clear           2    0        unsigned int 
  1042 ;;  green           2    0        unsigned int 
  1043 ;;  blue            2    0        unsigned int 
  1044 ;;  red             2    0        unsigned int 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  1    wreg      void 
  1047 ;; Registers used:
  1048 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1055 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1056 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1057 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1058 ;;Total ram usage:        4 bytes
  1059 ;; Hardware stack levels required when called: 11
  1060 ;; This function calls:
  1061 ;;		_ADC_init
  1062 ;;		_calibration_routine
  1063 ;;		_color_click_init
  1064 ;;		_initDCmotorsPWM
  1065 ;;		_initUSART4
  1066 ;;		_test
  1067 ;; This function is called by:
  1068 ;;		Startup code after reset
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text0
  1073   001E08                     __ptext0:
  1074                           	callstack 0
  1075   001E08                     _main:
  1076                           	callstack 20
  1077   001E08                     
  1078                           ;main.c: 30:     ADC_init();
  1079   001E08  EC69  F014         	call	_ADC_init	;wreg free
  1080   001E0C                     
  1081                           ;main.c: 31:     color_click_init();
  1082   001E0C  EC8F  F013         	call	_color_click_init	;wreg free
  1083   001E10                     
  1084                           ;main.c: 32:     initUSART4();
  1085   001E10  EC5A  F014         	call	_initUSART4	;wreg free
  1086   001E14                     
  1087                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
  1088   001E14  0E00               	movlw	0
  1089   001E16  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1090   001E18  0E63               	movlw	99
  1091   001E1A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1092   001E1C  ECC1  F011         	call	_initDCmotorsPWM	;wreg free
  1093   001E20                     
  1094                           ;main.c: 39:     motorL.power = 0;
  1095   001E20  0E00               	movlw	0
  1096   001E22  0101               	movlb	1	; () banked
  1097   001E24  6F92               	movwf	_motorL& (0+255),b
  1098   001E26                     
  1099                           ; BSR set to: 1
  1100                           ;main.c: 40:     motorL.direction = 1;
  1101   001E26  0E01               	movlw	1
  1102   001E28  6F93               	movwf	(_motorL+1)& (0+255),b
  1103   001E2A                     
  1104                           ; BSR set to: 1
  1105                           ;main.c: 41:     motorL.brakemode = 1;
  1106   001E2A  0E01               	movlw	1
  1107   001E2C  6F94               	movwf	(_motorL+2)& (0+255),b
  1108   001E2E                     
  1109                           ; BSR set to: 1
  1110                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
  1111   001E2E  0E00               	movlw	0
  1112   001E30  6F96               	movwf	(_motorL+4)& (0+255),b
  1113   001E32  0E63               	movlw	99
  1114   001E34  6F95               	movwf	(_motorL+3)& (0+255),b
  1115   001E36                     
  1116                           ; BSR set to: 1
  1117                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1118   001E36  0EAA               	movlw	170
  1119   001E38  6F97               	movwf	(_motorL+5)& (0+255),b
  1120   001E3A  0E0F               	movlw	15
  1121   001E3C  6F98               	movwf	(_motorL+6)& (0+255),b
  1122   001E3E                     
  1123                           ; BSR set to: 1
  1124                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1125   001E3E  0EA6               	movlw	166
  1126   001E40  6F99               	movwf	(_motorL+7)& (0+255),b
  1127   001E42  0E0F               	movlw	15
  1128   001E44  6F9A               	movwf	(_motorL+8)& (0+255),b
  1129   001E46                     
  1130                           ; BSR set to: 1
  1131                           ;main.c: 46:     motorR.power = 0;
  1132   001E46  0E00               	movlw	0
  1133   001E48  6F89               	movwf	_motorR& (0+255),b
  1134   001E4A                     
  1135                           ; BSR set to: 1
  1136                           ;main.c: 47:     motorR.direction = 1;
  1137   001E4A  0E01               	movlw	1
  1138   001E4C  6F8A               	movwf	(_motorR+1)& (0+255),b
  1139   001E4E                     
  1140                           ; BSR set to: 1
  1141                           ;main.c: 48:     motorR.brakemode = 1;
  1142   001E4E  0E01               	movlw	1
  1143   001E50  6F8B               	movwf	(_motorR+2)& (0+255),b
  1144   001E52                     
  1145                           ; BSR set to: 1
  1146                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
  1147   001E52  0E00               	movlw	0
  1148   001E54  6F8D               	movwf	(_motorR+4)& (0+255),b
  1149   001E56  0E63               	movlw	99
  1150   001E58  6F8C               	movwf	(_motorR+3)& (0+255),b
  1151                           
  1152                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1153   001E5A  0E25               	movlw	37
  1154   001E5C  6F8E               	movwf	(_motorR+5)& (0+255),b
  1155   001E5E  0E0F               	movlw	15
  1156   001E60  6F8F               	movwf	(_motorR+6)& (0+255),b
  1157                           
  1158                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1159   001E62  0E21               	movlw	33
  1160   001E64  6F90               	movwf	(_motorR+7)& (0+255),b
  1161   001E66  0E0F               	movlw	15
  1162   001E68  6F91               	movwf	(_motorR+8)& (0+255),b
  1163   001E6A                     
  1164                           ; BSR set to: 1
  1165                           ;main.c: 54:     LATDbits.LATD7=0;
  1166   001E6A  9E7C               	bcf	124,7,c	;volatile
  1167   001E6C                     
  1168                           ; BSR set to: 1
  1169                           ;main.c: 55:     TRISDbits.TRISD7=0;
  1170   001E6C  9E84               	bcf	132,7,c	;volatile
  1171   001E6E                     
  1172                           ; BSR set to: 1
  1173                           ;main.c: 57:     TRISDbits.TRISD3 = 0;
  1174   001E6E  9684               	bcf	132,3,c	;volatile
  1175   001E70                     
  1176                           ; BSR set to: 1
  1177                           ;main.c: 58:     LATDbits.LATD3 = 1;
  1178   001E70  867C               	bsf	124,3,c	;volatile
  1179   001E72                     
  1180                           ; BSR set to: 1
  1181                           ;main.c: 61:     TRISGbits.TRISG0 = 0;
  1182   001E72  9087               	bcf	135,0,c	;volatile
  1183   001E74                     
  1184                           ; BSR set to: 1
  1185                           ;main.c: 62:     LATGbits.LATG0 = 0;
  1186   001E74  907F               	bcf	127,0,c	;volatile
  1187   001E76                     
  1188                           ; BSR set to: 1
  1189                           ;main.c: 63:     TRISEbits.TRISE7 = 0;
  1190   001E76  9E85               	bcf	133,7,c	;volatile
  1191   001E78                     
  1192                           ; BSR set to: 1
  1193                           ;main.c: 64:     LATEbits.LATE7 = 0;
  1194   001E78  9E7D               	bcf	125,7,c	;volatile
  1195   001E7A                     
  1196                           ; BSR set to: 1
  1197                           ;main.c: 65:     TRISAbits.TRISA3 = 0;
  1198   001E7A  9681               	bcf	129,3,c	;volatile
  1199   001E7C                     
  1200                           ; BSR set to: 1
  1201                           ;main.c: 66:     LATAbits.LATA3 = 0;
  1202   001E7C  9679               	bcf	121,3,c	;volatile
  1203   001E7E                     
  1204                           ; BSR set to: 1
  1205                           ;main.c: 71:     unsigned int battery_level;;main.c: 72:     unsigned int red;;main.c: 7
      +                          3:     unsigned int blue;;main.c: 74:     unsigned int green;;main.c: 75:     unsigned i
      +                          nt clear;;main.c: 76:     TRISHbits.TRISH3 = 0;
  1206   001E7E  9688               	bcf	136,3,c	;volatile
  1207   001E80                     
  1208                           ; BSR set to: 1
  1209                           ;main.c: 77:     LATHbits.LATH3 = 1;
  1210   001E80  8680               	bsf	128,3,c	;volatile
  1211   001E82                     
  1212                           ; BSR set to: 1
  1213                           ;main.c: 78:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1214   001E82  0E19               	movlw	25
  1215   001E84  0100               	movlb	0	; () banked
  1216   001E86  6FFB               	movwf	(??_main+1)& (0+255),b
  1217   001E88  0E5A               	movlw	90
  1218   001E8A  6FFA               	movwf	??_main& (0+255),b
  1219   001E8C  0EB1               	movlw	177
  1220   001E8E                     u2867:
  1221   001E8E  2EE8               	decfsz	wreg,f,c
  1222   001E90  D7FE               	bra	u2867
  1223   001E92  2FFA               	decfsz	??_main& (0+255),f,b
  1224   001E94  D7FC               	bra	u2867
  1225   001E96  2FFB               	decfsz	(??_main+1)& (0+255),f,b
  1226   001E98  D7FA               	bra	u2867
  1227   001E9A  D000               	nop2	
  1228   001E9C                     
  1229                           ;main.c: 79:     LATHbits.LATH3 = 0;
  1230   001E9C  9680               	bcf	128,3,c	;volatile
  1231   001E9E                     
  1232                           ;main.c: 80:     LATFbits.LATF2 = 0;
  1233   001E9E  947E               	bcf	126,2,c	;volatile
  1234   001EA0                     
  1235                           ;main.c: 81:     TRISFbits.TRISF2 = 1;
  1236   001EA0  8486               	bsf	134,2,c	;volatile
  1237   001EA2                     
  1238                           ;main.c: 82:     ANSELFbits.ANSELF2 = 0;
  1239   001EA2  010E               	movlb	14	; () banked
  1240   001EA4  95B4               	bcf	180,2,b	;volatile
  1241   001EA6                     
  1242                           ; BSR set to: 14
  1243                           ;main.c: 85:     calibration_routine(&colorCalibration);
  1244   001EA6  0EA3               	movlw	low _colorCalibration
  1245   001EA8  6E44               	movwf	calibration_routine@cCal^0,c
  1246   001EAA  0E01               	movlw	high _colorCalibration
  1247   001EAC  6E45               	movwf	(calibration_routine@cCal+1)^0,c
  1248   001EAE  EC82  F00B         	call	_calibration_routine	;wreg free
  1249   001EB2                     l3955:
  1250                           
  1251                           ;main.c: 93:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1252   001EB2  0E52               	movlw	82
  1253   001EB4  0100               	movlb	0	; () banked
  1254   001EB6  6FFB               	movwf	(??_main+1)& (0+255),b
  1255   001EB8  0E2B               	movlw	43
  1256   001EBA  6FFA               	movwf	??_main& (0+255),b
  1257   001EBC  0E00               	movlw	0
  1258   001EBE                     u2877:
  1259   001EBE  2EE8               	decfsz	wreg,f,c
  1260   001EC0  D7FE               	bra	u2877
  1261   001EC2  2FFA               	decfsz	??_main& (0+255),f,b
  1262   001EC4  D7FC               	bra	u2877
  1263   001EC6  2FFB               	decfsz	(??_main+1)& (0+255),f,b
  1264   001EC8  D7FA               	bra	u2877
  1265   001ECA  0000               	nop	
  1266   001ECC                     
  1267                           ;main.c: 94:         test(battery_level);
  1268   001ECC  C1AB  F05C         	movff	main@battery_level,test@battery_level
  1269   001ED0  C1AC  F05D         	movff	main@battery_level+1,test@battery_level+1
  1270   001ED4  ECDE  F00D         	call	_test	;wreg free
  1271   001ED8  EF59  F00F         	goto	l3955
  1272   001EDC  EF00  F000         	goto	start
  1273   001EE0                     __end_of_main:
  1274                           	callstack 0
  1275                           
  1276 ;; *************** function _test *****************
  1277 ;; Defined at:
  1278 ;;		line 152 in file "color.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  battery_leve    2   91[COMRAM] unsigned int 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  combo           2  152[BANK0 ] unsigned int 
  1283 ;;  led_state      50  100[BANK0 ] unsigned char [50]
  1284 ;;  hue             2  150[BANK0 ] unsigned int 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      void 
  1287 ;; Registers used:
  1288 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1294 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1295 ;;      Locals:         0      54       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1296 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1297 ;;      Totals:         3      54       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1298 ;;Total ram usage:       57 bytes
  1299 ;; Hardware stack levels used: 1
  1300 ;; Hardware stack levels required when called: 10
  1301 ;; This function calls:
  1302 ;;		_convert_rgb2hue
  1303 ;;		_reading_values
  1304 ;;		_send2USART
  1305 ;;		_sendStringSerial4
  1306 ;;		_sprintf
  1307 ;; This function is called by:
  1308 ;;		_main
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text1
  1313   001BBC                     __ptext1:
  1314                           	callstack 0
  1315   001BBC                     _test:
  1316                           	callstack 20
  1317   001BBC                     
  1318                           ;color.c: 152: void test(unsigned int battery_level);color.c: 153: {;color.c: 154:     u
      +                          nsigned int hue;;color.c: 156:     char led_state[50];;color.c: 159:     for (unsigned i
      +                          nt combo = 0; combo < 4; ++combo) {
  1319   001BBC  0E00               	movlw	0
  1320   001BBE  0100               	movlb	0	; () banked
  1321   001BC0  6FF9               	movwf	(test@combo+1)& (0+255),b
  1322   001BC2  0E00               	movlw	0
  1323   001BC4  6FF8               	movwf	test@combo& (0+255),b
  1324   001BC6                     l3707:
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;color.c: 162:         if (combo == 0) {
  1328   001BC6  51F8               	movf	test@combo& (0+255),w,b
  1329   001BC8  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1330   001BCA  A4D8               	btfss	status,2,c
  1331   001BCC  EFEA  F00D         	goto	u2701
  1332   001BD0  EFEC  F00D         	goto	u2700
  1333   001BD4                     u2701:
  1334   001BD4  EF02  F00E         	goto	l3713
  1335   001BD8                     u2700:
  1336   001BD8                     
  1337                           ; BSR set to: 0
  1338                           ;color.c: 164:             LATGbits.LATG0 = 1;
  1339   001BD8  807F               	bsf	127,0,c	;volatile
  1340                           
  1341                           ;color.c: 165:             LATEbits.LATE7 = 0;
  1342   001BDA  9E7D               	bcf	125,7,c	;volatile
  1343                           
  1344                           ;color.c: 166:             LATAbits.LATA3 = 0;
  1345   001BDC  9679               	bcf	121,3,c	;volatile
  1346   001BDE                     
  1347                           ; BSR set to: 0
  1348                           ;color.c: 167:             sprintf(led_state,"Red_light=%d, \n\r", LATGbits.LATG0);
  1349   001BDE  0EC4               	movlw	low test@led_state
  1350   001BE0  6E31               	movwf	sprintf@s^0,c
  1351   001BE2  0EB4               	movlw	low STR_1
  1352   001BE4  6E32               	movwf	sprintf@fmt^0,c
  1353   001BE6  B07F               	btfsc	127,0,c	;volatile
  1354   001BE8  EFF8  F00D         	goto	u2711
  1355   001BEC  EFFC  F00D         	goto	u2710
  1356   001BF0                     u2711:
  1357   001BF0  6A5E               	clrf	??_test^0,c
  1358   001BF2  2A5E               	incf	??_test^0,f,c
  1359   001BF4  EFFD  F00D         	goto	u2718
  1360   001BF8                     u2710:
  1361   001BF8  6A5E               	clrf	??_test^0,c
  1362   001BFA                     u2718:
  1363   001BFA  505E               	movf	??_test^0,w,c
  1364   001BFC  6E33               	movwf	(?_sprintf+2)^0,c
  1365   001BFE  6A34               	clrf	(?_sprintf+3)^0,c
  1366   001C00  ECA9  F013         	call	_sprintf	;wreg free
  1367   001C04                     l3713:
  1368                           
  1369                           ;color.c: 172:         if (combo == 1) {
  1370   001C04  0100               	movlb	0	; () banked
  1371   001C06  05F8               	decf	test@combo& (0+255),w,b
  1372   001C08  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1373   001C0A  A4D8               	btfss	status,2,c
  1374   001C0C  EF0A  F00E         	goto	u2721
  1375   001C10  EF0C  F00E         	goto	u2720
  1376   001C14                     u2721:
  1377   001C14  EF22  F00E         	goto	l3719
  1378   001C18                     u2720:
  1379   001C18                     
  1380                           ; BSR set to: 0
  1381                           ;color.c: 173:             LATGbits.LATG0 = 0;
  1382   001C18  907F               	bcf	127,0,c	;volatile
  1383                           
  1384                           ;color.c: 174:             LATEbits.LATE7 = 1;
  1385   001C1A  8E7D               	bsf	125,7,c	;volatile
  1386                           
  1387                           ;color.c: 175:             LATAbits.LATA3 = 0;
  1388   001C1C  9679               	bcf	121,3,c	;volatile
  1389   001C1E                     
  1390                           ; BSR set to: 0
  1391                           ;color.c: 176:             sprintf(led_state,"Green_light=%d, \n\r", LATEbits.LATE7);
  1392   001C1E  0EC4               	movlw	low test@led_state
  1393   001C20  6E31               	movwf	sprintf@s^0,c
  1394   001C22  0EA1               	movlw	low STR_2
  1395   001C24  6E32               	movwf	sprintf@fmt^0,c
  1396   001C26  BE7D               	btfsc	125,7,c	;volatile
  1397   001C28  EF18  F00E         	goto	u2731
  1398   001C2C  EF1C  F00E         	goto	u2730
  1399   001C30                     u2731:
  1400   001C30  6A5E               	clrf	??_test^0,c
  1401   001C32  2A5E               	incf	??_test^0,f,c
  1402   001C34  EF1D  F00E         	goto	u2738
  1403   001C38                     u2730:
  1404   001C38  6A5E               	clrf	??_test^0,c
  1405   001C3A                     u2738:
  1406   001C3A  505E               	movf	??_test^0,w,c
  1407   001C3C  6E33               	movwf	(?_sprintf+2)^0,c
  1408   001C3E  6A34               	clrf	(?_sprintf+3)^0,c
  1409   001C40  ECA9  F013         	call	_sprintf	;wreg free
  1410   001C44                     l3719:
  1411                           
  1412                           ;color.c: 180:         if (combo == 2) {
  1413   001C44  0E02               	movlw	2
  1414   001C46  0100               	movlb	0	; () banked
  1415   001C48  19F8               	xorwf	test@combo& (0+255),w,b
  1416   001C4A  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1417   001C4C  A4D8               	btfss	status,2,c
  1418   001C4E  EF2B  F00E         	goto	u2741
  1419   001C52  EF2D  F00E         	goto	u2740
  1420   001C56                     u2741:
  1421   001C56  EF43  F00E         	goto	l3725
  1422   001C5A                     u2740:
  1423   001C5A                     
  1424                           ; BSR set to: 0
  1425                           ;color.c: 181:             LATGbits.LATG0 = 0;
  1426   001C5A  907F               	bcf	127,0,c	;volatile
  1427                           
  1428                           ;color.c: 182:             LATEbits.LATE7 = 0;
  1429   001C5C  9E7D               	bcf	125,7,c	;volatile
  1430                           
  1431                           ;color.c: 183:             LATAbits.LATA3 = 1;
  1432   001C5E  8679               	bsf	121,3,c	;volatile
  1433   001C60                     
  1434                           ; BSR set to: 0
  1435                           ;color.c: 184:             sprintf(led_state,"Blue_light=%d \n\r", LATAbits.LATA3);
  1436   001C60  0EC4               	movlw	low test@led_state
  1437   001C62  6E31               	movwf	sprintf@s^0,c
  1438   001C64  0ED6               	movlw	low STR_3
  1439   001C66  6E32               	movwf	sprintf@fmt^0,c
  1440   001C68  B679               	btfsc	121,3,c	;volatile
  1441   001C6A  EF39  F00E         	goto	u2751
  1442   001C6E  EF3D  F00E         	goto	u2750
  1443   001C72                     u2751:
  1444   001C72  6A5E               	clrf	??_test^0,c
  1445   001C74  2A5E               	incf	??_test^0,f,c
  1446   001C76  EF3E  F00E         	goto	u2758
  1447   001C7A                     u2750:
  1448   001C7A  6A5E               	clrf	??_test^0,c
  1449   001C7C                     u2758:
  1450   001C7C  505E               	movf	??_test^0,w,c
  1451   001C7E  6E33               	movwf	(?_sprintf+2)^0,c
  1452   001C80  6A34               	clrf	(?_sprintf+3)^0,c
  1453   001C82  ECA9  F013         	call	_sprintf	;wreg free
  1454   001C86                     l3725:
  1455                           
  1456                           ;color.c: 190:         if (combo == 3) {
  1457   001C86  0E03               	movlw	3
  1458   001C88  0100               	movlb	0	; () banked
  1459   001C8A  19F8               	xorwf	test@combo& (0+255),w,b
  1460   001C8C  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1461   001C8E  A4D8               	btfss	status,2,c
  1462   001C90  EF4C  F00E         	goto	u2761
  1463   001C94  EF4E  F00E         	goto	u2760
  1464   001C98                     u2761:
  1465   001C98  EF5B  F00E         	goto	l3731
  1466   001C9C                     u2760:
  1467   001C9C                     
  1468                           ; BSR set to: 0
  1469                           ;color.c: 191:             LATGbits.LATG0 = 1;
  1470   001C9C  807F               	bsf	127,0,c	;volatile
  1471                           
  1472                           ;color.c: 192:             LATEbits.LATE7 = 1;
  1473   001C9E  8E7D               	bsf	125,7,c	;volatile
  1474                           
  1475                           ;color.c: 193:             LATAbits.LATA3 = 1;
  1476   001CA0  8679               	bsf	121,3,c	;volatile
  1477   001CA2                     
  1478                           ; BSR set to: 0
  1479                           ;color.c: 194:             sprintf(led_state,"All_lights=%d \n\r", 1);
  1480   001CA2  0EC4               	movlw	low test@led_state
  1481   001CA4  6E31               	movwf	sprintf@s^0,c
  1482   001CA6  0EC5               	movlw	low STR_4
  1483   001CA8  6E32               	movwf	sprintf@fmt^0,c
  1484   001CAA  0E00               	movlw	0
  1485   001CAC  6E34               	movwf	(?_sprintf+3)^0,c
  1486   001CAE  0E01               	movlw	1
  1487   001CB0  6E33               	movwf	(?_sprintf+2)^0,c
  1488   001CB2  ECA9  F013         	call	_sprintf	;wreg free
  1489   001CB6                     l3731:
  1490                           
  1491                           ;color.c: 198:         sendStringSerial4(led_state);
  1492   001CB6  0EC4               	movlw	low test@led_state
  1493   001CB8  6E02               	movwf	sendStringSerial4@string^0,c
  1494   001CBA  ECDD  F013         	call	_sendStringSerial4	;wreg free
  1495   001CBE                     
  1496                           ;color.c: 200:         reading_values(&colorCurrent);
  1497   001CBE  0E9B               	movlw	low _colorCurrent
  1498   001CC0  6E0C               	movwf	reading_values@cCurr^0,c
  1499   001CC2  0E01               	movlw	high _colorCurrent
  1500   001CC4  6E0D               	movwf	(reading_values@cCurr+1)^0,c
  1501   001CC6  EC43  F012         	call	_reading_values	;wreg free
  1502   001CCA                     
  1503                           ;color.c: 202:         hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  1504   001CCA  0EA3               	movlw	low _colorCalibration
  1505   001CCC  6E32               	movwf	convert_rgb2hue@cMax^0,c
  1506   001CCE  0E01               	movlw	high _colorCalibration
  1507   001CD0  6E33               	movwf	(convert_rgb2hue@cMax+1)^0,c
  1508   001CD2  0E9B               	movlw	low _colorCurrent
  1509   001CD4  6E34               	movwf	convert_rgb2hue@cCurr^0,c
  1510   001CD6  0E01               	movlw	high _colorCurrent
  1511   001CD8  6E35               	movwf	(convert_rgb2hue@cCurr+1)^0,c
  1512   001CDA  EC7B  F007         	call	_convert_rgb2hue	;wreg free
  1513   001CDE  C032  F0F6         	movff	?_convert_rgb2hue,test@hue
  1514   001CE2  C033  F0F7         	movff	?_convert_rgb2hue+1,test@hue+1
  1515   001CE6                     
  1516                           ;color.c: 208:         send2USART(battery_level,hue);
  1517   001CE6  C05C  F04D         	movff	test@battery_level,send2USART@battery_level
  1518   001CEA  C05D  F04E         	movff	test@battery_level+1,send2USART@battery_level+1
  1519   001CEE  C0F6  F04F         	movff	test@hue,send2USART@hue
  1520   001CF2  C0F7  F050         	movff	test@hue+1,send2USART@hue+1
  1521   001CF6  EC74  F013         	call	_send2USART	;wreg free
  1522   001CFA                     
  1523                           ;color.c: 209:     }
  1524   001CFA  0100               	movlb	0	; () banked
  1525   001CFC  4BF8               	infsnz	test@combo& (0+255),f,b
  1526   001CFE  2BF9               	incf	(test@combo+1)& (0+255),f,b
  1527   001D00                     
  1528                           ; BSR set to: 0
  1529   001D00  51F9               	movf	(test@combo+1)& (0+255),w,b
  1530   001D02  E109               	bnz	u2770
  1531   001D04  0E04               	movlw	4
  1532   001D06  5DF8               	subwf	test@combo& (0+255),w,b
  1533   001D08  A0D8               	btfss	status,0,c
  1534   001D0A  EF89  F00E         	goto	u2771
  1535   001D0E  EF8B  F00E         	goto	u2770
  1536   001D12                     u2771:
  1537   001D12  EFE3  F00D         	goto	l3707
  1538   001D16                     u2770:
  1539   001D16                     
  1540                           ; BSR set to: 0
  1541   001D16  0012               	return		;funcret
  1542   001D18                     __end_of_test:
  1543                           	callstack 0
  1544                           
  1545 ;; *************** function _send2USART *****************
  1546 ;; Defined at:
  1547 ;;		line 146 in file "serial.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  battery_leve    2   76[COMRAM] unsigned int 
  1550 ;;  hue             2   78[COMRAM] unsigned int 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  hue_char       50   50[BANK0 ] unsigned char [50]
  1553 ;;  buf            50    0[BANK0 ] unsigned char [50]
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  1    wreg      void 
  1556 ;; Registers used:
  1557 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1563 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1564 ;;      Locals:         0     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1566 ;;      Totals:         4     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1567 ;;Total ram usage:      104 bytes
  1568 ;; Hardware stack levels used: 1
  1569 ;; Hardware stack levels required when called: 9
  1570 ;; This function calls:
  1571 ;;		_ADC2String
  1572 ;;		_sendStringSerial4
  1573 ;;		_sprintf
  1574 ;; This function is called by:
  1575 ;;		_test
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text2
  1580   0026E8                     __ptext2:
  1581                           	callstack 0
  1582   0026E8                     _send2USART:
  1583                           	callstack 20
  1584   0026E8                     
  1585                           ;serial.c: 146: void send2USART(unsigned int battery_level, unsigned int hue);serial.c: 
      +                          147: {;serial.c: 148:         char buf[50];;serial.c: 149:         char hue_char[50];;se
      +                          rial.c: 154:         ADC2String(buf, battery_level);
  1586   0026E8  0E60               	movlw	low send2USART@buf
  1587   0026EA  6E44               	movwf	ADC2String@buf^0,c
  1588   0026EC  C04D  F045         	movff	send2USART@battery_level,ADC2String@ADC_val
  1589   0026F0  C04E  F046         	movff	send2USART@battery_level+1,ADC2String@ADC_val+1
  1590   0026F4  ECD6  F010         	call	_ADC2String	;wreg free
  1591                           
  1592                           ;serial.c: 155:         sprintf(hue_char,"hue=%03d,  ",hue);
  1593   0026F8  0E92               	movlw	low send2USART@hue_char
  1594   0026FA  6E31               	movwf	sprintf@s^0,c
  1595   0026FC  0EE7               	movlw	low STR_16
  1596   0026FE  6E32               	movwf	sprintf@fmt^0,c
  1597   002700  C04F  F033         	movff	send2USART@hue,?_sprintf+2
  1598   002704  C050  F034         	movff	send2USART@hue+1,?_sprintf+3
  1599   002708  ECA9  F013         	call	_sprintf	;wreg free
  1600   00270C                     
  1601                           ;serial.c: 160:         sendStringSerial4(buf);
  1602   00270C  0E60               	movlw	low send2USART@buf
  1603   00270E  6E02               	movwf	sendStringSerial4@string^0,c
  1604   002710  ECDD  F013         	call	_sendStringSerial4	;wreg free
  1605   002714                     
  1606                           ;serial.c: 161:         sendStringSerial4(hue_char);
  1607   002714  0E92               	movlw	low send2USART@hue_char
  1608   002716  6E02               	movwf	sendStringSerial4@string^0,c
  1609   002718  ECDD  F013         	call	_sendStringSerial4	;wreg free
  1610   00271C  0012               	return		;funcret
  1611   00271E                     __end_of_send2USART:
  1612                           	callstack 0
  1613                           
  1614 ;; *************** function _ADC2String *****************
  1615 ;; Defined at:
  1616 ;;		line 135 in file "serial.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  buf             1   67[COMRAM] PTR unsigned char 
  1619 ;;		 -> send2USART@buf(50), sendAllReadings@buffer(10), 
  1620 ;;  ADC_val         2   68[COMRAM] unsigned int 
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  int_part        2   74[COMRAM] unsigned int 
  1623 ;;  frac_part       2   72[COMRAM] unsigned int 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      void 
  1626 ;; Registers used:
  1627 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1633 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1634 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1635 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1636 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1637 ;;Total ram usage:        9 bytes
  1638 ;; Hardware stack levels used: 1
  1639 ;; Hardware stack levels required when called: 8
  1640 ;; This function calls:
  1641 ;;		___lwdiv
  1642 ;;		___wmul
  1643 ;;		_sprintf
  1644 ;; This function is called by:
  1645 ;;		_send2USART
  1646 ;;		_sendAllReadings
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           	psect	text3
  1651   0021AC                     __ptext3:
  1652                           	callstack 0
  1653   0021AC                     _ADC2String:
  1654                           	callstack 20
  1655   0021AC                     
  1656                           ;serial.c: 137:     unsigned int int_part=ADC_val/77;
  1657   0021AC  C045  F007         	movff	ADC2String@ADC_val,___lwdiv@dividend
  1658   0021B0  C046  F008         	movff	ADC2String@ADC_val+1,___lwdiv@dividend+1
  1659   0021B4  0E00               	movlw	0
  1660   0021B6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1661   0021B8  0E4D               	movlw	77
  1662   0021BA  6E09               	movwf	___lwdiv@divisor^0,c
  1663   0021BC  EC09  F012         	call	___lwdiv	;wreg free
  1664   0021C0  C007  F04B         	movff	?___lwdiv,ADC2String@int_part
  1665   0021C4  C008  F04C         	movff	?___lwdiv+1,ADC2String@int_part+1
  1666   0021C8                     
  1667                           ;serial.c: 139:     unsigned int frac_part=(ADC_val*100)/77 - int_part*100;
  1668   0021C8  C045  F001         	movff	ADC2String@ADC_val,___wmul@multiplier
  1669   0021CC  C046  F002         	movff	ADC2String@ADC_val+1,___wmul@multiplier+1
  1670   0021D0  0E00               	movlw	0
  1671   0021D2  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1672   0021D4  0E64               	movlw	100
  1673   0021D6  6E03               	movwf	___wmul@multiplicand^0,c
  1674   0021D8  EC37  F014         	call	___wmul	;wreg free
  1675   0021DC  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1676   0021E0  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1677   0021E4  0E00               	movlw	0
  1678   0021E6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1679   0021E8  0E4D               	movlw	77
  1680   0021EA  6E09               	movwf	___lwdiv@divisor^0,c
  1681   0021EC  EC09  F012         	call	___lwdiv	;wreg free
  1682   0021F0  C007  F047         	movff	?___lwdiv,??_ADC2String
  1683   0021F4  C008  F048         	movff	?___lwdiv+1,??_ADC2String+1
  1684   0021F8  C04B  F001         	movff	ADC2String@int_part,___wmul@multiplier
  1685   0021FC  C04C  F002         	movff	ADC2String@int_part+1,___wmul@multiplier+1
  1686   002200  0EFF               	movlw	255
  1687   002202  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1688   002204  0E9C               	movlw	156
  1689   002206  6E03               	movwf	___wmul@multiplicand^0,c
  1690   002208  EC37  F014         	call	___wmul	;wreg free
  1691   00220C  5001               	movf	?___wmul^0,w,c
  1692   00220E  2447               	addwf	??_ADC2String^0,w,c
  1693   002210  6E49               	movwf	ADC2String@frac_part^0,c
  1694   002212  5002               	movf	(?___wmul+1)^0,w,c
  1695   002214  2048               	addwfc	(??_ADC2String+1)^0,w,c
  1696   002216  6E4A               	movwf	(ADC2String@frac_part+1)^0,c
  1697   002218                     
  1698                           ;serial.c: 141:     sprintf(buf,"Voltage = %d.%02d,  ",int_part,frac_part);
  1699   002218  C044  F031         	movff	ADC2String@buf,sprintf@s
  1700   00221C  0E8C               	movlw	low STR_15
  1701   00221E  6E32               	movwf	sprintf@fmt^0,c
  1702   002220  C04B  F033         	movff	ADC2String@int_part,?_sprintf+2
  1703   002224  C04C  F034         	movff	ADC2String@int_part+1,?_sprintf+3
  1704   002228  C049  F035         	movff	ADC2String@frac_part,?_sprintf+4
  1705   00222C  C04A  F036         	movff	ADC2String@frac_part+1,?_sprintf+5
  1706   002230  ECA9  F013         	call	_sprintf	;wreg free
  1707   002234                     
  1708                           ;serial.c: 143:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1709   002234  0E52               	movlw	82
  1710   002236  6E48               	movwf	(??_ADC2String+1)^0,c
  1711   002238  0E2B               	movlw	43
  1712   00223A  6E47               	movwf	??_ADC2String^0,c
  1713   00223C  0E00               	movlw	0
  1714   00223E                     u2887:
  1715   00223E  2EE8               	decfsz	wreg,f,c
  1716   002240  D7FE               	bra	u2887
  1717   002242  2E47               	decfsz	??_ADC2String^0,f,c
  1718   002244  D7FC               	bra	u2887
  1719   002246  2E48               	decfsz	(??_ADC2String+1)^0,f,c
  1720   002248  D7FA               	bra	u2887
  1721   00224A  D000               	nop2	
  1722   00224C  0012               	return		;funcret
  1723   00224E                     __end_of_ADC2String:
  1724                           	callstack 0
  1725                           
  1726 ;; *************** function _reading_values *****************
  1727 ;; Defined at:
  1728 ;;		line 283 in file "color.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  cCurr           2   11[COMRAM] PTR struct colors
  1731 ;;		 -> colorCurrent(8), 
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1743 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1747 ;;Total ram usage:        2 bytes
  1748 ;; Hardware stack levels used: 1
  1749 ;; Hardware stack levels required when called: 3
  1750 ;; This function calls:
  1751 ;;		_color_read_Blue
  1752 ;;		_color_read_Clear
  1753 ;;		_color_read_Green
  1754 ;;		_color_read_Red
  1755 ;; This function is called by:
  1756 ;;		_test
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text4
  1761   002486                     __ptext4:
  1762                           	callstack 0
  1763   002486                     _reading_values:
  1764                           	callstack 26
  1765   002486                     
  1766                           ;color.c: 283: void reading_values(colors *cCurr);color.c: 284: {;color.c: 287:     (cCu
      +                          rr->red)= color_read_Red();
  1767   002486  EC72  F012         	call	_color_read_Red	;wreg free
  1768   00248A  C00C  FFD9         	movff	reading_values@cCurr,fsr2l
  1769   00248E  C00D  FFDA         	movff	reading_values@cCurr+1,fsr2h
  1770   002492  C005  FFDE         	movff	?_color_read_Red,postinc2
  1771   002496  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  1772                           
  1773                           ;color.c: 288:     (cCurr->blue) = color_read_Blue();
  1774   00249A  ECEA  F012         	call	_color_read_Blue	;wreg free
  1775   00249E  EE20 F004          	lfsr	2,4
  1776   0024A2  500C               	movf	reading_values@cCurr^0,w,c
  1777   0024A4  26D9               	addwf	fsr2l,f,c
  1778   0024A6  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1779   0024A8  22DA               	addwfc	fsr2h,f,c
  1780   0024AA  C005  FFDE         	movff	?_color_read_Blue,postinc2
  1781   0024AE  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  1782                           
  1783                           ;color.c: 289:     (cCurr->green) = color_read_Green();
  1784   0024B2  EC9A  F012         	call	_color_read_Green	;wreg free
  1785   0024B6  EE20 F002          	lfsr	2,2
  1786   0024BA  500C               	movf	reading_values@cCurr^0,w,c
  1787   0024BC  26D9               	addwf	fsr2l,f,c
  1788   0024BE  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1789   0024C0  22DA               	addwfc	fsr2h,f,c
  1790   0024C2  C005  FFDE         	movff	?_color_read_Green,postinc2
  1791   0024C6  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  1792                           
  1793                           ;color.c: 290:     (cCurr->clear) = color_read_Clear();
  1794   0024CA  ECC2  F012         	call	_color_read_Clear	;wreg free
  1795   0024CE  EE20 F006          	lfsr	2,6
  1796   0024D2  500C               	movf	reading_values@cCurr^0,w,c
  1797   0024D4  26D9               	addwf	fsr2l,f,c
  1798   0024D6  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1799   0024D8  22DA               	addwfc	fsr2h,f,c
  1800   0024DA  C005  FFDE         	movff	?_color_read_Clear,postinc2
  1801   0024DE  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  1802   0024E2  0012               	return		;funcret
  1803   0024E4                     __end_of_reading_values:
  1804                           	callstack 0
  1805                           
  1806 ;; *************** function _convert_rgb2hue *****************
  1807 ;; Defined at:
  1808 ;;		line 98 in file "color.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  cMax            2   49[COMRAM] PTR struct colors
  1811 ;;		 -> colorCalibration(8), 
  1812 ;;  cCurr           2   51[COMRAM] PTR struct colors
  1813 ;;		 -> colorCurrent(8), 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  total           8   10[BANK0 ] unsigned long long 
  1816 ;;  g               2   38[BANK0 ] unsigned int 
  1817 ;;  r               2   36[BANK0 ] unsigned int 
  1818 ;;  b               2   34[BANK0 ] unsigned int 
  1819 ;;  hue             2    8[BANK0 ] unsigned int 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  2   49[COMRAM] unsigned int 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1829 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1830 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1831 ;;      Temps:         38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1832 ;;      Totals:        42      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1833 ;;Total ram usage:       82 bytes
  1834 ;; Hardware stack levels used: 1
  1835 ;; Hardware stack levels required when called: 1
  1836 ;; This function calls:
  1837 ;;		___lodiv
  1838 ;;		___lwdiv
  1839 ;;		___omul
  1840 ;; This function is called by:
  1841 ;;		_test
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text5
  1846   000EF6                     __ptext5:
  1847                           	callstack 0
  1848   000EF6                     _convert_rgb2hue:
  1849                           	callstack 28
  1850   000EF6                     
  1851                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  1852   000EF6  EE20 F004          	lfsr	2,4
  1853   000EFA  5032               	movf	convert_rgb2hue@cMax^0,w,c
  1854   000EFC  26D9               	addwf	fsr2l,f,c
  1855   000EFE  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1856   000F00  22DA               	addwfc	fsr2h,f,c
  1857   000F02  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  1858   000F06  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  1859   000F0A  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  1860   000F0E  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  1861   000F12  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  1862   000F14  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  1863   000F16  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  1864   000F18  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  1865   000F1A  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  1866   000F1C  6A10               	clrf	(___omul@multiplicand+7)^0,c
  1867   000F1E  EE20 F002          	lfsr	2,2
  1868   000F22  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  1869   000F24  26D9               	addwf	fsr2l,f,c
  1870   000F26  5035               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1871   000F28  22DA               	addwfc	fsr2h,f,c
  1872   000F2A  CFDE F038          	movff	postinc2,??_convert_rgb2hue+2
  1873   000F2E  CFDD F039          	movff	postdec2,??_convert_rgb2hue+3
  1874   000F32  C038  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  1875   000F36  C039  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  1876   000F3A  6A03               	clrf	(___omul@multiplier+2)^0,c
  1877   000F3C  6A04               	clrf	(___omul@multiplier+3)^0,c
  1878   000F3E  6A05               	clrf	(___omul@multiplier+4)^0,c
  1879   000F40  6A06               	clrf	(___omul@multiplier+5)^0,c
  1880   000F42  6A07               	clrf	(___omul@multiplier+6)^0,c
  1881   000F44  6A08               	clrf	(___omul@multiplier+7)^0,c
  1882   000F46  EC27  F011         	call	___omul	;wreg free
  1883   000F4A  C001  F072         	movff	?___omul,_convert_rgb2hue$2845
  1884   000F4E  C002  F073         	movff	?___omul+1,_convert_rgb2hue$2845+1
  1885   000F52  C003  F074         	movff	?___omul+2,_convert_rgb2hue$2845+2
  1886   000F56  C004  F075         	movff	?___omul+3,_convert_rgb2hue$2845+3
  1887   000F5A  C005  F076         	movff	?___omul+4,_convert_rgb2hue$2845+4
  1888   000F5E  C006  F077         	movff	?___omul+5,_convert_rgb2hue$2845+5
  1889   000F62  C007  F078         	movff	?___omul+6,_convert_rgb2hue$2845+6
  1890   000F66  C008  F079         	movff	?___omul+7,_convert_rgb2hue$2845+7
  1891                           
  1892                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  1893   000F6A  C032  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  1894   000F6E  C033  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  1895   000F72  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  1896   000F76  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  1897   000F7A  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  1898   000F7E  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  1899   000F82  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  1900   000F84  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  1901   000F86  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  1902   000F88  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  1903   000F8A  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  1904   000F8C  6A10               	clrf	(___omul@multiplicand+7)^0,c
  1905   000F8E  EE20 F004          	lfsr	2,4
  1906   000F92  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  1907   000F94  26D9               	addwf	fsr2l,f,c
  1908   000F96  5035               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1909   000F98  22DA               	addwfc	fsr2h,f,c
  1910   000F9A  CFDE F038          	movff	postinc2,??_convert_rgb2hue+2
  1911   000F9E  CFDD F039          	movff	postdec2,??_convert_rgb2hue+3
  1912   000FA2  C038  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  1913   000FA6  C039  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  1914   000FAA  6A03               	clrf	(___omul@multiplier+2)^0,c
  1915   000FAC  6A04               	clrf	(___omul@multiplier+3)^0,c
  1916   000FAE  6A05               	clrf	(___omul@multiplier+4)^0,c
  1917   000FB0  6A06               	clrf	(___omul@multiplier+5)^0,c
  1918   000FB2  6A07               	clrf	(___omul@multiplier+6)^0,c
  1919   000FB4  6A08               	clrf	(___omul@multiplier+7)^0,c
  1920   000FB6  EC27  F011         	call	___omul	;wreg free
  1921   000FBA  C001  F07A         	movff	?___omul,_convert_rgb2hue$2846
  1922   000FBE  C002  F07B         	movff	?___omul+1,_convert_rgb2hue$2846+1
  1923   000FC2  C003  F07C         	movff	?___omul+2,_convert_rgb2hue$2846+2
  1924   000FC6  C004  F07D         	movff	?___omul+3,_convert_rgb2hue$2846+3
  1925   000FCA  C005  F07E         	movff	?___omul+4,_convert_rgb2hue$2846+4
  1926   000FCE  C006  F07F         	movff	?___omul+5,_convert_rgb2hue$2846+5
  1927   000FD2  C007  F080         	movff	?___omul+6,_convert_rgb2hue$2846+6
  1928   000FD6  C008  F081         	movff	?___omul+7,_convert_rgb2hue$2846+7
  1929                           
  1930                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  1931   000FDA  EE20 F004          	lfsr	2,4
  1932   000FDE  5032               	movf	convert_rgb2hue@cMax^0,w,c
  1933   000FE0  26D9               	addwf	fsr2l,f,c
  1934   000FE2  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1935   000FE4  22DA               	addwfc	fsr2h,f,c
  1936   000FE6  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  1937   000FEA  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  1938   000FEE  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  1939   000FF2  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  1940   000FF6  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  1941   000FF8  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  1942   000FFA  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  1943   000FFC  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  1944   000FFE  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  1945   001000  6A10               	clrf	(___omul@multiplicand+7)^0,c
  1946   001002  C034  FFD9         	movff	convert_rgb2hue@cCurr,fsr2l
  1947   001006  C035  FFDA         	movff	convert_rgb2hue@cCurr+1,fsr2h
  1948   00100A  CFDE F038          	movff	postinc2,??_convert_rgb2hue+2
  1949   00100E  CFDD F039          	movff	postdec2,??_convert_rgb2hue+3
  1950   001012  C038  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  1951   001016  C039  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  1952   00101A  6A03               	clrf	(___omul@multiplier+2)^0,c
  1953   00101C  6A04               	clrf	(___omul@multiplier+3)^0,c
  1954   00101E  6A05               	clrf	(___omul@multiplier+4)^0,c
  1955   001020  6A06               	clrf	(___omul@multiplier+5)^0,c
  1956   001022  6A07               	clrf	(___omul@multiplier+6)^0,c
  1957   001024  6A08               	clrf	(___omul@multiplier+7)^0,c
  1958   001026  EC27  F011         	call	___omul	;wreg free
  1959   00102A  C001  F060         	movff	?___omul,_convert_rgb2hue$2847
  1960   00102E  C002  F061         	movff	?___omul+1,_convert_rgb2hue$2847+1
  1961   001032  C003  F062         	movff	?___omul+2,_convert_rgb2hue$2847+2
  1962   001036  C004  F063         	movff	?___omul+3,_convert_rgb2hue$2847+3
  1963   00103A  C005  F064         	movff	?___omul+4,_convert_rgb2hue$2847+4
  1964   00103E  C006  F065         	movff	?___omul+5,_convert_rgb2hue$2847+5
  1965   001042  C007  F066         	movff	?___omul+6,_convert_rgb2hue$2847+6
  1966   001046  C008  F067         	movff	?___omul+7,_convert_rgb2hue$2847+7
  1967                           
  1968                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned long long to
      +                          tal = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) + ((unsigned long long
      +                          )cCurr->blue * cMax->red * cMax->green) + ((unsigned long long)cCurr->green * cMax->blue
      +                           * cMax->red);
  1969   00104A  C072  F001         	movff	_convert_rgb2hue$2845,___omul@multiplier
  1970   00104E  C073  F002         	movff	_convert_rgb2hue$2845+1,___omul@multiplier+1
  1971   001052  C074  F003         	movff	_convert_rgb2hue$2845+2,___omul@multiplier+2
  1972   001056  C075  F004         	movff	_convert_rgb2hue$2845+3,___omul@multiplier+3
  1973   00105A  C076  F005         	movff	_convert_rgb2hue$2845+4,___omul@multiplier+4
  1974   00105E  C077  F006         	movff	_convert_rgb2hue$2845+5,___omul@multiplier+5
  1975   001062  C078  F007         	movff	_convert_rgb2hue$2845+6,___omul@multiplier+6
  1976   001066  C079  F008         	movff	_convert_rgb2hue$2845+7,___omul@multiplier+7
  1977   00106A  C032  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  1978   00106E  C033  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  1979   001072  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  1980   001076  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  1981   00107A  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  1982   00107E  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  1983   001082  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  1984   001084  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  1985   001086  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  1986   001088  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  1987   00108A  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  1988   00108C  6A10               	clrf	(___omul@multiplicand+7)^0,c
  1989   00108E  EC27  F011         	call	___omul	;wreg free
  1990   001092  C001  F038         	movff	?___omul,??_convert_rgb2hue+2
  1991   001096  C002  F039         	movff	?___omul+1,??_convert_rgb2hue+3
  1992   00109A  C003  F03A         	movff	?___omul+2,??_convert_rgb2hue+4
  1993   00109E  C004  F03B         	movff	?___omul+3,??_convert_rgb2hue+5
  1994   0010A2  C005  F03C         	movff	?___omul+4,??_convert_rgb2hue+6
  1995   0010A6  C006  F03D         	movff	?___omul+5,??_convert_rgb2hue+7
  1996   0010AA  C007  F03E         	movff	?___omul+6,??_convert_rgb2hue+8
  1997   0010AE  C008  F03F         	movff	?___omul+7,??_convert_rgb2hue+9
  1998   0010B2  C07A  F001         	movff	_convert_rgb2hue$2846,___omul@multiplier
  1999   0010B6  C07B  F002         	movff	_convert_rgb2hue$2846+1,___omul@multiplier+1
  2000   0010BA  C07C  F003         	movff	_convert_rgb2hue$2846+2,___omul@multiplier+2
  2001   0010BE  C07D  F004         	movff	_convert_rgb2hue$2846+3,___omul@multiplier+3
  2002   0010C2  C07E  F005         	movff	_convert_rgb2hue$2846+4,___omul@multiplier+4
  2003   0010C6  C07F  F006         	movff	_convert_rgb2hue$2846+5,___omul@multiplier+5
  2004   0010CA  C080  F007         	movff	_convert_rgb2hue$2846+6,___omul@multiplier+6
  2005   0010CE  C081  F008         	movff	_convert_rgb2hue$2846+7,___omul@multiplier+7
  2006   0010D2  EE20 F002          	lfsr	2,2
  2007   0010D6  5032               	movf	convert_rgb2hue@cMax^0,w,c
  2008   0010D8  26D9               	addwf	fsr2l,f,c
  2009   0010DA  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2010   0010DC  22DA               	addwfc	fsr2h,f,c
  2011   0010DE  CFDE F040          	movff	postinc2,??_convert_rgb2hue+10
  2012   0010E2  CFDD F041          	movff	postdec2,??_convert_rgb2hue+11
  2013   0010E6  C040  F009         	movff	??_convert_rgb2hue+10,___omul@multiplicand
  2014   0010EA  C041  F00A         	movff	??_convert_rgb2hue+11,___omul@multiplicand+1
  2015   0010EE  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2016   0010F0  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2017   0010F2  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2018   0010F4  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2019   0010F6  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2020   0010F8  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2021   0010FA  EC27  F011         	call	___omul	;wreg free
  2022   0010FE  C001  F042         	movff	?___omul,??_convert_rgb2hue+12
  2023   001102  C002  F043         	movff	?___omul+1,??_convert_rgb2hue+13
  2024   001106  C003  F044         	movff	?___omul+2,??_convert_rgb2hue+14
  2025   00110A  C004  F045         	movff	?___omul+3,??_convert_rgb2hue+15
  2026   00110E  C005  F046         	movff	?___omul+4,??_convert_rgb2hue+16
  2027   001112  C006  F047         	movff	?___omul+5,??_convert_rgb2hue+17
  2028   001116  C007  F048         	movff	?___omul+6,??_convert_rgb2hue+18
  2029   00111A  C008  F049         	movff	?___omul+7,??_convert_rgb2hue+19
  2030   00111E  C060  F001         	movff	_convert_rgb2hue$2847,___omul@multiplier
  2031   001122  C061  F002         	movff	_convert_rgb2hue$2847+1,___omul@multiplier+1
  2032   001126  C062  F003         	movff	_convert_rgb2hue$2847+2,___omul@multiplier+2
  2033   00112A  C063  F004         	movff	_convert_rgb2hue$2847+3,___omul@multiplier+3
  2034   00112E  C064  F005         	movff	_convert_rgb2hue$2847+4,___omul@multiplier+4
  2035   001132  C065  F006         	movff	_convert_rgb2hue$2847+5,___omul@multiplier+5
  2036   001136  C066  F007         	movff	_convert_rgb2hue$2847+6,___omul@multiplier+6
  2037   00113A  C067  F008         	movff	_convert_rgb2hue$2847+7,___omul@multiplier+7
  2038   00113E  EE20 F002          	lfsr	2,2
  2039   001142  5032               	movf	convert_rgb2hue@cMax^0,w,c
  2040   001144  26D9               	addwf	fsr2l,f,c
  2041   001146  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2042   001148  22DA               	addwfc	fsr2h,f,c
  2043   00114A  CFDE F04A          	movff	postinc2,??_convert_rgb2hue+20
  2044   00114E  CFDD F04B          	movff	postdec2,??_convert_rgb2hue+21
  2045   001152  C04A  F009         	movff	??_convert_rgb2hue+20,___omul@multiplicand
  2046   001156  C04B  F00A         	movff	??_convert_rgb2hue+21,___omul@multiplicand+1
  2047   00115A  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2048   00115C  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2049   00115E  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2050   001160  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2051   001162  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2052   001164  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2053   001166  EC27  F011         	call	___omul	;wreg free
  2054   00116A  C001  F04C         	movff	?___omul,??_convert_rgb2hue+22
  2055   00116E  C002  F04D         	movff	?___omul+1,??_convert_rgb2hue+23
  2056   001172  C003  F04E         	movff	?___omul+2,??_convert_rgb2hue+24
  2057   001176  C004  F04F         	movff	?___omul+3,??_convert_rgb2hue+25
  2058   00117A  C005  F050         	movff	?___omul+4,??_convert_rgb2hue+26
  2059   00117E  C006  F051         	movff	?___omul+5,??_convert_rgb2hue+27
  2060   001182  C007  F052         	movff	?___omul+6,??_convert_rgb2hue+28
  2061   001186  C008  F053         	movff	?___omul+7,??_convert_rgb2hue+29
  2062   00118A  5042               	movf	(??_convert_rgb2hue+12)^0,w,c
  2063   00118C  244C               	addwf	(??_convert_rgb2hue+22)^0,w,c
  2064   00118E  6E54               	movwf	(??_convert_rgb2hue+30)^0,c
  2065   001190  5043               	movf	(??_convert_rgb2hue+13)^0,w,c
  2066   001192  204D               	addwfc	(??_convert_rgb2hue+23)^0,w,c
  2067   001194  6E55               	movwf	(??_convert_rgb2hue+31)^0,c
  2068   001196  5044               	movf	(??_convert_rgb2hue+14)^0,w,c
  2069   001198  204E               	addwfc	(??_convert_rgb2hue+24)^0,w,c
  2070   00119A  6E56               	movwf	(??_convert_rgb2hue+32)^0,c
  2071   00119C  5045               	movf	(??_convert_rgb2hue+15)^0,w,c
  2072   00119E  204F               	addwfc	(??_convert_rgb2hue+25)^0,w,c
  2073   0011A0  6E57               	movwf	(??_convert_rgb2hue+33)^0,c
  2074   0011A2  5046               	movf	(??_convert_rgb2hue+16)^0,w,c
  2075   0011A4  2050               	addwfc	(??_convert_rgb2hue+26)^0,w,c
  2076   0011A6  6E58               	movwf	(??_convert_rgb2hue+34)^0,c
  2077   0011A8  5047               	movf	(??_convert_rgb2hue+17)^0,w,c
  2078   0011AA  2051               	addwfc	(??_convert_rgb2hue+27)^0,w,c
  2079   0011AC  6E59               	movwf	(??_convert_rgb2hue+35)^0,c
  2080   0011AE  5048               	movf	(??_convert_rgb2hue+18)^0,w,c
  2081   0011B0  2052               	addwfc	(??_convert_rgb2hue+28)^0,w,c
  2082   0011B2  6E5A               	movwf	(??_convert_rgb2hue+36)^0,c
  2083   0011B4  5049               	movf	(??_convert_rgb2hue+19)^0,w,c
  2084   0011B6  2053               	addwfc	(??_convert_rgb2hue+29)^0,w,c
  2085   0011B8  6E5B               	movwf	(??_convert_rgb2hue+37)^0,c
  2086   0011BA  5038               	movf	(??_convert_rgb2hue+2)^0,w,c
  2087   0011BC  2454               	addwf	(??_convert_rgb2hue+30)^0,w,c
  2088   0011BE  0100               	movlb	0	; () banked
  2089   0011C0  6F6A               	movwf	convert_rgb2hue@total& (0+255),b
  2090   0011C2  5039               	movf	(??_convert_rgb2hue+3)^0,w,c
  2091   0011C4  2055               	addwfc	(??_convert_rgb2hue+31)^0,w,c
  2092   0011C6  6F6B               	movwf	(convert_rgb2hue@total+1)& (0+255),b
  2093   0011C8  503A               	movf	(??_convert_rgb2hue+4)^0,w,c
  2094   0011CA  2056               	addwfc	(??_convert_rgb2hue+32)^0,w,c
  2095   0011CC  6F6C               	movwf	(convert_rgb2hue@total+2)& (0+255),b
  2096   0011CE  503B               	movf	(??_convert_rgb2hue+5)^0,w,c
  2097   0011D0  2057               	addwfc	(??_convert_rgb2hue+33)^0,w,c
  2098   0011D2  6F6D               	movwf	(convert_rgb2hue@total+3)& (0+255),b
  2099   0011D4  503C               	movf	(??_convert_rgb2hue+6)^0,w,c
  2100   0011D6  2058               	addwfc	(??_convert_rgb2hue+34)^0,w,c
  2101   0011D8  6F6E               	movwf	(convert_rgb2hue@total+4)& (0+255),b
  2102   0011DA  503D               	movf	(??_convert_rgb2hue+7)^0,w,c
  2103   0011DC  2059               	addwfc	(??_convert_rgb2hue+35)^0,w,c
  2104   0011DE  6F6F               	movwf	(convert_rgb2hue@total+5)& (0+255),b
  2105   0011E0  503E               	movf	(??_convert_rgb2hue+8)^0,w,c
  2106   0011E2  205A               	addwfc	(??_convert_rgb2hue+36)^0,w,c
  2107   0011E4  6F70               	movwf	(convert_rgb2hue@total+6)& (0+255),b
  2108   0011E6  503F               	movf	(??_convert_rgb2hue+9)^0,w,c
  2109   0011E8  205B               	addwfc	(??_convert_rgb2hue+37)^0,w,c
  2110   0011EA  6F71               	movwf	(convert_rgb2hue@total+7)& (0+255),b
  2111   0011EC                     
  2112                           ; BSR set to: 0
  2113                           ;color.c: 103:     unsigned int r = 0;
  2114   0011EC  0E00               	movlw	0
  2115   0011EE  6F85               	movwf	(convert_rgb2hue@r+1)& (0+255),b
  2116   0011F0  0E00               	movlw	0
  2117   0011F2  6F84               	movwf	convert_rgb2hue@r& (0+255),b
  2118   0011F4                     
  2119                           ; BSR set to: 0
  2120                           ;color.c: 104:     unsigned int g = 0;
  2121   0011F4  0E00               	movlw	0
  2122   0011F6  6F87               	movwf	(convert_rgb2hue@g+1)& (0+255),b
  2123   0011F8  0E00               	movlw	0
  2124   0011FA  6F86               	movwf	convert_rgb2hue@g& (0+255),b
  2125   0011FC                     
  2126                           ; BSR set to: 0
  2127                           ;color.c: 105:     unsigned int b = 0;
  2128   0011FC  0E00               	movlw	0
  2129   0011FE  6F83               	movwf	(convert_rgb2hue@b+1)& (0+255),b
  2130   001200  0E00               	movlw	0
  2131   001202  6F82               	movwf	convert_rgb2hue@b& (0+255),b
  2132   001204                     
  2133                           ; BSR set to: 0
  2134                           ;color.c: 107:     if (total > 0) {
  2135   001204  516A               	movf	convert_rgb2hue@total& (0+255),w,b
  2136   001206  116B               	iorwf	(convert_rgb2hue@total+1)& (0+255),w,b
  2137   001208  116C               	iorwf	(convert_rgb2hue@total+2)& (0+255),w,b
  2138   00120A  116D               	iorwf	(convert_rgb2hue@total+3)& (0+255),w,b
  2139   00120C  116E               	iorwf	(convert_rgb2hue@total+4)& (0+255),w,b
  2140   00120E  116F               	iorwf	(convert_rgb2hue@total+5)& (0+255),w,b
  2141   001210  1170               	iorwf	(convert_rgb2hue@total+6)& (0+255),w,b
  2142   001212  1171               	iorwf	(convert_rgb2hue@total+7)& (0+255),w,b
  2143   001214  B4D8               	btfsc	status,2,c
  2144   001216  EF0F  F009         	goto	u2551
  2145   00121A  EF11  F009         	goto	u2550
  2146   00121E                     u2551:
  2147   00121E  EFB0  F00A         	goto	l3605
  2148   001222                     u2550:
  2149   001222                     
  2150                           ; BSR set to: 0
  2151                           ;color.c: 108:         r = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) *
      +                           100 / total;
  2152   001222  EE20 F004          	lfsr	2,4
  2153   001226  5032               	movf	convert_rgb2hue@cMax^0,w,c
  2154   001228  26D9               	addwf	fsr2l,f,c
  2155   00122A  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2156   00122C  22DA               	addwfc	fsr2h,f,c
  2157   00122E  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  2158   001232  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  2159   001236  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2160   00123A  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2161   00123E  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2162   001240  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2163   001242  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2164   001244  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2165   001246  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2166   001248  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2167   00124A  C034  FFD9         	movff	convert_rgb2hue@cCurr,fsr2l
  2168   00124E  C035  FFDA         	movff	convert_rgb2hue@cCurr+1,fsr2h
  2169   001252  CFDE F038          	movff	postinc2,??_convert_rgb2hue+2
  2170   001256  CFDD F039          	movff	postdec2,??_convert_rgb2hue+3
  2171   00125A  C038  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  2172   00125E  C039  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  2173   001262  6A03               	clrf	(___omul@multiplier+2)^0,c
  2174   001264  6A04               	clrf	(___omul@multiplier+3)^0,c
  2175   001266  6A05               	clrf	(___omul@multiplier+4)^0,c
  2176   001268  6A06               	clrf	(___omul@multiplier+5)^0,c
  2177   00126A  6A07               	clrf	(___omul@multiplier+6)^0,c
  2178   00126C  6A08               	clrf	(___omul@multiplier+7)^0,c
  2179   00126E  EC27  F011         	call	___omul	;wreg free
  2180   001272  C001  F072         	movff	?___omul,_convert_rgb2hue$2845
  2181   001276  C002  F073         	movff	?___omul+1,_convert_rgb2hue$2845+1
  2182   00127A  C003  F074         	movff	?___omul+2,_convert_rgb2hue$2845+2
  2183   00127E  C004  F075         	movff	?___omul+3,_convert_rgb2hue$2845+3
  2184   001282  C005  F076         	movff	?___omul+4,_convert_rgb2hue$2845+4
  2185   001286  C006  F077         	movff	?___omul+5,_convert_rgb2hue$2845+5
  2186   00128A  C007  F078         	movff	?___omul+6,_convert_rgb2hue$2845+6
  2187   00128E  C008  F079         	movff	?___omul+7,_convert_rgb2hue$2845+7
  2188                           
  2189                           ;color.c: 108:         r = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) *
      +                           100 / total;
  2190   001292  EE20 F002          	lfsr	2,2
  2191   001296  5032               	movf	convert_rgb2hue@cMax^0,w,c
  2192   001298  26D9               	addwf	fsr2l,f,c
  2193   00129A  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2194   00129C  22DA               	addwfc	fsr2h,f,c
  2195   00129E  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  2196   0012A2  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  2197   0012A6  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2198   0012AA  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2199   0012AE  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2200   0012B0  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2201   0012B2  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2202   0012B4  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2203   0012B6  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2204   0012B8  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2205   0012BA  C072  F001         	movff	_convert_rgb2hue$2845,___omul@multiplier
  2206   0012BE  C073  F002         	movff	_convert_rgb2hue$2845+1,___omul@multiplier+1
  2207   0012C2  C074  F003         	movff	_convert_rgb2hue$2845+2,___omul@multiplier+2
  2208   0012C6  C075  F004         	movff	_convert_rgb2hue$2845+3,___omul@multiplier+3
  2209   0012CA  C076  F005         	movff	_convert_rgb2hue$2845+4,___omul@multiplier+4
  2210   0012CE  C077  F006         	movff	_convert_rgb2hue$2845+5,___omul@multiplier+5
  2211   0012D2  C078  F007         	movff	_convert_rgb2hue$2845+6,___omul@multiplier+6
  2212   0012D6  C079  F008         	movff	_convert_rgb2hue$2845+7,___omul@multiplier+7
  2213   0012DA  EC27  F011         	call	___omul	;wreg free
  2214   0012DE  C001  F07A         	movff	?___omul,_convert_rgb2hue$2846
  2215   0012E2  C002  F07B         	movff	?___omul+1,_convert_rgb2hue$2846+1
  2216   0012E6  C003  F07C         	movff	?___omul+2,_convert_rgb2hue$2846+2
  2217   0012EA  C004  F07D         	movff	?___omul+3,_convert_rgb2hue$2846+3
  2218   0012EE  C005  F07E         	movff	?___omul+4,_convert_rgb2hue$2846+4
  2219   0012F2  C006  F07F         	movff	?___omul+5,_convert_rgb2hue$2846+5
  2220   0012F6  C007  F080         	movff	?___omul+6,_convert_rgb2hue$2846+6
  2221   0012FA  C008  F081         	movff	?___omul+7,_convert_rgb2hue$2846+7
  2222                           
  2223                           ;color.c: 108:         r = ((unsigned long long)cCurr->red * cMax->blue * cMax->green) *
      +                           100 / total;
  2224   0012FE  0E64               	movlw	100
  2225   001300  6E09               	movwf	___omul@multiplicand^0,c
  2226   001302  0E00               	movlw	0
  2227   001304  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2228   001306  0E00               	movlw	0
  2229   001308  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2230   00130A  0E00               	movlw	0
  2231   00130C  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2232   00130E  0E00               	movlw	0
  2233   001310  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2234   001312  0E00               	movlw	0
  2235   001314  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2236   001316  0E00               	movlw	0
  2237   001318  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2238   00131A  0E00               	movlw	0
  2239   00131C  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2240   00131E  C07A  F001         	movff	_convert_rgb2hue$2846,___omul@multiplier
  2241   001322  C07B  F002         	movff	_convert_rgb2hue$2846+1,___omul@multiplier+1
  2242   001326  C07C  F003         	movff	_convert_rgb2hue$2846+2,___omul@multiplier+2
  2243   00132A  C07D  F004         	movff	_convert_rgb2hue$2846+3,___omul@multiplier+3
  2244   00132E  C07E  F005         	movff	_convert_rgb2hue$2846+4,___omul@multiplier+4
  2245   001332  C07F  F006         	movff	_convert_rgb2hue$2846+5,___omul@multiplier+5
  2246   001336  C080  F007         	movff	_convert_rgb2hue$2846+6,___omul@multiplier+6
  2247   00133A  C081  F008         	movff	_convert_rgb2hue$2846+7,___omul@multiplier+7
  2248   00133E  EC27  F011         	call	___omul	;wreg free
  2249   001342  C001  F019         	movff	?___omul,___lodiv@dividend
  2250   001346  C002  F01A         	movff	?___omul+1,___lodiv@dividend+1
  2251   00134A  C003  F01B         	movff	?___omul+2,___lodiv@dividend+2
  2252   00134E  C004  F01C         	movff	?___omul+3,___lodiv@dividend+3
  2253   001352  C005  F01D         	movff	?___omul+4,___lodiv@dividend+4
  2254   001356  C006  F01E         	movff	?___omul+5,___lodiv@dividend+5
  2255   00135A  C007  F01F         	movff	?___omul+6,___lodiv@dividend+6
  2256   00135E  C008  F020         	movff	?___omul+7,___lodiv@dividend+7
  2257   001362  C06A  F021         	movff	convert_rgb2hue@total,___lodiv@divisor
  2258   001366  C06B  F022         	movff	convert_rgb2hue@total+1,___lodiv@divisor+1
  2259   00136A  C06C  F023         	movff	convert_rgb2hue@total+2,___lodiv@divisor+2
  2260   00136E  C06D  F024         	movff	convert_rgb2hue@total+3,___lodiv@divisor+3
  2261   001372  C06E  F025         	movff	convert_rgb2hue@total+4,___lodiv@divisor+4
  2262   001376  C06F  F026         	movff	convert_rgb2hue@total+5,___lodiv@divisor+5
  2263   00137A  C070  F027         	movff	convert_rgb2hue@total+6,___lodiv@divisor+6
  2264   00137E  C071  F028         	movff	convert_rgb2hue@total+7,___lodiv@divisor+7
  2265   001382  EC8C  F00E         	call	___lodiv	;wreg free
  2266   001386  C019  F036         	movff	?___lodiv,??_convert_rgb2hue
  2267   00138A  C01A  F037         	movff	?___lodiv+1,??_convert_rgb2hue+1
  2268   00138E  C01B  F038         	movff	?___lodiv+2,??_convert_rgb2hue+2
  2269   001392  C01C  F039         	movff	?___lodiv+3,??_convert_rgb2hue+3
  2270   001396  C01D  F03A         	movff	?___lodiv+4,??_convert_rgb2hue+4
  2271   00139A  C01E  F03B         	movff	?___lodiv+5,??_convert_rgb2hue+5
  2272   00139E  C01F  F03C         	movff	?___lodiv+6,??_convert_rgb2hue+6
  2273   0013A2  C020  F03D         	movff	?___lodiv+7,??_convert_rgb2hue+7
  2274   0013A6  C036  F084         	movff	??_convert_rgb2hue,convert_rgb2hue@r
  2275   0013AA  C037  F085         	movff	??_convert_rgb2hue+1,convert_rgb2hue@r+1
  2276                           
  2277                           ;color.c: 109:         g = ((unsigned long long)cCurr->green * cMax->blue * cMax->red) *
      +                           100 / total;
  2278   0013AE  EE20 F004          	lfsr	2,4
  2279   0013B2  5032               	movf	convert_rgb2hue@cMax^0,w,c
  2280   0013B4  26D9               	addwf	fsr2l,f,c
  2281   0013B6  5033               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  2282   0013B8  22DA               	addwfc	fsr2h,f,c
  2283   0013BA  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  2284   0013BE  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  2285   0013C2  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2286   0013C6  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2287   0013CA  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2288   0013CC  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2289   0013CE  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2290   0013D0  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2291   0013D2  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2292   0013D4  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2293   0013D6  EE20 F002          	lfsr	2,2
  2294   0013DA  5034               	movf	convert_rgb2hue@cCurr^0,w,c
  2295   0013DC  26D9               	addwf	fsr2l,f,c
  2296   0013DE  5035               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  2297   0013E0  22DA               	addwfc	fsr2h,f,c
  2298   0013E2  CFDE F038          	movff	postinc2,??_convert_rgb2hue+2
  2299   0013E6  CFDD F039          	movff	postdec2,??_convert_rgb2hue+3
  2300   0013EA  C038  F001         	movff	??_convert_rgb2hue+2,___omul@multiplier
  2301   0013EE  C039  F002         	movff	??_convert_rgb2hue+3,___omul@multiplier+1
  2302   0013F2  6A03               	clrf	(___omul@multiplier+2)^0,c
  2303   0013F4  6A04               	clrf	(___omul@multiplier+3)^0,c
  2304   0013F6  6A05               	clrf	(___omul@multiplier+4)^0,c
  2305   0013F8  6A06               	clrf	(___omul@multiplier+5)^0,c
  2306   0013FA  6A07               	clrf	(___omul@multiplier+6)^0,c
  2307   0013FC  6A08               	clrf	(___omul@multiplier+7)^0,c
  2308   0013FE  EC27  F011         	call	___omul	;wreg free
  2309   001402  C001  F072         	movff	?___omul,_convert_rgb2hue$2845
  2310   001406  C002  F073         	movff	?___omul+1,_convert_rgb2hue$2845+1
  2311   00140A  C003  F074         	movff	?___omul+2,_convert_rgb2hue$2845+2
  2312   00140E  C004  F075         	movff	?___omul+3,_convert_rgb2hue$2845+3
  2313   001412  C005  F076         	movff	?___omul+4,_convert_rgb2hue$2845+4
  2314   001416  C006  F077         	movff	?___omul+5,_convert_rgb2hue$2845+5
  2315   00141A  C007  F078         	movff	?___omul+6,_convert_rgb2hue$2845+6
  2316   00141E  C008  F079         	movff	?___omul+7,_convert_rgb2hue$2845+7
  2317                           
  2318                           ;color.c: 109:         g = ((unsigned long long)cCurr->green * cMax->blue * cMax->red) *
      +                           100 / total;
  2319   001422  C032  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  2320   001426  C033  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  2321   00142A  CFDE F036          	movff	postinc2,??_convert_rgb2hue
  2322   00142E  CFDD F037          	movff	postdec2,??_convert_rgb2hue+1
  2323   001432  C036  F009         	movff	??_convert_rgb2hue,___omul@multiplicand
  2324   001436  C037  F00A         	movff	??_convert_rgb2hue+1,___omul@multiplicand+1
  2325   00143A  6A0B               	clrf	(___omul@multiplicand+2)^0,c
  2326   00143C  6A0C               	clrf	(___omul@multiplicand+3)^0,c
  2327   00143E  6A0D               	clrf	(___omul@multiplicand+4)^0,c
  2328   001440  6A0E               	clrf	(___omul@multiplicand+5)^0,c
  2329   001442  6A0F               	clrf	(___omul@multiplicand+6)^0,c
  2330   001444  6A10               	clrf	(___omul@multiplicand+7)^0,c
  2331   001446  C072  F001         	movff	_convert_rgb2hue$2845,___omul@multiplier
  2332   00144A  C073  F002         	movff	_convert_rgb2hue$2845+1,___omul@multiplier+1
  2333   00144E  C074  F003         	movff	_convert_rgb2hue$2845+2,___omul@multiplier+2
  2334   001452  C075  F004         	movff	_convert_rgb2hue$2845+3,___omul@multiplier+3
  2335   001456  C076  F005         	movff	_convert_rgb2hue$2845+4,___omul@multiplier+4
  2336   00145A  C077  F006         	movff	_convert_rgb2hue$2845+5,___omul@multiplier+5
  2337   00145E  C078  F007         	movff	_convert_rgb2hue$2845+6,___omul@multiplier+6
  2338   001462  C079  F008         	movff	_convert_rgb2hue$2845+7,___omul@multiplier+7
  2339   001466  EC27  F011         	call	___omul	;wreg free
  2340   00146A  C001  F07A         	movff	?___omul,_convert_rgb2hue$2846
  2341   00146E  C002  F07B         	movff	?___omul+1,_convert_rgb2hue$2846+1
  2342   001472  C003  F07C         	movff	?___omul+2,_convert_rgb2hue$2846+2
  2343   001476  C004  F07D         	movff	?___omul+3,_convert_rgb2hue$2846+3
  2344   00147A  C005  F07E         	movff	?___omul+4,_convert_rgb2hue$2846+4
  2345   00147E  C006  F07F         	movff	?___omul+5,_convert_rgb2hue$2846+5
  2346   001482  C007  F080         	movff	?___omul+6,_convert_rgb2hue$2846+6
  2347   001486  C008  F081         	movff	?___omul+7,_convert_rgb2hue$2846+7
  2348                           
  2349                           ;color.c: 109:         g = ((unsigned long long)cCurr->green * cMax->blue * cMax->red) *
      +                           100 / total;
  2350   00148A  0E64               	movlw	100
  2351   00148C  6E09               	movwf	___omul@multiplicand^0,c
  2352   00148E  0E00               	movlw	0
  2353   001490  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2354   001492  0E00               	movlw	0
  2355   001494  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2356   001496  0E00               	movlw	0
  2357   001498  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2358   00149A  0E00               	movlw	0
  2359   00149C  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2360   00149E  0E00               	movlw	0
  2361   0014A0  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2362   0014A2  0E00               	movlw	0
  2363   0014A4  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2364   0014A6  0E00               	movlw	0
  2365   0014A8  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2366   0014AA  C07A  F001         	movff	_convert_rgb2hue$2846,___omul@multiplier
  2367   0014AE  C07B  F002         	movff	_convert_rgb2hue$2846+1,___omul@multiplier+1
  2368   0014B2  C07C  F003         	movff	_convert_rgb2hue$2846+2,___omul@multiplier+2
  2369   0014B6  C07D  F004         	movff	_convert_rgb2hue$2846+3,___omul@multiplier+3
  2370   0014BA  C07E  F005         	movff	_convert_rgb2hue$2846+4,___omul@multiplier+4
  2371   0014BE  C07F  F006         	movff	_convert_rgb2hue$2846+5,___omul@multiplier+5
  2372   0014C2  C080  F007         	movff	_convert_rgb2hue$2846+6,___omul@multiplier+6
  2373   0014C6  C081  F008         	movff	_convert_rgb2hue$2846+7,___omul@multiplier+7
  2374   0014CA  EC27  F011         	call	___omul	;wreg free
  2375   0014CE  C001  F019         	movff	?___omul,___lodiv@dividend
  2376   0014D2  C002  F01A         	movff	?___omul+1,___lodiv@dividend+1
  2377   0014D6  C003  F01B         	movff	?___omul+2,___lodiv@dividend+2
  2378   0014DA  C004  F01C         	movff	?___omul+3,___lodiv@dividend+3
  2379   0014DE  C005  F01D         	movff	?___omul+4,___lodiv@dividend+4
  2380   0014E2  C006  F01E         	movff	?___omul+5,___lodiv@dividend+5
  2381   0014E6  C007  F01F         	movff	?___omul+6,___lodiv@dividend+6
  2382   0014EA  C008  F020         	movff	?___omul+7,___lodiv@dividend+7
  2383   0014EE  C06A  F021         	movff	convert_rgb2hue@total,___lodiv@divisor
  2384   0014F2  C06B  F022         	movff	convert_rgb2hue@total+1,___lodiv@divisor+1
  2385   0014F6  C06C  F023         	movff	convert_rgb2hue@total+2,___lodiv@divisor+2
  2386   0014FA  C06D  F024         	movff	convert_rgb2hue@total+3,___lodiv@divisor+3
  2387   0014FE  C06E  F025         	movff	convert_rgb2hue@total+4,___lodiv@divisor+4
  2388   001502  C06F  F026         	movff	convert_rgb2hue@total+5,___lodiv@divisor+5
  2389   001506  C070  F027         	movff	convert_rgb2hue@total+6,___lodiv@divisor+6
  2390   00150A  C071  F028         	movff	convert_rgb2hue@total+7,___lodiv@divisor+7
  2391   00150E  EC8C  F00E         	call	___lodiv	;wreg free
  2392   001512  C019  F036         	movff	?___lodiv,??_convert_rgb2hue
  2393   001516  C01A  F037         	movff	?___lodiv+1,??_convert_rgb2hue+1
  2394   00151A  C01B  F038         	movff	?___lodiv+2,??_convert_rgb2hue+2
  2395   00151E  C01C  F039         	movff	?___lodiv+3,??_convert_rgb2hue+3
  2396   001522  C01D  F03A         	movff	?___lodiv+4,??_convert_rgb2hue+4
  2397   001526  C01E  F03B         	movff	?___lodiv+5,??_convert_rgb2hue+5
  2398   00152A  C01F  F03C         	movff	?___lodiv+6,??_convert_rgb2hue+6
  2399   00152E  C020  F03D         	movff	?___lodiv+7,??_convert_rgb2hue+7
  2400   001532  C036  F086         	movff	??_convert_rgb2hue,convert_rgb2hue@g
  2401   001536  C037  F087         	movff	??_convert_rgb2hue+1,convert_rgb2hue@g+1
  2402   00153A                     
  2403                           ;color.c: 110:         b = 100 - r - g;
  2404   00153A  C084  F036         	movff	convert_rgb2hue@r,??_convert_rgb2hue
  2405   00153E  C085  F037         	movff	convert_rgb2hue@r+1,??_convert_rgb2hue+1
  2406   001542  1E36               	comf	??_convert_rgb2hue^0,f,c
  2407   001544  1E37               	comf	(??_convert_rgb2hue+1)^0,f,c
  2408   001546  4A36               	infsnz	??_convert_rgb2hue^0,f,c
  2409   001548  2A37               	incf	(??_convert_rgb2hue+1)^0,f,c
  2410   00154A  0100               	movlb	0	; () banked
  2411   00154C  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2412   00154E  5E36               	subwf	??_convert_rgb2hue^0,f,c
  2413   001550  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2414   001552  5A37               	subwfb	(??_convert_rgb2hue+1)^0,f,c
  2415   001554  0E64               	movlw	100
  2416   001556  2436               	addwf	??_convert_rgb2hue^0,w,c
  2417   001558  6F82               	movwf	convert_rgb2hue@b& (0+255),b
  2418   00155A  0E00               	movlw	0
  2419   00155C  2037               	addwfc	(??_convert_rgb2hue+1)^0,w,c
  2420   00155E  6F83               	movwf	(convert_rgb2hue@b+1)& (0+255),b
  2421   001560                     l3605:
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;color.c: 126:     if (r>g & r>b){
  2425   001560  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2426   001562  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2427   001564  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2428   001566  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2429   001568  B0D8               	btfsc	status,0,c
  2430   00156A  EFB9  F00A         	goto	u2561
  2431   00156E  EFBB  F00A         	goto	u2560
  2432   001572                     u2561:
  2433   001572  EFEF  F00A         	goto	l3615
  2434   001576                     u2560:
  2435   001576                     
  2436                           ; BSR set to: 0
  2437   001576  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2438   001578  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2439   00157A  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2440   00157C  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2441   00157E  B0D8               	btfsc	status,0,c
  2442   001580  EFC4  F00A         	goto	u2571
  2443   001584  EFC6  F00A         	goto	u2570
  2444   001588                     u2571:
  2445   001588  EFEF  F00A         	goto	l3615
  2446   00158C                     u2570:
  2447   00158C                     
  2448                           ; BSR set to: 0
  2449                           ;color.c: 127:         if (b>g){
  2450   00158C  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2451   00158E  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2452   001590  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2453   001592  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2454   001594  B0D8               	btfsc	status,0,c
  2455   001596  EFCF  F00A         	goto	u2581
  2456   00159A  EFD1  F00A         	goto	u2580
  2457   00159E                     u2581:
  2458   00159E  EFE1  F00A         	goto	l3613
  2459   0015A2                     u2580:
  2460   0015A2                     
  2461                           ; BSR set to: 0
  2462   0015A2  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2463   0015A4  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2464   0015A6  6E07               	movwf	___lwdiv@dividend^0,c
  2465   0015A8  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2466   0015AA  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2467   0015AC  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2468   0015AE  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2469   0015B0  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2470   0015B2  6E09               	movwf	___lwdiv@divisor^0,c
  2471   0015B4  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2472   0015B6  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2473   0015B8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2474   0015BA  EC09  F012         	call	___lwdiv	;wreg free
  2475                           
  2476                           ;color.c: 129:         } else {
  2477   0015BE  EFEF  F00A         	goto	l3615
  2478   0015C2                     l3613:
  2479                           
  2480                           ; BSR set to: 0
  2481   0015C2  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2482   0015C4  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2483   0015C6  6E07               	movwf	___lwdiv@dividend^0,c
  2484   0015C8  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2485   0015CA  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2486   0015CC  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2487   0015CE  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2488   0015D0  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2489   0015D2  6E09               	movwf	___lwdiv@divisor^0,c
  2490   0015D4  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2491   0015D6  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2492   0015D8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2493   0015DA  EC09  F012         	call	___lwdiv	;wreg free
  2494   0015DE                     l3615:
  2495                           
  2496                           ;color.c: 134:     if (g>r & g>b){
  2497   0015DE  0100               	movlb	0	; () banked
  2498   0015E0  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2499   0015E2  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2500   0015E4  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2501   0015E6  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2502   0015E8  B0D8               	btfsc	status,0,c
  2503   0015EA  EFF9  F00A         	goto	u2591
  2504   0015EE  EFFB  F00A         	goto	u2590
  2505   0015F2                     u2591:
  2506   0015F2  EF2F  F00B         	goto	l3625
  2507   0015F6                     u2590:
  2508   0015F6                     
  2509                           ; BSR set to: 0
  2510   0015F6  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2511   0015F8  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2512   0015FA  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2513   0015FC  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2514   0015FE  B0D8               	btfsc	status,0,c
  2515   001600  EF04  F00B         	goto	u2601
  2516   001604  EF06  F00B         	goto	u2600
  2517   001608                     u2601:
  2518   001608  EF2F  F00B         	goto	l3625
  2519   00160C                     u2600:
  2520   00160C                     
  2521                           ; BSR set to: 0
  2522                           ;color.c: 135:         if (r>b){
  2523   00160C  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2524   00160E  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2525   001610  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2526   001612  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2527   001614  B0D8               	btfsc	status,0,c
  2528   001616  EF0F  F00B         	goto	u2611
  2529   00161A  EF11  F00B         	goto	u2610
  2530   00161E                     u2611:
  2531   00161E  EF21  F00B         	goto	l3623
  2532   001622                     u2610:
  2533   001622                     
  2534                           ; BSR set to: 0
  2535   001622  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2536   001624  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2537   001626  6E07               	movwf	___lwdiv@dividend^0,c
  2538   001628  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2539   00162A  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2540   00162C  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2541   00162E  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2542   001630  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2543   001632  6E09               	movwf	___lwdiv@divisor^0,c
  2544   001634  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2545   001636  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2546   001638  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2547   00163A  EC09  F012         	call	___lwdiv	;wreg free
  2548                           
  2549                           ;color.c: 137:         } else {
  2550   00163E  EF2F  F00B         	goto	l3625
  2551   001642                     l3623:
  2552                           
  2553                           ; BSR set to: 0
  2554   001642  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2555   001644  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2556   001646  6E07               	movwf	___lwdiv@dividend^0,c
  2557   001648  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2558   00164A  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2559   00164C  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2560   00164E  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2561   001650  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2562   001652  6E09               	movwf	___lwdiv@divisor^0,c
  2563   001654  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2564   001656  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2565   001658  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2566   00165A  EC09  F012         	call	___lwdiv	;wreg free
  2567   00165E                     l3625:
  2568                           
  2569                           ;color.c: 141:     if (b>r & b>g){
  2570   00165E  0100               	movlb	0	; () banked
  2571   001660  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2572   001662  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2573   001664  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2574   001666  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2575   001668  B0D8               	btfsc	status,0,c
  2576   00166A  EF39  F00B         	goto	u2621
  2577   00166E  EF3B  F00B         	goto	u2620
  2578   001672                     u2621:
  2579   001672  EF81  F00B         	goto	l81
  2580   001676                     u2620:
  2581   001676                     
  2582                           ; BSR set to: 0
  2583   001676  5182               	movf	convert_rgb2hue@b& (0+255),w,b
  2584   001678  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2585   00167A  5183               	movf	(convert_rgb2hue@b+1)& (0+255),w,b
  2586   00167C  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2587   00167E  B0D8               	btfsc	status,0,c
  2588   001680  EF44  F00B         	goto	u2631
  2589   001684  EF46  F00B         	goto	u2630
  2590   001688                     u2631:
  2591   001688  EF81  F00B         	goto	l81
  2592   00168C                     u2630:
  2593   00168C                     
  2594                           ; BSR set to: 0
  2595                           ;color.c: 142:         if (r>g){
  2596   00168C  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2597   00168E  5D86               	subwf	convert_rgb2hue@g& (0+255),w,b
  2598   001690  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2599   001692  5987               	subwfb	(convert_rgb2hue@g+1)& (0+255),w,b
  2600   001694  B0D8               	btfsc	status,0,c
  2601   001696  EF4F  F00B         	goto	u2641
  2602   00169A  EF51  F00B         	goto	u2640
  2603   00169E                     u2641:
  2604   00169E  EF68  F00B         	goto	l3633
  2605   0016A2                     u2640:
  2606   0016A2                     
  2607                           ; BSR set to: 0
  2608                           ;color.c: 143:             hue=4+(r-g)/(b-g);
  2609   0016A2  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2610   0016A4  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2611   0016A6  6E07               	movwf	___lwdiv@dividend^0,c
  2612   0016A8  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2613   0016AA  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2614   0016AC  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2615   0016AE  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2616   0016B0  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2617   0016B2  6E09               	movwf	___lwdiv@divisor^0,c
  2618   0016B4  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2619   0016B6  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2620   0016B8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2621   0016BA  EC09  F012         	call	___lwdiv	;wreg free
  2622   0016BE  0E04               	movlw	4
  2623   0016C0  2407               	addwf	?___lwdiv^0,w,c
  2624   0016C2  0100               	movlb	0	; () banked
  2625   0016C4  6F68               	movwf	convert_rgb2hue@hue& (0+255),b
  2626   0016C6  0E00               	movlw	0
  2627   0016C8  2008               	addwfc	(?___lwdiv+1)^0,w,c
  2628   0016CA  6F69               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2629                           
  2630                           ;color.c: 144:         } else {
  2631   0016CC  EF7D  F00B         	goto	l3635
  2632   0016D0                     l3633:
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;color.c: 145:             hue=4+(r-g)/(b-r);
  2636   0016D0  5186               	movf	convert_rgb2hue@g& (0+255),w,b
  2637   0016D2  5D84               	subwf	convert_rgb2hue@r& (0+255),w,b
  2638   0016D4  6E07               	movwf	___lwdiv@dividend^0,c
  2639   0016D6  5187               	movf	(convert_rgb2hue@g+1)& (0+255),w,b
  2640   0016D8  5985               	subwfb	(convert_rgb2hue@r+1)& (0+255),w,b
  2641   0016DA  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2642   0016DC  5184               	movf	convert_rgb2hue@r& (0+255),w,b
  2643   0016DE  5D82               	subwf	convert_rgb2hue@b& (0+255),w,b
  2644   0016E0  6E09               	movwf	___lwdiv@divisor^0,c
  2645   0016E2  5185               	movf	(convert_rgb2hue@r+1)& (0+255),w,b
  2646   0016E4  5983               	subwfb	(convert_rgb2hue@b+1)& (0+255),w,b
  2647   0016E6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2648   0016E8  EC09  F012         	call	___lwdiv	;wreg free
  2649   0016EC  0E04               	movlw	4
  2650   0016EE  2407               	addwf	?___lwdiv^0,w,c
  2651   0016F0  0100               	movlb	0	; () banked
  2652   0016F2  6F68               	movwf	convert_rgb2hue@hue& (0+255),b
  2653   0016F4  0E00               	movlw	0
  2654   0016F6  2008               	addwfc	(?___lwdiv+1)^0,w,c
  2655   0016F8  6F69               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2656   0016FA                     l3635:
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;color.c: 148:     return hue;
  2660   0016FA  C068  F032         	movff	convert_rgb2hue@hue,?_convert_rgb2hue
  2661   0016FE  C069  F033         	movff	convert_rgb2hue@hue+1,?_convert_rgb2hue+1
  2662   001702                     l81:
  2663                           
  2664                           ; BSR set to: 0
  2665   001702  0012               	return		;funcret
  2666   001704                     __end_of_convert_rgb2hue:
  2667                           	callstack 0
  2668                           
  2669 ;; *************** function ___omul *****************
  2670 ;; Defined at:
  2671 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul64.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  multiplier      8    0[COMRAM] unsigned long long 
  2674 ;;  multiplicand    8    8[COMRAM] unsigned long long 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  product         8   16[COMRAM] unsigned long long 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  8    0[COMRAM] unsigned long long 
  2679 ;; Registers used:
  2680 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2686 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2687 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2689 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2690 ;;Total ram usage:       24 bytes
  2691 ;; Hardware stack levels used: 1
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		_convert_rgb2hue
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text6
  2700   00224E                     __ptext6:
  2701                           	callstack 0
  2702   00224E                     ___omul:
  2703                           	callstack 28
  2704   00224E  EE20  F011         	lfsr	2,___omul@product
  2705   002252  0E07               	movlw	7
  2706   002254                     u2481:
  2707   002254  6ADE               	clrf	postinc2,c
  2708   002256  06E8               	decf	wreg,f,c
  2709   002258  E2FD               	bc	u2481
  2710   00225A                     l3547:
  2711   00225A  A001               	btfss	___omul@multiplier^0,0,c
  2712   00225C  EF32  F011         	goto	u2491
  2713   002260  EF34  F011         	goto	u2490
  2714   002264                     u2491:
  2715   002264  EF44  F011         	goto	l3551
  2716   002268                     u2490:
  2717   002268  5009               	movf	___omul@multiplicand^0,w,c
  2718   00226A  2611               	addwf	___omul@product^0,f,c
  2719   00226C  500A               	movf	(___omul@multiplicand+1)^0,w,c
  2720   00226E  2212               	addwfc	(___omul@product+1)^0,f,c
  2721   002270  500B               	movf	(___omul@multiplicand+2)^0,w,c
  2722   002272  2213               	addwfc	(___omul@product+2)^0,f,c
  2723   002274  500C               	movf	(___omul@multiplicand+3)^0,w,c
  2724   002276  2214               	addwfc	(___omul@product+3)^0,f,c
  2725   002278  500D               	movf	(___omul@multiplicand+4)^0,w,c
  2726   00227A  2215               	addwfc	(___omul@product+4)^0,f,c
  2727   00227C  500E               	movf	(___omul@multiplicand+5)^0,w,c
  2728   00227E  2216               	addwfc	(___omul@product+5)^0,f,c
  2729   002280  500F               	movf	(___omul@multiplicand+6)^0,w,c
  2730   002282  2217               	addwfc	(___omul@product+6)^0,f,c
  2731   002284  5010               	movf	(___omul@multiplicand+7)^0,w,c
  2732   002286  2218               	addwfc	(___omul@product+7)^0,f,c
  2733   002288                     l3551:
  2734   002288  90D8               	bcf	status,0,c
  2735   00228A  3609               	rlcf	___omul@multiplicand^0,f,c
  2736   00228C  360A               	rlcf	(___omul@multiplicand+1)^0,f,c
  2737   00228E  360B               	rlcf	(___omul@multiplicand+2)^0,f,c
  2738   002290  360C               	rlcf	(___omul@multiplicand+3)^0,f,c
  2739   002292  360D               	rlcf	(___omul@multiplicand+4)^0,f,c
  2740   002294  360E               	rlcf	(___omul@multiplicand+5)^0,f,c
  2741   002296  360F               	rlcf	(___omul@multiplicand+6)^0,f,c
  2742   002298  3610               	rlcf	(___omul@multiplicand+7)^0,f,c
  2743   00229A  90D8               	bcf	status,0,c
  2744   00229C  3208               	rrcf	(___omul@multiplier+7)^0,f,c
  2745   00229E  3207               	rrcf	(___omul@multiplier+6)^0,f,c
  2746   0022A0  3206               	rrcf	(___omul@multiplier+5)^0,f,c
  2747   0022A2  3205               	rrcf	(___omul@multiplier+4)^0,f,c
  2748   0022A4  3204               	rrcf	(___omul@multiplier+3)^0,f,c
  2749   0022A6  3203               	rrcf	(___omul@multiplier+2)^0,f,c
  2750   0022A8  3202               	rrcf	(___omul@multiplier+1)^0,f,c
  2751   0022AA  3201               	rrcf	___omul@multiplier^0,f,c
  2752   0022AC  5001               	movf	___omul@multiplier^0,w,c
  2753   0022AE  1002               	iorwf	(___omul@multiplier+1)^0,w,c
  2754   0022B0  1003               	iorwf	(___omul@multiplier+2)^0,w,c
  2755   0022B2  1004               	iorwf	(___omul@multiplier+3)^0,w,c
  2756   0022B4  1005               	iorwf	(___omul@multiplier+4)^0,w,c
  2757   0022B6  1006               	iorwf	(___omul@multiplier+5)^0,w,c
  2758   0022B8  1007               	iorwf	(___omul@multiplier+6)^0,w,c
  2759   0022BA  1008               	iorwf	(___omul@multiplier+7)^0,w,c
  2760   0022BC  A4D8               	btfss	status,2,c
  2761   0022BE  EF63  F011         	goto	u2501
  2762   0022C2  EF65  F011         	goto	u2500
  2763   0022C6                     u2501:
  2764   0022C6  EF2D  F011         	goto	l3547
  2765   0022CA                     u2500:
  2766   0022CA  C011  F001         	movff	___omul@product,?___omul
  2767   0022CE  C012  F002         	movff	___omul@product+1,?___omul+1
  2768   0022D2  C013  F003         	movff	___omul@product+2,?___omul+2
  2769   0022D6  C014  F004         	movff	___omul@product+3,?___omul+3
  2770   0022DA  C015  F005         	movff	___omul@product+4,?___omul+4
  2771   0022DE  C016  F006         	movff	___omul@product+5,?___omul+5
  2772   0022E2  C017  F007         	movff	___omul@product+6,?___omul+6
  2773   0022E6  C018  F008         	movff	___omul@product+7,?___omul+7
  2774   0022EA  0012               	return		;funcret
  2775   0022EC                     __end_of___omul:
  2776                           	callstack 0
  2777                           
  2778 ;; *************** function ___lwdiv *****************
  2779 ;; Defined at:
  2780 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  dividend        2    6[COMRAM] unsigned int 
  2783 ;;  divisor         2    8[COMRAM] unsigned int 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  quotient        2   11[COMRAM] unsigned int 
  2786 ;;  counter         1   10[COMRAM] unsigned char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  2    6[COMRAM] unsigned int 
  2789 ;; Registers used:
  2790 ;;		wreg, status,2, status,0
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2796 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2797 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2799 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2800 ;;Total ram usage:        7 bytes
  2801 ;; Hardware stack levels used: 1
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_convert_rgb2hue
  2806 ;;		_ADC2String
  2807 ;;		_setMotorPWM
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text7
  2812   002412                     __ptext7:
  2813                           	callstack 0
  2814   002412                     ___lwdiv:
  2815                           	callstack 27
  2816   002412  0E00               	movlw	0
  2817   002414  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  2818   002416  0E00               	movlw	0
  2819   002418  6E0C               	movwf	___lwdiv@quotient^0,c
  2820   00241A  5009               	movf	___lwdiv@divisor^0,w,c
  2821   00241C  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2822   00241E  B4D8               	btfsc	status,2,c
  2823   002420  EF14  F012         	goto	u2421
  2824   002424  EF16  F012         	goto	u2420
  2825   002428                     u2421:
  2826   002428  EF3E  F012         	goto	l962
  2827   00242C                     u2420:
  2828   00242C  0E01               	movlw	1
  2829   00242E  6E0B               	movwf	___lwdiv@counter^0,c
  2830   002430  EF1E  F012         	goto	l3473
  2831   002434                     l3471:
  2832   002434  90D8               	bcf	status,0,c
  2833   002436  3609               	rlcf	___lwdiv@divisor^0,f,c
  2834   002438  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2835   00243A  2A0B               	incf	___lwdiv@counter^0,f,c
  2836   00243C                     l3473:
  2837   00243C  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2838   00243E  EF23  F012         	goto	u2431
  2839   002442  EF25  F012         	goto	u2430
  2840   002446                     u2431:
  2841   002446  EF1A  F012         	goto	l3471
  2842   00244A                     u2430:
  2843   00244A                     l3475:
  2844   00244A  90D8               	bcf	status,0,c
  2845   00244C  360C               	rlcf	___lwdiv@quotient^0,f,c
  2846   00244E  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2847   002450  5009               	movf	___lwdiv@divisor^0,w,c
  2848   002452  5C07               	subwf	___lwdiv@dividend^0,w,c
  2849   002454  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2850   002456  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2851   002458  A0D8               	btfss	status,0,c
  2852   00245A  EF31  F012         	goto	u2441
  2853   00245E  EF33  F012         	goto	u2440
  2854   002462                     u2441:
  2855   002462  EF38  F012         	goto	l3483
  2856   002466                     u2440:
  2857   002466  5009               	movf	___lwdiv@divisor^0,w,c
  2858   002468  5E07               	subwf	___lwdiv@dividend^0,f,c
  2859   00246A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2860   00246C  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2861   00246E  800C               	bsf	___lwdiv@quotient^0,0,c
  2862   002470                     l3483:
  2863   002470  90D8               	bcf	status,0,c
  2864   002472  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2865   002474  3209               	rrcf	___lwdiv@divisor^0,f,c
  2866   002476  2E0B               	decfsz	___lwdiv@counter^0,f,c
  2867   002478  EF25  F012         	goto	l3475
  2868   00247C                     l962:
  2869   00247C  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  2870   002480  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2871   002484  0012               	return		;funcret
  2872   002486                     __end_of___lwdiv:
  2873                           	callstack 0
  2874                           
  2875 ;; *************** function ___lodiv *****************
  2876 ;; Defined at:
  2877 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lodiv.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  dividend        8   24[COMRAM] unsigned long long 
  2880 ;;  divisor         8   32[COMRAM] unsigned long long 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  quotient        8   40[COMRAM] unsigned long long 
  2883 ;;  counter         1   48[COMRAM] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  8   24[COMRAM] unsigned long long 
  2886 ;; Registers used:
  2887 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2893 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2894 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2896 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2897 ;;Total ram usage:       25 bytes
  2898 ;; Hardware stack levels used: 1
  2899 ;; This function calls:
  2900 ;;		Nothing
  2901 ;; This function is called by:
  2902 ;;		_convert_rgb2hue
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text8
  2907   001D18                     __ptext8:
  2908                           	callstack 0
  2909   001D18                     ___lodiv:
  2910                           	callstack 28
  2911   001D18  EE20  F029         	lfsr	2,___lodiv@quotient
  2912   001D1C  0E07               	movlw	7
  2913   001D1E                     u2511:
  2914   001D1E  6ADE               	clrf	postinc2,c
  2915   001D20  06E8               	decf	wreg,f,c
  2916   001D22  E2FD               	bc	u2511
  2917   001D24  5021               	movf	___lodiv@divisor^0,w,c
  2918   001D26  1022               	iorwf	(___lodiv@divisor+1)^0,w,c
  2919   001D28  1023               	iorwf	(___lodiv@divisor+2)^0,w,c
  2920   001D2A  1024               	iorwf	(___lodiv@divisor+3)^0,w,c
  2921   001D2C  1025               	iorwf	(___lodiv@divisor+4)^0,w,c
  2922   001D2E  1026               	iorwf	(___lodiv@divisor+5)^0,w,c
  2923   001D30  1027               	iorwf	(___lodiv@divisor+6)^0,w,c
  2924   001D32  1028               	iorwf	(___lodiv@divisor+7)^0,w,c
  2925   001D34  B4D8               	btfsc	status,2,c
  2926   001D36  EF9F  F00E         	goto	u2521
  2927   001D3A  EFA1  F00E         	goto	u2520
  2928   001D3E                     u2521:
  2929   001D3E  EFF3  F00E         	goto	l909
  2930   001D42                     u2520:
  2931   001D42  0E01               	movlw	1
  2932   001D44  6E31               	movwf	___lodiv@counter^0,c
  2933   001D46  EFAF  F00E         	goto	l3563
  2934   001D4A                     l3561:
  2935   001D4A  90D8               	bcf	status,0,c
  2936   001D4C  3621               	rlcf	___lodiv@divisor^0,f,c
  2937   001D4E  3622               	rlcf	(___lodiv@divisor+1)^0,f,c
  2938   001D50  3623               	rlcf	(___lodiv@divisor+2)^0,f,c
  2939   001D52  3624               	rlcf	(___lodiv@divisor+3)^0,f,c
  2940   001D54  3625               	rlcf	(___lodiv@divisor+4)^0,f,c
  2941   001D56  3626               	rlcf	(___lodiv@divisor+5)^0,f,c
  2942   001D58  3627               	rlcf	(___lodiv@divisor+6)^0,f,c
  2943   001D5A  3628               	rlcf	(___lodiv@divisor+7)^0,f,c
  2944   001D5C  2A31               	incf	___lodiv@counter^0,f,c
  2945   001D5E                     l3563:
  2946   001D5E  AE28               	btfss	(___lodiv@divisor+7)^0,7,c
  2947   001D60  EFB4  F00E         	goto	u2531
  2948   001D64  EFB6  F00E         	goto	u2530
  2949   001D68                     u2531:
  2950   001D68  EFA5  F00E         	goto	l3561
  2951   001D6C                     u2530:
  2952   001D6C                     l3565:
  2953   001D6C  90D8               	bcf	status,0,c
  2954   001D6E  3629               	rlcf	___lodiv@quotient^0,f,c
  2955   001D70  362A               	rlcf	(___lodiv@quotient+1)^0,f,c
  2956   001D72  362B               	rlcf	(___lodiv@quotient+2)^0,f,c
  2957   001D74  362C               	rlcf	(___lodiv@quotient+3)^0,f,c
  2958   001D76  362D               	rlcf	(___lodiv@quotient+4)^0,f,c
  2959   001D78  362E               	rlcf	(___lodiv@quotient+5)^0,f,c
  2960   001D7A  362F               	rlcf	(___lodiv@quotient+6)^0,f,c
  2961   001D7C  3630               	rlcf	(___lodiv@quotient+7)^0,f,c
  2962   001D7E  5021               	movf	___lodiv@divisor^0,w,c
  2963   001D80  5C19               	subwf	___lodiv@dividend^0,w,c
  2964   001D82  5022               	movf	(___lodiv@divisor+1)^0,w,c
  2965   001D84  581A               	subwfb	(___lodiv@dividend+1)^0,w,c
  2966   001D86  5023               	movf	(___lodiv@divisor+2)^0,w,c
  2967   001D88  581B               	subwfb	(___lodiv@dividend+2)^0,w,c
  2968   001D8A  5024               	movf	(___lodiv@divisor+3)^0,w,c
  2969   001D8C  581C               	subwfb	(___lodiv@dividend+3)^0,w,c
  2970   001D8E  5025               	movf	(___lodiv@divisor+4)^0,w,c
  2971   001D90  581D               	subwfb	(___lodiv@dividend+4)^0,w,c
  2972   001D92  5026               	movf	(___lodiv@divisor+5)^0,w,c
  2973   001D94  581E               	subwfb	(___lodiv@dividend+5)^0,w,c
  2974   001D96  5027               	movf	(___lodiv@divisor+6)^0,w,c
  2975   001D98  581F               	subwfb	(___lodiv@dividend+6)^0,w,c
  2976   001D9A  5028               	movf	(___lodiv@divisor+7)^0,w,c
  2977   001D9C  5820               	subwfb	(___lodiv@dividend+7)^0,w,c
  2978   001D9E  A0D8               	btfss	status,0,c
  2979   001DA0  EFD4  F00E         	goto	u2541
  2980   001DA4  EFD6  F00E         	goto	u2540
  2981   001DA8                     u2541:
  2982   001DA8  EFE7  F00E         	goto	l3573
  2983   001DAC                     u2540:
  2984   001DAC  5021               	movf	___lodiv@divisor^0,w,c
  2985   001DAE  5E19               	subwf	___lodiv@dividend^0,f,c
  2986   001DB0  5022               	movf	(___lodiv@divisor+1)^0,w,c
  2987   001DB2  5A1A               	subwfb	(___lodiv@dividend+1)^0,f,c
  2988   001DB4  5023               	movf	(___lodiv@divisor+2)^0,w,c
  2989   001DB6  5A1B               	subwfb	(___lodiv@dividend+2)^0,f,c
  2990   001DB8  5024               	movf	(___lodiv@divisor+3)^0,w,c
  2991   001DBA  5A1C               	subwfb	(___lodiv@dividend+3)^0,f,c
  2992   001DBC  5025               	movf	(___lodiv@divisor+4)^0,w,c
  2993   001DBE  5A1D               	subwfb	(___lodiv@dividend+4)^0,f,c
  2994   001DC0  5026               	movf	(___lodiv@divisor+5)^0,w,c
  2995   001DC2  5A1E               	subwfb	(___lodiv@dividend+5)^0,f,c
  2996   001DC4  5027               	movf	(___lodiv@divisor+6)^0,w,c
  2997   001DC6  5A1F               	subwfb	(___lodiv@dividend+6)^0,f,c
  2998   001DC8  5028               	movf	(___lodiv@divisor+7)^0,w,c
  2999   001DCA  5A20               	subwfb	(___lodiv@dividend+7)^0,f,c
  3000   001DCC  8029               	bsf	___lodiv@quotient^0,0,c
  3001   001DCE                     l3573:
  3002   001DCE  90D8               	bcf	status,0,c
  3003   001DD0  3228               	rrcf	(___lodiv@divisor+7)^0,f,c
  3004   001DD2  3227               	rrcf	(___lodiv@divisor+6)^0,f,c
  3005   001DD4  3226               	rrcf	(___lodiv@divisor+5)^0,f,c
  3006   001DD6  3225               	rrcf	(___lodiv@divisor+4)^0,f,c
  3007   001DD8  3224               	rrcf	(___lodiv@divisor+3)^0,f,c
  3008   001DDA  3223               	rrcf	(___lodiv@divisor+2)^0,f,c
  3009   001DDC  3222               	rrcf	(___lodiv@divisor+1)^0,f,c
  3010   001DDE  3221               	rrcf	___lodiv@divisor^0,f,c
  3011   001DE0  2E31               	decfsz	___lodiv@counter^0,f,c
  3012   001DE2  EFB6  F00E         	goto	l3565
  3013   001DE6                     l909:
  3014   001DE6  C029  F019         	movff	___lodiv@quotient,?___lodiv
  3015   001DEA  C02A  F01A         	movff	___lodiv@quotient+1,?___lodiv+1
  3016   001DEE  C02B  F01B         	movff	___lodiv@quotient+2,?___lodiv+2
  3017   001DF2  C02C  F01C         	movff	___lodiv@quotient+3,?___lodiv+3
  3018   001DF6  C02D  F01D         	movff	___lodiv@quotient+4,?___lodiv+4
  3019   001DFA  C02E  F01E         	movff	___lodiv@quotient+5,?___lodiv+5
  3020   001DFE  C02F  F01F         	movff	___lodiv@quotient+6,?___lodiv+6
  3021   001E02  C030  F020         	movff	___lodiv@quotient+7,?___lodiv+7
  3022   001E06  0012               	return		;funcret
  3023   001E08                     __end_of___lodiv:
  3024                           	callstack 0
  3025                           
  3026 ;; *************** function _initUSART4 *****************
  3027 ;; Defined at:
  3028 ;;		line 14 in file "serial.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, status,2
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3046 ;;Total ram usage:        0 bytes
  3047 ;; Hardware stack levels used: 1
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text9
  3056   0028B4                     __ptext9:
  3057                           	callstack 0
  3058   0028B4                     _initUSART4:
  3059                           	callstack 30
  3060   0028B4                     
  3061                           ;serial.c: 15:     RC0PPS = 0x12;
  3062   0028B4  0E12               	movlw	18
  3063   0028B6  010E               	movlb	14	; () banked
  3064   0028B8  6F62               	movwf	98,b	;volatile
  3065                           
  3066                           ;serial.c: 16:     RX4PPS = 0x11;
  3067   0028BA  0E11               	movlw	17
  3068   0028BC  6F15               	movwf	21,b	;volatile
  3069   0028BE                     
  3070                           ; BSR set to: 14
  3071                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  3072   0028BE  97E9               	bcf	233,3,b	;volatile
  3073   0028C0                     
  3074                           ; BSR set to: 14
  3075                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  3076   0028C0  95E8               	bcf	232,2,b	;volatile
  3077                           
  3078                           ;serial.c: 19:     SP4BRGL = 51;
  3079   0028C2  0E33               	movlw	51
  3080   0028C4  6FE5               	movwf	229,b	;volatile
  3081                           
  3082                           ;serial.c: 20:     SP4BRGH = 0;
  3083   0028C6  0E00               	movlw	0
  3084   0028C8  6FE6               	movwf	230,b	;volatile
  3085   0028CA                     
  3086                           ; BSR set to: 14
  3087                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  3088   0028CA  89E7               	bsf	231,4,b	;volatile
  3089   0028CC                     
  3090                           ; BSR set to: 14
  3091                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  3092   0028CC  8BE8               	bsf	232,5,b	;volatile
  3093   0028CE                     
  3094                           ; BSR set to: 14
  3095                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  3096   0028CE  8FE7               	bsf	231,7,b	;volatile
  3097   0028D0                     
  3098                           ; BSR set to: 14
  3099   0028D0  0012               	return		;funcret
  3100   0028D2                     __end_of_initUSART4:
  3101                           	callstack 0
  3102                           
  3103 ;; *************** function _initDCmotorsPWM *****************
  3104 ;; Defined at:
  3105 ;;		line 5 in file "dc_motor.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;		None
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      void 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3119 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3122 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3123 ;;Total ram usage:        2 bytes
  3124 ;; Hardware stack levels used: 1
  3125 ;; This function calls:
  3126 ;;		Nothing
  3127 ;; This function is called by:
  3128 ;;		_main
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           	psect	text10
  3133   002382                     __ptext10:
  3134                           	callstack 0
  3135   002382                     _initDCmotorsPWM:
  3136                           	callstack 30
  3137   002382                     
  3138                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  3139   002382  9485               	bcf	133,2,c	;volatile
  3140                           
  3141                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  3142   002384  9E83               	bcf	131,7,c	;volatile
  3143                           
  3144                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  3145   002386  9885               	bcf	133,4,c	;volatile
  3146                           
  3147                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  3148   002388  9C87               	bcf	135,6,c	;volatile
  3149                           
  3150                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  3151   00238A  947D               	bcf	125,2,c	;volatile
  3152                           
  3153                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  3154   00238C  9E7B               	bcf	123,7,c	;volatile
  3155                           
  3156                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  3157   00238E  987D               	bcf	125,4,c	;volatile
  3158                           
  3159                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  3160   002390  9C7F               	bcf	127,6,c	;volatile
  3161   002392                     
  3162                           ;dc_motor.c: 18:     RE2PPS=0x05;
  3163   002392  0E05               	movlw	5
  3164   002394  010E               	movlb	14	; () banked
  3165   002396  6F74               	movwf	116,b	;volatile
  3166                           
  3167                           ;dc_motor.c: 19:     RE4PPS=0x06;
  3168   002398  0E06               	movlw	6
  3169   00239A  6F76               	movwf	118,b	;volatile
  3170                           
  3171                           ;dc_motor.c: 20:     RC7PPS=0x07;
  3172   00239C  0E07               	movlw	7
  3173   00239E  6F69               	movwf	105,b	;volatile
  3174                           
  3175                           ;dc_motor.c: 21:     RG6PPS=0x08;
  3176   0023A0  0E08               	movlw	8
  3177   0023A2  6F88               	movwf	136,b	;volatile
  3178                           
  3179                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  3180   0023A4  50BD               	movf	189,w,c	;volatile
  3181   0023A6  0B8F               	andlw	-113
  3182   0023A8  0940               	iorlw	64
  3183   0023AA  6EBD               	movwf	189,c	;volatile
  3184                           
  3185                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  3186   0023AC  0EE0               	movlw	-32
  3187   0023AE  16BE               	andwf	190,f,c	;volatile
  3188                           
  3189                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  3190   0023B0  50BF               	movf	191,w,c	;volatile
  3191   0023B2  0BF0               	andlw	-16
  3192   0023B4  0901               	iorlw	1
  3193   0023B6  6EBF               	movwf	191,c	;volatile
  3194   0023B8                     
  3195                           ; BSR set to: 14
  3196                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  3197   0023B8  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  3198   0023BC                     
  3199                           ; BSR set to: 14
  3200                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  3201   0023BC  8EBD               	bsf	189,7,c	;volatile
  3202                           
  3203                           ;dc_motor.c: 35:     CCPR1H=0;
  3204   0023BE  0E00               	movlw	0
  3205   0023C0  6EAA               	movwf	170,c	;volatile
  3206                           
  3207                           ;dc_motor.c: 36:     CCPR2H=0;
  3208   0023C2  0E00               	movlw	0
  3209   0023C4  6EA6               	movwf	166,c	;volatile
  3210                           
  3211                           ;dc_motor.c: 37:     CCPR3H=0;
  3212   0023C6  0E00               	movlw	0
  3213   0023C8  010F               	movlb	15	; () banked
  3214   0023CA  6F25               	movwf	37,b	;volatile
  3215                           
  3216                           ;dc_motor.c: 38:     CCPR4H=0;
  3217   0023CC  0E00               	movlw	0
  3218   0023CE  6F21               	movwf	33,b	;volatile
  3219                           
  3220                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  3221   0023D0  0EFC               	movlw	-4
  3222   0023D2  16AD               	andwf	173,f,c	;volatile
  3223                           
  3224                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  3225   0023D4  0EF3               	movlw	-13
  3226   0023D6  16AD               	andwf	173,f,c	;volatile
  3227                           
  3228                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  3229   0023D8  0ECF               	movlw	-49
  3230   0023DA  16AD               	andwf	173,f,c	;volatile
  3231                           
  3232                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  3233   0023DC  0E3F               	movlw	-193
  3234   0023DE  16AD               	andwf	173,f,c	;volatile
  3235   0023E0                     
  3236                           ; BSR set to: 15
  3237                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  3238   0023E0  88AB               	bsf	171,4,c	;volatile
  3239                           
  3240                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  3241   0023E2  50AB               	movf	171,w,c	;volatile
  3242   0023E4  0BF0               	andlw	-16
  3243   0023E6  090C               	iorlw	12
  3244   0023E8  6EAB               	movwf	171,c	;volatile
  3245   0023EA                     
  3246                           ; BSR set to: 15
  3247                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  3248   0023EA  8EAB               	bsf	171,7,c	;volatile
  3249   0023EC                     
  3250                           ; BSR set to: 15
  3251                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  3252   0023EC  88A7               	bsf	167,4,c	;volatile
  3253                           
  3254                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  3255   0023EE  50A7               	movf	167,w,c	;volatile
  3256   0023F0  0BF0               	andlw	-16
  3257   0023F2  090C               	iorlw	12
  3258   0023F4  6EA7               	movwf	167,c	;volatile
  3259   0023F6                     
  3260                           ; BSR set to: 15
  3261                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  3262   0023F6  8EA7               	bsf	167,7,c	;volatile
  3263   0023F8                     
  3264                           ; BSR set to: 15
  3265                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  3266   0023F8  8926               	bsf	38,4,b	;volatile
  3267                           
  3268                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  3269   0023FA  5126               	movf	38,w,b	;volatile
  3270   0023FC  0BF0               	andlw	-16
  3271   0023FE  090C               	iorlw	12
  3272   002400  6F26               	movwf	38,b	;volatile
  3273   002402                     
  3274                           ; BSR set to: 15
  3275                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  3276   002402  8F26               	bsf	38,7,b	;volatile
  3277   002404                     
  3278                           ; BSR set to: 15
  3279                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  3280   002404  8922               	bsf	34,4,b	;volatile
  3281                           
  3282                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  3283   002406  5122               	movf	34,w,b	;volatile
  3284   002408  0BF0               	andlw	-16
  3285   00240A  090C               	iorlw	12
  3286   00240C  6F22               	movwf	34,b	;volatile
  3287   00240E                     
  3288                           ; BSR set to: 15
  3289                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  3290   00240E  8F22               	bsf	34,7,b	;volatile
  3291   002410                     
  3292                           ; BSR set to: 15
  3293   002410  0012               	return		;funcret
  3294   002412                     __end_of_initDCmotorsPWM:
  3295                           	callstack 0
  3296                           
  3297 ;; *************** function _color_click_init *****************
  3298 ;; Defined at:
  3299 ;;		line 6 in file "color.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;		None
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;		None
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  1    wreg      void 
  3306 ;; Registers used:
  3307 ;;		wreg, status,2, status,0, cstack
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3315 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3317 ;;Total ram usage:        1 bytes
  3318 ;; Hardware stack levels used: 1
  3319 ;; Hardware stack levels required when called: 3
  3320 ;; This function calls:
  3321 ;;		_I2C_2_Master_Init
  3322 ;;		_color_writetoaddr
  3323 ;; This function is called by:
  3324 ;;		_main
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           	psect	text11
  3329   00271E                     __ptext11:
  3330                           	callstack 0
  3331   00271E                     _color_click_init:
  3332                           	callstack 27
  3333   00271E                     
  3334                           ;color.c: 9:     I2C_2_Master_Init();
  3335   00271E  EC0E  F014         	call	_I2C_2_Master_Init	;wreg free
  3336   002722                     
  3337                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  3338   002722  0E01               	movlw	1
  3339   002724  6E03               	movwf	color_writetoaddr@value^0,c
  3340   002726  0E00               	movlw	0
  3341   002728  EC4A  F014         	call	_color_writetoaddr
  3342   00272C                     
  3343                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  3344   00272C  0E3F               	movlw	63
  3345   00272E  6E05               	movwf	??_color_click_init^0,c
  3346   002730  0E55               	movlw	85
  3347   002732                     u2897:
  3348   002732  2EE8               	decfsz	wreg,f,c
  3349   002734  D7FE               	bra	u2897
  3350   002736  2E05               	decfsz	??_color_click_init^0,f,c
  3351   002738  D7FC               	bra	u2897
  3352   00273A  0000               	nop	
  3353   00273C                     
  3354                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  3355   00273C  0E03               	movlw	3
  3356   00273E  6E03               	movwf	color_writetoaddr@value^0,c
  3357   002740  0E00               	movlw	0
  3358   002742  EC4A  F014         	call	_color_writetoaddr
  3359   002746                     
  3360                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  3361   002746  0ED5               	movlw	213
  3362   002748  6E03               	movwf	color_writetoaddr@value^0,c
  3363   00274A  0E01               	movlw	1
  3364   00274C  EC4A  F014         	call	_color_writetoaddr
  3365   002750  0012               	return		;funcret
  3366   002752                     __end_of_color_click_init:
  3367                           	callstack 0
  3368                           
  3369 ;; *************** function _color_writetoaddr *****************
  3370 ;; Defined at:
  3371 ;;		line 22 in file "color.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  address         1    wreg     unsigned char 
  3374 ;;  value           1    2[COMRAM] unsigned char 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  address         1    3[COMRAM] unsigned char 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      void 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3386 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3387 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3389 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3390 ;;Total ram usage:        2 bytes
  3391 ;; Hardware stack levels used: 1
  3392 ;; Hardware stack levels required when called: 2
  3393 ;; This function calls:
  3394 ;;		_I2C_2_Master_Start
  3395 ;;		_I2C_2_Master_Stop
  3396 ;;		_I2C_2_Master_Write
  3397 ;; This function is called by:
  3398 ;;		_color_click_init
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text12
  3403   002894                     __ptext12:
  3404                           	callstack 0
  3405   002894                     _color_writetoaddr:
  3406                           	callstack 27
  3407                           
  3408                           ;incstack = 0
  3409                           ;color_writetoaddr@address stored from wreg
  3410   002894  6E04               	movwf	color_writetoaddr@address^0,c
  3411   002896                     
  3412                           ;color.c: 23:     I2C_2_Master_Start();
  3413   002896  EC8D  F014         	call	_I2C_2_Master_Start	;wreg free
  3414                           
  3415                           ;color.c: 24:     I2C_2_Master_Write(0x52 | 0x00);
  3416   00289A  0E52               	movlw	82
  3417   00289C  EC82  F014         	call	_I2C_2_Master_Write
  3418                           
  3419                           ;color.c: 25:     I2C_2_Master_Write(0x80 | address);
  3420   0028A0  5004               	movf	color_writetoaddr@address^0,w,c
  3421   0028A2  0980               	iorlw	128
  3422   0028A4  EC82  F014         	call	_I2C_2_Master_Write
  3423                           
  3424                           ;color.c: 26:     I2C_2_Master_Write(value);
  3425   0028A8  5003               	movf	color_writetoaddr@value^0,w,c
  3426   0028AA  EC82  F014         	call	_I2C_2_Master_Write
  3427                           
  3428                           ;color.c: 27:     I2C_2_Master_Stop();
  3429   0028AE  EC88  F014         	call	_I2C_2_Master_Stop	;wreg free
  3430   0028B2  0012               	return		;funcret
  3431   0028B4                     __end_of_color_writetoaddr:
  3432                           	callstack 0
  3433                           
  3434 ;; *************** function _I2C_2_Master_Init *****************
  3435 ;; Defined at:
  3436 ;;		line 4 in file "i2c.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3454 ;;Total ram usage:        0 bytes
  3455 ;; Hardware stack levels used: 1
  3456 ;; This function calls:
  3457 ;;		Nothing
  3458 ;; This function is called by:
  3459 ;;		_color_click_init
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text13
  3464   00281C                     __ptext13:
  3465                           	callstack 0
  3466   00281C                     _I2C_2_Master_Init:
  3467                           	callstack 29
  3468   00281C                     
  3469                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  3470   00281C  010E               	movlb	14	; () banked
  3471   00281E  51D9               	movf	217,w,b	;volatile
  3472   002820  0BF0               	andlw	-16
  3473   002822  0908               	iorlw	8
  3474   002824  6FD9               	movwf	217,b	;volatile
  3475   002826                     
  3476                           ; BSR set to: 14
  3477                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  3478   002826  8BD9               	bsf	217,5,b	;volatile
  3479                           
  3480                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  3481   002828  0E9F               	movlw	159
  3482   00282A  6FD6               	movwf	214,b	;volatile
  3483   00282C                     
  3484                           ; BSR set to: 14
  3485                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  3486   00282C  8A84               	bsf	132,5,c	;volatile
  3487   00282E                     
  3488                           ; BSR set to: 14
  3489                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  3490   00282E  8C84               	bsf	132,6,c	;volatile
  3491   002830                     
  3492                           ; BSR set to: 14
  3493                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  3494   002830  9BA7               	bcf	167,5,b	;volatile
  3495   002832                     
  3496                           ; BSR set to: 14
  3497                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  3498   002832  9DA7               	bcf	167,6,b	;volatile
  3499                           
  3500                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  3501   002834  0E1D               	movlw	29
  3502   002836  6F1D               	movwf	29,b	;volatile
  3503                           
  3504                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  3505   002838  0E1E               	movlw	30
  3506   00283A  6F1C               	movwf	28,b	;volatile
  3507                           
  3508                           ;i2c.c: 18:   RD5PPS=0x1C;
  3509   00283C  0E1C               	movlw	28
  3510   00283E  6F6F               	movwf	111,b	;volatile
  3511                           
  3512                           ;i2c.c: 19:   RD6PPS=0x1B;
  3513   002840  0E1B               	movlw	27
  3514   002842  6F70               	movwf	112,b	;volatile
  3515   002844                     
  3516                           ; BSR set to: 14
  3517   002844  0012               	return		;funcret
  3518   002846                     __end_of_I2C_2_Master_Init:
  3519                           	callstack 0
  3520                           
  3521 ;; *************** function _calibration_routine *****************
  3522 ;; Defined at:
  3523 ;;		line 212 in file "color.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;  cCal            2   67[COMRAM] PTR struct colors
  3526 ;;		 -> colorCalibration(8), 
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;  cal_state      20   71[COMRAM] unsigned char [20]
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3538 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3539 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3540 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3541 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3542 ;;Total ram usage:       24 bytes
  3543 ;; Hardware stack levels used: 1
  3544 ;; Hardware stack levels required when called: 8
  3545 ;; This function calls:
  3546 ;;		_color_read_Blue
  3547 ;;		_color_read_Clear
  3548 ;;		_color_read_Green
  3549 ;;		_color_read_Red
  3550 ;;		_sendStringSerial4
  3551 ;;		_sprintf
  3552 ;; This function is called by:
  3553 ;;		_main
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text14
  3558   001704                     __ptext14:
  3559                           	callstack 0
  3560   001704                     _calibration_routine:
  3561                           	callstack 22
  3562   001704                     
  3563                           ;color.c: 212: void calibration_routine(colors *cCal);color.c: 213: {;color.c: 215:     
      +                          LATGbits.LATG0 = 0;
  3564   001704  907F               	bcf	127,0,c	;volatile
  3565                           
  3566                           ;color.c: 216:     LATEbits.LATE7 = 0;
  3567   001706  9E7D               	bcf	125,7,c	;volatile
  3568                           
  3569                           ;color.c: 217:     LATAbits.LATA3 = 0;
  3570   001708  9679               	bcf	121,3,c	;volatile
  3571   00170A                     
  3572                           ;color.c: 219:     char cal_state[20];;color.c: 223:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  3573   00170A  0E48               	movlw	low calibration_routine@cal_state
  3574   00170C  6E31               	movwf	sprintf@s^0,c
  3575   00170E  0E74               	movlw	low STR_5
  3576   001710  6E32               	movwf	sprintf@fmt^0,c
  3577   001712  0EF3               	movlw	low STR_6
  3578   001714  6E33               	movwf	(?_sprintf+2)^0,c
  3579   001716  5033               	movf	(?_sprintf+2)^0,w,c
  3580   001718  A4D8               	btfss	status,2,c
  3581   00171A  0E0E               	movlw	high __smallconst
  3582   00171C  6E34               	movwf	(?_sprintf+3)^0,c
  3583   00171E  ECA9  F013         	call	_sprintf	;wreg free
  3584   001722                     
  3585                           ;color.c: 224:     sendStringSerial4(cal_state);
  3586   001722  0E48               	movlw	low calibration_routine@cal_state
  3587   001724  6E02               	movwf	sendStringSerial4@string^0,c
  3588   001726  ECDD  F013         	call	_sendStringSerial4	;wreg free
  3589   00172A                     l93:
  3590                           
  3591                           ;color.c: 227:     while(PORTFbits.RF2 == 1){
  3592   00172A  B48E               	btfsc	142,2,c	;volatile
  3593   00172C  EF9A  F00B         	goto	u2781
  3594   001730  EF9C  F00B         	goto	u2780
  3595   001734                     u2781:
  3596   001734  EF95  F00B         	goto	l93
  3597   001738                     u2780:
  3598   001738                     
  3599                           ;color.c: 231:     LATGbits.LATG0 = 1;
  3600   001738  807F               	bsf	127,0,c	;volatile
  3601   00173A                     
  3602                           ;color.c: 232:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3603   00173A  0E29               	movlw	41
  3604   00173C  6E47               	movwf	(??_calibration_routine+1)^0,c
  3605   00173E  0E96               	movlw	150
  3606   001740  6E46               	movwf	??_calibration_routine^0,c
  3607   001742  0E7F               	movlw	127
  3608   001744                     u2907:
  3609   001744  2EE8               	decfsz	wreg,f,c
  3610   001746  D7FE               	bra	u2907
  3611   001748  2E46               	decfsz	??_calibration_routine^0,f,c
  3612   00174A  D7FC               	bra	u2907
  3613   00174C  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  3614   00174E  D7FA               	bra	u2907
  3615   001750  0000               	nop	
  3616   001752                     
  3617                           ;color.c: 233:     (cCal->red) = color_read_Red();
  3618   001752  EC72  F012         	call	_color_read_Red	;wreg free
  3619   001756  C044  FFD9         	movff	calibration_routine@cCal,fsr2l
  3620   00175A  C045  FFDA         	movff	calibration_routine@cCal+1,fsr2h
  3621   00175E  C005  FFDE         	movff	?_color_read_Red,postinc2
  3622   001762  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  3623   001766                     
  3624                           ;color.c: 234:     LATGbits.LATG0 = 0;
  3625   001766  907F               	bcf	127,0,c	;volatile
  3626   001768                     
  3627                           ;color.c: 237:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  3628   001768  0E48               	movlw	low calibration_routine@cal_state
  3629   00176A  6E31               	movwf	sprintf@s^0,c
  3630   00176C  0E23               	movlw	low STR_7
  3631   00176E  6E32               	movwf	sprintf@fmt^0,c
  3632   001770  0EF3               	movlw	low STR_6
  3633   001772  6E33               	movwf	(?_sprintf+2)^0,c
  3634   001774  5033               	movf	(?_sprintf+2)^0,w,c
  3635   001776  A4D8               	btfss	status,2,c
  3636   001778  0E0E               	movlw	high __smallconst
  3637   00177A  6E34               	movwf	(?_sprintf+3)^0,c
  3638   00177C  ECA9  F013         	call	_sprintf	;wreg free
  3639   001780                     
  3640                           ;color.c: 238:     sendStringSerial4(&cal_state);
  3641   001780  0E48               	movlw	low calibration_routine@cal_state
  3642   001782  6E02               	movwf	sendStringSerial4@string^0,c
  3643   001784  ECDD  F013         	call	_sendStringSerial4	;wreg free
  3644   001788                     l96:
  3645                           
  3646                           ;color.c: 240:     while(PORTFbits.RF2 == 1){
  3647   001788  B48E               	btfsc	142,2,c	;volatile
  3648   00178A  EFC9  F00B         	goto	u2791
  3649   00178E  EFCB  F00B         	goto	u2790
  3650   001792                     u2791:
  3651   001792  EFC4  F00B         	goto	l96
  3652   001796                     u2790:
  3653   001796                     
  3654                           ;color.c: 244:     LATEbits.LATE7 = 1;
  3655   001796  8E7D               	bsf	125,7,c	;volatile
  3656   001798                     
  3657                           ;color.c: 245:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3658   001798  0E29               	movlw	41
  3659   00179A  6E47               	movwf	(??_calibration_routine+1)^0,c
  3660   00179C  0E96               	movlw	150
  3661   00179E  6E46               	movwf	??_calibration_routine^0,c
  3662   0017A0  0E7F               	movlw	127
  3663   0017A2                     u2917:
  3664   0017A2  2EE8               	decfsz	wreg,f,c
  3665   0017A4  D7FE               	bra	u2917
  3666   0017A6  2E46               	decfsz	??_calibration_routine^0,f,c
  3667   0017A8  D7FC               	bra	u2917
  3668   0017AA  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  3669   0017AC  D7FA               	bra	u2917
  3670   0017AE  0000               	nop	
  3671   0017B0                     
  3672                           ;color.c: 246:     (cCal->green) = color_read_Green();
  3673   0017B0  EC9A  F012         	call	_color_read_Green	;wreg free
  3674   0017B4  EE20 F002          	lfsr	2,2
  3675   0017B8  5044               	movf	calibration_routine@cCal^0,w,c
  3676   0017BA  26D9               	addwf	fsr2l,f,c
  3677   0017BC  5045               	movf	(calibration_routine@cCal+1)^0,w,c
  3678   0017BE  22DA               	addwfc	fsr2h,f,c
  3679   0017C0  C005  FFDE         	movff	?_color_read_Green,postinc2
  3680   0017C4  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  3681   0017C8                     
  3682                           ;color.c: 247:     LATEbits.LATE7 = 0;
  3683   0017C8  9E7D               	bcf	125,7,c	;volatile
  3684   0017CA                     
  3685                           ;color.c: 250:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  3686   0017CA  0E48               	movlw	low calibration_routine@cal_state
  3687   0017CC  6E31               	movwf	sprintf@s^0,c
  3688   0017CE  0E40               	movlw	low STR_9
  3689   0017D0  6E32               	movwf	sprintf@fmt^0,c
  3690   0017D2  0EF3               	movlw	low STR_6
  3691   0017D4  6E33               	movwf	(?_sprintf+2)^0,c
  3692   0017D6  5033               	movf	(?_sprintf+2)^0,w,c
  3693   0017D8  A4D8               	btfss	status,2,c
  3694   0017DA  0E0E               	movlw	high __smallconst
  3695   0017DC  6E34               	movwf	(?_sprintf+3)^0,c
  3696   0017DE  ECA9  F013         	call	_sprintf	;wreg free
  3697   0017E2                     
  3698                           ;color.c: 251:     sendStringSerial4(&cal_state);
  3699   0017E2  0E48               	movlw	low calibration_routine@cal_state
  3700   0017E4  6E02               	movwf	sendStringSerial4@string^0,c
  3701   0017E6  ECDD  F013         	call	_sendStringSerial4	;wreg free
  3702   0017EA                     l99:
  3703                           
  3704                           ;color.c: 253:     while(PORTFbits.RF2 == 1){
  3705   0017EA  B48E               	btfsc	142,2,c	;volatile
  3706   0017EC  EFFA  F00B         	goto	u2801
  3707   0017F0  EFFC  F00B         	goto	u2800
  3708   0017F4                     u2801:
  3709   0017F4  EFF5  F00B         	goto	l99
  3710   0017F8                     u2800:
  3711   0017F8                     
  3712                           ;color.c: 257:     LATAbits.LATA3 = 1;
  3713   0017F8  8679               	bsf	121,3,c	;volatile
  3714   0017FA                     
  3715                           ;color.c: 258:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3716   0017FA  0E29               	movlw	41
  3717   0017FC  6E47               	movwf	(??_calibration_routine+1)^0,c
  3718   0017FE  0E96               	movlw	150
  3719   001800  6E46               	movwf	??_calibration_routine^0,c
  3720   001802  0E7F               	movlw	127
  3721   001804                     u2927:
  3722   001804  2EE8               	decfsz	wreg,f,c
  3723   001806  D7FE               	bra	u2927
  3724   001808  2E46               	decfsz	??_calibration_routine^0,f,c
  3725   00180A  D7FC               	bra	u2927
  3726   00180C  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  3727   00180E  D7FA               	bra	u2927
  3728   001810  0000               	nop	
  3729   001812                     
  3730                           ;color.c: 259:     (cCal->blue) = color_read_Blue();
  3731   001812  ECEA  F012         	call	_color_read_Blue	;wreg free
  3732   001816  EE20 F004          	lfsr	2,4
  3733   00181A  5044               	movf	calibration_routine@cCal^0,w,c
  3734   00181C  26D9               	addwf	fsr2l,f,c
  3735   00181E  5045               	movf	(calibration_routine@cCal+1)^0,w,c
  3736   001820  22DA               	addwfc	fsr2h,f,c
  3737   001822  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3738   001826  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3739   00182A                     
  3740                           ;color.c: 260:     LATAbits.LATA3 = 0;
  3741   00182A  9679               	bcf	121,3,c	;volatile
  3742   00182C                     
  3743                           ;color.c: 263:     sprintf(cal_state,"Calibration state = ambient light", ".");
  3744   00182C  0E48               	movlw	low calibration_routine@cal_state
  3745   00182E  6E31               	movwf	sprintf@s^0,c
  3746   001830  0E01               	movlw	low STR_11
  3747   001832  6E32               	movwf	sprintf@fmt^0,c
  3748   001834  0EF3               	movlw	low STR_6
  3749   001836  6E33               	movwf	(?_sprintf+2)^0,c
  3750   001838  5033               	movf	(?_sprintf+2)^0,w,c
  3751   00183A  A4D8               	btfss	status,2,c
  3752   00183C  0E0E               	movlw	high __smallconst
  3753   00183E  6E34               	movwf	(?_sprintf+3)^0,c
  3754   001840  ECA9  F013         	call	_sprintf	;wreg free
  3755   001844                     
  3756                           ;color.c: 264:     sendStringSerial4(&cal_state);
  3757   001844  0E48               	movlw	low calibration_routine@cal_state
  3758   001846  6E02               	movwf	sendStringSerial4@string^0,c
  3759   001848  ECDD  F013         	call	_sendStringSerial4	;wreg free
  3760   00184C                     l102:
  3761                           
  3762                           ;color.c: 266:     while(PORTFbits.RF2 == 1){
  3763   00184C  B48E               	btfsc	142,2,c	;volatile
  3764   00184E  EF2B  F00C         	goto	u2811
  3765   001852  EF2D  F00C         	goto	u2810
  3766   001856                     u2811:
  3767   001856  EF26  F00C         	goto	l102
  3768   00185A                     u2810:
  3769   00185A                     
  3770                           ;color.c: 269:     LATGbits.LATG0 = 1;
  3771   00185A  807F               	bsf	127,0,c	;volatile
  3772                           
  3773                           ;color.c: 270:     LATEbits.LATE7 = 1;
  3774   00185C  8E7D               	bsf	125,7,c	;volatile
  3775                           
  3776                           ;color.c: 271:     LATAbits.LATA3 = 1;
  3777   00185E  8679               	bsf	121,3,c	;volatile
  3778   001860                     
  3779                           ;color.c: 272:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3780   001860  0E29               	movlw	41
  3781   001862  6E47               	movwf	(??_calibration_routine+1)^0,c
  3782   001864  0E96               	movlw	150
  3783   001866  6E46               	movwf	??_calibration_routine^0,c
  3784   001868  0E7F               	movlw	127
  3785   00186A                     u2937:
  3786   00186A  2EE8               	decfsz	wreg,f,c
  3787   00186C  D7FE               	bra	u2937
  3788   00186E  2E46               	decfsz	??_calibration_routine^0,f,c
  3789   001870  D7FC               	bra	u2937
  3790   001872  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  3791   001874  D7FA               	bra	u2937
  3792   001876  0000               	nop	
  3793   001878                     
  3794                           ;color.c: 273:     (cCal->clear) = color_read_Clear();
  3795   001878  ECC2  F012         	call	_color_read_Clear	;wreg free
  3796   00187C  EE20 F006          	lfsr	2,6
  3797   001880  5044               	movf	calibration_routine@cCal^0,w,c
  3798   001882  26D9               	addwf	fsr2l,f,c
  3799   001884  5045               	movf	(calibration_routine@cCal+1)^0,w,c
  3800   001886  22DA               	addwfc	fsr2h,f,c
  3801   001888  C005  FFDE         	movff	?_color_read_Clear,postinc2
  3802   00188C  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  3803   001890                     
  3804                           ;color.c: 274:     LATGbits.LATG0 = 0;
  3805   001890  907F               	bcf	127,0,c	;volatile
  3806   001892                     
  3807                           ;color.c: 275:     LATEbits.LATE7 = 0;
  3808   001892  9E7D               	bcf	125,7,c	;volatile
  3809   001894                     
  3810                           ;color.c: 276:     LATAbits.LATA3 = 0;
  3811   001894  9679               	bcf	121,3,c	;volatile
  3812   001896                     
  3813                           ;color.c: 279:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  3814   001896  0E48               	movlw	low calibration_routine@cal_state
  3815   001898  6E31               	movwf	sprintf@s^0,c
  3816   00189A  0E5B               	movlw	low STR_13
  3817   00189C  6E32               	movwf	sprintf@fmt^0,c
  3818   00189E  0EF3               	movlw	low STR_6
  3819   0018A0  6E33               	movwf	(?_sprintf+2)^0,c
  3820   0018A2  5033               	movf	(?_sprintf+2)^0,w,c
  3821   0018A4  A4D8               	btfss	status,2,c
  3822   0018A6  0E0E               	movlw	high __smallconst
  3823   0018A8  6E34               	movwf	(?_sprintf+3)^0,c
  3824   0018AA  ECA9  F013         	call	_sprintf	;wreg free
  3825   0018AE                     
  3826                           ;color.c: 280:     sendStringSerial4(&cal_state);
  3827   0018AE  0E48               	movlw	low calibration_routine@cal_state
  3828   0018B0  6E02               	movwf	sendStringSerial4@string^0,c
  3829   0018B2  ECDD  F013         	call	_sendStringSerial4	;wreg free
  3830   0018B6  0012               	return		;funcret
  3831   0018B8                     __end_of_calibration_routine:
  3832                           	callstack 0
  3833                           
  3834 ;; *************** function _sprintf *****************
  3835 ;; Defined at:
  3836 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  s               1   48[COMRAM] PTR unsigned char 
  3839 ;;		 -> send2USART@hue_char(50), send2USART@buf(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  3840 ;;		 -> test@led_state(50), 
  3841 ;;  fmt             1   49[COMRAM] PTR const unsigned char 
  3842 ;;		 -> STR_16(12), STR_15(21), STR_13(25), STR_11(34), 
  3843 ;;		 -> STR_9(27), STR_7(29), STR_5(24), STR_4(17), 
  3844 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  f              12   55[COMRAM] struct _IO_FILE
  3847 ;;  ret             2    0        int 
  3848 ;;  ap              1   54[COMRAM] PTR void [1]
  3849 ;;		 -> ?_sprintf(2), 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  2   48[COMRAM] int 
  3852 ;; Registers used:
  3853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3859 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3860 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3862 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3863 ;;Total ram usage:       19 bytes
  3864 ;; Hardware stack levels used: 1
  3865 ;; Hardware stack levels required when called: 7
  3866 ;; This function calls:
  3867 ;;		_vfprintf
  3868 ;; This function is called by:
  3869 ;;		_test
  3870 ;;		_calibration_routine
  3871 ;;		_ADC2String
  3872 ;;		_send2USART
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           	psect	text15
  3877   002752                     __ptext15:
  3878                           	callstack 0
  3879   002752                     _sprintf:
  3880                           	callstack 22
  3881   002752  0E33               	movlw	low (?_sprintf+2)
  3882   002754  6E37               	movwf	sprintf@ap^0,c
  3883   002756  C031  F038         	movff	sprintf@s,sprintf@f
  3884   00275A  0E00               	movlw	0
  3885   00275C  6E3C               	movwf	(sprintf@f+4)^0,c
  3886   00275E  0E00               	movlw	0
  3887   002760  6E3B               	movwf	(sprintf@f+3)^0,c
  3888   002762  0E00               	movlw	0
  3889   002764  6E43               	movwf	(sprintf@f+11)^0,c
  3890   002766  0E00               	movlw	0
  3891   002768  6E42               	movwf	(sprintf@f+10)^0,c
  3892   00276A  0E38               	movlw	low sprintf@f
  3893   00276C  6E2D               	movwf	vfprintf@fp^0,c
  3894   00276E  C032  F02E         	movff	sprintf@fmt,vfprintf@fmt
  3895   002772  0E37               	movlw	low sprintf@ap
  3896   002774  6E2F               	movwf	vfprintf@ap^0,c
  3897   002776  EC12  F013         	call	_vfprintf	;wreg free
  3898   00277A  5031               	movf	sprintf@s^0,w,c
  3899   00277C  243B               	addwf	(sprintf@f+3)^0,w,c
  3900   00277E  6ED9               	movwf	fsr2l,c
  3901   002780  6ADA               	clrf	fsr2h,c
  3902   002782  6ADF               	clrf	indf2,c
  3903   002784  0012               	return		;funcret
  3904   002786                     __end_of_sprintf:
  3905                           	callstack 0
  3906                           
  3907 ;; *************** function _vfprintf *****************
  3908 ;; Defined at:
  3909 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  fp              1   44[COMRAM] PTR struct _IO_FILE
  3912 ;;		 -> sprintf@f(12), 
  3913 ;;  fmt             1   45[COMRAM] PTR const unsigned char 
  3914 ;;		 -> STR_16(12), STR_15(21), STR_13(25), STR_11(34), 
  3915 ;;		 -> STR_9(27), STR_7(29), STR_5(24), STR_4(17), 
  3916 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  3917 ;;  ap              1   46[COMRAM] PTR PTR void 
  3918 ;;		 -> sprintf@ap(1), 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  cfmt            1   47[COMRAM] PTR unsigned char 
  3921 ;;		 -> STR_16(12), STR_15(21), STR_13(25), STR_11(34), 
  3922 ;;		 -> STR_9(27), STR_7(29), STR_5(24), STR_4(17), 
  3923 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  2   44[COMRAM] int 
  3926 ;; Registers used:
  3927 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3933 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3936 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3937 ;;Total ram usage:        4 bytes
  3938 ;; Hardware stack levels used: 1
  3939 ;; Hardware stack levels required when called: 6
  3940 ;; This function calls:
  3941 ;;		_vfpfcnvrt
  3942 ;; This function is called by:
  3943 ;;		_sprintf
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text16
  3948   002624                     __ptext16:
  3949                           	callstack 0
  3950   002624                     _vfprintf:
  3951                           	callstack 22
  3952   002624                     
  3953                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
>>>>>>> Calibrating-Colors
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
<<<<<<< HEAD
  1616   001994  C02C  F02E         	movff	vfprintf@fmt,vfprintf@cfmt
  1617                           
  1618                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1619   001998  EFD6  F00C         	goto	l2224
  1620   00199C                     l2222:
  1621                           
  1622                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1623   00199C  C02B  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
  1624   0019A0  0E2E               	movlw	low vfprintf@cfmt
  1625   0019A2  6E21               	movwf	vfpfcnvrt@fmt^0,c
  1626   0019A4  C02D  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
  1627   0019A8  EC30  F007         	call	_vfpfcnvrt	;wreg free
  1628   0019AC                     l2224:
  1629                           
  1630                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1631   0019AC  C02E  FFF6         	movff	vfprintf@cfmt,tblptrl
  1632   0019B0                     	if	1	;There is more than 1 active tblptr byte
  1633   0019B0  0E0E               	movlw	high __smallconst
  1634   0019B2  6EF7               	movwf	tblptrh,c
  1635   0019B4                     	endif
  1636   0019B4                     	if	0	;tblptru may be non-zero
  1637   0019B4                     	endif
  1638   0019B4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1639   0019B4  0E00               	movlw	low (__smallconst shr (0+16))
  1640   0019B6  6EF8               	movwf	tblptru,c
  1641   0019B8                     	endif
  1642   0019B8  0008               	tblrd		*
  1643   0019BA  50F5               	movf	tablat,w,c
  1644   0019BC  0900               	iorlw	0
  1645   0019BE  A4D8               	btfss	status,2,c
  1646   0019C0  EFE4  F00C         	goto	u1121
  1647   0019C4  EFE6  F00C         	goto	u1120
  1648   0019C8                     u1121:
  1649   0019C8  EFCE  F00C         	goto	l2222
  1650   0019CC                     u1120:
  1651   0019CC                     
  1652                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1653   0019CC  0E00               	movlw	0
  1654   0019CE  6E2C               	movwf	(?_vfprintf+1)^0,c
  1655   0019D0  0E00               	movlw	0
  1656   0019D2  6E2B               	movwf	?_vfprintf^0,c
  1657   0019D4  0012               	return		;funcret
  1658   0019D6                     __end_of_vfprintf:
  1659                           	callstack 0
  1660                           
  1661 ;; *************** function _vfpfcnvrt *****************
  1662 ;; Defined at:
  1663 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1666 ;;		 -> sprintf@f(12), 
  1667 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  1668 ;;		 -> vfprintf@cfmt(1), 
  1669 ;;  ap              1   33[COMRAM] PTR PTR void 
  1670 ;;		 -> sprintf@ap(1), 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;  convarg         4   36[COMRAM] struct .
  1673 ;;  cp              1   41[COMRAM] PTR unsigned char 
  1674 ;;		 -> STR_6(17), STR_5(14), STR_4(13), STR_3(12), 
  1675 ;;		 -> STR_2(21), STR_1(17), 
  1676 ;;  done            1   40[COMRAM] _Bool 
  1677 ;;  c               1    0        unsigned char 
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  1    wreg      void 
  1680 ;; Registers used:
  1681 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1682 ;; Tracked objects:
  1683 ;;		On entry : 0/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1687 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1688 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1689 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1690 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1691 ;;Total ram usage:       11 bytes
  1692 ;; Hardware stack levels used: 1
  1693 ;; Hardware stack levels required when called: 5
  1694 ;; This function calls:
  1695 ;;		_dtoa
  1696 ;;		_fputc
  1697 ;;		_read_prec_or_width
  1698 ;; This function is called by:
  1699 ;;		_vfprintf
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text8
  1704   000E60                     __ptext8:
  1705                           	callstack 0
  1706   000E60                     _vfpfcnvrt:
  1707                           	callstack 22
  1708   000E60                     
  1709                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
=======
  3954   002624  C02E  F030         	movff	vfprintf@fmt,vfprintf@cfmt
  3955                           
  3956                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3957   002628  EF1E  F013         	goto	l3413
  3958   00262C                     l3411:
  3959                           
  3960                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  3961   00262C  C02D  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  3962   002630  0E30               	movlw	low vfprintf@cfmt
  3963   002632  6E23               	movwf	vfpfcnvrt@fmt^0,c
  3964   002634  C02F  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  3965   002638  EC5C  F00C         	call	_vfpfcnvrt	;wreg free
  3966   00263C                     l3413:
  3967                           
  3968                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3969   00263C  C030  FFF6         	movff	vfprintf@cfmt,tblptrl
  3970   002640                     	if	1	;There is more than 1 active tblptr byte
  3971   002640  0E0E               	movlw	high __smallconst
  3972   002642  6EF7               	movwf	tblptrh,c
  3973   002644                     	endif
  3974   002644                     	if	0	;tblptru may be non-zero
  3975   002644                     	endif
  3976   002644                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3977   002644  0E00               	movlw	low (__smallconst shr (0+16))
  3978   002646  6EF8               	movwf	tblptru,c
  3979   002648                     	endif
  3980   002648  0008               	tblrd		*
  3981   00264A  50F5               	movf	tablat,w,c
  3982   00264C  0900               	iorlw	0
  3983   00264E  A4D8               	btfss	status,2,c
  3984   002650  EF2C  F013         	goto	u2381
  3985   002654  EF2E  F013         	goto	u2380
  3986   002658                     u2381:
  3987   002658  EF16  F013         	goto	l3411
  3988   00265C                     u2380:
  3989   00265C                     
  3990                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  3991   00265C  0E00               	movlw	0
  3992   00265E  6E2E               	movwf	(?_vfprintf+1)^0,c
  3993   002660  0E00               	movlw	0
  3994   002662  6E2D               	movwf	?_vfprintf^0,c
  3995   002664  0012               	return		;funcret
  3996   002666                     __end_of_vfprintf:
  3997                           	callstack 0
  3998                           
  3999 ;; *************** function _vfpfcnvrt *****************
  4000 ;; Defined at:
  4001 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  4004 ;;		 -> sprintf@f(12), 
  4005 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  4006 ;;		 -> vfprintf@cfmt(1), 
  4007 ;;  ap              1   35[COMRAM] PTR PTR void 
  4008 ;;		 -> sprintf@ap(1), 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  convarg         4   38[COMRAM] struct .
  4011 ;;  cp              1   43[COMRAM] PTR unsigned char 
  4012 ;;		 -> STR_16(12), STR_15(21), STR_13(25), STR_11(34), 
  4013 ;;		 -> STR_9(27), STR_7(29), STR_5(24), STR_4(17), 
  4014 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  4015 ;;  done            1   42[COMRAM] _Bool 
  4016 ;;  c               1    0        unsigned char 
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      void 
  4019 ;; Registers used:
  4020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4026 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4027 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4028 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4029 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4030 ;;Total ram usage:       11 bytes
  4031 ;; Hardware stack levels used: 1
  4032 ;; Hardware stack levels required when called: 5
  4033 ;; This function calls:
  4034 ;;		_dtoa
  4035 ;;		_fputc
  4036 ;;		_read_prec_or_width
  4037 ;; This function is called by:
  4038 ;;		_vfprintf
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           	psect	text17
  4043   0018B8                     __ptext17:
  4044                           	callstack 0
  4045   0018B8                     _vfpfcnvrt:
  4046                           	callstack 22
  4047   0018B8                     
  4048                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
>>>>>>> Calibrating-Colors
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
<<<<<<< HEAD
  1710   000E60  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1711   000E62  6ED9               	movwf	fsr2l,c
  1712   000E64  6ADA               	clrf	fsr2h,c
  1713   000E66  CFDF FFF6          	movff	indf2,tblptrl
  1714   000E6A                     	if	1	;There is more than 1 active tblptr byte
  1715   000E6A  0E0E               	movlw	high __smallconst
  1716   000E6C  6EF7               	movwf	tblptrh,c
  1717   000E6E                     	endif
  1718   000E6E                     	if	0	;tblptru may be non-zero
  1719   000E6E                     	endif
  1720   000E6E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1721   000E6E  0E00               	movlw	low (__smallconst shr (0+16))
  1722   000E70  6EF8               	movwf	tblptru,c
  1723   000E72                     	endif
  1724   000E72  0008               	tblrd		*
  1725   000E74  50F5               	movf	tablat,w,c
  1726   000E76  0A25               	xorlw	37
  1727   000E78  A4D8               	btfss	status,2,c
  1728   000E7A  EF41  F007         	goto	u1071
  1729   000E7E  EF43  F007         	goto	u1070
  1730   000E82                     u1071:
  1731   000E82  EFDF  F007         	goto	l2210
  1732   000E86                     u1070:
  1733   000E86                     
  1734                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1735   000E86  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1736   000E88  6ED9               	movwf	fsr2l,c
  1737   000E8A  6ADA               	clrf	fsr2h,c
  1738   000E8C  2ADF               	incf	indf2,f,c
  1739   000E8E                     
  1740                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1741   000E8E  0E00               	movlw	0
  1742   000E90  0100               	movlb	0	; () banked
  1743   000E92  6F89               	movwf	(_width+1)& (0+255),b
  1744   000E94  0E00               	movlw	0
  1745   000E96  6F88               	movwf	_width& (0+255),b
  1746   000E98  C088  F05B         	movff	_width,_flags
  1747   000E9C                     
  1748                           ; BSR set to: 0
  1749                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1750   000E9C  698A               	setf	_prec& (0+255),b
  1751   000E9E  698B               	setf	(_prec+1)& (0+255),b
  1752   000EA0                     
  1753                           ; BSR set to: 0
  1754                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1755   000EA0  0E00               	movlw	0
  1756   000EA2  6E29               	movwf	vfpfcnvrt@done^0,c
  1757                           
  1758                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1759   000EA4  EF7A  F007         	goto	l2184
  1760   000EA8                     l2174:
  1761                           
  1762                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1763   000EA8  825B               	bsf	_flags^0,1,c
  1764   000EAA                     
  1765                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1766   000EAA  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1767   000EAC  6ED9               	movwf	fsr2l,c
  1768   000EAE  6ADA               	clrf	fsr2h,c
  1769   000EB0  2ADF               	incf	indf2,f,c
  1770                           
  1771                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1772   000EB2  EF7A  F007         	goto	l2184
  1773   000EB6                     l2178:
  1774                           
  1775                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1776   000EB6  0E01               	movlw	1
  1777   000EB8  6E29               	movwf	vfpfcnvrt@done^0,c
  1778                           
  1779                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1780   000EBA  EF7A  F007         	goto	l2184
  1781   000EBE                     l2182:
  1782   000EBE  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1783   000EC0  6ED9               	movwf	fsr2l,c
  1784   000EC2  6ADA               	clrf	fsr2h,c
  1785   000EC4  CFDF FFF6          	movff	indf2,tblptrl
  1786   000EC8                     	if	1	;There is more than 1 active tblptr byte
  1787   000EC8  0E0E               	movlw	high __smallconst
  1788   000ECA  6EF7               	movwf	tblptrh,c
  1789   000ECC                     	endif
  1790   000ECC                     	if	0	;tblptru may be non-zero
  1791   000ECC                     	endif
  1792   000ECC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1793   000ECC  0E00               	movlw	low (__smallconst shr (0+16))
  1794   000ECE  6EF8               	movwf	tblptru,c
  1795   000ED0                     	endif
  1796   000ED0  0008               	tblrd		*
  1797   000ED2  50F5               	movf	tablat,w,c
  1798   000ED4  6E23               	movwf	??_vfpfcnvrt^0,c
  1799   000ED6  6A24               	clrf	(??_vfpfcnvrt+1)^0,c
  1800                           
  1801                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1802                           ; Switch size 1, requested type "simple"
  1803                           ; Number of cases is 1, Range of values is 0 to 0
  1804                           ; switch strategies available:
  1805                           ; Name         Instructions Cycles
  1806                           ; simple_byte            4     3 (average)
  1807                           ;	Chosen strategy is simple_byte
  1808   000ED8  5024               	movf	(??_vfpfcnvrt+1)^0,w,c
  1809   000EDA  0A00               	xorlw	0	; case 0
  1810   000EDC  B4D8               	btfsc	status,2,c
  1811   000EDE  EF73  F007         	goto	l2742
  1812   000EE2  EF5B  F007         	goto	l2178
  1813   000EE6                     l2742:
  1814                           
  1815                           ; Switch size 1, requested type "simple"
  1816                           ; Number of cases is 1, Range of values is 48 to 48
  1817                           ; switch strategies available:
  1818                           ; Name         Instructions Cycles
  1819                           ; simple_byte            4     3 (average)
  1820                           ;	Chosen strategy is simple_byte
  1821   000EE6  5023               	movf	??_vfpfcnvrt^0,w,c
  1822   000EE8  0A30               	xorlw	48	; case 48
  1823   000EEA  B4D8               	btfsc	status,2,c
  1824   000EEC  EF54  F007         	goto	l2174
  1825   000EF0  EF5B  F007         	goto	l2178
  1826   000EF4                     l2184:
  1827                           
  1828                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1829   000EF4  5029               	movf	vfpfcnvrt@done^0,w,c
  1830   000EF6  B4D8               	btfsc	status,2,c
  1831   000EF8  EF80  F007         	goto	u1081
  1832   000EFC  EF82  F007         	goto	u1080
  1833   000F00                     u1081:
  1834   000F00  EF5F  F007         	goto	l2182
  1835   000F04                     u1080:
  1836   000F04                     
  1837                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1838   000F04  C021  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1839   000F08  C022  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1840   000F0C  EC76  F00A         	call	_read_prec_or_width	;wreg free
  1841   000F10  C007  F088         	movff	?_read_prec_or_width,_width
  1842   000F14  C008  F089         	movff	?_read_prec_or_width+1,_width+1
  1843   000F18                     
  1844                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1845   000F18  0100               	movlb	0	; () banked
  1846   000F1A  BF89               	btfsc	(_width+1)& (0+255),7,b
  1847   000F1C  EF94  F007         	goto	u1090
  1848   000F20  EF92  F007         	goto	u1091
  1849   000F24                     u1091:
  1850   000F24  EF99  F007         	goto	l2192
  1851   000F28                     u1090:
  1852   000F28                     
  1853                           ; BSR set to: 0
  1854                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1855   000F28  805B               	bsf	_flags^0,0,c
  1856                           
  1857                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1858   000F2A  6D88               	negf	_width& (0+255),b
  1859   000F2C  1F89               	comf	(_width+1)& (0+255),f,b
  1860   000F2E  B0D8               	btfsc	status,0,c
  1861   000F30  2B89               	incf	(_width+1)& (0+255),f,b
  1862   000F32                     l2192:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1866   000F32  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1867   000F34  6ED9               	movwf	fsr2l,c
  1868   000F36  6ADA               	clrf	fsr2h,c
  1869   000F38  50DF               	movf	indf2,w,c
  1870   000F3A  6E2A               	movwf	vfpfcnvrt@cp^0,c
  1871   000F3C                     
  1872                           ; BSR set to: 0
  1873                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1874   000F3C  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1875   000F40                     	if	1	;There is more than 1 active tblptr byte
  1876   000F40  0E0E               	movlw	high __smallconst
  1877   000F42  6EF7               	movwf	tblptrh,c
  1878   000F44                     	endif
  1879   000F44                     	if	0	;tblptru may be non-zero
  1880   000F44                     	endif
  1881   000F44                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1882   000F44  0E00               	movlw	low (__smallconst shr (0+16))
  1883   000F46  6EF8               	movwf	tblptru,c
  1884   000F48                     	endif
  1885   000F48  0008               	tblrd		*
  1886   000F4A  50F5               	movf	tablat,w,c
  1887   000F4C  0A64               	xorlw	100
  1888   000F4E  B4D8               	btfsc	status,2,c
  1889   000F50  EFAC  F007         	goto	u1101
  1890   000F54  EFAE  F007         	goto	u1100
  1891   000F58                     u1101:
  1892   000F58  EFBE  F007         	goto	l2198
  1893   000F5C                     u1100:
  1894   000F5C                     
  1895                           ; BSR set to: 0
  1896   000F5C  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1897   000F60                     	if	1	;There is more than 1 active tblptr byte
  1898   000F60  0E0E               	movlw	high __smallconst
  1899   000F62  6EF7               	movwf	tblptrh,c
  1900   000F64                     	endif
  1901   000F64                     	if	0	;tblptru may be non-zero
  1902   000F64                     	endif
  1903   000F64                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1904   000F64  0E00               	movlw	low (__smallconst shr (0+16))
  1905   000F66  6EF8               	movwf	tblptru,c
  1906   000F68                     	endif
  1907   000F68  0008               	tblrd		*
  1908   000F6A  50F5               	movf	tablat,w,c
  1909   000F6C  0A69               	xorlw	105
  1910   000F6E  A4D8               	btfss	status,2,c
  1911   000F70  EFBC  F007         	goto	u1111
  1912   000F74  EFBE  F007         	goto	u1110
  1913   000F78                     u1111:
  1914   000F78  EFD9  F007         	goto	l2206
  1915   000F7C                     u1110:
  1916   000F7C                     l2198:
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1920   000F7C  5022               	movf	vfpfcnvrt@ap^0,w,c
  1921   000F7E  6ED9               	movwf	fsr2l,c
  1922   000F80  6ADA               	clrf	fsr2h,c
  1923   000F82  0E02               	movlw	2
  1924   000F84  26DF               	addwf	indf2,f,c
  1925   000F86  5CDF               	subwf	indf2,w,c
  1926   000F88  6ED9               	movwf	fsr2l,c
  1927   000F8A  6ADA               	clrf	fsr2h,c
  1928   000F8C  CFDE F025          	movff	postinc2,vfpfcnvrt@convarg
  1929   000F90  CFDE F026          	movff	postinc2,vfpfcnvrt@convarg+1
  1930   000F94                     
  1931                           ; BSR set to: 0
  1932                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1933   000F94  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1934   000F96  6ED9               	movwf	fsr2l,c
  1935   000F98  6ADA               	clrf	fsr2h,c
  1936   000F9A  282A               	incf	vfpfcnvrt@cp^0,w,c
  1937   000F9C  6EDF               	movwf	indf2,c
  1938   000F9E                     
  1939                           ; BSR set to: 0
  1940                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1941   000F9E  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  1942   000FA2  C025  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  1943   000FA6  C026  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1944   000FAA  ECF3  F007         	call	_dtoa	;wreg free
  1945   000FAE  EFF2  F007         	goto	l1150
  1946   000FB2                     l2206:
  1947                           
  1948                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1949   000FB2  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1950   000FB4  6ED9               	movwf	fsr2l,c
  1951   000FB6  6ADA               	clrf	fsr2h,c
  1952   000FB8  2ADF               	incf	indf2,f,c
  1953   000FBA  EFF2  F007         	goto	l1150
  1954   000FBE                     l2210:
  1955                           
  1956                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1957   000FBE  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1958   000FC0  6ED9               	movwf	fsr2l,c
  1959   000FC2  6ADA               	clrf	fsr2h,c
  1960   000FC4  CFDF FFF6          	movff	indf2,tblptrl
  1961   000FC8                     	if	1	;There is more than 1 active tblptr byte
  1962   000FC8  0E0E               	movlw	high __smallconst
  1963   000FCA  6EF7               	movwf	tblptrh,c
  1964   000FCC                     	endif
  1965   000FCC                     	if	0	;tblptru may be non-zero
  1966   000FCC                     	endif
  1967   000FCC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1968   000FCC  0E00               	movlw	low (__smallconst shr (0+16))
  1969   000FCE  6EF8               	movwf	tblptru,c
  1970   000FD0                     	endif
  1971   000FD0  0008               	tblrd		*
  1972   000FD2  50F5               	movf	tablat,w,c
  1973   000FD4  6E01               	movwf	fputc@c^0,c
  1974   000FD6  6A02               	clrf	(fputc@c+1)^0,c
  1975   000FD8  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1976   000FDC  EC68  F009         	call	_fputc	;wreg free
  1977   000FE0  EFD9  F007         	goto	l2206
  1978   000FE4                     l1150:
  1979   000FE4  0012               	return		;funcret
  1980   000FE6                     __end_of_vfpfcnvrt:
  1981                           	callstack 0
  1982                           
  1983 ;; *************** function _read_prec_or_width *****************
  1984 ;; Defined at:
  1985 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  1988 ;;		 -> vfprintf@cfmt(1), 
  1989 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  1990 ;;		 -> sprintf@ap(1), 
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  c               1    8[COMRAM] unsigned char 
  1993 ;;  n               2    9[COMRAM] int 
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  2    6[COMRAM] int 
  1996 ;; Registers used:
  1997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2003 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2004 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2006 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2007 ;;Total ram usage:        5 bytes
  2008 ;; Hardware stack levels used: 1
  2009 ;; Hardware stack levels required when called: 1
  2010 ;; This function calls:
  2011 ;;		___wmul
  2012 ;; This function is called by:
  2013 ;;		_vfpfcnvrt
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           	psect	text9
  2018   0014EC                     __ptext9:
  2019                           	callstack 0
  2020   0014EC                     _read_prec_or_width:
  2021                           	callstack 25
  2022   0014EC                     
  2023                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  2024   0014EC  0E00               	movlw	0
  2025   0014EE  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  2026   0014F0  0E00               	movlw	0
  2027   0014F2  6E0A               	movwf	read_prec_or_width@n^0,c
  2028   0014F4                     
  2029                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  2030   0014F4  5007               	movf	read_prec_or_width@fmt^0,w,c
  2031   0014F6  6ED9               	movwf	fsr2l,c
  2032   0014F8  6ADA               	clrf	fsr2h,c
  2033   0014FA  CFDF FFF6          	movff	indf2,tblptrl
  2034   0014FE                     	if	1	;There is more than 1 active tblptr byte
  2035   0014FE  0E0E               	movlw	high __smallconst
  2036   001500  6EF7               	movwf	tblptrh,c
  2037   001502                     	endif
  2038   001502                     	if	0	;tblptru may be non-zero
  2039   001502                     	endif
  2040   001502                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2041   001502  0E00               	movlw	low (__smallconst shr (0+16))
  2042   001504  6EF8               	movwf	tblptru,c
  2043   001506                     	endif
  2044   001506  0008               	tblrd		*
  2045   001508  50F5               	movf	tablat,w,c
  2046   00150A  0A2A               	xorlw	42
  2047   00150C  A4D8               	btfss	status,2,c
  2048   00150E  EF8B  F00A         	goto	u1051
  2049   001512  EF8D  F00A         	goto	u1050
  2050   001516                     u1051:
  2051   001516  EFB3  F00A         	goto	l2162
  2052   00151A                     u1050:
  2053   00151A                     
  2054                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  2055   00151A  5007               	movf	read_prec_or_width@fmt^0,w,c
  2056   00151C  6ED9               	movwf	fsr2l,c
  2057   00151E  6ADA               	clrf	fsr2h,c
  2058   001520  2ADF               	incf	indf2,f,c
  2059   001522                     
  2060                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  2061   001522  5008               	movf	read_prec_or_width@ap^0,w,c
  2062   001524  6ED9               	movwf	fsr2l,c
  2063   001526  6ADA               	clrf	fsr2h,c
  2064   001528  0E02               	movlw	2
  2065   00152A  26DF               	addwf	indf2,f,c
  2066   00152C  5CDF               	subwf	indf2,w,c
  2067   00152E  6ED9               	movwf	fsr2l,c
  2068   001530  6ADA               	clrf	fsr2h,c
  2069   001532  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  2070   001536  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  2071                           
  2072                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  2073   00153A  EFC8  F00A         	goto	l1131
  2074   00153E                     l2158:
  2075                           
  2076                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  2077   00153E  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  2078   001542  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  2079   001546  0E00               	movlw	0
  2080   001548  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2081   00154A  0E0A               	movlw	10
  2082   00154C  6E03               	movwf	___wmul@multiplicand^0,c
  2083   00154E  ECDE  F00D         	call	___wmul	;wreg free
  2084   001552  5009               	movf	read_prec_or_width@c^0,w,c
  2085   001554  2401               	addwf	?___wmul^0,w,c
  2086   001556  6E0A               	movwf	read_prec_or_width@n^0,c
  2087   001558  0E00               	movlw	0
  2088   00155A  2002               	addwfc	(?___wmul+1)^0,w,c
  2089   00155C  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  2090   00155E                     
  2091                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  2092   00155E  5007               	movf	read_prec_or_width@fmt^0,w,c
  2093   001560  6ED9               	movwf	fsr2l,c
  2094   001562  6ADA               	clrf	fsr2h,c
  2095   001564  2ADF               	incf	indf2,f,c
  2096   001566                     l2162:
  2097                           
  2098                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2099   001566  5007               	movf	read_prec_or_width@fmt^0,w,c
  2100   001568  6ED9               	movwf	fsr2l,c
  2101   00156A  6ADA               	clrf	fsr2h,c
  2102   00156C  CFDF FFF6          	movff	indf2,tblptrl
  2103   001570                     	if	1	;There is more than 1 active tblptr byte
  2104   001570  0E0E               	movlw	high __smallconst
  2105   001572  6EF7               	movwf	tblptrh,c
  2106   001574                     	endif
  2107   001574                     	if	0	;tblptru may be non-zero
  2108   001574                     	endif
  2109   001574                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2110   001574  0E00               	movlw	low (__smallconst shr (0+16))
  2111   001576  6EF8               	movwf	tblptru,c
  2112   001578                     	endif
  2113   001578  0008               	tblrd		*
  2114   00157A  50F5               	movf	tablat,w,c
  2115   00157C  0FD0               	addlw	208
  2116   00157E  6E09               	movwf	read_prec_or_width@c^0,c
  2117   001580  0E09               	movlw	9
  2118   001582  6409               	cpfsgt	read_prec_or_width@c^0,c
  2119   001584  EFC6  F00A         	goto	u1061
  2120   001588  EFC8  F00A         	goto	u1060
  2121   00158C                     u1061:
  2122   00158C  EF9F  F00A         	goto	l2158
  2123   001590                     u1060:
  2124   001590                     l1131:
  2125                           
  2126                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2127   001590  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  2128   001594  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  2129   001598  0012               	return		;funcret
  2130   00159A                     __end_of_read_prec_or_width:
  2131                           	callstack 0
  2132                           
  2133 ;; *************** function ___wmul *****************
  2134 ;; Defined at:
  2135 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  multiplier      2    0[COMRAM] unsigned int 
  2138 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;  product         2    4[COMRAM] unsigned int 
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  2    0[COMRAM] unsigned int 
  2143 ;; Registers used:
  2144 ;;		wreg, status,2, status,0, prodl, prodh
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2150 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2151 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2153 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2154 ;;Total ram usage:        6 bytes
  2155 ;; Hardware stack levels used: 1
  2156 ;; This function calls:
  2157 ;;		Nothing
  2158 ;; This function is called by:
  2159 ;;		_ADC2String
  2160 ;;		_read_prec_or_width
  2161 ;;		_setMotorPWM
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text10
  2166   001BBC                     __ptext10:
  2167                           	callstack 0
  2168   001BBC                     ___wmul:
  2169                           	callstack 25
  2170   001BBC  5001               	movf	___wmul@multiplier^0,w,c
  2171   001BBE  0203               	mulwf	___wmul@multiplicand^0,c
  2172   001BC0  CFF3 F005          	movff	prodl,___wmul@product
  2173   001BC4  CFF4 F006          	movff	prodh,___wmul@product+1
  2174   001BC8  5001               	movf	___wmul@multiplier^0,w,c
  2175   001BCA  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2176   001BCC  50F3               	movf	243,w,c
  2177   001BCE  2606               	addwf	(___wmul@product+1)^0,f,c
  2178   001BD0  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2179   001BD2  0203               	mulwf	___wmul@multiplicand^0,c
  2180   001BD4  50F3               	movf	243,w,c
  2181   001BD6  2606               	addwf	(___wmul@product+1)^0,f,c
  2182   001BD8  C005  F001         	movff	___wmul@product,?___wmul
  2183   001BDC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2184   001BE0  0012               	return		;funcret
  2185   001BE2                     __end_of___wmul:
  2186                           	callstack 0
  2187                           
  2188 ;; *************** function _dtoa *****************
  2189 ;; Defined at:
  2190 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  2193 ;;		 -> sprintf@f(12), 
  2194 ;;  d               2   21[COMRAM] int 
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;  i               2   29[COMRAM] int 
  2197 ;;  w               2   26[COMRAM] int 
  2198 ;;  s               1   28[COMRAM] unsigned char 
  2199 ;;  p               1   25[COMRAM] _Bool 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2209 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2210 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2212 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2213 ;;Total ram usage:       11 bytes
  2214 ;; Hardware stack levels used: 1
  2215 ;; Hardware stack levels required when called: 4
  2216 ;; This function calls:
  2217 ;;		___awdiv
  2218 ;;		___awmod
  2219 ;;		_abs
  2220 ;;		_pad
  2221 ;; This function is called by:
  2222 ;;		_vfpfcnvrt
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text11
  2227   000FE6                     __ptext11:
  2228                           	callstack 0
  2229   000FE6                     _dtoa:
  2230                           	callstack 22
  2231   000FE6                     
  2232                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
=======
  4049   0018B8  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4050   0018BA  6ED9               	movwf	fsr2l,c
  4051   0018BC  6ADA               	clrf	fsr2h,c
  4052   0018BE  CFDF FFF6          	movff	indf2,tblptrl
  4053   0018C2                     	if	1	;There is more than 1 active tblptr byte
  4054   0018C2  0E0E               	movlw	high __smallconst
  4055   0018C4  6EF7               	movwf	tblptrh,c
  4056   0018C6                     	endif
  4057   0018C6                     	if	0	;tblptru may be non-zero
  4058   0018C6                     	endif
  4059   0018C6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4060   0018C6  0E00               	movlw	low (__smallconst shr (0+16))
  4061   0018C8  6EF8               	movwf	tblptru,c
  4062   0018CA                     	endif
  4063   0018CA  0008               	tblrd		*
  4064   0018CC  50F5               	movf	tablat,w,c
  4065   0018CE  0A25               	xorlw	37
  4066   0018D0  A4D8               	btfss	status,2,c
  4067   0018D2  EF6D  F00C         	goto	u2311
  4068   0018D6  EF6F  F00C         	goto	u2310
  4069   0018DA                     u2311:
  4070   0018DA  EF0E  F00D         	goto	l3391
  4071   0018DE                     u2310:
  4072   0018DE                     
  4073                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4074   0018DE  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4075   0018E0  6ED9               	movwf	fsr2l,c
  4076   0018E2  6ADA               	clrf	fsr2h,c
  4077   0018E4  2ADF               	incf	indf2,f,c
  4078   0018E6                     
  4079                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4080   0018E6  0E00               	movlw	0
  4081   0018E8  0101               	movlb	1	; () banked
  4082   0018EA  6F65               	movwf	(_width+1)& (0+255),b
  4083   0018EC  0E00               	movlw	0
  4084   0018EE  6F64               	movwf	_width& (0+255),b
  4085   0018F0  C164  F0FC         	movff	_width,_flags
  4086   0018F4                     
  4087                           ; BSR set to: 1
  4088                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4089   0018F4  6966               	setf	_prec& (0+255),b
  4090   0018F6  6967               	setf	(_prec+1)& (0+255),b
  4091   0018F8                     
  4092                           ; BSR set to: 1
  4093                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  4094   0018F8  0E00               	movlw	0
  4095   0018FA  6E2B               	movwf	vfpfcnvrt@done^0,c
  4096                           
  4097                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4098   0018FC  EFA7  F00C         	goto	l3365
  4099   001900                     l3355:
  4100                           
  4101                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  4102   001900  0100               	movlb	0	; () banked
  4103   001902  83FC               	bsf	_flags& (0+255),1,b
  4104   001904                     
  4105                           ; BSR set to: 0
  4106                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  4107   001904  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4108   001906  6ED9               	movwf	fsr2l,c
  4109   001908  6ADA               	clrf	fsr2h,c
  4110   00190A  2ADF               	incf	indf2,f,c
  4111                           
  4112                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  4113   00190C  EFA7  F00C         	goto	l3365
  4114   001910                     l3359:
  4115                           
  4116                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  4117   001910  0E01               	movlw	1
  4118   001912  6E2B               	movwf	vfpfcnvrt@done^0,c
  4119                           
  4120                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  4121   001914  EFA7  F00C         	goto	l3365
  4122   001918                     l3363:
  4123   001918  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4124   00191A  6ED9               	movwf	fsr2l,c
  4125   00191C  6ADA               	clrf	fsr2h,c
  4126   00191E  CFDF FFF6          	movff	indf2,tblptrl
  4127   001922                     	if	1	;There is more than 1 active tblptr byte
  4128   001922  0E0E               	movlw	high __smallconst
  4129   001924  6EF7               	movwf	tblptrh,c
  4130   001926                     	endif
  4131   001926                     	if	0	;tblptru may be non-zero
  4132   001926                     	endif
  4133   001926                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4134   001926  0E00               	movlw	low (__smallconst shr (0+16))
  4135   001928  6EF8               	movwf	tblptru,c
  4136   00192A                     	endif
  4137   00192A  0008               	tblrd		*
  4138   00192C  50F5               	movf	tablat,w,c
  4139   00192E  6E25               	movwf	??_vfpfcnvrt^0,c
  4140   001930  6A26               	clrf	(??_vfpfcnvrt+1)^0,c
  4141                           
  4142                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4143                           ; Switch size 1, requested type "simple"
  4144                           ; Number of cases is 1, Range of values is 0 to 0
  4145                           ; switch strategies available:
  4146                           ; Name         Instructions Cycles
  4147                           ; simple_byte            4     3 (average)
  4148                           ;	Chosen strategy is simple_byte
  4149   001932  5026               	movf	(??_vfpfcnvrt+1)^0,w,c
  4150   001934  0A00               	xorlw	0	; case 0
  4151   001936  B4D8               	btfsc	status,2,c
  4152   001938  EFA0  F00C         	goto	l4053
  4153   00193C  EF88  F00C         	goto	l3359
  4154   001940                     l4053:
  4155                           
  4156                           ; Switch size 1, requested type "simple"
  4157                           ; Number of cases is 1, Range of values is 48 to 48
  4158                           ; switch strategies available:
  4159                           ; Name         Instructions Cycles
  4160                           ; simple_byte            4     3 (average)
  4161                           ;	Chosen strategy is simple_byte
  4162   001940  5025               	movf	??_vfpfcnvrt^0,w,c
  4163   001942  0A30               	xorlw	48	; case 48
  4164   001944  B4D8               	btfsc	status,2,c
  4165   001946  EF80  F00C         	goto	l3355
  4166   00194A  EF88  F00C         	goto	l3359
  4167   00194E                     l3365:
  4168                           
  4169                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4170   00194E  502B               	movf	vfpfcnvrt@done^0,w,c
  4171   001950  B4D8               	btfsc	status,2,c
  4172   001952  EFAD  F00C         	goto	u2321
  4173   001956  EFAF  F00C         	goto	u2320
  4174   00195A                     u2321:
  4175   00195A  EF8C  F00C         	goto	l3363
  4176   00195E                     u2320:
  4177   00195E                     
  4178                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  4179   00195E  C023  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  4180   001962  C024  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  4181   001966  EC2A  F010         	call	_read_prec_or_width	;wreg free
  4182   00196A  C007  F164         	movff	?_read_prec_or_width,_width
  4183   00196E  C008  F165         	movff	?_read_prec_or_width+1,_width+1
  4184   001972                     
  4185                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  4186   001972  0101               	movlb	1	; () banked
  4187   001974  BF65               	btfsc	(_width+1)& (0+255),7,b
  4188   001976  EFC1  F00C         	goto	u2330
  4189   00197A  EFBF  F00C         	goto	u2331
  4190   00197E                     u2331:
  4191   00197E  EFC8  F00C         	goto	l3373
  4192   001982                     u2330:
  4193   001982                     
  4194                           ; BSR set to: 1
  4195                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  4196   001982  0100               	movlb	0	; () banked
  4197   001984  81FC               	bsf	_flags& (0+255),0,b
  4198                           
  4199                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  4200   001986  0101               	movlb	1	; () banked
  4201   001988  6D64               	negf	_width& (0+255),b
  4202   00198A  1F65               	comf	(_width+1)& (0+255),f,b
  4203   00198C  B0D8               	btfsc	status,0,c
  4204   00198E  2B65               	incf	(_width+1)& (0+255),f,b
  4205   001990                     l3373:
  4206                           
  4207                           ; BSR set to: 1
  4208                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  4209   001990  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4210   001992  6ED9               	movwf	fsr2l,c
  4211   001994  6ADA               	clrf	fsr2h,c
  4212   001996  50DF               	movf	indf2,w,c
  4213   001998  6E2C               	movwf	vfpfcnvrt@cp^0,c
  4214   00199A                     
  4215                           ; BSR set to: 1
  4216                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4217   00199A  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4218   00199E                     	if	1	;There is more than 1 active tblptr byte
  4219   00199E  0E0E               	movlw	high __smallconst
  4220   0019A0  6EF7               	movwf	tblptrh,c
  4221   0019A2                     	endif
  4222   0019A2                     	if	0	;tblptru may be non-zero
  4223   0019A2                     	endif
  4224   0019A2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4225   0019A2  0E00               	movlw	low (__smallconst shr (0+16))
  4226   0019A4  6EF8               	movwf	tblptru,c
  4227   0019A6                     	endif
  4228   0019A6  0008               	tblrd		*
  4229   0019A8  50F5               	movf	tablat,w,c
  4230   0019AA  0A64               	xorlw	100
  4231   0019AC  B4D8               	btfsc	status,2,c
  4232   0019AE  EFDB  F00C         	goto	u2341
  4233   0019B2  EFDD  F00C         	goto	u2340
  4234   0019B6                     u2341:
  4235   0019B6  EFED  F00C         	goto	l3379
  4236   0019BA                     u2340:
  4237   0019BA                     
  4238                           ; BSR set to: 1
  4239   0019BA  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4240   0019BE                     	if	1	;There is more than 1 active tblptr byte
  4241   0019BE  0E0E               	movlw	high __smallconst
  4242   0019C0  6EF7               	movwf	tblptrh,c
  4243   0019C2                     	endif
  4244   0019C2                     	if	0	;tblptru may be non-zero
  4245   0019C2                     	endif
  4246   0019C2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4247   0019C2  0E00               	movlw	low (__smallconst shr (0+16))
  4248   0019C4  6EF8               	movwf	tblptru,c
  4249   0019C6                     	endif
  4250   0019C6  0008               	tblrd		*
  4251   0019C8  50F5               	movf	tablat,w,c
  4252   0019CA  0A69               	xorlw	105
  4253   0019CC  A4D8               	btfss	status,2,c
  4254   0019CE  EFEB  F00C         	goto	u2351
  4255   0019D2  EFED  F00C         	goto	u2350
  4256   0019D6                     u2351:
  4257   0019D6  EF08  F00D         	goto	l3387
  4258   0019DA                     u2350:
  4259   0019DA                     l3379:
  4260                           
  4261                           ; BSR set to: 1
  4262                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4263   0019DA  5024               	movf	vfpfcnvrt@ap^0,w,c
  4264   0019DC  6ED9               	movwf	fsr2l,c
  4265   0019DE  6ADA               	clrf	fsr2h,c
  4266   0019E0  0E02               	movlw	2
  4267   0019E2  26DF               	addwf	indf2,f,c
  4268   0019E4  5CDF               	subwf	indf2,w,c
  4269   0019E6  6ED9               	movwf	fsr2l,c
  4270   0019E8  6ADA               	clrf	fsr2h,c
  4271   0019EA  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  4272   0019EE  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  4273   0019F2                     
  4274                           ; BSR set to: 1
  4275                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  4276   0019F2  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4277   0019F4  6ED9               	movwf	fsr2l,c
  4278   0019F6  6ADA               	clrf	fsr2h,c
  4279   0019F8  282C               	incf	vfpfcnvrt@cp^0,w,c
  4280   0019FA  6EDF               	movwf	indf2,c
  4281   0019FC                     
  4282                           ; BSR set to: 1
  4283                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  4284   0019FC  C022  F017         	movff	vfpfcnvrt@fp,dtoa@fp
  4285   001A00  C027  F018         	movff	vfpfcnvrt@convarg,dtoa@d
  4286   001A04  C028  F019         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4287   001A08  EC22  F00D         	call	_dtoa	;wreg free
  4288   001A0C  EF21  F00D         	goto	l1213
  4289   001A10                     l3387:
  4290                           
  4291                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  4292   001A10  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4293   001A12  6ED9               	movwf	fsr2l,c
  4294   001A14  6ADA               	clrf	fsr2h,c
  4295   001A16  2ADF               	incf	indf2,f,c
  4296   001A18  EF21  F00D         	goto	l1213
  4297   001A1C                     l3391:
  4298                           
  4299                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  4300   001A1C  5023               	movf	vfpfcnvrt@fmt^0,w,c
  4301   001A1E  6ED9               	movwf	fsr2l,c
  4302   001A20  6ADA               	clrf	fsr2h,c
  4303   001A22  CFDF FFF6          	movff	indf2,tblptrl
  4304   001A26                     	if	1	;There is more than 1 active tblptr byte
  4305   001A26  0E0E               	movlw	high __smallconst
  4306   001A28  6EF7               	movwf	tblptrh,c
  4307   001A2A                     	endif
  4308   001A2A                     	if	0	;tblptru may be non-zero
  4309   001A2A                     	endif
  4310   001A2A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4311   001A2A  0E00               	movlw	low (__smallconst shr (0+16))
  4312   001A2C  6EF8               	movwf	tblptru,c
  4313   001A2E                     	endif
  4314   001A2E  0008               	tblrd		*
  4315   001A30  50F5               	movf	tablat,w,c
  4316   001A32  6E01               	movwf	fputc@c^0,c
  4317   001A34  6A02               	clrf	(fputc@c+1)^0,c
  4318   001A36  C022  F003         	movff	vfpfcnvrt@fp,fputc@fp
  4319   001A3A  EC81  F010         	call	_fputc	;wreg free
  4320   001A3E  EF08  F00D         	goto	l3387
  4321   001A42                     l1213:
  4322   001A42  0012               	return		;funcret
  4323   001A44                     __end_of_vfpfcnvrt:
  4324                           	callstack 0
  4325                           
  4326 ;; *************** function _read_prec_or_width *****************
  4327 ;; Defined at:
  4328 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  4331 ;;		 -> vfprintf@cfmt(1), 
  4332 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  4333 ;;		 -> sprintf@ap(1), 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  c               1    8[COMRAM] unsigned char 
  4336 ;;  n               2    9[COMRAM] int 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  2    6[COMRAM] int 
  4339 ;; Registers used:
  4340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4347 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4349 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4350 ;;Total ram usage:        5 bytes
  4351 ;; Hardware stack levels used: 1
  4352 ;; Hardware stack levels required when called: 1
  4353 ;; This function calls:
  4354 ;;		___wmul
  4355 ;; This function is called by:
  4356 ;;		_vfpfcnvrt
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text18
  4361   002054                     __ptext18:
  4362                           	callstack 0
  4363   002054                     _read_prec_or_width:
  4364                           	callstack 25
  4365   002054                     
  4366                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  4367   002054  0E00               	movlw	0
  4368   002056  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  4369   002058  0E00               	movlw	0
  4370   00205A  6E0A               	movwf	read_prec_or_width@n^0,c
  4371   00205C                     
  4372                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  4373   00205C  5007               	movf	read_prec_or_width@fmt^0,w,c
  4374   00205E  6ED9               	movwf	fsr2l,c
  4375   002060  6ADA               	clrf	fsr2h,c
  4376   002062  CFDF FFF6          	movff	indf2,tblptrl
  4377   002066                     	if	1	;There is more than 1 active tblptr byte
  4378   002066  0E0E               	movlw	high __smallconst
  4379   002068  6EF7               	movwf	tblptrh,c
  4380   00206A                     	endif
  4381   00206A                     	if	0	;tblptru may be non-zero
  4382   00206A                     	endif
  4383   00206A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4384   00206A  0E00               	movlw	low (__smallconst shr (0+16))
  4385   00206C  6EF8               	movwf	tblptru,c
  4386   00206E                     	endif
  4387   00206E  0008               	tblrd		*
  4388   002070  50F5               	movf	tablat,w,c
  4389   002072  0A2A               	xorlw	42
  4390   002074  A4D8               	btfss	status,2,c
  4391   002076  EF3F  F010         	goto	u2291
  4392   00207A  EF41  F010         	goto	u2290
  4393   00207E                     u2291:
  4394   00207E  EF67  F010         	goto	l3343
  4395   002082                     u2290:
  4396   002082                     
  4397                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  4398   002082  5007               	movf	read_prec_or_width@fmt^0,w,c
  4399   002084  6ED9               	movwf	fsr2l,c
  4400   002086  6ADA               	clrf	fsr2h,c
  4401   002088  2ADF               	incf	indf2,f,c
  4402   00208A                     
  4403                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  4404   00208A  5008               	movf	read_prec_or_width@ap^0,w,c
  4405   00208C  6ED9               	movwf	fsr2l,c
  4406   00208E  6ADA               	clrf	fsr2h,c
  4407   002090  0E02               	movlw	2
  4408   002092  26DF               	addwf	indf2,f,c
  4409   002094  5CDF               	subwf	indf2,w,c
  4410   002096  6ED9               	movwf	fsr2l,c
  4411   002098  6ADA               	clrf	fsr2h,c
  4412   00209A  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  4413   00209E  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  4414                           
  4415                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  4416   0020A2  EF7C  F010         	goto	l1194
  4417   0020A6                     l3339:
  4418                           
  4419                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  4420   0020A6  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  4421   0020AA  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  4422   0020AE  0E00               	movlw	0
  4423   0020B0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4424   0020B2  0E0A               	movlw	10
  4425   0020B4  6E03               	movwf	___wmul@multiplicand^0,c
  4426   0020B6  EC37  F014         	call	___wmul	;wreg free
  4427   0020BA  5009               	movf	read_prec_or_width@c^0,w,c
  4428   0020BC  2401               	addwf	?___wmul^0,w,c
  4429   0020BE  6E0A               	movwf	read_prec_or_width@n^0,c
  4430   0020C0  0E00               	movlw	0
  4431   0020C2  2002               	addwfc	(?___wmul+1)^0,w,c
  4432   0020C4  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  4433   0020C6                     
  4434                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  4435   0020C6  5007               	movf	read_prec_or_width@fmt^0,w,c
  4436   0020C8  6ED9               	movwf	fsr2l,c
  4437   0020CA  6ADA               	clrf	fsr2h,c
  4438   0020CC  2ADF               	incf	indf2,f,c
  4439   0020CE                     l3343:
  4440                           
  4441                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  4442   0020CE  5007               	movf	read_prec_or_width@fmt^0,w,c
  4443   0020D0  6ED9               	movwf	fsr2l,c
  4444   0020D2  6ADA               	clrf	fsr2h,c
  4445   0020D4  CFDF FFF6          	movff	indf2,tblptrl
  4446   0020D8                     	if	1	;There is more than 1 active tblptr byte
  4447   0020D8  0E0E               	movlw	high __smallconst
  4448   0020DA  6EF7               	movwf	tblptrh,c
  4449   0020DC                     	endif
  4450   0020DC                     	if	0	;tblptru may be non-zero
  4451   0020DC                     	endif
  4452   0020DC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4453   0020DC  0E00               	movlw	low (__smallconst shr (0+16))
  4454   0020DE  6EF8               	movwf	tblptru,c
  4455   0020E0                     	endif
  4456   0020E0  0008               	tblrd		*
  4457   0020E2  50F5               	movf	tablat,w,c
  4458   0020E4  0FD0               	addlw	208
  4459   0020E6  6E09               	movwf	read_prec_or_width@c^0,c
  4460   0020E8  0E09               	movlw	9
  4461   0020EA  6409               	cpfsgt	read_prec_or_width@c^0,c
  4462   0020EC  EF7A  F010         	goto	u2301
  4463   0020F0  EF7C  F010         	goto	u2300
  4464   0020F4                     u2301:
  4465   0020F4  EF53  F010         	goto	l3339
  4466   0020F8                     u2300:
  4467   0020F8                     l1194:
  4468                           
  4469                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  4470   0020F8  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  4471   0020FC  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  4472   002100  0012               	return		;funcret
  4473   002102                     __end_of_read_prec_or_width:
  4474                           	callstack 0
  4475                           
  4476 ;; *************** function ___wmul *****************
  4477 ;; Defined at:
  4478 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  multiplier      2    0[COMRAM] unsigned int 
  4481 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  product         2    4[COMRAM] unsigned int 
  4484 ;; Return value:  Size  Location     Type
  4485 ;;                  2    0[COMRAM] unsigned int 
  4486 ;; Registers used:
  4487 ;;		wreg, status,2, status,0, prodl, prodh
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4493 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4496 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4497 ;;Total ram usage:        6 bytes
  4498 ;; Hardware stack levels used: 1
  4499 ;; This function calls:
  4500 ;;		Nothing
  4501 ;; This function is called by:
  4502 ;;		_ADC2String
  4503 ;;		_read_prec_or_width
  4504 ;;		_setMotorPWM
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           	psect	text19
  4509   00286E                     __ptext19:
  4510                           	callstack 0
  4511   00286E                     ___wmul:
  4512                           	callstack 25
  4513   00286E  5001               	movf	___wmul@multiplier^0,w,c
  4514   002870  0203               	mulwf	___wmul@multiplicand^0,c
  4515   002872  CFF3 F005          	movff	prodl,___wmul@product
  4516   002876  CFF4 F006          	movff	prodh,___wmul@product+1
  4517   00287A  5001               	movf	___wmul@multiplier^0,w,c
  4518   00287C  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4519   00287E  50F3               	movf	243,w,c
  4520   002880  2606               	addwf	(___wmul@product+1)^0,f,c
  4521   002882  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4522   002884  0203               	mulwf	___wmul@multiplicand^0,c
  4523   002886  50F3               	movf	243,w,c
  4524   002888  2606               	addwf	(___wmul@product+1)^0,f,c
  4525   00288A  C005  F001         	movff	___wmul@product,?___wmul
  4526   00288E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4527   002892  0012               	return		;funcret
  4528   002894                     __end_of___wmul:
  4529                           	callstack 0
  4530                           
  4531 ;; *************** function _dtoa *****************
  4532 ;; Defined at:
  4533 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  4536 ;;		 -> sprintf@f(12), 
  4537 ;;  d               2   23[COMRAM] int 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  i               2   31[COMRAM] int 
  4540 ;;  w               2   28[COMRAM] int 
  4541 ;;  s               1   30[COMRAM] unsigned char 
  4542 ;;  p               1   27[COMRAM] _Bool 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1    wreg      void 
  4545 ;; Registers used:
  4546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4552 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4553 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4555 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4556 ;;Total ram usage:       11 bytes
  4557 ;; Hardware stack levels used: 1
  4558 ;; Hardware stack levels required when called: 4
  4559 ;; This function calls:
  4560 ;;		___awdiv
  4561 ;;		___awmod
  4562 ;;		_abs
  4563 ;;		_pad
  4564 ;; This function is called by:
  4565 ;;		_vfpfcnvrt
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text20
  4570   001A44                     __ptext20:
  4571                           	callstack 0
  4572   001A44                     _dtoa:
  4573                           	callstack 22
  4574   001A44                     
  4575                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
>>>>>>> Calibrating-Colors
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
<<<<<<< HEAD
  2233   000FE6  0E01               	movlw	1
  2234   000FE8  6E1A               	movwf	dtoa@p^0,c
  2235   000FEA                     
  2236                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  2237   000FEA  BE17               	btfsc	(dtoa@d+1)^0,7,c
  2238   000FEC  EFFA  F007         	goto	u951
  2239   000FF0  EFFD  F007         	goto	u950
  2240   000FF4                     u951:
  2241   000FF4  0E01               	movlw	1
  2242   000FF6  EFFE  F007         	goto	u960
  2243   000FFA                     u950:
  2244   000FFA  0E00               	movlw	0
  2245   000FFC                     u960:
  2246   000FFC  6E1D               	movwf	dtoa@s^0,c
  2247   000FFE                     
  2248                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  2249   000FFE  C088  F01B         	movff	_width,dtoa@w
  2250   001002  C089  F01C         	movff	_width+1,dtoa@w+1
  2251   001006                     
  2252                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  2253   001006  501D               	movf	dtoa@s^0,w,c
  2254   001008  B4D8               	btfsc	status,2,c
  2255   00100A  EF09  F008         	goto	u971
  2256   00100E  EF0B  F008         	goto	u970
  2257   001012                     u971:
  2258   001012  EF22  F008         	goto	l1114
  2259   001016                     u970:
  2260   001016                     
  2261                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  2262   001016  061B               	decf	dtoa@w^0,f,c
  2263   001018  A0D8               	btfss	status,0,c
  2264   00101A  061C               	decf	(dtoa@w+1)^0,f,c
  2265   00101C                     
  2266                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  2267   00101C  501D               	movf	dtoa@s^0,w,c
  2268   00101E  A4D8               	btfss	status,2,c
  2269   001020  EF14  F008         	goto	u981
  2270   001024  EF16  F008         	goto	u980
  2271   001028                     u981:
  2272   001028  EF1C  F008         	goto	l2114
  2273   00102C                     u980:
  2274   00102C  0E00               	movlw	0
  2275   00102E  6E19               	movwf	(_dtoa$2280+1)^0,c
  2276   001030  0E2B               	movlw	43
  2277   001032  6E18               	movwf	_dtoa$2280^0,c
  2278   001034  EF20  F008         	goto	l2116
  2279   001038                     l2114:
  2280   001038  0E00               	movlw	0
  2281   00103A  6E19               	movwf	(_dtoa$2280+1)^0,c
  2282   00103C  0E2D               	movlw	45
  2283   00103E  6E18               	movwf	_dtoa$2280^0,c
  2284   001040                     l2116:
  2285   001040  C018  F01D         	movff	_dtoa$2280,dtoa@s
  2286   001044                     l1114:
  2287                           
  2288                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  2289   001044  0E00               	movlw	0
  2290   001046  6E1F               	movwf	(dtoa@i+1)^0,c
  2291   001048  0E1F               	movlw	31
  2292   00104A  6E1E               	movwf	dtoa@i^0,c
  2293   00104C                     
  2294                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  2295   00104C  0E00               	movlw	0
  2296   00104E  0100               	movlb	0	; () banked
  2297   001050  6FAC               	movwf	(_dbuf+31)& (0+255),b
  2298                           
  2299                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2300   001052  EF58  F008         	goto	l2130
  2301   001056                     l2120:
  2302                           
  2303                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  2304   001056  061E               	decf	dtoa@i^0,f,c
  2305   001058  A0D8               	btfss	status,0,c
  2306   00105A  061F               	decf	(dtoa@i+1)^0,f,c
  2307   00105C                     
  2308                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  2309   00105C  501E               	movf	dtoa@i^0,w,c
  2310   00105E  0F8D               	addlw	low _dbuf
  2311   001060  6ED9               	movwf	fsr2l,c
  2312   001062  6ADA               	clrf	fsr2h,c
  2313   001064  C016  F001         	movff	dtoa@d,___awmod@dividend
  2314   001068  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  2315   00106C  0E00               	movlw	0
  2316   00106E  6E04               	movwf	(___awmod@divisor+1)^0,c
  2317   001070  0E0A               	movlw	10
  2318   001072  6E03               	movwf	___awmod@divisor^0,c
  2319   001074  EC1E  F00A         	call	___awmod	;wreg free
  2320   001078  C001  F007         	movff	?___awmod,abs@a
  2321   00107C  C002  F008         	movff	?___awmod+1,abs@a+1
  2322   001080  EC81  F00D         	call	_abs	;wreg free
  2323   001084  5007               	movf	?_abs^0,w,c
  2324   001086  0F30               	addlw	48
  2325   001088  6EDF               	movwf	indf2,c
  2326   00108A                     
  2327                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2328   00108A  0E00               	movlw	0
  2329   00108C  6E1A               	movwf	dtoa@p^0,c
  2330   00108E                     
  2331                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  2332   00108E  061B               	decf	dtoa@w^0,f,c
  2333   001090  A0D8               	btfss	status,0,c
  2334   001092  061C               	decf	(dtoa@w+1)^0,f,c
  2335   001094                     
  2336                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  2337   001094  C016  F001         	movff	dtoa@d,___awdiv@dividend
  2338   001098  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  2339   00109C  0E00               	movlw	0
  2340   00109E  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2341   0010A0  0E0A               	movlw	10
  2342   0010A2  6E03               	movwf	___awdiv@divisor^0,c
  2343   0010A4  ECA7  F008         	call	___awdiv	;wreg free
  2344   0010A8  C001  F016         	movff	?___awdiv,dtoa@d
  2345   0010AC  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  2346   0010B0                     l2130:
  2347                           
  2348                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2349   0010B0  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  2350   0010B2  EF63  F008         	goto	u991
  2351   0010B6  501F               	movf	(dtoa@i+1)^0,w,c
  2352   0010B8  E108               	bnz	u990
  2353   0010BA  041E               	decf	dtoa@i^0,w,c
  2354   0010BC  A0D8               	btfss	status,0,c
  2355   0010BE  EF63  F008         	goto	u991
  2356   0010C2  EF65  F008         	goto	u990
  2357   0010C6                     u991:
  2358   0010C6  EF8A  F008         	goto	l2140
  2359   0010CA                     u990:
  2360   0010CA  5016               	movf	dtoa@d^0,w,c
  2361   0010CC  1017               	iorwf	(dtoa@d+1)^0,w,c
  2362   0010CE  A4D8               	btfss	status,2,c
  2363   0010D0  EF6C  F008         	goto	u1001
  2364   0010D4  EF6E  F008         	goto	u1000
  2365   0010D8                     u1001:
  2366   0010D8  EF2B  F008         	goto	l2120
  2367   0010DC                     u1000:
  2368   0010DC  501A               	movf	dtoa@p^0,w,c
  2369   0010DE  A4D8               	btfss	status,2,c
  2370   0010E0  EF74  F008         	goto	u1011
  2371   0010E4  EF76  F008         	goto	u1010
  2372   0010E8                     u1011:
  2373   0010E8  EF2B  F008         	goto	l2120
  2374   0010EC                     u1010:
  2375   0010EC  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  2376   0010EE  EF81  F008         	goto	u1021
  2377   0010F2  501C               	movf	(dtoa@w+1)^0,w,c
  2378   0010F4  E108               	bnz	u1020
  2379   0010F6  041B               	decf	dtoa@w^0,w,c
  2380   0010F8  A0D8               	btfss	status,0,c
  2381   0010FA  EF81  F008         	goto	u1021
  2382   0010FE  EF83  F008         	goto	u1020
  2383   001102                     u1021:
  2384   001102  EF8A  F008         	goto	l2140
  2385   001106                     u1020:
  2386   001106  B25B               	btfsc	_flags^0,1,c
  2387   001108  EF88  F008         	goto	u1031
  2388   00110C  EF8A  F008         	goto	u1030
  2389   001110                     u1031:
  2390   001110  EF2B  F008         	goto	l2120
  2391   001114                     u1030:
  2392   001114                     l2140:
  2393                           
  2394                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  2395   001114  501D               	movf	dtoa@s^0,w,c
  2396   001116  B4D8               	btfsc	status,2,c
  2397   001118  EF90  F008         	goto	u1041
  2398   00111C  EF92  F008         	goto	u1040
  2399   001120                     u1041:
  2400   001120  EF9B  F008         	goto	l2146
  2401   001124                     u1040:
  2402   001124                     
  2403                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  2404   001124  061E               	decf	dtoa@i^0,f,c
  2405   001126  A0D8               	btfss	status,0,c
  2406   001128  061F               	decf	(dtoa@i+1)^0,f,c
  2407   00112A                     
  2408                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  2409   00112A  501E               	movf	dtoa@i^0,w,c
  2410   00112C  0F8D               	addlw	low _dbuf
  2411   00112E  6ED9               	movwf	fsr2l,c
  2412   001130  6ADA               	clrf	fsr2h,c
  2413   001132  C01D  FFDF         	movff	dtoa@s,indf2
  2414   001136                     l2146:
  2415                           
  2416                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2417   001136  C015  F00E         	movff	dtoa@fp,pad@fp
  2418   00113A  501E               	movf	dtoa@i^0,w,c
  2419   00113C  0F8D               	addlw	low _dbuf
  2420   00113E  6E0F               	movwf	pad@buf^0,c
  2421   001140  C01B  F010         	movff	dtoa@w,pad@p
  2422   001144  C01C  F011         	movff	dtoa@w+1,pad@p+1
  2423   001148  EC68  F00B         	call	_pad	;wreg free
  2424   00114C  0012               	return		;funcret
  2425   00114E                     __end_of_dtoa:
  2426                           	callstack 0
  2427                           
  2428 ;; *************** function _pad *****************
  2429 ;; Defined at:
  2430 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  2433 ;;		 -> sprintf@f(12), 
  2434 ;;  buf             1   14[COMRAM] PTR unsigned char 
  2435 ;;		 -> dbuf(32), 
  2436 ;;  p               2   15[COMRAM] int 
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;  i               2   18[COMRAM] int 
  2439 ;; Return value:  Size  Location     Type
  2440 ;;                  1    wreg      void 
  2441 ;; Registers used:
  2442 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2443 ;; Tracked objects:
  2444 ;;		On entry : 0/0
  2445 ;;		On exit  : 0/0
  2446 ;;		Unchanged: 0/0
  2447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2448 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2449 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2451 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2452 ;;Total ram usage:        7 bytes
  2453 ;; Hardware stack levels used: 1
  2454 ;; Hardware stack levels required when called: 3
  2455 ;; This function calls:
  2456 ;;		_fputc
  2457 ;;		_fputs
  2458 ;; This function is called by:
  2459 ;;		_dtoa
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           	psect	text12
  2464   0016D0                     __ptext12:
  2465                           	callstack 0
  2466   0016D0                     _pad:
  2467                           	callstack 22
  2468   0016D0                     
  2469                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
=======
  4576   001A44  0E01               	movlw	1
  4577   001A46  6E1C               	movwf	dtoa@p^0,c
  4578   001A48                     
  4579                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  4580   001A48  BE19               	btfsc	(dtoa@d+1)^0,7,c
  4581   001A4A  EF29  F00D         	goto	u2191
  4582   001A4E  EF2C  F00D         	goto	u2190
  4583   001A52                     u2191:
  4584   001A52  0E01               	movlw	1
  4585   001A54  EF2D  F00D         	goto	u2200
  4586   001A58                     u2190:
  4587   001A58  0E00               	movlw	0
  4588   001A5A                     u2200:
  4589   001A5A  6E1F               	movwf	dtoa@s^0,c
  4590   001A5C                     
  4591                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  4592   001A5C  C164  F01D         	movff	_width,dtoa@w
  4593   001A60  C165  F01E         	movff	_width+1,dtoa@w+1
  4594   001A64                     
  4595                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  4596   001A64  501F               	movf	dtoa@s^0,w,c
  4597   001A66  B4D8               	btfsc	status,2,c
  4598   001A68  EF38  F00D         	goto	u2211
  4599   001A6C  EF3A  F00D         	goto	u2210
  4600   001A70                     u2211:
  4601   001A70  EF51  F00D         	goto	l1177
  4602   001A74                     u2210:
  4603   001A74                     
  4604                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  4605   001A74  061D               	decf	dtoa@w^0,f,c
  4606   001A76  A0D8               	btfss	status,0,c
  4607   001A78  061E               	decf	(dtoa@w+1)^0,f,c
  4608   001A7A                     
  4609                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  4610   001A7A  501F               	movf	dtoa@s^0,w,c
  4611   001A7C  A4D8               	btfss	status,2,c
  4612   001A7E  EF43  F00D         	goto	u2221
  4613   001A82  EF45  F00D         	goto	u2220
  4614   001A86                     u2221:
  4615   001A86  EF4B  F00D         	goto	l3295
  4616   001A8A                     u2220:
  4617   001A8A  0E00               	movlw	0
  4618   001A8C  6E1B               	movwf	(_dtoa$2524+1)^0,c
  4619   001A8E  0E2B               	movlw	43
  4620   001A90  6E1A               	movwf	_dtoa$2524^0,c
  4621   001A92  EF4F  F00D         	goto	l3297
  4622   001A96                     l3295:
  4623   001A96  0E00               	movlw	0
  4624   001A98  6E1B               	movwf	(_dtoa$2524+1)^0,c
  4625   001A9A  0E2D               	movlw	45
  4626   001A9C  6E1A               	movwf	_dtoa$2524^0,c
  4627   001A9E                     l3297:
  4628   001A9E  C01A  F01F         	movff	_dtoa$2524,dtoa@s
  4629   001AA2                     l1177:
  4630                           
  4631                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  4632   001AA2  0E00               	movlw	0
  4633   001AA4  6E21               	movwf	(dtoa@i+1)^0,c
  4634   001AA6  0E1F               	movlw	31
  4635   001AA8  6E20               	movwf	dtoa@i^0,c
  4636   001AAA                     
  4637                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  4638   001AAA  0E00               	movlw	0
  4639   001AAC  0101               	movlb	1	; () banked
  4640   001AAE  6F88               	movwf	(_dbuf+31)& (0+255),b
  4641                           
  4642                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  4643   001AB0  EF89  F00D         	goto	l3311
  4644   001AB4                     l3301:
  4645                           
  4646                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  4647   001AB4  0620               	decf	dtoa@i^0,f,c
  4648   001AB6  A0D8               	btfss	status,0,c
  4649   001AB8  0621               	decf	(dtoa@i+1)^0,f,c
  4650   001ABA                     
  4651                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  4652   001ABA  0E69               	movlw	low _dbuf
  4653   001ABC  2420               	addwf	dtoa@i^0,w,c
  4654   001ABE  6ED9               	movwf	fsr2l,c
  4655   001AC0  0E01               	movlw	high _dbuf
  4656   001AC2  2021               	addwfc	(dtoa@i+1)^0,w,c
  4657   001AC4  6EDA               	movwf	fsr2h,c
  4658   001AC6  C018  F001         	movff	dtoa@d,___awmod@dividend
  4659   001ACA  C019  F002         	movff	dtoa@d+1,___awmod@dividend+1
  4660   001ACE  0E00               	movlw	0
  4661   001AD0  6E04               	movwf	(___awmod@divisor+1)^0,c
  4662   001AD2  0E0A               	movlw	10
  4663   001AD4  6E03               	movwf	___awmod@divisor^0,c
  4664   001AD6  ECD2  F00F         	call	___awmod	;wreg free
  4665   001ADA  C001  F007         	movff	?___awmod,abs@a
  4666   001ADE  C002  F008         	movff	?___awmod+1,abs@a+1
  4667   001AE2  ECC3  F013         	call	_abs	;wreg free
  4668   001AE6  5007               	movf	?_abs^0,w,c
  4669   001AE8  0F30               	addlw	48
  4670   001AEA  6EDF               	movwf	indf2,c
  4671   001AEC                     
  4672                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  4673   001AEC  0E00               	movlw	0
  4674   001AEE  6E1C               	movwf	dtoa@p^0,c
  4675   001AF0                     
  4676                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  4677   001AF0  061D               	decf	dtoa@w^0,f,c
  4678   001AF2  A0D8               	btfss	status,0,c
  4679   001AF4  061E               	decf	(dtoa@w+1)^0,f,c
  4680   001AF6                     
  4681                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  4682   001AF6  C018  F001         	movff	dtoa@d,___awdiv@dividend
  4683   001AFA  C019  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  4684   001AFE  0E00               	movlw	0
  4685   001B00  6E04               	movwf	(___awdiv@divisor+1)^0,c
  4686   001B02  0E0A               	movlw	10
  4687   001B04  6E03               	movwf	___awdiv@divisor^0,c
  4688   001B06  EC70  F00F         	call	___awdiv	;wreg free
  4689   001B0A  C001  F018         	movff	?___awdiv,dtoa@d
  4690   001B0E  C002  F019         	movff	?___awdiv+1,dtoa@d+1
  4691   001B12                     l3311:
  4692                           
  4693                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  4694   001B12  BE21               	btfsc	(dtoa@i+1)^0,7,c
  4695   001B14  EF94  F00D         	goto	u2231
  4696   001B18  5021               	movf	(dtoa@i+1)^0,w,c
  4697   001B1A  E108               	bnz	u2230
  4698   001B1C  0420               	decf	dtoa@i^0,w,c
  4699   001B1E  A0D8               	btfss	status,0,c
  4700   001B20  EF94  F00D         	goto	u2231
  4701   001B24  EF96  F00D         	goto	u2230
  4702   001B28                     u2231:
  4703   001B28  EFBC  F00D         	goto	l3321
  4704   001B2C                     u2230:
  4705   001B2C  5018               	movf	dtoa@d^0,w,c
  4706   001B2E  1019               	iorwf	(dtoa@d+1)^0,w,c
  4707   001B30  A4D8               	btfss	status,2,c
  4708   001B32  EF9D  F00D         	goto	u2241
  4709   001B36  EF9F  F00D         	goto	u2240
  4710   001B3A                     u2241:
  4711   001B3A  EF5A  F00D         	goto	l3301
  4712   001B3E                     u2240:
  4713   001B3E  501C               	movf	dtoa@p^0,w,c
  4714   001B40  A4D8               	btfss	status,2,c
  4715   001B42  EFA5  F00D         	goto	u2251
  4716   001B46  EFA7  F00D         	goto	u2250
  4717   001B4A                     u2251:
  4718   001B4A  EF5A  F00D         	goto	l3301
  4719   001B4E                     u2250:
  4720   001B4E  BE1E               	btfsc	(dtoa@w+1)^0,7,c
  4721   001B50  EFB2  F00D         	goto	u2261
  4722   001B54  501E               	movf	(dtoa@w+1)^0,w,c
  4723   001B56  E108               	bnz	u2260
  4724   001B58  041D               	decf	dtoa@w^0,w,c
  4725   001B5A  A0D8               	btfss	status,0,c
  4726   001B5C  EFB2  F00D         	goto	u2261
  4727   001B60  EFB4  F00D         	goto	u2260
  4728   001B64                     u2261:
  4729   001B64  EFBC  F00D         	goto	l3321
  4730   001B68                     u2260:
  4731   001B68  0100               	movlb	0	; () banked
  4732   001B6A  B3FC               	btfsc	_flags& (0+255),1,b
  4733   001B6C  EFBA  F00D         	goto	u2271
  4734   001B70  EFBC  F00D         	goto	u2270
  4735   001B74                     u2271:
  4736   001B74  EF5A  F00D         	goto	l3301
  4737   001B78                     u2270:
  4738   001B78                     l3321:
  4739                           
  4740                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  4741   001B78  501F               	movf	dtoa@s^0,w,c
  4742   001B7A  B4D8               	btfsc	status,2,c
  4743   001B7C  EFC2  F00D         	goto	u2281
  4744   001B80  EFC4  F00D         	goto	u2280
  4745   001B84                     u2281:
  4746   001B84  EFCF  F00D         	goto	l3327
  4747   001B88                     u2280:
  4748   001B88                     
  4749                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  4750   001B88  0620               	decf	dtoa@i^0,f,c
  4751   001B8A  A0D8               	btfss	status,0,c
  4752   001B8C  0621               	decf	(dtoa@i+1)^0,f,c
  4753   001B8E                     
  4754                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  4755   001B8E  0E69               	movlw	low _dbuf
  4756   001B90  2420               	addwf	dtoa@i^0,w,c
  4757   001B92  6ED9               	movwf	fsr2l,c
  4758   001B94  0E01               	movlw	high _dbuf
  4759   001B96  2021               	addwfc	(dtoa@i+1)^0,w,c
  4760   001B98  6EDA               	movwf	fsr2h,c
  4761   001B9A  C01F  FFDF         	movff	dtoa@s,indf2
  4762   001B9E                     l3327:
  4763                           
  4764                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  4765   001B9E  C017  F00F         	movff	dtoa@fp,pad@fp
  4766   001BA2  0E69               	movlw	low _dbuf
  4767   001BA4  2420               	addwf	dtoa@i^0,w,c
  4768   001BA6  6E10               	movwf	pad@buf^0,c
  4769   001BA8  0E01               	movlw	high _dbuf
  4770   001BAA  2021               	addwfc	(dtoa@i+1)^0,w,c
  4771   001BAC  6E11               	movwf	(pad@buf+1)^0,c
  4772   001BAE  C01D  F012         	movff	dtoa@w,pad@p
  4773   001BB2  C01E  F013         	movff	dtoa@w+1,pad@p+1
  4774   001BB6  EC76  F011         	call	_pad	;wreg free
  4775   001BBA  0012               	return		;funcret
  4776   001BBC                     __end_of_dtoa:
  4777                           	callstack 0
  4778                           
  4779 ;; *************** function _pad *****************
  4780 ;; Defined at:
  4781 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  4784 ;;		 -> sprintf@f(12), 
  4785 ;;  buf             2   15[COMRAM] PTR unsigned char 
  4786 ;;		 -> dbuf(32), 
  4787 ;;  p               2   17[COMRAM] int 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  i               2   20[COMRAM] int 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      void 
  4792 ;; Registers used:
  4793 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4799 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4801 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4802 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4803 ;;Total ram usage:        8 bytes
  4804 ;; Hardware stack levels used: 1
  4805 ;; Hardware stack levels required when called: 3
  4806 ;; This function calls:
  4807 ;;		_fputc
  4808 ;;		_fputs
  4809 ;; This function is called by:
  4810 ;;		_dtoa
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           	psect	text21
  4815   0022EC                     __ptext21:
  4816                           	callstack 0
  4817   0022EC                     _pad:
  4818                           	callstack 22
  4819   0022EC                     
  4820                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
>>>>>>> Calibrating-Colors
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
<<<<<<< HEAD
  2470   0016D0  A05B               	btfss	_flags^0,0,c
  2471   0016D2  EF6D  F00B         	goto	u901
  2472   0016D6  EF6F  F00B         	goto	u900
  2473   0016DA                     u901:
  2474   0016DA  EF75  F00B         	goto	l2084
  2475   0016DE                     u900:
  2476   0016DE                     
  2477                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2478   0016DE  C00F  F009         	movff	pad@buf,fputs@s
  2479   0016E2  C00E  F00A         	movff	pad@fp,fputs@fp
  2480   0016E6  EC2A  F00D         	call	_fputs	;wreg free
  2481   0016EA                     l2084:
  2482                           
  2483                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2484   0016EA  BE11               	btfsc	(pad@p+1)^0,7,c
  2485   0016EC  EF7C  F00B         	goto	u910
  2486   0016F0  EF7A  F00B         	goto	u911
  2487   0016F4                     u911:
  2488   0016F4  EF80  F00B         	goto	l1106
  2489   0016F8                     u910:
  2490   0016F8                     
  2491                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2492   0016F8  0E00               	movlw	0
  2493   0016FA  6E11               	movwf	(pad@p+1)^0,c
  2494   0016FC  0E00               	movlw	0
  2495   0016FE  6E10               	movwf	pad@p^0,c
  2496   001700                     l1106:
  2497                           
  2498                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2499   001700  0E00               	movlw	0
  2500   001702  6E14               	movwf	(pad@i+1)^0,c
  2501   001704  0E00               	movlw	0
  2502   001706  6E13               	movwf	pad@i^0,c
  2503                           
  2504                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2505   001708  EF90  F00B         	goto	l2092
  2506   00170C                     l2088:
  2507                           
  2508                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2509   00170C  0E00               	movlw	0
  2510   00170E  6E02               	movwf	(fputc@c+1)^0,c
  2511   001710  0E20               	movlw	32
  2512   001712  6E01               	movwf	fputc@c^0,c
  2513   001714  C00E  F003         	movff	pad@fp,fputc@fp
  2514   001718  EC68  F009         	call	_fputc	;wreg free
  2515   00171C                     
  2516                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2517   00171C  4A13               	infsnz	pad@i^0,f,c
  2518   00171E  2A14               	incf	(pad@i+1)^0,f,c
  2519   001720                     l2092:
  2520                           
  2521                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2522   001720  5010               	movf	pad@p^0,w,c
  2523   001722  5C13               	subwf	pad@i^0,w,c
  2524   001724  5014               	movf	(pad@i+1)^0,w,c
  2525   001726  0A80               	xorlw	128
  2526   001728  6E12               	movwf	??_pad^0,c
  2527   00172A  5011               	movf	(pad@p+1)^0,w,c
  2528   00172C  0A80               	xorlw	128
  2529   00172E  5812               	subwfb	??_pad^0,w,c
  2530   001730  A0D8               	btfss	status,0,c
  2531   001732  EF9D  F00B         	goto	u921
  2532   001736  EF9F  F00B         	goto	u920
  2533   00173A                     u921:
  2534   00173A  EF86  F00B         	goto	l2088
  2535   00173E                     u920:
  2536   00173E                     
  2537                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2538   00173E  B05B               	btfsc	_flags^0,0,c
  2539   001740  EFA4  F00B         	goto	u931
  2540   001744  EFA6  F00B         	goto	u930
  2541   001748                     u931:
  2542   001748  EFAC  F00B         	goto	l1111
  2543   00174C                     u930:
  2544   00174C                     
  2545                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2546   00174C  C00F  F009         	movff	pad@buf,fputs@s
  2547   001750  C00E  F00A         	movff	pad@fp,fputs@fp
  2548   001754  EC2A  F00D         	call	_fputs	;wreg free
  2549   001758                     l1111:
  2550   001758  0012               	return		;funcret
  2551   00175A                     __end_of_pad:
  2552                           	callstack 0
  2553                           
  2554 ;; *************** function _fputs *****************
  2555 ;; Defined at:
  2556 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  s               1    8[COMRAM] PTR const unsigned char 
  2559 ;;		 -> dbuf(32), 
  2560 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  2561 ;;		 -> sprintf@f(12), 
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;  i               2   11[COMRAM] int 
  2564 ;;  c               1   10[COMRAM] unsigned char 
  2565 ;; Return value:  Size  Location     Type
  2566 ;;                  2    8[COMRAM] int 
  2567 ;; Registers used:
  2568 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2569 ;; Tracked objects:
  2570 ;;		On entry : 0/0
  2571 ;;		On exit  : 0/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2575 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2577 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2578 ;;Total ram usage:        5 bytes
  2579 ;; Hardware stack levels used: 1
  2580 ;; Hardware stack levels required when called: 2
  2581 ;; This function calls:
  2582 ;;		_fputc
  2583 ;; This function is called by:
  2584 ;;		_pad
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           	psect	text13
  2589   001A54                     __ptext13:
  2590                           	callstack 0
  2591   001A54                     _fputs:
  2592                           	callstack 22
  2593   001A54  0E00               	movlw	0
  2594   001A56  6E0D               	movwf	(fputs@i+1)^0,c
  2595   001A58  0E00               	movlw	0
  2596   001A5A  6E0C               	movwf	fputs@i^0,c
  2597   001A5C  EF39  F00D         	goto	l1992
  2598   001A60                     l1988:
  2599   001A60  C00B  F001         	movff	fputs@c,fputc@c
  2600   001A64  6A02               	clrf	(fputc@c+1)^0,c
  2601   001A66  C00A  F003         	movff	fputs@fp,fputc@fp
  2602   001A6A  EC68  F009         	call	_fputc	;wreg free
  2603   001A6E  4A0C               	infsnz	fputs@i^0,f,c
  2604   001A70  2A0D               	incf	(fputs@i+1)^0,f,c
  2605   001A72                     l1992:
  2606   001A72  5009               	movf	fputs@s^0,w,c
  2607   001A74  240C               	addwf	fputs@i^0,w,c
  2608   001A76  6ED9               	movwf	fsr2l,c
  2609   001A78  6ADA               	clrf	fsr2h,c
  2610   001A7A  50DF               	movf	indf2,w,c
  2611   001A7C  6E0B               	movwf	fputs@c^0,c
  2612   001A7E  500B               	movf	fputs@c^0,w,c
  2613   001A80  A4D8               	btfss	status,2,c
  2614   001A82  EF45  F00D         	goto	u771
  2615   001A86  EF47  F00D         	goto	u770
  2616   001A8A                     u771:
  2617   001A8A  EF30  F00D         	goto	l1988
  2618   001A8E                     u770:
  2619   001A8E  0012               	return		;funcret
  2620   001A90                     __end_of_fputs:
  2621                           	callstack 0
  2622                           
  2623 ;; *************** function _fputc *****************
  2624 ;; Defined at:
  2625 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;  c               2    0[COMRAM] int 
  2628 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2629 ;;		 -> sprintf@f(12), 
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;		None
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  2    0[COMRAM] int 
  2634 ;; Registers used:
  2635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2636 ;; Tracked objects:
  2637 ;;		On entry : 0/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2641 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2643 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2644 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2645 ;;Total ram usage:        8 bytes
  2646 ;; Hardware stack levels used: 1
  2647 ;; Hardware stack levels required when called: 1
  2648 ;; This function calls:
  2649 ;;		_putch
  2650 ;; This function is called by:
  2651 ;;		_pad
  2652 ;;		_vfpfcnvrt
  2653 ;;		_fputs
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           	psect	text14
  2658   0012D0                     __ptext14:
  2659                           	callstack 0
  2660   0012D0                     _fputc:
  2661                           	callstack 25
  2662   0012D0  5003               	movf	fputc@fp^0,w,c
  2663   0012D2  B4D8               	btfsc	status,2,c
  2664   0012D4  EF6E  F009         	goto	u731
  2665   0012D8  EF70  F009         	goto	u730
  2666   0012DC                     u731:
  2667   0012DC  EF78  F009         	goto	l1976
  2668   0012E0                     u730:
  2669   0012E0  5003               	movf	fputc@fp^0,w,c
  2670   0012E2  A4D8               	btfss	status,2,c
  2671   0012E4  EF76  F009         	goto	u741
  2672   0012E8  EF78  F009         	goto	u740
  2673   0012EC                     u741:
  2674   0012EC  EF7D  F009         	goto	l1978
  2675   0012F0                     u740:
  2676   0012F0                     l1976:
  2677   0012F0  5001               	movf	fputc@c^0,w,c
  2678   0012F2  EC3E  F00E         	call	_putch
  2679   0012F6  EFC4  F009         	goto	l1175
  2680   0012FA                     l1978:
  2681   0012FA  5003               	movf	fputc@fp^0,w,c
  2682   0012FC  6ED9               	movwf	fsr2l,c
  2683   0012FE  6ADA               	clrf	fsr2h,c
  2684   001300  0E0A               	movlw	10
  2685   001302  26D9               	addwf	fsr2l,f,c
  2686   001304  50DE               	movf	postinc2,w,c
  2687   001306  10DE               	iorwf	postinc2,w,c
  2688   001308  B4D8               	btfsc	status,2,c
  2689   00130A  EF89  F009         	goto	u751
  2690   00130E  EF8B  F009         	goto	u750
  2691   001312                     u751:
  2692   001312  EFA4  F009         	goto	l1982
  2693   001316                     u750:
  2694   001316  5003               	movf	fputc@fp^0,w,c
  2695   001318  6ED9               	movwf	fsr2l,c
  2696   00131A  6ADA               	clrf	fsr2h,c
  2697   00131C  0E0A               	movlw	10
  2698   00131E  26D9               	addwf	fsr2l,f,c
  2699   001320  5003               	movf	fputc@fp^0,w,c
  2700   001322  6EE1               	movwf	fsr1l,c
  2701   001324  6AE2               	clrf	fsr1h,c
  2702   001326  0E03               	movlw	3
  2703   001328  26E1               	addwf	fsr1l,f,c
  2704   00132A  50DE               	movf	postinc2,w,c
  2705   00132C  5CE6               	subwf	postinc1,w,c
  2706   00132E  50E6               	movf	postinc1,w,c
  2707   001330  0A80               	xorlw	128
  2708   001332  6E08               	movwf	(??_fputc+4)^0,c
  2709   001334  50DE               	movf	postinc2,w,c
  2710   001336  0A80               	xorlw	128
  2711   001338  5808               	subwfb	(??_fputc+4)^0,w,c
  2712   00133A  B0D8               	btfsc	status,0,c
  2713   00133C  EFA2  F009         	goto	u761
  2714   001340  EFA4  F009         	goto	u760
  2715   001344                     u761:
  2716   001344  EFC4  F009         	goto	l1175
  2717   001348                     u760:
  2718   001348                     l1982:
  2719   001348  5003               	movf	fputc@fp^0,w,c
  2720   00134A  6ED9               	movwf	fsr2l,c
  2721   00134C  6ADA               	clrf	fsr2h,c
  2722   00134E  0E03               	movlw	3
  2723   001350  26D9               	addwf	fsr2l,f,c
  2724   001352  CFDE F004          	movff	postinc2,??_fputc
  2725   001356  CFDD F005          	movff	postdec2,??_fputc+1
  2726   00135A  5003               	movf	fputc@fp^0,w,c
  2727   00135C  6ED9               	movwf	fsr2l,c
  2728   00135E  6ADA               	clrf	fsr2h,c
  2729   001360  CFDE F006          	movff	postinc2,??_fputc+2
  2730   001364  CFDD F007          	movff	postdec2,??_fputc+3
  2731   001368  5004               	movf	??_fputc^0,w,c
  2732   00136A  2406               	addwf	(??_fputc+2)^0,w,c
  2733   00136C  6ED9               	movwf	fsr2l,c
  2734   00136E  5005               	movf	(??_fputc+1)^0,w,c
  2735   001370  2007               	addwfc	(??_fputc+3)^0,w,c
  2736   001372  6EDA               	movwf	fsr2h,c
  2737   001374  C001  FFDF         	movff	fputc@c,indf2
  2738   001378  5003               	movf	fputc@fp^0,w,c
  2739   00137A  6ED9               	movwf	fsr2l,c
  2740   00137C  6ADA               	clrf	fsr2h,c
  2741   00137E  0E03               	movlw	3
  2742   001380  26D9               	addwf	fsr2l,f,c
  2743   001382  2ADE               	incf	postinc2,f,c
  2744   001384  0E00               	movlw	0
  2745   001386  22DD               	addwfc	postdec2,f,c
  2746   001388                     l1175:
  2747   001388  0012               	return		;funcret
  2748   00138A                     __end_of_fputc:
  2749                           	callstack 0
  2750                           
  2751 ;; *************** function _putch *****************
  2752 ;; Defined at:
  2753 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  c               1    wreg     unsigned char 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  c               1    0[COMRAM] unsigned char 
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  1    wreg      void 
  2760 ;; Registers used:
  2761 ;;		wreg
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2771 ;;Total ram usage:        0 bytes
  2772 ;; Hardware stack levels used: 1
  2773 ;; This function calls:
  2774 ;;		Nothing
  2775 ;; This function is called by:
  2776 ;;		_fputc
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           	psect	text15
  2781   001C7C                     __ptext15:
  2782                           	callstack 0
  2783   001C7C                     _putch:
  2784                           	callstack 25
  2785   001C7C  0012               	return		;funcret
  2786   001C7E                     __end_of_putch:
  2787                           	callstack 0
  2788                           
  2789 ;; *************** function _abs *****************
  2790 ;; Defined at:
  2791 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  a               2    6[COMRAM] int 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;		None
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  2    6[COMRAM] int 
  2798 ;; Registers used:
  2799 ;;		wreg, status,2, status,0
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2805 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2807 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2808 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2809 ;;Total ram usage:        4 bytes
  2810 ;; Hardware stack levels used: 1
  2811 ;; This function calls:
  2812 ;;		Nothing
  2813 ;; This function is called by:
  2814 ;;		_dtoa
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text16
  2819   001B02                     __ptext16:
  2820                           	callstack 0
  2821   001B02                     _abs:
  2822                           	callstack 25
  2823   001B02  BE08               	btfsc	(abs@a+1)^0,7,c
  2824   001B04  EF86  F00D         	goto	u941
  2825   001B08  EF88  F00D         	goto	u940
  2826   001B0C                     u941:
  2827   001B0C  EF8E  F00D         	goto	l1160
  2828   001B10                     u940:
  2829   001B10  C007  F007         	movff	abs@a,?_abs
  2830   001B14  C008  F008         	movff	abs@a+1,?_abs+1
  2831   001B18  EF9A  F00D         	goto	l1163
  2832   001B1C                     l1160:
  2833   001B1C  C007  F009         	movff	abs@a,??_abs
  2834   001B20  C008  F00A         	movff	abs@a+1,??_abs+1
  2835   001B24  1E09               	comf	??_abs^0,f,c
  2836   001B26  1E0A               	comf	(??_abs+1)^0,f,c
  2837   001B28  4A09               	infsnz	??_abs^0,f,c
  2838   001B2A  2A0A               	incf	(??_abs+1)^0,f,c
  2839   001B2C  C009  F007         	movff	??_abs,?_abs
  2840   001B30  C00A  F008         	movff	??_abs+1,?_abs+1
  2841   001B34                     l1163:
  2842   001B34  0012               	return		;funcret
  2843   001B36                     __end_of_abs:
  2844                           	callstack 0
  2845                           
  2846 ;; *************** function ___awmod *****************
  2847 ;; Defined at:
  2848 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  dividend        2    0[COMRAM] int 
  2851 ;;  divisor         2    2[COMRAM] int 
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;  sign            1    5[COMRAM] unsigned char 
  2854 ;;  counter         1    4[COMRAM] unsigned char 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  2    0[COMRAM] int 
  2857 ;; Registers used:
  2858 ;;		wreg, status,2, status,0
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2864 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2867 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2868 ;;Total ram usage:        6 bytes
  2869 ;; Hardware stack levels used: 1
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_dtoa
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text17
  2878   00143C                     __ptext17:
  2879                           	callstack 0
  2880   00143C                     ___awmod:
  2881                           	callstack 25
  2882   00143C  0E00               	movlw	0
  2883   00143E  6E06               	movwf	___awmod@sign^0,c
  2884   001440  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2885   001442  EF27  F00A         	goto	u840
  2886   001446  EF25  F00A         	goto	u841
  2887   00144A                     u841:
  2888   00144A  EF2D  F00A         	goto	l2052
  2889   00144E                     u840:
  2890   00144E  6C01               	negf	___awmod@dividend^0,c
  2891   001450  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2892   001452  B0D8               	btfsc	status,0,c
  2893   001454  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2894   001456  0E01               	movlw	1
  2895   001458  6E06               	movwf	___awmod@sign^0,c
  2896   00145A                     l2052:
  2897   00145A  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2898   00145C  EF34  F00A         	goto	u850
  2899   001460  EF32  F00A         	goto	u851
  2900   001464                     u851:
  2901   001464  EF38  F00A         	goto	l2056
  2902   001468                     u850:
  2903   001468  6C03               	negf	___awmod@divisor^0,c
  2904   00146A  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2905   00146C  B0D8               	btfsc	status,0,c
  2906   00146E  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2907   001470                     l2056:
  2908   001470  5003               	movf	___awmod@divisor^0,w,c
  2909   001472  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2910   001474  B4D8               	btfsc	status,2,c
  2911   001476  EF3F  F00A         	goto	u861
  2912   00147A  EF41  F00A         	goto	u860
  2913   00147E                     u861:
  2914   00147E  EF65  F00A         	goto	l2072
  2915   001482                     u860:
  2916   001482  0E01               	movlw	1
  2917   001484  6E05               	movwf	___awmod@counter^0,c
  2918   001486  EF49  F00A         	goto	l2062
  2919   00148A                     l2060:
  2920   00148A  90D8               	bcf	status,0,c
  2921   00148C  3603               	rlcf	___awmod@divisor^0,f,c
  2922   00148E  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2923   001490  2A05               	incf	___awmod@counter^0,f,c
  2924   001492                     l2062:
  2925   001492  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2926   001494  EF4E  F00A         	goto	u871
  2927   001498  EF50  F00A         	goto	u870
  2928   00149C                     u871:
  2929   00149C  EF45  F00A         	goto	l2060
  2930   0014A0                     u870:
  2931   0014A0                     l2064:
  2932   0014A0  5003               	movf	___awmod@divisor^0,w,c
  2933   0014A2  5C01               	subwf	___awmod@dividend^0,w,c
  2934   0014A4  5004               	movf	(___awmod@divisor+1)^0,w,c
  2935   0014A6  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2936   0014A8  A0D8               	btfss	status,0,c
  2937   0014AA  EF59  F00A         	goto	u881
  2938   0014AE  EF5B  F00A         	goto	u880
  2939   0014B2                     u881:
  2940   0014B2  EF5F  F00A         	goto	l2068
  2941   0014B6                     u880:
  2942   0014B6  5003               	movf	___awmod@divisor^0,w,c
  2943   0014B8  5E01               	subwf	___awmod@dividend^0,f,c
  2944   0014BA  5004               	movf	(___awmod@divisor+1)^0,w,c
  2945   0014BC  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2946   0014BE                     l2068:
  2947   0014BE  90D8               	bcf	status,0,c
  2948   0014C0  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2949   0014C2  3203               	rrcf	___awmod@divisor^0,f,c
  2950   0014C4  2E05               	decfsz	___awmod@counter^0,f,c
  2951   0014C6  EF50  F00A         	goto	l2064
  2952   0014CA                     l2072:
  2953   0014CA  5006               	movf	___awmod@sign^0,w,c
  2954   0014CC  B4D8               	btfsc	status,2,c
  2955   0014CE  EF6B  F00A         	goto	u891
  2956   0014D2  EF6D  F00A         	goto	u890
  2957   0014D6                     u891:
  2958   0014D6  EF71  F00A         	goto	l2076
  2959   0014DA                     u890:
  2960   0014DA  6C01               	negf	___awmod@dividend^0,c
  2961   0014DC  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2962   0014DE  B0D8               	btfsc	status,0,c
  2963   0014E0  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2964   0014E2                     l2076:
  2965   0014E2  C001  F001         	movff	___awmod@dividend,?___awmod
  2966   0014E6  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2967   0014EA  0012               	return		;funcret
  2968   0014EC                     __end_of___awmod:
  2969                           	callstack 0
  2970                           
  2971 ;; *************** function ___awdiv *****************
  2972 ;; Defined at:
  2973 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;  dividend        2    0[COMRAM] int 
  2976 ;;  divisor         2    2[COMRAM] int 
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;  quotient        2    6[COMRAM] int 
  2979 ;;  sign            1    5[COMRAM] unsigned char 
  2980 ;;  counter         1    4[COMRAM] unsigned char 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  2    0[COMRAM] int 
  2983 ;; Registers used:
  2984 ;;		wreg, status,2, status,0
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2991 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2993 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2994 ;;Total ram usage:        8 bytes
  2995 ;; Hardware stack levels used: 1
  2996 ;; This function calls:
  2997 ;;		Nothing
  2998 ;; This function is called by:
  2999 ;;		_dtoa
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text18
  3004   00114E                     __ptext18:
  3005                           	callstack 0
  3006   00114E                     ___awdiv:
  3007                           	callstack 25
  3008   00114E  0E00               	movlw	0
  3009   001150  6E06               	movwf	___awdiv@sign^0,c
  3010   001152  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  3011   001154  EFB0  F008         	goto	u780
  3012   001158  EFAE  F008         	goto	u781
  3013   00115C                     u781:
  3014   00115C  EFB6  F008         	goto	l2008
  3015   001160                     u780:
  3016   001160  6C03               	negf	___awdiv@divisor^0,c
  3017   001162  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  3018   001164  B0D8               	btfsc	status,0,c
  3019   001166  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  3020   001168  0E01               	movlw	1
  3021   00116A  6E06               	movwf	___awdiv@sign^0,c
  3022   00116C                     l2008:
  3023   00116C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  3024   00116E  EFBD  F008         	goto	u790
  3025   001172  EFBB  F008         	goto	u791
  3026   001176                     u791:
  3027   001176  EFC3  F008         	goto	l2014
  3028   00117A                     u790:
  3029   00117A  6C01               	negf	___awdiv@dividend^0,c
  3030   00117C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  3031   00117E  B0D8               	btfsc	status,0,c
  3032   001180  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  3033   001182  0E01               	movlw	1
  3034   001184  1A06               	xorwf	___awdiv@sign^0,f,c
  3035   001186                     l2014:
  3036   001186  0E00               	movlw	0
  3037   001188  6E08               	movwf	(___awdiv@quotient+1)^0,c
  3038   00118A  0E00               	movlw	0
  3039   00118C  6E07               	movwf	___awdiv@quotient^0,c
  3040   00118E  5003               	movf	___awdiv@divisor^0,w,c
  3041   001190  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  3042   001192  B4D8               	btfsc	status,2,c
  3043   001194  EFCE  F008         	goto	u801
  3044   001198  EFD0  F008         	goto	u800
  3045   00119C                     u801:
  3046   00119C  EFF8  F008         	goto	l2036
  3047   0011A0                     u800:
  3048   0011A0  0E01               	movlw	1
  3049   0011A2  6E05               	movwf	___awdiv@counter^0,c
  3050   0011A4  EFD8  F008         	goto	l2022
  3051   0011A8                     l2020:
  3052   0011A8  90D8               	bcf	status,0,c
  3053   0011AA  3603               	rlcf	___awdiv@divisor^0,f,c
  3054   0011AC  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  3055   0011AE  2A05               	incf	___awdiv@counter^0,f,c
  3056   0011B0                     l2022:
  3057   0011B0  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  3058   0011B2  EFDD  F008         	goto	u811
  3059   0011B6  EFDF  F008         	goto	u810
  3060   0011BA                     u811:
  3061   0011BA  EFD4  F008         	goto	l2020
  3062   0011BE                     u810:
  3063   0011BE                     l2024:
  3064   0011BE  90D8               	bcf	status,0,c
  3065   0011C0  3607               	rlcf	___awdiv@quotient^0,f,c
  3066   0011C2  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  3067   0011C4  5003               	movf	___awdiv@divisor^0,w,c
  3068   0011C6  5C01               	subwf	___awdiv@dividend^0,w,c
  3069   0011C8  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3070   0011CA  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  3071   0011CC  A0D8               	btfss	status,0,c
  3072   0011CE  EFEB  F008         	goto	u821
  3073   0011D2  EFED  F008         	goto	u820
  3074   0011D6                     u821:
  3075   0011D6  EFF2  F008         	goto	l2032
  3076   0011DA                     u820:
  3077   0011DA  5003               	movf	___awdiv@divisor^0,w,c
  3078   0011DC  5E01               	subwf	___awdiv@dividend^0,f,c
  3079   0011DE  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3080   0011E0  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  3081   0011E2  8007               	bsf	___awdiv@quotient^0,0,c
  3082   0011E4                     l2032:
  3083   0011E4  90D8               	bcf	status,0,c
  3084   0011E6  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  3085   0011E8  3203               	rrcf	___awdiv@divisor^0,f,c
  3086   0011EA  2E05               	decfsz	___awdiv@counter^0,f,c
  3087   0011EC  EFDF  F008         	goto	l2024
  3088   0011F0                     l2036:
  3089   0011F0  5006               	movf	___awdiv@sign^0,w,c
  3090   0011F2  B4D8               	btfsc	status,2,c
  3091   0011F4  EFFE  F008         	goto	u831
  3092   0011F8  EF00  F009         	goto	u830
  3093   0011FC                     u831:
  3094   0011FC  EF04  F009         	goto	l2040
  3095   001200                     u830:
  3096   001200  6C07               	negf	___awdiv@quotient^0,c
  3097   001202  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  3098   001204  B0D8               	btfsc	status,0,c
  3099   001206  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  3100   001208                     l2040:
  3101   001208  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3102   00120C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3103   001210  0012               	return		;funcret
  3104   001212                     __end_of___awdiv:
  3105                           	callstack 0
  3106                           
  3107 ;; *************** function ___lwdiv *****************
  3108 ;; Defined at:
  3109 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;  dividend        2    6[COMRAM] unsigned int 
  3112 ;;  divisor         2    8[COMRAM] unsigned int 
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  quotient        2   10[COMRAM] unsigned int 
  3115 ;;  counter         1   12[COMRAM] unsigned char 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  2    6[COMRAM] unsigned int 
  3118 ;; Registers used:
  3119 ;;		wreg, status,2, status,0
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3125 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3126 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3128 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3129 ;;Total ram usage:        7 bytes
  3130 ;; Hardware stack levels used: 1
  3131 ;; This function calls:
  3132 ;;		Nothing
  3133 ;; This function is called by:
  3134 ;;		_ADC2String
  3135 ;;		_setMotorPWM
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text19
  3140   0017E0                     __ptext19:
  3141                           	callstack 0
  3142   0017E0                     ___lwdiv:
  3143                           	callstack 27
  3144   0017E0  0E00               	movlw	0
  3145   0017E2  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  3146   0017E4  0E00               	movlw	0
  3147   0017E6  6E0B               	movwf	___lwdiv@quotient^0,c
  3148   0017E8  5009               	movf	___lwdiv@divisor^0,w,c
  3149   0017EA  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3150   0017EC  B4D8               	btfsc	status,2,c
  3151   0017EE  EFFB  F00B         	goto	u1161
  3152   0017F2  EFFD  F00B         	goto	u1160
  3153   0017F6                     u1161:
  3154   0017F6  EF25  F00C         	goto	l899
  3155   0017FA                     u1160:
  3156   0017FA  0E01               	movlw	1
  3157   0017FC  6E0D               	movwf	___lwdiv@counter^0,c
  3158   0017FE  EF05  F00C         	goto	l2258
  3159   001802                     l2256:
  3160   001802  90D8               	bcf	status,0,c
  3161   001804  3609               	rlcf	___lwdiv@divisor^0,f,c
  3162   001806  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3163   001808  2A0D               	incf	___lwdiv@counter^0,f,c
  3164   00180A                     l2258:
  3165   00180A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  3166   00180C  EF0A  F00C         	goto	u1171
  3167   001810  EF0C  F00C         	goto	u1170
  3168   001814                     u1171:
  3169   001814  EF01  F00C         	goto	l2256
  3170   001818                     u1170:
  3171   001818                     l2260:
  3172   001818  90D8               	bcf	status,0,c
  3173   00181A  360B               	rlcf	___lwdiv@quotient^0,f,c
  3174   00181C  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3175   00181E  5009               	movf	___lwdiv@divisor^0,w,c
  3176   001820  5C07               	subwf	___lwdiv@dividend^0,w,c
  3177   001822  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3178   001824  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3179   001826  A0D8               	btfss	status,0,c
  3180   001828  EF18  F00C         	goto	u1181
  3181   00182C  EF1A  F00C         	goto	u1180
  3182   001830                     u1181:
  3183   001830  EF1F  F00C         	goto	l2268
  3184   001834                     u1180:
  3185   001834  5009               	movf	___lwdiv@divisor^0,w,c
  3186   001836  5E07               	subwf	___lwdiv@dividend^0,f,c
  3187   001838  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3188   00183A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3189   00183C  800B               	bsf	___lwdiv@quotient^0,0,c
  3190   00183E                     l2268:
  3191   00183E  90D8               	bcf	status,0,c
  3192   001840  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3193   001842  3209               	rrcf	___lwdiv@divisor^0,f,c
  3194   001844  2E0D               	decfsz	___lwdiv@counter^0,f,c
  3195   001846  EF0C  F00C         	goto	l2260
  3196   00184A                     l899:
  3197   00184A  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  3198   00184E  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3199   001852  0012               	return		;funcret
  3200   001854                     __end_of___lwdiv:
  3201                           	callstack 0
  3202                           
  3203 ;; *************** function _color_read_Red *****************
  3204 ;; Defined at:
  3205 ;;		line 30 in file "color.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;		None
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  tmp             2    9[COMRAM] unsigned int 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  2    4[COMRAM] unsigned int 
  3212 ;; Registers used:
  3213 ;;		wreg, status,2, status,0, cstack
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3219 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3221 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3222 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3223 ;;Total ram usage:        7 bytes
  3224 ;; Hardware stack levels used: 1
  3225 ;; Hardware stack levels required when called: 2
  3226 ;; This function calls:
  3227 ;;		_I2C_2_Master_Read
  3228 ;;		_I2C_2_Master_RepStart
  3229 ;;		_I2C_2_Master_Start
  3230 ;;		_I2C_2_Master_Stop
  3231 ;;		_I2C_2_Master_Write
  3232 ;; This function is called by:
  3233 ;;		_test
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	text20
  3238   001854                     __ptext20:
  3239                           	callstack 0
  3240   001854                     _color_read_Red:
  3241                           	callstack 27
  3242   001854                     
  3243                           ;color.c: 32:  unsigned int tmp;;color.c: 33:  I2C_2_Master_Start();
  3244   001854  EC39  F00E         	call	_I2C_2_Master_Start	;wreg free
  3245                           
  3246                           ;color.c: 34:  I2C_2_Master_Write(0x52 | 0x00);
  3247   001858  0E52               	movlw	82
  3248   00185A  EC29  F00E         	call	_I2C_2_Master_Write
  3249                           
  3250                           ;color.c: 35:  I2C_2_Master_Write(0xA0 | 0x16);
  3251   00185E  0EB6               	movlw	182
  3252   001860  EC29  F00E         	call	_I2C_2_Master_Write
  3253                           
  3254                           ;color.c: 36:  I2C_2_Master_RepStart();
  3255   001864  EC2F  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  3256                           
  3257                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x01);
  3258   001868  0E53               	movlw	83
  3259   00186A  EC29  F00E         	call	_I2C_2_Master_Write
  3260                           
  3261                           ;color.c: 38:  tmp=I2C_2_Master_Read(1);
  3262   00186E  0E01               	movlw	1
  3263   001870  ECEB  F00C         	call	_I2C_2_Master_Read
  3264   001874  6E07               	movwf	??_color_read_Red^0,c
  3265   001876  5007               	movf	??_color_read_Red^0,w,c
  3266   001878  6E0A               	movwf	color_read_Red@tmp^0,c
  3267   00187A  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3268                           
  3269                           ;color.c: 39:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3270   00187C  0E00               	movlw	0
  3271   00187E  ECEB  F00C         	call	_I2C_2_Master_Read
  3272   001882  6E07               	movwf	??_color_read_Red^0,c
  3273   001884  5007               	movf	??_color_read_Red^0,w,c
  3274   001886  6E09               	movwf	(??_color_read_Red+2)^0,c
  3275   001888  6A08               	clrf	(??_color_read_Red+1)^0,c
  3276   00188A  500A               	movf	color_read_Red@tmp^0,w,c
  3277   00188C  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3278   00188E  6E0A               	movwf	color_read_Red@tmp^0,c
  3279   001890  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3280   001892  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3281   001894  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3282                           
  3283                           ;color.c: 40:  I2C_2_Master_Stop();
  3284   001896  EC34  F00E         	call	_I2C_2_Master_Stop	;wreg free
  3285   00189A                     
  3286                           ;color.c: 41:  return tmp;
  3287   00189A  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3288   00189E  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3289   0018A2  0012               	return		;funcret
  3290   0018A4                     __end_of_color_read_Red:
  3291                           	callstack 0
  3292                           
  3293 ;; *************** function _color_read_Green *****************
  3294 ;; Defined at:
  3295 ;;		line 44 in file "color.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;		None
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;  tmp             2    9[COMRAM] unsigned int 
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  2    4[COMRAM] unsigned int 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2, status,0, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3309 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3310 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3311 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3312 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3313 ;;Total ram usage:        7 bytes
  3314 ;; Hardware stack levels used: 1
  3315 ;; Hardware stack levels required when called: 2
  3316 ;; This function calls:
  3317 ;;		_I2C_2_Master_Read
  3318 ;;		_I2C_2_Master_RepStart
  3319 ;;		_I2C_2_Master_Start
  3320 ;;		_I2C_2_Master_Stop
  3321 ;;		_I2C_2_Master_Write
  3322 ;; This function is called by:
  3323 ;;		_test
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           	psect	text21
  3328   0018A4                     __ptext21:
  3329                           	callstack 0
  3330   0018A4                     _color_read_Green:
  3331                           	callstack 27
  3332   0018A4                     
  3333                           ;color.c: 46:  unsigned int tmp;;color.c: 47:  I2C_2_Master_Start();
  3334   0018A4  EC39  F00E         	call	_I2C_2_Master_Start	;wreg free
  3335                           
  3336                           ;color.c: 48:  I2C_2_Master_Write(0x52 | 0x00);
  3337   0018A8  0E52               	movlw	82
  3338   0018AA  EC29  F00E         	call	_I2C_2_Master_Write
  3339                           
  3340                           ;color.c: 49:  I2C_2_Master_Write(0xA0 | 0x18);
  3341   0018AE  0EB8               	movlw	184
  3342   0018B0  EC29  F00E         	call	_I2C_2_Master_Write
  3343                           
  3344                           ;color.c: 50:  I2C_2_Master_RepStart();
  3345   0018B4  EC2F  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  3346                           
  3347                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x01);
  3348   0018B8  0E53               	movlw	83
  3349   0018BA  EC29  F00E         	call	_I2C_2_Master_Write
  3350                           
  3351                           ;color.c: 52:  tmp=I2C_2_Master_Read(1);
  3352   0018BE  0E01               	movlw	1
  3353   0018C0  ECEB  F00C         	call	_I2C_2_Master_Read
  3354   0018C4  6E07               	movwf	??_color_read_Green^0,c
  3355   0018C6  5007               	movf	??_color_read_Green^0,w,c
  3356   0018C8  6E0A               	movwf	color_read_Green@tmp^0,c
  3357   0018CA  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3358                           
  3359                           ;color.c: 53:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3360   0018CC  0E00               	movlw	0
  3361   0018CE  ECEB  F00C         	call	_I2C_2_Master_Read
  3362   0018D2  6E07               	movwf	??_color_read_Green^0,c
  3363   0018D4  5007               	movf	??_color_read_Green^0,w,c
  3364   0018D6  6E09               	movwf	(??_color_read_Green+2)^0,c
  3365   0018D8  6A08               	clrf	(??_color_read_Green+1)^0,c
  3366   0018DA  500A               	movf	color_read_Green@tmp^0,w,c
  3367   0018DC  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3368   0018DE  6E0A               	movwf	color_read_Green@tmp^0,c
  3369   0018E0  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3370   0018E2  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3371   0018E4  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3372                           
  3373                           ;color.c: 54:  I2C_2_Master_Stop();
  3374   0018E6  EC34  F00E         	call	_I2C_2_Master_Stop	;wreg free
  3375   0018EA                     
  3376                           ;color.c: 55:  return tmp;
  3377   0018EA  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3378   0018EE  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3379   0018F2  0012               	return		;funcret
  3380   0018F4                     __end_of_color_read_Green:
  3381                           	callstack 0
  3382                           
  3383 ;; *************** function _color_read_Clear *****************
  3384 ;; Defined at:
  3385 ;;		line 73 in file "color.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;		None
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;  tmp             2    9[COMRAM] unsigned int 
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  2    4[COMRAM] unsigned int 
  3392 ;; Registers used:
  3393 ;;		wreg, status,2, status,0, cstack
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3399 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3400 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3401 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3402 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3403 ;;Total ram usage:        7 bytes
  3404 ;; Hardware stack levels used: 1
  3405 ;; Hardware stack levels required when called: 2
  3406 ;; This function calls:
  3407 ;;		_I2C_2_Master_Read
  3408 ;;		_I2C_2_Master_RepStart
  3409 ;;		_I2C_2_Master_Start
  3410 ;;		_I2C_2_Master_Stop
  3411 ;;		_I2C_2_Master_Write
  3412 ;; This function is called by:
  3413 ;;		_test
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text22
  3418   0018F4                     __ptext22:
  3419                           	callstack 0
  3420   0018F4                     _color_read_Clear:
  3421                           	callstack 27
  3422   0018F4                     
  3423                           ;color.c: 75:  unsigned int tmp;;color.c: 76:  I2C_2_Master_Start();
  3424   0018F4  EC39  F00E         	call	_I2C_2_Master_Start	;wreg free
  3425                           
  3426                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x00);
  3427   0018F8  0E52               	movlw	82
  3428   0018FA  EC29  F00E         	call	_I2C_2_Master_Write
  3429                           
  3430                           ;color.c: 78:  I2C_2_Master_Write(0xA0 | 0x14);
  3431   0018FE  0EB4               	movlw	180
  3432   001900  EC29  F00E         	call	_I2C_2_Master_Write
  3433                           
  3434                           ;color.c: 79:  I2C_2_Master_RepStart();
  3435   001904  EC2F  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  3436                           
  3437                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x01);
  3438   001908  0E53               	movlw	83
  3439   00190A  EC29  F00E         	call	_I2C_2_Master_Write
  3440                           
  3441                           ;color.c: 81:  tmp=I2C_2_Master_Read(1);
  3442   00190E  0E01               	movlw	1
  3443   001910  ECEB  F00C         	call	_I2C_2_Master_Read
  3444   001914  6E07               	movwf	??_color_read_Clear^0,c
  3445   001916  5007               	movf	??_color_read_Clear^0,w,c
  3446   001918  6E0A               	movwf	color_read_Clear@tmp^0,c
  3447   00191A  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3448                           
  3449                           ;color.c: 82:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3450   00191C  0E00               	movlw	0
  3451   00191E  ECEB  F00C         	call	_I2C_2_Master_Read
  3452   001922  6E07               	movwf	??_color_read_Clear^0,c
  3453   001924  5007               	movf	??_color_read_Clear^0,w,c
  3454   001926  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3455   001928  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3456   00192A  500A               	movf	color_read_Clear@tmp^0,w,c
  3457   00192C  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3458   00192E  6E0A               	movwf	color_read_Clear@tmp^0,c
  3459   001930  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3460   001932  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3461   001934  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3462                           
  3463                           ;color.c: 83:  I2C_2_Master_Stop();
  3464   001936  EC34  F00E         	call	_I2C_2_Master_Stop	;wreg free
  3465   00193A                     
  3466                           ;color.c: 84:  return tmp;
  3467   00193A  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3468   00193E  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3469   001942  0012               	return		;funcret
  3470   001944                     __end_of_color_read_Clear:
  3471                           	callstack 0
  3472                           
  3473 ;; *************** function _color_read_Blue *****************
  3474 ;; Defined at:
  3475 ;;		line 58 in file "color.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;  tmp             2    9[COMRAM] unsigned int 
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  2    4[COMRAM] unsigned int 
  3482 ;; Registers used:
  3483 ;;		wreg, status,2, status,0, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3489 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3490 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3491 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3492 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3493 ;;Total ram usage:        7 bytes
  3494 ;; Hardware stack levels used: 1
  3495 ;; Hardware stack levels required when called: 2
  3496 ;; This function calls:
  3497 ;;		_I2C_2_Master_Read
  3498 ;;		_I2C_2_Master_RepStart
  3499 ;;		_I2C_2_Master_Start
  3500 ;;		_I2C_2_Master_Stop
  3501 ;;		_I2C_2_Master_Write
  3502 ;; This function is called by:
  3503 ;;		_test
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text23
  3508   001944                     __ptext23:
  3509                           	callstack 0
  3510   001944                     _color_read_Blue:
  3511                           	callstack 27
  3512   001944                     
  3513                           ;color.c: 60:  unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
  3514   001944  EC39  F00E         	call	_I2C_2_Master_Start	;wreg free
  3515                           
  3516                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  3517   001948  0E52               	movlw	82
  3518   00194A  EC29  F00E         	call	_I2C_2_Master_Write
  3519                           
  3520                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x1A);
  3521   00194E  0EBA               	movlw	186
  3522   001950  EC29  F00E         	call	_I2C_2_Master_Write
  3523                           
  3524                           ;color.c: 64:  I2C_2_Master_RepStart();
  3525   001954  EC2F  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  3526                           
  3527                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  3528   001958  0E53               	movlw	83
  3529   00195A  EC29  F00E         	call	_I2C_2_Master_Write
  3530                           
  3531                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  3532   00195E  0E01               	movlw	1
  3533   001960  ECEB  F00C         	call	_I2C_2_Master_Read
  3534   001964  6E07               	movwf	??_color_read_Blue^0,c
  3535   001966  5007               	movf	??_color_read_Blue^0,w,c
  3536   001968  6E0A               	movwf	color_read_Blue@tmp^0,c
  3537   00196A  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3538                           
  3539                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3540   00196C  0E00               	movlw	0
  3541   00196E  ECEB  F00C         	call	_I2C_2_Master_Read
  3542   001972  6E07               	movwf	??_color_read_Blue^0,c
  3543   001974  5007               	movf	??_color_read_Blue^0,w,c
  3544   001976  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3545   001978  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3546   00197A  500A               	movf	color_read_Blue@tmp^0,w,c
  3547   00197C  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3548   00197E  6E0A               	movwf	color_read_Blue@tmp^0,c
  3549   001980  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3550   001982  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3551   001984  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3552                           
  3553                           ;color.c: 68:  I2C_2_Master_Stop();
  3554   001986  EC34  F00E         	call	_I2C_2_Master_Stop	;wreg free
  3555   00198A                     
  3556                           ;color.c: 69:  return tmp;
  3557   00198A  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3558   00198E  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3559   001992  0012               	return		;funcret
  3560   001994                     __end_of_color_read_Blue:
  3561                           	callstack 0
  3562                           
  3563 ;; *************** function _I2C_2_Master_RepStart *****************
  3564 ;; Defined at:
  3565 ;;		line 33 in file "i2c.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;		None
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;		None
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      void 
  3572 ;; Registers used:
  3573 ;;		wreg, status,2, status,0, cstack
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3583 ;;Total ram usage:        0 bytes
  3584 ;; Hardware stack levels used: 1
  3585 ;; Hardware stack levels required when called: 1
  3586 ;; This function calls:
  3587 ;;		_I2C_2_Master_Idle
  3588 ;; This function is called by:
  3589 ;;		_color_read_Red
  3590 ;;		_color_read_Green
  3591 ;;		_color_read_Blue
  3592 ;;		_color_read_Clear
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           	psect	text24
  3597   001C5E                     __ptext24:
  3598                           	callstack 0
  3599   001C5E                     _I2C_2_Master_RepStart:
  3600                           	callstack 27
  3601   001C5E                     
  3602                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3603   001C5E  ECCA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3604   001C62                     
  3605                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3606   001C62  010E               	movlb	14	; () banked
  3607   001C64  83DA               	bsf	218,1,b	;volatile
  3608   001C66                     
  3609                           ; BSR set to: 14
  3610   001C66  0012               	return		;funcret
  3611   001C68                     __end_of_I2C_2_Master_RepStart:
  3612                           	callstack 0
  3613                           
  3614 ;; *************** function _I2C_2_Master_Read *****************
  3615 ;; Defined at:
  3616 ;;		line 51 in file "i2c.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  ack             1    wreg     unsigned char 
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  ack             1    2[COMRAM] unsigned char 
  3621 ;;  tmp             1    3[COMRAM] unsigned char 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      unsigned char 
  3624 ;; Registers used:
  3625 ;;		wreg, status,2, status,0, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3632 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3633 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3634 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3635 ;;Total ram usage:        3 bytes
  3636 ;; Hardware stack levels used: 1
  3637 ;; Hardware stack levels required when called: 1
  3638 ;; This function calls:
  3639 ;;		_I2C_2_Master_Idle
  3640 ;; This function is called by:
  3641 ;;		_color_read_Red
  3642 ;;		_color_read_Green
  3643 ;;		_color_read_Blue
  3644 ;;		_color_read_Clear
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text25
  3649   0019D6                     __ptext25:
  3650                           	callstack 0
  3651   0019D6                     _I2C_2_Master_Read:
  3652                           	callstack 27
  3653                           
  3654                           ; BSR set to: 14
  3655                           ;incstack = 0
  3656                           ;I2C_2_Master_Read@ack stored from wreg
  3657   0019D6  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3658   0019D8                     
  3659                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3660   0019D8  ECCA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3661   0019DC                     
  3662                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3663   0019DC  010E               	movlb	14	; () banked
  3664   0019DE  87DA               	bsf	218,3,b	;volatile
  3665                           
  3666                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3667   0019E0  ECCA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3668   0019E4                     
  3669                           ;i2c.c: 57:   tmp = SSP2BUF;
  3670   0019E4  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3671                           
  3672                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3673   0019E8  ECCA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3674   0019EC                     
  3675                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3676   0019EC  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3677   0019EE  B4D8               	btfsc	status,2,c
  3678   0019F0  EFFC  F00C         	goto	u1191
  3679   0019F4  EF00  F00D         	goto	u1190
  3680   0019F8                     u1191:
  3681   0019F8  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3682   0019FA  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3683   0019FC  EF01  F00D         	goto	u1208
  3684   001A00                     u1190:
  3685   001A00  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3686   001A02                     u1208:
  3687   001A02  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3688   001A04  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3689   001A06  010E               	movlb	14	; () banked
  3690   001A08  51DA               	movf	218,w,b	;volatile
  3691   001A0A  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3692   001A0C  0BDF               	andlw	-33
  3693   001A0E  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3694   001A10  6FDA               	movwf	218,b	;volatile
  3695   001A12                     
  3696                           ; BSR set to: 14
  3697                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3698   001A12  89DA               	bsf	218,4,b	;volatile
  3699   001A14                     
  3700                           ; BSR set to: 14
  3701                           ;i2c.c: 61:   return tmp;
  3702   001A14  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3703   001A16                     
  3704                           ; BSR set to: 14
  3705   001A16  0012               	return		;funcret
  3706   001A18                     __end_of_I2C_2_Master_Read:
  3707                           	callstack 0
  3708                           
  3709 ;; *************** function _initUSART4 *****************
  3710 ;; Defined at:
  3711 ;;		line 14 in file "serial.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;		None
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;		None
  3716 ;; Return value:  Size  Location     Type
  3717 ;;                  1    wreg      void 
  3718 ;; Registers used:
  3719 ;;		wreg, status,2
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3729 ;;Total ram usage:        0 bytes
  3730 ;; Hardware stack levels used: 1
  3731 ;; This function calls:
  3732 ;;		Nothing
  3733 ;; This function is called by:
  3734 ;;		_main
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text26
  3739   001C02                     __ptext26:
  3740                           	callstack 0
  3741   001C02                     _initUSART4:
  3742                           	callstack 30
  3743   001C02                     
  3744                           ;serial.c: 15:     RC0PPS = 0x12;
  3745   001C02  0E12               	movlw	18
  3746   001C04  010E               	movlb	14	; () banked
  3747   001C06  6F62               	movwf	98,b	;volatile
  3748                           
  3749                           ;serial.c: 16:     RX4PPS = 0x11;
  3750   001C08  0E11               	movlw	17
  3751   001C0A  6F15               	movwf	21,b	;volatile
  3752   001C0C                     
  3753                           ; BSR set to: 14
  3754                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  3755   001C0C  97E9               	bcf	233,3,b	;volatile
  3756   001C0E                     
  3757                           ; BSR set to: 14
  3758                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  3759   001C0E  95E8               	bcf	232,2,b	;volatile
  3760                           
  3761                           ;serial.c: 19:     SP4BRGL = 51;
  3762   001C10  0E33               	movlw	51
  3763   001C12  6FE5               	movwf	229,b	;volatile
  3764                           
  3765                           ;serial.c: 20:     SP4BRGH = 0;
  3766   001C14  0E00               	movlw	0
  3767   001C16  6FE6               	movwf	230,b	;volatile
  3768   001C18                     
  3769                           ; BSR set to: 14
  3770                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  3771   001C18  89E7               	bsf	231,4,b	;volatile
  3772   001C1A                     
  3773                           ; BSR set to: 14
  3774                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  3775   001C1A  8BE8               	bsf	232,5,b	;volatile
  3776   001C1C                     
  3777                           ; BSR set to: 14
  3778                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  3779   001C1C  8FE7               	bsf	231,7,b	;volatile
  3780   001C1E                     
  3781                           ; BSR set to: 14
  3782   001C1E  0012               	return		;funcret
  3783   001C20                     __end_of_initUSART4:
  3784                           	callstack 0
  3785                           
  3786 ;; *************** function _initDCmotorsPWM *****************
  3787 ;; Defined at:
  3788 ;;		line 5 in file "dc_motor.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;		None
  3793 ;; Return value:  Size  Location     Type
  3794 ;;                  1    wreg      void 
  3795 ;; Registers used:
  3796 ;;		wreg, status,2
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/0
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3802 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3805 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3806 ;;Total ram usage:        2 bytes
  3807 ;; Hardware stack levels used: 1
  3808 ;; This function calls:
  3809 ;;		Nothing
  3810 ;; This function is called by:
  3811 ;;		_main
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815                           	psect	text27
  3816   001640                     __ptext27:
  3817                           	callstack 0
  3818   001640                     _initDCmotorsPWM:
  3819                           	callstack 30
  3820   001640                     
  3821                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  3822   001640  9485               	bcf	133,2,c	;volatile
  3823                           
  3824                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  3825   001642  9E83               	bcf	131,7,c	;volatile
  3826                           
  3827                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  3828   001644  9885               	bcf	133,4,c	;volatile
  3829                           
  3830                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  3831   001646  9C87               	bcf	135,6,c	;volatile
  3832                           
  3833                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  3834   001648  947D               	bcf	125,2,c	;volatile
  3835                           
  3836                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  3837   00164A  9E7B               	bcf	123,7,c	;volatile
  3838                           
  3839                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  3840   00164C  987D               	bcf	125,4,c	;volatile
  3841                           
  3842                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  3843   00164E  9C7F               	bcf	127,6,c	;volatile
  3844   001650                     
  3845                           ;dc_motor.c: 18:     RE2PPS=0x05;
  3846   001650  0E05               	movlw	5
  3847   001652  010E               	movlb	14	; () banked
  3848   001654  6F74               	movwf	116,b	;volatile
  3849                           
  3850                           ;dc_motor.c: 19:     RE4PPS=0x06;
  3851   001656  0E06               	movlw	6
  3852   001658  6F76               	movwf	118,b	;volatile
  3853                           
  3854                           ;dc_motor.c: 20:     RC7PPS=0x07;
  3855   00165A  0E07               	movlw	7
  3856   00165C  6F69               	movwf	105,b	;volatile
  3857                           
  3858                           ;dc_motor.c: 21:     RG6PPS=0x08;
  3859   00165E  0E08               	movlw	8
  3860   001660  6F88               	movwf	136,b	;volatile
  3861                           
  3862                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  3863   001662  50BD               	movf	189,w,c	;volatile
  3864   001664  0B8F               	andlw	-113
  3865   001666  0940               	iorlw	64
  3866   001668  6EBD               	movwf	189,c	;volatile
  3867                           
  3868                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  3869   00166A  0EE0               	movlw	-32
  3870   00166C  16BE               	andwf	190,f,c	;volatile
  3871                           
  3872                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  3873   00166E  50BF               	movf	191,w,c	;volatile
  3874   001670  0BF0               	andlw	-16
  3875   001672  0901               	iorlw	1
  3876   001674  6EBF               	movwf	191,c	;volatile
  3877   001676                     
  3878                           ; BSR set to: 14
  3879                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  3880   001676  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  3881   00167A                     
  3882                           ; BSR set to: 14
  3883                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  3884   00167A  8EBD               	bsf	189,7,c	;volatile
  3885                           
  3886                           ;dc_motor.c: 35:     CCPR1H=0;
  3887   00167C  0E00               	movlw	0
  3888   00167E  6EAA               	movwf	170,c	;volatile
  3889                           
  3890                           ;dc_motor.c: 36:     CCPR2H=0;
  3891   001680  0E00               	movlw	0
  3892   001682  6EA6               	movwf	166,c	;volatile
  3893                           
  3894                           ;dc_motor.c: 37:     CCPR3H=0;
  3895   001684  0E00               	movlw	0
  3896   001686  010F               	movlb	15	; () banked
  3897   001688  6F25               	movwf	37,b	;volatile
  3898                           
  3899                           ;dc_motor.c: 38:     CCPR4H=0;
  3900   00168A  0E00               	movlw	0
  3901   00168C  6F21               	movwf	33,b	;volatile
  3902                           
  3903                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  3904   00168E  0EFC               	movlw	-4
  3905   001690  16AD               	andwf	173,f,c	;volatile
  3906                           
  3907                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  3908   001692  0EF3               	movlw	-13
  3909   001694  16AD               	andwf	173,f,c	;volatile
  3910                           
  3911                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  3912   001696  0ECF               	movlw	-49
  3913   001698  16AD               	andwf	173,f,c	;volatile
  3914                           
  3915                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  3916   00169A  0E3F               	movlw	-193
  3917   00169C  16AD               	andwf	173,f,c	;volatile
  3918   00169E                     
  3919                           ; BSR set to: 15
  3920                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  3921   00169E  88AB               	bsf	171,4,c	;volatile
  3922                           
  3923                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  3924   0016A0  50AB               	movf	171,w,c	;volatile
  3925   0016A2  0BF0               	andlw	-16
  3926   0016A4  090C               	iorlw	12
  3927   0016A6  6EAB               	movwf	171,c	;volatile
  3928   0016A8                     
  3929                           ; BSR set to: 15
  3930                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  3931   0016A8  8EAB               	bsf	171,7,c	;volatile
  3932   0016AA                     
  3933                           ; BSR set to: 15
  3934                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  3935   0016AA  88A7               	bsf	167,4,c	;volatile
  3936                           
  3937                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  3938   0016AC  50A7               	movf	167,w,c	;volatile
  3939   0016AE  0BF0               	andlw	-16
  3940   0016B0  090C               	iorlw	12
  3941   0016B2  6EA7               	movwf	167,c	;volatile
  3942   0016B4                     
  3943                           ; BSR set to: 15
  3944                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  3945   0016B4  8EA7               	bsf	167,7,c	;volatile
  3946   0016B6                     
  3947                           ; BSR set to: 15
  3948                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  3949   0016B6  8926               	bsf	38,4,b	;volatile
  3950                           
  3951                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  3952   0016B8  5126               	movf	38,w,b	;volatile
  3953   0016BA  0BF0               	andlw	-16
  3954   0016BC  090C               	iorlw	12
  3955   0016BE  6F26               	movwf	38,b	;volatile
  3956   0016C0                     
  3957                           ; BSR set to: 15
  3958                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  3959   0016C0  8F26               	bsf	38,7,b	;volatile
  3960   0016C2                     
  3961                           ; BSR set to: 15
  3962                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  3963   0016C2  8922               	bsf	34,4,b	;volatile
  3964                           
  3965                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  3966   0016C4  5122               	movf	34,w,b	;volatile
  3967   0016C6  0BF0               	andlw	-16
  3968   0016C8  090C               	iorlw	12
  3969   0016CA  6F22               	movwf	34,b	;volatile
  3970   0016CC                     
  3971                           ; BSR set to: 15
  3972                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  3973   0016CC  8F22               	bsf	34,7,b	;volatile
  3974   0016CE                     
  3975                           ; BSR set to: 15
  3976   0016CE  0012               	return		;funcret
  3977   0016D0                     __end_of_initDCmotorsPWM:
  3978                           	callstack 0
  3979                           
  3980 ;; *************** function _color_click_init *****************
  3981 ;; Defined at:
  3982 ;;		line 6 in file "color.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;		None
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;		None
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  1    wreg      void 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0, cstack
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3999 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4000 ;;Total ram usage:        1 bytes
  4001 ;; Hardware stack levels used: 1
  4002 ;; Hardware stack levels required when called: 3
  4003 ;; This function calls:
  4004 ;;		_I2C_2_Master_Init
  4005 ;;		_color_writetoaddr
  4006 ;; This function is called by:
  4007 ;;		_main
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text28
  4012   001B36                     __ptext28:
  4013                           	callstack 0
  4014   001B36                     _color_click_init:
  4015                           	callstack 27
  4016   001B36                     
  4017                           ;color.c: 9:     I2C_2_Master_Init();
  4018   001B36  ECB5  F00D         	call	_I2C_2_Master_Init	;wreg free
  4019   001B3A                     
  4020                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  4021   001B3A  0E01               	movlw	1
  4022   001B3C  6E03               	movwf	color_writetoaddr@value^0,c
  4023   001B3E  0E00               	movlw	0
  4024   001B40  ECF1  F00D         	call	_color_writetoaddr
  4025   001B44                     
  4026                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4027   001B44  0E3F               	movlw	63
  4028   001B46  6E05               	movwf	??_color_click_init^0,c
  4029   001B48  0E55               	movlw	85
  4030   001B4A                     u1457:
  4031   001B4A  2EE8               	decfsz	wreg,f,c
  4032   001B4C  D7FE               	bra	u1457
  4033   001B4E  2E05               	decfsz	??_color_click_init^0,f,c
  4034   001B50  D7FC               	bra	u1457
  4035   001B52  0000               	nop	
  4036   001B54                     
  4037                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  4038   001B54  0E03               	movlw	3
  4039   001B56  6E03               	movwf	color_writetoaddr@value^0,c
  4040   001B58  0E00               	movlw	0
  4041   001B5A  ECF1  F00D         	call	_color_writetoaddr
  4042   001B5E                     
  4043                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  4044   001B5E  0ED5               	movlw	213
  4045   001B60  6E03               	movwf	color_writetoaddr@value^0,c
  4046   001B62  0E01               	movlw	1
  4047   001B64  ECF1  F00D         	call	_color_writetoaddr
  4048   001B68  0012               	return		;funcret
  4049   001B6A                     __end_of_color_click_init:
  4050                           	callstack 0
  4051                           
  4052 ;; *************** function _color_writetoaddr *****************
  4053 ;; Defined at:
  4054 ;;		line 22 in file "color.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  address         1    wreg     unsigned char 
  4057 ;;  value           1    2[COMRAM] unsigned char 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  address         1    3[COMRAM] unsigned char 
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  1    wreg      void 
  4062 ;; Registers used:
  4063 ;;		wreg, status,2, status,0, cstack
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4069 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4072 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4073 ;;Total ram usage:        2 bytes
  4074 ;; Hardware stack levels used: 1
  4075 ;; Hardware stack levels required when called: 2
  4076 ;; This function calls:
  4077 ;;		_I2C_2_Master_Start
  4078 ;;		_I2C_2_Master_Stop
  4079 ;;		_I2C_2_Master_Write
  4080 ;; This function is called by:
  4081 ;;		_color_click_init
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text29
  4086   001BE2                     __ptext29:
  4087                           	callstack 0
  4088   001BE2                     _color_writetoaddr:
  4089                           	callstack 27
  4090                           
  4091                           ;incstack = 0
  4092                           ;color_writetoaddr@address stored from wreg
  4093   001BE2  6E04               	movwf	color_writetoaddr@address^0,c
  4094   001BE4                     
  4095                           ;color.c: 23:     I2C_2_Master_Start();
  4096   001BE4  EC39  F00E         	call	_I2C_2_Master_Start	;wreg free
  4097                           
  4098                           ;color.c: 24:     I2C_2_Master_Write(0x52 | 0x00);
  4099   001BE8  0E52               	movlw	82
  4100   001BEA  EC29  F00E         	call	_I2C_2_Master_Write
  4101                           
  4102                           ;color.c: 25:     I2C_2_Master_Write(0x80 | address);
  4103   001BEE  5004               	movf	color_writetoaddr@address^0,w,c
  4104   001BF0  0980               	iorlw	128
  4105   001BF2  EC29  F00E         	call	_I2C_2_Master_Write
  4106                           
  4107                           ;color.c: 26:     I2C_2_Master_Write(value);
  4108   001BF6  5003               	movf	color_writetoaddr@value^0,w,c
  4109   001BF8  EC29  F00E         	call	_I2C_2_Master_Write
  4110                           
  4111                           ;color.c: 27:     I2C_2_Master_Stop();
  4112   001BFC  EC34  F00E         	call	_I2C_2_Master_Stop	;wreg free
  4113   001C00  0012               	return		;funcret
  4114   001C02                     __end_of_color_writetoaddr:
  4115                           	callstack 0
  4116                           
  4117 ;; *************** function _I2C_2_Master_Write *****************
  4118 ;; Defined at:
  4119 ;;		line 45 in file "i2c.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;  data_byte       1    wreg     unsigned char 
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;  data_byte       1    1[COMRAM] unsigned char 
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  1    wreg      void 
  4126 ;; Registers used:
  4127 ;;		wreg, status,2, status,0, cstack
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4134 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4136 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4137 ;;Total ram usage:        1 bytes
  4138 ;; Hardware stack levels used: 1
  4139 ;; Hardware stack levels required when called: 1
  4140 ;; This function calls:
  4141 ;;		_I2C_2_Master_Idle
  4142 ;; This function is called by:
  4143 ;;		_color_writetoaddr
  4144 ;;		_color_read_Red
  4145 ;;		_color_read_Green
  4146 ;;		_color_read_Blue
  4147 ;;		_color_read_Clear
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text30
  4152   001C52                     __ptext30:
  4153                           	callstack 0
  4154   001C52                     _I2C_2_Master_Write:
  4155                           	callstack 27
  4156                           
  4157                           ;incstack = 0
  4158                           ;I2C_2_Master_Write@data_byte stored from wreg
  4159   001C52  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  4160   001C54                     
  4161                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4162   001C54  ECCA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  4163   001C58                     
  4164                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4165   001C58  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4166   001C5C  0012               	return		;funcret
  4167   001C5E                     __end_of_I2C_2_Master_Write:
  4168                           	callstack 0
  4169                           
  4170 ;; *************** function _I2C_2_Master_Stop *****************
  4171 ;; Defined at:
  4172 ;;		line 39 in file "i2c.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;		None
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      void 
  4179 ;; Registers used:
  4180 ;;		wreg, status,2, status,0, cstack
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4190 ;;Total ram usage:        0 bytes
  4191 ;; Hardware stack levels used: 1
  4192 ;; Hardware stack levels required when called: 1
  4193 ;; This function calls:
  4194 ;;		_I2C_2_Master_Idle
  4195 ;; This function is called by:
  4196 ;;		_color_writetoaddr
  4197 ;;		_color_read_Red
  4198 ;;		_color_read_Green
  4199 ;;		_color_read_Blue
  4200 ;;		_color_read_Clear
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text31
  4205   001C68                     __ptext31:
  4206                           	callstack 0
  4207   001C68                     _I2C_2_Master_Stop:
  4208                           	callstack 27
  4209   001C68                     
  4210                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4211   001C68  ECCA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  4212   001C6C                     
  4213                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4214   001C6C  010E               	movlb	14	; () banked
  4215   001C6E  85DA               	bsf	218,2,b	;volatile
  4216   001C70                     
  4217                           ; BSR set to: 14
  4218   001C70  0012               	return		;funcret
  4219   001C72                     __end_of_I2C_2_Master_Stop:
  4220                           	callstack 0
  4221                           
  4222 ;; *************** function _I2C_2_Master_Start *****************
  4223 ;; Defined at:
  4224 ;;		line 27 in file "i2c.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;		None
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;		None
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		wreg, status,2, status,0, cstack
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4242 ;;Total ram usage:        0 bytes
  4243 ;; Hardware stack levels used: 1
  4244 ;; Hardware stack levels required when called: 1
  4245 ;; This function calls:
  4246 ;;		_I2C_2_Master_Idle
  4247 ;; This function is called by:
  4248 ;;		_color_writetoaddr
  4249 ;;		_color_read_Red
  4250 ;;		_color_read_Green
  4251 ;;		_color_read_Blue
  4252 ;;		_color_read_Clear
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text32
  4257   001C72                     __ptext32:
  4258                           	callstack 0
  4259   001C72                     _I2C_2_Master_Start:
  4260                           	callstack 27
  4261   001C72                     
  4262                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4263   001C72  ECCA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  4264   001C76                     
  4265                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4266   001C76  010E               	movlb	14	; () banked
  4267   001C78  81DA               	bsf	218,0,b	;volatile
  4268   001C7A                     
  4269                           ; BSR set to: 14
  4270   001C7A  0012               	return		;funcret
  4271   001C7C                     __end_of_I2C_2_Master_Start:
  4272                           	callstack 0
  4273                           
  4274 ;; *************** function _I2C_2_Master_Idle *****************
  4275 ;; Defined at:
  4276 ;;		line 22 in file "i2c.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;		None
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, status,2, status,0
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4294 ;;Total ram usage:        1 bytes
  4295 ;; Hardware stack levels used: 1
  4296 ;; This function calls:
  4297 ;;		Nothing
  4298 ;; This function is called by:
  4299 ;;		_I2C_2_Master_Start
  4300 ;;		_I2C_2_Master_RepStart
  4301 ;;		_I2C_2_Master_Stop
  4302 ;;		_I2C_2_Master_Write
  4303 ;;		_I2C_2_Master_Read
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text33
  4308   001B94                     __ptext33:
  4309                           	callstack 0
  4310   001B94                     _I2C_2_Master_Idle:
  4311                           	callstack 27
  4312   001B94                     l96:
  4313   001B94  010E               	movlb	14	; () banked
  4314   001B96  B5D8               	btfsc	216,2,b	;volatile
  4315   001B98  EFD0  F00D         	goto	u1131
  4316   001B9C  EFD2  F00D         	goto	u1130
  4317   001BA0                     u1131:
  4318   001BA0  EFCA  F00D         	goto	l96
  4319   001BA4                     u1130:
  4320   001BA4                     
  4321                           ; BSR set to: 14
  4322   001BA4  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4323   001BA8  0E1F               	movlw	31
  4324   001BAA  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4325   001BAC  A4D8               	btfss	status,2,c
  4326   001BAE  EFDB  F00D         	goto	u1141
  4327   001BB2  EFDD  F00D         	goto	u1140
  4328   001BB6                     u1141:
  4329   001BB6  EFCA  F00D         	goto	l96
  4330   001BBA                     u1140:
  4331   001BBA                     
  4332                           ; BSR set to: 14
  4333   001BBA  0012               	return		;funcret
  4334   001BBC                     __end_of_I2C_2_Master_Idle:
  4335                           	callstack 0
  4336                           
  4337 ;; *************** function _I2C_2_Master_Init *****************
  4338 ;; Defined at:
  4339 ;;		line 4 in file "i2c.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;		None
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;		None
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg, status,2
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4357 ;;Total ram usage:        0 bytes
  4358 ;; Hardware stack levels used: 1
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_color_click_init
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text34
  4367   001B6A                     __ptext34:
  4368                           	callstack 0
  4369   001B6A                     _I2C_2_Master_Init:
  4370                           	callstack 29
  4371   001B6A                     
  4372                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4373   001B6A  010E               	movlb	14	; () banked
  4374   001B6C  51D9               	movf	217,w,b	;volatile
  4375   001B6E  0BF0               	andlw	-16
  4376   001B70  0908               	iorlw	8
  4377   001B72  6FD9               	movwf	217,b	;volatile
  4378   001B74                     
  4379                           ; BSR set to: 14
  4380                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4381   001B74  8BD9               	bsf	217,5,b	;volatile
  4382                           
  4383                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4384   001B76  0E9F               	movlw	159
  4385   001B78  6FD6               	movwf	214,b	;volatile
  4386   001B7A                     
  4387                           ; BSR set to: 14
  4388                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4389   001B7A  8A84               	bsf	132,5,c	;volatile
  4390   001B7C                     
  4391                           ; BSR set to: 14
  4392                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4393   001B7C  8C84               	bsf	132,6,c	;volatile
  4394   001B7E                     
  4395                           ; BSR set to: 14
  4396                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4397   001B7E  9BA7               	bcf	167,5,b	;volatile
  4398   001B80                     
  4399                           ; BSR set to: 14
  4400                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4401   001B80  9DA7               	bcf	167,6,b	;volatile
  4402                           
  4403                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4404   001B82  0E1D               	movlw	29
  4405   001B84  6F1D               	movwf	29,b	;volatile
  4406                           
  4407                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4408   001B86  0E1E               	movlw	30
  4409   001B88  6F1C               	movwf	28,b	;volatile
  4410                           
  4411                           ;i2c.c: 18:   RD5PPS=0x1C;
  4412   001B8A  0E1C               	movlw	28
  4413   001B8C  6F6F               	movwf	111,b	;volatile
  4414                           
  4415                           ;i2c.c: 19:   RD6PPS=0x1B;
  4416   001B8E  0E1B               	movlw	27
  4417   001B90  6F70               	movwf	112,b	;volatile
  4418   001B92                     
  4419                           ; BSR set to: 14
  4420   001B92  0012               	return		;funcret
  4421   001B94                     __end_of_I2C_2_Master_Init:
  4422                           	callstack 0
  4423                           
  4424 ;; *************** function _ADC_init *****************
  4425 ;; Defined at:
  4426 ;;		line 9 in file "ADC.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;		None
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;		None
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg, status,2
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4444 ;;Total ram usage:        0 bytes
  4445 ;; Hardware stack levels used: 1
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_main
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           	psect	text35
  4454   001C20                     __ptext35:
  4455                           	callstack 0
  4456   001C20                     _ADC_init:
  4457                           	callstack 30
  4458   001C20                     
  4459                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  4460   001C20  8C86               	bsf	134,6,c	;volatile
  4461                           
  4462                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  4463   001C22  010E               	movlb	14	; () banked
  4464   001C24  8DB4               	bsf	180,6,b	;volatile
  4465                           
  4466                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  4467   001C26  010F               	movlb	15	; () banked
  4468   001C28  9958               	bcf	88,4,b	;volatile
  4469   001C2A                     
  4470                           ; BSR set to: 15
  4471                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  4472   001C2A  0EFC               	movlw	-4
  4473   001C2C  1758               	andwf	88,f,b	;volatile
  4474                           
  4475                           ;ADC.c: 17:     ADPCH=0b101110;
  4476   001C2E  0E2E               	movlw	46
  4477   001C30  6F5F               	movwf	95,b	;volatile
  4478   001C32                     
  4479                           ; BSR set to: 15
  4480                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  4481   001C32  9460               	bcf	96,2,c	;volatile
  4482   001C34                     
  4483                           ; BSR set to: 15
  4484                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  4485   001C34  8860               	bsf	96,4,c	;volatile
  4486   001C36                     
  4487                           ; BSR set to: 15
  4488                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  4489   001C36  8E60               	bsf	96,7,c	;volatile
  4490   001C38                     
  4491                           ; BSR set to: 15
  4492   001C38  0012               	return		;funcret
  4493   001C3A                     __end_of_ADC_init:
  4494                           	callstack 0
  4495                           
  4496                           	psect	rparam
  4497   000000                     
  4498                           	psect	config
  4499                           
  4500                           ;Config register CONFIG1L @ 0x300000
  4501                           ;	External Oscillator mode Selection bits
  4502                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  4503                           ;	Power-up default value for COSC bits
  4504                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  4505   300000                     	org	3145728
  4506   300000  AA                 	db	170
  4507                           
  4508                           ;Config register CONFIG1H @ 0x300001
  4509                           ;	unspecified, using default values
  4510                           ;	Clock Out Enable bit
  4511                           ;	CLKOUTEN = 0x1, unprogrammed default
  4512                           ;	Clock Switch Enable bit
  4513                           ;	CSWEN = 0x1, unprogrammed default
  4514                           ;	Fail-Safe Clock Monitor Enable bit
  4515                           ;	FCMEN = 0x1, unprogrammed default
  4516   300001                     	org	3145729
  4517   300001  FF                 	db	255
  4518                           
  4519                           ;Config register CONFIG3L @ 0x300004
  4520                           ;	WDT Period Select bits
  4521                           ;	WDTCPS = 0x1F, unprogrammed default
  4522                           ;	WDT operating mode
  4523                           ;	WDTE = OFF, WDT Disabled
  4524   300004                     	org	3145732
  4525   300004  9F                 	db	159
  4526                           
  4527                           ;Config register CONFIG3H @ 0x300005
  4528                           ;	unspecified, using default values
  4529                           ;	WDT Window Select bits
  4530                           ;	WDTCWS = 0x7, unprogrammed default
  4531                           ;	WDT input clock selector
  4532                           ;	WDTCCS = 0x7, unprogrammed default
  4533   300005                     	org	3145733
  4534   300005  FF                 	db	255
  4535                           tosu	equ	0xFFF
  4536                           tosh	equ	0xFFE
  4537                           tosl	equ	0xFFD
  4538                           stkptr	equ	0xFFC
  4539                           pclatu	equ	0xFFB
  4540                           pclath	equ	0xFFA
  4541                           pcl	equ	0xFF9
  4542                           tblptru	equ	0xFF8
  4543                           tblptrh	equ	0xFF7
  4544                           tblptrl	equ	0xFF6
  4545                           tablat	equ	0xFF5
  4546                           prodh	equ	0xFF4
  4547                           prodl	equ	0xFF3
  4548                           indf0	equ	0xFEF
  4549                           postinc0	equ	0xFEE
  4550                           postdec0	equ	0xFED
  4551                           preinc0	equ	0xFEC
  4552                           plusw0	equ	0xFEB
  4553                           fsr0h	equ	0xFEA
  4554                           fsr0l	equ	0xFE9
  4555                           wreg	equ	0xFE8
  4556                           indf1	equ	0xFE7
  4557                           postinc1	equ	0xFE6
  4558                           postdec1	equ	0xFE5
  4559                           preinc1	equ	0xFE4
  4560                           plusw1	equ	0xFE3
  4561                           fsr1h	equ	0xFE2
  4562                           fsr1l	equ	0xFE1
  4563                           bsr	equ	0xFE0
  4564                           indf2	equ	0xFDF
  4565                           postinc2	equ	0xFDE
  4566                           postdec2	equ	0xFDD
  4567                           preinc2	equ	0xFDC
  4568                           plusw2	equ	0xFDB
  4569                           fsr2h	equ	0xFDA
  4570                           fsr2l	equ	0xFD9
  4571                           status	equ	0xFD8
=======
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F67K40 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71   000000                     
    72                           	psect	idataCOMRAM
    73   0015BC                     __pidataCOMRAM:
    74                           	callstack 0
    75                           
    76                           ;initializer for _dataFlag
    77   0015BC  01                 	db	1
    78   000000                     _TX4REG	set	3812
    79   000000                     _RC4STAbits	set	3815
    80   000000                     _SP4BRGH	set	3814
    81   000000                     _TRISFbits	set	3974
    82   000000                     _TRISEbits	set	3973
    83   000000                     _TRISGbits	set	3975
    84   000000                     _CCPR2H	set	4006
    85   000000                     _CCPR1H	set	4010
    86   000000                     _SSP2CON2bits	set	3802
    87   000000                     _RX4PPS	set	3605
    88   000000                     _SSP2CLKPPS	set	3612
    89   000000                     _SSP2DATPPS	set	3613
    90   000000                     _ANSELDbits	set	3751
    91   000000                     _SSP2ADD	set	3798
    92   000000                     _SSP2CON1bits	set	3801
    93   000000                     _LATAbits	set	3961
    94   000000                     _LATEbits	set	3965
    95   000000                     _LATGbits	set	3967
    96   000000                     _TRISAbits	set	3969
    97   000000                     _TRISDbits	set	3972
    98   000000                     _LATCbits	set	3963
    99   000000                     _LATDbits	set	3964
   100   000000                     _RC4REG	set	3811
   101   000000                     _SP4BRGL	set	3813
   102   000000                     _TX4STAbits	set	3816
   103   000000                     _BAUD4CONbits	set	3817
   104   000000                     _SSP2CON2	set	3802
   105   000000                     _CCPR4H	set	3873
   106   000000                     _CCPR3H	set	3877
   107   000000                     _SSP2STAT	set	3800
   108   000000                     _ANSELFbits	set	3764
   109   000000                     _SSP2BUF	set	3797
   110   000000                     _PIE4bits	set	3629
   111   000000                     _PIR4bits	set	3639
   112   000000                     _RC0PPS	set	3682
   113   000000                     _RC7PPS	set	3689
   114   000000                     _RD5PPS	set	3695
   115   000000                     _RE2PPS	set	3700
   116   000000                     _RD6PPS	set	3696
   117   000000                     _CCP1CONbits	set	4011
   118   000000                     _CCPTMRS0bits	set	4013
   119   000000                     _T2PR	set	4028
   120   000000                     _T2CONbits	set	4029
   121   000000                     _CCP2CONbits	set	4007
   122   000000                     _CCP3CONbits	set	3878
   123   000000                     _ADREFbits	set	3928
   124   000000                     _CCP4CONbits	set	3874
   125   000000                     _PORTFbits	set	3982
   126   000000                     _TRISCbits	set	3971
   127   000000                     _ADPCH	set	3935
   128   000000                     _ADRESH	set	3940
   129   000000                     _ADCON0bits	set	3936
   130   000000                     _RE4PPS	set	3702
   131   000000                     _RG6PPS	set	3720
   132   000000                     _T2CLKCONbits	set	4031
   133   000000                     _T2HLTbits	set	4030
   134                           
   135                           	psect	smallconst
   136   000E00                     __psmallconst:
   137                           	callstack 0
   138   000E00  00                 	db	0
   139   000E01                     
   140                           ; BSR set to: 15
   141   000E01  56                 	db	86	;'V'
   142   000E02  6F                 	db	111	;'o'
   143   000E03  6C                 	db	108	;'l'
   144   000E04  74                 	db	116	;'t'
   145   000E05  61                 	db	97	;'a'
   146   000E06  67                 	db	103	;'g'
   147   000E07  65                 	db	101	;'e'
   148   000E08  20                 	db	32
   149   000E09  3D                 	db	61	;'='
   150   000E0A  20                 	db	32
   151   000E0B  25                 	db	37
   152   000E0C  64                 	db	100	;'d'
   153   000E0D  2E                 	db	46
   154   000E0E  25                 	db	37
   155   000E0F  30                 	db	48	;'0'
   156   000E10  32                 	db	50	;'2'
   157   000E11  64                 	db	100	;'d'
   158   000E12  2C                 	db	44
   159   000E13  20                 	db	32
   160   000E14  20                 	db	32
   161   000E15  00                 	db	0
   162   000E16                     
   163                           ; BSR set to: 15
   164   000E16  47                 	db	71	;'G'
   165   000E17  72                 	db	114	;'r'
   166   000E18  65                 	db	101	;'e'
   167   000E19  65                 	db	101	;'e'
   168   000E1A  6E                 	db	110	;'n'
   169   000E1B  5F                 	db	95	;'_'
   170   000E1C  6C                 	db	108	;'l'
   171   000E1D  69                 	db	105	;'i'
   172   000E1E  67                 	db	103	;'g'
   173   000E1F  68                 	db	104	;'h'
   174   000E20  74                 	db	116	;'t'
   175   000E21  3D                 	db	61	;'='
   176   000E22  25                 	db	37
   177   000E23  64                 	db	100	;'d'
   178   000E24  2C                 	db	44
   179   000E25  20                 	db	32
   180   000E26  0A                 	db	10
   181   000E27  0D                 	db	13
   182   000E28  00                 	db	0
   183   000E29                     
   184                           ; BSR set to: 15
   185   000E29  43                 	db	67	;'C'
   186   000E2A  6C                 	db	108	;'l'
   187   000E2B  65                 	db	101	;'e'
   188   000E2C  61                 	db	97	;'a'
   189   000E2D  72                 	db	114	;'r'
   190   000E2E  3D                 	db	61	;'='
   191   000E2F  25                 	db	37
   192   000E30  30                 	db	48	;'0'
   193   000E31  35                 	db	53	;'5'
   194   000E32  64                 	db	100	;'d'
   195   000E33  2C                 	db	44
   196   000E34  20                 	db	32
   197   000E35  20                 	db	32
   198   000E36  0A                 	db	10
   199   000E37  0A                 	db	10
   200   000E38  0D                 	db	13
   201   000E39  00                 	db	0
   202   000E3A                     
   203                           ; BSR set to: 15
   204   000E3A  52                 	db	82	;'R'
   205   000E3B  65                 	db	101	;'e'
   206   000E3C  64                 	db	100	;'d'
   207   000E3D  5F                 	db	95	;'_'
   208   000E3E  6C                 	db	108	;'l'
   209   000E3F  69                 	db	105	;'i'
   210   000E40  67                 	db	103	;'g'
   211   000E41  68                 	db	104	;'h'
   212   000E42  74                 	db	116	;'t'
   213   000E43  3D                 	db	61	;'='
   214   000E44  25                 	db	37
   215   000E45  64                 	db	100	;'d'
   216   000E46  2C                 	db	44
   217   000E47  20                 	db	32
   218   000E48  0A                 	db	10
   219   000E49  0D                 	db	13
   220   000E4A  00                 	db	0
   221   000E4B                     
   222                           ; BSR set to: 15
   223   000E4B  41                 	db	65	;'A'
   224   000E4C  6C                 	db	108	;'l'
   225   000E4D  6C                 	db	108	;'l'
   226   000E4E  5F                 	db	95	;'_'
   227   000E4F  6C                 	db	108	;'l'
   228   000E50  69                 	db	105	;'i'
   229   000E51  67                 	db	103	;'g'
   230   000E52  68                 	db	104	;'h'
   231   000E53  74                 	db	116	;'t'
   232   000E54  73                 	db	115	;'s'
   233   000E55  3D                 	db	61	;'='
   234   000E56  25                 	db	37
   235   000E57  64                 	db	100	;'d'
   236   000E58  20                 	db	32
   237   000E59  0A                 	db	10
   238   000E5A  0D                 	db	13
   239   000E5B  00                 	db	0
   240   000E5C                     
   241                           ; BSR set to: 15
   242   000E5C  42                 	db	66	;'B'
   243   000E5D  6C                 	db	108	;'l'
   244   000E5E  75                 	db	117	;'u'
   245   000E5F  65                 	db	101	;'e'
   246   000E60  5F                 	db	95	;'_'
   247   000E61  6C                 	db	108	;'l'
   248   000E62  69                 	db	105	;'i'
   249   000E63  67                 	db	103	;'g'
   250   000E64  68                 	db	104	;'h'
   251   000E65  74                 	db	116	;'t'
   252   000E66  3D                 	db	61	;'='
   253   000E67  25                 	db	37
   254   000E68  64                 	db	100	;'d'
   255   000E69  20                 	db	32
   256   000E6A  0A                 	db	10
   257   000E6B  0D                 	db	13
   258   000E6C  00                 	db	0
   259   000E6D                     
   260                           ; BSR set to: 15
   261   000E6D  47                 	db	71	;'G'
   262   000E6E  72                 	db	114	;'r'
   263   000E6F  65                 	db	101	;'e'
   264   000E70  65                 	db	101	;'e'
   265   000E71  6E                 	db	110	;'n'
   266   000E72  3D                 	db	61	;'='
   267   000E73  25                 	db	37
   268   000E74  30                 	db	48	;'0'
   269   000E75  35                 	db	53	;'5'
   270   000E76  64                 	db	100	;'d'
   271   000E77  2C                 	db	44
   272   000E78  20                 	db	32
   273   000E79  20                 	db	32
   274   000E7A  00                 	db	0
   275   000E7B                     
   276                           ; BSR set to: 15
   277   000E7B  42                 	db	66	;'B'
   278   000E7C  6C                 	db	108	;'l'
   279   000E7D  75                 	db	117	;'u'
   280   000E7E  65                 	db	101	;'e'
   281   000E7F  3D                 	db	61	;'='
   282   000E80  25                 	db	37
   283   000E81  30                 	db	48	;'0'
   284   000E82  35                 	db	53	;'5'
   285   000E83  64                 	db	100	;'d'
   286   000E84  2C                 	db	44
   287   000E85  20                 	db	32
   288   000E86  20                 	db	32
   289   000E87  00                 	db	0
   290   000E88                     
   291                           ; BSR set to: 15
   292   000E88  52                 	db	82	;'R'
   293   000E89  65                 	db	101	;'e'
   294   000E8A  64                 	db	100	;'d'
   295   000E8B  3D                 	db	61	;'='
   296   000E8C  25                 	db	37
   297   000E8D  30                 	db	48	;'0'
   298   000E8E  35                 	db	53	;'5'
   299   000E8F  64                 	db	100	;'d'
   300   000E90  2C                 	db	44
   301   000E91  20                 	db	32
   302   000E92  20                 	db	32
   303   000E93  00                 	db	0
   304   000E94  00                 	db	0	; dummy byte at the end
   305   000000                     
   306                           ; #config settings
   307                           
   308                           	psect	cinit
   309   0013CA                     __pcinit:
   310                           	callstack 0
   311   0013CA                     start_initialization:
   312                           	callstack 0
   313   0013CA                     __initialization:
   314                           	callstack 0
   315                           
   316                           ; Initialize objects allocated to COMRAM (1 bytes)
   317                           ; load TBLPTR registers with __pidataCOMRAM
   318   0013CA  0EBC               	movlw	low __pidataCOMRAM
   319   0013CC  6EF6               	movwf	tblptrl,c
   320   0013CE  0E15               	movlw	high __pidataCOMRAM
   321   0013D0  6EF7               	movwf	tblptrh,c
   322   0013D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   323   0013D4  6EF8               	movwf	tblptru,c
   324   0013D6  0009               	tblrd		*+	;fetch initializer
   325   0013D8  CFF5 F04D          	movff	tablat,__pdataCOMRAM
   326                           
   327                           ; Clear objects allocated to BANK0 (80 bytes)
   328   0013DC  EE00  F060         	lfsr	0,__pbssBANK0
   329   0013E0  0E50               	movlw	80
   330   0013E2                     clear_0:
   331   0013E2  6AEE               	clrf	postinc0,c
   332   0013E4  06E8               	decf	wreg,f,c
   333   0013E6  E1FD               	bnz	clear_0
   334                           
   335                           ; Clear objects allocated to COMRAM (43 bytes)
   336   0013E8  EE00  F001         	lfsr	0,__pbssCOMRAM
   337   0013EC  0E2B               	movlw	43
   338   0013EE                     clear_1:
   339   0013EE  6AEE               	clrf	postinc0,c
   340   0013F0  06E8               	decf	wreg,f,c
   341   0013F2  E1FD               	bnz	clear_1
   342   0013F4                     end_of_initialization:
   343                           	callstack 0
   344   0013F4                     __end_of__initialization:
   345                           	callstack 0
   346   0013F4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   347   0013F6  6EF8               	movwf	tblptru,c
   348   0013F8  0E0E               	movlw	high __Lsmallconst
   349   0013FA  6EF7               	movwf	tblptrh,c
   350   0013FC  0100               	movlb	0
   351   0013FE  EFF5  F007         	goto	_main	;jump to C main() function
   352                           
   353                           	psect	bssCOMRAM
   354   000001                     __pbssCOMRAM:
   355                           	callstack 0
   356   000001                     _EUSART4RXbuf:
   357                           	callstack 0
   358   000001                     	ds	20
   359   000015                     _readingIndex:
   360                           	callstack 0
   361   000015                     	ds	1
   362   000016                     _TxBufReadCnt:
   363                           	callstack 0
   364   000016                     	ds	1
   365   000017                     _TxBufWriteCnt:
   366                           	callstack 0
   367   000017                     	ds	1
   368   000018                     _RxBufReadCnt:
   369                           	callstack 0
   370   000018                     	ds	1
   371   000019                     _RxBufWriteCnt:
   372                           	callstack 0
   373   000019                     	ds	1
   374   00001A                     _motorR:
   375                           	callstack 0
   376   00001A                     	ds	9
   377   000023                     _motorL:
   378                           	callstack 0
   379   000023                     	ds	9
   380                           
   381                           	psect	dataCOMRAM
   382   00004D                     __pdataCOMRAM:
   383                           	callstack 0
   384   00004D                     _dataFlag:
   385                           	callstack 0
   386   00004D                     	ds	1
   387                           
   388                           	psect	bssBANK0
   389   000060                     __pbssBANK0:
   390                           	callstack 0
   391   000060                     _EUSART4TXbuf:
   392                           	callstack 0
   393   000060                     	ds	60
   394   00009C                     _ldrReadings:
   395                           	callstack 0
   396   00009C                     	ds	20
   397                           
   398                           	psect	cstackCOMRAM
   399   00002C                     __pcstackCOMRAM:
   400                           	callstack 0
   401   00002C                     ??_I2C_2_Master_Idle:
   402   00002C                     ?___wmul:
   403                           	callstack 0
   404   00002C                     initDCmotorsPWM@PWMperiod:
   405                           	callstack 0
   406   00002C                     ___wmul@multiplier:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x0
   410   00002C                     	ds	1
   411   00002D                     I2C_2_Master_Write@data_byte:
   412                           	callstack 0
   413                           
   414                           ; 1 bytes @ 0x1
   415   00002D                     	ds	1
   416   00002E                     color_writetoaddr@value:
   417                           	callstack 0
   418   00002E                     ___wmul@multiplicand:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0x2
   422   00002E                     	ds	1
   423   00002F                     color_writetoaddr@address:
   424                           	callstack 0
   425                           
   426                           ; 1 bytes @ 0x3
   427   00002F                     	ds	1
   428   000030                     ??_color_click_init:
   429   000030                     ___wmul@product:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x4
   433   000030                     	ds	2
   434   000032                     ?___lwdiv:
   435                           	callstack 0
   436   000032                     ___lwdiv@dividend:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x6
   440   000032                     	ds	2
   441   000034                     ___lwdiv@divisor:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x8
   445   000034                     	ds	2
   446   000036                     ___lwdiv@quotient:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0xA
   450   000036                     	ds	2
   451   000038                     ___lwdiv@counter:
   452                           	callstack 0
   453                           
   454                           ; 1 bytes @ 0xC
   455   000038                     	ds	1
   456   000039                     setMotorPWM@m:
   457                           	callstack 0
   458                           
   459                           ; 1 bytes @ 0xD
   460   000039                     	ds	1
   461   00003A                     ??_setMotorPWM:
   462                           
   463                           ; 1 bytes @ 0xE
   464   00003A                     	ds	2
   465   00003C                     setMotorPWM@posDuty:
   466                           	callstack 0
   467                           
   468                           ; 1 bytes @ 0x10
   469   00003C                     	ds	1
   470   00003D                     setMotorPWM@negDuty:
   471                           	callstack 0
   472                           
   473                           ; 1 bytes @ 0x11
   474   00003D                     	ds	1
   475   00003E                     stop@mL:
   476                           	callstack 0
   477   00003E                     turnLeft@mL:
   478                           	callstack 0
   479   00003E                     fullSpeedAhead@mL:
   480                           	callstack 0
   481   00003E                     fullSpeedBack@mL:
   482                           	callstack 0
   483                           
   484                           ; 1 bytes @ 0x12
   485   00003E                     	ds	1
   486   00003F                     stop@mR:
   487                           	callstack 0
   488   00003F                     turnLeft@mR:
   489                           	callstack 0
   490   00003F                     fullSpeedAhead@mR:
   491                           	callstack 0
   492   00003F                     fullSpeedBack@mR:
   493                           	callstack 0
   494                           
   495                           ; 1 bytes @ 0x13
   496   00003F                     	ds	1
   497   000040                     ??_fullSpeedAhead:
   498   000040                     ??_stop:
   499   000040                     ??_turnLeft:
   500   000040                     ??_fullSpeedBack:
   501                           
   502                           ; 1 bytes @ 0x14
   503   000040                     	ds	1
   504   000041                     turnLeft@i:
   505                           	callstack 0
   506   000041                     fullSpeedAhead@power:
   507                           	callstack 0
   508   000041                     fullSpeedBack@power:
   509                           	callstack 0
   510                           
   511                           ; 2 bytes @ 0x15
   512   000041                     	ds	2
   513   000043                     left90@mL:
   514                           	callstack 0
   515   000043                     backOneAndHalf@mL:
   516                           	callstack 0
   517                           
   518                           ; 1 bytes @ 0x17
   519   000043                     	ds	1
   520   000044                     left90@mR:
   521                           	callstack 0
   522   000044                     backOneAndHalf@mR:
   523                           	callstack 0
   524                           
   525                           ; 1 bytes @ 0x18
   526   000044                     	ds	1
   527   000045                     ??_left90:
   528   000045                     ??_backOneAndHalf:
   529                           
   530                           ; 1 bytes @ 0x19
   531   000045                     	ds	2
   532   000047                     movePink@mL:
   533                           	callstack 0
   534                           
   535                           ; 1 bytes @ 0x1B
   536   000047                     	ds	1
   537   000048                     movePink@mR:
   538                           	callstack 0
   539                           
   540                           ; 1 bytes @ 0x1C
   541   000048                     	ds	1
   542   000049                     ??_movePink:
   543                           
   544                           ; 1 bytes @ 0x1D
   545   000049                     	ds	2
   546   00004B                     ??_main:
   547                           
   548                           ; 1 bytes @ 0x1F
   549   00004B                     	ds	2
   550                           
   551 ;;
   552 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   553 ;;
   554 ;; *************** function _main *****************
   555 ;; Defined at:
   556 ;;		line 28 in file "main.c"
   557 ;; Parameters:    Size  Location     Type
   558 ;;		None
   559 ;; Auto vars:     Size  Location     Type
   560 ;;  PWMcycle        2    0        unsigned int 
   561 ;;  clear           2    0        unsigned int 
   562 ;;  green           2    0        unsigned int 
   563 ;;  blue            2    0        unsigned int 
   564 ;;  red             2    0        unsigned int 
   565 ;;  battery_leve    2    0        unsigned int 
   566 ;; Return value:  Size  Location     Type
   567 ;;                  1    wreg      void 
   568 ;; Registers used:
   569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   570 ;; Tracked objects:
   571 ;;		On entry : 0/0
   572 ;;		On exit  : 0/0
   573 ;;		Unchanged: 0/0
   574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   577 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   578 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   579 ;;Total ram usage:        2 bytes
   580 ;; Hardware stack levels required when called: 5
   581 ;; This function calls:
   582 ;;		_ADC_init
   583 ;;		_color_click_init
   584 ;;		_fullSpeedAhead
   585 ;;		_initDCmotorsPWM
   586 ;;		_initUSART4
   587 ;;		_movePink
   588 ;;		_stop
   589 ;; This function is called by:
   590 ;;		Startup code after reset
   591 ;; This function uses a non-reentrant model
   592 ;;
   593                           
   594                           	psect	text0
   595   000FEA                     __ptext0:
   596                           	callstack 0
   597   000FEA                     _main:
   598                           	callstack 26
   599   000FEA                     
   600                           ;main.c: 30:     ADC_init();
   601   000FEA  ECC1  F00A         	call	_ADC_init	;wreg free
   602   000FEE                     
   603                           ;main.c: 31:     color_click_init();
   604   000FEE  EC01  F00A         	call	_color_click_init	;wreg free
   605   000FF2                     
   606                           ;main.c: 32:     initUSART4();
   607   000FF2  ECB2  F00A         	call	_initUSART4	;wreg free
   608   000FF6                     
   609                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
   610   000FF6  0E00               	movlw	0
   611   000FF8  6E2D               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   612   000FFA  0E63               	movlw	99
   613   000FFC  6E2C               	movwf	initDCmotorsPWM@PWMperiod^0,c
   614   000FFE  EC65  F008         	call	_initDCmotorsPWM	;wreg free
   615   001002                     
   616                           ;main.c: 39:     motorL.power = 0;
   617   001002  0E00               	movlw	0
   618   001004  6E23               	movwf	_motorL^0,c
   619   001006                     
   620                           ;main.c: 40:     motorL.direction = 1;
   621   001006  0E01               	movlw	1
   622   001008  6E24               	movwf	(_motorL+1)^0,c
   623   00100A                     
   624                           ;main.c: 41:     motorL.brakemode = 1;
   625   00100A  0E01               	movlw	1
   626   00100C  6E25               	movwf	(_motorL+2)^0,c
   627   00100E                     
   628                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
   629   00100E  0E00               	movlw	0
   630   001010  6E27               	movwf	(_motorL+4)^0,c
   631   001012  0E63               	movlw	99
   632   001014  6E26               	movwf	(_motorL+3)^0,c
   633   001016                     
   634                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   635   001016  0EAA               	movlw	170
   636   001018  6E28               	movwf	(_motorL+5)^0,c
   637   00101A  0E0F               	movlw	15
   638   00101C  6E29               	movwf	(_motorL+6)^0,c
   639   00101E                     
   640                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   641   00101E  0EA6               	movlw	166
   642   001020  6E2A               	movwf	(_motorL+7)^0,c
   643   001022  0E0F               	movlw	15
   644   001024  6E2B               	movwf	(_motorL+8)^0,c
   645   001026                     
   646                           ;main.c: 46:     motorR.power = 0;
   647   001026  0E00               	movlw	0
   648   001028  6E1A               	movwf	_motorR^0,c
   649   00102A                     
   650                           ;main.c: 47:     motorR.direction = 1;
   651   00102A  0E01               	movlw	1
   652   00102C  6E1B               	movwf	(_motorR+1)^0,c
   653   00102E                     
   654                           ;main.c: 48:     motorR.brakemode = 1;
   655   00102E  0E01               	movlw	1
   656   001030  6E1C               	movwf	(_motorR+2)^0,c
   657   001032                     
   658                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
   659   001032  0E00               	movlw	0
   660   001034  6E1E               	movwf	(_motorR+4)^0,c
   661   001036  0E63               	movlw	99
   662   001038  6E1D               	movwf	(_motorR+3)^0,c
   663                           
   664                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   665   00103A  0E25               	movlw	37
   666   00103C  6E1F               	movwf	(_motorR+5)^0,c
   667   00103E  0E0F               	movlw	15
   668   001040  6E20               	movwf	(_motorR+6)^0,c
   669                           
   670                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   671   001042  0E21               	movlw	33
   672   001044  6E21               	movwf	(_motorR+7)^0,c
   673   001046  0E0F               	movlw	15
   674   001048  6E22               	movwf	(_motorR+8)^0,c
   675   00104A                     
   676                           ;main.c: 54:     LATDbits.LATD7=0;
   677   00104A  9E7C               	bcf	124,7,c	;volatile
   678   00104C                     
   679                           ;main.c: 55:     TRISDbits.TRISD7=0;
   680   00104C  9E84               	bcf	132,7,c	;volatile
   681   00104E                     
   682                           ;main.c: 59:     TRISGbits.TRISG0 = 0;
   683   00104E  9087               	bcf	135,0,c	;volatile
   684   001050                     
   685                           ;main.c: 60:     LATGbits.LATG0 = 0;
   686   001050  907F               	bcf	127,0,c	;volatile
   687   001052                     
   688                           ;main.c: 61:     TRISEbits.TRISE7 = 0;
   689   001052  9E85               	bcf	133,7,c	;volatile
   690   001054                     
   691                           ;main.c: 62:     LATEbits.LATE7 = 0;
   692   001054  9E7D               	bcf	125,7,c	;volatile
   693   001056                     
   694                           ;main.c: 63:     TRISAbits.TRISA3 = 0;
   695   001056  9681               	bcf	129,3,c	;volatile
   696   001058                     
   697                           ;main.c: 64:     LATAbits.LATA3 = 0;
   698   001058  9679               	bcf	121,3,c	;volatile
   699   00105A                     
   700                           ;main.c: 69:     TRISFbits.TRISF3=1;
   701   00105A  8686               	bsf	134,3,c	;volatile
   702   00105C                     
   703                           ;main.c: 70:     ANSELFbits.ANSELF3=0;
   704   00105C  010E               	movlb	14	; () banked
   705   00105E  97B4               	bcf	180,3,b	;volatile
   706   001060                     l2136:
   707                           
   708                           ;main.c: 83:         if (!PORTFbits.RF3) {
   709   001060  B68E               	btfsc	142,3,c	;volatile
   710   001062  EF35  F008         	goto	u641
   711   001066  EF37  F008         	goto	u640
   712   00106A                     u641:
   713   00106A  EF30  F008         	goto	l2136
   714   00106E                     u640:
   715   00106E                     
   716                           ;main.c: 92:             _delay((unsigned long)((500)*(64000000/4000.0)));
   717   00106E  0E29               	movlw	41
   718   001070  6E4C               	movwf	(??_main+1)^0,c
   719   001072  0E96               	movlw	150
   720   001074  6E4B               	movwf	??_main^0,c
   721   001076  0E7F               	movlw	127
   722   001078                     u687:
   723   001078  2EE8               	decfsz	wreg,f,c
   724   00107A  D7FE               	bra	u687
   725   00107C  2E4B               	decfsz	??_main^0,f,c
   726   00107E  D7FC               	bra	u687
   727   001080  2E4C               	decfsz	(??_main+1)^0,f,c
   728   001082  D7FA               	bra	u687
   729   001084  0000               	nop	
   730   001086                     
   731                           ;main.c: 93:             fullSpeedAhead(&motorL, &motorR);
   732   001086  0E23               	movlw	low _motorL
   733   001088  6E3E               	movwf	fullSpeedAhead@mL^0,c
   734   00108A  0E1A               	movlw	low _motorR
   735   00108C  6E3F               	movwf	fullSpeedAhead@mR^0,c
   736   00108E  EC33  F009         	call	_fullSpeedAhead	;wreg free
   737   001092                     
   738                           ;main.c: 94:             _delay((unsigned long)((200)*(64000000/4000.0)));
   739   001092  0E11               	movlw	17
   740   001094  6E4C               	movwf	(??_main+1)^0,c
   741   001096  0E3C               	movlw	60
   742   001098  6E4B               	movwf	??_main^0,c
   743   00109A  0ECB               	movlw	203
   744   00109C                     u697:
   745   00109C  2EE8               	decfsz	wreg,f,c
   746   00109E  D7FE               	bra	u697
   747   0010A0  2E4B               	decfsz	??_main^0,f,c
   748   0010A2  D7FC               	bra	u697
   749   0010A4  2E4C               	decfsz	(??_main+1)^0,f,c
   750   0010A6  D7FA               	bra	u697
   751   0010A8  0000               	nop	
   752                           
   753                           ;main.c: 95:             stop(&motorL, &motorR);
   754   0010AA  0E23               	movlw	low _motorL
   755   0010AC  6E3E               	movwf	stop@mL^0,c
   756   0010AE  0E1A               	movlw	low _motorR
   757   0010B0  6E3F               	movwf	stop@mR^0,c
   758   0010B2  ECAD  F008         	call	_stop	;wreg free
   759                           
   760                           ;main.c: 100:             movePink(&motorL, &motorR);
   761   0010B6  0E23               	movlw	low _motorL
   762   0010B8  6E47               	movwf	movePink@mL^0,c
   763   0010BA  0E1A               	movlw	low _motorR
   764   0010BC  6E48               	movwf	movePink@mR^0,c
   765   0010BE  EC1B  F00A         	call	_movePink	;wreg free
   766   0010C2  EF30  F008         	goto	l2136
   767   0010C6  EF00  F000         	goto	start
   768   0010CA                     __end_of_main:
   769                           	callstack 0
   770                           
   771 ;; *************** function _movePink *****************
   772 ;; Defined at:
   773 ;;		line 286 in file "dc_motor.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;  mL              1   27[COMRAM] PTR struct DC_motor
   776 ;;		 -> motorL(9), 
   777 ;;  mR              1   28[COMRAM] PTR struct DC_motor
   778 ;;		 -> motorR(9), 
   779 ;; Auto vars:     Size  Location     Type
   780 ;;		None
   781 ;; Return value:  Size  Location     Type
   782 ;;                  1    wreg      void 
   783 ;; Registers used:
   784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   785 ;; Tracked objects:
   786 ;;		On entry : 0/0
   787 ;;		On exit  : 0/0
   788 ;;		Unchanged: 0/0
   789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   790 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   792 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   793 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   794 ;;Total ram usage:        4 bytes
   795 ;; Hardware stack levels used: 1
   796 ;; Hardware stack levels required when called: 4
   797 ;; This function calls:
   798 ;;		_backOneAndHalf
   799 ;;		_left90
   800 ;; This function is called by:
   801 ;;		_main
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text1
   806   001436                     __ptext1:
   807                           	callstack 0
   808   001436                     _movePink:
   809                           	callstack 26
   810   001436                     
   811                           ;dc_motor.c: 286: void movePink(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 28
      +                          7: {;dc_motor.c: 289:     backOneAndHalf(mL,mR);
   812   001436  C047  F043         	movff	movePink@mL,backOneAndHalf@mL
   813   00143A  C048  F044         	movff	movePink@mR,backOneAndHalf@mR
   814   00143E  EC4D  F00A         	call	_backOneAndHalf	;wreg free
   815   001442                     
   816                           ;dc_motor.c: 290:     _delay((unsigned long)((500)*(64000000/4000.0)));
   817   001442  0E29               	movlw	41
   818   001444  6E4A               	movwf	(??_movePink+1)^0,c
   819   001446  0E96               	movlw	150
   820   001448  6E49               	movwf	??_movePink^0,c
   821   00144A  0E7F               	movlw	127
   822   00144C                     u707:
   823   00144C  2EE8               	decfsz	wreg,f,c
   824   00144E  D7FE               	bra	u707
   825   001450  2E49               	decfsz	??_movePink^0,f,c
   826   001452  D7FC               	bra	u707
   827   001454  2E4A               	decfsz	(??_movePink+1)^0,f,c
   828   001456  D7FA               	bra	u707
   829   001458  0000               	nop	
   830   00145A                     
   831                           ;dc_motor.c: 291:     left90(mL,mR);
   832   00145A  C047  F043         	movff	movePink@mL,left90@mL
   833   00145E  C048  F044         	movff	movePink@mR,left90@mR
   834   001462  EC34  F00A         	call	_left90	;wreg free
   835   001466  0012               	return		;funcret
   836   001468                     __end_of_movePink:
   837                           	callstack 0
   838                           
   839 ;; *************** function _left90 *****************
   840 ;; Defined at:
   841 ;;		line 201 in file "dc_motor.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;  mL              1   23[COMRAM] PTR struct DC_motor
   844 ;;		 -> motorL(9), 
   845 ;;  mR              1   24[COMRAM] PTR struct DC_motor
   846 ;;		 -> motorR(9), 
   847 ;; Auto vars:     Size  Location     Type
   848 ;;		None
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   858 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   860 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   861 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   862 ;;Total ram usage:        4 bytes
   863 ;; Hardware stack levels used: 1
   864 ;; Hardware stack levels required when called: 3
   865 ;; This function calls:
   866 ;;		_stop
   867 ;;		_turnLeft
   868 ;; This function is called by:
   869 ;;		_movePink
   870 ;;		_moveGreen
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text2
   875   001468                     __ptext2:
   876                           	callstack 0
   877   001468                     _left90:
   878                           	callstack 26
   879   001468                     
   880                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
   881   001468  C043  F03E         	movff	left90@mL,turnLeft@mL
   882   00146C  C044  F03F         	movff	left90@mR,turnLeft@mR
   883   001470  ECF4  F008         	call	_turnLeft	;wreg free
   884   001474                     
   885                           ;dc_motor.c: 204:     _delay((unsigned long)((260)*(64000000/4000.0)));
   886   001474  0E16               	movlw	22
   887   001476  6E46               	movwf	(??_left90+1)^0,c
   888   001478  0E1B               	movlw	27
   889   00147A  6E45               	movwf	??_left90^0,c
   890   00147C  0E88               	movlw	136
   891   00147E                     u717:
   892   00147E  2EE8               	decfsz	wreg,f,c
   893   001480  D7FE               	bra	u717
   894   001482  2E45               	decfsz	??_left90^0,f,c
   895   001484  D7FC               	bra	u717
   896   001486  2E46               	decfsz	(??_left90+1)^0,f,c
   897   001488  D7FA               	bra	u717
   898   00148A  D000               	nop2	
   899   00148C                     
   900                           ;dc_motor.c: 205:     stop(mL,mR);
   901   00148C  C043  F03E         	movff	left90@mL,stop@mL
   902   001490  C044  F03F         	movff	left90@mR,stop@mR
   903   001494  ECAD  F008         	call	_stop	;wreg free
   904   001498  0012               	return		;funcret
   905   00149A                     __end_of_left90:
   906                           	callstack 0
   907                           
   908 ;; *************** function _turnLeft *****************
   909 ;; Defined at:
   910 ;;		line 105 in file "dc_motor.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   913 ;;		 -> motorL(9), 
   914 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   915 ;;		 -> motorR(9), 
   916 ;; Auto vars:     Size  Location     Type
   917 ;;  i               2   21[COMRAM] unsigned int 
   918 ;; Return value:  Size  Location     Type
   919 ;;                  1    wreg      void 
   920 ;; Registers used:
   921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   922 ;; Tracked objects:
   923 ;;		On entry : 0/0
   924 ;;		On exit  : 0/0
   925 ;;		Unchanged: 0/0
   926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   927 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   928 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   929 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   930 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   931 ;;Total ram usage:        5 bytes
   932 ;; Hardware stack levels used: 1
   933 ;; Hardware stack levels required when called: 2
   934 ;; This function calls:
   935 ;;		_setMotorPWM
   936 ;; This function is called by:
   937 ;;		_left90
   938 ;;		_turn180
   939 ;;		_left135
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text3
   944   0011E8                     __ptext3:
   945                           	callstack 0
   946   0011E8                     _turnLeft:
   947                           	callstack 26
   948   0011E8                     
   949                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
   950   0011E8  503E               	movf	turnLeft@mL^0,w,c
   951   0011EA  6ED9               	movwf	fsr2l,c
   952   0011EC  6ADA               	clrf	fsr2h,c
   953   0011EE  0E01               	movlw	1
   954   0011F0  26D9               	addwf	fsr2l,f,c
   955   0011F2  6ADF               	clrf	indf2,c
   956                           
   957                           ;dc_motor.c: 109:     mR->direction = 1;
   958   0011F4  503F               	movf	turnLeft@mR^0,w,c
   959   0011F6  6ED9               	movwf	fsr2l,c
   960   0011F8  6ADA               	clrf	fsr2h,c
   961   0011FA  0E01               	movlw	1
   962   0011FC  26D9               	addwf	fsr2l,f,c
   963   0011FE  0E01               	movlw	1
   964   001200  6EDF               	movwf	indf2,c
   965   001202                     
   966                           ;dc_motor.c: 111:     setMotorPWM(mL);
   967   001202  C03E  F039         	movff	turnLeft@mL,setMotorPWM@m
   968   001206  EC4B  F007         	call	_setMotorPWM	;wreg free
   969   00120A                     
   970                           ;dc_motor.c: 112:     setMotorPWM(mR);
   971   00120A  C03F  F039         	movff	turnLeft@mR,setMotorPWM@m
   972   00120E  EC4B  F007         	call	_setMotorPWM	;wreg free
   973   001212                     
   974                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
   975   001212  0E00               	movlw	0
   976   001214  6E42               	movwf	(turnLeft@i+1)^0,c
   977   001216  0E00               	movlw	0
   978   001218  6E41               	movwf	turnLeft@i^0,c
   979   00121A                     l1826:
   980                           
   981                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
   982   00121A  503E               	movf	turnLeft@mL^0,w,c
   983   00121C  6ED9               	movwf	fsr2l,c
   984   00121E  6ADA               	clrf	fsr2h,c
   985   001220  2ADF               	incf	indf2,f,c
   986                           
   987                           ;dc_motor.c: 116:         mR->power++;
   988   001222  503F               	movf	turnLeft@mR^0,w,c
   989   001224  6ED9               	movwf	fsr2l,c
   990   001226  6ADA               	clrf	fsr2h,c
   991   001228  2ADF               	incf	indf2,f,c
   992   00122A                     
   993                           ;dc_motor.c: 117:         setMotorPWM(mL);
   994   00122A  C03E  F039         	movff	turnLeft@mL,setMotorPWM@m
   995   00122E  EC4B  F007         	call	_setMotorPWM	;wreg free
   996   001232                     
   997                           ;dc_motor.c: 118:         setMotorPWM(mR);
   998   001232  C03F  F039         	movff	turnLeft@mR,setMotorPWM@m
   999   001236  EC4B  F007         	call	_setMotorPWM	;wreg free
  1000   00123A                     
  1001                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  1002   00123A  0E0B               	movlw	11
  1003   00123C  6E40               	movwf	??_turnLeft^0,c
  1004   00123E  0E62               	movlw	98
  1005   001240                     u727:
  1006   001240  2EE8               	decfsz	wreg,f,c
  1007   001242  D7FE               	bra	u727
  1008   001244  2E40               	decfsz	??_turnLeft^0,f,c
  1009   001246  D7FC               	bra	u727
  1010   001248  D000               	nop2	
  1011   00124A                     
  1012                           ;dc_motor.c: 120:     }
  1013   00124A  4A41               	infsnz	turnLeft@i^0,f,c
  1014   00124C  2A42               	incf	(turnLeft@i+1)^0,f,c
  1015   00124E  5042               	movf	(turnLeft@i+1)^0,w,c
  1016   001250  E109               	bnz	u490
  1017   001252  0E32               	movlw	50
  1018   001254  5C41               	subwf	turnLeft@i^0,w,c
  1019   001256  A0D8               	btfss	status,0,c
  1020   001258  EF30  F009         	goto	u491
  1021   00125C  EF32  F009         	goto	u490
  1022   001260                     u491:
  1023   001260  EF0D  F009         	goto	l1826
  1024   001264                     u490:
  1025   001264  0012               	return		;funcret
  1026   001266                     __end_of_turnLeft:
  1027                           	callstack 0
  1028                           
  1029 ;; *************** function _backOneAndHalf *****************
  1030 ;; Defined at:
  1031 ;;		line 241 in file "dc_motor.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  1034 ;;		 -> motorL(9), 
  1035 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  1036 ;;		 -> motorR(9), 
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;		None
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1048 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1050 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1051 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1052 ;;Total ram usage:        4 bytes
  1053 ;; Hardware stack levels used: 1
  1054 ;; Hardware stack levels required when called: 3
  1055 ;; This function calls:
  1056 ;;		_fullSpeedBack
  1057 ;;		_stop
  1058 ;; This function is called by:
  1059 ;;		_movePink
  1060 ;;		_moveYellow
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text4
  1065   00149A                     __ptext4:
  1066                           	callstack 0
  1067   00149A                     _backOneAndHalf:
  1068                           	callstack 26
  1069   00149A                     
  1070                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  1071   00149A  C043  F03E         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  1072   00149E  C044  F03F         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  1073   0014A2  EC70  F009         	call	_fullSpeedBack	;wreg free
  1074   0014A6                     
  1075                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  1076   0014A6  0E6A               	movlw	106
  1077   0014A8  6E46               	movwf	(??_backOneAndHalf+1)^0,c
  1078   0014AA  0E85               	movlw	133
  1079   0014AC  6E45               	movwf	??_backOneAndHalf^0,c
  1080   0014AE  0EB4               	movlw	180
  1081   0014B0                     u737:
  1082   0014B0  2EE8               	decfsz	wreg,f,c
  1083   0014B2  D7FE               	bra	u737
  1084   0014B4  2E45               	decfsz	??_backOneAndHalf^0,f,c
  1085   0014B6  D7FC               	bra	u737
  1086   0014B8  2E46               	decfsz	(??_backOneAndHalf+1)^0,f,c
  1087   0014BA  D7FA               	bra	u737
  1088   0014BC  D000               	nop2	
  1089   0014BE                     
  1090                           ;dc_motor.c: 245:     stop(mL,mR);
  1091   0014BE  C043  F03E         	movff	backOneAndHalf@mL,stop@mL
  1092   0014C2  C044  F03F         	movff	backOneAndHalf@mR,stop@mR
  1093   0014C6  ECAD  F008         	call	_stop	;wreg free
  1094   0014CA  0012               	return		;funcret
  1095   0014CC                     __end_of_backOneAndHalf:
  1096                           	callstack 0
  1097                           
  1098 ;; *************** function _stop *****************
  1099 ;; Defined at:
  1100 ;;		line 88 in file "dc_motor.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1103 ;;		 -> motorL(9), 
  1104 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1105 ;;		 -> motorR(9), 
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;		None
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  1    wreg      void 
  1110 ;; Registers used:
  1111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1117 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1119 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1120 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1121 ;;Total ram usage:        3 bytes
  1122 ;; Hardware stack levels used: 1
  1123 ;; Hardware stack levels required when called: 2
  1124 ;; This function calls:
  1125 ;;		_setMotorPWM
  1126 ;; This function is called by:
  1127 ;;		_main
  1128 ;;		_left90
  1129 ;;		_backOneAndHalf
  1130 ;;		_right90
  1131 ;;		_turn180
  1132 ;;		_right135
  1133 ;;		_left135
  1134 ;;		_backHalf
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           	psect	text5
  1139   00115A                     __ptext5:
  1140                           	callstack 0
  1141   00115A                     _stop:
  1142                           	callstack 28
  1143   00115A                     
  1144                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  1145   00115A  EFDD  F008         	goto	l1810
  1146   00115E                     l1796:
  1147                           
  1148                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  1149   00115E  503E               	movf	stop@mL^0,w,c
  1150   001160  6ED9               	movwf	fsr2l,c
  1151   001162  6ADA               	clrf	fsr2h,c
  1152   001164  50DF               	movf	indf2,w,c
  1153   001166  B4D8               	btfsc	status,2,c
  1154   001168  EFB8  F008         	goto	u451
  1155   00116C  EFBA  F008         	goto	u450
  1156   001170                     u451:
  1157   001170  EFBE  F008         	goto	l1800
  1158   001174                     u450:
  1159   001174  503E               	movf	stop@mL^0,w,c
  1160   001176  6ED9               	movwf	fsr2l,c
  1161   001178  6ADA               	clrf	fsr2h,c
  1162   00117A  06DF               	decf	indf2,f,c
  1163   00117C                     l1800:
  1164                           
  1165                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  1166   00117C  503F               	movf	stop@mR^0,w,c
  1167   00117E  6ED9               	movwf	fsr2l,c
  1168   001180  6ADA               	clrf	fsr2h,c
  1169   001182  50DF               	movf	indf2,w,c
  1170   001184  B4D8               	btfsc	status,2,c
  1171   001186  EFC7  F008         	goto	u461
  1172   00118A  EFC9  F008         	goto	u460
  1173   00118E                     u461:
  1174   00118E  EFCD  F008         	goto	l1804
  1175   001192                     u460:
  1176   001192  503F               	movf	stop@mR^0,w,c
  1177   001194  6ED9               	movwf	fsr2l,c
  1178   001196  6ADA               	clrf	fsr2h,c
  1179   001198  06DF               	decf	indf2,f,c
  1180   00119A                     l1804:
  1181                           
  1182                           ;dc_motor.c: 96:         setMotorPWM(mL);
  1183   00119A  C03E  F039         	movff	stop@mL,setMotorPWM@m
  1184   00119E  EC4B  F007         	call	_setMotorPWM	;wreg free
  1185   0011A2                     
  1186                           ;dc_motor.c: 97:         setMotorPWM(mR);
  1187   0011A2  C03F  F039         	movff	stop@mR,setMotorPWM@m
  1188   0011A6  EC4B  F007         	call	_setMotorPWM	;wreg free
  1189   0011AA                     
  1190                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  1191   0011AA  0E0B               	movlw	11
  1192   0011AC  6E40               	movwf	??_stop^0,c
  1193   0011AE  0E62               	movlw	98
  1194   0011B0                     u747:
  1195   0011B0  2EE8               	decfsz	wreg,f,c
  1196   0011B2  D7FE               	bra	u747
  1197   0011B4  2E40               	decfsz	??_stop^0,f,c
  1198   0011B6  D7FC               	bra	u747
  1199   0011B8  D000               	nop2	
  1200   0011BA                     l1810:
  1201                           
  1202                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  1203   0011BA  503E               	movf	stop@mL^0,w,c
  1204   0011BC  6ED9               	movwf	fsr2l,c
  1205   0011BE  6ADA               	clrf	fsr2h,c
  1206   0011C0  50DF               	movf	indf2,w,c
  1207   0011C2  A4D8               	btfss	status,2,c
  1208   0011C4  EFE6  F008         	goto	u471
  1209   0011C8  EFE8  F008         	goto	u470
  1210   0011CC                     u471:
  1211   0011CC  EFAF  F008         	goto	l1796
  1212   0011D0                     u470:
  1213   0011D0  503F               	movf	stop@mR^0,w,c
  1214   0011D2  6ED9               	movwf	fsr2l,c
  1215   0011D4  6ADA               	clrf	fsr2h,c
  1216   0011D6  50DF               	movf	indf2,w,c
  1217   0011D8  A4D8               	btfss	status,2,c
  1218   0011DA  EFF1  F008         	goto	u481
  1219   0011DE  EFF3  F008         	goto	u480
  1220   0011E2                     u481:
  1221   0011E2  EFAF  F008         	goto	l1796
  1222   0011E6                     u480:
  1223   0011E6  0012               	return		;funcret
  1224   0011E8                     __end_of_stop:
  1225                           	callstack 0
  1226                           
  1227 ;; *************** function _fullSpeedBack *****************
  1228 ;; Defined at:
  1229 ;;		line 165 in file "dc_motor.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1232 ;;		 -> motorL(9), 
  1233 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1234 ;;		 -> motorR(9), 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  power           2   21[COMRAM] int 
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1246 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1247 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1249 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1250 ;;Total ram usage:        5 bytes
  1251 ;; Hardware stack levels used: 1
  1252 ;; Hardware stack levels required when called: 2
  1253 ;; This function calls:
  1254 ;;		_setMotorPWM
  1255 ;; This function is called by:
  1256 ;;		_backOneAndHalf
  1257 ;;		_backHalf
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text6
  1262   0012E0                     __ptext6:
  1263                           	callstack 0
  1264   0012E0                     _fullSpeedBack:
  1265                           	callstack 26
  1266   0012E0                     
  1267                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  1268   0012E0  503E               	movf	fullSpeedBack@mL^0,w,c
  1269   0012E2  6ED9               	movwf	fsr2l,c
  1270   0012E4  6ADA               	clrf	fsr2h,c
  1271   0012E6  0E01               	movlw	1
  1272   0012E8  26D9               	addwf	fsr2l,f,c
  1273   0012EA  6ADF               	clrf	indf2,c
  1274                           
  1275                           ;dc_motor.c: 169:     mR->direction = 0;
  1276   0012EC  503F               	movf	fullSpeedBack@mR^0,w,c
  1277   0012EE  6ED9               	movwf	fsr2l,c
  1278   0012F0  6ADA               	clrf	fsr2h,c
  1279   0012F2  0E01               	movlw	1
  1280   0012F4  26D9               	addwf	fsr2l,f,c
  1281   0012F6  6ADF               	clrf	indf2,c
  1282   0012F8                     
  1283                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  1284   0012F8  0E00               	movlw	0
  1285   0012FA  6E42               	movwf	(fullSpeedBack@power+1)^0,c
  1286   0012FC  0E00               	movlw	0
  1287   0012FE  6E41               	movwf	fullSpeedBack@power^0,c
  1288   001300                     l1846:
  1289                           
  1290                           ;dc_motor.c: 172:         mL->power = power;
  1291   001300  503E               	movf	fullSpeedBack@mL^0,w,c
  1292   001302  6ED9               	movwf	fsr2l,c
  1293   001304  6ADA               	clrf	fsr2h,c
  1294   001306  C041  FFDF         	movff	fullSpeedBack@power,indf2
  1295                           
  1296                           ;dc_motor.c: 173:         mR->power = power;
  1297   00130A  503F               	movf	fullSpeedBack@mR^0,w,c
  1298   00130C  6ED9               	movwf	fsr2l,c
  1299   00130E  6ADA               	clrf	fsr2h,c
  1300   001310  C041  FFDF         	movff	fullSpeedBack@power,indf2
  1301   001314                     
  1302                           ;dc_motor.c: 176:         setMotorPWM(mL);
  1303   001314  C03E  F039         	movff	fullSpeedBack@mL,setMotorPWM@m
  1304   001318  EC4B  F007         	call	_setMotorPWM	;wreg free
  1305   00131C                     
  1306                           ;dc_motor.c: 177:         setMotorPWM(mR);
  1307   00131C  C03F  F039         	movff	fullSpeedBack@mR,setMotorPWM@m
  1308   001320  EC4B  F007         	call	_setMotorPWM	;wreg free
  1309   001324                     
  1310                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  1311   001324  0E0B               	movlw	11
  1312   001326  6E40               	movwf	??_fullSpeedBack^0,c
  1313   001328  0E62               	movlw	98
  1314   00132A                     u757:
  1315   00132A  2EE8               	decfsz	wreg,f,c
  1316   00132C  D7FE               	bra	u757
  1317   00132E  2E40               	decfsz	??_fullSpeedBack^0,f,c
  1318   001330  D7FC               	bra	u757
  1319   001332  D000               	nop2	
  1320   001334                     
  1321                           ;dc_motor.c: 181:     }
  1322   001334  4A41               	infsnz	fullSpeedBack@power^0,f,c
  1323   001336  2A42               	incf	(fullSpeedBack@power+1)^0,f,c
  1324   001338  BE42               	btfsc	(fullSpeedBack@power+1)^0,7,c
  1325   00133A  EFA8  F009         	goto	u501
  1326   00133E  5042               	movf	(fullSpeedBack@power+1)^0,w,c
  1327   001340  E109               	bnz	u500
  1328   001342  0E33               	movlw	51
  1329   001344  5C41               	subwf	fullSpeedBack@power^0,w,c
  1330   001346  A0D8               	btfss	status,0,c
  1331   001348  EFA8  F009         	goto	u501
  1332   00134C  EFAA  F009         	goto	u500
  1333   001350                     u501:
  1334   001350  EF80  F009         	goto	l1846
  1335   001354                     u500:
  1336   001354  0012               	return		;funcret
  1337   001356                     __end_of_fullSpeedBack:
  1338                           	callstack 0
  1339                           
  1340 ;; *************** function _initUSART4 *****************
  1341 ;; Defined at:
  1342 ;;		line 14 in file "serial.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1360 ;;Total ram usage:        0 bytes
  1361 ;; Hardware stack levels used: 1
  1362 ;; This function calls:
  1363 ;;		Nothing
  1364 ;; This function is called by:
  1365 ;;		_main
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           	psect	text7
  1370   001564                     __ptext7:
  1371                           	callstack 0
  1372   001564                     _initUSART4:
  1373                           	callstack 30
  1374   001564                     
  1375                           ;serial.c: 15:     RC0PPS = 0x12;
  1376   001564  0E12               	movlw	18
  1377   001566  010E               	movlb	14	; () banked
  1378   001568  6F62               	movwf	98,b	;volatile
  1379                           
  1380                           ;serial.c: 16:     RX4PPS = 0x11;
  1381   00156A  0E11               	movlw	17
  1382   00156C  6F15               	movwf	21,b	;volatile
  1383   00156E                     
  1384                           ; BSR set to: 14
  1385                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  1386   00156E  97E9               	bcf	233,3,b	;volatile
  1387   001570                     
  1388                           ; BSR set to: 14
  1389                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  1390   001570  95E8               	bcf	232,2,b	;volatile
  1391                           
  1392                           ;serial.c: 19:     SP4BRGL = 51;
  1393   001572  0E33               	movlw	51
  1394   001574  6FE5               	movwf	229,b	;volatile
  1395                           
  1396                           ;serial.c: 20:     SP4BRGH = 0;
  1397   001576  0E00               	movlw	0
  1398   001578  6FE6               	movwf	230,b	;volatile
  1399   00157A                     
  1400                           ; BSR set to: 14
  1401                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  1402   00157A  89E7               	bsf	231,4,b	;volatile
  1403   00157C                     
  1404                           ; BSR set to: 14
  1405                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  1406   00157C  8BE8               	bsf	232,5,b	;volatile
  1407   00157E                     
  1408                           ; BSR set to: 14
  1409                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  1410   00157E  8FE7               	bsf	231,7,b	;volatile
  1411   001580                     
  1412                           ; BSR set to: 14
  1413   001580  0012               	return		;funcret
  1414   001582                     __end_of_initUSART4:
  1415                           	callstack 0
  1416                           
  1417 ;; *************** function _initDCmotorsPWM *****************
  1418 ;; Defined at:
  1419 ;;		line 5 in file "dc_motor.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;		None
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      void 
  1426 ;; Registers used:
  1427 ;;		wreg, status,2
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1433 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1436 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1437 ;;Total ram usage:        2 bytes
  1438 ;; Hardware stack levels used: 1
  1439 ;; This function calls:
  1440 ;;		Nothing
  1441 ;; This function is called by:
  1442 ;;		_main
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           	psect	text8
  1447   0010CA                     __ptext8:
  1448                           	callstack 0
  1449   0010CA                     _initDCmotorsPWM:
  1450                           	callstack 30
  1451   0010CA                     
  1452                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  1453   0010CA  9485               	bcf	133,2,c	;volatile
  1454                           
  1455                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  1456   0010CC  9E83               	bcf	131,7,c	;volatile
  1457                           
  1458                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1459   0010CE  9885               	bcf	133,4,c	;volatile
  1460                           
  1461                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  1462   0010D0  9C87               	bcf	135,6,c	;volatile
  1463                           
  1464                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  1465   0010D2  947D               	bcf	125,2,c	;volatile
  1466                           
  1467                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  1468   0010D4  9E7B               	bcf	123,7,c	;volatile
  1469                           
  1470                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  1471   0010D6  987D               	bcf	125,4,c	;volatile
  1472                           
  1473                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  1474   0010D8  9C7F               	bcf	127,6,c	;volatile
  1475   0010DA                     
  1476                           ;dc_motor.c: 18:     RE2PPS=0x05;
  1477   0010DA  0E05               	movlw	5
  1478   0010DC  010E               	movlb	14	; () banked
  1479   0010DE  6F74               	movwf	116,b	;volatile
  1480                           
  1481                           ;dc_motor.c: 19:     RE4PPS=0x06;
  1482   0010E0  0E06               	movlw	6
  1483   0010E2  6F76               	movwf	118,b	;volatile
  1484                           
  1485                           ;dc_motor.c: 20:     RC7PPS=0x07;
  1486   0010E4  0E07               	movlw	7
  1487   0010E6  6F69               	movwf	105,b	;volatile
  1488                           
  1489                           ;dc_motor.c: 21:     RG6PPS=0x08;
  1490   0010E8  0E08               	movlw	8
  1491   0010EA  6F88               	movwf	136,b	;volatile
  1492                           
  1493                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  1494   0010EC  50BD               	movf	189,w,c	;volatile
  1495   0010EE  0B8F               	andlw	-113
  1496   0010F0  0940               	iorlw	64
  1497   0010F2  6EBD               	movwf	189,c	;volatile
  1498                           
  1499                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1500   0010F4  0EE0               	movlw	-32
  1501   0010F6  16BE               	andwf	190,f,c	;volatile
  1502                           
  1503                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1504   0010F8  50BF               	movf	191,w,c	;volatile
  1505   0010FA  0BF0               	andlw	-16
  1506   0010FC  0901               	iorlw	1
  1507   0010FE  6EBF               	movwf	191,c	;volatile
  1508   001100                     
  1509                           ; BSR set to: 14
  1510                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  1511   001100  C02C  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1512   001104                     
  1513                           ; BSR set to: 14
  1514                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  1515   001104  8EBD               	bsf	189,7,c	;volatile
  1516                           
  1517                           ;dc_motor.c: 35:     CCPR1H=0;
  1518   001106  0E00               	movlw	0
  1519   001108  6EAA               	movwf	170,c	;volatile
  1520                           
  1521                           ;dc_motor.c: 36:     CCPR2H=0;
  1522   00110A  0E00               	movlw	0
  1523   00110C  6EA6               	movwf	166,c	;volatile
  1524                           
  1525                           ;dc_motor.c: 37:     CCPR3H=0;
  1526   00110E  0E00               	movlw	0
  1527   001110  010F               	movlb	15	; () banked
  1528   001112  6F25               	movwf	37,b	;volatile
  1529                           
  1530                           ;dc_motor.c: 38:     CCPR4H=0;
  1531   001114  0E00               	movlw	0
  1532   001116  6F21               	movwf	33,b	;volatile
  1533                           
  1534                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1535   001118  0EFC               	movlw	-4
  1536   00111A  16AD               	andwf	173,f,c	;volatile
  1537                           
  1538                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1539   00111C  0EF3               	movlw	-13
  1540   00111E  16AD               	andwf	173,f,c	;volatile
  1541                           
  1542                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1543   001120  0ECF               	movlw	-49
  1544   001122  16AD               	andwf	173,f,c	;volatile
  1545                           
  1546                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1547   001124  0E3F               	movlw	-193
  1548   001126  16AD               	andwf	173,f,c	;volatile
  1549   001128                     
  1550                           ; BSR set to: 15
  1551                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1552   001128  88AB               	bsf	171,4,c	;volatile
  1553                           
  1554                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1555   00112A  50AB               	movf	171,w,c	;volatile
  1556   00112C  0BF0               	andlw	-16
  1557   00112E  090C               	iorlw	12
  1558   001130  6EAB               	movwf	171,c	;volatile
  1559   001132                     
  1560                           ; BSR set to: 15
  1561                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  1562   001132  8EAB               	bsf	171,7,c	;volatile
  1563   001134                     
  1564                           ; BSR set to: 15
  1565                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  1566   001134  88A7               	bsf	167,4,c	;volatile
  1567                           
  1568                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1569   001136  50A7               	movf	167,w,c	;volatile
  1570   001138  0BF0               	andlw	-16
  1571   00113A  090C               	iorlw	12
  1572   00113C  6EA7               	movwf	167,c	;volatile
  1573   00113E                     
  1574                           ; BSR set to: 15
  1575                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  1576   00113E  8EA7               	bsf	167,7,c	;volatile
  1577   001140                     
  1578                           ; BSR set to: 15
  1579                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  1580   001140  8926               	bsf	38,4,b	;volatile
  1581                           
  1582                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1583   001142  5126               	movf	38,w,b	;volatile
  1584   001144  0BF0               	andlw	-16
  1585   001146  090C               	iorlw	12
  1586   001148  6F26               	movwf	38,b	;volatile
  1587   00114A                     
  1588                           ; BSR set to: 15
  1589                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  1590   00114A  8F26               	bsf	38,7,b	;volatile
  1591   00114C                     
  1592                           ; BSR set to: 15
  1593                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  1594   00114C  8922               	bsf	34,4,b	;volatile
  1595                           
  1596                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1597   00114E  5122               	movf	34,w,b	;volatile
  1598   001150  0BF0               	andlw	-16
  1599   001152  090C               	iorlw	12
  1600   001154  6F22               	movwf	34,b	;volatile
  1601   001156                     
  1602                           ; BSR set to: 15
  1603                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  1604   001156  8F22               	bsf	34,7,b	;volatile
  1605   001158                     
  1606                           ; BSR set to: 15
  1607   001158  0012               	return		;funcret
  1608   00115A                     __end_of_initDCmotorsPWM:
  1609                           	callstack 0
  1610                           
  1611 ;; *************** function _fullSpeedAhead *****************
  1612 ;; Defined at:
  1613 ;;		line 144 in file "dc_motor.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1616 ;;		 -> motorL(9), 
  1617 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1618 ;;		 -> motorR(9), 
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;  power           2   21[COMRAM] int 
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1630 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1631 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1632 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1633 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1634 ;;Total ram usage:        5 bytes
  1635 ;; Hardware stack levels used: 1
  1636 ;; Hardware stack levels required when called: 2
  1637 ;; This function calls:
  1638 ;;		_setMotorPWM
  1639 ;; This function is called by:
  1640 ;;		_main
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text9
  1645   001266                     __ptext9:
  1646                           	callstack 0
  1647   001266                     _fullSpeedAhead:
  1648                           	callstack 28
  1649   001266                     
  1650                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  1651   001266  503E               	movf	fullSpeedAhead@mL^0,w,c
  1652   001268  6ED9               	movwf	fsr2l,c
  1653   00126A  6ADA               	clrf	fsr2h,c
  1654   00126C  0E01               	movlw	1
  1655   00126E  26D9               	addwf	fsr2l,f,c
  1656   001270  0E01               	movlw	1
  1657   001272  6EDF               	movwf	indf2,c
  1658                           
  1659                           ;dc_motor.c: 148:     mR->direction = 1;
  1660   001274  503F               	movf	fullSpeedAhead@mR^0,w,c
  1661   001276  6ED9               	movwf	fsr2l,c
  1662   001278  6ADA               	clrf	fsr2h,c
  1663   00127A  0E01               	movlw	1
  1664   00127C  26D9               	addwf	fsr2l,f,c
  1665   00127E  0E01               	movlw	1
  1666   001280  6EDF               	movwf	indf2,c
  1667   001282                     
  1668                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  1669   001282  0E00               	movlw	0
  1670   001284  6E42               	movwf	(fullSpeedAhead@power+1)^0,c
  1671   001286  0E00               	movlw	0
  1672   001288  6E41               	movwf	fullSpeedAhead@power^0,c
  1673   00128A                     l1952:
  1674                           
  1675                           ;dc_motor.c: 151:         mL->power = power;
  1676   00128A  503E               	movf	fullSpeedAhead@mL^0,w,c
  1677   00128C  6ED9               	movwf	fsr2l,c
  1678   00128E  6ADA               	clrf	fsr2h,c
  1679   001290  C041  FFDF         	movff	fullSpeedAhead@power,indf2
  1680                           
  1681                           ;dc_motor.c: 152:         mR->power = power;
  1682   001294  503F               	movf	fullSpeedAhead@mR^0,w,c
  1683   001296  6ED9               	movwf	fsr2l,c
  1684   001298  6ADA               	clrf	fsr2h,c
  1685   00129A  C041  FFDF         	movff	fullSpeedAhead@power,indf2
  1686   00129E                     
  1687                           ;dc_motor.c: 155:         setMotorPWM(mL);
  1688   00129E  C03E  F039         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1689   0012A2  EC4B  F007         	call	_setMotorPWM	;wreg free
  1690   0012A6                     
  1691                           ;dc_motor.c: 156:         setMotorPWM(mR);
  1692   0012A6  C03F  F039         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1693   0012AA  EC4B  F007         	call	_setMotorPWM	;wreg free
  1694   0012AE                     
  1695                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  1696   0012AE  0E0B               	movlw	11
  1697   0012B0  6E40               	movwf	??_fullSpeedAhead^0,c
  1698   0012B2  0E62               	movlw	98
  1699   0012B4                     u767:
  1700   0012B4  2EE8               	decfsz	wreg,f,c
  1701   0012B6  D7FE               	bra	u767
  1702   0012B8  2E40               	decfsz	??_fullSpeedAhead^0,f,c
  1703   0012BA  D7FC               	bra	u767
  1704   0012BC  D000               	nop2	
  1705   0012BE                     
  1706                           ;dc_motor.c: 160:     }
  1707   0012BE  4A41               	infsnz	fullSpeedAhead@power^0,f,c
  1708   0012C0  2A42               	incf	(fullSpeedAhead@power+1)^0,f,c
  1709   0012C2  BE42               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  1710   0012C4  EF6D  F009         	goto	u541
  1711   0012C8  5042               	movf	(fullSpeedAhead@power+1)^0,w,c
  1712   0012CA  E109               	bnz	u540
  1713   0012CC  0E33               	movlw	51
  1714   0012CE  5C41               	subwf	fullSpeedAhead@power^0,w,c
  1715   0012D0  A0D8               	btfss	status,0,c
  1716   0012D2  EF6D  F009         	goto	u541
  1717   0012D6  EF6F  F009         	goto	u540
  1718   0012DA                     u541:
  1719   0012DA  EF45  F009         	goto	l1952
  1720   0012DE                     u540:
  1721   0012DE  0012               	return		;funcret
  1722   0012E0                     __end_of_fullSpeedAhead:
  1723                           	callstack 0
  1724                           
  1725 ;; *************** function _setMotorPWM *****************
  1726 ;; Defined at:
  1727 ;;		line 65 in file "dc_motor.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1730 ;;		 -> motorR(9), motorL(9), 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  negDuty         1   17[COMRAM] unsigned char 
  1733 ;;  posDuty         1   16[COMRAM] unsigned char 
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1743 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1745 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1746 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1747 ;;Total ram usage:        5 bytes
  1748 ;; Hardware stack levels used: 1
  1749 ;; Hardware stack levels required when called: 1
  1750 ;; This function calls:
  1751 ;;		___lwdiv
  1752 ;;		___wmul
  1753 ;; This function is called by:
  1754 ;;		_stop
  1755 ;;		_turnLeft
  1756 ;;		_fullSpeedAhead
  1757 ;;		_fullSpeedBack
  1758 ;;		_turnRight
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text10
  1763   000E96                     __ptext10:
  1764                           	callstack 0
  1765   000E96                     _setMotorPWM:
  1766                           	callstack 28
  1767   000E96                     
  1768                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  1769   000E96  5039               	movf	setMotorPWM@m^0,w,c
  1770   000E98  6ED9               	movwf	fsr2l,c
  1771   000E9A  6ADA               	clrf	fsr2h,c
  1772   000E9C  0E02               	movlw	2
  1773   000E9E  26D9               	addwf	fsr2l,f,c
  1774   000EA0  50DF               	movf	indf2,w,c
  1775   000EA2  B4D8               	btfsc	status,2,c
  1776   000EA4  EF56  F007         	goto	u431
  1777   000EA8  EF58  F007         	goto	u430
  1778   000EAC                     u431:
  1779   000EAC  EF88  F007         	goto	l1784
  1780   000EB0                     u430:
  1781   000EB0                     
  1782                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1783   000EB0  5039               	movf	setMotorPWM@m^0,w,c
  1784   000EB2  6ED9               	movwf	fsr2l,c
  1785   000EB4  6ADA               	clrf	fsr2h,c
  1786   000EB6  50DF               	movf	indf2,w,c
  1787   000EB8  6E3A               	movwf	??_setMotorPWM^0,c
  1788   000EBA  503A               	movf	??_setMotorPWM^0,w,c
  1789   000EBC  6E2C               	movwf	___wmul@multiplier^0,c
  1790   000EBE  6A2D               	clrf	(___wmul@multiplier+1)^0,c
  1791   000EC0  5039               	movf	setMotorPWM@m^0,w,c
  1792   000EC2  6ED9               	movwf	fsr2l,c
  1793   000EC4  6ADA               	clrf	fsr2h,c
  1794   000EC6  0E03               	movlw	3
  1795   000EC8  26D9               	addwf	fsr2l,f,c
  1796   000ECA  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  1797   000ECE  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  1798   000ED2  EC8F  F00A         	call	___wmul	;wreg free
  1799   000ED6  C02C  F032         	movff	?___wmul,___lwdiv@dividend
  1800   000EDA  C02D  F033         	movff	?___wmul+1,___lwdiv@dividend+1
  1801   000EDE  0E00               	movlw	0
  1802   000EE0  6E35               	movwf	(___lwdiv@divisor+1)^0,c
  1803   000EE2  0E64               	movlw	100
  1804   000EE4  6E34               	movwf	___lwdiv@divisor^0,c
  1805   000EE6  ECAB  F009         	call	___lwdiv	;wreg free
  1806   000EEA  5039               	movf	setMotorPWM@m^0,w,c
  1807   000EEC  6ED9               	movwf	fsr2l,c
  1808   000EEE  6ADA               	clrf	fsr2h,c
  1809   000EF0  0E03               	movlw	3
  1810   000EF2  26D9               	addwf	fsr2l,f,c
  1811   000EF4  50DF               	movf	indf2,w,c
  1812   000EF6  6E3B               	movwf	(??_setMotorPWM+1)^0,c
  1813   000EF8  5032               	movf	?___lwdiv^0,w,c
  1814   000EFA  5C3B               	subwf	(??_setMotorPWM+1)^0,w,c
  1815   000EFC  6E3C               	movwf	setMotorPWM@posDuty^0,c
  1816   000EFE                     
  1817                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  1818   000EFE  5039               	movf	setMotorPWM@m^0,w,c
  1819   000F00  6ED9               	movwf	fsr2l,c
  1820   000F02  6ADA               	clrf	fsr2h,c
  1821   000F04  0E03               	movlw	3
  1822   000F06  26D9               	addwf	fsr2l,f,c
  1823   000F08  50DF               	movf	indf2,w,c
  1824   000F0A  6E3D               	movwf	setMotorPWM@negDuty^0,c
  1825                           
  1826                           ;dc_motor.c: 72:     }
  1827   000F0C  EFA9  F007         	goto	l1788
  1828   000F10                     l1784:
  1829                           
  1830                           ;dc_motor.c: 74:         posDuty=0;
  1831   000F10  0E00               	movlw	0
  1832   000F12  6E3C               	movwf	setMotorPWM@posDuty^0,c
  1833   000F14                     
  1834                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1835   000F14  5039               	movf	setMotorPWM@m^0,w,c
  1836   000F16  6ED9               	movwf	fsr2l,c
  1837   000F18  6ADA               	clrf	fsr2h,c
  1838   000F1A  50DF               	movf	indf2,w,c
  1839   000F1C  6E3A               	movwf	??_setMotorPWM^0,c
  1840   000F1E  503A               	movf	??_setMotorPWM^0,w,c
  1841   000F20  6E2C               	movwf	___wmul@multiplier^0,c
  1842   000F22  6A2D               	clrf	(___wmul@multiplier+1)^0,c
  1843   000F24  5039               	movf	setMotorPWM@m^0,w,c
  1844   000F26  6ED9               	movwf	fsr2l,c
  1845   000F28  6ADA               	clrf	fsr2h,c
  1846   000F2A  0E03               	movlw	3
  1847   000F2C  26D9               	addwf	fsr2l,f,c
  1848   000F2E  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  1849   000F32  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  1850   000F36  EC8F  F00A         	call	___wmul	;wreg free
  1851   000F3A  C02C  F032         	movff	?___wmul,___lwdiv@dividend
  1852   000F3E  C02D  F033         	movff	?___wmul+1,___lwdiv@dividend+1
  1853   000F42  0E00               	movlw	0
  1854   000F44  6E35               	movwf	(___lwdiv@divisor+1)^0,c
  1855   000F46  0E64               	movlw	100
  1856   000F48  6E34               	movwf	___lwdiv@divisor^0,c
  1857   000F4A  ECAB  F009         	call	___lwdiv	;wreg free
  1858   000F4E  5032               	movf	?___lwdiv^0,w,c
  1859   000F50  6E3D               	movwf	setMotorPWM@negDuty^0,c
  1860   000F52                     l1788:
  1861                           
  1862                           ;dc_motor.c: 78:     if (m->direction) {
  1863   000F52  5039               	movf	setMotorPWM@m^0,w,c
  1864   000F54  6ED9               	movwf	fsr2l,c
  1865   000F56  6ADA               	clrf	fsr2h,c
  1866   000F58  0E01               	movlw	1
  1867   000F5A  26D9               	addwf	fsr2l,f,c
  1868   000F5C  50DF               	movf	indf2,w,c
  1869   000F5E  B4D8               	btfsc	status,2,c
  1870   000F60  EFB4  F007         	goto	u441
  1871   000F64  EFB6  F007         	goto	u440
  1872   000F68                     u441:
  1873   000F68  EFD6  F007         	goto	l1792
  1874   000F6C                     u440:
  1875   000F6C                     
  1876                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  1877   000F6C  5039               	movf	setMotorPWM@m^0,w,c
  1878   000F6E  6ED9               	movwf	fsr2l,c
  1879   000F70  6ADA               	clrf	fsr2h,c
  1880   000F72  0E05               	movlw	5
  1881   000F74  26D9               	addwf	fsr2l,f,c
  1882   000F76  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1883   000F7A  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1884   000F7E  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1885   000F82  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1886   000F86  C03C  FFDF         	movff	setMotorPWM@posDuty,indf2
  1887                           
  1888                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  1889   000F8A  5039               	movf	setMotorPWM@m^0,w,c
  1890   000F8C  6ED9               	movwf	fsr2l,c
  1891   000F8E  6ADA               	clrf	fsr2h,c
  1892   000F90  0E07               	movlw	7
  1893   000F92  26D9               	addwf	fsr2l,f,c
  1894   000F94  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1895   000F98  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1896   000F9C  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1897   000FA0  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1898   000FA4  C03D  FFDF         	movff	setMotorPWM@negDuty,indf2
  1899                           
  1900                           ;dc_motor.c: 81:     } else {
  1901   000FA8  EFF4  F007         	goto	l273
  1902   000FAC                     l1792:
  1903                           
  1904                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  1905   000FAC  5039               	movf	setMotorPWM@m^0,w,c
  1906   000FAE  6ED9               	movwf	fsr2l,c
  1907   000FB0  6ADA               	clrf	fsr2h,c
  1908   000FB2  0E05               	movlw	5
  1909   000FB4  26D9               	addwf	fsr2l,f,c
  1910   000FB6  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1911   000FBA  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1912   000FBE  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1913   000FC2  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1914   000FC6  C03D  FFDF         	movff	setMotorPWM@negDuty,indf2
  1915                           
  1916                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  1917   000FCA  5039               	movf	setMotorPWM@m^0,w,c
  1918   000FCC  6ED9               	movwf	fsr2l,c
  1919   000FCE  6ADA               	clrf	fsr2h,c
  1920   000FD0  0E07               	movlw	7
  1921   000FD2  26D9               	addwf	fsr2l,f,c
  1922   000FD4  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1923   000FD8  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1924   000FDC  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1925   000FE0  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1926   000FE4  C03C  FFDF         	movff	setMotorPWM@posDuty,indf2
  1927   000FE8                     l273:
  1928   000FE8  0012               	return		;funcret
  1929   000FEA                     __end_of_setMotorPWM:
  1930                           	callstack 0
  1931                           
  1932 ;; *************** function ___wmul *****************
  1933 ;; Defined at:
  1934 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  multiplier      2    0[COMRAM] unsigned int 
  1937 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  product         2    4[COMRAM] unsigned int 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  2    0[COMRAM] unsigned int 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0, prodl, prodh
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1949 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1950 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1952 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1953 ;;Total ram usage:        6 bytes
  1954 ;; Hardware stack levels used: 1
  1955 ;; This function calls:
  1956 ;;		Nothing
  1957 ;; This function is called by:
  1958 ;;		_setMotorPWM
  1959 ;;		_ADC2String
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text11
  1964   00151E                     __ptext11:
  1965                           	callstack 0
  1966   00151E                     ___wmul:
  1967                           	callstack 28
  1968   00151E  502C               	movf	___wmul@multiplier^0,w,c
  1969   001520  022E               	mulwf	___wmul@multiplicand^0,c
  1970   001522  CFF3 F030          	movff	prodl,___wmul@product
  1971   001526  CFF4 F031          	movff	prodh,___wmul@product+1
  1972   00152A  502C               	movf	___wmul@multiplier^0,w,c
  1973   00152C  022F               	mulwf	(___wmul@multiplicand+1)^0,c
  1974   00152E  50F3               	movf	243,w,c
  1975   001530  2631               	addwf	(___wmul@product+1)^0,f,c
  1976   001532  502D               	movf	(___wmul@multiplier+1)^0,w,c
  1977   001534  022E               	mulwf	___wmul@multiplicand^0,c
  1978   001536  50F3               	movf	243,w,c
  1979   001538  2631               	addwf	(___wmul@product+1)^0,f,c
  1980   00153A  C030  F02C         	movff	___wmul@product,?___wmul
  1981   00153E  C031  F02D         	movff	___wmul@product+1,?___wmul+1
  1982   001542  0012               	return		;funcret
  1983   001544                     __end_of___wmul:
  1984                           	callstack 0
  1985                           
  1986 ;; *************** function ___lwdiv *****************
  1987 ;; Defined at:
  1988 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;  dividend        2    6[COMRAM] unsigned int 
  1991 ;;  divisor         2    8[COMRAM] unsigned int 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  quotient        2   10[COMRAM] unsigned int 
  1994 ;;  counter         1   12[COMRAM] unsigned char 
  1995 ;; Return value:  Size  Location     Type
  1996 ;;                  2    6[COMRAM] unsigned int 
  1997 ;; Registers used:
  1998 ;;		wreg, status,2, status,0
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2004 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2005 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2007 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2008 ;;Total ram usage:        7 bytes
  2009 ;; Hardware stack levels used: 1
  2010 ;; This function calls:
  2011 ;;		Nothing
  2012 ;; This function is called by:
  2013 ;;		_setMotorPWM
  2014 ;;		_ADC2String
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           	psect	text12
  2019   001356                     __ptext12:
  2020                           	callstack 0
  2021   001356                     ___lwdiv:
  2022                           	callstack 28
  2023   001356  0E00               	movlw	0
  2024   001358  6E37               	movwf	(___lwdiv@quotient+1)^0,c
  2025   00135A  0E00               	movlw	0
  2026   00135C  6E36               	movwf	___lwdiv@quotient^0,c
  2027   00135E  5034               	movf	___lwdiv@divisor^0,w,c
  2028   001360  1035               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2029   001362  B4D8               	btfsc	status,2,c
  2030   001364  EFB6  F009         	goto	u401
  2031   001368  EFB8  F009         	goto	u400
  2032   00136C                     u401:
  2033   00136C  EFE0  F009         	goto	l951
  2034   001370                     u400:
  2035   001370  0E01               	movlw	1
  2036   001372  6E38               	movwf	___lwdiv@counter^0,c
  2037   001374  EFC0  F009         	goto	l1764
  2038   001378                     l1762:
  2039   001378  90D8               	bcf	status,0,c
  2040   00137A  3634               	rlcf	___lwdiv@divisor^0,f,c
  2041   00137C  3635               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2042   00137E  2A38               	incf	___lwdiv@counter^0,f,c
  2043   001380                     l1764:
  2044   001380  AE35               	btfss	(___lwdiv@divisor+1)^0,7,c
  2045   001382  EFC5  F009         	goto	u411
  2046   001386  EFC7  F009         	goto	u410
  2047   00138A                     u411:
  2048   00138A  EFBC  F009         	goto	l1762
  2049   00138E                     u410:
  2050   00138E                     l1766:
  2051   00138E  90D8               	bcf	status,0,c
  2052   001390  3636               	rlcf	___lwdiv@quotient^0,f,c
  2053   001392  3637               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2054   001394  5034               	movf	___lwdiv@divisor^0,w,c
  2055   001396  5C32               	subwf	___lwdiv@dividend^0,w,c
  2056   001398  5035               	movf	(___lwdiv@divisor+1)^0,w,c
  2057   00139A  5833               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2058   00139C  A0D8               	btfss	status,0,c
  2059   00139E  EFD3  F009         	goto	u421
  2060   0013A2  EFD5  F009         	goto	u420
  2061   0013A6                     u421:
  2062   0013A6  EFDA  F009         	goto	l1774
  2063   0013AA                     u420:
  2064   0013AA  5034               	movf	___lwdiv@divisor^0,w,c
  2065   0013AC  5E32               	subwf	___lwdiv@dividend^0,f,c
  2066   0013AE  5035               	movf	(___lwdiv@divisor+1)^0,w,c
  2067   0013B0  5A33               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2068   0013B2  8036               	bsf	___lwdiv@quotient^0,0,c
  2069   0013B4                     l1774:
  2070   0013B4  90D8               	bcf	status,0,c
  2071   0013B6  3235               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2072   0013B8  3234               	rrcf	___lwdiv@divisor^0,f,c
  2073   0013BA  2E38               	decfsz	___lwdiv@counter^0,f,c
  2074   0013BC  EFC7  F009         	goto	l1766
  2075   0013C0                     l951:
  2076   0013C0  C036  F032         	movff	___lwdiv@quotient,?___lwdiv
  2077   0013C4  C037  F033         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2078   0013C8  0012               	return		;funcret
  2079   0013CA                     __end_of___lwdiv:
  2080                           	callstack 0
  2081                           
  2082 ;; *************** function _color_click_init *****************
  2083 ;; Defined at:
  2084 ;;		line 6 in file "color.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;		None
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		wreg, status,2, status,0, cstack
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2100 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2101 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2102 ;;Total ram usage:        1 bytes
  2103 ;; Hardware stack levels used: 1
  2104 ;; Hardware stack levels required when called: 3
  2105 ;; This function calls:
  2106 ;;		_I2C_2_Master_Init
  2107 ;;		_color_writetoaddr
  2108 ;; This function is called by:
  2109 ;;		_main
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           	psect	text13
  2114   001402                     __ptext13:
  2115                           	callstack 0
  2116   001402                     _color_click_init:
  2117                           	callstack 27
  2118   001402                     
  2119                           ;color.c: 9:     I2C_2_Master_Init();
  2120   001402  EC66  F00A         	call	_I2C_2_Master_Init	;wreg free
  2121   001406                     
  2122                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  2123   001406  0E01               	movlw	1
  2124   001408  6E2E               	movwf	color_writetoaddr@value^0,c
  2125   00140A  0E00               	movlw	0
  2126   00140C  ECA2  F00A         	call	_color_writetoaddr
  2127   001410                     
  2128                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2129   001410  0E3F               	movlw	63
  2130   001412  6E30               	movwf	??_color_click_init^0,c
  2131   001414  0E55               	movlw	85
  2132   001416                     u777:
  2133   001416  2EE8               	decfsz	wreg,f,c
  2134   001418  D7FE               	bra	u777
  2135   00141A  2E30               	decfsz	??_color_click_init^0,f,c
  2136   00141C  D7FC               	bra	u777
  2137   00141E  0000               	nop	
  2138   001420                     
  2139                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  2140   001420  0E03               	movlw	3
  2141   001422  6E2E               	movwf	color_writetoaddr@value^0,c
  2142   001424  0E00               	movlw	0
  2143   001426  ECA2  F00A         	call	_color_writetoaddr
  2144   00142A                     
  2145                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  2146   00142A  0ED5               	movlw	213
  2147   00142C  6E2E               	movwf	color_writetoaddr@value^0,c
  2148   00142E  0E01               	movlw	1
  2149   001430  ECA2  F00A         	call	_color_writetoaddr
  2150   001434  0012               	return		;funcret
  2151   001436                     __end_of_color_click_init:
  2152                           	callstack 0
  2153                           
  2154 ;; *************** function _color_writetoaddr *****************
  2155 ;; Defined at:
  2156 ;;		line 22 in file "color.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;  address         1    wreg     unsigned char 
  2159 ;;  value           1    2[COMRAM] unsigned char 
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;  address         1    3[COMRAM] unsigned char 
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg, status,2, status,0, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2171 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2174 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2175 ;;Total ram usage:        2 bytes
  2176 ;; Hardware stack levels used: 1
  2177 ;; Hardware stack levels required when called: 2
  2178 ;; This function calls:
  2179 ;;		_I2C_2_Master_Start
  2180 ;;		_I2C_2_Master_Stop
  2181 ;;		_I2C_2_Master_Write
  2182 ;; This function is called by:
  2183 ;;		_color_click_init
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           	psect	text14
  2188   001544                     __ptext14:
  2189                           	callstack 0
  2190   001544                     _color_writetoaddr:
  2191                           	callstack 27
  2192                           
  2193                           ;incstack = 0
  2194                           ;color_writetoaddr@address stored from wreg
  2195   001544  6E2F               	movwf	color_writetoaddr@address^0,c
  2196   001546                     
  2197                           ;color.c: 23:     I2C_2_Master_Start();
  2198   001546  ECD9  F00A         	call	_I2C_2_Master_Start	;wreg free
  2199                           
  2200                           ;color.c: 24:     I2C_2_Master_Write(0x52 | 0x00);
  2201   00154A  0E52               	movlw	82
  2202   00154C  ECCE  F00A         	call	_I2C_2_Master_Write
  2203                           
  2204                           ;color.c: 25:     I2C_2_Master_Write(0x80 | address);
  2205   001550  502F               	movf	color_writetoaddr@address^0,w,c
  2206   001552  0980               	iorlw	128
  2207   001554  ECCE  F00A         	call	_I2C_2_Master_Write
  2208                           
  2209                           ;color.c: 26:     I2C_2_Master_Write(value);
  2210   001558  502E               	movf	color_writetoaddr@value^0,w,c
  2211   00155A  ECCE  F00A         	call	_I2C_2_Master_Write
  2212                           
  2213                           ;color.c: 27:     I2C_2_Master_Stop();
  2214   00155E  ECD4  F00A         	call	_I2C_2_Master_Stop	;wreg free
  2215   001562  0012               	return		;funcret
  2216   001564                     __end_of_color_writetoaddr:
  2217                           	callstack 0
  2218                           
  2219 ;; *************** function _I2C_2_Master_Write *****************
  2220 ;; Defined at:
  2221 ;;		line 45 in file "i2c.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  data_byte       1    wreg     unsigned char 
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;  data_byte       1    1[COMRAM] unsigned char 
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  1    wreg      void 
  2228 ;; Registers used:
  2229 ;;		wreg, status,2, status,0, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2236 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2238 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2239 ;;Total ram usage:        1 bytes
  2240 ;; Hardware stack levels used: 1
  2241 ;; Hardware stack levels required when called: 1
  2242 ;; This function calls:
  2243 ;;		_I2C_2_Master_Idle
  2244 ;; This function is called by:
  2245 ;;		_color_writetoaddr
  2246 ;;		_color_read_Red
  2247 ;;		_color_read_Green
  2248 ;;		_color_read_Blue
  2249 ;;		_color_read_Clear
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           	psect	text15
  2254   00159C                     __ptext15:
  2255                           	callstack 0
  2256   00159C                     _I2C_2_Master_Write:
  2257                           	callstack 27
  2258                           
  2259                           ;incstack = 0
  2260                           ;I2C_2_Master_Write@data_byte stored from wreg
  2261   00159C  6E2D               	movwf	I2C_2_Master_Write@data_byte^0,c
  2262   00159E                     
  2263                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  2264   00159E  EC7B  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2265   0015A2                     
  2266                           ;i2c.c: 48:   SSP2BUF = data_byte;
  2267   0015A2  C02D  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  2268   0015A6  0012               	return		;funcret
  2269   0015A8                     __end_of_I2C_2_Master_Write:
  2270                           	callstack 0
  2271                           
  2272 ;; *************** function _I2C_2_Master_Stop *****************
  2273 ;; Defined at:
  2274 ;;		line 39 in file "i2c.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;		None
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;		None
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  1    wreg      void 
  2281 ;; Registers used:
  2282 ;;		wreg, status,2, status,0, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2292 ;;Total ram usage:        0 bytes
  2293 ;; Hardware stack levels used: 1
  2294 ;; Hardware stack levels required when called: 1
  2295 ;; This function calls:
  2296 ;;		_I2C_2_Master_Idle
  2297 ;; This function is called by:
  2298 ;;		_color_writetoaddr
  2299 ;;		_color_read_Red
  2300 ;;		_color_read_Green
  2301 ;;		_color_read_Blue
  2302 ;;		_color_read_Clear
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text16
  2307   0015A8                     __ptext16:
  2308                           	callstack 0
  2309   0015A8                     _I2C_2_Master_Stop:
  2310                           	callstack 27
  2311   0015A8                     
  2312                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2313   0015A8  EC7B  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2314   0015AC                     
  2315                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2316   0015AC  010E               	movlb	14	; () banked
  2317   0015AE  85DA               	bsf	218,2,b	;volatile
  2318   0015B0                     
  2319                           ; BSR set to: 14
  2320   0015B0  0012               	return		;funcret
  2321   0015B2                     __end_of_I2C_2_Master_Stop:
  2322                           	callstack 0
  2323                           
  2324 ;; *************** function _I2C_2_Master_Start *****************
  2325 ;; Defined at:
  2326 ;;		line 27 in file "i2c.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;		None
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;		None
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  1    wreg      void 
  2333 ;; Registers used:
  2334 ;;		wreg, status,2, status,0, cstack
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2344 ;;Total ram usage:        0 bytes
  2345 ;; Hardware stack levels used: 1
  2346 ;; Hardware stack levels required when called: 1
  2347 ;; This function calls:
  2348 ;;		_I2C_2_Master_Idle
  2349 ;; This function is called by:
  2350 ;;		_color_writetoaddr
  2351 ;;		_color_read_Red
  2352 ;;		_color_read_Green
  2353 ;;		_color_read_Blue
  2354 ;;		_color_read_Clear
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357                           
  2358                           	psect	text17
  2359   0015B2                     __ptext17:
  2360                           	callstack 0
  2361   0015B2                     _I2C_2_Master_Start:
  2362                           	callstack 27
  2363   0015B2                     
  2364                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2365   0015B2  EC7B  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2366   0015B6                     
  2367                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2368   0015B6  010E               	movlb	14	; () banked
  2369   0015B8  81DA               	bsf	218,0,b	;volatile
  2370   0015BA                     
  2371                           ; BSR set to: 14
  2372   0015BA  0012               	return		;funcret
  2373   0015BC                     __end_of_I2C_2_Master_Start:
  2374                           	callstack 0
  2375                           
  2376 ;; *************** function _I2C_2_Master_Idle *****************
  2377 ;; Defined at:
  2378 ;;		line 22 in file "i2c.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;		None
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;		None
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      void 
  2385 ;; Registers used:
  2386 ;;		wreg, status,2, status,0
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2394 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2396 ;;Total ram usage:        1 bytes
  2397 ;; Hardware stack levels used: 1
  2398 ;; This function calls:
  2399 ;;		Nothing
  2400 ;; This function is called by:
  2401 ;;		_I2C_2_Master_Start
  2402 ;;		_I2C_2_Master_Stop
  2403 ;;		_I2C_2_Master_Write
  2404 ;;		_I2C_2_Master_RepStart
  2405 ;;		_I2C_2_Master_Read
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text18
  2410   0014F6                     __ptext18:
  2411                           	callstack 0
  2412   0014F6                     _I2C_2_Master_Idle:
  2413                           	callstack 27
  2414   0014F6                     l99:
  2415   0014F6  010E               	movlb	14	; () banked
  2416   0014F8  B5D8               	btfsc	216,2,b	;volatile
  2417   0014FA  EF81  F00A         	goto	u41
  2418   0014FE  EF83  F00A         	goto	u40
  2419   001502                     u41:
  2420   001502  EF7B  F00A         	goto	l99
  2421   001506                     u40:
  2422   001506                     
  2423                           ; BSR set to: 14
  2424   001506  CEDA F02C          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2425   00150A  0E1F               	movlw	31
  2426   00150C  162C               	andwf	??_I2C_2_Master_Idle^0,f,c
  2427   00150E  A4D8               	btfss	status,2,c
  2428   001510  EF8C  F00A         	goto	u51
  2429   001514  EF8E  F00A         	goto	u50
  2430   001518                     u51:
  2431   001518  EF7B  F00A         	goto	l99
  2432   00151C                     u50:
  2433   00151C                     
  2434                           ; BSR set to: 14
  2435   00151C  0012               	return		;funcret
  2436   00151E                     __end_of_I2C_2_Master_Idle:
  2437                           	callstack 0
  2438                           
  2439 ;; *************** function _I2C_2_Master_Init *****************
  2440 ;; Defined at:
  2441 ;;		line 4 in file "i2c.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;		None
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;		None
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  1    wreg      void 
  2448 ;; Registers used:
  2449 ;;		wreg, status,2
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2459 ;;Total ram usage:        0 bytes
  2460 ;; Hardware stack levels used: 1
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_color_click_init
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text19
  2469   0014CC                     __ptext19:
  2470                           	callstack 0
  2471   0014CC                     _I2C_2_Master_Init:
  2472                           	callstack 29
  2473   0014CC                     
  2474                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2475   0014CC  010E               	movlb	14	; () banked
  2476   0014CE  51D9               	movf	217,w,b	;volatile
  2477   0014D0  0BF0               	andlw	-16
  2478   0014D2  0908               	iorlw	8
  2479   0014D4  6FD9               	movwf	217,b	;volatile
  2480   0014D6                     
  2481                           ; BSR set to: 14
  2482                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2483   0014D6  8BD9               	bsf	217,5,b	;volatile
  2484                           
  2485                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2486   0014D8  0E9F               	movlw	159
  2487   0014DA  6FD6               	movwf	214,b	;volatile
  2488   0014DC                     
  2489                           ; BSR set to: 14
  2490                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2491   0014DC  8A84               	bsf	132,5,c	;volatile
  2492   0014DE                     
  2493                           ; BSR set to: 14
  2494                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2495   0014DE  8C84               	bsf	132,6,c	;volatile
  2496   0014E0                     
  2497                           ; BSR set to: 14
  2498                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2499   0014E0  9BA7               	bcf	167,5,b	;volatile
  2500   0014E2                     
  2501                           ; BSR set to: 14
  2502                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2503   0014E2  9DA7               	bcf	167,6,b	;volatile
  2504                           
  2505                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2506   0014E4  0E1D               	movlw	29
  2507   0014E6  6F1D               	movwf	29,b	;volatile
  2508                           
  2509                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2510   0014E8  0E1E               	movlw	30
  2511   0014EA  6F1C               	movwf	28,b	;volatile
  2512                           
  2513                           ;i2c.c: 18:   RD5PPS=0x1C;
  2514   0014EC  0E1C               	movlw	28
  2515   0014EE  6F6F               	movwf	111,b	;volatile
  2516                           
  2517                           ;i2c.c: 19:   RD6PPS=0x1B;
  2518   0014F0  0E1B               	movlw	27
  2519   0014F2  6F70               	movwf	112,b	;volatile
  2520   0014F4                     
  2521                           ; BSR set to: 14
  2522   0014F4  0012               	return		;funcret
  2523   0014F6                     __end_of_I2C_2_Master_Init:
  2524                           	callstack 0
  2525                           
  2526 ;; *************** function _ADC_init *****************
  2527 ;; Defined at:
  2528 ;;		line 9 in file "ADC.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;		None
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;		None
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  1    wreg      void 
  2535 ;; Registers used:
  2536 ;;		wreg, status,2
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2546 ;;Total ram usage:        0 bytes
  2547 ;; Hardware stack levels used: 1
  2548 ;; This function calls:
  2549 ;;		Nothing
  2550 ;; This function is called by:
  2551 ;;		_main
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text20
  2556   001582                     __ptext20:
  2557                           	callstack 0
  2558   001582                     _ADC_init:
  2559                           	callstack 30
  2560   001582                     
  2561                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  2562   001582  8C86               	bsf	134,6,c	;volatile
  2563                           
  2564                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  2565   001584  010E               	movlb	14	; () banked
  2566   001586  8DB4               	bsf	180,6,b	;volatile
  2567                           
  2568                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  2569   001588  010F               	movlb	15	; () banked
  2570   00158A  9958               	bcf	88,4,b	;volatile
  2571   00158C                     
  2572                           ; BSR set to: 15
  2573                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  2574   00158C  0EFC               	movlw	-4
  2575   00158E  1758               	andwf	88,f,b	;volatile
  2576                           
  2577                           ;ADC.c: 17:     ADPCH=0b101110;
  2578   001590  0E2E               	movlw	46
  2579   001592  6F5F               	movwf	95,b	;volatile
  2580   001594                     
  2581                           ; BSR set to: 15
  2582                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  2583   001594  9460               	bcf	96,2,c	;volatile
  2584   001596                     
  2585                           ; BSR set to: 15
  2586                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  2587   001596  8860               	bsf	96,4,c	;volatile
  2588   001598                     
  2589                           ; BSR set to: 15
  2590                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  2591   001598  8E60               	bsf	96,7,c	;volatile
  2592   00159A                     
  2593                           ; BSR set to: 15
  2594   00159A  0012               	return		;funcret
  2595   00159C                     __end_of_ADC_init:
  2596                           	callstack 0
  2597                           
  2598                           	psect	rparam
  2599   000000                     
  2600                           	psect	config
  2601                           
  2602                           ;Config register CONFIG1L @ 0x300000
  2603                           ;	External Oscillator mode Selection bits
  2604                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2605                           ;	Power-up default value for COSC bits
  2606                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2607   300000                     	org	3145728
  2608   300000  AA                 	db	170
  2609                           
  2610                           ;Config register CONFIG1H @ 0x300001
  2611                           ;	unspecified, using default values
  2612                           ;	Clock Out Enable bit
  2613                           ;	CLKOUTEN = 0x1, unprogrammed default
  2614                           ;	Clock Switch Enable bit
  2615                           ;	CSWEN = 0x1, unprogrammed default
  2616                           ;	Fail-Safe Clock Monitor Enable bit
  2617                           ;	FCMEN = 0x1, unprogrammed default
  2618   300001                     	org	3145729
  2619   300001  FF                 	db	255
  2620                           
  2621                           ;Config register CONFIG3L @ 0x300004
  2622                           ;	WDT Period Select bits
  2623                           ;	WDTCPS = 0x1F, unprogrammed default
  2624                           ;	WDT operating mode
  2625                           ;	WDTE = OFF, WDT Disabled
  2626   300004                     	org	3145732
  2627   300004  9F                 	db	159
  2628                           
  2629                           ;Config register CONFIG3H @ 0x300005
  2630                           ;	unspecified, using default values
  2631                           ;	WDT Window Select bits
  2632                           ;	WDTCWS = 0x7, unprogrammed default
  2633                           ;	WDT input clock selector
  2634                           ;	WDTCCS = 0x7, unprogrammed default
  2635   300005                     	org	3145733
  2636   300005  FF                 	db	255
  2637                           tosu	equ	0xFFF
  2638                           tosh	equ	0xFFE
  2639                           tosl	equ	0xFFD
  2640                           stkptr	equ	0xFFC
  2641                           pclatu	equ	0xFFB
  2642                           pclath	equ	0xFFA
  2643                           pcl	equ	0xFF9
  2644                           tblptru	equ	0xFF8
  2645                           tblptrh	equ	0xFF7
  2646                           tblptrl	equ	0xFF6
  2647                           tablat	equ	0xFF5
  2648                           prodh	equ	0xFF4
  2649                           prodl	equ	0xFF3
  2650                           indf0	equ	0xFEF
  2651                           postinc0	equ	0xFEE
  2652                           postdec0	equ	0xFED
  2653                           preinc0	equ	0xFEC
  2654                           plusw0	equ	0xFEB
  2655                           fsr0h	equ	0xFEA
  2656                           fsr0l	equ	0xFE9
  2657                           wreg	equ	0xFE8
  2658                           indf1	equ	0xFE7
  2659                           postinc1	equ	0xFE6
  2660                           postdec1	equ	0xFE5
  2661                           preinc1	equ	0xFE4
  2662                           plusw1	equ	0xFE3
  2663                           fsr1h	equ	0xFE2
  2664                           fsr1l	equ	0xFE1
  2665                           bsr	equ	0xFE0
  2666                           indf2	equ	0xFDF
  2667                           postinc2	equ	0xFDE
  2668                           postdec2	equ	0xFDD
  2669                           preinc2	equ	0xFDC
  2670                           plusw2	equ	0xFDB
  2671                           fsr2h	equ	0xFDA
  2672                           fsr2l	equ	0xFD9
  2673                           status	equ	0xFD8
>>>>>>> Movement

Data Sizes:
    Strings     94
    Constant    0
    Data        1
    BSS         123
=======
  4821   0022EC  0100               	movlb	0	; () banked
  4822   0022EE  A1FC               	btfss	_flags& (0+255),0,b
  4823   0022F0  EF7C  F011         	goto	u2141
  4824   0022F4  EF7E  F011         	goto	u2140
  4825   0022F8                     u2141:
  4826   0022F8  EF86  F011         	goto	l3265
  4827   0022FC                     u2140:
  4828   0022FC                     
  4829                           ; BSR set to: 0
  4830                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  4831   0022FC  C010  F009         	movff	pad@buf,fputs@s
  4832   002300  C011  F00A         	movff	pad@buf+1,fputs@s+1
  4833   002304  C00F  F00B         	movff	pad@fp,fputs@fp
  4834   002308  EC54  F013         	call	_fputs	;wreg free
  4835   00230C                     l3265:
  4836                           
  4837                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  4838   00230C  BE13               	btfsc	(pad@p+1)^0,7,c
  4839   00230E  EF8D  F011         	goto	u2150
  4840   002312  EF8B  F011         	goto	u2151
  4841   002316                     u2151:
  4842   002316  EF91  F011         	goto	l1169
  4843   00231A                     u2150:
  4844   00231A                     
  4845                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  4846   00231A  0E00               	movlw	0
  4847   00231C  6E13               	movwf	(pad@p+1)^0,c
  4848   00231E  0E00               	movlw	0
  4849   002320  6E12               	movwf	pad@p^0,c
  4850   002322                     l1169:
  4851                           
  4852                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  4853   002322  0E00               	movlw	0
  4854   002324  6E16               	movwf	(pad@i+1)^0,c
  4855   002326  0E00               	movlw	0
  4856   002328  6E15               	movwf	pad@i^0,c
  4857                           
  4858                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  4859   00232A  EFA1  F011         	goto	l3273
  4860   00232E                     l3269:
  4861                           
  4862                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  4863   00232E  0E00               	movlw	0
  4864   002330  6E02               	movwf	(fputc@c+1)^0,c
  4865   002332  0E20               	movlw	32
  4866   002334  6E01               	movwf	fputc@c^0,c
  4867   002336  C00F  F003         	movff	pad@fp,fputc@fp
  4868   00233A  EC81  F010         	call	_fputc	;wreg free
  4869   00233E                     
  4870                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  4871   00233E  4A15               	infsnz	pad@i^0,f,c
  4872   002340  2A16               	incf	(pad@i+1)^0,f,c
  4873   002342                     l3273:
  4874                           
  4875                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  4876   002342  5012               	movf	pad@p^0,w,c
  4877   002344  5C15               	subwf	pad@i^0,w,c
  4878   002346  5016               	movf	(pad@i+1)^0,w,c
  4879   002348  0A80               	xorlw	128
  4880   00234A  6E14               	movwf	??_pad^0,c
  4881   00234C  5013               	movf	(pad@p+1)^0,w,c
  4882   00234E  0A80               	xorlw	128
  4883   002350  5814               	subwfb	??_pad^0,w,c
  4884   002352  A0D8               	btfss	status,0,c
  4885   002354  EFAE  F011         	goto	u2161
  4886   002358  EFB0  F011         	goto	u2160
  4887   00235C                     u2161:
  4888   00235C  EF97  F011         	goto	l3269
  4889   002360                     u2160:
  4890   002360                     
  4891                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  4892   002360  0100               	movlb	0	; () banked
  4893   002362  B1FC               	btfsc	_flags& (0+255),0,b
  4894   002364  EFB6  F011         	goto	u2171
  4895   002368  EFB8  F011         	goto	u2170
  4896   00236C                     u2171:
  4897   00236C  EFC0  F011         	goto	l1174
  4898   002370                     u2170:
  4899   002370                     
  4900                           ; BSR set to: 0
  4901                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  4902   002370  C010  F009         	movff	pad@buf,fputs@s
  4903   002374  C011  F00A         	movff	pad@buf+1,fputs@s+1
  4904   002378  C00F  F00B         	movff	pad@fp,fputs@fp
  4905   00237C  EC54  F013         	call	_fputs	;wreg free
  4906   002380                     l1174:
  4907   002380  0012               	return		;funcret
  4908   002382                     __end_of_pad:
  4909                           	callstack 0
  4910                           
  4911 ;; *************** function _fputs *****************
  4912 ;; Defined at:
  4913 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  s               2    8[COMRAM] PTR const unsigned char 
  4916 ;;		 -> dbuf(32), 
  4917 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  4918 ;;		 -> sprintf@f(12), 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  i               2   12[COMRAM] int 
  4921 ;;  c               1   11[COMRAM] unsigned char 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  2    8[COMRAM] int 
  4924 ;; Registers used:
  4925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4931 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4932 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4934 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4935 ;;Total ram usage:        6 bytes
  4936 ;; Hardware stack levels used: 1
  4937 ;; Hardware stack levels required when called: 2
  4938 ;; This function calls:
  4939 ;;		_fputc
  4940 ;; This function is called by:
  4941 ;;		_pad
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text22
  4946   0026A8                     __ptext22:
  4947                           	callstack 0
  4948   0026A8                     _fputs:
  4949                           	callstack 22
  4950   0026A8  0E00               	movlw	0
  4951   0026AA  6E0E               	movwf	(fputs@i+1)^0,c
  4952   0026AC  0E00               	movlw	0
  4953   0026AE  6E0D               	movwf	fputs@i^0,c
  4954   0026B0  EF63  F013         	goto	l3173
  4955   0026B4                     l3169:
  4956   0026B4  C00C  F001         	movff	fputs@c,fputc@c
  4957   0026B8  6A02               	clrf	(fputc@c+1)^0,c
  4958   0026BA  C00B  F003         	movff	fputs@fp,fputc@fp
  4959   0026BE  EC81  F010         	call	_fputc	;wreg free
  4960   0026C2  4A0D               	infsnz	fputs@i^0,f,c
  4961   0026C4  2A0E               	incf	(fputs@i+1)^0,f,c
  4962   0026C6                     l3173:
  4963   0026C6  500D               	movf	fputs@i^0,w,c
  4964   0026C8  2409               	addwf	fputs@s^0,w,c
  4965   0026CA  6ED9               	movwf	fsr2l,c
  4966   0026CC  500E               	movf	(fputs@i+1)^0,w,c
  4967   0026CE  200A               	addwfc	(fputs@s+1)^0,w,c
  4968   0026D0  6EDA               	movwf	fsr2h,c
  4969   0026D2  50DF               	movf	indf2,w,c
  4970   0026D4  6E0C               	movwf	fputs@c^0,c
  4971   0026D6  500C               	movf	fputs@c^0,w,c
  4972   0026D8  A4D8               	btfss	status,2,c
  4973   0026DA  EF71  F013         	goto	u2011
  4974   0026DE  EF73  F013         	goto	u2010
  4975   0026E2                     u2011:
  4976   0026E2  EF5A  F013         	goto	l3169
  4977   0026E6                     u2010:
  4978   0026E6  0012               	return		;funcret
  4979   0026E8                     __end_of_fputs:
  4980                           	callstack 0
  4981                           
  4982 ;; *************** function _fputc *****************
  4983 ;; Defined at:
  4984 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;  c               2    0[COMRAM] int 
  4987 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  4988 ;;		 -> sprintf@f(12), 
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;		None
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  2    0[COMRAM] int 
  4993 ;; Registers used:
  4994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5000 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5002 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5003 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5004 ;;Total ram usage:        8 bytes
  5005 ;; Hardware stack levels used: 1
  5006 ;; Hardware stack levels required when called: 1
  5007 ;; This function calls:
  5008 ;;		_putch
  5009 ;; This function is called by:
  5010 ;;		_pad
  5011 ;;		_vfpfcnvrt
  5012 ;;		_fputs
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text23
  5017   002102                     __ptext23:
  5018                           	callstack 0
  5019   002102                     _fputc:
  5020                           	callstack 25
  5021   002102  5003               	movf	fputc@fp^0,w,c
  5022   002104  B4D8               	btfsc	status,2,c
  5023   002106  EF87  F010         	goto	u1971
  5024   00210A  EF89  F010         	goto	u1970
  5025   00210E                     u1971:
  5026   00210E  EF91  F010         	goto	l3157
  5027   002112                     u1970:
  5028   002112  5003               	movf	fputc@fp^0,w,c
  5029   002114  A4D8               	btfss	status,2,c
  5030   002116  EF8F  F010         	goto	u1981
  5031   00211A  EF91  F010         	goto	u1980
  5032   00211E                     u1981:
  5033   00211E  EF96  F010         	goto	l3159
  5034   002122                     u1980:
  5035   002122                     l3157:
  5036   002122  5001               	movf	fputc@c^0,w,c
  5037   002124  EC97  F014         	call	_putch
  5038   002128  EFD5  F010         	goto	l1238
  5039   00212C                     l3159:
  5040   00212C  5003               	movf	fputc@fp^0,w,c
  5041   00212E  6ED9               	movwf	fsr2l,c
  5042   002130  6ADA               	clrf	fsr2h,c
  5043   002132  0E0A               	movlw	10
  5044   002134  26D9               	addwf	fsr2l,f,c
  5045   002136  50DE               	movf	postinc2,w,c
  5046   002138  10DE               	iorwf	postinc2,w,c
  5047   00213A  B4D8               	btfsc	status,2,c
  5048   00213C  EFA2  F010         	goto	u1991
  5049   002140  EFA4  F010         	goto	u1990
  5050   002144                     u1991:
  5051   002144  EFBD  F010         	goto	l3163
  5052   002148                     u1990:
  5053   002148  5003               	movf	fputc@fp^0,w,c
  5054   00214A  6ED9               	movwf	fsr2l,c
  5055   00214C  6ADA               	clrf	fsr2h,c
  5056   00214E  0E0A               	movlw	10
  5057   002150  26D9               	addwf	fsr2l,f,c
  5058   002152  5003               	movf	fputc@fp^0,w,c
  5059   002154  6EE1               	movwf	fsr1l,c
  5060   002156  6AE2               	clrf	fsr1h,c
  5061   002158  0E03               	movlw	3
  5062   00215A  26E1               	addwf	fsr1l,f,c
  5063   00215C  50DE               	movf	postinc2,w,c
  5064   00215E  5CE6               	subwf	postinc1,w,c
  5065   002160  50E6               	movf	postinc1,w,c
  5066   002162  0A80               	xorlw	128
  5067   002164  6E08               	movwf	(??_fputc+4)^0,c
  5068   002166  50DE               	movf	postinc2,w,c
  5069   002168  0A80               	xorlw	128
  5070   00216A  5808               	subwfb	(??_fputc+4)^0,w,c
  5071   00216C  B0D8               	btfsc	status,0,c
  5072   00216E  EFBB  F010         	goto	u2001
  5073   002172  EFBD  F010         	goto	u2000
  5074   002176                     u2001:
  5075   002176  EFD5  F010         	goto	l1238
  5076   00217A                     u2000:
  5077   00217A                     l3163:
  5078   00217A  5003               	movf	fputc@fp^0,w,c
  5079   00217C  6ED9               	movwf	fsr2l,c
  5080   00217E  6ADA               	clrf	fsr2h,c
  5081   002180  0E03               	movlw	3
  5082   002182  26D9               	addwf	fsr2l,f,c
  5083   002184  50DF               	movf	indf2,w,c
  5084   002186  6E04               	movwf	??_fputc^0,c
  5085   002188  5003               	movf	fputc@fp^0,w,c
  5086   00218A  6ED9               	movwf	fsr2l,c
  5087   00218C  6ADA               	clrf	fsr2h,c
  5088   00218E  50DF               	movf	indf2,w,c
  5089   002190  2404               	addwf	??_fputc^0,w,c
  5090   002192  6ED9               	movwf	fsr2l,c
  5091   002194  6ADA               	clrf	fsr2h,c
  5092   002196  C001  FFDF         	movff	fputc@c,indf2
  5093   00219A  5003               	movf	fputc@fp^0,w,c
  5094   00219C  6ED9               	movwf	fsr2l,c
  5095   00219E  6ADA               	clrf	fsr2h,c
  5096   0021A0  0E03               	movlw	3
  5097   0021A2  26D9               	addwf	fsr2l,f,c
  5098   0021A4  2ADE               	incf	postinc2,f,c
  5099   0021A6  0E00               	movlw	0
  5100   0021A8  22DD               	addwfc	postdec2,f,c
  5101   0021AA                     l1238:
  5102   0021AA  0012               	return		;funcret
  5103   0021AC                     __end_of_fputc:
  5104                           	callstack 0
  5105                           
  5106 ;; *************** function _putch *****************
  5107 ;; Defined at:
  5108 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;  c               1    wreg     unsigned char 
  5111 ;; Auto vars:     Size  Location     Type
  5112 ;;  c               1    0[COMRAM] unsigned char 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  1    wreg      void 
  5115 ;; Registers used:
  5116 ;;		wreg
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5126 ;;Total ram usage:        0 bytes
  5127 ;; Hardware stack levels used: 1
  5128 ;; This function calls:
  5129 ;;		Nothing
  5130 ;; This function is called by:
  5131 ;;		_fputc
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           	psect	text24
  5136   00292E                     __ptext24:
  5137                           	callstack 0
  5138   00292E                     _putch:
  5139                           	callstack 25
  5140   00292E  0012               	return		;funcret
  5141   002930                     __end_of_putch:
  5142                           	callstack 0
  5143                           
  5144 ;; *************** function _abs *****************
  5145 ;; Defined at:
  5146 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  a               2    6[COMRAM] int 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;		None
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  2    6[COMRAM] int 
  5153 ;; Registers used:
  5154 ;;		wreg, status,2, status,0
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5160 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5162 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5163 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5164 ;;Total ram usage:        4 bytes
  5165 ;; Hardware stack levels used: 1
  5166 ;; This function calls:
  5167 ;;		Nothing
  5168 ;; This function is called by:
  5169 ;;		_dtoa
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           	psect	text25
  5174   002786                     __ptext25:
  5175                           	callstack 0
  5176   002786                     _abs:
  5177                           	callstack 25
  5178   002786  BE08               	btfsc	(abs@a+1)^0,7,c
  5179   002788  EFC8  F013         	goto	u2181
  5180   00278C  EFCA  F013         	goto	u2180
  5181   002790                     u2181:
  5182   002790  EFD0  F013         	goto	l1223
  5183   002794                     u2180:
  5184   002794  C007  F007         	movff	abs@a,?_abs
  5185   002798  C008  F008         	movff	abs@a+1,?_abs+1
  5186   00279C  EFDC  F013         	goto	l1226
  5187   0027A0                     l1223:
  5188   0027A0  C007  F009         	movff	abs@a,??_abs
  5189   0027A4  C008  F00A         	movff	abs@a+1,??_abs+1
  5190   0027A8  1E09               	comf	??_abs^0,f,c
  5191   0027AA  1E0A               	comf	(??_abs+1)^0,f,c
  5192   0027AC  4A09               	infsnz	??_abs^0,f,c
  5193   0027AE  2A0A               	incf	(??_abs+1)^0,f,c
  5194   0027B0  C009  F007         	movff	??_abs,?_abs
  5195   0027B4  C00A  F008         	movff	??_abs+1,?_abs+1
  5196   0027B8                     l1226:
  5197   0027B8  0012               	return		;funcret
  5198   0027BA                     __end_of_abs:
  5199                           	callstack 0
  5200                           
  5201 ;; *************** function ___awmod *****************
  5202 ;; Defined at:
  5203 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;  dividend        2    0[COMRAM] int 
  5206 ;;  divisor         2    2[COMRAM] int 
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;  sign            1    5[COMRAM] unsigned char 
  5209 ;;  counter         1    4[COMRAM] unsigned char 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  2    0[COMRAM] int 
  5212 ;; Registers used:
  5213 ;;		wreg, status,2, status,0
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5219 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5222 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5223 ;;Total ram usage:        6 bytes
  5224 ;; Hardware stack levels used: 1
  5225 ;; This function calls:
  5226 ;;		Nothing
  5227 ;; This function is called by:
  5228 ;;		_dtoa
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           	psect	text26
  5233   001FA4                     __ptext26:
  5234                           	callstack 0
  5235   001FA4                     ___awmod:
  5236                           	callstack 25
  5237   001FA4  0E00               	movlw	0
  5238   001FA6  6E06               	movwf	___awmod@sign^0,c
  5239   001FA8  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  5240   001FAA  EFDB  F00F         	goto	u2080
  5241   001FAE  EFD9  F00F         	goto	u2081
  5242   001FB2                     u2081:
  5243   001FB2  EFE1  F00F         	goto	l3233
  5244   001FB6                     u2080:
  5245   001FB6  6C01               	negf	___awmod@dividend^0,c
  5246   001FB8  1E02               	comf	(___awmod@dividend+1)^0,f,c
  5247   001FBA  B0D8               	btfsc	status,0,c
  5248   001FBC  2A02               	incf	(___awmod@dividend+1)^0,f,c
  5249   001FBE  0E01               	movlw	1
  5250   001FC0  6E06               	movwf	___awmod@sign^0,c
  5251   001FC2                     l3233:
  5252   001FC2  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  5253   001FC4  EFE8  F00F         	goto	u2090
  5254   001FC8  EFE6  F00F         	goto	u2091
  5255   001FCC                     u2091:
  5256   001FCC  EFEC  F00F         	goto	l3237
  5257   001FD0                     u2090:
  5258   001FD0  6C03               	negf	___awmod@divisor^0,c
  5259   001FD2  1E04               	comf	(___awmod@divisor+1)^0,f,c
  5260   001FD4  B0D8               	btfsc	status,0,c
  5261   001FD6  2A04               	incf	(___awmod@divisor+1)^0,f,c
  5262   001FD8                     l3237:
  5263   001FD8  5003               	movf	___awmod@divisor^0,w,c
  5264   001FDA  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  5265   001FDC  B4D8               	btfsc	status,2,c
  5266   001FDE  EFF3  F00F         	goto	u2101
  5267   001FE2  EFF5  F00F         	goto	u2100
  5268   001FE6                     u2101:
  5269   001FE6  EF19  F010         	goto	l3253
  5270   001FEA                     u2100:
  5271   001FEA  0E01               	movlw	1
  5272   001FEC  6E05               	movwf	___awmod@counter^0,c
  5273   001FEE  EFFD  F00F         	goto	l3243
  5274   001FF2                     l3241:
  5275   001FF2  90D8               	bcf	status,0,c
  5276   001FF4  3603               	rlcf	___awmod@divisor^0,f,c
  5277   001FF6  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  5278   001FF8  2A05               	incf	___awmod@counter^0,f,c
  5279   001FFA                     l3243:
  5280   001FFA  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  5281   001FFC  EF02  F010         	goto	u2111
  5282   002000  EF04  F010         	goto	u2110
  5283   002004                     u2111:
  5284   002004  EFF9  F00F         	goto	l3241
  5285   002008                     u2110:
  5286   002008                     l3245:
  5287   002008  5003               	movf	___awmod@divisor^0,w,c
  5288   00200A  5C01               	subwf	___awmod@dividend^0,w,c
  5289   00200C  5004               	movf	(___awmod@divisor+1)^0,w,c
  5290   00200E  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  5291   002010  A0D8               	btfss	status,0,c
  5292   002012  EF0D  F010         	goto	u2121
  5293   002016  EF0F  F010         	goto	u2120
  5294   00201A                     u2121:
  5295   00201A  EF13  F010         	goto	l3249
  5296   00201E                     u2120:
  5297   00201E  5003               	movf	___awmod@divisor^0,w,c
  5298   002020  5E01               	subwf	___awmod@dividend^0,f,c
  5299   002022  5004               	movf	(___awmod@divisor+1)^0,w,c
  5300   002024  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  5301   002026                     l3249:
  5302   002026  90D8               	bcf	status,0,c
  5303   002028  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  5304   00202A  3203               	rrcf	___awmod@divisor^0,f,c
  5305   00202C  2E05               	decfsz	___awmod@counter^0,f,c
  5306   00202E  EF04  F010         	goto	l3245
  5307   002032                     l3253:
  5308   002032  5006               	movf	___awmod@sign^0,w,c
  5309   002034  B4D8               	btfsc	status,2,c
  5310   002036  EF1F  F010         	goto	u2131
  5311   00203A  EF21  F010         	goto	u2130
  5312   00203E                     u2131:
  5313   00203E  EF25  F010         	goto	l3257
  5314   002042                     u2130:
  5315   002042  6C01               	negf	___awmod@dividend^0,c
  5316   002044  1E02               	comf	(___awmod@dividend+1)^0,f,c
  5317   002046  B0D8               	btfsc	status,0,c
  5318   002048  2A02               	incf	(___awmod@dividend+1)^0,f,c
  5319   00204A                     l3257:
  5320   00204A  C001  F001         	movff	___awmod@dividend,?___awmod
  5321   00204E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5322   002052  0012               	return		;funcret
  5323   002054                     __end_of___awmod:
  5324                           	callstack 0
  5325                           
  5326 ;; *************** function ___awdiv *****************
  5327 ;; Defined at:
  5328 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  dividend        2    0[COMRAM] int 
  5331 ;;  divisor         2    2[COMRAM] int 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  quotient        2    6[COMRAM] int 
  5334 ;;  sign            1    5[COMRAM] unsigned char 
  5335 ;;  counter         1    4[COMRAM] unsigned char 
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  2    0[COMRAM] int 
  5338 ;; Registers used:
  5339 ;;		wreg, status,2, status,0
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5346 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5348 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5349 ;;Total ram usage:        8 bytes
  5350 ;; Hardware stack levels used: 1
  5351 ;; This function calls:
  5352 ;;		Nothing
  5353 ;; This function is called by:
  5354 ;;		_dtoa
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text27
  5359   001EE0                     __ptext27:
  5360                           	callstack 0
  5361   001EE0                     ___awdiv:
  5362                           	callstack 25
  5363   001EE0  0E00               	movlw	0
  5364   001EE2  6E06               	movwf	___awdiv@sign^0,c
  5365   001EE4  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  5366   001EE6  EF79  F00F         	goto	u2020
  5367   001EEA  EF77  F00F         	goto	u2021
  5368   001EEE                     u2021:
  5369   001EEE  EF7F  F00F         	goto	l3189
  5370   001EF2                     u2020:
  5371   001EF2  6C03               	negf	___awdiv@divisor^0,c
  5372   001EF4  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  5373   001EF6  B0D8               	btfsc	status,0,c
  5374   001EF8  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  5375   001EFA  0E01               	movlw	1
  5376   001EFC  6E06               	movwf	___awdiv@sign^0,c
  5377   001EFE                     l3189:
  5378   001EFE  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  5379   001F00  EF86  F00F         	goto	u2030
  5380   001F04  EF84  F00F         	goto	u2031
  5381   001F08                     u2031:
  5382   001F08  EF8C  F00F         	goto	l3195
  5383   001F0C                     u2030:
  5384   001F0C  6C01               	negf	___awdiv@dividend^0,c
  5385   001F0E  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  5386   001F10  B0D8               	btfsc	status,0,c
  5387   001F12  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  5388   001F14  0E01               	movlw	1
  5389   001F16  1A06               	xorwf	___awdiv@sign^0,f,c
  5390   001F18                     l3195:
  5391   001F18  0E00               	movlw	0
  5392   001F1A  6E08               	movwf	(___awdiv@quotient+1)^0,c
  5393   001F1C  0E00               	movlw	0
  5394   001F1E  6E07               	movwf	___awdiv@quotient^0,c
  5395   001F20  5003               	movf	___awdiv@divisor^0,w,c
  5396   001F22  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  5397   001F24  B4D8               	btfsc	status,2,c
  5398   001F26  EF97  F00F         	goto	u2041
  5399   001F2A  EF99  F00F         	goto	u2040
  5400   001F2E                     u2041:
  5401   001F2E  EFC1  F00F         	goto	l3217
  5402   001F32                     u2040:
  5403   001F32  0E01               	movlw	1
  5404   001F34  6E05               	movwf	___awdiv@counter^0,c
  5405   001F36  EFA1  F00F         	goto	l3203
  5406   001F3A                     l3201:
  5407   001F3A  90D8               	bcf	status,0,c
  5408   001F3C  3603               	rlcf	___awdiv@divisor^0,f,c
  5409   001F3E  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  5410   001F40  2A05               	incf	___awdiv@counter^0,f,c
  5411   001F42                     l3203:
  5412   001F42  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  5413   001F44  EFA6  F00F         	goto	u2051
  5414   001F48  EFA8  F00F         	goto	u2050
  5415   001F4C                     u2051:
  5416   001F4C  EF9D  F00F         	goto	l3201
  5417   001F50                     u2050:
  5418   001F50                     l3205:
  5419   001F50  90D8               	bcf	status,0,c
  5420   001F52  3607               	rlcf	___awdiv@quotient^0,f,c
  5421   001F54  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  5422   001F56  5003               	movf	___awdiv@divisor^0,w,c
  5423   001F58  5C01               	subwf	___awdiv@dividend^0,w,c
  5424   001F5A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  5425   001F5C  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  5426   001F5E  A0D8               	btfss	status,0,c
  5427   001F60  EFB4  F00F         	goto	u2061
  5428   001F64  EFB6  F00F         	goto	u2060
  5429   001F68                     u2061:
  5430   001F68  EFBB  F00F         	goto	l3213
  5431   001F6C                     u2060:
  5432   001F6C  5003               	movf	___awdiv@divisor^0,w,c
  5433   001F6E  5E01               	subwf	___awdiv@dividend^0,f,c
  5434   001F70  5004               	movf	(___awdiv@divisor+1)^0,w,c
  5435   001F72  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  5436   001F74  8007               	bsf	___awdiv@quotient^0,0,c
  5437   001F76                     l3213:
  5438   001F76  90D8               	bcf	status,0,c
  5439   001F78  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  5440   001F7A  3203               	rrcf	___awdiv@divisor^0,f,c
  5441   001F7C  2E05               	decfsz	___awdiv@counter^0,f,c
  5442   001F7E  EFA8  F00F         	goto	l3205
  5443   001F82                     l3217:
  5444   001F82  5006               	movf	___awdiv@sign^0,w,c
  5445   001F84  B4D8               	btfsc	status,2,c
  5446   001F86  EFC7  F00F         	goto	u2071
  5447   001F8A  EFC9  F00F         	goto	u2070
  5448   001F8E                     u2071:
  5449   001F8E  EFCD  F00F         	goto	l3221
  5450   001F92                     u2070:
  5451   001F92  6C07               	negf	___awdiv@quotient^0,c
  5452   001F94  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  5453   001F96  B0D8               	btfsc	status,0,c
  5454   001F98  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  5455   001F9A                     l3221:
  5456   001F9A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5457   001F9E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5458   001FA2  0012               	return		;funcret
  5459   001FA4                     __end_of___awdiv:
  5460                           	callstack 0
  5461                           
  5462 ;; *************** function _sendStringSerial4 *****************
  5463 ;; Defined at:
  5464 ;;		line 41 in file "serial.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  string          1    1[COMRAM] PTR unsigned char 
  5467 ;;		 -> send2USART@hue_char(50), send2USART@buf(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  5468 ;;		 -> test@led_state(50), 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5480 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5483 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5484 ;;Total ram usage:        1 bytes
  5485 ;; Hardware stack levels used: 1
  5486 ;; Hardware stack levels required when called: 1
  5487 ;; This function calls:
  5488 ;;		_sendCharSerial4
  5489 ;; This function is called by:
  5490 ;;		_test
  5491 ;;		_calibration_routine
  5492 ;;		_send2USART
  5493 ;;		_sendAllReadings
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text28
  5498   0027BA                     __ptext28:
  5499                           	callstack 0
  5500   0027BA                     _sendStringSerial4:
  5501                           	callstack 28
  5502   0027BA                     
  5503                           ;serial.c: 44:     while(*string != 0){
  5504   0027BA  EFEA  F013         	goto	l3519
  5505   0027BE                     l3513:
  5506                           
  5507                           ;serial.c: 46:   sendCharSerial4(*string++);
  5508   0027BE  5002               	movf	sendStringSerial4@string^0,w,c
  5509   0027C0  6ED9               	movwf	fsr2l,c
  5510   0027C2  6ADA               	clrf	fsr2h,c
  5511   0027C4  50DF               	movf	indf2,w,c
  5512   0027C6  EC76  F014         	call	_sendCharSerial4
  5513   0027CA  2A02               	incf	sendStringSerial4@string^0,f,c
  5514   0027CC                     
  5515                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  5516   0027CC  0E6A               	movlw	106
  5517   0027CE                     u2947:
  5518   0027CE  2EE8               	decfsz	wreg,f,c
  5519   0027D0  D7FE               	bra	u2947
  5520   0027D2  D000               	nop2	
  5521   0027D4                     l3519:
  5522                           
  5523                           ;serial.c: 44:     while(*string != 0){
  5524   0027D4  5002               	movf	sendStringSerial4@string^0,w,c
  5525   0027D6  6ED9               	movwf	fsr2l,c
  5526   0027D8  6ADA               	clrf	fsr2h,c
  5527   0027DA  50DF               	movf	indf2,w,c
  5528   0027DC  A4D8               	btfss	status,2,c
  5529   0027DE  EFF3  F013         	goto	u2451
  5530   0027E2  EFF5  F013         	goto	u2450
  5531   0027E6                     u2451:
  5532   0027E6  EFDF  F013         	goto	l3513
  5533   0027EA                     u2450:
  5534   0027EA  0012               	return		;funcret
  5535   0027EC                     __end_of_sendStringSerial4:
  5536                           	callstack 0
  5537                           
  5538 ;; *************** function _sendCharSerial4 *****************
  5539 ;; Defined at:
  5540 ;;		line 35 in file "serial.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;  charToSend      1    wreg     unsigned char 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  charToSend      1    0[COMRAM] unsigned char 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  1    wreg      void 
  5547 ;; Registers used:
  5548 ;;		wreg
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5555 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5557 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5558 ;;Total ram usage:        1 bytes
  5559 ;; Hardware stack levels used: 1
  5560 ;; This function calls:
  5561 ;;		Nothing
  5562 ;; This function is called by:
  5563 ;;		_sendStringSerial4
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           	psect	text29
  5568   0028EC                     __ptext29:
  5569                           	callstack 0
  5570   0028EC                     _sendCharSerial4:
  5571                           	callstack 28
  5572                           
  5573                           ;incstack = 0
  5574                           ;sendCharSerial4@charToSend stored from wreg
  5575   0028EC  6E01               	movwf	sendCharSerial4@charToSend^0,c
  5576   0028EE                     l414:
  5577   0028EE  010E               	movlb	14	; () banked
  5578   0028F0  A537               	btfss	55,2,b	;volatile
  5579   0028F2  EF7D  F014         	goto	u2411
  5580   0028F6  EF7F  F014         	goto	u2410
  5581   0028FA                     u2411:
  5582   0028FA  EF77  F014         	goto	l414
  5583   0028FE                     u2410:
  5584   0028FE                     
  5585                           ; BSR set to: 14
  5586                           ;serial.c: 37:     TX4REG = charToSend;
  5587   0028FE  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  5588   002902                     
  5589                           ; BSR set to: 14
  5590   002902  0012               	return		;funcret
  5591   002904                     __end_of_sendCharSerial4:
  5592                           	callstack 0
  5593                           
  5594 ;; *************** function _color_read_Red *****************
  5595 ;; Defined at:
  5596 ;;		line 30 in file "color.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;		None
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;  tmp             2    9[COMRAM] unsigned int 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  2    4[COMRAM] unsigned int 
  5603 ;; Registers used:
  5604 ;;		wreg, status,2, status,0, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5610 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5611 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5612 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5613 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5614 ;;Total ram usage:        7 bytes
  5615 ;; Hardware stack levels used: 1
  5616 ;; Hardware stack levels required when called: 2
  5617 ;; This function calls:
  5618 ;;		_I2C_2_Master_Read
  5619 ;;		_I2C_2_Master_RepStart
  5620 ;;		_I2C_2_Master_Start
  5621 ;;		_I2C_2_Master_Stop
  5622 ;;		_I2C_2_Master_Write
  5623 ;; This function is called by:
  5624 ;;		_calibration_routine
  5625 ;;		_reading_values
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text30
  5630   0024E4                     __ptext30:
  5631                           	callstack 0
  5632   0024E4                     _color_read_Red:
  5633                           	callstack 26
  5634   0024E4                     
  5635                           ;color.c: 32:  unsigned int tmp;;color.c: 33:  I2C_2_Master_Start();
  5636   0024E4  EC8D  F014         	call	_I2C_2_Master_Start	;wreg free
  5637                           
  5638                           ;color.c: 34:  I2C_2_Master_Write(0x52 | 0x00);
  5639   0024E8  0E52               	movlw	82
  5640   0024EA  EC82  F014         	call	_I2C_2_Master_Write
  5641                           
  5642                           ;color.c: 35:  I2C_2_Master_Write(0xA0 | 0x16);
  5643   0024EE  0EB6               	movlw	182
  5644   0024F0  EC82  F014         	call	_I2C_2_Master_Write
  5645                           
  5646                           ;color.c: 36:  I2C_2_Master_RepStart();
  5647   0024F4  EC92  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5648                           
  5649                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x01);
  5650   0024F8  0E53               	movlw	83
  5651   0024FA  EC82  F014         	call	_I2C_2_Master_Write
  5652                           
  5653                           ;color.c: 38:  tmp=I2C_2_Master_Read(1);
  5654   0024FE  0E01               	movlw	1
  5655   002500  EC33  F013         	call	_I2C_2_Master_Read
  5656   002504  6E07               	movwf	??_color_read_Red^0,c
  5657   002506  5007               	movf	??_color_read_Red^0,w,c
  5658   002508  6E0A               	movwf	color_read_Red@tmp^0,c
  5659   00250A  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5660                           
  5661                           ;color.c: 39:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5662   00250C  0E00               	movlw	0
  5663   00250E  EC33  F013         	call	_I2C_2_Master_Read
  5664   002512  6E07               	movwf	??_color_read_Red^0,c
  5665   002514  5007               	movf	??_color_read_Red^0,w,c
  5666   002516  6E09               	movwf	(??_color_read_Red+2)^0,c
  5667   002518  6A08               	clrf	(??_color_read_Red+1)^0,c
  5668   00251A  500A               	movf	color_read_Red@tmp^0,w,c
  5669   00251C  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5670   00251E  6E0A               	movwf	color_read_Red@tmp^0,c
  5671   002520  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5672   002522  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5673   002524  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5674                           
  5675                           ;color.c: 40:  I2C_2_Master_Stop();
  5676   002526  EC88  F014         	call	_I2C_2_Master_Stop	;wreg free
  5677   00252A                     
  5678                           ;color.c: 41:  return tmp;
  5679   00252A  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5680   00252E  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5681   002532  0012               	return		;funcret
  5682   002534                     __end_of_color_read_Red:
  5683                           	callstack 0
  5684                           
  5685 ;; *************** function _color_read_Green *****************
  5686 ;; Defined at:
  5687 ;;		line 44 in file "color.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;		None
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;  tmp             2    9[COMRAM] unsigned int 
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  2    4[COMRAM] unsigned int 
  5694 ;; Registers used:
  5695 ;;		wreg, status,2, status,0, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5702 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5703 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5704 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5705 ;;Total ram usage:        7 bytes
  5706 ;; Hardware stack levels used: 1
  5707 ;; Hardware stack levels required when called: 2
  5708 ;; This function calls:
  5709 ;;		_I2C_2_Master_Read
  5710 ;;		_I2C_2_Master_RepStart
  5711 ;;		_I2C_2_Master_Start
  5712 ;;		_I2C_2_Master_Stop
  5713 ;;		_I2C_2_Master_Write
  5714 ;; This function is called by:
  5715 ;;		_calibration_routine
  5716 ;;		_reading_values
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text31
  5721   002534                     __ptext31:
  5722                           	callstack 0
  5723   002534                     _color_read_Green:
  5724                           	callstack 26
  5725   002534                     
  5726                           ;color.c: 46:  unsigned int tmp;;color.c: 47:  I2C_2_Master_Start();
  5727   002534  EC8D  F014         	call	_I2C_2_Master_Start	;wreg free
  5728                           
  5729                           ;color.c: 48:  I2C_2_Master_Write(0x52 | 0x00);
  5730   002538  0E52               	movlw	82
  5731   00253A  EC82  F014         	call	_I2C_2_Master_Write
  5732                           
  5733                           ;color.c: 49:  I2C_2_Master_Write(0xA0 | 0x18);
  5734   00253E  0EB8               	movlw	184
  5735   002540  EC82  F014         	call	_I2C_2_Master_Write
  5736                           
  5737                           ;color.c: 50:  I2C_2_Master_RepStart();
  5738   002544  EC92  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5739                           
  5740                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x01);
  5741   002548  0E53               	movlw	83
  5742   00254A  EC82  F014         	call	_I2C_2_Master_Write
  5743                           
  5744                           ;color.c: 52:  tmp=I2C_2_Master_Read(1);
  5745   00254E  0E01               	movlw	1
  5746   002550  EC33  F013         	call	_I2C_2_Master_Read
  5747   002554  6E07               	movwf	??_color_read_Green^0,c
  5748   002556  5007               	movf	??_color_read_Green^0,w,c
  5749   002558  6E0A               	movwf	color_read_Green@tmp^0,c
  5750   00255A  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5751                           
  5752                           ;color.c: 53:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5753   00255C  0E00               	movlw	0
  5754   00255E  EC33  F013         	call	_I2C_2_Master_Read
  5755   002562  6E07               	movwf	??_color_read_Green^0,c
  5756   002564  5007               	movf	??_color_read_Green^0,w,c
  5757   002566  6E09               	movwf	(??_color_read_Green+2)^0,c
  5758   002568  6A08               	clrf	(??_color_read_Green+1)^0,c
  5759   00256A  500A               	movf	color_read_Green@tmp^0,w,c
  5760   00256C  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5761   00256E  6E0A               	movwf	color_read_Green@tmp^0,c
  5762   002570  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5763   002572  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5764   002574  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5765                           
  5766                           ;color.c: 54:  I2C_2_Master_Stop();
  5767   002576  EC88  F014         	call	_I2C_2_Master_Stop	;wreg free
  5768   00257A                     
  5769                           ;color.c: 55:  return tmp;
  5770   00257A  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5771   00257E  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5772   002582  0012               	return		;funcret
  5773   002584                     __end_of_color_read_Green:
  5774                           	callstack 0
  5775                           
  5776 ;; *************** function _color_read_Clear *****************
  5777 ;; Defined at:
  5778 ;;		line 73 in file "color.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  tmp             2    9[COMRAM] unsigned int 
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  2    4[COMRAM] unsigned int 
  5785 ;; Registers used:
  5786 ;;		wreg, status,2, status,0, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5793 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5794 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5795 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5796 ;;Total ram usage:        7 bytes
  5797 ;; Hardware stack levels used: 1
  5798 ;; Hardware stack levels required when called: 2
  5799 ;; This function calls:
  5800 ;;		_I2C_2_Master_Read
  5801 ;;		_I2C_2_Master_RepStart
  5802 ;;		_I2C_2_Master_Start
  5803 ;;		_I2C_2_Master_Stop
  5804 ;;		_I2C_2_Master_Write
  5805 ;; This function is called by:
  5806 ;;		_calibration_routine
  5807 ;;		_reading_values
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           	psect	text32
  5812   002584                     __ptext32:
  5813                           	callstack 0
  5814   002584                     _color_read_Clear:
  5815                           	callstack 26
  5816   002584                     
  5817                           ;color.c: 75:  unsigned int tmp;;color.c: 76:  I2C_2_Master_Start();
  5818   002584  EC8D  F014         	call	_I2C_2_Master_Start	;wreg free
  5819                           
  5820                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x00);
  5821   002588  0E52               	movlw	82
  5822   00258A  EC82  F014         	call	_I2C_2_Master_Write
  5823                           
  5824                           ;color.c: 78:  I2C_2_Master_Write(0xA0 | 0x14);
  5825   00258E  0EB4               	movlw	180
  5826   002590  EC82  F014         	call	_I2C_2_Master_Write
  5827                           
  5828                           ;color.c: 79:  I2C_2_Master_RepStart();
  5829   002594  EC92  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5830                           
  5831                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x01);
  5832   002598  0E53               	movlw	83
  5833   00259A  EC82  F014         	call	_I2C_2_Master_Write
  5834                           
  5835                           ;color.c: 81:  tmp=I2C_2_Master_Read(1);
  5836   00259E  0E01               	movlw	1
  5837   0025A0  EC33  F013         	call	_I2C_2_Master_Read
  5838   0025A4  6E07               	movwf	??_color_read_Clear^0,c
  5839   0025A6  5007               	movf	??_color_read_Clear^0,w,c
  5840   0025A8  6E0A               	movwf	color_read_Clear@tmp^0,c
  5841   0025AA  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  5842                           
  5843                           ;color.c: 82:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5844   0025AC  0E00               	movlw	0
  5845   0025AE  EC33  F013         	call	_I2C_2_Master_Read
  5846   0025B2  6E07               	movwf	??_color_read_Clear^0,c
  5847   0025B4  5007               	movf	??_color_read_Clear^0,w,c
  5848   0025B6  6E09               	movwf	(??_color_read_Clear+2)^0,c
  5849   0025B8  6A08               	clrf	(??_color_read_Clear+1)^0,c
  5850   0025BA  500A               	movf	color_read_Clear@tmp^0,w,c
  5851   0025BC  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  5852   0025BE  6E0A               	movwf	color_read_Clear@tmp^0,c
  5853   0025C0  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  5854   0025C2  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  5855   0025C4  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  5856                           
  5857                           ;color.c: 83:  I2C_2_Master_Stop();
  5858   0025C6  EC88  F014         	call	_I2C_2_Master_Stop	;wreg free
  5859   0025CA                     
  5860                           ;color.c: 84:  return tmp;
  5861   0025CA  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  5862   0025CE  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5863   0025D2  0012               	return		;funcret
  5864   0025D4                     __end_of_color_read_Clear:
  5865                           	callstack 0
  5866                           
  5867 ;; *************** function _color_read_Blue *****************
  5868 ;; Defined at:
  5869 ;;		line 58 in file "color.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;		None
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  tmp             2    9[COMRAM] unsigned int 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  2    4[COMRAM] unsigned int 
  5876 ;; Registers used:
  5877 ;;		wreg, status,2, status,0, cstack
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5883 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5884 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5885 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5886 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5887 ;;Total ram usage:        7 bytes
  5888 ;; Hardware stack levels used: 1
  5889 ;; Hardware stack levels required when called: 2
  5890 ;; This function calls:
  5891 ;;		_I2C_2_Master_Read
  5892 ;;		_I2C_2_Master_RepStart
  5893 ;;		_I2C_2_Master_Start
  5894 ;;		_I2C_2_Master_Stop
  5895 ;;		_I2C_2_Master_Write
  5896 ;; This function is called by:
  5897 ;;		_calibration_routine
  5898 ;;		_reading_values
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           	psect	text33
  5903   0025D4                     __ptext33:
  5904                           	callstack 0
  5905   0025D4                     _color_read_Blue:
  5906                           	callstack 26
  5907   0025D4                     
  5908                           ;color.c: 60:  unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
  5909   0025D4  EC8D  F014         	call	_I2C_2_Master_Start	;wreg free
  5910                           
  5911                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  5912   0025D8  0E52               	movlw	82
  5913   0025DA  EC82  F014         	call	_I2C_2_Master_Write
  5914                           
  5915                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x1A);
  5916   0025DE  0EBA               	movlw	186
  5917   0025E0  EC82  F014         	call	_I2C_2_Master_Write
  5918                           
  5919                           ;color.c: 64:  I2C_2_Master_RepStart();
  5920   0025E4  EC92  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5921                           
  5922                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  5923   0025E8  0E53               	movlw	83
  5924   0025EA  EC82  F014         	call	_I2C_2_Master_Write
  5925                           
  5926                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  5927   0025EE  0E01               	movlw	1
  5928   0025F0  EC33  F013         	call	_I2C_2_Master_Read
  5929   0025F4  6E07               	movwf	??_color_read_Blue^0,c
  5930   0025F6  5007               	movf	??_color_read_Blue^0,w,c
  5931   0025F8  6E0A               	movwf	color_read_Blue@tmp^0,c
  5932   0025FA  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5933                           
  5934                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5935   0025FC  0E00               	movlw	0
  5936   0025FE  EC33  F013         	call	_I2C_2_Master_Read
  5937   002602  6E07               	movwf	??_color_read_Blue^0,c
  5938   002604  5007               	movf	??_color_read_Blue^0,w,c
  5939   002606  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5940   002608  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5941   00260A  500A               	movf	color_read_Blue@tmp^0,w,c
  5942   00260C  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5943   00260E  6E0A               	movwf	color_read_Blue@tmp^0,c
  5944   002610  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5945   002612  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5946   002614  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5947                           
  5948                           ;color.c: 68:  I2C_2_Master_Stop();
  5949   002616  EC88  F014         	call	_I2C_2_Master_Stop	;wreg free
  5950   00261A                     
  5951                           ;color.c: 69:  return tmp;
  5952   00261A  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5953   00261E  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5954   002622  0012               	return		;funcret
  5955   002624                     __end_of_color_read_Blue:
  5956                           	callstack 0
  5957                           
  5958 ;; *************** function _I2C_2_Master_Write *****************
  5959 ;; Defined at:
  5960 ;;		line 45 in file "i2c.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;  data_byte       1    wreg     unsigned char 
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;  data_byte       1    1[COMRAM] unsigned char 
  5965 ;; Return value:  Size  Location     Type
  5966 ;;                  1    wreg      void 
  5967 ;; Registers used:
  5968 ;;		wreg, status,2, status,0, cstack
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5977 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5978 ;;Total ram usage:        1 bytes
  5979 ;; Hardware stack levels used: 1
  5980 ;; Hardware stack levels required when called: 1
  5981 ;; This function calls:
  5982 ;;		_I2C_2_Master_Idle
  5983 ;; This function is called by:
  5984 ;;		_color_writetoaddr
  5985 ;;		_color_read_Red
  5986 ;;		_color_read_Green
  5987 ;;		_color_read_Blue
  5988 ;;		_color_read_Clear
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text34
  5993   002904                     __ptext34:
  5994                           	callstack 0
  5995   002904                     _I2C_2_Master_Write:
  5996                           	callstack 26
  5997                           
  5998                           ;incstack = 0
  5999                           ;I2C_2_Master_Write@data_byte stored from wreg
  6000   002904  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6001   002906                     
  6002                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6003   002906  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6004   00290A                     
  6005                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6006   00290A  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6007   00290E  0012               	return		;funcret
  6008   002910                     __end_of_I2C_2_Master_Write:
  6009                           	callstack 0
  6010                           
  6011 ;; *************** function _I2C_2_Master_Stop *****************
  6012 ;; Defined at:
  6013 ;;		line 39 in file "i2c.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;		None
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, status,2, status,0, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6031 ;;Total ram usage:        0 bytes
  6032 ;; Hardware stack levels used: 1
  6033 ;; Hardware stack levels required when called: 1
  6034 ;; This function calls:
  6035 ;;		_I2C_2_Master_Idle
  6036 ;; This function is called by:
  6037 ;;		_color_writetoaddr
  6038 ;;		_color_read_Red
  6039 ;;		_color_read_Green
  6040 ;;		_color_read_Blue
  6041 ;;		_color_read_Clear
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           	psect	text35
  6046   002910                     __ptext35:
  6047                           	callstack 0
  6048   002910                     _I2C_2_Master_Stop:
  6049                           	callstack 26
  6050   002910                     
  6051                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6052   002910  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6053   002914                     
  6054                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6055   002914  010E               	movlb	14	; () banked
  6056   002916  85DA               	bsf	218,2,b	;volatile
  6057   002918                     
  6058                           ; BSR set to: 14
  6059   002918  0012               	return		;funcret
  6060   00291A                     __end_of_I2C_2_Master_Stop:
  6061                           	callstack 0
  6062                           
  6063 ;; *************** function _I2C_2_Master_Start *****************
  6064 ;; Defined at:
  6065 ;;		line 27 in file "i2c.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;		None
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;		None
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  1    wreg      void 
  6072 ;; Registers used:
  6073 ;;		wreg, status,2, status,0, cstack
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6083 ;;Total ram usage:        0 bytes
  6084 ;; Hardware stack levels used: 1
  6085 ;; Hardware stack levels required when called: 1
  6086 ;; This function calls:
  6087 ;;		_I2C_2_Master_Idle
  6088 ;; This function is called by:
  6089 ;;		_color_writetoaddr
  6090 ;;		_color_read_Red
  6091 ;;		_color_read_Green
  6092 ;;		_color_read_Blue
  6093 ;;		_color_read_Clear
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           	psect	text36
  6098   00291A                     __ptext36:
  6099                           	callstack 0
  6100   00291A                     _I2C_2_Master_Start:
  6101                           	callstack 26
  6102   00291A                     
  6103                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6104   00291A  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6105   00291E                     
  6106                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6107   00291E  010E               	movlb	14	; () banked
  6108   002920  81DA               	bsf	218,0,b	;volatile
  6109   002922                     
  6110                           ; BSR set to: 14
  6111   002922  0012               	return		;funcret
  6112   002924                     __end_of_I2C_2_Master_Start:
  6113                           	callstack 0
  6114                           
  6115 ;; *************** function _I2C_2_Master_RepStart *****************
  6116 ;; Defined at:
  6117 ;;		line 33 in file "i2c.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, status,2, status,0, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6135 ;;Total ram usage:        0 bytes
  6136 ;; Hardware stack levels used: 1
  6137 ;; Hardware stack levels required when called: 1
  6138 ;; This function calls:
  6139 ;;		_I2C_2_Master_Idle
  6140 ;; This function is called by:
  6141 ;;		_color_read_Red
  6142 ;;		_color_read_Green
  6143 ;;		_color_read_Blue
  6144 ;;		_color_read_Clear
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           	psect	text37
  6149   002924                     __ptext37:
  6150                           	callstack 0
  6151   002924                     _I2C_2_Master_RepStart:
  6152                           	callstack 26
  6153   002924                     
  6154                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6155   002924  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6156   002928                     
  6157                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6158   002928  010E               	movlb	14	; () banked
  6159   00292A  83DA               	bsf	218,1,b	;volatile
  6160   00292C                     
  6161                           ; BSR set to: 14
  6162   00292C  0012               	return		;funcret
  6163   00292E                     __end_of_I2C_2_Master_RepStart:
  6164                           	callstack 0
  6165                           
  6166 ;; *************** function _I2C_2_Master_Read *****************
  6167 ;; Defined at:
  6168 ;;		line 51 in file "i2c.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;  ack             1    wreg     unsigned char 
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  ack             1    2[COMRAM] unsigned char 
  6173 ;;  tmp             1    3[COMRAM] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  1    wreg      unsigned char 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2, status,0, cstack
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6184 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6185 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6186 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6187 ;;Total ram usage:        3 bytes
  6188 ;; Hardware stack levels used: 1
  6189 ;; Hardware stack levels required when called: 1
  6190 ;; This function calls:
  6191 ;;		_I2C_2_Master_Idle
  6192 ;; This function is called by:
  6193 ;;		_color_read_Red
  6194 ;;		_color_read_Green
  6195 ;;		_color_read_Blue
  6196 ;;		_color_read_Clear
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text38
  6201   002666                     __ptext38:
  6202                           	callstack 0
  6203   002666                     _I2C_2_Master_Read:
  6204                           	callstack 26
  6205                           
  6206                           ; BSR set to: 14
  6207                           ;incstack = 0
  6208                           ;I2C_2_Master_Read@ack stored from wreg
  6209   002666  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6210   002668                     
  6211                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6212   002668  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6213   00266C                     
  6214                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6215   00266C  010E               	movlb	14	; () banked
  6216   00266E  87DA               	bsf	218,3,b	;volatile
  6217                           
  6218                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6219   002670  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6220   002674                     
  6221                           ;i2c.c: 57:   tmp = SSP2BUF;
  6222   002674  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6223                           
  6224                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6225   002678  EC23  F014         	call	_I2C_2_Master_Idle	;wreg free
  6226   00267C                     
  6227                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6228   00267C  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6229   00267E  B4D8               	btfsc	status,2,c
  6230   002680  EF44  F013         	goto	u2391
  6231   002684  EF48  F013         	goto	u2390
  6232   002688                     u2391:
  6233   002688  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6234   00268A  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6235   00268C  EF49  F013         	goto	u2408
  6236   002690                     u2390:
  6237   002690  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6238   002692                     u2408:
  6239   002692  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6240   002694  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6241   002696  010E               	movlb	14	; () banked
  6242   002698  51DA               	movf	218,w,b	;volatile
  6243   00269A  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6244   00269C  0BDF               	andlw	-33
  6245   00269E  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6246   0026A0  6FDA               	movwf	218,b	;volatile
  6247   0026A2                     
  6248                           ; BSR set to: 14
  6249                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6250   0026A2  89DA               	bsf	218,4,b	;volatile
  6251   0026A4                     
  6252                           ; BSR set to: 14
  6253                           ;i2c.c: 61:   return tmp;
  6254   0026A4  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6255   0026A6                     
  6256                           ; BSR set to: 14
  6257   0026A6  0012               	return		;funcret
  6258   0026A8                     __end_of_I2C_2_Master_Read:
  6259                           	callstack 0
  6260                           
  6261 ;; *************** function _I2C_2_Master_Idle *****************
  6262 ;; Defined at:
  6263 ;;		line 22 in file "i2c.c"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;		None
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;		None
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  1    wreg      void 
  6270 ;; Registers used:
  6271 ;;		wreg, status,2, status,0
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6279 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6280 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6281 ;;Total ram usage:        1 bytes
  6282 ;; Hardware stack levels used: 1
  6283 ;; This function calls:
  6284 ;;		Nothing
  6285 ;; This function is called by:
  6286 ;;		_I2C_2_Master_Start
  6287 ;;		_I2C_2_Master_RepStart
  6288 ;;		_I2C_2_Master_Stop
  6289 ;;		_I2C_2_Master_Write
  6290 ;;		_I2C_2_Master_Read
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text39
  6295   002846                     __ptext39:
  6296                           	callstack 0
  6297   002846                     _I2C_2_Master_Idle:
  6298                           	callstack 26
  6299   002846                     l141:
  6300   002846  010E               	movlb	14	; () banked
  6301   002848  B5D8               	btfsc	216,2,b	;volatile
  6302   00284A  EF29  F014         	goto	u2361
  6303   00284E  EF2B  F014         	goto	u2360
  6304   002852                     u2361:
  6305   002852  EF23  F014         	goto	l141
  6306   002856                     u2360:
  6307   002856                     
  6308                           ; BSR set to: 14
  6309   002856  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6310   00285A  0E1F               	movlw	31
  6311   00285C  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6312   00285E  A4D8               	btfss	status,2,c
  6313   002860  EF34  F014         	goto	u2371
  6314   002864  EF36  F014         	goto	u2370
  6315   002868                     u2371:
  6316   002868  EF23  F014         	goto	l141
  6317   00286C                     u2370:
  6318   00286C                     
  6319                           ; BSR set to: 14
  6320   00286C  0012               	return		;funcret
  6321   00286E                     __end_of_I2C_2_Master_Idle:
  6322                           	callstack 0
  6323                           
  6324 ;; *************** function _ADC_init *****************
  6325 ;; Defined at:
  6326 ;;		line 9 in file "ADC.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;		None
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  1    wreg      void 
  6333 ;; Registers used:
  6334 ;;		wreg, status,2
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6344 ;;Total ram usage:        0 bytes
  6345 ;; Hardware stack levels used: 1
  6346 ;; This function calls:
  6347 ;;		Nothing
  6348 ;; This function is called by:
  6349 ;;		_main
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text40
  6354   0028D2                     __ptext40:
  6355                           	callstack 0
  6356   0028D2                     _ADC_init:
  6357                           	callstack 30
  6358   0028D2                     
  6359                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  6360   0028D2  8C86               	bsf	134,6,c	;volatile
  6361                           
  6362                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  6363   0028D4  010E               	movlb	14	; () banked
  6364   0028D6  8DB4               	bsf	180,6,b	;volatile
  6365                           
  6366                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  6367   0028D8  010F               	movlb	15	; () banked
  6368   0028DA  9958               	bcf	88,4,b	;volatile
  6369   0028DC                     
  6370                           ; BSR set to: 15
  6371                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  6372   0028DC  0EFC               	movlw	-4
  6373   0028DE  1758               	andwf	88,f,b	;volatile
  6374                           
  6375                           ;ADC.c: 17:     ADPCH=0b101110;
  6376   0028E0  0E2E               	movlw	46
  6377   0028E2  6F5F               	movwf	95,b	;volatile
  6378   0028E4                     
  6379                           ; BSR set to: 15
  6380                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  6381   0028E4  9460               	bcf	96,2,c	;volatile
  6382   0028E6                     
  6383                           ; BSR set to: 15
  6384                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  6385   0028E6  8860               	bsf	96,4,c	;volatile
  6386   0028E8                     
  6387                           ; BSR set to: 15
  6388                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  6389   0028E8  8E60               	bsf	96,7,c	;volatile
  6390   0028EA                     
  6391                           ; BSR set to: 15
  6392   0028EA  0012               	return		;funcret
  6393   0028EC                     __end_of_ADC_init:
  6394                           	callstack 0
  6395                           
  6396                           	psect	rparam
  6397   000000                     
  6398                           	psect	config
  6399                           
  6400                           ;Config register CONFIG1L @ 0x300000
  6401                           ;	External Oscillator mode Selection bits
  6402                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6403                           ;	Power-up default value for COSC bits
  6404                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6405   300000                     	org	3145728
  6406   300000  AA                 	db	170
  6407                           
  6408                           ;Config register CONFIG1H @ 0x300001
  6409                           ;	unspecified, using default values
  6410                           ;	Clock Out Enable bit
  6411                           ;	CLKOUTEN = 0x1, unprogrammed default
  6412                           ;	Clock Switch Enable bit
  6413                           ;	CSWEN = 0x1, unprogrammed default
  6414                           ;	Fail-Safe Clock Monitor Enable bit
  6415                           ;	FCMEN = 0x1, unprogrammed default
  6416   300001                     	org	3145729
  6417   300001  FF                 	db	255
  6418                           
  6419                           ;Config register CONFIG3L @ 0x300004
  6420                           ;	WDT Period Select bits
  6421                           ;	WDTCPS = 0x1F, unprogrammed default
  6422                           ;	WDT operating mode
  6423                           ;	WDTE = OFF, WDT Disabled
  6424   300004                     	org	3145732
  6425   300004  9F                 	db	159
  6426                           
  6427                           ;Config register CONFIG3H @ 0x300005
  6428                           ;	unspecified, using default values
  6429                           ;	WDT Window Select bits
  6430                           ;	WDTCWS = 0x7, unprogrammed default
  6431                           ;	WDT input clock selector
  6432                           ;	WDTCCS = 0x7, unprogrammed default
  6433   300005                     	org	3145733
  6434   300005  FF                 	db	255
  6435                           tosu	equ	0xFFF
  6436                           tosh	equ	0xFFE
  6437                           tosl	equ	0xFFD
  6438                           stkptr	equ	0xFFC
  6439                           pclatu	equ	0xFFB
  6440                           pclath	equ	0xFFA
  6441                           pcl	equ	0xFF9
  6442                           tblptru	equ	0xFF8
  6443                           tblptrh	equ	0xFF7
  6444                           tblptrl	equ	0xFF6
  6445                           tablat	equ	0xFF5
  6446                           prodh	equ	0xFF4
  6447                           prodl	equ	0xFF3
  6448                           indf0	equ	0xFEF
  6449                           postinc0	equ	0xFEE
  6450                           postdec0	equ	0xFED
  6451                           preinc0	equ	0xFEC
  6452                           plusw0	equ	0xFEB
  6453                           fsr0h	equ	0xFEA
  6454                           fsr0l	equ	0xFE9
  6455                           wreg	equ	0xFE8
  6456                           indf1	equ	0xFE7
  6457                           postinc1	equ	0xFE6
  6458                           postdec1	equ	0xFE5
  6459                           preinc1	equ	0xFE4
  6460                           plusw1	equ	0xFE3
  6461                           fsr1h	equ	0xFE2
  6462                           fsr1l	equ	0xFE1
  6463                           bsr	equ	0xFE0
  6464                           indf2	equ	0xFDF
  6465                           postinc2	equ	0xFDE
  6466                           postdec2	equ	0xFDD
  6467                           preinc2	equ	0xFDC
  6468                           plusw2	equ	0xFDB
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8

Data Sizes:
    Strings     244
    Constant    0
    Data        1
    BSS         176
>>>>>>> Calibrating-Colors
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
<<<<<<< HEAD
<<<<<<< HEAD
    COMRAM           95     90      95
    BANK0           160     60     156
    BANK1           256    250     250
    BANK2           256      0      60
=======
    COMRAM           95     33      77
    BANK0           160      0      80
    BANK1           256      0       0
    BANK2           256      0       0
>>>>>>> Movement
=======
    COMRAM           95     94      95
    BANK0           160    156     160
    BANK1           256      2     174
    BANK2           256      0       0
>>>>>>> Calibrating-Colors
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

<<<<<<< HEAD
    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 
=======
    ADC2String@buf	PTR unsigned char  size(1) Largest target is 50
		 -> send2USART@buf(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    calibration_routine@cCal	PTR struct colors size(2) Largest target is 8
		 -> colorCalibration(BANK1[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(2) Largest target is 8
		 -> colorCurrent(BANK1[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(2) Largest target is 8
		 -> colorCalibration(BANK1[8]), 
>>>>>>> Calibrating-Colors

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

<<<<<<< HEAD
    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 
=======
    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 
>>>>>>> Calibrating-Colors

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

<<<<<<< HEAD
    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 
=======
    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 
>>>>>>> Calibrating-Colors

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    S2339$buffer	PTR unsigned char  size(2) Largest target is 0

<<<<<<< HEAD
    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

<<<<<<< HEAD
    S2201$buffer	PTR unsigned char  size(2) Largest target is 0

    S2201$source	PTR const unsigned char  size(2) Largest target is 0
=======
    S2339$source	PTR const unsigned char  size(2) Largest target is 0
>>>>>>> Movement

    S462DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S462DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), motorR(COMRAM[9]), 
=======
    reading_values@cCurr	PTR struct colors size(2) Largest target is 8
		 -> colorCurrent(BANK1[8]), 

    S2445$buffer	PTR unsigned char  size(2) Largest target is 0

    S2445$source	PTR const unsigned char  size(2) Largest target is 0

    S564DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S564DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@buf(BANK0[50]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 
		 -> test@led_state(BANK0[50]), 
>>>>>>> Calibrating-Colors

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

<<<<<<< HEAD
    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

<<<<<<< HEAD
    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[21]), STR_3(CODE[12]), STR_4(CODE[13]), 
		 -> STR_5(CODE[14]), STR_6(CODE[17]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 50
		 -> send2USART@blue_char(BANK1[50]), send2USART@buf(BANK1[50]), send2USART@clear_char(BANK1[50]), send2USART@green_char(BANK1[50]), 
		 -> send2USART@red_char(BANK1[50]), sendAllReadings@buffer(COMRAM[10]), test@led_state(BANK0[50]), 
=======
    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 
>>>>>>> Movement
=======
    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 34
		 -> STR_1(CODE[17]), STR_11(CODE[34]), STR_13(CODE[25]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[24]), STR_7(CODE[29]), STR_9(CODE[27]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@buf(BANK0[50]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 
		 -> test@led_state(BANK0[50]), 
>>>>>>> Calibrating-Colors

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

<<<<<<< HEAD
    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

<<<<<<< HEAD
    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[21]), STR_3(CODE[12]), STR_4(CODE[13]), 
		 -> STR_5(CODE[14]), STR_6(CODE[17]), 
=======
    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 34
		 -> STR_1(CODE[17]), STR_11(CODE[34]), STR_13(CODE[25]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[24]), STR_7(CODE[29]), STR_9(CODE[27]), 
>>>>>>> Calibrating-Colors

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
=======
    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
>>>>>>> Movement
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[21]), STR_6(CODE[12]), STR_7(CODE[13]), STR_8(CODE[14]), 
		 -> STR_9(CODE[17]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

<<<<<<< HEAD
<<<<<<< HEAD
    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[21]), STR_3(CODE[12]), STR_4(CODE[13]), 
		 -> STR_5(CODE[14]), STR_6(CODE[17]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[21]), STR_3(CODE[12]), STR_4(CODE[13]), 
		 -> STR_5(CODE[14]), STR_6(CODE[17]), 
=======
    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 34
		 -> STR_1(CODE[17]), STR_11(CODE[34]), STR_13(CODE[25]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[24]), STR_7(CODE[29]), STR_9(CODE[27]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 34
		 -> STR_1(CODE[17]), STR_11(CODE[34]), STR_13(CODE[25]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[24]), STR_7(CODE[29]), STR_9(CODE[27]), 
>>>>>>> Calibrating-Colors

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

=======
>>>>>>> Movement

Critical Paths under _main in COMRAM

<<<<<<< HEAD
    _main->_movePink
    _movePink->_backOneAndHalf
    _movePink->_left90
    _left90->_turnLeft
    _turnLeft->_setMotorPWM
    _backOneAndHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
=======
    _main->_test
    _test->_convert_rgb2hue
    _send2USART->_ADC2String
    _ADC2String->_sprintf
    _reading_values->_color_read_Blue
    _reading_values->_color_read_Clear
    _reading_values->_color_read_Green
    _reading_values->_color_read_Red
    _convert_rgb2hue->___lodiv
    ___lwdiv->___wmul
    ___lodiv->___omul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
>>>>>>> Calibrating-Colors
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

<<<<<<< HEAD
    None.
=======
    _main->_test
    _test->_send2USART
>>>>>>> Calibrating-Colors

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
<<<<<<< HEAD
 (0) _main                                                12    12      0   28256
                                             88 COMRAM     2     2      0
=======
 (0) _main                                                14    14      0   23676
                                             31 COMRAM     2     2      0
>>>>>>> Movement
=======
 (0) _main                                                14    14      0   59928
                                            154 BANK0      2     2      0
                                              0 BANK1      2     2      0
>>>>>>> Calibrating-Colors
                           _ADC_init
                _calibration_routine
                   _color_click_init
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                           _movePink
                               _stop
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
<<<<<<< HEAD
 (1) _test                                                62    60      2   27775
                                             86 COMRAM     2     0      2
                                              0 BANK0     60    60      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
=======
 (1) _test                                                57    55      2   46314
                                             91 COMRAM     3     1      2
                                            100 BANK0     54    54      0
                    _convert_rgb2hue
                     _reading_values
>>>>>>> Calibrating-Colors
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _send2USART                                         260   250     10   18694
                                             76 COMRAM    10     0     10
                                              0 BANK1    250   250      0
=======
 (2) _send2USART                                         104   100      4   26591
                                             76 COMRAM     4     0      4
                                              0 BANK0    100   100      0
>>>>>>> Calibrating-Colors
                         _ADC2String
                  _sendStringSerial4
                            _sprintf
=======
 (1) _movePink                                             4     2      2   15976
                                             27 COMRAM     4     2      2
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _left90                                               4     2      2    7944
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
>>>>>>> Movement
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             5     3      2    3419
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _backOneAndHalf                                       4     2      2    7792
                                             23 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (3) _ADC2String                                          10     6      4    9633
                                             66 COMRAM    10     6      4
=======
 (3) _ADC2String                                           9     6      3   14384
                                             67 COMRAM     9     6      3
>>>>>>> Calibrating-Colors
                            ___lwdiv
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _sprintf                                             22    15      7    7722
                                             46 COMRAM    20    13      7
                           _vfprintf
=======
 (2) _reading_values                                       2     0      2     870
                                             11 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
>>>>>>> Calibrating-Colors
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                     82    78      4    6528
                                             49 COMRAM    42    38      4
                                              0 BANK0     40    40      0
                            ___lodiv
                            ___lwdiv
                             ___omul
 ---------------------------------------------------------------------------------
 (3) ___omul                                              24     8     16    1716
                                              0 COMRAM    24     8     16
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4    1921
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
=======
 (1) _stop                                                 3     1      2    4133
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _fullSpeedBack                                        5     3      2    3267
                                             18 COMRAM     5     3      2
                        _setMotorPWM
>>>>>>> Movement
=======
 (3) ___lodiv                                             25     9     16     481
                                             24 COMRAM    25     9     16
                             ___omul (ARG)
>>>>>>> Calibrating-Colors
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _fullSpeedAhead                                       5     3      2    3115
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2741
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     659
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
=======
 (1) _color_click_init                                     1     1      0     363
>>>>>>> Calibrating-Colors
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _color_writetoaddr                                    2     1      1     287
=======
 (2) _color_writetoaddr                                    2     1      1     363
>>>>>>> Calibrating-Colors
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (3) _I2C_2_Master_Write                                   1     1      0      15
=======
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 24    22      2   13003
                                             67 COMRAM    24    22      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10899
                                             48 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    8607
                                             44 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8119
                                             33 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1452
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1012
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             22 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             14 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              8 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     906
                                              1 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      31
>>>>>>> Calibrating-Colors
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      65
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
<<<<<<< HEAD
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
=======
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
>>>>>>> Calibrating-Colors
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
<<<<<<< HEAD
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _movePink
     _backOneAndHalf
       _fullSpeedBack
         _setMotorPWM
       _stop
         _setMotorPWM
     _left90
       _stop
       _turnLeft
         _setMotorPWM
   _stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      64        0.0%
=======
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _test
     _convert_rgb2hue
       ___lodiv
         ___omul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___omul
     _reading_values
       _color_read_Blue
       _color_read_Clear
       _color_read_Green
       _color_read_Red
     _send2USART
       _ADC2String
         ___lwdiv
         ___wmul
         _sprintf
       _sendStringSerial4
       _sprintf
     _sendStringSerial4
     _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
>>>>>>> Calibrating-Colors
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
<<<<<<< HEAD
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
<<<<<<< HEAD
BANK0               A0     3C      9C       5       97.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5A      5F       1      100.0%
=======
BANK0               A0      0      50       5       50.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      4D       1       81.1%
>>>>>>> Movement
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      62        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhllhh     17      0       0      36        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRllllll      F      0       0      60        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      59        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      61        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRhhllhl      6      0       0      37        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhlh         1      0       0      38        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlh          1      0       0      40        0.0%
BITBIGSFRhll         1      0       0      39        0.0%
=======
BANK1              100      2      AE       7       68.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9C      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5F       1      100.0%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllhll     37      0       0      45        0.0%
BITBIGSFRlllhhl     31      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllllh     20      0       0      48        0.0%
BITBIGSFRllllll     1E      0       0      50        0.0%
BITBIGSFRhhll       17      0       0      36        0.0%
BITBIGSFRlllhhh     14      0       0      40        0.0%
BITBIGSFRllllll     11      0       0      51        0.0%
BITBIGSFRllllll      F      0       0      58        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRlllllh      C      0       0      49        0.0%
BITBIGSFRllllll      9      0       0      57        0.0%
BITBIGSFRlllhll      8      0       0      46        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRlllhhh      6      0       0      42        0.0%
BITBIGSFRllllll      5      0       0      54        0.0%
BITBIGSFRhlhh        5      0       0      37        0.0%
BITBIGSFRlllhhh      3      0       0      41        0.0%
BITBIGSFRllllll      3      0       0      53        0.0%
BITBIGSFRlllhlh      2      0       0      44        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      52        0.0%
BITBIGSFRhllh        1      0       0      38        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRllllh       1      0       0      47        0.0%
BITBIGSFRllh         1      0       0      39        0.0%
>>>>>>> Calibrating-Colors
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
<<<<<<< HEAD
<<<<<<< HEAD
ABS                  0      0     231      62        0.0%
DATA                 0      0     231       3        0.0%
=======
ABS                  0      0      9D      63        0.0%
DATA                 0      0      9D       3        0.0%
>>>>>>> Movement
=======
ABS                  0      0     1AD      61        0.0%
DATA                 0      0     1AD       3        0.0%
>>>>>>> Calibrating-Colors
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
<<<<<<< HEAD
<<<<<<< HEAD
Symbol Table                                                                                   Mon Mar 11 15:55:11 2024

               _color_read_Red 1854                _color_read_Blue 1944                             l51 18A2  
                           l60 1942                             l45 1B68                             l54 18F2  
                           l48 1C00                             l57 1992                             l66 12CE  
                           l93 1B92                             l96 1B94                             l99 1BBA  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003               _color_read_Clear 18F4  
             _color_read_Green 18A4                            l102 1C7A                            l111 1C5C  
                          l105 1C66                            l114 1A16                            l108 1C70  
                          l250 16CE                            l402 163E                            l405 143A  
                          l342 1C1E                            l351 1C3C                            l408 1BE0  
                          l360 1B00                            l354 1C50                            l189 1C38  
                          l652 14EA                            l639 1210                            l906 1852  
                          l899 184A                            u800 11A0                            u801 119C  
                          u810 11BE                            u730 12E0                            u811 11BA  
                          u731 12DC                            u820 11DA                            u740 12F0  
                          u900 16DE                            u821 11D6                            u741 12EC  
                          u901 16DA                            u830 1200                            u750 1316  
                          u910 16F8                            u831 11FC                            u751 1312  
                          u911 16F4                            u840 144E                            u760 1348  
                          u920 173E                            u841 144A                            u761 1344  
                          u921 173A                            u850 1468                            u770 1A8E  
                          u930 174C                            u851 1464                            u771 1A8A  
                          u931 1748                            u780 1160                            u860 1482  
                          u940 1B10                            u781 115C                            u861 147E  
                          u941 1B0C                            u790 117A                            u870 14A0  
                          u950 0FFA                            u791 1176                            u871 149C  
                          u951 0FF4                            u880 14B6                            u960 0FFC  
                          u881 14B2                            u890 14DA                            u970 1016  
                          u891 14D6                            u971 1012                            u980 102C  
                          u981 1028                            u990 10CA                            u991 10C6  
                          _abs 1B02                            _pad 16D0                   ___awmod@sign 0006  
                          wreg 0FE8                           l1111 1758                           l2000 114E  
                         l2010 117A                           l2002 1152                           l1106 1700  
                         l1114 1044                           l1131 1590                           ?_abs 0007  
                         l2020 11A8                           l2012 1182                           l2004 1160  
                         l2100 0FE6                           l1109 173E                           l2030 11E2  
                         l2022 11B0                           l2014 1186                           l2006 1168  
                         l2110 101C                           l2102 0FEA                           l1150 0FE4  
                         l1127 114C                           l1135 1598                           l2040 1208  
                         l2032 11E4                           l2024 11BE                           l2016 118E  
                         l2008 116C                           l1160 1B1C                           l2120 1056  
                         l2112 102C                           l2104 0FFE                           l2200 0F94  
                         l2034 11EA                           l2026 11C4                           l2018 11A0  
                         l2050 1456                           l2122 105C                           l2130 10B0  
                         l2114 1038                           l2106 1006                           l2202 0F9E  
                         l2210 0FBE                           l1163 1B34                           l2028 11DA  
                         l2036 11F0                           l2060 148A                           l2052 145A  
                         l2044 143C                           l2132 10CA                           l2140 1114  
                         l2124 108A                           l2116 1040                           l2108 1016  
                         l1156 19D4                           l2220 1994                           l2038 1200  
                         l2070 14C4                           l2062 1492                           l2054 1468  
                         l2046 1440                           l2142 1124                           l2134 10DC  
                         l2126 108E                           l2118 104C                           l2150 14EC  
                         l2206 0FB2                           l2222 199C                           l1086 1A52  
                         l2230 1A18                           l2310 1AE8                           l2302 1ACA  
                         l1175 1388                           l1183 1A8E                           l2064 14A0  
                         l2072 14CA                           l2056 1470                           l2048 144E  
                         l2080 16D0                           l2144 112A                           l2136 10EC  
                         l2128 1094                           l2160 155E                           l2152 14F4  
                         l2224 19AC                           l2232 1A24                           l2304 1ACE  
                         l2242 1B94                           l2250 17E0                           l2074 14DA  
                         l2066 14B6                           l2058 1482                           l1186 1C7C  
                         l2090 171C                           l2082 16DE                           l2146 1136  
                         l2138 1106                           l2154 151A                           l2162 1566  
                         l2170 0E9C                           l2226 19CC                           l2234 1A2C  
                         l2330 15B6                           l2306 1ADC                           l2340 1B7A  
                         l2244 1BA4                           l2500 16A8                           l2260 1818  
                         l2252 17E8                           l2076 14E2                           l2068 14BE  
                         l2092 1720                           l2084 16EA                           l2156 1522  
                         l2172 0EA0                           l2164 0E60                           l2236 1A34  
                         l2332 1606                           l2308 1AE0                           l2342 1B7C  
                         l2430 1B36                           l2510 16C2                           l2502 16AA  
                         l2350 1854                           l2270 1844                           l2262 181E  
                         l2254 17FA                           l2094 174C                           l2086 16F8  
                         l2158 153E                           l2190 0F28                           l2182 0EBE  
                         l2174 0EA8                           l2166 0E86                           l2238 1A44  
                         l2334 1626                           l2246 1C3C                           l2344 1B7E  
                         l2336 1B6A                           l2272 1C72                           l2280 1C68  
                         l2432 1B3A                           l2512 16CC                           l2504 16B4  
                         l2352 189A                           l2264 1834                           l2256 1802  
                         l2096 1B02                           l2088 170C                           l2192 0F32  
                         l2176 0EAA                           l2184 0EF4                           l2168 0E8E  
                         l2328 159A                           l2248 1C4C                           l2440 1212  
                         l2600 179C                           l2346 1B80                           l2338 1B74  
                         l2274 1C76                           l2282 1C6C                           l2434 1B44  
                         l2506 16B6                           l2290 19DC                           l2362 1944  
                         l2370 193A                           l2266 183C                           l2258 180A  
                         l2098 1B10                           l2194 0F3C                           l2186 0F04  
                         l2178 0EB6                           l2450 1236                           l2610 17C0  
                         l2602 17A0                           l2276 1C54                           l2348 1BE4  
                         l2436 1B54                           l2508 16C0                           l2292 19E4  
                         l2284 1C5E                           l2364 198A                           l2356 18A4  
                         l2268 183E                           l2196 0F5C                           l2188 0F18  
                         l2380 1416                           l2460 127A                           l2452 124C  
                         l2620 17CA                           l2612 17C2                           l2604 17A4  
                         l2470 1C2A                           l2278 1C58                           l2438 1B5E  
                         l2294 19EC                           l2286 1C62                           l2358 18EA  
                         l2198 0F7C                           l2382 1422                           l2374 138A  
                         l2462 1286                           l2454 1256                           l2446 121C  
                         l2622 17CC                           l2614 17C4                           l2606 17BC  
                         l2472 1C32                           l2480 1C0C                           l2296 1A12  
                         l2288 19D8                           l2368 18F4                           l2384 142E  
                         l2376 13FE                           l2464 12B2                           l2456 1262  
                         l2448 1230                           l2616 17C6                           l2608 17BE  
                         l2474 1C34                           l2490 1640                           l2482 1C0E  
                         l2298 1A14                           l2378 140A                           l2466 12B8  
                         l2458 126E                           l2618 17C8                           l2476 1C36  
                         l2468 1C20                           l2492 1650                           l2484 1C18  
                         l2580 1762                           l2494 1676                           l2486 1C1A  
                         l2478 1C02                           l2742 0EE6                           l2590 177C  
                         l2582 1766                           l2496 167A                           l2488 1C1C  
                         l2592 1780                           l2584 1766                           l2576 175A  
                         l2498 169E                           l2594 1788                           l2586 1772  
                         l2578 175E                           l1980 1316                           l1972 12D0  
                         l2596 1790                           l2588 1778                           l1982 1348  
                         l1974 12E0                           l1990 1A6E                           l2598 1798  
                         ?_pad 000E                           l1976 12F0                           l1992 1A72  
                         l1978 12FA                           l1986 1A54                           l1994 1BBC  
                         l1988 1A60                           l1996 1BD8                           STR_1 0E27  
                         STR_2 0E01                           STR_3 0E53                           STR_4 0E46  
                         STR_5 0E38                           STR_6 0E16                           u1000 10DC  
                         u1001 10D8                           u1010 10EC                           u1011 10E8  
                         u1020 1106                           u1100 0F5C                           u1021 1102  
                         u1101 0F58                           u1030 1114                           u1110 0F7C  
                         u1031 1110                           u1111 0F78                           u1040 1124  
                         u1120 19CC                           u1041 1120                           u1121 19C8  
                         u1130 1BA4                           u1050 151A                           u1210 1B00  
                         u1131 1BA0                           u1051 1516                           u1211 1AFC  
                         u1140 1BBA                           u1060 1590                           u1300 12CE  
                         u1141 1BB6                           u1061 158C                           u1301 12CA  
                         u1070 0E86                           u1150 1C4C                           u1071 0E82  
                         u1151 1C48                           u1208 1A02                           u1160 17FA  
                         u1080 0F04                           u1161 17F6                           u1081 0F00  
                         u1170 1818                           u1090 0F28                           u1171 1814  
                         u1091 0F24                           u1180 1834                           u1181 1830  
                         u1190 1A00                           u1191 19F8                   _BAUD4CONbits 0EE9  
                         u1290 1230                           u1291 122C                           u1437 1AE2  
                         u1447 1630                           u1457 1B4A                           _T2PR 0FBC  
                         abs@a 0007                           _dbuf 008D                           _main 175A  
                         _dtoa 0FE6                           _prec 008A                           _test 1212  
                         pad@i 0013                           pad@p 0010                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           prodh 0FF4                           prodl 0FF3  
                         start 0000               __end_of_ADC_init 1C3A         __end_of_color_read_Red 18A4  
                 ___param_bank 0000                          ??_abs 0009                          ??_pad 0012  
                        ?_main 0001                          ?_dtoa 0015                          _ADPCH 0F5F  
              __end_of___awdiv 1212                __end_of___awmod 14EC                          ?_test 0057  
              ___awdiv@divisor 0003                __end_of___lwdiv 1854                ___awdiv@counter 0005  
                 vfpfcnvrt@fmt 0021        __end_of_sendCharSerial4 1C52     __end_of_I2C_2_Master_Start 1C7C  
   __end_of_I2C_2_Master_Write 1C5E                          _flags 005B            read_prec_or_width@c 0009  
          read_prec_or_width@n 000A                          _fputc 12D0                          _fputs 1A54  
                        pad@fp 000E                          _width 0088                          _putch 1C7C  
                        dtoa@d 0016                          dtoa@i 001E                          dtoa@p 001A  
                        dtoa@s 001D                          dtoa@w 001B                          tablat 0FF5  
                        status 0FD8                __end_of_sprintf 1A54        __end_of_color_read_Blue 1994  
        _I2C_2_Master_RepStart 1C5E                ?_color_read_Red 0005                __initialization 1A90  
                 __end_of_main 17E0                   __end_of_dtoa 114E                   __end_of_test 12D0  
                 ??_ADC2String 0047                         ??_main 0059                         ??_dtoa 0018  
                       ??_test 0059                  __activetblptr 0003     __end_of_read_prec_or_width 159A  
                       ?_fputc 0001                         ?_fputs 0009                         _ADRESH 0F64  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21                  ADC2String@buf 0043               ___awdiv@dividend 0001  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
          ADC2String@frac_part 0049                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       _RG6PPS 0E88                  vfpfcnvrt@done 0029       __end_of_color_click_init 1B6A  
                       _RX4PPS 0E15             __end_of_ADC2String 1640                         _TX4REG 0EE4  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 002E                         ___wmul 1BBC  
                    ??___awdiv 0005                      ??___awmod 0005                      ??___lwdiv 000B  
         read_prec_or_width@ap 0008                         clear_0 1AA8                         clear_1 1AB4  
             ___awdiv@quotient 0007                ___awmod@divisor 0003                         _motorL 00B6  
                       _motorR 00AD                         isa$std 0001                ___awmod@counter 0005  
                       pad@buf 000F                         dtoa@fp 0015             send2USART@red_char 0132  
                       fputc@c 0001                         fputs@c 000B                         fputs@i 000C  
                       fputs@s 0009                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8                      ?_ADC_init 0001  
             ?_sendCharSerial4 0001                         putch@c 0001               __end_of_vfprintf 19D6  
            ??_initDCmotorsPWM 0003                      ??_sprintf 0036                     __accesstop 0060  
      __end_of__initialization 1AC4       __end_of_color_read_Clear 1944       __end_of_color_read_Green 18F4  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001               ?_color_read_Blue 0005  
               __pcstackCOMRAM 0001                   __pidataBANK0 1C7E                  __end_of_fputc 138A  
                __end_of_fputs 1A90                  __end_of_putch 1C7E                     ??_ADC_init 0001  
                      ??_fputc 0004                        ??_fputs 000B                        ??_putch 0001  
                   __pbssBANK0 0060                     __pbssBANK2 0200              _color_writetoaddr 1BE2  
                 _T2CLKCONbits 0FBF             ?_color_writetoaddr 0003                        ?___wmul 0001  
          ??_color_writetoaddr 0004                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
            main@battery_level 0059                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
       color_writetoaddr@value 0003               ??_color_read_Red 0007        send2USART@battery_level 004D  
    __end_of_color_writetoaddr 1C02                      _ADREFbits 0F58             _I2C_2_Master_Start 1C72  
                   _initUSART4 1C02             _I2C_2_Master_Write 1C52                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 000A        sendStringSerial4@string 0002  
                      ___awdiv 114E                        ___awmod 143C            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 17E0            ?_I2C_2_Master_Write 0001                      ?_vfprintf 002B  
          send2USART@blue_char 0164                   __psmallconst 0E00                        __pcinit 1A90  
                      __ramtop 0E00                     _send2USART 138A                        __ptext0 175A  
                      __ptext1 1212                        __ptext2 138A                        __ptext3 1ACA  
                      __ptext4 1C3A                        __ptext5 159A                        __ptext6 1A18  
                      __ptext7 1994                        __ptext8 0E60                        __ptext9 14EC  
                    _T2CONbits 0FBD          read_prec_or_width@fmt 0007               ___awmod@dividend 0001  
                    _T2HLTbits 0FBE                  _RxBufWriteCnt 005F                        _sprintf 1A18  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 1AC4  
                      fputc@fp 0003                        fputs@fp 000A              ?_color_click_init 0001  
           _read_prec_or_width 14EC             ??_color_click_init 0005                        test@red 00F1  
            __end_of_vfpfcnvrt 0FE6                        postdec2 0FDD            ?_read_prec_or_width 0007  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0025                     ??_vfprintf 002E                _initDCmotorsPWM 1640  
                    _TRISAbits 0F81                      _TRISCbits 0F83                      _TRISDbits 0F84  
                    _TRISEbits 0F85                      _TRISFbits 0F86                      _TRISGbits 0F87  
         ??_read_prec_or_width 0009       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
                  _CCP1CONbits 0FAB              ?_color_read_Clear 0005                   _EUSART4RXbuf 0074  
                 _EUSART4TXbuf 0200                    _CCP2CONbits 0FA7              ?_color_read_Green 0005  
                  _CCP3CONbits 0F26                    ?_initUSART4 0001                    _CCP4CONbits 0F22  
    sendCharSerial4@charToSend 0001             ??_color_read_Clear 0007             ??_color_read_Green 0007  
                  vfpfcnvrt@ap 0022                    vfpfcnvrt@cp 002A                    vfpfcnvrt@fp 0020  
               __end_of___wmul 1BE2                    ?_send2USART 004D            color_read_Clear@tmp 000A  
          start_initialization 1A90                    __end_of_abs 1B36                    __end_of_pad 175A  
                _TxBufWriteCnt 005D            color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 16D0  
                  vfprintf@fmt 002C             ADC2String@int_part 004B                       ??___wmul 0005  
                  __pdataBANK0 00FB                    __pbssCOMRAM 005B                  __pcstackBANK0 00BF  
                __pcstackBANK1 0100               ___lwdiv@dividend 0007                      _dtoa$2280 0018  
                     ?___awdiv 0001                       ?___awmod 0001                       ?___lwdiv 0007  
                 _readingIndex 008C           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
                  __smallconst 0E00              _I2C_2_Master_Idle 1B94              _I2C_2_Master_Init 1B6A  
            _I2C_2_Master_Read 19D6              _I2C_2_Master_Stop 1C68                   _RxBufReadCnt 005E  
                     _ADC_init 1C20             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B  
     initDCmotorsPWM@PWMperiod 0001                       ?_sprintf 002F              _sendStringSerial4 1ACA  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 0F7B                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATGbits 0F7F              ADC2String@ADC_val 0045             ?_sendStringSerial4 0002  
                     _PIE4bits 0E2D                       _PIR4bits 0E37               ?_initDCmotorsPWM 0001  
            ??_sendCharSerial4 0001                       _SSP2CON2 0EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 0ED8                     _ADC2String 159A                      _vfpfcnvrt 0E60  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 1BBC      __end_of_I2C_2_Master_Init 1B94  
    __end_of_I2C_2_Master_Read 1A18              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 1C72  
  I2C_2_Master_Write@data_byte 0002                    _ldrReadings 0060              ??_color_read_Blue 0007  
                 _TxBufReadCnt 005C                send2USART@clear 0055      __end_of_sendStringSerial4 1B02  
              send2USART@green 0051  __end_of_I2C_2_Master_RepStart 1C68             color_read_Blue@tmp 000A  
                 ??_initUSART4 0001                       __Hrparam 0000                     vfprintf@ap 002D  
                     __Lrparam 0000           send2USART@clear_char 01C8                     vfprintf@fp 002B  
                   ?_vfpfcnvrt 0020                   ??_send2USART 0057                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                       _dataFlag 00FB                     sprintf@fmt 0031  
                test@led_state 00BF                ___lwdiv@divisor 0009             __end_of_initUSART4 1C20  
              ___lwdiv@counter 000D                       __ptext10 1BBC                       __ptext11 0FE6  
                     __ptext20 1854                       __ptext12 16D0                       __ptext21 18A4  
                     __ptext13 1A54                       __ptext30 1C52                       __ptext22 18F4  
                     __ptext14 12D0                       __ptext31 1C68                       __ptext23 1944  
                     __ptext15 1C7C                       __ptext32 1C72                       __ptext24 1C5E  
                     __ptext16 1B02                       __ptext33 1B94                       __ptext25 19D6  
                     __ptext17 143C                       __ptext34 1B6A                       __ptext26 1C02  
                     __ptext18 114E                       __ptext35 1C20                       __ptext27 1640  
                     __ptext19 17E0                       __ptext28 1B36                       __ptext29 1BE2  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA             __end_of_send2USART 143C  
         send2USART@green_char 0196                      test@clear 00F7                      test@combo 00F9  
                    test@green 00F5                       isa$xinst 0000                     _RC4STAbits 0EE7  
                  ?_ADC2String 0043                       _vfprintf 1994                 send2USART@blue 0053  
            test@battery_level 0057                      sprintf@ap 0036                       test@blue 00F3  
                send2USART@buf 0100                  send2USART@red 004F                    ??_vfpfcnvrt 0023  
             _color_click_init 1B36                       sprintf@f 0037                       sprintf@s 002F  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                     _TX4STAbits 0EE8  
              _sendCharSerial4 1C3A  
=======
Symbol Table                                                                                   Mon Mar 11 20:55:49 2024

         fullSpeedBack@power 0041                           l45 1434                           l48 1562  
                         l96 14F4                           l99 14F6                           u40 1506  
                         u41 1502                           u50 151C                           u51 1518  
        ___wmul@multiplicand 002E                          l102 151C                          l111 15B0  
                        l105 15BA                          l114 15A6                          l205 159A  
                        l301 1354                          l322 14CA                          l307 1498  
                        l273 0FE8                          l281 11E6                          l337 1466  
                        l266 1158                          l460 1542                          l286 1264  
                        l296 12DE                          l394 1580                          l951 13C0  
                        l958 13C8                          u400 1370                          u401 136C  
                        u410 138E                          u411 138A                          u420 13AA  
                        u500 1354                          u421 13A6                          u501 1350  
                        u430 0EB0                          u431 0EAC                          u440 0F6C  
                        u441 0F68                          u450 1174                          u451 1170  
                        u540 12DE                          u460 1192                          u541 12DA  
                        u461 118E                          u470 11D0                          u471 11CC  
                        u480 11E6                          u640 106E                          u481 11E2  
                        u641 106A                          u490 1264                          u491 1260  
                        u707 144C                          u717 147E                          u727 1240  
                        u737 14B0                          u747 11B0                          u757 132A  
                        u767 12B4                          u687 1078                          u777 1416  
                        u697 109C                          wreg 0FE8                         l2100 100A  
                       l2110 102A                         l2102 100E                         l1400 1570  
                       l2120 104E                         l2112 102E                         l2104 1016  
                       l1170 1506                         l1402 157A                         l2130 1058  
                       l2122 1050                         l2114 1032                         l2106 101E  
                       l1404 157C                         l2140 1086                         l2132 105A  
                       l2124 1052                         l2116 104A                         l2108 1026  
                       l1270 14DE                         l1190 15B6                         l1406 157E  
                       l2142 1092                         l2134 105C                         l2126 1054  
                       l2118 104C                         l1272 14E0                         l1264 14CC  
                       l1168 14F6                         l1192 159E                         l2136 1060  
                       l2128 1056                         l1274 14E2                         l1266 14D6  
                       l1194 15A2                         l2138 106E                         l2090 0FF2  
                       l1268 14DC                         l1188 15B2                         l1196 15A8  
                       l2092 0FF6                         l1390 1594                         l1198 15AC  
                       l2094 0FF6                         l2086 0FEA                         l1392 1596  
                       l1800 117C                         l2096 1002                         l2088 0FEE  
                       l1394 1598                         l1386 1582                         l1802 1192  
                       l1810 11BA                         l2098 1006                         l1388 158C  
                       l1900 1402                         l1396 1564                         l1812 11D0  
                       l1804 119A                         l1820 1212                         l1902 1406  
                       l1750 151E                         l1398 156E                         l1806 11A2  
                       l1830 1232                         l1814 11E8                         l1904 1410  
                       l1760 1370                         l1752 153A                         l1920 10CA  
                       l1840 12F8                         l1808 11AA                         l1832 123A  
                       l1816 1202                         l1906 1420                         l1770 13AA  
                       l1762 1378                         l1930 1132                         l1922 10DA  
                       l1850 131C                         l1834 124A                         l1826 121A  
                       l1818 120A                         l1908 142A                         l1772 13B2  
                       l1764 1380                         l1756 1356                         l1780 0EB0  
                       l1940 114C                         l1932 1134                         l1924 1100  
                       l1852 1324                         l1836 124E                         l1828 122A  
                       l1774 13B4                         l1766 138E                         l1758 135E  
                       l1790 0F6C                         l1782 0EFE                         l1942 1156  
                       l1934 113E                         l1926 1104                         l1854 1334  
                       l1846 1300                         l1838 12E0                         l1776 13BA  
                       l1768 1394                         l1792 0FAC                         l1784 0F10  
                       l1960 12BE                         l1952 128A                         l1944 1266  
                       l1936 1140                         l1928 1128                         l1856 1338  
                       l1848 1314                         l1858 1546                         l1786 0F14  
                       l1778 0E96                         l1962 12C2                         l1954 129E  
                       l1946 1282                         l1938 114A                         l1794 115A  
                       l1890 149A                         l1788 0F52                         l1956 12A6  
                       l1796 115E                         l1892 14A6                         l1884 1468  
                       l1964 1436                         l1958 12AE                         l1798 1174  
                       l1894 14BE                         l1886 1474                         l1966 1442  
                       l1888 148C                         l1968 145A                         STR_1 0E3A  
                       STR_2 0E16                         STR_3 0E5C                         STR_4 0E4B  
                       STR_5 0E01                         STR_6 0E88                         STR_7 0E7B  
                       STR_8 0E6D                         STR_9 0E29                 _BAUD4CONbits 0EE9  
                       _T2PR 0FBC                         _main 0FEA                         fsr2h 0FDA  
                       indf2 0FDF                         fsr2l 0FD9                         _stop 115A  
        fullSpeedAhead@power 0041                         prodh 0FF4                         prodl 0FF3  
                       start 0000             __end_of_ADC_init 159C                 ___param_bank 0000  
                      ?_main 002C                        _ADPCH 0F5F                        ?_stop 003E  
            __end_of___lwdiv 13CA   __end_of_I2C_2_Master_Start 15BC   __end_of_I2C_2_Master_Write 15A8  
                      tablat 0FF5                        status 0FD8              __initialization 13CA  
               __end_of_main 10CA                 __end_of_stop 11E8                       ??_main 004B  
                     ??_stop 0040                __activetblptr 0001                 ?_setMotorPWM 0039  
                     _ADRESH 0F64                       _CCPR1H 0FAA                       _CCPR2H 0FA6  
                     _CCPR3H 0F25                       _CCPR4H 0F21                       _RC0PPS 0E62  
                     _RC4REG 0EE3                       _RE2PPS 0E74                       _RD5PPS 0E6F  
                     _RC7PPS 0E69                       _RE4PPS 0E76                       _RD6PPS 0E70  
                     _RG6PPS 0E88     __end_of_color_click_init 1436                       _RX4PPS 0E15  
                     _TX4REG 0EE4                 _CCPTMRS0bits 0FAD                       ___wmul 151E  
           backOneAndHalf@mL 0043             backOneAndHalf@mR 0044                    ??___lwdiv 0036  
                     _left90 1468                       clear_0 13E2                       clear_1 13EE  
                     _motorL 0023                       _motorR 001A                       isa$std 0001  
           __end_of_movePink 1468                 __pdataCOMRAM 004D                 __mediumconst 0000  
                     tblptrh 0FF7                       tblptrl 0FF6                       tblptru 0FF8  
                  ?_ADC_init 002C                       stop@mL 003E                       stop@mR 003F  
          ??_initDCmotorsPWM 002E             __end_of_turnLeft 1266              fullSpeedBack@mL 003E  
            fullSpeedBack@mR 003F                   __accesstop 0060      __end_of__initialization 13F4  
             _backOneAndHalf 149A                ___rparam_used 0001               __pcstackCOMRAM 002C  
              _fullSpeedBack 12E0                   ??_ADC_init 002C                   __pbssBANK0 0060  
     __end_of_backOneAndHalf 14CC            _color_writetoaddr 1544                 _T2CLKCONbits 0FBF  
             ?_fullSpeedBack 003E           ?_color_writetoaddr 002E                      ?___wmul 002C  
                    ?_left90 0043          ??_color_writetoaddr 002F                      _SP4BRGH 0EE6  
                    _SP4BRGL 0EE5                      _SSP2ADD 0ED6                      _SSP2BUF 0ED5  
            ?_backOneAndHalf 0043       color_writetoaddr@value 002E    __end_of_color_writetoaddr 1564  
                  _ADREFbits 0F58           _I2C_2_Master_Start 15B2                   _initUSART4 1564  
         _I2C_2_Master_Write 159C                      __Hparam 0000                    ?_movePink 0047  
                    __Lparam 0000          ?_I2C_2_Master_Start 002C                      ___lwdiv 1356  
        ?_I2C_2_Master_Write 002C                 __psmallconst 0E00                      __pcinit 13CA  
                    __ramtop 0E00                    ?_turnLeft 003E                      __ptext0 0FEA  
                    __ptext1 1436                      __ptext2 1468                      __ptext3 11E8  
                    __ptext4 149A                      __ptext5 115A                      __ptext6 12E0  
                    __ptext7 1564                      __ptext8 10CA                      __ptext9 1266  
                  _T2CONbits 0FBD                    _T2HLTbits 0FBE                _RxBufWriteCnt 0019  
       ??_I2C_2_Master_Start 002D         ??_I2C_2_Master_Write 002D         end_of_initialization 13F4  
          ?_color_click_init 002C              ??_fullSpeedBack 0040           ??_color_click_init 0030  
                 ??_movePink 0049                      postdec2 0FDD                      postinc0 0FEE  
                    postinc2 0FDE              _initDCmotorsPWM 10CA                   ??_turnLeft 0040  
                  _PORTFbits 0F8E           setMotorPWM@negDuty 003D                    _TRISAbits 0F81  
         setMotorPWM@posDuty 003C                    _TRISCbits 0F83                    _TRISDbits 0F84  
                  _TRISEbits 0F85                    _TRISFbits 0F86                    _TRISGbits 0F87  
           fullSpeedAhead@mL 003E             fullSpeedAhead@mR 003F     color_writetoaddr@address 002F  
                _CCP1CONbits 0FAB                 _EUSART4RXbuf 0001                 _EUSART4TXbuf 0060  
                _CCP2CONbits 0FA7                  _CCP3CONbits 0F26                  ?_initUSART4 002C  
                _CCP4CONbits 0F22               _fullSpeedAhead 1266               __end_of___wmul 1544  
              __pidataCOMRAM 15BC               __end_of_left90 149A          start_initialization 13CA  
              _TxBufWriteCnt 0017      __end_of_initDCmotorsPWM 115A       __end_of_fullSpeedAhead 12E0  
                   ??___wmul 0030                     ??_left90 0045                  __pbssCOMRAM 0001  
           ??_backOneAndHalf 0045             ___lwdiv@dividend 0032              ?_fullSpeedAhead 003E  
                   ?___lwdiv 0032                 _readingIndex 0015                  __smallconst 0E00  
                 movePink@mL 0047                   movePink@mR 0048            _I2C_2_Master_Idle 14F6  
          _I2C_2_Master_Init 14CC            _I2C_2_Master_Stop 15A8                 _RxBufReadCnt 0018  
                   _ADC_init 1582           ?_I2C_2_Master_Idle 002C           ?_I2C_2_Master_Init 002C  
              ??_setMotorPWM 003A           ?_I2C_2_Master_Stop 002C             ___lwdiv@quotient 0036  
   initDCmotorsPWM@PWMperiod 002C          ??_I2C_2_Master_Idle 002C          ??_I2C_2_Master_Init 002C  
             ___wmul@product 0030                     _LATAbits 0F79          ??_I2C_2_Master_Stop 002D  
                   _LATCbits 0F7B                     _LATDbits 0F7C                     _LATEbits 0F7D  
                   _LATGbits 0F7F                     _PIE4bits 0E2D                     _PIR4bits 0E37  
           ?_initDCmotorsPWM 002C                     _SSP2CON2 0EDA                     _SSP2STAT 0ED8  
                 _ADCON0bits 0F60    __end_of_I2C_2_Master_Idle 151E    __end_of_I2C_2_Master_Init 14F6  
          ___wmul@multiplier 002C    __end_of_I2C_2_Master_Stop 15B2                 setMotorPWM@m 0039  
I2C_2_Master_Write@data_byte 002D                  _ldrReadings 009C                 _TxBufReadCnt 0016  
        __end_of_setMotorPWM 0FEA                 ??_initUSART4 002C                     __Hrparam 0000  
                   __Lrparam 0000        __end_of_fullSpeedBack 1356                 __Lsmallconst 0E00  
                 _ANSELDbits 0EA7                   _ANSELFbits 0EB4                     _dataFlag 004D  
            ___lwdiv@divisor 0034           __end_of_initUSART4 1582              ___lwdiv@counter 0038  
                   __ptext10 0E96                     __ptext11 151E                     __ptext20 1582  
                   __ptext12 1356                     __ptext13 1402                     __ptext14 1544  
                   __ptext15 159C                     __ptext16 15A8                     __ptext17 15B2  
                   __ptext18 14F6                     __ptext19 14CC                 _SSP2CON1bits 0ED9  
               _SSP2CON2bits 0EDA                   turnLeft@mL 003E                   turnLeft@mR 003F  
                   _movePink 1436                     isa$xinst 0000                     left90@mL 0043  
                   left90@mR 0044                   _RC4STAbits 0EE7                     _turnLeft 11E8  
                _setMotorPWM 0E96             ??_fullSpeedAhead 0040                    turnLeft@i 0041  
           _color_click_init 1402                   _SSP2DATPPS 0E1D                   _SSP2CLKPPS 0E1C  
                 _TX4STAbits 0EE8  
>>>>>>> Movement
=======
Symbol Table                                                                                   Tue Mar 12 12:11:43 2024

               _color_read_Red 24E4                _color_read_Blue 25D4                             l53 2750  
                           l62 2582                             l56 28B2                             l65 2622  
                           l81 1702                             l90 1D16                             l59 2532  
                           l68 25D2                             l93 172A                             l95 1738  
                           l96 1788                             l98 1796                             l99 17EA  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003             convert_rgb2hue@hue 0068  
             _color_read_Clear 2584               _color_read_Green 2534                            l101 17F8  
                          l102 184C                            l104 185A                            l105 18B6  
                          l108 24E2                            l141 2846                            l150 292C  
                          l144 286C                            l153 2918                            l313 2410  
                          l138 2844                            l147 2922                            l252 28EA  
                          l156 290E                            l405 28D0                            l414 28EE  
                          l159 26A6                            l423 27EA                            l417 2902  
                          l702 1FA2                            l471 2892                            l465 224C  
                          l715 2052                            l468 271C                            l488 22CA  
                          l489 22EA                            l916 1E06                            l909 1DE6  
                          l962 247C                            l969 2484                            _abs 2786  
                          _pad 22EC            convert_rgb2hue@cMax 0032                   ___awmod@sign 0006  
                          wreg 0FE8                           ?_abs 0007                           l1213 1A42  
                         l1223 27A0                           l1226 27B8                           l1219 2664  
                         l1172 2360                           l1149 2784                           l1238 21AA  
                         l1246 26E6                           l1174 2380                           l1190 1BBA  
                         l3201 1F3A                           l1249 292E                           l1169 2322  
                         l1177 1AA2                           l1194 20F8                           l3211 1F74  
                         l3203 1F42                           l3221 1F9A                           l3213 1F76  
                         l3205 1F50                           l3301 1AB4                           l1198 2100  
                         l3215 1F7C                           l3207 1F56                           l3231 1FBE  
                         l3303 1ABA                           l3311 1B12                           l3209 1F6C  
                         l3217 1F82                           l3241 1FF2                           l3233 1FC2  
                         l3225 1FA4                           l3161 2148                           l3153 2102  
                         l3313 1B2C                           l3321 1B78                           l3305 1AEC  
                         l3219 1F92                           l3251 202C                           l3243 1FFA  
                         l3235 1FD0                           l3227 1FA8                           l3163 217A  
                         l3155 2112                           l3171 26C2                           l3323 1B88  
                         l3315 1B3E                           l3307 1AF0                           l3331 2054  
                         l3411 262C                           l3405 2846                           l3421 291E  
                         l3501 261A                           l3181 1EE0                           l3245 2008  
                         l3253 2032                           l3237 1FD8                           l3229 1FB6  
                         l3157 2122                           l3173 26C6                           l3261 22EC  
                         l3325 1B8E                           l3317 1B4E                           l3309 1AF6  
                         l3341 20C6                           l3333 205C                           l4053 1940  
                         l3413 263C                           l3407 2856                           l3431 2924  
                         l3423 2906                           l3511 27BA                           l3191 1F0C  
                         l3183 1EE4                           l3255 2042                           l3247 201E  
                         l3239 1FEA                           l3159 212C                           l3167 26A8  
                         l3271 233E                           l3263 22FC                           l3327 1B9E  
                         l3319 1B68                           l3175 286E                           l3335 2082  
                         l3343 20CE                           l3351 18F4                           l3415 265C  
                         l3441 267C                           l3433 2928                           l3425 290A  
                         l3505 2584                           l3513 27BE                           l3193 1F14  
                         l3185 1EF2                           l3257 204A                           l3249 2026  
                         l3169 26B4                           l3273 2342                           l3265 230C  
                         l3281 1A44                           l3177 288A                           l3337 208A  
                         l3353 18F8                           l3345 18B8                           l3409 2624  
                         l3601 1222                           l3443 26A2                           l3435 2668  
                         l3419 291A                           l3427 2910                           l3507 25CA  
                         l3515 27CA                           l3195 1F18                           l3187 1EFA  
                         l3275 2370                           l3267 231A                           l3291 1A7A  
                         l3283 1A48                           l3339 20A6                           l3371 1982  
                         l3363 1918                           l3355 1900                           l3347 18DE  
                         l3451 275A                           l3611 15A2                           l3603 153A  
                         l3445 26A4                           l3437 266C                           l3429 2914  
                         l3461 28EE                           l3517 27CC                           l3197 1F20  
                         l3189 1EFE                           l3277 2786                           l3269 232E  
                         l3293 1A8A                           l3285 1A5C                           l3381 19F2  
                         l3373 1990                           l3357 1904                           l3365 194E  
                         l3349 18E6                           l3453 2762                           l3621 1622  
                         l3613 15C2                           l3605 1560                           l3541 2218  
                         l3701 1BBC                           l3439 2674                           l3463 28FE  
                         l3519 27D4                           l3199 1F32                           l3279 2794  
                         l3295 1A96                           l3287 1A64                           l3383 19FC  
                         l3375 199A                           l3367 195E                           l3359 1910  
                         l3391 1A1C                           l3455 276A                           l3471 2434  
                         l3551 2288                           l3631 16A2                           l3623 1642  
                         l3607 1576                           l3615 15DE                           l3543 2234  
                         l3711 1BDE                           l3801 28E8                           l3297 1A9E  
                         l3289 1A74                           l3377 19BA                           l3369 1972  
                         l3457 277A                           l3449 2752                           l3561 1D4A  
                         l3481 246E                           l3473 243C                           l3465 2412  
                         l3553 229A                           l3545 224E                           l3633 16D0  
                         l3617 15F6                           l3625 165E                           l3609 158C  
                         l3537 21AC                           l3641 26E8                           l3721 1C5A  
                         l3713 1C04                           l3299 1AAA                           l3387 1A10  
                         l3379 19DA                           l3811 28CC                           l3803 28B4  
                         l3571 1DCC                           l3563 1D5E                           l3555 1D18  
                         l3483 2470                           l3475 244A                           l3467 241A  
                         l3547 225A                           l3635 16FA                           l3627 1676  
                         l3619 160C                           l3539 21C8                           l3643 270C  
                         l3731 1CB6                           l3723 1C60                           l3715 1C18  
                         l3707 1BC6                           l3493 2534                           l3581 282C  
                         l3821 23BC                           l3813 28CE                           l3805 28BE  
                         l3573 1DCE                           l3565 1D6C                           l3557 1D24  
                         l3485 2476                           l3477 2450                           l3469 242C  
                         l3549 2268                           l3629 168C                           l3645 2714  
                         l3741 1D00                           l3733 1CBE                           l3725 1C86  
                         l3717 1C1E                           l3709 1BD8                           l3901 1E26  
                         ?_pad 000F                           l3495 257A                           l3487 24E4  
                         l3751 1752                           l3743 1704                           l3583 282E  
                         l3831 23F8                           l3823 23E0                           l3815 2382  
                         l3807 28C0                           l3575 1DE0                           l3567 1D7E  
                         l3559 1D42                           l3479 2466                           l3591 0EF6  
                         l3639 2486                           l3735 1CCA                           l3727 1C9C  
                         l3719 1C44                           l3911 1E46                           l3903 1E2A  
                         l3489 252A                           l3761 17B0                           l3753 1766  
                         l3745 170A                           l3585 2830                           l3577 281C  
                         l3833 2402                           l3825 23EA                           l3817 2392  
                         l3809 28CA                           l3569 1DAC                           l3593 11EC  
                         l3737 1CE6                           l3729 1CA2                           l3921 1E6C  
                         l3913 1E4A                           l3905 1E2E                           l3499 25D4  
                         l3771 1812                           l3763 17C8                           l3755 1768  
                         l3747 1722                           l3587 2832                           l3579 2826  
                         l3691 271E                           l3835 2404                           l3827 23EC  
                         l3819 23B8                           l3595 11F4                           l3739 1CFA  
                         l3931 1E76                           l3923 1E6E                           l3915 1E4E  
                         l3907 1E36                           l3781 1878                           l3773 182A  
                         l3765 17CA                           l3757 1780                           l3749 173A  
                         l3589 2896                           l3693 2722                           l3837 240E  
                         l3829 23F6                           l3597 11FC                           l3941 1E80  
                         l3933 1E78                           l3925 1E70                           l3917 1E52  
                         l3909 1E3E                           l3791 18AE                           l3783 1890  
                         l3775 182C                           l3767 17E2                           l3759 1798  
                         l3695 272C                           l3599 1204                           l3951 1EA2  
                         l3943 1E82                           l3935 1E7A                           l3927 1E72  
                         l3919 1E6A                           l3793 28D2                           l3785 1892  
                         l3777 1844                           l3769 17FA                           l3697 273C  
                         l3953 1EA6                           l3945 1E9C                           l3937 1E7C  
                         l3929 1E74                           l3795 28DC                           l3787 1894  
                         l3779 1860                           l3699 2746                           l3955 1EB2  
                         l3947 1E9E                           l3939 1E7E                           l3891 1E0C  
                         l3797 28E4                           l3789 1896                           l3957 1ECC  
                         l3949 1EA0                           l3893 1E10                           l3799 28E6  
                         l3895 1E14                           l3897 1E14                           l3889 1E08  
                         l3899 1E20                           STR_1 0EB4                           STR_2 0EA1  
                         STR_3 0ED6                           STR_4 0EC5                           STR_5 0E74  
                         STR_6 0EF3                           STR_7 0E23                           STR_8 0EF3  
                         STR_9 0E40                           u2000 217A                           u2001 2176  
                         u2010 26E6                           u2011 26E2                           u2020 1EF2  
                         u2100 1FEA                           u2021 1EEE                           u2101 1FE6  
                         u2030 1F0C                           u2110 2008                           u2031 1F08  
                         u2111 2004                           u2040 1F32                           u2120 201E  
                         u2200 1A5A                           u2041 1F2E                           u2121 201A  
                         u2050 1F50                           u2130 2042                           u2210 1A74  
                         u2051 1F4C                           u2131 203E                           u2211 1A70  
                         u2060 1F6C                           u2140 22FC                           u2220 1A8A  
                         u2300 20F8                           u2061 1F68                           u2141 22F8  
                         u2221 1A86                           u2301 20F4                           u2070 1F92  
                         u2150 231A                           u2230 1B2C                           u2310 18DE  
                         u2071 1F8E                           u2151 2316                           u2231 1B28  
                         u2311 18DA                           u2080 1FB6                           u2160 2360  
                         u2240 1B3E                           u2320 195E                   _BAUD4CONbits 0EE9  
                         u2081 1FB2                           u2161 235C                           u2241 1B3A  
                         u2321 195A                           u2410 28FE                           u2090 1FD0  
                         u2170 2370                           u2250 1B4E                           u2330 1982  
                         u2411 28FA                           u2091 1FCC                           u2171 236C  
                         u2251 1B4A                           u2331 197E                           u2180 2794  
                         u2260 1B68                           u2340 19BA                           u2420 242C  
                         u2500 22CA                           u2181 2790                           u2261 1B64  
                         u2341 19B6                           u2421 2428                           u2501 22C6  
                         u2270 1B78                           u2190 1A58                           u2350 19DA  
                         u2430 244A                           u2271 1B74                           u2191 1A52  
                         u2351 19D6                           u2511 1D1E                           u2431 2446  
                         u2360 2856                           u2408 2692                           u2280 1B88  
                         u2520 1D42                           u2440 2466                           u2600 160C  
                         u2361 2852                           u2281 1B84                           u2521 1D3E  
                         u2441 2462                           u2601 1608                           u2370 286C  
                         u2450 27EA                           u2290 2082                           u2530 1D6C  
                         u2610 1622                           _T2PR 0FBC                           u2371 2868  
                         u2451 27E6                           u2291 207E                           u2531 1D68  
                         u2611 161E                           u2380 265C                           u2540 1DAC  
                         u2620 1676                           u2700 1BD8                           u2381 2658  
                         u2541 1DA8                           u2621 1672                           u2701 1BD4  
                         u2390 2690                           u2630 168C                           u2550 1222  
                         u2710 1BF8                           u2391 2688                           u2631 1688  
                         u2551 121E                           u2711 1BF0                           u2800 17F8  
                         u2640 16A2                           u2560 1576                           u2720 1C18  
                         u2801 17F4                           u2481 2254                           u2641 169E  
                         u2561 1572                           u2721 1C14                           u2810 185A  
                         u2490 2268                           u2570 158C                           u2730 1C38  
                         u2811 1856                           u2491 2264                           u2571 1588  
                         u2731 1C30                           u2580 15A2                           u2740 1C5A  
                         u2581 159E                           u2741 1C56                           u2590 15F6  
                         u2750 1C7A                           u2718 1BFA                           u2591 15F2  
                         u2751 1C72                           u2760 1C9C                           u2761 1C98  
                         u1970 2112                           u2770 1D16                           u2738 1C3A  
                         u1971 210E                           u2907 1744                           u2771 1D12  
                         u1980 2122                           u2780 1738                           u1981 211E  
                         u2917 17A2                           u2781 1734                           u1990 2148  
                         u2790 1796                           u2758 1C7C                           u1991 2144  
                         u2927 1804                           u2791 1792                           u2937 186A  
                         u2947 27CE                           u2867 1E8E                           u2877 1EBE  
                         u2887 223E                           u2897 2732                           abs@a 0007  
                         _dbuf 0169                           _main 1E08                           _dtoa 1A44  
         convert_rgb2hue@cCurr 0034                           _prec 0166                           _test 1BBC  
                         pad@i 0015                           pad@p 0012                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           prodh 0FF4                           prodl 0FF3  
                         start 0000               __end_of_ADC_init 28EC           convert_rgb2hue@total 006A  
       __end_of_color_read_Red 2534                   ___param_bank 0000                          ??_abs 0009  
                        ??_pad 0014                          ?_main 0001                          ?_dtoa 0017  
                        _ADPCH 0F5F                __end_of___awdiv 1FA4                          STR_10 0EF3  
                        STR_11 0E01                          STR_12 0EF3                          STR_13 0E5B  
                        STR_14 0EF3                          STR_15 0E8C                          STR_16 0EE7  
              __end_of___awmod 2054                          ?_test 005C                __end_of___lodiv 1E08  
              ___awdiv@divisor 0003                __end_of___lwdiv 2486                ___awdiv@counter 0005  
            ??_convert_rgb2hue 0036                   vfpfcnvrt@fmt 0023        __end_of_sendCharSerial4 2904  
   __end_of_I2C_2_Master_Start 2924     __end_of_I2C_2_Master_Write 2910                          _flags 00FC  
          read_prec_or_width@c 0009            read_prec_or_width@n 000A                          _fputc 2102  
                        _fputs 26A8                          pad@fp 000F                          _width 0164  
                        _putch 292E                          dtoa@d 0018                          dtoa@i 0020  
                        dtoa@p 001C                          dtoa@s 001F                          dtoa@w 001D  
                        tablat 0FF5                          status 0FD8                __end_of_sprintf 2786  
             ___lodiv@dividend 0019        __end_of_color_read_Blue 2624          _I2C_2_Master_RepStart 2924  
              ?_color_read_Red 0005                __initialization 27EC                   __end_of_main 1EE0  
                 __end_of_dtoa 1BBC                   __end_of_test 1D18                   ??_ADC2String 0047  
             ??_reading_values 000E                         ??_main 00FA                         ??_dtoa 001A  
                       ??_test 005E                  __activetblptr 0003     __end_of_read_prec_or_width 2102  
             ___lodiv@quotient 0029                         ?_fputc 0001                         ?_fputs 0009  
                       _ADRESH 0F64                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21                  ADC2String@buf 0044  
             ___awdiv@dividend 0001                         ?_putch 0001                         _RC0PPS 0E62  
                       _RC4REG 0EE3                         _RE2PPS 0E74                         _RD5PPS 0E6F  
                       _RC7PPS 0E69            ADC2String@frac_part 0049                         _RE4PPS 0E76  
                       _RD6PPS 0E70                         _RG6PPS 0E88                  vfpfcnvrt@done 002B  
     __end_of_color_click_init 2752                         _RX4PPS 0E15             __end_of_ADC2String 224E  
                       _TX4REG 0EE4                   _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0030  
                       ___omul 224E                         ___wmul 286E                      ??___awdiv 0005  
                    ??___awmod 0005                      ??___lodiv 0029                      ??___lwdiv 000B  
         read_prec_or_width@ap 0008                         clear_0 2804               ___awdiv@quotient 0007  
              ___awmod@divisor 0003                         _motorL 0192                         _motorR 0189  
                       isa$std 0001                ___awmod@counter 0005             send2USART@hue_char 0092  
                       pad@buf 0010                         dtoa@fp 0017                         fputc@c 0001  
                       fputs@c 000C                         fputs@i 000D                         fputs@s 0009  
                 __mediumconst 0000        calibration_routine@cCal 0044                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8                      ?_ADC_init 0001  
             ?_sendCharSerial4 0001                         putch@c 0001               __end_of_vfprintf 2666  
            ??_initDCmotorsPWM 0003                      ??_sprintf 0037                     __accesstop 0060  
      __end_of__initialization 2816       __end_of_color_read_Clear 25D4       __end_of_color_read_Green 2584  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001               ?_color_read_Blue 0005  
               __pcstackCOMRAM 0001                   __pidataBANK1 2930                  __end_of_fputc 21AC  
                __end_of_fputs 26E8                  __end_of_putch 2930                     ??_ADC_init 0001  
                      ??_fputc 0004                        ??_fputs 000C                        ??_putch 0001  
                   __pbssBANK0 00FC                     __pbssBANK1 0100              _color_writetoaddr 2894  
                 _T2CLKCONbits 0FBF                _convert_rgb2hue 0EF6             ?_color_writetoaddr 0003  
                      ?___omul 0001                        ?___wmul 0001            ___omul@multiplicand 0009  
          ??_color_writetoaddr 0004                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
            main@battery_level 01AB                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
       color_writetoaddr@value 0003               ??_color_read_Red 0007        send2USART@battery_level 004D  
    __end_of_color_writetoaddr 28B4                      _ADREFbits 0F58             _I2C_2_Master_Start 291A  
                   _initUSART4 28B4             _I2C_2_Master_Write 2904                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 000A        sendStringSerial4@string 0002  
                      ___awdiv 1EE0                        ___awmod 1FA4                        ___lodiv 1D18  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 2412            ?_I2C_2_Master_Write 0001  
                    ?_vfprintf 002D                   __psmallconst 0E00                        __pcinit 27EC  
                      __ramtop 0E00                     _send2USART 26E8                        __ptext0 1E08  
                      __ptext1 1BBC                        __ptext2 26E8                        __ptext3 21AC  
                      __ptext4 2486                        __ptext5 0EF6                        __ptext6 224E  
                      __ptext7 2412                        __ptext8 1D18                        __ptext9 28B4  
                    _T2CONbits 0FBD          read_prec_or_width@fmt 0007               ___awmod@dividend 0001  
                    _T2HLTbits 0FBE                  _RxBufWriteCnt 00FF                        _sprintf 2752  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 2816  
               ___omul@product 0011                        fputc@fp 0003        __end_of_convert_rgb2hue 1704  
                      fputs@fp 000B              ?_color_click_init 0001             _read_prec_or_width 2054  
           ??_color_click_init 0005               _colorCalibration 01A3                        test@hue 00F6  
            __end_of_vfpfcnvrt 1A44                        postdec2 0FDD            ?_read_prec_or_width 0007  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0027                     ??_vfprintf 0030                   _colorCurrent 019B  
              _initDCmotorsPWM 2382                      _PORTFbits 0F8E                      _TRISAbits 0F81  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
             convert_rgb2hue@b 0082           ??_read_prec_or_width 0009               convert_rgb2hue@g 0086  
             convert_rgb2hue@r 0084       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
                  _CCP1CONbits 0FAB            _calibration_routine 1704              ?_color_read_Clear 0005  
                 _EUSART4RXbuf 0150                   _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0005                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001             ??_color_read_Clear 0007  
           ??_color_read_Green 0007                 __end_of___omul 22EC                    vfpfcnvrt@ap 0024  
                  vfpfcnvrt@cp 002C                    vfpfcnvrt@fp 0022                 __end_of___wmul 2894  
                  ?_send2USART 004D           ?_calibration_routine 0044            color_read_Clear@tmp 000A  
          start_initialization 27EC                ___lodiv@divisor 0021                ___lodiv@counter 0031  
 calibration_routine@cal_state 0048                    __end_of_abs 27BA                    __end_of_pad 2382  
                _TxBufWriteCnt 005F              ___omul@multiplier 0001               ?_convert_rgb2hue 0032  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 2412                    vfprintf@fmt 002E  
           ADC2String@int_part 004B                       ??___omul 0011                       ??___wmul 0005  
                  __pdataBANK1 01AD          ??_calibration_routine 0046                    __pbssCOMRAM 005F  
                __pcstackBANK0 0060                  __pcstackBANK1 01AB               ___lwdiv@dividend 0007  
                    _dtoa$2524 001A                       ?___awdiv 0001                       ?___awmod 0001  
                     ?___lodiv 0019                       ?___lwdiv 0007                   _readingIndex 0168  
         I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004                    __smallconst 0E00  
            _I2C_2_Master_Idle 2846              _I2C_2_Master_Init 281C              _I2C_2_Master_Read 2666  
            _I2C_2_Master_Stop 2910                   _RxBufReadCnt 00FE                       _ADC_init 28D2  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0001  
                     ?_sprintf 0031              _sendStringSerial4 27BA            ??_I2C_2_Master_Idle 0001  
          ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002                 ___wmul@product 0005  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0002                       _LATCbits 0F7B  
                     _LATDbits 0F7C                       _LATEbits 0F7D                       _LATFbits 0F7E  
                     _LATGbits 0F7F                       _LATHbits 0F80           _convert_rgb2hue$2845 0072  
         _convert_rgb2hue$2846 007A           _convert_rgb2hue$2847 0060              ADC2String@ADC_val 0045  
           ?_sendStringSerial4 0002                       _PIE4bits 0E2D                       _PIR4bits 0E37  
          reading_values@cCurr 000C               ?_initDCmotorsPWM 0001              ??_sendCharSerial4 0001  
                     _SSP2CON2 0EDA            ??_sendStringSerial4 0003                       _SSP2STAT 0ED8  
                   _ADC2String 21AC                      _vfpfcnvrt 18B8                     _ADCON0bits 0F60  
    __end_of_I2C_2_Master_Idle 286E      __end_of_I2C_2_Master_Init 2846      __end_of_I2C_2_Master_Read 26A8  
            ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 291A    I2C_2_Master_Write@data_byte 0002  
                  _ldrReadings 013C              ??_color_read_Blue 0007                   _TxBufReadCnt 00FD  
               _reading_values 2486      __end_of_sendStringSerial4 27EC  __end_of_I2C_2_Master_RepStart 292E  
           color_read_Blue@tmp 000A                   ??_initUSART4 0001                       __Hrparam 0000  
                   vfprintf@ap 002F                       __Lrparam 0000                     vfprintf@fp 002D  
                   ?_vfpfcnvrt 0022                   ??_send2USART 0051                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                       _dataFlag 01AD                     sprintf@fmt 0032  
       __end_of_reading_values 24E4                  test@led_state 00C4                ___lwdiv@divisor 0009  
           __end_of_initUSART4 28D2                ___lwdiv@counter 000B                       __ptext10 2382  
                     __ptext11 271E                       __ptext20 1A44                       __ptext12 2894  
                     __ptext21 22EC                       __ptext13 281C                       __ptext30 24E4  
                     __ptext22 26A8                       __ptext14 1704                       __ptext31 2534  
                     __ptext23 2102                       __ptext15 2752                       __ptext40 28D2  
                     __ptext32 2584                       __ptext24 292E                       __ptext16 2624  
                     __ptext33 25D4                       __ptext25 2786                       __ptext17 18B8  
                     __ptext34 2904                       __ptext26 1FA4                       __ptext18 2054  
                     __ptext35 2910                       __ptext27 1EE0                       __ptext19 286E  
                     __ptext36 291A                       __ptext28 27BA                       __ptext37 2924  
                     __ptext29 28EC                       __ptext38 2666                       __ptext39 2846  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA             __end_of_send2USART 271E  
                    test@combo 00F8                       isa$xinst 0000                     _RC4STAbits 0EE7  
                  ?_ADC2String 0044                       _vfprintf 2624                ?_reading_values 000C  
            test@battery_level 005C                      sprintf@ap 0037    __end_of_calibration_routine 18B8  
                send2USART@buf 0060                  send2USART@hue 004F                    ??_vfpfcnvrt 0025  
             _color_click_init 271E                       sprintf@f 0038                       sprintf@s 0031  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                     _TX4STAbits 0EE8  
              _sendCharSerial4 28EC  
>>>>>>> Calibrating-Colors
