

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 15 16:41:44 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=2
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=2
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=2
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1,group=2
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=2
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=2
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   102                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   103                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   104                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   105                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   106   000000                     
   107                           ; Generated 21/07/2023 GMT
   108                           ; 
   109                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   110                           ; All rights reserved.
   111                           ; 
   112                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   113                           ; 
   114                           ; Redistribution and use in source and binary forms, with or without modification, are
   115                           ; permitted provided that the following conditions are met:
   116                           ; 
   117                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   118                           ;        conditions and the following disclaimer.
   119                           ; 
   120                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   121                           ;        of conditions and the following disclaimer in the documentation and/or other
   122                           ;        materials provided with the distribution. Publication is not required when
   123                           ;        this file is used in an embedded application.
   124                           ; 
   125                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   126                           ;        software without specific prior written permission.
   127                           ; 
   128                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   129                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   130                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   131                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   132                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   133                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   134                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   135                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   136                           ; 
   137                           ; 
   138                           ; Code-generator required, PIC18F67K40 Definitions
   139                           ; 
   140                           ; SFR Addresses
   141   000000                     
   142                           	psect	idataBANK0
   143   004D10                     __pidataBANK0:
   144                           	callstack 0
   145                           
   146                           ;initializer for _dataFlag
   147   004D10  01                 	db	1
   148   000000                     _TMR0H	set	4052
   149   000000                     _TX4REG	set	3812
   150   000000                     _RC4STAbits	set	3815
   151   000000                     _SP4BRGH	set	3814
   152   000000                     _TRISFbits	set	3974
   153   000000                     _SSP2CON2bits	set	3802
   154   000000                     _RX4PPS	set	3605
   155   000000                     _SSP2CLKPPS	set	3612
   156   000000                     _SSP2DATPPS	set	3613
   157   000000                     _ANSELDbits	set	3751
   158   000000                     _SSP2ADD	set	3798
   159   000000                     _SSP2CON1bits	set	3801
   160   000000                     _LATAbits	set	3961
   161   000000                     _LATEbits	set	3965
   162   000000                     _LATGbits	set	3967
   163   000000                     _TRISGbits	set	3975
   164   000000                     _PORTFbits	set	3982
   165   000000                     _T2PR	set	4028
   166   000000                     _T2CONbits	set	4029
   167   000000                     _CCPR2H	set	4006
   168   000000                     _CCPR1H	set	4010
   169   000000                     _TRISAbits	set	3969
   170   000000                     _TRISEbits	set	3973
   171   000000                     _TRISCbits	set	3971
   172   000000                     _TRISDbits	set	3972
   173   000000                     _LATCbits	set	3963
   174   000000                     _RC4REG	set	3811
   175   000000                     _SP4BRGL	set	3813
   176   000000                     _TX4STAbits	set	3816
   177   000000                     _BAUD4CONbits	set	3817
   178   000000                     _ADREFbits	set	3928
   179   000000                     _SSP2CON2	set	3802
   180   000000                     _CCPR4H	set	3873
   181   000000                     _CCPR3H	set	3877
   182   000000                     _SSP2STAT	set	3800
   183   000000                     _ANSELFbits	set	3764
   184   000000                     _SSP2BUF	set	3797
   185   000000                     _IPR0bits	set	3615
   186   000000                     _PIE0bits	set	3625
   187   000000                     _PIE4bits	set	3629
   188   000000                     _PIR4bits	set	3639
   189   000000                     _RC0PPS	set	3682
   190   000000                     _RC7PPS	set	3689
   191   000000                     _RD5PPS	set	3695
   192   000000                     _RE2PPS	set	3700
   193   000000                     _RD6PPS	set	3696
   194   000000                     _ADPCH	set	3935
   195   000000                     _ADRESH	set	3940
   196   000000                     _ADCON0bits	set	3936
   197   000000                     _RE4PPS	set	3702
   198   000000                     _RG6PPS	set	3720
   199   000000                     _TMR0L	set	4051
   200   000000                     _T0CON0bits	set	4053
   201   000000                     _T0CON1bits	set	4054
   202   000000                     _T2CLKCONbits	set	4031
   203   000000                     _T2HLTbits	set	4030
   204   000000                     _CCP1CONbits	set	4011
   205   000000                     _CCPTMRS0bits	set	4013
   206   000000                     _CCP2CONbits	set	4007
   207   000000                     _CCP3CONbits	set	3878
   208   000000                     _CCP4CONbits	set	3874
   209   000000                     _PIR0bits	set	3635
   210   000000                     _INTCONbits	set	4082
   211                           
   212                           	psect	smallconst
   213   000E00                     __psmallconst:
   214                           	callstack 0
   215   000E00  00                 	db	0
   216   000E01                     
   217                           ; BSR set to: 14
   218   000E01  56                 	db	86	;'V'
   219   000E02  6F                 	db	111	;'o'
   220   000E03  6C                 	db	108	;'l'
   221   000E04  74                 	db	116	;'t'
   222   000E05  61                 	db	97	;'a'
   223   000E06  67                 	db	103	;'g'
   224   000E07  65                 	db	101	;'e'
   225   000E08  20                 	db	32
   226   000E09  3D                 	db	61	;'='
   227   000E0A  20                 	db	32
   228   000E0B  25                 	db	37
   229   000E0C  64                 	db	100	;'d'
   230   000E0D  2E                 	db	46
   231   000E0E  25                 	db	37
   232   000E0F  30                 	db	48	;'0'
   233   000E10  32                 	db	50	;'2'
   234   000E11  64                 	db	100	;'d'
   235   000E12  2C                 	db	44
   236   000E13  20                 	db	32
   237   000E14  20                 	db	32
   238   000E15  00                 	db	0
   239   000E16                     STR_2:
   240                           
   241                           ; BSR set to: 14
   242   000E16  68                 	db	104	;'h'
   243   000E17  75                 	db	117	;'u'
   244   000E18  65                 	db	101	;'e'
   245   000E19  3D                 	db	61	;'='
   246   000E1A  25                 	db	37
   247   000E1B  30                 	db	48	;'0'
   248   000E1C  33                 	db	51	;'3'
   249   000E1D  64                 	db	100	;'d'
   250   000E1E  2C                 	db	44
   251   000E1F  20                 	db	32
   252   000E20  20                 	db	32
   253   000E21  00                 	db	0
   254   000E22  00                 	db	0	; dummy byte at the end
   255   000000                     
   256                           ; #config settings
   257                           
   258                           	psect	cinit
   259   004620                     __pcinit:
   260                           	callstack 0
   261   004620                     start_initialization:
   262                           	callstack 0
   263   004620                     __initialization:
   264                           	callstack 0
   265                           
   266                           ; Initialize objects allocated to BANK0 (1 bytes)
   267                           ; load TBLPTR registers with __pidataBANK0
   268   004620  0E10               	movlw	low __pidataBANK0
   269   004622  6EF6               	movwf	tblptrl,c
   270   004624  0E4D               	movlw	high __pidataBANK0
   271   004626  6EF7               	movwf	tblptrh,c
   272   004628  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   273   00462A  6EF8               	movwf	tblptru,c
   274   00462C  0009               	tblrd		*+	;fetch initializer
   275   00462E  CFF5 F0F7          	movff	tablat,__pdataBANK0
   276                           
   277                           ; Clear objects allocated to BANK2 (200 bytes)
   278   004632  EE02  F000         	lfsr	0,__pbssBANK2
   279   004636  0EC8               	movlw	200
   280   004638                     clear_0:
   281   004638  6AEE               	clrf	postinc0,c
   282   00463A  06E8               	decf	wreg,f,c
   283   00463C  E1FD               	bnz	clear_0
   284                           
   285                           ; Clear objects allocated to BANK1 (162 bytes)
   286   00463E  EE01  F000         	lfsr	0,__pbssBANK1
   287   004642  0EA2               	movlw	162
   288   004644                     clear_1:
   289   004644  6AEE               	clrf	postinc0,c
   290   004646  06E8               	decf	wreg,f,c
   291   004648  E1FD               	bnz	clear_1
   292                           
   293                           ; Clear objects allocated to BANK0 (63 bytes)
   294   00464A  EE00  F0B8         	lfsr	0,__pbssBANK0
   295   00464E  0E3F               	movlw	63
   296   004650                     clear_2:
   297   004650  6AEE               	clrf	postinc0,c
   298   004652  06E8               	decf	wreg,f,c
   299   004654  E1FD               	bnz	clear_2
   300                           
   301                           ; Clear objects allocated to COMRAM (1 bytes)
   302   004656  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   303   004658                     end_of_initialization:
   304                           	callstack 0
   305   004658                     __end_of__initialization:
   306                           	callstack 0
   307   004658  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   308   00465A  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   309   00465C  0100               	movlb	0
   310   00465E  EFC4  F017         	goto	_main	;jump to C main() function
   311                           
   312                           	psect	bssCOMRAM
   313   00005C                     __pbssCOMRAM:
   314                           	callstack 0
   315   00005C                     _TxBufWriteCnt:
   316                           	callstack 0
   317   00005C                     	ds	1
   318                           
   319                           	psect	bssBANK0
   320   0000B8                     __pbssBANK0:
   321                           	callstack 0
   322   0000B8                     _EUSART4RXbuf:
   323                           	callstack 0
   324   0000B8                     	ds	20
   325   0000CC                     _width:
   326                           	callstack 0
   327   0000CC                     	ds	2
   328   0000CE                     _prec:
   329                           	callstack 0
   330   0000CE                     	ds	2
   331   0000D0                     _flags:
   332                           	callstack 0
   333   0000D0                     	ds	1
   334   0000D1                     _readingIndex:
   335                           	callstack 0
   336   0000D1                     	ds	1
   337   0000D2                     _TxBufReadCnt:
   338                           	callstack 0
   339   0000D2                     	ds	1
   340   0000D3                     _RxBufReadCnt:
   341                           	callstack 0
   342   0000D3                     	ds	1
   343   0000D4                     _RxBufWriteCnt:
   344                           	callstack 0
   345   0000D4                     	ds	1
   346   0000D5                     _motorR:
   347                           	callstack 0
   348   0000D5                     	ds	9
   349   0000DE                     _motorL:
   350                           	callstack 0
   351   0000DE                     	ds	9
   352   0000E7                     _colorCurrent:
   353                           	callstack 0
   354   0000E7                     	ds	8
   355   0000EF                     _colorCalibration:
   356                           	callstack 0
   357   0000EF                     	ds	8
   358                           
   359                           	psect	dataBANK0
   360   0000F7                     __pdataBANK0:
   361                           	callstack 0
   362   0000F7                     _dataFlag:
   363                           	callstack 0
   364   0000F7                     	ds	1
   365                           
   366                           	psect	bssBANK1
   367   000100                     __pbssBANK1:
   368                           	callstack 0
   369   000100                     _EUSART4TXbuf:
   370                           	callstack 0
   371   000100                     	ds	60
   372   00013C                     _action:
   373                           	callstack 0
   374   00013C                     	ds	50
   375   00016E                     _ldrReadings:
   376                           	callstack 0
   377   00016E                     	ds	20
   378   000182                     _dbuf:
   379                           	callstack 0
   380   000182                     	ds	32
   381                           
   382                           	psect	bssBANK2
   383   000200                     __pbssBANK2:
   384                           	callstack 0
   385   000200                     _time:
   386                           	callstack 0
   387   000200                     	ds	200
   388                           
   389                           	psect	cstackBANK0
   390   000060                     __pcstackBANK0:
   391                           	callstack 0
   392   000060                     returnHome@mL:
   393                           	callstack 0
   394   000060                     looking_for_card@mL:
   395                           	callstack 0
   396   000060                     convert_rgb2hue@redcurrent:
   397                           	callstack 0
   398   000060                     calibration_turningR@inactivityLimit:
   399                           	callstack 0
   400   000060                     calibration_turningL@inactivityLimit:
   401                           	callstack 0
   402   000060                     send2USART@hue_char:
   403                           	callstack 0
   404                           
   405                           ; 50 bytes @ 0x0
   406   000060                     	ds	1
   407   000061                     returnHome@mR:
   408                           	callstack 0
   409   000061                     looking_for_card@mR:
   410                           	callstack 0
   411                           
   412                           ; 1 bytes @ 0x1
   413   000061                     	ds	1
   414   000062                     looking_for_card@cCurr:
   415                           	callstack 0
   416   000062                     returnHome@path_step:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x2
   420   000062                     	ds	1
   421   000063                     looking_for_card@cMax:
   422                           	callstack 0
   423                           
   424                           ; 1 bytes @ 0x3
   425   000063                     	ds	1
   426   000064                     returnHome@factorR:
   427                           	callstack 0
   428   000064                     looking_for_card@path_step:
   429                           	callstack 0
   430   000064                     convert_rgb2hue@redmax:
   431                           	callstack 0
   432   000064                     calibration_turningR@inactivityCounter:
   433                           	callstack 0
   434   000064                     calibration_turningL@inactivityCounter:
   435                           	callstack 0
   436                           
   437                           ; 4 bytes @ 0x4
   438   000064                     	ds	2
   439   000066                     returnHome@factorL:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0x6
   443   000066                     	ds	2
   444   000068                     convert_rgb2hue@greencurrent:
   445                           	callstack 0
   446   000068                     returnHome@time_ms:
   447                           	callstack 0
   448   000068                     calibration_turningR@adjustment:
   449                           	callstack 0
   450   000068                     calibration_turningL@adjustment:
   451                           	callstack 0
   452                           
   453                           ; 4 bytes @ 0x8
   454   000068                     	ds	4
   455   00006C                     returnHome@action_turn:
   456                           	callstack 0
   457   00006C                     calibration_turningR@i:
   458                           	callstack 0
   459   00006C                     calibration_turningL@i:
   460                           	callstack 0
   461   00006C                     convert_rgb2hue@greenmax:
   462                           	callstack 0
   463                           
   464                           ; 4 bytes @ 0xC
   465   00006C                     	ds	1
   466   00006D                     returnHome@i:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0xD
   470   00006D                     	ds	1
   471   00006E                     calibration_turningR@factorR:
   472                           	callstack 0
   473   00006E                     calibration_turningL@factorL:
   474                           	callstack 0
   475                           
   476                           ; 2 bytes @ 0xE
   477   00006E                     	ds	2
   478   000070                     convert_rgb2hue@bluecurrent:
   479                           	callstack 0
   480                           
   481                           ; 4 bytes @ 0x10
   482   000070                     	ds	4
   483   000074                     convert_rgb2hue@bluemax:
   484                           	callstack 0
   485                           
   486                           ; 4 bytes @ 0x14
   487   000074                     	ds	4
   488   000078                     convert_rgb2hue@clearcurrent:
   489                           	callstack 0
   490                           
   491                           ; 4 bytes @ 0x18
   492   000078                     	ds	4
   493   00007C                     convert_rgb2hue@clearmax:
   494                           	callstack 0
   495                           
   496                           ; 4 bytes @ 0x1C
   497   00007C                     	ds	4
   498   000080                     _convert_rgb2hue$465:
   499                           	callstack 0
   500                           
   501                           ; 4 bytes @ 0x20
   502   000080                     	ds	4
   503   000084                     _convert_rgb2hue$466:
   504                           	callstack 0
   505                           
   506                           ; 4 bytes @ 0x24
   507   000084                     	ds	4
   508   000088                     _convert_rgb2hue$467:
   509                           	callstack 0
   510                           
   511                           ; 4 bytes @ 0x28
   512   000088                     	ds	4
   513   00008C                     _convert_rgb2hue$468:
   514                           	callstack 0
   515                           
   516                           ; 4 bytes @ 0x2C
   517   00008C                     	ds	4
   518   000090                     convert_rgb2hue@min:
   519                           	callstack 0
   520                           
   521                           ; 4 bytes @ 0x30
   522   000090                     	ds	2
   523   000092                     is_white@mL:
   524                           	callstack 0
   525                           
   526                           ; 1 bytes @ 0x32
   527   000092                     	ds	1
   528   000093                     is_white@mR:
   529                           	callstack 0
   530                           
   531                           ; 1 bytes @ 0x33
   532   000093                     	ds	1
   533   000094                     is_white@path_step:
   534                           	callstack 0
   535   000094                     convert_rgb2hue@diff:
   536                           	callstack 0
   537                           
   538                           ; 4 bytes @ 0x34
   539   000094                     	ds	2
   540   000096                     is_white@factorR:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0x36
   544   000096                     	ds	2
   545   000098                     is_white@factorL:
   546                           	callstack 0
   547   000098                     convert_rgb2hue@max:
   548                           	callstack 0
   549                           
   550                           ; 4 bytes @ 0x38
   551   000098                     	ds	2
   552   00009A                     is_white@hue:
   553                           	callstack 0
   554                           
   555                           ; 2 bytes @ 0x3A
   556   00009A                     	ds	2
   557   00009C                     is_white@clear_norm:
   558                           	callstack 0
   559   00009C                     convert_rgb2hue@hue:
   560                           	callstack 0
   561                           
   562                           ; 4 bytes @ 0x3C
   563   00009C                     	ds	4
   564   0000A0                     convert_rgb2hue@r:
   565                           	callstack 0
   566                           
   567                           ; 4 bytes @ 0x40
   568   0000A0                     	ds	4
   569   0000A4                     convert_rgb2hue@g:
   570                           	callstack 0
   571                           
   572                           ; 4 bytes @ 0x44
   573   0000A4                     	ds	4
   574   0000A8                     convert_rgb2hue@b:
   575                           	callstack 0
   576                           
   577                           ; 4 bytes @ 0x48
   578   0000A8                     	ds	4
   579   0000AC                     ??_main:
   580                           
   581                           ; 1 bytes @ 0x4C
   582   0000AC                     	ds	2
   583   0000AE                     main@clear_norm:
   584                           	callstack 0
   585                           
   586                           ; 2 bytes @ 0x4E
   587   0000AE                     	ds	2
   588   0000B0                     main@factorR:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x50
   592   0000B0                     	ds	2
   593   0000B2                     main@factorL:
   594                           	callstack 0
   595                           
   596                           ; 2 bytes @ 0x52
   597   0000B2                     	ds	2
   598   0000B4                     main@hue:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x54
   602   0000B4                     	ds	2
   603   0000B6                     main@path_step:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x56
   607   0000B6                     	ds	2
   608                           
   609                           	psect	cstackCOMRAM
   610   000001                     __pcstackCOMRAM:
   611                           	callstack 0
   612   000001                     ??_LowISR:
   613   000001                     
   614                           ; 1 bytes @ 0x0
   615   000001                     	ds	1
   616   000002                     ??_I2C_2_Master_Idle:
   617   000002                     ?___wmul:
   618                           	callstack 0
   619   000002                     ?___awdiv:
   620                           	callstack 0
   621   000002                     ?___awmod:
   622                           	callstack 0
   623   000002                     ?___lmul:
   624                           	callstack 0
   625   000002                     ?___xxtofl:
   626                           	callstack 0
   627   000002                     variablesMotorInit@mL:
   628                           	callstack 0
   629   000002                     sendCharSerial4@charToSend:
   630                           	callstack 0
   631   000002                     initDCmotorsPWM@PWMperiod:
   632                           	callstack 0
   633   000002                     customDelayMs@milliseconds:
   634                           	callstack 0
   635   000002                     ___wmul@multiplier:
   636                           	callstack 0
   637   000002                     ___awdiv@dividend:
   638                           	callstack 0
   639   000002                     ___awmod@dividend:
   640                           	callstack 0
   641   000002                     fputc@c:
   642                           	callstack 0
   643   000002                     logAction@newTime:
   644                           	callstack 0
   645   000002                     ___lmul@multiplier:
   646                           	callstack 0
   647   000002                     ___fleq@ff1:
   648                           	callstack 0
   649   000002                     ___flge@ff1:
   650                           	callstack 0
   651   000002                     ___xxtofl@val:
   652                           	callstack 0
   653                           
   654                           ; 4 bytes @ 0x1
   655   000002                     	ds	1
   656   000003                     ??_I2C_2_Master_Read:
   657   000003                     I2C_2_Master_Write@data_byte:
   658                           	callstack 0
   659   000003                     variablesMotorInit@mR:
   660                           	callstack 0
   661   000003                     sendStringSerial4@string:
   662                           	callstack 0
   663                           
   664                           ; 1 bytes @ 0x2
   665   000003                     	ds	1
   666   000004                     ??_customDelayMs:
   667   000004                     color_writetoaddr@value:
   668                           	callstack 0
   669   000004                     I2C_2_Master_Read@ack:
   670                           	callstack 0
   671   000004                     fputc@fp:
   672                           	callstack 0
   673   000004                     variablesMotorInit@PWMcycle:
   674                           	callstack 0
   675   000004                     ___wmul@multiplicand:
   676                           	callstack 0
   677   000004                     ___awdiv@divisor:
   678                           	callstack 0
   679   000004                     ___awmod@divisor:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0x3
   683   000004                     	ds	1
   684   000005                     ??_fputc:
   685   000005                     color_writetoaddr@address:
   686                           	callstack 0
   687   000005                     I2C_2_Master_Read@tmp:
   688                           	callstack 0
   689   000005                     customDelayMs@i:
   690                           	callstack 0
   691                           
   692                           ; 2 bytes @ 0x4
   693   000005                     	ds	1
   694   000006                     ??_color_click_init:
   695   000006                     ??___xxtofl:
   696   000006                     ?_color_read_Red:
   697                           	callstack 0
   698   000006                     ?_color_read_Green:
   699                           	callstack 0
   700   000006                     ?_color_read_Blue:
   701                           	callstack 0
   702   000006                     ?_color_read_Clear:
   703                           	callstack 0
   704   000006                     ___awdiv@counter:
   705                           	callstack 0
   706   000006                     ___awmod@counter:
   707                           	callstack 0
   708   000006                     logAction@path_step:
   709                           	callstack 0
   710   000006                     ___wmul@product:
   711                           	callstack 0
   712   000006                     ___lmul@multiplicand:
   713                           	callstack 0
   714   000006                     ___fleq@ff2:
   715                           	callstack 0
   716   000006                     ___flge@ff2:
   717                           	callstack 0
   718                           
   719                           ; 4 bytes @ 0x5
   720   000006                     	ds	1
   721   000007                     ___awdiv@sign:
   722                           	callstack 0
   723   000007                     ___awmod@sign:
   724                           	callstack 0
   725                           
   726                           ; 1 bytes @ 0x6
   727   000007                     	ds	1
   728   000008                     ??_logAction:
   729   000008                     ??_color_read_Red:
   730   000008                     ??_color_read_Green:
   731   000008                     ??_color_read_Blue:
   732   000008                     ??_color_read_Clear:
   733   000008                     ?_abs:
   734                           	callstack 0
   735   000008                     ?___lwdiv:
   736                           	callstack 0
   737   000008                     ?_read_prec_or_width:
   738                           	callstack 0
   739   000008                     read_prec_or_width@fmt:
   740                           	callstack 0
   741   000008                     ___awdiv@quotient:
   742                           	callstack 0
   743   000008                     ___lwdiv@dividend:
   744                           	callstack 0
   745   000008                     abs@a:
   746                           	callstack 0
   747                           
   748                           ; 2 bytes @ 0x7
   749   000008                     	ds	1
   750   000009                     read_prec_or_width@ap:
   751                           	callstack 0
   752                           
   753                           ; 1 bytes @ 0x8
   754   000009                     	ds	1
   755   00000A                     ??_abs:
   756   00000A                     ??___fleq:
   757   00000A                     ??___flge:
   758   00000A                     logAction@newAction:
   759                           	callstack 0
   760   00000A                     ___xxtofl@sign:
   761                           	callstack 0
   762   00000A                     read_prec_or_width@c:
   763                           	callstack 0
   764   00000A                     ___lwdiv@divisor:
   765                           	callstack 0
   766   00000A                     fputs@s:
   767                           	callstack 0
   768   00000A                     ___lmul@product:
   769                           	callstack 0
   770                           
   771                           ; 4 bytes @ 0x9
   772   00000A                     	ds	1
   773   00000B                     ___xxtofl@exp:
   774                           	callstack 0
   775   00000B                     color_read_Red@tmp:
   776                           	callstack 0
   777   00000B                     color_read_Green@tmp:
   778                           	callstack 0
   779   00000B                     color_read_Blue@tmp:
   780                           	callstack 0
   781   00000B                     color_read_Clear@tmp:
   782                           	callstack 0
   783   00000B                     read_prec_or_width@n:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0xA
   787   00000B                     	ds	1
   788   00000C                     fputs@fp:
   789                           	callstack 0
   790   00000C                     ___lwdiv@quotient:
   791                           	callstack 0
   792   00000C                     ___xxtofl@arg:
   793                           	callstack 0
   794                           
   795                           ; 4 bytes @ 0xB
   796   00000C                     	ds	1
   797   00000D                     calibration_colors@cCal:
   798                           	callstack 0
   799   00000D                     fputs@c:
   800                           	callstack 0
   801                           
   802                           ; 1 bytes @ 0xC
   803   00000D                     	ds	1
   804   00000E                     ??_calibration_colors:
   805   00000E                     ?___aldiv:
   806                           	callstack 0
   807   00000E                     ___lwdiv@counter:
   808                           	callstack 0
   809   00000E                     fputs@i:
   810                           	callstack 0
   811   00000E                     ___aldiv@dividend:
   812                           	callstack 0
   813                           
   814                           ; 4 bytes @ 0xD
   815   00000E                     	ds	1
   816   00000F                     setMotorPWM@m:
   817                           	callstack 0
   818                           
   819                           ; 1 bytes @ 0xE
   820   00000F                     	ds	1
   821   000010                     ??_setMotorPWM:
   822   000010                     ?___fladd:
   823                           	callstack 0
   824   000010                     ?___flmul:
   825                           	callstack 0
   826   000010                     pad@fp:
   827                           	callstack 0
   828   000010                     ___fladd@b:
   829                           	callstack 0
   830   000010                     ___flmul@b:
   831                           	callstack 0
   832                           
   833                           ; 4 bytes @ 0xF
   834   000010                     	ds	1
   835   000011                     pad@buf:
   836                           	callstack 0
   837                           
   838                           ; 2 bytes @ 0x10
   839   000011                     	ds	1
   840   000012                     setMotorPWM@posDuty:
   841                           	callstack 0
   842   000012                     ___aldiv@divisor:
   843                           	callstack 0
   844                           
   845                           ; 4 bytes @ 0x11
   846   000012                     	ds	1
   847   000013                     setMotorPWM@negDuty:
   848                           	callstack 0
   849   000013                     pad@p:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x12
   853   000013                     	ds	1
   854   000014                     stop@mL:
   855                           	callstack 0
   856   000014                     turnLeft@mL:
   857                           	callstack 0
   858   000014                     turnRight@mL:
   859                           	callstack 0
   860   000014                     fullSpeedBack@mL:
   861                           	callstack 0
   862   000014                     ___fladd@a:
   863                           	callstack 0
   864   000014                     ___flmul@a:
   865                           	callstack 0
   866                           
   867                           ; 4 bytes @ 0x13
   868   000014                     	ds	1
   869   000015                     ??_pad:
   870   000015                     stop@mR:
   871                           	callstack 0
   872   000015                     turnLeft@mR:
   873                           	callstack 0
   874   000015                     turnRight@mR:
   875                           	callstack 0
   876   000015                     fullSpeedBack@mR:
   877                           	callstack 0
   878                           
   879                           ; 1 bytes @ 0x14
   880   000015                     	ds	1
   881   000016                     ??_stop:
   882   000016                     ??_turnLeft:
   883   000016                     ??_turnRight:
   884   000016                     ??_fullSpeedBack:
   885   000016                     ___aldiv@counter:
   886                           	callstack 0
   887   000016                     pad@i:
   888                           	callstack 0
   889                           
   890                           ; 2 bytes @ 0x15
   891   000016                     	ds	1
   892   000017                     ___aldiv@sign:
   893                           	callstack 0
   894   000017                     turnLeft@i:
   895                           	callstack 0
   896   000017                     turnRight@i:
   897                           	callstack 0
   898   000017                     fullSpeedBack@power:
   899                           	callstack 0
   900                           
   901                           ; 2 bytes @ 0x16
   902   000017                     	ds	1
   903   000018                     ??___fladd:
   904   000018                     ??___flmul:
   905   000018                     dtoa@fp:
   906                           	callstack 0
   907   000018                     ___aldiv@quotient:
   908                           	callstack 0
   909                           
   910                           ; 4 bytes @ 0x17
   911   000018                     	ds	1
   912   000019                     right90@mL:
   913                           	callstack 0
   914   000019                     left90@mL:
   915                           	callstack 0
   916   000019                     turn180@mL:
   917                           	callstack 0
   918   000019                     right135@mL:
   919                           	callstack 0
   920   000019                     left135@mL:
   921                           	callstack 0
   922   000019                     backHalf@mL:
   923                           	callstack 0
   924   000019                     backOneAndHalf@mL:
   925                           	callstack 0
   926   000019                     dtoa@d:
   927                           	callstack 0
   928                           
   929                           ; 2 bytes @ 0x18
   930   000019                     	ds	1
   931   00001A                     right90@mR:
   932                           	callstack 0
   933   00001A                     left90@mR:
   934                           	callstack 0
   935   00001A                     turn180@mR:
   936                           	callstack 0
   937   00001A                     right135@mR:
   938                           	callstack 0
   939   00001A                     left135@mR:
   940                           	callstack 0
   941   00001A                     backHalf@mR:
   942                           	callstack 0
   943   00001A                     backOneAndHalf@mR:
   944                           	callstack 0
   945                           
   946                           ; 1 bytes @ 0x19
   947   00001A                     	ds	1
   948   00001B                     ??_turn180:
   949   00001B                     ??_right135:
   950   00001B                     ??_left135:
   951   00001B                     ??_backHalf:
   952   00001B                     ??_backOneAndHalf:
   953   00001B                     right90@factorR:
   954                           	callstack 0
   955   00001B                     left90@factorL:
   956                           	callstack 0
   957   00001B                     _dtoa$3087:
   958                           	callstack 0
   959                           
   960                           ; 2 bytes @ 0x1A
   961   00001B                     	ds	1
   962   00001C                     ___fladd@signs:
   963                           	callstack 0
   964   00001C                     ___flmul@sign:
   965                           	callstack 0
   966   00001C                     get16bitTMR0val@path_step:
   967                           	callstack 0
   968                           
   969                           ; 2 bytes @ 0x1B
   970   00001C                     	ds	1
   971   00001D                     moveBlue@mL:
   972                           	callstack 0
   973   00001D                     moveOrange@mL:
   974                           	callstack 0
   975   00001D                     moveLightBlue@mL:
   976                           	callstack 0
   977   00001D                     moveWhite@mL:
   978                           	callstack 0
   979   00001D                     ___fladd@aexp:
   980                           	callstack 0
   981   00001D                     dtoa@p:
   982                           	callstack 0
   983   00001D                     right90@delay_after_calibration:
   984                           	callstack 0
   985   00001D                     left90@delay_after_calibration:
   986                           	callstack 0
   987   00001D                     ___flmul@grs:
   988                           	callstack 0
   989                           
   990                           ; 4 bytes @ 0x1C
   991   00001D                     	ds	1
   992   00001E                     ??_get16bitTMR0val:
   993   00001E                     moveBlue@mR:
   994                           	callstack 0
   995   00001E                     moveOrange@mR:
   996                           	callstack 0
   997   00001E                     moveLightBlue@mR:
   998                           	callstack 0
   999   00001E                     moveWhite@mR:
  1000                           	callstack 0
  1001   00001E                     ___fladd@bexp:
  1002                           	callstack 0
  1003   00001E                     dtoa@w:
  1004                           	callstack 0
  1005                           
  1006                           ; 2 bytes @ 0x1D
  1007   00001E                     	ds	1
  1008   00001F                     ??_moveBlue:
  1009   00001F                     ??_moveLightBlue:
  1010   00001F                     ??_moveOrange:
  1011   00001F                     ??_moveWhite:
  1012   00001F                     reverseTurn@mL:
  1013                           	callstack 0
  1014   00001F                     moveRed@mL:
  1015                           	callstack 0
  1016   00001F                     moveGreen@mL:
  1017                           	callstack 0
  1018   00001F                     moveYellow@mL:
  1019                           	callstack 0
  1020   00001F                     movePink@mL:
  1021                           	callstack 0
  1022   00001F                     ___fladd@grs:
  1023                           	callstack 0
  1024                           
  1025                           ; 1 bytes @ 0x1E
  1026   00001F                     	ds	1
  1027   000020                     ?___flsub:
  1028                           	callstack 0
  1029   000020                     reverseTurn@mR:
  1030                           	callstack 0
  1031   000020                     moveRed@mR:
  1032                           	callstack 0
  1033   000020                     moveGreen@mR:
  1034                           	callstack 0
  1035   000020                     moveYellow@mR:
  1036                           	callstack 0
  1037   000020                     movePink@mR:
  1038                           	callstack 0
  1039   000020                     dtoa@s:
  1040                           	callstack 0
  1041   000020                     ___flsub@b:
  1042                           	callstack 0
  1043                           
  1044                           ; 4 bytes @ 0x1F
  1045   000020                     	ds	1
  1046   000021                     reverseTurn@actionStep:
  1047                           	callstack 0
  1048   000021                     ___flmul@aexp:
  1049                           	callstack 0
  1050   000021                     moveRed@factorR:
  1051                           	callstack 0
  1052   000021                     moveGreen@factorL:
  1053                           	callstack 0
  1054   000021                     moveYellow@factorR:
  1055                           	callstack 0
  1056   000021                     movePink@factorL:
  1057                           	callstack 0
  1058   000021                     dtoa@i:
  1059                           	callstack 0
  1060                           
  1061                           ; 2 bytes @ 0x20
  1062   000021                     	ds	1
  1063   000022                     ___flmul@bexp:
  1064                           	callstack 0
  1065   000022                     get16bitTMR0val@time_ms:
  1066                           	callstack 0
  1067   000022                     reverseTurn@time_ms:
  1068                           	callstack 0
  1069                           
  1070                           ; 4 bytes @ 0x21
  1071   000022                     	ds	1
  1072   000023                     ??_moveRed:
  1073   000023                     ??_moveGreen:
  1074   000023                     ??_moveYellow:
  1075   000023                     ??_movePink:
  1076   000023                     vfpfcnvrt@fp:
  1077                           	callstack 0
  1078   000023                     ___flmul@prod:
  1079                           	callstack 0
  1080                           
  1081                           ; 4 bytes @ 0x22
  1082   000023                     	ds	1
  1083   000024                     vfpfcnvrt@fmt:
  1084                           	callstack 0
  1085   000024                     ___flsub@a:
  1086                           	callstack 0
  1087                           
  1088                           ; 4 bytes @ 0x23
  1089   000024                     	ds	1
  1090   000025                     ?_decision:
  1091                           	callstack 0
  1092   000025                     vfpfcnvrt@ap:
  1093                           	callstack 0
  1094   000025                     decision@hue:
  1095                           	callstack 0
  1096                           
  1097                           ; 2 bytes @ 0x24
  1098   000025                     	ds	1
  1099   000026                     ??_vfpfcnvrt:
  1100   000026                     get16bitTMR0val@combined_value:
  1101                           	callstack 0
  1102   000026                     reverseTurn@factorR:
  1103                           	callstack 0
  1104                           
  1105                           ; 2 bytes @ 0x25
  1106   000026                     	ds	1
  1107   000027                     decision@path_step:
  1108                           	callstack 0
  1109   000027                     ___flmul@temp:
  1110                           	callstack 0
  1111                           
  1112                           ; 2 bytes @ 0x26
  1113   000027                     	ds	1
  1114   000028                     reverseTurn@factorL:
  1115                           	callstack 0
  1116   000028                     vfpfcnvrt@convarg:
  1117                           	callstack 0
  1118                           
  1119                           ; 4 bytes @ 0x27
  1120   000028                     	ds	1
  1121   000029                     ?___fldiv:
  1122                           	callstack 0
  1123   000029                     decision@factorR:
  1124                           	callstack 0
  1125   000029                     ___fldiv@b:
  1126                           	callstack 0
  1127                           
  1128                           ; 4 bytes @ 0x28
  1129   000029                     	ds	1
  1130   00002A                     ??_reverseTurn:
  1131                           
  1132                           ; 1 bytes @ 0x29
  1133   00002A                     	ds	1
  1134   00002B                     decision@factorL:
  1135                           	callstack 0
  1136                           
  1137                           ; 2 bytes @ 0x2A
  1138   00002B                     	ds	1
  1139   00002C                     vfpfcnvrt@done:
  1140                           	callstack 0
  1141                           
  1142                           ; 1 bytes @ 0x2B
  1143   00002C                     	ds	1
  1144   00002D                     vfpfcnvrt@cp:
  1145                           	callstack 0
  1146   00002D                     ___fldiv@a:
  1147                           	callstack 0
  1148                           
  1149                           ; 4 bytes @ 0x2C
  1150   00002D                     	ds	1
  1151   00002E                     ?_vfprintf:
  1152                           	callstack 0
  1153   00002E                     vfprintf@fp:
  1154                           	callstack 0
  1155                           
  1156                           ; 1 bytes @ 0x2D
  1157   00002E                     	ds	1
  1158   00002F                     vfprintf@fmt:
  1159                           	callstack 0
  1160                           
  1161                           ; 1 bytes @ 0x2E
  1162   00002F                     	ds	1
  1163   000030                     vfprintf@ap:
  1164                           	callstack 0
  1165                           
  1166                           ; 1 bytes @ 0x2F
  1167   000030                     	ds	1
  1168   000031                     ??___fldiv:
  1169   000031                     vfprintf@cfmt:
  1170                           	callstack 0
  1171                           
  1172                           ; 1 bytes @ 0x30
  1173   000031                     	ds	1
  1174   000032                     ?_sprintf:
  1175                           	callstack 0
  1176   000032                     sprintf@s:
  1177                           	callstack 0
  1178                           
  1179                           ; 1 bytes @ 0x31
  1180   000032                     	ds	1
  1181   000033                     sprintf@fmt:
  1182                           	callstack 0
  1183                           
  1184                           ; 1 bytes @ 0x32
  1185   000033                     	ds	2
  1186   000035                     ___fldiv@rem:
  1187                           	callstack 0
  1188                           
  1189                           ; 4 bytes @ 0x34
  1190   000035                     	ds	3
  1191   000038                     sprintf@ap:
  1192                           	callstack 0
  1193                           
  1194                           ; 1 bytes @ 0x37
  1195   000038                     	ds	1
  1196   000039                     ___fldiv@sign:
  1197                           	callstack 0
  1198   000039                     sprintf@f:
  1199                           	callstack 0
  1200                           
  1201                           ; 12 bytes @ 0x38
  1202   000039                     	ds	1
  1203   00003A                     ___fldiv@new_exp:
  1204                           	callstack 0
  1205                           
  1206                           ; 2 bytes @ 0x39
  1207   00003A                     	ds	2
  1208   00003C                     ___fldiv@grs:
  1209                           	callstack 0
  1210                           
  1211                           ; 4 bytes @ 0x3B
  1212   00003C                     	ds	4
  1213   000040                     ___fldiv@bexp:
  1214                           	callstack 0
  1215                           
  1216                           ; 1 bytes @ 0x3F
  1217   000040                     	ds	1
  1218   000041                     ___fldiv@aexp:
  1219                           	callstack 0
  1220                           
  1221                           ; 1 bytes @ 0x40
  1222   000041                     	ds	1
  1223   000042                     ?___fltol:
  1224                           	callstack 0
  1225   000042                     ___fltol@f1:
  1226                           	callstack 0
  1227                           
  1228                           ; 4 bytes @ 0x41
  1229   000042                     	ds	3
  1230   000045                     send2USART@hue:
  1231                           	callstack 0
  1232                           
  1233                           ; 2 bytes @ 0x44
  1234   000045                     	ds	1
  1235   000046                     ??___fltol:
  1236                           
  1237                           ; 1 bytes @ 0x45
  1238   000046                     	ds	1
  1239   000047                     
  1240                           ; 1 bytes @ 0x46
  1241   000047                     	ds	3
  1242   00004A                     ___fltol@sign1:
  1243                           	callstack 0
  1244                           
  1245                           ; 1 bytes @ 0x49
  1246   00004A                     	ds	1
  1247   00004B                     ___fltol@exp1:
  1248                           	callstack 0
  1249                           
  1250                           ; 1 bytes @ 0x4A
  1251   00004B                     	ds	1
  1252   00004C                     ?_convert_rgb2hue:
  1253                           	callstack 0
  1254   00004C                     ?_calibration_turningR:
  1255                           	callstack 0
  1256   00004C                     ?_calibration_turningL:
  1257                           	callstack 0
  1258   00004C                     ?_calc_clear_norm:
  1259                           	callstack 0
  1260   00004C                     convert_rgb2hue@cMax:
  1261                           	callstack 0
  1262   00004C                     calc_clear_norm@cCurr:
  1263                           	callstack 0
  1264   00004C                     fullSpeedAhead@mL:
  1265                           	callstack 0
  1266   00004C                     calibration_turningR@mL:
  1267                           	callstack 0
  1268   00004C                     calibration_turningL@mL:
  1269                           	callstack 0
  1270                           
  1271                           ; 1 bytes @ 0x4B
  1272   00004C                     	ds	1
  1273   00004D                     convert_rgb2hue@cCurr:
  1274                           	callstack 0
  1275   00004D                     calc_clear_norm@cMax:
  1276                           	callstack 0
  1277   00004D                     fullSpeedAhead@mR:
  1278                           	callstack 0
  1279   00004D                     calibration_turningR@mR:
  1280                           	callstack 0
  1281   00004D                     calibration_turningL@mR:
  1282                           	callstack 0
  1283                           
  1284                           ; 1 bytes @ 0x4C
  1285   00004D                     	ds	1
  1286   00004E                     ??_convert_rgb2hue:
  1287   00004E                     ??_calibration_turningR:
  1288   00004E                     ??_calibration_turningL:
  1289   00004E                     ??_calc_clear_norm:
  1290   00004E                     ??_fullSpeedAhead:
  1291                           
  1292                           ; 1 bytes @ 0x4D
  1293   00004E                     	ds	1
  1294   00004F                     fullSpeedAhead@power:
  1295                           	callstack 0
  1296                           
  1297                           ; 2 bytes @ 0x4E
  1298   00004F                     	ds	1
  1299   000050                     ?_reading_hue:
  1300                           	callstack 0
  1301   000050                     reading_hue@cCurr:
  1302                           	callstack 0
  1303   000050                     calc_clear_norm@clear_max:
  1304                           	callstack 0
  1305                           
  1306                           ; 4 bytes @ 0x4F
  1307   000050                     	ds	1
  1308   000051                     reverseStraight@mL:
  1309                           	callstack 0
  1310   000051                     intial_stage_movement@mL:
  1311                           	callstack 0
  1312   000051                     bump_wall@mL:
  1313                           	callstack 0
  1314                           
  1315                           ; 1 bytes @ 0x50
  1316   000051                     	ds	1
  1317   000052                     ??_reading_hue:
  1318   000052                     reverseStraight@mR:
  1319                           	callstack 0
  1320   000052                     intial_stage_movement@mR:
  1321                           	callstack 0
  1322   000052                     bump_wall@mR:
  1323                           	callstack 0
  1324                           
  1325                           ; 1 bytes @ 0x51
  1326   000052                     	ds	1
  1327   000053                     ??_bump_wall:
  1328   000053                     reverseStraight@time_ms:
  1329                           	callstack 0
  1330                           
  1331                           ; 4 bytes @ 0x52
  1332   000053                     	ds	1
  1333   000054                     reading_hue@hue:
  1334                           	callstack 0
  1335   000054                     calc_clear_norm@clear_current:
  1336                           	callstack 0
  1337                           
  1338                           ; 4 bytes @ 0x53
  1339   000054                     	ds	3
  1340   000057                     ??_reverseStraight:
  1341                           
  1342                           ; 1 bytes @ 0x56
  1343   000057                     	ds	1
  1344   000058                     calc_clear_norm@clear_norm:
  1345                           	callstack 0
  1346                           
  1347                           ; 2 bytes @ 0x57
  1348   000058                     	ds	1
  1349   000059                     ??_returnHome:
  1350                           
  1351                           ; 1 bytes @ 0x58
  1352   000059                     	ds	1
  1353   00005A                     looking_for_card@clear_norm:
  1354                           	callstack 0
  1355                           
  1356                           ; 2 bytes @ 0x59
  1357   00005A                     	ds	1
  1358   00005B                     
  1359                           ; 1 bytes @ 0x5A
  1360   00005B                     	ds	1
  1361                           
  1362 ;;
  1363 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1364 ;;
  1365 ;; *************** function _main *****************
  1366 ;; Defined at:
  1367 ;;		line 31 in file "main.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  path_step       2   86[BANK0 ] unsigned int 
  1372 ;;  hue             2   84[BANK0 ] unsigned int 
  1373 ;;  factorL         2   82[BANK0 ] unsigned int 
  1374 ;;  factorR         2   80[BANK0 ] unsigned int 
  1375 ;;  clear_norm      2   78[BANK0 ] unsigned int 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      void 
  1378 ;; Registers used:
  1379 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1386 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1387 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1388 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1389 ;;Total ram usage:       12 bytes
  1390 ;; Hardware stack levels required when called: 11
  1391 ;; This function calls:
  1392 ;;		_ADC_init
  1393 ;;		_Timer0_init
  1394 ;;		_bump_wall
  1395 ;;		_buttons_init
  1396 ;;		_calc_clear_norm
  1397 ;;		_calibration_colors
  1398 ;;		_calibration_turningL
  1399 ;;		_calibration_turningR
  1400 ;;		_color_click_init
  1401 ;;		_color_clicker_lights_init
  1402 ;;		_decision
  1403 ;;		_initDCmotorsPWM
  1404 ;;		_initUSART4
  1405 ;;		_intial_stage_movement
  1406 ;;		_is_white
  1407 ;;		_looking_for_card
  1408 ;;		_reading_hue
  1409 ;;		_send2USART
  1410 ;;		_variablesMotorInit
  1411 ;; This function is called by:
  1412 ;;		Startup code after reset
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text0
  1417   002F88                     __ptext0:
  1418                           	callstack 0
  1419   002F88                     _main:
  1420                           	callstack 20
  1421   002F88                     
  1422                           ;main.c: 33:     unsigned int clear_norm;;main.c: 34:     unsigned int path_step = 0;
  1423   002F88  0E00               	movlw	0
  1424   002F8A  0100               	movlb	0	; () banked
  1425   002F8C  6FB7               	movwf	(main@path_step+1)& (0+255),b
  1426   002F8E  0E00               	movlw	0
  1427   002F90  6FB6               	movwf	main@path_step& (0+255),b
  1428   002F92                     
  1429                           ; BSR set to: 0
  1430                           ;main.c: 35:     unsigned int hue;;main.c: 36:     unsigned int factorR;;main.c: 37:    
      +                           unsigned int factorL;;main.c: 41:     ADC_init();
  1431   002F92  EC41  F026         	call	_ADC_init	;wreg free
  1432   002F96                     
  1433                           ;main.c: 42:     color_click_init();
  1434   002F96  EC94  F024         	call	_color_click_init	;wreg free
  1435   002F9A                     
  1436                           ;main.c: 43:     initUSART4();
  1437   002F9A  EC32  F026         	call	_initUSART4	;wreg free
  1438   002F9E                     
  1439                           ;main.c: 44:     Timer0_init();
  1440   002F9E  ECBF  F025         	call	_Timer0_init	;wreg free
  1441   002FA2                     
  1442                           ;main.c: 46:     buttons_init();
  1443   002FA2  EC72  F026         	call	_buttons_init	;wreg free
  1444   002FA6                     
  1445                           ;main.c: 48:     color_clicker_lights_init();
  1446   002FA6  EC65  F026         	call	_color_clicker_lights_init	;wreg free
  1447   002FAA                     
  1448                           ;main.c: 50:     initDCmotorsPWM(99);
  1449   002FAA  0E00               	movlw	0
  1450   002FAC  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1451   002FAE  0E63               	movlw	99
  1452   002FB0  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1453   002FB2  ECF7  F01F         	call	_initDCmotorsPWM	;wreg free
  1454   002FB6                     
  1455                           ;main.c: 51:     variablesMotorInit(&motorL, &motorR, 99);
  1456   002FB6  0EDE               	movlw	low _motorL
  1457   002FB8  6E02               	movwf	variablesMotorInit@mL^0,c
  1458   002FBA  0ED5               	movlw	low _motorR
  1459   002FBC  6E03               	movwf	variablesMotorInit@mR^0,c
  1460   002FBE  0E00               	movlw	0
  1461   002FC0  6E05               	movwf	(variablesMotorInit@PWMcycle+1)^0,c
  1462   002FC2  0E63               	movlw	99
  1463   002FC4  6E04               	movwf	variablesMotorInit@PWMcycle^0,c
  1464   002FC6  ECA4  F022         	call	_variablesMotorInit	;wreg free
  1465   002FCA                     
  1466                           ;main.c: 53:     calibration_colors(&colorCalibration);
  1467   002FCA  0EEF               	movlw	low _colorCalibration
  1468   002FCC  6E0D               	movwf	calibration_colors@cCal^0,c
  1469   002FCE  ECC9  F019         	call	_calibration_colors	;wreg free
  1470   002FD2                     
  1471                           ;main.c: 54:     factorR = calibration_turningR(&motorL, &motorR) ;
  1472   002FD2  0EDE               	movlw	low _motorL
  1473   002FD4  6E4C               	movwf	calibration_turningR@mL^0,c
  1474   002FD6  0ED5               	movlw	low _motorR
  1475   002FD8  6E4D               	movwf	calibration_turningR@mR^0,c
  1476   002FDA  EC6F  F012         	call	_calibration_turningR	;wreg free
  1477   002FDE  C04C  F0B0         	movff	?_calibration_turningR,main@factorR
  1478   002FE2  C04D  F0B1         	movff	?_calibration_turningR+1,main@factorR+1
  1479   002FE6                     
  1480                           ;main.c: 55:     factorL = calibration_turningL(&motorL, &motorR) ;
  1481   002FE6  0EDE               	movlw	low _motorL
  1482   002FE8  6E4C               	movwf	calibration_turningL@mL^0,c
  1483   002FEA  0ED5               	movlw	low _motorR
  1484   002FEC  6E4D               	movwf	calibration_turningL@mR^0,c
  1485   002FEE  EC92  F013         	call	_calibration_turningL	;wreg free
  1486   002FF2  C04C  F0B2         	movff	?_calibration_turningL,main@factorL
  1487   002FF6  C04D  F0B3         	movff	?_calibration_turningL+1,main@factorL+1
  1488   002FFA                     l5870:
  1489                           
  1490                           ;main.c: 59:         intial_stage_movement(&motorL, &motorR);
  1491   002FFA  0EDE               	movlw	low _motorL
  1492   002FFC  6E51               	movwf	intial_stage_movement@mL^0,c
  1493   002FFE  0ED5               	movlw	low _motorR
  1494   003000  6E52               	movwf	intial_stage_movement@mR^0,c
  1495   003002  EC5A  F026         	call	_intial_stage_movement	;wreg free
  1496   003006                     
  1497                           ;main.c: 61:         looking_for_card(&motorL,&motorR,&colorCurrent, &colorCalibration, 
      +                          path_step);
  1498   003006  0EDE               	movlw	low _motorL
  1499   003008  0100               	movlb	0	; () banked
  1500   00300A  6F60               	movwf	looking_for_card@mL& (0+255),b
  1501   00300C  0ED5               	movlw	low _motorR
  1502   00300E  6F61               	movwf	looking_for_card@mR& (0+255),b
  1503   003010  0EE7               	movlw	low _colorCurrent
  1504   003012  6F62               	movwf	looking_for_card@cCurr& (0+255),b
  1505   003014  0EEF               	movlw	low _colorCalibration
  1506   003016  6F63               	movwf	looking_for_card@cMax& (0+255),b
  1507   003018  C0B6  F064         	movff	main@path_step,looking_for_card@path_step
  1508   00301C  C0B7  F065         	movff	main@path_step+1,looking_for_card@path_step+1
  1509   003020  ECDB  F021         	call	_looking_for_card	;wreg free
  1510   003024                     
  1511                           ;main.c: 63:         path_step++;
  1512   003024  0100               	movlb	0	; () banked
  1513   003026  4BB6               	infsnz	main@path_step& (0+255),f,b
  1514   003028  2BB7               	incf	(main@path_step+1)& (0+255),f,b
  1515   00302A                     
  1516                           ; BSR set to: 0
  1517                           ;main.c: 65:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1518   00302A  0E11               	movlw	17
  1519   00302C  0100               	movlb	0	; () banked
  1520   00302E  6FAD               	movwf	(??_main+1)& (0+255),b
  1521   003030  0E3C               	movlw	60
  1522   003032  6FAC               	movwf	??_main& (0+255),b
  1523   003034  0ECB               	movlw	203
  1524   003036                     u5337:
  1525   003036  2EE8               	decfsz	wreg,f,c
  1526   003038  D7FE               	bra	u5337
  1527   00303A  2FAC               	decfsz	??_main& (0+255),f,b
  1528   00303C  D7FC               	bra	u5337
  1529   00303E  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1530   003040  D7FA               	bra	u5337
  1531   003042                     
  1532                           ;main.c: 67:         bump_wall(&motorL, &motorR);
  1533   003042  0EDE               	movlw	low _motorL
  1534   003044  6E51               	movwf	bump_wall@mL^0,c
  1535   003046  0ED5               	movlw	low _motorR
  1536   003048  6E52               	movwf	bump_wall@mR^0,c
  1537   00304A  ECED  F022         	call	_bump_wall	;wreg free
  1538   00304E                     
  1539                           ;main.c: 69:         hue = reading_hue(&colorCurrent);
  1540   00304E  0EE7               	movlw	low _colorCurrent
  1541   003050  6E50               	movwf	reading_hue@cCurr^0,c
  1542   003052  ECED  F01B         	call	_reading_hue	;wreg free
  1543   003056  C050  F0B4         	movff	?_reading_hue,main@hue
  1544   00305A  C051  F0B5         	movff	?_reading_hue+1,main@hue+1
  1545   00305E                     
  1546                           ;main.c: 71:         send2USART(hue);
  1547   00305E  C0B4  F045         	movff	main@hue,send2USART@hue
  1548   003062  C0B5  F046         	movff	main@hue+1,send2USART@hue+1
  1549   003066  EC23  F026         	call	_send2USART	;wreg free
  1550   00306A                     
  1551                           ;main.c: 74:         clear_norm = calc_clear_norm(&colorCurrent, &colorCalibration);
  1552   00306A  0EE7               	movlw	low _colorCurrent
  1553   00306C  6E4C               	movwf	calc_clear_norm@cCurr^0,c
  1554   00306E  0EEF               	movlw	low _colorCalibration
  1555   003070  6E4D               	movwf	calc_clear_norm@cMax^0,c
  1556   003072  EC62  F01C         	call	_calc_clear_norm	;wreg free
  1557   003076  C04C  F0AE         	movff	?_calc_clear_norm,main@clear_norm
  1558   00307A  C04D  F0AF         	movff	?_calc_clear_norm+1,main@clear_norm+1
  1559   00307E                     
  1560                           ;main.c: 76:         is_white(&motorL, &motorR,path_step, factorR, factorL, hue, clear_n
      +                          orm);
  1561   00307E  0EDE               	movlw	low _motorL
  1562   003080  0100               	movlb	0	; () banked
  1563   003082  6F92               	movwf	is_white@mL& (0+255),b
  1564   003084  0ED5               	movlw	low _motorR
  1565   003086  6F93               	movwf	is_white@mR& (0+255),b
  1566   003088  C0B6  F094         	movff	main@path_step,is_white@path_step
  1567   00308C  C0B7  F095         	movff	main@path_step+1,is_white@path_step+1
  1568   003090  C0B0  F096         	movff	main@factorR,is_white@factorR
  1569   003094  C0B1  F097         	movff	main@factorR+1,is_white@factorR+1
  1570   003098  C0B2  F098         	movff	main@factorL,is_white@factorL
  1571   00309C  C0B3  F099         	movff	main@factorL+1,is_white@factorL+1
  1572   0030A0  C0B4  F09A         	movff	main@hue,is_white@hue
  1573   0030A4  C0B5  F09B         	movff	main@hue+1,is_white@hue+1
  1574   0030A8  C0AE  F09C         	movff	main@clear_norm,is_white@clear_norm
  1575   0030AC  C0AF  F09D         	movff	main@clear_norm+1,is_white@clear_norm+1
  1576   0030B0  ECD3  F01C         	call	_is_white	;wreg free
  1577   0030B4                     
  1578                           ;main.c: 78:         path_step = decision(hue, path_step, factorR, factorL);
  1579   0030B4  C0B4  F025         	movff	main@hue,decision@hue
  1580   0030B8  C0B5  F026         	movff	main@hue+1,decision@hue+1
  1581   0030BC  C0B6  F027         	movff	main@path_step,decision@path_step
  1582   0030C0  C0B7  F028         	movff	main@path_step+1,decision@path_step+1
  1583   0030C4  C0B0  F029         	movff	main@factorR,decision@factorR
  1584   0030C8  C0B1  F02A         	movff	main@factorR+1,decision@factorR+1
  1585   0030CC  C0B2  F02B         	movff	main@factorL,decision@factorL
  1586   0030D0  C0B3  F02C         	movff	main@factorL+1,decision@factorL+1
  1587   0030D4  EC1D  F011         	call	_decision	;wreg free
  1588   0030D8  C025  F0B6         	movff	?_decision,main@path_step
  1589   0030DC  C026  F0B7         	movff	?_decision+1,main@path_step+1
  1590   0030E0  EFFD  F017         	goto	l5870
  1591   0030E4  EF1D  F000         	goto	start
  1592   0030E8                     __end_of_main:
  1593                           	callstack 0
  1594                           
  1595 ;; *************** function _variablesMotorInit *****************
  1596 ;; Defined at:
  1597 ;;		line 87 in file "dc_motor.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  mL              1    1[COMRAM] PTR struct DC_motor
  1600 ;;		 -> motorL(9), 
  1601 ;;  mR              1    2[COMRAM] PTR struct DC_motor
  1602 ;;		 -> motorR(9), 
  1603 ;;  PWMcycle        2    3[COMRAM] unsigned int 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;		None
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      void 
  1608 ;; Registers used:
  1609 ;;		wreg, status,2, status,0
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1615 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1618 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1619 ;;Total ram usage:        4 bytes
  1620 ;; Hardware stack levels used: 1
  1621 ;; Hardware stack levels required when called: 1
  1622 ;; This function calls:
  1623 ;;		Nothing
  1624 ;; This function is called by:
  1625 ;;		_main
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text1
  1630   004548                     __ptext1:
  1631                           	callstack 0
  1632   004548                     _variablesMotorInit:
  1633                           	callstack 29
  1634   004548                     
  1635                           ;dc_motor.c: 89:     motorL.power = 0;
  1636   004548  0E00               	movlw	0
  1637   00454A  0100               	movlb	0	; () banked
  1638   00454C  6FDE               	movwf	_motorL& (0+255),b
  1639                           
  1640                           ;dc_motor.c: 90:     motorL.direction = 1;
  1641   00454E  0E01               	movlw	1
  1642   004550  6FDF               	movwf	(_motorL+1)& (0+255),b
  1643                           
  1644                           ;dc_motor.c: 91:     motorL.brakemode = 1;
  1645   004552  0E01               	movlw	1
  1646   004554  6FE0               	movwf	(_motorL+2)& (0+255),b
  1647   004556                     
  1648                           ; BSR set to: 0
  1649                           ;dc_motor.c: 92:     motorL.PWMperiod = PWMcycle;
  1650   004556  C004  F0E1         	movff	variablesMotorInit@PWMcycle,_motorL+3
  1651   00455A  C005  F0E2         	movff	variablesMotorInit@PWMcycle+1,_motorL+4
  1652   00455E                     
  1653                           ; BSR set to: 0
  1654                           ;dc_motor.c: 93:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1655   00455E  0EAA               	movlw	170
  1656   004560  6FE3               	movwf	(_motorL+5)& (0+255),b
  1657   004562  0E0F               	movlw	15
  1658   004564  6FE4               	movwf	(_motorL+6)& (0+255),b
  1659   004566                     
  1660                           ; BSR set to: 0
  1661                           ;dc_motor.c: 94:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1662   004566  0EA6               	movlw	166
  1663   004568  6FE5               	movwf	(_motorL+7)& (0+255),b
  1664   00456A  0E0F               	movlw	15
  1665   00456C  6FE6               	movwf	(_motorL+8)& (0+255),b
  1666                           
  1667                           ;dc_motor.c: 96:     motorR.power = 0;
  1668   00456E  0E00               	movlw	0
  1669   004570  6FD5               	movwf	_motorR& (0+255),b
  1670                           
  1671                           ;dc_motor.c: 97:     motorR.direction = 1;
  1672   004572  0E01               	movlw	1
  1673   004574  6FD6               	movwf	(_motorR+1)& (0+255),b
  1674                           
  1675                           ;dc_motor.c: 98:     motorR.brakemode = 1;
  1676   004576  0E01               	movlw	1
  1677   004578  6FD7               	movwf	(_motorR+2)& (0+255),b
  1678   00457A                     
  1679                           ; BSR set to: 0
  1680                           ;dc_motor.c: 99:     motorR.PWMperiod = PWMcycle;
  1681   00457A  C004  F0D8         	movff	variablesMotorInit@PWMcycle,_motorR+3
  1682   00457E  C005  F0D9         	movff	variablesMotorInit@PWMcycle+1,_motorR+4
  1683   004582                     
  1684                           ; BSR set to: 0
  1685                           ;dc_motor.c: 100:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1686   004582  0E25               	movlw	37
  1687   004584  6FDA               	movwf	(_motorR+5)& (0+255),b
  1688   004586  0E0F               	movlw	15
  1689   004588  6FDB               	movwf	(_motorR+6)& (0+255),b
  1690   00458A                     
  1691                           ; BSR set to: 0
  1692                           ;dc_motor.c: 101:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1693   00458A  0E21               	movlw	33
  1694   00458C  6FDC               	movwf	(_motorR+7)& (0+255),b
  1695   00458E  0E0F               	movlw	15
  1696   004590  6FDD               	movwf	(_motorR+8)& (0+255),b
  1697   004592                     
  1698                           ; BSR set to: 0
  1699   004592  0012               	return		;funcret
  1700   004594                     __end_of_variablesMotorInit:
  1701                           	callstack 0
  1702                           
  1703 ;; *************** function _reading_hue *****************
  1704 ;; Defined at:
  1705 ;;		line 105 in file "color.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  cCurr           1   79[COMRAM] PTR struct colors
  1708 ;;		 -> colorCurrent(8), 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  led_state      50    0        unsigned char [50]
  1711 ;;  hue             2   83[COMRAM] unsigned int 
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  2   79[COMRAM] unsigned int 
  1714 ;; Registers used:
  1715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1721 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1722 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1723 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1724 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1725 ;;Total ram usage:        6 bytes
  1726 ;; Hardware stack levels used: 1
  1727 ;; Hardware stack levels required when called: 4
  1728 ;; This function calls:
  1729 ;;		_color_read_Blue
  1730 ;;		_color_read_Clear
  1731 ;;		_color_read_Green
  1732 ;;		_color_read_Red
  1733 ;;		_convert_rgb2hue
  1734 ;; This function is called by:
  1735 ;;		_main
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text2
  1740   0037DA                     __ptext2:
  1741                           	callstack 0
  1742   0037DA                     _reading_hue:
  1743                           	callstack 26
  1744   0037DA                     
  1745                           ;color.c: 105: unsigned int reading_hue(colors *cCurr);color.c: 106: {;color.c: 107:    
      +                           unsigned int hue;;color.c: 109:     char led_state[50];;color.c: 112:     LATGbits.LATG
      +                          0 = 1;
  1746   0037DA  807F               	bsf	127,0,c	;volatile
  1747                           
  1748                           ;color.c: 113:     LATEbits.LATE7 = 0;
  1749   0037DC  9E7D               	bcf	125,7,c	;volatile
  1750                           
  1751                           ;color.c: 114:     LATAbits.LATA3 = 0;
  1752   0037DE  9679               	bcf	121,3,c	;volatile
  1753   0037E0                     
  1754                           ;color.c: 115:     _delay((unsigned long)((200)*(64000000/4000.0)));
  1755   0037E0  0E11               	movlw	17
  1756   0037E2  6E53               	movwf	(??_reading_hue+1)^0,c
  1757   0037E4  0E3C               	movlw	60
  1758   0037E6  6E52               	movwf	??_reading_hue^0,c
  1759   0037E8  0ECB               	movlw	203
  1760   0037EA                     u5347:
  1761   0037EA  2EE8               	decfsz	wreg,f,c
  1762   0037EC  D7FE               	bra	u5347
  1763   0037EE  2E52               	decfsz	??_reading_hue^0,f,c
  1764   0037F0  D7FC               	bra	u5347
  1765   0037F2  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  1766   0037F4  D7FA               	bra	u5347
  1767   0037F6  0000               	nop	
  1768   0037F8                     
  1769                           ;color.c: 116:     (cCurr->red)= color_read_Red();
  1770   0037F8  EC04  F022         	call	_color_read_Red	;wreg free
  1771   0037FC  5050               	movf	reading_hue@cCurr^0,w,c
  1772   0037FE  6ED9               	movwf	fsr2l,c
  1773   003800  6ADA               	clrf	fsr2h,c
  1774   003802  C006  FFDE         	movff	?_color_read_Red,postinc2
  1775   003806  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  1776   00380A                     
  1777                           ;color.c: 118:     LATGbits.LATG0 = 0;
  1778   00380A  907F               	bcf	127,0,c	;volatile
  1779   00380C                     
  1780                           ;color.c: 119:     LATEbits.LATE7 = 1;
  1781   00380C  8E7D               	bsf	125,7,c	;volatile
  1782   00380E                     
  1783                           ;color.c: 120:     LATAbits.LATA3 = 0;
  1784   00380E  9679               	bcf	121,3,c	;volatile
  1785   003810                     
  1786                           ;color.c: 121:     _delay((unsigned long)((200)*(64000000/4000.0)));
  1787   003810  0E11               	movlw	17
  1788   003812  6E53               	movwf	(??_reading_hue+1)^0,c
  1789   003814  0E3C               	movlw	60
  1790   003816  6E52               	movwf	??_reading_hue^0,c
  1791   003818  0ECB               	movlw	203
  1792   00381A                     u5357:
  1793   00381A  2EE8               	decfsz	wreg,f,c
  1794   00381C  D7FE               	bra	u5357
  1795   00381E  2E52               	decfsz	??_reading_hue^0,f,c
  1796   003820  D7FC               	bra	u5357
  1797   003822  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  1798   003824  D7FA               	bra	u5357
  1799   003826  0000               	nop	
  1800                           
  1801                           ;color.c: 122:     (cCurr->green) = color_read_Green();
  1802   003828  EC2C  F022         	call	_color_read_Green	;wreg free
  1803   00382C  5050               	movf	reading_hue@cCurr^0,w,c
  1804   00382E  6ED9               	movwf	fsr2l,c
  1805   003830  6ADA               	clrf	fsr2h,c
  1806   003832  0E02               	movlw	2
  1807   003834  26D9               	addwf	fsr2l,f,c
  1808   003836  C006  FFDE         	movff	?_color_read_Green,postinc2
  1809   00383A  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  1810   00383E                     
  1811                           ;color.c: 124:     LATGbits.LATG0 = 0;
  1812   00383E  907F               	bcf	127,0,c	;volatile
  1813   003840                     
  1814                           ;color.c: 125:     LATEbits.LATE7 = 0;
  1815   003840  9E7D               	bcf	125,7,c	;volatile
  1816   003842                     
  1817                           ;color.c: 126:     LATAbits.LATA3 = 1;
  1818   003842  8679               	bsf	121,3,c	;volatile
  1819   003844                     
  1820                           ;color.c: 127:     _delay((unsigned long)((200)*(64000000/4000.0)));
  1821   003844  0E11               	movlw	17
  1822   003846  6E53               	movwf	(??_reading_hue+1)^0,c
  1823   003848  0E3C               	movlw	60
  1824   00384A  6E52               	movwf	??_reading_hue^0,c
  1825   00384C  0ECB               	movlw	203
  1826   00384E                     u5367:
  1827   00384E  2EE8               	decfsz	wreg,f,c
  1828   003850  D7FE               	bra	u5367
  1829   003852  2E52               	decfsz	??_reading_hue^0,f,c
  1830   003854  D7FC               	bra	u5367
  1831   003856  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  1832   003858  D7FA               	bra	u5367
  1833   00385A  0000               	nop	
  1834   00385C                     
  1835                           ;color.c: 128:     (cCurr->blue) = color_read_Blue();
  1836   00385C  EC7C  F022         	call	_color_read_Blue	;wreg free
  1837   003860  5050               	movf	reading_hue@cCurr^0,w,c
  1838   003862  6ED9               	movwf	fsr2l,c
  1839   003864  6ADA               	clrf	fsr2h,c
  1840   003866  0E04               	movlw	4
  1841   003868  26D9               	addwf	fsr2l,f,c
  1842   00386A  C006  FFDE         	movff	?_color_read_Blue,postinc2
  1843   00386E  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  1844   003872                     
  1845                           ;color.c: 130:     LATGbits.LATG0 = 1;
  1846   003872  807F               	bsf	127,0,c	;volatile
  1847   003874                     
  1848                           ;color.c: 131:     LATEbits.LATE7 = 1;
  1849   003874  8E7D               	bsf	125,7,c	;volatile
  1850   003876                     
  1851                           ;color.c: 132:     LATAbits.LATA3 = 1;
  1852   003876  8679               	bsf	121,3,c	;volatile
  1853                           
  1854                           ;color.c: 133:     _delay((unsigned long)((200)*(64000000/4000.0)));
  1855   003878  0E11               	movlw	17
  1856   00387A  6E53               	movwf	(??_reading_hue+1)^0,c
  1857   00387C  0E3C               	movlw	60
  1858   00387E  6E52               	movwf	??_reading_hue^0,c
  1859   003880  0ECB               	movlw	203
  1860   003882                     u5377:
  1861   003882  2EE8               	decfsz	wreg,f,c
  1862   003884  D7FE               	bra	u5377
  1863   003886  2E52               	decfsz	??_reading_hue^0,f,c
  1864   003888  D7FC               	bra	u5377
  1865   00388A  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  1866   00388C  D7FA               	bra	u5377
  1867   00388E  0000               	nop	
  1868   003890                     
  1869                           ;color.c: 134:     (cCurr->clear) = color_read_Clear();
  1870   003890  EC54  F022         	call	_color_read_Clear	;wreg free
  1871   003894  5050               	movf	reading_hue@cCurr^0,w,c
  1872   003896  6ED9               	movwf	fsr2l,c
  1873   003898  6ADA               	clrf	fsr2h,c
  1874   00389A  0E06               	movlw	6
  1875   00389C  26D9               	addwf	fsr2l,f,c
  1876   00389E  C006  FFDE         	movff	?_color_read_Clear,postinc2
  1877   0038A2  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  1878   0038A6                     
  1879                           ;color.c: 137:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  1880   0038A6  0EEF               	movlw	low _colorCalibration
  1881   0038A8  6E4C               	movwf	convert_rgb2hue@cMax^0,c
  1882   0038AA  0EE7               	movlw	low _colorCurrent
  1883   0038AC  6E4D               	movwf	convert_rgb2hue@cCurr^0,c
  1884   0038AE  EC12  F007         	call	_convert_rgb2hue	;wreg free
  1885   0038B2  C04C  F054         	movff	?_convert_rgb2hue,reading_hue@hue
  1886   0038B6  C04D  F055         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  1887   0038BA                     
  1888                           ;color.c: 141:     return hue;
  1889   0038BA  C054  F050         	movff	reading_hue@hue,?_reading_hue
  1890   0038BE  C055  F051         	movff	reading_hue@hue+1,?_reading_hue+1
  1891   0038C2  0012               	return		;funcret
  1892   0038C4                     __end_of_reading_hue:
  1893                           	callstack 0
  1894                           
  1895 ;; *************** function _convert_rgb2hue *****************
  1896 ;; Defined at:
  1897 ;;		line 147 in file "color.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  cMax            1   75[COMRAM] PTR struct colors
  1900 ;;		 -> colorCalibration(8), 
  1901 ;;  cCurr           1   76[COMRAM] PTR struct colors
  1902 ;;		 -> colorCurrent(8), 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  c_char         20    0        unsigned char [20]
  1905 ;;  b               4   72[BANK0 ] float 
  1906 ;;  g               4   68[BANK0 ] float 
  1907 ;;  r               4   64[BANK0 ] float 
  1908 ;;  hue             4   60[BANK0 ] float 
  1909 ;;  max             4   56[BANK0 ] float 
  1910 ;;  diff            4   52[BANK0 ] float 
  1911 ;;  min             4   48[BANK0 ] float 
  1912 ;;  clearmax        4   28[BANK0 ] float 
  1913 ;;  clearcurrent    4   24[BANK0 ] float 
  1914 ;;  bluemax         4   20[BANK0 ] float 
  1915 ;;  bluecurrent     4   16[BANK0 ] float 
  1916 ;;  greenmax        4   12[BANK0 ] float 
  1917 ;;  greencurrent    4    8[BANK0 ] float 
  1918 ;;  redmax          4    4[BANK0 ] float 
  1919 ;;  redcurrent      4    0[BANK0 ] float 
  1920 ;;  c               4    0        float 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  2   75[COMRAM] unsigned int 
  1923 ;; Registers used:
  1924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1930 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1931 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1932 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1933 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1934 ;;Total ram usage:       80 bytes
  1935 ;; Hardware stack levels used: 1
  1936 ;; Hardware stack levels required when called: 3
  1937 ;; This function calls:
  1938 ;;		___fladd
  1939 ;;		___fldiv
  1940 ;;		___fleq
  1941 ;;		___flge
  1942 ;;		___flmul
  1943 ;;		___flsub
  1944 ;;		___fltol
  1945 ;;		___xxtofl
  1946 ;; This function is called by:
  1947 ;;		_reading_hue
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text3
  1952   000E24                     __ptext3:
  1953                           	callstack 0
  1954   000E24                     _convert_rgb2hue:
  1955                           	callstack 26
  1956   000E24                     
  1957                           ;color.c: 147: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 148: {;color.c: 149:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 150:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  1958   000E24  0E00               	movlw	0
  1959   000E26  0100               	movlb	0	; () banked
  1960   000E28  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  1961   000E2A  0E00               	movlw	0
  1962   000E2C  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  1963   000E2E  0E00               	movlw	0
  1964   000E30  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  1965   000E32  0E00               	movlw	0
  1966   000E34  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  1967   000E36                     
  1968                           ; BSR set to: 0
  1969                           ;color.c: 152:     redcurrent = cCurr->red;
  1970   000E36  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  1971   000E38  6ED9               	movwf	fsr2l,c
  1972   000E3A  6ADA               	clrf	fsr2h,c
  1973   000E3C  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  1974   000E40  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  1975   000E44  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  1976   000E48  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1977   000E4C  6A04               	clrf	(___xxtofl@val+2)^0,c
  1978   000E4E  6A05               	clrf	(___xxtofl@val+3)^0,c
  1979   000E50  0E00               	movlw	0
  1980   000E52  ECB5  F014         	call	___xxtofl
  1981   000E56  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  1982   000E5A  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  1983   000E5E  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  1984   000E62  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  1985   000E66                     
  1986                           ;color.c: 153:     redmax = cMax->red;
  1987   000E66  504C               	movf	convert_rgb2hue@cMax^0,w,c
  1988   000E68  6ED9               	movwf	fsr2l,c
  1989   000E6A  6ADA               	clrf	fsr2h,c
  1990   000E6C  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  1991   000E70  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  1992   000E74  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  1993   000E78  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1994   000E7C  6A04               	clrf	(___xxtofl@val+2)^0,c
  1995   000E7E  6A05               	clrf	(___xxtofl@val+3)^0,c
  1996   000E80  0E00               	movlw	0
  1997   000E82  ECB5  F014         	call	___xxtofl
  1998   000E86  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  1999   000E8A  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  2000   000E8E  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  2001   000E92  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  2002   000E96                     
  2003                           ;color.c: 154:     greencurrent = cCurr->green;
  2004   000E96  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  2005   000E98  6ED9               	movwf	fsr2l,c
  2006   000E9A  6ADA               	clrf	fsr2h,c
  2007   000E9C  0E02               	movlw	2
  2008   000E9E  26D9               	addwf	fsr2l,f,c
  2009   000EA0  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  2010   000EA4  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  2011   000EA8  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2012   000EAC  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2013   000EB0  6A04               	clrf	(___xxtofl@val+2)^0,c
  2014   000EB2  6A05               	clrf	(___xxtofl@val+3)^0,c
  2015   000EB4  0E00               	movlw	0
  2016   000EB6  ECB5  F014         	call	___xxtofl
  2017   000EBA  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  2018   000EBE  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  2019   000EC2  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  2020   000EC6  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  2021   000ECA                     
  2022                           ;color.c: 155:     greenmax = cMax->green;
  2023   000ECA  504C               	movf	convert_rgb2hue@cMax^0,w,c
  2024   000ECC  6ED9               	movwf	fsr2l,c
  2025   000ECE  6ADA               	clrf	fsr2h,c
  2026   000ED0  0E02               	movlw	2
  2027   000ED2  26D9               	addwf	fsr2l,f,c
  2028   000ED4  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  2029   000ED8  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  2030   000EDC  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2031   000EE0  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2032   000EE4  6A04               	clrf	(___xxtofl@val+2)^0,c
  2033   000EE6  6A05               	clrf	(___xxtofl@val+3)^0,c
  2034   000EE8  0E00               	movlw	0
  2035   000EEA  ECB5  F014         	call	___xxtofl
  2036   000EEE  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  2037   000EF2  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  2038   000EF6  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  2039   000EFA  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  2040   000EFE                     
  2041                           ;color.c: 156:     bluecurrent = cCurr->blue;
  2042   000EFE  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  2043   000F00  6ED9               	movwf	fsr2l,c
  2044   000F02  6ADA               	clrf	fsr2h,c
  2045   000F04  0E04               	movlw	4
  2046   000F06  26D9               	addwf	fsr2l,f,c
  2047   000F08  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  2048   000F0C  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  2049   000F10  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2050   000F14  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2051   000F18  6A04               	clrf	(___xxtofl@val+2)^0,c
  2052   000F1A  6A05               	clrf	(___xxtofl@val+3)^0,c
  2053   000F1C  0E00               	movlw	0
  2054   000F1E  ECB5  F014         	call	___xxtofl
  2055   000F22  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  2056   000F26  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  2057   000F2A  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  2058   000F2E  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  2059   000F32                     
  2060                           ;color.c: 157:     bluemax = cMax->blue;
  2061   000F32  504C               	movf	convert_rgb2hue@cMax^0,w,c
  2062   000F34  6ED9               	movwf	fsr2l,c
  2063   000F36  6ADA               	clrf	fsr2h,c
  2064   000F38  0E04               	movlw	4
  2065   000F3A  26D9               	addwf	fsr2l,f,c
  2066   000F3C  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  2067   000F40  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  2068   000F44  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2069   000F48  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2070   000F4C  6A04               	clrf	(___xxtofl@val+2)^0,c
  2071   000F4E  6A05               	clrf	(___xxtofl@val+3)^0,c
  2072   000F50  0E00               	movlw	0
  2073   000F52  ECB5  F014         	call	___xxtofl
  2074   000F56  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  2075   000F5A  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  2076   000F5E  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  2077   000F62  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  2078   000F66                     
  2079                           ;color.c: 158:     clearcurrent = cCurr->clear;
  2080   000F66  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  2081   000F68  6ED9               	movwf	fsr2l,c
  2082   000F6A  6ADA               	clrf	fsr2h,c
  2083   000F6C  0E06               	movlw	6
  2084   000F6E  26D9               	addwf	fsr2l,f,c
  2085   000F70  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  2086   000F74  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  2087   000F78  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2088   000F7C  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2089   000F80  6A04               	clrf	(___xxtofl@val+2)^0,c
  2090   000F82  6A05               	clrf	(___xxtofl@val+3)^0,c
  2091   000F84  0E00               	movlw	0
  2092   000F86  ECB5  F014         	call	___xxtofl
  2093   000F8A  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  2094   000F8E  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  2095   000F92  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  2096   000F96  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  2097   000F9A                     
  2098                           ;color.c: 159:     clearmax = cMax->clear;
  2099   000F9A  504C               	movf	convert_rgb2hue@cMax^0,w,c
  2100   000F9C  6ED9               	movwf	fsr2l,c
  2101   000F9E  6ADA               	clrf	fsr2h,c
  2102   000FA0  0E06               	movlw	6
  2103   000FA2  26D9               	addwf	fsr2l,f,c
  2104   000FA4  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  2105   000FA8  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  2106   000FAC  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2107   000FB0  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2108   000FB4  6A04               	clrf	(___xxtofl@val+2)^0,c
  2109   000FB6  6A05               	clrf	(___xxtofl@val+3)^0,c
  2110   000FB8  0E00               	movlw	0
  2111   000FBA  ECB5  F014         	call	___xxtofl
  2112   000FBE  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  2113   000FC2  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  2114   000FC6  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  2115   000FCA  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  2116   000FCE  C078  F029         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  2117   000FD2  C079  F02A         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  2118   000FD6  C07A  F02B         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  2119   000FDA  C07B  F02C         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  2120   000FDE  C07C  F02D         	movff	convert_rgb2hue@clearmax,___fldiv@a
  2121   000FE2  C07D  F02E         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  2122   000FE6  C07E  F02F         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  2123   000FEA  C07F  F030         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  2124   000FEE  EC50  F00F         	call	___fldiv	;wreg free
  2125   000FF2                     
  2126                           ;color.c: 162:     char c_char[20];;color.c: 168:     r = redcurrent/redmax;
  2127   000FF2  C060  F029         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  2128   000FF6  C061  F02A         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  2129   000FFA  C062  F02B         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  2130   000FFE  C063  F02C         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  2131   001002  C064  F02D         	movff	convert_rgb2hue@redmax,___fldiv@a
  2132   001006  C065  F02E         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  2133   00100A  C066  F02F         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  2134   00100E  C067  F030         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  2135   001012  EC50  F00F         	call	___fldiv	;wreg free
  2136   001016  C029  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  2137   00101A  C02A  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  2138   00101E  C02B  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  2139   001022  C02C  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  2140   001026                     
  2141                           ;color.c: 169:     g = greencurrent/greenmax;
  2142   001026  C068  F029         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  2143   00102A  C069  F02A         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  2144   00102E  C06A  F02B         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  2145   001032  C06B  F02C         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  2146   001036  C06C  F02D         	movff	convert_rgb2hue@greenmax,___fldiv@a
  2147   00103A  C06D  F02E         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  2148   00103E  C06E  F02F         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  2149   001042  C06F  F030         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  2150   001046  EC50  F00F         	call	___fldiv	;wreg free
  2151   00104A  C029  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  2152   00104E  C02A  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  2153   001052  C02B  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  2154   001056  C02C  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  2155   00105A                     
  2156                           ;color.c: 170:     b = bluecurrent/bluemax;
  2157   00105A  C070  F029         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  2158   00105E  C071  F02A         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  2159   001062  C072  F02B         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  2160   001066  C073  F02C         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  2161   00106A  C074  F02D         	movff	convert_rgb2hue@bluemax,___fldiv@a
  2162   00106E  C075  F02E         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  2163   001072  C076  F02F         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  2164   001076  C077  F030         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  2165   00107A  EC50  F00F         	call	___fldiv	;wreg free
  2166   00107E  C029  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  2167   001082  C02A  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  2168   001086  C02B  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  2169   00108A  C02C  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  2170   00108E                     
  2171                           ;color.c: 172:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  2172   00108E  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  2173   001092  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2174   001096  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2175   00109A  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2176   00109E  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  2177   0010A2  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2178   0010A6  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2179   0010AA  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2180   0010AE  EC6B  F01B         	call	___flge	;wreg free
  2181   0010B2  A0D8               	btfss	status,0,c
  2182   0010B4  EF5E  F008         	goto	u4361
  2183   0010B8  EF60  F008         	goto	u4360
  2184   0010BC                     u4361:
  2185   0010BC  EF95  F008         	goto	l5014
  2186   0010C0                     u4360:
  2187   0010C0  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  2188   0010C4  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2189   0010C8  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2190   0010CC  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2191   0010D0  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  2192   0010D4  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2193   0010D8  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2194   0010DC  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2195   0010E0  EC6B  F01B         	call	___flge	;wreg free
  2196   0010E4  A0D8               	btfss	status,0,c
  2197   0010E6  EF77  F008         	goto	u4371
  2198   0010EA  EF79  F008         	goto	u4370
  2199   0010EE                     u4371:
  2200   0010EE  EF83  F008         	goto	l114
  2201   0010F2                     u4370:
  2202   0010F2  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$465
  2203   0010F6  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$465+1
  2204   0010FA  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$465+2
  2205   0010FE  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$465+3
  2206   001102  EF8B  F008         	goto	l116
  2207   001106                     l114:
  2208   001106  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$465
  2209   00110A  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$465+1
  2210   00110E  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$465+2
  2211   001112  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$465+3
  2212   001116                     l116:
  2213   001116  C080  F090         	movff	_convert_rgb2hue$465,convert_rgb2hue@min
  2214   00111A  C081  F091         	movff	_convert_rgb2hue$465+1,convert_rgb2hue@min+1
  2215   00111E  C082  F092         	movff	_convert_rgb2hue$465+2,convert_rgb2hue@min+2
  2216   001122  C083  F093         	movff	_convert_rgb2hue$465+3,convert_rgb2hue@min+3
  2217   001126  EFC8  F008         	goto	l5018
  2218   00112A                     l5014:
  2219   00112A  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  2220   00112E  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2221   001132  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2222   001136  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2223   00113A  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  2224   00113E  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2225   001142  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2226   001146  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2227   00114A  EC6B  F01B         	call	___flge	;wreg free
  2228   00114E  A0D8               	btfss	status,0,c
  2229   001150  EFAC  F008         	goto	u4381
  2230   001154  EFAE  F008         	goto	u4380
  2231   001158                     u4381:
  2232   001158  EFB8  F008         	goto	l118
  2233   00115C                     u4380:
  2234   00115C  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$466
  2235   001160  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$466+1
  2236   001164  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$466+2
  2237   001168  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$466+3
  2238   00116C  EFC0  F008         	goto	l120
  2239   001170                     l118:
  2240   001170  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$466
  2241   001174  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$466+1
  2242   001178  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$466+2
  2243   00117C  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$466+3
  2244   001180                     l120:
  2245   001180  C084  F090         	movff	_convert_rgb2hue$466,convert_rgb2hue@min
  2246   001184  C085  F091         	movff	_convert_rgb2hue$466+1,convert_rgb2hue@min+1
  2247   001188  C086  F092         	movff	_convert_rgb2hue$466+2,convert_rgb2hue@min+2
  2248   00118C  C087  F093         	movff	_convert_rgb2hue$466+3,convert_rgb2hue@min+3
  2249   001190                     l5018:
  2250                           
  2251                           ;color.c: 173:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  2252   001190  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  2253   001194  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2254   001198  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2255   00119C  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2256   0011A0  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  2257   0011A4  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2258   0011A8  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2259   0011AC  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2260   0011B0  EC6B  F01B         	call	___flge	;wreg free
  2261   0011B4  A0D8               	btfss	status,0,c
  2262   0011B6  EFDF  F008         	goto	u4391
  2263   0011BA  EFE1  F008         	goto	u4390
  2264   0011BE                     u4391:
  2265   0011BE  EF16  F009         	goto	l5024
  2266   0011C2                     u4390:
  2267   0011C2  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  2268   0011C6  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2269   0011CA  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2270   0011CE  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2271   0011D2  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  2272   0011D6  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2273   0011DA  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2274   0011DE  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2275   0011E2  EC6B  F01B         	call	___flge	;wreg free
  2276   0011E6  A0D8               	btfss	status,0,c
  2277   0011E8  EFF8  F008         	goto	u4401
  2278   0011EC  EFFA  F008         	goto	u4400
  2279   0011F0                     u4401:
  2280   0011F0  EF04  F009         	goto	l126
  2281   0011F4                     u4400:
  2282   0011F4  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$467
  2283   0011F8  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$467+1
  2284   0011FC  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$467+2
  2285   001200  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$467+3
  2286   001204  EF0C  F009         	goto	l128
  2287   001208                     l126:
  2288   001208  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$467
  2289   00120C  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$467+1
  2290   001210  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$467+2
  2291   001214  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$467+3
  2292   001218                     l128:
  2293   001218  C088  F098         	movff	_convert_rgb2hue$467,convert_rgb2hue@max
  2294   00121C  C089  F099         	movff	_convert_rgb2hue$467+1,convert_rgb2hue@max+1
  2295   001220  C08A  F09A         	movff	_convert_rgb2hue$467+2,convert_rgb2hue@max+2
  2296   001224  C08B  F09B         	movff	_convert_rgb2hue$467+3,convert_rgb2hue@max+3
  2297   001228  EF49  F009         	goto	l5028
  2298   00122C                     l5024:
  2299   00122C  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  2300   001230  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2301   001234  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2302   001238  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2303   00123C  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  2304   001240  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2305   001244  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2306   001248  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2307   00124C  EC6B  F01B         	call	___flge	;wreg free
  2308   001250  A0D8               	btfss	status,0,c
  2309   001252  EF2D  F009         	goto	u4411
  2310   001256  EF2F  F009         	goto	u4410
  2311   00125A                     u4411:
  2312   00125A  EF39  F009         	goto	l130
  2313   00125E                     u4410:
  2314   00125E  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$468
  2315   001262  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$468+1
  2316   001266  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$468+2
  2317   00126A  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$468+3
  2318   00126E  EF41  F009         	goto	l132
  2319   001272                     l130:
  2320   001272  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$468
  2321   001276  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$468+1
  2322   00127A  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$468+2
  2323   00127E  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$468+3
  2324   001282                     l132:
  2325   001282  C08C  F098         	movff	_convert_rgb2hue$468,convert_rgb2hue@max
  2326   001286  C08D  F099         	movff	_convert_rgb2hue$468+1,convert_rgb2hue@max+1
  2327   00128A  C08E  F09A         	movff	_convert_rgb2hue$468+2,convert_rgb2hue@max+2
  2328   00128E  C08F  F09B         	movff	_convert_rgb2hue$468+3,convert_rgb2hue@max+3
  2329   001292                     l5028:
  2330                           
  2331                           ;color.c: 174:     diff = max - min;
  2332   001292  C098  F020         	movff	convert_rgb2hue@max,___flsub@b
  2333   001296  C099  F021         	movff	convert_rgb2hue@max+1,___flsub@b+1
  2334   00129A  C09A  F022         	movff	convert_rgb2hue@max+2,___flsub@b+2
  2335   00129E  C09B  F023         	movff	convert_rgb2hue@max+3,___flsub@b+3
  2336   0012A2  C090  F024         	movff	convert_rgb2hue@min,___flsub@a
  2337   0012A6  C091  F025         	movff	convert_rgb2hue@min+1,___flsub@a+1
  2338   0012AA  C092  F026         	movff	convert_rgb2hue@min+2,___flsub@a+2
  2339   0012AE  C093  F027         	movff	convert_rgb2hue@min+3,___flsub@a+3
  2340   0012B2  ECCA  F022         	call	___flsub	;wreg free
  2341   0012B6  C020  F094         	movff	?___flsub,convert_rgb2hue@diff
  2342   0012BA  C021  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  2343   0012BE  C022  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  2344   0012C2  C023  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  2345                           
  2346                           ;color.c: 175:     if (max == min) {
  2347   0012C6  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  2348   0012CA  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2349   0012CE  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2350   0012D2  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2351   0012D6  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  2352   0012DA  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  2353   0012DE  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  2354   0012E2  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  2355   0012E6  ECB5  F01E         	call	___fleq	;wreg free
  2356   0012EA  A0D8               	btfss	status,0,c
  2357   0012EC  EF7A  F009         	goto	u4421
  2358   0012F0  EF7C  F009         	goto	u4420
  2359   0012F4                     u4421:
  2360   0012F4  EF87  F009         	goto	l5032
  2361   0012F8                     u4420:
  2362   0012F8                     
  2363                           ;color.c: 176:         hue = 0;
  2364   0012F8  0E00               	movlw	0
  2365   0012FA  0100               	movlb	0	; () banked
  2366   0012FC  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  2367   0012FE  0E00               	movlw	0
  2368   001300  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2369   001302  0E00               	movlw	0
  2370   001304  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2371   001306  0E00               	movlw	0
  2372   001308  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2373                           
  2374                           ;color.c: 177:     } else if (max == r){
  2375   00130A  EF90  F00A         	goto	l5044
  2376   00130E                     l5032:
  2377   00130E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  2378   001312  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2379   001316  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2380   00131A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2381   00131E  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  2382   001322  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  2383   001326  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  2384   00132A  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  2385   00132E  ECB5  F01E         	call	___fleq	;wreg free
  2386   001332  A0D8               	btfss	status,0,c
  2387   001334  EF9E  F009         	goto	u4431
  2388   001338  EFA0  F009         	goto	u4430
  2389   00133C                     u4431:
  2390   00133C  EFCE  F009         	goto	l5036
  2391   001340                     u4430:
  2392   001340                     
  2393                           ;color.c: 178:         hue = (b - g) / diff;
  2394   001340  C0A4  F024         	movff	convert_rgb2hue@g,___flsub@a
  2395   001344  C0A5  F025         	movff	convert_rgb2hue@g+1,___flsub@a+1
  2396   001348  C0A6  F026         	movff	convert_rgb2hue@g+2,___flsub@a+2
  2397   00134C  C0A7  F027         	movff	convert_rgb2hue@g+3,___flsub@a+3
  2398   001350  C0A8  F020         	movff	convert_rgb2hue@b,___flsub@b
  2399   001354  C0A9  F021         	movff	convert_rgb2hue@b+1,___flsub@b+1
  2400   001358  C0AA  F022         	movff	convert_rgb2hue@b+2,___flsub@b+2
  2401   00135C  C0AB  F023         	movff	convert_rgb2hue@b+3,___flsub@b+3
  2402   001360  ECCA  F022         	call	___flsub	;wreg free
  2403   001364  C020  F029         	movff	?___flsub,___fldiv@b
  2404   001368  C021  F02A         	movff	?___flsub+1,___fldiv@b+1
  2405   00136C  C022  F02B         	movff	?___flsub+2,___fldiv@b+2
  2406   001370  C023  F02C         	movff	?___flsub+3,___fldiv@b+3
  2407   001374  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  2408   001378  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  2409   00137C  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  2410   001380  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  2411   001384  EC50  F00F         	call	___fldiv	;wreg free
  2412   001388  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  2413   00138C  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  2414   001390  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  2415   001394  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  2416                           
  2417                           ;color.c: 179:     } else if (max == g){
  2418   001398  EF90  F00A         	goto	l5044
  2419   00139C                     l5036:
  2420   00139C  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  2421   0013A0  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2422   0013A4  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2423   0013A8  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2424   0013AC  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  2425   0013B0  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  2426   0013B4  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  2427   0013B8  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  2428   0013BC  ECB5  F01E         	call	___fleq	;wreg free
  2429   0013C0  A0D8               	btfss	status,0,c
  2430   0013C2  EFE5  F009         	goto	u4441
  2431   0013C6  EFE7  F009         	goto	u4440
  2432   0013CA                     u4441:
  2433   0013CA  EF2F  F00A         	goto	l5040
  2434   0013CE                     u4440:
  2435   0013CE                     
  2436                           ;color.c: 180:         hue = (b - r) / diff;
  2437   0013CE  C0A0  F024         	movff	convert_rgb2hue@r,___flsub@a
  2438   0013D2  C0A1  F025         	movff	convert_rgb2hue@r+1,___flsub@a+1
  2439   0013D6  C0A2  F026         	movff	convert_rgb2hue@r+2,___flsub@a+2
  2440   0013DA  C0A3  F027         	movff	convert_rgb2hue@r+3,___flsub@a+3
  2441   0013DE  C0A8  F020         	movff	convert_rgb2hue@b,___flsub@b
  2442   0013E2  C0A9  F021         	movff	convert_rgb2hue@b+1,___flsub@b+1
  2443   0013E6  C0AA  F022         	movff	convert_rgb2hue@b+2,___flsub@b+2
  2444   0013EA  C0AB  F023         	movff	convert_rgb2hue@b+3,___flsub@b+3
  2445   0013EE  ECCA  F022         	call	___flsub	;wreg free
  2446   0013F2  C020  F029         	movff	?___flsub,___fldiv@b
  2447   0013F6  C021  F02A         	movff	?___flsub+1,___fldiv@b+1
  2448   0013FA  C022  F02B         	movff	?___flsub+2,___fldiv@b+2
  2449   0013FE  C023  F02C         	movff	?___flsub+3,___fldiv@b+3
  2450   001402  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  2451   001406  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  2452   00140A  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  2453   00140E  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  2454   001412  EC50  F00F         	call	___fldiv	;wreg free
  2455   001416  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  2456   00141A  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  2457   00141E  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  2458   001422  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  2459                           
  2460                           ;color.c: 181:         hue = hue + 2;
  2461   001426  C09C  F010         	movff	convert_rgb2hue@hue,___fladd@b
  2462   00142A  C09D  F011         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  2463   00142E  C09E  F012         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  2464   001432  C09F  F013         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  2465   001436  0E00               	movlw	0
  2466   001438  6E14               	movwf	___fladd@a^0,c
  2467   00143A  0E00               	movlw	0
  2468   00143C  6E15               	movwf	(___fladd@a+1)^0,c
  2469   00143E  0E00               	movlw	0
  2470   001440  6E16               	movwf	(___fladd@a+2)^0,c
  2471   001442  0E40               	movlw	64
  2472   001444  6E17               	movwf	(___fladd@a+3)^0,c
  2473   001446  ECDB  F00A         	call	___fladd	;wreg free
  2474   00144A  C010  F09C         	movff	?___fladd,convert_rgb2hue@hue
  2475   00144E  C011  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  2476   001452  C012  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  2477   001456  C013  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  2478                           
  2479                           ;color.c: 182:     } else if (max == b){
  2480   00145A  EF90  F00A         	goto	l5044
  2481   00145E                     l5040:
  2482   00145E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  2483   001462  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2484   001466  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2485   00146A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2486   00146E  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  2487   001472  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  2488   001476  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  2489   00147A  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  2490   00147E  ECB5  F01E         	call	___fleq	;wreg free
  2491   001482  A0D8               	btfss	status,0,c
  2492   001484  EF46  F00A         	goto	u4451
  2493   001488  EF48  F00A         	goto	u4450
  2494   00148C                     u4451:
  2495   00148C  EF90  F00A         	goto	l136
  2496   001490                     u4450:
  2497   001490                     
  2498                           ;color.c: 183:         hue = (r - g) / diff;
  2499   001490  C0A4  F024         	movff	convert_rgb2hue@g,___flsub@a
  2500   001494  C0A5  F025         	movff	convert_rgb2hue@g+1,___flsub@a+1
  2501   001498  C0A6  F026         	movff	convert_rgb2hue@g+2,___flsub@a+2
  2502   00149C  C0A7  F027         	movff	convert_rgb2hue@g+3,___flsub@a+3
  2503   0014A0  C0A0  F020         	movff	convert_rgb2hue@r,___flsub@b
  2504   0014A4  C0A1  F021         	movff	convert_rgb2hue@r+1,___flsub@b+1
  2505   0014A8  C0A2  F022         	movff	convert_rgb2hue@r+2,___flsub@b+2
  2506   0014AC  C0A3  F023         	movff	convert_rgb2hue@r+3,___flsub@b+3
  2507   0014B0  ECCA  F022         	call	___flsub	;wreg free
  2508   0014B4  C020  F029         	movff	?___flsub,___fldiv@b
  2509   0014B8  C021  F02A         	movff	?___flsub+1,___fldiv@b+1
  2510   0014BC  C022  F02B         	movff	?___flsub+2,___fldiv@b+2
  2511   0014C0  C023  F02C         	movff	?___flsub+3,___fldiv@b+3
  2512   0014C4  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  2513   0014C8  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  2514   0014CC  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  2515   0014D0  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  2516   0014D4  EC50  F00F         	call	___fldiv	;wreg free
  2517   0014D8  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  2518   0014DC  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  2519   0014E0  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  2520   0014E4  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  2521                           
  2522                           ;color.c: 184:         hue = hue + 4;
  2523   0014E8  C09C  F010         	movff	convert_rgb2hue@hue,___fladd@b
  2524   0014EC  C09D  F011         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  2525   0014F0  C09E  F012         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  2526   0014F4  C09F  F013         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  2527   0014F8  0E00               	movlw	0
  2528   0014FA  6E14               	movwf	___fladd@a^0,c
  2529   0014FC  0E00               	movlw	0
  2530   0014FE  6E15               	movwf	(___fladd@a+1)^0,c
  2531   001500  0E80               	movlw	128
  2532   001502  6E16               	movwf	(___fladd@a+2)^0,c
  2533   001504  0E40               	movlw	64
  2534   001506  6E17               	movwf	(___fladd@a+3)^0,c
  2535   001508  ECDB  F00A         	call	___fladd	;wreg free
  2536   00150C  C010  F09C         	movff	?___fladd,convert_rgb2hue@hue
  2537   001510  C011  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  2538   001514  C012  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  2539   001518  C013  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  2540   00151C  EF90  F00A         	goto	l5044
  2541   001520                     l136:
  2542   001520                     l5044:
  2543                           
  2544                           ;color.c: 187:     hue = hue * 60;
  2545   001520  C09C  F010         	movff	convert_rgb2hue@hue,___flmul@b
  2546   001524  C09D  F011         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  2547   001528  C09E  F012         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  2548   00152C  C09F  F013         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  2549   001530  0E00               	movlw	0
  2550   001532  6E14               	movwf	___flmul@a^0,c
  2551   001534  0E00               	movlw	0
  2552   001536  6E15               	movwf	(___flmul@a+1)^0,c
  2553   001538  0E70               	movlw	112
  2554   00153A  6E16               	movwf	(___flmul@a+2)^0,c
  2555   00153C  0E42               	movlw	66
  2556   00153E  6E17               	movwf	(___flmul@a+3)^0,c
  2557   001540  EC3B  F00D         	call	___flmul	;wreg free
  2558   001544  C010  F09C         	movff	?___flmul,convert_rgb2hue@hue
  2559   001548  C011  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  2560   00154C  C012  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  2561   001550  C013  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  2562   001554                     
  2563                           ;color.c: 188:     if (hue < 0) {
  2564   001554  0100               	movlb	0	; () banked
  2565   001556  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  2566   001558  EFB2  F00A         	goto	u4460
  2567   00155C  EFB0  F00A         	goto	u4461
  2568   001560                     u4461:
  2569   001560  EFCC  F00A         	goto	l140
  2570   001564                     u4460:
  2571   001564                     
  2572                           ; BSR set to: 0
  2573                           ;color.c: 189:         hue = hue + 360;
  2574   001564  C09C  F010         	movff	convert_rgb2hue@hue,___fladd@b
  2575   001568  C09D  F011         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  2576   00156C  C09E  F012         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  2577   001570  C09F  F013         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  2578   001574  0E00               	movlw	0
  2579   001576  6E14               	movwf	___fladd@a^0,c
  2580   001578  0E00               	movlw	0
  2581   00157A  6E15               	movwf	(___fladd@a+1)^0,c
  2582   00157C  0EB4               	movlw	180
  2583   00157E  6E16               	movwf	(___fladd@a+2)^0,c
  2584   001580  0E43               	movlw	67
  2585   001582  6E17               	movwf	(___fladd@a+3)^0,c
  2586   001584  ECDB  F00A         	call	___fladd	;wreg free
  2587   001588  C010  F09C         	movff	?___fladd,convert_rgb2hue@hue
  2588   00158C  C011  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  2589   001590  C012  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  2590   001594  C013  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  2591   001598                     l140:
  2592                           
  2593                           ;color.c: 192:     return (unsigned int)hue;
  2594   001598  C09C  F042         	movff	convert_rgb2hue@hue,___fltol@f1
  2595   00159C  C09D  F043         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  2596   0015A0  C09E  F044         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  2597   0015A4  C09F  F045         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  2598   0015A8  ECE8  F01A         	call	___fltol	;wreg free
  2599   0015AC  C042  F04C         	movff	?___fltol,?_convert_rgb2hue
  2600   0015B0  C043  F04D         	movff	?___fltol+1,?_convert_rgb2hue+1
  2601   0015B4  0012               	return		;funcret
  2602   0015B6                     __end_of_convert_rgb2hue:
  2603                           	callstack 0
  2604                           
  2605 ;; *************** function ___flge *****************
  2606 ;; Defined at:
  2607 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;  ff1             4    1[COMRAM] unsigned int 
  2610 ;;  ff2             4    5[COMRAM] unsigned int 
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;		None               void
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, status,0
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2622 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2624 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2625 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2626 ;;Total ram usage:       12 bytes
  2627 ;; Hardware stack levels used: 1
  2628 ;; Hardware stack levels required when called: 1
  2629 ;; This function calls:
  2630 ;;		Nothing
  2631 ;; This function is called by:
  2632 ;;		_convert_rgb2hue
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text4
  2637   0036D6                     __ptext4:
  2638                           	callstack 0
  2639   0036D6                     ___flge:
  2640                           	callstack 27
  2641   0036D6  0E00               	movlw	0
  2642   0036D8  1402               	andwf	___flge@ff1^0,w,c
  2643   0036DA  6E0A               	movwf	??___flge^0,c
  2644   0036DC  0E00               	movlw	0
  2645   0036DE  1403               	andwf	(___flge@ff1+1)^0,w,c
  2646   0036E0  6E0B               	movwf	(??___flge+1)^0,c
  2647   0036E2  0E80               	movlw	128
  2648   0036E4  1404               	andwf	(___flge@ff1+2)^0,w,c
  2649   0036E6  6E0C               	movwf	(??___flge+2)^0,c
  2650   0036E8  0E7F               	movlw	127
  2651   0036EA  1405               	andwf	(___flge@ff1+3)^0,w,c
  2652   0036EC  6E0D               	movwf	(??___flge+3)^0,c
  2653   0036EE  500A               	movf	??___flge^0,w,c
  2654   0036F0  100B               	iorwf	(??___flge+1)^0,w,c
  2655   0036F2  100C               	iorwf	(??___flge+2)^0,w,c
  2656   0036F4  100D               	iorwf	(??___flge+3)^0,w,c
  2657   0036F6  A4D8               	btfss	status,2,c
  2658   0036F8  EF80  F01B         	goto	u4311
  2659   0036FC  EF82  F01B         	goto	u4310
  2660   003700                     u4311:
  2661   003700  EF8A  F01B         	goto	l4932
  2662   003704                     u4310:
  2663   003704  0E00               	movlw	0
  2664   003706  6E02               	movwf	___flge@ff1^0,c
  2665   003708  0E00               	movlw	0
  2666   00370A  6E03               	movwf	(___flge@ff1+1)^0,c
  2667   00370C  0E00               	movlw	0
  2668   00370E  6E04               	movwf	(___flge@ff1+2)^0,c
  2669   003710  0E00               	movlw	0
  2670   003712  6E05               	movwf	(___flge@ff1+3)^0,c
  2671   003714                     l4932:
  2672   003714  0E00               	movlw	0
  2673   003716  1406               	andwf	___flge@ff2^0,w,c
  2674   003718  6E0A               	movwf	??___flge^0,c
  2675   00371A  0E00               	movlw	0
  2676   00371C  1407               	andwf	(___flge@ff2+1)^0,w,c
  2677   00371E  6E0B               	movwf	(??___flge+1)^0,c
  2678   003720  0E80               	movlw	128
  2679   003722  1408               	andwf	(___flge@ff2+2)^0,w,c
  2680   003724  6E0C               	movwf	(??___flge+2)^0,c
  2681   003726  0E7F               	movlw	127
  2682   003728  1409               	andwf	(___flge@ff2+3)^0,w,c
  2683   00372A  6E0D               	movwf	(??___flge+3)^0,c
  2684   00372C  500A               	movf	??___flge^0,w,c
  2685   00372E  100B               	iorwf	(??___flge+1)^0,w,c
  2686   003730  100C               	iorwf	(??___flge+2)^0,w,c
  2687   003732  100D               	iorwf	(??___flge+3)^0,w,c
  2688   003734  A4D8               	btfss	status,2,c
  2689   003736  EF9F  F01B         	goto	u4321
  2690   00373A  EFA1  F01B         	goto	u4320
  2691   00373E                     u4321:
  2692   00373E  EFA9  F01B         	goto	l4936
  2693   003742                     u4320:
  2694   003742  0E00               	movlw	0
  2695   003744  6E06               	movwf	___flge@ff2^0,c
  2696   003746  0E00               	movlw	0
  2697   003748  6E07               	movwf	(___flge@ff2+1)^0,c
  2698   00374A  0E00               	movlw	0
  2699   00374C  6E08               	movwf	(___flge@ff2+2)^0,c
  2700   00374E  0E00               	movlw	0
  2701   003750  6E09               	movwf	(___flge@ff2+3)^0,c
  2702   003752                     l4936:
  2703   003752  AE05               	btfss	(___flge@ff1+3)^0,7,c
  2704   003754  EFAE  F01B         	goto	u4331
  2705   003758  EFB0  F01B         	goto	u4330
  2706   00375C                     u4331:
  2707   00375C  EFB9  F01B         	goto	l4940
  2708   003760                     u4330:
  2709   003760  6C02               	negf	___flge@ff1^0,c
  2710   003762  1E03               	comf	(___flge@ff1+1)^0,f,c
  2711   003764  B0D8               	btfsc	status,0,c
  2712   003766  2A03               	incf	(___flge@ff1+1)^0,f,c
  2713   003768  1E04               	comf	(___flge@ff1+2)^0,f,c
  2714   00376A  B0D8               	btfsc	status,0,c
  2715   00376C  2A04               	incf	(___flge@ff1+2)^0,f,c
  2716   00376E  0E80               	movlw	128
  2717   003770  5605               	subfwb	(___flge@ff1+3)^0,f,c
  2718   003772                     l4940:
  2719   003772  AE09               	btfss	(___flge@ff2+3)^0,7,c
  2720   003774  EFBE  F01B         	goto	u4341
  2721   003778  EFC0  F01B         	goto	u4340
  2722   00377C                     u4341:
  2723   00377C  EFC9  F01B         	goto	l1157
  2724   003780                     u4340:
  2725   003780  6C06               	negf	___flge@ff2^0,c
  2726   003782  1E07               	comf	(___flge@ff2+1)^0,f,c
  2727   003784  B0D8               	btfsc	status,0,c
  2728   003786  2A07               	incf	(___flge@ff2+1)^0,f,c
  2729   003788  1E08               	comf	(___flge@ff2+2)^0,f,c
  2730   00378A  B0D8               	btfsc	status,0,c
  2731   00378C  2A08               	incf	(___flge@ff2+2)^0,f,c
  2732   00378E  0E80               	movlw	128
  2733   003790  5609               	subfwb	(___flge@ff2+3)^0,f,c
  2734   003792                     l1157:
  2735   003792  0E00               	movlw	0
  2736   003794  1A02               	xorwf	___flge@ff1^0,f,c
  2737   003796  0E00               	movlw	0
  2738   003798  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  2739   00379A  0E00               	movlw	0
  2740   00379C  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  2741   00379E  0E80               	movlw	128
  2742   0037A0  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  2743   0037A2  0E00               	movlw	0
  2744   0037A4  1A06               	xorwf	___flge@ff2^0,f,c
  2745   0037A6  0E00               	movlw	0
  2746   0037A8  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  2747   0037AA  0E00               	movlw	0
  2748   0037AC  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  2749   0037AE  0E80               	movlw	128
  2750   0037B0  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  2751   0037B2  5006               	movf	___flge@ff2^0,w,c
  2752   0037B4  5C02               	subwf	___flge@ff1^0,w,c
  2753   0037B6  5007               	movf	(___flge@ff2+1)^0,w,c
  2754   0037B8  5803               	subwfb	(___flge@ff1+1)^0,w,c
  2755   0037BA  5008               	movf	(___flge@ff2+2)^0,w,c
  2756   0037BC  5804               	subwfb	(___flge@ff1+2)^0,w,c
  2757   0037BE  5009               	movf	(___flge@ff2+3)^0,w,c
  2758   0037C0  5805               	subwfb	(___flge@ff1+3)^0,w,c
  2759   0037C2  B0D8               	btfsc	status,0,c
  2760   0037C4  EFE6  F01B         	goto	u4351
  2761   0037C8  EFE8  F01B         	goto	u4350
  2762   0037CC                     u4351:
  2763   0037CC  EFEB  F01B         	goto	l4946
  2764   0037D0                     u4350:
  2765   0037D0  90D8               	bcf	status,0,c
  2766   0037D2  EFEC  F01B         	goto	l1162
  2767   0037D6                     l4946:
  2768   0037D6  80D8               	bsf	status,0,c
  2769   0037D8                     l1162:
  2770   0037D8  0012               	return		;funcret
  2771   0037DA                     __end_of___flge:
  2772                           	callstack 0
  2773                           
  2774 ;; *************** function ___fleq *****************
  2775 ;; Defined at:
  2776 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  ff1             4    1[COMRAM] unsigned int 
  2779 ;;  ff2             4    5[COMRAM] unsigned int 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;		None
  2782 ;; Return value:  Size  Location     Type
  2783 ;;		None               void
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, status,0
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2791 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2793 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2794 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2795 ;;Total ram usage:       12 bytes
  2796 ;; Hardware stack levels used: 1
  2797 ;; Hardware stack levels required when called: 1
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_convert_rgb2hue
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text5
  2806   003D6A                     __ptext5:
  2807                           	callstack 0
  2808   003D6A                     ___fleq:
  2809                           	callstack 27
  2810   003D6A  0E00               	movlw	0
  2811   003D6C  1402               	andwf	___fleq@ff1^0,w,c
  2812   003D6E  6E0A               	movwf	??___fleq^0,c
  2813   003D70  0E00               	movlw	0
  2814   003D72  1403               	andwf	(___fleq@ff1+1)^0,w,c
  2815   003D74  6E0B               	movwf	(??___fleq+1)^0,c
  2816   003D76  0E80               	movlw	128
  2817   003D78  1404               	andwf	(___fleq@ff1+2)^0,w,c
  2818   003D7A  6E0C               	movwf	(??___fleq+2)^0,c
  2819   003D7C  0E7F               	movlw	127
  2820   003D7E  1405               	andwf	(___fleq@ff1+3)^0,w,c
  2821   003D80  6E0D               	movwf	(??___fleq+3)^0,c
  2822   003D82  500A               	movf	??___fleq^0,w,c
  2823   003D84  100B               	iorwf	(??___fleq+1)^0,w,c
  2824   003D86  100C               	iorwf	(??___fleq+2)^0,w,c
  2825   003D88  100D               	iorwf	(??___fleq+3)^0,w,c
  2826   003D8A  A4D8               	btfss	status,2,c
  2827   003D8C  EFCA  F01E         	goto	u4281
  2828   003D90  EFCC  F01E         	goto	u4280
  2829   003D94                     u4281:
  2830   003D94  EFD4  F01E         	goto	l4916
  2831   003D98                     u4280:
  2832   003D98  0E00               	movlw	0
  2833   003D9A  6E02               	movwf	___fleq@ff1^0,c
  2834   003D9C  0E00               	movlw	0
  2835   003D9E  6E03               	movwf	(___fleq@ff1+1)^0,c
  2836   003DA0  0E00               	movlw	0
  2837   003DA2  6E04               	movwf	(___fleq@ff1+2)^0,c
  2838   003DA4  0E00               	movlw	0
  2839   003DA6  6E05               	movwf	(___fleq@ff1+3)^0,c
  2840   003DA8                     l4916:
  2841   003DA8  0E00               	movlw	0
  2842   003DAA  1406               	andwf	___fleq@ff2^0,w,c
  2843   003DAC  6E0A               	movwf	??___fleq^0,c
  2844   003DAE  0E00               	movlw	0
  2845   003DB0  1407               	andwf	(___fleq@ff2+1)^0,w,c
  2846   003DB2  6E0B               	movwf	(??___fleq+1)^0,c
  2847   003DB4  0E80               	movlw	128
  2848   003DB6  1408               	andwf	(___fleq@ff2+2)^0,w,c
  2849   003DB8  6E0C               	movwf	(??___fleq+2)^0,c
  2850   003DBA  0E7F               	movlw	127
  2851   003DBC  1409               	andwf	(___fleq@ff2+3)^0,w,c
  2852   003DBE  6E0D               	movwf	(??___fleq+3)^0,c
  2853   003DC0  500A               	movf	??___fleq^0,w,c
  2854   003DC2  100B               	iorwf	(??___fleq+1)^0,w,c
  2855   003DC4  100C               	iorwf	(??___fleq+2)^0,w,c
  2856   003DC6  100D               	iorwf	(??___fleq+3)^0,w,c
  2857   003DC8  A4D8               	btfss	status,2,c
  2858   003DCA  EFE9  F01E         	goto	u4291
  2859   003DCE  EFEB  F01E         	goto	u4290
  2860   003DD2                     u4291:
  2861   003DD2  EFF3  F01E         	goto	l4920
  2862   003DD6                     u4290:
  2863   003DD6  0E00               	movlw	0
  2864   003DD8  6E06               	movwf	___fleq@ff2^0,c
  2865   003DDA  0E00               	movlw	0
  2866   003DDC  6E07               	movwf	(___fleq@ff2+1)^0,c
  2867   003DDE  0E00               	movlw	0
  2868   003DE0  6E08               	movwf	(___fleq@ff2+2)^0,c
  2869   003DE2  0E00               	movlw	0
  2870   003DE4  6E09               	movwf	(___fleq@ff2+3)^0,c
  2871   003DE6                     l4920:
  2872   003DE6  5006               	movf	___fleq@ff2^0,w,c
  2873   003DE8  1802               	xorwf	___fleq@ff1^0,w,c
  2874   003DEA  E10F               	bnz	u4300
  2875   003DEC  5007               	movf	(___fleq@ff2+1)^0,w,c
  2876   003DEE  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  2877   003DF0  E10C               	bnz	u4300
  2878   003DF2  5008               	movf	(___fleq@ff2+2)^0,w,c
  2879   003DF4  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  2880   003DF6  E109               	bnz	u4300
  2881   003DF8  5009               	movf	(___fleq@ff2+3)^0,w,c
  2882   003DFA  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  2883   003DFC  B4D8               	btfsc	status,2,c
  2884   003DFE  EF03  F01F         	goto	u4301
  2885   003E02  EF05  F01F         	goto	u4300
  2886   003E06                     u4301:
  2887   003E06  EF08  F01F         	goto	l4924
  2888   003E0A                     u4300:
  2889   003E0A  90D8               	bcf	status,0,c
  2890   003E0C  EF09  F01F         	goto	l1151
  2891   003E10                     l4924:
  2892   003E10  80D8               	bsf	status,0,c
  2893   003E12                     l1151:
  2894   003E12  0012               	return		;funcret
  2895   003E14                     __end_of___fleq:
  2896                           	callstack 0
  2897                           
  2898 ;; *************** function _looking_for_card *****************
  2899 ;; Defined at:
  2900 ;;		line 103 in file "maze_navigation.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  mL              1    0[BANK0 ] PTR struct DC_motor
  2903 ;;		 -> motorL(9), 
  2904 ;;  mR              1    1[BANK0 ] PTR struct DC_motor
  2905 ;;		 -> motorR(9), 
  2906 ;;  cCurr           1    2[BANK0 ] PTR struct colors
  2907 ;;		 -> colorCurrent(8), 
  2908 ;;  cMax            1    3[BANK0 ] PTR struct colors
  2909 ;;		 -> colorCalibration(8), 
  2910 ;;  path_step       2    4[BANK0 ] unsigned int 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  clear_norm      2   89[COMRAM] unsigned int 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2922 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2923 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2925 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2926 ;;Total ram usage:        8 bytes
  2927 ;; Hardware stack levels used: 1
  2928 ;; Hardware stack levels required when called: 5
  2929 ;; This function calls:
  2930 ;;		_calc_clear_norm
  2931 ;;		_get16bitTMR0val
  2932 ;;		_stop
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text6
  2939   0043B6                     __ptext6:
  2940                           	callstack 0
  2941   0043B6                     _looking_for_card:
  2942                           	callstack 25
  2943   0043B6                     
  2944                           ;maze_navigation.c: 103: void looking_for_card(struct DC_motor *mL, struct DC_motor *mR,
      +                           struct colors *cCurr, struct colors *cMax, unsigned int path_step);maze_navigation.c: 1
      +                          04: {;maze_navigation.c: 105:     unsigned int clear_norm=0;
  2945   0043B6  0E00               	movlw	0
  2946   0043B8  6E5B               	movwf	(looking_for_card@clear_norm+1)^0,c
  2947   0043BA  0E00               	movlw	0
  2948   0043BC  6E5A               	movwf	looking_for_card@clear_norm^0,c
  2949                           
  2950                           ;maze_navigation.c: 106:     while(clear_norm<10){
  2951   0043BE  EFEB  F021         	goto	l5516
  2952   0043C2                     l5514:
  2953                           
  2954                           ;maze_navigation.c: 107:         clear_norm = calc_clear_norm(cCurr, cMax);
  2955   0043C2  C062  F04C         	movff	looking_for_card@cCurr,calc_clear_norm@cCurr
  2956   0043C6  C063  F04D         	movff	looking_for_card@cMax,calc_clear_norm@cMax
  2957   0043CA  EC62  F01C         	call	_calc_clear_norm	;wreg free
  2958   0043CE  C04C  F05A         	movff	?_calc_clear_norm,looking_for_card@clear_norm
  2959   0043D2  C04D  F05B         	movff	?_calc_clear_norm+1,looking_for_card@clear_norm+1
  2960   0043D6                     l5516:
  2961                           
  2962                           ;maze_navigation.c: 106:     while(clear_norm<10){
  2963   0043D6  505B               	movf	(looking_for_card@clear_norm+1)^0,w,c
  2964   0043D8  E109               	bnz	u4940
  2965   0043DA  0E0A               	movlw	10
  2966   0043DC  5C5A               	subwf	looking_for_card@clear_norm^0,w,c
  2967   0043DE  A0D8               	btfss	status,0,c
  2968   0043E0  EFF4  F021         	goto	u4941
  2969   0043E4  EFF6  F021         	goto	u4940
  2970   0043E8                     u4941:
  2971   0043E8  EFE1  F021         	goto	l5514
  2972   0043EC                     u4940:
  2973   0043EC                     
  2974                           ;maze_navigation.c: 110:     T0CON0bits.T0EN=0;
  2975   0043EC  9ED5               	bcf	213,7,c	;volatile
  2976   0043EE                     
  2977                           ;maze_navigation.c: 112:     stop(mL,mR);
  2978   0043EE  C060  F014         	movff	looking_for_card@mL,stop@mL
  2979   0043F2  C061  F015         	movff	looking_for_card@mR,stop@mR
  2980   0043F6  EC3F  F020         	call	_stop	;wreg free
  2981   0043FA                     
  2982                           ;maze_navigation.c: 114:     get16bitTMR0val(path_step);
  2983   0043FA  C064  F01C         	movff	looking_for_card@path_step,get16bitTMR0val@path_step
  2984   0043FE  C065  F01D         	movff	looking_for_card@path_step+1,get16bitTMR0val@path_step+1
  2985   004402  EC5F  F01F         	call	_get16bitTMR0val	;wreg free
  2986   004406  0012               	return		;funcret
  2987   004408                     __end_of_looking_for_card:
  2988                           	callstack 0
  2989                           
  2990 ;; *************** function _calc_clear_norm *****************
  2991 ;; Defined at:
  2992 ;;		line 245 in file "color.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;  cCurr           1   75[COMRAM] PTR struct colors
  2995 ;;		 -> colorCurrent(8), 
  2996 ;;  cMax            1   76[COMRAM] PTR struct colors
  2997 ;;		 -> colorCalibration(8), 
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;  clear_curren    4   83[COMRAM] float 
  3000 ;;  clear_max       4   79[COMRAM] float 
  3001 ;;  clear_norm      2   87[COMRAM] unsigned int 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  2   75[COMRAM] unsigned int 
  3004 ;; Registers used:
  3005 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3011 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3012 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3013 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3014 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3015 ;;Total ram usage:       14 bytes
  3016 ;; Hardware stack levels used: 1
  3017 ;; Hardware stack levels required when called: 4
  3018 ;; This function calls:
  3019 ;;		___fldiv
  3020 ;;		___flmul
  3021 ;;		___fltol
  3022 ;;		___xxtofl
  3023 ;;		_color_read_Clear
  3024 ;; This function is called by:
  3025 ;;		_main
  3026 ;;		_looking_for_card
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text7
  3031   0038C4                     __ptext7:
  3032                           	callstack 0
  3033   0038C4                     _calc_clear_norm:
  3034                           	callstack 25
  3035   0038C4                     
  3036                           ;color.c: 245: unsigned int calc_clear_norm(struct colors *cCurr, struct colors *cMax);c
      +                          olor.c: 246: {;color.c: 247:     unsigned int clear_norm;;color.c: 248:     float clear_
      +                          max;;color.c: 249:     float clear_current;;color.c: 250:     colorCurrent.clear = color
      +                          _read_Clear();
  3037   0038C4  EC54  F022         	call	_color_read_Clear	;wreg free
  3038   0038C8  C006  F0ED         	movff	?_color_read_Clear,_colorCurrent+6
  3039   0038CC  C007  F0EE         	movff	?_color_read_Clear+1,_colorCurrent+7
  3040   0038D0                     
  3041                           ;color.c: 251:     clear_current = cCurr->clear;
  3042   0038D0  504C               	movf	calc_clear_norm@cCurr^0,w,c
  3043   0038D2  6ED9               	movwf	fsr2l,c
  3044   0038D4  6ADA               	clrf	fsr2h,c
  3045   0038D6  0E06               	movlw	6
  3046   0038D8  26D9               	addwf	fsr2l,f,c
  3047   0038DA  CFDE F04E          	movff	postinc2,??_calc_clear_norm
  3048   0038DE  CFDD F04F          	movff	postdec2,??_calc_clear_norm+1
  3049   0038E2  C04E  F002         	movff	??_calc_clear_norm,___xxtofl@val
  3050   0038E6  C04F  F003         	movff	??_calc_clear_norm+1,___xxtofl@val+1
  3051   0038EA  6A04               	clrf	(___xxtofl@val+2)^0,c
  3052   0038EC  6A05               	clrf	(___xxtofl@val+3)^0,c
  3053   0038EE  0E00               	movlw	0
  3054   0038F0  ECB5  F014         	call	___xxtofl
  3055   0038F4  C002  F054         	movff	?___xxtofl,calc_clear_norm@clear_current
  3056   0038F8  C003  F055         	movff	?___xxtofl+1,calc_clear_norm@clear_current+1
  3057   0038FC  C004  F056         	movff	?___xxtofl+2,calc_clear_norm@clear_current+2
  3058   003900  C005  F057         	movff	?___xxtofl+3,calc_clear_norm@clear_current+3
  3059   003904                     
  3060                           ;color.c: 252:     clear_max = cMax->clear;
  3061   003904  504D               	movf	calc_clear_norm@cMax^0,w,c
  3062   003906  6ED9               	movwf	fsr2l,c
  3063   003908  6ADA               	clrf	fsr2h,c
  3064   00390A  0E06               	movlw	6
  3065   00390C  26D9               	addwf	fsr2l,f,c
  3066   00390E  CFDE F04E          	movff	postinc2,??_calc_clear_norm
  3067   003912  CFDD F04F          	movff	postdec2,??_calc_clear_norm+1
  3068   003916  C04E  F002         	movff	??_calc_clear_norm,___xxtofl@val
  3069   00391A  C04F  F003         	movff	??_calc_clear_norm+1,___xxtofl@val+1
  3070   00391E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3071   003920  6A05               	clrf	(___xxtofl@val+3)^0,c
  3072   003922  0E00               	movlw	0
  3073   003924  ECB5  F014         	call	___xxtofl
  3074   003928  C002  F050         	movff	?___xxtofl,calc_clear_norm@clear_max
  3075   00392C  C003  F051         	movff	?___xxtofl+1,calc_clear_norm@clear_max+1
  3076   003930  C004  F052         	movff	?___xxtofl+2,calc_clear_norm@clear_max+2
  3077   003934  C005  F053         	movff	?___xxtofl+3,calc_clear_norm@clear_max+3
  3078   003938                     
  3079                           ;color.c: 253:     clear_norm = (clear_current)*100/clear_max;
  3080   003938  C050  F02D         	movff	calc_clear_norm@clear_max,___fldiv@a
  3081   00393C  C051  F02E         	movff	calc_clear_norm@clear_max+1,___fldiv@a+1
  3082   003940  C052  F02F         	movff	calc_clear_norm@clear_max+2,___fldiv@a+2
  3083   003944  C053  F030         	movff	calc_clear_norm@clear_max+3,___fldiv@a+3
  3084   003948  0E00               	movlw	0
  3085   00394A  6E14               	movwf	___flmul@a^0,c
  3086   00394C  0E00               	movlw	0
  3087   00394E  6E15               	movwf	(___flmul@a+1)^0,c
  3088   003950  0EC8               	movlw	200
  3089   003952  6E16               	movwf	(___flmul@a+2)^0,c
  3090   003954  0E42               	movlw	66
  3091   003956  6E17               	movwf	(___flmul@a+3)^0,c
  3092   003958  C054  F010         	movff	calc_clear_norm@clear_current,___flmul@b
  3093   00395C  C055  F011         	movff	calc_clear_norm@clear_current+1,___flmul@b+1
  3094   003960  C056  F012         	movff	calc_clear_norm@clear_current+2,___flmul@b+2
  3095   003964  C057  F013         	movff	calc_clear_norm@clear_current+3,___flmul@b+3
  3096   003968  EC3B  F00D         	call	___flmul	;wreg free
  3097   00396C  C010  F029         	movff	?___flmul,___fldiv@b
  3098   003970  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  3099   003974  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  3100   003978  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  3101   00397C  EC50  F00F         	call	___fldiv	;wreg free
  3102   003980  C029  F042         	movff	?___fldiv,___fltol@f1
  3103   003984  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  3104   003988  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  3105   00398C  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  3106   003990  ECE8  F01A         	call	___fltol	;wreg free
  3107   003994  C042  F058         	movff	?___fltol,calc_clear_norm@clear_norm
  3108   003998  C043  F059         	movff	?___fltol+1,calc_clear_norm@clear_norm+1
  3109   00399C                     
  3110                           ;color.c: 255:     return clear_norm;
  3111   00399C  C058  F04C         	movff	calc_clear_norm@clear_norm,?_calc_clear_norm
  3112   0039A0  C059  F04D         	movff	calc_clear_norm@clear_norm+1,?_calc_clear_norm+1
  3113   0039A4  0012               	return		;funcret
  3114   0039A6                     __end_of_calc_clear_norm:
  3115                           	callstack 0
  3116                           
  3117 ;; *************** function ___fldiv *****************
  3118 ;; Defined at:
  3119 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;  b               4   40[COMRAM] unsigned int 
  3122 ;;  a               4   44[COMRAM] unsigned int 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  grs             4   59[COMRAM] unsigned long 
  3125 ;;  rem             4   52[COMRAM] unsigned long 
  3126 ;;  new_exp         2   57[COMRAM] short 
  3127 ;;  aexp            1   64[COMRAM] unsigned char 
  3128 ;;  bexp            1   63[COMRAM] unsigned char 
  3129 ;;  sign            1   56[COMRAM] unsigned char 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  4   40[COMRAM] unsigned char 
  3132 ;; Registers used:
  3133 ;;		wreg, status,2, status,0
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3139 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3140 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3141 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3142 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3143 ;;Total ram usage:       25 bytes
  3144 ;; Hardware stack levels used: 1
  3145 ;; Hardware stack levels required when called: 1
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_convert_rgb2hue
  3150 ;;		_calc_clear_norm
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text8
  3155   001EA0                     __ptext8:
  3156                           	callstack 0
  3157   001EA0                     ___fldiv:
  3158                           	callstack 27
  3159   001EA0  502C               	movf	(___fldiv@b+3)^0,w,c
  3160   001EA2  0B80               	andlw	128
  3161   001EA4  6E39               	movwf	___fldiv@sign^0,c
  3162   001EA6  502C               	movf	(___fldiv@b+3)^0,w,c
  3163   001EA8  242C               	addwf	(___fldiv@b+3)^0,w,c
  3164   001EAA  6E40               	movwf	___fldiv@bexp^0,c
  3165   001EAC  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  3166   001EAE  EF5B  F00F         	goto	u4051
  3167   001EB2  EF5D  F00F         	goto	u4050
  3168   001EB6                     u4051:
  3169   001EB6  EF5E  F00F         	goto	l4774
  3170   001EBA                     u4050:
  3171   001EBA  8040               	bsf	___fldiv@bexp^0,0,c
  3172   001EBC                     l4774:
  3173   001EBC  5040               	movf	___fldiv@bexp^0,w,c
  3174   001EBE  B4D8               	btfsc	status,2,c
  3175   001EC0  EF64  F00F         	goto	u4061
  3176   001EC4  EF66  F00F         	goto	u4060
  3177   001EC8                     u4061:
  3178   001EC8  EF7B  F00F         	goto	l4784
  3179   001ECC                     u4060:
  3180   001ECC  2840               	incf	___fldiv@bexp^0,w,c
  3181   001ECE  A4D8               	btfss	status,2,c
  3182   001ED0  EF6C  F00F         	goto	u4071
  3183   001ED4  EF6E  F00F         	goto	u4070
  3184   001ED8                     u4071:
  3185   001ED8  EF76  F00F         	goto	l4780
  3186   001EDC                     u4070:
  3187   001EDC  0E00               	movlw	0
  3188   001EDE  6E29               	movwf	___fldiv@b^0,c
  3189   001EE0  0E00               	movlw	0
  3190   001EE2  6E2A               	movwf	(___fldiv@b+1)^0,c
  3191   001EE4  0E00               	movlw	0
  3192   001EE6  6E2B               	movwf	(___fldiv@b+2)^0,c
  3193   001EE8  0E00               	movlw	0
  3194   001EEA  6E2C               	movwf	(___fldiv@b+3)^0,c
  3195   001EEC                     l4780:
  3196   001EEC  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  3197   001EEE  0E00               	movlw	0
  3198   001EF0  6E2C               	movwf	(___fldiv@b+3)^0,c
  3199   001EF2  EF83  F00F         	goto	l4786
  3200   001EF6                     l4784:
  3201   001EF6  0E00               	movlw	0
  3202   001EF8  6E29               	movwf	___fldiv@b^0,c
  3203   001EFA  0E00               	movlw	0
  3204   001EFC  6E2A               	movwf	(___fldiv@b+1)^0,c
  3205   001EFE  0E00               	movlw	0
  3206   001F00  6E2B               	movwf	(___fldiv@b+2)^0,c
  3207   001F02  0E00               	movlw	0
  3208   001F04  6E2C               	movwf	(___fldiv@b+3)^0,c
  3209   001F06                     l4786:
  3210   001F06  5030               	movf	(___fldiv@a+3)^0,w,c
  3211   001F08  0B80               	andlw	128
  3212   001F0A  1A39               	xorwf	___fldiv@sign^0,f,c
  3213   001F0C  5030               	movf	(___fldiv@a+3)^0,w,c
  3214   001F0E  2430               	addwf	(___fldiv@a+3)^0,w,c
  3215   001F10  6E41               	movwf	___fldiv@aexp^0,c
  3216   001F12  AE2F               	btfss	(___fldiv@a+2)^0,7,c
  3217   001F14  EF8E  F00F         	goto	u4081
  3218   001F18  EF90  F00F         	goto	u4080
  3219   001F1C                     u4081:
  3220   001F1C  EF91  F00F         	goto	l4794
  3221   001F20                     u4080:
  3222   001F20  8041               	bsf	___fldiv@aexp^0,0,c
  3223   001F22                     l4794:
  3224   001F22  5041               	movf	___fldiv@aexp^0,w,c
  3225   001F24  B4D8               	btfsc	status,2,c
  3226   001F26  EF97  F00F         	goto	u4091
  3227   001F2A  EF99  F00F         	goto	u4090
  3228   001F2E                     u4091:
  3229   001F2E  EFAE  F00F         	goto	l4804
  3230   001F32                     u4090:
  3231   001F32  2841               	incf	___fldiv@aexp^0,w,c
  3232   001F34  A4D8               	btfss	status,2,c
  3233   001F36  EF9F  F00F         	goto	u4101
  3234   001F3A  EFA1  F00F         	goto	u4100
  3235   001F3E                     u4101:
  3236   001F3E  EFA9  F00F         	goto	l4800
  3237   001F42                     u4100:
  3238   001F42  0E00               	movlw	0
  3239   001F44  6E2D               	movwf	___fldiv@a^0,c
  3240   001F46  0E00               	movlw	0
  3241   001F48  6E2E               	movwf	(___fldiv@a+1)^0,c
  3242   001F4A  0E00               	movlw	0
  3243   001F4C  6E2F               	movwf	(___fldiv@a+2)^0,c
  3244   001F4E  0E00               	movlw	0
  3245   001F50  6E30               	movwf	(___fldiv@a+3)^0,c
  3246   001F52                     l4800:
  3247   001F52  8E2F               	bsf	(___fldiv@a+2)^0,7,c
  3248   001F54  0E00               	movlw	0
  3249   001F56  6E30               	movwf	(___fldiv@a+3)^0,c
  3250   001F58  EFB6  F00F         	goto	l4806
  3251   001F5C                     l4804:
  3252   001F5C  0E00               	movlw	0
  3253   001F5E  6E2D               	movwf	___fldiv@a^0,c
  3254   001F60  0E00               	movlw	0
  3255   001F62  6E2E               	movwf	(___fldiv@a+1)^0,c
  3256   001F64  0E00               	movlw	0
  3257   001F66  6E2F               	movwf	(___fldiv@a+2)^0,c
  3258   001F68  0E00               	movlw	0
  3259   001F6A  6E30               	movwf	(___fldiv@a+3)^0,c
  3260   001F6C                     l4806:
  3261   001F6C  502D               	movf	___fldiv@a^0,w,c
  3262   001F6E  102E               	iorwf	(___fldiv@a+1)^0,w,c
  3263   001F70  102F               	iorwf	(___fldiv@a+2)^0,w,c
  3264   001F72  1030               	iorwf	(___fldiv@a+3)^0,w,c
  3265   001F74  A4D8               	btfss	status,2,c
  3266   001F76  EFBF  F00F         	goto	u4111
  3267   001F7A  EFC1  F00F         	goto	u4110
  3268   001F7E                     u4111:
  3269   001F7E  EFD9  F00F         	goto	l4818
  3270   001F82                     u4110:
  3271   001F82  0E00               	movlw	0
  3272   001F84  6E29               	movwf	___fldiv@b^0,c
  3273   001F86  0E00               	movlw	0
  3274   001F88  6E2A               	movwf	(___fldiv@b+1)^0,c
  3275   001F8A  0E00               	movlw	0
  3276   001F8C  6E2B               	movwf	(___fldiv@b+2)^0,c
  3277   001F8E  0E00               	movlw	0
  3278   001F90  6E2C               	movwf	(___fldiv@b+3)^0,c
  3279   001F92  0E80               	movlw	128
  3280   001F94  122B               	iorwf	(___fldiv@b+2)^0,f,c
  3281   001F96  0E7F               	movlw	127
  3282   001F98  122C               	iorwf	(___fldiv@b+3)^0,f,c
  3283   001F9A                     l4812:
  3284   001F9A  5039               	movf	___fldiv@sign^0,w,c
  3285   001F9C  122C               	iorwf	(___fldiv@b+3)^0,f,c
  3286   001F9E  C029  F029         	movff	___fldiv@b,?___fldiv
  3287   001FA2  C02A  F02A         	movff	___fldiv@b+1,?___fldiv+1
  3288   001FA6  C02B  F02B         	movff	___fldiv@b+2,?___fldiv+2
  3289   001FAA  C02C  F02C         	movff	___fldiv@b+3,?___fldiv+3
  3290   001FAE  EF1C  F011         	goto	l1474
  3291   001FB2                     l4818:
  3292   001FB2  5040               	movf	___fldiv@bexp^0,w,c
  3293   001FB4  A4D8               	btfss	status,2,c
  3294   001FB6  EFDF  F00F         	goto	u4121
  3295   001FBA  EFE1  F00F         	goto	u4120
  3296   001FBE                     u4121:
  3297   001FBE  EFEB  F00F         	goto	l4826
  3298   001FC2                     u4120:
  3299   001FC2  0E00               	movlw	0
  3300   001FC4  6E29               	movwf	?___fldiv^0,c
  3301   001FC6  0E00               	movlw	0
  3302   001FC8  6E2A               	movwf	(?___fldiv+1)^0,c
  3303   001FCA  0E00               	movlw	0
  3304   001FCC  6E2B               	movwf	(?___fldiv+2)^0,c
  3305   001FCE  0E00               	movlw	0
  3306   001FD0  6E2C               	movwf	(?___fldiv+3)^0,c
  3307   001FD2  EF1C  F011         	goto	l1474
  3308   001FD6                     l4826:
  3309   001FD6  5041               	movf	___fldiv@aexp^0,w,c
  3310   001FD8  C040  F031         	movff	___fldiv@bexp,??___fldiv
  3311   001FDC  6A32               	clrf	(??___fldiv+1)^0,c
  3312   001FDE  5E31               	subwf	??___fldiv^0,f,c
  3313   001FE0  0E00               	movlw	0
  3314   001FE2  5A32               	subwfb	(??___fldiv+1)^0,f,c
  3315   001FE4  0E7F               	movlw	127
  3316   001FE6  2431               	addwf	??___fldiv^0,w,c
  3317   001FE8  6E3A               	movwf	___fldiv@new_exp^0,c
  3318   001FEA  0E00               	movlw	0
  3319   001FEC  2032               	addwfc	(??___fldiv+1)^0,w,c
  3320   001FEE  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  3321   001FF0  C029  F035         	movff	___fldiv@b,___fldiv@rem
  3322   001FF4  C02A  F036         	movff	___fldiv@b+1,___fldiv@rem+1
  3323   001FF8  C02B  F037         	movff	___fldiv@b+2,___fldiv@rem+2
  3324   001FFC  C02C  F038         	movff	___fldiv@b+3,___fldiv@rem+3
  3325   002000  0E00               	movlw	0
  3326   002002  6E29               	movwf	___fldiv@b^0,c
  3327   002004  0E00               	movlw	0
  3328   002006  6E2A               	movwf	(___fldiv@b+1)^0,c
  3329   002008  0E00               	movlw	0
  3330   00200A  6E2B               	movwf	(___fldiv@b+2)^0,c
  3331   00200C  0E00               	movlw	0
  3332   00200E  6E2C               	movwf	(___fldiv@b+3)^0,c
  3333   002010  0E00               	movlw	0
  3334   002012  6E3C               	movwf	___fldiv@grs^0,c
  3335   002014  0E00               	movlw	0
  3336   002016  6E3D               	movwf	(___fldiv@grs+1)^0,c
  3337   002018  0E00               	movlw	0
  3338   00201A  6E3E               	movwf	(___fldiv@grs+2)^0,c
  3339   00201C  0E00               	movlw	0
  3340   00201E  6E3F               	movwf	(___fldiv@grs+3)^0,c
  3341   002020  0E00               	movlw	0
  3342   002022  6E41               	movwf	___fldiv@aexp^0,c
  3343   002024  EF4C  F010         	goto	l1476
  3344   002028                     l4836:
  3345   002028  5041               	movf	___fldiv@aexp^0,w,c
  3346   00202A  B4D8               	btfsc	status,2,c
  3347   00202C  EF1A  F010         	goto	u4131
  3348   002030  EF1C  F010         	goto	u4130
  3349   002034                     u4131:
  3350   002034  EF33  F010         	goto	l4844
  3351   002038                     u4130:
  3352   002038  90D8               	bcf	status,0,c
  3353   00203A  3635               	rlcf	___fldiv@rem^0,f,c
  3354   00203C  3636               	rlcf	(___fldiv@rem+1)^0,f,c
  3355   00203E  3637               	rlcf	(___fldiv@rem+2)^0,f,c
  3356   002040  3638               	rlcf	(___fldiv@rem+3)^0,f,c
  3357   002042  90D8               	bcf	status,0,c
  3358   002044  3629               	rlcf	___fldiv@b^0,f,c
  3359   002046  362A               	rlcf	(___fldiv@b+1)^0,f,c
  3360   002048  362B               	rlcf	(___fldiv@b+2)^0,f,c
  3361   00204A  362C               	rlcf	(___fldiv@b+3)^0,f,c
  3362   00204C  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  3363   00204E  EF2B  F010         	goto	u4141
  3364   002052  EF2D  F010         	goto	u4140
  3365   002056                     u4141:
  3366   002056  EF2E  F010         	goto	l1479
  3367   00205A                     u4140:
  3368   00205A  8029               	bsf	___fldiv@b^0,0,c
  3369   00205C                     l1479:
  3370   00205C  90D8               	bcf	status,0,c
  3371   00205E  363C               	rlcf	___fldiv@grs^0,f,c
  3372   002060  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  3373   002062  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  3374   002064  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  3375   002066                     l4844:
  3376   002066  502D               	movf	___fldiv@a^0,w,c
  3377   002068  5C35               	subwf	___fldiv@rem^0,w,c
  3378   00206A  502E               	movf	(___fldiv@a+1)^0,w,c
  3379   00206C  5836               	subwfb	(___fldiv@rem+1)^0,w,c
  3380   00206E  502F               	movf	(___fldiv@a+2)^0,w,c
  3381   002070  5837               	subwfb	(___fldiv@rem+2)^0,w,c
  3382   002072  5030               	movf	(___fldiv@a+3)^0,w,c
  3383   002074  5838               	subwfb	(___fldiv@rem+3)^0,w,c
  3384   002076  A0D8               	btfss	status,0,c
  3385   002078  EF40  F010         	goto	u4151
  3386   00207C  EF42  F010         	goto	u4150
  3387   002080                     u4151:
  3388   002080  EF4B  F010         	goto	l4850
  3389   002084                     u4150:
  3390   002084  8C3F               	bsf	(___fldiv@grs+3)^0,6,c
  3391   002086  502D               	movf	___fldiv@a^0,w,c
  3392   002088  5E35               	subwf	___fldiv@rem^0,f,c
  3393   00208A  502E               	movf	(___fldiv@a+1)^0,w,c
  3394   00208C  5A36               	subwfb	(___fldiv@rem+1)^0,f,c
  3395   00208E  502F               	movf	(___fldiv@a+2)^0,w,c
  3396   002090  5A37               	subwfb	(___fldiv@rem+2)^0,f,c
  3397   002092  5030               	movf	(___fldiv@a+3)^0,w,c
  3398   002094  5A38               	subwfb	(___fldiv@rem+3)^0,f,c
  3399   002096                     l4850:
  3400   002096  2A41               	incf	___fldiv@aexp^0,f,c
  3401   002098                     l1476:
  3402   002098  0E19               	movlw	25
  3403   00209A  6441               	cpfsgt	___fldiv@aexp^0,c
  3404   00209C  EF52  F010         	goto	u4161
  3405   0020A0  EF54  F010         	goto	u4160
  3406   0020A4                     u4161:
  3407   0020A4  EF14  F010         	goto	l4836
  3408   0020A8                     u4160:
  3409   0020A8  5035               	movf	___fldiv@rem^0,w,c
  3410   0020AA  1036               	iorwf	(___fldiv@rem+1)^0,w,c
  3411   0020AC  1037               	iorwf	(___fldiv@rem+2)^0,w,c
  3412   0020AE  1038               	iorwf	(___fldiv@rem+3)^0,w,c
  3413   0020B0  B4D8               	btfsc	status,2,c
  3414   0020B2  EF5D  F010         	goto	u4171
  3415   0020B6  EF5F  F010         	goto	u4170
  3416   0020BA                     u4171:
  3417   0020BA  EF77  F010         	goto	l4862
  3418   0020BE                     u4170:
  3419   0020BE  803C               	bsf	___fldiv@grs^0,0,c
  3420   0020C0  EF77  F010         	goto	l4862
  3421   0020C4                     l4856:
  3422   0020C4  90D8               	bcf	status,0,c
  3423   0020C6  3629               	rlcf	___fldiv@b^0,f,c
  3424   0020C8  362A               	rlcf	(___fldiv@b+1)^0,f,c
  3425   0020CA  362B               	rlcf	(___fldiv@b+2)^0,f,c
  3426   0020CC  362C               	rlcf	(___fldiv@b+3)^0,f,c
  3427   0020CE  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  3428   0020D0  EF6C  F010         	goto	u4181
  3429   0020D4  EF6E  F010         	goto	u4180
  3430   0020D8                     u4181:
  3431   0020D8  EF6F  F010         	goto	l1485
  3432   0020DC                     u4180:
  3433   0020DC  8029               	bsf	___fldiv@b^0,0,c
  3434   0020DE                     l1485:
  3435   0020DE  90D8               	bcf	status,0,c
  3436   0020E0  363C               	rlcf	___fldiv@grs^0,f,c
  3437   0020E2  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  3438   0020E4  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  3439   0020E6  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  3440   0020E8  063A               	decf	___fldiv@new_exp^0,f,c
  3441   0020EA  A0D8               	btfss	status,0,c
  3442   0020EC  063B               	decf	(___fldiv@new_exp+1)^0,f,c
  3443   0020EE                     l4862:
  3444   0020EE  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  3445   0020F0  EF7C  F010         	goto	u4191
  3446   0020F4  EF7E  F010         	goto	u4190
  3447   0020F8                     u4191:
  3448   0020F8  EF62  F010         	goto	l4856
  3449   0020FC                     u4190:
  3450   0020FC  0E00               	movlw	0
  3451   0020FE  6E41               	movwf	___fldiv@aexp^0,c
  3452   002100  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  3453   002102  EF85  F010         	goto	u4201
  3454   002106  EF87  F010         	goto	u4200
  3455   00210A                     u4201:
  3456   00210A  EFAB  F010         	goto	l1487
  3457   00210E                     u4200:
  3458   00210E  0EFF               	movlw	255
  3459   002110  143C               	andwf	___fldiv@grs^0,w,c
  3460   002112  6E31               	movwf	??___fldiv^0,c
  3461   002114  0EFF               	movlw	255
  3462   002116  143D               	andwf	(___fldiv@grs+1)^0,w,c
  3463   002118  6E32               	movwf	(??___fldiv+1)^0,c
  3464   00211A  0EFF               	movlw	255
  3465   00211C  143E               	andwf	(___fldiv@grs+2)^0,w,c
  3466   00211E  6E33               	movwf	(??___fldiv+2)^0,c
  3467   002120  0E7F               	movlw	127
  3468   002122  143F               	andwf	(___fldiv@grs+3)^0,w,c
  3469   002124  6E34               	movwf	(??___fldiv+3)^0,c
  3470   002126  5031               	movf	??___fldiv^0,w,c
  3471   002128  1032               	iorwf	(??___fldiv+1)^0,w,c
  3472   00212A  1033               	iorwf	(??___fldiv+2)^0,w,c
  3473   00212C  1034               	iorwf	(??___fldiv+3)^0,w,c
  3474   00212E  B4D8               	btfsc	status,2,c
  3475   002130  EF9C  F010         	goto	u4211
  3476   002134  EF9E  F010         	goto	u4210
  3477   002138                     u4211:
  3478   002138  EFA2  F010         	goto	l1488
  3479   00213C                     u4210:
  3480   00213C                     l4870:
  3481   00213C  0E01               	movlw	1
  3482   00213E  6E41               	movwf	___fldiv@aexp^0,c
  3483   002140  EFAB  F010         	goto	l1487
  3484   002144                     l1488:
  3485   002144  A029               	btfss	___fldiv@b^0,0,c
  3486   002146  EFA7  F010         	goto	u4221
  3487   00214A  EFA9  F010         	goto	u4220
  3488   00214E                     u4221:
  3489   00214E  EFAB  F010         	goto	l1487
  3490   002152                     u4220:
  3491   002152  EF9E  F010         	goto	l4870
  3492   002156                     l1487:
  3493   002156  5041               	movf	___fldiv@aexp^0,w,c
  3494   002158  B4D8               	btfsc	status,2,c
  3495   00215A  EFB1  F010         	goto	u4231
  3496   00215E  EFB3  F010         	goto	u4230
  3497   002162                     u4231:
  3498   002162  EFD7  F010         	goto	l4882
  3499   002166                     u4230:
  3500   002166  0E01               	movlw	1
  3501   002168  2629               	addwf	___fldiv@b^0,f,c
  3502   00216A  0E00               	movlw	0
  3503   00216C  222A               	addwfc	(___fldiv@b+1)^0,f,c
  3504   00216E  222B               	addwfc	(___fldiv@b+2)^0,f,c
  3505   002170  222C               	addwfc	(___fldiv@b+3)^0,f,c
  3506   002172  A02C               	btfss	(___fldiv@b+3)^0,0,c
  3507   002174  EFBE  F010         	goto	u4241
  3508   002178  EFC0  F010         	goto	u4240
  3509   00217C                     u4241:
  3510   00217C  EFD7  F010         	goto	l4882
  3511   002180                     u4240:
  3512   002180  C029  F031         	movff	___fldiv@b,??___fldiv
  3513   002184  C02A  F032         	movff	___fldiv@b+1,??___fldiv+1
  3514   002188  C02B  F033         	movff	___fldiv@b+2,??___fldiv+2
  3515   00218C  C02C  F034         	movff	___fldiv@b+3,??___fldiv+3
  3516   002190  3434               	rlcf	(??___fldiv+3)^0,w,c
  3517   002192  3234               	rrcf	(??___fldiv+3)^0,f,c
  3518   002194  3233               	rrcf	(??___fldiv+2)^0,f,c
  3519   002196  3232               	rrcf	(??___fldiv+1)^0,f,c
  3520   002198  3231               	rrcf	??___fldiv^0,f,c
  3521   00219A  C031  F029         	movff	??___fldiv,___fldiv@b
  3522   00219E  C032  F02A         	movff	??___fldiv+1,___fldiv@b+1
  3523   0021A2  C033  F02B         	movff	??___fldiv+2,___fldiv@b+2
  3524   0021A6  C034  F02C         	movff	??___fldiv+3,___fldiv@b+3
  3525   0021AA  4A3A               	infsnz	___fldiv@new_exp^0,f,c
  3526   0021AC  2A3B               	incf	(___fldiv@new_exp+1)^0,f,c
  3527   0021AE                     l4882:
  3528   0021AE  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  3529   0021B0  EFE2  F010         	goto	u4251
  3530   0021B4  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  3531   0021B6  E108               	bnz	u4250
  3532   0021B8  283A               	incf	___fldiv@new_exp^0,w,c
  3533   0021BA  A0D8               	btfss	status,0,c
  3534   0021BC  EFE2  F010         	goto	u4251
  3535   0021C0  EFE4  F010         	goto	u4250
  3536   0021C4                     u4251:
  3537   0021C4  EFEF  F010         	goto	l4886
  3538   0021C8                     u4250:
  3539   0021C8  0E00               	movlw	0
  3540   0021CA  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  3541   0021CC  683A               	setf	___fldiv@new_exp^0,c
  3542   0021CE  0E00               	movlw	0
  3543   0021D0  6E29               	movwf	___fldiv@b^0,c
  3544   0021D2  0E00               	movlw	0
  3545   0021D4  6E2A               	movwf	(___fldiv@b+1)^0,c
  3546   0021D6  0E00               	movlw	0
  3547   0021D8  6E2B               	movwf	(___fldiv@b+2)^0,c
  3548   0021DA  0E00               	movlw	0
  3549   0021DC  6E2C               	movwf	(___fldiv@b+3)^0,c
  3550   0021DE                     l4886:
  3551   0021DE  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  3552   0021E0  EFFC  F010         	goto	u4260
  3553   0021E4  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  3554   0021E6  E106               	bnz	u4261
  3555   0021E8  043A               	decf	___fldiv@new_exp^0,w,c
  3556   0021EA  B0D8               	btfsc	status,0,c
  3557   0021EC  EFFA  F010         	goto	u4261
  3558   0021F0  EFFC  F010         	goto	u4260
  3559   0021F4                     u4261:
  3560   0021F4  EF0A  F011         	goto	l4890
  3561   0021F8                     u4260:
  3562   0021F8  0E00               	movlw	0
  3563   0021FA  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  3564   0021FC  0E00               	movlw	0
  3565   0021FE  6E3A               	movwf	___fldiv@new_exp^0,c
  3566   002200  0E00               	movlw	0
  3567   002202  6E29               	movwf	___fldiv@b^0,c
  3568   002204  0E00               	movlw	0
  3569   002206  6E2A               	movwf	(___fldiv@b+1)^0,c
  3570   002208  0E00               	movlw	0
  3571   00220A  6E2B               	movwf	(___fldiv@b+2)^0,c
  3572   00220C  0E00               	movlw	0
  3573   00220E  6E2C               	movwf	(___fldiv@b+3)^0,c
  3574   002210  0E00               	movlw	0
  3575   002212  6E39               	movwf	___fldiv@sign^0,c
  3576   002214                     l4890:
  3577   002214  C03A  F040         	movff	___fldiv@new_exp,___fldiv@bexp
  3578   002218  A040               	btfss	___fldiv@bexp^0,0,c
  3579   00221A  EF11  F011         	goto	u4271
  3580   00221E  EF13  F011         	goto	u4270
  3581   002222                     u4271:
  3582   002222  EF16  F011         	goto	l4896
  3583   002226                     u4270:
  3584   002226  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  3585   002228  EF17  F011         	goto	l4898
  3586   00222C                     l4896:
  3587   00222C  9E2B               	bcf	(___fldiv@b+2)^0,7,c
  3588   00222E                     l4898:
  3589   00222E  90D8               	bcf	status,0,c
  3590   002230  3040               	rrcf	___fldiv@bexp^0,w,c
  3591   002232  6E2C               	movwf	(___fldiv@b+3)^0,c
  3592   002234  EFCD  F00F         	goto	l4812
  3593   002238                     l1474:
  3594   002238  0012               	return		;funcret
  3595   00223A                     __end_of___fldiv:
  3596                           	callstack 0
  3597                           
  3598 ;; *************** function _is_white *****************
  3599 ;; Defined at:
  3600 ;;		line 259 in file "color.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  mL              1   50[BANK0 ] PTR struct DC_motor
  3603 ;;		 -> motorL(9), 
  3604 ;;  mR              1   51[BANK0 ] PTR struct DC_motor
  3605 ;;		 -> motorR(9), 
  3606 ;;  path_step       2   52[BANK0 ] unsigned int 
  3607 ;;  factorR         2   54[BANK0 ] unsigned int 
  3608 ;;  factorL         2   56[BANK0 ] unsigned int 
  3609 ;;  hue             2   58[BANK0 ] unsigned int 
  3610 ;;  clear_norm      2   60[BANK0 ] unsigned int 
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  white           2    0        unsigned int 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  2   50[BANK0 ] unsigned int 
  3615 ;; Registers used:
  3616 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3622 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3625 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3626 ;;Total ram usage:       12 bytes
  3627 ;; Hardware stack levels used: 1
  3628 ;; Hardware stack levels required when called: 10
  3629 ;; This function calls:
  3630 ;;		_get16bitTMR0val
  3631 ;;		_returnHome
  3632 ;;		_send2USART
  3633 ;; This function is called by:
  3634 ;;		_main
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text9
  3639   0039A6                     __ptext9:
  3640                           	callstack 0
  3641   0039A6                     _is_white:
  3642                           	callstack 20
  3643   0039A6                     
  3644                           ;color.c: 259: unsigned int is_white(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_step, unsigned int factorR, unsigned int factorL, unsigned int hue, unsigned in
      +                          t clear_norm);color.c: 260: {;color.c: 261:     if (((clear_norm > 85 && !(hue >= 302 &&
      +                           hue <= 346)) && !(hue>14 && hue<=35)) || LATGbits.LATG1 == 1) {
  3645   0039A6  0100               	movlb	0	; () banked
  3646   0039A8  519D               	movf	(is_white@clear_norm+1)& (0+255),w,b
  3647   0039AA  E109               	bnz	u5250
  3648   0039AC  0E56               	movlw	86
  3649   0039AE  5D9C               	subwf	is_white@clear_norm& (0+255),w,b
  3650   0039B0  A0D8               	btfss	status,0,c
  3651   0039B2  EFDD  F01C         	goto	u5251
  3652   0039B6  EFDF  F01C         	goto	u5250
  3653   0039BA                     u5251:
  3654   0039BA  EF0B  F01D         	goto	l169
  3655   0039BE                     u5250:
  3656   0039BE                     
  3657                           ; BSR set to: 0
  3658   0039BE  0E2E               	movlw	46
  3659   0039C0  5D9A               	subwf	is_white@hue& (0+255),w,b
  3660   0039C2  0E01               	movlw	1
  3661   0039C4  599B               	subwfb	(is_white@hue+1)& (0+255),w,b
  3662   0039C6  A0D8               	btfss	status,0,c
  3663   0039C8  EFE8  F01C         	goto	u5261
  3664   0039CC  EFEA  F01C         	goto	u5260
  3665   0039D0                     u5261:
  3666   0039D0  EFF5  F01C         	goto	l5832
  3667   0039D4                     u5260:
  3668   0039D4                     
  3669                           ; BSR set to: 0
  3670   0039D4  0E5B               	movlw	91
  3671   0039D6  5D9A               	subwf	is_white@hue& (0+255),w,b
  3672   0039D8  0E01               	movlw	1
  3673   0039DA  599B               	subwfb	(is_white@hue+1)& (0+255),w,b
  3674   0039DC  A0D8               	btfss	status,0,c
  3675   0039DE  EFF3  F01C         	goto	u5271
  3676   0039E2  EFF5  F01C         	goto	u5270
  3677   0039E6                     u5271:
  3678   0039E6  EF0B  F01D         	goto	l169
  3679   0039EA                     u5270:
  3680   0039EA                     l5832:
  3681                           
  3682                           ; BSR set to: 0
  3683   0039EA  519B               	movf	(is_white@hue+1)& (0+255),w,b
  3684   0039EC  E109               	bnz	u5280
  3685   0039EE  0E0F               	movlw	15
  3686   0039F0  5D9A               	subwf	is_white@hue& (0+255),w,b
  3687   0039F2  A0D8               	btfss	status,0,c
  3688   0039F4  EFFE  F01C         	goto	u5281
  3689   0039F8  EF00  F01D         	goto	u5280
  3690   0039FC                     u5281:
  3691   0039FC  EF12  F01D         	goto	l167
  3692   003A00                     u5280:
  3693   003A00                     
  3694                           ; BSR set to: 0
  3695   003A00  519B               	movf	(is_white@hue+1)& (0+255),w,b
  3696   003A02  E107               	bnz	u5291
  3697   003A04  0E24               	movlw	36
  3698   003A06  5D9A               	subwf	is_white@hue& (0+255),w,b
  3699   003A08  B0D8               	btfsc	status,0,c
  3700   003A0A  EF09  F01D         	goto	u5291
  3701   003A0E  EF0B  F01D         	goto	u5290
  3702   003A12                     u5291:
  3703   003A12  EF12  F01D         	goto	l167
  3704   003A16                     u5290:
  3705   003A16                     l169:
  3706                           
  3707                           ; BSR set to: 0
  3708   003A16  A27F               	btfss	127,1,c	;volatile
  3709   003A18  EF10  F01D         	goto	u5301
  3710   003A1C  EF12  F01D         	goto	u5300
  3711   003A20                     u5301:
  3712   003A20  EF3E  F01D         	goto	l173
  3713   003A24                     u5300:
  3714   003A24                     l167:
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;color.c: 263:         LATGbits.LATG0 = 0;
  3718   003A24  907F               	bcf	127,0,c	;volatile
  3719                           
  3720                           ;color.c: 264:         LATEbits.LATE7 = 0;
  3721   003A26  9E7D               	bcf	125,7,c	;volatile
  3722                           
  3723                           ;color.c: 265:         LATAbits.LATA3 = 0;
  3724   003A28  9679               	bcf	121,3,c	;volatile
  3725                           
  3726                           ;color.c: 267:         if (LATGbits.LATG1 == 1){
  3727   003A2A  A27F               	btfss	127,1,c	;volatile
  3728   003A2C  EF1A  F01D         	goto	u5311
  3729   003A30  EF1C  F01D         	goto	u5310
  3730   003A34                     u5311:
  3731   003A34  EF25  F01D         	goto	l5840
  3732   003A38                     u5310:
  3733   003A38                     
  3734                           ; BSR set to: 0
  3735                           ;color.c: 268:             get16bitTMR0val(path_step);
  3736   003A38  C094  F01C         	movff	is_white@path_step,get16bitTMR0val@path_step
  3737   003A3C  C095  F01D         	movff	is_white@path_step+1,get16bitTMR0val@path_step+1
  3738   003A40  EC5F  F01F         	call	_get16bitTMR0val	;wreg free
  3739   003A44                     
  3740                           ;color.c: 269:             path_step++;
  3741   003A44  0100               	movlb	0	; () banked
  3742   003A46  4B94               	infsnz	is_white@path_step& (0+255),f,b
  3743   003A48  2B95               	incf	(is_white@path_step+1)& (0+255),f,b
  3744   003A4A                     l5840:
  3745   003A4A                     
  3746                           ; BSR set to: 0
  3747                           ;color.c: 272:         send2USART(white);
  3748   003A4A  0E00               	movlw	0
  3749   003A4C  6E46               	movwf	(send2USART@hue+1)^0,c
  3750   003A4E  0E08               	movlw	8
  3751   003A50  6E45               	movwf	send2USART@hue^0,c
  3752   003A52  EC23  F026         	call	_send2USART	;wreg free
  3753   003A56                     
  3754                           ;color.c: 273:         returnHome(&motorL, &motorR, path_step, factorR, factorL);
  3755   003A56  0EDE               	movlw	low _motorL
  3756   003A58  0100               	movlb	0	; () banked
  3757   003A5A  6F60               	movwf	returnHome@mL& (0+255),b
  3758   003A5C  0ED5               	movlw	low _motorR
  3759   003A5E  6F61               	movwf	returnHome@mR& (0+255),b
  3760   003A60  C094  F062         	movff	is_white@path_step,returnHome@path_step
  3761   003A64  C095  F063         	movff	is_white@path_step+1,returnHome@path_step+1
  3762   003A68  C096  F064         	movff	is_white@factorR,returnHome@factorR
  3763   003A6C  C097  F065         	movff	is_white@factorR+1,returnHome@factorR+1
  3764   003A70  C098  F066         	movff	is_white@factorL,returnHome@factorL
  3765   003A74  C099  F067         	movff	is_white@factorL+1,returnHome@factorL+1
  3766   003A78  EC0F  F017         	call	_returnHome	;wreg free
  3767   003A7C                     l173:
  3768   003A7C  0012               	return		;funcret
  3769   003A7E                     __end_of_is_white:
  3770                           	callstack 0
  3771                           
  3772 ;; *************** function _send2USART *****************
  3773 ;; Defined at:
  3774 ;;		line 147 in file "serial.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  hue             2   68[COMRAM] unsigned int 
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3789 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3791 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3792 ;;Total ram usage:       52 bytes
  3793 ;; Hardware stack levels used: 1
  3794 ;; Hardware stack levels required when called: 9
  3795 ;; This function calls:
  3796 ;;		_sendStringSerial4
  3797 ;;		_sprintf
  3798 ;; This function is called by:
  3799 ;;		_is_white
  3800 ;;		_main
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           	psect	text10
  3805   004C46                     __ptext10:
  3806                           	callstack 0
  3807   004C46                     _send2USART:
  3808                           	callstack 21
  3809   004C46                     
  3810                           ;serial.c: 147: void send2USART(unsigned int hue);serial.c: 148: {;serial.c: 149:       
      +                            char hue_char[50];;serial.c: 154:         sprintf(hue_char,"hue=%03d,  ",hue);
  3811   004C46  0E60               	movlw	low send2USART@hue_char
  3812   004C48  6E32               	movwf	sprintf@s^0,c
  3813   004C4A  0E16               	movlw	low STR_2
  3814   004C4C  6E33               	movwf	sprintf@fmt^0,c
  3815   004C4E  C045  F034         	movff	send2USART@hue,?_sprintf+2
  3816   004C52  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  3817   004C56  EC60  F024         	call	_sprintf	;wreg free
  3818   004C5A                     
  3819                           ;serial.c: 159:         sendStringSerial4(hue_char);
  3820   004C5A  0E60               	movlw	low send2USART@hue_char
  3821   004C5C  6E03               	movwf	sendStringSerial4@string^0,c
  3822   004C5E  ECAE  F024         	call	_sendStringSerial4	;wreg free
  3823   004C62  0012               	return		;funcret
  3824   004C64                     __end_of_send2USART:
  3825                           	callstack 0
  3826                           
  3827 ;; *************** function _sprintf *****************
  3828 ;; Defined at:
  3829 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  s               1   49[COMRAM] PTR unsigned char 
  3832 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), 
  3833 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  3834 ;;		 -> STR_2(12), STR_1(21), 
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;  f              12   56[COMRAM] struct _IO_FILE
  3837 ;;  ret             2    0        int 
  3838 ;;  ap              1   55[COMRAM] PTR void [1]
  3839 ;;		 -> ?_sprintf(2), 
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  2   49[COMRAM] int 
  3842 ;; Registers used:
  3843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3849 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3850 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3852 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3853 ;;Total ram usage:       19 bytes
  3854 ;; Hardware stack levels used: 1
  3855 ;; Hardware stack levels required when called: 8
  3856 ;; This function calls:
  3857 ;;		_vfprintf
  3858 ;; This function is called by:
  3859 ;;		_send2USART
  3860 ;;		_ADC2String
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text11
  3865   0048C0                     __ptext11:
  3866                           	callstack 0
  3867   0048C0                     _sprintf:
  3868                           	callstack 21
  3869   0048C0  0E34               	movlw	low (?_sprintf+2)
  3870   0048C2  6E38               	movwf	sprintf@ap^0,c
  3871   0048C4  C032  F039         	movff	sprintf@s,sprintf@f
  3872   0048C8  0E00               	movlw	0
  3873   0048CA  6E3D               	movwf	(sprintf@f+4)^0,c
  3874   0048CC  0E00               	movlw	0
  3875   0048CE  6E3C               	movwf	(sprintf@f+3)^0,c
  3876   0048D0  0E00               	movlw	0
  3877   0048D2  6E44               	movwf	(sprintf@f+11)^0,c
  3878   0048D4  0E00               	movlw	0
  3879   0048D6  6E43               	movwf	(sprintf@f+10)^0,c
  3880   0048D8  0E39               	movlw	low sprintf@f
  3881   0048DA  6E2E               	movwf	vfprintf@fp^0,c
  3882   0048DC  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  3883   0048E0  0E38               	movlw	low sprintf@ap
  3884   0048E2  6E30               	movwf	vfprintf@ap^0,c
  3885   0048E4  EC31  F023         	call	_vfprintf	;wreg free
  3886   0048E8  5032               	movf	sprintf@s^0,w,c
  3887   0048EA  243C               	addwf	(sprintf@f+3)^0,w,c
  3888   0048EC  6ED9               	movwf	fsr2l,c
  3889   0048EE  6ADA               	clrf	fsr2h,c
  3890   0048F0  6ADF               	clrf	indf2,c
  3891   0048F2  0012               	return		;funcret
  3892   0048F4                     __end_of_sprintf:
  3893                           	callstack 0
  3894                           
  3895 ;; *************** function _vfprintf *****************
  3896 ;; Defined at:
  3897 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  3900 ;;		 -> sprintf@f(12), 
  3901 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  3902 ;;		 -> STR_2(12), STR_1(21), 
  3903 ;;  ap              1   47[COMRAM] PTR PTR void 
  3904 ;;		 -> sprintf@ap(1), 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  3907 ;;		 -> STR_2(12), STR_1(21), 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  2   45[COMRAM] int 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3917 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3920 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3921 ;;Total ram usage:        4 bytes
  3922 ;; Hardware stack levels used: 1
  3923 ;; Hardware stack levels required when called: 7
  3924 ;; This function calls:
  3925 ;;		_vfpfcnvrt
  3926 ;; This function is called by:
  3927 ;;		_sprintf
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text12
  3932   004662                     __ptext12:
  3933                           	callstack 0
  3934   004662                     _vfprintf:
  3935                           	callstack 21
  3936   004662                     
  3937                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  3938   004662  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  3939                           
  3940                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3941   004666  EF3D  F023         	goto	l5804
  3942   00466A                     l5802:
  3943                           
  3944                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  3945   00466A  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  3946   00466E  0E31               	movlw	low vfprintf@cfmt
  3947   004670  6E24               	movwf	vfpfcnvrt@fmt^0,c
  3948   004672  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  3949   004676  EC8F  F015         	call	_vfpfcnvrt	;wreg free
  3950   00467A                     l5804:
  3951                           
  3952                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3953   00467A  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  3954   00467E                     	if	1	;There is more than 1 active tblptr byte
  3955   00467E  0E0E               	movlw	high __smallconst
  3956   004680  6EF7               	movwf	tblptrh,c
  3957   004682                     	endif
  3958   004682                     	if	0	;tblptru may be non-zero
  3959   004682                     	endif
  3960   004682                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3961   004682  0E00               	movlw	low (__smallconst shr (0+16))
  3962   004684  6EF8               	movwf	tblptru,c
  3963   004686                     	endif
  3964   004686  0008               	tblrd		*
  3965   004688  50F5               	movf	tablat,w,c
  3966   00468A  0900               	iorlw	0
  3967   00468C  A4D8               	btfss	status,2,c
  3968   00468E  EF4B  F023         	goto	u5241
  3969   004692  EF4D  F023         	goto	u5240
  3970   004696                     u5241:
  3971   004696  EF35  F023         	goto	l5802
  3972   00469A                     u5240:
  3973   00469A                     
  3974                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  3975   00469A  0E00               	movlw	0
  3976   00469C  6E2F               	movwf	(?_vfprintf+1)^0,c
  3977   00469E  0E00               	movlw	0
  3978   0046A0  6E2E               	movwf	?_vfprintf^0,c
  3979   0046A2  0012               	return		;funcret
  3980   0046A4                     __end_of_vfprintf:
  3981                           	callstack 0
  3982                           
  3983 ;; *************** function _vfpfcnvrt *****************
  3984 ;; Defined at:
  3985 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  3988 ;;		 -> sprintf@f(12), 
  3989 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  3990 ;;		 -> vfprintf@cfmt(1), 
  3991 ;;  ap              1   36[COMRAM] PTR PTR void 
  3992 ;;		 -> sprintf@ap(1), 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  convarg         4   39[COMRAM] struct .
  3995 ;;  cp              1   44[COMRAM] PTR unsigned char 
  3996 ;;		 -> STR_2(12), STR_1(21), 
  3997 ;;  done            1   43[COMRAM] _Bool 
  3998 ;;  c               1    0        unsigned char 
  3999 ;; Return value:  Size  Location     Type
  4000 ;;                  1    wreg      void 
  4001 ;; Registers used:
  4002 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4008 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4009 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4010 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4011 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4012 ;;Total ram usage:       11 bytes
  4013 ;; Hardware stack levels used: 1
  4014 ;; Hardware stack levels required when called: 6
  4015 ;; This function calls:
  4016 ;;		_dtoa
  4017 ;;		_fputc
  4018 ;;		_read_prec_or_width
  4019 ;; This function is called by:
  4020 ;;		_vfprintf
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text13
  4025   002B1E                     __ptext13:
  4026                           	callstack 0
  4027   002B1E                     _vfpfcnvrt:
  4028                           	callstack 21
  4029   002B1E                     
  4030                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  4031   002B1E  5024               	movf	vfpfcnvrt@fmt^0,w,c
  4032   002B20  6ED9               	movwf	fsr2l,c
  4033   002B22  6ADA               	clrf	fsr2h,c
  4034   002B24  CFDF FFF6          	movff	indf2,tblptrl
  4035   002B28                     	if	1	;There is more than 1 active tblptr byte
  4036   002B28  0E0E               	movlw	high __smallconst
  4037   002B2A  6EF7               	movwf	tblptrh,c
  4038   002B2C                     	endif
  4039   002B2C                     	if	0	;tblptru may be non-zero
  4040   002B2C                     	endif
  4041   002B2C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4042   002B2C  0E00               	movlw	low (__smallconst shr (0+16))
  4043   002B2E  6EF8               	movwf	tblptru,c
  4044   002B30                     	endif
  4045   002B30  0008               	tblrd		*
  4046   002B32  50F5               	movf	tablat,w,c
  4047   002B34  0A25               	xorlw	37
  4048   002B36  A4D8               	btfss	status,2,c
  4049   002B38  EFA0  F015         	goto	u5191
  4050   002B3C  EFA2  F015         	goto	u5190
  4051   002B40                     u5191:
  4052   002B40  EF3F  F016         	goto	l5790
  4053   002B44                     u5190:
  4054   002B44                     
  4055                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4056   002B44  5024               	movf	vfpfcnvrt@fmt^0,w,c
  4057   002B46  6ED9               	movwf	fsr2l,c
  4058   002B48  6ADA               	clrf	fsr2h,c
  4059   002B4A  2ADF               	incf	indf2,f,c
  4060   002B4C                     
  4061                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4062   002B4C  0E00               	movlw	0
  4063   002B4E  0100               	movlb	0	; () banked
  4064   002B50  6FCD               	movwf	(_width+1)& (0+255),b
  4065   002B52  0E00               	movlw	0
  4066   002B54  6FCC               	movwf	_width& (0+255),b
  4067   002B56  C0CC  F0D0         	movff	_width,_flags
  4068   002B5A                     
  4069                           ; BSR set to: 0
  4070                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4071   002B5A  69CE               	setf	_prec& (0+255),b
  4072   002B5C  69CF               	setf	(_prec+1)& (0+255),b
  4073   002B5E                     
  4074                           ; BSR set to: 0
  4075                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  4076   002B5E  0E00               	movlw	0
  4077   002B60  6E2C               	movwf	vfpfcnvrt@done^0,c
  4078                           
  4079                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4080   002B62  EFDA  F015         	goto	l5764
  4081   002B66                     l5754:
  4082                           
  4083                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  4084   002B66  0100               	movlb	0	; () banked
  4085   002B68  83D0               	bsf	_flags& (0+255),1,b
  4086   002B6A                     
  4087                           ; BSR set to: 0
  4088                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  4089   002B6A  5024               	movf	vfpfcnvrt@fmt^0,w,c
  4090   002B6C  6ED9               	movwf	fsr2l,c
  4091   002B6E  6ADA               	clrf	fsr2h,c
  4092   002B70  2ADF               	incf	indf2,f,c
  4093                           
  4094                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  4095   002B72  EFDA  F015         	goto	l5764
  4096   002B76                     l5758:
  4097                           
  4098                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  4099   002B76  0E01               	movlw	1
  4100   002B78  6E2C               	movwf	vfpfcnvrt@done^0,c
  4101                           
  4102                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  4103   002B7A  EFDA  F015         	goto	l5764
  4104   002B7E                     l5762:
  4105   002B7E  5024               	movf	vfpfcnvrt@fmt^0,w,c
  4106   002B80  6ED9               	movwf	fsr2l,c
  4107   002B82  6ADA               	clrf	fsr2h,c
  4108   002B84  CFDF FFF6          	movff	indf2,tblptrl
  4109   002B88                     	if	1	;There is more than 1 active tblptr byte
  4110   002B88  0E0E               	movlw	high __smallconst
  4111   002B8A  6EF7               	movwf	tblptrh,c
  4112   002B8C                     	endif
  4113   002B8C                     	if	0	;tblptru may be non-zero
  4114   002B8C                     	endif
  4115   002B8C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4116   002B8C  0E00               	movlw	low (__smallconst shr (0+16))
  4117   002B8E  6EF8               	movwf	tblptru,c
  4118   002B90                     	endif
  4119   002B90  0008               	tblrd		*
  4120   002B92  50F5               	movf	tablat,w,c
  4121   002B94  6E26               	movwf	??_vfpfcnvrt^0,c
  4122   002B96  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  4123                           
  4124                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4125                           ; Switch size 1, requested type "simple"
  4126                           ; Number of cases is 1, Range of values is 0 to 0
  4127                           ; switch strategies available:
  4128                           ; Name         Instructions Cycles
  4129                           ; simple_byte            4     3 (average)
  4130                           ;	Chosen strategy is simple_byte
  4131   002B98  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  4132   002B9A  0A00               	xorlw	0	; case 0
  4133   002B9C  B4D8               	btfsc	status,2,c
  4134   002B9E  EFD3  F015         	goto	l5932
  4135   002BA2  EFBB  F015         	goto	l5758
  4136   002BA6                     l5932:
  4137                           
  4138                           ; Switch size 1, requested type "simple"
  4139                           ; Number of cases is 1, Range of values is 48 to 48
  4140                           ; switch strategies available:
  4141                           ; Name         Instructions Cycles
  4142                           ; simple_byte            4     3 (average)
  4143                           ;	Chosen strategy is simple_byte
  4144   002BA6  5026               	movf	??_vfpfcnvrt^0,w,c
  4145   002BA8  0A30               	xorlw	48	; case 48
  4146   002BAA  B4D8               	btfsc	status,2,c
  4147   002BAC  EFB3  F015         	goto	l5754
  4148   002BB0  EFBB  F015         	goto	l5758
  4149   002BB4                     l5764:
  4150                           
  4151                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4152   002BB4  502C               	movf	vfpfcnvrt@done^0,w,c
  4153   002BB6  B4D8               	btfsc	status,2,c
  4154   002BB8  EFE0  F015         	goto	u5201
  4155   002BBC  EFE2  F015         	goto	u5200
  4156   002BC0                     u5201:
  4157   002BC0  EFBF  F015         	goto	l5762
  4158   002BC4                     u5200:
  4159   002BC4                     
  4160                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  4161   002BC4  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  4162   002BC8  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  4163   002BCC  EC5E  F01E         	call	_read_prec_or_width	;wreg free
  4164   002BD0  C008  F0CC         	movff	?_read_prec_or_width,_width
  4165   002BD4  C009  F0CD         	movff	?_read_prec_or_width+1,_width+1
  4166   002BD8                     
  4167                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  4168   002BD8  0100               	movlb	0	; () banked
  4169   002BDA  BFCD               	btfsc	(_width+1)& (0+255),7,b
  4170   002BDC  EFF4  F015         	goto	u5210
  4171   002BE0  EFF2  F015         	goto	u5211
  4172   002BE4                     u5211:
  4173   002BE4  EFF9  F015         	goto	l5772
  4174   002BE8                     u5210:
  4175   002BE8                     
  4176                           ; BSR set to: 0
  4177                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  4178   002BE8  81D0               	bsf	_flags& (0+255),0,b
  4179                           
  4180                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  4181   002BEA  6DCC               	negf	_width& (0+255),b
  4182   002BEC  1FCD               	comf	(_width+1)& (0+255),f,b
  4183   002BEE  B0D8               	btfsc	status,0,c
  4184   002BF0  2BCD               	incf	(_width+1)& (0+255),f,b
  4185   002BF2                     l5772:
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  4189   002BF2  5024               	movf	vfpfcnvrt@fmt^0,w,c
  4190   002BF4  6ED9               	movwf	fsr2l,c
  4191   002BF6  6ADA               	clrf	fsr2h,c
  4192   002BF8  50DF               	movf	indf2,w,c
  4193   002BFA  6E2D               	movwf	vfpfcnvrt@cp^0,c
  4194   002BFC                     
  4195                           ; BSR set to: 0
  4196                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4197   002BFC  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4198   002C00                     	if	1	;There is more than 1 active tblptr byte
  4199   002C00  0E0E               	movlw	high __smallconst
  4200   002C02  6EF7               	movwf	tblptrh,c
  4201   002C04                     	endif
  4202   002C04                     	if	0	;tblptru may be non-zero
  4203   002C04                     	endif
  4204   002C04                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4205   002C04  0E00               	movlw	low (__smallconst shr (0+16))
  4206   002C06  6EF8               	movwf	tblptru,c
  4207   002C08                     	endif
  4208   002C08  0008               	tblrd		*
  4209   002C0A  50F5               	movf	tablat,w,c
  4210   002C0C  0A64               	xorlw	100
  4211   002C0E  B4D8               	btfsc	status,2,c
  4212   002C10  EF0C  F016         	goto	u5221
  4213   002C14  EF0E  F016         	goto	u5220
  4214   002C18                     u5221:
  4215   002C18  EF1E  F016         	goto	l5778
  4216   002C1C                     u5220:
  4217   002C1C                     
  4218                           ; BSR set to: 0
  4219   002C1C  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4220   002C20                     	if	1	;There is more than 1 active tblptr byte
  4221   002C20  0E0E               	movlw	high __smallconst
  4222   002C22  6EF7               	movwf	tblptrh,c
  4223   002C24                     	endif
  4224   002C24                     	if	0	;tblptru may be non-zero
  4225   002C24                     	endif
  4226   002C24                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4227   002C24  0E00               	movlw	low (__smallconst shr (0+16))
  4228   002C26  6EF8               	movwf	tblptru,c
  4229   002C28                     	endif
  4230   002C28  0008               	tblrd		*
  4231   002C2A  50F5               	movf	tablat,w,c
  4232   002C2C  0A69               	xorlw	105
  4233   002C2E  A4D8               	btfss	status,2,c
  4234   002C30  EF1C  F016         	goto	u5231
  4235   002C34  EF1E  F016         	goto	u5230
  4236   002C38                     u5231:
  4237   002C38  EF39  F016         	goto	l5786
  4238   002C3C                     u5230:
  4239   002C3C                     l5778:
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4243   002C3C  5025               	movf	vfpfcnvrt@ap^0,w,c
  4244   002C3E  6ED9               	movwf	fsr2l,c
  4245   002C40  6ADA               	clrf	fsr2h,c
  4246   002C42  0E02               	movlw	2
  4247   002C44  26DF               	addwf	indf2,f,c
  4248   002C46  5CDF               	subwf	indf2,w,c
  4249   002C48  6ED9               	movwf	fsr2l,c
  4250   002C4A  6ADA               	clrf	fsr2h,c
  4251   002C4C  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  4252   002C50  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  4253   002C54                     
  4254                           ; BSR set to: 0
  4255                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  4256   002C54  5024               	movf	vfpfcnvrt@fmt^0,w,c
  4257   002C56  6ED9               	movwf	fsr2l,c
  4258   002C58  6ADA               	clrf	fsr2h,c
  4259   002C5A  282D               	incf	vfpfcnvrt@cp^0,w,c
  4260   002C5C  6EDF               	movwf	indf2,c
  4261   002C5E                     
  4262                           ; BSR set to: 0
  4263                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  4264   002C5E  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
  4265   002C62  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
  4266   002C66  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4267   002C6A  EC53  F016         	call	_dtoa	;wreg free
  4268   002C6E  EF52  F016         	goto	l1634
  4269   002C72                     l5786:
  4270                           
  4271                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  4272   002C72  5024               	movf	vfpfcnvrt@fmt^0,w,c
  4273   002C74  6ED9               	movwf	fsr2l,c
  4274   002C76  6ADA               	clrf	fsr2h,c
  4275   002C78  2ADF               	incf	indf2,f,c
  4276   002C7A  EF52  F016         	goto	l1634
  4277   002C7E                     l5790:
  4278                           
  4279                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  4280   002C7E  5024               	movf	vfpfcnvrt@fmt^0,w,c
  4281   002C80  6ED9               	movwf	fsr2l,c
  4282   002C82  6ADA               	clrf	fsr2h,c
  4283   002C84  CFDF FFF6          	movff	indf2,tblptrl
  4284   002C88                     	if	1	;There is more than 1 active tblptr byte
  4285   002C88  0E0E               	movlw	high __smallconst
  4286   002C8A  6EF7               	movwf	tblptrh,c
  4287   002C8C                     	endif
  4288   002C8C                     	if	0	;tblptru may be non-zero
  4289   002C8C                     	endif
  4290   002C8C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4291   002C8C  0E00               	movlw	low (__smallconst shr (0+16))
  4292   002C8E  6EF8               	movwf	tblptru,c
  4293   002C90                     	endif
  4294   002C90  0008               	tblrd		*
  4295   002C92  50F5               	movf	tablat,w,c
  4296   002C94  6E02               	movwf	fputc@c^0,c
  4297   002C96  6A03               	clrf	(fputc@c+1)^0,c
  4298   002C98  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
  4299   002C9C  EC0A  F01F         	call	_fputc	;wreg free
  4300   002CA0  EF39  F016         	goto	l5786
  4301   002CA4                     l1634:
  4302   002CA4  0012               	return		;funcret
  4303   002CA6                     __end_of_vfpfcnvrt:
  4304                           	callstack 0
  4305                           
  4306 ;; *************** function _read_prec_or_width *****************
  4307 ;; Defined at:
  4308 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
  4311 ;;		 -> vfprintf@cfmt(1), 
  4312 ;;  ap              1    8[COMRAM] PTR PTR void [1]
  4313 ;;		 -> sprintf@ap(1), 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  c               1    9[COMRAM] unsigned char 
  4316 ;;  n               2   10[COMRAM] int 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  2    7[COMRAM] int 
  4319 ;; Registers used:
  4320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4327 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4329 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4330 ;;Total ram usage:        5 bytes
  4331 ;; Hardware stack levels used: 1
  4332 ;; Hardware stack levels required when called: 2
  4333 ;; This function calls:
  4334 ;;		___wmul
  4335 ;; This function is called by:
  4336 ;;		_vfpfcnvrt
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text14
  4341   003CBC                     __ptext14:
  4342                           	callstack 0
  4343   003CBC                     _read_prec_or_width:
  4344                           	callstack 24
  4345   003CBC                     
  4346                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  4347   003CBC  0E00               	movlw	0
  4348   003CBE  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  4349   003CC0  0E00               	movlw	0
  4350   003CC2  6E0B               	movwf	read_prec_or_width@n^0,c
  4351   003CC4                     
  4352                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  4353   003CC4  5008               	movf	read_prec_or_width@fmt^0,w,c
  4354   003CC6  6ED9               	movwf	fsr2l,c
  4355   003CC8  6ADA               	clrf	fsr2h,c
  4356   003CCA  CFDF FFF6          	movff	indf2,tblptrl
  4357   003CCE                     	if	1	;There is more than 1 active tblptr byte
  4358   003CCE  0E0E               	movlw	high __smallconst
  4359   003CD0  6EF7               	movwf	tblptrh,c
  4360   003CD2                     	endif
  4361   003CD2                     	if	0	;tblptru may be non-zero
  4362   003CD2                     	endif
  4363   003CD2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4364   003CD2  0E00               	movlw	low (__smallconst shr (0+16))
  4365   003CD4  6EF8               	movwf	tblptru,c
  4366   003CD6                     	endif
  4367   003CD6  0008               	tblrd		*
  4368   003CD8  50F5               	movf	tablat,w,c
  4369   003CDA  0A2A               	xorlw	42
  4370   003CDC  A4D8               	btfss	status,2,c
  4371   003CDE  EF73  F01E         	goto	u2911
  4372   003CE2  EF75  F01E         	goto	u2910
  4373   003CE6                     u2911:
  4374   003CE6  EF9B  F01E         	goto	l3908
  4375   003CEA                     u2910:
  4376   003CEA                     
  4377                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  4378   003CEA  5008               	movf	read_prec_or_width@fmt^0,w,c
  4379   003CEC  6ED9               	movwf	fsr2l,c
  4380   003CEE  6ADA               	clrf	fsr2h,c
  4381   003CF0  2ADF               	incf	indf2,f,c
  4382   003CF2                     
  4383                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  4384   003CF2  5009               	movf	read_prec_or_width@ap^0,w,c
  4385   003CF4  6ED9               	movwf	fsr2l,c
  4386   003CF6  6ADA               	clrf	fsr2h,c
  4387   003CF8  0E02               	movlw	2
  4388   003CFA  26DF               	addwf	indf2,f,c
  4389   003CFC  5CDF               	subwf	indf2,w,c
  4390   003CFE  6ED9               	movwf	fsr2l,c
  4391   003D00  6ADA               	clrf	fsr2h,c
  4392   003D02  CFDE F00B          	movff	postinc2,read_prec_or_width@n
  4393   003D06  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
  4394                           
  4395                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  4396   003D0A  EFB0  F01E         	goto	l1615
  4397   003D0E                     l3904:
  4398                           
  4399                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  4400   003D0E  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
  4401   003D12  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  4402   003D16  0E00               	movlw	0
  4403   003D18  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  4404   003D1A  0E0A               	movlw	10
  4405   003D1C  6E04               	movwf	___wmul@multiplicand^0,c
  4406   003D1E  EC00  F026         	call	___wmul	;wreg free
  4407   003D22  500A               	movf	read_prec_or_width@c^0,w,c
  4408   003D24  2402               	addwf	?___wmul^0,w,c
  4409   003D26  6E0B               	movwf	read_prec_or_width@n^0,c
  4410   003D28  0E00               	movlw	0
  4411   003D2A  2003               	addwfc	(?___wmul+1)^0,w,c
  4412   003D2C  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  4413   003D2E                     
  4414                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  4415   003D2E  5008               	movf	read_prec_or_width@fmt^0,w,c
  4416   003D30  6ED9               	movwf	fsr2l,c
  4417   003D32  6ADA               	clrf	fsr2h,c
  4418   003D34  2ADF               	incf	indf2,f,c
  4419   003D36                     l3908:
  4420                           
  4421                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  4422   003D36  5008               	movf	read_prec_or_width@fmt^0,w,c
  4423   003D38  6ED9               	movwf	fsr2l,c
  4424   003D3A  6ADA               	clrf	fsr2h,c
  4425   003D3C  CFDF FFF6          	movff	indf2,tblptrl
  4426   003D40                     	if	1	;There is more than 1 active tblptr byte
  4427   003D40  0E0E               	movlw	high __smallconst
  4428   003D42  6EF7               	movwf	tblptrh,c
  4429   003D44                     	endif
  4430   003D44                     	if	0	;tblptru may be non-zero
  4431   003D44                     	endif
  4432   003D44                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4433   003D44  0E00               	movlw	low (__smallconst shr (0+16))
  4434   003D46  6EF8               	movwf	tblptru,c
  4435   003D48                     	endif
  4436   003D48  0008               	tblrd		*
  4437   003D4A  50F5               	movf	tablat,w,c
  4438   003D4C  0FD0               	addlw	208
  4439   003D4E  6E0A               	movwf	read_prec_or_width@c^0,c
  4440   003D50  0E09               	movlw	9
  4441   003D52  640A               	cpfsgt	read_prec_or_width@c^0,c
  4442   003D54  EFAE  F01E         	goto	u2921
  4443   003D58  EFB0  F01E         	goto	u2920
  4444   003D5C                     u2921:
  4445   003D5C  EF87  F01E         	goto	l3904
  4446   003D60                     u2920:
  4447   003D60                     l1615:
  4448                           
  4449                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  4450   003D60  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
  4451   003D64  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  4452   003D68  0012               	return		;funcret
  4453   003D6A                     __end_of_read_prec_or_width:
  4454                           	callstack 0
  4455                           
  4456 ;; *************** function _dtoa *****************
  4457 ;; Defined at:
  4458 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
  4461 ;;		 -> sprintf@f(12), 
  4462 ;;  d               2   24[COMRAM] int 
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;  i               2   32[COMRAM] int 
  4465 ;;  w               2   29[COMRAM] int 
  4466 ;;  s               1   31[COMRAM] unsigned char 
  4467 ;;  p               1   28[COMRAM] _Bool 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      void 
  4470 ;; Registers used:
  4471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4477 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4478 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4480 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4481 ;;Total ram usage:       11 bytes
  4482 ;; Hardware stack levels used: 1
  4483 ;; Hardware stack levels required when called: 5
  4484 ;; This function calls:
  4485 ;;		___awdiv
  4486 ;;		___awmod
  4487 ;;		_abs
  4488 ;;		_pad
  4489 ;; This function is called by:
  4490 ;;		_vfpfcnvrt
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           	psect	text15
  4495   002CA6                     __ptext15:
  4496                           	callstack 0
  4497   002CA6                     _dtoa:
  4498                           	callstack 21
  4499   002CA6                     
  4500                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  4501   002CA6  0E01               	movlw	1
  4502   002CA8  6E1D               	movwf	dtoa@p^0,c
  4503   002CAA                     
  4504                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  4505   002CAA  BE1A               	btfsc	(dtoa@d+1)^0,7,c
  4506   002CAC  EF5A  F016         	goto	u5091
  4507   002CB0  EF5D  F016         	goto	u5090
  4508   002CB4                     u5091:
  4509   002CB4  0E01               	movlw	1
  4510   002CB6  EF5E  F016         	goto	u5100
  4511   002CBA                     u5090:
  4512   002CBA  0E00               	movlw	0
  4513   002CBC                     u5100:
  4514   002CBC  6E20               	movwf	dtoa@s^0,c
  4515   002CBE                     
  4516                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  4517   002CBE  C0CC  F01E         	movff	_width,dtoa@w
  4518   002CC2  C0CD  F01F         	movff	_width+1,dtoa@w+1
  4519   002CC6                     
  4520                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  4521   002CC6  5020               	movf	dtoa@s^0,w,c
  4522   002CC8  B4D8               	btfsc	status,2,c
  4523   002CCA  EF69  F016         	goto	u5111
  4524   002CCE  EF6B  F016         	goto	u5110
  4525   002CD2                     u5111:
  4526   002CD2  EF82  F016         	goto	l1598
  4527   002CD6                     u5110:
  4528   002CD6                     
  4529                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  4530   002CD6  061E               	decf	dtoa@w^0,f,c
  4531   002CD8  A0D8               	btfss	status,0,c
  4532   002CDA  061F               	decf	(dtoa@w+1)^0,f,c
  4533   002CDC                     
  4534                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  4535   002CDC  5020               	movf	dtoa@s^0,w,c
  4536   002CDE  A4D8               	btfss	status,2,c
  4537   002CE0  EF74  F016         	goto	u5121
  4538   002CE4  EF76  F016         	goto	u5120
  4539   002CE8                     u5121:
  4540   002CE8  EF7C  F016         	goto	l5708
  4541   002CEC                     u5120:
  4542   002CEC  0E00               	movlw	0
  4543   002CEE  6E1C               	movwf	(_dtoa$3087+1)^0,c
  4544   002CF0  0E2B               	movlw	43
  4545   002CF2  6E1B               	movwf	_dtoa$3087^0,c
  4546   002CF4  EF80  F016         	goto	l5710
  4547   002CF8                     l5708:
  4548   002CF8  0E00               	movlw	0
  4549   002CFA  6E1C               	movwf	(_dtoa$3087+1)^0,c
  4550   002CFC  0E2D               	movlw	45
  4551   002CFE  6E1B               	movwf	_dtoa$3087^0,c
  4552   002D00                     l5710:
  4553   002D00  C01B  F020         	movff	_dtoa$3087,dtoa@s
  4554   002D04                     l1598:
  4555                           
  4556                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  4557   002D04  0E00               	movlw	0
  4558   002D06  6E22               	movwf	(dtoa@i+1)^0,c
  4559   002D08  0E1F               	movlw	31
  4560   002D0A  6E21               	movwf	dtoa@i^0,c
  4561   002D0C                     
  4562                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  4563   002D0C  0E00               	movlw	0
  4564   002D0E  0101               	movlb	1	; () banked
  4565   002D10  6FA1               	movwf	(_dbuf+31)& (0+255),b
  4566                           
  4567                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  4568   002D12  EFBA  F016         	goto	l5724
  4569   002D16                     l5714:
  4570                           
  4571                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  4572   002D16  0621               	decf	dtoa@i^0,f,c
  4573   002D18  A0D8               	btfss	status,0,c
  4574   002D1A  0622               	decf	(dtoa@i+1)^0,f,c
  4575   002D1C                     
  4576                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  4577   002D1C  0E82               	movlw	low _dbuf
  4578   002D1E  2421               	addwf	dtoa@i^0,w,c
  4579   002D20  6ED9               	movwf	fsr2l,c
  4580   002D22  0E01               	movlw	high _dbuf
  4581   002D24  2022               	addwfc	(dtoa@i+1)^0,w,c
  4582   002D26  6EDA               	movwf	fsr2h,c
  4583   002D28  C019  F002         	movff	dtoa@d,___awmod@dividend
  4584   002D2C  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
  4585   002D30  0E00               	movlw	0
  4586   002D32  6E05               	movwf	(___awmod@divisor+1)^0,c
  4587   002D34  0E0A               	movlw	10
  4588   002D36  6E04               	movwf	___awmod@divisor^0,c
  4589   002D38  EC06  F01E         	call	___awmod	;wreg free
  4590   002D3C  C002  F008         	movff	?___awmod,abs@a
  4591   002D40  C003  F009         	movff	?___awmod+1,abs@a+1
  4592   002D44  EC7A  F024         	call	_abs	;wreg free
  4593   002D48  5008               	movf	?_abs^0,w,c
  4594   002D4A  0F30               	addlw	48
  4595   002D4C  6EDF               	movwf	indf2,c
  4596   002D4E                     
  4597                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  4598   002D4E  0E00               	movlw	0
  4599   002D50  6E1D               	movwf	dtoa@p^0,c
  4600   002D52                     
  4601                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  4602   002D52  061E               	decf	dtoa@w^0,f,c
  4603   002D54  A0D8               	btfss	status,0,c
  4604   002D56  061F               	decf	(dtoa@w+1)^0,f,c
  4605   002D58                     
  4606                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  4607   002D58  C019  F002         	movff	dtoa@d,___awdiv@dividend
  4608   002D5C  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
  4609   002D60  0E00               	movlw	0
  4610   002D62  6E05               	movwf	(___awdiv@divisor+1)^0,c
  4611   002D64  0E0A               	movlw	10
  4612   002D66  6E04               	movwf	___awdiv@divisor^0,c
  4613   002D68  ECA4  F01D         	call	___awdiv	;wreg free
  4614   002D6C  C002  F019         	movff	?___awdiv,dtoa@d
  4615   002D70  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
  4616   002D74                     l5724:
  4617                           
  4618                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  4619   002D74  BE22               	btfsc	(dtoa@i+1)^0,7,c
  4620   002D76  EFC5  F016         	goto	u5131
  4621   002D7A  5022               	movf	(dtoa@i+1)^0,w,c
  4622   002D7C  E108               	bnz	u5130
  4623   002D7E  0421               	decf	dtoa@i^0,w,c
  4624   002D80  A0D8               	btfss	status,0,c
  4625   002D82  EFC5  F016         	goto	u5131
  4626   002D86  EFC7  F016         	goto	u5130
  4627   002D8A                     u5131:
  4628   002D8A  EFED  F016         	goto	l5734
  4629   002D8E                     u5130:
  4630   002D8E  5019               	movf	dtoa@d^0,w,c
  4631   002D90  101A               	iorwf	(dtoa@d+1)^0,w,c
  4632   002D92  A4D8               	btfss	status,2,c
  4633   002D94  EFCE  F016         	goto	u5141
  4634   002D98  EFD0  F016         	goto	u5140
  4635   002D9C                     u5141:
  4636   002D9C  EF8B  F016         	goto	l5714
  4637   002DA0                     u5140:
  4638   002DA0  501D               	movf	dtoa@p^0,w,c
  4639   002DA2  A4D8               	btfss	status,2,c
  4640   002DA4  EFD6  F016         	goto	u5151
  4641   002DA8  EFD8  F016         	goto	u5150
  4642   002DAC                     u5151:
  4643   002DAC  EF8B  F016         	goto	l5714
  4644   002DB0                     u5150:
  4645   002DB0  BE1F               	btfsc	(dtoa@w+1)^0,7,c
  4646   002DB2  EFE3  F016         	goto	u5161
  4647   002DB6  501F               	movf	(dtoa@w+1)^0,w,c
  4648   002DB8  E108               	bnz	u5160
  4649   002DBA  041E               	decf	dtoa@w^0,w,c
  4650   002DBC  A0D8               	btfss	status,0,c
  4651   002DBE  EFE3  F016         	goto	u5161
  4652   002DC2  EFE5  F016         	goto	u5160
  4653   002DC6                     u5161:
  4654   002DC6  EFED  F016         	goto	l5734
  4655   002DCA                     u5160:
  4656   002DCA  0100               	movlb	0	; () banked
  4657   002DCC  B3D0               	btfsc	_flags& (0+255),1,b
  4658   002DCE  EFEB  F016         	goto	u5171
  4659   002DD2  EFED  F016         	goto	u5170
  4660   002DD6                     u5171:
  4661   002DD6  EF8B  F016         	goto	l5714
  4662   002DDA                     u5170:
  4663   002DDA                     l5734:
  4664                           
  4665                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  4666   002DDA  5020               	movf	dtoa@s^0,w,c
  4667   002DDC  B4D8               	btfsc	status,2,c
  4668   002DDE  EFF3  F016         	goto	u5181
  4669   002DE2  EFF5  F016         	goto	u5180
  4670   002DE6                     u5181:
  4671   002DE6  EF00  F017         	goto	l5740
  4672   002DEA                     u5180:
  4673   002DEA                     
  4674                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  4675   002DEA  0621               	decf	dtoa@i^0,f,c
  4676   002DEC  A0D8               	btfss	status,0,c
  4677   002DEE  0622               	decf	(dtoa@i+1)^0,f,c
  4678   002DF0                     
  4679                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  4680   002DF0  0E82               	movlw	low _dbuf
  4681   002DF2  2421               	addwf	dtoa@i^0,w,c
  4682   002DF4  6ED9               	movwf	fsr2l,c
  4683   002DF6  0E01               	movlw	high _dbuf
  4684   002DF8  2022               	addwfc	(dtoa@i+1)^0,w,c
  4685   002DFA  6EDA               	movwf	fsr2h,c
  4686   002DFC  C020  FFDF         	movff	dtoa@s,indf2
  4687   002E00                     l5740:
  4688                           
  4689                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  4690   002E00  C018  F010         	movff	dtoa@fp,pad@fp
  4691   002E04  0E82               	movlw	low _dbuf
  4692   002E06  2421               	addwf	dtoa@i^0,w,c
  4693   002E08  6E11               	movwf	pad@buf^0,c
  4694   002E0A  0E01               	movlw	high _dbuf
  4695   002E0C  2022               	addwfc	(dtoa@i+1)^0,w,c
  4696   002E0E  6E12               	movwf	(pad@buf+1)^0,c
  4697   002E10  C01E  F013         	movff	dtoa@w,pad@p
  4698   002E14  C01F  F014         	movff	dtoa@w+1,pad@p+1
  4699   002E18  ECAC  F01F         	call	_pad	;wreg free
  4700   002E1C  0012               	return		;funcret
  4701   002E1E                     __end_of_dtoa:
  4702                           	callstack 0
  4703                           
  4704 ;; *************** function _pad *****************
  4705 ;; Defined at:
  4706 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
  4709 ;;		 -> sprintf@f(12), 
  4710 ;;  buf             2   16[COMRAM] PTR unsigned char 
  4711 ;;		 -> dbuf(32), 
  4712 ;;  p               2   18[COMRAM] int 
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;  i               2   21[COMRAM] int 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  1    wreg      void 
  4717 ;; Registers used:
  4718 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4724 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4725 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4726 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4727 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4728 ;;Total ram usage:        8 bytes
  4729 ;; Hardware stack levels used: 1
  4730 ;; Hardware stack levels required when called: 4
  4731 ;; This function calls:
  4732 ;;		_fputc
  4733 ;;		_fputs
  4734 ;; This function is called by:
  4735 ;;		_dtoa
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text16
  4740   003F58                     __ptext16:
  4741                           	callstack 0
  4742   003F58                     _pad:
  4743                           	callstack 21
  4744   003F58                     
  4745                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  4746   003F58  0100               	movlb	0	; () banked
  4747   003F5A  A1D0               	btfss	_flags& (0+255),0,b
  4748   003F5C  EFB2  F01F         	goto	u5051
  4749   003F60  EFB4  F01F         	goto	u5050
  4750   003F64                     u5051:
  4751   003F64  EFBC  F01F         	goto	l5682
  4752   003F68                     u5050:
  4753   003F68                     
  4754                           ; BSR set to: 0
  4755                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  4756   003F68  C011  F00A         	movff	pad@buf,fputs@s
  4757   003F6C  C012  F00B         	movff	pad@buf+1,fputs@s+1
  4758   003F70  C010  F00C         	movff	pad@fp,fputs@fp
  4759   003F74  EC73  F023         	call	_fputs	;wreg free
  4760   003F78                     l5682:
  4761                           
  4762                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  4763   003F78  BE14               	btfsc	(pad@p+1)^0,7,c
  4764   003F7A  EFC3  F01F         	goto	u5060
  4765   003F7E  EFC1  F01F         	goto	u5061
  4766   003F82                     u5061:
  4767   003F82  EFC7  F01F         	goto	l1590
  4768   003F86                     u5060:
  4769   003F86                     
  4770                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  4771   003F86  0E00               	movlw	0
  4772   003F88  6E14               	movwf	(pad@p+1)^0,c
  4773   003F8A  0E00               	movlw	0
  4774   003F8C  6E13               	movwf	pad@p^0,c
  4775   003F8E                     l1590:
  4776                           
  4777                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  4778   003F8E  0E00               	movlw	0
  4779   003F90  6E17               	movwf	(pad@i+1)^0,c
  4780   003F92  0E00               	movlw	0
  4781   003F94  6E16               	movwf	pad@i^0,c
  4782                           
  4783                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  4784   003F96  EFD7  F01F         	goto	l5690
  4785   003F9A                     l5686:
  4786                           
  4787                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  4788   003F9A  0E00               	movlw	0
  4789   003F9C  6E03               	movwf	(fputc@c+1)^0,c
  4790   003F9E  0E20               	movlw	32
  4791   003FA0  6E02               	movwf	fputc@c^0,c
  4792   003FA2  C010  F004         	movff	pad@fp,fputc@fp
  4793   003FA6  EC0A  F01F         	call	_fputc	;wreg free
  4794   003FAA                     
  4795                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  4796   003FAA  4A16               	infsnz	pad@i^0,f,c
  4797   003FAC  2A17               	incf	(pad@i+1)^0,f,c
  4798   003FAE                     l5690:
  4799                           
  4800                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  4801   003FAE  5013               	movf	pad@p^0,w,c
  4802   003FB0  5C16               	subwf	pad@i^0,w,c
  4803   003FB2  5017               	movf	(pad@i+1)^0,w,c
  4804   003FB4  0A80               	xorlw	128
  4805   003FB6  6E15               	movwf	??_pad^0,c
  4806   003FB8  5014               	movf	(pad@p+1)^0,w,c
  4807   003FBA  0A80               	xorlw	128
  4808   003FBC  5815               	subwfb	??_pad^0,w,c
  4809   003FBE  A0D8               	btfss	status,0,c
  4810   003FC0  EFE4  F01F         	goto	u5071
  4811   003FC4  EFE6  F01F         	goto	u5070
  4812   003FC8                     u5071:
  4813   003FC8  EFCD  F01F         	goto	l5686
  4814   003FCC                     u5070:
  4815   003FCC                     
  4816                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  4817   003FCC  0100               	movlb	0	; () banked
  4818   003FCE  B1D0               	btfsc	_flags& (0+255),0,b
  4819   003FD0  EFEC  F01F         	goto	u5081
  4820   003FD4  EFEE  F01F         	goto	u5080
  4821   003FD8                     u5081:
  4822   003FD8  EFF6  F01F         	goto	l1595
  4823   003FDC                     u5080:
  4824   003FDC                     
  4825                           ; BSR set to: 0
  4826                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  4827   003FDC  C011  F00A         	movff	pad@buf,fputs@s
  4828   003FE0  C012  F00B         	movff	pad@buf+1,fputs@s+1
  4829   003FE4  C010  F00C         	movff	pad@fp,fputs@fp
  4830   003FE8  EC73  F023         	call	_fputs	;wreg free
  4831   003FEC                     l1595:
  4832   003FEC  0012               	return		;funcret
  4833   003FEE                     __end_of_pad:
  4834                           	callstack 0
  4835                           
  4836 ;; *************** function _fputs *****************
  4837 ;; Defined at:
  4838 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;  s               2    9[COMRAM] PTR const unsigned char 
  4841 ;;		 -> dbuf(32), 
  4842 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
  4843 ;;		 -> sprintf@f(12), 
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;  i               2   13[COMRAM] int 
  4846 ;;  c               1   12[COMRAM] unsigned char 
  4847 ;; Return value:  Size  Location     Type
  4848 ;;                  2    9[COMRAM] int 
  4849 ;; Registers used:
  4850 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4851 ;; Tracked objects:
  4852 ;;		On entry : 0/0
  4853 ;;		On exit  : 0/0
  4854 ;;		Unchanged: 0/0
  4855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4856 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4857 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4859 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4860 ;;Total ram usage:        6 bytes
  4861 ;; Hardware stack levels used: 1
  4862 ;; Hardware stack levels required when called: 3
  4863 ;; This function calls:
  4864 ;;		_fputc
  4865 ;; This function is called by:
  4866 ;;		_pad
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           	psect	text17
  4871   0046E6                     __ptext17:
  4872                           	callstack 0
  4873   0046E6                     _fputs:
  4874                           	callstack 21
  4875   0046E6  0E00               	movlw	0
  4876   0046E8  6E0F               	movwf	(fputs@i+1)^0,c
  4877   0046EA  0E00               	movlw	0
  4878   0046EC  6E0E               	movwf	fputs@i^0,c
  4879   0046EE  EF82  F023         	goto	l5676
  4880   0046F2                     l5672:
  4881   0046F2  C00D  F002         	movff	fputs@c,fputc@c
  4882   0046F6  6A03               	clrf	(fputc@c+1)^0,c
  4883   0046F8  C00C  F004         	movff	fputs@fp,fputc@fp
  4884   0046FC  EC0A  F01F         	call	_fputc	;wreg free
  4885   004700  4A0E               	infsnz	fputs@i^0,f,c
  4886   004702  2A0F               	incf	(fputs@i+1)^0,f,c
  4887   004704                     l5676:
  4888   004704  500E               	movf	fputs@i^0,w,c
  4889   004706  240A               	addwf	fputs@s^0,w,c
  4890   004708  6ED9               	movwf	fsr2l,c
  4891   00470A  500F               	movf	(fputs@i+1)^0,w,c
  4892   00470C  200B               	addwfc	(fputs@s+1)^0,w,c
  4893   00470E  6EDA               	movwf	fsr2h,c
  4894   004710  50DF               	movf	indf2,w,c
  4895   004712  6E0D               	movwf	fputs@c^0,c
  4896   004714  500D               	movf	fputs@c^0,w,c
  4897   004716  A4D8               	btfss	status,2,c
  4898   004718  EF90  F023         	goto	u5041
  4899   00471C  EF92  F023         	goto	u5040
  4900   004720                     u5041:
  4901   004720  EF79  F023         	goto	l5672
  4902   004724                     u5040:
  4903   004724  0012               	return		;funcret
  4904   004726                     __end_of_fputs:
  4905                           	callstack 0
  4906                           
  4907 ;; *************** function _fputc *****************
  4908 ;; Defined at:
  4909 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;  c               2    1[COMRAM] int 
  4912 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
  4913 ;;		 -> sprintf@f(12), 
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;		None
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  2    1[COMRAM] int 
  4918 ;; Registers used:
  4919 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4925 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4927 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4928 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4929 ;;Total ram usage:        8 bytes
  4930 ;; Hardware stack levels used: 1
  4931 ;; Hardware stack levels required when called: 2
  4932 ;; This function calls:
  4933 ;;		_putch
  4934 ;; This function is called by:
  4935 ;;		_pad
  4936 ;;		_vfpfcnvrt
  4937 ;;		_fputs
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text18
  4942   003E14                     __ptext18:
  4943                           	callstack 0
  4944   003E14                     _fputc:
  4945                           	callstack 24
  4946   003E14  5004               	movf	fputc@fp^0,w,c
  4947   003E16  B4D8               	btfsc	status,2,c
  4948   003E18  EF10  F01F         	goto	u2541
  4949   003E1C  EF12  F01F         	goto	u2540
  4950   003E20                     u2541:
  4951   003E20  EF1A  F01F         	goto	l3684
  4952   003E24                     u2540:
  4953   003E24  5004               	movf	fputc@fp^0,w,c
  4954   003E26  A4D8               	btfss	status,2,c
  4955   003E28  EF18  F01F         	goto	u2551
  4956   003E2C  EF1A  F01F         	goto	u2550
  4957   003E30                     u2551:
  4958   003E30  EF1F  F01F         	goto	l3686
  4959   003E34                     u2550:
  4960   003E34                     l3684:
  4961   003E34  5002               	movf	fputc@c^0,w,c
  4962   003E36  EC87  F026         	call	_putch
  4963   003E3A  EF5E  F01F         	goto	l1659
  4964   003E3E                     l3686:
  4965   003E3E  5004               	movf	fputc@fp^0,w,c
  4966   003E40  6ED9               	movwf	fsr2l,c
  4967   003E42  6ADA               	clrf	fsr2h,c
  4968   003E44  0E0A               	movlw	10
  4969   003E46  26D9               	addwf	fsr2l,f,c
  4970   003E48  50DE               	movf	postinc2,w,c
  4971   003E4A  10DE               	iorwf	postinc2,w,c
  4972   003E4C  B4D8               	btfsc	status,2,c
  4973   003E4E  EF2B  F01F         	goto	u2561
  4974   003E52  EF2D  F01F         	goto	u2560
  4975   003E56                     u2561:
  4976   003E56  EF46  F01F         	goto	l3690
  4977   003E5A                     u2560:
  4978   003E5A  5004               	movf	fputc@fp^0,w,c
  4979   003E5C  6ED9               	movwf	fsr2l,c
  4980   003E5E  6ADA               	clrf	fsr2h,c
  4981   003E60  0E0A               	movlw	10
  4982   003E62  26D9               	addwf	fsr2l,f,c
  4983   003E64  5004               	movf	fputc@fp^0,w,c
  4984   003E66  6EE1               	movwf	fsr1l,c
  4985   003E68  6AE2               	clrf	fsr1h,c
  4986   003E6A  0E03               	movlw	3
  4987   003E6C  26E1               	addwf	fsr1l,f,c
  4988   003E6E  50DE               	movf	postinc2,w,c
  4989   003E70  5CE6               	subwf	postinc1,w,c
  4990   003E72  50E6               	movf	postinc1,w,c
  4991   003E74  0A80               	xorlw	128
  4992   003E76  6E09               	movwf	(??_fputc+4)^0,c
  4993   003E78  50DE               	movf	postinc2,w,c
  4994   003E7A  0A80               	xorlw	128
  4995   003E7C  5809               	subwfb	(??_fputc+4)^0,w,c
  4996   003E7E  B0D8               	btfsc	status,0,c
  4997   003E80  EF44  F01F         	goto	u2571
  4998   003E84  EF46  F01F         	goto	u2570
  4999   003E88                     u2571:
  5000   003E88  EF5E  F01F         	goto	l1659
  5001   003E8C                     u2570:
  5002   003E8C                     l3690:
  5003   003E8C  5004               	movf	fputc@fp^0,w,c
  5004   003E8E  6ED9               	movwf	fsr2l,c
  5005   003E90  6ADA               	clrf	fsr2h,c
  5006   003E92  0E03               	movlw	3
  5007   003E94  26D9               	addwf	fsr2l,f,c
  5008   003E96  50DF               	movf	indf2,w,c
  5009   003E98  6E05               	movwf	??_fputc^0,c
  5010   003E9A  5004               	movf	fputc@fp^0,w,c
  5011   003E9C  6ED9               	movwf	fsr2l,c
  5012   003E9E  6ADA               	clrf	fsr2h,c
  5013   003EA0  50DF               	movf	indf2,w,c
  5014   003EA2  2405               	addwf	??_fputc^0,w,c
  5015   003EA4  6ED9               	movwf	fsr2l,c
  5016   003EA6  6ADA               	clrf	fsr2h,c
  5017   003EA8  C002  FFDF         	movff	fputc@c,indf2
  5018   003EAC  5004               	movf	fputc@fp^0,w,c
  5019   003EAE  6ED9               	movwf	fsr2l,c
  5020   003EB0  6ADA               	clrf	fsr2h,c
  5021   003EB2  0E03               	movlw	3
  5022   003EB4  26D9               	addwf	fsr2l,f,c
  5023   003EB6  2ADE               	incf	postinc2,f,c
  5024   003EB8  0E00               	movlw	0
  5025   003EBA  22DD               	addwfc	postdec2,f,c
  5026   003EBC                     l1659:
  5027   003EBC  0012               	return		;funcret
  5028   003EBE                     __end_of_fputc:
  5029                           	callstack 0
  5030                           
  5031 ;; *************** function _putch *****************
  5032 ;; Defined at:
  5033 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  c               1    wreg     unsigned char 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  c               1    0[COMRAM] unsigned char 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      void 
  5040 ;; Registers used:
  5041 ;;		wreg
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5051 ;;Total ram usage:        0 bytes
  5052 ;; Hardware stack levels used: 1
  5053 ;; Hardware stack levels required when called: 1
  5054 ;; This function calls:
  5055 ;;		Nothing
  5056 ;; This function is called by:
  5057 ;;		_fputc
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           	psect	text19
  5062   004D0E                     __ptext19:
  5063                           	callstack 0
  5064   004D0E                     _putch:
  5065                           	callstack 24
  5066   004D0E  0012               	return		;funcret
  5067   004D10                     __end_of_putch:
  5068                           	callstack 0
  5069                           
  5070 ;; *************** function _abs *****************
  5071 ;; Defined at:
  5072 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;  a               2    7[COMRAM] int 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;		None
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  2    7[COMRAM] int 
  5079 ;; Registers used:
  5080 ;;		wreg, status,2, status,0
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5086 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5088 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5089 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5090 ;;Total ram usage:        4 bytes
  5091 ;; Hardware stack levels used: 1
  5092 ;; Hardware stack levels required when called: 1
  5093 ;; This function calls:
  5094 ;;		Nothing
  5095 ;; This function is called by:
  5096 ;;		_dtoa
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           	psect	text20
  5101   0048F4                     __ptext20:
  5102                           	callstack 0
  5103   0048F4                     _abs:
  5104                           	callstack 24
  5105   0048F4  BE09               	btfsc	(abs@a+1)^0,7,c
  5106   0048F6  EF7F  F024         	goto	u2781
  5107   0048FA  EF81  F024         	goto	u2780
  5108   0048FE                     u2781:
  5109   0048FE  EF87  F024         	goto	l1644
  5110   004902                     u2780:
  5111   004902  C008  F008         	movff	abs@a,?_abs
  5112   004906  C009  F009         	movff	abs@a+1,?_abs+1
  5113   00490A  EF93  F024         	goto	l1647
  5114   00490E                     l1644:
  5115   00490E  C008  F00A         	movff	abs@a,??_abs
  5116   004912  C009  F00B         	movff	abs@a+1,??_abs+1
  5117   004916  1E0A               	comf	??_abs^0,f,c
  5118   004918  1E0B               	comf	(??_abs+1)^0,f,c
  5119   00491A  4A0A               	infsnz	??_abs^0,f,c
  5120   00491C  2A0B               	incf	(??_abs+1)^0,f,c
  5121   00491E  C00A  F008         	movff	??_abs,?_abs
  5122   004922  C00B  F009         	movff	??_abs+1,?_abs+1
  5123   004926                     l1647:
  5124   004926  0012               	return		;funcret
  5125   004928                     __end_of_abs:
  5126                           	callstack 0
  5127                           
  5128 ;; *************** function ___awmod *****************
  5129 ;; Defined at:
  5130 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  dividend        2    1[COMRAM] int 
  5133 ;;  divisor         2    3[COMRAM] int 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;  sign            1    6[COMRAM] unsigned char 
  5136 ;;  counter         1    5[COMRAM] unsigned char 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  2    1[COMRAM] int 
  5139 ;; Registers used:
  5140 ;;		wreg, status,2, status,0
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5146 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5147 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5149 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5150 ;;Total ram usage:        6 bytes
  5151 ;; Hardware stack levels used: 1
  5152 ;; Hardware stack levels required when called: 1
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_dtoa
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text21
  5161   003C0C                     __ptext21:
  5162                           	callstack 0
  5163   003C0C                     ___awmod:
  5164                           	callstack 24
  5165   003C0C  0E00               	movlw	0
  5166   003C0E  6E07               	movwf	___awmod@sign^0,c
  5167   003C10  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
  5168   003C12  EF0F  F01E         	goto	u2650
  5169   003C16  EF0D  F01E         	goto	u2651
  5170   003C1A                     u2651:
  5171   003C1A  EF15  F01E         	goto	l3760
  5172   003C1E                     u2650:
  5173   003C1E  6C02               	negf	___awmod@dividend^0,c
  5174   003C20  1E03               	comf	(___awmod@dividend+1)^0,f,c
  5175   003C22  B0D8               	btfsc	status,0,c
  5176   003C24  2A03               	incf	(___awmod@dividend+1)^0,f,c
  5177   003C26  0E01               	movlw	1
  5178   003C28  6E07               	movwf	___awmod@sign^0,c
  5179   003C2A                     l3760:
  5180   003C2A  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
  5181   003C2C  EF1C  F01E         	goto	u2660
  5182   003C30  EF1A  F01E         	goto	u2661
  5183   003C34                     u2661:
  5184   003C34  EF20  F01E         	goto	l3764
  5185   003C38                     u2660:
  5186   003C38  6C04               	negf	___awmod@divisor^0,c
  5187   003C3A  1E05               	comf	(___awmod@divisor+1)^0,f,c
  5188   003C3C  B0D8               	btfsc	status,0,c
  5189   003C3E  2A05               	incf	(___awmod@divisor+1)^0,f,c
  5190   003C40                     l3764:
  5191   003C40  5004               	movf	___awmod@divisor^0,w,c
  5192   003C42  1005               	iorwf	(___awmod@divisor+1)^0,w,c
  5193   003C44  B4D8               	btfsc	status,2,c
  5194   003C46  EF27  F01E         	goto	u2671
  5195   003C4A  EF29  F01E         	goto	u2670
  5196   003C4E                     u2671:
  5197   003C4E  EF4D  F01E         	goto	l3780
  5198   003C52                     u2670:
  5199   003C52  0E01               	movlw	1
  5200   003C54  6E06               	movwf	___awmod@counter^0,c
  5201   003C56  EF31  F01E         	goto	l3770
  5202   003C5A                     l3768:
  5203   003C5A  90D8               	bcf	status,0,c
  5204   003C5C  3604               	rlcf	___awmod@divisor^0,f,c
  5205   003C5E  3605               	rlcf	(___awmod@divisor+1)^0,f,c
  5206   003C60  2A06               	incf	___awmod@counter^0,f,c
  5207   003C62                     l3770:
  5208   003C62  AE05               	btfss	(___awmod@divisor+1)^0,7,c
  5209   003C64  EF36  F01E         	goto	u2681
  5210   003C68  EF38  F01E         	goto	u2680
  5211   003C6C                     u2681:
  5212   003C6C  EF2D  F01E         	goto	l3768
  5213   003C70                     u2680:
  5214   003C70                     l3772:
  5215   003C70  5004               	movf	___awmod@divisor^0,w,c
  5216   003C72  5C02               	subwf	___awmod@dividend^0,w,c
  5217   003C74  5005               	movf	(___awmod@divisor+1)^0,w,c
  5218   003C76  5803               	subwfb	(___awmod@dividend+1)^0,w,c
  5219   003C78  A0D8               	btfss	status,0,c
  5220   003C7A  EF41  F01E         	goto	u2691
  5221   003C7E  EF43  F01E         	goto	u2690
  5222   003C82                     u2691:
  5223   003C82  EF47  F01E         	goto	l3776
  5224   003C86                     u2690:
  5225   003C86  5004               	movf	___awmod@divisor^0,w,c
  5226   003C88  5E02               	subwf	___awmod@dividend^0,f,c
  5227   003C8A  5005               	movf	(___awmod@divisor+1)^0,w,c
  5228   003C8C  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
  5229   003C8E                     l3776:
  5230   003C8E  90D8               	bcf	status,0,c
  5231   003C90  3205               	rrcf	(___awmod@divisor+1)^0,f,c
  5232   003C92  3204               	rrcf	___awmod@divisor^0,f,c
  5233   003C94  2E06               	decfsz	___awmod@counter^0,f,c
  5234   003C96  EF38  F01E         	goto	l3772
  5235   003C9A                     l3780:
  5236   003C9A  5007               	movf	___awmod@sign^0,w,c
  5237   003C9C  B4D8               	btfsc	status,2,c
  5238   003C9E  EF53  F01E         	goto	u2701
  5239   003CA2  EF55  F01E         	goto	u2700
  5240   003CA6                     u2701:
  5241   003CA6  EF59  F01E         	goto	l3784
  5242   003CAA                     u2700:
  5243   003CAA  6C02               	negf	___awmod@dividend^0,c
  5244   003CAC  1E03               	comf	(___awmod@dividend+1)^0,f,c
  5245   003CAE  B0D8               	btfsc	status,0,c
  5246   003CB0  2A03               	incf	(___awmod@dividend+1)^0,f,c
  5247   003CB2                     l3784:
  5248   003CB2  C002  F002         	movff	___awmod@dividend,?___awmod
  5249   003CB6  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
  5250   003CBA  0012               	return		;funcret
  5251   003CBC                     __end_of___awmod:
  5252                           	callstack 0
  5253                           
  5254 ;; *************** function ___awdiv *****************
  5255 ;; Defined at:
  5256 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  dividend        2    1[COMRAM] int 
  5259 ;;  divisor         2    3[COMRAM] int 
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;  quotient        2    7[COMRAM] int 
  5262 ;;  sign            1    6[COMRAM] unsigned char 
  5263 ;;  counter         1    5[COMRAM] unsigned char 
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  2    1[COMRAM] int 
  5266 ;; Registers used:
  5267 ;;		wreg, status,2, status,0
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5273 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5274 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5276 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5277 ;;Total ram usage:        8 bytes
  5278 ;; Hardware stack levels used: 1
  5279 ;; Hardware stack levels required when called: 1
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_dtoa
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           	psect	text22
  5288   003B48                     __ptext22:
  5289                           	callstack 0
  5290   003B48                     ___awdiv:
  5291                           	callstack 24
  5292   003B48  0E00               	movlw	0
  5293   003B4A  6E07               	movwf	___awdiv@sign^0,c
  5294   003B4C  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
  5295   003B4E  EFAD  F01D         	goto	u2590
  5296   003B52  EFAB  F01D         	goto	u2591
  5297   003B56                     u2591:
  5298   003B56  EFB3  F01D         	goto	l3716
  5299   003B5A                     u2590:
  5300   003B5A  6C04               	negf	___awdiv@divisor^0,c
  5301   003B5C  1E05               	comf	(___awdiv@divisor+1)^0,f,c
  5302   003B5E  B0D8               	btfsc	status,0,c
  5303   003B60  2A05               	incf	(___awdiv@divisor+1)^0,f,c
  5304   003B62  0E01               	movlw	1
  5305   003B64  6E07               	movwf	___awdiv@sign^0,c
  5306   003B66                     l3716:
  5307   003B66  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
  5308   003B68  EFBA  F01D         	goto	u2600
  5309   003B6C  EFB8  F01D         	goto	u2601
  5310   003B70                     u2601:
  5311   003B70  EFC0  F01D         	goto	l3722
  5312   003B74                     u2600:
  5313   003B74  6C02               	negf	___awdiv@dividend^0,c
  5314   003B76  1E03               	comf	(___awdiv@dividend+1)^0,f,c
  5315   003B78  B0D8               	btfsc	status,0,c
  5316   003B7A  2A03               	incf	(___awdiv@dividend+1)^0,f,c
  5317   003B7C  0E01               	movlw	1
  5318   003B7E  1A07               	xorwf	___awdiv@sign^0,f,c
  5319   003B80                     l3722:
  5320   003B80  0E00               	movlw	0
  5321   003B82  6E09               	movwf	(___awdiv@quotient+1)^0,c
  5322   003B84  0E00               	movlw	0
  5323   003B86  6E08               	movwf	___awdiv@quotient^0,c
  5324   003B88  5004               	movf	___awdiv@divisor^0,w,c
  5325   003B8A  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
  5326   003B8C  B4D8               	btfsc	status,2,c
  5327   003B8E  EFCB  F01D         	goto	u2611
  5328   003B92  EFCD  F01D         	goto	u2610
  5329   003B96                     u2611:
  5330   003B96  EFF5  F01D         	goto	l3744
  5331   003B9A                     u2610:
  5332   003B9A  0E01               	movlw	1
  5333   003B9C  6E06               	movwf	___awdiv@counter^0,c
  5334   003B9E  EFD5  F01D         	goto	l3730
  5335   003BA2                     l3728:
  5336   003BA2  90D8               	bcf	status,0,c
  5337   003BA4  3604               	rlcf	___awdiv@divisor^0,f,c
  5338   003BA6  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
  5339   003BA8  2A06               	incf	___awdiv@counter^0,f,c
  5340   003BAA                     l3730:
  5341   003BAA  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
  5342   003BAC  EFDA  F01D         	goto	u2621
  5343   003BB0  EFDC  F01D         	goto	u2620
  5344   003BB4                     u2621:
  5345   003BB4  EFD1  F01D         	goto	l3728
  5346   003BB8                     u2620:
  5347   003BB8                     l3732:
  5348   003BB8  90D8               	bcf	status,0,c
  5349   003BBA  3608               	rlcf	___awdiv@quotient^0,f,c
  5350   003BBC  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
  5351   003BBE  5004               	movf	___awdiv@divisor^0,w,c
  5352   003BC0  5C02               	subwf	___awdiv@dividend^0,w,c
  5353   003BC2  5005               	movf	(___awdiv@divisor+1)^0,w,c
  5354   003BC4  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
  5355   003BC6  A0D8               	btfss	status,0,c
  5356   003BC8  EFE8  F01D         	goto	u2631
  5357   003BCC  EFEA  F01D         	goto	u2630
  5358   003BD0                     u2631:
  5359   003BD0  EFEF  F01D         	goto	l3740
  5360   003BD4                     u2630:
  5361   003BD4  5004               	movf	___awdiv@divisor^0,w,c
  5362   003BD6  5E02               	subwf	___awdiv@dividend^0,f,c
  5363   003BD8  5005               	movf	(___awdiv@divisor+1)^0,w,c
  5364   003BDA  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
  5365   003BDC  8008               	bsf	___awdiv@quotient^0,0,c
  5366   003BDE                     l3740:
  5367   003BDE  90D8               	bcf	status,0,c
  5368   003BE0  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
  5369   003BE2  3204               	rrcf	___awdiv@divisor^0,f,c
  5370   003BE4  2E06               	decfsz	___awdiv@counter^0,f,c
  5371   003BE6  EFDC  F01D         	goto	l3732
  5372   003BEA                     l3744:
  5373   003BEA  5007               	movf	___awdiv@sign^0,w,c
  5374   003BEC  B4D8               	btfsc	status,2,c
  5375   003BEE  EFFB  F01D         	goto	u2641
  5376   003BF2  EFFD  F01D         	goto	u2640
  5377   003BF6                     u2641:
  5378   003BF6  EF01  F01E         	goto	l3748
  5379   003BFA                     u2640:
  5380   003BFA  6C08               	negf	___awdiv@quotient^0,c
  5381   003BFC  1E09               	comf	(___awdiv@quotient+1)^0,f,c
  5382   003BFE  B0D8               	btfsc	status,0,c
  5383   003C00  2A09               	incf	(___awdiv@quotient+1)^0,f,c
  5384   003C02                     l3748:
  5385   003C02  C008  F002         	movff	___awdiv@quotient,?___awdiv
  5386   003C06  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
  5387   003C0A  0012               	return		;funcret
  5388   003C0C                     __end_of___awdiv:
  5389                           	callstack 0
  5390                           
  5391 ;; *************** function _sendStringSerial4 *****************
  5392 ;; Defined at:
  5393 ;;		line 42 in file "serial.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  string          1    2[COMRAM] PTR unsigned char 
  5396 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), 
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;		None
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  1    wreg      void 
  5401 ;; Registers used:
  5402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5408 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5411 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5412 ;;Total ram usage:        1 bytes
  5413 ;; Hardware stack levels used: 1
  5414 ;; Hardware stack levels required when called: 2
  5415 ;; This function calls:
  5416 ;;		_sendCharSerial4
  5417 ;; This function is called by:
  5418 ;;		_send2USART
  5419 ;;		_sendAllReadings
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text23
  5424   00495C                     __ptext23:
  5425                           	callstack 0
  5426   00495C                     _sendStringSerial4:
  5427                           	callstack 27
  5428   00495C                     
  5429                           ;serial.c: 45:     while(*string != 0){
  5430   00495C  EFBB  F024         	goto	l4620
  5431   004960                     l4614:
  5432                           
  5433                           ;serial.c: 47:   sendCharSerial4(*string++);
  5434   004960  5003               	movf	sendStringSerial4@string^0,w,c
  5435   004962  6ED9               	movwf	fsr2l,c
  5436   004964  6ADA               	clrf	fsr2h,c
  5437   004966  50DF               	movf	indf2,w,c
  5438   004968  EC4E  F026         	call	_sendCharSerial4
  5439   00496C  2A03               	incf	sendStringSerial4@string^0,f,c
  5440   00496E                     
  5441                           ;serial.c: 48:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  5442   00496E  0E6A               	movlw	106
  5443   004970                     u5387:
  5444   004970  2EE8               	decfsz	wreg,f,c
  5445   004972  D7FE               	bra	u5387
  5446   004974  D000               	nop2	
  5447   004976                     l4620:
  5448                           
  5449                           ;serial.c: 45:     while(*string != 0){
  5450   004976  5003               	movf	sendStringSerial4@string^0,w,c
  5451   004978  6ED9               	movwf	fsr2l,c
  5452   00497A  6ADA               	clrf	fsr2h,c
  5453   00497C  50DF               	movf	indf2,w,c
  5454   00497E  A4D8               	btfss	status,2,c
  5455   004980  EFC4  F024         	goto	u3891
  5456   004984  EFC6  F024         	goto	u3890
  5457   004988                     u3891:
  5458   004988  EFB0  F024         	goto	l4614
  5459   00498C                     u3890:
  5460   00498C  0012               	return		;funcret
  5461   00498E                     __end_of_sendStringSerial4:
  5462                           	callstack 0
  5463                           
  5464 ;; *************** function _sendCharSerial4 *****************
  5465 ;; Defined at:
  5466 ;;		line 36 in file "serial.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  charToSend      1    wreg     unsigned char 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  charToSend      1    1[COMRAM] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5483 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5484 ;;Total ram usage:        1 bytes
  5485 ;; Hardware stack levels used: 1
  5486 ;; Hardware stack levels required when called: 1
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_sendStringSerial4
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text24
  5495   004C9C                     __ptext24:
  5496                           	callstack 0
  5497   004C9C                     _sendCharSerial4:
  5498                           	callstack 27
  5499                           
  5500                           ;incstack = 0
  5501                           ;sendCharSerial4@charToSend stored from wreg
  5502   004C9C  6E02               	movwf	sendCharSerial4@charToSend^0,c
  5503   004C9E                     l504:
  5504   004C9E  010E               	movlb	14	; () banked
  5505   004CA0  A537               	btfss	55,2,b	;volatile
  5506   004CA2  EF55  F026         	goto	u3471
  5507   004CA6  EF57  F026         	goto	u3470
  5508   004CAA                     u3471:
  5509   004CAA  EF4F  F026         	goto	l504
  5510   004CAE                     u3470:
  5511   004CAE                     
  5512                           ; BSR set to: 14
  5513                           ;serial.c: 38:     TX4REG = charToSend;
  5514   004CAE  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  5515   004CB2                     
  5516                           ; BSR set to: 14
  5517   004CB2  0012               	return		;funcret
  5518   004CB4                     __end_of_sendCharSerial4:
  5519                           	callstack 0
  5520                           
  5521 ;; *************** function _returnHome *****************
  5522 ;; Defined at:
  5523 ;;		line 108 in file "return_func.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;  mL              1    0[BANK0 ] PTR struct DC_motor
  5526 ;;		 -> motorL(9), 
  5527 ;;  mR              1    1[BANK0 ] PTR struct DC_motor
  5528 ;;		 -> motorR(9), 
  5529 ;;  path_step       2    2[BANK0 ] unsigned int 
  5530 ;;  factorR         2    4[BANK0 ] unsigned int 
  5531 ;;  factorL         2    6[BANK0 ] unsigned int 
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;  action_turn     1   12[BANK0 ] unsigned char 
  5534 ;;  i               2   13[BANK0 ] unsigned int 
  5535 ;;  time_ms         4    8[BANK0 ] long 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  1    wreg      void 
  5538 ;; Registers used:
  5539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5545 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5546 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5547 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5548 ;;      Totals:         2      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5549 ;;Total ram usage:       17 bytes
  5550 ;; Hardware stack levels used: 1
  5551 ;; Hardware stack levels required when called: 6
  5552 ;; This function calls:
  5553 ;;		_moveWhite
  5554 ;;		_reverseStraight
  5555 ;;		_reverseTurn
  5556 ;; This function is called by:
  5557 ;;		_is_white
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           	psect	text25
  5562   002E1E                     __ptext25:
  5563                           	callstack 0
  5564   002E1E                     _returnHome:
  5565                           	callstack 23
  5566   002E1E                     
  5567                           ;return_func.c: 108: void returnHome(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_step, unsigned int factorR, unsigned int factorL);return_func.c: 109: {;return_
      +                          func.c: 111:     long time_ms;;return_func.c: 114:     moveWhite(&motorL,&motorR);
  5568   002E1E  0EDE               	movlw	low _motorL
  5569   002E20  6E1D               	movwf	moveWhite@mL^0,c
  5570   002E22  0ED5               	movlw	low _motorR
  5571   002E24  6E1E               	movwf	moveWhite@mR^0,c
  5572   002E26  EC93  F023         	call	_moveWhite	;wreg free
  5573   002E2A                     
  5574                           ;return_func.c: 116:     if (path_step > 0) {
  5575   002E2A  0100               	movlb	0	; () banked
  5576   002E2C  5162               	movf	returnHome@path_step& (0+255),w,b
  5577   002E2E  1163               	iorwf	(returnHome@path_step+1)& (0+255),w,b
  5578   002E30  B4D8               	btfsc	status,2,c
  5579   002E32  EF1D  F017         	goto	u4471
  5580   002E36  EF1F  F017         	goto	u4470
  5581   002E3A                     u4471:
  5582   002E3A  EFC2  F017         	goto	l668
  5583   002E3E                     u4470:
  5584   002E3E                     
  5585                           ; BSR set to: 0
  5586                           ;return_func.c: 117:         for (unsigned int i = path_step - 1; ; i--) {
  5587   002E3E  0EFF               	movlw	255
  5588   002E40  2562               	addwf	returnHome@path_step& (0+255),w,b
  5589   002E42  6F6D               	movwf	returnHome@i& (0+255),b
  5590   002E44  0EFF               	movlw	255
  5591   002E46  2163               	addwfc	(returnHome@path_step+1)& (0+255),w,b
  5592   002E48  6F6E               	movwf	(returnHome@i+1)& (0+255),b
  5593   002E4A                     l5126:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;return_func.c: 119:             char action_turn = action[i];
  5597   002E4A  0E3C               	movlw	low _action
  5598   002E4C  256D               	addwf	returnHome@i& (0+255),w,b
  5599   002E4E  6ED9               	movwf	fsr2l,c
  5600   002E50  0E01               	movlw	high _action
  5601   002E52  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  5602   002E54  6EDA               	movwf	fsr2h,c
  5603   002E56  50DF               	movf	indf2,w,c
  5604   002E58  6F6C               	movwf	returnHome@action_turn& (0+255),b
  5605   002E5A                     
  5606                           ; BSR set to: 0
  5607                           ;return_func.c: 123:             if (action[i+1]== 5 || action[i+1]==7){
  5608   002E5A  0E3D               	movlw	low (_action+1)
  5609   002E5C  256D               	addwf	returnHome@i& (0+255),w,b
  5610   002E5E  6ED9               	movwf	fsr2l,c
  5611   002E60  0E01               	movlw	high (_action+1)
  5612   002E62  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  5613   002E64  6EDA               	movwf	fsr2h,c
  5614   002E66  0E05               	movlw	5
  5615   002E68  18DE               	xorwf	postinc2,w,c
  5616   002E6A  B4D8               	btfsc	status,2,c
  5617   002E6C  EF3A  F017         	goto	u4481
  5618   002E70  EF3C  F017         	goto	u4480
  5619   002E74                     u4481:
  5620   002E74  EF4B  F017         	goto	l5132
  5621   002E78                     u4480:
  5622   002E78                     
  5623                           ; BSR set to: 0
  5624   002E78  0E3D               	movlw	low (_action+1)
  5625   002E7A  256D               	addwf	returnHome@i& (0+255),w,b
  5626   002E7C  6ED9               	movwf	fsr2l,c
  5627   002E7E  0E01               	movlw	high (_action+1)
  5628   002E80  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  5629   002E82  6EDA               	movwf	fsr2h,c
  5630   002E84  0E07               	movlw	7
  5631   002E86  18DE               	xorwf	postinc2,w,c
  5632   002E88  A4D8               	btfss	status,2,c
  5633   002E8A  EF49  F017         	goto	u4491
  5634   002E8E  EF4B  F017         	goto	u4490
  5635   002E92                     u4491:
  5636   002E92  EF69  F017         	goto	l5134
  5637   002E96                     u4490:
  5638   002E96                     l5132:
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;return_func.c: 124:                 time_ms = time[i]-2250;
  5642   002E96  0E00               	movlw	low _time
  5643   002E98  6E59               	movwf	??_returnHome^0,c
  5644   002E9A  0E02               	movlw	high _time
  5645   002E9C  6E5A               	movwf	(??_returnHome+1)^0,c
  5646   002E9E  90D8               	bcf	status,0,c
  5647   002EA0  356D               	rlcf	returnHome@i& (0+255),w,b
  5648   002EA2  6ED9               	movwf	fsr2l,c
  5649   002EA4  356E               	rlcf	(returnHome@i+1)& (0+255),w,b
  5650   002EA6  6EDA               	movwf	fsr2h,c
  5651   002EA8  90D8               	bcf	status,0,c
  5652   002EAA  36D9               	rlcf	fsr2l,f,c
  5653   002EAC  36DA               	rlcf	fsr2h,f,c
  5654   002EAE  5059               	movf	??_returnHome^0,w,c
  5655   002EB0  26D9               	addwf	fsr2l,f,c
  5656   002EB2  505A               	movf	(??_returnHome+1)^0,w,c
  5657   002EB4  22DA               	addwfc	fsr2h,f,c
  5658   002EB6  0E36               	movlw	54
  5659   002EB8  24DE               	addwf	postinc2,w,c
  5660   002EBA  6F68               	movwf	returnHome@time_ms& (0+255),b
  5661   002EBC  0EF7               	movlw	247
  5662   002EBE  20DE               	addwfc	postinc2,w,c
  5663   002EC0  6F69               	movwf	(returnHome@time_ms+1)& (0+255),b
  5664   002EC2  0EFF               	movlw	255
  5665   002EC4  20DE               	addwfc	postinc2,w,c
  5666   002EC6  6F6A               	movwf	(returnHome@time_ms+2)& (0+255),b
  5667   002EC8  0EFF               	movlw	255
  5668   002ECA  20DE               	addwfc	postinc2,w,c
  5669   002ECC  6F6B               	movwf	(returnHome@time_ms+3)& (0+255),b
  5670                           
  5671                           ;return_func.c: 125:             }else{
  5672   002ECE  EF81  F017         	goto	l5136
  5673   002ED2                     l5134:
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;return_func.c: 126:                 time_ms = time[i];
  5677   002ED2  0E00               	movlw	low _time
  5678   002ED4  6E59               	movwf	??_returnHome^0,c
  5679   002ED6  0E02               	movlw	high _time
  5680   002ED8  6E5A               	movwf	(??_returnHome+1)^0,c
  5681   002EDA  90D8               	bcf	status,0,c
  5682   002EDC  356D               	rlcf	returnHome@i& (0+255),w,b
  5683   002EDE  6ED9               	movwf	fsr2l,c
  5684   002EE0  356E               	rlcf	(returnHome@i+1)& (0+255),w,b
  5685   002EE2  6EDA               	movwf	fsr2h,c
  5686   002EE4  90D8               	bcf	status,0,c
  5687   002EE6  36D9               	rlcf	fsr2l,f,c
  5688   002EE8  36DA               	rlcf	fsr2h,f,c
  5689   002EEA  5059               	movf	??_returnHome^0,w,c
  5690   002EEC  26D9               	addwf	fsr2l,f,c
  5691   002EEE  505A               	movf	(??_returnHome+1)^0,w,c
  5692   002EF0  22DA               	addwfc	fsr2h,f,c
  5693   002EF2  CFDE F068          	movff	postinc2,returnHome@time_ms
  5694   002EF6  CFDE F069          	movff	postinc2,returnHome@time_ms+1
  5695   002EFA  CFDE F06A          	movff	postinc2,returnHome@time_ms+2
  5696   002EFE  CFDE F06B          	movff	postinc2,returnHome@time_ms+3
  5697   002F02                     l5136:
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;return_func.c: 129:             if (action_turn == 0) {
  5701   002F02  516C               	movf	returnHome@action_turn& (0+255),w,b
  5702   002F04  A4D8               	btfss	status,2,c
  5703   002F06  EF87  F017         	goto	u4501
  5704   002F0A  EF89  F017         	goto	u4500
  5705   002F0E                     u4501:
  5706   002F0E  EF99  F017         	goto	l5140
  5707   002F12                     u4500:
  5708   002F12                     
  5709                           ; BSR set to: 0
  5710                           ;return_func.c: 130:                 reverseStraight(mL, mR, time_ms);
  5711   002F12  C060  F051         	movff	returnHome@mL,reverseStraight@mL
  5712   002F16  C061  F052         	movff	returnHome@mR,reverseStraight@mR
  5713   002F1A  C068  F053         	movff	returnHome@time_ms,reverseStraight@time_ms
  5714   002F1E  C069  F054         	movff	returnHome@time_ms+1,reverseStraight@time_ms+1
  5715   002F22  C06A  F055         	movff	returnHome@time_ms+2,reverseStraight@time_ms+2
  5716   002F26  C06B  F056         	movff	returnHome@time_ms+3,reverseStraight@time_ms+3
  5717   002F2A  ECB2  F023         	call	_reverseStraight	;wreg free
  5718                           
  5719                           ;return_func.c: 131:             } else {
  5720   002F2E  EFB1  F017         	goto	l5142
  5721   002F32                     l5140:
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;return_func.c: 132:                 reverseTurn(mL, mR, action_turn, time_ms, factorR, 
      +                          factorL);
  5725   002F32  C060  F01F         	movff	returnHome@mL,reverseTurn@mL
  5726   002F36  C061  F020         	movff	returnHome@mR,reverseTurn@mR
  5727   002F3A  C06C  F021         	movff	returnHome@action_turn,reverseTurn@actionStep
  5728   002F3E  C068  F022         	movff	returnHome@time_ms,reverseTurn@time_ms
  5729   002F42  C069  F023         	movff	returnHome@time_ms+1,reverseTurn@time_ms+1
  5730   002F46  C06A  F024         	movff	returnHome@time_ms+2,reverseTurn@time_ms+2
  5731   002F4A  C06B  F025         	movff	returnHome@time_ms+3,reverseTurn@time_ms+3
  5732   002F4E  C064  F026         	movff	returnHome@factorR,reverseTurn@factorR
  5733   002F52  C065  F027         	movff	returnHome@factorR+1,reverseTurn@factorR+1
  5734   002F56  C066  F028         	movff	returnHome@factorL,reverseTurn@factorL
  5735   002F5A  C067  F029         	movff	returnHome@factorL+1,reverseTurn@factorL+1
  5736   002F5E  EC74  F018         	call	_reverseTurn	;wreg free
  5737   002F62                     l5142:
  5738                           
  5739                           ;return_func.c: 135:             if (i == 0) break;
  5740   002F62  0100               	movlb	0	; () banked
  5741   002F64  516D               	movf	returnHome@i& (0+255),w,b
  5742   002F66  116E               	iorwf	(returnHome@i+1)& (0+255),w,b
  5743   002F68  A4D8               	btfss	status,2,c
  5744   002F6A  EFB9  F017         	goto	u4511
  5745   002F6E  EFBB  F017         	goto	u4510
  5746   002F72                     u4511:
  5747   002F72  EFBD  F017         	goto	l5146
  5748   002F76                     u4510:
  5749   002F76  EFC2  F017         	goto	l668
  5750   002F7A                     l5146:
  5751                           
  5752                           ; BSR set to: 0
  5753                           ;return_func.c: 136:         }
  5754   002F7A  076D               	decf	returnHome@i& (0+255),f,b
  5755   002F7C  A0D8               	btfss	status,0,c
  5756   002F7E  076E               	decf	(returnHome@i+1)& (0+255),f,b
  5757   002F80  EF25  F017         	goto	l5126
  5758   002F84                     l668:
  5759                           
  5760                           ; BSR set to: 0
  5761   002F84  0003               	sleep		;# 
  5762   002F86  0012               	return		;funcret
  5763   002F88                     __end_of_returnHome:
  5764                           	callstack 0
  5765                           
  5766 ;; *************** function _reverseTurn *****************
  5767 ;; Defined at:
  5768 ;;		line 25 in file "return_func.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  5771 ;;		 -> motorL(9), 
  5772 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  5773 ;;		 -> motorR(9), 
  5774 ;;  actionStep      1   32[COMRAM] unsigned char 
  5775 ;;  time_ms         4   33[COMRAM] long 
  5776 ;;  factorR         2   37[COMRAM] unsigned int 
  5777 ;;  factorL         2   39[COMRAM] unsigned int 
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5789 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5791 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5792 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5793 ;;Total ram usage:       13 bytes
  5794 ;; Hardware stack levels used: 1
  5795 ;; Hardware stack levels required when called: 5
  5796 ;; This function calls:
  5797 ;;		_backHalf
  5798 ;;		_left135
  5799 ;;		_left90
  5800 ;;		_right135
  5801 ;;		_right90
  5802 ;;		_turn180
  5803 ;; This function is called by:
  5804 ;;		_returnHome
  5805 ;; This function uses a non-reentrant model
  5806 ;;
  5807                           
  5808                           	psect	text26
  5809   0030E8                     __ptext26:
  5810                           	callstack 0
  5811   0030E8                     _reverseTurn:
  5812                           	callstack 23
  5813   0030E8                     
  5814                           ;return_func.c: 26:     if (actionStep == 1) {
  5815   0030E8  0421               	decf	reverseTurn@actionStep^0,w,c
  5816   0030EA  A4D8               	btfss	status,2,c
  5817   0030EC  EF7A  F018         	goto	u3901
  5818   0030F0  EF7C  F018         	goto	u3900
  5819   0030F4                     u3901:
  5820   0030F4  EFA0  F018         	goto	l4644
  5821   0030F8                     u3900:
  5822   0030F8                     
  5823                           ;return_func.c: 29:         left90(mL,mR, factorL);
  5824   0030F8  C01F  F019         	movff	reverseTurn@mL,left90@mL
  5825   0030FC  C020  F01A         	movff	reverseTurn@mR,left90@mR
  5826   003100  C028  F01B         	movff	reverseTurn@factorL,left90@factorL
  5827   003104  C029  F01C         	movff	reverseTurn@factorL+1,left90@factorL+1
  5828   003108  EC76  F025         	call	_left90	;wreg free
  5829   00310C                     l4638:
  5830                           
  5831                           ;return_func.c: 30:         _delay((unsigned long)((500)*(64000000/4000.0)));
  5832   00310C  0E29               	movlw	41
  5833   00310E  6E2B               	movwf	(??_reverseTurn+1)^0,c
  5834   003110  0E96               	movlw	150
  5835   003112  6E2A               	movwf	??_reverseTurn^0,c
  5836   003114  0E7F               	movlw	127
  5837   003116                     u5397:
  5838   003116  2EE8               	decfsz	wreg,f,c
  5839   003118  D7FE               	bra	u5397
  5840   00311A  2E2A               	decfsz	??_reverseTurn^0,f,c
  5841   00311C  D7FC               	bra	u5397
  5842   00311E  2E2B               	decfsz	(??_reverseTurn+1)^0,f,c
  5843   003120  D7FA               	bra	u5397
  5844   003122  0000               	nop	
  5845   003124                     
  5846                           ;return_func.c: 31:         backHalf(mL,mR);
  5847   003124  C01F  F019         	movff	reverseTurn@mL,backHalf@mL
  5848   003128  C020  F01A         	movff	reverseTurn@mR,backHalf@mR
  5849   00312C  ECA7  F025         	call	_backHalf	;wreg free
  5850   003130                     
  5851                           ;return_func.c: 32:         backHalf(mL,mR);
  5852   003130  C01F  F019         	movff	reverseTurn@mL,backHalf@mL
  5853   003134  C020  F01A         	movff	reverseTurn@mR,backHalf@mR
  5854   003138  ECA7  F025         	call	_backHalf	;wreg free
  5855                           
  5856                           ;return_func.c: 35:     } else if (actionStep == 2) {
  5857   00313C  EF1E  F019         	goto	l662
  5858   003140                     l4644:
  5859   003140  0E02               	movlw	2
  5860   003142  1821               	xorwf	reverseTurn@actionStep^0,w,c
  5861   003144  A4D8               	btfss	status,2,c
  5862   003146  EFA7  F018         	goto	u3911
  5863   00314A  EFA9  F018         	goto	u3910
  5864   00314E                     u3911:
  5865   00314E  EFB5  F018         	goto	l4654
  5866   003152                     u3910:
  5867   003152                     
  5868                           ;return_func.c: 38:         right90(mL,mR, factorR);
  5869   003152  C01F  F019         	movff	reverseTurn@mL,right90@mL
  5870   003156  C020  F01A         	movff	reverseTurn@mR,right90@mR
  5871   00315A  C026  F01B         	movff	reverseTurn@factorR,right90@factorR
  5872   00315E  C027  F01C         	movff	reverseTurn@factorR+1,right90@factorR+1
  5873   003162  EC5D  F025         	call	_right90	;wreg free
  5874   003166  EF86  F018         	goto	l4638
  5875   00316A                     l4654:
  5876   00316A  0E03               	movlw	3
  5877   00316C  1821               	xorwf	reverseTurn@actionStep^0,w,c
  5878   00316E  A4D8               	btfss	status,2,c
  5879   003170  EFBC  F018         	goto	u3921
  5880   003174  EFBE  F018         	goto	u3920
  5881   003178                     u3921:
  5882   003178  EFC6  F018         	goto	l4664
  5883   00317C                     u3920:
  5884   00317C                     
  5885                           ;return_func.c: 47:         turn180(mL,mR);
  5886   00317C  C01F  F019         	movff	reverseTurn@mL,turn180@mL
  5887   003180  C020  F01A         	movff	reverseTurn@mR,turn180@mR
  5888   003184  EC44  F025         	call	_turn180	;wreg free
  5889   003188  EF86  F018         	goto	l4638
  5890   00318C                     l4664:
  5891   00318C  0E04               	movlw	4
  5892   00318E  1821               	xorwf	reverseTurn@actionStep^0,w,c
  5893   003190  A4D8               	btfss	status,2,c
  5894   003192  EFCD  F018         	goto	u3931
  5895   003196  EFCF  F018         	goto	u3930
  5896   00319A                     u3931:
  5897   00319A  EFD7  F018         	goto	l4674
  5898   00319E                     u3930:
  5899   00319E                     
  5900                           ;return_func.c: 56:         right135(mL,mR);
  5901   00319E  C01F  F019         	movff	reverseTurn@mL,right135@mL
  5902   0031A2  C020  F01A         	movff	reverseTurn@mR,right135@mR
  5903   0031A6  ECF9  F024         	call	_right135	;wreg free
  5904   0031AA  EF86  F018         	goto	l4638
  5905   0031AE                     l4674:
  5906   0031AE  0E05               	movlw	5
  5907   0031B0  1821               	xorwf	reverseTurn@actionStep^0,w,c
  5908   0031B2  A4D8               	btfss	status,2,c
  5909   0031B4  EFDE  F018         	goto	u3941
  5910   0031B8  EFE0  F018         	goto	u3940
  5911   0031BC                     u3941:
  5912   0031BC  EFF8  F018         	goto	l4680
  5913   0031C0                     u3940:
  5914   0031C0                     
  5915                           ;return_func.c: 65:         left90(mL,mR, factorL);
  5916   0031C0  C01F  F019         	movff	reverseTurn@mL,left90@mL
  5917   0031C4  C020  F01A         	movff	reverseTurn@mR,left90@mR
  5918   0031C8  C028  F01B         	movff	reverseTurn@factorL,left90@factorL
  5919   0031CC  C029  F01C         	movff	reverseTurn@factorL+1,left90@factorL+1
  5920   0031D0  EC76  F025         	call	_left90	;wreg free
  5921   0031D4                     l4678:
  5922                           
  5923                           ;return_func.c: 66:         _delay((unsigned long)((500)*(64000000/4000.0)));
  5924   0031D4  0E29               	movlw	41
  5925   0031D6  6E2B               	movwf	(??_reverseTurn+1)^0,c
  5926   0031D8  0E96               	movlw	150
  5927   0031DA  6E2A               	movwf	??_reverseTurn^0,c
  5928   0031DC  0E7F               	movlw	127
  5929   0031DE                     u5407:
  5930   0031DE  2EE8               	decfsz	wreg,f,c
  5931   0031E0  D7FE               	bra	u5407
  5932   0031E2  2E2A               	decfsz	??_reverseTurn^0,f,c
  5933   0031E4  D7FC               	bra	u5407
  5934   0031E6  2E2B               	decfsz	(??_reverseTurn+1)^0,f,c
  5935   0031E8  D7FA               	bra	u5407
  5936   0031EA  0000               	nop	
  5937                           
  5938                           ;return_func.c: 68:     } else if (actionStep == 6) {
  5939   0031EC  EF1E  F019         	goto	l662
  5940   0031F0                     l4680:
  5941   0031F0  0E06               	movlw	6
  5942   0031F2  1821               	xorwf	reverseTurn@actionStep^0,w,c
  5943   0031F4  A4D8               	btfss	status,2,c
  5944   0031F6  EFFF  F018         	goto	u3951
  5945   0031FA  EF01  F019         	goto	u3950
  5946   0031FE                     u3951:
  5947   0031FE  EF09  F019         	goto	l4690
  5948   003202                     u3950:
  5949   003202                     
  5950                           ;return_func.c: 71:         left135(mL,mR);
  5951   003202  C01F  F019         	movff	reverseTurn@mL,left135@mL
  5952   003206  C020  F01A         	movff	reverseTurn@mR,left135@mR
  5953   00320A  EC8F  F025         	call	_left135	;wreg free
  5954   00320E  EF86  F018         	goto	l4638
  5955   003212                     l4690:
  5956   003212  0E07               	movlw	7
  5957   003214  1821               	xorwf	reverseTurn@actionStep^0,w,c
  5958   003216  A4D8               	btfss	status,2,c
  5959   003218  EF10  F019         	goto	u3961
  5960   00321C  EF12  F019         	goto	u3960
  5961   003220                     u3961:
  5962   003220  EF1E  F019         	goto	l656
  5963   003224                     u3960:
  5964   003224                     
  5965                           ;return_func.c: 80:         right90(mL,mR, factorR);
  5966   003224  C01F  F019         	movff	reverseTurn@mL,right90@mL
  5967   003228  C020  F01A         	movff	reverseTurn@mR,right90@mR
  5968   00322C  C026  F01B         	movff	reverseTurn@factorR,right90@factorR
  5969   003230  C027  F01C         	movff	reverseTurn@factorR+1,right90@factorR+1
  5970   003234  EC5D  F025         	call	_right90	;wreg free
  5971   003238  EFEA  F018         	goto	l4678
  5972   00323C                     l656:
  5973   00323C                     l662:
  5974   00323C  0012               	return		;funcret
  5975   00323E                     __end_of_reverseTurn:
  5976                           	callstack 0
  5977                           
  5978 ;; *************** function _reverseStraight *****************
  5979 ;; Defined at:
  5980 ;;		line 89 in file "return_func.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;  mL              1   80[COMRAM] PTR struct DC_motor
  5983 ;;		 -> motorL(9), 
  5984 ;;  mR              1   81[COMRAM] PTR struct DC_motor
  5985 ;;		 -> motorR(9), 
  5986 ;;  time_ms         4   82[COMRAM] long 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;  delayMs         2    0        unsigned int 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  1    wreg      void 
  5991 ;; Registers used:
  5992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5998 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6000 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6001 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6002 ;;Total ram usage:        8 bytes
  6003 ;; Hardware stack levels used: 1
  6004 ;; Hardware stack levels required when called: 4
  6005 ;; This function calls:
  6006 ;;		_customDelayMs
  6007 ;;		_fullSpeedAhead
  6008 ;;		_stop
  6009 ;; This function is called by:
  6010 ;;		_returnHome
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           	psect	text27
  6015   004764                     __ptext27:
  6016                           	callstack 0
  6017   004764                     _reverseStraight:
  6018                           	callstack 24
  6019   004764                     
  6020                           ;return_func.c: 101:     fullSpeedAhead(&motorL,&motorR);
  6021   004764  0EDE               	movlw	low _motorL
  6022   004766  6E4C               	movwf	fullSpeedAhead@mL^0,c
  6023   004768  0ED5               	movlw	low _motorR
  6024   00476A  6E4D               	movwf	fullSpeedAhead@mR^0,c
  6025   00476C  EC3F  F01D         	call	_fullSpeedAhead	;wreg free
  6026   004770                     
  6027                           ;return_func.c: 102:     customDelayMs(delayMs);
  6028   004770  0E06               	movlw	6
  6029   004772  6E03               	movwf	(customDelayMs@milliseconds+1)^0,c
  6030   004774  0E0E               	movlw	14
  6031   004776  6E02               	movwf	customDelayMs@milliseconds^0,c
  6032   004778  EC44  F024         	call	_customDelayMs	;wreg free
  6033   00477C                     
  6034                           ;return_func.c: 103:     stop(&motorL,&motorR);
  6035   00477C  0EDE               	movlw	low _motorL
  6036   00477E  6E14               	movwf	stop@mL^0,c
  6037   004780  0ED5               	movlw	low _motorR
  6038   004782  6E15               	movwf	stop@mR^0,c
  6039   004784  EC3F  F020         	call	_stop	;wreg free
  6040   004788                     
  6041                           ;return_func.c: 104:     _delay((unsigned long)((300)*(64000000/4000.0)));
  6042   004788  0E19               	movlw	25
  6043   00478A  6E58               	movwf	(??_reverseStraight+1)^0,c
  6044   00478C  0E5A               	movlw	90
  6045   00478E  6E57               	movwf	??_reverseStraight^0,c
  6046   004790  0EB2               	movlw	178
  6047   004792                     u5417:
  6048   004792  2EE8               	decfsz	wreg,f,c
  6049   004794  D7FE               	bra	u5417
  6050   004796  2E57               	decfsz	??_reverseStraight^0,f,c
  6051   004798  D7FC               	bra	u5417
  6052   00479A  2E58               	decfsz	(??_reverseStraight+1)^0,f,c
  6053   00479C  D7FA               	bra	u5417
  6054   00479E  0012               	return		;funcret
  6055   0047A0                     __end_of_reverseStraight:
  6056                           	callstack 0
  6057                           
  6058 ;; *************** function _moveWhite *****************
  6059 ;; Defined at:
  6060 ;;		line 81 in file "maze_navigation.c"
  6061 ;; Parameters:    Size  Location     Type
  6062 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6063 ;;		 -> motorL(9), 
  6064 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6065 ;;		 -> motorR(9), 
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;		None
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  1    wreg      void 
  6070 ;; Registers used:
  6071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6077 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6079 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6080 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6081 ;;Total ram usage:        4 bytes
  6082 ;; Hardware stack levels used: 1
  6083 ;; Hardware stack levels required when called: 5
  6084 ;; This function calls:
  6085 ;;		_backHalf
  6086 ;;		_turn180
  6087 ;; This function is called by:
  6088 ;;		_returnHome
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           	psect	text28
  6093   004726                     __ptext28:
  6094                           	callstack 0
  6095   004726                     _moveWhite:
  6096                           	callstack 23
  6097   004726                     
  6098                           ;maze_navigation.c: 81: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);maze_na
      +                          vigation.c: 82: {;maze_navigation.c: 84:     backHalf(mL,mR);
  6099   004726  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  6100   00472A  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  6101   00472E  ECA7  F025         	call	_backHalf	;wreg free
  6102   004732                     
  6103                           ;maze_navigation.c: 85:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6104   004732  0E29               	movlw	41
  6105   004734  6E20               	movwf	(??_moveWhite+1)^0,c
  6106   004736  0E96               	movlw	150
  6107   004738  6E1F               	movwf	??_moveWhite^0,c
  6108   00473A  0E7F               	movlw	127
  6109   00473C                     u5427:
  6110   00473C  2EE8               	decfsz	wreg,f,c
  6111   00473E  D7FE               	bra	u5427
  6112   004740  2E1F               	decfsz	??_moveWhite^0,f,c
  6113   004742  D7FC               	bra	u5427
  6114   004744  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  6115   004746  D7FA               	bra	u5427
  6116   004748  0000               	nop	
  6117   00474A                     
  6118                           ;maze_navigation.c: 86:     turn180(mL,mR);
  6119   00474A  C01D  F019         	movff	moveWhite@mL,turn180@mL
  6120   00474E  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  6121   004752  EC44  F025         	call	_turn180	;wreg free
  6122   004756                     
  6123                           ;maze_navigation.c: 87:     backHalf(mL,mR);
  6124   004756  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  6125   00475A  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  6126   00475E  ECA7  F025         	call	_backHalf	;wreg free
  6127   004762  0012               	return		;funcret
  6128   004764                     __end_of_moveWhite:
  6129                           	callstack 0
  6130                           
  6131 ;; *************** function _get16bitTMR0val *****************
  6132 ;; Defined at:
  6133 ;;		line 35 in file "timers.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  path_step       2   27[COMRAM] unsigned int 
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  time_ms         4   33[COMRAM] long 
  6138 ;;  combined_val    2   37[COMRAM] int 
  6139 ;; Return value:  Size  Location     Type
  6140 ;;                  1    wreg      void 
  6141 ;; Registers used:
  6142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6148 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6149 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6150 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6151 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6152 ;;Total ram usage:       12 bytes
  6153 ;; Hardware stack levels used: 1
  6154 ;; Hardware stack levels required when called: 2
  6155 ;; This function calls:
  6156 ;;		___aldiv
  6157 ;;		___lmul
  6158 ;;		_logAction
  6159 ;; This function is called by:
  6160 ;;		_is_white
  6161 ;;		_looking_for_card
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           	psect	text29
  6166   003EBE                     __ptext29:
  6167                           	callstack 0
  6168   003EBE                     _get16bitTMR0val:
  6169                           	callstack 27
  6170   003EBE                     
  6171                           ;timers.c: 35: void get16bitTMR0val(unsigned int path_step);timers.c: 36: {;timers.c: 37
      +                          :     int combined_value;;timers.c: 38:     combined_value = TMR0L | (TMR0H << 8);
  6172   003EBE  50D4               	movf	212,w,c	;volatile
  6173   003EC0  6E1F               	movwf	(??_get16bitTMR0val+1)^0,c
  6174   003EC2  6A1E               	clrf	??_get16bitTMR0val^0,c
  6175   003EC4  50D3               	movf	211,w,c	;volatile
  6176   003EC6  6E20               	movwf	(??_get16bitTMR0val+2)^0,c
  6177   003EC8  6A21               	clrf	(??_get16bitTMR0val+3)^0,c
  6178   003ECA  501E               	movf	??_get16bitTMR0val^0,w,c
  6179   003ECC  1020               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6180   003ECE  6E26               	movwf	get16bitTMR0val@combined_value^0,c
  6181   003ED0  501F               	movf	(??_get16bitTMR0val+1)^0,w,c
  6182   003ED2  1021               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6183   003ED4  6E27               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6184   003ED6                     
  6185                           ;timers.c: 39:     long time_ms = combined_value*65535*4*8192/64000;
  6186   003ED6  C026  F002         	movff	get16bitTMR0val@combined_value,___lmul@multiplier
  6187   003EDA  C027  F003         	movff	get16bitTMR0val@combined_value+1,___lmul@multiplier+1
  6188   003EDE  0E00               	movlw	0
  6189   003EE0  BE03               	btfsc	(___lmul@multiplier+1)^0,7,c
  6190   003EE2  0EFF               	movlw	-1
  6191   003EE4  6E04               	movwf	(___lmul@multiplier+2)^0,c
  6192   003EE6  6E05               	movwf	(___lmul@multiplier+3)^0,c
  6193   003EE8  0E00               	movlw	0
  6194   003EEA  6E06               	movwf	___lmul@multiplicand^0,c
  6195   003EEC  0E80               	movlw	128
  6196   003EEE  6E07               	movwf	(___lmul@multiplicand+1)^0,c
  6197   003EF0  0EFF               	movlw	255
  6198   003EF2  6E08               	movwf	(___lmul@multiplicand+2)^0,c
  6199   003EF4  0E7F               	movlw	127
  6200   003EF6  6E09               	movwf	(___lmul@multiplicand+3)^0,c
  6201   003EF8  EC79  F021         	call	___lmul	;wreg free
  6202   003EFC  C002  F00E         	movff	?___lmul,___aldiv@dividend
  6203   003F00  C003  F00F         	movff	?___lmul+1,___aldiv@dividend+1
  6204   003F04  C004  F010         	movff	?___lmul+2,___aldiv@dividend+2
  6205   003F08  C005  F011         	movff	?___lmul+3,___aldiv@dividend+3
  6206   003F0C  0E00               	movlw	0
  6207   003F0E  6E12               	movwf	___aldiv@divisor^0,c
  6208   003F10  0EFA               	movlw	250
  6209   003F12  6E13               	movwf	(___aldiv@divisor+1)^0,c
  6210   003F14  0E00               	movlw	0
  6211   003F16  6E14               	movwf	(___aldiv@divisor+2)^0,c
  6212   003F18  0E00               	movlw	0
  6213   003F1A  6E15               	movwf	(___aldiv@divisor+3)^0,c
  6214   003F1C  EC62  F01A         	call	___aldiv	;wreg free
  6215   003F20  C00E  F022         	movff	?___aldiv,get16bitTMR0val@time_ms
  6216   003F24  C00F  F023         	movff	?___aldiv+1,get16bitTMR0val@time_ms+1
  6217   003F28  C010  F024         	movff	?___aldiv+2,get16bitTMR0val@time_ms+2
  6218   003F2C  C011  F025         	movff	?___aldiv+3,get16bitTMR0val@time_ms+3
  6219   003F30                     
  6220                           ;timers.c: 41:     logAction(0, time_ms, path_step);
  6221   003F30  C022  F002         	movff	get16bitTMR0val@time_ms,logAction@newTime
  6222   003F34  C023  F003         	movff	get16bitTMR0val@time_ms+1,logAction@newTime+1
  6223   003F38  C024  F004         	movff	get16bitTMR0val@time_ms+2,logAction@newTime+2
  6224   003F3C  C025  F005         	movff	get16bitTMR0val@time_ms+3,logAction@newTime+3
  6225   003F40  C01C  F006         	movff	get16bitTMR0val@path_step,logAction@path_step
  6226   003F44  C01D  F007         	movff	get16bitTMR0val@path_step+1,logAction@path_step+1
  6227   003F48  0E00               	movlw	0
  6228   003F4A  ECAE  F021         	call	_logAction
  6229   003F4E                     
  6230                           ;timers.c: 42:     TMR0L = 0;
  6231   003F4E  0E00               	movlw	0
  6232   003F50  6ED3               	movwf	211,c	;volatile
  6233   003F52                     
  6234                           ;timers.c: 43:     TMR0H = 0;
  6235   003F52  0E00               	movlw	0
  6236   003F54  6ED4               	movwf	212,c	;volatile
  6237   003F56  0012               	return		;funcret
  6238   003F58                     __end_of_get16bitTMR0val:
  6239                           	callstack 0
  6240                           
  6241 ;; *************** function ___lmul *****************
  6242 ;; Defined at:
  6243 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;  multiplier      4    1[COMRAM] unsigned long 
  6246 ;;  multiplicand    4    5[COMRAM] unsigned long 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  product         4    9[COMRAM] unsigned long 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  4    1[COMRAM] unsigned long 
  6251 ;; Registers used:
  6252 ;;		wreg, status,2, status,0
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6258 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6259 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6261 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6262 ;;Total ram usage:       12 bytes
  6263 ;; Hardware stack levels used: 1
  6264 ;; Hardware stack levels required when called: 1
  6265 ;; This function calls:
  6266 ;;		Nothing
  6267 ;; This function is called by:
  6268 ;;		_get16bitTMR0val
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text30
  6273   0042F2                     __ptext30:
  6274                           	callstack 0
  6275   0042F2                     ___lmul:
  6276                           	callstack 27
  6277   0042F2  0E00               	movlw	0
  6278   0042F4  6E0A               	movwf	___lmul@product^0,c
  6279   0042F6  0E00               	movlw	0
  6280   0042F8  6E0B               	movwf	(___lmul@product+1)^0,c
  6281   0042FA  0E00               	movlw	0
  6282   0042FC  6E0C               	movwf	(___lmul@product+2)^0,c
  6283   0042FE  0E00               	movlw	0
  6284   004300  6E0D               	movwf	(___lmul@product+3)^0,c
  6285   004302                     l4716:
  6286   004302  A002               	btfss	___lmul@multiplier^0,0,c
  6287   004304  EF86  F021         	goto	u3971
  6288   004308  EF88  F021         	goto	u3970
  6289   00430C                     u3971:
  6290   00430C  EF90  F021         	goto	l4720
  6291   004310                     u3970:
  6292   004310  5006               	movf	___lmul@multiplicand^0,w,c
  6293   004312  260A               	addwf	___lmul@product^0,f,c
  6294   004314  5007               	movf	(___lmul@multiplicand+1)^0,w,c
  6295   004316  220B               	addwfc	(___lmul@product+1)^0,f,c
  6296   004318  5008               	movf	(___lmul@multiplicand+2)^0,w,c
  6297   00431A  220C               	addwfc	(___lmul@product+2)^0,f,c
  6298   00431C  5009               	movf	(___lmul@multiplicand+3)^0,w,c
  6299   00431E  220D               	addwfc	(___lmul@product+3)^0,f,c
  6300   004320                     l4720:
  6301   004320  90D8               	bcf	status,0,c
  6302   004322  3606               	rlcf	___lmul@multiplicand^0,f,c
  6303   004324  3607               	rlcf	(___lmul@multiplicand+1)^0,f,c
  6304   004326  3608               	rlcf	(___lmul@multiplicand+2)^0,f,c
  6305   004328  3609               	rlcf	(___lmul@multiplicand+3)^0,f,c
  6306   00432A  90D8               	bcf	status,0,c
  6307   00432C  3205               	rrcf	(___lmul@multiplier+3)^0,f,c
  6308   00432E  3204               	rrcf	(___lmul@multiplier+2)^0,f,c
  6309   004330  3203               	rrcf	(___lmul@multiplier+1)^0,f,c
  6310   004332  3202               	rrcf	___lmul@multiplier^0,f,c
  6311   004334  5002               	movf	___lmul@multiplier^0,w,c
  6312   004336  1003               	iorwf	(___lmul@multiplier+1)^0,w,c
  6313   004338  1004               	iorwf	(___lmul@multiplier+2)^0,w,c
  6314   00433A  1005               	iorwf	(___lmul@multiplier+3)^0,w,c
  6315   00433C  A4D8               	btfss	status,2,c
  6316   00433E  EFA3  F021         	goto	u3981
  6317   004342  EFA5  F021         	goto	u3980
  6318   004346                     u3981:
  6319   004346  EF81  F021         	goto	l4716
  6320   00434A                     u3980:
  6321   00434A  C00A  F002         	movff	___lmul@product,?___lmul
  6322   00434E  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  6323   004352  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  6324   004356  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  6325   00435A  0012               	return		;funcret
  6326   00435C                     __end_of___lmul:
  6327                           	callstack 0
  6328                           
  6329 ;; *************** function ___aldiv *****************
  6330 ;; Defined at:
  6331 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  dividend        4   13[COMRAM] long 
  6334 ;;  divisor         4   17[COMRAM] long 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  quotient        4   23[COMRAM] long 
  6337 ;;  sign            1   22[COMRAM] unsigned char 
  6338 ;;  counter         1   21[COMRAM] unsigned char 
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  4   13[COMRAM] long 
  6341 ;; Registers used:
  6342 ;;		wreg, status,2, status,0
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6348 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6349 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6351 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6352 ;;Total ram usage:       14 bytes
  6353 ;; Hardware stack levels used: 1
  6354 ;; Hardware stack levels required when called: 1
  6355 ;; This function calls:
  6356 ;;		Nothing
  6357 ;; This function is called by:
  6358 ;;		_get16bitTMR0val
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text31
  6363   0034C4                     __ptext31:
  6364                           	callstack 0
  6365   0034C4                     ___aldiv:
  6366                           	callstack 27
  6367   0034C4  0E00               	movlw	0
  6368   0034C6  6E17               	movwf	___aldiv@sign^0,c
  6369   0034C8  BE15               	btfsc	(___aldiv@divisor+3)^0,7,c
  6370   0034CA  EF6B  F01A         	goto	u3990
  6371   0034CE  EF69  F01A         	goto	u3991
  6372   0034D2                     u3991:
  6373   0034D2  EF75  F01A         	goto	l4732
  6374   0034D6                     u3990:
  6375   0034D6  1E15               	comf	(___aldiv@divisor+3)^0,f,c
  6376   0034D8  1E14               	comf	(___aldiv@divisor+2)^0,f,c
  6377   0034DA  1E13               	comf	(___aldiv@divisor+1)^0,f,c
  6378   0034DC  6C12               	negf	___aldiv@divisor^0,c
  6379   0034DE  0E00               	movlw	0
  6380   0034E0  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
  6381   0034E2  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
  6382   0034E4  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
  6383   0034E6  0E01               	movlw	1
  6384   0034E8  6E17               	movwf	___aldiv@sign^0,c
  6385   0034EA                     l4732:
  6386   0034EA  BE11               	btfsc	(___aldiv@dividend+3)^0,7,c
  6387   0034EC  EF7C  F01A         	goto	u4000
  6388   0034F0  EF7A  F01A         	goto	u4001
  6389   0034F4                     u4001:
  6390   0034F4  EF86  F01A         	goto	l4738
  6391   0034F8                     u4000:
  6392   0034F8  1E11               	comf	(___aldiv@dividend+3)^0,f,c
  6393   0034FA  1E10               	comf	(___aldiv@dividend+2)^0,f,c
  6394   0034FC  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
  6395   0034FE  6C0E               	negf	___aldiv@dividend^0,c
  6396   003500  0E00               	movlw	0
  6397   003502  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
  6398   003504  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
  6399   003506  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
  6400   003508  0E01               	movlw	1
  6401   00350A  1A17               	xorwf	___aldiv@sign^0,f,c
  6402   00350C                     l4738:
  6403   00350C  0E00               	movlw	0
  6404   00350E  6E18               	movwf	___aldiv@quotient^0,c
  6405   003510  0E00               	movlw	0
  6406   003512  6E19               	movwf	(___aldiv@quotient+1)^0,c
  6407   003514  0E00               	movlw	0
  6408   003516  6E1A               	movwf	(___aldiv@quotient+2)^0,c
  6409   003518  0E00               	movlw	0
  6410   00351A  6E1B               	movwf	(___aldiv@quotient+3)^0,c
  6411   00351C  5012               	movf	___aldiv@divisor^0,w,c
  6412   00351E  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
  6413   003520  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
  6414   003522  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
  6415   003524  B4D8               	btfsc	status,2,c
  6416   003526  EF97  F01A         	goto	u4011
  6417   00352A  EF99  F01A         	goto	u4010
  6418   00352E                     u4011:
  6419   00352E  EFCF  F01A         	goto	l4760
  6420   003532                     u4010:
  6421   003532  0E01               	movlw	1
  6422   003534  6E16               	movwf	___aldiv@counter^0,c
  6423   003536  EFA3  F01A         	goto	l4746
  6424   00353A                     l4744:
  6425   00353A  90D8               	bcf	status,0,c
  6426   00353C  3612               	rlcf	___aldiv@divisor^0,f,c
  6427   00353E  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
  6428   003540  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
  6429   003542  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
  6430   003544  2A16               	incf	___aldiv@counter^0,f,c
  6431   003546                     l4746:
  6432   003546  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
  6433   003548  EFA8  F01A         	goto	u4021
  6434   00354C  EFAA  F01A         	goto	u4020
  6435   003550                     u4021:
  6436   003550  EF9D  F01A         	goto	l4744
  6437   003554                     u4020:
  6438   003554                     l4748:
  6439   003554  90D8               	bcf	status,0,c
  6440   003556  3618               	rlcf	___aldiv@quotient^0,f,c
  6441   003558  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
  6442   00355A  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
  6443   00355C  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
  6444   00355E  5012               	movf	___aldiv@divisor^0,w,c
  6445   003560  5C0E               	subwf	___aldiv@dividend^0,w,c
  6446   003562  5013               	movf	(___aldiv@divisor+1)^0,w,c
  6447   003564  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
  6448   003566  5014               	movf	(___aldiv@divisor+2)^0,w,c
  6449   003568  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
  6450   00356A  5015               	movf	(___aldiv@divisor+3)^0,w,c
  6451   00356C  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
  6452   00356E  A0D8               	btfss	status,0,c
  6453   003570  EFBC  F01A         	goto	u4031
  6454   003574  EFBE  F01A         	goto	u4030
  6455   003578                     u4031:
  6456   003578  EFC7  F01A         	goto	l4756
  6457   00357C                     u4030:
  6458   00357C  5012               	movf	___aldiv@divisor^0,w,c
  6459   00357E  5E0E               	subwf	___aldiv@dividend^0,f,c
  6460   003580  5013               	movf	(___aldiv@divisor+1)^0,w,c
  6461   003582  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
  6462   003584  5014               	movf	(___aldiv@divisor+2)^0,w,c
  6463   003586  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
  6464   003588  5015               	movf	(___aldiv@divisor+3)^0,w,c
  6465   00358A  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
  6466   00358C  8018               	bsf	___aldiv@quotient^0,0,c
  6467   00358E                     l4756:
  6468   00358E  90D8               	bcf	status,0,c
  6469   003590  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
  6470   003592  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
  6471   003594  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
  6472   003596  3212               	rrcf	___aldiv@divisor^0,f,c
  6473   003598  2E16               	decfsz	___aldiv@counter^0,f,c
  6474   00359A  EFAA  F01A         	goto	l4748
  6475   00359E                     l4760:
  6476   00359E  5017               	movf	___aldiv@sign^0,w,c
  6477   0035A0  B4D8               	btfsc	status,2,c
  6478   0035A2  EFD5  F01A         	goto	u4041
  6479   0035A6  EFD7  F01A         	goto	u4040
  6480   0035AA                     u4041:
  6481   0035AA  EFDF  F01A         	goto	l4764
  6482   0035AE                     u4040:
  6483   0035AE  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
  6484   0035B0  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
  6485   0035B2  1E19               	comf	(___aldiv@quotient+1)^0,f,c
  6486   0035B4  6C18               	negf	___aldiv@quotient^0,c
  6487   0035B6  0E00               	movlw	0
  6488   0035B8  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
  6489   0035BA  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
  6490   0035BC  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
  6491   0035BE                     l4764:
  6492   0035BE  C018  F00E         	movff	___aldiv@quotient,?___aldiv
  6493   0035C2  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
  6494   0035C6  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
  6495   0035CA  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
  6496   0035CE  0012               	return		;funcret
  6497   0035D0                     __end_of___aldiv:
  6498                           	callstack 0
  6499                           
  6500 ;; *************** function _intial_stage_movement *****************
  6501 ;; Defined at:
  6502 ;;		line 91 in file "maze_navigation.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;  mL              1   80[COMRAM] PTR struct DC_motor
  6505 ;;		 -> motorL(9), 
  6506 ;;  mR              1   81[COMRAM] PTR struct DC_motor
  6507 ;;		 -> motorR(9), 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;		None
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      void 
  6512 ;; Registers used:
  6513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6519 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6522 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6523 ;;Total ram usage:        2 bytes
  6524 ;; Hardware stack levels used: 1
  6525 ;; Hardware stack levels required when called: 4
  6526 ;; This function calls:
  6527 ;;		_fullSpeedAhead
  6528 ;; This function is called by:
  6529 ;;		_main
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           	psect	text32
  6534   004CB4                     __ptext32:
  6535                           	callstack 0
  6536   004CB4                     _intial_stage_movement:
  6537                           	callstack 26
  6538   004CB4                     
  6539                           ;maze_navigation.c: 91: void intial_stage_movement(struct DC_motor *mL, struct DC_motor 
      +                          *mR);maze_navigation.c: 92: {;maze_navigation.c: 94:         LATGbits.LATG0 = 1;
  6540   004CB4  807F               	bsf	127,0,c	;volatile
  6541                           
  6542                           ;maze_navigation.c: 95:         LATEbits.LATE7 = 1;
  6543   004CB6  8E7D               	bsf	125,7,c	;volatile
  6544                           
  6545                           ;maze_navigation.c: 96:         LATAbits.LATA3 = 1;
  6546   004CB8  8679               	bsf	121,3,c	;volatile
  6547   004CBA                     
  6548                           ;maze_navigation.c: 99:         fullSpeedAhead(mL,mR);
  6549   004CBA  C051  F04C         	movff	intial_stage_movement@mL,fullSpeedAhead@mL
  6550   004CBE  C052  F04D         	movff	intial_stage_movement@mR,fullSpeedAhead@mR
  6551   004CC2  EC3F  F01D         	call	_fullSpeedAhead	;wreg free
  6552   004CC6                     
  6553                           ;maze_navigation.c: 100:         T0CON0bits.T0EN=1;
  6554   004CC6  8ED5               	bsf	213,7,c	;volatile
  6555   004CC8  0012               	return		;funcret
  6556   004CCA                     __end_of_intial_stage_movement:
  6557                           	callstack 0
  6558                           
  6559 ;; *************** function _initUSART4 *****************
  6560 ;; Defined at:
  6561 ;;		line 15 in file "serial.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;		None
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;		None
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      void 
  6568 ;; Registers used:
  6569 ;;		wreg, status,2
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6579 ;;Total ram usage:        0 bytes
  6580 ;; Hardware stack levels used: 1
  6581 ;; Hardware stack levels required when called: 1
  6582 ;; This function calls:
  6583 ;;		Nothing
  6584 ;; This function is called by:
  6585 ;;		_main
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text33
  6590   004C64                     __ptext33:
  6591                           	callstack 0
  6592   004C64                     _initUSART4:
  6593                           	callstack 29
  6594   004C64                     
  6595                           ;serial.c: 16:     RC0PPS = 0x12;
  6596   004C64  0E12               	movlw	18
  6597   004C66  010E               	movlb	14	; () banked
  6598   004C68  6F62               	movwf	98,b	;volatile
  6599                           
  6600                           ;serial.c: 17:     RX4PPS = 0x11;
  6601   004C6A  0E11               	movlw	17
  6602   004C6C  6F15               	movwf	21,b	;volatile
  6603   004C6E                     
  6604                           ; BSR set to: 14
  6605                           ;serial.c: 18:     BAUD4CONbits.BRG16 = 0;
  6606   004C6E  97E9               	bcf	233,3,b	;volatile
  6607   004C70                     
  6608                           ; BSR set to: 14
  6609                           ;serial.c: 19:     TX4STAbits.BRGH = 0;
  6610   004C70  95E8               	bcf	232,2,b	;volatile
  6611                           
  6612                           ;serial.c: 20:     SP4BRGL = 51;
  6613   004C72  0E33               	movlw	51
  6614   004C74  6FE5               	movwf	229,b	;volatile
  6615                           
  6616                           ;serial.c: 21:     SP4BRGH = 0;
  6617   004C76  0E00               	movlw	0
  6618   004C78  6FE6               	movwf	230,b	;volatile
  6619   004C7A                     
  6620                           ; BSR set to: 14
  6621                           ;serial.c: 23:     RC4STAbits.CREN = 1;
  6622   004C7A  89E7               	bsf	231,4,b	;volatile
  6623   004C7C                     
  6624                           ; BSR set to: 14
  6625                           ;serial.c: 24:     TX4STAbits.TXEN = 1;
  6626   004C7C  8BE8               	bsf	232,5,b	;volatile
  6627   004C7E                     
  6628                           ; BSR set to: 14
  6629                           ;serial.c: 25:     RC4STAbits.SPEN = 1;
  6630   004C7E  8FE7               	bsf	231,7,b	;volatile
  6631   004C80                     
  6632                           ; BSR set to: 14
  6633   004C80  0012               	return		;funcret
  6634   004C82                     __end_of_initUSART4:
  6635                           	callstack 0
  6636                           
  6637 ;; *************** function _initDCmotorsPWM *****************
  6638 ;; Defined at:
  6639 ;;		line 6 in file "dc_motor.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;		None
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  1    wreg      void 
  6646 ;; Registers used:
  6647 ;;		wreg, status,2
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6653 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6656 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6657 ;;Total ram usage:        2 bytes
  6658 ;; Hardware stack levels used: 1
  6659 ;; Hardware stack levels required when called: 1
  6660 ;; This function calls:
  6661 ;;		Nothing
  6662 ;; This function is called by:
  6663 ;;		_main
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           	psect	text34
  6668   003FEE                     __ptext34:
  6669                           	callstack 0
  6670   003FEE                     _initDCmotorsPWM:
  6671                           	callstack 29
  6672   003FEE                     
  6673                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  6674   003FEE  9485               	bcf	133,2,c	;volatile
  6675                           
  6676                           ;dc_motor.c: 9:     TRISCbits.TRISC7=0;
  6677   003FF0  9E83               	bcf	131,7,c	;volatile
  6678                           
  6679                           ;dc_motor.c: 10:     TRISEbits.TRISE4=0;
  6680   003FF2  9885               	bcf	133,4,c	;volatile
  6681                           
  6682                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  6683   003FF4  9C87               	bcf	135,6,c	;volatile
  6684                           
  6685                           ;dc_motor.c: 13:     LATEbits.LATE2=0;
  6686   003FF6  947D               	bcf	125,2,c	;volatile
  6687                           
  6688                           ;dc_motor.c: 14:     LATCbits.LATC7=0;
  6689   003FF8  9E7B               	bcf	123,7,c	;volatile
  6690                           
  6691                           ;dc_motor.c: 15:     LATEbits.LATE4=0;
  6692   003FFA  987D               	bcf	125,4,c	;volatile
  6693                           
  6694                           ;dc_motor.c: 16:     LATGbits.LATG6=0;
  6695   003FFC  9C7F               	bcf	127,6,c	;volatile
  6696   003FFE                     
  6697                           ;dc_motor.c: 19:     RE2PPS=0x05;
  6698   003FFE  0E05               	movlw	5
  6699   004000  010E               	movlb	14	; () banked
  6700   004002  6F74               	movwf	116,b	;volatile
  6701                           
  6702                           ;dc_motor.c: 20:     RE4PPS=0x06;
  6703   004004  0E06               	movlw	6
  6704   004006  6F76               	movwf	118,b	;volatile
  6705                           
  6706                           ;dc_motor.c: 21:     RC7PPS=0x07;
  6707   004008  0E07               	movlw	7
  6708   00400A  6F69               	movwf	105,b	;volatile
  6709                           
  6710                           ;dc_motor.c: 22:     RG6PPS=0x08;
  6711   00400C  0E08               	movlw	8
  6712   00400E  6F88               	movwf	136,b	;volatile
  6713                           
  6714                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b100;
  6715   004010  50BD               	movf	189,w,c	;volatile
  6716   004012  0B8F               	andlw	-113
  6717   004014  0940               	iorlw	64
  6718   004016  6EBD               	movwf	189,c	;volatile
  6719                           
  6720                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  6721   004018  0EE0               	movlw	-32
  6722   00401A  16BE               	andwf	190,f,c	;volatile
  6723                           
  6724                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  6725   00401C  50BF               	movf	191,w,c	;volatile
  6726   00401E  0BF0               	andlw	-16
  6727   004020  0901               	iorlw	1
  6728   004022  6EBF               	movwf	191,c	;volatile
  6729   004024                     
  6730                           ; BSR set to: 14
  6731                           ;dc_motor.c: 31:     T2PR=PWMperiod;
  6732   004024  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  6733   004028                     
  6734                           ; BSR set to: 14
  6735                           ;dc_motor.c: 32:     T2CONbits.ON=1;
  6736   004028  8EBD               	bsf	189,7,c	;volatile
  6737                           
  6738                           ;dc_motor.c: 36:     CCPR1H=0;
  6739   00402A  0E00               	movlw	0
  6740   00402C  6EAA               	movwf	170,c	;volatile
  6741                           
  6742                           ;dc_motor.c: 37:     CCPR2H=0;
  6743   00402E  0E00               	movlw	0
  6744   004030  6EA6               	movwf	166,c	;volatile
  6745                           
  6746                           ;dc_motor.c: 38:     CCPR3H=0;
  6747   004032  0E00               	movlw	0
  6748   004034  010F               	movlb	15	; () banked
  6749   004036  6F25               	movwf	37,b	;volatile
  6750                           
  6751                           ;dc_motor.c: 39:     CCPR4H=0;
  6752   004038  0E00               	movlw	0
  6753   00403A  6F21               	movwf	33,b	;volatile
  6754                           
  6755                           ;dc_motor.c: 42:     CCPTMRS0bits.C1TSEL=0;
  6756   00403C  0EFC               	movlw	-4
  6757   00403E  16AD               	andwf	173,f,c	;volatile
  6758                           
  6759                           ;dc_motor.c: 43:     CCPTMRS0bits.C2TSEL=0;
  6760   004040  0EF3               	movlw	-13
  6761   004042  16AD               	andwf	173,f,c	;volatile
  6762                           
  6763                           ;dc_motor.c: 44:     CCPTMRS0bits.C3TSEL=0;
  6764   004044  0ECF               	movlw	-49
  6765   004046  16AD               	andwf	173,f,c	;volatile
  6766                           
  6767                           ;dc_motor.c: 45:     CCPTMRS0bits.C4TSEL=0;
  6768   004048  0E3F               	movlw	-193
  6769   00404A  16AD               	andwf	173,f,c	;volatile
  6770   00404C                     
  6771                           ; BSR set to: 15
  6772                           ;dc_motor.c: 48:     CCP1CONbits.FMT=1;
  6773   00404C  88AB               	bsf	171,4,c	;volatile
  6774                           
  6775                           ;dc_motor.c: 49:     CCP1CONbits.CCP1MODE=0b1100;
  6776   00404E  50AB               	movf	171,w,c	;volatile
  6777   004050  0BF0               	andlw	-16
  6778   004052  090C               	iorlw	12
  6779   004054  6EAB               	movwf	171,c	;volatile
  6780   004056                     
  6781                           ; BSR set to: 15
  6782                           ;dc_motor.c: 50:     CCP1CONbits.EN=1;
  6783   004056  8EAB               	bsf	171,7,c	;volatile
  6784   004058                     
  6785                           ; BSR set to: 15
  6786                           ;dc_motor.c: 52:     CCP2CONbits.FMT=1;
  6787   004058  88A7               	bsf	167,4,c	;volatile
  6788                           
  6789                           ;dc_motor.c: 53:     CCP2CONbits.CCP2MODE=0b1100;
  6790   00405A  50A7               	movf	167,w,c	;volatile
  6791   00405C  0BF0               	andlw	-16
  6792   00405E  090C               	iorlw	12
  6793   004060  6EA7               	movwf	167,c	;volatile
  6794   004062                     
  6795                           ; BSR set to: 15
  6796                           ;dc_motor.c: 54:     CCP2CONbits.EN=1;
  6797   004062  8EA7               	bsf	167,7,c	;volatile
  6798   004064                     
  6799                           ; BSR set to: 15
  6800                           ;dc_motor.c: 56:     CCP3CONbits.FMT=1;
  6801   004064  8926               	bsf	38,4,b	;volatile
  6802                           
  6803                           ;dc_motor.c: 57:     CCP3CONbits.CCP3MODE=0b1100;
  6804   004066  5126               	movf	38,w,b	;volatile
  6805   004068  0BF0               	andlw	-16
  6806   00406A  090C               	iorlw	12
  6807   00406C  6F26               	movwf	38,b	;volatile
  6808   00406E                     
  6809                           ; BSR set to: 15
  6810                           ;dc_motor.c: 58:     CCP3CONbits.EN=1;
  6811   00406E  8F26               	bsf	38,7,b	;volatile
  6812   004070                     
  6813                           ; BSR set to: 15
  6814                           ;dc_motor.c: 60:     CCP4CONbits.FMT=1;
  6815   004070  8922               	bsf	34,4,b	;volatile
  6816                           
  6817                           ;dc_motor.c: 61:     CCP4CONbits.CCP4MODE=0b1100;
  6818   004072  5122               	movf	34,w,b	;volatile
  6819   004074  0BF0               	andlw	-16
  6820   004076  090C               	iorlw	12
  6821   004078  6F22               	movwf	34,b	;volatile
  6822   00407A                     
  6823                           ; BSR set to: 15
  6824                           ;dc_motor.c: 62:     CCP4CONbits.EN=1;
  6825   00407A  8F22               	bsf	34,7,b	;volatile
  6826   00407C                     
  6827                           ; BSR set to: 15
  6828   00407C  0012               	return		;funcret
  6829   00407E                     __end_of_initDCmotorsPWM:
  6830                           	callstack 0
  6831                           
  6832 ;; *************** function _decision *****************
  6833 ;; Defined at:
  6834 ;;		line 195 in file "color.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;  hue             2   36[COMRAM] unsigned int 
  6837 ;;  path_step       2   38[COMRAM] unsigned int 
  6838 ;;  factorR         2   40[COMRAM] unsigned int 
  6839 ;;  factorL         2   42[COMRAM] unsigned int 
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;  color           2    0        unsigned int 
  6842 ;; Return value:  Size  Location     Type
  6843 ;;                  2   36[COMRAM] unsigned int 
  6844 ;; Registers used:
  6845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6851 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6854 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6855 ;;Total ram usage:        8 bytes
  6856 ;; Hardware stack levels used: 1
  6857 ;; Hardware stack levels required when called: 6
  6858 ;; This function calls:
  6859 ;;		_logAction
  6860 ;;		_moveBlue
  6861 ;;		_moveGreen
  6862 ;;		_moveLightBlue
  6863 ;;		_moveOrange
  6864 ;;		_movePink
  6865 ;;		_moveRed
  6866 ;;		_moveYellow
  6867 ;; This function is called by:
  6868 ;;		_main
  6869 ;; This function uses a non-reentrant model
  6870 ;;
  6871                           
  6872                           	psect	text35
  6873   00223A                     __ptext35:
  6874                           	callstack 0
  6875   00223A                     _decision:
  6876                           	callstack 24
  6877   00223A                     
  6878                           ;color.c: 200:     unsigned int color;;color.c: 202:     if (hue<=10 || hue>=355) {
  6879   00223A  5026               	movf	(decision@hue+1)^0,w,c
  6880   00223C  E109               	bnz	u4520
  6881   00223E  0E0B               	movlw	11
  6882   002240  5C25               	subwf	decision@hue^0,w,c
  6883   002242  A0D8               	btfss	status,0,c
  6884   002244  EF26  F011         	goto	u4521
  6885   002248  EF28  F011         	goto	u4520
  6886   00224C                     u4521:
  6887   00224C  EF33  F011         	goto	l5202
  6888   002250                     u4520:
  6889   002250  0E63               	movlw	99
  6890   002252  5C25               	subwf	decision@hue^0,w,c
  6891   002254  0E01               	movlw	1
  6892   002256  5826               	subwfb	(decision@hue+1)^0,w,c
  6893   002258  A0D8               	btfss	status,0,c
  6894   00225A  EF31  F011         	goto	u4531
  6895   00225E  EF33  F011         	goto	u4530
  6896   002262                     u4531:
  6897   002262  EF50  F011         	goto	l5210
  6898   002266                     u4530:
  6899   002266                     l5202:
  6900                           
  6901                           ;color.c: 203:         moveRed(&motorL, &motorR, factorR);
  6902   002266  0EDE               	movlw	low _motorL
  6903   002268  6E1F               	movwf	moveRed@mL^0,c
  6904   00226A  0ED5               	movlw	low _motorR
  6905   00226C  6E20               	movwf	moveRed@mR^0,c
  6906   00226E  C029  F021         	movff	decision@factorR,moveRed@factorR
  6907   002272  C02A  F022         	movff	decision@factorR+1,moveRed@factorR+1
  6908   002276  ECED  F023         	call	_moveRed	;wreg free
  6909   00227A                     
  6910                           ;color.c: 204:         logAction(1,0, path_step);
  6911   00227A  0E00               	movlw	0
  6912   00227C  6E02               	movwf	logAction@newTime^0,c
  6913   00227E  0E00               	movlw	0
  6914   002280  6E03               	movwf	(logAction@newTime+1)^0,c
  6915   002282  0E00               	movlw	0
  6916   002284  6E04               	movwf	(logAction@newTime+2)^0,c
  6917   002286  0E00               	movlw	0
  6918   002288  6E05               	movwf	(logAction@newTime+3)^0,c
  6919   00228A  C027  F006         	movff	decision@path_step,logAction@path_step
  6920   00228E  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  6921   002292  0E01               	movlw	1
  6922   002294  ECAE  F021         	call	_logAction
  6923   002298                     l5208:
  6924                           
  6925                           ;color.c: 206:         path_step++;
  6926   002298  4A27               	infsnz	decision@path_step^0,f,c
  6927   00229A  2A28               	incf	(decision@path_step+1)^0,f,c
  6928                           
  6929                           ;color.c: 207:     }
  6930   00229C  EF6A  F012         	goto	l5282
  6931   0022A0                     l5210:
  6932   0022A0  5026               	movf	(decision@hue+1)^0,w,c
  6933   0022A2  E109               	bnz	u4540
  6934   0022A4  0E69               	movlw	105
  6935   0022A6  5C25               	subwf	decision@hue^0,w,c
  6936   0022A8  A0D8               	btfss	status,0,c
  6937   0022AA  EF59  F011         	goto	u4541
  6938   0022AE  EF5B  F011         	goto	u4540
  6939   0022B2                     u4541:
  6940   0022B2  EF81  F011         	goto	l5222
  6941   0022B6                     u4540:
  6942   0022B6  5026               	movf	(decision@hue+1)^0,w,c
  6943   0022B8  E107               	bnz	u4551
  6944   0022BA  0E83               	movlw	131
  6945   0022BC  5C25               	subwf	decision@hue^0,w,c
  6946   0022BE  B0D8               	btfsc	status,0,c
  6947   0022C0  EF64  F011         	goto	u4551
  6948   0022C4  EF66  F011         	goto	u4550
  6949   0022C8                     u4551:
  6950   0022C8  EF81  F011         	goto	l5222
  6951   0022CC                     u4550:
  6952   0022CC                     
  6953                           ;color.c: 209:         moveGreen(&motorL, &motorR,factorL);
  6954   0022CC  0EDE               	movlw	low _motorL
  6955   0022CE  6E1F               	movwf	moveGreen@mL^0,c
  6956   0022D0  0ED5               	movlw	low _motorR
  6957   0022D2  6E20               	movwf	moveGreen@mR^0,c
  6958   0022D4  C02B  F021         	movff	decision@factorL,moveGreen@factorL
  6959   0022D8  C02C  F022         	movff	decision@factorL+1,moveGreen@factorL+1
  6960   0022DC  EC27  F024         	call	_moveGreen	;wreg free
  6961   0022E0                     
  6962                           ;color.c: 210:         logAction(2,0, path_step);
  6963   0022E0  0E00               	movlw	0
  6964   0022E2  6E02               	movwf	logAction@newTime^0,c
  6965   0022E4  0E00               	movlw	0
  6966   0022E6  6E03               	movwf	(logAction@newTime+1)^0,c
  6967   0022E8  0E00               	movlw	0
  6968   0022EA  6E04               	movwf	(logAction@newTime+2)^0,c
  6969   0022EC  0E00               	movlw	0
  6970   0022EE  6E05               	movwf	(logAction@newTime+3)^0,c
  6971   0022F0  C027  F006         	movff	decision@path_step,logAction@path_step
  6972   0022F4  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  6973   0022F8  0E02               	movlw	2
  6974   0022FA  ECAE  F021         	call	_logAction
  6975   0022FE  EF4C  F011         	goto	l5208
  6976   002302                     l5222:
  6977   002302  5026               	movf	(decision@hue+1)^0,w,c
  6978   002304  E109               	bnz	u4560
  6979   002306  0EE6               	movlw	230
  6980   002308  5C25               	subwf	decision@hue^0,w,c
  6981   00230A  A0D8               	btfss	status,0,c
  6982   00230C  EF8A  F011         	goto	u4561
  6983   002310  EF8C  F011         	goto	u4560
  6984   002314                     u4561:
  6985   002314  EFAE  F011         	goto	l5234
  6986   002318                     u4560:
  6987   002318  5026               	movf	(decision@hue+1)^0,w,c
  6988   00231A  E107               	bnz	u4571
  6989   00231C  0EF9               	movlw	249
  6990   00231E  5C25               	subwf	decision@hue^0,w,c
  6991   002320  B0D8               	btfsc	status,0,c
  6992   002322  EF95  F011         	goto	u4571
  6993   002326  EF97  F011         	goto	u4570
  6994   00232A                     u4571:
  6995   00232A  EFAE  F011         	goto	l5234
  6996   00232E                     u4570:
  6997   00232E                     
  6998                           ;color.c: 214:         moveBlue(&motorL,&motorR);
  6999   00232E  0EDE               	movlw	low _motorL
  7000   002330  6E1D               	movwf	moveBlue@mL^0,c
  7001   002332  0ED5               	movlw	low _motorR
  7002   002334  6E1E               	movwf	moveBlue@mR^0,c
  7003   002336  EC2B  F025         	call	_moveBlue	;wreg free
  7004   00233A                     
  7005                           ;color.c: 215:         logAction(3,0, path_step);
  7006   00233A  0E00               	movlw	0
  7007   00233C  6E02               	movwf	logAction@newTime^0,c
  7008   00233E  0E00               	movlw	0
  7009   002340  6E03               	movwf	(logAction@newTime+1)^0,c
  7010   002342  0E00               	movlw	0
  7011   002344  6E04               	movwf	(logAction@newTime+2)^0,c
  7012   002346  0E00               	movlw	0
  7013   002348  6E05               	movwf	(logAction@newTime+3)^0,c
  7014   00234A  C027  F006         	movff	decision@path_step,logAction@path_step
  7015   00234E  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7016   002352  0E03               	movlw	3
  7017   002354  ECAE  F021         	call	_logAction
  7018   002358  EF4C  F011         	goto	l5208
  7019   00235C                     l5234:
  7020   00235C  5026               	movf	(decision@hue+1)^0,w,c
  7021   00235E  E109               	bnz	u4580
  7022   002360  0EC8               	movlw	200
  7023   002362  5C25               	subwf	decision@hue^0,w,c
  7024   002364  A0D8               	btfss	status,0,c
  7025   002366  EFB7  F011         	goto	u4581
  7026   00236A  EFB9  F011         	goto	u4580
  7027   00236E                     u4581:
  7028   00236E  EFDB  F011         	goto	l5246
  7029   002372                     u4580:
  7030   002372  5026               	movf	(decision@hue+1)^0,w,c
  7031   002374  E107               	bnz	u4591
  7032   002376  0EE7               	movlw	231
  7033   002378  5C25               	subwf	decision@hue^0,w,c
  7034   00237A  B0D8               	btfsc	status,0,c
  7035   00237C  EFC2  F011         	goto	u4591
  7036   002380  EFC4  F011         	goto	u4590
  7037   002384                     u4591:
  7038   002384  EFDB  F011         	goto	l5246
  7039   002388                     u4590:
  7040   002388                     
  7041                           ;color.c: 219:         moveLightBlue(&motorL,&motorR);
  7042   002388  0EDE               	movlw	low _motorL
  7043   00238A  6E1D               	movwf	moveLightBlue@mL^0,c
  7044   00238C  0ED5               	movlw	low _motorR
  7045   00238E  6E1E               	movwf	moveLightBlue@mR^0,c
  7046   002390  EC12  F025         	call	_moveLightBlue	;wreg free
  7047   002394                     
  7048                           ;color.c: 220:         logAction(4,0, path_step);
  7049   002394  0E00               	movlw	0
  7050   002396  6E02               	movwf	logAction@newTime^0,c
  7051   002398  0E00               	movlw	0
  7052   00239A  6E03               	movwf	(logAction@newTime+1)^0,c
  7053   00239C  0E00               	movlw	0
  7054   00239E  6E04               	movwf	(logAction@newTime+2)^0,c
  7055   0023A0  0E00               	movlw	0
  7056   0023A2  6E05               	movwf	(logAction@newTime+3)^0,c
  7057   0023A4  C027  F006         	movff	decision@path_step,logAction@path_step
  7058   0023A8  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7059   0023AC  0E04               	movlw	4
  7060   0023AE  ECAE  F021         	call	_logAction
  7061   0023B2  EF4C  F011         	goto	l5208
  7062   0023B6                     l5246:
  7063   0023B6  0E2E               	movlw	46
  7064   0023B8  5C25               	subwf	decision@hue^0,w,c
  7065   0023BA  0E01               	movlw	1
  7066   0023BC  5826               	subwfb	(decision@hue+1)^0,w,c
  7067   0023BE  A0D8               	btfss	status,0,c
  7068   0023C0  EFE4  F011         	goto	u4601
  7069   0023C4  EFE6  F011         	goto	u4600
  7070   0023C8                     u4601:
  7071   0023C8  EF0C  F012         	goto	l5258
  7072   0023CC                     u4600:
  7073   0023CC  0E5B               	movlw	91
  7074   0023CE  5C25               	subwf	decision@hue^0,w,c
  7075   0023D0  0E01               	movlw	1
  7076   0023D2  5826               	subwfb	(decision@hue+1)^0,w,c
  7077   0023D4  B0D8               	btfsc	status,0,c
  7078   0023D6  EFEF  F011         	goto	u4611
  7079   0023DA  EFF1  F011         	goto	u4610
  7080   0023DE                     u4611:
  7081   0023DE  EF0C  F012         	goto	l5258
  7082   0023E2                     u4610:
  7083   0023E2                     
  7084                           ;color.c: 224:         moveYellow(&motorL,&motorR, factorR);
  7085   0023E2  0EDE               	movlw	low _motorL
  7086   0023E4  6E1F               	movwf	moveYellow@mL^0,c
  7087   0023E6  0ED5               	movlw	low _motorR
  7088   0023E8  6E20               	movwf	moveYellow@mR^0,c
  7089   0023EA  C029  F021         	movff	decision@factorR,moveYellow@factorR
  7090   0023EE  C02A  F022         	movff	decision@factorR+1,moveYellow@factorR+1
  7091   0023F2  ECD0  F023         	call	_moveYellow	;wreg free
  7092   0023F6                     
  7093                           ;color.c: 225:         logAction(5,0, path_step);
  7094   0023F6  0E00               	movlw	0
  7095   0023F8  6E02               	movwf	logAction@newTime^0,c
  7096   0023FA  0E00               	movlw	0
  7097   0023FC  6E03               	movwf	(logAction@newTime+1)^0,c
  7098   0023FE  0E00               	movlw	0
  7099   002400  6E04               	movwf	(logAction@newTime+2)^0,c
  7100   002402  0E00               	movlw	0
  7101   002404  6E05               	movwf	(logAction@newTime+3)^0,c
  7102   002406  C027  F006         	movff	decision@path_step,logAction@path_step
  7103   00240A  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7104   00240E  0E05               	movlw	5
  7105   002410  ECAE  F021         	call	_logAction
  7106   002414  EF4C  F011         	goto	l5208
  7107   002418                     l5258:
  7108   002418  5026               	movf	(decision@hue+1)^0,w,c
  7109   00241A  E109               	bnz	u4620
  7110   00241C  0E0F               	movlw	15
  7111   00241E  5C25               	subwf	decision@hue^0,w,c
  7112   002420  A0D8               	btfss	status,0,c
  7113   002422  EF15  F012         	goto	u4621
  7114   002426  EF17  F012         	goto	u4620
  7115   00242A                     u4621:
  7116   00242A  EF39  F012         	goto	l5270
  7117   00242E                     u4620:
  7118   00242E  5026               	movf	(decision@hue+1)^0,w,c
  7119   002430  E107               	bnz	u4631
  7120   002432  0E24               	movlw	36
  7121   002434  5C25               	subwf	decision@hue^0,w,c
  7122   002436  B0D8               	btfsc	status,0,c
  7123   002438  EF20  F012         	goto	u4631
  7124   00243C  EF22  F012         	goto	u4630
  7125   002440                     u4631:
  7126   002440  EF39  F012         	goto	l5270
  7127   002444                     u4630:
  7128   002444                     
  7129                           ;color.c: 229:         moveOrange(&motorL,&motorR);
  7130   002444  0EDE               	movlw	low _motorL
  7131   002446  6E1D               	movwf	moveOrange@mL^0,c
  7132   002448  0ED5               	movlw	low _motorR
  7133   00244A  6E1E               	movwf	moveOrange@mR^0,c
  7134   00244C  ECE0  F024         	call	_moveOrange	;wreg free
  7135   002450                     
  7136                           ;color.c: 230:         logAction(6,0, path_step);
  7137   002450  0E00               	movlw	0
  7138   002452  6E02               	movwf	logAction@newTime^0,c
  7139   002454  0E00               	movlw	0
  7140   002456  6E03               	movwf	(logAction@newTime+1)^0,c
  7141   002458  0E00               	movlw	0
  7142   00245A  6E04               	movwf	(logAction@newTime+2)^0,c
  7143   00245C  0E00               	movlw	0
  7144   00245E  6E05               	movwf	(logAction@newTime+3)^0,c
  7145   002460  C027  F006         	movff	decision@path_step,logAction@path_step
  7146   002464  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7147   002468  0E06               	movlw	6
  7148   00246A  ECAE  F021         	call	_logAction
  7149   00246E  EF4C  F011         	goto	l5208
  7150   002472                     l5270:
  7151   002472  5026               	movf	(decision@hue+1)^0,w,c
  7152   002474  E109               	bnz	u4640
  7153   002476  0EF0               	movlw	240
  7154   002478  5C25               	subwf	decision@hue^0,w,c
  7155   00247A  A0D8               	btfss	status,0,c
  7156   00247C  EF42  F012         	goto	u4641
  7157   002480  EF44  F012         	goto	u4640
  7158   002484                     u4641:
  7159   002484  EF6A  F012         	goto	l153
  7160   002488                     u4640:
  7161   002488  0E05               	movlw	5
  7162   00248A  5C25               	subwf	decision@hue^0,w,c
  7163   00248C  0E01               	movlw	1
  7164   00248E  5826               	subwfb	(decision@hue+1)^0,w,c
  7165   002490  B0D8               	btfsc	status,0,c
  7166   002492  EF4D  F012         	goto	u4651
  7167   002496  EF4F  F012         	goto	u4650
  7168   00249A                     u4651:
  7169   00249A  EF6A  F012         	goto	l153
  7170   00249E                     u4650:
  7171   00249E                     
  7172                           ;color.c: 235:         movePink(&motorL,&motorR, factorL);
  7173   00249E  0EDE               	movlw	low _motorL
  7174   0024A0  6E1F               	movwf	movePink@mL^0,c
  7175   0024A2  0ED5               	movlw	low _motorR
  7176   0024A4  6E20               	movwf	movePink@mR^0,c
  7177   0024A6  C02B  F021         	movff	decision@factorL,movePink@factorL
  7178   0024AA  C02C  F022         	movff	decision@factorL+1,movePink@factorL+1
  7179   0024AE  EC0A  F024         	call	_movePink	;wreg free
  7180   0024B2                     
  7181                           ;color.c: 236:         logAction(7,0, path_step);
  7182   0024B2  0E00               	movlw	0
  7183   0024B4  6E02               	movwf	logAction@newTime^0,c
  7184   0024B6  0E00               	movlw	0
  7185   0024B8  6E03               	movwf	(logAction@newTime+1)^0,c
  7186   0024BA  0E00               	movlw	0
  7187   0024BC  6E04               	movwf	(logAction@newTime+2)^0,c
  7188   0024BE  0E00               	movlw	0
  7189   0024C0  6E05               	movwf	(logAction@newTime+3)^0,c
  7190   0024C2  C027  F006         	movff	decision@path_step,logAction@path_step
  7191   0024C6  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7192   0024CA  0E07               	movlw	7
  7193   0024CC  ECAE  F021         	call	_logAction
  7194   0024D0  EF4C  F011         	goto	l5208
  7195   0024D4                     l153:
  7196   0024D4                     l5282:
  7197                           
  7198                           ;color.c: 242:     return path_step;
  7199   0024D4  C027  F025         	movff	decision@path_step,?_decision
  7200   0024D8  C028  F026         	movff	decision@path_step+1,?_decision+1
  7201   0024DC  0012               	return		;funcret
  7202   0024DE                     __end_of_decision:
  7203                           	callstack 0
  7204                           
  7205 ;; *************** function _moveYellow *****************
  7206 ;; Defined at:
  7207 ;;		line 44 in file "maze_navigation.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7210 ;;		 -> motorL(9), 
  7211 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7212 ;;		 -> motorR(9), 
  7213 ;;  factorR         2   32[COMRAM] unsigned int 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  1    wreg      void 
  7218 ;; Registers used:
  7219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7225 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7228 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7229 ;;Total ram usage:        6 bytes
  7230 ;; Hardware stack levels used: 1
  7231 ;; Hardware stack levels required when called: 5
  7232 ;; This function calls:
  7233 ;;		_backOneAndHalf
  7234 ;;		_right90
  7235 ;; This function is called by:
  7236 ;;		_decision
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           	psect	text36
  7241   0047A0                     __ptext36:
  7242                           	callstack 0
  7243   0047A0                     _moveYellow:
  7244                           	callstack 24
  7245   0047A0                     
  7246                           ;maze_navigation.c: 44:  void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsig
      +                          ned int factorR);maze_navigation.c: 45: {;maze_navigation.c: 47:     backOneAndHalf(mL,m
      +                          R);
  7247   0047A0  C01F  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  7248   0047A4  C020  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  7249   0047A8  ECC7  F024         	call	_backOneAndHalf	;wreg free
  7250   0047AC                     
  7251                           ;maze_navigation.c: 48:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7252   0047AC  0E29               	movlw	41
  7253   0047AE  6E24               	movwf	(??_moveYellow+1)^0,c
  7254   0047B0  0E96               	movlw	150
  7255   0047B2  6E23               	movwf	??_moveYellow^0,c
  7256   0047B4  0E7F               	movlw	127
  7257   0047B6                     u5437:
  7258   0047B6  2EE8               	decfsz	wreg,f,c
  7259   0047B8  D7FE               	bra	u5437
  7260   0047BA  2E23               	decfsz	??_moveYellow^0,f,c
  7261   0047BC  D7FC               	bra	u5437
  7262   0047BE  2E24               	decfsz	(??_moveYellow+1)^0,f,c
  7263   0047C0  D7FA               	bra	u5437
  7264   0047C2  0000               	nop	
  7265   0047C4                     
  7266                           ;maze_navigation.c: 49:     right90(mL,mR, factorR);
  7267   0047C4  C01F  F019         	movff	moveYellow@mL,right90@mL
  7268   0047C8  C020  F01A         	movff	moveYellow@mR,right90@mR
  7269   0047CC  C021  F01B         	movff	moveYellow@factorR,right90@factorR
  7270   0047D0  C022  F01C         	movff	moveYellow@factorR+1,right90@factorR+1
  7271   0047D4  EC5D  F025         	call	_right90	;wreg free
  7272   0047D8  0012               	return		;funcret
  7273   0047DA                     __end_of_moveYellow:
  7274                           	callstack 0
  7275                           
  7276 ;; *************** function _moveRed *****************
  7277 ;; Defined at:
  7278 ;;		line 15 in file "maze_navigation.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7281 ;;		 -> motorL(9), 
  7282 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7283 ;;		 -> motorR(9), 
  7284 ;;  factorR         2   32[COMRAM] unsigned int 
  7285 ;; Auto vars:     Size  Location     Type
  7286 ;;		None
  7287 ;; Return value:  Size  Location     Type
  7288 ;;                  1    wreg      void 
  7289 ;; Registers used:
  7290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7291 ;; Tracked objects:
  7292 ;;		On entry : 0/0
  7293 ;;		On exit  : 0/0
  7294 ;;		Unchanged: 0/0
  7295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7296 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7299 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7300 ;;Total ram usage:        6 bytes
  7301 ;; Hardware stack levels used: 1
  7302 ;; Hardware stack levels required when called: 5
  7303 ;; This function calls:
  7304 ;;		_backHalf
  7305 ;;		_right90
  7306 ;; This function is called by:
  7307 ;;		_decision
  7308 ;; This function uses a non-reentrant model
  7309 ;;
  7310                           
  7311                           	psect	text37
  7312   0047DA                     __ptext37:
  7313                           	callstack 0
  7314   0047DA                     _moveRed:
  7315                           	callstack 24
  7316   0047DA                     
  7317                           ;maze_navigation.c: 15: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int factorR);maze_navigation.c: 16: {;maze_navigation.c: 18:     backHalf(mL,mR);
  7318   0047DA  C01F  F019         	movff	moveRed@mL,backHalf@mL
  7319   0047DE  C020  F01A         	movff	moveRed@mR,backHalf@mR
  7320   0047E2  ECA7  F025         	call	_backHalf	;wreg free
  7321   0047E6                     
  7322                           ;maze_navigation.c: 19:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7323   0047E6  0E29               	movlw	41
  7324   0047E8  6E24               	movwf	(??_moveRed+1)^0,c
  7325   0047EA  0E96               	movlw	150
  7326   0047EC  6E23               	movwf	??_moveRed^0,c
  7327   0047EE  0E7F               	movlw	127
  7328   0047F0                     u5447:
  7329   0047F0  2EE8               	decfsz	wreg,f,c
  7330   0047F2  D7FE               	bra	u5447
  7331   0047F4  2E23               	decfsz	??_moveRed^0,f,c
  7332   0047F6  D7FC               	bra	u5447
  7333   0047F8  2E24               	decfsz	(??_moveRed+1)^0,f,c
  7334   0047FA  D7FA               	bra	u5447
  7335   0047FC  0000               	nop	
  7336   0047FE                     
  7337                           ;maze_navigation.c: 20:     right90(mL,mR,factorR);
  7338   0047FE  C01F  F019         	movff	moveRed@mL,right90@mL
  7339   004802  C020  F01A         	movff	moveRed@mR,right90@mR
  7340   004806  C021  F01B         	movff	moveRed@factorR,right90@factorR
  7341   00480A  C022  F01C         	movff	moveRed@factorR+1,right90@factorR+1
  7342   00480E  EC5D  F025         	call	_right90	;wreg free
  7343   004812  0012               	return		;funcret
  7344   004814                     __end_of_moveRed:
  7345                           	callstack 0
  7346                           
  7347 ;; *************** function _movePink *****************
  7348 ;; Defined at:
  7349 ;;		line 53 in file "maze_navigation.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7352 ;;		 -> motorL(9), 
  7353 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7354 ;;		 -> motorR(9), 
  7355 ;;  factorL         2   32[COMRAM] unsigned int 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;		None
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  1    wreg      void 
  7360 ;; Registers used:
  7361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7367 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7369 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7370 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7371 ;;Total ram usage:        6 bytes
  7372 ;; Hardware stack levels used: 1
  7373 ;; Hardware stack levels required when called: 5
  7374 ;; This function calls:
  7375 ;;		_backOneAndHalf
  7376 ;;		_left90
  7377 ;; This function is called by:
  7378 ;;		_decision
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           	psect	text38
  7383   004814                     __ptext38:
  7384                           	callstack 0
  7385   004814                     _movePink:
  7386                           	callstack 24
  7387   004814                     
  7388                           ;maze_navigation.c: 53: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned
      +                           int factorL);maze_navigation.c: 54: {;maze_navigation.c: 56:     backOneAndHalf(mL,mR);
  7389   004814  C01F  F019         	movff	movePink@mL,backOneAndHalf@mL
  7390   004818  C020  F01A         	movff	movePink@mR,backOneAndHalf@mR
  7391   00481C  ECC7  F024         	call	_backOneAndHalf	;wreg free
  7392   004820                     
  7393                           ;maze_navigation.c: 57:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7394   004820  0E29               	movlw	41
  7395   004822  6E24               	movwf	(??_movePink+1)^0,c
  7396   004824  0E96               	movlw	150
  7397   004826  6E23               	movwf	??_movePink^0,c
  7398   004828  0E7F               	movlw	127
  7399   00482A                     u5457:
  7400   00482A  2EE8               	decfsz	wreg,f,c
  7401   00482C  D7FE               	bra	u5457
  7402   00482E  2E23               	decfsz	??_movePink^0,f,c
  7403   004830  D7FC               	bra	u5457
  7404   004832  2E24               	decfsz	(??_movePink+1)^0,f,c
  7405   004834  D7FA               	bra	u5457
  7406   004836  0000               	nop	
  7407   004838                     
  7408                           ;maze_navigation.c: 58:     left90(mL,mR, factorL);
  7409   004838  C01F  F019         	movff	movePink@mL,left90@mL
  7410   00483C  C020  F01A         	movff	movePink@mR,left90@mR
  7411   004840  C021  F01B         	movff	movePink@factorL,left90@factorL
  7412   004844  C022  F01C         	movff	movePink@factorL+1,left90@factorL+1
  7413   004848  EC76  F025         	call	_left90	;wreg free
  7414   00484C  0012               	return		;funcret
  7415   00484E                     __end_of_movePink:
  7416                           	callstack 0
  7417                           
  7418 ;; *************** function _backOneAndHalf *****************
  7419 ;; Defined at:
  7420 ;;		line 264 in file "dc_motor.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7423 ;;		 -> motorL(9), 
  7424 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7425 ;;		 -> motorR(9), 
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;		None
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  1    wreg      void 
  7430 ;; Registers used:
  7431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7439 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7440 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7441 ;;Total ram usage:        4 bytes
  7442 ;; Hardware stack levels used: 1
  7443 ;; Hardware stack levels required when called: 4
  7444 ;; This function calls:
  7445 ;;		_fullSpeedBack
  7446 ;;		_stop
  7447 ;; This function is called by:
  7448 ;;		_moveYellow
  7449 ;;		_movePink
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           	psect	text39
  7454   00498E                     __ptext39:
  7455                           	callstack 0
  7456   00498E                     _backOneAndHalf:
  7457                           	callstack 24
  7458   00498E                     
  7459                           ;dc_motor.c: 264: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 265: {;dc_motor.c: 266:     fullSpeedBack(mL,mR);
  7460   00498E  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  7461   004992  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  7462   004996  EC04  F021         	call	_fullSpeedBack	;wreg free
  7463   00499A                     
  7464                           ;dc_motor.c: 267:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  7465   00499A  0E6A               	movlw	106
  7466   00499C  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  7467   00499E  0E85               	movlw	133
  7468   0049A0  6E1B               	movwf	??_backOneAndHalf^0,c
  7469   0049A2  0EB4               	movlw	180
  7470   0049A4                     u5467:
  7471   0049A4  2EE8               	decfsz	wreg,f,c
  7472   0049A6  D7FE               	bra	u5467
  7473   0049A8  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  7474   0049AA  D7FC               	bra	u5467
  7475   0049AC  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  7476   0049AE  D7FA               	bra	u5467
  7477   0049B0  D000               	nop2	
  7478   0049B2                     
  7479                           ;dc_motor.c: 268:     stop(mL,mR);
  7480   0049B2  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  7481   0049B6  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  7482   0049BA  EC3F  F020         	call	_stop	;wreg free
  7483   0049BE  0012               	return		;funcret
  7484   0049C0                     __end_of_backOneAndHalf:
  7485                           	callstack 0
  7486                           
  7487 ;; *************** function _moveOrange *****************
  7488 ;; Defined at:
  7489 ;;		line 62 in file "maze_navigation.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7492 ;;		 -> motorL(9), 
  7493 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7494 ;;		 -> motorR(9), 
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;		None
  7497 ;; Return value:  Size  Location     Type
  7498 ;;                  1    wreg      void 
  7499 ;; Registers used:
  7500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/0
  7503 ;;		On exit  : 0/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7506 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7508 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7509 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7510 ;;Total ram usage:        4 bytes
  7511 ;; Hardware stack levels used: 1
  7512 ;; Hardware stack levels required when called: 5
  7513 ;; This function calls:
  7514 ;;		_backHalf
  7515 ;;		_right135
  7516 ;; This function is called by:
  7517 ;;		_decision
  7518 ;; This function uses a non-reentrant model
  7519 ;;
  7520                           
  7521                           	psect	text40
  7522   0049C0                     __ptext40:
  7523                           	callstack 0
  7524   0049C0                     _moveOrange:
  7525                           	callstack 24
  7526   0049C0                     
  7527                           ;maze_navigation.c: 62: void moveOrange(struct DC_motor *mL, struct DC_motor *mR);maze_n
      +                          avigation.c: 63: {;maze_navigation.c: 65:     backHalf(mL,mR);
  7528   0049C0  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  7529   0049C4  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  7530   0049C8  ECA7  F025         	call	_backHalf	;wreg free
  7531   0049CC                     
  7532                           ;maze_navigation.c: 66:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7533   0049CC  0E29               	movlw	41
  7534   0049CE  6E20               	movwf	(??_moveOrange+1)^0,c
  7535   0049D0  0E96               	movlw	150
  7536   0049D2  6E1F               	movwf	??_moveOrange^0,c
  7537   0049D4  0E7F               	movlw	127
  7538   0049D6                     u5477:
  7539   0049D6  2EE8               	decfsz	wreg,f,c
  7540   0049D8  D7FE               	bra	u5477
  7541   0049DA  2E1F               	decfsz	??_moveOrange^0,f,c
  7542   0049DC  D7FC               	bra	u5477
  7543   0049DE  2E20               	decfsz	(??_moveOrange+1)^0,f,c
  7544   0049E0  D7FA               	bra	u5477
  7545   0049E2  0000               	nop	
  7546   0049E4                     
  7547                           ;maze_navigation.c: 67:     right135(mL,mR);
  7548   0049E4  C01D  F019         	movff	moveOrange@mL,right135@mL
  7549   0049E8  C01E  F01A         	movff	moveOrange@mR,right135@mR
  7550   0049EC  ECF9  F024         	call	_right135	;wreg free
  7551   0049F0  0012               	return		;funcret
  7552   0049F2                     __end_of_moveOrange:
  7553                           	callstack 0
  7554                           
  7555 ;; *************** function _right135 *****************
  7556 ;; Defined at:
  7557 ;;		line 238 in file "dc_motor.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7560 ;;		 -> motorL(9), 
  7561 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7562 ;;		 -> motorR(9), 
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;		None
  7565 ;; Return value:  Size  Location     Type
  7566 ;;                  1    wreg      void 
  7567 ;; Registers used:
  7568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/0
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7576 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7577 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7578 ;;Total ram usage:        4 bytes
  7579 ;; Hardware stack levels used: 1
  7580 ;; Hardware stack levels required when called: 4
  7581 ;; This function calls:
  7582 ;;		_stop
  7583 ;;		_turnRight
  7584 ;; This function is called by:
  7585 ;;		_reverseTurn
  7586 ;;		_moveOrange
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           	psect	text41
  7591   0049F2                     __ptext41:
  7592                           	callstack 0
  7593   0049F2                     _right135:
  7594                           	callstack 23
  7595   0049F2                     
  7596                           ;dc_motor.c: 238: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          9: {;dc_motor.c: 241:     turnRight(mL,mR);
  7597   0049F2  C019  F014         	movff	right135@mL,turnRight@mL
  7598   0049F6  C01A  F015         	movff	right135@mR,turnRight@mR
  7599   0049FA  EC86  F020         	call	_turnRight	;wreg free
  7600   0049FE                     
  7601                           ;dc_motor.c: 242:     _delay((unsigned long)((420)*(64000000/4000.0)));
  7602   0049FE  0E23               	movlw	35
  7603   004A00  6E1C               	movwf	(??_right135+1)^0,c
  7604   004A02  0E18               	movlw	24
  7605   004A04  6E1B               	movwf	??_right135^0,c
  7606   004A06  0E2C               	movlw	44
  7607   004A08                     u5487:
  7608   004A08  2EE8               	decfsz	wreg,f,c
  7609   004A0A  D7FE               	bra	u5487
  7610   004A0C  2E1B               	decfsz	??_right135^0,f,c
  7611   004A0E  D7FC               	bra	u5487
  7612   004A10  2E1C               	decfsz	(??_right135+1)^0,f,c
  7613   004A12  D7FA               	bra	u5487
  7614   004A14  D000               	nop2	
  7615   004A16                     
  7616                           ;dc_motor.c: 243:     stop(mL,mR);
  7617   004A16  C019  F014         	movff	right135@mL,stop@mL
  7618   004A1A  C01A  F015         	movff	right135@mR,stop@mR
  7619   004A1E  EC3F  F020         	call	_stop	;wreg free
  7620   004A22  0012               	return		;funcret
  7621   004A24                     __end_of_right135:
  7622                           	callstack 0
  7623                           
  7624 ;; *************** function _moveLightBlue *****************
  7625 ;; Defined at:
  7626 ;;		line 71 in file "maze_navigation.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7629 ;;		 -> motorL(9), 
  7630 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7631 ;;		 -> motorR(9), 
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;		None
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  1    wreg      void 
  7636 ;; Registers used:
  7637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7643 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7645 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7646 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7647 ;;Total ram usage:        4 bytes
  7648 ;; Hardware stack levels used: 1
  7649 ;; Hardware stack levels required when called: 5
  7650 ;; This function calls:
  7651 ;;		_backHalf
  7652 ;;		_left135
  7653 ;; This function is called by:
  7654 ;;		_decision
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	text42
  7659   004A24                     __ptext42:
  7660                           	callstack 0
  7661   004A24                     _moveLightBlue:
  7662                           	callstack 24
  7663   004A24                     
  7664                           ;maze_navigation.c: 71: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR);maz
      +                          e_navigation.c: 72: {;maze_navigation.c: 74:     backHalf(mL,mR);
  7665   004A24  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7666   004A28  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7667   004A2C  ECA7  F025         	call	_backHalf	;wreg free
  7668   004A30                     
  7669                           ;maze_navigation.c: 75:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7670   004A30  0E29               	movlw	41
  7671   004A32  6E20               	movwf	(??_moveLightBlue+1)^0,c
  7672   004A34  0E96               	movlw	150
  7673   004A36  6E1F               	movwf	??_moveLightBlue^0,c
  7674   004A38  0E7F               	movlw	127
  7675   004A3A                     u5497:
  7676   004A3A  2EE8               	decfsz	wreg,f,c
  7677   004A3C  D7FE               	bra	u5497
  7678   004A3E  2E1F               	decfsz	??_moveLightBlue^0,f,c
  7679   004A40  D7FC               	bra	u5497
  7680   004A42  2E20               	decfsz	(??_moveLightBlue+1)^0,f,c
  7681   004A44  D7FA               	bra	u5497
  7682   004A46  0000               	nop	
  7683   004A48                     
  7684                           ;maze_navigation.c: 76:     left135(mL,mR);
  7685   004A48  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7686   004A4C  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7687   004A50  EC8F  F025         	call	_left135	;wreg free
  7688   004A54  0012               	return		;funcret
  7689   004A56                     __end_of_moveLightBlue:
  7690                           	callstack 0
  7691                           
  7692 ;; *************** function _left135 *****************
  7693 ;; Defined at:
  7694 ;;		line 247 in file "dc_motor.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7697 ;;		 -> motorL(9), 
  7698 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7699 ;;		 -> motorR(9), 
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;		None
  7702 ;; Return value:  Size  Location     Type
  7703 ;;                  1    wreg      void 
  7704 ;; Registers used:
  7705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7706 ;; Tracked objects:
  7707 ;;		On entry : 0/0
  7708 ;;		On exit  : 0/0
  7709 ;;		Unchanged: 0/0
  7710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7711 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7713 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7714 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7715 ;;Total ram usage:        4 bytes
  7716 ;; Hardware stack levels used: 1
  7717 ;; Hardware stack levels required when called: 4
  7718 ;; This function calls:
  7719 ;;		_stop
  7720 ;;		_turnLeft
  7721 ;; This function is called by:
  7722 ;;		_reverseTurn
  7723 ;;		_moveLightBlue
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           	psect	text43
  7728   004B1E                     __ptext43:
  7729                           	callstack 0
  7730   004B1E                     _left135:
  7731                           	callstack 23
  7732   004B1E                     
  7733                           ;dc_motor.c: 247: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 248
      +                          : {;dc_motor.c: 250:     turnLeft(mL,mR);
  7734   004B1E  C019  F014         	movff	left135@mL,turnLeft@mL
  7735   004B22  C01A  F015         	movff	left135@mR,turnLeft@mR
  7736   004B26  ECC5  F020         	call	_turnLeft	;wreg free
  7737   004B2A                     
  7738                           ;dc_motor.c: 251:     _delay((unsigned long)((425)*(64000000/4000.0)));
  7739   004B2A  0E23               	movlw	35
  7740   004B2C  6E1C               	movwf	(??_left135+1)^0,c
  7741   004B2E  0E80               	movlw	128
  7742   004B30  6E1B               	movwf	??_left135^0,c
  7743   004B32  0E12               	movlw	18
  7744   004B34                     u5507:
  7745   004B34  2EE8               	decfsz	wreg,f,c
  7746   004B36  D7FE               	bra	u5507
  7747   004B38  2E1B               	decfsz	??_left135^0,f,c
  7748   004B3A  D7FC               	bra	u5507
  7749   004B3C  2E1C               	decfsz	(??_left135+1)^0,f,c
  7750   004B3E  D7FA               	bra	u5507
  7751   004B40                     
  7752                           ;dc_motor.c: 252:     stop(mL,mR);
  7753   004B40  C019  F014         	movff	left135@mL,stop@mL
  7754   004B44  C01A  F015         	movff	left135@mR,stop@mR
  7755   004B48  EC3F  F020         	call	_stop	;wreg free
  7756   004B4C  0012               	return		;funcret
  7757   004B4E                     __end_of_left135:
  7758                           	callstack 0
  7759                           
  7760 ;; *************** function _moveGreen *****************
  7761 ;; Defined at:
  7762 ;;		line 26 in file "maze_navigation.c"
  7763 ;; Parameters:    Size  Location     Type
  7764 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7765 ;;		 -> motorL(9), 
  7766 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7767 ;;		 -> motorR(9), 
  7768 ;;  factorL         2   32[COMRAM] unsigned int 
  7769 ;; Auto vars:     Size  Location     Type
  7770 ;;		None
  7771 ;; Return value:  Size  Location     Type
  7772 ;;                  1    wreg      void 
  7773 ;; Registers used:
  7774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7775 ;; Tracked objects:
  7776 ;;		On entry : 0/0
  7777 ;;		On exit  : 0/0
  7778 ;;		Unchanged: 0/0
  7779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7780 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7783 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7784 ;;Total ram usage:        6 bytes
  7785 ;; Hardware stack levels used: 1
  7786 ;; Hardware stack levels required when called: 5
  7787 ;; This function calls:
  7788 ;;		_backHalf
  7789 ;;		_left90
  7790 ;; This function is called by:
  7791 ;;		_decision
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           	psect	text44
  7796   00484E                     __ptext44:
  7797                           	callstack 0
  7798   00484E                     _moveGreen:
  7799                           	callstack 24
  7800   00484E                     
  7801                           ;maze_navigation.c: 26: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigne
      +                          d int factorL);maze_navigation.c: 27: {;maze_navigation.c: 29:     backHalf(mL,mR);
  7802   00484E  C01F  F019         	movff	moveGreen@mL,backHalf@mL
  7803   004852  C020  F01A         	movff	moveGreen@mR,backHalf@mR
  7804   004856  ECA7  F025         	call	_backHalf	;wreg free
  7805   00485A                     
  7806                           ;maze_navigation.c: 30:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7807   00485A  0E29               	movlw	41
  7808   00485C  6E24               	movwf	(??_moveGreen+1)^0,c
  7809   00485E  0E96               	movlw	150
  7810   004860  6E23               	movwf	??_moveGreen^0,c
  7811   004862  0E7F               	movlw	127
  7812   004864                     u5517:
  7813   004864  2EE8               	decfsz	wreg,f,c
  7814   004866  D7FE               	bra	u5517
  7815   004868  2E23               	decfsz	??_moveGreen^0,f,c
  7816   00486A  D7FC               	bra	u5517
  7817   00486C  2E24               	decfsz	(??_moveGreen+1)^0,f,c
  7818   00486E  D7FA               	bra	u5517
  7819   004870  0000               	nop	
  7820   004872                     
  7821                           ;maze_navigation.c: 31:     left90(mL,mR,factorL);
  7822   004872  C01F  F019         	movff	moveGreen@mL,left90@mL
  7823   004876  C020  F01A         	movff	moveGreen@mR,left90@mR
  7824   00487A  C021  F01B         	movff	moveGreen@factorL,left90@factorL
  7825   00487E  C022  F01C         	movff	moveGreen@factorL+1,left90@factorL+1
  7826   004882  EC76  F025         	call	_left90	;wreg free
  7827   004886  0012               	return		;funcret
  7828   004888                     __end_of_moveGreen:
  7829                           	callstack 0
  7830                           
  7831 ;; *************** function _moveBlue *****************
  7832 ;; Defined at:
  7833 ;;		line 35 in file "maze_navigation.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7836 ;;		 -> motorL(9), 
  7837 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7838 ;;		 -> motorR(9), 
  7839 ;; Auto vars:     Size  Location     Type
  7840 ;;		None
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  1    wreg      void 
  7843 ;; Registers used:
  7844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7850 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7852 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7853 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7854 ;;Total ram usage:        4 bytes
  7855 ;; Hardware stack levels used: 1
  7856 ;; Hardware stack levels required when called: 5
  7857 ;; This function calls:
  7858 ;;		_backHalf
  7859 ;;		_turn180
  7860 ;; This function is called by:
  7861 ;;		_decision
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text45
  7866   004A56                     __ptext45:
  7867                           	callstack 0
  7868   004A56                     _moveBlue:
  7869                           	callstack 24
  7870   004A56                     
  7871                           ;maze_navigation.c: 35: void moveBlue(struct DC_motor *mL, struct DC_motor *mR);maze_nav
      +                          igation.c: 36: {;maze_navigation.c: 38:     backHalf(mL,mR);
  7872   004A56  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7873   004A5A  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7874   004A5E  ECA7  F025         	call	_backHalf	;wreg free
  7875   004A62                     
  7876                           ;maze_navigation.c: 39:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7877   004A62  0E29               	movlw	41
  7878   004A64  6E20               	movwf	(??_moveBlue+1)^0,c
  7879   004A66  0E96               	movlw	150
  7880   004A68  6E1F               	movwf	??_moveBlue^0,c
  7881   004A6A  0E7F               	movlw	127
  7882   004A6C                     u5527:
  7883   004A6C  2EE8               	decfsz	wreg,f,c
  7884   004A6E  D7FE               	bra	u5527
  7885   004A70  2E1F               	decfsz	??_moveBlue^0,f,c
  7886   004A72  D7FC               	bra	u5527
  7887   004A74  2E20               	decfsz	(??_moveBlue+1)^0,f,c
  7888   004A76  D7FA               	bra	u5527
  7889   004A78  0000               	nop	
  7890   004A7A                     
  7891                           ;maze_navigation.c: 40:     turn180(mL,mR);
  7892   004A7A  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7893   004A7E  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7894   004A82  EC44  F025         	call	_turn180	;wreg free
  7895   004A86  0012               	return		;funcret
  7896   004A88                     __end_of_moveBlue:
  7897                           	callstack 0
  7898                           
  7899 ;; *************** function _turn180 *****************
  7900 ;; Defined at:
  7901 ;;		line 230 in file "dc_motor.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7904 ;;		 -> motorL(9), 
  7905 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7906 ;;		 -> motorR(9), 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;		None
  7909 ;; Return value:  Size  Location     Type
  7910 ;;                  1    wreg      void 
  7911 ;; Registers used:
  7912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7918 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7920 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7921 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7922 ;;Total ram usage:        4 bytes
  7923 ;; Hardware stack levels used: 1
  7924 ;; Hardware stack levels required when called: 4
  7925 ;; This function calls:
  7926 ;;		_stop
  7927 ;;		_turnLeft
  7928 ;; This function is called by:
  7929 ;;		_reverseTurn
  7930 ;;		_moveBlue
  7931 ;;		_moveWhite
  7932 ;; This function uses a non-reentrant model
  7933 ;;
  7934                           
  7935                           	psect	text46
  7936   004A88                     __ptext46:
  7937                           	callstack 0
  7938   004A88                     _turn180:
  7939                           	callstack 23
  7940   004A88                     
  7941                           ;dc_motor.c: 230: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 231
      +                          : {;dc_motor.c: 232:     turnLeft(mL,mR);
  7942   004A88  C019  F014         	movff	turn180@mL,turnLeft@mL
  7943   004A8C  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7944   004A90  ECC5  F020         	call	_turnLeft	;wreg free
  7945   004A94                     
  7946                           ;dc_motor.c: 233:     _delay((unsigned long)((560)*(64000000/4000.0)));
  7947   004A94  0E2E               	movlw	46
  7948   004A96  6E1C               	movwf	(??_turn180+1)^0,c
  7949   004A98  0E75               	movlw	117
  7950   004A9A  6E1B               	movwf	??_turn180^0,c
  7951   004A9C  0E3C               	movlw	60
  7952   004A9E                     u5537:
  7953   004A9E  2EE8               	decfsz	wreg,f,c
  7954   004AA0  D7FE               	bra	u5537
  7955   004AA2  2E1B               	decfsz	??_turn180^0,f,c
  7956   004AA4  D7FC               	bra	u5537
  7957   004AA6  2E1C               	decfsz	(??_turn180+1)^0,f,c
  7958   004AA8  D7FA               	bra	u5537
  7959   004AAA  D000               	nop2	
  7960   004AAC                     
  7961                           ;dc_motor.c: 234:     stop(mL,mR);
  7962   004AAC  C019  F014         	movff	turn180@mL,stop@mL
  7963   004AB0  C01A  F015         	movff	turn180@mR,stop@mR
  7964   004AB4  EC3F  F020         	call	_stop	;wreg free
  7965   004AB8  0012               	return		;funcret
  7966   004ABA                     __end_of_turn180:
  7967                           	callstack 0
  7968                           
  7969 ;; *************** function _backHalf *****************
  7970 ;; Defined at:
  7971 ;;		line 256 in file "dc_motor.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7974 ;;		 -> motorL(9), 
  7975 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7976 ;;		 -> motorR(9), 
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;		None
  7979 ;; Return value:  Size  Location     Type
  7980 ;;                  1    wreg      void 
  7981 ;; Registers used:
  7982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7983 ;; Tracked objects:
  7984 ;;		On entry : 0/0
  7985 ;;		On exit  : 0/0
  7986 ;;		Unchanged: 0/0
  7987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7988 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7990 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7991 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7992 ;;Total ram usage:        4 bytes
  7993 ;; Hardware stack levels used: 1
  7994 ;; Hardware stack levels required when called: 4
  7995 ;; This function calls:
  7996 ;;		_fullSpeedBack
  7997 ;;		_stop
  7998 ;; This function is called by:
  7999 ;;		_reverseTurn
  8000 ;;		_moveRed
  8001 ;;		_moveGreen
  8002 ;;		_moveBlue
  8003 ;;		_moveOrange
  8004 ;;		_moveLightBlue
  8005 ;;		_moveWhite
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           	psect	text47
  8010   004B4E                     __ptext47:
  8011                           	callstack 0
  8012   004B4E                     _backHalf:
  8013                           	callstack 23
  8014   004B4E                     
  8015                           ;dc_motor.c: 256: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 25
      +                          7: {;dc_motor.c: 258:     fullSpeedBack(mL,mR);
  8016   004B4E  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  8017   004B52  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  8018   004B56  EC04  F021         	call	_fullSpeedBack	;wreg free
  8019   004B5A                     
  8020                           ;dc_motor.c: 259:     _delay((unsigned long)((300)*(64000000/4000.0)));
  8021   004B5A  0E19               	movlw	25
  8022   004B5C  6E1C               	movwf	(??_backHalf+1)^0,c
  8023   004B5E  0E5A               	movlw	90
  8024   004B60  6E1B               	movwf	??_backHalf^0,c
  8025   004B62  0EB2               	movlw	178
  8026   004B64                     u5547:
  8027   004B64  2EE8               	decfsz	wreg,f,c
  8028   004B66  D7FE               	bra	u5547
  8029   004B68  2E1B               	decfsz	??_backHalf^0,f,c
  8030   004B6A  D7FC               	bra	u5547
  8031   004B6C  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  8032   004B6E  D7FA               	bra	u5547
  8033   004B70                     
  8034                           ;dc_motor.c: 260:     stop(mL,mR);
  8035   004B70  C019  F014         	movff	backHalf@mL,stop@mL
  8036   004B74  C01A  F015         	movff	backHalf@mR,stop@mR
  8037   004B78  EC3F  F020         	call	_stop	;wreg free
  8038   004B7C  0012               	return		;funcret
  8039   004B7E                     __end_of_backHalf:
  8040                           	callstack 0
  8041                           
  8042 ;; *************** function _fullSpeedBack *****************
  8043 ;; Defined at:
  8044 ;;		line 182 in file "dc_motor.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8047 ;;		 -> motorL(9), 
  8048 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8049 ;;		 -> motorR(9), 
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;  power           2   22[COMRAM] int 
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      void 
  8054 ;; Registers used:
  8055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8061 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8062 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8063 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8064 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8065 ;;Total ram usage:        5 bytes
  8066 ;; Hardware stack levels used: 1
  8067 ;; Hardware stack levels required when called: 3
  8068 ;; This function calls:
  8069 ;;		_setMotorPWM
  8070 ;; This function is called by:
  8071 ;;		_backHalf
  8072 ;;		_backOneAndHalf
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           	psect	text48
  8077   004208                     __ptext48:
  8078                           	callstack 0
  8079   004208                     _fullSpeedBack:
  8080                           	callstack 23
  8081   004208                     
  8082                           ;dc_motor.c: 182: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 183: {;dc_m
      +                          otor.c: 185:     mL->direction = 0;
  8083   004208  5014               	movf	fullSpeedBack@mL^0,w,c
  8084   00420A  6ED9               	movwf	fsr2l,c
  8085   00420C  6ADA               	clrf	fsr2h,c
  8086   00420E  0E01               	movlw	1
  8087   004210  26D9               	addwf	fsr2l,f,c
  8088   004212  6ADF               	clrf	indf2,c
  8089                           
  8090                           ;dc_motor.c: 186:     mR->direction = 0;
  8091   004214  5015               	movf	fullSpeedBack@mR^0,w,c
  8092   004216  6ED9               	movwf	fsr2l,c
  8093   004218  6ADA               	clrf	fsr2h,c
  8094   00421A  0E01               	movlw	1
  8095   00421C  26D9               	addwf	fsr2l,f,c
  8096   00421E  6ADF               	clrf	indf2,c
  8097   004220                     
  8098                           ;dc_motor.c: 188:     for(int power = 0; power <= 50; power++) {
  8099   004220  0E00               	movlw	0
  8100   004222  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8101   004224  0E00               	movlw	0
  8102   004226  6E17               	movwf	fullSpeedBack@power^0,c
  8103   004228                     l3990:
  8104                           
  8105                           ;dc_motor.c: 189:         mL->power = power;
  8106   004228  5014               	movf	fullSpeedBack@mL^0,w,c
  8107   00422A  6ED9               	movwf	fsr2l,c
  8108   00422C  6ADA               	clrf	fsr2h,c
  8109   00422E  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8110                           
  8111                           ;dc_motor.c: 190:         mR->power = power;
  8112   004232  5015               	movf	fullSpeedBack@mR^0,w,c
  8113   004234  6ED9               	movwf	fsr2l,c
  8114   004236  6ADA               	clrf	fsr2h,c
  8115   004238  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8116   00423C                     
  8117                           ;dc_motor.c: 193:         setMotorPWM(mL);
  8118   00423C  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8119   004240  EC1F  F019         	call	_setMotorPWM	;wreg free
  8120   004244                     
  8121                           ;dc_motor.c: 194:         setMotorPWM(mR);
  8122   004244  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8123   004248  EC1F  F019         	call	_setMotorPWM	;wreg free
  8124   00424C                     
  8125                           ;dc_motor.c: 197:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8126   00424C  0E0B               	movlw	11
  8127   00424E  6E16               	movwf	??_fullSpeedBack^0,c
  8128   004250  0E62               	movlw	98
  8129   004252                     u5557:
  8130   004252  2EE8               	decfsz	wreg,f,c
  8131   004254  D7FE               	bra	u5557
  8132   004256  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8133   004258  D7FC               	bra	u5557
  8134   00425A  D000               	nop2	
  8135   00425C                     
  8136                           ;dc_motor.c: 198:     }
  8137   00425C  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8138   00425E  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8139   004260  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8140   004262  EF3C  F021         	goto	u3011
  8141   004266  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8142   004268  E109               	bnz	u3010
  8143   00426A  0E33               	movlw	51
  8144   00426C  5C17               	subwf	fullSpeedBack@power^0,w,c
  8145   00426E  A0D8               	btfss	status,0,c
  8146   004270  EF3C  F021         	goto	u3011
  8147   004274  EF3E  F021         	goto	u3010
  8148   004278                     u3011:
  8149   004278  EF14  F021         	goto	l3990
  8150   00427C                     u3010:
  8151   00427C  0012               	return		;funcret
  8152   00427E                     __end_of_fullSpeedBack:
  8153                           	callstack 0
  8154                           
  8155 ;; *************** function _logAction *****************
  8156 ;; Defined at:
  8157 ;;		line 15 in file "return_func.c"
  8158 ;; Parameters:    Size  Location     Type
  8159 ;;  newAction       1    wreg     unsigned char 
  8160 ;;  newTime         4    1[COMRAM] long 
  8161 ;;  path_step       2    5[COMRAM] unsigned int 
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;  newAction       1    9[COMRAM] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  1    wreg      void 
  8166 ;; Registers used:
  8167 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8173 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8175 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8176 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8177 ;;Total ram usage:        9 bytes
  8178 ;; Hardware stack levels used: 1
  8179 ;; Hardware stack levels required when called: 1
  8180 ;; This function calls:
  8181 ;;		Nothing
  8182 ;; This function is called by:
  8183 ;;		_decision
  8184 ;;		_get16bitTMR0val
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           	psect	text49
  8189   00435C                     __ptext49:
  8190                           	callstack 0
  8191   00435C                     _logAction:
  8192                           	callstack 27
  8193                           
  8194                           ;incstack = 0
  8195                           ;logAction@newAction stored from wreg
  8196   00435C  6E0A               	movwf	logAction@newAction^0,c
  8197   00435E                     
  8198                           ;return_func.c: 16:     if (path_step < 50) {
  8199   00435E  5007               	movf	(logAction@path_step+1)^0,w,c
  8200   004360  E107               	bnz	u3881
  8201   004362  0E32               	movlw	50
  8202   004364  5C06               	subwf	logAction@path_step^0,w,c
  8203   004366  B0D8               	btfsc	status,0,c
  8204   004368  EFB8  F021         	goto	u3881
  8205   00436C  EFBA  F021         	goto	u3880
  8206   004370                     u3881:
  8207   004370  EFDA  F021         	goto	l646
  8208   004374                     u3880:
  8209   004374                     
  8210                           ;return_func.c: 17:         action[path_step] = newAction;
  8211   004374  0E3C               	movlw	low _action
  8212   004376  2406               	addwf	logAction@path_step^0,w,c
  8213   004378  6ED9               	movwf	fsr2l,c
  8214   00437A  0E01               	movlw	high _action
  8215   00437C  2007               	addwfc	(logAction@path_step+1)^0,w,c
  8216   00437E  6EDA               	movwf	fsr2h,c
  8217   004380  C00A  FFDF         	movff	logAction@newAction,indf2
  8218                           
  8219                           ;return_func.c: 18:         time[path_step] = newTime;
  8220   004384  0E00               	movlw	low _time
  8221   004386  6E08               	movwf	??_logAction^0,c
  8222   004388  0E02               	movlw	high _time
  8223   00438A  6E09               	movwf	(??_logAction+1)^0,c
  8224   00438C  90D8               	bcf	status,0,c
  8225   00438E  3406               	rlcf	logAction@path_step^0,w,c
  8226   004390  6ED9               	movwf	fsr2l,c
  8227   004392  3407               	rlcf	(logAction@path_step+1)^0,w,c
  8228   004394  6EDA               	movwf	fsr2h,c
  8229   004396  90D8               	bcf	status,0,c
  8230   004398  36D9               	rlcf	fsr2l,f,c
  8231   00439A  36DA               	rlcf	fsr2h,f,c
  8232   00439C  5008               	movf	??_logAction^0,w,c
  8233   00439E  26D9               	addwf	fsr2l,f,c
  8234   0043A0  5009               	movf	(??_logAction+1)^0,w,c
  8235   0043A2  22DA               	addwfc	fsr2h,f,c
  8236   0043A4  C002  FFDE         	movff	logAction@newTime,postinc2
  8237   0043A8  C003  FFDE         	movff	logAction@newTime+1,postinc2
  8238   0043AC  C004  FFDE         	movff	logAction@newTime+2,postinc2
  8239   0043B0  C005  FFDE         	movff	logAction@newTime+3,postinc2
  8240   0043B4                     l646:
  8241   0043B4  0012               	return		;funcret
  8242   0043B6                     __end_of_logAction:
  8243                           	callstack 0
  8244                           
  8245 ;; *************** function _color_clicker_lights_init *****************
  8246 ;; Defined at:
  8247 ;;		line 27 in file "color.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;		None
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;		None
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  1    wreg      void 
  8254 ;; Registers used:
  8255 ;;		None
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8265 ;;Total ram usage:        0 bytes
  8266 ;; Hardware stack levels used: 1
  8267 ;; Hardware stack levels required when called: 1
  8268 ;; This function calls:
  8269 ;;		Nothing
  8270 ;; This function is called by:
  8271 ;;		_main
  8272 ;; This function uses a non-reentrant model
  8273 ;;
  8274                           
  8275                           	psect	text50
  8276   004CCA                     __ptext50:
  8277                           	callstack 0
  8278   004CCA                     _color_clicker_lights_init:
  8279                           	callstack 29
  8280   004CCA                     
  8281                           ;color.c: 30:     TRISGbits.TRISG0 = 0;
  8282   004CCA  9087               	bcf	135,0,c	;volatile
  8283                           
  8284                           ;color.c: 31:     LATGbits.LATG0 = 0;
  8285   004CCC  907F               	bcf	127,0,c	;volatile
  8286                           
  8287                           ;color.c: 32:     TRISEbits.TRISE7 = 0;
  8288   004CCE  9E85               	bcf	133,7,c	;volatile
  8289                           
  8290                           ;color.c: 33:     LATEbits.LATE7 = 0;
  8291   004CD0  9E7D               	bcf	125,7,c	;volatile
  8292                           
  8293                           ;color.c: 34:     TRISAbits.TRISA3 = 0;
  8294   004CD2  9681               	bcf	129,3,c	;volatile
  8295                           
  8296                           ;color.c: 35:     LATAbits.LATA3 = 0;
  8297   004CD4  9679               	bcf	121,3,c	;volatile
  8298   004CD6  0012               	return		;funcret
  8299   004CD8                     __end_of_color_clicker_lights_init:
  8300                           	callstack 0
  8301                           
  8302 ;; *************** function _color_click_init *****************
  8303 ;; Defined at:
  8304 ;;		line 11 in file "color.c"
  8305 ;; Parameters:    Size  Location     Type
  8306 ;;		None
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;		None
  8309 ;; Return value:  Size  Location     Type
  8310 ;;                  1    wreg      void 
  8311 ;; Registers used:
  8312 ;;		wreg, status,2, status,0, cstack
  8313 ;; Tracked objects:
  8314 ;;		On entry : 0/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8320 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8321 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8322 ;;Total ram usage:        1 bytes
  8323 ;; Hardware stack levels used: 1
  8324 ;; Hardware stack levels required when called: 4
  8325 ;; This function calls:
  8326 ;;		_I2C_2_Master_Init
  8327 ;;		_color_writetoaddr
  8328 ;; This function is called by:
  8329 ;;		_main
  8330 ;; This function uses a non-reentrant model
  8331 ;;
  8332                           
  8333                           	psect	text51
  8334   004928                     __ptext51:
  8335                           	callstack 0
  8336   004928                     _color_click_init:
  8337                           	callstack 26
  8338   004928                     
  8339                           ;color.c: 14:     I2C_2_Master_Init();
  8340   004928  ECD7  F025         	call	_I2C_2_Master_Init	;wreg free
  8341   00492C                     
  8342                           ;color.c: 17:   color_writetoaddr(0x00, 0x01);
  8343   00492C  0E01               	movlw	1
  8344   00492E  6E04               	movwf	color_writetoaddr@value^0,c
  8345   004930  0E00               	movlw	0
  8346   004932  EC13  F026         	call	_color_writetoaddr
  8347   004936                     
  8348                           ;color.c: 18:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8349   004936  0E3F               	movlw	63
  8350   004938  6E06               	movwf	??_color_click_init^0,c
  8351   00493A  0E55               	movlw	85
  8352   00493C                     u5567:
  8353   00493C  2EE8               	decfsz	wreg,f,c
  8354   00493E  D7FE               	bra	u5567
  8355   004940  2E06               	decfsz	??_color_click_init^0,f,c
  8356   004942  D7FC               	bra	u5567
  8357   004944  0000               	nop	
  8358   004946                     
  8359                           ;color.c: 21:  color_writetoaddr(0x00, 0x03);
  8360   004946  0E03               	movlw	3
  8361   004948  6E04               	movwf	color_writetoaddr@value^0,c
  8362   00494A  0E00               	movlw	0
  8363   00494C  EC13  F026         	call	_color_writetoaddr
  8364   004950                     
  8365                           ;color.c: 24:  color_writetoaddr(0x01, 0xD5);
  8366   004950  0ED5               	movlw	213
  8367   004952  6E04               	movwf	color_writetoaddr@value^0,c
  8368   004954  0E01               	movlw	1
  8369   004956  EC13  F026         	call	_color_writetoaddr
  8370   00495A  0012               	return		;funcret
  8371   00495C                     __end_of_color_click_init:
  8372                           	callstack 0
  8373                           
  8374 ;; *************** function _color_writetoaddr *****************
  8375 ;; Defined at:
  8376 ;;		line 39 in file "color.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;  address         1    wreg     unsigned char 
  8379 ;;  value           1    3[COMRAM] unsigned char 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  address         1    4[COMRAM] unsigned char 
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      void 
  8384 ;; Registers used:
  8385 ;;		wreg, status,2, status,0, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8391 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8395 ;;Total ram usage:        2 bytes
  8396 ;; Hardware stack levels used: 1
  8397 ;; Hardware stack levels required when called: 3
  8398 ;; This function calls:
  8399 ;;		_I2C_2_Master_Start
  8400 ;;		_I2C_2_Master_Stop
  8401 ;;		_I2C_2_Master_Write
  8402 ;; This function is called by:
  8403 ;;		_color_click_init
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           	psect	text52
  8408   004C26                     __ptext52:
  8409                           	callstack 0
  8410   004C26                     _color_writetoaddr:
  8411                           	callstack 26
  8412                           
  8413                           ;incstack = 0
  8414                           ;color_writetoaddr@address stored from wreg
  8415   004C26  6E05               	movwf	color_writetoaddr@address^0,c
  8416   004C28                     
  8417                           ;color.c: 40:     I2C_2_Master_Start();
  8418   004C28  EC7D  F026         	call	_I2C_2_Master_Start	;wreg free
  8419                           
  8420                           ;color.c: 41:     I2C_2_Master_Write(0x52 | 0x00);
  8421   004C2C  0E52               	movlw	82
  8422   004C2E  EC6C  F026         	call	_I2C_2_Master_Write
  8423                           
  8424                           ;color.c: 42:     I2C_2_Master_Write(0x80 | address);
  8425   004C32  5005               	movf	color_writetoaddr@address^0,w,c
  8426   004C34  0980               	iorlw	128
  8427   004C36  EC6C  F026         	call	_I2C_2_Master_Write
  8428                           
  8429                           ;color.c: 43:     I2C_2_Master_Write(value);
  8430   004C3A  5004               	movf	color_writetoaddr@value^0,w,c
  8431   004C3C  EC6C  F026         	call	_I2C_2_Master_Write
  8432                           
  8433                           ;color.c: 44:     I2C_2_Master_Stop();
  8434   004C40  EC78  F026         	call	_I2C_2_Master_Stop	;wreg free
  8435   004C44  0012               	return		;funcret
  8436   004C46                     __end_of_color_writetoaddr:
  8437                           	callstack 0
  8438                           
  8439 ;; *************** function _I2C_2_Master_Init *****************
  8440 ;; Defined at:
  8441 ;;		line 4 in file "i2c.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;		None
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;		None
  8446 ;; Return value:  Size  Location     Type
  8447 ;;                  1    wreg      void 
  8448 ;; Registers used:
  8449 ;;		wreg, status,2
  8450 ;; Tracked objects:
  8451 ;;		On entry : 0/0
  8452 ;;		On exit  : 0/0
  8453 ;;		Unchanged: 0/0
  8454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8459 ;;Total ram usage:        0 bytes
  8460 ;; Hardware stack levels used: 1
  8461 ;; Hardware stack levels required when called: 1
  8462 ;; This function calls:
  8463 ;;		Nothing
  8464 ;; This function is called by:
  8465 ;;		_color_click_init
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           	psect	text53
  8470   004BAE                     __ptext53:
  8471                           	callstack 0
  8472   004BAE                     _I2C_2_Master_Init:
  8473                           	callstack 28
  8474   004BAE                     
  8475                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8476   004BAE  010E               	movlb	14	; () banked
  8477   004BB0  51D9               	movf	217,w,b	;volatile
  8478   004BB2  0BF0               	andlw	-16
  8479   004BB4  0908               	iorlw	8
  8480   004BB6  6FD9               	movwf	217,b	;volatile
  8481   004BB8                     
  8482                           ; BSR set to: 14
  8483                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8484   004BB8  8BD9               	bsf	217,5,b	;volatile
  8485                           
  8486                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8487   004BBA  0E9F               	movlw	159
  8488   004BBC  6FD6               	movwf	214,b	;volatile
  8489   004BBE                     
  8490                           ; BSR set to: 14
  8491                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8492   004BBE  8A84               	bsf	132,5,c	;volatile
  8493   004BC0                     
  8494                           ; BSR set to: 14
  8495                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8496   004BC0  8C84               	bsf	132,6,c	;volatile
  8497   004BC2                     
  8498                           ; BSR set to: 14
  8499                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8500   004BC2  9BA7               	bcf	167,5,b	;volatile
  8501   004BC4                     
  8502                           ; BSR set to: 14
  8503                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8504   004BC4  9DA7               	bcf	167,6,b	;volatile
  8505                           
  8506                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8507   004BC6  0E1D               	movlw	29
  8508   004BC8  6F1D               	movwf	29,b	;volatile
  8509                           
  8510                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8511   004BCA  0E1E               	movlw	30
  8512   004BCC  6F1C               	movwf	28,b	;volatile
  8513                           
  8514                           ;i2c.c: 18:   RD5PPS=0x1C;
  8515   004BCE  0E1C               	movlw	28
  8516   004BD0  6F6F               	movwf	111,b	;volatile
  8517                           
  8518                           ;i2c.c: 19:   RD6PPS=0x1B;
  8519   004BD2  0E1B               	movlw	27
  8520   004BD4  6F70               	movwf	112,b	;volatile
  8521   004BD6                     
  8522                           ; BSR set to: 14
  8523   004BD6  0012               	return		;funcret
  8524   004BD8                     __end_of_I2C_2_Master_Init:
  8525                           	callstack 0
  8526                           
  8527 ;; *************** function _calibration_turningR *****************
  8528 ;; Defined at:
  8529 ;;		line 78 in file "calibration.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;  mL              1   75[COMRAM] PTR struct DC_motor
  8532 ;;		 -> motorL(9), 
  8533 ;;  mR              1   76[COMRAM] PTR struct DC_motor
  8534 ;;		 -> motorR(9), 
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;  i               2   12[BANK0 ] int 
  8537 ;;  adjustment      4    8[BANK0 ] float 
  8538 ;;  inactivityCo    4    4[BANK0 ] unsigned long 
  8539 ;;  inactivityLi    4    0[BANK0 ] const unsigned long 
  8540 ;;  factorR         2   14[BANK0 ] int 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  2   75[COMRAM] unsigned int 
  8543 ;; Registers used:
  8544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8550 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8551 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8552 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8553 ;;      Totals:         4      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8554 ;;Total ram usage:       20 bytes
  8555 ;; Hardware stack levels used: 1
  8556 ;; Hardware stack levels required when called: 5
  8557 ;; This function calls:
  8558 ;;		___fladd
  8559 ;;		___flsub
  8560 ;;		___fltol
  8561 ;;		___xxtofl
  8562 ;;		_right90
  8563 ;; This function is called by:
  8564 ;;		_main
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           	psect	text54
  8569   0024DE                     __ptext54:
  8570                           	callstack 0
  8571   0024DE                     _calibration_turningR:
  8572                           	callstack 25
  8573   0024DE                     
  8574                           ;calibration.c: 79:     int factorR = 0;
  8575   0024DE  0E00               	movlw	0
  8576   0024E0  0100               	movlb	0	; () banked
  8577   0024E2  6F6F               	movwf	(calibration_turningR@factorR+1)& (0+255),b
  8578   0024E4  0E00               	movlw	0
  8579   0024E6  6F6E               	movwf	calibration_turningR@factorR& (0+255),b
  8580                           
  8581                           ;calibration.c: 80:     float adjustment = 10;
  8582   0024E8  0E00               	movlw	0
  8583   0024EA  6F68               	movwf	calibration_turningR@adjustment& (0+255),b
  8584   0024EC  0E00               	movlw	0
  8585   0024EE  6F69               	movwf	(calibration_turningR@adjustment+1)& (0+255),b
  8586   0024F0  0E20               	movlw	32
  8587   0024F2  6F6A               	movwf	(calibration_turningR@adjustment+2)& (0+255),b
  8588   0024F4  0E41               	movlw	65
  8589   0024F6  6F6B               	movwf	(calibration_turningR@adjustment+3)& (0+255),b
  8590                           
  8591                           ;calibration.c: 82:     const unsigned long inactivityLimit = 3000 / 1;
  8592   0024F8  0EB8               	movlw	184
  8593   0024FA  6F60               	movwf	calibration_turningR@inactivityLimit& (0+255),b
  8594   0024FC  0E0B               	movlw	11
  8595   0024FE  6F61               	movwf	(calibration_turningR@inactivityLimit+1)& (0+255),b
  8596   002500  0E00               	movlw	0
  8597   002502  6F62               	movwf	(calibration_turningR@inactivityLimit+2)& (0+255),b
  8598   002504  0E00               	movlw	0
  8599   002506  6F63               	movwf	(calibration_turningR@inactivityLimit+3)& (0+255),b
  8600   002508                     l758:
  8601                           
  8602                           ;calibration.c: 86:         for (int i = 0; i < 4; i++) {
  8603   002508  0E00               	movlw	0
  8604   00250A  0100               	movlb	0	; () banked
  8605   00250C  6F6D               	movwf	(calibration_turningR@i+1)& (0+255),b
  8606   00250E  0E00               	movlw	0
  8607   002510  6F6C               	movwf	calibration_turningR@i& (0+255),b
  8608   002512                     l5428:
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;calibration.c: 87:             right90(mL, mR, factorR);
  8612   002512  C04C  F019         	movff	calibration_turningR@mL,right90@mL
  8613   002516  C04D  F01A         	movff	calibration_turningR@mR,right90@mR
  8614   00251A  C06E  F01B         	movff	calibration_turningR@factorR,right90@factorR
  8615   00251E  C06F  F01C         	movff	calibration_turningR@factorR+1,right90@factorR+1
  8616   002522  EC5D  F025         	call	_right90	;wreg free
  8617   002526                     
  8618                           ;calibration.c: 88:             _delay((unsigned long)((1000)*(64000000/4000.0)));
  8619   002526  0E52               	movlw	82
  8620   002528  6E4F               	movwf	(??_calibration_turningR+1)^0,c
  8621   00252A  0E2B               	movlw	43
  8622   00252C  6E4E               	movwf	??_calibration_turningR^0,c
  8623   00252E  0E00               	movlw	0
  8624   002530                     u5577:
  8625   002530  2EE8               	decfsz	wreg,f,c
  8626   002532  D7FE               	bra	u5577
  8627   002534  2E4E               	decfsz	??_calibration_turningR^0,f,c
  8628   002536  D7FC               	bra	u5577
  8629   002538  2E4F               	decfsz	(??_calibration_turningR+1)^0,f,c
  8630   00253A  D7FA               	bra	u5577
  8631   00253C  D000               	nop2	
  8632   00253E                     
  8633                           ;calibration.c: 89:         }
  8634   00253E  0100               	movlb	0	; () banked
  8635   002540  4B6C               	infsnz	calibration_turningR@i& (0+255),f,b
  8636   002542  2B6D               	incf	(calibration_turningR@i+1)& (0+255),f,b
  8637   002544                     
  8638                           ; BSR set to: 0
  8639   002544  BF6D               	btfsc	(calibration_turningR@i+1)& (0+255),7,b
  8640   002546  EFAE  F012         	goto	u4781
  8641   00254A  516D               	movf	(calibration_turningR@i+1)& (0+255),w,b
  8642   00254C  E109               	bnz	u4780
  8643   00254E  0E04               	movlw	4
  8644   002550  5D6C               	subwf	calibration_turningR@i& (0+255),w,b
  8645   002552  A0D8               	btfss	status,0,c
  8646   002554  EFAE  F012         	goto	u4781
  8647   002558  EFB0  F012         	goto	u4780
  8648   00255C                     u4781:
  8649   00255C  EF89  F012         	goto	l5428
  8650   002560                     u4780:
  8651   002560                     
  8652                           ; BSR set to: 0
  8653                           ;calibration.c: 91:         inactivityCounter = 0;
  8654   002560  0E00               	movlw	0
  8655   002562  6F64               	movwf	calibration_turningR@inactivityCounter& (0+255),b
  8656   002564  0E00               	movlw	0
  8657   002566  6F65               	movwf	(calibration_turningR@inactivityCounter+1)& (0+255),b
  8658   002568  0E00               	movlw	0
  8659   00256A  6F66               	movwf	(calibration_turningR@inactivityCounter+2)& (0+255),b
  8660   00256C  0E00               	movlw	0
  8661   00256E  6F67               	movwf	(calibration_turningR@inactivityCounter+3)& (0+255),b
  8662   002570                     l5438:
  8663                           
  8664                           ;calibration.c: 95:             if (!PORTFbits.RF2 || !PORTFbits.RF3) {
  8665   002570  A48E               	btfss	142,2,c	;volatile
  8666   002572  EFBD  F012         	goto	u4791
  8667   002576  EFBF  F012         	goto	u4790
  8668   00257A                     u4791:
  8669   00257A  EFC6  F012         	goto	l5442
  8670   00257E                     u4790:
  8671   00257E  B68E               	btfsc	142,3,c	;volatile
  8672   002580  EFC4  F012         	goto	u4801
  8673   002584  EFC6  F012         	goto	u4800
  8674   002588                     u4801:
  8675   002588  EFD1  F012         	goto	l5444
  8676   00258C                     u4800:
  8677   00258C                     l5442:
  8678                           
  8679                           ;calibration.c: 96:                 inactivityCounter = 0;
  8680   00258C  0E00               	movlw	0
  8681   00258E  0100               	movlb	0	; () banked
  8682   002590  6F64               	movwf	calibration_turningR@inactivityCounter& (0+255),b
  8683   002592  0E00               	movlw	0
  8684   002594  6F65               	movwf	(calibration_turningR@inactivityCounter+1)& (0+255),b
  8685   002596  0E00               	movlw	0
  8686   002598  6F66               	movwf	(calibration_turningR@inactivityCounter+2)& (0+255),b
  8687   00259A  0E00               	movlw	0
  8688   00259C  6F67               	movwf	(calibration_turningR@inactivityCounter+3)& (0+255),b
  8689                           
  8690                           ;calibration.c: 97:             } else {
  8691   00259E  EFED  F012         	goto	l5448
  8692   0025A2                     l5444:
  8693                           
  8694                           ;calibration.c: 98:                 inactivityCounter++;
  8695   0025A2  0E01               	movlw	1
  8696   0025A4  0100               	movlb	0	; () banked
  8697   0025A6  2764               	addwf	calibration_turningR@inactivityCounter& (0+255),f,b
  8698   0025A8  0E00               	movlw	0
  8699   0025AA  2365               	addwfc	(calibration_turningR@inactivityCounter+1)& (0+255),f,b
  8700   0025AC  2366               	addwfc	(calibration_turningR@inactivityCounter+2)& (0+255),f,b
  8701   0025AE  2367               	addwfc	(calibration_turningR@inactivityCounter+3)& (0+255),f,b
  8702                           
  8703                           ;calibration.c: 99:                 if (inactivityCounter > inactivityLimit) {
  8704   0025B0  5164               	movf	calibration_turningR@inactivityCounter& (0+255),w,b
  8705   0025B2  5D60               	subwf	calibration_turningR@inactivityLimit& (0+255),w,b
  8706   0025B4  5165               	movf	(calibration_turningR@inactivityCounter+1)& (0+255),w,b
  8707   0025B6  5961               	subwfb	(calibration_turningR@inactivityLimit+1)& (0+255),w,b
  8708   0025B8  5166               	movf	(calibration_turningR@inactivityCounter+2)& (0+255),w,b
  8709   0025BA  5962               	subwfb	(calibration_turningR@inactivityLimit+2)& (0+255),w,b
  8710   0025BC  5167               	movf	(calibration_turningR@inactivityCounter+3)& (0+255),w,b
  8711   0025BE  5963               	subwfb	(calibration_turningR@inactivityLimit+3)& (0+255),w,b
  8712   0025C0  B0D8               	btfsc	status,0,c
  8713   0025C2  EFE5  F012         	goto	u4811
  8714   0025C6  EFE7  F012         	goto	u4810
  8715   0025CA                     u4811:
  8716   0025CA  EFED  F012         	goto	l5448
  8717   0025CE                     u4810:
  8718   0025CE                     
  8719                           ; BSR set to: 0
  8720                           ;calibration.c: 101:                     return (unsigned int)factorR;
  8721   0025CE  C06E  F04C         	movff	calibration_turningR@factorR,?_calibration_turningR
  8722   0025D2  C06F  F04D         	movff	calibration_turningR@factorR+1,?_calibration_turningR+1
  8723   0025D6  EF91  F013         	goto	l767
  8724   0025DA                     l5448:
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;calibration.c: 104:             _delay((unsigned long)((1)*(64000000/4000.0)));
  8728   0025DA  0E15               	movlw	21
  8729   0025DC  6E4E               	movwf	??_calibration_turningR^0,c
  8730   0025DE  0EC6               	movlw	198
  8731   0025E0                     u5587:
  8732   0025E0  2EE8               	decfsz	wreg,f,c
  8733   0025E2  D7FE               	bra	u5587
  8734   0025E4  2E4E               	decfsz	??_calibration_turningR^0,f,c
  8735   0025E6  D7FC               	bra	u5587
  8736   0025E8  D000               	nop2	
  8737   0025EA                     
  8738                           ;calibration.c: 107:             if (PORTFbits.RF2 == 0) {
  8739   0025EA  B48E               	btfsc	142,2,c	;volatile
  8740   0025EC  EFFA  F012         	goto	u4821
  8741   0025F0  EFFC  F012         	goto	u4820
  8742   0025F4                     u4821:
  8743   0025F4  EF49  F013         	goto	l768
  8744   0025F8                     u4820:
  8745   0025F8                     
  8746                           ;calibration.c: 108:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  8747   0025F8  0E11               	movlw	17
  8748   0025FA  6E4F               	movwf	(??_calibration_turningR+1)^0,c
  8749   0025FC  0E3C               	movlw	60
  8750   0025FE  6E4E               	movwf	??_calibration_turningR^0,c
  8751   002600  0ECB               	movlw	203
  8752   002602                     u5597:
  8753   002602  2EE8               	decfsz	wreg,f,c
  8754   002604  D7FE               	bra	u5597
  8755   002606  2E4E               	decfsz	??_calibration_turningR^0,f,c
  8756   002608  D7FC               	bra	u5597
  8757   00260A  2E4F               	decfsz	(??_calibration_turningR+1)^0,f,c
  8758   00260C  D7FA               	bra	u5597
  8759   00260E  0000               	nop	
  8760   002610                     
  8761                           ;calibration.c: 109:                 factorR += adjustment;
  8762   002610  C068  F014         	movff	calibration_turningR@adjustment,___fladd@a
  8763   002614  C069  F015         	movff	calibration_turningR@adjustment+1,___fladd@a+1
  8764   002618  C06A  F016         	movff	calibration_turningR@adjustment+2,___fladd@a+2
  8765   00261C  C06B  F017         	movff	calibration_turningR@adjustment+3,___fladd@a+3
  8766   002620  C06E  F002         	movff	calibration_turningR@factorR,___xxtofl@val
  8767   002624  C06F  F003         	movff	calibration_turningR@factorR+1,___xxtofl@val+1
  8768   002628  0E00               	movlw	0
  8769   00262A  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  8770   00262C  0EFF               	movlw	-1
  8771   00262E  6E04               	movwf	(___xxtofl@val+2)^0,c
  8772   002630  6E05               	movwf	(___xxtofl@val+3)^0,c
  8773   002632  0E01               	movlw	1
  8774   002634  ECB5  F014         	call	___xxtofl
  8775   002638  C002  F010         	movff	?___xxtofl,___fladd@b
  8776   00263C  C003  F011         	movff	?___xxtofl+1,___fladd@b+1
  8777   002640  C004  F012         	movff	?___xxtofl+2,___fladd@b+2
  8778   002644  C005  F013         	movff	?___xxtofl+3,___fladd@b+3
  8779   002648  ECDB  F00A         	call	___fladd	;wreg free
  8780   00264C  C010  F042         	movff	?___fladd,___fltol@f1
  8781   002650  C011  F043         	movff	?___fladd+1,___fltol@f1+1
  8782   002654  C012  F044         	movff	?___fladd+2,___fltol@f1+2
  8783   002658  C013  F045         	movff	?___fladd+3,___fltol@f1+3
  8784   00265C  ECE8  F01A         	call	___fltol	;wreg free
  8785   002660  C042  F06E         	movff	?___fltol,calibration_turningR@factorR
  8786   002664  C043  F06F         	movff	?___fltol+1,calibration_turningR@factorR+1
  8787   002668                     l769:
  8788   002668  A48E               	btfss	142,2,c	;volatile
  8789   00266A  EF39  F013         	goto	u4831
  8790   00266E  EF3B  F013         	goto	u4830
  8791   002672                     u4831:
  8792   002672  EF34  F013         	goto	l769
  8793   002676                     u4830:
  8794   002676                     l5456:
  8795                           
  8796                           ;calibration.c: 111:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  8797   002676  0E11               	movlw	17
  8798   002678  6E4F               	movwf	(??_calibration_turningR+1)^0,c
  8799   00267A  0E3C               	movlw	60
  8800   00267C  6E4E               	movwf	??_calibration_turningR^0,c
  8801   00267E  0ECB               	movlw	203
  8802   002680                     u5607:
  8803   002680  2EE8               	decfsz	wreg,f,c
  8804   002682  D7FE               	bra	u5607
  8805   002684  2E4E               	decfsz	??_calibration_turningR^0,f,c
  8806   002686  D7FC               	bra	u5607
  8807   002688  2E4F               	decfsz	(??_calibration_turningR+1)^0,f,c
  8808   00268A  D7FA               	bra	u5607
  8809   00268C  0000               	nop	
  8810                           
  8811                           ;calibration.c: 112:                 break;
  8812   00268E  EF84  F012         	goto	l758
  8813   002692                     l768:
  8814                           
  8815                           ;calibration.c: 116:             if (PORTFbits.RF3 == 0) {
  8816   002692  B68E               	btfsc	142,3,c	;volatile
  8817   002694  EF4E  F013         	goto	u4841
  8818   002698  EF50  F013         	goto	u4840
  8819   00269C                     u4841:
  8820   00269C  EFB8  F012         	goto	l5438
  8821   0026A0                     u4840:
  8822   0026A0                     
  8823                           ;calibration.c: 117:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  8824   0026A0  0E11               	movlw	17
  8825   0026A2  6E4F               	movwf	(??_calibration_turningR+1)^0,c
  8826   0026A4  0E3C               	movlw	60
  8827   0026A6  6E4E               	movwf	??_calibration_turningR^0,c
  8828   0026A8  0ECB               	movlw	203
  8829   0026AA                     u5617:
  8830   0026AA  2EE8               	decfsz	wreg,f,c
  8831   0026AC  D7FE               	bra	u5617
  8832   0026AE  2E4E               	decfsz	??_calibration_turningR^0,f,c
  8833   0026B0  D7FC               	bra	u5617
  8834   0026B2  2E4F               	decfsz	(??_calibration_turningR+1)^0,f,c
  8835   0026B4  D7FA               	bra	u5617
  8836   0026B6  0000               	nop	
  8837   0026B8                     
  8838                           ;calibration.c: 118:                 factorR -= adjustment;
  8839   0026B8  C068  F024         	movff	calibration_turningR@adjustment,___flsub@a
  8840   0026BC  C069  F025         	movff	calibration_turningR@adjustment+1,___flsub@a+1
  8841   0026C0  C06A  F026         	movff	calibration_turningR@adjustment+2,___flsub@a+2
  8842   0026C4  C06B  F027         	movff	calibration_turningR@adjustment+3,___flsub@a+3
  8843   0026C8  C06E  F002         	movff	calibration_turningR@factorR,___xxtofl@val
  8844   0026CC  C06F  F003         	movff	calibration_turningR@factorR+1,___xxtofl@val+1
  8845   0026D0  0E00               	movlw	0
  8846   0026D2  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  8847   0026D4  0EFF               	movlw	-1
  8848   0026D6  6E04               	movwf	(___xxtofl@val+2)^0,c
  8849   0026D8  6E05               	movwf	(___xxtofl@val+3)^0,c
  8850   0026DA  0E01               	movlw	1
  8851   0026DC  ECB5  F014         	call	___xxtofl
  8852   0026E0  C002  F020         	movff	?___xxtofl,___flsub@b
  8853   0026E4  C003  F021         	movff	?___xxtofl+1,___flsub@b+1
  8854   0026E8  C004  F022         	movff	?___xxtofl+2,___flsub@b+2
  8855   0026EC  C005  F023         	movff	?___xxtofl+3,___flsub@b+3
  8856   0026F0  ECCA  F022         	call	___flsub	;wreg free
  8857   0026F4  C020  F042         	movff	?___flsub,___fltol@f1
  8858   0026F8  C021  F043         	movff	?___flsub+1,___fltol@f1+1
  8859   0026FC  C022  F044         	movff	?___flsub+2,___fltol@f1+2
  8860   002700  C023  F045         	movff	?___flsub+3,___fltol@f1+3
  8861   002704  ECE8  F01A         	call	___fltol	;wreg free
  8862   002708  C042  F06E         	movff	?___fltol,calibration_turningR@factorR
  8863   00270C  C043  F06F         	movff	?___fltol+1,calibration_turningR@factorR+1
  8864   002710                     l774:
  8865   002710  A68E               	btfss	142,3,c	;volatile
  8866   002712  EF8D  F013         	goto	u4851
  8867   002716  EF8F  F013         	goto	u4850
  8868   00271A                     u4851:
  8869   00271A  EF88  F013         	goto	l774
  8870   00271E                     u4850:
  8871   00271E  EF3B  F013         	goto	l5456
  8872   002722                     l767:
  8873                           
  8874                           ; BSR set to: 0
  8875   002722  0012               	return		;funcret
  8876   002724                     __end_of_calibration_turningR:
  8877                           	callstack 0
  8878                           
  8879 ;; *************** function _right90 *****************
  8880 ;; Defined at:
  8881 ;;		line 210 in file "dc_motor.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8884 ;;		 -> motorL(9), 
  8885 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8886 ;;		 -> motorR(9), 
  8887 ;;  factorR         2   26[COMRAM] unsigned int 
  8888 ;; Auto vars:     Size  Location     Type
  8889 ;;  delay_after_    2   28[COMRAM] unsigned int 
  8890 ;;  delay           2    0        unsigned int 
  8891 ;; Return value:  Size  Location     Type
  8892 ;;                  1    wreg      void 
  8893 ;; Registers used:
  8894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8895 ;; Tracked objects:
  8896 ;;		On entry : 0/0
  8897 ;;		On exit  : 0/0
  8898 ;;		Unchanged: 0/0
  8899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8901 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8903 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8904 ;;Total ram usage:        6 bytes
  8905 ;; Hardware stack levels used: 1
  8906 ;; Hardware stack levels required when called: 4
  8907 ;; This function calls:
  8908 ;;		_customDelayMs
  8909 ;;		_stop
  8910 ;;		_turnRight
  8911 ;; This function is called by:
  8912 ;;		_reverseTurn
  8913 ;;		_calibration_turningR
  8914 ;;		_moveRed
  8915 ;;		_moveYellow
  8916 ;; This function uses a non-reentrant model
  8917 ;;
  8918                           
  8919                           	psect	text55
  8920   004ABA                     __ptext55:
  8921                           	callstack 0
  8922   004ABA                     _right90:
  8923                           	callstack 23
  8924   004ABA                     
  8925                           ;dc_motor.c: 213:     unsigned int delay_after_calibration = delay + factorR;
  8926   004ABA  0E22               	movlw	34
  8927   004ABC  241B               	addwf	right90@factorR^0,w,c
  8928   004ABE  6E1D               	movwf	right90@delay_after_calibration^0,c
  8929   004AC0  0E01               	movlw	1
  8930   004AC2  201C               	addwfc	(right90@factorR+1)^0,w,c
  8931   004AC4  6E1E               	movwf	(right90@delay_after_calibration+1)^0,c
  8932   004AC6                     
  8933                           ;dc_motor.c: 214:     turnRight(mL,mR);
  8934   004AC6  C019  F014         	movff	right90@mL,turnRight@mL
  8935   004ACA  C01A  F015         	movff	right90@mR,turnRight@mR
  8936   004ACE  EC86  F020         	call	_turnRight	;wreg free
  8937   004AD2                     
  8938                           ;dc_motor.c: 215:     customDelayMs(delay_after_calibration);
  8939   004AD2  C01D  F002         	movff	right90@delay_after_calibration,customDelayMs@milliseconds
  8940   004AD6  C01E  F003         	movff	right90@delay_after_calibration+1,customDelayMs@milliseconds+1
  8941   004ADA  EC44  F024         	call	_customDelayMs	;wreg free
  8942   004ADE                     
  8943                           ;dc_motor.c: 216:     stop(mL,mR);
  8944   004ADE  C019  F014         	movff	right90@mL,stop@mL
  8945   004AE2  C01A  F015         	movff	right90@mR,stop@mR
  8946   004AE6  EC3F  F020         	call	_stop	;wreg free
  8947   004AEA  0012               	return		;funcret
  8948   004AEC                     __end_of_right90:
  8949                           	callstack 0
  8950                           
  8951 ;; *************** function _turnRight *****************
  8952 ;; Defined at:
  8953 ;;		line 142 in file "dc_motor.c"
  8954 ;; Parameters:    Size  Location     Type
  8955 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8956 ;;		 -> motorL(9), 
  8957 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8958 ;;		 -> motorR(9), 
  8959 ;; Auto vars:     Size  Location     Type
  8960 ;;  i               2   22[COMRAM] unsigned int 
  8961 ;; Return value:  Size  Location     Type
  8962 ;;                  1    wreg      void 
  8963 ;; Registers used:
  8964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8965 ;; Tracked objects:
  8966 ;;		On entry : 0/0
  8967 ;;		On exit  : 0/0
  8968 ;;		Unchanged: 0/0
  8969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8970 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8971 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8972 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8973 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8974 ;;Total ram usage:        5 bytes
  8975 ;; Hardware stack levels used: 1
  8976 ;; Hardware stack levels required when called: 3
  8977 ;; This function calls:
  8978 ;;		_setMotorPWM
  8979 ;; This function is called by:
  8980 ;;		_right90
  8981 ;;		_right135
  8982 ;; This function uses a non-reentrant model
  8983 ;;
  8984                           
  8985                           	psect	text56
  8986   00410C                     __ptext56:
  8987                           	callstack 0
  8988   00410C                     _turnRight:
  8989                           	callstack 23
  8990   00410C                     
  8991                           ;dc_motor.c: 142: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 143: {;dc_motor
      +                          .c: 145:     mL->direction = 1;
  8992   00410C  5014               	movf	turnRight@mL^0,w,c
  8993   00410E  6ED9               	movwf	fsr2l,c
  8994   004110  6ADA               	clrf	fsr2h,c
  8995   004112  0E01               	movlw	1
  8996   004114  26D9               	addwf	fsr2l,f,c
  8997   004116  0E01               	movlw	1
  8998   004118  6EDF               	movwf	indf2,c
  8999                           
  9000                           ;dc_motor.c: 146:     mR->direction = 0;
  9001   00411A  5015               	movf	turnRight@mR^0,w,c
  9002   00411C  6ED9               	movwf	fsr2l,c
  9003   00411E  6ADA               	clrf	fsr2h,c
  9004   004120  0E01               	movlw	1
  9005   004122  26D9               	addwf	fsr2l,f,c
  9006   004124  6ADF               	clrf	indf2,c
  9007   004126                     
  9008                           ;dc_motor.c: 148:     setMotorPWM(mL);
  9009   004126  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  9010   00412A  EC1F  F019         	call	_setMotorPWM	;wreg free
  9011   00412E                     
  9012                           ;dc_motor.c: 149:     setMotorPWM(mR);
  9013   00412E  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  9014   004132  EC1F  F019         	call	_setMotorPWM	;wreg free
  9015   004136                     
  9016                           ;dc_motor.c: 150:     for (unsigned int i = 0; i <50; i++)
  9017   004136  0E00               	movlw	0
  9018   004138  6E18               	movwf	(turnRight@i+1)^0,c
  9019   00413A  0E00               	movlw	0
  9020   00413C  6E17               	movwf	turnRight@i^0,c
  9021   00413E                     l3970:
  9022                           
  9023                           ;dc_motor.c: 151:     {;dc_motor.c: 152:         mL->power++;
  9024   00413E  5014               	movf	turnRight@mL^0,w,c
  9025   004140  6ED9               	movwf	fsr2l,c
  9026   004142  6ADA               	clrf	fsr2h,c
  9027   004144  2ADF               	incf	indf2,f,c
  9028                           
  9029                           ;dc_motor.c: 153:         mR->power++;
  9030   004146  5015               	movf	turnRight@mR^0,w,c
  9031   004148  6ED9               	movwf	fsr2l,c
  9032   00414A  6ADA               	clrf	fsr2h,c
  9033   00414C  2ADF               	incf	indf2,f,c
  9034   00414E                     
  9035                           ;dc_motor.c: 154:         setMotorPWM(mL);
  9036   00414E  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  9037   004152  EC1F  F019         	call	_setMotorPWM	;wreg free
  9038   004156                     
  9039                           ;dc_motor.c: 155:         setMotorPWM(mR);
  9040   004156  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  9041   00415A  EC1F  F019         	call	_setMotorPWM	;wreg free
  9042   00415E                     
  9043                           ;dc_motor.c: 156:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  9044   00415E  0E0B               	movlw	11
  9045   004160  6E16               	movwf	??_turnRight^0,c
  9046   004162  0E62               	movlw	98
  9047   004164                     u5627:
  9048   004164  2EE8               	decfsz	wreg,f,c
  9049   004166  D7FE               	bra	u5627
  9050   004168  2E16               	decfsz	??_turnRight^0,f,c
  9051   00416A  D7FC               	bra	u5627
  9052   00416C  D000               	nop2	
  9053   00416E                     
  9054                           ;dc_motor.c: 157:     }
  9055   00416E  4A17               	infsnz	turnRight@i^0,f,c
  9056   004170  2A18               	incf	(turnRight@i+1)^0,f,c
  9057   004172  5018               	movf	(turnRight@i+1)^0,w,c
  9058   004174  E109               	bnz	u3000
  9059   004176  0E32               	movlw	50
  9060   004178  5C17               	subwf	turnRight@i^0,w,c
  9061   00417A  A0D8               	btfss	status,0,c
  9062   00417C  EFC2  F020         	goto	u3001
  9063   004180  EFC4  F020         	goto	u3000
  9064   004184                     u3001:
  9065   004184  EF9F  F020         	goto	l3970
  9066   004188                     u3000:
  9067   004188  0012               	return		;funcret
  9068   00418A                     __end_of_turnRight:
  9069                           	callstack 0
  9070                           
  9071 ;; *************** function _calibration_turningL *****************
  9072 ;; Defined at:
  9073 ;;		line 128 in file "calibration.c"
  9074 ;; Parameters:    Size  Location     Type
  9075 ;;  mL              1   75[COMRAM] PTR struct DC_motor
  9076 ;;		 -> motorL(9), 
  9077 ;;  mR              1   76[COMRAM] PTR struct DC_motor
  9078 ;;		 -> motorR(9), 
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;  i               2   12[BANK0 ] int 
  9081 ;;  adjustment      4    8[BANK0 ] float 
  9082 ;;  inactivityCo    4    4[BANK0 ] unsigned long 
  9083 ;;  inactivityLi    4    0[BANK0 ] const unsigned long 
  9084 ;;  factorL         2   14[BANK0 ] int 
  9085 ;; Return value:  Size  Location     Type
  9086 ;;                  2   75[COMRAM] unsigned int 
  9087 ;; Registers used:
  9088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9089 ;; Tracked objects:
  9090 ;;		On entry : 0/0
  9091 ;;		On exit  : 0/0
  9092 ;;		Unchanged: 0/0
  9093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9094 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9095 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9096 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9097 ;;      Totals:         4      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9098 ;;Total ram usage:       20 bytes
  9099 ;; Hardware stack levels used: 1
  9100 ;; Hardware stack levels required when called: 5
  9101 ;; This function calls:
  9102 ;;		___fladd
  9103 ;;		___flsub
  9104 ;;		___fltol
  9105 ;;		___xxtofl
  9106 ;;		_left90
  9107 ;; This function is called by:
  9108 ;;		_main
  9109 ;; This function uses a non-reentrant model
  9110 ;;
  9111                           
  9112                           	psect	text57
  9113   002724                     __ptext57:
  9114                           	callstack 0
  9115   002724                     _calibration_turningL:
  9116                           	callstack 25
  9117   002724                     
  9118                           ;calibration.c: 129:     int factorL = 0;
  9119   002724  0E00               	movlw	0
  9120   002726  0100               	movlb	0	; () banked
  9121   002728  6F6F               	movwf	(calibration_turningL@factorL+1)& (0+255),b
  9122   00272A  0E00               	movlw	0
  9123   00272C  6F6E               	movwf	calibration_turningL@factorL& (0+255),b
  9124                           
  9125                           ;calibration.c: 130:     float adjustment = 10;
  9126   00272E  0E00               	movlw	0
  9127   002730  6F68               	movwf	calibration_turningL@adjustment& (0+255),b
  9128   002732  0E00               	movlw	0
  9129   002734  6F69               	movwf	(calibration_turningL@adjustment+1)& (0+255),b
  9130   002736  0E20               	movlw	32
  9131   002738  6F6A               	movwf	(calibration_turningL@adjustment+2)& (0+255),b
  9132   00273A  0E41               	movlw	65
  9133   00273C  6F6B               	movwf	(calibration_turningL@adjustment+3)& (0+255),b
  9134                           
  9135                           ;calibration.c: 132:     const unsigned long inactivityLimit = 5000 / 1;
  9136   00273E  0E88               	movlw	136
  9137   002740  6F60               	movwf	calibration_turningL@inactivityLimit& (0+255),b
  9138   002742  0E13               	movlw	19
  9139   002744  6F61               	movwf	(calibration_turningL@inactivityLimit+1)& (0+255),b
  9140   002746  0E00               	movlw	0
  9141   002748  6F62               	movwf	(calibration_turningL@inactivityLimit+2)& (0+255),b
  9142   00274A  0E00               	movlw	0
  9143   00274C  6F63               	movwf	(calibration_turningL@inactivityLimit+3)& (0+255),b
  9144   00274E                     l782:
  9145                           
  9146                           ;calibration.c: 136:         for (int i = 0; i < 4; i++) {
  9147   00274E  0E00               	movlw	0
  9148   002750  0100               	movlb	0	; () banked
  9149   002752  6F6D               	movwf	(calibration_turningL@i+1)& (0+255),b
  9150   002754  0E00               	movlw	0
  9151   002756  6F6C               	movwf	calibration_turningL@i& (0+255),b
  9152   002758                     l5470:
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;calibration.c: 137:             left90(mL, mR, factorL);
  9156   002758  C04C  F019         	movff	calibration_turningL@mL,left90@mL
  9157   00275C  C04D  F01A         	movff	calibration_turningL@mR,left90@mR
  9158   002760  C06E  F01B         	movff	calibration_turningL@factorL,left90@factorL
  9159   002764  C06F  F01C         	movff	calibration_turningL@factorL+1,left90@factorL+1
  9160   002768  EC76  F025         	call	_left90	;wreg free
  9161   00276C                     
  9162                           ;calibration.c: 138:             _delay((unsigned long)((1000)*(64000000/4000.0)));
  9163   00276C  0E52               	movlw	82
  9164   00276E  6E4F               	movwf	(??_calibration_turningL+1)^0,c
  9165   002770  0E2B               	movlw	43
  9166   002772  6E4E               	movwf	??_calibration_turningL^0,c
  9167   002774  0E00               	movlw	0
  9168   002776                     u5637:
  9169   002776  2EE8               	decfsz	wreg,f,c
  9170   002778  D7FE               	bra	u5637
  9171   00277A  2E4E               	decfsz	??_calibration_turningL^0,f,c
  9172   00277C  D7FC               	bra	u5637
  9173   00277E  2E4F               	decfsz	(??_calibration_turningL+1)^0,f,c
  9174   002780  D7FA               	bra	u5637
  9175   002782  D000               	nop2	
  9176   002784                     
  9177                           ;calibration.c: 139:         }
  9178   002784  0100               	movlb	0	; () banked
  9179   002786  4B6C               	infsnz	calibration_turningL@i& (0+255),f,b
  9180   002788  2B6D               	incf	(calibration_turningL@i+1)& (0+255),f,b
  9181   00278A                     
  9182                           ; BSR set to: 0
  9183   00278A  BF6D               	btfsc	(calibration_turningL@i+1)& (0+255),7,b
  9184   00278C  EFD1  F013         	goto	u4861
  9185   002790  516D               	movf	(calibration_turningL@i+1)& (0+255),w,b
  9186   002792  E109               	bnz	u4860
  9187   002794  0E04               	movlw	4
  9188   002796  5D6C               	subwf	calibration_turningL@i& (0+255),w,b
  9189   002798  A0D8               	btfss	status,0,c
  9190   00279A  EFD1  F013         	goto	u4861
  9191   00279E  EFD3  F013         	goto	u4860
  9192   0027A2                     u4861:
  9193   0027A2  EFAC  F013         	goto	l5470
  9194   0027A6                     u4860:
  9195   0027A6                     
  9196                           ; BSR set to: 0
  9197                           ;calibration.c: 141:         inactivityCounter = 0;
  9198   0027A6  0E00               	movlw	0
  9199   0027A8  6F64               	movwf	calibration_turningL@inactivityCounter& (0+255),b
  9200   0027AA  0E00               	movlw	0
  9201   0027AC  6F65               	movwf	(calibration_turningL@inactivityCounter+1)& (0+255),b
  9202   0027AE  0E00               	movlw	0
  9203   0027B0  6F66               	movwf	(calibration_turningL@inactivityCounter+2)& (0+255),b
  9204   0027B2  0E00               	movlw	0
  9205   0027B4  6F67               	movwf	(calibration_turningL@inactivityCounter+3)& (0+255),b
  9206   0027B6                     l5480:
  9207                           
  9208                           ;calibration.c: 145:             if (!PORTFbits.RF2 || !PORTFbits.RF3) {
  9209   0027B6  A48E               	btfss	142,2,c	;volatile
  9210   0027B8  EFE0  F013         	goto	u4871
  9211   0027BC  EFE2  F013         	goto	u4870
  9212   0027C0                     u4871:
  9213   0027C0  EFE9  F013         	goto	l5484
  9214   0027C4                     u4870:
  9215   0027C4  B68E               	btfsc	142,3,c	;volatile
  9216   0027C6  EFE7  F013         	goto	u4881
  9217   0027CA  EFE9  F013         	goto	u4880
  9218   0027CE                     u4881:
  9219   0027CE  EFF4  F013         	goto	l5486
  9220   0027D2                     u4880:
  9221   0027D2                     l5484:
  9222                           
  9223                           ;calibration.c: 146:                 inactivityCounter = 0;
  9224   0027D2  0E00               	movlw	0
  9225   0027D4  0100               	movlb	0	; () banked
  9226   0027D6  6F64               	movwf	calibration_turningL@inactivityCounter& (0+255),b
  9227   0027D8  0E00               	movlw	0
  9228   0027DA  6F65               	movwf	(calibration_turningL@inactivityCounter+1)& (0+255),b
  9229   0027DC  0E00               	movlw	0
  9230   0027DE  6F66               	movwf	(calibration_turningL@inactivityCounter+2)& (0+255),b
  9231   0027E0  0E00               	movlw	0
  9232   0027E2  6F67               	movwf	(calibration_turningL@inactivityCounter+3)& (0+255),b
  9233                           
  9234                           ;calibration.c: 147:             } else {
  9235   0027E4  EF10  F014         	goto	l5490
  9236   0027E8                     l5486:
  9237                           
  9238                           ;calibration.c: 148:                 inactivityCounter++;
  9239   0027E8  0E01               	movlw	1
  9240   0027EA  0100               	movlb	0	; () banked
  9241   0027EC  2764               	addwf	calibration_turningL@inactivityCounter& (0+255),f,b
  9242   0027EE  0E00               	movlw	0
  9243   0027F0  2365               	addwfc	(calibration_turningL@inactivityCounter+1)& (0+255),f,b
  9244   0027F2  2366               	addwfc	(calibration_turningL@inactivityCounter+2)& (0+255),f,b
  9245   0027F4  2367               	addwfc	(calibration_turningL@inactivityCounter+3)& (0+255),f,b
  9246                           
  9247                           ;calibration.c: 149:                 if (inactivityCounter > inactivityLimit) {
  9248   0027F6  5164               	movf	calibration_turningL@inactivityCounter& (0+255),w,b
  9249   0027F8  5D60               	subwf	calibration_turningL@inactivityLimit& (0+255),w,b
  9250   0027FA  5165               	movf	(calibration_turningL@inactivityCounter+1)& (0+255),w,b
  9251   0027FC  5961               	subwfb	(calibration_turningL@inactivityLimit+1)& (0+255),w,b
  9252   0027FE  5166               	movf	(calibration_turningL@inactivityCounter+2)& (0+255),w,b
  9253   002800  5962               	subwfb	(calibration_turningL@inactivityLimit+2)& (0+255),w,b
  9254   002802  5167               	movf	(calibration_turningL@inactivityCounter+3)& (0+255),w,b
  9255   002804  5963               	subwfb	(calibration_turningL@inactivityLimit+3)& (0+255),w,b
  9256   002806  B0D8               	btfsc	status,0,c
  9257   002808  EF08  F014         	goto	u4891
  9258   00280C  EF0A  F014         	goto	u4890
  9259   002810                     u4891:
  9260   002810  EF10  F014         	goto	l5490
  9261   002814                     u4890:
  9262   002814                     
  9263                           ; BSR set to: 0
  9264                           ;calibration.c: 151:                     return (unsigned int)factorL;
  9265   002814  C06E  F04C         	movff	calibration_turningL@factorL,?_calibration_turningL
  9266   002818  C06F  F04D         	movff	calibration_turningL@factorL+1,?_calibration_turningL+1
  9267   00281C  EFB4  F014         	goto	l791
  9268   002820                     l5490:
  9269                           
  9270                           ; BSR set to: 0
  9271                           ;calibration.c: 154:             _delay((unsigned long)((1)*(64000000/4000.0)));
  9272   002820  0E15               	movlw	21
  9273   002822  6E4E               	movwf	??_calibration_turningL^0,c
  9274   002824  0EC6               	movlw	198
  9275   002826                     u5647:
  9276   002826  2EE8               	decfsz	wreg,f,c
  9277   002828  D7FE               	bra	u5647
  9278   00282A  2E4E               	decfsz	??_calibration_turningL^0,f,c
  9279   00282C  D7FC               	bra	u5647
  9280   00282E  D000               	nop2	
  9281   002830                     
  9282                           ;calibration.c: 157:             if (PORTFbits.RF2 == 0) {
  9283   002830  B48E               	btfsc	142,2,c	;volatile
  9284   002832  EF1D  F014         	goto	u4901
  9285   002836  EF1F  F014         	goto	u4900
  9286   00283A                     u4901:
  9287   00283A  EF6C  F014         	goto	l792
  9288   00283E                     u4900:
  9289   00283E                     
  9290                           ;calibration.c: 158:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  9291   00283E  0E11               	movlw	17
  9292   002840  6E4F               	movwf	(??_calibration_turningL+1)^0,c
  9293   002842  0E3C               	movlw	60
  9294   002844  6E4E               	movwf	??_calibration_turningL^0,c
  9295   002846  0ECB               	movlw	203
  9296   002848                     u5657:
  9297   002848  2EE8               	decfsz	wreg,f,c
  9298   00284A  D7FE               	bra	u5657
  9299   00284C  2E4E               	decfsz	??_calibration_turningL^0,f,c
  9300   00284E  D7FC               	bra	u5657
  9301   002850  2E4F               	decfsz	(??_calibration_turningL+1)^0,f,c
  9302   002852  D7FA               	bra	u5657
  9303   002854  0000               	nop	
  9304   002856                     
  9305                           ;calibration.c: 159:                 factorL += adjustment;
  9306   002856  C068  F014         	movff	calibration_turningL@adjustment,___fladd@a
  9307   00285A  C069  F015         	movff	calibration_turningL@adjustment+1,___fladd@a+1
  9308   00285E  C06A  F016         	movff	calibration_turningL@adjustment+2,___fladd@a+2
  9309   002862  C06B  F017         	movff	calibration_turningL@adjustment+3,___fladd@a+3
  9310   002866  C06E  F002         	movff	calibration_turningL@factorL,___xxtofl@val
  9311   00286A  C06F  F003         	movff	calibration_turningL@factorL+1,___xxtofl@val+1
  9312   00286E  0E00               	movlw	0
  9313   002870  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  9314   002872  0EFF               	movlw	-1
  9315   002874  6E04               	movwf	(___xxtofl@val+2)^0,c
  9316   002876  6E05               	movwf	(___xxtofl@val+3)^0,c
  9317   002878  0E01               	movlw	1
  9318   00287A  ECB5  F014         	call	___xxtofl
  9319   00287E  C002  F010         	movff	?___xxtofl,___fladd@b
  9320   002882  C003  F011         	movff	?___xxtofl+1,___fladd@b+1
  9321   002886  C004  F012         	movff	?___xxtofl+2,___fladd@b+2
  9322   00288A  C005  F013         	movff	?___xxtofl+3,___fladd@b+3
  9323   00288E  ECDB  F00A         	call	___fladd	;wreg free
  9324   002892  C010  F042         	movff	?___fladd,___fltol@f1
  9325   002896  C011  F043         	movff	?___fladd+1,___fltol@f1+1
  9326   00289A  C012  F044         	movff	?___fladd+2,___fltol@f1+2
  9327   00289E  C013  F045         	movff	?___fladd+3,___fltol@f1+3
  9328   0028A2  ECE8  F01A         	call	___fltol	;wreg free
  9329   0028A6  C042  F06E         	movff	?___fltol,calibration_turningL@factorL
  9330   0028AA  C043  F06F         	movff	?___fltol+1,calibration_turningL@factorL+1
  9331   0028AE                     l793:
  9332   0028AE  A48E               	btfss	142,2,c	;volatile
  9333   0028B0  EF5C  F014         	goto	u4911
  9334   0028B4  EF5E  F014         	goto	u4910
  9335   0028B8                     u4911:
  9336   0028B8  EF57  F014         	goto	l793
  9337   0028BC                     u4910:
  9338   0028BC                     l5498:
  9339                           
  9340                           ;calibration.c: 161:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  9341   0028BC  0E11               	movlw	17
  9342   0028BE  6E4F               	movwf	(??_calibration_turningL+1)^0,c
  9343   0028C0  0E3C               	movlw	60
  9344   0028C2  6E4E               	movwf	??_calibration_turningL^0,c
  9345   0028C4  0ECB               	movlw	203
  9346   0028C6                     u5667:
  9347   0028C6  2EE8               	decfsz	wreg,f,c
  9348   0028C8  D7FE               	bra	u5667
  9349   0028CA  2E4E               	decfsz	??_calibration_turningL^0,f,c
  9350   0028CC  D7FC               	bra	u5667
  9351   0028CE  2E4F               	decfsz	(??_calibration_turningL+1)^0,f,c
  9352   0028D0  D7FA               	bra	u5667
  9353   0028D2  0000               	nop	
  9354                           
  9355                           ;calibration.c: 162:                 break;
  9356   0028D4  EFA7  F013         	goto	l782
  9357   0028D8                     l792:
  9358                           
  9359                           ;calibration.c: 166:             if (PORTFbits.RF3 == 0) {
  9360   0028D8  B68E               	btfsc	142,3,c	;volatile
  9361   0028DA  EF71  F014         	goto	u4921
  9362   0028DE  EF73  F014         	goto	u4920
  9363   0028E2                     u4921:
  9364   0028E2  EFDB  F013         	goto	l5480
  9365   0028E6                     u4920:
  9366   0028E6                     
  9367                           ;calibration.c: 167:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  9368   0028E6  0E11               	movlw	17
  9369   0028E8  6E4F               	movwf	(??_calibration_turningL+1)^0,c
  9370   0028EA  0E3C               	movlw	60
  9371   0028EC  6E4E               	movwf	??_calibration_turningL^0,c
  9372   0028EE  0ECB               	movlw	203
  9373   0028F0                     u5677:
  9374   0028F0  2EE8               	decfsz	wreg,f,c
  9375   0028F2  D7FE               	bra	u5677
  9376   0028F4  2E4E               	decfsz	??_calibration_turningL^0,f,c
  9377   0028F6  D7FC               	bra	u5677
  9378   0028F8  2E4F               	decfsz	(??_calibration_turningL+1)^0,f,c
  9379   0028FA  D7FA               	bra	u5677
  9380   0028FC  0000               	nop	
  9381   0028FE                     
  9382                           ;calibration.c: 168:                 factorL -= adjustment;
  9383   0028FE  C068  F024         	movff	calibration_turningL@adjustment,___flsub@a
  9384   002902  C069  F025         	movff	calibration_turningL@adjustment+1,___flsub@a+1
  9385   002906  C06A  F026         	movff	calibration_turningL@adjustment+2,___flsub@a+2
  9386   00290A  C06B  F027         	movff	calibration_turningL@adjustment+3,___flsub@a+3
  9387   00290E  C06E  F002         	movff	calibration_turningL@factorL,___xxtofl@val
  9388   002912  C06F  F003         	movff	calibration_turningL@factorL+1,___xxtofl@val+1
  9389   002916  0E00               	movlw	0
  9390   002918  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  9391   00291A  0EFF               	movlw	-1
  9392   00291C  6E04               	movwf	(___xxtofl@val+2)^0,c
  9393   00291E  6E05               	movwf	(___xxtofl@val+3)^0,c
  9394   002920  0E01               	movlw	1
  9395   002922  ECB5  F014         	call	___xxtofl
  9396   002926  C002  F020         	movff	?___xxtofl,___flsub@b
  9397   00292A  C003  F021         	movff	?___xxtofl+1,___flsub@b+1
  9398   00292E  C004  F022         	movff	?___xxtofl+2,___flsub@b+2
  9399   002932  C005  F023         	movff	?___xxtofl+3,___flsub@b+3
  9400   002936  ECCA  F022         	call	___flsub	;wreg free
  9401   00293A  C020  F042         	movff	?___flsub,___fltol@f1
  9402   00293E  C021  F043         	movff	?___flsub+1,___fltol@f1+1
  9403   002942  C022  F044         	movff	?___flsub+2,___fltol@f1+2
  9404   002946  C023  F045         	movff	?___flsub+3,___fltol@f1+3
  9405   00294A  ECE8  F01A         	call	___fltol	;wreg free
  9406   00294E  C042  F06E         	movff	?___fltol,calibration_turningL@factorL
  9407   002952  C043  F06F         	movff	?___fltol+1,calibration_turningL@factorL+1
  9408   002956                     l798:
  9409   002956  A68E               	btfss	142,3,c	;volatile
  9410   002958  EFB0  F014         	goto	u4931
  9411   00295C  EFB2  F014         	goto	u4930
  9412   002960                     u4931:
  9413   002960  EFAB  F014         	goto	l798
  9414   002964                     u4930:
  9415   002964  EF5E  F014         	goto	l5498
  9416   002968                     l791:
  9417                           
  9418                           ; BSR set to: 0
  9419   002968  0012               	return		;funcret
  9420   00296A                     __end_of_calibration_turningL:
  9421                           	callstack 0
  9422                           
  9423 ;; *************** function _left90 *****************
  9424 ;; Defined at:
  9425 ;;		line 220 in file "dc_motor.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  9428 ;;		 -> motorL(9), 
  9429 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  9430 ;;		 -> motorR(9), 
  9431 ;;  factorL         2   26[COMRAM] unsigned int 
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;  delay_after_    2   28[COMRAM] unsigned int 
  9434 ;;  delay           2    0        unsigned int 
  9435 ;; Return value:  Size  Location     Type
  9436 ;;                  1    wreg      void 
  9437 ;; Registers used:
  9438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9439 ;; Tracked objects:
  9440 ;;		On entry : 0/0
  9441 ;;		On exit  : 0/0
  9442 ;;		Unchanged: 0/0
  9443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9444 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9445 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9447 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9448 ;;Total ram usage:        6 bytes
  9449 ;; Hardware stack levels used: 1
  9450 ;; Hardware stack levels required when called: 4
  9451 ;; This function calls:
  9452 ;;		_customDelayMs
  9453 ;;		_stop
  9454 ;;		_turnLeft
  9455 ;; This function is called by:
  9456 ;;		_reverseTurn
  9457 ;;		_calibration_turningL
  9458 ;;		_moveGreen
  9459 ;;		_movePink
  9460 ;; This function uses a non-reentrant model
  9461 ;;
  9462                           
  9463                           	psect	text58
  9464   004AEC                     __ptext58:
  9465                           	callstack 0
  9466   004AEC                     _left90:
  9467                           	callstack 23
  9468   004AEC                     
  9469                           ;dc_motor.c: 223:     unsigned int delay_after_calibration = delay + factorL;
  9470   004AEC  0E22               	movlw	34
  9471   004AEE  241B               	addwf	left90@factorL^0,w,c
  9472   004AF0  6E1D               	movwf	left90@delay_after_calibration^0,c
  9473   004AF2  0E01               	movlw	1
  9474   004AF4  201C               	addwfc	(left90@factorL+1)^0,w,c
  9475   004AF6  6E1E               	movwf	(left90@delay_after_calibration+1)^0,c
  9476   004AF8                     
  9477                           ;dc_motor.c: 224:     turnLeft(mL,mR);
  9478   004AF8  C019  F014         	movff	left90@mL,turnLeft@mL
  9479   004AFC  C01A  F015         	movff	left90@mR,turnLeft@mR
  9480   004B00  ECC5  F020         	call	_turnLeft	;wreg free
  9481   004B04                     
  9482                           ;dc_motor.c: 225:     customDelayMs(delay_after_calibration);
  9483   004B04  C01D  F002         	movff	left90@delay_after_calibration,customDelayMs@milliseconds
  9484   004B08  C01E  F003         	movff	left90@delay_after_calibration+1,customDelayMs@milliseconds+1
  9485   004B0C  EC44  F024         	call	_customDelayMs	;wreg free
  9486   004B10                     
  9487                           ;dc_motor.c: 226:     stop(mL,mR);
  9488   004B10  C019  F014         	movff	left90@mL,stop@mL
  9489   004B14  C01A  F015         	movff	left90@mR,stop@mR
  9490   004B18  EC3F  F020         	call	_stop	;wreg free
  9491   004B1C  0012               	return		;funcret
  9492   004B1E                     __end_of_left90:
  9493                           	callstack 0
  9494                           
  9495 ;; *************** function _turnLeft *****************
  9496 ;; Defined at:
  9497 ;;		line 122 in file "dc_motor.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  9500 ;;		 -> motorL(9), 
  9501 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  9502 ;;		 -> motorR(9), 
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  i               2   22[COMRAM] unsigned int 
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  1    wreg      void 
  9507 ;; Registers used:
  9508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9514 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9517 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9518 ;;Total ram usage:        5 bytes
  9519 ;; Hardware stack levels used: 1
  9520 ;; Hardware stack levels required when called: 3
  9521 ;; This function calls:
  9522 ;;		_setMotorPWM
  9523 ;; This function is called by:
  9524 ;;		_left90
  9525 ;;		_turn180
  9526 ;;		_left135
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text59
  9531   00418A                     __ptext59:
  9532                           	callstack 0
  9533   00418A                     _turnLeft:
  9534                           	callstack 23
  9535   00418A                     
  9536                           ;dc_motor.c: 122: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 123: {;dc_motor.
      +                          c: 125:     mL->direction = 0;
  9537   00418A  5014               	movf	turnLeft@mL^0,w,c
  9538   00418C  6ED9               	movwf	fsr2l,c
  9539   00418E  6ADA               	clrf	fsr2h,c
  9540   004190  0E01               	movlw	1
  9541   004192  26D9               	addwf	fsr2l,f,c
  9542   004194  6ADF               	clrf	indf2,c
  9543                           
  9544                           ;dc_motor.c: 126:     mR->direction = 1;
  9545   004196  5015               	movf	turnLeft@mR^0,w,c
  9546   004198  6ED9               	movwf	fsr2l,c
  9547   00419A  6ADA               	clrf	fsr2h,c
  9548   00419C  0E01               	movlw	1
  9549   00419E  26D9               	addwf	fsr2l,f,c
  9550   0041A0  0E01               	movlw	1
  9551   0041A2  6EDF               	movwf	indf2,c
  9552   0041A4                     
  9553                           ;dc_motor.c: 128:     setMotorPWM(mL);
  9554   0041A4  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  9555   0041A8  EC1F  F019         	call	_setMotorPWM	;wreg free
  9556   0041AC                     
  9557                           ;dc_motor.c: 129:     setMotorPWM(mR);
  9558   0041AC  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  9559   0041B0  EC1F  F019         	call	_setMotorPWM	;wreg free
  9560   0041B4                     
  9561                           ;dc_motor.c: 130:     for (unsigned int i = 0; i <50; i++)
  9562   0041B4  0E00               	movlw	0
  9563   0041B6  6E18               	movwf	(turnLeft@i+1)^0,c
  9564   0041B8  0E00               	movlw	0
  9565   0041BA  6E17               	movwf	turnLeft@i^0,c
  9566   0041BC                     l3946:
  9567                           
  9568                           ;dc_motor.c: 131:     {;dc_motor.c: 132:         mL->power++;
  9569   0041BC  5014               	movf	turnLeft@mL^0,w,c
  9570   0041BE  6ED9               	movwf	fsr2l,c
  9571   0041C0  6ADA               	clrf	fsr2h,c
  9572   0041C2  2ADF               	incf	indf2,f,c
  9573                           
  9574                           ;dc_motor.c: 133:         mR->power++;
  9575   0041C4  5015               	movf	turnLeft@mR^0,w,c
  9576   0041C6  6ED9               	movwf	fsr2l,c
  9577   0041C8  6ADA               	clrf	fsr2h,c
  9578   0041CA  2ADF               	incf	indf2,f,c
  9579   0041CC                     
  9580                           ;dc_motor.c: 134:         setMotorPWM(mL);
  9581   0041CC  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  9582   0041D0  EC1F  F019         	call	_setMotorPWM	;wreg free
  9583   0041D4                     
  9584                           ;dc_motor.c: 135:         setMotorPWM(mR);
  9585   0041D4  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  9586   0041D8  EC1F  F019         	call	_setMotorPWM	;wreg free
  9587   0041DC                     
  9588                           ;dc_motor.c: 136:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  9589   0041DC  0E0B               	movlw	11
  9590   0041DE  6E16               	movwf	??_turnLeft^0,c
  9591   0041E0  0E62               	movlw	98
  9592   0041E2                     u5687:
  9593   0041E2  2EE8               	decfsz	wreg,f,c
  9594   0041E4  D7FE               	bra	u5687
  9595   0041E6  2E16               	decfsz	??_turnLeft^0,f,c
  9596   0041E8  D7FC               	bra	u5687
  9597   0041EA  D000               	nop2	
  9598   0041EC                     
  9599                           ;dc_motor.c: 137:     }
  9600   0041EC  4A17               	infsnz	turnLeft@i^0,f,c
  9601   0041EE  2A18               	incf	(turnLeft@i+1)^0,f,c
  9602   0041F0  5018               	movf	(turnLeft@i+1)^0,w,c
  9603   0041F2  E109               	bnz	u2990
  9604   0041F4  0E32               	movlw	50
  9605   0041F6  5C17               	subwf	turnLeft@i^0,w,c
  9606   0041F8  A0D8               	btfss	status,0,c
  9607   0041FA  EF01  F021         	goto	u2991
  9608   0041FE  EF03  F021         	goto	u2990
  9609   004202                     u2991:
  9610   004202  EFDE  F020         	goto	l3946
  9611   004206                     u2990:
  9612   004206  0012               	return		;funcret
  9613   004208                     __end_of_turnLeft:
  9614                           	callstack 0
  9615                           
  9616 ;; *************** function _customDelayMs *****************
  9617 ;; Defined at:
  9618 ;;		line 182 in file "calibration.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;  milliseconds    2    1[COMRAM] unsigned int 
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;  i               2    4[COMRAM] unsigned int 
  9623 ;; Return value:  Size  Location     Type
  9624 ;;                  1    wreg      void 
  9625 ;; Registers used:
  9626 ;;		wreg, status,2, status,0
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9632 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9634 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9635 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9636 ;;Total ram usage:        5 bytes
  9637 ;; Hardware stack levels used: 1
  9638 ;; Hardware stack levels required when called: 1
  9639 ;; This function calls:
  9640 ;;		Nothing
  9641 ;; This function is called by:
  9642 ;;		_right90
  9643 ;;		_left90
  9644 ;;		_reverseStraight
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           	psect	text60
  9649   004888                     __ptext60:
  9650                           	callstack 0
  9651   004888                     _customDelayMs:
  9652                           	callstack 25
  9653   004888                     
  9654                           ;calibration.c: 183:     for (unsigned int i = 0; i < milliseconds; i++) {
  9655   004888  0E00               	movlw	0
  9656   00488A  6E06               	movwf	(customDelayMs@i+1)^0,c
  9657   00488C  0E00               	movlw	0
  9658   00488E  6E05               	movwf	customDelayMs@i^0,c
  9659   004890  EF54  F024         	goto	l806
  9660   004894                     l4004:
  9661                           
  9662                           ;calibration.c: 184:         _delay((unsigned long)((1)*(64000000/4000.0)));
  9663   004894  0E15               	movlw	21
  9664   004896  6E04               	movwf	??_customDelayMs^0,c
  9665   004898  0EC6               	movlw	198
  9666   00489A                     u5697:
  9667   00489A  2EE8               	decfsz	wreg,f,c
  9668   00489C  D7FE               	bra	u5697
  9669   00489E  2E04               	decfsz	??_customDelayMs^0,f,c
  9670   0048A0  D7FC               	bra	u5697
  9671   0048A2  D000               	nop2	
  9672   0048A4                     
  9673                           ;calibration.c: 185:     }
  9674   0048A4  4A05               	infsnz	customDelayMs@i^0,f,c
  9675   0048A6  2A06               	incf	(customDelayMs@i+1)^0,f,c
  9676   0048A8                     l806:
  9677   0048A8  5002               	movf	customDelayMs@milliseconds^0,w,c
  9678   0048AA  5C05               	subwf	customDelayMs@i^0,w,c
  9679   0048AC  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  9680   0048AE  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  9681   0048B0  A0D8               	btfss	status,0,c
  9682   0048B2  EF5D  F024         	goto	u3021
  9683   0048B6  EF5F  F024         	goto	u3020
  9684   0048BA                     u3021:
  9685   0048BA  EF4A  F024         	goto	l4004
  9686   0048BE                     u3020:
  9687   0048BE  0012               	return		;funcret
  9688   0048C0                     __end_of_customDelayMs:
  9689                           	callstack 0
  9690                           
  9691 ;; *************** function ___flsub *****************
  9692 ;; Defined at:
  9693 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  9694 ;; Parameters:    Size  Location     Type
  9695 ;;  b               4   31[COMRAM] void 
  9696 ;;  a               4   35[COMRAM] void 
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;		None
  9699 ;; Return value:  Size  Location     Type
  9700 ;;                  4   31[COMRAM] void 
  9701 ;; Registers used:
  9702 ;;		wreg, status,2, status,0, cstack
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9708 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9711 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9712 ;;Total ram usage:        8 bytes
  9713 ;; Hardware stack levels used: 1
  9714 ;; Hardware stack levels required when called: 2
  9715 ;; This function calls:
  9716 ;;		___fladd
  9717 ;; This function is called by:
  9718 ;;		_convert_rgb2hue
  9719 ;;		_calibration_turningR
  9720 ;;		_calibration_turningL
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           	psect	text61
  9725   004594                     __ptext61:
  9726                           	callstack 0
  9727   004594                     ___flsub:
  9728                           	callstack 26
  9729   004594  0E00               	movlw	0
  9730   004596  1A24               	xorwf	___flsub@a^0,f,c
  9731   004598  0E00               	movlw	0
  9732   00459A  1A25               	xorwf	(___flsub@a+1)^0,f,c
  9733   00459C  0E00               	movlw	0
  9734   00459E  1A26               	xorwf	(___flsub@a+2)^0,f,c
  9735   0045A0  0E80               	movlw	128
  9736   0045A2  1A27               	xorwf	(___flsub@a+3)^0,f,c
  9737   0045A4  C020  F010         	movff	___flsub@b,___fladd@b
  9738   0045A8  C021  F011         	movff	___flsub@b+1,___fladd@b+1
  9739   0045AC  C022  F012         	movff	___flsub@b+2,___fladd@b+2
  9740   0045B0  C023  F013         	movff	___flsub@b+3,___fladd@b+3
  9741   0045B4  C024  F014         	movff	___flsub@a,___fladd@a
  9742   0045B8  C025  F015         	movff	___flsub@a+1,___fladd@a+1
  9743   0045BC  C026  F016         	movff	___flsub@a+2,___fladd@a+2
  9744   0045C0  C027  F017         	movff	___flsub@a+3,___fladd@a+3
  9745   0045C4  ECDB  F00A         	call	___fladd	;wreg free
  9746   0045C8  C010  F020         	movff	?___fladd,?___flsub
  9747   0045CC  C011  F021         	movff	?___fladd+1,?___flsub+1
  9748   0045D0  C012  F022         	movff	?___fladd+2,?___flsub+2
  9749   0045D4  C013  F023         	movff	?___fladd+3,?___flsub+3
  9750   0045D8  0012               	return		;funcret
  9751   0045DA                     __end_of___flsub:
  9752                           	callstack 0
  9753                           
  9754 ;; *************** function ___fladd *****************
  9755 ;; Defined at:
  9756 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;  b               4   15[COMRAM] void 
  9759 ;;  a               4   19[COMRAM] void 
  9760 ;; Auto vars:     Size  Location     Type
  9761 ;;  grs             1   30[COMRAM] unsigned char 
  9762 ;;  bexp            1   29[COMRAM] unsigned char 
  9763 ;;  aexp            1   28[COMRAM] unsigned char 
  9764 ;;  signs           1   27[COMRAM] unsigned char 
  9765 ;; Return value:  Size  Location     Type
  9766 ;;                  4   15[COMRAM] unsigned char 
  9767 ;; Registers used:
  9768 ;;		wreg, status,2, status,0
  9769 ;; Tracked objects:
  9770 ;;		On entry : 0/0
  9771 ;;		On exit  : 0/0
  9772 ;;		Unchanged: 0/0
  9773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9774 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9775 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9776 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9777 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9778 ;;Total ram usage:       16 bytes
  9779 ;; Hardware stack levels used: 1
  9780 ;; Hardware stack levels required when called: 1
  9781 ;; This function calls:
  9782 ;;		Nothing
  9783 ;; This function is called by:
  9784 ;;		_convert_rgb2hue
  9785 ;;		_calibration_turningR
  9786 ;;		_calibration_turningL
  9787 ;;		___flsub
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           	psect	text62
  9792   0015B6                     __ptext62:
  9793                           	callstack 0
  9794   0015B6                     ___fladd:
  9795                           	callstack 26
  9796   0015B6  5013               	movf	(___fladd@b+3)^0,w,c
  9797   0015B8  0B80               	andlw	128
  9798   0015BA  6E1C               	movwf	___fladd@signs^0,c
  9799   0015BC  5013               	movf	(___fladd@b+3)^0,w,c
  9800   0015BE  2413               	addwf	(___fladd@b+3)^0,w,c
  9801   0015C0  6E1E               	movwf	___fladd@bexp^0,c
  9802   0015C2  AE12               	btfss	(___fladd@b+2)^0,7,c
  9803   0015C4  EFE6  F00A         	goto	u3481
  9804   0015C8  EFE8  F00A         	goto	u3480
  9805   0015CC                     u3481:
  9806   0015CC  EFE9  F00A         	goto	l4390
  9807   0015D0                     u3480:
  9808   0015D0  801E               	bsf	___fladd@bexp^0,0,c
  9809   0015D2                     l4390:
  9810   0015D2  501E               	movf	___fladd@bexp^0,w,c
  9811   0015D4  B4D8               	btfsc	status,2,c
  9812   0015D6  EFEF  F00A         	goto	u3491
  9813   0015DA  EFF1  F00A         	goto	u3490
  9814   0015DE                     u3491:
  9815   0015DE  EF06  F00B         	goto	l4400
  9816   0015E2                     u3490:
  9817   0015E2  281E               	incf	___fladd@bexp^0,w,c
  9818   0015E4  A4D8               	btfss	status,2,c
  9819   0015E6  EFF7  F00A         	goto	u3501
  9820   0015EA  EFF9  F00A         	goto	u3500
  9821   0015EE                     u3501:
  9822   0015EE  EF01  F00B         	goto	l4396
  9823   0015F2                     u3500:
  9824   0015F2  0E00               	movlw	0
  9825   0015F4  6E10               	movwf	___fladd@b^0,c
  9826   0015F6  0E00               	movlw	0
  9827   0015F8  6E11               	movwf	(___fladd@b+1)^0,c
  9828   0015FA  0E00               	movlw	0
  9829   0015FC  6E12               	movwf	(___fladd@b+2)^0,c
  9830   0015FE  0E00               	movlw	0
  9831   001600  6E13               	movwf	(___fladd@b+3)^0,c
  9832   001602                     l4396:
  9833   001602  8E12               	bsf	(___fladd@b+2)^0,7,c
  9834   001604  0E00               	movlw	0
  9835   001606  6E13               	movwf	(___fladd@b+3)^0,c
  9836   001608  EF0E  F00B         	goto	l4402
  9837   00160C                     l4400:
  9838   00160C  0E00               	movlw	0
  9839   00160E  6E10               	movwf	___fladd@b^0,c
  9840   001610  0E00               	movlw	0
  9841   001612  6E11               	movwf	(___fladd@b+1)^0,c
  9842   001614  0E00               	movlw	0
  9843   001616  6E12               	movwf	(___fladd@b+2)^0,c
  9844   001618  0E00               	movlw	0
  9845   00161A  6E13               	movwf	(___fladd@b+3)^0,c
  9846   00161C                     l4402:
  9847   00161C  5017               	movf	(___fladd@a+3)^0,w,c
  9848   00161E  0B80               	andlw	128
  9849   001620  6E1D               	movwf	___fladd@aexp^0,c
  9850   001622  501C               	movf	___fladd@signs^0,w,c
  9851   001624  181D               	xorwf	___fladd@aexp^0,w,c
  9852   001626  B4D8               	btfsc	status,2,c
  9853   001628  EF18  F00B         	goto	u3511
  9854   00162C  EF1A  F00B         	goto	u3510
  9855   001630                     u3511:
  9856   001630  EF1B  F00B         	goto	l4408
  9857   001634                     u3510:
  9858   001634  8C1C               	bsf	___fladd@signs^0,6,c
  9859   001636                     l4408:
  9860   001636  5017               	movf	(___fladd@a+3)^0,w,c
  9861   001638  2417               	addwf	(___fladd@a+3)^0,w,c
  9862   00163A  6E1D               	movwf	___fladd@aexp^0,c
  9863   00163C  AE16               	btfss	(___fladd@a+2)^0,7,c
  9864   00163E  EF23  F00B         	goto	u3521
  9865   001642  EF25  F00B         	goto	u3520
  9866   001646                     u3521:
  9867   001646  EF26  F00B         	goto	l4414
  9868   00164A                     u3520:
  9869   00164A  801D               	bsf	___fladd@aexp^0,0,c
  9870   00164C                     l4414:
  9871   00164C  501D               	movf	___fladd@aexp^0,w,c
  9872   00164E  B4D8               	btfsc	status,2,c
  9873   001650  EF2C  F00B         	goto	u3531
  9874   001654  EF2E  F00B         	goto	u3530
  9875   001658                     u3531:
  9876   001658  EF43  F00B         	goto	l4424
  9877   00165C                     u3530:
  9878   00165C  281D               	incf	___fladd@aexp^0,w,c
  9879   00165E  A4D8               	btfss	status,2,c
  9880   001660  EF34  F00B         	goto	u3541
  9881   001664  EF36  F00B         	goto	u3540
  9882   001668                     u3541:
  9883   001668  EF3E  F00B         	goto	l4420
  9884   00166C                     u3540:
  9885   00166C  0E00               	movlw	0
  9886   00166E  6E14               	movwf	___fladd@a^0,c
  9887   001670  0E00               	movlw	0
  9888   001672  6E15               	movwf	(___fladd@a+1)^0,c
  9889   001674  0E00               	movlw	0
  9890   001676  6E16               	movwf	(___fladd@a+2)^0,c
  9891   001678  0E00               	movlw	0
  9892   00167A  6E17               	movwf	(___fladd@a+3)^0,c
  9893   00167C                     l4420:
  9894   00167C  8E16               	bsf	(___fladd@a+2)^0,7,c
  9895   00167E  0E00               	movlw	0
  9896   001680  6E17               	movwf	(___fladd@a+3)^0,c
  9897   001682  EF4B  F00B         	goto	l4426
  9898   001686                     l4424:
  9899   001686  0E00               	movlw	0
  9900   001688  6E14               	movwf	___fladd@a^0,c
  9901   00168A  0E00               	movlw	0
  9902   00168C  6E15               	movwf	(___fladd@a+1)^0,c
  9903   00168E  0E00               	movlw	0
  9904   001690  6E16               	movwf	(___fladd@a+2)^0,c
  9905   001692  0E00               	movlw	0
  9906   001694  6E17               	movwf	(___fladd@a+3)^0,c
  9907   001696                     l4426:
  9908   001696  501E               	movf	___fladd@bexp^0,w,c
  9909   001698  5C1D               	subwf	___fladd@aexp^0,w,c
  9910   00169A  B0D8               	btfsc	status,0,c
  9911   00169C  EF52  F00B         	goto	u3551
  9912   0016A0  EF54  F00B         	goto	u3550
  9913   0016A4                     u3551:
  9914   0016A4  EF7B  F00B         	goto	l4462
  9915   0016A8                     u3550:
  9916   0016A8  AC1C               	btfss	___fladd@signs^0,6,c
  9917   0016AA  EF59  F00B         	goto	u3561
  9918   0016AE  EF5B  F00B         	goto	u3560
  9919   0016B2                     u3561:
  9920   0016B2  EF5D  F00B         	goto	l4432
  9921   0016B6                     u3560:
  9922   0016B6  0E80               	movlw	128
  9923   0016B8  1A1C               	xorwf	___fladd@signs^0,f,c
  9924   0016BA                     l4432:
  9925   0016BA  C01E  F01F         	movff	___fladd@bexp,___fladd@grs
  9926   0016BE  C01D  F01E         	movff	___fladd@aexp,___fladd@bexp
  9927   0016C2  C01F  F01D         	movff	___fladd@grs,___fladd@aexp
  9928   0016C6  C010  F01F         	movff	___fladd@b,___fladd@grs
  9929   0016CA  C014  F010         	movff	___fladd@a,___fladd@b
  9930   0016CE  C01F  F014         	movff	___fladd@grs,___fladd@a
  9931   0016D2  C011  F01F         	movff	___fladd@b+1,___fladd@grs
  9932   0016D6  C015  F011         	movff	___fladd@a+1,___fladd@b+1
  9933   0016DA  C01F  F015         	movff	___fladd@grs,___fladd@a+1
  9934   0016DE  C012  F01F         	movff	___fladd@b+2,___fladd@grs
  9935   0016E2  C016  F012         	movff	___fladd@a+2,___fladd@b+2
  9936   0016E6  C01F  F016         	movff	___fladd@grs,___fladd@a+2
  9937   0016EA  C013  F01F         	movff	___fladd@b+3,___fladd@grs
  9938   0016EE  C017  F013         	movff	___fladd@a+3,___fladd@b+3
  9939   0016F2  C01F  F017         	movff	___fladd@grs,___fladd@a+3
  9940   0016F6                     l4462:
  9941   0016F6  0E00               	movlw	0
  9942   0016F8  6E1F               	movwf	___fladd@grs^0,c
  9943   0016FA  501E               	movf	___fladd@bexp^0,w,c
  9944   0016FC  C01D  F018         	movff	___fladd@aexp,??___fladd
  9945   001700  6A19               	clrf	(??___fladd+1)^0,c
  9946   001702  5E18               	subwf	??___fladd^0,f,c
  9947   001704  0E00               	movlw	0
  9948   001706  5A19               	subwfb	(??___fladd+1)^0,f,c
  9949   001708  BE19               	btfsc	(??___fladd+1)^0,7,c
  9950   00170A  EF90  F00B         	goto	u3571
  9951   00170E  5019               	movf	(??___fladd+1)^0,w,c
  9952   001710  E109               	bnz	u3570
  9953   001712  0E1A               	movlw	26
  9954   001714  5C18               	subwf	??___fladd^0,w,c
  9955   001716  A0D8               	btfss	status,0,c
  9956   001718  EF90  F00B         	goto	u3571
  9957   00171C  EF92  F00B         	goto	u3570
  9958   001720                     u3571:
  9959   001720  EFC9  F00B         	goto	l1421
  9960   001724                     u3570:
  9961   001724  5010               	movf	___fladd@b^0,w,c
  9962   001726  1011               	iorwf	(___fladd@b+1)^0,w,c
  9963   001728  1012               	iorwf	(___fladd@b+2)^0,w,c
  9964   00172A  1013               	iorwf	(___fladd@b+3)^0,w,c
  9965   00172C  A4D8               	btfss	status,2,c
  9966   00172E  EF9B  F00B         	goto	u3581
  9967   001732  EF9E  F00B         	goto	u3580
  9968   001736                     u3581:
  9969   001736  0E01               	movlw	1
  9970   001738  EF9F  F00B         	goto	u3590
  9971   00173C                     u3580:
  9972   00173C  0E00               	movlw	0
  9973   00173E                     u3590:
  9974   00173E  6E1F               	movwf	___fladd@grs^0,c
  9975   001740  0E00               	movlw	0
  9976   001742  6E10               	movwf	___fladd@b^0,c
  9977   001744  0E00               	movlw	0
  9978   001746  6E11               	movwf	(___fladd@b+1)^0,c
  9979   001748  0E00               	movlw	0
  9980   00174A  6E12               	movwf	(___fladd@b+2)^0,c
  9981   00174C  0E00               	movlw	0
  9982   00174E  6E13               	movwf	(___fladd@b+3)^0,c
  9983   001750  C01D  F01E         	movff	___fladd@aexp,___fladd@bexp
  9984   001754  EFD2  F00B         	goto	l1420
  9985   001758                     l1422:
  9986   001758  A01F               	btfss	___fladd@grs^0,0,c
  9987   00175A  EFB1  F00B         	goto	u3601
  9988   00175E  EFB3  F00B         	goto	u3600
  9989   001762                     u3601:
  9990   001762  EFB9  F00B         	goto	l4474
  9991   001766                     u3600:
  9992   001766  90D8               	bcf	status,0,c
  9993   001768  301F               	rrcf	___fladd@grs^0,w,c
  9994   00176A  0901               	iorlw	1
  9995   00176C  6E1F               	movwf	___fladd@grs^0,c
  9996   00176E  EFBB  F00B         	goto	l4476
  9997   001772                     l4474:
  9998   001772  90D8               	bcf	status,0,c
  9999   001774  321F               	rrcf	___fladd@grs^0,f,c
 10000   001776                     l4476:
 10001   001776  A010               	btfss	___fladd@b^0,0,c
 10002   001778  EFC0  F00B         	goto	u3611
 10003   00177C  EFC2  F00B         	goto	u3610
 10004   001780                     u3611:
 10005   001780  EFC3  F00B         	goto	l4480
 10006   001784                     u3610:
 10007   001784  8E1F               	bsf	___fladd@grs^0,7,c
 10008   001786                     l4480:
 10009   001786  3413               	rlcf	(___fladd@b+3)^0,w,c
 10010   001788  3213               	rrcf	(___fladd@b+3)^0,f,c
 10011   00178A  3212               	rrcf	(___fladd@b+2)^0,f,c
 10012   00178C  3211               	rrcf	(___fladd@b+1)^0,f,c
 10013   00178E  3210               	rrcf	___fladd@b^0,f,c
 10014   001790  2A1E               	incf	___fladd@bexp^0,f,c
 10015   001792                     l1421:
 10016   001792  501D               	movf	___fladd@aexp^0,w,c
 10017   001794  5C1E               	subwf	___fladd@bexp^0,w,c
 10018   001796  A0D8               	btfss	status,0,c
 10019   001798  EFD0  F00B         	goto	u3621
 10020   00179C  EFD2  F00B         	goto	u3620
 10021   0017A0                     u3621:
 10022   0017A0  EFAC  F00B         	goto	l1422
 10023   0017A4                     u3620:
 10024   0017A4                     l1420:
 10025   0017A4  BC1C               	btfsc	___fladd@signs^0,6,c
 10026   0017A6  EFD7  F00B         	goto	u3631
 10027   0017AA  EFD9  F00B         	goto	u3630
 10028   0017AE                     u3631:
 10029   0017AE  EF19  F00C         	goto	l4508
 10030   0017B2                     u3630:
 10031   0017B2  501E               	movf	___fladd@bexp^0,w,c
 10032   0017B4  A4D8               	btfss	status,2,c
 10033   0017B6  EFDF  F00B         	goto	u3641
 10034   0017BA  EFE1  F00B         	goto	u3640
 10035   0017BE                     u3641:
 10036   0017BE  EFEB  F00B         	goto	l4490
 10037   0017C2                     u3640:
 10038   0017C2  0E00               	movlw	0
 10039   0017C4  6E10               	movwf	?___fladd^0,c
 10040   0017C6  0E00               	movlw	0
 10041   0017C8  6E11               	movwf	(?___fladd+1)^0,c
 10042   0017CA  0E00               	movlw	0
 10043   0017CC  6E12               	movwf	(?___fladd+2)^0,c
 10044   0017CE  0E00               	movlw	0
 10045   0017D0  6E13               	movwf	(?___fladd+3)^0,c
 10046   0017D2  EF3A  F00D         	goto	l1429
 10047   0017D6                     l4490:
 10048   0017D6  5014               	movf	___fladd@a^0,w,c
 10049   0017D8  2610               	addwf	___fladd@b^0,f,c
 10050   0017DA  5015               	movf	(___fladd@a+1)^0,w,c
 10051   0017DC  2211               	addwfc	(___fladd@b+1)^0,f,c
 10052   0017DE  5016               	movf	(___fladd@a+2)^0,w,c
 10053   0017E0  2212               	addwfc	(___fladd@b+2)^0,f,c
 10054   0017E2  5017               	movf	(___fladd@a+3)^0,w,c
 10055   0017E4  2213               	addwfc	(___fladd@b+3)^0,f,c
 10056   0017E6  A013               	btfss	(___fladd@b+3)^0,0,c
 10057   0017E8  EFF8  F00B         	goto	u3651
 10058   0017EC  EFFA  F00B         	goto	u3650
 10059   0017F0                     u3651:
 10060   0017F0  EFA6  F00C         	goto	l4544
 10061   0017F4                     u3650:
 10062   0017F4  A01F               	btfss	___fladd@grs^0,0,c
 10063   0017F6  EFFF  F00B         	goto	u3661
 10064   0017FA  EF01  F00C         	goto	u3660
 10065   0017FE                     u3661:
 10066   0017FE  EF07  F00C         	goto	l4498
 10067   001802                     u3660:
 10068   001802  90D8               	bcf	status,0,c
 10069   001804  301F               	rrcf	___fladd@grs^0,w,c
 10070   001806  0901               	iorlw	1
 10071   001808  6E1F               	movwf	___fladd@grs^0,c
 10072   00180A  EF09  F00C         	goto	l4500
 10073   00180E                     l4498:
 10074   00180E  90D8               	bcf	status,0,c
 10075   001810  321F               	rrcf	___fladd@grs^0,f,c
 10076   001812                     l4500:
 10077   001812  A010               	btfss	___fladd@b^0,0,c
 10078   001814  EF0E  F00C         	goto	u3671
 10079   001818  EF10  F00C         	goto	u3670
 10080   00181C                     u3671:
 10081   00181C  EF11  F00C         	goto	l4504
 10082   001820                     u3670:
 10083   001820  8E1F               	bsf	___fladd@grs^0,7,c
 10084   001822                     l4504:
 10085   001822  3413               	rlcf	(___fladd@b+3)^0,w,c
 10086   001824  3213               	rrcf	(___fladd@b+3)^0,f,c
 10087   001826  3212               	rrcf	(___fladd@b+2)^0,f,c
 10088   001828  3211               	rrcf	(___fladd@b+1)^0,f,c
 10089   00182A  3210               	rrcf	___fladd@b^0,f,c
 10090   00182C  2A1E               	incf	___fladd@bexp^0,f,c
 10091   00182E  EFA6  F00C         	goto	l4544
 10092   001832                     l4508:
 10093   001832  5014               	movf	___fladd@a^0,w,c
 10094   001834  5C10               	subwf	___fladd@b^0,w,c
 10095   001836  5015               	movf	(___fladd@a+1)^0,w,c
 10096   001838  5811               	subwfb	(___fladd@b+1)^0,w,c
 10097   00183A  5016               	movf	(___fladd@a+2)^0,w,c
 10098   00183C  5812               	subwfb	(___fladd@b+2)^0,w,c
 10099   00183E  5013               	movf	(___fladd@b+3)^0,w,c
 10100   001840  0A80               	xorlw	128
 10101   001842  6E18               	movwf	??___fladd^0,c
 10102   001844  5017               	movf	(___fladd@a+3)^0,w,c
 10103   001846  0A80               	xorlw	128
 10104   001848  5818               	subwfb	??___fladd^0,w,c
 10105   00184A  B0D8               	btfsc	status,0,c
 10106   00184C  EF2A  F00C         	goto	u3681
 10107   001850  EF2C  F00C         	goto	u3680
 10108   001854                     u3681:
 10109   001854  EF57  F00C         	goto	l4518
 10110   001858                     u3680:
 10111   001858  5010               	movf	___fladd@b^0,w,c
 10112   00185A  5C14               	subwf	___fladd@a^0,w,c
 10113   00185C  6E18               	movwf	??___fladd^0,c
 10114   00185E  5011               	movf	(___fladd@b+1)^0,w,c
 10115   001860  5815               	subwfb	(___fladd@a+1)^0,w,c
 10116   001862  6E19               	movwf	(??___fladd+1)^0,c
 10117   001864  5012               	movf	(___fladd@b+2)^0,w,c
 10118   001866  5816               	subwfb	(___fladd@a+2)^0,w,c
 10119   001868  6E1A               	movwf	(??___fladd+2)^0,c
 10120   00186A  5013               	movf	(___fladd@b+3)^0,w,c
 10121   00186C  5817               	subwfb	(___fladd@a+3)^0,w,c
 10122   00186E  6E1B               	movwf	(??___fladd+3)^0,c
 10123   001870  0EFF               	movlw	255
 10124   001872  2418               	addwf	??___fladd^0,w,c
 10125   001874  6E10               	movwf	___fladd@b^0,c
 10126   001876  0EFF               	movlw	255
 10127   001878  2019               	addwfc	(??___fladd+1)^0,w,c
 10128   00187A  6E11               	movwf	(___fladd@b+1)^0,c
 10129   00187C  0EFF               	movlw	255
 10130   00187E  201A               	addwfc	(??___fladd+2)^0,w,c
 10131   001880  6E12               	movwf	(___fladd@b+2)^0,c
 10132   001882  0EFF               	movlw	255
 10133   001884  201B               	addwfc	(??___fladd+3)^0,w,c
 10134   001886  6E13               	movwf	(___fladd@b+3)^0,c
 10135   001888  0E80               	movlw	128
 10136   00188A  1A1C               	xorwf	___fladd@signs^0,f,c
 10137   00188C  6C1F               	negf	___fladd@grs^0,c
 10138   00188E  501F               	movf	___fladd@grs^0,w,c
 10139   001890  A4D8               	btfss	status,2,c
 10140   001892  EF4D  F00C         	goto	u3691
 10141   001896  EF4F  F00C         	goto	u3690
 10142   00189A                     u3691:
 10143   00189A  EF5F  F00C         	goto	l1437
 10144   00189E                     u3690:
 10145   00189E  0E01               	movlw	1
 10146   0018A0  2610               	addwf	___fladd@b^0,f,c
 10147   0018A2  0E00               	movlw	0
 10148   0018A4  2211               	addwfc	(___fladd@b+1)^0,f,c
 10149   0018A6  2212               	addwfc	(___fladd@b+2)^0,f,c
 10150   0018A8  2213               	addwfc	(___fladd@b+3)^0,f,c
 10151   0018AA  EF5F  F00C         	goto	l1437
 10152   0018AE                     l4518:
 10153   0018AE  5014               	movf	___fladd@a^0,w,c
 10154   0018B0  5E10               	subwf	___fladd@b^0,f,c
 10155   0018B2  5015               	movf	(___fladd@a+1)^0,w,c
 10156   0018B4  5A11               	subwfb	(___fladd@b+1)^0,f,c
 10157   0018B6  5016               	movf	(___fladd@a+2)^0,w,c
 10158   0018B8  5A12               	subwfb	(___fladd@b+2)^0,f,c
 10159   0018BA  5017               	movf	(___fladd@a+3)^0,w,c
 10160   0018BC  5A13               	subwfb	(___fladd@b+3)^0,f,c
 10161   0018BE                     l1437:
 10162   0018BE  5010               	movf	___fladd@b^0,w,c
 10163   0018C0  1011               	iorwf	(___fladd@b+1)^0,w,c
 10164   0018C2  1012               	iorwf	(___fladd@b+2)^0,w,c
 10165   0018C4  1013               	iorwf	(___fladd@b+3)^0,w,c
 10166   0018C6  A4D8               	btfss	status,2,c
 10167   0018C8  EF68  F00C         	goto	u3701
 10168   0018CC  EF6A  F00C         	goto	u3700
 10169   0018D0                     u3701:
 10170   0018D0  EF9F  F00C         	goto	l4542
 10171   0018D4                     u3700:
 10172   0018D4  501F               	movf	___fladd@grs^0,w,c
 10173   0018D6  A4D8               	btfss	status,2,c
 10174   0018D8  EF70  F00C         	goto	u3711
 10175   0018DC  EF72  F00C         	goto	u3710
 10176   0018E0                     u3711:
 10177   0018E0  EF9F  F00C         	goto	l4542
 10178   0018E4                     u3710:
 10179   0018E4  0E00               	movlw	0
 10180   0018E6  6E10               	movwf	?___fladd^0,c
 10181   0018E8  0E00               	movlw	0
 10182   0018EA  6E11               	movwf	(?___fladd+1)^0,c
 10183   0018EC  0E00               	movlw	0
 10184   0018EE  6E12               	movwf	(?___fladd+2)^0,c
 10185   0018F0  0E00               	movlw	0
 10186   0018F2  6E13               	movwf	(?___fladd+3)^0,c
 10187   0018F4  EF3A  F00D         	goto	l1429
 10188   0018F8                     l4526:
 10189   0018F8  90D8               	bcf	status,0,c
 10190   0018FA  3610               	rlcf	___fladd@b^0,f,c
 10191   0018FC  3611               	rlcf	(___fladd@b+1)^0,f,c
 10192   0018FE  3612               	rlcf	(___fladd@b+2)^0,f,c
 10193   001900  3613               	rlcf	(___fladd@b+3)^0,f,c
 10194   001902  AE1F               	btfss	___fladd@grs^0,7,c
 10195   001904  EF86  F00C         	goto	u3721
 10196   001908  EF88  F00C         	goto	u3720
 10197   00190C                     u3721:
 10198   00190C  EF89  F00C         	goto	l4532
 10199   001910                     u3720:
 10200   001910  8010               	bsf	___fladd@b^0,0,c
 10201   001912                     l4532:
 10202   001912  A01F               	btfss	___fladd@grs^0,0,c
 10203   001914  EF8E  F00C         	goto	u3731
 10204   001918  EF90  F00C         	goto	u3730
 10205   00191C                     u3731:
 10206   00191C  EF94  F00C         	goto	l4536
 10207   001920                     u3730:
 10208   001920  80D8               	bsf	status,0,c
 10209   001922  361F               	rlcf	___fladd@grs^0,f,c
 10210   001924  EF96  F00C         	goto	l4538
 10211   001928                     l4536:
 10212   001928  90D8               	bcf	status,0,c
 10213   00192A  361F               	rlcf	___fladd@grs^0,f,c
 10214   00192C                     l4538:
 10215   00192C  501E               	movf	___fladd@bexp^0,w,c
 10216   00192E  B4D8               	btfsc	status,2,c
 10217   001930  EF9C  F00C         	goto	u3741
 10218   001934  EF9E  F00C         	goto	u3740
 10219   001938                     u3741:
 10220   001938  EF9F  F00C         	goto	l4542
 10221   00193C                     u3740:
 10222   00193C  061E               	decf	___fladd@bexp^0,f,c
 10223   00193E                     l4542:
 10224   00193E  AE12               	btfss	(___fladd@b+2)^0,7,c
 10225   001940  EFA4  F00C         	goto	u3751
 10226   001944  EFA6  F00C         	goto	u3750
 10227   001948                     u3751:
 10228   001948  EF7C  F00C         	goto	l4526
 10229   00194C                     u3750:
 10230   00194C                     l4544:
 10231   00194C  0E00               	movlw	0
 10232   00194E  6E1D               	movwf	___fladd@aexp^0,c
 10233   001950  AE1F               	btfss	___fladd@grs^0,7,c
 10234   001952  EFAD  F00C         	goto	u3761
 10235   001956  EFAF  F00C         	goto	u3760
 10236   00195A                     u3761:
 10237   00195A  EFC7  F00C         	goto	l1446
 10238   00195E                     u3760:
 10239   00195E  C01F  F018         	movff	___fladd@grs,??___fladd
 10240   001962  0E7F               	movlw	127
 10241   001964  1618               	andwf	??___fladd^0,f,c
 10242   001966  B4D8               	btfsc	status,2,c
 10243   001968  EFB8  F00C         	goto	u3771
 10244   00196C  EFBA  F00C         	goto	u3770
 10245   001970                     u3771:
 10246   001970  EFBE  F00C         	goto	l1447
 10247   001974                     u3770:
 10248   001974                     l4550:
 10249   001974  0E01               	movlw	1
 10250   001976  6E1D               	movwf	___fladd@aexp^0,c
 10251   001978  EFC7  F00C         	goto	l1446
 10252   00197C                     l1447:
 10253   00197C  A010               	btfss	___fladd@b^0,0,c
 10254   00197E  EFC3  F00C         	goto	u3781
 10255   001982  EFC5  F00C         	goto	u3780
 10256   001986                     u3781:
 10257   001986  EFC7  F00C         	goto	l1446
 10258   00198A                     u3780:
 10259   00198A  EFBA  F00C         	goto	l4550
 10260   00198E                     l1446:
 10261   00198E  501D               	movf	___fladd@aexp^0,w,c
 10262   001990  B4D8               	btfsc	status,2,c
 10263   001992  EFCD  F00C         	goto	u3791
 10264   001996  EFCF  F00C         	goto	u3790
 10265   00199A                     u3791:
 10266   00199A  EFFA  F00C         	goto	l4562
 10267   00199E                     u3790:
 10268   00199E  0E01               	movlw	1
 10269   0019A0  2610               	addwf	___fladd@b^0,f,c
 10270   0019A2  0E00               	movlw	0
 10271   0019A4  2211               	addwfc	(___fladd@b+1)^0,f,c
 10272   0019A6  2212               	addwfc	(___fladd@b+2)^0,f,c
 10273   0019A8  2213               	addwfc	(___fladd@b+3)^0,f,c
 10274   0019AA  A013               	btfss	(___fladd@b+3)^0,0,c
 10275   0019AC  EFDA  F00C         	goto	u3801
 10276   0019B0  EFDC  F00C         	goto	u3800
 10277   0019B4                     u3801:
 10278   0019B4  EFFA  F00C         	goto	l4562
 10279   0019B8                     u3800:
 10280   0019B8  C010  F018         	movff	___fladd@b,??___fladd
 10281   0019BC  C011  F019         	movff	___fladd@b+1,??___fladd+1
 10282   0019C0  C012  F01A         	movff	___fladd@b+2,??___fladd+2
 10283   0019C4  C013  F01B         	movff	___fladd@b+3,??___fladd+3
 10284   0019C8  341B               	rlcf	(??___fladd+3)^0,w,c
 10285   0019CA  321B               	rrcf	(??___fladd+3)^0,f,c
 10286   0019CC  321A               	rrcf	(??___fladd+2)^0,f,c
 10287   0019CE  3219               	rrcf	(??___fladd+1)^0,f,c
 10288   0019D0  3218               	rrcf	??___fladd^0,f,c
 10289   0019D2  C018  F010         	movff	??___fladd,___fladd@b
 10290   0019D6  C019  F011         	movff	??___fladd+1,___fladd@b+1
 10291   0019DA  C01A  F012         	movff	??___fladd+2,___fladd@b+2
 10292   0019DE  C01B  F013         	movff	??___fladd+3,___fladd@b+3
 10293   0019E2  281E               	incf	___fladd@bexp^0,w,c
 10294   0019E4  B4D8               	btfsc	status,2,c
 10295   0019E6  EFF7  F00C         	goto	u3811
 10296   0019EA  EFF9  F00C         	goto	u3810
 10297   0019EE                     u3811:
 10298   0019EE  EFFA  F00C         	goto	l4562
 10299   0019F2                     u3810:
 10300   0019F2  2A1E               	incf	___fladd@bexp^0,f,c
 10301   0019F4                     l4562:
 10302   0019F4  281E               	incf	___fladd@bexp^0,w,c
 10303   0019F6  B4D8               	btfsc	status,2,c
 10304   0019F8  EF00  F00D         	goto	u3821
 10305   0019FC  EF02  F00D         	goto	u3820
 10306   001A00                     u3821:
 10307   001A00  EF0A  F00D         	goto	l4566
 10308   001A04                     u3820:
 10309   001A04  501E               	movf	___fladd@bexp^0,w,c
 10310   001A06  A4D8               	btfss	status,2,c
 10311   001A08  EF08  F00D         	goto	u3831
 10312   001A0C  EF0A  F00D         	goto	u3830
 10313   001A10                     u3831:
 10314   001A10  EF1C  F00D         	goto	l4570
 10315   001A14                     u3830:
 10316   001A14                     l4566:
 10317   001A14  0E00               	movlw	0
 10318   001A16  6E10               	movwf	___fladd@b^0,c
 10319   001A18  0E00               	movlw	0
 10320   001A1A  6E11               	movwf	(___fladd@b+1)^0,c
 10321   001A1C  0E00               	movlw	0
 10322   001A1E  6E12               	movwf	(___fladd@b+2)^0,c
 10323   001A20  0E00               	movlw	0
 10324   001A22  6E13               	movwf	(___fladd@b+3)^0,c
 10325   001A24  501E               	movf	___fladd@bexp^0,w,c
 10326   001A26  A4D8               	btfss	status,2,c
 10327   001A28  EF18  F00D         	goto	u3841
 10328   001A2C  EF1A  F00D         	goto	u3840
 10329   001A30                     u3841:
 10330   001A30  EF1C  F00D         	goto	l4570
 10331   001A34                     u3840:
 10332   001A34  0E00               	movlw	0
 10333   001A36  6E1C               	movwf	___fladd@signs^0,c
 10334   001A38                     l4570:
 10335   001A38  A01E               	btfss	___fladd@bexp^0,0,c
 10336   001A3A  EF21  F00D         	goto	u3851
 10337   001A3E  EF23  F00D         	goto	u3850
 10338   001A42                     u3851:
 10339   001A42  EF26  F00D         	goto	l4574
 10340   001A46                     u3850:
 10341   001A46  8E12               	bsf	(___fladd@b+2)^0,7,c
 10342   001A48  EF27  F00D         	goto	l4576
 10343   001A4C                     l4574:
 10344   001A4C  9E12               	bcf	(___fladd@b+2)^0,7,c
 10345   001A4E                     l4576:
 10346   001A4E  90D8               	bcf	status,0,c
 10347   001A50  301E               	rrcf	___fladd@bexp^0,w,c
 10348   001A52  6E13               	movwf	(___fladd@b+3)^0,c
 10349   001A54  AE1C               	btfss	___fladd@signs^0,7,c
 10350   001A56  EF2F  F00D         	goto	u3861
 10351   001A5A  EF31  F00D         	goto	u3860
 10352   001A5E                     u3861:
 10353   001A5E  EF32  F00D         	goto	l4582
 10354   001A62                     u3860:
 10355   001A62  8E13               	bsf	(___fladd@b+3)^0,7,c
 10356   001A64                     l4582:
 10357   001A64  C010  F010         	movff	___fladd@b,?___fladd
 10358   001A68  C011  F011         	movff	___fladd@b+1,?___fladd+1
 10359   001A6C  C012  F012         	movff	___fladd@b+2,?___fladd+2
 10360   001A70  C013  F013         	movff	___fladd@b+3,?___fladd+3
 10361   001A74                     l1429:
 10362   001A74  0012               	return		;funcret
 10363   001A76                     __end_of___fladd:
 10364                           	callstack 0
 10365                           
 10366 ;; *************** function _calibration_colors *****************
 10367 ;; Defined at:
 10368 ;;		line 9 in file "calibration.c"
 10369 ;; Parameters:    Size  Location     Type
 10370 ;;  cCal            1   12[COMRAM] PTR struct colors
 10371 ;;		 -> colorCalibration(8), 
 10372 ;; Auto vars:     Size  Location     Type
 10373 ;;		None
 10374 ;; Return value:  Size  Location     Type
 10375 ;;                  1    wreg      void 
 10376 ;; Registers used:
 10377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10378 ;; Tracked objects:
 10379 ;;		On entry : 0/0
 10380 ;;		On exit  : 0/0
 10381 ;;		Unchanged: 0/0
 10382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10383 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10385 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10386 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10387 ;;Total ram usage:        3 bytes
 10388 ;; Hardware stack levels used: 1
 10389 ;; Hardware stack levels required when called: 4
 10390 ;; This function calls:
 10391 ;;		_color_read_Blue
 10392 ;;		_color_read_Clear
 10393 ;;		_color_read_Green
 10394 ;;		_color_read_Red
 10395 ;; This function is called by:
 10396 ;;		_main
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           	psect	text63
 10401   003392                     __ptext63:
 10402                           	callstack 0
 10403   003392                     _calibration_colors:
 10404                           	callstack 26
 10405   003392                     
 10406                           ;calibration.c: 9: void calibration_colors(colors *cCal);calibration.c: 10: {;calibratio
      +                          n.c: 12:     LATGbits.LATG0 = 0;
 10407   003392  907F               	bcf	127,0,c	;volatile
 10408                           
 10409                           ;calibration.c: 13:     LATEbits.LATE7 = 0;
 10410   003394  9E7D               	bcf	125,7,c	;volatile
 10411                           
 10412                           ;calibration.c: 14:     LATAbits.LATA3 = 0;
 10413   003396  9679               	bcf	121,3,c	;volatile
 10414   003398                     l737:
 10415                           
 10416                           ;calibration.c: 18:     while(PORTFbits.RF2 == 1){
 10417   003398  B48E               	btfsc	142,2,c	;volatile
 10418   00339A  EFD1  F019         	goto	u4731
 10419   00339E  EFD3  F019         	goto	u4730
 10420   0033A2                     u4731:
 10421   0033A2  EFCC  F019         	goto	l737
 10422   0033A6                     u4730:
 10423   0033A6                     
 10424                           ;calibration.c: 22:     LATGbits.LATG0 = 1;
 10425   0033A6  807F               	bsf	127,0,c	;volatile
 10426   0033A8                     
 10427                           ;calibration.c: 23:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10428   0033A8  0E29               	movlw	41
 10429   0033AA  6E0F               	movwf	(??_calibration_colors+1)^0,c
 10430   0033AC  0E96               	movlw	150
 10431   0033AE  6E0E               	movwf	??_calibration_colors^0,c
 10432   0033B0  0E7F               	movlw	127
 10433   0033B2                     u5707:
 10434   0033B2  2EE8               	decfsz	wreg,f,c
 10435   0033B4  D7FE               	bra	u5707
 10436   0033B6  2E0E               	decfsz	??_calibration_colors^0,f,c
 10437   0033B8  D7FC               	bra	u5707
 10438   0033BA  2E0F               	decfsz	(??_calibration_colors+1)^0,f,c
 10439   0033BC  D7FA               	bra	u5707
 10440   0033BE  0000               	nop	
 10441   0033C0                     
 10442                           ;calibration.c: 24:     (cCal->red) = color_read_Red();
 10443   0033C0  EC04  F022         	call	_color_read_Red	;wreg free
 10444   0033C4  500D               	movf	calibration_colors@cCal^0,w,c
 10445   0033C6  6ED9               	movwf	fsr2l,c
 10446   0033C8  6ADA               	clrf	fsr2h,c
 10447   0033CA  C006  FFDE         	movff	?_color_read_Red,postinc2
 10448   0033CE  C007  FFDD         	movff	?_color_read_Red+1,postdec2
 10449   0033D2                     
 10450                           ;calibration.c: 25:     LATGbits.LATG0 = 0;
 10451   0033D2  907F               	bcf	127,0,c	;volatile
 10452   0033D4                     l740:
 10453                           
 10454                           ;calibration.c: 29:     while(PORTFbits.RF2 == 1){
 10455   0033D4  B48E               	btfsc	142,2,c	;volatile
 10456   0033D6  EFEF  F019         	goto	u4741
 10457   0033DA  EFF1  F019         	goto	u4740
 10458   0033DE                     u4741:
 10459   0033DE  EFEA  F019         	goto	l740
 10460   0033E2                     u4740:
 10461   0033E2                     
 10462                           ;calibration.c: 33:     LATEbits.LATE7 = 1;
 10463   0033E2  8E7D               	bsf	125,7,c	;volatile
 10464   0033E4                     
 10465                           ;calibration.c: 34:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10466   0033E4  0E29               	movlw	41
 10467   0033E6  6E0F               	movwf	(??_calibration_colors+1)^0,c
 10468   0033E8  0E96               	movlw	150
 10469   0033EA  6E0E               	movwf	??_calibration_colors^0,c
 10470   0033EC  0E7F               	movlw	127
 10471   0033EE                     u5717:
 10472   0033EE  2EE8               	decfsz	wreg,f,c
 10473   0033F0  D7FE               	bra	u5717
 10474   0033F2  2E0E               	decfsz	??_calibration_colors^0,f,c
 10475   0033F4  D7FC               	bra	u5717
 10476   0033F6  2E0F               	decfsz	(??_calibration_colors+1)^0,f,c
 10477   0033F8  D7FA               	bra	u5717
 10478   0033FA  0000               	nop	
 10479   0033FC                     
 10480                           ;calibration.c: 35:     (cCal->green) = color_read_Green();
 10481   0033FC  EC2C  F022         	call	_color_read_Green	;wreg free
 10482   003400  500D               	movf	calibration_colors@cCal^0,w,c
 10483   003402  6ED9               	movwf	fsr2l,c
 10484   003404  6ADA               	clrf	fsr2h,c
 10485   003406  0E02               	movlw	2
 10486   003408  26D9               	addwf	fsr2l,f,c
 10487   00340A  C006  FFDE         	movff	?_color_read_Green,postinc2
 10488   00340E  C007  FFDD         	movff	?_color_read_Green+1,postdec2
 10489   003412                     
 10490                           ;calibration.c: 36:     LATEbits.LATE7 = 0;
 10491   003412  9E7D               	bcf	125,7,c	;volatile
 10492   003414                     l743:
 10493                           
 10494                           ;calibration.c: 40:     while(PORTFbits.RF2 == 1){
 10495   003414  B48E               	btfsc	142,2,c	;volatile
 10496   003416  EF0F  F01A         	goto	u4751
 10497   00341A  EF11  F01A         	goto	u4750
 10498   00341E                     u4751:
 10499   00341E  EF0A  F01A         	goto	l743
 10500   003422                     u4750:
 10501   003422                     
 10502                           ;calibration.c: 44:     LATAbits.LATA3 = 1;
 10503   003422  8679               	bsf	121,3,c	;volatile
 10504   003424                     
 10505                           ;calibration.c: 45:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10506   003424  0E29               	movlw	41
 10507   003426  6E0F               	movwf	(??_calibration_colors+1)^0,c
 10508   003428  0E96               	movlw	150
 10509   00342A  6E0E               	movwf	??_calibration_colors^0,c
 10510   00342C  0E7F               	movlw	127
 10511   00342E                     u5727:
 10512   00342E  2EE8               	decfsz	wreg,f,c
 10513   003430  D7FE               	bra	u5727
 10514   003432  2E0E               	decfsz	??_calibration_colors^0,f,c
 10515   003434  D7FC               	bra	u5727
 10516   003436  2E0F               	decfsz	(??_calibration_colors+1)^0,f,c
 10517   003438  D7FA               	bra	u5727
 10518   00343A  0000               	nop	
 10519   00343C                     
 10520                           ;calibration.c: 46:     (cCal->blue) = color_read_Blue();
 10521   00343C  EC7C  F022         	call	_color_read_Blue	;wreg free
 10522   003440  500D               	movf	calibration_colors@cCal^0,w,c
 10523   003442  6ED9               	movwf	fsr2l,c
 10524   003444  6ADA               	clrf	fsr2h,c
 10525   003446  0E04               	movlw	4
 10526   003448  26D9               	addwf	fsr2l,f,c
 10527   00344A  C006  FFDE         	movff	?_color_read_Blue,postinc2
 10528   00344E  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
 10529   003452                     
 10530                           ;calibration.c: 47:     LATAbits.LATA3 = 0;
 10531   003452  9679               	bcf	121,3,c	;volatile
 10532   003454                     l746:
 10533                           
 10534                           ;calibration.c: 50:     while(PORTFbits.RF2 == 1){
 10535   003454  B48E               	btfsc	142,2,c	;volatile
 10536   003456  EF2F  F01A         	goto	u4761
 10537   00345A  EF31  F01A         	goto	u4760
 10538   00345E                     u4761:
 10539   00345E  EF2A  F01A         	goto	l746
 10540   003462                     u4760:
 10541   003462                     
 10542                           ;calibration.c: 53:     LATGbits.LATG0 = 1;
 10543   003462  807F               	bsf	127,0,c	;volatile
 10544                           
 10545                           ;calibration.c: 54:     LATEbits.LATE7 = 1;
 10546   003464  8E7D               	bsf	125,7,c	;volatile
 10547                           
 10548                           ;calibration.c: 55:     LATAbits.LATA3 = 1;
 10549   003466  8679               	bsf	121,3,c	;volatile
 10550   003468                     
 10551                           ;calibration.c: 56:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10552   003468  0E29               	movlw	41
 10553   00346A  6E0F               	movwf	(??_calibration_colors+1)^0,c
 10554   00346C  0E96               	movlw	150
 10555   00346E  6E0E               	movwf	??_calibration_colors^0,c
 10556   003470  0E7F               	movlw	127
 10557   003472                     u5737:
 10558   003472  2EE8               	decfsz	wreg,f,c
 10559   003474  D7FE               	bra	u5737
 10560   003476  2E0E               	decfsz	??_calibration_colors^0,f,c
 10561   003478  D7FC               	bra	u5737
 10562   00347A  2E0F               	decfsz	(??_calibration_colors+1)^0,f,c
 10563   00347C  D7FA               	bra	u5737
 10564   00347E  0000               	nop	
 10565   003480                     
 10566                           ;calibration.c: 57:     (cCal->clear) = color_read_Clear();
 10567   003480  EC54  F022         	call	_color_read_Clear	;wreg free
 10568   003484  500D               	movf	calibration_colors@cCal^0,w,c
 10569   003486  6ED9               	movwf	fsr2l,c
 10570   003488  6ADA               	clrf	fsr2h,c
 10571   00348A  0E06               	movlw	6
 10572   00348C  26D9               	addwf	fsr2l,f,c
 10573   00348E  C006  FFDE         	movff	?_color_read_Clear,postinc2
 10574   003492  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
 10575   003496                     
 10576                           ;calibration.c: 58:     LATGbits.LATG0 = 0;
 10577   003496  907F               	bcf	127,0,c	;volatile
 10578   003498                     
 10579                           ;calibration.c: 59:     LATEbits.LATE7 = 0;
 10580   003498  9E7D               	bcf	125,7,c	;volatile
 10581   00349A                     
 10582                           ;calibration.c: 60:     LATAbits.LATA3 = 0;
 10583   00349A  9679               	bcf	121,3,c	;volatile
 10584   00349C                     l749:
 10585                           
 10586                           ;calibration.c: 64:     while(PORTFbits.RF2 == 1){
 10587   00349C  B48E               	btfsc	142,2,c	;volatile
 10588   00349E  EF53  F01A         	goto	u4771
 10589   0034A2  EF55  F01A         	goto	u4770
 10590   0034A6                     u4771:
 10591   0034A6  EF4E  F01A         	goto	l749
 10592   0034AA                     u4770:
 10593   0034AA                     
 10594                           ;calibration.c: 67:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10595   0034AA  0E29               	movlw	41
 10596   0034AC  6E0F               	movwf	(??_calibration_colors+1)^0,c
 10597   0034AE  0E96               	movlw	150
 10598   0034B0  6E0E               	movwf	??_calibration_colors^0,c
 10599   0034B2  0E7F               	movlw	127
 10600   0034B4                     u5747:
 10601   0034B4  2EE8               	decfsz	wreg,f,c
 10602   0034B6  D7FE               	bra	u5747
 10603   0034B8  2E0E               	decfsz	??_calibration_colors^0,f,c
 10604   0034BA  D7FC               	bra	u5747
 10605   0034BC  2E0F               	decfsz	(??_calibration_colors+1)^0,f,c
 10606   0034BE  D7FA               	bra	u5747
 10607   0034C0  0000               	nop	
 10608   0034C2  0012               	return		;funcret
 10609   0034C4                     __end_of_calibration_colors:
 10610                           	callstack 0
 10611                           
 10612 ;; *************** function _color_read_Red *****************
 10613 ;; Defined at:
 10614 ;;		line 47 in file "color.c"
 10615 ;; Parameters:    Size  Location     Type
 10616 ;;		None
 10617 ;; Auto vars:     Size  Location     Type
 10618 ;;  tmp             2   10[COMRAM] unsigned int 
 10619 ;; Return value:  Size  Location     Type
 10620 ;;                  2    5[COMRAM] unsigned int 
 10621 ;; Registers used:
 10622 ;;		wreg, status,2, status,0, cstack
 10623 ;; Tracked objects:
 10624 ;;		On entry : 0/0
 10625 ;;		On exit  : 0/0
 10626 ;;		Unchanged: 0/0
 10627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10628 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10629 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10630 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10631 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10632 ;;Total ram usage:        7 bytes
 10633 ;; Hardware stack levels used: 1
 10634 ;; Hardware stack levels required when called: 3
 10635 ;; This function calls:
 10636 ;;		_I2C_2_Master_Read
 10637 ;;		_I2C_2_Master_RepStart
 10638 ;;		_I2C_2_Master_Start
 10639 ;;		_I2C_2_Master_Stop
 10640 ;;		_I2C_2_Master_Write
 10641 ;; This function is called by:
 10642 ;;		_reading_hue
 10643 ;;		_calibration_colors
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647                           	psect	text64
 10648   004408                     __ptext64:
 10649                           	callstack 0
 10650   004408                     _color_read_Red:
 10651                           	callstack 26
 10652   004408                     
 10653                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
 10654   004408  EC7D  F026         	call	_I2C_2_Master_Start	;wreg free
 10655                           
 10656                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 10657   00440C  0E52               	movlw	82
 10658   00440E  EC6C  F026         	call	_I2C_2_Master_Write
 10659                           
 10660                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x16);
 10661   004412  0EB6               	movlw	182
 10662   004414  EC6C  F026         	call	_I2C_2_Master_Write
 10663                           
 10664                           ;color.c: 53:  I2C_2_Master_RepStart();
 10665   004418  EC82  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10666                           
 10667                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 10668   00441C  0E53               	movlw	83
 10669   00441E  EC6C  F026         	call	_I2C_2_Master_Write
 10670                           
 10671                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
 10672   004422  0E01               	movlw	1
 10673   004424  EC52  F023         	call	_I2C_2_Master_Read
 10674   004428  6E08               	movwf	??_color_read_Red^0,c
 10675   00442A  5008               	movf	??_color_read_Red^0,w,c
 10676   00442C  6E0B               	movwf	color_read_Red@tmp^0,c
 10677   00442E  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 10678                           
 10679                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10680   004430  0E00               	movlw	0
 10681   004432  EC52  F023         	call	_I2C_2_Master_Read
 10682   004436  6E08               	movwf	??_color_read_Red^0,c
 10683   004438  5008               	movf	??_color_read_Red^0,w,c
 10684   00443A  6E0A               	movwf	(??_color_read_Red+2)^0,c
 10685   00443C  6A09               	clrf	(??_color_read_Red+1)^0,c
 10686   00443E  500B               	movf	color_read_Red@tmp^0,w,c
 10687   004440  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 10688   004442  6E0B               	movwf	color_read_Red@tmp^0,c
 10689   004444  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 10690   004446  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 10691   004448  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 10692                           
 10693                           ;color.c: 57:  I2C_2_Master_Stop();
 10694   00444A  EC78  F026         	call	_I2C_2_Master_Stop	;wreg free
 10695   00444E                     
 10696                           ;color.c: 58:  return tmp;
 10697   00444E  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 10698   004452  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10699   004456  0012               	return		;funcret
 10700   004458                     __end_of_color_read_Red:
 10701                           	callstack 0
 10702                           
 10703 ;; *************** function _color_read_Green *****************
 10704 ;; Defined at:
 10705 ;;		line 61 in file "color.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;		None
 10708 ;; Auto vars:     Size  Location     Type
 10709 ;;  tmp             2   10[COMRAM] unsigned int 
 10710 ;; Return value:  Size  Location     Type
 10711 ;;                  2    5[COMRAM] unsigned int 
 10712 ;; Registers used:
 10713 ;;		wreg, status,2, status,0, cstack
 10714 ;; Tracked objects:
 10715 ;;		On entry : 0/0
 10716 ;;		On exit  : 0/0
 10717 ;;		Unchanged: 0/0
 10718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10719 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10720 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10721 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10722 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10723 ;;Total ram usage:        7 bytes
 10724 ;; Hardware stack levels used: 1
 10725 ;; Hardware stack levels required when called: 3
 10726 ;; This function calls:
 10727 ;;		_I2C_2_Master_Read
 10728 ;;		_I2C_2_Master_RepStart
 10729 ;;		_I2C_2_Master_Start
 10730 ;;		_I2C_2_Master_Stop
 10731 ;;		_I2C_2_Master_Write
 10732 ;; This function is called by:
 10733 ;;		_reading_hue
 10734 ;;		_calibration_colors
 10735 ;; This function uses a non-reentrant model
 10736 ;;
 10737                           
 10738                           	psect	text65
 10739   004458                     __ptext65:
 10740                           	callstack 0
 10741   004458                     _color_read_Green:
 10742                           	callstack 26
 10743   004458                     
 10744                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
 10745   004458  EC7D  F026         	call	_I2C_2_Master_Start	;wreg free
 10746                           
 10747                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 10748   00445C  0E52               	movlw	82
 10749   00445E  EC6C  F026         	call	_I2C_2_Master_Write
 10750                           
 10751                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x18);
 10752   004462  0EB8               	movlw	184
 10753   004464  EC6C  F026         	call	_I2C_2_Master_Write
 10754                           
 10755                           ;color.c: 67:  I2C_2_Master_RepStart();
 10756   004468  EC82  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10757                           
 10758                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 10759   00446C  0E53               	movlw	83
 10760   00446E  EC6C  F026         	call	_I2C_2_Master_Write
 10761                           
 10762                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
 10763   004472  0E01               	movlw	1
 10764   004474  EC52  F023         	call	_I2C_2_Master_Read
 10765   004478  6E08               	movwf	??_color_read_Green^0,c
 10766   00447A  5008               	movf	??_color_read_Green^0,w,c
 10767   00447C  6E0B               	movwf	color_read_Green@tmp^0,c
 10768   00447E  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 10769                           
 10770                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10771   004480  0E00               	movlw	0
 10772   004482  EC52  F023         	call	_I2C_2_Master_Read
 10773   004486  6E08               	movwf	??_color_read_Green^0,c
 10774   004488  5008               	movf	??_color_read_Green^0,w,c
 10775   00448A  6E0A               	movwf	(??_color_read_Green+2)^0,c
 10776   00448C  6A09               	clrf	(??_color_read_Green+1)^0,c
 10777   00448E  500B               	movf	color_read_Green@tmp^0,w,c
 10778   004490  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 10779   004492  6E0B               	movwf	color_read_Green@tmp^0,c
 10780   004494  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 10781   004496  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 10782   004498  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 10783                           
 10784                           ;color.c: 71:  I2C_2_Master_Stop();
 10785   00449A  EC78  F026         	call	_I2C_2_Master_Stop	;wreg free
 10786   00449E                     
 10787                           ;color.c: 72:  return tmp;
 10788   00449E  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 10789   0044A2  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10790   0044A6  0012               	return		;funcret
 10791   0044A8                     __end_of_color_read_Green:
 10792                           	callstack 0
 10793                           
 10794 ;; *************** function _color_read_Clear *****************
 10795 ;; Defined at:
 10796 ;;		line 90 in file "color.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;		None
 10799 ;; Auto vars:     Size  Location     Type
 10800 ;;  tmp             2   10[COMRAM] unsigned int 
 10801 ;; Return value:  Size  Location     Type
 10802 ;;                  2    5[COMRAM] unsigned int 
 10803 ;; Registers used:
 10804 ;;		wreg, status,2, status,0, cstack
 10805 ;; Tracked objects:
 10806 ;;		On entry : 0/0
 10807 ;;		On exit  : 0/0
 10808 ;;		Unchanged: 0/0
 10809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10810 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10811 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10812 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10813 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10814 ;;Total ram usage:        7 bytes
 10815 ;; Hardware stack levels used: 1
 10816 ;; Hardware stack levels required when called: 3
 10817 ;; This function calls:
 10818 ;;		_I2C_2_Master_Read
 10819 ;;		_I2C_2_Master_RepStart
 10820 ;;		_I2C_2_Master_Start
 10821 ;;		_I2C_2_Master_Stop
 10822 ;;		_I2C_2_Master_Write
 10823 ;; This function is called by:
 10824 ;;		_reading_hue
 10825 ;;		_calc_clear_norm
 10826 ;;		_calibration_colors
 10827 ;; This function uses a non-reentrant model
 10828 ;;
 10829                           
 10830                           	psect	text66
 10831   0044A8                     __ptext66:
 10832                           	callstack 0
 10833   0044A8                     _color_read_Clear:
 10834                           	callstack 26
 10835   0044A8                     
 10836                           ;color.c: 92:  unsigned int tmp;;color.c: 93:  I2C_2_Master_Start();
 10837   0044A8  EC7D  F026         	call	_I2C_2_Master_Start	;wreg free
 10838                           
 10839                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x00);
 10840   0044AC  0E52               	movlw	82
 10841   0044AE  EC6C  F026         	call	_I2C_2_Master_Write
 10842                           
 10843                           ;color.c: 95:  I2C_2_Master_Write(0xA0 | 0x14);
 10844   0044B2  0EB4               	movlw	180
 10845   0044B4  EC6C  F026         	call	_I2C_2_Master_Write
 10846                           
 10847                           ;color.c: 96:  I2C_2_Master_RepStart();
 10848   0044B8  EC82  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10849                           
 10850                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x01);
 10851   0044BC  0E53               	movlw	83
 10852   0044BE  EC6C  F026         	call	_I2C_2_Master_Write
 10853                           
 10854                           ;color.c: 98:  tmp=I2C_2_Master_Read(1);
 10855   0044C2  0E01               	movlw	1
 10856   0044C4  EC52  F023         	call	_I2C_2_Master_Read
 10857   0044C8  6E08               	movwf	??_color_read_Clear^0,c
 10858   0044CA  5008               	movf	??_color_read_Clear^0,w,c
 10859   0044CC  6E0B               	movwf	color_read_Clear@tmp^0,c
 10860   0044CE  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 10861                           
 10862                           ;color.c: 99:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10863   0044D0  0E00               	movlw	0
 10864   0044D2  EC52  F023         	call	_I2C_2_Master_Read
 10865   0044D6  6E08               	movwf	??_color_read_Clear^0,c
 10866   0044D8  5008               	movf	??_color_read_Clear^0,w,c
 10867   0044DA  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 10868   0044DC  6A09               	clrf	(??_color_read_Clear+1)^0,c
 10869   0044DE  500B               	movf	color_read_Clear@tmp^0,w,c
 10870   0044E0  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 10871   0044E2  6E0B               	movwf	color_read_Clear@tmp^0,c
 10872   0044E4  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 10873   0044E6  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 10874   0044E8  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 10875                           
 10876                           ;color.c: 100:  I2C_2_Master_Stop();
 10877   0044EA  EC78  F026         	call	_I2C_2_Master_Stop	;wreg free
 10878   0044EE                     
 10879                           ;color.c: 101:  return tmp;
 10880   0044EE  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 10881   0044F2  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10882   0044F6  0012               	return		;funcret
 10883   0044F8                     __end_of_color_read_Clear:
 10884                           	callstack 0
 10885                           
 10886 ;; *************** function _color_read_Blue *****************
 10887 ;; Defined at:
 10888 ;;		line 75 in file "color.c"
 10889 ;; Parameters:    Size  Location     Type
 10890 ;;		None
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;  tmp             2   10[COMRAM] unsigned int 
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  2    5[COMRAM] unsigned int 
 10895 ;; Registers used:
 10896 ;;		wreg, status,2, status,0, cstack
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10902 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10903 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10904 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10905 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10906 ;;Total ram usage:        7 bytes
 10907 ;; Hardware stack levels used: 1
 10908 ;; Hardware stack levels required when called: 3
 10909 ;; This function calls:
 10910 ;;		_I2C_2_Master_Read
 10911 ;;		_I2C_2_Master_RepStart
 10912 ;;		_I2C_2_Master_Start
 10913 ;;		_I2C_2_Master_Stop
 10914 ;;		_I2C_2_Master_Write
 10915 ;; This function is called by:
 10916 ;;		_reading_hue
 10917 ;;		_calibration_colors
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           	psect	text67
 10922   0044F8                     __ptext67:
 10923                           	callstack 0
 10924   0044F8                     _color_read_Blue:
 10925                           	callstack 26
 10926   0044F8                     
 10927                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
 10928   0044F8  EC7D  F026         	call	_I2C_2_Master_Start	;wreg free
 10929                           
 10930                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 10931   0044FC  0E52               	movlw	82
 10932   0044FE  EC6C  F026         	call	_I2C_2_Master_Write
 10933                           
 10934                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x1A);
 10935   004502  0EBA               	movlw	186
 10936   004504  EC6C  F026         	call	_I2C_2_Master_Write
 10937                           
 10938                           ;color.c: 81:  I2C_2_Master_RepStart();
 10939   004508  EC82  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10940                           
 10941                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 10942   00450C  0E53               	movlw	83
 10943   00450E  EC6C  F026         	call	_I2C_2_Master_Write
 10944                           
 10945                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
 10946   004512  0E01               	movlw	1
 10947   004514  EC52  F023         	call	_I2C_2_Master_Read
 10948   004518  6E08               	movwf	??_color_read_Blue^0,c
 10949   00451A  5008               	movf	??_color_read_Blue^0,w,c
 10950   00451C  6E0B               	movwf	color_read_Blue@tmp^0,c
 10951   00451E  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 10952                           
 10953                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10954   004520  0E00               	movlw	0
 10955   004522  EC52  F023         	call	_I2C_2_Master_Read
 10956   004526  6E08               	movwf	??_color_read_Blue^0,c
 10957   004528  5008               	movf	??_color_read_Blue^0,w,c
 10958   00452A  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 10959   00452C  6A09               	clrf	(??_color_read_Blue+1)^0,c
 10960   00452E  500B               	movf	color_read_Blue@tmp^0,w,c
 10961   004530  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 10962   004532  6E0B               	movwf	color_read_Blue@tmp^0,c
 10963   004534  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 10964   004536  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 10965   004538  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 10966                           
 10967                           ;color.c: 85:  I2C_2_Master_Stop();
 10968   00453A  EC78  F026         	call	_I2C_2_Master_Stop	;wreg free
 10969   00453E                     
 10970                           ;color.c: 86:  return tmp;
 10971   00453E  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 10972   004542  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 10973   004546  0012               	return		;funcret
 10974   004548                     __end_of_color_read_Blue:
 10975                           	callstack 0
 10976                           
 10977 ;; *************** function _I2C_2_Master_Write *****************
 10978 ;; Defined at:
 10979 ;;		line 45 in file "i2c.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;  data_byte       1    wreg     unsigned char 
 10982 ;; Auto vars:     Size  Location     Type
 10983 ;;  data_byte       1    2[COMRAM] unsigned char 
 10984 ;; Return value:  Size  Location     Type
 10985 ;;                  1    wreg      void 
 10986 ;; Registers used:
 10987 ;;		wreg, status,2, status,0, cstack
 10988 ;; Tracked objects:
 10989 ;;		On entry : 0/0
 10990 ;;		On exit  : 0/0
 10991 ;;		Unchanged: 0/0
 10992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10994 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10996 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10997 ;;Total ram usage:        1 bytes
 10998 ;; Hardware stack levels used: 1
 10999 ;; Hardware stack levels required when called: 2
 11000 ;; This function calls:
 11001 ;;		_I2C_2_Master_Idle
 11002 ;; This function is called by:
 11003 ;;		_color_writetoaddr
 11004 ;;		_color_read_Red
 11005 ;;		_color_read_Green
 11006 ;;		_color_read_Blue
 11007 ;;		_color_read_Clear
 11008 ;; This function uses a non-reentrant model
 11009 ;;
 11010                           
 11011                           	psect	text68
 11012   004CD8                     __ptext68:
 11013                           	callstack 0
 11014   004CD8                     _I2C_2_Master_Write:
 11015                           	callstack 26
 11016                           
 11017                           ;incstack = 0
 11018                           ;I2C_2_Master_Write@data_byte stored from wreg
 11019   004CD8  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11020   004CDA                     
 11021                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11022   004CDA  ECEC  F025         	call	_I2C_2_Master_Idle	;wreg free
 11023   004CDE                     
 11024                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11025   004CDE  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11026   004CE2  0012               	return		;funcret
 11027   004CE4                     __end_of_I2C_2_Master_Write:
 11028                           	callstack 0
 11029                           
 11030 ;; *************** function _I2C_2_Master_Stop *****************
 11031 ;; Defined at:
 11032 ;;		line 39 in file "i2c.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;		None
 11035 ;; Auto vars:     Size  Location     Type
 11036 ;;		None
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  1    wreg      void 
 11039 ;; Registers used:
 11040 ;;		wreg, status,2, status,0, cstack
 11041 ;; Tracked objects:
 11042 ;;		On entry : 0/0
 11043 ;;		On exit  : 0/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11050 ;;Total ram usage:        0 bytes
 11051 ;; Hardware stack levels used: 1
 11052 ;; Hardware stack levels required when called: 2
 11053 ;; This function calls:
 11054 ;;		_I2C_2_Master_Idle
 11055 ;; This function is called by:
 11056 ;;		_color_writetoaddr
 11057 ;;		_color_read_Red
 11058 ;;		_color_read_Green
 11059 ;;		_color_read_Blue
 11060 ;;		_color_read_Clear
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           	psect	text69
 11065   004CF0                     __ptext69:
 11066                           	callstack 0
 11067   004CF0                     _I2C_2_Master_Stop:
 11068                           	callstack 26
 11069   004CF0                     
 11070                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11071   004CF0  ECEC  F025         	call	_I2C_2_Master_Idle	;wreg free
 11072   004CF4                     
 11073                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11074   004CF4  010E               	movlb	14	; () banked
 11075   004CF6  85DA               	bsf	218,2,b	;volatile
 11076   004CF8                     
 11077                           ; BSR set to: 14
 11078   004CF8  0012               	return		;funcret
 11079   004CFA                     __end_of_I2C_2_Master_Stop:
 11080                           	callstack 0
 11081                           
 11082 ;; *************** function _I2C_2_Master_Start *****************
 11083 ;; Defined at:
 11084 ;;		line 27 in file "i2c.c"
 11085 ;; Parameters:    Size  Location     Type
 11086 ;;		None
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;		None
 11089 ;; Return value:  Size  Location     Type
 11090 ;;                  1    wreg      void 
 11091 ;; Registers used:
 11092 ;;		wreg, status,2, status,0, cstack
 11093 ;; Tracked objects:
 11094 ;;		On entry : 0/0
 11095 ;;		On exit  : 0/0
 11096 ;;		Unchanged: 0/0
 11097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11102 ;;Total ram usage:        0 bytes
 11103 ;; Hardware stack levels used: 1
 11104 ;; Hardware stack levels required when called: 2
 11105 ;; This function calls:
 11106 ;;		_I2C_2_Master_Idle
 11107 ;; This function is called by:
 11108 ;;		_color_writetoaddr
 11109 ;;		_color_read_Red
 11110 ;;		_color_read_Green
 11111 ;;		_color_read_Blue
 11112 ;;		_color_read_Clear
 11113 ;; This function uses a non-reentrant model
 11114 ;;
 11115                           
 11116                           	psect	text70
 11117   004CFA                     __ptext70:
 11118                           	callstack 0
 11119   004CFA                     _I2C_2_Master_Start:
 11120                           	callstack 26
 11121   004CFA                     
 11122                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11123   004CFA  ECEC  F025         	call	_I2C_2_Master_Idle	;wreg free
 11124   004CFE                     
 11125                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11126   004CFE  010E               	movlb	14	; () banked
 11127   004D00  81DA               	bsf	218,0,b	;volatile
 11128   004D02                     
 11129                           ; BSR set to: 14
 11130   004D02  0012               	return		;funcret
 11131   004D04                     __end_of_I2C_2_Master_Start:
 11132                           	callstack 0
 11133                           
 11134 ;; *************** function _I2C_2_Master_RepStart *****************
 11135 ;; Defined at:
 11136 ;;		line 33 in file "i2c.c"
 11137 ;; Parameters:    Size  Location     Type
 11138 ;;		None
 11139 ;; Auto vars:     Size  Location     Type
 11140 ;;		None
 11141 ;; Return value:  Size  Location     Type
 11142 ;;                  1    wreg      void 
 11143 ;; Registers used:
 11144 ;;		wreg, status,2, status,0, cstack
 11145 ;; Tracked objects:
 11146 ;;		On entry : 0/0
 11147 ;;		On exit  : 0/0
 11148 ;;		Unchanged: 0/0
 11149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11154 ;;Total ram usage:        0 bytes
 11155 ;; Hardware stack levels used: 1
 11156 ;; Hardware stack levels required when called: 2
 11157 ;; This function calls:
 11158 ;;		_I2C_2_Master_Idle
 11159 ;; This function is called by:
 11160 ;;		_color_read_Red
 11161 ;;		_color_read_Green
 11162 ;;		_color_read_Blue
 11163 ;;		_color_read_Clear
 11164 ;; This function uses a non-reentrant model
 11165 ;;
 11166                           
 11167                           	psect	text71
 11168   004D04                     __ptext71:
 11169                           	callstack 0
 11170   004D04                     _I2C_2_Master_RepStart:
 11171                           	callstack 26
 11172   004D04                     
 11173                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11174   004D04  ECEC  F025         	call	_I2C_2_Master_Idle	;wreg free
 11175   004D08                     
 11176                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11177   004D08  010E               	movlb	14	; () banked
 11178   004D0A  83DA               	bsf	218,1,b	;volatile
 11179   004D0C                     
 11180                           ; BSR set to: 14
 11181   004D0C  0012               	return		;funcret
 11182   004D0E                     __end_of_I2C_2_Master_RepStart:
 11183                           	callstack 0
 11184                           
 11185 ;; *************** function _I2C_2_Master_Read *****************
 11186 ;; Defined at:
 11187 ;;		line 51 in file "i2c.c"
 11188 ;; Parameters:    Size  Location     Type
 11189 ;;  ack             1    wreg     unsigned char 
 11190 ;; Auto vars:     Size  Location     Type
 11191 ;;  ack             1    3[COMRAM] unsigned char 
 11192 ;;  tmp             1    4[COMRAM] unsigned char 
 11193 ;; Return value:  Size  Location     Type
 11194 ;;                  1    wreg      unsigned char 
 11195 ;; Registers used:
 11196 ;;		wreg, status,2, status,0, cstack
 11197 ;; Tracked objects:
 11198 ;;		On entry : 0/0
 11199 ;;		On exit  : 0/0
 11200 ;;		Unchanged: 0/0
 11201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11203 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11204 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11205 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11206 ;;Total ram usage:        3 bytes
 11207 ;; Hardware stack levels used: 1
 11208 ;; Hardware stack levels required when called: 2
 11209 ;; This function calls:
 11210 ;;		_I2C_2_Master_Idle
 11211 ;; This function is called by:
 11212 ;;		_color_read_Red
 11213 ;;		_color_read_Green
 11214 ;;		_color_read_Blue
 11215 ;;		_color_read_Clear
 11216 ;; This function uses a non-reentrant model
 11217 ;;
 11218                           
 11219                           	psect	text72
 11220   0046A4                     __ptext72:
 11221                           	callstack 0
 11222   0046A4                     _I2C_2_Master_Read:
 11223                           	callstack 26
 11224                           
 11225                           ; BSR set to: 14
 11226                           ;incstack = 0
 11227                           ;I2C_2_Master_Read@ack stored from wreg
 11228   0046A4  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11229   0046A6                     
 11230                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11231   0046A6  ECEC  F025         	call	_I2C_2_Master_Idle	;wreg free
 11232   0046AA                     
 11233                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11234   0046AA  010E               	movlb	14	; () banked
 11235   0046AC  87DA               	bsf	218,3,b	;volatile
 11236                           
 11237                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11238   0046AE  ECEC  F025         	call	_I2C_2_Master_Idle	;wreg free
 11239   0046B2                     
 11240                           ;i2c.c: 57:   tmp = SSP2BUF;
 11241   0046B2  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11242                           
 11243                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11244   0046B6  ECEC  F025         	call	_I2C_2_Master_Idle	;wreg free
 11245   0046BA                     
 11246                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11247   0046BA  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11248   0046BC  B4D8               	btfsc	status,2,c
 11249   0046BE  EF63  F023         	goto	u3441
 11250   0046C2  EF67  F023         	goto	u3440
 11251   0046C6                     u3441:
 11252   0046C6  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11253   0046C8  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11254   0046CA  EF68  F023         	goto	u3458
 11255   0046CE                     u3440:
 11256   0046CE  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11257   0046D0                     u3458:
 11258   0046D0  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11259   0046D2  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11260   0046D4  010E               	movlb	14	; () banked
 11261   0046D6  51DA               	movf	218,w,b	;volatile
 11262   0046D8  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11263   0046DA  0BDF               	andlw	-33
 11264   0046DC  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11265   0046DE  6FDA               	movwf	218,b	;volatile
 11266   0046E0                     
 11267                           ; BSR set to: 14
 11268                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11269   0046E0  89DA               	bsf	218,4,b	;volatile
 11270   0046E2                     
 11271                           ; BSR set to: 14
 11272                           ;i2c.c: 61:   return tmp;
 11273   0046E2  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11274   0046E4                     
 11275                           ; BSR set to: 14
 11276   0046E4  0012               	return		;funcret
 11277   0046E6                     __end_of_I2C_2_Master_Read:
 11278                           	callstack 0
 11279                           
 11280 ;; *************** function _I2C_2_Master_Idle *****************
 11281 ;; Defined at:
 11282 ;;		line 22 in file "i2c.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;		None
 11285 ;; Auto vars:     Size  Location     Type
 11286 ;;		None
 11287 ;; Return value:  Size  Location     Type
 11288 ;;                  1    wreg      void 
 11289 ;; Registers used:
 11290 ;;		wreg, status,2, status,0
 11291 ;; Tracked objects:
 11292 ;;		On entry : 0/0
 11293 ;;		On exit  : 0/0
 11294 ;;		Unchanged: 0/0
 11295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11298 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11299 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11300 ;;Total ram usage:        1 bytes
 11301 ;; Hardware stack levels used: 1
 11302 ;; Hardware stack levels required when called: 1
 11303 ;; This function calls:
 11304 ;;		Nothing
 11305 ;; This function is called by:
 11306 ;;		_I2C_2_Master_Start
 11307 ;;		_I2C_2_Master_RepStart
 11308 ;;		_I2C_2_Master_Stop
 11309 ;;		_I2C_2_Master_Write
 11310 ;;		_I2C_2_Master_Read
 11311 ;; This function uses a non-reentrant model
 11312 ;;
 11313                           
 11314                           	psect	text73
 11315   004BD8                     __ptext73:
 11316                           	callstack 0
 11317   004BD8                     _I2C_2_Master_Idle:
 11318                           	callstack 26
 11319   004BD8                     l203:
 11320   004BD8  010E               	movlb	14	; () banked
 11321   004BDA  B5D8               	btfsc	216,2,b	;volatile
 11322   004BDC  EFF2  F025         	goto	u2931
 11323   004BE0  EFF4  F025         	goto	u2930
 11324   004BE4                     u2931:
 11325   004BE4  EFEC  F025         	goto	l203
 11326   004BE8                     u2930:
 11327   004BE8                     
 11328                           ; BSR set to: 14
 11329   004BE8  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11330   004BEC  0E1F               	movlw	31
 11331   004BEE  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 11332   004BF0  A4D8               	btfss	status,2,c
 11333   004BF2  EFFD  F025         	goto	u2941
 11334   004BF6  EFFF  F025         	goto	u2940
 11335   004BFA                     u2941:
 11336   004BFA  EFEC  F025         	goto	l203
 11337   004BFE                     u2940:
 11338   004BFE                     
 11339                           ; BSR set to: 14
 11340   004BFE  0012               	return		;funcret
 11341   004C00                     __end_of_I2C_2_Master_Idle:
 11342                           	callstack 0
 11343                           
 11344 ;; *************** function _buttons_init *****************
 11345 ;; Defined at:
 11346 ;;		line 70 in file "calibration.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;		None
 11349 ;; Auto vars:     Size  Location     Type
 11350 ;;		None
 11351 ;; Return value:  Size  Location     Type
 11352 ;;                  1    wreg      void 
 11353 ;; Registers used:
 11354 ;;		None
 11355 ;; Tracked objects:
 11356 ;;		On entry : 0/0
 11357 ;;		On exit  : 0/0
 11358 ;;		Unchanged: 0/0
 11359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11364 ;;Total ram usage:        0 bytes
 11365 ;; Hardware stack levels used: 1
 11366 ;; Hardware stack levels required when called: 1
 11367 ;; This function calls:
 11368 ;;		Nothing
 11369 ;; This function is called by:
 11370 ;;		_main
 11371 ;; This function uses a non-reentrant model
 11372 ;;
 11373                           
 11374                           	psect	text74
 11375   004CE4                     __ptext74:
 11376                           	callstack 0
 11377   004CE4                     _buttons_init:
 11378                           	callstack 29
 11379   004CE4                     
 11380                           ;calibration.c: 72:     TRISFbits.TRISF2=1;
 11381   004CE4  8486               	bsf	134,2,c	;volatile
 11382                           
 11383                           ;calibration.c: 73:     ANSELFbits.ANSELF2=0;
 11384   004CE6  010E               	movlb	14	; () banked
 11385   004CE8  95B4               	bcf	180,2,b	;volatile
 11386                           
 11387                           ;calibration.c: 74:     TRISFbits.TRISF3=1;
 11388   004CEA  8686               	bsf	134,3,c	;volatile
 11389                           
 11390                           ;calibration.c: 75:     ANSELFbits.ANSELF3=0;
 11391   004CEC  97B4               	bcf	180,3,b	;volatile
 11392   004CEE                     
 11393                           ; BSR set to: 14
 11394   004CEE  0012               	return		;funcret
 11395   004CF0                     __end_of_buttons_init:
 11396                           	callstack 0
 11397                           
 11398 ;; *************** function _bump_wall *****************
 11399 ;; Defined at:
 11400 ;;		line 118 in file "maze_navigation.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;  mL              1   80[COMRAM] PTR struct DC_motor
 11403 ;;		 -> motorL(9), 
 11404 ;;  mR              1   81[COMRAM] PTR struct DC_motor
 11405 ;;		 -> motorR(9), 
 11406 ;; Auto vars:     Size  Location     Type
 11407 ;;		None
 11408 ;; Return value:  Size  Location     Type
 11409 ;;                  1    wreg      void 
 11410 ;; Registers used:
 11411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11412 ;; Tracked objects:
 11413 ;;		On entry : 0/0
 11414 ;;		On exit  : 0/0
 11415 ;;		Unchanged: 0/0
 11416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11417 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11419 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11420 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11421 ;;Total ram usage:        4 bytes
 11422 ;; Hardware stack levels used: 1
 11423 ;; Hardware stack levels required when called: 4
 11424 ;; This function calls:
 11425 ;;		_fullSpeedAhead
 11426 ;;		_stop
 11427 ;; This function is called by:
 11428 ;;		_main
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text75
 11433   0045DA                     __ptext75:
 11434                           	callstack 0
 11435   0045DA                     _bump_wall:
 11436                           	callstack 26
 11437   0045DA                     
 11438                           ;maze_navigation.c: 118: void bump_wall(struct DC_motor *mL, struct DC_motor *mR);maze_n
      +                          avigation.c: 119: {;maze_navigation.c: 121:     fullSpeedAhead(mL,mR);
 11439   0045DA  C051  F04C         	movff	bump_wall@mL,fullSpeedAhead@mL
 11440   0045DE  C052  F04D         	movff	bump_wall@mR,fullSpeedAhead@mR
 11441   0045E2  EC3F  F01D         	call	_fullSpeedAhead	;wreg free
 11442   0045E6                     
 11443                           ;maze_navigation.c: 122:     _delay((unsigned long)((300)*(64000000/4000.0)));
 11444   0045E6  0E19               	movlw	25
 11445   0045E8  6E54               	movwf	(??_bump_wall+1)^0,c
 11446   0045EA  0E5A               	movlw	90
 11447   0045EC  6E53               	movwf	??_bump_wall^0,c
 11448   0045EE  0EB2               	movlw	178
 11449   0045F0                     u5757:
 11450   0045F0  2EE8               	decfsz	wreg,f,c
 11451   0045F2  D7FE               	bra	u5757
 11452   0045F4  2E53               	decfsz	??_bump_wall^0,f,c
 11453   0045F6  D7FC               	bra	u5757
 11454   0045F8  2E54               	decfsz	(??_bump_wall+1)^0,f,c
 11455   0045FA  D7FA               	bra	u5757
 11456   0045FC                     
 11457                           ;maze_navigation.c: 123:     stop(mL,mR);
 11458   0045FC  C051  F014         	movff	bump_wall@mL,stop@mL
 11459   004600  C052  F015         	movff	bump_wall@mR,stop@mR
 11460   004604  EC3F  F020         	call	_stop	;wreg free
 11461                           
 11462                           ;maze_navigation.c: 124:     _delay((unsigned long)((300)*(64000000/4000.0)));
 11463   004608  0E19               	movlw	25
 11464   00460A  6E54               	movwf	(??_bump_wall+1)^0,c
 11465   00460C  0E5A               	movlw	90
 11466   00460E  6E53               	movwf	??_bump_wall^0,c
 11467   004610  0EB2               	movlw	178
 11468   004612                     u5767:
 11469   004612  2EE8               	decfsz	wreg,f,c
 11470   004614  D7FE               	bra	u5767
 11471   004616  2E53               	decfsz	??_bump_wall^0,f,c
 11472   004618  D7FC               	bra	u5767
 11473   00461A  2E54               	decfsz	(??_bump_wall+1)^0,f,c
 11474   00461C  D7FA               	bra	u5767
 11475   00461E  0012               	return		;funcret
 11476   004620                     __end_of_bump_wall:
 11477                           	callstack 0
 11478                           
 11479 ;; *************** function _stop *****************
 11480 ;; Defined at:
 11481 ;;		line 105 in file "dc_motor.c"
 11482 ;; Parameters:    Size  Location     Type
 11483 ;;  mL              1   19[COMRAM] PTR struct DC_motor
 11484 ;;		 -> motorL(9), 
 11485 ;;  mR              1   20[COMRAM] PTR struct DC_motor
 11486 ;;		 -> motorR(9), 
 11487 ;; Auto vars:     Size  Location     Type
 11488 ;;		None
 11489 ;; Return value:  Size  Location     Type
 11490 ;;                  1    wreg      void 
 11491 ;; Registers used:
 11492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11493 ;; Tracked objects:
 11494 ;;		On entry : 0/0
 11495 ;;		On exit  : 0/0
 11496 ;;		Unchanged: 0/0
 11497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11498 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11500 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11501 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11502 ;;Total ram usage:        3 bytes
 11503 ;; Hardware stack levels used: 1
 11504 ;; Hardware stack levels required when called: 3
 11505 ;; This function calls:
 11506 ;;		_setMotorPWM
 11507 ;; This function is called by:
 11508 ;;		_right90
 11509 ;;		_left90
 11510 ;;		_turn180
 11511 ;;		_right135
 11512 ;;		_left135
 11513 ;;		_backHalf
 11514 ;;		_backOneAndHalf
 11515 ;;		_reverseStraight
 11516 ;;		_looking_for_card
 11517 ;;		_bump_wall
 11518 ;; This function uses a non-reentrant model
 11519 ;;
 11520                           
 11521                           	psect	text76
 11522   00407E                     __ptext76:
 11523                           	callstack 0
 11524   00407E                     _stop:
 11525                           	callstack 26
 11526   00407E                     
 11527                           ;dc_motor.c: 105: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.c: 1
      +                          08:     while(mL->power > 0 || mR->power > 0) {
 11528   00407E  EF6F  F020         	goto	l3930
 11529   004082                     l3916:
 11530                           
 11531                           ;dc_motor.c: 109:         if (mL->power > 0) mL->power--;
 11532   004082  5014               	movf	stop@mL^0,w,c
 11533   004084  6ED9               	movwf	fsr2l,c
 11534   004086  6ADA               	clrf	fsr2h,c
 11535   004088  50DF               	movf	indf2,w,c
 11536   00408A  B4D8               	btfsc	status,2,c
 11537   00408C  EF4A  F020         	goto	u2951
 11538   004090  EF4C  F020         	goto	u2950
 11539   004094                     u2951:
 11540   004094  EF50  F020         	goto	l3920
 11541   004098                     u2950:
 11542   004098  5014               	movf	stop@mL^0,w,c
 11543   00409A  6ED9               	movwf	fsr2l,c
 11544   00409C  6ADA               	clrf	fsr2h,c
 11545   00409E  06DF               	decf	indf2,f,c
 11546   0040A0                     l3920:
 11547                           
 11548                           ;dc_motor.c: 110:         if (mR->power > 0) mR->power--;
 11549   0040A0  5015               	movf	stop@mR^0,w,c
 11550   0040A2  6ED9               	movwf	fsr2l,c
 11551   0040A4  6ADA               	clrf	fsr2h,c
 11552   0040A6  50DF               	movf	indf2,w,c
 11553   0040A8  B4D8               	btfsc	status,2,c
 11554   0040AA  EF59  F020         	goto	u2961
 11555   0040AE  EF5B  F020         	goto	u2960
 11556   0040B2                     u2961:
 11557   0040B2  EF5F  F020         	goto	l3924
 11558   0040B6                     u2960:
 11559   0040B6  5015               	movf	stop@mR^0,w,c
 11560   0040B8  6ED9               	movwf	fsr2l,c
 11561   0040BA  6ADA               	clrf	fsr2h,c
 11562   0040BC  06DF               	decf	indf2,f,c
 11563   0040BE                     l3924:
 11564                           
 11565                           ;dc_motor.c: 113:         setMotorPWM(mL);
 11566   0040BE  C014  F00F         	movff	stop@mL,setMotorPWM@m
 11567   0040C2  EC1F  F019         	call	_setMotorPWM	;wreg free
 11568   0040C6                     
 11569                           ;dc_motor.c: 114:         setMotorPWM(mR);
 11570   0040C6  C015  F00F         	movff	stop@mR,setMotorPWM@m
 11571   0040CA  EC1F  F019         	call	_setMotorPWM	;wreg free
 11572   0040CE                     
 11573                           ;dc_motor.c: 117:         _delay((unsigned long)((500)*(64000000/4000000.0)));
 11574   0040CE  0E0B               	movlw	11
 11575   0040D0  6E16               	movwf	??_stop^0,c
 11576   0040D2  0E62               	movlw	98
 11577   0040D4                     u5777:
 11578   0040D4  2EE8               	decfsz	wreg,f,c
 11579   0040D6  D7FE               	bra	u5777
 11580   0040D8  2E16               	decfsz	??_stop^0,f,c
 11581   0040DA  D7FC               	bra	u5777
 11582   0040DC  D000               	nop2	
 11583   0040DE                     l3930:
 11584                           
 11585                           ;dc_motor.c: 108:     while(mL->power > 0 || mR->power > 0) {
 11586   0040DE  5014               	movf	stop@mL^0,w,c
 11587   0040E0  6ED9               	movwf	fsr2l,c
 11588   0040E2  6ADA               	clrf	fsr2h,c
 11589   0040E4  50DF               	movf	indf2,w,c
 11590   0040E6  A4D8               	btfss	status,2,c
 11591   0040E8  EF78  F020         	goto	u2971
 11592   0040EC  EF7A  F020         	goto	u2970
 11593   0040F0                     u2971:
 11594   0040F0  EF41  F020         	goto	l3916
 11595   0040F4                     u2970:
 11596   0040F4  5015               	movf	stop@mR^0,w,c
 11597   0040F6  6ED9               	movwf	fsr2l,c
 11598   0040F8  6ADA               	clrf	fsr2h,c
 11599   0040FA  50DF               	movf	indf2,w,c
 11600   0040FC  A4D8               	btfss	status,2,c
 11601   0040FE  EF83  F020         	goto	u2981
 11602   004102  EF85  F020         	goto	u2980
 11603   004106                     u2981:
 11604   004106  EF41  F020         	goto	l3916
 11605   00410A                     u2980:
 11606   00410A  0012               	return		;funcret
 11607   00410C                     __end_of_stop:
 11608                           	callstack 0
 11609                           
 11610 ;; *************** function _fullSpeedAhead *****************
 11611 ;; Defined at:
 11612 ;;		line 161 in file "dc_motor.c"
 11613 ;; Parameters:    Size  Location     Type
 11614 ;;  mL              1   75[COMRAM] PTR struct DC_motor
 11615 ;;		 -> motorL(9), 
 11616 ;;  mR              1   76[COMRAM] PTR struct DC_motor
 11617 ;;		 -> motorR(9), 
 11618 ;; Auto vars:     Size  Location     Type
 11619 ;;  power           2   78[COMRAM] int 
 11620 ;; Return value:  Size  Location     Type
 11621 ;;                  1    wreg      void 
 11622 ;; Registers used:
 11623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11624 ;; Tracked objects:
 11625 ;;		On entry : 0/0
 11626 ;;		On exit  : 0/0
 11627 ;;		Unchanged: 0/0
 11628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11630 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11631 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11632 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11633 ;;Total ram usage:        5 bytes
 11634 ;; Hardware stack levels used: 1
 11635 ;; Hardware stack levels required when called: 3
 11636 ;; This function calls:
 11637 ;;		___flmul
 11638 ;;		___fltol
 11639 ;;		___xxtofl
 11640 ;;		_setMotorPWM
 11641 ;; This function is called by:
 11642 ;;		_reverseStraight
 11643 ;;		_intial_stage_movement
 11644 ;;		_bump_wall
 11645 ;; This function uses a non-reentrant model
 11646 ;;
 11647                           
 11648                           	psect	text77
 11649   003A7E                     __ptext77:
 11650                           	callstack 0
 11651   003A7E                     _fullSpeedAhead:
 11652                           	callstack 24
 11653   003A7E                     
 11654                           ;dc_motor.c: 161: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 162: {;dc_
      +                          motor.c: 164:     mL->direction = 1;
 11655   003A7E  504C               	movf	fullSpeedAhead@mL^0,w,c
 11656   003A80  6ED9               	movwf	fsr2l,c
 11657   003A82  6ADA               	clrf	fsr2h,c
 11658   003A84  0E01               	movlw	1
 11659   003A86  26D9               	addwf	fsr2l,f,c
 11660   003A88  0E01               	movlw	1
 11661   003A8A  6EDF               	movwf	indf2,c
 11662                           
 11663                           ;dc_motor.c: 165:     mR->direction = 1;
 11664   003A8C  504D               	movf	fullSpeedAhead@mR^0,w,c
 11665   003A8E  6ED9               	movwf	fsr2l,c
 11666   003A90  6ADA               	clrf	fsr2h,c
 11667   003A92  0E01               	movlw	1
 11668   003A94  26D9               	addwf	fsr2l,f,c
 11669   003A96  0E01               	movlw	1
 11670   003A98  6EDF               	movwf	indf2,c
 11671   003A9A                     
 11672                           ;dc_motor.c: 167:     for(int power = 0; power <= 40; power++) {
 11673   003A9A  0E00               	movlw	0
 11674   003A9C  6E50               	movwf	(fullSpeedAhead@power+1)^0,c
 11675   003A9E  0E00               	movlw	0
 11676   003AA0  6E4F               	movwf	fullSpeedAhead@power^0,c
 11677   003AA2                     l4322:
 11678                           
 11679                           ;dc_motor.c: 168:         mL->power = power;
 11680   003AA2  504C               	movf	fullSpeedAhead@mL^0,w,c
 11681   003AA4  6ED9               	movwf	fsr2l,c
 11682   003AA6  6ADA               	clrf	fsr2h,c
 11683   003AA8  C04F  FFDF         	movff	fullSpeedAhead@power,indf2
 11684   003AAC                     
 11685                           ;dc_motor.c: 169:         mR->power = power*1.12;
 11686   003AAC  504D               	movf	fullSpeedAhead@mR^0,w,c
 11687   003AAE  6ED9               	movwf	fsr2l,c
 11688   003AB0  6ADA               	clrf	fsr2h,c
 11689   003AB2  0E29               	movlw	41
 11690   003AB4  6E14               	movwf	___flmul@a^0,c
 11691   003AB6  0E5C               	movlw	92
 11692   003AB8  6E15               	movwf	(___flmul@a+1)^0,c
 11693   003ABA  0E8F               	movlw	143
 11694   003ABC  6E16               	movwf	(___flmul@a+2)^0,c
 11695   003ABE  0E3F               	movlw	63
 11696   003AC0  6E17               	movwf	(___flmul@a+3)^0,c
 11697   003AC2  C04F  F002         	movff	fullSpeedAhead@power,___xxtofl@val
 11698   003AC6  C050  F003         	movff	fullSpeedAhead@power+1,___xxtofl@val+1
 11699   003ACA  0E00               	movlw	0
 11700   003ACC  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
 11701   003ACE  0EFF               	movlw	-1
 11702   003AD0  6E04               	movwf	(___xxtofl@val+2)^0,c
 11703   003AD2  6E05               	movwf	(___xxtofl@val+3)^0,c
 11704   003AD4  0E01               	movlw	1
 11705   003AD6  ECB5  F014         	call	___xxtofl
 11706   003ADA  C002  F010         	movff	?___xxtofl,___flmul@b
 11707   003ADE  C003  F011         	movff	?___xxtofl+1,___flmul@b+1
 11708   003AE2  C004  F012         	movff	?___xxtofl+2,___flmul@b+2
 11709   003AE6  C005  F013         	movff	?___xxtofl+3,___flmul@b+3
 11710   003AEA  EC3B  F00D         	call	___flmul	;wreg free
 11711   003AEE  C010  F042         	movff	?___flmul,___fltol@f1
 11712   003AF2  C011  F043         	movff	?___flmul+1,___fltol@f1+1
 11713   003AF6  C012  F044         	movff	?___flmul+2,___fltol@f1+2
 11714   003AFA  C013  F045         	movff	?___flmul+3,___fltol@f1+3
 11715   003AFE  ECE8  F01A         	call	___fltol	;wreg free
 11716   003B02  5042               	movf	?___fltol^0,w,c
 11717   003B04  6EDF               	movwf	indf2,c
 11718   003B06                     
 11719                           ;dc_motor.c: 172:         setMotorPWM(mL);
 11720   003B06  C04C  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
 11721   003B0A  EC1F  F019         	call	_setMotorPWM	;wreg free
 11722   003B0E                     
 11723                           ;dc_motor.c: 173:         setMotorPWM(mR);
 11724   003B0E  C04D  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
 11725   003B12  EC1F  F019         	call	_setMotorPWM	;wreg free
 11726   003B16                     
 11727                           ;dc_motor.c: 176:         _delay((unsigned long)((500)*(64000000/4000000.0)));
 11728   003B16  0E0B               	movlw	11
 11729   003B18  6E4E               	movwf	??_fullSpeedAhead^0,c
 11730   003B1A  0E62               	movlw	98
 11731   003B1C                     u5787:
 11732   003B1C  2EE8               	decfsz	wreg,f,c
 11733   003B1E  D7FE               	bra	u5787
 11734   003B20  2E4E               	decfsz	??_fullSpeedAhead^0,f,c
 11735   003B22  D7FC               	bra	u5787
 11736   003B24  D000               	nop2	
 11737   003B26                     
 11738                           ;dc_motor.c: 177:     }
 11739   003B26  4A4F               	infsnz	fullSpeedAhead@power^0,f,c
 11740   003B28  2A50               	incf	(fullSpeedAhead@power+1)^0,f,c
 11741   003B2A  BE50               	btfsc	(fullSpeedAhead@power+1)^0,7,c
 11742   003B2C  EFA1  F01D         	goto	u3461
 11743   003B30  5050               	movf	(fullSpeedAhead@power+1)^0,w,c
 11744   003B32  E109               	bnz	u3460
 11745   003B34  0E29               	movlw	41
 11746   003B36  5C4F               	subwf	fullSpeedAhead@power^0,w,c
 11747   003B38  A0D8               	btfss	status,0,c
 11748   003B3A  EFA1  F01D         	goto	u3461
 11749   003B3E  EFA3  F01D         	goto	u3460
 11750   003B42                     u3461:
 11751   003B42  EF51  F01D         	goto	l4322
 11752   003B46                     u3460:
 11753   003B46  0012               	return		;funcret
 11754   003B48                     __end_of_fullSpeedAhead:
 11755                           	callstack 0
 11756                           
 11757 ;; *************** function _setMotorPWM *****************
 11758 ;; Defined at:
 11759 ;;		line 66 in file "dc_motor.c"
 11760 ;; Parameters:    Size  Location     Type
 11761 ;;  m               1   14[COMRAM] PTR struct DC_motor
 11762 ;;		 -> motorR(9), motorL(9), 
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;  negDuty         1   18[COMRAM] unsigned char 
 11765 ;;  posDuty         1   17[COMRAM] unsigned char 
 11766 ;; Return value:  Size  Location     Type
 11767 ;;                  1    wreg      void 
 11768 ;; Registers used:
 11769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11770 ;; Tracked objects:
 11771 ;;		On entry : 0/0
 11772 ;;		On exit  : 0/0
 11773 ;;		Unchanged: 0/0
 11774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11775 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11776 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11777 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11778 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11779 ;;Total ram usage:        5 bytes
 11780 ;; Hardware stack levels used: 1
 11781 ;; Hardware stack levels required when called: 2
 11782 ;; This function calls:
 11783 ;;		___lwdiv
 11784 ;;		___wmul
 11785 ;; This function is called by:
 11786 ;;		_stop
 11787 ;;		_turnLeft
 11788 ;;		_turnRight
 11789 ;;		_fullSpeedAhead
 11790 ;;		_fullSpeedBack
 11791 ;; This function uses a non-reentrant model
 11792 ;;
 11793                           
 11794                           	psect	text78
 11795   00323E                     __ptext78:
 11796                           	callstack 0
 11797   00323E                     _setMotorPWM:
 11798                           	callstack 26
 11799   00323E                     
 11800                           ;dc_motor.c: 66: void setMotorPWM(DC_motor *m);dc_motor.c: 67: {;dc_motor.c: 68:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 70:     if(m->brakemode) {
 11801   00323E  500F               	movf	setMotorPWM@m^0,w,c
 11802   003240  6ED9               	movwf	fsr2l,c
 11803   003242  6ADA               	clrf	fsr2h,c
 11804   003244  0E02               	movlw	2
 11805   003246  26D9               	addwf	fsr2l,f,c
 11806   003248  50DF               	movf	indf2,w,c
 11807   00324A  B4D8               	btfsc	status,2,c
 11808   00324C  EF2A  F019         	goto	u2791
 11809   003250  EF2C  F019         	goto	u2790
 11810   003254                     u2791:
 11811   003254  EF5C  F019         	goto	l3836
 11812   003258                     u2790:
 11813   003258                     
 11814                           ;dc_motor.c: 71:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
 11815   003258  500F               	movf	setMotorPWM@m^0,w,c
 11816   00325A  6ED9               	movwf	fsr2l,c
 11817   00325C  6ADA               	clrf	fsr2h,c
 11818   00325E  50DF               	movf	indf2,w,c
 11819   003260  6E10               	movwf	??_setMotorPWM^0,c
 11820   003262  5010               	movf	??_setMotorPWM^0,w,c
 11821   003264  6E02               	movwf	___wmul@multiplier^0,c
 11822   003266  6A03               	clrf	(___wmul@multiplier+1)^0,c
 11823   003268  500F               	movf	setMotorPWM@m^0,w,c
 11824   00326A  6ED9               	movwf	fsr2l,c
 11825   00326C  6ADA               	clrf	fsr2h,c
 11826   00326E  0E03               	movlw	3
 11827   003270  26D9               	addwf	fsr2l,f,c
 11828   003272  CFDE F004          	movff	postinc2,___wmul@multiplicand
 11829   003276  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
 11830   00327A  EC00  F026         	call	___wmul	;wreg free
 11831   00327E  C002  F008         	movff	?___wmul,___lwdiv@dividend
 11832   003282  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
 11833   003286  0E00               	movlw	0
 11834   003288  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
 11835   00328A  0E64               	movlw	100
 11836   00328C  6E0A               	movwf	___lwdiv@divisor^0,c
 11837   00328E  EC3F  F021         	call	___lwdiv	;wreg free
 11838   003292  500F               	movf	setMotorPWM@m^0,w,c
 11839   003294  6ED9               	movwf	fsr2l,c
 11840   003296  6ADA               	clrf	fsr2h,c
 11841   003298  0E03               	movlw	3
 11842   00329A  26D9               	addwf	fsr2l,f,c
 11843   00329C  50DF               	movf	indf2,w,c
 11844   00329E  6E11               	movwf	(??_setMotorPWM+1)^0,c
 11845   0032A0  5008               	movf	?___lwdiv^0,w,c
 11846   0032A2  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
 11847   0032A4  6E12               	movwf	setMotorPWM@posDuty^0,c
 11848   0032A6                     
 11849                           ;dc_motor.c: 72:         negDuty=m->PWMperiod;
 11850   0032A6  500F               	movf	setMotorPWM@m^0,w,c
 11851   0032A8  6ED9               	movwf	fsr2l,c
 11852   0032AA  6ADA               	clrf	fsr2h,c
 11853   0032AC  0E03               	movlw	3
 11854   0032AE  26D9               	addwf	fsr2l,f,c
 11855   0032B0  50DF               	movf	indf2,w,c
 11856   0032B2  6E13               	movwf	setMotorPWM@negDuty^0,c
 11857                           
 11858                           ;dc_motor.c: 73:     }
 11859   0032B4  EF7D  F019         	goto	l3840
 11860   0032B8                     l3836:
 11861                           
 11862                           ;dc_motor.c: 75:         posDuty=0;
 11863   0032B8  0E00               	movlw	0
 11864   0032BA  6E12               	movwf	setMotorPWM@posDuty^0,c
 11865   0032BC                     
 11866                           ;dc_motor.c: 76:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
 11867   0032BC  500F               	movf	setMotorPWM@m^0,w,c
 11868   0032BE  6ED9               	movwf	fsr2l,c
 11869   0032C0  6ADA               	clrf	fsr2h,c
 11870   0032C2  50DF               	movf	indf2,w,c
 11871   0032C4  6E10               	movwf	??_setMotorPWM^0,c
 11872   0032C6  5010               	movf	??_setMotorPWM^0,w,c
 11873   0032C8  6E02               	movwf	___wmul@multiplier^0,c
 11874   0032CA  6A03               	clrf	(___wmul@multiplier+1)^0,c
 11875   0032CC  500F               	movf	setMotorPWM@m^0,w,c
 11876   0032CE  6ED9               	movwf	fsr2l,c
 11877   0032D0  6ADA               	clrf	fsr2h,c
 11878   0032D2  0E03               	movlw	3
 11879   0032D4  26D9               	addwf	fsr2l,f,c
 11880   0032D6  CFDE F004          	movff	postinc2,___wmul@multiplicand
 11881   0032DA  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
 11882   0032DE  EC00  F026         	call	___wmul	;wreg free
 11883   0032E2  C002  F008         	movff	?___wmul,___lwdiv@dividend
 11884   0032E6  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
 11885   0032EA  0E00               	movlw	0
 11886   0032EC  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
 11887   0032EE  0E64               	movlw	100
 11888   0032F0  6E0A               	movwf	___lwdiv@divisor^0,c
 11889   0032F2  EC3F  F021         	call	___lwdiv	;wreg free
 11890   0032F6  5008               	movf	?___lwdiv^0,w,c
 11891   0032F8  6E13               	movwf	setMotorPWM@negDuty^0,c
 11892   0032FA                     l3840:
 11893                           
 11894                           ;dc_motor.c: 79:     if (m->direction) {
 11895   0032FA  500F               	movf	setMotorPWM@m^0,w,c
 11896   0032FC  6ED9               	movwf	fsr2l,c
 11897   0032FE  6ADA               	clrf	fsr2h,c
 11898   003300  0E01               	movlw	1
 11899   003302  26D9               	addwf	fsr2l,f,c
 11900   003304  50DF               	movf	indf2,w,c
 11901   003306  B4D8               	btfsc	status,2,c
 11902   003308  EF88  F019         	goto	u2801
 11903   00330C  EF8A  F019         	goto	u2800
 11904   003310                     u2801:
 11905   003310  EFAA  F019         	goto	l3844
 11906   003314                     u2800:
 11907   003314                     
 11908                           ;dc_motor.c: 80:         *(m->posDutyHighByte)=posDuty;
 11909   003314  500F               	movf	setMotorPWM@m^0,w,c
 11910   003316  6ED9               	movwf	fsr2l,c
 11911   003318  6ADA               	clrf	fsr2h,c
 11912   00331A  0E05               	movlw	5
 11913   00331C  26D9               	addwf	fsr2l,f,c
 11914   00331E  CFDE F010          	movff	postinc2,??_setMotorPWM
 11915   003322  CFDD F011          	movff	postdec2,??_setMotorPWM+1
 11916   003326  C010  FFD9         	movff	??_setMotorPWM,fsr2l
 11917   00332A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11918   00332E  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
 11919                           
 11920                           ;dc_motor.c: 81:         *(m->negDutyHighByte)=negDuty;
 11921   003332  500F               	movf	setMotorPWM@m^0,w,c
 11922   003334  6ED9               	movwf	fsr2l,c
 11923   003336  6ADA               	clrf	fsr2h,c
 11924   003338  0E07               	movlw	7
 11925   00333A  26D9               	addwf	fsr2l,f,c
 11926   00333C  CFDE F010          	movff	postinc2,??_setMotorPWM
 11927   003340  CFDD F011          	movff	postdec2,??_setMotorPWM+1
 11928   003344  C010  FFD9         	movff	??_setMotorPWM,fsr2l
 11929   003348  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11930   00334C  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
 11931                           
 11932                           ;dc_motor.c: 82:     } else {
 11933   003350  EFC8  F019         	goto	l392
 11934   003354                     l3844:
 11935                           
 11936                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=negDuty;
 11937   003354  500F               	movf	setMotorPWM@m^0,w,c
 11938   003356  6ED9               	movwf	fsr2l,c
 11939   003358  6ADA               	clrf	fsr2h,c
 11940   00335A  0E05               	movlw	5
 11941   00335C  26D9               	addwf	fsr2l,f,c
 11942   00335E  CFDE F010          	movff	postinc2,??_setMotorPWM
 11943   003362  CFDD F011          	movff	postdec2,??_setMotorPWM+1
 11944   003366  C010  FFD9         	movff	??_setMotorPWM,fsr2l
 11945   00336A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11946   00336E  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
 11947                           
 11948                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=posDuty;
 11949   003372  500F               	movf	setMotorPWM@m^0,w,c
 11950   003374  6ED9               	movwf	fsr2l,c
 11951   003376  6ADA               	clrf	fsr2h,c
 11952   003378  0E07               	movlw	7
 11953   00337A  26D9               	addwf	fsr2l,f,c
 11954   00337C  CFDE F010          	movff	postinc2,??_setMotorPWM
 11955   003380  CFDD F011          	movff	postdec2,??_setMotorPWM+1
 11956   003384  C010  FFD9         	movff	??_setMotorPWM,fsr2l
 11957   003388  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11958   00338C  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
 11959   003390                     l392:
 11960   003390  0012               	return		;funcret
 11961   003392                     __end_of_setMotorPWM:
 11962                           	callstack 0
 11963                           
 11964 ;; *************** function ___wmul *****************
 11965 ;; Defined at:
 11966 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 11967 ;; Parameters:    Size  Location     Type
 11968 ;;  multiplier      2    1[COMRAM] unsigned int 
 11969 ;;  multiplicand    2    3[COMRAM] unsigned int 
 11970 ;; Auto vars:     Size  Location     Type
 11971 ;;  product         2    5[COMRAM] unsigned int 
 11972 ;; Return value:  Size  Location     Type
 11973 ;;                  2    1[COMRAM] unsigned int 
 11974 ;; Registers used:
 11975 ;;		wreg, status,2, status,0, prodl, prodh
 11976 ;; Tracked objects:
 11977 ;;		On entry : 0/0
 11978 ;;		On exit  : 0/0
 11979 ;;		Unchanged: 0/0
 11980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11981 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11982 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11984 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11985 ;;Total ram usage:        6 bytes
 11986 ;; Hardware stack levels used: 1
 11987 ;; Hardware stack levels required when called: 1
 11988 ;; This function calls:
 11989 ;;		Nothing
 11990 ;; This function is called by:
 11991 ;;		_setMotorPWM
 11992 ;;		_read_prec_or_width
 11993 ;;		_ADC2String
 11994 ;; This function uses a non-reentrant model
 11995 ;;
 11996                           
 11997                           	psect	text79
 11998   004C00                     __ptext79:
 11999                           	callstack 0
 12000   004C00                     ___wmul:
 12001                           	callstack 24
 12002   004C00  5002               	movf	___wmul@multiplier^0,w,c
 12003   004C02  0204               	mulwf	___wmul@multiplicand^0,c
 12004   004C04  CFF3 F006          	movff	prodl,___wmul@product
 12005   004C08  CFF4 F007          	movff	prodh,___wmul@product+1
 12006   004C0C  5002               	movf	___wmul@multiplier^0,w,c
 12007   004C0E  0205               	mulwf	(___wmul@multiplicand+1)^0,c
 12008   004C10  50F3               	movf	243,w,c
 12009   004C12  2607               	addwf	(___wmul@product+1)^0,f,c
 12010   004C14  5003               	movf	(___wmul@multiplier+1)^0,w,c
 12011   004C16  0204               	mulwf	___wmul@multiplicand^0,c
 12012   004C18  50F3               	movf	243,w,c
 12013   004C1A  2607               	addwf	(___wmul@product+1)^0,f,c
 12014   004C1C  C006  F002         	movff	___wmul@product,?___wmul
 12015   004C20  C007  F003         	movff	___wmul@product+1,?___wmul+1
 12016   004C24  0012               	return		;funcret
 12017   004C26                     __end_of___wmul:
 12018                           	callstack 0
 12019                           
 12020 ;; *************** function ___lwdiv *****************
 12021 ;; Defined at:
 12022 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
 12023 ;; Parameters:    Size  Location     Type
 12024 ;;  dividend        2    7[COMRAM] unsigned int 
 12025 ;;  divisor         2    9[COMRAM] unsigned int 
 12026 ;; Auto vars:     Size  Location     Type
 12027 ;;  quotient        2   11[COMRAM] unsigned int 
 12028 ;;  counter         1   13[COMRAM] unsigned char 
 12029 ;; Return value:  Size  Location     Type
 12030 ;;                  2    7[COMRAM] unsigned int 
 12031 ;; Registers used:
 12032 ;;		wreg, status,2, status,0
 12033 ;; Tracked objects:
 12034 ;;		On entry : 0/0
 12035 ;;		On exit  : 0/0
 12036 ;;		Unchanged: 0/0
 12037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12038 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12039 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12041 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12042 ;;Total ram usage:        7 bytes
 12043 ;; Hardware stack levels used: 1
 12044 ;; Hardware stack levels required when called: 1
 12045 ;; This function calls:
 12046 ;;		Nothing
 12047 ;; This function is called by:
 12048 ;;		_setMotorPWM
 12049 ;;		_ADC2String
 12050 ;; This function uses a non-reentrant model
 12051 ;;
 12052                           
 12053                           	psect	text80
 12054   00427E                     __ptext80:
 12055                           	callstack 0
 12056   00427E                     ___lwdiv:
 12057                           	callstack 26
 12058   00427E  0E00               	movlw	0
 12059   004280  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
 12060   004282  0E00               	movlw	0
 12061   004284  6E0C               	movwf	___lwdiv@quotient^0,c
 12062   004286  500A               	movf	___lwdiv@divisor^0,w,c
 12063   004288  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
 12064   00428A  B4D8               	btfsc	status,2,c
 12065   00428C  EF4A  F021         	goto	u2711
 12066   004290  EF4C  F021         	goto	u2710
 12067   004294                     u2711:
 12068   004294  EF74  F021         	goto	l1383
 12069   004298                     u2710:
 12070   004298  0E01               	movlw	1
 12071   00429A  6E0E               	movwf	___lwdiv@counter^0,c
 12072   00429C  EF54  F021         	goto	l3796
 12073   0042A0                     l3794:
 12074   0042A0  90D8               	bcf	status,0,c
 12075   0042A2  360A               	rlcf	___lwdiv@divisor^0,f,c
 12076   0042A4  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
 12077   0042A6  2A0E               	incf	___lwdiv@counter^0,f,c
 12078   0042A8                     l3796:
 12079   0042A8  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
 12080   0042AA  EF59  F021         	goto	u2721
 12081   0042AE  EF5B  F021         	goto	u2720
 12082   0042B2                     u2721:
 12083   0042B2  EF50  F021         	goto	l3794
 12084   0042B6                     u2720:
 12085   0042B6                     l3798:
 12086   0042B6  90D8               	bcf	status,0,c
 12087   0042B8  360C               	rlcf	___lwdiv@quotient^0,f,c
 12088   0042BA  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
 12089   0042BC  500A               	movf	___lwdiv@divisor^0,w,c
 12090   0042BE  5C08               	subwf	___lwdiv@dividend^0,w,c
 12091   0042C0  500B               	movf	(___lwdiv@divisor+1)^0,w,c
 12092   0042C2  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
 12093   0042C4  A0D8               	btfss	status,0,c
 12094   0042C6  EF67  F021         	goto	u2731
 12095   0042CA  EF69  F021         	goto	u2730
 12096   0042CE                     u2731:
 12097   0042CE  EF6E  F021         	goto	l3806
 12098   0042D2                     u2730:
 12099   0042D2  500A               	movf	___lwdiv@divisor^0,w,c
 12100   0042D4  5E08               	subwf	___lwdiv@dividend^0,f,c
 12101   0042D6  500B               	movf	(___lwdiv@divisor+1)^0,w,c
 12102   0042D8  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
 12103   0042DA  800C               	bsf	___lwdiv@quotient^0,0,c
 12104   0042DC                     l3806:
 12105   0042DC  90D8               	bcf	status,0,c
 12106   0042DE  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
 12107   0042E0  320A               	rrcf	___lwdiv@divisor^0,f,c
 12108   0042E2  2E0E               	decfsz	___lwdiv@counter^0,f,c
 12109   0042E4  EF5B  F021         	goto	l3798
 12110   0042E8                     l1383:
 12111   0042E8  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
 12112   0042EC  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12113   0042F0  0012               	return		;funcret
 12114   0042F2                     __end_of___lwdiv:
 12115                           	callstack 0
 12116                           
 12117 ;; *************** function ___xxtofl *****************
 12118 ;; Defined at:
 12119 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
 12120 ;; Parameters:    Size  Location     Type
 12121 ;;  sign            1    wreg     unsigned char 
 12122 ;;  val             4    1[COMRAM] long 
 12123 ;; Auto vars:     Size  Location     Type
 12124 ;;  sign            1    9[COMRAM] unsigned char 
 12125 ;;  arg             4   11[COMRAM] unsigned long 
 12126 ;;  exp             1   10[COMRAM] unsigned char 
 12127 ;; Return value:  Size  Location     Type
 12128 ;;                  4    1[COMRAM] unsigned char 
 12129 ;; Registers used:
 12130 ;;		wreg, status,2, status,0
 12131 ;; Tracked objects:
 12132 ;;		On entry : 0/0
 12133 ;;		On exit  : 0/0
 12134 ;;		Unchanged: 0/0
 12135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12137 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12138 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12139 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12140 ;;Total ram usage:       14 bytes
 12141 ;; Hardware stack levels used: 1
 12142 ;; Hardware stack levels required when called: 1
 12143 ;; This function calls:
 12144 ;;		Nothing
 12145 ;; This function is called by:
 12146 ;;		_convert_rgb2hue
 12147 ;;		_calc_clear_norm
 12148 ;;		_fullSpeedAhead
 12149 ;;		_calibration_turningR
 12150 ;;		_calibration_turningL
 12151 ;; This function uses a non-reentrant model
 12152 ;;
 12153                           
 12154                           	psect	text81
 12155   00296A                     __ptext81:
 12156                           	callstack 0
 12157   00296A                     ___xxtofl:
 12158                           	callstack 27
 12159                           
 12160                           ;incstack = 0
 12161                           ;___xxtofl@sign stored from wreg
 12162   00296A  6E0A               	movwf	___xxtofl@sign^0,c
 12163   00296C  500A               	movf	___xxtofl@sign^0,w,c
 12164   00296E  B4D8               	btfsc	status,2,c
 12165   002970  EFBC  F014         	goto	u3291
 12166   002974  EFBE  F014         	goto	u3290
 12167   002978                     u3291:
 12168   002978  EFE0  F014         	goto	l1547
 12169   00297C                     u3290:
 12170   00297C  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
 12171   00297E  EFC5  F014         	goto	u3300
 12172   002982  EFC3  F014         	goto	u3301
 12173   002986                     u3301:
 12174   002986  EFE0  F014         	goto	l1547
 12175   00298A                     u3300:
 12176   00298A  C002  F006         	movff	___xxtofl@val,??___xxtofl
 12177   00298E  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
 12178   002992  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
 12179   002996  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
 12180   00299A  1E06               	comf	??___xxtofl^0,f,c
 12181   00299C  1E07               	comf	(??___xxtofl+1)^0,f,c
 12182   00299E  1E08               	comf	(??___xxtofl+2)^0,f,c
 12183   0029A0  1E09               	comf	(??___xxtofl+3)^0,f,c
 12184   0029A2  2A06               	incf	??___xxtofl^0,f,c
 12185   0029A4  0E00               	movlw	0
 12186   0029A6  2207               	addwfc	(??___xxtofl+1)^0,f,c
 12187   0029A8  2208               	addwfc	(??___xxtofl+2)^0,f,c
 12188   0029AA  2209               	addwfc	(??___xxtofl+3)^0,f,c
 12189   0029AC  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
 12190   0029B0  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
 12191   0029B4  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
 12192   0029B8  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
 12193   0029BC  EFE8  F014         	goto	l4188
 12194   0029C0                     l1547:
 12195   0029C0  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
 12196   0029C4  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
 12197   0029C8  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
 12198   0029CC  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
 12199   0029D0                     l4188:
 12200   0029D0  5002               	movf	___xxtofl@val^0,w,c
 12201   0029D2  1003               	iorwf	(___xxtofl@val+1)^0,w,c
 12202   0029D4  1004               	iorwf	(___xxtofl@val+2)^0,w,c
 12203   0029D6  1005               	iorwf	(___xxtofl@val+3)^0,w,c
 12204   0029D8  A4D8               	btfss	status,2,c
 12205   0029DA  EFF1  F014         	goto	u3311
 12206   0029DE  EFF3  F014         	goto	u3310
 12207   0029E2                     u3311:
 12208   0029E2  EFFD  F014         	goto	l4194
 12209   0029E6                     u3310:
 12210   0029E6  0E00               	movlw	0
 12211   0029E8  6E02               	movwf	?___xxtofl^0,c
 12212   0029EA  0E00               	movlw	0
 12213   0029EC  6E03               	movwf	(?___xxtofl+1)^0,c
 12214   0029EE  0E00               	movlw	0
 12215   0029F0  6E04               	movwf	(?___xxtofl+2)^0,c
 12216   0029F2  0E00               	movlw	0
 12217   0029F4  6E05               	movwf	(?___xxtofl+3)^0,c
 12218   0029F6  EF8E  F015         	goto	l1550
 12219   0029FA                     l4194:
 12220   0029FA  0E96               	movlw	150
 12221   0029FC  6E0B               	movwf	___xxtofl@exp^0,c
 12222   0029FE  EF07  F015         	goto	l4198
 12223   002A02                     l4196:
 12224   002A02  2A0B               	incf	___xxtofl@exp^0,f,c
 12225   002A04  90D8               	bcf	status,0,c
 12226   002A06  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
 12227   002A08  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
 12228   002A0A  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
 12229   002A0C  320C               	rrcf	___xxtofl@arg^0,f,c
 12230   002A0E                     l4198:
 12231   002A0E  0E00               	movlw	0
 12232   002A10  140C               	andwf	___xxtofl@arg^0,w,c
 12233   002A12  6E06               	movwf	??___xxtofl^0,c
 12234   002A14  0E00               	movlw	0
 12235   002A16  140D               	andwf	(___xxtofl@arg+1)^0,w,c
 12236   002A18  6E07               	movwf	(??___xxtofl+1)^0,c
 12237   002A1A  0E00               	movlw	0
 12238   002A1C  140E               	andwf	(___xxtofl@arg+2)^0,w,c
 12239   002A1E  6E08               	movwf	(??___xxtofl+2)^0,c
 12240   002A20  0EFE               	movlw	254
 12241   002A22  140F               	andwf	(___xxtofl@arg+3)^0,w,c
 12242   002A24  6E09               	movwf	(??___xxtofl+3)^0,c
 12243   002A26  5006               	movf	??___xxtofl^0,w,c
 12244   002A28  1007               	iorwf	(??___xxtofl+1)^0,w,c
 12245   002A2A  1008               	iorwf	(??___xxtofl+2)^0,w,c
 12246   002A2C  1009               	iorwf	(??___xxtofl+3)^0,w,c
 12247   002A2E  A4D8               	btfss	status,2,c
 12248   002A30  EF1C  F015         	goto	u3321
 12249   002A34  EF1E  F015         	goto	u3320
 12250   002A38                     u3321:
 12251   002A38  EF01  F015         	goto	l4196
 12252   002A3C                     u3320:
 12253   002A3C  EF2C  F015         	goto	l1554
 12254   002A40                     l4200:
 12255   002A40  2A0B               	incf	___xxtofl@exp^0,f,c
 12256   002A42  0E01               	movlw	1
 12257   002A44  260C               	addwf	___xxtofl@arg^0,f,c
 12258   002A46  0E00               	movlw	0
 12259   002A48  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
 12260   002A4A  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
 12261   002A4C  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
 12262   002A4E  90D8               	bcf	status,0,c
 12263   002A50  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
 12264   002A52  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
 12265   002A54  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
 12266   002A56  320C               	rrcf	___xxtofl@arg^0,f,c
 12267   002A58                     l1554:
 12268   002A58  0E00               	movlw	0
 12269   002A5A  140C               	andwf	___xxtofl@arg^0,w,c
 12270   002A5C  6E06               	movwf	??___xxtofl^0,c
 12271   002A5E  0E00               	movlw	0
 12272   002A60  140D               	andwf	(___xxtofl@arg+1)^0,w,c
 12273   002A62  6E07               	movwf	(??___xxtofl+1)^0,c
 12274   002A64  0E00               	movlw	0
 12275   002A66  140E               	andwf	(___xxtofl@arg+2)^0,w,c
 12276   002A68  6E08               	movwf	(??___xxtofl+2)^0,c
 12277   002A6A  0EFF               	movlw	255
 12278   002A6C  140F               	andwf	(___xxtofl@arg+3)^0,w,c
 12279   002A6E  6E09               	movwf	(??___xxtofl+3)^0,c
 12280   002A70  5006               	movf	??___xxtofl^0,w,c
 12281   002A72  1007               	iorwf	(??___xxtofl+1)^0,w,c
 12282   002A74  1008               	iorwf	(??___xxtofl+2)^0,w,c
 12283   002A76  1009               	iorwf	(??___xxtofl+3)^0,w,c
 12284   002A78  A4D8               	btfss	status,2,c
 12285   002A7A  EF41  F015         	goto	u3331
 12286   002A7E  EF43  F015         	goto	u3330
 12287   002A82                     u3331:
 12288   002A82  EF20  F015         	goto	l4200
 12289   002A86                     u3330:
 12290   002A86  EF4B  F015         	goto	l4208
 12291   002A8A                     l4206:
 12292   002A8A  060B               	decf	___xxtofl@exp^0,f,c
 12293   002A8C  90D8               	bcf	status,0,c
 12294   002A8E  360C               	rlcf	___xxtofl@arg^0,f,c
 12295   002A90  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
 12296   002A92  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
 12297   002A94  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
 12298   002A96                     l4208:
 12299   002A96  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
 12300   002A98  EF50  F015         	goto	u3341
 12301   002A9C  EF52  F015         	goto	u3340
 12302   002AA0                     u3341:
 12303   002AA0  EF5A  F015         	goto	l1561
 12304   002AA4                     u3340:
 12305   002AA4  0E02               	movlw	2
 12306   002AA6  600B               	cpfslt	___xxtofl@exp^0,c
 12307   002AA8  EF58  F015         	goto	u3351
 12308   002AAC  EF5A  F015         	goto	u3350
 12309   002AB0                     u3351:
 12310   002AB0  EF45  F015         	goto	l4206
 12311   002AB4                     u3350:
 12312   002AB4                     l1561:
 12313   002AB4  B00B               	btfsc	___xxtofl@exp^0,0,c
 12314   002AB6  EF5F  F015         	goto	u3361
 12315   002ABA  EF61  F015         	goto	u3360
 12316   002ABE                     u3361:
 12317   002ABE  EF62  F015         	goto	l4214
 12318   002AC2                     u3360:
 12319   002AC2  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
 12320   002AC4                     l4214:
 12321   002AC4  90D8               	bcf	status,0,c
 12322   002AC6  320B               	rrcf	___xxtofl@exp^0,f,c
 12323   002AC8  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
 12324   002ACC  6A07               	clrf	(??___xxtofl+1)^0,c
 12325   002ACE  6A08               	clrf	(??___xxtofl+2)^0,c
 12326   002AD0  6A09               	clrf	(??___xxtofl+3)^0,c
 12327   002AD2  C006  F009         	movff	??___xxtofl,??___xxtofl+3
 12328   002AD6  6A08               	clrf	(??___xxtofl+2)^0,c
 12329   002AD8  6A07               	clrf	(??___xxtofl+1)^0,c
 12330   002ADA  6A06               	clrf	??___xxtofl^0,c
 12331   002ADC  5006               	movf	??___xxtofl^0,w,c
 12332   002ADE  120C               	iorwf	___xxtofl@arg^0,f,c
 12333   002AE0  5007               	movf	(??___xxtofl+1)^0,w,c
 12334   002AE2  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
 12335   002AE4  5008               	movf	(??___xxtofl+2)^0,w,c
 12336   002AE6  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
 12337   002AE8  5009               	movf	(??___xxtofl+3)^0,w,c
 12338   002AEA  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
 12339   002AEC  500A               	movf	___xxtofl@sign^0,w,c
 12340   002AEE  B4D8               	btfsc	status,2,c
 12341   002AF0  EF7C  F015         	goto	u3371
 12342   002AF4  EF7E  F015         	goto	u3370
 12343   002AF8                     u3371:
 12344   002AF8  EF86  F015         	goto	l4224
 12345   002AFC                     u3370:
 12346   002AFC  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
 12347   002AFE  EF85  F015         	goto	u3380
 12348   002B02  EF83  F015         	goto	u3381
 12349   002B06                     u3381:
 12350   002B06  EF86  F015         	goto	l4224
 12351   002B0A                     u3380:
 12352   002B0A  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
 12353   002B0C                     l4224:
 12354   002B0C  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
 12355   002B10  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
 12356   002B14  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
 12357   002B18  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
 12358   002B1C                     l1550:
 12359   002B1C  0012               	return		;funcret
 12360   002B1E                     __end_of___xxtofl:
 12361                           	callstack 0
 12362                           
 12363 ;; *************** function ___fltol *****************
 12364 ;; Defined at:
 12365 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
 12366 ;; Parameters:    Size  Location     Type
 12367 ;;  f1              4   65[COMRAM] unsigned char 
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;  exp1            1   74[COMRAM] unsigned char 
 12370 ;;  sign1           1   73[COMRAM] unsigned char 
 12371 ;; Return value:  Size  Location     Type
 12372 ;;                  4   65[COMRAM] long 
 12373 ;; Registers used:
 12374 ;;		wreg, status,2, status,0
 12375 ;; Tracked objects:
 12376 ;;		On entry : 0/0
 12377 ;;		On exit  : 0/0
 12378 ;;		Unchanged: 0/0
 12379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12380 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12381 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12382 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12383 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12384 ;;Total ram usage:       10 bytes
 12385 ;; Hardware stack levels used: 1
 12386 ;; Hardware stack levels required when called: 1
 12387 ;; This function calls:
 12388 ;;		Nothing
 12389 ;; This function is called by:
 12390 ;;		_convert_rgb2hue
 12391 ;;		_calc_clear_norm
 12392 ;;		_fullSpeedAhead
 12393 ;;		_calibration_turningR
 12394 ;;		_calibration_turningL
 12395 ;; This function uses a non-reentrant model
 12396 ;;
 12397                           
 12398                           	psect	text82
 12399   0035D0                     __ptext82:
 12400                           	callstack 0
 12401   0035D0                     ___fltol:
 12402                           	callstack 27
 12403   0035D0  3444               	rlcf	(___fltol@f1+2)^0,w,c
 12404   0035D2  3445               	rlcf	(___fltol@f1+3)^0,w,c
 12405   0035D4  6E4B               	movwf	___fltol@exp1^0,c
 12406   0035D6  504B               	movf	___fltol@exp1^0,w,c
 12407   0035D8  A4D8               	btfss	status,2,c
 12408   0035DA  EFF1  F01A         	goto	u3221
 12409   0035DE  EFF3  F01A         	goto	u3220
 12410   0035E2                     u3221:
 12411   0035E2  EFFD  F01A         	goto	l4144
 12412   0035E6                     u3220:
 12413   0035E6                     l4140:
 12414   0035E6  0E00               	movlw	0
 12415   0035E8  6E42               	movwf	?___fltol^0,c
 12416   0035EA  0E00               	movlw	0
 12417   0035EC  6E43               	movwf	(?___fltol+1)^0,c
 12418   0035EE  0E00               	movlw	0
 12419   0035F0  6E44               	movwf	(?___fltol+2)^0,c
 12420   0035F2  0E00               	movlw	0
 12421   0035F4  6E45               	movwf	(?___fltol+3)^0,c
 12422   0035F6  EF6A  F01B         	goto	l1189
 12423   0035FA                     l4144:
 12424   0035FA  C042  F046         	movff	___fltol@f1,??___fltol
 12425   0035FE  C043  F047         	movff	___fltol@f1+1,??___fltol+1
 12426   003602  C044  F048         	movff	___fltol@f1+2,??___fltol+2
 12427   003606  C045  F049         	movff	___fltol@f1+3,??___fltol+3
 12428   00360A  0E20               	movlw	32
 12429   00360C  EF0D  F01B         	goto	u3230
 12430   003610                     u3235:
 12431   003610  90D8               	bcf	status,0,c
 12432   003612  3249               	rrcf	(??___fltol+3)^0,f,c
 12433   003614  3248               	rrcf	(??___fltol+2)^0,f,c
 12434   003616  3247               	rrcf	(??___fltol+1)^0,f,c
 12435   003618  3246               	rrcf	??___fltol^0,f,c
 12436   00361A                     u3230:
 12437   00361A  2EE8               	decfsz	wreg,f,c
 12438   00361C  EF08  F01B         	goto	u3235
 12439   003620  5046               	movf	??___fltol^0,w,c
 12440   003622  6E4A               	movwf	___fltol@sign1^0,c
 12441   003624  8E44               	bsf	(___fltol@f1+2)^0,7,c
 12442   003626  0EFF               	movlw	255
 12443   003628  1642               	andwf	___fltol@f1^0,f,c
 12444   00362A  0EFF               	movlw	255
 12445   00362C  1643               	andwf	(___fltol@f1+1)^0,f,c
 12446   00362E  0EFF               	movlw	255
 12447   003630  1644               	andwf	(___fltol@f1+2)^0,f,c
 12448   003632  0E00               	movlw	0
 12449   003634  1645               	andwf	(___fltol@f1+3)^0,f,c
 12450   003636  0E96               	movlw	150
 12451   003638  5E4B               	subwf	___fltol@exp1^0,f,c
 12452   00363A  BE4B               	btfsc	___fltol@exp1^0,7,c
 12453   00363C  EF24  F01B         	goto	u3240
 12454   003640  EF22  F01B         	goto	u3241
 12455   003644                     u3241:
 12456   003644  EF3A  F01B         	goto	l4164
 12457   003648                     u3240:
 12458   003648  504B               	movf	___fltol@exp1^0,w,c
 12459   00364A  0A80               	xorlw	128
 12460   00364C  0F97               	addlw	151
 12461   00364E  B0D8               	btfsc	status,0,c
 12462   003650  EF2C  F01B         	goto	u3251
 12463   003654  EF2E  F01B         	goto	u3250
 12464   003658                     u3251:
 12465   003658  EF30  F01B         	goto	l4160
 12466   00365C                     u3250:
 12467   00365C  EFF3  F01A         	goto	l4140
 12468   003660                     l4160:
 12469   003660  90D8               	bcf	status,0,c
 12470   003662  3245               	rrcf	(___fltol@f1+3)^0,f,c
 12471   003664  3244               	rrcf	(___fltol@f1+2)^0,f,c
 12472   003666  3243               	rrcf	(___fltol@f1+1)^0,f,c
 12473   003668  3242               	rrcf	___fltol@f1^0,f,c
 12474   00366A  3E4B               	incfsz	___fltol@exp1^0,f,c
 12475   00366C  EF30  F01B         	goto	l4160
 12476   003670  EF52  F01B         	goto	l4174
 12477   003674                     l4164:
 12478   003674  0E1F               	movlw	31
 12479   003676  644B               	cpfsgt	___fltol@exp1^0,c
 12480   003678  EF40  F01B         	goto	u3261
 12481   00367C  EF42  F01B         	goto	u3260
 12482   003680                     u3261:
 12483   003680  EF4A  F01B         	goto	l4172
 12484   003684                     u3260:
 12485   003684  EFF3  F01A         	goto	l4140
 12486   003688                     l4170:
 12487   003688  90D8               	bcf	status,0,c
 12488   00368A  3642               	rlcf	___fltol@f1^0,f,c
 12489   00368C  3643               	rlcf	(___fltol@f1+1)^0,f,c
 12490   00368E  3644               	rlcf	(___fltol@f1+2)^0,f,c
 12491   003690  3645               	rlcf	(___fltol@f1+3)^0,f,c
 12492   003692  064B               	decf	___fltol@exp1^0,f,c
 12493   003694                     l4172:
 12494   003694  504B               	movf	___fltol@exp1^0,w,c
 12495   003696  A4D8               	btfss	status,2,c
 12496   003698  EF50  F01B         	goto	u3271
 12497   00369C  EF52  F01B         	goto	u3270
 12498   0036A0                     u3271:
 12499   0036A0  EF44  F01B         	goto	l4170
 12500   0036A4                     u3270:
 12501   0036A4                     l4174:
 12502   0036A4  504A               	movf	___fltol@sign1^0,w,c
 12503   0036A6  B4D8               	btfsc	status,2,c
 12504   0036A8  EF58  F01B         	goto	u3281
 12505   0036AC  EF5A  F01B         	goto	u3280
 12506   0036B0                     u3281:
 12507   0036B0  EF62  F01B         	goto	l4178
 12508   0036B4                     u3280:
 12509   0036B4  1E45               	comf	(___fltol@f1+3)^0,f,c
 12510   0036B6  1E44               	comf	(___fltol@f1+2)^0,f,c
 12511   0036B8  1E43               	comf	(___fltol@f1+1)^0,f,c
 12512   0036BA  6C42               	negf	___fltol@f1^0,c
 12513   0036BC  0E00               	movlw	0
 12514   0036BE  2243               	addwfc	(___fltol@f1+1)^0,f,c
 12515   0036C0  2244               	addwfc	(___fltol@f1+2)^0,f,c
 12516   0036C2  2245               	addwfc	(___fltol@f1+3)^0,f,c
 12517   0036C4                     l4178:
 12518   0036C4  C042  F042         	movff	___fltol@f1,?___fltol
 12519   0036C8  C043  F043         	movff	___fltol@f1+1,?___fltol+1
 12520   0036CC  C044  F044         	movff	___fltol@f1+2,?___fltol+2
 12521   0036D0  C045  F045         	movff	___fltol@f1+3,?___fltol+3
 12522   0036D4                     l1189:
 12523   0036D4  0012               	return		;funcret
 12524   0036D6                     __end_of___fltol:
 12525                           	callstack 0
 12526                           
 12527 ;; *************** function ___flmul *****************
 12528 ;; Defined at:
 12529 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
 12530 ;; Parameters:    Size  Location     Type
 12531 ;;  b               4   15[COMRAM] long 
 12532 ;;  a               4   19[COMRAM] long 
 12533 ;; Auto vars:     Size  Location     Type
 12534 ;;  prod            4   34[COMRAM] struct .
 12535 ;;  grs             4   28[COMRAM] unsigned long 
 12536 ;;  temp            2   38[COMRAM] struct .
 12537 ;;  bexp            1   33[COMRAM] unsigned char 
 12538 ;;  aexp            1   32[COMRAM] unsigned char 
 12539 ;;  sign            1   27[COMRAM] unsigned char 
 12540 ;; Return value:  Size  Location     Type
 12541 ;;                  4   15[COMRAM] unsigned char 
 12542 ;; Registers used:
 12543 ;;		wreg, status,2, status,0, prodl, prodh
 12544 ;; Tracked objects:
 12545 ;;		On entry : 0/0
 12546 ;;		On exit  : 0/0
 12547 ;;		Unchanged: 0/0
 12548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12549 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12550 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12551 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12552 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12553 ;;Total ram usage:       25 bytes
 12554 ;; Hardware stack levels used: 1
 12555 ;; Hardware stack levels required when called: 1
 12556 ;; This function calls:
 12557 ;;		Nothing
 12558 ;; This function is called by:
 12559 ;;		_convert_rgb2hue
 12560 ;;		_calc_clear_norm
 12561 ;;		_fullSpeedAhead
 12562 ;; This function uses a non-reentrant model
 12563 ;;
 12564                           
 12565                           	psect	text83
 12566   001A76                     __ptext83:
 12567                           	callstack 0
 12568   001A76                     ___flmul:
 12569                           	callstack 27
 12570   001A76  5013               	movf	(___flmul@b+3)^0,w,c
 12571   001A78  0B80               	andlw	128
 12572   001A7A  6E1C               	movwf	___flmul@sign^0,c
 12573   001A7C  5013               	movf	(___flmul@b+3)^0,w,c
 12574   001A7E  2413               	addwf	(___flmul@b+3)^0,w,c
 12575   001A80  6E22               	movwf	___flmul@bexp^0,c
 12576   001A82  AE12               	btfss	(___flmul@b+2)^0,7,c
 12577   001A84  EF46  F00D         	goto	u3031
 12578   001A88  EF48  F00D         	goto	u3030
 12579   001A8C                     u3031:
 12580   001A8C  EF49  F00D         	goto	l4014
 12581   001A90                     u3030:
 12582   001A90  8022               	bsf	___flmul@bexp^0,0,c
 12583   001A92                     l4014:
 12584   001A92  5022               	movf	___flmul@bexp^0,w,c
 12585   001A94  B4D8               	btfsc	status,2,c
 12586   001A96  EF4F  F00D         	goto	u3041
 12587   001A9A  EF51  F00D         	goto	u3040
 12588   001A9E                     u3041:
 12589   001A9E  EF64  F00D         	goto	l4022
 12590   001AA2                     u3040:
 12591   001AA2  2822               	incf	___flmul@bexp^0,w,c
 12592   001AA4  A4D8               	btfss	status,2,c
 12593   001AA6  EF57  F00D         	goto	u3051
 12594   001AAA  EF59  F00D         	goto	u3050
 12595   001AAE                     u3051:
 12596   001AAE  EF61  F00D         	goto	l4020
 12597   001AB2                     u3050:
 12598   001AB2  0E00               	movlw	0
 12599   001AB4  6E10               	movwf	___flmul@b^0,c
 12600   001AB6  0E00               	movlw	0
 12601   001AB8  6E11               	movwf	(___flmul@b+1)^0,c
 12602   001ABA  0E00               	movlw	0
 12603   001ABC  6E12               	movwf	(___flmul@b+2)^0,c
 12604   001ABE  0E00               	movlw	0
 12605   001AC0  6E13               	movwf	(___flmul@b+3)^0,c
 12606   001AC2                     l4020:
 12607   001AC2  8E12               	bsf	(___flmul@b+2)^0,7,c
 12608   001AC4  EF6C  F00D         	goto	l4024
 12609   001AC8                     l4022:
 12610   001AC8  0E00               	movlw	0
 12611   001ACA  6E10               	movwf	___flmul@b^0,c
 12612   001ACC  0E00               	movlw	0
 12613   001ACE  6E11               	movwf	(___flmul@b+1)^0,c
 12614   001AD0  0E00               	movlw	0
 12615   001AD2  6E12               	movwf	(___flmul@b+2)^0,c
 12616   001AD4  0E00               	movlw	0
 12617   001AD6  6E13               	movwf	(___flmul@b+3)^0,c
 12618   001AD8                     l4024:
 12619   001AD8  5017               	movf	(___flmul@a+3)^0,w,c
 12620   001ADA  0B80               	andlw	128
 12621   001ADC  1A1C               	xorwf	___flmul@sign^0,f,c
 12622   001ADE  5017               	movf	(___flmul@a+3)^0,w,c
 12623   001AE0  2417               	addwf	(___flmul@a+3)^0,w,c
 12624   001AE2  6E21               	movwf	___flmul@aexp^0,c
 12625   001AE4  AE16               	btfss	(___flmul@a+2)^0,7,c
 12626   001AE6  EF77  F00D         	goto	u3061
 12627   001AEA  EF79  F00D         	goto	u3060
 12628   001AEE                     u3061:
 12629   001AEE  EF7A  F00D         	goto	l4032
 12630   001AF2                     u3060:
 12631   001AF2  8021               	bsf	___flmul@aexp^0,0,c
 12632   001AF4                     l4032:
 12633   001AF4  5021               	movf	___flmul@aexp^0,w,c
 12634   001AF6  B4D8               	btfsc	status,2,c
 12635   001AF8  EF80  F00D         	goto	u3071
 12636   001AFC  EF82  F00D         	goto	u3070
 12637   001B00                     u3071:
 12638   001B00  EF95  F00D         	goto	l4040
 12639   001B04                     u3070:
 12640   001B04  2821               	incf	___flmul@aexp^0,w,c
 12641   001B06  A4D8               	btfss	status,2,c
 12642   001B08  EF88  F00D         	goto	u3081
 12643   001B0C  EF8A  F00D         	goto	u3080
 12644   001B10                     u3081:
 12645   001B10  EF92  F00D         	goto	l4038
 12646   001B14                     u3080:
 12647   001B14  0E00               	movlw	0
 12648   001B16  6E14               	movwf	___flmul@a^0,c
 12649   001B18  0E00               	movlw	0
 12650   001B1A  6E15               	movwf	(___flmul@a+1)^0,c
 12651   001B1C  0E00               	movlw	0
 12652   001B1E  6E16               	movwf	(___flmul@a+2)^0,c
 12653   001B20  0E00               	movlw	0
 12654   001B22  6E17               	movwf	(___flmul@a+3)^0,c
 12655   001B24                     l4038:
 12656   001B24  8E16               	bsf	(___flmul@a+2)^0,7,c
 12657   001B26  EF9D  F00D         	goto	l1506
 12658   001B2A                     l4040:
 12659   001B2A  0E00               	movlw	0
 12660   001B2C  6E14               	movwf	___flmul@a^0,c
 12661   001B2E  0E00               	movlw	0
 12662   001B30  6E15               	movwf	(___flmul@a+1)^0,c
 12663   001B32  0E00               	movlw	0
 12664   001B34  6E16               	movwf	(___flmul@a+2)^0,c
 12665   001B36  0E00               	movlw	0
 12666   001B38  6E17               	movwf	(___flmul@a+3)^0,c
 12667   001B3A                     l1506:
 12668   001B3A  5021               	movf	___flmul@aexp^0,w,c
 12669   001B3C  B4D8               	btfsc	status,2,c
 12670   001B3E  EFA3  F00D         	goto	u3091
 12671   001B42  EFA5  F00D         	goto	u3090
 12672   001B46                     u3091:
 12673   001B46  EFAD  F00D         	goto	l4044
 12674   001B4A                     u3090:
 12675   001B4A  5022               	movf	___flmul@bexp^0,w,c
 12676   001B4C  A4D8               	btfss	status,2,c
 12677   001B4E  EFAB  F00D         	goto	u3101
 12678   001B52  EFAD  F00D         	goto	u3100
 12679   001B56                     u3101:
 12680   001B56  EFB7  F00D         	goto	l4048
 12681   001B5A                     u3100:
 12682   001B5A                     l4044:
 12683   001B5A  0E00               	movlw	0
 12684   001B5C  6E10               	movwf	?___flmul^0,c
 12685   001B5E  0E00               	movlw	0
 12686   001B60  6E11               	movwf	(?___flmul+1)^0,c
 12687   001B62  0E00               	movlw	0
 12688   001B64  6E12               	movwf	(?___flmul+2)^0,c
 12689   001B66  0E00               	movlw	0
 12690   001B68  6E13               	movwf	(?___flmul+3)^0,c
 12691   001B6A  EF4F  F00F         	goto	l1510
 12692   001B6E                     l4048:
 12693   001B6E  5016               	movf	(___flmul@a+2)^0,w,c
 12694   001B70  0210               	mulwf	___flmul@b^0,c
 12695   001B72  CFF3 F027          	movff	prodl,___flmul@temp
 12696   001B76  CFF4 F028          	movff	prodh,___flmul@temp+1
 12697   001B7A  5027               	movf	___flmul@temp^0,w,c
 12698   001B7C  6E1D               	movwf	___flmul@grs^0,c
 12699   001B7E  6A1E               	clrf	(___flmul@grs+1)^0,c
 12700   001B80  6A1F               	clrf	(___flmul@grs+2)^0,c
 12701   001B82  6A20               	clrf	(___flmul@grs+3)^0,c
 12702   001B84  5028               	movf	(___flmul@temp+1)^0,w,c
 12703   001B86  6E23               	movwf	___flmul@prod^0,c
 12704   001B88  6A24               	clrf	(___flmul@prod+1)^0,c
 12705   001B8A  6A25               	clrf	(___flmul@prod+2)^0,c
 12706   001B8C  6A26               	clrf	(___flmul@prod+3)^0,c
 12707   001B8E  5015               	movf	(___flmul@a+1)^0,w,c
 12708   001B90  0211               	mulwf	(___flmul@b+1)^0,c
 12709   001B92  CFF3 F027          	movff	prodl,___flmul@temp
 12710   001B96  CFF4 F028          	movff	prodh,___flmul@temp+1
 12711   001B9A  5027               	movf	___flmul@temp^0,w,c
 12712   001B9C  261D               	addwf	___flmul@grs^0,f,c
 12713   001B9E  0E00               	movlw	0
 12714   001BA0  221E               	addwfc	(___flmul@grs+1)^0,f,c
 12715   001BA2  221F               	addwfc	(___flmul@grs+2)^0,f,c
 12716   001BA4  2220               	addwfc	(___flmul@grs+3)^0,f,c
 12717   001BA6  5028               	movf	(___flmul@temp+1)^0,w,c
 12718   001BA8  2623               	addwf	___flmul@prod^0,f,c
 12719   001BAA  0E00               	movlw	0
 12720   001BAC  2224               	addwfc	(___flmul@prod+1)^0,f,c
 12721   001BAE  2225               	addwfc	(___flmul@prod+2)^0,f,c
 12722   001BB0  2226               	addwfc	(___flmul@prod+3)^0,f,c
 12723   001BB2  5014               	movf	___flmul@a^0,w,c
 12724   001BB4  0212               	mulwf	(___flmul@b+2)^0,c
 12725   001BB6  CFF3 F027          	movff	prodl,___flmul@temp
 12726   001BBA  CFF4 F028          	movff	prodh,___flmul@temp+1
 12727   001BBE  5027               	movf	___flmul@temp^0,w,c
 12728   001BC0  261D               	addwf	___flmul@grs^0,f,c
 12729   001BC2  0E00               	movlw	0
 12730   001BC4  221E               	addwfc	(___flmul@grs+1)^0,f,c
 12731   001BC6  221F               	addwfc	(___flmul@grs+2)^0,f,c
 12732   001BC8  2220               	addwfc	(___flmul@grs+3)^0,f,c
 12733   001BCA  5028               	movf	(___flmul@temp+1)^0,w,c
 12734   001BCC  2623               	addwf	___flmul@prod^0,f,c
 12735   001BCE  0E00               	movlw	0
 12736   001BD0  2224               	addwfc	(___flmul@prod+1)^0,f,c
 12737   001BD2  2225               	addwfc	(___flmul@prod+2)^0,f,c
 12738   001BD4  2226               	addwfc	(___flmul@prod+3)^0,f,c
 12739   001BD6  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
 12740   001BDA  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
 12741   001BDE  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
 12742   001BE2  6A1D               	clrf	___flmul@grs^0,c
 12743   001BE4  5014               	movf	___flmul@a^0,w,c
 12744   001BE6  0211               	mulwf	(___flmul@b+1)^0,c
 12745   001BE8  CFF3 F027          	movff	prodl,___flmul@temp
 12746   001BEC  CFF4 F028          	movff	prodh,___flmul@temp+1
 12747   001BF0  5027               	movf	___flmul@temp^0,w,c
 12748   001BF2  261D               	addwf	___flmul@grs^0,f,c
 12749   001BF4  5028               	movf	(___flmul@temp+1)^0,w,c
 12750   001BF6  221E               	addwfc	(___flmul@grs+1)^0,f,c
 12751   001BF8  0E00               	movlw	0
 12752   001BFA  221F               	addwfc	(___flmul@grs+2)^0,f,c
 12753   001BFC  0E00               	movlw	0
 12754   001BFE  2220               	addwfc	(___flmul@grs+3)^0,f,c
 12755   001C00  5015               	movf	(___flmul@a+1)^0,w,c
 12756   001C02  0210               	mulwf	___flmul@b^0,c
 12757   001C04  CFF3 F027          	movff	prodl,___flmul@temp
 12758   001C08  CFF4 F028          	movff	prodh,___flmul@temp+1
 12759   001C0C  5027               	movf	___flmul@temp^0,w,c
 12760   001C0E  261D               	addwf	___flmul@grs^0,f,c
 12761   001C10  5028               	movf	(___flmul@temp+1)^0,w,c
 12762   001C12  221E               	addwfc	(___flmul@grs+1)^0,f,c
 12763   001C14  0E00               	movlw	0
 12764   001C16  221F               	addwfc	(___flmul@grs+2)^0,f,c
 12765   001C18  0E00               	movlw	0
 12766   001C1A  2220               	addwfc	(___flmul@grs+3)^0,f,c
 12767   001C1C  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
 12768   001C20  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
 12769   001C24  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
 12770   001C28  6A1D               	clrf	___flmul@grs^0,c
 12771   001C2A  5014               	movf	___flmul@a^0,w,c
 12772   001C2C  0210               	mulwf	___flmul@b^0,c
 12773   001C2E  CFF3 F027          	movff	prodl,___flmul@temp
 12774   001C32  CFF4 F028          	movff	prodh,___flmul@temp+1
 12775   001C36  5027               	movf	___flmul@temp^0,w,c
 12776   001C38  261D               	addwf	___flmul@grs^0,f,c
 12777   001C3A  5028               	movf	(___flmul@temp+1)^0,w,c
 12778   001C3C  221E               	addwfc	(___flmul@grs+1)^0,f,c
 12779   001C3E  0E00               	movlw	0
 12780   001C40  221F               	addwfc	(___flmul@grs+2)^0,f,c
 12781   001C42  0E00               	movlw	0
 12782   001C44  2220               	addwfc	(___flmul@grs+3)^0,f,c
 12783   001C46  5016               	movf	(___flmul@a+2)^0,w,c
 12784   001C48  0211               	mulwf	(___flmul@b+1)^0,c
 12785   001C4A  CFF3 F027          	movff	prodl,___flmul@temp
 12786   001C4E  CFF4 F028          	movff	prodh,___flmul@temp+1
 12787   001C52  5027               	movf	___flmul@temp^0,w,c
 12788   001C54  2623               	addwf	___flmul@prod^0,f,c
 12789   001C56  5028               	movf	(___flmul@temp+1)^0,w,c
 12790   001C58  2224               	addwfc	(___flmul@prod+1)^0,f,c
 12791   001C5A  0E00               	movlw	0
 12792   001C5C  2225               	addwfc	(___flmul@prod+2)^0,f,c
 12793   001C5E  0E00               	movlw	0
 12794   001C60  2226               	addwfc	(___flmul@prod+3)^0,f,c
 12795   001C62  5015               	movf	(___flmul@a+1)^0,w,c
 12796   001C64  0212               	mulwf	(___flmul@b+2)^0,c
 12797   001C66  CFF3 F027          	movff	prodl,___flmul@temp
 12798   001C6A  CFF4 F028          	movff	prodh,___flmul@temp+1
 12799   001C6E  5027               	movf	___flmul@temp^0,w,c
 12800   001C70  2623               	addwf	___flmul@prod^0,f,c
 12801   001C72  5028               	movf	(___flmul@temp+1)^0,w,c
 12802   001C74  2224               	addwfc	(___flmul@prod+1)^0,f,c
 12803   001C76  0E00               	movlw	0
 12804   001C78  2225               	addwfc	(___flmul@prod+2)^0,f,c
 12805   001C7A  0E00               	movlw	0
 12806   001C7C  2226               	addwfc	(___flmul@prod+3)^0,f,c
 12807   001C7E  5016               	movf	(___flmul@a+2)^0,w,c
 12808   001C80  0212               	mulwf	(___flmul@b+2)^0,c
 12809   001C82  CFF3 F027          	movff	prodl,___flmul@temp
 12810   001C86  CFF4 F028          	movff	prodh,___flmul@temp+1
 12811   001C8A  5027               	movf	___flmul@temp^0,w,c
 12812   001C8C  6E18               	movwf	??___flmul^0,c
 12813   001C8E  5028               	movf	(___flmul@temp+1)^0,w,c
 12814   001C90  6E19               	movwf	(??___flmul+1)^0,c
 12815   001C92  6A1A               	clrf	(??___flmul+2)^0,c
 12816   001C94  6A1B               	clrf	(??___flmul+3)^0,c
 12817   001C96  C01A  F01B         	movff	??___flmul+2,??___flmul+3
 12818   001C9A  C019  F01A         	movff	??___flmul+1,??___flmul+2
 12819   001C9E  C018  F019         	movff	??___flmul,??___flmul+1
 12820   001CA2  6A18               	clrf	??___flmul^0,c
 12821   001CA4  5018               	movf	??___flmul^0,w,c
 12822   001CA6  2623               	addwf	___flmul@prod^0,f,c
 12823   001CA8  5019               	movf	(??___flmul+1)^0,w,c
 12824   001CAA  2224               	addwfc	(___flmul@prod+1)^0,f,c
 12825   001CAC  501A               	movf	(??___flmul+2)^0,w,c
 12826   001CAE  2225               	addwfc	(___flmul@prod+2)^0,f,c
 12827   001CB0  501B               	movf	(??___flmul+3)^0,w,c
 12828   001CB2  2226               	addwfc	(___flmul@prod+3)^0,f,c
 12829   001CB4  C01D  F018         	movff	___flmul@grs,??___flmul
 12830   001CB8  C01E  F019         	movff	___flmul@grs+1,??___flmul+1
 12831   001CBC  C01F  F01A         	movff	___flmul@grs+2,??___flmul+2
 12832   001CC0  C020  F01B         	movff	___flmul@grs+3,??___flmul+3
 12833   001CC4  0E19               	movlw	25
 12834   001CC6  EF6A  F00E         	goto	u3110
 12835   001CCA                     u3115:
 12836   001CCA  90D8               	bcf	status,0,c
 12837   001CCC  321B               	rrcf	(??___flmul+3)^0,f,c
 12838   001CCE  321A               	rrcf	(??___flmul+2)^0,f,c
 12839   001CD0  3219               	rrcf	(??___flmul+1)^0,f,c
 12840   001CD2  3218               	rrcf	??___flmul^0,f,c
 12841   001CD4                     u3110:
 12842   001CD4  2EE8               	decfsz	wreg,f,c
 12843   001CD6  EF65  F00E         	goto	u3115
 12844   001CDA  5018               	movf	??___flmul^0,w,c
 12845   001CDC  2623               	addwf	___flmul@prod^0,f,c
 12846   001CDE  5019               	movf	(??___flmul+1)^0,w,c
 12847   001CE0  2224               	addwfc	(___flmul@prod+1)^0,f,c
 12848   001CE2  501A               	movf	(??___flmul+2)^0,w,c
 12849   001CE4  2225               	addwfc	(___flmul@prod+2)^0,f,c
 12850   001CE6  501B               	movf	(??___flmul+3)^0,w,c
 12851   001CE8  2226               	addwfc	(___flmul@prod+3)^0,f,c
 12852   001CEA  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
 12853   001CEE  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
 12854   001CF2  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
 12855   001CF6  6A1D               	clrf	___flmul@grs^0,c
 12856   001CF8  5021               	movf	___flmul@aexp^0,w,c
 12857   001CFA  C022  F018         	movff	___flmul@bexp,??___flmul
 12858   001CFE  6A19               	clrf	(??___flmul+1)^0,c
 12859   001D00  2618               	addwf	??___flmul^0,f,c
 12860   001D02  0E00               	movlw	0
 12861   001D04  2219               	addwfc	(??___flmul+1)^0,f,c
 12862   001D06  0E82               	movlw	130
 12863   001D08  2418               	addwf	??___flmul^0,w,c
 12864   001D0A  6E27               	movwf	___flmul@temp^0,c
 12865   001D0C  0EFF               	movlw	255
 12866   001D0E  2019               	addwfc	(??___flmul+1)^0,w,c
 12867   001D10  6E28               	movwf	(___flmul@temp+1)^0,c
 12868   001D12  EFA0  F00E         	goto	l4096
 12869   001D16                     l4090:
 12870   001D16  90D8               	bcf	status,0,c
 12871   001D18  3623               	rlcf	___flmul@prod^0,f,c
 12872   001D1A  3624               	rlcf	(___flmul@prod+1)^0,f,c
 12873   001D1C  3625               	rlcf	(___flmul@prod+2)^0,f,c
 12874   001D1E  3626               	rlcf	(___flmul@prod+3)^0,f,c
 12875   001D20  AE20               	btfss	(___flmul@grs+3)^0,7,c
 12876   001D22  EF95  F00E         	goto	u3121
 12877   001D26  EF97  F00E         	goto	u3120
 12878   001D2A                     u3121:
 12879   001D2A  EF98  F00E         	goto	l1513
 12880   001D2E                     u3120:
 12881   001D2E  8023               	bsf	___flmul@prod^0,0,c
 12882   001D30                     l1513:
 12883   001D30  90D8               	bcf	status,0,c
 12884   001D32  361D               	rlcf	___flmul@grs^0,f,c
 12885   001D34  361E               	rlcf	(___flmul@grs+1)^0,f,c
 12886   001D36  361F               	rlcf	(___flmul@grs+2)^0,f,c
 12887   001D38  3620               	rlcf	(___flmul@grs+3)^0,f,c
 12888   001D3A  0627               	decf	___flmul@temp^0,f,c
 12889   001D3C  A0D8               	btfss	status,0,c
 12890   001D3E  0628               	decf	(___flmul@temp+1)^0,f,c
 12891   001D40                     l4096:
 12892   001D40  AE25               	btfss	(___flmul@prod+2)^0,7,c
 12893   001D42  EFA5  F00E         	goto	u3131
 12894   001D46  EFA7  F00E         	goto	u3130
 12895   001D4A                     u3131:
 12896   001D4A  EF8B  F00E         	goto	l4090
 12897   001D4E                     u3130:
 12898   001D4E  0E00               	movlw	0
 12899   001D50  6E21               	movwf	___flmul@aexp^0,c
 12900   001D52  AE20               	btfss	(___flmul@grs+3)^0,7,c
 12901   001D54  EFAE  F00E         	goto	u3141
 12902   001D58  EFB0  F00E         	goto	u3140
 12903   001D5C                     u3141:
 12904   001D5C  EFD4  F00E         	goto	l1515
 12905   001D60                     u3140:
 12906   001D60  0EFF               	movlw	255
 12907   001D62  141D               	andwf	___flmul@grs^0,w,c
 12908   001D64  6E18               	movwf	??___flmul^0,c
 12909   001D66  0EFF               	movlw	255
 12910   001D68  141E               	andwf	(___flmul@grs+1)^0,w,c
 12911   001D6A  6E19               	movwf	(??___flmul+1)^0,c
 12912   001D6C  0EFF               	movlw	255
 12913   001D6E  141F               	andwf	(___flmul@grs+2)^0,w,c
 12914   001D70  6E1A               	movwf	(??___flmul+2)^0,c
 12915   001D72  0E7F               	movlw	127
 12916   001D74  1420               	andwf	(___flmul@grs+3)^0,w,c
 12917   001D76  6E1B               	movwf	(??___flmul+3)^0,c
 12918   001D78  5018               	movf	??___flmul^0,w,c
 12919   001D7A  1019               	iorwf	(??___flmul+1)^0,w,c
 12920   001D7C  101A               	iorwf	(??___flmul+2)^0,w,c
 12921   001D7E  101B               	iorwf	(??___flmul+3)^0,w,c
 12922   001D80  B4D8               	btfsc	status,2,c
 12923   001D82  EFC5  F00E         	goto	u3151
 12924   001D86  EFC7  F00E         	goto	u3150
 12925   001D8A                     u3151:
 12926   001D8A  EFCB  F00E         	goto	l1516
 12927   001D8E                     u3150:
 12928   001D8E                     l4104:
 12929   001D8E  0E01               	movlw	1
 12930   001D90  6E21               	movwf	___flmul@aexp^0,c
 12931   001D92  EFD4  F00E         	goto	l1515
 12932   001D96                     l1516:
 12933   001D96  A023               	btfss	___flmul@prod^0,0,c
 12934   001D98  EFD0  F00E         	goto	u3161
 12935   001D9C  EFD2  F00E         	goto	u3160
 12936   001DA0                     u3161:
 12937   001DA0  EFD4  F00E         	goto	l1515
 12938   001DA4                     u3160:
 12939   001DA4  EFC7  F00E         	goto	l4104
 12940   001DA8                     l1515:
 12941   001DA8  5021               	movf	___flmul@aexp^0,w,c
 12942   001DAA  B4D8               	btfsc	status,2,c
 12943   001DAC  EFDA  F00E         	goto	u3171
 12944   001DB0  EFDC  F00E         	goto	u3170
 12945   001DB4                     u3171:
 12946   001DB4  EF00  F00F         	goto	l4116
 12947   001DB8                     u3170:
 12948   001DB8  0E01               	movlw	1
 12949   001DBA  2623               	addwf	___flmul@prod^0,f,c
 12950   001DBC  0E00               	movlw	0
 12951   001DBE  2224               	addwfc	(___flmul@prod+1)^0,f,c
 12952   001DC0  2225               	addwfc	(___flmul@prod+2)^0,f,c
 12953   001DC2  2226               	addwfc	(___flmul@prod+3)^0,f,c
 12954   001DC4  A026               	btfss	(___flmul@prod+3)^0,0,c
 12955   001DC6  EFE7  F00E         	goto	u3181
 12956   001DCA  EFE9  F00E         	goto	u3180
 12957   001DCE                     u3181:
 12958   001DCE  EF00  F00F         	goto	l4116
 12959   001DD2                     u3180:
 12960   001DD2  C023  F018         	movff	___flmul@prod,??___flmul
 12961   001DD6  C024  F019         	movff	___flmul@prod+1,??___flmul+1
 12962   001DDA  C025  F01A         	movff	___flmul@prod+2,??___flmul+2
 12963   001DDE  C026  F01B         	movff	___flmul@prod+3,??___flmul+3
 12964   001DE2  341B               	rlcf	(??___flmul+3)^0,w,c
 12965   001DE4  321B               	rrcf	(??___flmul+3)^0,f,c
 12966   001DE6  321A               	rrcf	(??___flmul+2)^0,f,c
 12967   001DE8  3219               	rrcf	(??___flmul+1)^0,f,c
 12968   001DEA  3218               	rrcf	??___flmul^0,f,c
 12969   001DEC  C018  F023         	movff	??___flmul,___flmul@prod
 12970   001DF0  C019  F024         	movff	??___flmul+1,___flmul@prod+1
 12971   001DF4  C01A  F025         	movff	??___flmul+2,___flmul@prod+2
 12972   001DF8  C01B  F026         	movff	??___flmul+3,___flmul@prod+3
 12973   001DFC  4A27               	infsnz	___flmul@temp^0,f,c
 12974   001DFE  2A28               	incf	(___flmul@temp+1)^0,f,c
 12975   001E00                     l4116:
 12976   001E00  BE28               	btfsc	(___flmul@temp+1)^0,7,c
 12977   001E02  EF0B  F00F         	goto	u3191
 12978   001E06  5028               	movf	(___flmul@temp+1)^0,w,c
 12979   001E08  E108               	bnz	u3190
 12980   001E0A  2827               	incf	___flmul@temp^0,w,c
 12981   001E0C  A0D8               	btfss	status,0,c
 12982   001E0E  EF0B  F00F         	goto	u3191
 12983   001E12  EF0D  F00F         	goto	u3190
 12984   001E16                     u3191:
 12985   001E16  EF17  F00F         	goto	l4120
 12986   001E1A                     u3190:
 12987   001E1A  0E00               	movlw	0
 12988   001E1C  6E23               	movwf	___flmul@prod^0,c
 12989   001E1E  0E00               	movlw	0
 12990   001E20  6E24               	movwf	(___flmul@prod+1)^0,c
 12991   001E22  0E80               	movlw	128
 12992   001E24  6E25               	movwf	(___flmul@prod+2)^0,c
 12993   001E26  0E7F               	movlw	127
 12994   001E28  6E26               	movwf	(___flmul@prod+3)^0,c
 12995   001E2A  EF45  F00F         	goto	l4132
 12996   001E2E                     l4120:
 12997   001E2E  BE28               	btfsc	(___flmul@temp+1)^0,7,c
 12998   001E30  EF24  F00F         	goto	u3200
 12999   001E34  5028               	movf	(___flmul@temp+1)^0,w,c
 13000   001E36  E106               	bnz	u3201
 13001   001E38  0427               	decf	___flmul@temp^0,w,c
 13002   001E3A  B0D8               	btfsc	status,0,c
 13003   001E3C  EF22  F00F         	goto	u3201
 13004   001E40  EF24  F00F         	goto	u3200
 13005   001E44                     u3201:
 13006   001E44  EF30  F00F         	goto	l1523
 13007   001E48                     u3200:
 13008   001E48  0E00               	movlw	0
 13009   001E4A  6E23               	movwf	___flmul@prod^0,c
 13010   001E4C  0E00               	movlw	0
 13011   001E4E  6E24               	movwf	(___flmul@prod+1)^0,c
 13012   001E50  0E00               	movlw	0
 13013   001E52  6E25               	movwf	(___flmul@prod+2)^0,c
 13014   001E54  0E00               	movlw	0
 13015   001E56  6E26               	movwf	(___flmul@prod+3)^0,c
 13016   001E58  0E00               	movlw	0
 13017   001E5A  6E1C               	movwf	___flmul@sign^0,c
 13018   001E5C  EF45  F00F         	goto	l4132
 13019   001E60                     l1523:
 13020   001E60  C027  F022         	movff	___flmul@temp,___flmul@bexp
 13021   001E64  0EFF               	movlw	255
 13022   001E66  1623               	andwf	___flmul@prod^0,f,c
 13023   001E68  0EFF               	movlw	255
 13024   001E6A  1624               	andwf	(___flmul@prod+1)^0,f,c
 13025   001E6C  0E7F               	movlw	127
 13026   001E6E  1625               	andwf	(___flmul@prod+2)^0,f,c
 13027   001E70  0E00               	movlw	0
 13028   001E72  1626               	andwf	(___flmul@prod+3)^0,f,c
 13029   001E74  A022               	btfss	___flmul@bexp^0,0,c
 13030   001E76  EF3F  F00F         	goto	u3211
 13031   001E7A  EF41  F00F         	goto	u3210
 13032   001E7E                     u3211:
 13033   001E7E  EF42  F00F         	goto	l4130
 13034   001E82                     u3210:
 13035   001E82  8E25               	bsf	(___flmul@prod+2)^0,7,c
 13036   001E84                     l4130:
 13037   001E84  90D8               	bcf	status,0,c
 13038   001E86  3022               	rrcf	___flmul@bexp^0,w,c
 13039   001E88  6E26               	movwf	(___flmul@prod+3)^0,c
 13040   001E8A                     l4132:
 13041   001E8A  501C               	movf	___flmul@sign^0,w,c
 13042   001E8C  1226               	iorwf	(___flmul@prod+3)^0,f,c
 13043   001E8E  C023  F010         	movff	___flmul@prod,?___flmul
 13044   001E92  C024  F011         	movff	___flmul@prod+1,?___flmul+1
 13045   001E96  C025  F012         	movff	___flmul@prod+2,?___flmul+2
 13046   001E9A  C026  F013         	movff	___flmul@prod+3,?___flmul+3
 13047   001E9E                     l1510:
 13048   001E9E  0012               	return		;funcret
 13049   001EA0                     __end_of___flmul:
 13050                           	callstack 0
 13051                           
 13052 ;; *************** function _Timer0_init *****************
 13053 ;; Defined at:
 13054 ;;		line 8 in file "timers.c"
 13055 ;; Parameters:    Size  Location     Type
 13056 ;;		None
 13057 ;; Auto vars:     Size  Location     Type
 13058 ;;		None
 13059 ;; Return value:  Size  Location     Type
 13060 ;;                  1    wreg      void 
 13061 ;; Registers used:
 13062 ;;		wreg, status,2
 13063 ;; Tracked objects:
 13064 ;;		On entry : 0/0
 13065 ;;		On exit  : 0/0
 13066 ;;		Unchanged: 0/0
 13067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13072 ;;Total ram usage:        0 bytes
 13073 ;; Hardware stack levels used: 1
 13074 ;; Hardware stack levels required when called: 1
 13075 ;; This function calls:
 13076 ;;		Nothing
 13077 ;; This function is called by:
 13078 ;;		_main
 13079 ;; This function uses a non-reentrant model
 13080 ;;
 13081                           
 13082                           	psect	text84
 13083   004B7E                     __ptext84:
 13084                           	callstack 0
 13085   004B7E                     _Timer0_init:
 13086                           	callstack 29
 13087   004B7E                     
 13088                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
 13089   004B7E  50D6               	movf	214,w,c	;volatile
 13090   004B80  0B1F               	andlw	-225
 13091   004B82  0940               	iorlw	64
 13092   004B84  6ED6               	movwf	214,c	;volatile
 13093   004B86                     
 13094                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
 13095   004B86  88D6               	bsf	214,4,c	;volatile
 13096                           
 13097                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b1101;
 13098   004B88  50D6               	movf	214,w,c	;volatile
 13099   004B8A  0BF0               	andlw	-16
 13100   004B8C  090D               	iorlw	13
 13101   004B8E  6ED6               	movwf	214,c	;volatile
 13102   004B90                     
 13103                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
 13104   004B90  88D5               	bsf	213,4,c	;volatile
 13105   004B92                     
 13106                           ;timers.c: 15:     PIE0bits.TMR0IE = 1;
 13107   004B92  010E               	movlb	14	; () banked
 13108   004B94  8B29               	bsf	41,5,b	;volatile
 13109   004B96                     
 13110                           ; BSR set to: 14
 13111                           ;timers.c: 16:     PIR0bits.TMR0IF = 0;
 13112   004B96  9B33               	bcf	51,5,b	;volatile
 13113   004B98                     
 13114                           ; BSR set to: 14
 13115                           ;timers.c: 17:     IPR0bits.TMR0IP = 0;
 13116   004B98  9B1F               	bcf	31,5,b	;volatile
 13117   004B9A                     
 13118                           ; BSR set to: 14
 13119                           ;timers.c: 18:     INTCONbits.IPEN = 1;
 13120   004B9A  8AF2               	bsf	242,5,c	;volatile
 13121   004B9C                     
 13122                           ; BSR set to: 14
 13123                           ;timers.c: 19:     INTCONbits.PEIE = 1;
 13124   004B9C  8CF2               	bsf	242,6,c	;volatile
 13125   004B9E                     
 13126                           ; BSR set to: 14
 13127                           ;timers.c: 20:     INTCONbits.GIE = 1;
 13128   004B9E  8EF2               	bsf	242,7,c	;volatile
 13129   004BA0                     
 13130                           ; BSR set to: 14
 13131                           ;timers.c: 23:     TRISGbits.TRISG1 = 0;
 13132   004BA0  9287               	bcf	135,1,c	;volatile
 13133   004BA2                     
 13134                           ; BSR set to: 14
 13135                           ;timers.c: 24:     LATGbits.LATG1 = 0;
 13136   004BA2  927F               	bcf	127,1,c	;volatile
 13137                           
 13138                           ;timers.c: 27:     TMR0L = 0;
 13139   004BA4  0E00               	movlw	0
 13140   004BA6  6ED3               	movwf	211,c	;volatile
 13141                           
 13142                           ;timers.c: 28:     TMR0H = 0;
 13143   004BA8  0E00               	movlw	0
 13144   004BAA  6ED4               	movwf	212,c	;volatile
 13145   004BAC                     
 13146                           ; BSR set to: 14
 13147   004BAC  0012               	return		;funcret
 13148   004BAE                     __end_of_Timer0_init:
 13149                           	callstack 0
 13150                           
 13151 ;; *************** function _ADC_init *****************
 13152 ;; Defined at:
 13153 ;;		line 9 in file "ADC.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;		None
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;		None
 13158 ;; Return value:  Size  Location     Type
 13159 ;;                  1    wreg      void 
 13160 ;; Registers used:
 13161 ;;		wreg, status,2
 13162 ;; Tracked objects:
 13163 ;;		On entry : 0/0
 13164 ;;		On exit  : 0/0
 13165 ;;		Unchanged: 0/0
 13166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13171 ;;Total ram usage:        0 bytes
 13172 ;; Hardware stack levels used: 1
 13173 ;; Hardware stack levels required when called: 1
 13174 ;; This function calls:
 13175 ;;		Nothing
 13176 ;; This function is called by:
 13177 ;;		_main
 13178 ;; This function uses a non-reentrant model
 13179 ;;
 13180                           
 13181                           	psect	text85
 13182   004C82                     __ptext85:
 13183                           	callstack 0
 13184   004C82                     _ADC_init:
 13185                           	callstack 29
 13186   004C82                     
 13187                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 13188   004C82  8C86               	bsf	134,6,c	;volatile
 13189                           
 13190                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 13191   004C84  010E               	movlb	14	; () banked
 13192   004C86  8DB4               	bsf	180,6,b	;volatile
 13193                           
 13194                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 13195   004C88  010F               	movlb	15	; () banked
 13196   004C8A  9958               	bcf	88,4,b	;volatile
 13197   004C8C                     
 13198                           ; BSR set to: 15
 13199                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 13200   004C8C  0EFC               	movlw	-4
 13201   004C8E  1758               	andwf	88,f,b	;volatile
 13202                           
 13203                           ;ADC.c: 17:     ADPCH=0b101110;
 13204   004C90  0E2E               	movlw	46
 13205   004C92  6F5F               	movwf	95,b	;volatile
 13206   004C94                     
 13207                           ; BSR set to: 15
 13208                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 13209   004C94  9460               	bcf	96,2,c	;volatile
 13210   004C96                     
 13211                           ; BSR set to: 15
 13212                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 13213   004C96  8860               	bsf	96,4,c	;volatile
 13214   004C98                     
 13215                           ; BSR set to: 15
 13216                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 13217   004C98  8E60               	bsf	96,7,c	;volatile
 13218   004C9A                     
 13219                           ; BSR set to: 15
 13220   004C9A  0012               	return		;funcret
 13221   004C9C                     __end_of_ADC_init:
 13222                           	callstack 0
 13223                           
 13224 ;; *************** function _LowISR *****************
 13225 ;; Defined at:
 13226 ;;		line 48 in file "timers.c"
 13227 ;; Parameters:    Size  Location     Type
 13228 ;;		None
 13229 ;; Auto vars:     Size  Location     Type
 13230 ;;		None
 13231 ;; Return value:  Size  Location     Type
 13232 ;;                  1    wreg      void 
 13233 ;; Registers used:
 13234 ;;		None
 13235 ;; Tracked objects:
 13236 ;;		On entry : 0/0
 13237 ;;		On exit  : 0/0
 13238 ;;		Unchanged: 0/0
 13239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13244 ;;Total ram usage:        1 bytes
 13245 ;; Hardware stack levels used: 1
 13246 ;; This function calls:
 13247 ;;		Nothing
 13248 ;; This function is called by:
 13249 ;;		Interrupt level 1
 13250 ;; This function uses a non-reentrant model
 13251 ;;
 13252                           
 13253                           	psect	intcodelo
 13254   000018                     __pintcodelo:
 13255                           	callstack 0
 13256   000018                     _LowISR:
 13257                           	callstack 20
 13258                           
 13259                           ; BSR set to: 15
 13260                           ;incstack = 0
 13261   000018  805D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 13262   00001A  CFE0 F001          	movff	bsr,??_LowISR
 13263   00001E                     
 13264                           ;timers.c: 51:     if (PIR0bits.TMR0IF == 1) {
 13265   00001E  010E               	movlb	14	; () banked
 13266   000020  AB33               	btfss	51,5,b	;volatile
 13267   000022  EF15  F000         	goto	i1u253_21
 13268   000026  EF17  F000         	goto	i1u253_20
 13269   00002A                     i1u253_21:
 13270   00002A  EF19  F000         	goto	i1l604
 13271   00002E                     i1u253_20:
 13272   00002E                     
 13273                           ; BSR set to: 14
 13274                           ;timers.c: 52:         LATGbits.LATG1 = 1;
 13275   00002E  827F               	bsf	127,1,c	;volatile
 13276                           
 13277                           ;timers.c: 54:         PIR0bits.TMR0IF = 0;
 13278   000030  9B33               	bcf	51,5,b	;volatile
 13279   000032                     i1l604:
 13280                           
 13281                           ; BSR set to: 14
 13282   000032  C001  FFE0         	movff	??_LowISR,bsr
 13283   000036  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 13284   000038  0010               	retfie	
 13285   00003A                     __end_of_LowISR:
 13286                           	callstack 0
 13287                           
 13288                           	psect	rparam
 13289   000000                     
 13290                           	psect	temp
 13291   00005D                     btemp:
 13292                           	callstack 0
 13293   00005D                     	ds	1
 13294   000000                     int$flags	set	btemp
 13295   000000                     wtemp8	set	btemp+1
 13296   000000                     ttemp5	set	btemp+1
 13297   000000                     ttemp6	set	btemp+4
 13298   000000                     ttemp7	set	btemp+8
 13299                           
 13300                           	psect	config
 13301                           
 13302                           ;Config register CONFIG1L @ 0x300000
 13303                           ;	External Oscillator mode Selection bits
 13304                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 13305                           ;	Power-up default value for COSC bits
 13306                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 13307   300000                     	org	3145728
 13308   300000  AA                 	db	170
 13309                           
 13310                           ;Config register CONFIG1H @ 0x300001
 13311                           ;	unspecified, using default values
 13312                           ;	Clock Out Enable bit
 13313                           ;	CLKOUTEN = 0x1, unprogrammed default
 13314                           ;	Clock Switch Enable bit
 13315                           ;	CSWEN = 0x1, unprogrammed default
 13316                           ;	Fail-Safe Clock Monitor Enable bit
 13317                           ;	FCMEN = 0x1, unprogrammed default
 13318   300001                     	org	3145729
 13319   300001  FF                 	db	255
 13320                           
 13321                           ;Config register CONFIG3L @ 0x300004
 13322                           ;	WDT Period Select bits
 13323                           ;	WDTCPS = 0x1F, unprogrammed default
 13324                           ;	WDT operating mode
 13325                           ;	WDTE = OFF, WDT Disabled
 13326   300004                     	org	3145732
 13327   300004  9F                 	db	159
 13328                           
 13329                           ;Config register CONFIG3H @ 0x300005
 13330                           ;	unspecified, using default values
 13331                           ;	WDT Window Select bits
 13332                           ;	WDTCWS = 0x7, unprogrammed default
 13333                           ;	WDT input clock selector
 13334                           ;	WDTCCS = 0x7, unprogrammed default
 13335   300005                     	org	3145733
 13336   300005  FF                 	db	255
 13337                           tosu	equ	0xFFF
 13338                           tosh	equ	0xFFE
 13339                           tosl	equ	0xFFD
 13340                           stkptr	equ	0xFFC
 13341                           pclatu	equ	0xFFB
 13342                           pclath	equ	0xFFA
 13343                           pcl	equ	0xFF9
 13344                           tblptru	equ	0xFF8
 13345                           tblptrh	equ	0xFF7
 13346                           tblptrl	equ	0xFF6
 13347                           tablat	equ	0xFF5
 13348                           prodh	equ	0xFF4
 13349                           prodl	equ	0xFF3
 13350                           indf0	equ	0xFEF
 13351                           postinc0	equ	0xFEE
 13352                           postdec0	equ	0xFED
 13353                           preinc0	equ	0xFEC
 13354                           plusw0	equ	0xFEB
 13355                           fsr0h	equ	0xFEA
 13356                           fsr0l	equ	0xFE9
 13357                           wreg	equ	0xFE8
 13358                           indf1	equ	0xFE7
 13359                           postinc1	equ	0xFE6
 13360                           postdec1	equ	0xFE5
 13361                           preinc1	equ	0xFE4
 13362                           plusw1	equ	0xFE3
 13363                           fsr1h	equ	0xFE2
 13364                           fsr1l	equ	0xFE1
 13365                           bsr	equ	0xFE0
 13366                           indf2	equ	0xFDF
 13367                           postinc2	equ	0xFDE
 13368                           postdec2	equ	0xFDD
 13369                           preinc2	equ	0xFDC
 13370                           plusw2	equ	0xFDB
 13371                           fsr2h	equ	0xFDA
 13372                           fsr2l	equ	0xFD9
 13373                           status	equ	0xFD8

Data Sizes:
    Strings     33
    Constant    0
    Data        1
    BSS         426
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     91      92
    BANK0           160     88     152
    BANK1           256      0     162
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    bump_wall@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    bump_wall@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calc_clear_norm@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    calc_clear_norm@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    calibration_colors@cCal	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    calibration_turningL@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    calibration_turningL@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_turningR@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    calibration_turningR@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    intial_stage_movement@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    intial_stage_movement@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    is_white@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    is_white@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    looking_for_card@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    looking_for_card@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    looking_for_card@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    looking_for_card@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    S3008$buffer	PTR unsigned char  size(2) Largest target is 0

    S3008$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[21]), STR_2(CODE[12]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhllll[1]), CCPR4H(BITBIGSFRllllhllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhllll[1]), CCPR3H(BITBIGSFRllllhllllll[1]), 

    variablesMotorInit@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    variablesMotorInit@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[21]), STR_2(CODE[12]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[21]), STR_2(CODE[12]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[21]), STR_2(CODE[12]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_looking_for_card
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    _looking_for_card->_calc_clear_norm
    _calc_clear_norm->___fltol
    ___fldiv->___flmul
    _is_white->_returnHome
    _send2USART->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _returnHome->_reverseStraight
    _reverseTurn->_left90
    _reverseTurn->_right90
    _reverseStraight->_fullSpeedAhead
    _moveWhite->_backHalf
    _moveWhite->_turn180
    _get16bitTMR0val->___aldiv
    ___aldiv->___lmul
    _intial_stage_movement->_fullSpeedAhead
    _decision->_moveGreen
    _decision->_movePink
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_right90
    _moveRed->_right90
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_left90
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _backHalf->_fullSpeedBack
    _fullSpeedBack->_setMotorPWM
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_turningR->___fltol
    _right90->_turnRight
    _turnRight->_setMotorPWM
    _calibration_turningL->___fltol
    _left90->_turnLeft
    _turnLeft->_setMotorPWM
    ___flsub->___fladd
    ___fladd->___xxtofl
    _calibration_colors->_color_read_Blue
    _calibration_colors->_color_read_Clear
    _calibration_colors->_color_read_Green
    _calibration_colors->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _bump_wall->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->___fltol
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    ___fltol->___fldiv
    ___flmul->___xxtofl

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _is_white->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0  348933
                                             76 BANK0     12    12      0
                           _ADC_init
                        _Timer0_init
                          _bump_wall
                       _buttons_init
                    _calc_clear_norm
                 _calibration_colors
               _calibration_turningL
               _calibration_turningR
                   _color_click_init
          _color_clicker_lights_init
                           _decision
                    _initDCmotorsPWM
                         _initUSART4
              _intial_stage_movement
                           _is_white
                   _looking_for_card
                        _reading_hue
                         _send2USART
                 _variablesMotorInit
 ---------------------------------------------------------------------------------
 (1) _variablesMotorInit                                   4     0      4     272
                                              1 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   17890
                                             79 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   17251
                                             75 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _looking_for_card                                     8     2      6   14465
                                             89 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                    _calc_clear_norm
                    _get16bitTMR0val
                               _stop
 ---------------------------------------------------------------------------------
 (2) _calc_clear_norm                                     14    12      2    6994
                                             75 COMRAM    14    12      2
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                   _color_read_Clear
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2463
                                             40 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _is_white                                            14     2     12  102115
                                             50 BANK0     12     0     12
                    _get16bitTMR0val
                         _returnHome
                         _send2USART
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2    8576
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6    8066
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    7394
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    6906
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1143
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4210
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2391
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1182
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     682
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     219
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _returnHome                                          17     9      8   90225
                                             88 COMRAM     2     2      0
                                              0 BANK0     15     7      8
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (3) _reverseTurn                                         13     2     11   57090
                                             30 COMRAM    13     2     11
                           _backHalf
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _reverseStraight                                     10     4      6   12686
                                             80 COMRAM     8     2      6
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _moveWhite                                            4     2      2   19668
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _get16bitTMR0val                                     12    10      2    2368
                                             27 COMRAM    12    10      2
                            ___aldiv
                             ___lmul
                          _logAction
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     370
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     452
                                             13 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _intial_stage_movement                                2     0      2    7768
                                             80 COMRAM     2     0      2
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _decision                                            10     2      8  138760
                                             36 COMRAM     8     0      8
                          _logAction
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   18316
                                             30 COMRAM     6     2      4
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   20596
                                             30 COMRAM     6     2      4
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   18468
                                             30 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2    8400
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           4     2      2   19320
                                             28 COMRAM     4     2      2
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (4) _right135                                             4     2      2    8400
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        4     2      2   19472
                                             28 COMRAM     4     2      2
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (4) _left135                                              4     2      2    8552
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   20748
                                             30 COMRAM     6     2      4
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             4     2      2   19624
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (4) _turn180                                              4     2      2    8704
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _backHalf                                             4     2      2   10680
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (5) _fullSpeedBack                                        5     3      2    3419
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _logAction                                            9     3      6    1326
                                              1 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _color_clicker_lights_init                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_turningR                                20    18      2   19085
                                             75 COMRAM     4     2      2
                                              0 BANK0     16    16      0
                            ___fladd
                            ___flsub
                            ___fltol
                           ___xxtofl
                            _right90
 ---------------------------------------------------------------------------------
 (4) _right90                                              8     4      4    9578
                                             24 COMRAM     6     2      4
                      _customDelayMs
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (5) _turnRight                                            5     3      2    3419
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _calibration_turningL                                20    18      2   19237
                                             75 COMRAM     4     2      2
                                              0 BANK0     16    16      0
                            ___fladd
                            ___flsub
                            ___fltol
                           ___xxtofl
                             _left90
 ---------------------------------------------------------------------------------
 (4) _left90                                               8     4      4    9730
                                             24 COMRAM     6     2      4
                      _customDelayMs
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (5) _turnLeft                                             5     3      2    3571
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _customDelayMs                                        5     3      2     274
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4105
                                             31 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    3022
                                             15 COMRAM    16     8      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _calibration_colors                                   3     2      1     616
                                             12 COMRAM     3     2      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _buttons_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bump_wall                                            4     2      2   12401
                                             80 COMRAM     4     2      2
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 3     1      2    4589
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedAhead                                       5     3      2    7572
                                             75 COMRAM     5     3      2
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    2893
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     811
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1192
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     761
                                             65 COMRAM    10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    2048
                                             15 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Timer0_init
   _bump_wall
     _fullSpeedAhead
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
           ___flsub (ARG)
             ___fladd
             ___xxtofl (ARG)
         ___flmul (ARG)
         ___flsub (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
   _buttons_init
   _calc_clear_norm
     ___fldiv
     ___flmul
     ___fltol
     ___xxtofl
     _color_read_Clear
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _calibration_colors
     _color_read_Blue
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _calibration_turningL
     ___fladd
     ___flsub
     ___fltol
     ___xxtofl
     _left90
       _customDelayMs
       _stop
       _turnLeft
         _setMotorPWM
   _calibration_turningR
     ___fladd
     ___flsub
     ___fltol
     ___xxtofl
     _right90
       _customDelayMs
       _stop
       _turnRight
         _setMotorPWM
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_clicker_lights_init
   _decision
     _logAction
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
         _stop
       _turn180
         _stop
         _turnLeft
     _moveGreen
       _backHalf
       _left90
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         _stop
         _turnRight
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
     _moveYellow
       _backOneAndHalf
       _right90
   _initDCmotorsPWM
   _initUSART4
   _intial_stage_movement
     _fullSpeedAhead
   _is_white
     _get16bitTMR0val
       ___aldiv
         ___lmul (ARG)
       ___lmul
       _logAction
     _returnHome
       _moveWhite
         _backHalf
         _turn180
       _reverseStraight
         _customDelayMs
         _fullSpeedAhead
         _stop
       _reverseTurn
         _backHalf
         _left135
         _left90
         _right135
         _right90
         _turn180
     _send2USART
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
             _read_prec_or_width
               ___wmul
   _looking_for_card
     _calc_clear_norm
     _get16bitTMR0val
     _stop
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _send2USART
   _variablesMotorInit

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      70        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A2       7       63.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5B      5C       1       97.9%
BITBIGSFRllllhl     37      0       0      50        0.0%
BITBIGSFRllllhl     31      0       0      48        0.0%
BITBIGSFRllllll     2A      0       0      61        0.0%
BITBIGSFRllllll     26      0       0      68        0.0%
BITBIGSFRllllll     20      0       0      53        0.0%
BITBIGSFRllllll     1E      0       0      55        0.0%
BITBIGSFRhhhl       1B      0       0      33        0.0%
BITBIGSFRhlllh      17      0       0      38        0.0%
BITBIGSFRllllhh     14      0       0      45        0.0%
BITBIGSFRhhll       13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      56        0.0%
BITBIGSFRhlhh        E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRllllll      C      0       0      54        0.0%
BITBIGSFRllllll      9      0       0      65        0.0%
BITBIGSFRllllhl      8      0       0      51        0.0%
BITBIGSFRllllll      6      0       0      67        0.0%
BITBIGSFRllllll      6      0       0      60        0.0%
BITBIGSFRllllhh      6      0       0      47        0.0%
BITBIGSFRhllll       6      0       0      39        0.0%
BITBIGSFRllllll      5      0       0      63        0.0%
BITBIGSFRllllll      5      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      62        0.0%
BITBIGSFRllllll      3      0       0      64        0.0%
BITBIGSFRllllhh      3      0       0      46        0.0%
BITBIGSFRllllll      3      0       0      58        0.0%
BITBIGSFRllllhl      2      0       0      49        0.0%
BITBIGSFRhllh        2      0       0      37        0.0%
BITBIGSFRhlhl        1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      57        0.0%
BITBIGSFRlllhh       1      0       0      43        0.0%
BITBIGSFRllllll      1      0       0      66        0.0%
BITBIGSFRlllllh      1      0       0      52        0.0%
BITBIGSFRlllhl       1      0       0      44        0.0%
BITBIGSFRlhlh        1      0       0      40        0.0%
BITBIGSFRllh         1      0       0      42        0.0%
BITBIGSFRlhll        1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25E      69        0.0%
DATA                 0      0     25E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 15 16:41:44 2024

                      is_white@factorL 0098                        is_white@factorR 0096  
                     logAction@newTime 0002                     logAction@newAction 000A  
                       _color_read_Red 4408                           ___fldiv@aexp 0041  
                         ___fldiv@bexp 0040                     fullSpeedBack@power 0017  
                         ___fldiv@sign 0039                        _color_read_Blue 44F8  
                                   l91 4C44                                     l85 495A  
                                   l94 4456                                     l88 4CD6  
                                   l97 44A6                           ___awdiv@sign 0007  
                                   bsr 0FE0                    ___wmul@multiplicand 0004  
                      moveLightBlue@mL 001D                        moveLightBlue@mR 001E  
                   convert_rgb2hue@max 0098                     convert_rgb2hue@hue 009C  
                   convert_rgb2hue@min 0090                       _color_read_Clear 44A8  
                     _color_read_Green 4458                                    l100 4546  
                                  l103 44F6                                    l200 4BD6  
                                  l120 1180                                    l130 1272  
                                  l114 1106                                    l106 38C2  
                                  l203 4BD8                                    l212 4D0C  
                                  l140 1598                                    l132 1282  
                                  l116 1116                                    l221 46E4  
                                  l141 15B4                                    l206 4BFE  
                                  l126 1208                                    l118 1170  
                                  l215 4CF8                                    l136 1520  
                                  l128 1218                                    l209 4D02  
                                  l153 24D4                                    l314 4C9A  
                                  l218 4CE2                                    l162 39A4  
                   logAction@path_step 0006                                    l403 410A  
                                  l413 4188                                    l173 3A7C  
                                  l423 427C                                    l159 24DC  
                                  l167 3A24                                    l408 4206  
                                  l432 4AB8                                    l504 4C9E  
                                  l441 4B7C                                    l513 498C  
                                  l169 3A16                                    l418 3B46  
                                  l426 4AEA                                    l435 4A22  
                                  l507 4CB2                                    l444 49BE  
                                  l429 4B1C                                    l438 4B4C  
                                  l392 3390                                    l385 407C  
                                  l395 4592                                    l740 33D4  
                                  l742 33E2                                    l806 48A8  
                                  l646 43B4                                    l662 323C  
                                  l558 4C62                                    l743 3414  
                                  l495 4C80                                    l903 434A  
                                  l752 34C2                                    l904 435A  
                                  l656 323C                                    l745 3422  
                                  l737 3398                                    l809 48BE  
                                  l665 479E                                    l746 3454  
                                  l595 4BAC                                    l755 4CEE  
                                  l739 33A6                                    l748 3462  
                                  l668 2F84                                    l749 349C  
                                  l782 274E                                    l774 2710  
                                  l758 2508                                    l862 4A86  
                                  l598 3F56                                    l678 2F86  
                                  l791 2968                                    l767 2722  
                                  l871 49F0                                    l792 28D8  
                                  l768 2692                                    l856 4812  
                                  l880 4CC8                                    l793 28AE  
                                  l769 2668                                    l865 47D8  
                                  l874 4A54                                    l859 4886  
                                  l971 35CE                                    l892 4C24  
                                  l868 484C                                    l877 4762  
                                  l885 43EC                                    l798 2956  
                                  l886 4406                                    l889 461E  
                                  _abs 48F4                                    _pad 3F58  
                  convert_rgb2hue@cMax 004C                           ___awmod@sign 0007  
                  convert_rgb2hue@diff 0094                                    wreg 0FE8  
                         ___flmul@aexp 0021                           ___flmul@bexp 0022  
                         ___flmul@sign 001C                           ___flmul@temp 0027  
                         ___flmul@prod 0023                            main@factorL 00B2  
                          main@factorR 00B0                     is_white@clear_norm 009C  
                         ___fltol@exp1 004B                                   l1123 3C0A  
                                 ?_abs 0008                                   l1151 3E12  
                                 l1136 3CBA                                   l1162 37D8  
                                 l1420 17A4                                   l1421 1792  
                                 l1157 3792                                   l1510 1E9E  
                                 l1422 1758                                   l4000 4260  
                                 l1513 1D30                                   l1506 1B3A  
                                 l4010 1A82                                   l4002 4888  
                                 l1523 1E60                                   l1515 1DA8  
                                 l1611 2E1C                                   l1516 1D96  
                                 l4100 1D52                                   l4020 1AC2  
                                 l4012 1A90                                   l4004 4894  
                                 l1189 36D4                                   l1437 18BE  
                                 l1429 1A74                                   l4110 1DC4  
                                 l4102 1D60                                   l4030 1AF2  
                                 l4022 1AC8                                   l4014 1A92  
                                 l1550 2B1C                                   l1390 42F0  
                                 l1446 198E                                   l1462 45D8  
                                 l4006 48A4                                   l1383 42E8  
                                 l1447 197C                                   l1615 3D60  
                                 l4120 1E2E                                   l4112 1DD2  
                                 l4104 1D8E                                   l4040 1B2A  
                                 l4032 1AF4                                   l4024 1AD8  
                                 l4016 1AA2                                   l4008 1A76  
                                 l4200 2A40                                   l1640 46A2  
                                 l5000 0FCE                                   l1561 2AB4  
                                 l4130 1E84                                   l4122 1E48  
                                 l4114 1DFC                                   l4050 1B7A  
                                 l4042 1B4A                                   l4034 1B04  
                                 l4026 1ADE                                   l4018 1AB2  
                                 l4210 2AA4                                   l4202 2A42  
                                 l1554 2A58                                   l1634 2CA4  
                                 l1570 48F2                                   l1474 2238  
                                 l5010 10C0                                   l5002 0FF2  
                                 l1547 29C0                                   l1619 3D68  
                                 l4124 1E64                                   l4132 1E8A  
                                 l4108 1DB8                                   l4116 1E00  
                                 l4060 1BCA                                   l4052 1B84  
                                 l4044 1B5A                                   l4036 1B14  
                                 l4028 1AE4                                   l4140 35E6  
                                 l4220 2AFC                                   l4212 2AC2  
                                 l4204 2A4E                                   l4300 46A6  
                                 l1644 490E                                   l1476 2098  
                                 l5100 3938                                   l5020 11C2  
                                 l5012 10F2                                   l5004 1026  
                                 l1485 20DE                                   l4134 1E8E  
                                 l4126 1E74                                   l4118 1E1A  
                                 l4070 1C0C                                   l4062 1BD6  
                                 l4054 1B9A                                   l4038 1B24  
                                 l4150 3636                                   l4222 2B0A  
                                 l4214 2AC4                                   l4206 2A8A  
                                 l4310 46E2                                   l4302 46AA  
                                 l5110 3F30                                   l1670 4D0E  
                                 l1590 3F8E                                   l5102 399C  
                                 l5030 12F8                                   l5022 11F4  
                                 l5014 112A                                   l5006 105A  
                                 l1647 4926                                   l1487 2156  
                                 l1479 205C                                   l4128 1E82  
                                 l4080 1C6E                                   l4072 1C1C  
                                 l4064 1BE4                                   l4056 1BA6  
                                 l4048 1B6E                                   l4160 3660  
                                 l4152 363A                                   l4144 35FA  
                                 l4224 2B0C                                   l4216 2AC8  
                                 l4208 2A96                                   l4304 46B2  
                                 l4400 160C                                   l5200 2250  
                                 l5112 3F4E                                   l5120 2E1E  
                                 l1488 2144                                   l5040 145E  
                                 l5032 130E                                   l5024 122C  
                                 l5016 115C                                   l5008 108E  
                                 l1593 3FCC                                   l4090 1D16  
                                 l4082 1C8A                                   l4074 1C36  
                                 l4066 1BF0                                   l4058 1BBE  
                                 l4170 3688                                   l4162 366A  
                                 l4154 3648                                   l4146 3624  
                                 l4138 35D0                                   l4218 2AEC  
                                 l4330 3B16                                   l4322 3AA2  
                                 l4314 3A7E                                   l4306 46BA  
                                 l4410 163C                                   l4402 161C  
                                 l5210 22A0                                   l5202 2266  
                                 l5114 3F52                                   l5106 3EBE  
                                 l5130 2E78                                   l5122 2E2A  
                                 l5042 1490                                   l5034 1340  
                                 l5026 125E                                   l5018 1190  
                                 l1659 3EBC                                   l1667 4724  
                                 l1595 3FEC                                   l4092 1D20  
                                 l4084 1CB4                                   l4076 1C46  
                                 l4068 1C00                                   l4172 3694  
                                 l4164 3674                                   l4148 3626  
                                 l4332 3B26                                   l4324 3AAC  
                                 l4316 3A9A                                   l4308 46E0  
                                 l4500 1812                                   l4420 167C  
                                 l4412 164A                                   l4404 1622  
                                 l4340 4AC6                                   l5060 485A  
                                 l5052 47DA                                   l5212 22B6  
                                 l5204 227A                                   l5108 3ED6  
                                 l5140 2F32                                   l5132 2E96  
                                 l5124 2E3E                                   l5036 139C  
                                 l5044 1520                                   l5028 1292  
                                 l5310 4C94                                   l4094 1D2E  
                                 l4086 1CEA                                   l4078 1C62  
                                 l4174 36A4                                   l4190 29E6  
                                 l4182 296C                                   l3702 4C00  
                                 l4334 3B2A                                   l4326 3B06  
                                 l4510 1858                                   l4502 1820  
                                 l4430 16B6                                   l4422 167E  
                                 l4414 164C                                   l4406 1634  
                                 l4350 4AF8                                   l4342 4AD2  
                                 l5150 492C                                   l5062 4872  
                                 l5070 4A24                                   l5054 47E6  
                                 l5230 2358                                   l5214 22CC  
                                 l5222 2302                                   l5206 2298  
                                 l5142 2F62                                   l5134 2ED2  
                                 l5126 2E4A                                   l3710 3B4C  
                                 l1598 2D04                                   l5046 1554  
                                 l5038 13CE                                   l5312 4C96  
                                 l4096 1D40                                   l4088 1CF8  
                                 l4176 36B4                                   l4184 297C  
                                 l3800 42BC                                   l3704 4C1C  
                                 l4328 3B0E                                   l5400 33FC  
                                 l4520 18D4                                   l4512 188C  
                                 l4504 1822                                   l4440 16CA  
                                 l4432 16BA                                   l4416 165C  
                                 l4424 1686                                   l4408 1636  
                                 l4352 4B04                                   l4344 4ADE  
                                 l4336 4ABA                                   l5152 4936  
                                 l4360 4AAC                                   l5064 4A56  
                                 l5072 4A30                                   l5056 47FE  
                                 l5080 47C4                                   l5240 2394  
                                 l5224 2318                                   l5216 22E0  
                                 l5208 2298                                   l5320 4C70  
                                 l5136 2F02                                   l5128 2E5A  
                                 l3720 3B7C                                   l3712 3B5A  
                                 l5048 1564                                   l5160 37DA  
                                 l5314 4C98                                   l5306 4C82  
                                 l5330 4B86                                   l4098 1D4E  
                                 l4178 36C4                                   l4194 29FA  
                                 l4186 298A                                   l3802 42D2  
                                 l4290 4CDE                                   l5410 3468  
                                 l5402 3412                                   l4530 1910  
                                 l4522 18E4                                   l4514 188E  
                                 l4506 182C                                   l4450 16DE  
                                 l4442 16CE                                   l4434 16BE  
                                 l4426 1696                                   l4418 166C  
                                 l4354 4B10                                   l4346 4AEC  
                                 l4338 4ABA                                   l5154 4946  
                                 l4602 435E                                   l5066 4A62  
                                 l5058 484E                                   l4370 4B2A  
                                 l5074 4A48                                   l4362 49F2  
                                 l5082 49C0                                   l4610 49B2  
                                 l5090 4820                                   l5250 23E2  
                                 l5242 23B2                                   l5226 232E  
                                 l5234 235C                                   l5218 22FE  
                                 l5322 4C7A                                   l5146 2F7A  
                                 l5138 2F12                                   l3730 3BAA  
                                 l3722 3B80                                   l3714 3B62  
                                 l5170 380E                                   l5162 37E0  
                                 l5308 4C8C                                   l5340 4B9A  
                                 l5332 4B90                                   l4196 2A02  
                                 l4188 29D0                                   l3804 42DA  
                                 l4284 4CFA                                   l4292 4CF0  
                                 l5420 34AA                                   l5412 3480  
                                 l5404 3424                                   l4540 193C  
                                 l4532 1912                                   l4516 189E  
                                 l4508 1832                                   l4460 16F2  
                                 l4452 16E2                                   l4444 16D2  
                                 l4436 16C2                                   l4428 16A8  
                                 l4348 4AEC                                   l5500 28E6  
                                 l5156 4950                                   l5148 4928  
                                 l4604 4374                                   l4356 4A88  
                                 l5068 4A7A                                   l4372 4B40  
                                 l4364 49FE                                   l5084 49CC  
                                 l5092 4838                                   l5076 47A0  
                                 l5260 242E                                   l5252 23F6  
                                 l5236 2372                                   l5228 233A  
                                 l5324 4C7C                                   l5316 4C64  
                                 l4700 4770                                   l4380 4C9E  
                                 l4620 4976                                   l4612 495C  
                                 l3740 3BDE                                   l3732 3BB8  
                                 l3724 3B88                                   l3716 3B66  
                                 l3708 3B48                                   l3900 3CEA  
                                 l5180 3844                                   l5172 3810  
                                 l5164 37F8                                   l5342 4B9C  
                                 l5334 4B92                                   l4198 2A0E  
                                 l3806 42DC                                   l3830 323E  
                                 l5350 4CE4                                   l3910 4BD8  
                                 l4286 4CFE                                   l4294 4CF4  
                                 l5414 3496                                   l5406 343C  
                                 l4550 1974                                   l4534 1920  
                                 l4526 18F8                                   l4542 193E  
                                 l4518 18AE                                   l4470 1750  
                                 l4454 16E6                                   l4446 16D6  
                                 l4438 16C6                                   l4462 16F6  
                                 l4390 15D2                                   l5502 28FE  
                                 l5430 2526                                   l5422 24DE  
                                 l5158 4CCA                                   l4374 4B4E  
                                 l4358 4A94                                   l4366 4A16  
                                 l5086 49E4                                   l4606 498E  
                                 l5078 47AC                                   l5262 2444  
                                 l5270 2472                                   l5254 2414  
                                 l5238 2388                                   l5246 23B6  
                                 l5326 4C7E                                   l5318 4C6E  
                                 l5510 4CC6                                   l4710 474A  
                                 l4702 477C                                   l4382 4CAE  
                                 l4614 4960                                   l3742 3BE4  
                                 l3734 3BBE                                   l3726 3B9A  
                                 l3718 3B74                                   l3902 3CF2  
                                 l5094 38C4                                   l5190 3890  
                                 l5182 385C                                   l5174 383E  
                                 l5166 380A                                   ?_pad 0010  
                                 l5344 4B9E                                   l5336 4B96  
                                 l5328 4B7E                                   l3808 42E2  
                                 l3840 32FA                                   l3832 3258  
                                 l3920 40A0                                   l3912 4BE8  
                                 l4296 4D04                                   l4288 4CDA  
                                 l5416 3498                                   l5408 3452  
                                 l4560 19F2                                   l4536 1928  
                                 l4528 1902                                   l4544 194C  
                                 l4480 1786                                   l4472 1766  
                                 l4464 16FA                                   l4456 16EA  
                                 l4448 16DA                                   l4392 15E2  
                                 l4384 15B6                                   l5440 257E  
                                 l5432 253E                                   l4376 4B5A  
                                 l4368 4B1E                                   l4608 499A  
                                 l5088 4814                                   l5272 2488  
                                 l5264 2450                                   l5248 23CC  
                                 l5360 404C                                   l5352 3FEE  
                                 l4720 4320                                   l4712 4756  
                                 l4704 4788                                   l4640 3124  
                                 l4616 496C                                   l3736 3BD4  
                                 l3728 3BA2                                   l3744 3BEA  
                                 l3760 3C2A                                   l3752 3C0C  
                                 l3680 3E14                                   l3904 3D0E  
                                 l4800 1F52                                   l5096 38D0  
                                 l5520 43FA                                   l5512 43B6  
                                 l5192 38A6                                   l5184 3872  
                                 l5176 3840                                   l5168 380C  
                                 l5346 4BA0                                   l5338 4B98  
                                 l3842 3314                                   l3834 32A6  
                                 l3922 40B6                                   l3930 40DE  
                                 l3914 407E                                   l5522 45DA  
                                 l4298 4D08                                   l5418 349A  
                                 l4570 1A38                                   l4554 199E  
                                 l4562 19F4                                   l4546 1950  
                                 l4538 192C                                   l4490 17D6  
                                 l4482 1790                                   l4474 1772  
                                 l4466 1724                                   l4458 16EE  
                                 l4394 15F2                                   l4386 15C2  
                                 l5450 25EA                                   l5442 258C  
                                 l5434 2544                                   l4378 4B70  
                                 l5274 249E                                   l5266 246E  
                                 l5258 2418                                   l5282 24D4  
                                 l5370 406E                                   l5362 4056  
                                 l5354 3FFE                                   l5506 4CB4  
                                 l4730 34E6                                   l4722 432A  
                                 l4714 42F2                                   l4706 4726  
                                 l4642 3130                                   l4634 30E8  
                                 l4618 496E                                   l3746 3BFA  
                                 l3738 3BDC                                   l3770 3C62  
                                 l3762 3C38                                   l3754 3C10  
                                 l3826 48F4                                   l3690 3E8C  
                                 l3682 3E24                                   l3906 3D2E  
                                 l4810 1F92                                   l4802 1F54  
                                 l5098 3904                                   l5514 43C2  
                                 l5194 38BA                                   l5186 3874  
                                 l5178 3842                                   l5348 4BA2  
                                 l3844 3354                                   l3836 32B8  
                                 l3932 40F4                                   l3924 40BE  
                                 l3916 4082                                   l5524 45E6  
                                 l4580 1A62                                   l4572 1A46  
                                 l4564 1A04                                   l4556 19AA  
                                 l4548 195E                                   l4492 17E6  
                                 l4484 17B2                                   l4476 1776  
                                 l4468 1740                                   l4396 1602  
                                 l4388 15D0                                   l3940 41B4  
                                 l5460 26B8                                   l5452 25F8  
                                 l5444 25A2                                   l5436 2560  
                                 l5428 2512                                   l5276 24B2  
                                 l5372 4070                                   l5364 4058  
                                 l5356 4024                                   l5508 4CBA  
                                 l4740 351C                                   l4732 34EA  
                                 l4724 34C4                                   l4716 4302  
                                 l4708 4732                                   l4636 30F8  
                                 l4644 3140                                   l3748 3C02  
                                 l3772 3C70                                   l3780 3C9A  
                                 l3764 3C40                                   l3756 3C1E  
                                 l3828 4902                                   l3684 3E34  
                                 l5700 2CC6                                   l3908 3D36  
                                 l4820 1FC2                                   l4812 1F9A  
                                 l4804 1F5C                                   l5516 43D6  
                                 l5188 3876                                   l5380 455E  
                                 l3790 4286                                   l3838 32BC  
                                 l3926 40C6                                   l3918 4098  
                                 l5526 45FC                                   l5390 3392  
                                 l4582 1A64                                   l4574 1A4C  
                                 l4566 1A14                                   l4558 19B8  
                                 l4494 17F4                                   l4486 17C2  
                                 l4478 1784                                   l4398 1604  
                                 l3950 41D4                                   l3934 418A  
                                 l5470 2758                                   l5454 2610  
                                 l5446 25CE                                   l5438 2570  
                                 l5278 24D0                                   l5198 223A  
                                 l5374 407A                                   l5366 4062  
                                 l5358 4028                                   l4750 355E  
                                 l4742 3532                                   l4734 34F8  
                                 l4726 34C8                                   l4718 4310  
                                 l4646 3152                                   l4654 316A  
                                 l4638 310C                                   l3782 3CAA  
                                 l3774 3C86                                   l3766 3C52  
                                 l3758 3C26                                   l3686 3E3E  
                                 l5710 2D00                                   l5702 2CD6  
                                 l4830 2000                                   l4822 1FC2  
                                 l4814 1F9E                                   l4806 1F6C  
                                 l5518 43EE                                   l5382 4566  
                                 l3792 4298                                   l3928 40CE  
                                 l5392 33A8                                   l4576 1A4E  
                                 l4568 1A34                                   l4496 1802  
                                 l3952 41DC                                   l3936 41A4  
                                 l5480 27B6                                   l5472 276C  
                                 l5464 2724                                   l3960 4126  
                                 l5456 2676                                   l5448 25DA  
                                 l5368 4064                                   l4752 357C  
                                 l4744 353A                                   l4760 359E  
                                 l4736 3508                                   l4728 34D6  
                                 l4680 31F0                                   l4656 317C  
                                 l4664 318C                                   l3784 3CB2  
                                 l3776 3C8E                                   l3768 3C5A  
                                 l3688 3E5A                                   l5720 2D52  
                                 l5712 2D0C                                   l5704 2CDC  
                                 l5800 4662                                   l4840 204C  
                                 l4832 2010                                   l4808 1F82  
                                 l4920 3DE6                                   l4912 3D6A  
                                 l5384 457A                                   l5376 4548  
                                 l3794 42A0                                   l5394 33C0  
                                 l4578 1A54                                   l4498 180E  
                                 l4906 4594                                   l3954 41EC  
                                 l3946 41BC                                   l3938 41AC  
                                 l5490 2820                                   l5482 27C4  
                                 l5474 2784                                   l3970 413E  
                                 l3962 412E                                   l5458 26A0  
                                 l4762 35AE                                   l4754 358C  
                                 l4746 3546                                   l4738 350C  
                                 l4682 3202                                   l4690 3212  
                                 l4666 319E                                   l4674 31AE  
                                 l3778 3C94                                   l5730 2DB0  
                                 l5722 2D58                                   l5714 2D16  
                                 l5706 2CEC                                   l5802 466A  
                                 l5810 48C0                                   l4850 2096  
                                 l4842 205A                                   l4834 2020  
                                 l4826 1FD6                                   l4818 1FB2  
                                 l4770 1EAC                                   l4922 3E0A  
                                 l4914 3D98                                   l4930 3704  
                                 l5386 4582                                   l5378 4556  
                                 l3796 42A8                                   l3788 427E  
                                 l4596 44A8                                   l5396 33D2  
                                 l4908 45A4                                   l3956 41F0  
                                 l3948 41CC                                   l5492 2830  
                                 l5484 27D2                                   l5476 278A  
                                 l3980 4172                                   l3972 414E  
                                 l3964 4136                                   l4764 35BE  
                                 l4756 358E                                   l4748 3554  
                                 l4692 3224                                   l4676 31C0  
                                 l5740 2E00                                   l5732 2DCA  
                                 l5716 2D1C                                   l5724 2D74  
                                 l5708 2CF8                                   l5804 467A  
                                 l5812 48C8                                   l4860 20DC  
                                 l4852 20A8                                   l4844 2066  
                                 l4836 2028                                   l4828 1FF0  
                                 l4780 1EEC                                   l4772 1EBA  
                                 l4924 3E10                                   l4916 3DA8  
                                 l4940 3772                                   l4932 3714  
                                 l5388 458A                                   l3798 42B6  
                                 l4598 44EE                                   l5398 33E4  
                                 l5494 283E                                   l5486 27E8  
                                 l5478 27A6                                   l3974 4156  
                                 l3958 410C                                   l4950 4BAE  
                                 l3990 4228                                   l3982 4208  
                                 l4758 3598                                   l4678 31D4  
                                 l5670 46E6                                   l5726 2D8E  
                                 l5734 2DDA                                   l5718 2D4E  
                                 l5750 2B5A                                   l5806 469A  
                                 l5814 48D0                                   l5822 4C46  
                                 l5830 39D4                                   l4870 213C  
                                 l4854 20BE                                   l4862 20EE  
                                 l4846 2084                                   l4838 2038  
                                 l4790 1F12                                   l4782 1EEE  
                                 l4774 1EBC                                   l4918 3DD6  
                                 l4942 3780                                   l4934 3742  
                                 l5496 2856                                   l5488 2814  
                                 l3976 415E                                   l4960 4BC4  
                                 l4952 4BB8                                   l3992 423C  
                                 l3984 4220                                   l4696 4764  
                                 l5672 46F2                                   l5680 3F68  
                                 l5736 2DEA                                   l5728 2DA0  
                                 l3896 3CBC                                   l5752 2B5E  
                                 l5744 2B1E                                   l5816 48D8  
                                 l5824 4C5A                                   l5840 3A4A  
                                 l5832 39EA                                   l4880 21AA  
                                 l4864 20FC                                   l4856 20C4  
                                 l4848 2086                                   l4792 1F20  
                                 l4776 1ECC                                   l4784 1EF6  
                                 l4768 1EA0                                   l4944 37D0  
                                 l4936 3752                                   l4928 36D6  
                                 l4970 4458                                   l5498 28BC  
                                 l3978 416E                                   l4954 4BBE  
                                 l4962 4C28                                   l3994 4244  
                                 l4698 4764                                   l5674 4700  
                                 l5690 3FAE                                   l5682 3F78  
                                 l5738 2DF0                                   l3898 3CC4  
                                 l5770 2BE8                                   l5762 2B7E  
                                 l5754 2B66                                   l5746 2B44  
                                 l5818 48E8                                   l5842 3A4A  
                                 l5834 3A00                                   l5826 39A6  
                                 l4890 2214                                   l4874 2166  
                                 l4882 21AE                                   l4866 2100  
                                 l4858 20CE                                   l4794 1F22  
                                 l4786 1F06                                   l4778 1EDC  
                                 l4946 37D6                                   l4938 3760  
                                 l5850 2F96                                   l4972 449E  
                                 l4964 4408                                   l4956 4BC0  
                                 l3996 424C                                   l5676 4704  
                                 l5692 3FDC                                   l5684 3F86  
                                 l5780 2C54                                   l5772 2BF2  
                                 l5932 2BA6                                   l5756 2B6A  
                                 l5764 2BB4                                   l5748 2B4C  
                                 l5844 3A56                                   l5836 3A38  
                                 l5828 39BE                                   l4892 2218  
                                 l4884 21C8                                   l4876 2172  
                                 l4868 210E                                   l4796 1F32  
                                 l4788 1F0C                                   l5860 2FAA  
                                 l5852 2F9A                                   l4966 444E  
                                 l4958 4BC2                                   l3998 425C  
                                 l5686 3F9A                                   l5678 3F58  
                                 l5694 2CA6                                   l5782 2C5E  
                                 l5774 2BFC                                   l5766 2BC4  
                                 l5758 2B76                                   l5790 2C7E  
                                 l5838 3A44                                   l4894 2226  
                                 l4886 21DE                                   l4878 2180  
                                 l4798 1F42                                   l4990 0ECA  
                                 l4982 0E24                                   l5870 2FFA  
                                 l5862 2FB6                                   l5854 2F9E  
                                 l5846 2F88                                   l4976 44F8  
                                 l5688 3FAA                                   l5696 2CAA  
                                 l5776 2C1C                                   l5768 2BD8  
                                 l4896 222C                                   l4888 21F8  
                                 l4992 0EFE                                   l4984 0E36  
                                 l5880 304E                                   l5872 3006  
                                 l5864 2FCA                                   l5856 2FA2  
                                 l5848 2F92                                   l4978 453E  
                                 l5698 2CBE                                   l5786 2C72  
                                 l5778 2C3C                                   l4898 222E  
                                 l4994 0F32                                   l4986 0E66  
                                 l5882 305E                                   l5874 3024  
                                 l5866 2FD2                                   l5858 2FA6  
                                 l4996 0F66                                   l4988 0E96  
                                 l5884 306A                                   l5876 302A  
                                 l5868 2FE6                                   l4998 0F9A  
                                 l5886 307E                                   l5878 3042  
                                 l5888 30B4                                   STR_1 0E01  
                                 STR_2 0E16                                   u3000 4188  
                                 u3001 4184                                   u3010 427C  
                                 u3011 4278                                   u3100 1B5A  
                                 u3020 48BE                                   u3101 1B56  
                                 u3021 48BA                                   u3110 1CD4  
                                 u3030 1A90                                   u3031 1A8C  
                                 u3200 1E48                                   u3120 1D2E  
                                 u3040 1AA2                                   u4000 34F8  
                         _BAUD4CONbits 0EE9                                   u3201 1E44  
                                 u3121 1D2A                                   u3041 1A9E  
                                 u4001 34F4                                   u3210 1E82  
                                 u3130 1D4E                                   u3050 1AB2  
                                 u4010 3532                                   u3211 1E7E  
                                 u3131 1D4A                                   u3115 1CCA  
                                 u3051 1AAE                                   u4011 352E  
                                 u3140 1D60                                   u3060 1AF2  
                                 u3220 35E6                                   u3300 298A  
                                 u4020 3554                                   u4100 1F42  
                                 u3141 1D5C                                   u3061 1AEE  
                                 u3221 35E2                                   u3301 2986  
                                 u4021 3550                                   u4101 1F3E  
                                 u3150 1D8E                                   u3070 1B04  
                                 u3230 361A                                   u3310 29E6  
                                 u4030 357C                                   u4110 1F82  
                                 u3151 1D8A                                   u3071 1B00  
                                 u3311 29E2                                   u4031 3578  
                                 u4111 1F7E                                   u3160 1DA4  
                                 u3080 1B14                                   u3240 3648  
                                 u3320 2A3C                                   u4040 35AE  
                                 u2600 3B74                                   u4200 210E  
                                 u4120 1FC2                                   u3161 1DA0  
                                 u3081 1B10                                   u3241 3644  
                                 u3321 2A38                                   u4041 35AA  
                                 u2601 3B70                                   u4201 210A  
                                 u4121 1FBE                                   u3170 1DB8  
                                 u3090 1B4A                                   u3250 365C  
                                 u3330 2A86                                   u2610 3B9A  
                                 u4210 213C                                   u4130 2038  
                                 u4050 1EBA                                   _T2PR 0FBC  
                                 u3171 1DB4                                   u3091 1B46  
                                 u3251 3658                                   u3235 3610  
                                 u3331 2A82                                   u2611 3B96  
                                 u4211 2138                                   u4131 2034  
                                 u4051 1EB6                                   u3180 1DD2  
                                 u3260 3684                                   u3340 2AA4  
                                 u3500 15F2                                   u2620 3BB8  
                                 u2700 3CAA                                   u2540 3E24  
                                 u5100 2CBC                                   u4220 2152  
                                 u4140 205A                                   u4060 1ECC  
                                 u4300 3E0A                                   u3181 1DCE  
                                 u3261 3680                                   u3341 2AA0  
                                 u3501 15EE                                   u2621 3BB4  
                                 u2701 3CA6                                   u2541 3E20  
                                 u4221 214E                                   u4141 2056  
                                 u4061 1EC8                                   u4301 3E06  
                                 u3190 1E1A                                   u3270 36A4  
                                 u3350 2AB4                                   u2710 4298  
                                 u3510 1634                                   u2630 3BD4  
                                 u2550 3E34                                   u5110 2CD6  
                                 u4230 2166                                   u4150 2084  
                                 u4070 1EDC                                   u4310 3704  
                                 u3191 1E16                                   u3271 36A0  
                                 u3351 2AB0                                   u2711 4294  
                                 u3511 1630                                   u2631 3BD0  
                                 u2551 3E30                                   u5111 2CD2  
                                 u4231 2162                                   u4151 2080  
                                 u4071 1ED8                                   u4311 3700  
                                 u3280 36B4                                   u3360 2AC2  
                                 u2720 42B6                                   u2800 3314  
                                 u3440 46CE                                   u3600 1766  
                                 u3520 164A                                   u2640 3BFA  
                                 u2560 3E5A                                   u5040 4724  
                                 u5120 2CEC                                   u5200 2BC4  
                                 u4240 2180                                   u4160 20A8  
                                 u4080 1F20                                   u4320 3742  
                                 u4400 11F4                                   u3281 36B0  
                                 u3361 2ABE                                   u2721 42B2  
                                 u2801 3310                                   u3441 46C6  
                                 u3601 1762                                   u3521 1646  
                                 u2641 3BF6                                   u2561 3E56  
                                 u5041 4720                                   u5121 2CE8  
                                 u5201 2BC0                                   u4241 217C  
                                 u4161 20A4                                   u4081 1F1C  
                                 u4321 373E                                   u4401 11F0  
                                 u3370 2AFC                                   u3290 297C  
                                 u2730 42D2                                   u3610 1784  
                                 u3530 165C                                   u2650 3C1E  
                                 u2570 3E8C                                   u5050 3F68  
                                 u5130 2D8E                                   u5210 2BE8  
                                 u4250 21C8                                   u4170 20BE  
                                 u4090 1F32                                   u4330 3760  
                                 u4410 125E                                   u3371 2AF8  
                                 u3291 2978                                   u2731 42CE  
                                 u3611 1780                                   u3531 1658  
                                 u2651 3C1A                                   u2571 3E88  
                                 u5051 3F64                                   u5131 2D8A  
                                 u5211 2BE4                                   u4251 21C4  
                                 u4171 20BA                                   u4091 1F2E  
                                 u4331 375C                                   u4411 125A  
                                 u3380 2B0A                                   u3460 3B46  
                                 u3700 18D4                                   u3620 17A4  
                                 u3540 166C                                   u4500 2F12  
                                 u2660 3C38                                   u5060 3F86  
                                 u5140 2DA0                                   u5220 2C1C  
                                 u5300 3A24                                   u4260 21F8  
                                 u4180 20DC                                   u4340 3780  
                                 u4420 12F8                                   u3381 2B06  
                                 u3461 3B42                                   u3701 18D0  
                                 u3621 17A0                                   u3541 1668  
                                 u4501 2F0E                                   u2661 3C34  
                                 u5061 3F82                                   u5141 2D9C  
                                 u5221 2C18                                   u5301 3A20  
                                 u4261 21F4                                   u4181 20D8  
                                 u4341 377C                                   u4421 12F4  
                                 u3710 18E4                                   u3630 17B2  
                                 u3550 16A8                                   u4510 2F76  
                                 u3470 4CAE                                   u2590 3B5A  
                                 u2670 3C52                                   u5070 3FCC  
                                 u5150 2DB0                                   u2910 3CEA  
                                 u5230 2C3C                                   u5310 3A38  
                                 u4270 2226                                   u4190 20FC  
                                 u4350 37D0                                   u4430 1340  
                                 u3711 18E0                                   u3631 17AE  
                                 u3551 16A4                                   u4511 2F72  
                                 u3471 4CAA                                   u2591 3B56  
                                 u2671 3C4E                                   u5071 3FC8  
                                 u5151 2DAC                                   u2911 3CE6  
                                 u5231 2C38                                   u5311 3A34  
                                 u4271 2222                                   u4191 20F8  
                                 u4351 37CC                                   u4431 133C  
                                 u3800 19B8                                   u3720 1910  
                                 u3640 17C2                                   u3560 16B6  
                                 u3480 15D0                                   u4600 23CC  
                                 u4520 2250                                   u2680 3C70  
                                 u5080 3FDC                                   u5160 2DCA  
                                 u2920 3D60                                   u5240 469A  
                                 u4280 3D98                                   u4440 13CE  
                                 u4360 10C0                                   u3801 19B4  
                                 u3721 190C                                   u3641 17BE  
                                 u3561 16B2                                   u3481 15CC  
                                 u4601 23C8                                   u4521 224C  
                                 u2681 3C6C                                   u5081 3FD8  
                                 u5161 2DC6                                   u2921 3D5C  
                                 u5241 4696                                   u4281 3D94  
                                 u4441 13CA                                   u4361 10BC  
                                 u2930 4BE8                                   u3458 46D0  
                                 u3810 19F2                                   u3730 1920  
                                 u3650 17F4                                   u3570 1724  
                                 u3490 15E2                                   u4610 23E2  
                                 u4530 2266                                   u2690 3C86  
                                 u5170 2DDA                                   u5090 2CBA  
                                 u5250 39BE                                   u4290 3DD6  
                                 u4450 1490                                   u4370 10F2  
                                 u2931 4BE4                                   u3811 19EE  
                                 u3731 191C                                   u3651 17F0  
                                 u3571 1720                                   u3491 15DE  
                                 u4611 23DE                                   u4531 2262  
                                 u2691 3C82                                   u5171 2DD6  
                                 u5091 2CB4                                   u5251 39BA  
                                 u4291 3DD2                                   u4451 148C  
                                 u4371 10EE                                   u2940 4BFE  
                                 u3820 1A04                                   u3740 193C  
                                 u3660 1802                                   u3580 173C  
                                 u4620 242E                                   u4540 22B6  
                                 u3900 30F8                                   u2780 4902  
                                 u5180 2DEA                                   u5260 39D4  
                                 u4460 1564                                   u4380 115C  
                                 u2941 4BFA                                   u3821 1A00  
                                 u3741 1938                                   u3661 17FE  
                                 u3581 1736                                   u4621 242A  
                                 u4541 22B2                                   u3901 30F4  
                                 u2781 48FE                                   u5181 2DE6  
                                 u5261 39D0                                   u4461 1560  
                                 u4381 1158                                   u2790 3258  
                                 u2950 4098                                   u3830 1A14  
                                 u3750 194C                                   u3670 1820  
                                 u3590 173E                                   u4630 2444  
                                 u4550 22CC                                   u3910 3152  
                                 u4470 2E3E                                   u5190 2B44  
                                 u5270 39EA                                   u4390 11C2  
                                 u2791 3254                                   u2951 4094  
                                 u3831 1A10                                   u3751 1948  
                                 u3671 181C                                   u4631 2440  
                                 u4551 22C8                                   u5407 31DE  
                                 u3911 314E                                   u4471 2E3A  
                                 u5191 2B40                                   u5271 39E6  
                                 u4391 11BE                                   u2960 40B6  
                                 u3840 1A34                                   u3760 195E  
                                 u3680 1858                                   u4800 258C  
                                 u4640 2488                                   u4560 2318  
                                 u3920 317C                                   u4480 2E78  
                                 u5280 3A00                                   u2961 40B2  
                                 u3841 1A30                                   u3761 195A  
                                 u3681 1854                                   u4801 2588  
                                 u4641 2484                                   u4561 2314  
                                 u5417 4792                                   u3921 3178  
                                 u4481 2E74                                   u5281 39FC  
                                 u5337 3036                                   u2970 40F4  
                                 u4730 33A6                                   u3850 1A46  
                                 u3770 1974                                   u3690 189E  
                                 u4810 25CE                                   u4650 249E  
                                 u4570 232E                                   u3930 319E  
                                 u4490 2E96                                   u5290 3A16  
                                 u2971 40F0                                   u4731 33A2  
                                 u3851 1A42                                   u3771 1970  
                                 u3691 189A                                   u4811 25CA  
                                 u5507 4B34                                   u4651 249A  
                                 u4571 232A                                   u5427 473C  
                                 u3931 319A                                   u4491 2E92  
                                 u5291 3A12                                   u5347 37EA  
                                 u2980 410A                                   u4740 33E2  
                                 u3860 1A62                                   u3780 198A  
                                 u4900 283E                                   u4820 25F8  
                                 u4580 2372                                   u3940 31C0  
                                 u2981 4106                                   u4741 33DE  
                                 u3861 1A5E                                   u3781 1986  
                                 u4901 283A                                   u4821 25F4  
                                 u5517 4864                                   u5437 47B6  
                                 u4581 236E                                   u3941 31BC  
                                 u5357 381A                                   u4750 3422  
                                 u3790 199E                                   u2990 4206  
                                 u4910 28BC                                   u4830 2676  
                                 u4590 2388                                   u3950 3202  
                                 u4751 341E                                   u3791 199A  
                                 u2991 4202                                   u4911 28B8  
                                 u5607 2680                                   u4831 2672  
                                 u5527 4A6C                                   u5447 47F0  
                                 u4591 2384                                   u3951 31FE  
                                 u5367 384E                                   u4760 3462  
                                 u4920 28E6                                   u4840 26A0  
                                 u3880 4374                                   u3960 3224  
                                 u4761 345E                                   u4921 28E2  
                                 u5617 26AA                                   u4841 269C  
                                 u3881 4370                                   u5537 4A9E  
                                 u5457 482A                                   u3961 3220  
                                 u5377 3882                                   u4770 34AA  
                                 u4930 2964                                   u4850 271E  
                                 u3970 4310                                   u3890 498C  
                                 u4771 34A6                                   u5707 33B2  
                                 u4931 2960                                   u5627 4164  
                                 u4851 271A                                   u5547 4B64  
                                 u5467 49A4                                   u3971 430C  
                                 u3891 4988                                   u5387 4970  
                                 u4860 27A6                                   u4780 2560  
                                 u3980 434A                                   u4940 43EC  
                                 u5717 33EE                                   u4861 27A2  
                                 u5637 2776                                   u4781 255C  
                                 u5557 4252                                   u5477 49D6  
                                 u3981 4346                                   u5397 3116  
                                 u4941 43E8                                   u4870 27C4  
                                 u4790 257E                                   u3990 34D6  
                                 u5727 342E                                   u5647 2826  
                                 u4871 27C0                                   u4791 257A  
                                 u5567 493C                                   u5487 4A08  
                                 u3991 34D2                                   u4880 27D2  
                                 u5737 3472                                   u5657 2848  
                                 u4881 27CE                                   u5577 2530  
                                 u5497 4A3A                                   u4890 2814  
                                 u5747 34B4                                   u5667 28C6  
                                 u4891 2810                                   u5587 25E0  
                                 u5757 45F0                                   u5677 28F0  
                                 u5597 2602                                   u5767 4612  
                                 u5687 41E2                                   u5777 40D4  
                                 u5697 489A                                   u5787 3B1C  
                 _calibration_turningL 2724                   _calibration_turningR 24DE  
                                 abs@a 0008                                   _dbuf 0182  
                                 _main 2F88                                   _dtoa 2CA6  
                 convert_rgb2hue@cCurr 004D                                   _prec 00CE  
                                 _time 0200                                   pad@i 0016  
                                 pad@p 0013                                   fsr1h 0FE2  
                                 fsr2h 0FDA                                   indf2 0FDF  
                                 fsr1l 0FE1                                   fsr2l 0FD9  
                                 btemp 005D                                   _stop 407E  
                  fullSpeedAhead@power 004F                                   prodh 0FF4  
                                 prodl 0FF3                                   start 003A  
                     __end_of_ADC_init 4C9C                        ___fldiv@new_exp 003A  
               __end_of_color_read_Red 4458              _color_clicker_lights_init 4CCA  
                    is_white@path_step 0094                           ___param_bank 0000  
                       reading_hue@hue 0054                                  ??_abs 000A  
                                ??_pad 0015                          ___fltol@sign1 004A  
                      __end_of___aldiv 35D0                        __end_of___fladd 1A76  
                                ?_main 0001                                  ?_dtoa 0018  
                                _ADPCH 0F5F                        __end_of___fldiv 223A  
                      __end_of___awdiv 3C0C                        __end_of___awmod 3CBC  
                      __end_of___flmul 1EA0                        __end_of___flsub 45DA  
                      __end_of___fltol 36D6                                  ?_stop 0014  
                      ___awdiv@divisor 0004                        __end_of___lwdiv 42F2  
                                i1l604 0032                        ___awdiv@counter 0006  
                    ??_convert_rgb2hue 004E                           vfpfcnvrt@fmt 0024  
                                _TMR0H 0FD4                                  _TMR0L 0FD3  
                  ___lmul@multiplicand 0006                        __end_of_left135 4B4E  
              __end_of_sendCharSerial4 4CB4             __end_of_I2C_2_Master_Start 4D04  
           __end_of_I2C_2_Master_Write 4CE4                                  _flags 00D0  
                  read_prec_or_width@c 000A                    read_prec_or_width@n 000B  
                                _fputc 3E14                                  _fputs 46E6  
                                pad@fp 0010                                  _width 00CC  
                                _putch 4D0E                                  dtoa@d 0019  
                                dtoa@i 0021                                  dtoa@p 001D  
                      __end_of_right90 4AEC                                  dtoa@s 0020  
                                dtoa@w 001E                           ?_reading_hue 0050  
                      __end_of_moveRed 4814                  ?_calibration_turningL 004C  
                ?_calibration_turningR 004C                                  tablat 0FF5  
                      __end_of_turn180 4ABA                                  ttemp5 005E  
                                ttemp6 0061                                  ttemp7 0065  
                                status 0FD8                                  wtemp8 005E  
                      __end_of_sprintf 48F4                  convert_rgb2hue@redmax 0064  
              __end_of_color_read_Blue 4548                            bump_wall@mL 0051  
                          bump_wall@mR 0052                  _I2C_2_Master_RepStart 4D04  
                      ?_color_read_Red 0006               __end_of_looking_for_card 4408  
                      __initialization 4620                           __end_of_main 30E8  
                         __end_of_dtoa 2E1E                           __end_of_stop 410C  
                      movePink@factorL 0021                  __end_of_moveLightBlue 4A56  
                      _get16bitTMR0val 3EBE                                 ??_main 00AC  
                               ??_dtoa 001B                                 ??_stop 0016  
                        __activetblptr 0003             __end_of_read_prec_or_width 3D6A  
                    ??_calc_clear_norm 004E                        _reverseStraight 4764  
                         ?_setMotorPWM 000F            calibration_turningL@factorL 006E  
                               ?_fputc 0002                                 ?_fputs 000A  
                               _ADRESH 0F64                                 _CCPR1H 0FAA  
                               _CCPR2H 0FA6                                 _CCPR3H 0F25  
                               _CCPR4H 0F21                       ___awdiv@dividend 0002  
                     __end_of_backHalf 4B7E                                 ?_putch 0001  
                               _RC0PPS 0E62                                 _RC4REG 0EE3  
                               _RE2PPS 0E74                                 _RD5PPS 0E6F  
                               _RC7PPS 0E69                                 _RE4PPS 0E76  
                               _RD6PPS 0E70                                 i1l3656 001E  
                               i1l3658 002E                                 _RG6PPS 0E88  
                        vfpfcnvrt@done 002C               __end_of_color_click_init 495C  
                               _RX4PPS 0E15          __end_of_intial_stage_movement 4CCA  
                               _TX4REG 0EE4                       __end_of___xxtofl 2B1E  
          convert_rgb2hue@greencurrent 0068                       __end_of_decision 24DE  
                               _LowISR 0018            calibration_turningR@factorR 006E  
                        ??_Timer0_init 0002                          main@path_step 00B6  
                        ?_buttons_init 0001                           _CCPTMRS0bits 0FAD  
                         vfprintf@cfmt 0031                                 ___flge 36D6  
                               ___fleq 3D6A                                 ___lmul 42F2  
                            ??___aldiv 0016                              ??___fladd 0018  
                               ___wmul 4C00                              ??___fldiv 0031  
                     backOneAndHalf@mL 0019                              ??___awdiv 0006  
                     backOneAndHalf@mR 001A                              ??___awmod 0006  
                            ??___flmul 0018                                 _action 013C  
                            ??___flsub 0028                              ??___fltol 0046  
                            ??___lwdiv 000C                                 _left90 4AEC  
                 read_prec_or_width@ap 0009                           ?_reverseTurn 001F  
                               clear_0 4638                                 clear_1 4644  
                               clear_2 4650                       ___awdiv@quotient 0008  
                     __end_of_is_white 3A7E                        ___awmod@divisor 0004  
                               _motorL 00DE                                 _motorR 00D5  
                               isa$std 0001                        ___awmod@counter 0006  
                            ??_left135 001B                     send2USART@hue_char 0060  
                               pad@buf 0011                       __end_of_right135 4A24  
                               dtoa@fp 0018                       __end_of_moveBlue 4A88  
                     __end_of_movePink 484E                                 fputc@c 0002  
                               fputs@c 000D                                 fputs@i 000E  
                               fputs@s 000A                              ??_right90 001D  
                         __mediumconst 0000                              ??_moveRed 0023  
                               tblptrh 0FF7                                 tblptrl 0FF6  
                               tblptru 0FF8                              ?_ADC_init 0001  
                     ?_sendCharSerial4 0001                 convert_rgb2hue@bluemax 0074  
                               putch@c 0001                       __end_of_vfprintf 46A4  
                            ??_turn180 001B                                 stop@mL 0014  
                               stop@mR 0015                      ??_initDCmotorsPWM 0004  
                            ??_sprintf 0038                 ??_calibration_turningL 004E  
               ??_calibration_turningR 004E             __end_of_variablesMotorInit 4594  
                     __end_of_turnLeft 4208               get16bitTMR0val@path_step 001C  
                           ___flge@ff1 0002                             ___flge@ff2 0006  
                         ___xxtofl@arg 000C                           ___xxtofl@exp 000B  
                         ___xxtofl@val 0002                             ___fleq@ff1 0002  
                           ___fleq@ff2 0006                        fullSpeedBack@mL 0014  
                      fullSpeedBack@mR 0015                             __accesstop 0060  
                          is_white@hue 009A                __end_of__initialization 4658  
                   _calibration_colors 3392               __end_of_color_read_Clear 44F8  
             __end_of_color_read_Green 44A8                 ?_I2C_2_Master_RepStart 0001  
                       _backOneAndHalf 498E                          ___rparam_used 0001  
                           ___fltol@f1 0042                       ?_color_read_Blue 0006  
                       ??_buttons_init 0002                    ?_calibration_colors 000D  
                       __pcstackCOMRAM 0001                __end_of_get16bitTMR0val 3F58  
                        _fullSpeedBack 4208                           __pidataBANK0 4D10  
                 looking_for_card@cMax 0063                          __end_of_fputc 3EBE  
                        __end_of_fputs 4726                          __end_of_putch 4D10  
              __end_of_reverseStraight 47A0                    __end_of_Timer0_init 4BAE  
                     reading_hue@cCurr 0050                     reverseTurn@factorL 0028  
                   reverseTurn@factorR 0026                   ??_calibration_colors 000E  
                           ??_ADC_init 0002                         main@clear_norm 00AE  
                           backHalf@mL 0019                             backHalf@mR 001A  
                  calc_clear_norm@cMax 004D                                ??_fputc 0005  
                              ??_fputs 000D                                ??_putch 0002  
                           __pbssBANK0 00B8                             __pbssBANK1 0100  
                           __pbssBANK2 0200                     reverseTurn@time_ms 0022  
               __end_of_backOneAndHalf 49C0                 get16bitTMR0val@time_ms 0022  
               calibration_colors@cCal 000D              calc_clear_norm@clear_norm 0058  
                              ?_LowISR 0001                      _color_writetoaddr 4C26  
                         _T2CLKCONbits 0FBF                         ?_fullSpeedBack 0014  
                      _convert_rgb2hue 0E24                                ?___flge 0002  
                              ?___fleq 0002                     ?_color_writetoaddr 0004  
                              ?___lmul 0002                  calibration_turningL@i 006C  
                calibration_turningR@i 006C                          _customDelayMs 4888  
                              ?___wmul 0002                                ?_left90 0019  
                reverseTurn@actionStep 0021                         ___lmul@product 000A  
                            ?_backHalf 0019                    ??_color_writetoaddr 0005  
    __end_of_color_clicker_lights_init 4CD8                              ?___xxtofl 0002  
                  _convert_rgb2hue$465 0080                    _convert_rgb2hue$466 0084  
                  _convert_rgb2hue$467 0088                    _convert_rgb2hue$468 008C  
                            ?_decision 0025                                _SP4BRGH 0EE6  
                              _SP4BRGL 0EE5                                _SSP2ADD 0ED6  
                              _SSP2BUF 0ED5                            moveGreen@mL 001F  
                          moveGreen@mR 0020                        ?_backOneAndHalf 0019  
               color_writetoaddr@value 0004                       ??_color_read_Red 0008  
            __end_of_color_writetoaddr 4C46                              ?_is_white 0092  
                            _ADREFbits 0F58                              ?_right135 0019  
                   _I2C_2_Master_Start 4CFA                             _initUSART4 4C64  
                   _I2C_2_Master_Write 4CD8                              ?_moveBlue 001D  
                              __Hparam 0000                              ?_movePink 001F  
                              __Lparam 0000                      color_read_Red@tmp 000B  
                          moveWhite@mL 001D                            moveWhite@mR 001E  
            customDelayMs@milliseconds 0002                            _Timer0_init 4B7E  
                    ?_looking_for_card 0060                         ?_customDelayMs 0002  
              sendStringSerial4@string 0003                       ?_get16bitTMR0val 001C  
                              ___aldiv 34C4                                ___fladd 15B6  
                              ___fldiv 1EA0                                ___awdiv 3B48  
                      _calc_clear_norm 38C4                                ___awmod 3C0C  
                              ___flmul 1A76                                ___flsub 4594  
                              ___fltol 35D0                    ?_I2C_2_Master_Start 0001  
                   ??_looking_for_card 005A                                ___lwdiv 427E  
                  ?_I2C_2_Master_Write 0001                              ?_vfprintf 002E  
  calibration_turningL@inactivityLimit 0060                           __psmallconst 0E00  
                              __pcinit 4620                             ??_backHalf 001B  
                    __end_of_logAction 43B6                      __end_of_bump_wall 4620  
                              __ramtop 0E00                       ?_reverseStraight 0051  
                           _send2USART 4C46                              ?_turnLeft 0014  
                              _left135 4B1E                                __ptext0 2F88  
                              __ptext1 4548                                __ptext2 37DA  
                              __ptext3 0E24                                __ptext4 36D6  
                              __ptext5 3D6A                                __ptext6 43B6  
                              __ptext7 38C4                                __ptext8 1EA0  
                              __ptext9 39A6                              _T2CONbits 0FBD  
       right90@delay_after_calibration 001D                  read_prec_or_width@fmt 0008  
                           ??___xxtofl 0006                       ___awmod@dividend 0002  
                           ??_decision 002D                       ___aldiv@dividend 000E  
                              _right90 4ABA                              _T2HLTbits 0FBE  
                              _moveRed 47DA                   __end_of_buttons_init 4CF0  
                        _RxBufWriteCnt 00D4                                _turn180 4A88  
                              _sprintf 48C0                                main@hue 00B4  
                 ??_I2C_2_Master_Start 0003                   ??_I2C_2_Master_Write 0003  
                 end_of_initialization 4658                      __end_of_moveGreen 4888  
               reverseStraight@time_ms 0053                      __end_of_moveWhite 4764  
                              fputc@fp 0004                __end_of_convert_rgb2hue 15B6  
                              fputs@fp 000C                      ?_color_click_init 0001  
                           ??_is_white 005B                     _read_prec_or_width 3CBC  
                           _moveOrange 49C0                             ??_right135 001B  
                           _moveYellow 47A0                        ??_fullSpeedBack 0016  
                           ??_moveBlue 001F                     ??_color_click_init 0006  
              convert_rgb2hue@clearmax 007C                             ??_movePink 0023  
                     _colorCalibration 00EF                        decision@factorL 002B  
                      decision@factorR 0029                    returnHome@path_step 0062  
                    __end_of_vfpfcnvrt 2CA6                       ___aldiv@quotient 0018  
                              postdec2 0FDD                    ?_read_prec_or_width 0008  
                              postinc0 0FEE                                postinc1 0FE6  
                              postinc2 0FDE                       vfpfcnvrt@convarg 0028  
                           ??_vfprintf 0031                convert_rgb2hue@greenmax 006C  
                         _colorCurrent 00E7                             _returnHome 2E1E  
                      _initDCmotorsPWM 3FEE                             ??_turnLeft 0016  
                            _PORTFbits 0F8E                     setMotorPWM@negDuty 0013  
           looking_for_card@clear_norm 005A                      __end_of_turnRight 418A  
                          ___fladd@grs 001F                          ___xxtofl@sign 000A  
                          returnHome@i 006D                              _TRISAbits 0F81  
                   setMotorPWM@posDuty 0012              looking_for_card@path_step 0064  
                            _TRISCbits 0F83                              _TRISDbits 0F84  
                            _TRISEbits 0F85                              _TRISFbits 0F86  
                            _TRISGbits 0F87                       convert_rgb2hue@b 00A8  
                 ??_read_prec_or_width 000A                       convert_rgb2hue@g 00A4  
                          ___fldiv@grs 003C                       convert_rgb2hue@r 00A0  
                          ___fldiv@rem 0035                       fullSpeedAhead@mL 004C  
                     fullSpeedAhead@mR 004D               color_writetoaddr@address 0005  
              ??_I2C_2_Master_RepStart 0003                            ___flmul@grs 001D  
        left90@delay_after_calibration 001D                            _CCP1CONbits 0FAB  
                    ?_color_read_Clear 0006                           _EUSART4RXbuf 00B8  
                         _EUSART4TXbuf 0100                            _CCP2CONbits 0FA7  
                    ?_color_read_Green 0006             convert_rgb2hue@bluecurrent 0070  
              __end_of_calc_clear_norm 39A6                            _CCP3CONbits 0F26  
                          ?_initUSART4 0001                            _CCP4CONbits 0F22  
            sendCharSerial4@charToSend 0002                  _intial_stage_movement 4CB4  
                      ??_customDelayMs 0004                     ??_color_read_Clear 0008  
                   ??_color_read_Green 0008                         __end_of_LowISR 003A  
                   _variablesMotorInit 4548              convert_rgb2hue@redcurrent 0060  
                       __end_of___flge 37DA                         __end_of___fleq 3E14  
                       _fullSpeedAhead 3A7E                         __end_of___lmul 435C  
                          vfpfcnvrt@ap 0025                            vfpfcnvrt@cp 002D  
                          vfpfcnvrt@fp 0023                         __end_of___wmul 4C26  
                looking_for_card@cCurr 0062                         __end_of_left90 4B1E  
                          ?_send2USART 0045                    ?_variablesMotorInit 0002  
       calibration_turningL@adjustment 0068                    color_read_Clear@tmp 000B  
                  start_initialization 4620                            __end_of_abs 4928  
                          __end_of_pad 3FEE                          _TxBufWriteCnt 005C  
                 ??_variablesMotorInit 0006                       ?_convert_rgb2hue 004C  
                          ?_moveOrange 001D                         right90@factorR 001B  
                          ?_moveYellow 001F                    color_read_Green@tmp 000B  
                             ??_LowISR 0001                __end_of_initDCmotorsPWM 407E  
                          vfprintf@fmt 002F                 __end_of_fullSpeedAhead 3B48  
                             ??___flge 000A                               ??___fleq 000A  
                             ??___lmul 000A                               ??___wmul 0006  
                             ??_left90 001D                            __pdataBANK0 00F7  
                 calc_clear_norm@cCurr 004C                            ?_returnHome 0060  
                        _moveLightBlue 4A24                              ___fladd@a 0014  
                            ___fladd@b 0010                             is_white@mL 0092  
                           is_white@mR 0093                              ___fldiv@a 002D  
                            ___fldiv@b 0029                              ___flmul@a 0014  
                            ___flmul@b 0010                            __pbssCOMRAM 005C  
                            ___flsub@a 0024                              ___flsub@b 0020  
                        __pcstackBANK0 0060                       ??_backOneAndHalf 001B  
                    reverseStraight@mL 0051                      reverseStraight@mR 0052  
                returnHome@action_turn 006C                          ??_reading_hue 0052  
                           right135@mL 0019                             right135@mR 001A  
               ?_intial_stage_movement 0051                       ?_calc_clear_norm 004C  
                     ___lwdiv@dividend 0008                              _dtoa$3087 001B  
                         ?_Timer0_init 0001                           _buttons_init 4CE4  
                      ?_fullSpeedAhead 004C                               ?___aldiv 000E  
                             ?___fladd 0010                               ?___fldiv 0029  
                             ?___awdiv 0002                               ?___awmod 0002  
                             ?___flmul 0010                               ?___flsub 0020  
                             ?___fltol 0042                 calibration_turningL@mL 004C  
               calibration_turningL@mR 004D                               ?___lwdiv 0008  
               calibration_turningR@mL 004C                 calibration_turningR@mR 004D  
                           moveBlue@mL 001D                             moveBlue@mR 001E  
                       ?_moveLightBlue 001D                            __pintcodelo 0018  
                             ?_left135 0019                           _readingIndex 00D1  
                 I2C_2_Master_Read@ack 0004                   I2C_2_Master_Read@tmp 0005  
                          __smallconst 0E00                             movePink@mL 001F  
                           movePink@mR 0020                      _I2C_2_Master_Idle 4BD8  
                            _logAction 435C                      _I2C_2_Master_Init 4BAE  
                    _I2C_2_Master_Read 46A4                              _bump_wall 45DA  
                             ?_right90 0019                      _I2C_2_Master_Stop 4CF0  
                             ?_moveRed 001F                           _RxBufReadCnt 00D3  
                             _ADC_init 4C82             ?_color_clicker_lights_init 0001  
                   ?_I2C_2_Master_Idle 0001                     ?_I2C_2_Master_Init 0001  
                   ?_I2C_2_Master_Read 0001                          ??_setMotorPWM 0010  
                             ?_turn180 0019                     ?_I2C_2_Master_Stop 0001  
                     ___lwdiv@quotient 000C               initDCmotorsPWM@PWMperiod 0002  
                             ?_sprintf 0032                        ___aldiv@divisor 0012  
                    _sendStringSerial4 495C                    ??_I2C_2_Master_Idle 0002  
                      ___aldiv@counter 0016                    ??_I2C_2_Master_Init 0002  
                  ??_I2C_2_Master_Read 0003                         ___wmul@product 0006  
                             _LATAbits 0F79                    ??_I2C_2_Master_Stop 0003  
                             _LATCbits 0F7B                               _LATEbits 0F7D  
                             _LATGbits 0F7F                               _IPR0bits 0E1F  
                             _PIE0bits 0E29                     ?_sendStringSerial4 0003  
                            _moveGreen 484E                               _PIE4bits 0E2D  
                  __end_of_reading_hue 38C4                              _moveWhite 4726  
                             i1u253_20 002E                               i1u253_21 002A  
           variablesMotorInit@PWMcycle 0004                            turnRight@mL 0014  
                          turnRight@mR 0015                               _PIR0bits 0E33  
                             _PIR4bits 0E37                       ?_initDCmotorsPWM 0002  
                            left135@mL 0019                              left135@mR 001A  
                    ??_sendCharSerial4 0002                               _SSP2CON2 0EDA  
                  ??_sendStringSerial4 0004                               _SSP2STAT 0ED8  
                        ??_reverseTurn 002A                              _vfpfcnvrt 2B1E  
                           _ADCON0bits 0F60              __end_of_I2C_2_Master_Idle 4C00  
            __end_of_I2C_2_Master_Init 4BD8              __end_of_I2C_2_Master_Read 46E6  
                    ___wmul@multiplier 0002              __end_of_I2C_2_Master_Stop 4CFA  
                         setMotorPWM@m 000F         calibration_turningR@adjustment 0068  
          I2C_2_Master_Write@data_byte 0003                            _ldrReadings 016E  
                           ?_logAction 0002                             ?_bump_wall 0051  
                    ??_color_read_Blue 0008                           _TxBufReadCnt 00D2  
                            _turnRight 410C                      ___lmul@multiplier 0002  
            __end_of_sendStringSerial4 498E                           moveOrange@mL 001D  
                         moveOrange@mR 001E                intial_stage_movement@mL 0051  
              intial_stage_movement@mR 0052          __end_of_I2C_2_Master_RepStart 4D0E  
                   color_read_Blue@tmp 000B                    __end_of_setMotorPWM 3392  
                         ??_initUSART4 0002                             ?_moveGreen 001F  
                           ?_moveWhite 001D                               __Hrparam 0000  
                           vfprintf@ap 0030                               __Lrparam 0000  
                           vfprintf@fp 002E                  __end_of_fullSpeedBack 427E  
                      ??_moveLightBlue 001F                           moveYellow@mL 001F  
                         moveYellow@mR 0020                             ?_vfpfcnvrt 0023  
                             _backHalf 4B4E                           ??_send2USART 0047  
                   looking_for_card@mL 0060                     looking_for_card@mR 0061  
calibration_turningL@inactivityCounter 0064  calibration_turningR@inactivityCounter 0064  
                           _ANSELDbits 0EA7                             _ANSELFbits 0EB4  
                             _dataFlag 00F7                             sprintf@fmt 0033  
                             ___xxtofl 296A                             _T0CON0bits 0FD5  
                           _T0CON1bits 0FD6                               _decision 223A  
                  __end_of_reverseTurn 323E                              right90@mL 0019  
                            right90@mR 001A                        ___lwdiv@divisor 000A  
                   __end_of_initUSART4 4C82                        ___lwdiv@counter 000E  
                           ?_turnRight 0014                               __ptext10 4C46  
                             __ptext11 48C0                               __ptext20 48F4  
                             __ptext12 4662                               __ptext21 3C0C  
                             __ptext13 2B1E                               __ptext30 42F2  
                             __ptext22 3B48                               __ptext14 3CBC  
                             __ptext31 34C4                               __ptext23 495C  
                             __ptext15 2CA6                               __ptext40 49C0  
                             __ptext32 4CB4                               __ptext24 4C9C  
                             __ptext16 3F58                               __ptext41 49F2  
                             __ptext33 4C64                               __ptext25 2E1E  
                             __ptext17 46E6                               __ptext50 4CCA  
                             __ptext42 4A24                               __ptext34 3FEE  
                             __ptext26 30E8                               __ptext18 3E14  
                             __ptext51 4928                               __ptext43 4B1E  
                             __ptext35 223A                               __ptext27 4764  
                             __ptext19 4D0E                               __ptext60 4888  
                             __ptext52 4C26                               __ptext44 484E  
                             __ptext36 47A0                               __ptext28 4726  
                             __ptext61 4594                               __ptext53 4BAE  
                             __ptext45 4A56                               __ptext37 47DA  
                             __ptext29 3EBE                               __ptext70 4CFA  
                             __ptext62 15B6                               __ptext54 24DE  
                             __ptext46 4A88                               __ptext38 4814  
                             __ptext71 4D04                               __ptext63 3392  
                             __ptext55 4ABA                               __ptext47 4B4E  
                             __ptext39 498E                               __ptext80 427E  
                             __ptext72 46A4                               __ptext64 4408  
                             __ptext56 410C                               __ptext48 4208  
                             __ptext81 296A                               __ptext73 4BD8  
                             __ptext65 4458                               __ptext57 2724  
                             __ptext49 435C                               __ptext82 35D0  
                             __ptext74 4CE4                               __ptext66 44A8  
                             __ptext58 4AEC                               __ptext83 1A76  
                             __ptext75 45DA                               __ptext67 44F8  
                             __ptext59 418A                               __ptext84 4B7E  
                             __ptext76 407E                               __ptext68 4CD8  
                             __ptext85 4C82                               __ptext77 3A7E  
                             __ptext69 4CF0                               __ptext78 323E  
                             __ptext79 4C00                            decision@hue 0025  
                            moveRed@mL 001F                              moveRed@mR 0020  
                         _SSP2CON1bits 0ED9                           _SSP2CON2bits 0EDA  
                          _reading_hue 37DA                          reverseTurn@mL 001F  
                        reverseTurn@mR 0020                      returnHome@factorL 0066  
                    returnHome@factorR 0064                           ??_moveOrange 001F  
                             _is_white 39A6                             turnLeft@mL 0014  
                           turnLeft@mR 0015                           ??_moveYellow 0023  
                   __end_of_send2USART 4C64                               _right135 49F2  
                 variablesMotorInit@mL 0002                   variablesMotorInit@mR 0003  
                             _moveBlue 4A56                               _movePink 4814  
             calc_clear_norm@clear_max 0050                             turnRight@i 0017  
                __end_of_customDelayMs 48C0                               isa$xinst 0000  
                    moveYellow@factorR 0021                               left90@mL 0019  
                             left90@mR 001A                             _RC4STAbits 0EE7  
                    returnHome@time_ms 0068                               int$flags 005D  
                             _vfprintf 4662           __end_of_calibration_turningL 296A  
         __end_of_calibration_turningR 2724                           ??_returnHome 0059  
                             _turnLeft 418A                              turn180@mL 0019  
                            turn180@mR 001A                            ??_logAction 0008  
                           _INTCONbits 0FF2                            ??_bump_wall 0053  
                       customDelayMs@i 0005                     __end_of_moveOrange 49F2  
                     _looking_for_card 43B6                       moveGreen@factorL 0021  
                   __end_of_moveYellow 47DA                            _setMotorPWM 323E  
                    ??_get16bitTMR0val 001E    calibration_turningR@inactivityLimit 0060  
              ??_intial_stage_movement 0053                               intlevel1 0000  
                            sprintf@ap 0038                      decision@path_step 0027  
                        left90@factorL 001B           calc_clear_norm@clear_current 0054  
                    ??_reverseStraight 0057                       ??_fullSpeedAhead 004E  
        get16bitTMR0val@combined_value 0026                     __end_of_returnHome 2F88  
                          ??_moveGreen 0023                              turnLeft@i 0017  
                          ??_moveWhite 001F            convert_rgb2hue@clearcurrent 0078  
                        send2USART@hue 0045                            ??_vfpfcnvrt 0026  
                          _reverseTurn 30E8                       _color_click_init 4928  
                             sprintf@f 0039                               sprintf@s 0032  
           __end_of_calibration_colors 34C4                             _SSP2DATPPS 0E1D  
                           _SSP2CLKPPS 0E1C                           ___aldiv@sign 0017  
          ??_color_clicker_lights_init 0002                            ??_turnRight 0016  
                        ___fladd@signs 001C                             _TX4STAbits 0EE8  
                       moveRed@factorR 0021                        _sendCharSerial4 4C9C  
                         ___fladd@aexp 001D                           ___fladd@bexp 001E  
                         returnHome@mL 0060                           returnHome@mR 0061  
