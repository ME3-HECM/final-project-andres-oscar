

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 15 02:41:26 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=3
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    94                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    95                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    96   000000                     
    97                           ; Generated 21/07/2023 GMT
    98                           ; 
    99                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution. Publication is not required when
   113                           ;        this file is used in an embedded application.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F67K40 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131   000000                     
   132                           	psect	idataBANK0
   133   0049EA                     __pidataBANK0:
   134                           	callstack 0
   135                           
   136                           ;initializer for _dataFlag
   137   0049EA  01                 	db	1
   138   000000                     _TMR0H	set	4052
   139   000000                     _TX4REG	set	3812
   140   000000                     _RC4STAbits	set	3815
   141   000000                     _SP4BRGH	set	3814
   142   000000                     _LATHbits	set	3968
   143   000000                     _LATFbits	set	3966
   144   000000                     _TRISFbits	set	3974
   145   000000                     _TRISAbits	set	3969
   146   000000                     _TRISEbits	set	3973
   147   000000                     _TRISGbits	set	3975
   148   000000                     _TRISDbits	set	3972
   149   000000                     _PORTFbits	set	3982
   150   000000                     _SSP2CON2bits	set	3802
   151   000000                     _RX4PPS	set	3605
   152   000000                     _SSP2CLKPPS	set	3612
   153   000000                     _SSP2DATPPS	set	3613
   154   000000                     _ANSELDbits	set	3751
   155   000000                     _SSP2ADD	set	3798
   156   000000                     _SSP2CON1bits	set	3801
   157   000000                     _LATAbits	set	3961
   158   000000                     _LATEbits	set	3965
   159   000000                     _LATGbits	set	3967
   160   000000                     _LATCbits	set	3963
   161   000000                     _LATDbits	set	3964
   162   000000                     _CCPR2H	set	4006
   163   000000                     _CCPR1H	set	4010
   164   000000                     _RC4REG	set	3811
   165   000000                     _SP4BRGL	set	3813
   166   000000                     _TX4STAbits	set	3816
   167   000000                     _BAUD4CONbits	set	3817
   168   000000                     _SSP2CON2	set	3802
   169   000000                     _CCPR4H	set	3873
   170   000000                     _CCPR3H	set	3877
   171   000000                     _SSP2STAT	set	3800
   172   000000                     _ANSELFbits	set	3764
   173   000000                     _SSP2BUF	set	3797
   174   000000                     _IPR0bits	set	3615
   175   000000                     _PIE0bits	set	3625
   176   000000                     _PIE4bits	set	3629
   177   000000                     _PIR4bits	set	3639
   178   000000                     _RC0PPS	set	3682
   179   000000                     _RC7PPS	set	3689
   180   000000                     _RD5PPS	set	3695
   181   000000                     _RE2PPS	set	3700
   182   000000                     _RD6PPS	set	3696
   183   000000                     _CCP1CONbits	set	4011
   184   000000                     _CCPTMRS0bits	set	4013
   185   000000                     _T2PR	set	4028
   186   000000                     _T2CONbits	set	4029
   187   000000                     _T0CON0bits	set	4053
   188   000000                     _CCP2CONbits	set	4007
   189   000000                     _CCP3CONbits	set	3878
   190   000000                     _ADREFbits	set	3928
   191   000000                     _CCP4CONbits	set	3874
   192   000000                     _TRISHbits	set	3976
   193   000000                     _TRISCbits	set	3971
   194   000000                     _INTCONbits	set	4082
   195   000000                     _T0CON1bits	set	4054
   196   000000                     _ADPCH	set	3935
   197   000000                     _ADRESH	set	3940
   198   000000                     _ADCON0bits	set	3936
   199   000000                     _RE4PPS	set	3702
   200   000000                     _RG6PPS	set	3720
   201   000000                     _TMR0L	set	4051
   202   000000                     _T2CLKCONbits	set	4031
   203   000000                     _T2HLTbits	set	4030
   204   000000                     _PIR0bits	set	3635
   205                           
   206                           	psect	smallconst
   207   000E00                     __psmallconst:
   208                           	callstack 0
   209   000E00  00                 	db	0
   210   000E01                     STR_3:
   211                           
   212                           ; BSR set to: 14
   213   000E01  43                 	db	67	;'C'
   214   000E02  61                 	db	97	;'a'
   215   000E03  6C                 	db	108	;'l'
   216   000E04  69                 	db	105	;'i'
   217   000E05  62                 	db	98	;'b'
   218   000E06  72                 	db	114	;'r'
   219   000E07  61                 	db	97	;'a'
   220   000E08  74                 	db	116	;'t'
   221   000E09  69                 	db	105	;'i'
   222   000E0A  6F                 	db	111	;'o'
   223   000E0B  6E                 	db	110	;'n'
   224   000E0C  20                 	db	32
   225   000E0D  73                 	db	115	;'s'
   226   000E0E  74                 	db	116	;'t'
   227   000E0F  61                 	db	97	;'a'
   228   000E10  74                 	db	116	;'t'
   229   000E11  65                 	db	101	;'e'
   230   000E12  20                 	db	32
   231   000E13  3D                 	db	61	;'='
   232   000E14  20                 	db	32
   233   000E15  67                 	db	103	;'g'
   234   000E16  72                 	db	114	;'r'
   235   000E17  65                 	db	101	;'e'
   236   000E18  65                 	db	101	;'e'
   237   000E19  6E                 	db	110	;'n'
   238   000E1A  20                 	db	32
   239   000E1B  0A                 	db	10
   240   000E1C  0D                 	db	13
   241   000E1D  00                 	db	0
   242   000E1E                     STR_9:
   243                           
   244                           ; BSR set to: 14
   245   000E1E  43                 	db	67	;'C'
   246   000E1F  61                 	db	97	;'a'
   247   000E20  6C                 	db	108	;'l'
   248   000E21  69                 	db	105	;'i'
   249   000E22  62                 	db	98	;'b'
   250   000E23  72                 	db	114	;'r'
   251   000E24  61                 	db	97	;'a'
   252   000E25  74                 	db	116	;'t'
   253   000E26  69                 	db	105	;'i'
   254   000E27  6F                 	db	111	;'o'
   255   000E28  6E                 	db	110	;'n'
   256   000E29  20                 	db	32
   257   000E2A  73                 	db	115	;'s'
   258   000E2B  74                 	db	116	;'t'
   259   000E2C  61                 	db	97	;'a'
   260   000E2D  74                 	db	116	;'t'
   261   000E2E  65                 	db	101	;'e'
   262   000E2F  20                 	db	32
   263   000E30  3D                 	db	61	;'='
   264   000E31  20                 	db	32
   265   000E32  20                 	db	32
   266   000E33  61                 	db	97	;'a'
   267   000E34  6D                 	db	109	;'m'
   268   000E35  62                 	db	98	;'b'
   269   000E36  69                 	db	105	;'i'
   270   000E37  65                 	db	101	;'e'
   271   000E38  6E                 	db	110	;'n'
   272   000E39  74                 	db	116	;'t'
   273   000E3A  00                 	db	0
   274   000E3B                     STR_5:
   275                           
   276                           ; BSR set to: 14
   277   000E3B  43                 	db	67	;'C'
   278   000E3C  61                 	db	97	;'a'
   279   000E3D  6C                 	db	108	;'l'
   280   000E3E  69                 	db	105	;'i'
   281   000E3F  62                 	db	98	;'b'
   282   000E40  72                 	db	114	;'r'
   283   000E41  61                 	db	97	;'a'
   284   000E42  74                 	db	116	;'t'
   285   000E43  69                 	db	105	;'i'
   286   000E44  6F                 	db	111	;'o'
   287   000E45  6E                 	db	110	;'n'
   288   000E46  20                 	db	32
   289   000E47  73                 	db	115	;'s'
   290   000E48  74                 	db	116	;'t'
   291   000E49  61                 	db	97	;'a'
   292   000E4A  74                 	db	116	;'t'
   293   000E4B  65                 	db	101	;'e'
   294   000E4C  3D                 	db	61	;'='
   295   000E4D  20                 	db	32
   296   000E4E  62                 	db	98	;'b'
   297   000E4F  6C                 	db	108	;'l'
   298   000E50  75                 	db	117	;'u'
   299   000E51  65                 	db	101	;'e'
   300   000E52  20                 	db	32
   301   000E53  0A                 	db	10
   302   000E54  0D                 	db	13
   303   000E55  00                 	db	0
   304   000E56                     STR_7:
   305                           
   306                           ; BSR set to: 14
   307   000E56  43                 	db	67	;'C'
   308   000E57  61                 	db	97	;'a'
   309   000E58  6C                 	db	108	;'l'
   310   000E59  69                 	db	105	;'i'
   311   000E5A  62                 	db	98	;'b'
   312   000E5B  72                 	db	114	;'r'
   313   000E5C  61                 	db	97	;'a'
   314   000E5D  74                 	db	116	;'t'
   315   000E5E  69                 	db	105	;'i'
   316   000E5F  6F                 	db	111	;'o'
   317   000E60  6E                 	db	110	;'n'
   318   000E61  20                 	db	32
   319   000E62  73                 	db	115	;'s'
   320   000E63  74                 	db	116	;'t'
   321   000E64  61                 	db	97	;'a'
   322   000E65  74                 	db	116	;'t'
   323   000E66  65                 	db	101	;'e'
   324   000E67  20                 	db	32
   325   000E68  3D                 	db	61	;'='
   326   000E69  20                 	db	32
   327   000E6A  20                 	db	32
   328   000E6B  77                 	db	119	;'w'
   329   000E6C  68                 	db	104	;'h'
   330   000E6D  69                 	db	105	;'i'
   331   000E6E  74                 	db	116	;'t'
   332   000E6F  65                 	db	101	;'e'
   333   000E70  00                 	db	0
   334   000E71                     STR_11:
   335                           
   336                           ; BSR set to: 14
   337   000E71  43                 	db	67	;'C'
   338   000E72  41                 	db	65	;'A'
   339   000E73  4C                 	db	76	;'L'
   340   000E74  49                 	db	73	;'I'
   341   000E75  42                 	db	66	;'B'
   342   000E76  52                 	db	82	;'R'
   343   000E77  41                 	db	65	;'A'
   344   000E78  54                 	db	84	;'T'
   345   000E79  49                 	db	73	;'I'
   346   000E7A  4F                 	db	79	;'O'
   347   000E7B  4E                 	db	78	;'N'
   348   000E7C  20                 	db	32
   349   000E7D  43                 	db	67	;'C'
   350   000E7E  4F                 	db	79	;'O'
   351   000E7F  4D                 	db	77	;'M'
   352   000E80  50                 	db	80	;'P'
   353   000E81  4C                 	db	76	;'L'
   354   000E82  45                 	db	69	;'E'
   355   000E83  54                 	db	84	;'T'
   356   000E84  45                 	db	69	;'E'
   357   000E85  44                 	db	68	;'D'
   358   000E86  20                 	db	32
   359   000E87  0A                 	db	10
   360   000E88  0D                 	db	13
   361   000E89  00                 	db	0
   362   000E8A                     STR_1:
   363                           
   364                           ; BSR set to: 14
   365   000E8A  43                 	db	67	;'C'
   366   000E8B  61                 	db	97	;'a'
   367   000E8C  6C                 	db	108	;'l'
   368   000E8D  69                 	db	105	;'i'
   369   000E8E  62                 	db	98	;'b'
   370   000E8F  72                 	db	114	;'r'
   371   000E90  61                 	db	97	;'a'
   372   000E91  74                 	db	116	;'t'
   373   000E92  69                 	db	105	;'i'
   374   000E93  6F                 	db	111	;'o'
   375   000E94  6E                 	db	110	;'n'
   376   000E95  20                 	db	32
   377   000E96  73                 	db	115	;'s'
   378   000E97  74                 	db	116	;'t'
   379   000E98  61                 	db	97	;'a'
   380   000E99  74                 	db	116	;'t'
   381   000E9A  65                 	db	101	;'e'
   382   000E9B  20                 	db	32
   383   000E9C  3D                 	db	61	;'='
   384   000E9D  20                 	db	32
   385   000E9E  72                 	db	114	;'r'
   386   000E9F  65                 	db	101	;'e'
   387   000EA0  64                 	db	100	;'d'
   388   000EA1  00                 	db	0
   389   000EA2                     
   390                           ; BSR set to: 14
   391   000EA2  56                 	db	86	;'V'
   392   000EA3  6F                 	db	111	;'o'
   393   000EA4  6C                 	db	108	;'l'
   394   000EA5  74                 	db	116	;'t'
   395   000EA6  61                 	db	97	;'a'
   396   000EA7  67                 	db	103	;'g'
   397   000EA8  65                 	db	101	;'e'
   398   000EA9  20                 	db	32
   399   000EAA  3D                 	db	61	;'='
   400   000EAB  20                 	db	32
   401   000EAC  25                 	db	37
   402   000EAD  64                 	db	100	;'d'
   403   000EAE  2E                 	db	46
   404   000EAF  25                 	db	37
   405   000EB0  30                 	db	48	;'0'
   406   000EB1  32                 	db	50	;'2'
   407   000EB2  64                 	db	100	;'d'
   408   000EB3  2C                 	db	44
   409   000EB4  20                 	db	32
   410   000EB5  20                 	db	32
   411   000EB6  00                 	db	0
   412   000EB7                     STR_14:
   413                           
   414                           ; BSR set to: 14
   415   000EB7  68                 	db	104	;'h'
   416   000EB8  75                 	db	117	;'u'
   417   000EB9  65                 	db	101	;'e'
   418   000EBA  3D                 	db	61	;'='
   419   000EBB  25                 	db	37
   420   000EBC  30                 	db	48	;'0'
   421   000EBD  33                 	db	51	;'3'
   422   000EBE  64                 	db	100	;'d'
   423   000EBF  2C                 	db	44
   424   000EC0  20                 	db	32
   425   000EC1  20                 	db	32
   426   000EC2  00                 	db	0
   427   000EC3                     STR_2:
   428                           
   429                           ; BSR set to: 14
   430   000EC3  2E                 	db	46
   431   000EC4  00                 	db	0
   432   000EC5  00                 	db	0	; dummy byte at the end
   433   000000                     
   434                           ; #config settings
   435                           
   436                           	psect	cinit
   437   004358                     __pcinit:
   438                           	callstack 0
   439   004358                     start_initialization:
   440                           	callstack 0
   441   004358                     __initialization:
   442                           	callstack 0
   443                           
   444                           ; Initialize objects allocated to BANK0 (1 bytes)
   445                           ; load TBLPTR registers with __pidataBANK0
   446   004358  0EEA               	movlw	low __pidataBANK0
   447   00435A  6EF6               	movwf	tblptrl,c
   448   00435C  0E49               	movlw	high __pidataBANK0
   449   00435E  6EF7               	movwf	tblptrh,c
   450   004360  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   451   004362  6EF8               	movwf	tblptru,c
   452   004364  0009               	tblrd		*+	;fetch initializer
   453   004366  CFF5 F0FD          	movff	tablat,__pdataBANK0
   454                           
   455                           ; Clear objects allocated to BANK2 (100 bytes)
   456   00436A  EE02  F000         	lfsr	0,__pbssBANK2
   457   00436E  0E64               	movlw	100
   458   004370                     clear_0:
   459   004370  6AEE               	clrf	postinc0,c
   460   004372  06E8               	decf	wreg,f,c
   461   004374  E1FD               	bnz	clear_0
   462                           
   463                           ; Clear objects allocated to BANK1 (162 bytes)
   464   004376  EE01  F000         	lfsr	0,__pbssBANK1
   465   00437A  0EA2               	movlw	162
   466   00437C                     clear_1:
   467   00437C  6AEE               	clrf	postinc0,c
   468   00437E  06E8               	decf	wreg,f,c
   469   004380  E1FD               	bnz	clear_1
   470                           
   471                           ; Clear objects allocated to BANK0 (67 bytes)
   472   004382  EE00  F0BA         	lfsr	0,__pbssBANK0
   473   004386  0E43               	movlw	67
   474   004388                     clear_2:
   475   004388  6AEE               	clrf	postinc0,c
   476   00438A  06E8               	decf	wreg,f,c
   477   00438C  E1FD               	bnz	clear_2
   478                           
   479                           ; Clear objects allocated to COMRAM (1 bytes)
   480   00438E  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   481   004390                     end_of_initialization:
   482                           	callstack 0
   483   004390                     __end_of__initialization:
   484                           	callstack 0
   485   004390  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   486   004392  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   487   004394  0100               	movlb	0
   488   004396  EF8C  F00D         	goto	_main	;jump to C main() function
   489                           
   490                           	psect	bssCOMRAM
   491   00005D                     __pbssCOMRAM:
   492                           	callstack 0
   493   00005D                     _TxBufWriteCnt:
   494                           	callstack 0
   495   00005D                     	ds	1
   496                           
   497                           	psect	bssBANK0
   498   0000BA                     __pbssBANK0:
   499                           	callstack 0
   500   0000BA                     _EUSART4RXbuf:
   501                           	callstack 0
   502   0000BA                     	ds	20
   503   0000CE                     _width:
   504                           	callstack 0
   505   0000CE                     	ds	2
   506   0000D0                     _prec:
   507                           	callstack 0
   508   0000D0                     	ds	2
   509   0000D2                     _flags:
   510                           	callstack 0
   511   0000D2                     	ds	1
   512   0000D3                     _readingIndex:
   513                           	callstack 0
   514   0000D3                     	ds	1
   515   0000D4                     _TxBufReadCnt:
   516                           	callstack 0
   517   0000D4                     	ds	1
   518   0000D5                     _RxBufReadCnt:
   519                           	callstack 0
   520   0000D5                     	ds	1
   521   0000D6                     _RxBufWriteCnt:
   522                           	callstack 0
   523   0000D6                     	ds	1
   524   0000D7                     _colorCurrent:
   525                           	callstack 0
   526   0000D7                     	ds	10
   527   0000E1                     _colorCalibration:
   528                           	callstack 0
   529   0000E1                     	ds	10
   530   0000EB                     _motorR:
   531                           	callstack 0
   532   0000EB                     	ds	9
   533   0000F4                     _motorL:
   534                           	callstack 0
   535   0000F4                     	ds	9
   536                           
   537                           	psect	dataBANK0
   538   0000FD                     __pdataBANK0:
   539                           	callstack 0
   540   0000FD                     _dataFlag:
   541                           	callstack 0
   542   0000FD                     	ds	1
   543                           
   544                           	psect	bssBANK1
   545   000100                     __pbssBANK1:
   546                           	callstack 0
   547   000100                     _EUSART4TXbuf:
   548                           	callstack 0
   549   000100                     	ds	60
   550   00013C                     _action:
   551                           	callstack 0
   552   00013C                     	ds	50
   553   00016E                     _ldrReadings:
   554                           	callstack 0
   555   00016E                     	ds	20
   556   000182                     _dbuf:
   557                           	callstack 0
   558   000182                     	ds	32
   559                           
   560                           	psect	bssBANK2
   561   000200                     __pbssBANK2:
   562                           	callstack 0
   563   000200                     _time:
   564                           	callstack 0
   565   000200                     	ds	100
   566                           
   567                           	psect	cstackBANK0
   568   000060                     __pcstackBANK0:
   569                           	callstack 0
   570   000060                     returnHome@mL:
   571                           	callstack 0
   572   000060                     convert_rgb2hue@redcurrent:
   573                           	callstack 0
   574   000060                     send2USART@hue_char:
   575                           	callstack 0
   576                           
   577                           ; 50 bytes @ 0x0
   578   000060                     	ds	1
   579   000061                     returnHome@mR:
   580                           	callstack 0
   581                           
   582                           ; 1 bytes @ 0x1
   583   000061                     	ds	1
   584   000062                     returnHome@path_step:
   585                           	callstack 0
   586                           
   587                           ; 2 bytes @ 0x2
   588   000062                     	ds	2
   589   000064                     convert_rgb2hue@redmax:
   590                           	callstack 0
   591   000064                     returnHome@time_ms:
   592                           	callstack 0
   593                           
   594                           ; 4 bytes @ 0x4
   595   000064                     	ds	4
   596   000068                     returnHome@action_turn:
   597                           	callstack 0
   598   000068                     convert_rgb2hue@greencurrent:
   599                           	callstack 0
   600                           
   601                           ; 4 bytes @ 0x8
   602   000068                     	ds	1
   603   000069                     returnHome@i:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x9
   607   000069                     	ds	3
   608   00006C                     convert_rgb2hue@greenmax:
   609                           	callstack 0
   610                           
   611                           ; 4 bytes @ 0xC
   612   00006C                     	ds	4
   613   000070                     convert_rgb2hue@bluecurrent:
   614                           	callstack 0
   615                           
   616                           ; 4 bytes @ 0x10
   617   000070                     	ds	4
   618   000074                     convert_rgb2hue@bluemax:
   619                           	callstack 0
   620                           
   621                           ; 4 bytes @ 0x14
   622   000074                     	ds	4
   623   000078                     convert_rgb2hue@clearcurrent:
   624                           	callstack 0
   625                           
   626                           ; 4 bytes @ 0x18
   627   000078                     	ds	4
   628   00007C                     convert_rgb2hue@clearmax:
   629                           	callstack 0
   630                           
   631                           ; 4 bytes @ 0x1C
   632   00007C                     	ds	4
   633   000080                     _convert_rgb2hue$432:
   634                           	callstack 0
   635                           
   636                           ; 4 bytes @ 0x20
   637   000080                     	ds	4
   638   000084                     _convert_rgb2hue$433:
   639                           	callstack 0
   640                           
   641                           ; 4 bytes @ 0x24
   642   000084                     	ds	4
   643   000088                     _convert_rgb2hue$434:
   644                           	callstack 0
   645                           
   646                           ; 4 bytes @ 0x28
   647   000088                     	ds	4
   648   00008C                     _convert_rgb2hue$435:
   649                           	callstack 0
   650                           
   651                           ; 4 bytes @ 0x2C
   652   00008C                     	ds	4
   653   000090                     convert_rgb2hue@min:
   654                           	callstack 0
   655                           
   656                           ; 4 bytes @ 0x30
   657   000090                     	ds	2
   658   000092                     calibration_routine@cal_state:
   659                           	callstack 0
   660                           
   661                           ; 20 bytes @ 0x32
   662   000092                     	ds	2
   663   000094                     convert_rgb2hue@diff:
   664                           	callstack 0
   665                           
   666                           ; 4 bytes @ 0x34
   667   000094                     	ds	4
   668   000098                     convert_rgb2hue@max:
   669                           	callstack 0
   670                           
   671                           ; 4 bytes @ 0x38
   672   000098                     	ds	4
   673   00009C                     convert_rgb2hue@hue:
   674                           	callstack 0
   675                           
   676                           ; 4 bytes @ 0x3C
   677   00009C                     	ds	4
   678   0000A0                     convert_rgb2hue@r:
   679                           	callstack 0
   680                           
   681                           ; 4 bytes @ 0x40
   682   0000A0                     	ds	4
   683   0000A4                     convert_rgb2hue@g:
   684                           	callstack 0
   685                           
   686                           ; 4 bytes @ 0x44
   687   0000A4                     	ds	4
   688   0000A8                     convert_rgb2hue@b:
   689                           	callstack 0
   690                           
   691                           ; 4 bytes @ 0x48
   692   0000A8                     	ds	4
   693   0000AC                     main@hue:
   694                           	callstack 0
   695                           
   696                           ; 2 bytes @ 0x4C
   697   0000AC                     	ds	2
   698   0000AE                     main@clear_current:
   699                           	callstack 0
   700                           
   701                           ; 4 bytes @ 0x4E
   702   0000AE                     	ds	4
   703   0000B2                     main@clear_max:
   704                           	callstack 0
   705                           
   706                           ; 4 bytes @ 0x52
   707   0000B2                     	ds	4
   708   0000B6                     main@path_step:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x56
   712   0000B6                     	ds	2
   713   0000B8                     main@clear_norm:
   714                           	callstack 0
   715                           
   716                           ; 2 bytes @ 0x58
   717   0000B8                     	ds	2
   718                           
   719                           	psect	cstackCOMRAM
   720   000001                     __pcstackCOMRAM:
   721                           	callstack 0
   722   000001                     ??_LowISR:
   723   000001                     
   724                           ; 1 bytes @ 0x0
   725   000001                     	ds	1
   726   000002                     ??_I2C_2_Master_Idle:
   727   000002                     ?___wmul:
   728                           	callstack 0
   729   000002                     ?___awdiv:
   730                           	callstack 0
   731   000002                     ?___awmod:
   732                           	callstack 0
   733   000002                     ?___fladd:
   734                           	callstack 0
   735   000002                     ?___lmul:
   736                           	callstack 0
   737   000002                     ?___xxtofl:
   738                           	callstack 0
   739   000002                     sendCharSerial4@charToSend:
   740                           	callstack 0
   741   000002                     initDCmotorsPWM@PWMperiod:
   742                           	callstack 0
   743   000002                     logAction@newTime:
   744                           	callstack 0
   745   000002                     customDelayMs@milliseconds:
   746                           	callstack 0
   747   000002                     ___wmul@multiplier:
   748                           	callstack 0
   749   000002                     ___awdiv@dividend:
   750                           	callstack 0
   751   000002                     ___awmod@dividend:
   752                           	callstack 0
   753   000002                     fputc@c:
   754                           	callstack 0
   755   000002                     ___lmul@multiplier:
   756                           	callstack 0
   757   000002                     ___fleq@ff1:
   758                           	callstack 0
   759   000002                     ___flge@ff1:
   760                           	callstack 0
   761   000002                     ___fladd@b:
   762                           	callstack 0
   763   000002                     ___xxtofl@val:
   764                           	callstack 0
   765                           
   766                           ; 4 bytes @ 0x1
   767   000002                     	ds	1
   768   000003                     ??_I2C_2_Master_Read:
   769   000003                     I2C_2_Master_Write@data_byte:
   770                           	callstack 0
   771   000003                     sendStringSerial4@string:
   772                           	callstack 0
   773                           
   774                           ; 1 bytes @ 0x2
   775   000003                     	ds	1
   776   000004                     ??_customDelayMs:
   777   000004                     color_writetoaddr@value:
   778                           	callstack 0
   779   000004                     I2C_2_Master_Read@ack:
   780                           	callstack 0
   781   000004                     fputc@fp:
   782                           	callstack 0
   783   000004                     logAction@path_step:
   784                           	callstack 0
   785   000004                     ___wmul@multiplicand:
   786                           	callstack 0
   787   000004                     ___awdiv@divisor:
   788                           	callstack 0
   789   000004                     ___awmod@divisor:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x3
   793   000004                     	ds	1
   794   000005                     ??_fputc:
   795   000005                     color_writetoaddr@address:
   796                           	callstack 0
   797   000005                     I2C_2_Master_Read@tmp:
   798                           	callstack 0
   799   000005                     customDelayMs@i:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x4
   803   000005                     	ds	1
   804   000006                     ??_color_click_init:
   805   000006                     ??___xxtofl:
   806   000006                     ?_color_read_Red:
   807                           	callstack 0
   808   000006                     ?_color_read_Green:
   809                           	callstack 0
   810   000006                     ?_color_read_Blue:
   811                           	callstack 0
   812   000006                     ?_color_read_Clear:
   813                           	callstack 0
   814   000006                     logAction@newAction:
   815                           	callstack 0
   816   000006                     ___awdiv@counter:
   817                           	callstack 0
   818   000006                     ___awmod@counter:
   819                           	callstack 0
   820   000006                     ___wmul@product:
   821                           	callstack 0
   822   000006                     ___lmul@multiplicand:
   823                           	callstack 0
   824   000006                     ___fleq@ff2:
   825                           	callstack 0
   826   000006                     ___flge@ff2:
   827                           	callstack 0
   828   000006                     ___fladd@a:
   829                           	callstack 0
   830                           
   831                           ; 4 bytes @ 0x5
   832   000006                     	ds	1
   833   000007                     ?_get16bitTMR0val:
   834                           	callstack 0
   835   000007                     ___awdiv@sign:
   836                           	callstack 0
   837   000007                     ___awmod@sign:
   838                           	callstack 0
   839   000007                     get16bitTMR0val@path_step:
   840                           	callstack 0
   841                           
   842                           ; 2 bytes @ 0x6
   843   000007                     	ds	1
   844   000008                     ??_color_read_Red:
   845   000008                     ??_color_read_Green:
   846   000008                     ??_color_read_Blue:
   847   000008                     ??_color_read_Clear:
   848   000008                     ?_abs:
   849                           	callstack 0
   850   000008                     ?___lwdiv:
   851                           	callstack 0
   852   000008                     ?_read_prec_or_width:
   853                           	callstack 0
   854   000008                     read_prec_or_width@fmt:
   855                           	callstack 0
   856   000008                     ___awdiv@quotient:
   857                           	callstack 0
   858   000008                     ___lwdiv@dividend:
   859                           	callstack 0
   860   000008                     abs@a:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0x7
   864   000008                     	ds	1
   865   000009                     ??_get16bitTMR0val:
   866   000009                     read_prec_or_width@ap:
   867                           	callstack 0
   868                           
   869                           ; 1 bytes @ 0x8
   870   000009                     	ds	1
   871   00000A                     ??___fladd:
   872   00000A                     ??_abs:
   873   00000A                     ??___fleq:
   874   00000A                     ??___flge:
   875   00000A                     ___xxtofl@sign:
   876                           	callstack 0
   877   00000A                     read_prec_or_width@c:
   878                           	callstack 0
   879   00000A                     ___lwdiv@divisor:
   880                           	callstack 0
   881   00000A                     fputs@s:
   882                           	callstack 0
   883   00000A                     ___lmul@product:
   884                           	callstack 0
   885                           
   886                           ; 4 bytes @ 0x9
   887   00000A                     	ds	1
   888   00000B                     ___xxtofl@exp:
   889                           	callstack 0
   890   00000B                     color_read_Red@tmp:
   891                           	callstack 0
   892   00000B                     color_read_Green@tmp:
   893                           	callstack 0
   894   00000B                     color_read_Blue@tmp:
   895                           	callstack 0
   896   00000B                     color_read_Clear@tmp:
   897                           	callstack 0
   898   00000B                     read_prec_or_width@n:
   899                           	callstack 0
   900                           
   901                           ; 2 bytes @ 0xA
   902   00000B                     	ds	1
   903   00000C                     fputs@fp:
   904                           	callstack 0
   905   00000C                     ___lwdiv@quotient:
   906                           	callstack 0
   907   00000C                     ___xxtofl@arg:
   908                           	callstack 0
   909                           
   910                           ; 4 bytes @ 0xB
   911   00000C                     	ds	1
   912   00000D                     fputs@c:
   913                           	callstack 0
   914   00000D                     get16bitTMR0val@combined_value:
   915                           	callstack 0
   916                           
   917                           ; 2 bytes @ 0xC
   918   00000D                     	ds	1
   919   00000E                     ?___aldiv:
   920                           	callstack 0
   921   00000E                     ___lwdiv@counter:
   922                           	callstack 0
   923   00000E                     ___fladd@signs:
   924                           	callstack 0
   925   00000E                     fputs@i:
   926                           	callstack 0
   927   00000E                     ___aldiv@dividend:
   928                           	callstack 0
   929                           
   930                           ; 4 bytes @ 0xD
   931   00000E                     	ds	1
   932   00000F                     setMotorPWM@m:
   933                           	callstack 0
   934   00000F                     ___fladd@aexp:
   935                           	callstack 0
   936                           
   937                           ; 1 bytes @ 0xE
   938   00000F                     	ds	1
   939   000010                     ??_setMotorPWM:
   940   000010                     ?___flmul:
   941                           	callstack 0
   942   000010                     ___fladd@bexp:
   943                           	callstack 0
   944   000010                     pad@fp:
   945                           	callstack 0
   946   000010                     ___flmul@b:
   947                           	callstack 0
   948                           
   949                           ; 4 bytes @ 0xF
   950   000010                     	ds	1
   951   000011                     ___fladd@grs:
   952                           	callstack 0
   953   000011                     pad@buf:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x10
   957   000011                     	ds	1
   958   000012                     ?___flsub:
   959                           	callstack 0
   960   000012                     setMotorPWM@posDuty:
   961                           	callstack 0
   962   000012                     ___aldiv@divisor:
   963                           	callstack 0
   964   000012                     ___flsub@b:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0x11
   968   000012                     	ds	1
   969   000013                     setMotorPWM@negDuty:
   970                           	callstack 0
   971   000013                     pad@p:
   972                           	callstack 0
   973                           
   974                           ; 2 bytes @ 0x12
   975   000013                     	ds	1
   976   000014                     stop@mL:
   977                           	callstack 0
   978   000014                     turnLeft@mL:
   979                           	callstack 0
   980   000014                     turnRight@mL:
   981                           	callstack 0
   982   000014                     fullSpeedBack@mL:
   983                           	callstack 0
   984   000014                     ___flmul@a:
   985                           	callstack 0
   986                           
   987                           ; 4 bytes @ 0x13
   988   000014                     	ds	1
   989   000015                     ??_pad:
   990   000015                     stop@mR:
   991                           	callstack 0
   992   000015                     turnLeft@mR:
   993                           	callstack 0
   994   000015                     turnRight@mR:
   995                           	callstack 0
   996   000015                     fullSpeedBack@mR:
   997                           	callstack 0
   998                           
   999                           ; 1 bytes @ 0x14
  1000   000015                     	ds	1
  1001   000016                     ??_stop:
  1002   000016                     ??_turnLeft:
  1003   000016                     ??_turnRight:
  1004   000016                     ??_fullSpeedBack:
  1005   000016                     ___aldiv@counter:
  1006                           	callstack 0
  1007   000016                     pad@i:
  1008                           	callstack 0
  1009   000016                     ___flsub@a:
  1010                           	callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x15
  1013   000016                     	ds	1
  1014   000017                     ___aldiv@sign:
  1015                           	callstack 0
  1016   000017                     turnLeft@i:
  1017                           	callstack 0
  1018   000017                     turnRight@i:
  1019                           	callstack 0
  1020   000017                     fullSpeedBack@power:
  1021                           	callstack 0
  1022                           
  1023                           ; 2 bytes @ 0x16
  1024   000017                     	ds	1
  1025   000018                     ??___flmul:
  1026   000018                     dtoa@fp:
  1027                           	callstack 0
  1028   000018                     ___aldiv@quotient:
  1029                           	callstack 0
  1030                           
  1031                           ; 4 bytes @ 0x17
  1032   000018                     	ds	1
  1033   000019                     right90@mL:
  1034                           	callstack 0
  1035   000019                     left90@mL:
  1036                           	callstack 0
  1037   000019                     turn180@mL:
  1038                           	callstack 0
  1039   000019                     right135@mL:
  1040                           	callstack 0
  1041   000019                     left135@mL:
  1042                           	callstack 0
  1043   000019                     backHalf@mL:
  1044                           	callstack 0
  1045   000019                     backOneAndHalf@mL:
  1046                           	callstack 0
  1047   000019                     dtoa@d:
  1048                           	callstack 0
  1049                           
  1050                           ; 2 bytes @ 0x18
  1051   000019                     	ds	1
  1052   00001A                     right90@mR:
  1053                           	callstack 0
  1054   00001A                     left90@mR:
  1055                           	callstack 0
  1056   00001A                     turn180@mR:
  1057                           	callstack 0
  1058   00001A                     right135@mR:
  1059                           	callstack 0
  1060   00001A                     left135@mR:
  1061                           	callstack 0
  1062   00001A                     backHalf@mR:
  1063                           	callstack 0
  1064   00001A                     backOneAndHalf@mR:
  1065                           	callstack 0
  1066                           
  1067                           ; 1 bytes @ 0x19
  1068   00001A                     	ds	1
  1069   00001B                     ??_right90:
  1070   00001B                     ??_left90:
  1071   00001B                     ??_turn180:
  1072   00001B                     ??_right135:
  1073   00001B                     ??_left135:
  1074   00001B                     ??_backHalf:
  1075   00001B                     ??_backOneAndHalf:
  1076   00001B                     _dtoa$3086:
  1077                           	callstack 0
  1078                           
  1079                           ; 2 bytes @ 0x1A
  1080   00001B                     	ds	1
  1081   00001C                     ___flmul@sign:
  1082                           	callstack 0
  1083                           
  1084                           ; 1 bytes @ 0x1B
  1085   00001C                     	ds	1
  1086   00001D                     moveRed@mL:
  1087                           	callstack 0
  1088   00001D                     moveGreen@mL:
  1089                           	callstack 0
  1090   00001D                     moveBlue@mL:
  1091                           	callstack 0
  1092   00001D                     moveYellow@mL:
  1093                           	callstack 0
  1094   00001D                     movePink@mL:
  1095                           	callstack 0
  1096   00001D                     moveOrange@mL:
  1097                           	callstack 0
  1098   00001D                     moveLightBlue@mL:
  1099                           	callstack 0
  1100   00001D                     moveWhite@mL:
  1101                           	callstack 0
  1102   00001D                     reverseTurn@mL:
  1103                           	callstack 0
  1104   00001D                     dtoa@p:
  1105                           	callstack 0
  1106   00001D                     ___flmul@grs:
  1107                           	callstack 0
  1108                           
  1109                           ; 4 bytes @ 0x1C
  1110   00001D                     	ds	1
  1111   00001E                     moveRed@mR:
  1112                           	callstack 0
  1113   00001E                     moveGreen@mR:
  1114                           	callstack 0
  1115   00001E                     moveBlue@mR:
  1116                           	callstack 0
  1117   00001E                     moveYellow@mR:
  1118                           	callstack 0
  1119   00001E                     movePink@mR:
  1120                           	callstack 0
  1121   00001E                     moveOrange@mR:
  1122                           	callstack 0
  1123   00001E                     moveLightBlue@mR:
  1124                           	callstack 0
  1125   00001E                     moveWhite@mR:
  1126                           	callstack 0
  1127   00001E                     reverseTurn@mR:
  1128                           	callstack 0
  1129   00001E                     dtoa@w:
  1130                           	callstack 0
  1131                           
  1132                           ; 2 bytes @ 0x1D
  1133   00001E                     	ds	1
  1134   00001F                     ??_moveRed:
  1135   00001F                     ??_moveGreen:
  1136   00001F                     ??_moveBlue:
  1137   00001F                     ??_moveLightBlue:
  1138   00001F                     ??_moveYellow:
  1139   00001F                     ??_moveOrange:
  1140   00001F                     ??_movePink:
  1141   00001F                     ??_moveWhite:
  1142   00001F                     reverseTurn@actionStep:
  1143                           	callstack 0
  1144                           
  1145                           ; 1 bytes @ 0x1E
  1146   00001F                     	ds	1
  1147   000020                     ??_reverseTurn:
  1148   000020                     dtoa@s:
  1149                           	callstack 0
  1150                           
  1151                           ; 1 bytes @ 0x1F
  1152   000020                     	ds	1
  1153   000021                     ?_decision:
  1154                           	callstack 0
  1155   000021                     ___flmul@aexp:
  1156                           	callstack 0
  1157   000021                     decision@hue:
  1158                           	callstack 0
  1159   000021                     dtoa@i:
  1160                           	callstack 0
  1161                           
  1162                           ; 2 bytes @ 0x20
  1163   000021                     	ds	1
  1164   000022                     ___flmul@bexp:
  1165                           	callstack 0
  1166                           
  1167                           ; 1 bytes @ 0x21
  1168   000022                     	ds	1
  1169   000023                     vfpfcnvrt@fp:
  1170                           	callstack 0
  1171   000023                     decision@path_step:
  1172                           	callstack 0
  1173   000023                     ___flmul@prod:
  1174                           	callstack 0
  1175                           
  1176                           ; 4 bytes @ 0x22
  1177   000023                     	ds	1
  1178   000024                     vfpfcnvrt@fmt:
  1179                           	callstack 0
  1180                           
  1181                           ; 1 bytes @ 0x23
  1182   000024                     	ds	1
  1183   000025                     vfpfcnvrt@ap:
  1184                           	callstack 0
  1185                           
  1186                           ; 1 bytes @ 0x24
  1187   000025                     	ds	1
  1188   000026                     ??_vfpfcnvrt:
  1189                           
  1190                           ; 1 bytes @ 0x25
  1191   000026                     	ds	1
  1192   000027                     ___flmul@temp:
  1193                           	callstack 0
  1194                           
  1195                           ; 2 bytes @ 0x26
  1196   000027                     	ds	1
  1197   000028                     vfpfcnvrt@convarg:
  1198                           	callstack 0
  1199                           
  1200                           ; 4 bytes @ 0x27
  1201   000028                     	ds	1
  1202   000029                     ?___fldiv:
  1203                           	callstack 0
  1204   000029                     ___fldiv@b:
  1205                           	callstack 0
  1206                           
  1207                           ; 4 bytes @ 0x28
  1208   000029                     	ds	3
  1209   00002C                     vfpfcnvrt@done:
  1210                           	callstack 0
  1211                           
  1212                           ; 1 bytes @ 0x2B
  1213   00002C                     	ds	1
  1214   00002D                     vfpfcnvrt@cp:
  1215                           	callstack 0
  1216   00002D                     ___fldiv@a:
  1217                           	callstack 0
  1218                           
  1219                           ; 4 bytes @ 0x2C
  1220   00002D                     	ds	1
  1221   00002E                     ?_vfprintf:
  1222                           	callstack 0
  1223   00002E                     vfprintf@fp:
  1224                           	callstack 0
  1225                           
  1226                           ; 1 bytes @ 0x2D
  1227   00002E                     	ds	1
  1228   00002F                     vfprintf@fmt:
  1229                           	callstack 0
  1230                           
  1231                           ; 1 bytes @ 0x2E
  1232   00002F                     	ds	1
  1233   000030                     vfprintf@ap:
  1234                           	callstack 0
  1235                           
  1236                           ; 1 bytes @ 0x2F
  1237   000030                     	ds	1
  1238   000031                     ??___fldiv:
  1239   000031                     vfprintf@cfmt:
  1240                           	callstack 0
  1241                           
  1242                           ; 1 bytes @ 0x30
  1243   000031                     	ds	1
  1244   000032                     ?_sprintf:
  1245                           	callstack 0
  1246   000032                     sprintf@s:
  1247                           	callstack 0
  1248                           
  1249                           ; 1 bytes @ 0x31
  1250   000032                     	ds	1
  1251   000033                     sprintf@fmt:
  1252                           	callstack 0
  1253                           
  1254                           ; 1 bytes @ 0x32
  1255   000033                     	ds	2
  1256   000035                     ___fldiv@rem:
  1257                           	callstack 0
  1258                           
  1259                           ; 4 bytes @ 0x34
  1260   000035                     	ds	3
  1261   000038                     sprintf@ap:
  1262                           	callstack 0
  1263                           
  1264                           ; 1 bytes @ 0x37
  1265   000038                     	ds	1
  1266   000039                     ___fldiv@sign:
  1267                           	callstack 0
  1268   000039                     sprintf@f:
  1269                           	callstack 0
  1270                           
  1271                           ; 12 bytes @ 0x38
  1272   000039                     	ds	1
  1273   00003A                     ___fldiv@new_exp:
  1274                           	callstack 0
  1275                           
  1276                           ; 2 bytes @ 0x39
  1277   00003A                     	ds	2
  1278   00003C                     ___fldiv@grs:
  1279                           	callstack 0
  1280                           
  1281                           ; 4 bytes @ 0x3B
  1282   00003C                     	ds	4
  1283   000040                     ___fldiv@bexp:
  1284                           	callstack 0
  1285                           
  1286                           ; 1 bytes @ 0x3F
  1287   000040                     	ds	1
  1288   000041                     ___fldiv@aexp:
  1289                           	callstack 0
  1290                           
  1291                           ; 1 bytes @ 0x40
  1292   000041                     	ds	1
  1293   000042                     ?___fltol:
  1294                           	callstack 0
  1295   000042                     ___fltol@f1:
  1296                           	callstack 0
  1297                           
  1298                           ; 4 bytes @ 0x41
  1299   000042                     	ds	3
  1300   000045                     send2USART@hue:
  1301                           	callstack 0
  1302                           
  1303                           ; 2 bytes @ 0x44
  1304   000045                     	ds	1
  1305   000046                     ??___fltol:
  1306                           
  1307                           ; 1 bytes @ 0x45
  1308   000046                     	ds	1
  1309   000047                     calibration_routine@cCal:
  1310                           	callstack 0
  1311                           
  1312                           ; 1 bytes @ 0x46
  1313   000047                     	ds	1
  1314   000048                     ??_calibration_routine:
  1315                           
  1316                           ; 1 bytes @ 0x47
  1317   000048                     	ds	2
  1318   00004A                     ___fltol@sign1:
  1319                           	callstack 0
  1320                           
  1321                           ; 1 bytes @ 0x49
  1322   00004A                     	ds	1
  1323   00004B                     ___fltol@exp1:
  1324                           	callstack 0
  1325                           
  1326                           ; 1 bytes @ 0x4A
  1327   00004B                     	ds	1
  1328   00004C                     ?_convert_rgb2hue:
  1329                           	callstack 0
  1330   00004C                     convert_rgb2hue@cMax:
  1331                           	callstack 0
  1332   00004C                     fullSpeedAhead@mL:
  1333                           	callstack 0
  1334                           
  1335                           ; 1 bytes @ 0x4B
  1336   00004C                     	ds	1
  1337   00004D                     convert_rgb2hue@cCurr:
  1338                           	callstack 0
  1339   00004D                     fullSpeedAhead@mR:
  1340                           	callstack 0
  1341                           
  1342                           ; 1 bytes @ 0x4C
  1343   00004D                     	ds	1
  1344   00004E                     ??_convert_rgb2hue:
  1345   00004E                     ??_fullSpeedAhead:
  1346                           
  1347                           ; 1 bytes @ 0x4D
  1348   00004E                     	ds	1
  1349   00004F                     fullSpeedAhead@power:
  1350                           	callstack 0
  1351                           
  1352                           ; 2 bytes @ 0x4E
  1353   00004F                     	ds	1
  1354   000050                     ?_reading_hue:
  1355                           	callstack 0
  1356   000050                     reading_hue@cCurr:
  1357                           	callstack 0
  1358                           
  1359                           ; 1 bytes @ 0x4F
  1360   000050                     	ds	1
  1361   000051                     reverseStraight@mL:
  1362                           	callstack 0
  1363                           
  1364                           ; 1 bytes @ 0x50
  1365   000051                     	ds	1
  1366   000052                     ??_reading_hue:
  1367   000052                     reverseStraight@mR:
  1368                           	callstack 0
  1369                           
  1370                           ; 1 bytes @ 0x51
  1371   000052                     	ds	1
  1372   000053                     reverseStraight@time_ms:
  1373                           	callstack 0
  1374                           
  1375                           ; 4 bytes @ 0x52
  1376   000053                     	ds	1
  1377   000054                     reading_hue@hue:
  1378                           	callstack 0
  1379                           
  1380                           ; 2 bytes @ 0x53
  1381   000054                     	ds	3
  1382   000057                     ??_reverseStraight:
  1383                           
  1384                           ; 1 bytes @ 0x56
  1385   000057                     	ds	2
  1386   000059                     reverseStraight@delayMs:
  1387                           	callstack 0
  1388                           
  1389                           ; 2 bytes @ 0x58
  1390   000059                     	ds	2
  1391   00005B                     ??_main:
  1392                           
  1393                           ; 1 bytes @ 0x5A
  1394   00005B                     	ds	2
  1395                           
  1396 ;;
  1397 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1398 ;;
  1399 ;; *************** function _main *****************
  1400 ;; Defined at:
  1401 ;;		line 29 in file "main.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;		None
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  white           2    0        unsigned int 
  1406 ;;  clear_max       4   82[BANK0 ] float 
  1407 ;;  clear_curren    4   78[BANK0 ] float 
  1408 ;;  clear_norm      2   88[BANK0 ] unsigned int 
  1409 ;;  path_step       2   86[BANK0 ] unsigned int 
  1410 ;;  hue             2   76[BANK0 ] unsigned int 
  1411 ;;  PWMcycle        2    0        unsigned int 
  1412 ;;  ambient         2    0        unsigned int 
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  1    wreg      void 
  1415 ;; Registers used:
  1416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1423 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1424 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1425 ;;      Totals:         2      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1426 ;;Total ram usage:       16 bytes
  1427 ;; Hardware stack levels required when called: 11
  1428 ;; This function calls:
  1429 ;;		_ADC_init
  1430 ;;		_Timer0_init
  1431 ;;		___fldiv
  1432 ;;		___flmul
  1433 ;;		___fltol
  1434 ;;		___xxtofl
  1435 ;;		_calibration_routine
  1436 ;;		_color_click_init
  1437 ;;		_color_read_Clear
  1438 ;;		_decision
  1439 ;;		_fullSpeedAhead
  1440 ;;		_get16bitTMR0val
  1441 ;;		_initDCmotorsPWM
  1442 ;;		_initUSART4
  1443 ;;		_reading_hue
  1444 ;;		_returnHome
  1445 ;;		_send2USART
  1446 ;;		_stop
  1447 ;; This function is called by:
  1448 ;;		Startup code after reset
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text0
  1453   001B18                     __ptext0:
  1454                           	callstack 0
  1455   001B18                     _main:
  1456                           	callstack 20
  1457   001B18                     
  1458                           ;main.c: 31:     ADC_init();
  1459   001B18  ECC6  F024         	call	_ADC_init	;wreg free
  1460   001B1C                     
  1461                           ;main.c: 32:     color_click_init();
  1462   001B1C  EC69  F022         	call	_color_click_init	;wreg free
  1463   001B20                     
  1464                           ;main.c: 33:     initUSART4();
  1465   001B20  ECA8  F024         	call	_initUSART4	;wreg free
  1466   001B24                     
  1467                           ;main.c: 34:     Timer0_init();
  1468   001B24  EC44  F024         	call	_Timer0_init	;wreg free
  1469   001B28                     
  1470                           ;main.c: 38:     initDCmotorsPWM(PWMcycle);
  1471   001B28  0E00               	movlw	0
  1472   001B2A  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1473   001B2C  0E63               	movlw	99
  1474   001B2E  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1475   001B30  EC10  F01F         	call	_initDCmotorsPWM	;wreg free
  1476   001B34                     
  1477                           ;main.c: 41:     motorL.power = 0;
  1478   001B34  0E00               	movlw	0
  1479   001B36  0100               	movlb	0	; () banked
  1480   001B38  6FF4               	movwf	_motorL& (0+255),b
  1481   001B3A                     
  1482                           ; BSR set to: 0
  1483                           ;main.c: 42:     motorL.direction = 1;
  1484   001B3A  0E01               	movlw	1
  1485   001B3C  6FF5               	movwf	(_motorL+1)& (0+255),b
  1486   001B3E                     
  1487                           ; BSR set to: 0
  1488                           ;main.c: 43:     motorL.brakemode = 1;
  1489   001B3E  0E01               	movlw	1
  1490   001B40  6FF6               	movwf	(_motorL+2)& (0+255),b
  1491   001B42                     
  1492                           ; BSR set to: 0
  1493                           ;main.c: 44:     motorL.PWMperiod = PWMcycle;
  1494   001B42  0E00               	movlw	0
  1495   001B44  6FF8               	movwf	(_motorL+4)& (0+255),b
  1496   001B46  0E63               	movlw	99
  1497   001B48  6FF7               	movwf	(_motorL+3)& (0+255),b
  1498   001B4A                     
  1499                           ; BSR set to: 0
  1500                           ;main.c: 45:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1501   001B4A  0EAA               	movlw	170
  1502   001B4C  6FF9               	movwf	(_motorL+5)& (0+255),b
  1503   001B4E  0E0F               	movlw	15
  1504   001B50  6FFA               	movwf	(_motorL+6)& (0+255),b
  1505   001B52                     
  1506                           ; BSR set to: 0
  1507                           ;main.c: 46:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1508   001B52  0EA6               	movlw	166
  1509   001B54  6FFB               	movwf	(_motorL+7)& (0+255),b
  1510   001B56  0E0F               	movlw	15
  1511   001B58  6FFC               	movwf	(_motorL+8)& (0+255),b
  1512   001B5A                     
  1513                           ; BSR set to: 0
  1514                           ;main.c: 48:     motorR.power = 0;
  1515   001B5A  0E00               	movlw	0
  1516   001B5C  6FEB               	movwf	_motorR& (0+255),b
  1517   001B5E                     
  1518                           ; BSR set to: 0
  1519                           ;main.c: 49:     motorR.direction = 1;
  1520   001B5E  0E01               	movlw	1
  1521   001B60  6FEC               	movwf	(_motorR+1)& (0+255),b
  1522   001B62                     
  1523                           ; BSR set to: 0
  1524                           ;main.c: 50:     motorR.brakemode = 1;
  1525   001B62  0E01               	movlw	1
  1526   001B64  6FED               	movwf	(_motorR+2)& (0+255),b
  1527   001B66                     
  1528                           ; BSR set to: 0
  1529                           ;main.c: 51:     motorR.PWMperiod = PWMcycle;
  1530   001B66  0E00               	movlw	0
  1531   001B68  6FEF               	movwf	(_motorR+4)& (0+255),b
  1532   001B6A  0E63               	movlw	99
  1533   001B6C  6FEE               	movwf	(_motorR+3)& (0+255),b
  1534   001B6E                     
  1535                           ; BSR set to: 0
  1536                           ;main.c: 52:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1537   001B6E  0E25               	movlw	37
  1538   001B70  6FF0               	movwf	(_motorR+5)& (0+255),b
  1539   001B72  0E0F               	movlw	15
  1540   001B74  6FF1               	movwf	(_motorR+6)& (0+255),b
  1541   001B76                     
  1542                           ; BSR set to: 0
  1543                           ;main.c: 53:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1544   001B76  0E21               	movlw	33
  1545   001B78  6FF2               	movwf	(_motorR+7)& (0+255),b
  1546   001B7A  0E0F               	movlw	15
  1547   001B7C  6FF3               	movwf	(_motorR+8)& (0+255),b
  1548   001B7E                     
  1549                           ; BSR set to: 0
  1550                           ;main.c: 56:     LATDbits.LATD7=0;
  1551   001B7E  9E7C               	bcf	124,7,c	;volatile
  1552   001B80                     
  1553                           ; BSR set to: 0
  1554                           ;main.c: 57:     TRISDbits.TRISD7=0;
  1555   001B80  9E84               	bcf	132,7,c	;volatile
  1556   001B82                     
  1557                           ; BSR set to: 0
  1558                           ;main.c: 64:     TRISGbits.TRISG0 = 0;
  1559   001B82  9087               	bcf	135,0,c	;volatile
  1560   001B84                     
  1561                           ; BSR set to: 0
  1562                           ;main.c: 65:     LATGbits.LATG0 = 0;
  1563   001B84  907F               	bcf	127,0,c	;volatile
  1564   001B86                     
  1565                           ; BSR set to: 0
  1566                           ;main.c: 66:     TRISEbits.TRISE7 = 0;
  1567   001B86  9E85               	bcf	133,7,c	;volatile
  1568   001B88                     
  1569                           ; BSR set to: 0
  1570                           ;main.c: 67:     LATEbits.LATE7 = 0;
  1571   001B88  9E7D               	bcf	125,7,c	;volatile
  1572   001B8A                     
  1573                           ; BSR set to: 0
  1574                           ;main.c: 68:     TRISAbits.TRISA3 = 0;
  1575   001B8A  9681               	bcf	129,3,c	;volatile
  1576   001B8C                     
  1577                           ; BSR set to: 0
  1578                           ;main.c: 69:     LATAbits.LATA3 = 0;
  1579   001B8C  9679               	bcf	121,3,c	;volatile
  1580   001B8E                     
  1581                           ; BSR set to: 0
  1582                           ;main.c: 74:     TRISFbits.TRISF3=1;
  1583   001B8E  8686               	bsf	134,3,c	;volatile
  1584   001B90                     
  1585                           ; BSR set to: 0
  1586                           ;main.c: 75:     ANSELFbits.ANSELF3=0;
  1587   001B90  010E               	movlb	14	; () banked
  1588   001B92  97B4               	bcf	180,3,b	;volatile
  1589   001B94                     
  1590                           ; BSR set to: 14
  1591                           ;main.c: 76:     TRISFbits.TRISF2 = 1;
  1592   001B94  8486               	bsf	134,2,c	;volatile
  1593   001B96                     
  1594                           ; BSR set to: 14
  1595                           ;main.c: 77:     LATFbits.LATF2 = 0;
  1596   001B96  947E               	bcf	126,2,c	;volatile
  1597   001B98                     
  1598                           ; BSR set to: 14
  1599                           ;main.c: 78:     ANSELFbits.ANSELF2 = 0;
  1600   001B98  95B4               	bcf	180,2,b	;volatile
  1601   001B9A                     
  1602                           ; BSR set to: 14
  1603                           ;main.c: 81:     TRISGbits.TRISG1 = 0;
  1604   001B9A  9287               	bcf	135,1,c	;volatile
  1605   001B9C                     
  1606                           ; BSR set to: 14
  1607                           ;main.c: 82:     LATGbits.LATG1 = 0;
  1608   001B9C  927F               	bcf	127,1,c	;volatile
  1609   001B9E                     
  1610                           ; BSR set to: 14
  1611                           ;main.c: 88:     TRISHbits.TRISH3 = 0;
  1612   001B9E  9688               	bcf	136,3,c	;volatile
  1613   001BA0                     
  1614                           ; BSR set to: 14
  1615                           ;main.c: 89:     LATHbits.LATH3 = 1;
  1616   001BA0  8680               	bsf	128,3,c	;volatile
  1617   001BA2                     
  1618                           ; BSR set to: 14
  1619                           ;main.c: 90:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1620   001BA2  0E19               	movlw	25
  1621   001BA4  6E5C               	movwf	(??_main+1)^0,c
  1622   001BA6  0E5A               	movlw	90
  1623   001BA8  6E5B               	movwf	??_main^0,c
  1624   001BAA  0EB2               	movlw	178
  1625   001BAC                     u5657:
  1626   001BAC  2EE8               	decfsz	wreg,f,c
  1627   001BAE  D7FE               	bra	u5657
  1628   001BB0  2E5B               	decfsz	??_main^0,f,c
  1629   001BB2  D7FC               	bra	u5657
  1630   001BB4  2E5C               	decfsz	(??_main+1)^0,f,c
  1631   001BB6  D7FA               	bra	u5657
  1632   001BB8                     
  1633                           ;main.c: 91:     LATHbits.LATH3 = 0;
  1634   001BB8  9680               	bcf	128,3,c	;volatile
  1635   001BBA                     
  1636                           ;main.c: 95:     calibration_routine(&colorCalibration);
  1637   001BBA  0EE1               	movlw	low _colorCalibration
  1638   001BBC  6E47               	movwf	calibration_routine@cCal^0,c
  1639   001BBE  ECCE  F014         	call	_calibration_routine	;wreg free
  1640   001BC2                     
  1641                           ;main.c: 96:     unsigned int clear_norm;;main.c: 97:     unsigned int path_step = 0;
  1642   001BC2  0E00               	movlw	0
  1643   001BC4  0100               	movlb	0	; () banked
  1644   001BC6  6FB7               	movwf	(main@path_step+1)& (0+255),b
  1645   001BC8  0E00               	movlw	0
  1646   001BCA  6FB6               	movwf	main@path_step& (0+255),b
  1647   001BCC                     l6360:
  1648                           
  1649                           ;main.c: 110:         LATGbits.LATG0 = 1;
  1650   001BCC  807F               	bsf	127,0,c	;volatile
  1651   001BCE                     
  1652                           ;main.c: 111:         LATEbits.LATE7 = 1;
  1653   001BCE  8E7D               	bsf	125,7,c	;volatile
  1654   001BD0                     
  1655                           ;main.c: 112:         LATAbits.LATA3 = 1;
  1656   001BD0  8679               	bsf	121,3,c	;volatile
  1657   001BD2                     
  1658                           ;main.c: 115:         fullSpeedAhead(&motorL,&motorR);
  1659   001BD2  0EF4               	movlw	low _motorL
  1660   001BD4  6E4C               	movwf	fullSpeedAhead@mL^0,c
  1661   001BD6  0EEB               	movlw	low _motorR
  1662   001BD8  6E4D               	movwf	fullSpeedAhead@mR^0,c
  1663   001BDA  ECA5  F01C         	call	_fullSpeedAhead	;wreg free
  1664   001BDE                     
  1665                           ;main.c: 116:         T0CON0bits.T0EN=1;
  1666   001BDE  8ED5               	bsf	213,7,c	;volatile
  1667   001BE0                     
  1668                           ;main.c: 118:         colorCurrent.clear = color_read_Clear();
  1669   001BE0  EC17  F021         	call	_color_read_Clear	;wreg free
  1670   001BE4  C006  F0DD         	movff	?_color_read_Clear,_colorCurrent+6
  1671   001BE8  C007  F0DE         	movff	?_color_read_Clear+1,_colorCurrent+7
  1672   001BEC                     
  1673                           ;main.c: 120:         clear_current = colorCurrent.clear;
  1674   001BEC  C0DD  F002         	movff	_colorCurrent+6,___xxtofl@val
  1675   001BF0  C0DE  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1676   001BF4  6A04               	clrf	(___xxtofl@val+2)^0,c
  1677   001BF6  6A05               	clrf	(___xxtofl@val+3)^0,c
  1678   001BF8  0E00               	movlw	0
  1679   001BFA  ECF1  F015         	call	___xxtofl
  1680   001BFE  C002  F0AE         	movff	?___xxtofl,main@clear_current
  1681   001C02  C003  F0AF         	movff	?___xxtofl+1,main@clear_current+1
  1682   001C06  C004  F0B0         	movff	?___xxtofl+2,main@clear_current+2
  1683   001C0A  C005  F0B1         	movff	?___xxtofl+3,main@clear_current+3
  1684   001C0E                     
  1685                           ;main.c: 121:         clear_max = colorCalibration.clear;
  1686   001C0E  C0E7  F002         	movff	_colorCalibration+6,___xxtofl@val
  1687   001C12  C0E8  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1688   001C16  6A04               	clrf	(___xxtofl@val+2)^0,c
  1689   001C18  6A05               	clrf	(___xxtofl@val+3)^0,c
  1690   001C1A  0E00               	movlw	0
  1691   001C1C  ECF1  F015         	call	___xxtofl
  1692   001C20  C002  F0B2         	movff	?___xxtofl,main@clear_max
  1693   001C24  C003  F0B3         	movff	?___xxtofl+1,main@clear_max+1
  1694   001C28  C004  F0B4         	movff	?___xxtofl+2,main@clear_max+2
  1695   001C2C  C005  F0B5         	movff	?___xxtofl+3,main@clear_max+3
  1696   001C30                     
  1697                           ;main.c: 122:         clear_norm = clear_current*100/clear_max;
  1698   001C30  C0B2  F02D         	movff	main@clear_max,___fldiv@a
  1699   001C34  C0B3  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1700   001C38  C0B4  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1701   001C3C  C0B5  F030         	movff	main@clear_max+3,___fldiv@a+3
  1702   001C40  0E00               	movlw	0
  1703   001C42  6E14               	movwf	___flmul@a^0,c
  1704   001C44  0E00               	movlw	0
  1705   001C46  6E15               	movwf	(___flmul@a+1)^0,c
  1706   001C48  0EC8               	movlw	200
  1707   001C4A  6E16               	movwf	(___flmul@a+2)^0,c
  1708   001C4C  0E42               	movlw	66
  1709   001C4E  6E17               	movwf	(___flmul@a+3)^0,c
  1710   001C50  C0AE  F010         	movff	main@clear_current,___flmul@b
  1711   001C54  C0AF  F011         	movff	main@clear_current+1,___flmul@b+1
  1712   001C58  C0B0  F012         	movff	main@clear_current+2,___flmul@b+2
  1713   001C5C  C0B1  F013         	movff	main@clear_current+3,___flmul@b+3
  1714   001C60  ECC6  F00F         	call	___flmul	;wreg free
  1715   001C64  C010  F029         	movff	?___flmul,___fldiv@b
  1716   001C68  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  1717   001C6C  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  1718   001C70  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  1719   001C74  ECDB  F011         	call	___fldiv	;wreg free
  1720   001C78  C029  F042         	movff	?___fldiv,___fltol@f1
  1721   001C7C  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  1722   001C80  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  1723   001C84  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  1724   001C88  ECB5  F01A         	call	___fltol	;wreg free
  1725   001C8C  C042  F0B8         	movff	?___fltol,main@clear_norm
  1726   001C90  C043  F0B9         	movff	?___fltol+1,main@clear_norm+1
  1727   001C94                     l6378:
  1728                           
  1729                           ;main.c: 125:         send2USART(clear_norm);
  1730   001C94  C0B8  F045         	movff	main@clear_norm,send2USART@hue
  1731   001C98  C0B9  F046         	movff	main@clear_norm+1,send2USART@hue+1
  1732   001C9C  ECB7  F024         	call	_send2USART	;wreg free
  1733                           
  1734                           ;main.c: 127:         while(clear_norm<8){
  1735   001CA0  EFAE  F00E         	goto	l6386
  1736   001CA4                     l6380:
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;main.c: 128:             (colorCurrent.clear) = color_read_Clear();
  1740   001CA4  EC17  F021         	call	_color_read_Clear	;wreg free
  1741   001CA8  C006  F0DD         	movff	?_color_read_Clear,_colorCurrent+6
  1742   001CAC  C007  F0DE         	movff	?_color_read_Clear+1,_colorCurrent+7
  1743                           
  1744                           ;main.c: 129:             clear_current = colorCurrent.clear;
  1745   001CB0  C0DD  F002         	movff	_colorCurrent+6,___xxtofl@val
  1746   001CB4  C0DE  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1747   001CB8  6A04               	clrf	(___xxtofl@val+2)^0,c
  1748   001CBA  6A05               	clrf	(___xxtofl@val+3)^0,c
  1749   001CBC  0E00               	movlw	0
  1750   001CBE  ECF1  F015         	call	___xxtofl
  1751   001CC2  C002  F0AE         	movff	?___xxtofl,main@clear_current
  1752   001CC6  C003  F0AF         	movff	?___xxtofl+1,main@clear_current+1
  1753   001CCA  C004  F0B0         	movff	?___xxtofl+2,main@clear_current+2
  1754   001CCE  C005  F0B1         	movff	?___xxtofl+3,main@clear_current+3
  1755                           
  1756                           ;main.c: 130:             clear_max = colorCalibration.clear;
  1757   001CD2  C0E7  F002         	movff	_colorCalibration+6,___xxtofl@val
  1758   001CD6  C0E8  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1759   001CDA  6A04               	clrf	(___xxtofl@val+2)^0,c
  1760   001CDC  6A05               	clrf	(___xxtofl@val+3)^0,c
  1761   001CDE  0E00               	movlw	0
  1762   001CE0  ECF1  F015         	call	___xxtofl
  1763   001CE4  C002  F0B2         	movff	?___xxtofl,main@clear_max
  1764   001CE8  C003  F0B3         	movff	?___xxtofl+1,main@clear_max+1
  1765   001CEC  C004  F0B4         	movff	?___xxtofl+2,main@clear_max+2
  1766   001CF0  C005  F0B5         	movff	?___xxtofl+3,main@clear_max+3
  1767   001CF4                     
  1768                           ;main.c: 131:             clear_norm = clear_current*100/clear_max;
  1769   001CF4  C0B2  F02D         	movff	main@clear_max,___fldiv@a
  1770   001CF8  C0B3  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1771   001CFC  C0B4  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1772   001D00  C0B5  F030         	movff	main@clear_max+3,___fldiv@a+3
  1773   001D04  0E00               	movlw	0
  1774   001D06  6E14               	movwf	___flmul@a^0,c
  1775   001D08  0E00               	movlw	0
  1776   001D0A  6E15               	movwf	(___flmul@a+1)^0,c
  1777   001D0C  0EC8               	movlw	200
  1778   001D0E  6E16               	movwf	(___flmul@a+2)^0,c
  1779   001D10  0E42               	movlw	66
  1780   001D12  6E17               	movwf	(___flmul@a+3)^0,c
  1781   001D14  C0AE  F010         	movff	main@clear_current,___flmul@b
  1782   001D18  C0AF  F011         	movff	main@clear_current+1,___flmul@b+1
  1783   001D1C  C0B0  F012         	movff	main@clear_current+2,___flmul@b+2
  1784   001D20  C0B1  F013         	movff	main@clear_current+3,___flmul@b+3
  1785   001D24  ECC6  F00F         	call	___flmul	;wreg free
  1786   001D28  C010  F029         	movff	?___flmul,___fldiv@b
  1787   001D2C  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  1788   001D30  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  1789   001D34  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  1790   001D38  ECDB  F011         	call	___fldiv	;wreg free
  1791   001D3C  C029  F042         	movff	?___fldiv,___fltol@f1
  1792   001D40  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  1793   001D44  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  1794   001D48  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  1795   001D4C  ECB5  F01A         	call	___fltol	;wreg free
  1796   001D50  C042  F0B8         	movff	?___fltol,main@clear_norm
  1797   001D54  C043  F0B9         	movff	?___fltol+1,main@clear_norm+1
  1798   001D58  EF4A  F00E         	goto	l6378
  1799   001D5C                     l6386:
  1800                           
  1801                           ;main.c: 127:         while(clear_norm<8){
  1802   001D5C  0100               	movlb	0	; () banked
  1803   001D5E  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1804   001D60  E109               	bnz	u5580
  1805   001D62  0E08               	movlw	8
  1806   001D64  5DB8               	subwf	main@clear_norm& (0+255),w,b
  1807   001D66  A0D8               	btfss	status,0,c
  1808   001D68  EFB8  F00E         	goto	u5581
  1809   001D6C  EFBA  F00E         	goto	u5580
  1810   001D70                     u5581:
  1811   001D70  EF52  F00E         	goto	l6380
  1812   001D74                     u5580:
  1813   001D74                     
  1814                           ; BSR set to: 0
  1815                           ;main.c: 135:         T0CON0bits.T0EN=0;
  1816   001D74  9ED5               	bcf	213,7,c	;volatile
  1817   001D76                     
  1818                           ; BSR set to: 0
  1819                           ;main.c: 137:         stop(&motorL,&motorR);
  1820   001D76  0EF4               	movlw	low _motorL
  1821   001D78  6E14               	movwf	stop@mL^0,c
  1822   001D7A  0EEB               	movlw	low _motorR
  1823   001D7C  6E15               	movwf	stop@mR^0,c
  1824   001D7E  EC58  F01F         	call	_stop	;wreg free
  1825   001D82                     
  1826                           ;main.c: 140:         path_step = get16bitTMR0val(path_step);
  1827   001D82  C0B6  F007         	movff	main@path_step,get16bitTMR0val@path_step
  1828   001D86  C0B7  F008         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  1829   001D8A  EC2F  F022         	call	_get16bitTMR0val	;wreg free
  1830   001D8E  C007  F0B6         	movff	?_get16bitTMR0val,main@path_step
  1831   001D92  C008  F0B7         	movff	?_get16bitTMR0val+1,main@path_step+1
  1832   001D96                     
  1833                           ;main.c: 142:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1834   001D96  0E11               	movlw	17
  1835   001D98  6E5C               	movwf	(??_main+1)^0,c
  1836   001D9A  0E3C               	movlw	60
  1837   001D9C  6E5B               	movwf	??_main^0,c
  1838   001D9E  0ECB               	movlw	203
  1839   001DA0                     u5667:
  1840   001DA0  2EE8               	decfsz	wreg,f,c
  1841   001DA2  D7FE               	bra	u5667
  1842   001DA4  2E5B               	decfsz	??_main^0,f,c
  1843   001DA6  D7FC               	bra	u5667
  1844   001DA8  2E5C               	decfsz	(??_main+1)^0,f,c
  1845   001DAA  D7FA               	bra	u5667
  1846   001DAC  0000               	nop	
  1847   001DAE                     
  1848                           ;main.c: 145:         fullSpeedAhead(&motorL,&motorR);
  1849   001DAE  0EF4               	movlw	low _motorL
  1850   001DB0  6E4C               	movwf	fullSpeedAhead@mL^0,c
  1851   001DB2  0EEB               	movlw	low _motorR
  1852   001DB4  6E4D               	movwf	fullSpeedAhead@mR^0,c
  1853   001DB6  ECA5  F01C         	call	_fullSpeedAhead	;wreg free
  1854   001DBA                     
  1855                           ;main.c: 146:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1856   001DBA  0E19               	movlw	25
  1857   001DBC  6E5C               	movwf	(??_main+1)^0,c
  1858   001DBE  0E5A               	movlw	90
  1859   001DC0  6E5B               	movwf	??_main^0,c
  1860   001DC2  0EB2               	movlw	178
  1861   001DC4                     u5677:
  1862   001DC4  2EE8               	decfsz	wreg,f,c
  1863   001DC6  D7FE               	bra	u5677
  1864   001DC8  2E5B               	decfsz	??_main^0,f,c
  1865   001DCA  D7FC               	bra	u5677
  1866   001DCC  2E5C               	decfsz	(??_main+1)^0,f,c
  1867   001DCE  D7FA               	bra	u5677
  1868   001DD0                     
  1869                           ;main.c: 147:         stop(&motorL,&motorR);
  1870   001DD0  0EF4               	movlw	low _motorL
  1871   001DD2  6E14               	movwf	stop@mL^0,c
  1872   001DD4  0EEB               	movlw	low _motorR
  1873   001DD6  6E15               	movwf	stop@mR^0,c
  1874   001DD8  EC58  F01F         	call	_stop	;wreg free
  1875   001DDC                     
  1876                           ;main.c: 148:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1877   001DDC  0E19               	movlw	25
  1878   001DDE  6E5C               	movwf	(??_main+1)^0,c
  1879   001DE0  0E5A               	movlw	90
  1880   001DE2  6E5B               	movwf	??_main^0,c
  1881   001DE4  0EB2               	movlw	178
  1882   001DE6                     u5687:
  1883   001DE6  2EE8               	decfsz	wreg,f,c
  1884   001DE8  D7FE               	bra	u5687
  1885   001DEA  2E5B               	decfsz	??_main^0,f,c
  1886   001DEC  D7FC               	bra	u5687
  1887   001DEE  2E5C               	decfsz	(??_main+1)^0,f,c
  1888   001DF0  D7FA               	bra	u5687
  1889   001DF2                     
  1890                           ;main.c: 150:         hue = reading_hue(&colorCurrent);
  1891   001DF2  0ED7               	movlw	low _colorCurrent
  1892   001DF4  6E50               	movwf	reading_hue@cCurr^0,c
  1893   001DF6  EC30  F01C         	call	_reading_hue	;wreg free
  1894   001DFA  C050  F0AC         	movff	?_reading_hue,main@hue
  1895   001DFE  C051  F0AD         	movff	?_reading_hue+1,main@hue+1
  1896   001E02                     
  1897                           ;main.c: 152:         clear_current = colorCurrent.clear;
  1898   001E02  C0DD  F002         	movff	_colorCurrent+6,___xxtofl@val
  1899   001E06  C0DE  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1900   001E0A  6A04               	clrf	(___xxtofl@val+2)^0,c
  1901   001E0C  6A05               	clrf	(___xxtofl@val+3)^0,c
  1902   001E0E  0E00               	movlw	0
  1903   001E10  ECF1  F015         	call	___xxtofl
  1904   001E14  C002  F0AE         	movff	?___xxtofl,main@clear_current
  1905   001E18  C003  F0AF         	movff	?___xxtofl+1,main@clear_current+1
  1906   001E1C  C004  F0B0         	movff	?___xxtofl+2,main@clear_current+2
  1907   001E20  C005  F0B1         	movff	?___xxtofl+3,main@clear_current+3
  1908   001E24                     
  1909                           ;main.c: 153:         clear_max = colorCalibration.clear;
  1910   001E24  C0E7  F002         	movff	_colorCalibration+6,___xxtofl@val
  1911   001E28  C0E8  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1912   001E2C  6A04               	clrf	(___xxtofl@val+2)^0,c
  1913   001E2E  6A05               	clrf	(___xxtofl@val+3)^0,c
  1914   001E30  0E00               	movlw	0
  1915   001E32  ECF1  F015         	call	___xxtofl
  1916   001E36  C002  F0B2         	movff	?___xxtofl,main@clear_max
  1917   001E3A  C003  F0B3         	movff	?___xxtofl+1,main@clear_max+1
  1918   001E3E  C004  F0B4         	movff	?___xxtofl+2,main@clear_max+2
  1919   001E42  C005  F0B5         	movff	?___xxtofl+3,main@clear_max+3
  1920   001E46                     
  1921                           ;main.c: 154:         clear_norm = clear_current*100/clear_max;
  1922   001E46  C0B2  F02D         	movff	main@clear_max,___fldiv@a
  1923   001E4A  C0B3  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1924   001E4E  C0B4  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1925   001E52  C0B5  F030         	movff	main@clear_max+3,___fldiv@a+3
  1926   001E56  0E00               	movlw	0
  1927   001E58  6E14               	movwf	___flmul@a^0,c
  1928   001E5A  0E00               	movlw	0
  1929   001E5C  6E15               	movwf	(___flmul@a+1)^0,c
  1930   001E5E  0EC8               	movlw	200
  1931   001E60  6E16               	movwf	(___flmul@a+2)^0,c
  1932   001E62  0E42               	movlw	66
  1933   001E64  6E17               	movwf	(___flmul@a+3)^0,c
  1934   001E66  C0AE  F010         	movff	main@clear_current,___flmul@b
  1935   001E6A  C0AF  F011         	movff	main@clear_current+1,___flmul@b+1
  1936   001E6E  C0B0  F012         	movff	main@clear_current+2,___flmul@b+2
  1937   001E72  C0B1  F013         	movff	main@clear_current+3,___flmul@b+3
  1938   001E76  ECC6  F00F         	call	___flmul	;wreg free
  1939   001E7A  C010  F029         	movff	?___flmul,___fldiv@b
  1940   001E7E  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  1941   001E82  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  1942   001E86  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  1943   001E8A  ECDB  F011         	call	___fldiv	;wreg free
  1944   001E8E  C029  F042         	movff	?___fldiv,___fltol@f1
  1945   001E92  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  1946   001E96  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  1947   001E9A  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  1948   001E9E  ECB5  F01A         	call	___fltol	;wreg free
  1949   001EA2  C042  F0B8         	movff	?___fltol,main@clear_norm
  1950   001EA6  C043  F0B9         	movff	?___fltol+1,main@clear_norm+1
  1951   001EAA                     
  1952                           ;main.c: 156:         if (clear_norm > 20){
  1953   001EAA  0100               	movlb	0	; () banked
  1954   001EAC  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1955   001EAE  E109               	bnz	u5590
  1956   001EB0  0E15               	movlw	21
  1957   001EB2  5DB8               	subwf	main@clear_norm& (0+255),w,b
  1958   001EB4  A0D8               	btfss	status,0,c
  1959   001EB6  EF5F  F00F         	goto	u5591
  1960   001EBA  EF61  F00F         	goto	u5590
  1961   001EBE                     u5591:
  1962   001EBE  EF79  F00F         	goto	l6418
  1963   001EC2                     u5590:
  1964   001EC2                     
  1965                           ; BSR set to: 0
  1966                           ;main.c: 157:             fullSpeedAhead(&motorL,&motorR);
  1967   001EC2  0EF4               	movlw	low _motorL
  1968   001EC4  6E4C               	movwf	fullSpeedAhead@mL^0,c
  1969   001EC6  0EEB               	movlw	low _motorR
  1970   001EC8  6E4D               	movwf	fullSpeedAhead@mR^0,c
  1971   001ECA  ECA5  F01C         	call	_fullSpeedAhead	;wreg free
  1972   001ECE                     
  1973                           ;main.c: 158:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1974   001ECE  0E09               	movlw	9
  1975   001ED0  6E5C               	movwf	(??_main+1)^0,c
  1976   001ED2  0E1E               	movlw	30
  1977   001ED4  6E5B               	movwf	??_main^0,c
  1978   001ED6  0EE4               	movlw	228
  1979   001ED8                     u5697:
  1980   001ED8  2EE8               	decfsz	wreg,f,c
  1981   001EDA  D7FE               	bra	u5697
  1982   001EDC  2E5B               	decfsz	??_main^0,f,c
  1983   001EDE  D7FC               	bra	u5697
  1984   001EE0  2E5C               	decfsz	(??_main+1)^0,f,c
  1985   001EE2  D7FA               	bra	u5697
  1986   001EE4  D000               	nop2	
  1987   001EE6                     
  1988                           ;main.c: 159:             stop(&motorL,&motorR);
  1989   001EE6  0EF4               	movlw	low _motorL
  1990   001EE8  6E14               	movwf	stop@mL^0,c
  1991   001EEA  0EEB               	movlw	low _motorR
  1992   001EEC  6E15               	movwf	stop@mR^0,c
  1993   001EEE  EC58  F01F         	call	_stop	;wreg free
  1994   001EF2                     l6418:
  1995                           
  1996                           ;main.c: 161:         if ((clear_norm > 60 && !(hue >= 302 && hue <= 346)) || LATGbits.L
      +                          ATG1 == 1) {
  1997   001EF2  0100               	movlb	0	; () banked
  1998   001EF4  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1999   001EF6  E109               	bnz	u5600
  2000   001EF8  0E3D               	movlw	61
  2001   001EFA  5DB8               	subwf	main@clear_norm& (0+255),w,b
  2002   001EFC  A0D8               	btfss	status,0,c
  2003   001EFE  EF83  F00F         	goto	u5601
  2004   001F02  EF85  F00F         	goto	u5600
  2005   001F06                     u5601:
  2006   001F06  EF9B  F00F         	goto	l331
  2007   001F0A                     u5600:
  2008   001F0A                     
  2009                           ; BSR set to: 0
  2010   001F0A  0E2E               	movlw	46
  2011   001F0C  5DAC               	subwf	main@hue& (0+255),w,b
  2012   001F0E  0E01               	movlw	1
  2013   001F10  59AD               	subwfb	(main@hue+1)& (0+255),w,b
  2014   001F12  A0D8               	btfss	status,0,c
  2015   001F14  EF8E  F00F         	goto	u5611
  2016   001F18  EF90  F00F         	goto	u5610
  2017   001F1C                     u5611:
  2018   001F1C  EFA2  F00F         	goto	l6424
  2019   001F20                     u5610:
  2020   001F20                     
  2021                           ; BSR set to: 0
  2022   001F20  0E5B               	movlw	91
  2023   001F22  5DAC               	subwf	main@hue& (0+255),w,b
  2024   001F24  0E01               	movlw	1
  2025   001F26  59AD               	subwfb	(main@hue+1)& (0+255),w,b
  2026   001F28  B0D8               	btfsc	status,0,c
  2027   001F2A  EF99  F00F         	goto	u5621
  2028   001F2E  EF9B  F00F         	goto	u5620
  2029   001F32                     u5621:
  2030   001F32  EFA2  F00F         	goto	l6424
  2031   001F36                     u5620:
  2032   001F36                     l331:
  2033                           
  2034                           ; BSR set to: 0
  2035   001F36  A27F               	btfss	127,1,c	;volatile
  2036   001F38  EFA0  F00F         	goto	u5631
  2037   001F3C  EFA2  F00F         	goto	u5630
  2038   001F40                     u5631:
  2039   001F40  EFB4  F00F         	goto	l6432
  2040   001F44                     u5630:
  2041   001F44                     l6424:
  2042   001F44                     
  2043                           ; BSR set to: 0
  2044                           ;main.c: 164:             send2USART(white);
  2045   001F44  0E00               	movlw	0
  2046   001F46  6E46               	movwf	(send2USART@hue+1)^0,c
  2047   001F48  0E08               	movlw	8
  2048   001F4A  6E45               	movwf	send2USART@hue^0,c
  2049   001F4C  ECB7  F024         	call	_send2USART	;wreg free
  2050   001F50                     
  2051                           ;main.c: 165:             returnHome(&motorL, &motorR, path_step);
  2052   001F50  0EF4               	movlw	low _motorL
  2053   001F52  0100               	movlb	0	; () banked
  2054   001F54  6F60               	movwf	returnHome@mL& (0+255),b
  2055   001F56  0EEB               	movlw	low _motorR
  2056   001F58  6F61               	movwf	returnHome@mR& (0+255),b
  2057   001F5A  C0B6  F062         	movff	main@path_step,returnHome@path_step
  2058   001F5E  C0B7  F063         	movff	main@path_step+1,returnHome@path_step+1
  2059   001F62  ECA4  F019         	call	_returnHome	;wreg free
  2060   001F66                     
  2061                           ;main.c: 166:             LATGbits.LATG1 = 0;
  2062   001F66  927F               	bcf	127,1,c	;volatile
  2063   001F68                     l6432:
  2064                           
  2065                           ;main.c: 169:         path_step = decision(hue, path_step);
  2066   001F68  C0AC  F021         	movff	main@hue,decision@hue
  2067   001F6C  C0AD  F022         	movff	main@hue+1,decision@hue+1
  2068   001F70  C0B6  F023         	movff	main@path_step,decision@path_step
  2069   001F74  C0B7  F024         	movff	main@path_step+1,decision@path_step+1
  2070   001F78  ECA8  F013         	call	_decision	;wreg free
  2071   001F7C  C021  F0B6         	movff	?_decision,main@path_step
  2072   001F80  C022  F0B7         	movff	?_decision+1,main@path_step+1
  2073   001F84  EFE6  F00D         	goto	l6360
  2074   001F88  EF1D  F000         	goto	start
  2075   001F8C                     __end_of_main:
  2076                           	callstack 0
  2077                           
  2078 ;; *************** function _returnHome *****************
  2079 ;; Defined at:
  2080 ;;		line 76 in file "return_func.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;  mL              1    0[BANK0 ] PTR struct DC_motor
  2083 ;;		 -> motorL(9), 
  2084 ;;  mR              1    1[BANK0 ] PTR struct DC_motor
  2085 ;;		 -> motorR(9), 
  2086 ;;  path_step       2    2[BANK0 ] unsigned int 
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;  time_ms         4    4[BANK0 ] long 
  2089 ;;  action_turn     1    8[BANK0 ] unsigned char 
  2090 ;;  i               2    9[BANK0 ] unsigned int 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2100 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2101 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2103 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2104 ;;Total ram usage:       11 bytes
  2105 ;; Hardware stack levels used: 1
  2106 ;; Hardware stack levels required when called: 6
  2107 ;; This function calls:
  2108 ;;		___aldiv
  2109 ;;		___lmul
  2110 ;;		_moveWhite
  2111 ;;		_reverseStraight
  2112 ;;		_reverseTurn
  2113 ;; This function is called by:
  2114 ;;		_main
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           	psect	text1
  2119   003348                     __ptext1:
  2120                           	callstack 0
  2121   003348                     _returnHome:
  2122                           	callstack 24
  2123   003348                     
  2124                           ;return_func.c: 76: void returnHome(struct DC_motor *mL, struct DC_motor *mR, unsigned i
      +                          nt path_step);return_func.c: 77: {;return_func.c: 79:     LATGbits.LATG0 = 0;
  2125   003348  907F               	bcf	127,0,c	;volatile
  2126                           
  2127                           ;return_func.c: 80:     LATEbits.LATE7 = 0;
  2128   00334A  9E7D               	bcf	125,7,c	;volatile
  2129                           
  2130                           ;return_func.c: 81:     LATAbits.LATA3 = 0;
  2131   00334C  9679               	bcf	121,3,c	;volatile
  2132   00334E                     
  2133                           ;return_func.c: 83:     moveWhite(&motorL,&motorR);
  2134   00334E  0EF4               	movlw	low _motorL
  2135   003350  6E1D               	movwf	moveWhite@mL^0,c
  2136   003352  0EEB               	movlw	low _motorR
  2137   003354  6E1E               	movwf	moveWhite@mR^0,c
  2138   003356  ECB7  F022         	call	_moveWhite	;wreg free
  2139   00335A                     
  2140                           ;return_func.c: 85:     if (path_step > 0) {
  2141   00335A  0100               	movlb	0	; () banked
  2142   00335C  5162               	movf	returnHome@path_step& (0+255),w,b
  2143   00335E  1163               	iorwf	(returnHome@path_step+1)& (0+255),w,b
  2144   003360  B4D8               	btfsc	status,2,c
  2145   003362  EFB5  F019         	goto	u5551
  2146   003366  EFB7  F019         	goto	u5550
  2147   00336A                     u5551:
  2148   00336A  EF2D  F01A         	goto	l725
  2149   00336E                     u5550:
  2150   00336E                     
  2151                           ; BSR set to: 0
  2152                           ;return_func.c: 86:         for (unsigned int i = path_step - 1; ; i--) {
  2153   00336E  0EFF               	movlw	255
  2154   003370  2562               	addwf	returnHome@path_step& (0+255),w,b
  2155   003372  6F69               	movwf	returnHome@i& (0+255),b
  2156   003374  0EFF               	movlw	255
  2157   003376  2163               	addwfc	(returnHome@path_step+1)& (0+255),w,b
  2158   003378  6F6A               	movwf	(returnHome@i+1)& (0+255),b
  2159   00337A                     l6266:
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;return_func.c: 88:             long time_ms = time[i]*65535*4*8192/64000000;
  2163   00337A  90D8               	bcf	status,0,c
  2164   00337C  3569               	rlcf	returnHome@i& (0+255),w,b
  2165   00337E  6ED9               	movwf	fsr2l,c
  2166   003380  356A               	rlcf	(returnHome@i+1)& (0+255),w,b
  2167   003382  6EDA               	movwf	fsr2h,c
  2168   003384  0E00               	movlw	low _time
  2169   003386  26D9               	addwf	fsr2l,f,c
  2170   003388  0E02               	movlw	high _time
  2171   00338A  22DA               	addwfc	fsr2h,f,c
  2172   00338C  CFDE F002          	movff	postinc2,___lmul@multiplier
  2173   003390  CFDD F003          	movff	postdec2,___lmul@multiplier+1
  2174   003394  0E00               	movlw	0
  2175   003396  BE03               	btfsc	(___lmul@multiplier+1)^0,7,c
  2176   003398  0EFF               	movlw	-1
  2177   00339A  6E04               	movwf	(___lmul@multiplier+2)^0,c
  2178   00339C  6E05               	movwf	(___lmul@multiplier+3)^0,c
  2179   00339E  0E00               	movlw	0
  2180   0033A0  6E06               	movwf	___lmul@multiplicand^0,c
  2181   0033A2  0E80               	movlw	128
  2182   0033A4  6E07               	movwf	(___lmul@multiplicand+1)^0,c
  2183   0033A6  0EFF               	movlw	255
  2184   0033A8  6E08               	movwf	(___lmul@multiplicand+2)^0,c
  2185   0033AA  0E7F               	movlw	127
  2186   0033AC  6E09               	movwf	(___lmul@multiplicand+3)^0,c
  2187   0033AE  EC92  F020         	call	___lmul	;wreg free
  2188   0033B2  C002  F00E         	movff	?___lmul,___aldiv@dividend
  2189   0033B6  C003  F00F         	movff	?___lmul+1,___aldiv@dividend+1
  2190   0033BA  C004  F010         	movff	?___lmul+2,___aldiv@dividend+2
  2191   0033BE  C005  F011         	movff	?___lmul+3,___aldiv@dividend+3
  2192   0033C2  0E00               	movlw	0
  2193   0033C4  6E12               	movwf	___aldiv@divisor^0,c
  2194   0033C6  0E90               	movlw	144
  2195   0033C8  6E13               	movwf	(___aldiv@divisor+1)^0,c
  2196   0033CA  0ED0               	movlw	208
  2197   0033CC  6E14               	movwf	(___aldiv@divisor+2)^0,c
  2198   0033CE  0E03               	movlw	3
  2199   0033D0  6E15               	movwf	(___aldiv@divisor+3)^0,c
  2200   0033D2  EC2F  F01A         	call	___aldiv	;wreg free
  2201   0033D6  C00E  F064         	movff	?___aldiv,returnHome@time_ms
  2202   0033DA  C00F  F065         	movff	?___aldiv+1,returnHome@time_ms+1
  2203   0033DE  C010  F066         	movff	?___aldiv+2,returnHome@time_ms+2
  2204   0033E2  C011  F067         	movff	?___aldiv+3,returnHome@time_ms+3
  2205   0033E6                     
  2206                           ;return_func.c: 89:             char action_turn = action[i];
  2207   0033E6  0E3C               	movlw	low _action
  2208   0033E8  0100               	movlb	0	; () banked
  2209   0033EA  2569               	addwf	returnHome@i& (0+255),w,b
  2210   0033EC  6ED9               	movwf	fsr2l,c
  2211   0033EE  0E01               	movlw	high _action
  2212   0033F0  216A               	addwfc	(returnHome@i+1)& (0+255),w,b
  2213   0033F2  6EDA               	movwf	fsr2h,c
  2214   0033F4  50DF               	movf	indf2,w,c
  2215   0033F6  6F68               	movwf	returnHome@action_turn& (0+255),b
  2216   0033F8                     
  2217                           ; BSR set to: 0
  2218                           ;return_func.c: 91:             if (action_turn == 0) {
  2219   0033F8  5168               	movf	returnHome@action_turn& (0+255),w,b
  2220   0033FA  A4D8               	btfss	status,2,c
  2221   0033FC  EF02  F01A         	goto	u5561
  2222   003400  EF04  F01A         	goto	u5560
  2223   003404                     u5561:
  2224   003404  EF14  F01A         	goto	l6274
  2225   003408                     u5560:
  2226   003408                     
  2227                           ; BSR set to: 0
  2228                           ;return_func.c: 92:                 reverseStraight(mL, mR, time_ms);
  2229   003408  C060  F051         	movff	returnHome@mL,reverseStraight@mL
  2230   00340C  C061  F052         	movff	returnHome@mR,reverseStraight@mR
  2231   003410  C064  F053         	movff	returnHome@time_ms,reverseStraight@time_ms
  2232   003414  C065  F054         	movff	returnHome@time_ms+1,reverseStraight@time_ms+1
  2233   003418  C066  F055         	movff	returnHome@time_ms+2,reverseStraight@time_ms+2
  2234   00341C  C067  F056         	movff	returnHome@time_ms+3,reverseStraight@time_ms+3
  2235   003420  ECBA  F01B         	call	_reverseStraight	;wreg free
  2236                           
  2237                           ;return_func.c: 93:             } else {
  2238   003424  EF1C  F01A         	goto	l6276
  2239   003428                     l6274:
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;return_func.c: 94:                 reverseTurn(mL, mR, action_turn);
  2243   003428  C060  F01D         	movff	returnHome@mL,reverseTurn@mL
  2244   00342C  C061  F01E         	movff	returnHome@mR,reverseTurn@mR
  2245   003430  C068  F01F         	movff	returnHome@action_turn,reverseTurn@actionStep
  2246   003434  EC4B  F018         	call	_reverseTurn	;wreg free
  2247   003438                     l6276:
  2248                           
  2249                           ;return_func.c: 97:             if (i == 0) break;
  2250   003438  0100               	movlb	0	; () banked
  2251   00343A  5169               	movf	returnHome@i& (0+255),w,b
  2252   00343C  116A               	iorwf	(returnHome@i+1)& (0+255),w,b
  2253   00343E  A4D8               	btfss	status,2,c
  2254   003440  EF24  F01A         	goto	u5571
  2255   003444  EF26  F01A         	goto	u5570
  2256   003448                     u5571:
  2257   003448  EF28  F01A         	goto	l6280
  2258   00344C                     u5570:
  2259   00344C  EF2D  F01A         	goto	l725
  2260   003450                     l6280:
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;return_func.c: 98:         }
  2264   003450  0769               	decf	returnHome@i& (0+255),f,b
  2265   003452  A0D8               	btfss	status,0,c
  2266   003454  076A               	decf	(returnHome@i+1)& (0+255),f,b
  2267   003456  EFBD  F019         	goto	l6266
  2268   00345A                     l725:
  2269                           
  2270                           ; BSR set to: 0
  2271   00345A  0003               	sleep		;# 
  2272   00345C  0012               	return		;funcret
  2273   00345E                     __end_of_returnHome:
  2274                           	callstack 0
  2275                           
  2276 ;; *************** function _reverseTurn *****************
  2277 ;; Defined at:
  2278 ;;		line 23 in file "return_func.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2281 ;;		 -> motorL(9), 
  2282 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2283 ;;		 -> motorR(9), 
  2284 ;;  actionStep      1   30[COMRAM] unsigned char 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;		None
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  1    wreg      void 
  2289 ;; Registers used:
  2290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2296 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2299 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2300 ;;Total ram usage:        5 bytes
  2301 ;; Hardware stack levels used: 1
  2302 ;; Hardware stack levels required when called: 5
  2303 ;; This function calls:
  2304 ;;		_backHalf
  2305 ;;		_left135
  2306 ;;		_left90
  2307 ;;		_right135
  2308 ;;		_right90
  2309 ;;		_turn180
  2310 ;; This function is called by:
  2311 ;;		_returnHome
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           	psect	text2
  2316   003096                     __ptext2:
  2317                           	callstack 0
  2318   003096                     _reverseTurn:
  2319                           	callstack 24
  2320   003096                     
  2321                           ;return_func.c: 24:     if (actionStep == 1) {
  2322   003096  041F               	decf	reverseTurn@actionStep^0,w,c
  2323   003098  A4D8               	btfss	status,2,c
  2324   00309A  EF51  F018         	goto	u5261
  2325   00309E  EF53  F018         	goto	u5260
  2326   0030A2                     u5261:
  2327   0030A2  EF6D  F018         	goto	l5998
  2328   0030A6                     u5260:
  2329   0030A6                     
  2330                           ;return_func.c: 25:         backHalf(mL,mR);
  2331   0030A6  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2332   0030AA  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2333   0030AE  EC2C  F024         	call	_backHalf	;wreg free
  2334   0030B2                     
  2335                           ;return_func.c: 26:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2336   0030B2  0E29               	movlw	41
  2337   0030B4  6E21               	movwf	(??_reverseTurn+1)^0,c
  2338   0030B6  0E96               	movlw	150
  2339   0030B8  6E20               	movwf	??_reverseTurn^0,c
  2340   0030BA  0E7F               	movlw	127
  2341   0030BC                     u5707:
  2342   0030BC  2EE8               	decfsz	wreg,f,c
  2343   0030BE  D7FE               	bra	u5707
  2344   0030C0  2E20               	decfsz	??_reverseTurn^0,f,c
  2345   0030C2  D7FC               	bra	u5707
  2346   0030C4  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2347   0030C6  D7FA               	bra	u5707
  2348   0030C8  0000               	nop	
  2349   0030CA                     
  2350                           ;return_func.c: 27:         left90(mL,mR);
  2351   0030CA  C01D  F019         	movff	reverseTurn@mL,left90@mL
  2352   0030CE  C01E  F01A         	movff	reverseTurn@mR,left90@mR
  2353   0030D2  EC14  F024         	call	_left90	;wreg free
  2354                           
  2355                           ;return_func.c: 28:     } else if (actionStep == 2) {
  2356   0030D6  EFF9  F018         	goto	l708
  2357   0030DA                     l5998:
  2358   0030DA  0E02               	movlw	2
  2359   0030DC  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2360   0030DE  A4D8               	btfss	status,2,c
  2361   0030E0  EF74  F018         	goto	u5271
  2362   0030E4  EF76  F018         	goto	u5270
  2363   0030E8                     u5271:
  2364   0030E8  EF90  F018         	goto	l6006
  2365   0030EC                     u5270:
  2366   0030EC                     
  2367                           ;return_func.c: 30:         backHalf(mL,mR);
  2368   0030EC  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2369   0030F0  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2370   0030F4  EC2C  F024         	call	_backHalf	;wreg free
  2371   0030F8                     
  2372                           ;return_func.c: 31:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2373   0030F8  0E29               	movlw	41
  2374   0030FA  6E21               	movwf	(??_reverseTurn+1)^0,c
  2375   0030FC  0E96               	movlw	150
  2376   0030FE  6E20               	movwf	??_reverseTurn^0,c
  2377   003100  0E7F               	movlw	127
  2378   003102                     u5717:
  2379   003102  2EE8               	decfsz	wreg,f,c
  2380   003104  D7FE               	bra	u5717
  2381   003106  2E20               	decfsz	??_reverseTurn^0,f,c
  2382   003108  D7FC               	bra	u5717
  2383   00310A  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2384   00310C  D7FA               	bra	u5717
  2385   00310E  0000               	nop	
  2386   003110                     
  2387                           ;return_func.c: 32:         right90(mL,mR);
  2388   003110  C01D  F019         	movff	reverseTurn@mL,right90@mL
  2389   003114  C01E  F01A         	movff	reverseTurn@mR,right90@mR
  2390   003118  ECFC  F023         	call	_right90	;wreg free
  2391                           
  2392                           ;return_func.c: 33:     } else if (actionStep == 3) {
  2393   00311C  EFF9  F018         	goto	l708
  2394   003120                     l6006:
  2395   003120  0E03               	movlw	3
  2396   003122  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2397   003124  A4D8               	btfss	status,2,c
  2398   003126  EF97  F018         	goto	u5281
  2399   00312A  EF99  F018         	goto	u5280
  2400   00312E                     u5281:
  2401   00312E  EFB3  F018         	goto	l6014
  2402   003132                     u5280:
  2403   003132                     
  2404                           ;return_func.c: 35:          backHalf(mL,mR);
  2405   003132  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2406   003136  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2407   00313A  EC2C  F024         	call	_backHalf	;wreg free
  2408   00313E                     
  2409                           ;return_func.c: 36:          _delay((unsigned long)((500)*(64000000/4000.0)));
  2410   00313E  0E29               	movlw	41
  2411   003140  6E21               	movwf	(??_reverseTurn+1)^0,c
  2412   003142  0E96               	movlw	150
  2413   003144  6E20               	movwf	??_reverseTurn^0,c
  2414   003146  0E7F               	movlw	127
  2415   003148                     u5727:
  2416   003148  2EE8               	decfsz	wreg,f,c
  2417   00314A  D7FE               	bra	u5727
  2418   00314C  2E20               	decfsz	??_reverseTurn^0,f,c
  2419   00314E  D7FC               	bra	u5727
  2420   003150  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2421   003152  D7FA               	bra	u5727
  2422   003154  0000               	nop	
  2423   003156                     
  2424                           ;return_func.c: 37:         turn180(mL,mR);
  2425   003156  C01D  F019         	movff	reverseTurn@mL,turn180@mL
  2426   00315A  C01E  F01A         	movff	reverseTurn@mR,turn180@mR
  2427   00315E  ECCA  F023         	call	_turn180	;wreg free
  2428                           
  2429                           ;return_func.c: 38:     } else if (actionStep == 4) {
  2430   003162  EFF9  F018         	goto	l708
  2431   003166                     l6014:
  2432   003166  0E04               	movlw	4
  2433   003168  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2434   00316A  A4D8               	btfss	status,2,c
  2435   00316C  EFBA  F018         	goto	u5291
  2436   003170  EFBC  F018         	goto	u5290
  2437   003174                     u5291:
  2438   003174  EFD6  F018         	goto	l6022
  2439   003178                     u5290:
  2440   003178                     
  2441                           ;return_func.c: 40:         backHalf(mL,mR);
  2442   003178  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2443   00317C  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2444   003180  EC2C  F024         	call	_backHalf	;wreg free
  2445   003184                     
  2446                           ;return_func.c: 41:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2447   003184  0E29               	movlw	41
  2448   003186  6E21               	movwf	(??_reverseTurn+1)^0,c
  2449   003188  0E96               	movlw	150
  2450   00318A  6E20               	movwf	??_reverseTurn^0,c
  2451   00318C  0E7F               	movlw	127
  2452   00318E                     u5737:
  2453   00318E  2EE8               	decfsz	wreg,f,c
  2454   003190  D7FE               	bra	u5737
  2455   003192  2E20               	decfsz	??_reverseTurn^0,f,c
  2456   003194  D7FC               	bra	u5737
  2457   003196  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2458   003198  D7FA               	bra	u5737
  2459   00319A  0000               	nop	
  2460   00319C                     
  2461                           ;return_func.c: 42:         left135(mL,mR);
  2462   00319C  C01D  F019         	movff	reverseTurn@mL,left135@mL
  2463   0031A0  C01E  F01A         	movff	reverseTurn@mR,left135@mR
  2464   0031A4  EC7F  F023         	call	_left135	;wreg free
  2465                           
  2466                           ;return_func.c: 43:     } else if (actionStep == 5) {
  2467   0031A8  EFF9  F018         	goto	l708
  2468   0031AC                     l6022:
  2469   0031AC  0E05               	movlw	5
  2470   0031AE  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2471   0031B0  A4D8               	btfss	status,2,c
  2472   0031B2  EFDD  F018         	goto	u5301
  2473   0031B6  EFDF  F018         	goto	u5300
  2474   0031BA                     u5301:
  2475   0031BA  EFF9  F018         	goto	l702
  2476   0031BE                     u5300:
  2477   0031BE                     
  2478                           ;return_func.c: 44:         backHalf(mL,mR);
  2479   0031BE  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2480   0031C2  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2481   0031C6  EC2C  F024         	call	_backHalf	;wreg free
  2482   0031CA                     
  2483                           ;return_func.c: 45:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2484   0031CA  0E29               	movlw	41
  2485   0031CC  6E21               	movwf	(??_reverseTurn+1)^0,c
  2486   0031CE  0E96               	movlw	150
  2487   0031D0  6E20               	movwf	??_reverseTurn^0,c
  2488   0031D2  0E7F               	movlw	127
  2489   0031D4                     u5747:
  2490   0031D4  2EE8               	decfsz	wreg,f,c
  2491   0031D6  D7FE               	bra	u5747
  2492   0031D8  2E20               	decfsz	??_reverseTurn^0,f,c
  2493   0031DA  D7FC               	bra	u5747
  2494   0031DC  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2495   0031DE  D7FA               	bra	u5747
  2496   0031E0  0000               	nop	
  2497   0031E2                     
  2498                           ;return_func.c: 46:         right135(mL,mR);
  2499   0031E2  C01D  F019         	movff	reverseTurn@mL,right135@mL
  2500   0031E6  C01E  F01A         	movff	reverseTurn@mR,right135@mR
  2501   0031EA  EC4D  F023         	call	_right135	;wreg free
  2502   0031EE  EFF9  F018         	goto	l708
  2503   0031F2                     l702:
  2504   0031F2                     l708:
  2505   0031F2  0012               	return		;funcret
  2506   0031F4                     __end_of_reverseTurn:
  2507                           	callstack 0
  2508                           
  2509 ;; *************** function _reverseStraight *****************
  2510 ;; Defined at:
  2511 ;;		line 59 in file "return_func.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;  mL              1   80[COMRAM] PTR struct DC_motor
  2514 ;;		 -> motorL(9), 
  2515 ;;  mR              1   81[COMRAM] PTR struct DC_motor
  2516 ;;		 -> motorR(9), 
  2517 ;;  time_ms         4   82[COMRAM] long 
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  delayMs         2   88[COMRAM] unsigned int 
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  1    wreg      void 
  2522 ;; Registers used:
  2523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2529 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2531 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2532 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2533 ;;Total ram usage:       10 bytes
  2534 ;; Hardware stack levels used: 1
  2535 ;; Hardware stack levels required when called: 4
  2536 ;; This function calls:
  2537 ;;		_customDelayMs
  2538 ;;		_fullSpeedAhead
  2539 ;;		_stop
  2540 ;; This function is called by:
  2541 ;;		_returnHome
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text3
  2546   003774                     __ptext3:
  2547                           	callstack 0
  2548   003774                     _reverseStraight:
  2549                           	callstack 25
  2550   003774                     
  2551                           ;return_func.c: 59: void reverseStraight(struct DC_motor *mL, struct DC_motor *mR, long 
      +                          time_ms);return_func.c: 60: {;return_func.c: 62:     unsigned int delayMs = 1000;
  2552   003774  0E03               	movlw	3
  2553   003776  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2554   003778  0EE8               	movlw	232
  2555   00377A  6E59               	movwf	reverseStraight@delayMs^0,c
  2556   00377C                     
  2557                           ;return_func.c: 65:     if (time_ms>5500){delayMs = 3000; }
  2558   00377C  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2559   00377E  EFCD  F01B         	goto	u5311
  2560   003782  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2561   003784  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2562   003786  E10B               	bnz	u5310
  2563   003788  0E7D               	movlw	125
  2564   00378A  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2565   00378C  0E15               	movlw	21
  2566   00378E  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2567   003790  A0D8               	btfss	status,0,c
  2568   003792  EFCD  F01B         	goto	u5311
  2569   003796  EFCF  F01B         	goto	u5310
  2570   00379A                     u5311:
  2571   00379A  EFD5  F01B         	goto	l6036
  2572   00379E                     u5310:
  2573   00379E  0E0B               	movlw	11
  2574   0037A0  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2575   0037A2  0EB8               	movlw	184
  2576   0037A4  6E59               	movwf	reverseStraight@delayMs^0,c
  2577   0037A6  EF12  F01C         	goto	l6046
  2578   0037AA                     l6036:
  2579   0037AA  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2580   0037AC  EFE4  F01B         	goto	u5321
  2581   0037B0  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2582   0037B2  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2583   0037B4  E10B               	bnz	u5320
  2584   0037B6  0EB9               	movlw	185
  2585   0037B8  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2586   0037BA  0E0B               	movlw	11
  2587   0037BC  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2588   0037BE  A0D8               	btfss	status,0,c
  2589   0037C0  EFE4  F01B         	goto	u5321
  2590   0037C4  EFE6  F01B         	goto	u5320
  2591   0037C8                     u5321:
  2592   0037C8  EFFD  F01B         	goto	l6042
  2593   0037CC                     u5320:
  2594   0037CC  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2595   0037CE  EFF5  F01B         	goto	u5331
  2596   0037D2  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2597   0037D4  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2598   0037D6  E10B               	bnz	u5330
  2599   0037D8  0E05               	movlw	5
  2600   0037DA  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2601   0037DC  0E10               	movlw	16
  2602   0037DE  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2603   0037E0  A0D8               	btfss	status,0,c
  2604   0037E2  EFF5  F01B         	goto	u5331
  2605   0037E6  EFF7  F01B         	goto	u5330
  2606   0037EA                     u5331:
  2607   0037EA  EFFD  F01B         	goto	l6042
  2608   0037EE                     u5330:
  2609   0037EE  0E07               	movlw	7
  2610   0037F0  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2611   0037F2  0ED0               	movlw	208
  2612   0037F4  6E59               	movwf	reverseStraight@delayMs^0,c
  2613   0037F6  EF12  F01C         	goto	l6046
  2614   0037FA                     l6042:
  2615   0037FA  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2616   0037FC  EF0E  F01C         	goto	u5340
  2617   003800  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2618   003802  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2619   003804  E109               	bnz	u5341
  2620   003806  0EB8               	movlw	184
  2621   003808  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2622   00380A  0E0B               	movlw	11
  2623   00380C  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2624   00380E  B0D8               	btfsc	status,0,c
  2625   003810  EF0C  F01C         	goto	u5341
  2626   003814  EF0E  F01C         	goto	u5340
  2627   003818                     u5341:
  2628   003818  EF12  F01C         	goto	l6046
  2629   00381C                     u5340:
  2630   00381C  0E03               	movlw	3
  2631   00381E  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2632   003820  0EE8               	movlw	232
  2633   003822  6E59               	movwf	reverseStraight@delayMs^0,c
  2634   003824                     l6046:
  2635                           
  2636                           ;return_func.c: 69:     fullSpeedAhead(&motorL,&motorR);
  2637   003824  0EF4               	movlw	low _motorL
  2638   003826  6E4C               	movwf	fullSpeedAhead@mL^0,c
  2639   003828  0EEB               	movlw	low _motorR
  2640   00382A  6E4D               	movwf	fullSpeedAhead@mR^0,c
  2641   00382C  ECA5  F01C         	call	_fullSpeedAhead	;wreg free
  2642   003830                     
  2643                           ;return_func.c: 70:     customDelayMs(delayMs);
  2644   003830  C059  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2645   003834  C05A  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2646   003838  EC4D  F022         	call	_customDelayMs	;wreg free
  2647   00383C                     
  2648                           ;return_func.c: 71:     stop(&motorL,&motorR);
  2649   00383C  0EF4               	movlw	low _motorL
  2650   00383E  6E14               	movwf	stop@mL^0,c
  2651   003840  0EEB               	movlw	low _motorR
  2652   003842  6E15               	movwf	stop@mR^0,c
  2653   003844  EC58  F01F         	call	_stop	;wreg free
  2654   003848                     
  2655                           ;return_func.c: 72:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2656   003848  0E19               	movlw	25
  2657   00384A  6E58               	movwf	(??_reverseStraight+1)^0,c
  2658   00384C  0E5A               	movlw	90
  2659   00384E  6E57               	movwf	??_reverseStraight^0,c
  2660   003850  0EB2               	movlw	178
  2661   003852                     u5757:
  2662   003852  2EE8               	decfsz	wreg,f,c
  2663   003854  D7FE               	bra	u5757
  2664   003856  2E57               	decfsz	??_reverseStraight^0,f,c
  2665   003858  D7FC               	bra	u5757
  2666   00385A  2E58               	decfsz	(??_reverseStraight+1)^0,f,c
  2667   00385C  D7FA               	bra	u5757
  2668   00385E  0012               	return		;funcret
  2669   003860                     __end_of_reverseStraight:
  2670                           	callstack 0
  2671                           
  2672 ;; *************** function _fullSpeedAhead *****************
  2673 ;; Defined at:
  2674 ;;		line 144 in file "dc_motor.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  mL              1   75[COMRAM] PTR struct DC_motor
  2677 ;;		 -> motorL(9), 
  2678 ;;  mR              1   76[COMRAM] PTR struct DC_motor
  2679 ;;		 -> motorR(9), 
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  power           2   78[COMRAM] int 
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  1    wreg      void 
  2684 ;; Registers used:
  2685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2691 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2692 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2693 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2694 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2695 ;;Total ram usage:        5 bytes
  2696 ;; Hardware stack levels used: 1
  2697 ;; Hardware stack levels required when called: 3
  2698 ;; This function calls:
  2699 ;;		___flmul
  2700 ;;		___fltol
  2701 ;;		___xxtofl
  2702 ;;		_setMotorPWM
  2703 ;; This function is called by:
  2704 ;;		_main
  2705 ;;		_reverseStraight
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           	psect	text4
  2710   00394A                     __ptext4:
  2711                           	callstack 0
  2712   00394A                     _fullSpeedAhead:
  2713                           	callstack 25
  2714   00394A                     
  2715                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2716   00394A  504C               	movf	fullSpeedAhead@mL^0,w,c
  2717   00394C  6ED9               	movwf	fsr2l,c
  2718   00394E  6ADA               	clrf	fsr2h,c
  2719   003950  0E01               	movlw	1
  2720   003952  26D9               	addwf	fsr2l,f,c
  2721   003954  0E01               	movlw	1
  2722   003956  6EDF               	movwf	indf2,c
  2723                           
  2724                           ;dc_motor.c: 148:     mR->direction = 1;
  2725   003958  504D               	movf	fullSpeedAhead@mR^0,w,c
  2726   00395A  6ED9               	movwf	fsr2l,c
  2727   00395C  6ADA               	clrf	fsr2h,c
  2728   00395E  0E01               	movlw	1
  2729   003960  26D9               	addwf	fsr2l,f,c
  2730   003962  0E01               	movlw	1
  2731   003964  6EDF               	movwf	indf2,c
  2732   003966                     
  2733                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2734   003966  0E00               	movlw	0
  2735   003968  6E50               	movwf	(fullSpeedAhead@power+1)^0,c
  2736   00396A  0E00               	movlw	0
  2737   00396C  6E4F               	movwf	fullSpeedAhead@power^0,c
  2738   00396E                     l5856:
  2739                           
  2740                           ;dc_motor.c: 151:         mL->power = power;
  2741   00396E  504C               	movf	fullSpeedAhead@mL^0,w,c
  2742   003970  6ED9               	movwf	fsr2l,c
  2743   003972  6ADA               	clrf	fsr2h,c
  2744   003974  C04F  FFDF         	movff	fullSpeedAhead@power,indf2
  2745   003978                     
  2746                           ;dc_motor.c: 152:         mR->power = power*1.05;
  2747   003978  504D               	movf	fullSpeedAhead@mR^0,w,c
  2748   00397A  6ED9               	movwf	fsr2l,c
  2749   00397C  6ADA               	clrf	fsr2h,c
  2750   00397E  0E66               	movlw	102
  2751   003980  6E14               	movwf	___flmul@a^0,c
  2752   003982  0E66               	movlw	102
  2753   003984  6E15               	movwf	(___flmul@a+1)^0,c
  2754   003986  0E86               	movlw	134
  2755   003988  6E16               	movwf	(___flmul@a+2)^0,c
  2756   00398A  0E3F               	movlw	63
  2757   00398C  6E17               	movwf	(___flmul@a+3)^0,c
  2758   00398E  C04F  F002         	movff	fullSpeedAhead@power,___xxtofl@val
  2759   003992  C050  F003         	movff	fullSpeedAhead@power+1,___xxtofl@val+1
  2760   003996  0E00               	movlw	0
  2761   003998  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  2762   00399A  0EFF               	movlw	-1
  2763   00399C  6E04               	movwf	(___xxtofl@val+2)^0,c
  2764   00399E  6E05               	movwf	(___xxtofl@val+3)^0,c
  2765   0039A0  0E01               	movlw	1
  2766   0039A2  ECF1  F015         	call	___xxtofl
  2767   0039A6  C002  F010         	movff	?___xxtofl,___flmul@b
  2768   0039AA  C003  F011         	movff	?___xxtofl+1,___flmul@b+1
  2769   0039AE  C004  F012         	movff	?___xxtofl+2,___flmul@b+2
  2770   0039B2  C005  F013         	movff	?___xxtofl+3,___flmul@b+3
  2771   0039B6  ECC6  F00F         	call	___flmul	;wreg free
  2772   0039BA  C010  F042         	movff	?___flmul,___fltol@f1
  2773   0039BE  C011  F043         	movff	?___flmul+1,___fltol@f1+1
  2774   0039C2  C012  F044         	movff	?___flmul+2,___fltol@f1+2
  2775   0039C6  C013  F045         	movff	?___flmul+3,___fltol@f1+3
  2776   0039CA  ECB5  F01A         	call	___fltol	;wreg free
  2777   0039CE  5042               	movf	?___fltol^0,w,c
  2778   0039D0  6EDF               	movwf	indf2,c
  2779   0039D2                     
  2780                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2781   0039D2  C04C  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2782   0039D6  ECFA  F018         	call	_setMotorPWM	;wreg free
  2783   0039DA                     
  2784                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2785   0039DA  C04D  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2786   0039DE  ECFA  F018         	call	_setMotorPWM	;wreg free
  2787   0039E2                     
  2788                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2789   0039E2  0E0B               	movlw	11
  2790   0039E4  6E4E               	movwf	??_fullSpeedAhead^0,c
  2791   0039E6  0E62               	movlw	98
  2792   0039E8                     u5767:
  2793   0039E8  2EE8               	decfsz	wreg,f,c
  2794   0039EA  D7FE               	bra	u5767
  2795   0039EC  2E4E               	decfsz	??_fullSpeedAhead^0,f,c
  2796   0039EE  D7FC               	bra	u5767
  2797   0039F0  D000               	nop2	
  2798   0039F2                     
  2799                           ;dc_motor.c: 160:     }
  2800   0039F2  4A4F               	infsnz	fullSpeedAhead@power^0,f,c
  2801   0039F4  2A50               	incf	(fullSpeedAhead@power+1)^0,f,c
  2802   0039F6  BE50               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2803   0039F8  EF07  F01D         	goto	u5251
  2804   0039FC  5050               	movf	(fullSpeedAhead@power+1)^0,w,c
  2805   0039FE  E109               	bnz	u5250
  2806   003A00  0E33               	movlw	51
  2807   003A02  5C4F               	subwf	fullSpeedAhead@power^0,w,c
  2808   003A04  A0D8               	btfss	status,0,c
  2809   003A06  EF07  F01D         	goto	u5251
  2810   003A0A  EF09  F01D         	goto	u5250
  2811   003A0E                     u5251:
  2812   003A0E  EFB7  F01C         	goto	l5856
  2813   003A12                     u5250:
  2814   003A12  0012               	return		;funcret
  2815   003A14                     __end_of_fullSpeedAhead:
  2816                           	callstack 0
  2817                           
  2818 ;; *************** function _customDelayMs *****************
  2819 ;; Defined at:
  2820 ;;		line 52 in file "return_func.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  i               2    4[COMRAM] unsigned int 
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, status,2, status,0
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2834 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2835 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2836 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2837 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2838 ;;Total ram usage:        5 bytes
  2839 ;; Hardware stack levels used: 1
  2840 ;; Hardware stack levels required when called: 1
  2841 ;; This function calls:
  2842 ;;		Nothing
  2843 ;; This function is called by:
  2844 ;;		_reverseStraight
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text5
  2849   00449A                     __ptext5:
  2850                           	callstack 0
  2851   00449A                     _customDelayMs:
  2852                           	callstack 27
  2853   00449A                     
  2854                           ;return_func.c: 53:     for (unsigned int i = 0; i < milliseconds; i++) {
  2855   00449A  0E00               	movlw	0
  2856   00449C  6E06               	movwf	(customDelayMs@i+1)^0,c
  2857   00449E  0E00               	movlw	0
  2858   0044A0  6E05               	movwf	customDelayMs@i^0,c
  2859   0044A2  EF5D  F022         	goto	l711
  2860   0044A6                     l4402:
  2861                           
  2862                           ;return_func.c: 54:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2863   0044A6  0E15               	movlw	21
  2864   0044A8  6E04               	movwf	??_customDelayMs^0,c
  2865   0044AA  0EC6               	movlw	198
  2866   0044AC                     u5777:
  2867   0044AC  2EE8               	decfsz	wreg,f,c
  2868   0044AE  D7FE               	bra	u5777
  2869   0044B0  2E04               	decfsz	??_customDelayMs^0,f,c
  2870   0044B2  D7FC               	bra	u5777
  2871   0044B4  D000               	nop2	
  2872   0044B6                     
  2873                           ;return_func.c: 55:     }
  2874   0044B6  4A05               	infsnz	customDelayMs@i^0,f,c
  2875   0044B8  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2876   0044BA                     l711:
  2877   0044BA  5002               	movf	customDelayMs@milliseconds^0,w,c
  2878   0044BC  5C05               	subwf	customDelayMs@i^0,w,c
  2879   0044BE  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2880   0044C0  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2881   0044C2  A0D8               	btfss	status,0,c
  2882   0044C4  EF66  F022         	goto	u3711
  2883   0044C8  EF68  F022         	goto	u3710
  2884   0044CC                     u3711:
  2885   0044CC  EF53  F022         	goto	l4402
  2886   0044D0                     u3710:
  2887   0044D0  0012               	return		;funcret
  2888   0044D2                     __end_of_customDelayMs:
  2889                           	callstack 0
  2890                           
  2891 ;; *************** function _moveWhite *****************
  2892 ;; Defined at:
  2893 ;;		line 321 in file "dc_motor.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2896 ;;		 -> motorL(9), 
  2897 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2898 ;;		 -> motorR(9), 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2910 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2912 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2913 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2914 ;;Total ram usage:        4 bytes
  2915 ;; Hardware stack levels used: 1
  2916 ;; Hardware stack levels required when called: 5
  2917 ;; This function calls:
  2918 ;;		_backHalf
  2919 ;;		_turn180
  2920 ;; This function is called by:
  2921 ;;		_returnHome
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text6
  2926   00456E                     __ptext6:
  2927                           	callstack 0
  2928   00456E                     _moveWhite:
  2929                           	callstack 24
  2930   00456E                     
  2931                           ;dc_motor.c: 321: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          22: {;dc_motor.c: 324:     backHalf(mL,mR);
  2932   00456E  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  2933   004572  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  2934   004576  EC2C  F024         	call	_backHalf	;wreg free
  2935   00457A                     
  2936                           ;dc_motor.c: 325:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2937   00457A  0E29               	movlw	41
  2938   00457C  6E20               	movwf	(??_moveWhite+1)^0,c
  2939   00457E  0E96               	movlw	150
  2940   004580  6E1F               	movwf	??_moveWhite^0,c
  2941   004582  0E7F               	movlw	127
  2942   004584                     u5787:
  2943   004584  2EE8               	decfsz	wreg,f,c
  2944   004586  D7FE               	bra	u5787
  2945   004588  2E1F               	decfsz	??_moveWhite^0,f,c
  2946   00458A  D7FC               	bra	u5787
  2947   00458C  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  2948   00458E  D7FA               	bra	u5787
  2949   004590  0000               	nop	
  2950   004592                     
  2951                           ;dc_motor.c: 326:     turn180(mL,mR);
  2952   004592  C01D  F019         	movff	moveWhite@mL,turn180@mL
  2953   004596  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  2954   00459A  ECCA  F023         	call	_turn180	;wreg free
  2955   00459E  0012               	return		;funcret
  2956   0045A0                     __end_of_moveWhite:
  2957                           	callstack 0
  2958                           
  2959 ;; *************** function ___lmul *****************
  2960 ;; Defined at:
  2961 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  multiplier      4    1[COMRAM] unsigned long 
  2964 ;;  multiplicand    4    5[COMRAM] unsigned long 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  product         4    9[COMRAM] unsigned long 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  4    1[COMRAM] unsigned long 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2976 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2977 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2979 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2980 ;;Total ram usage:       12 bytes
  2981 ;; Hardware stack levels used: 1
  2982 ;; Hardware stack levels required when called: 1
  2983 ;; This function calls:
  2984 ;;		Nothing
  2985 ;; This function is called by:
  2986 ;;		_returnHome
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text7
  2991   004124                     __ptext7:
  2992                           	callstack 0
  2993   004124                     ___lmul:
  2994                           	callstack 28
  2995   004124  0E00               	movlw	0
  2996   004126  6E0A               	movwf	___lmul@product^0,c
  2997   004128  0E00               	movlw	0
  2998   00412A  6E0B               	movwf	(___lmul@product+1)^0,c
  2999   00412C  0E00               	movlw	0
  3000   00412E  6E0C               	movwf	(___lmul@product+2)^0,c
  3001   004130  0E00               	movlw	0
  3002   004132  6E0D               	movwf	(___lmul@product+3)^0,c
  3003   004134                     l4818:
  3004   004134  A002               	btfss	___lmul@multiplier^0,0,c
  3005   004136  EF9F  F020         	goto	u4241
  3006   00413A  EFA1  F020         	goto	u4240
  3007   00413E                     u4241:
  3008   00413E  EFA9  F020         	goto	l4822
  3009   004142                     u4240:
  3010   004142  5006               	movf	___lmul@multiplicand^0,w,c
  3011   004144  260A               	addwf	___lmul@product^0,f,c
  3012   004146  5007               	movf	(___lmul@multiplicand+1)^0,w,c
  3013   004148  220B               	addwfc	(___lmul@product+1)^0,f,c
  3014   00414A  5008               	movf	(___lmul@multiplicand+2)^0,w,c
  3015   00414C  220C               	addwfc	(___lmul@product+2)^0,f,c
  3016   00414E  5009               	movf	(___lmul@multiplicand+3)^0,w,c
  3017   004150  220D               	addwfc	(___lmul@product+3)^0,f,c
  3018   004152                     l4822:
  3019   004152  90D8               	bcf	status,0,c
  3020   004154  3606               	rlcf	___lmul@multiplicand^0,f,c
  3021   004156  3607               	rlcf	(___lmul@multiplicand+1)^0,f,c
  3022   004158  3608               	rlcf	(___lmul@multiplicand+2)^0,f,c
  3023   00415A  3609               	rlcf	(___lmul@multiplicand+3)^0,f,c
  3024   00415C  90D8               	bcf	status,0,c
  3025   00415E  3205               	rrcf	(___lmul@multiplier+3)^0,f,c
  3026   004160  3204               	rrcf	(___lmul@multiplier+2)^0,f,c
  3027   004162  3203               	rrcf	(___lmul@multiplier+1)^0,f,c
  3028   004164  3202               	rrcf	___lmul@multiplier^0,f,c
  3029   004166  5002               	movf	___lmul@multiplier^0,w,c
  3030   004168  1003               	iorwf	(___lmul@multiplier+1)^0,w,c
  3031   00416A  1004               	iorwf	(___lmul@multiplier+2)^0,w,c
  3032   00416C  1005               	iorwf	(___lmul@multiplier+3)^0,w,c
  3033   00416E  A4D8               	btfss	status,2,c
  3034   004170  EFBC  F020         	goto	u4251
  3035   004174  EFBE  F020         	goto	u4250
  3036   004178                     u4251:
  3037   004178  EF9A  F020         	goto	l4818
  3038   00417C                     u4250:
  3039   00417C  C00A  F002         	movff	___lmul@product,?___lmul
  3040   004180  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  3041   004184  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  3042   004188  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  3043   00418C  0012               	return		;funcret
  3044   00418E                     __end_of___lmul:
  3045                           	callstack 0
  3046                           
  3047 ;; *************** function ___aldiv *****************
  3048 ;; Defined at:
  3049 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  dividend        4   13[COMRAM] long 
  3052 ;;  divisor         4   17[COMRAM] long 
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;  quotient        4   23[COMRAM] long 
  3055 ;;  sign            1   22[COMRAM] unsigned char 
  3056 ;;  counter         1   21[COMRAM] unsigned char 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  4   13[COMRAM] long 
  3059 ;; Registers used:
  3060 ;;		wreg, status,2, status,0
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3066 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3067 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3069 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3070 ;;Total ram usage:       14 bytes
  3071 ;; Hardware stack levels used: 1
  3072 ;; Hardware stack levels required when called: 1
  3073 ;; This function calls:
  3074 ;;		Nothing
  3075 ;; This function is called by:
  3076 ;;		_returnHome
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	text8
  3081   00345E                     __ptext8:
  3082                           	callstack 0
  3083   00345E                     ___aldiv:
  3084                           	callstack 28
  3085   00345E  0E00               	movlw	0
  3086   003460  6E17               	movwf	___aldiv@sign^0,c
  3087   003462  BE15               	btfsc	(___aldiv@divisor+3)^0,7,c
  3088   003464  EF38  F01A         	goto	u4260
  3089   003468  EF36  F01A         	goto	u4261
  3090   00346C                     u4261:
  3091   00346C  EF42  F01A         	goto	l4834
  3092   003470                     u4260:
  3093   003470  1E15               	comf	(___aldiv@divisor+3)^0,f,c
  3094   003472  1E14               	comf	(___aldiv@divisor+2)^0,f,c
  3095   003474  1E13               	comf	(___aldiv@divisor+1)^0,f,c
  3096   003476  6C12               	negf	___aldiv@divisor^0,c
  3097   003478  0E00               	movlw	0
  3098   00347A  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
  3099   00347C  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
  3100   00347E  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
  3101   003480  0E01               	movlw	1
  3102   003482  6E17               	movwf	___aldiv@sign^0,c
  3103   003484                     l4834:
  3104   003484  BE11               	btfsc	(___aldiv@dividend+3)^0,7,c
  3105   003486  EF49  F01A         	goto	u4270
  3106   00348A  EF47  F01A         	goto	u4271
  3107   00348E                     u4271:
  3108   00348E  EF53  F01A         	goto	l4840
  3109   003492                     u4270:
  3110   003492  1E11               	comf	(___aldiv@dividend+3)^0,f,c
  3111   003494  1E10               	comf	(___aldiv@dividend+2)^0,f,c
  3112   003496  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
  3113   003498  6C0E               	negf	___aldiv@dividend^0,c
  3114   00349A  0E00               	movlw	0
  3115   00349C  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
  3116   00349E  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
  3117   0034A0  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
  3118   0034A2  0E01               	movlw	1
  3119   0034A4  1A17               	xorwf	___aldiv@sign^0,f,c
  3120   0034A6                     l4840:
  3121   0034A6  0E00               	movlw	0
  3122   0034A8  6E18               	movwf	___aldiv@quotient^0,c
  3123   0034AA  0E00               	movlw	0
  3124   0034AC  6E19               	movwf	(___aldiv@quotient+1)^0,c
  3125   0034AE  0E00               	movlw	0
  3126   0034B0  6E1A               	movwf	(___aldiv@quotient+2)^0,c
  3127   0034B2  0E00               	movlw	0
  3128   0034B4  6E1B               	movwf	(___aldiv@quotient+3)^0,c
  3129   0034B6  5012               	movf	___aldiv@divisor^0,w,c
  3130   0034B8  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
  3131   0034BA  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
  3132   0034BC  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
  3133   0034BE  B4D8               	btfsc	status,2,c
  3134   0034C0  EF64  F01A         	goto	u4281
  3135   0034C4  EF66  F01A         	goto	u4280
  3136   0034C8                     u4281:
  3137   0034C8  EF9C  F01A         	goto	l4862
  3138   0034CC                     u4280:
  3139   0034CC  0E01               	movlw	1
  3140   0034CE  6E16               	movwf	___aldiv@counter^0,c
  3141   0034D0  EF70  F01A         	goto	l4848
  3142   0034D4                     l4846:
  3143   0034D4  90D8               	bcf	status,0,c
  3144   0034D6  3612               	rlcf	___aldiv@divisor^0,f,c
  3145   0034D8  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
  3146   0034DA  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
  3147   0034DC  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
  3148   0034DE  2A16               	incf	___aldiv@counter^0,f,c
  3149   0034E0                     l4848:
  3150   0034E0  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
  3151   0034E2  EF75  F01A         	goto	u4291
  3152   0034E6  EF77  F01A         	goto	u4290
  3153   0034EA                     u4291:
  3154   0034EA  EF6A  F01A         	goto	l4846
  3155   0034EE                     u4290:
  3156   0034EE                     l4850:
  3157   0034EE  90D8               	bcf	status,0,c
  3158   0034F0  3618               	rlcf	___aldiv@quotient^0,f,c
  3159   0034F2  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
  3160   0034F4  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
  3161   0034F6  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
  3162   0034F8  5012               	movf	___aldiv@divisor^0,w,c
  3163   0034FA  5C0E               	subwf	___aldiv@dividend^0,w,c
  3164   0034FC  5013               	movf	(___aldiv@divisor+1)^0,w,c
  3165   0034FE  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
  3166   003500  5014               	movf	(___aldiv@divisor+2)^0,w,c
  3167   003502  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
  3168   003504  5015               	movf	(___aldiv@divisor+3)^0,w,c
  3169   003506  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
  3170   003508  A0D8               	btfss	status,0,c
  3171   00350A  EF89  F01A         	goto	u4301
  3172   00350E  EF8B  F01A         	goto	u4300
  3173   003512                     u4301:
  3174   003512  EF94  F01A         	goto	l4858
  3175   003516                     u4300:
  3176   003516  5012               	movf	___aldiv@divisor^0,w,c
  3177   003518  5E0E               	subwf	___aldiv@dividend^0,f,c
  3178   00351A  5013               	movf	(___aldiv@divisor+1)^0,w,c
  3179   00351C  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
  3180   00351E  5014               	movf	(___aldiv@divisor+2)^0,w,c
  3181   003520  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
  3182   003522  5015               	movf	(___aldiv@divisor+3)^0,w,c
  3183   003524  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
  3184   003526  8018               	bsf	___aldiv@quotient^0,0,c
  3185   003528                     l4858:
  3186   003528  90D8               	bcf	status,0,c
  3187   00352A  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
  3188   00352C  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
  3189   00352E  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
  3190   003530  3212               	rrcf	___aldiv@divisor^0,f,c
  3191   003532  2E16               	decfsz	___aldiv@counter^0,f,c
  3192   003534  EF77  F01A         	goto	l4850
  3193   003538                     l4862:
  3194   003538  5017               	movf	___aldiv@sign^0,w,c
  3195   00353A  B4D8               	btfsc	status,2,c
  3196   00353C  EFA2  F01A         	goto	u4311
  3197   003540  EFA4  F01A         	goto	u4310
  3198   003544                     u4311:
  3199   003544  EFAC  F01A         	goto	l4866
  3200   003548                     u4310:
  3201   003548  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
  3202   00354A  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
  3203   00354C  1E19               	comf	(___aldiv@quotient+1)^0,f,c
  3204   00354E  6C18               	negf	___aldiv@quotient^0,c
  3205   003550  0E00               	movlw	0
  3206   003552  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
  3207   003554  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
  3208   003556  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
  3209   003558                     l4866:
  3210   003558  C018  F00E         	movff	___aldiv@quotient,?___aldiv
  3211   00355C  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
  3212   003560  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
  3213   003564  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
  3214   003568  0012               	return		;funcret
  3215   00356A                     __end_of___aldiv:
  3216                           	callstack 0
  3217                           
  3218 ;; *************** function _reading_hue *****************
  3219 ;; Defined at:
  3220 ;;		line 91 in file "color.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  cCurr           1   79[COMRAM] PTR struct colors
  3223 ;;		 -> colorCurrent(10), 
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;  led_state      50    0        unsigned char [50]
  3226 ;;  hue             2   83[COMRAM] unsigned int 
  3227 ;; Return value:  Size  Location     Type
  3228 ;;                  2   79[COMRAM] unsigned int 
  3229 ;; Registers used:
  3230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3231 ;; Tracked objects:
  3232 ;;		On entry : 0/0
  3233 ;;		On exit  : 0/0
  3234 ;;		Unchanged: 0/0
  3235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3236 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3237 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3238 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3239 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3240 ;;Total ram usage:        6 bytes
  3241 ;; Hardware stack levels used: 1
  3242 ;; Hardware stack levels required when called: 4
  3243 ;; This function calls:
  3244 ;;		_color_read_Blue
  3245 ;;		_color_read_Clear
  3246 ;;		_color_read_Green
  3247 ;;		_color_read_Red
  3248 ;;		_convert_rgb2hue
  3249 ;; This function is called by:
  3250 ;;		_main
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text9
  3255   003860                     __ptext9:
  3256                           	callstack 0
  3257   003860                     _reading_hue:
  3258                           	callstack 26
  3259   003860                     
  3260                           ;color.c: 91: unsigned int reading_hue(colors *cCurr);color.c: 92: {;color.c: 93:     un
      +                          signed int hue;;color.c: 95:     char led_state[50];;color.c: 98:     LATGbits.LATG0 = 1
      +                          ;
  3261   003860  807F               	bsf	127,0,c	;volatile
  3262                           
  3263                           ;color.c: 99:     LATEbits.LATE7 = 0;
  3264   003862  9E7D               	bcf	125,7,c	;volatile
  3265                           
  3266                           ;color.c: 100:     LATAbits.LATA3 = 0;
  3267   003864  9679               	bcf	121,3,c	;volatile
  3268   003866                     
  3269                           ;color.c: 101:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3270   003866  0E29               	movlw	41
  3271   003868  6E53               	movwf	(??_reading_hue+1)^0,c
  3272   00386A  0E96               	movlw	150
  3273   00386C  6E52               	movwf	??_reading_hue^0,c
  3274   00386E  0E7F               	movlw	127
  3275   003870                     u5797:
  3276   003870  2EE8               	decfsz	wreg,f,c
  3277   003872  D7FE               	bra	u5797
  3278   003874  2E52               	decfsz	??_reading_hue^0,f,c
  3279   003876  D7FC               	bra	u5797
  3280   003878  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3281   00387A  D7FA               	bra	u5797
  3282   00387C  0000               	nop	
  3283   00387E                     
  3284                           ;color.c: 102:     (cCurr->red)= color_read_Red();
  3285   00387E  ECC7  F020         	call	_color_read_Red	;wreg free
  3286   003882  5050               	movf	reading_hue@cCurr^0,w,c
  3287   003884  6ED9               	movwf	fsr2l,c
  3288   003886  6ADA               	clrf	fsr2h,c
  3289   003888  C006  FFDE         	movff	?_color_read_Red,postinc2
  3290   00388C  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  3291   003890                     
  3292                           ;color.c: 104:     LATGbits.LATG0 = 0;
  3293   003890  907F               	bcf	127,0,c	;volatile
  3294   003892                     
  3295                           ;color.c: 105:     LATEbits.LATE7 = 1;
  3296   003892  8E7D               	bsf	125,7,c	;volatile
  3297   003894                     
  3298                           ;color.c: 106:     LATAbits.LATA3 = 0;
  3299   003894  9679               	bcf	121,3,c	;volatile
  3300   003896                     
  3301                           ;color.c: 107:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3302   003896  0E29               	movlw	41
  3303   003898  6E53               	movwf	(??_reading_hue+1)^0,c
  3304   00389A  0E96               	movlw	150
  3305   00389C  6E52               	movwf	??_reading_hue^0,c
  3306   00389E  0E7F               	movlw	127
  3307   0038A0                     u5807:
  3308   0038A0  2EE8               	decfsz	wreg,f,c
  3309   0038A2  D7FE               	bra	u5807
  3310   0038A4  2E52               	decfsz	??_reading_hue^0,f,c
  3311   0038A6  D7FC               	bra	u5807
  3312   0038A8  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3313   0038AA  D7FA               	bra	u5807
  3314   0038AC  0000               	nop	
  3315                           
  3316                           ;color.c: 108:     (cCurr->green) = color_read_Green();
  3317   0038AE  ECEF  F020         	call	_color_read_Green	;wreg free
  3318   0038B2  5050               	movf	reading_hue@cCurr^0,w,c
  3319   0038B4  6ED9               	movwf	fsr2l,c
  3320   0038B6  6ADA               	clrf	fsr2h,c
  3321   0038B8  0E02               	movlw	2
  3322   0038BA  26D9               	addwf	fsr2l,f,c
  3323   0038BC  C006  FFDE         	movff	?_color_read_Green,postinc2
  3324   0038C0  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  3325   0038C4                     
  3326                           ;color.c: 110:     LATGbits.LATG0 = 0;
  3327   0038C4  907F               	bcf	127,0,c	;volatile
  3328   0038C6                     
  3329                           ;color.c: 111:     LATEbits.LATE7 = 0;
  3330   0038C6  9E7D               	bcf	125,7,c	;volatile
  3331   0038C8                     
  3332                           ;color.c: 112:     LATAbits.LATA3 = 1;
  3333   0038C8  8679               	bsf	121,3,c	;volatile
  3334   0038CA                     
  3335                           ;color.c: 113:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3336   0038CA  0E29               	movlw	41
  3337   0038CC  6E53               	movwf	(??_reading_hue+1)^0,c
  3338   0038CE  0E96               	movlw	150
  3339   0038D0  6E52               	movwf	??_reading_hue^0,c
  3340   0038D2  0E7F               	movlw	127
  3341   0038D4                     u5817:
  3342   0038D4  2EE8               	decfsz	wreg,f,c
  3343   0038D6  D7FE               	bra	u5817
  3344   0038D8  2E52               	decfsz	??_reading_hue^0,f,c
  3345   0038DA  D7FC               	bra	u5817
  3346   0038DC  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3347   0038DE  D7FA               	bra	u5817
  3348   0038E0  0000               	nop	
  3349   0038E2                     
  3350                           ;color.c: 114:     (cCurr->blue) = color_read_Blue();
  3351   0038E2  EC3F  F021         	call	_color_read_Blue	;wreg free
  3352   0038E6  5050               	movf	reading_hue@cCurr^0,w,c
  3353   0038E8  6ED9               	movwf	fsr2l,c
  3354   0038EA  6ADA               	clrf	fsr2h,c
  3355   0038EC  0E04               	movlw	4
  3356   0038EE  26D9               	addwf	fsr2l,f,c
  3357   0038F0  C006  FFDE         	movff	?_color_read_Blue,postinc2
  3358   0038F4  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  3359   0038F8                     
  3360                           ;color.c: 116:     LATGbits.LATG0 = 1;
  3361   0038F8  807F               	bsf	127,0,c	;volatile
  3362   0038FA                     
  3363                           ;color.c: 117:     LATEbits.LATE7 = 1;
  3364   0038FA  8E7D               	bsf	125,7,c	;volatile
  3365   0038FC                     
  3366                           ;color.c: 118:     LATAbits.LATA3 = 1;
  3367   0038FC  8679               	bsf	121,3,c	;volatile
  3368                           
  3369                           ;color.c: 119:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3370   0038FE  0E29               	movlw	41
  3371   003900  6E53               	movwf	(??_reading_hue+1)^0,c
  3372   003902  0E96               	movlw	150
  3373   003904  6E52               	movwf	??_reading_hue^0,c
  3374   003906  0E7F               	movlw	127
  3375   003908                     u5827:
  3376   003908  2EE8               	decfsz	wreg,f,c
  3377   00390A  D7FE               	bra	u5827
  3378   00390C  2E52               	decfsz	??_reading_hue^0,f,c
  3379   00390E  D7FC               	bra	u5827
  3380   003910  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3381   003912  D7FA               	bra	u5827
  3382   003914  0000               	nop	
  3383   003916                     
  3384                           ;color.c: 120:     (cCurr->clear) = color_read_Clear();
  3385   003916  EC17  F021         	call	_color_read_Clear	;wreg free
  3386   00391A  5050               	movf	reading_hue@cCurr^0,w,c
  3387   00391C  6ED9               	movwf	fsr2l,c
  3388   00391E  6ADA               	clrf	fsr2h,c
  3389   003920  0E06               	movlw	6
  3390   003922  26D9               	addwf	fsr2l,f,c
  3391   003924  C006  FFDE         	movff	?_color_read_Clear,postinc2
  3392   003928  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  3393   00392C                     
  3394                           ;color.c: 123:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  3395   00392C  0EE1               	movlw	low _colorCalibration
  3396   00392E  6E4C               	movwf	convert_rgb2hue@cMax^0,c
  3397   003930  0ED7               	movlw	low _colorCurrent
  3398   003932  6E4D               	movwf	convert_rgb2hue@cCurr^0,c
  3399   003934  EC63  F007         	call	_convert_rgb2hue	;wreg free
  3400   003938  C04C  F054         	movff	?_convert_rgb2hue,reading_hue@hue
  3401   00393C  C04D  F055         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  3402   003940                     
  3403                           ;color.c: 127:     return hue;
  3404   003940  C054  F050         	movff	reading_hue@hue,?_reading_hue
  3405   003944  C055  F051         	movff	reading_hue@hue+1,?_reading_hue+1
  3406   003948  0012               	return		;funcret
  3407   00394A                     __end_of_reading_hue:
  3408                           	callstack 0
  3409                           
  3410 ;; *************** function _convert_rgb2hue *****************
  3411 ;; Defined at:
  3412 ;;		line 227 in file "color.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  cMax            1   75[COMRAM] PTR struct colors
  3415 ;;		 -> colorCalibration(10), 
  3416 ;;  cCurr           1   76[COMRAM] PTR struct colors
  3417 ;;		 -> colorCurrent(10), 
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;  c_char         20    0        unsigned char [20]
  3420 ;;  b               4   72[BANK0 ] float 
  3421 ;;  g               4   68[BANK0 ] float 
  3422 ;;  r               4   64[BANK0 ] float 
  3423 ;;  hue             4   60[BANK0 ] float 
  3424 ;;  max             4   56[BANK0 ] float 
  3425 ;;  diff            4   52[BANK0 ] float 
  3426 ;;  min             4   48[BANK0 ] float 
  3427 ;;  clearmax        4   28[BANK0 ] float 
  3428 ;;  clearcurrent    4   24[BANK0 ] float 
  3429 ;;  bluemax         4   20[BANK0 ] float 
  3430 ;;  bluecurrent     4   16[BANK0 ] float 
  3431 ;;  greenmax        4   12[BANK0 ] float 
  3432 ;;  greencurrent    4    8[BANK0 ] float 
  3433 ;;  redmax          4    4[BANK0 ] float 
  3434 ;;  redcurrent      4    0[BANK0 ] float 
  3435 ;;  c               4    0        float 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  2   75[COMRAM] unsigned int 
  3438 ;; Registers used:
  3439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3445 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3446 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3447 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3448 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3449 ;;Total ram usage:       80 bytes
  3450 ;; Hardware stack levels used: 1
  3451 ;; Hardware stack levels required when called: 3
  3452 ;; This function calls:
  3453 ;;		___fladd
  3454 ;;		___fldiv
  3455 ;;		___fleq
  3456 ;;		___flge
  3457 ;;		___flmul
  3458 ;;		___flsub
  3459 ;;		___fltol
  3460 ;;		___xxtofl
  3461 ;; This function is called by:
  3462 ;;		_reading_hue
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text10
  3467   000EC6                     __ptext10:
  3468                           	callstack 0
  3469   000EC6                     _convert_rgb2hue:
  3470                           	callstack 26
  3471   000EC6                     
  3472                           ;color.c: 227: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 228: {;color.c: 229:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 230:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  3473   000EC6  0E00               	movlw	0
  3474   000EC8  0100               	movlb	0	; () banked
  3475   000ECA  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3476   000ECC  0E00               	movlw	0
  3477   000ECE  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3478   000ED0  0E00               	movlw	0
  3479   000ED2  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3480   000ED4  0E00               	movlw	0
  3481   000ED6  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3482   000ED8                     
  3483                           ; BSR set to: 0
  3484                           ;color.c: 232:     redcurrent = cCurr->red;
  3485   000ED8  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3486   000EDA  6ED9               	movwf	fsr2l,c
  3487   000EDC  6ADA               	clrf	fsr2h,c
  3488   000EDE  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3489   000EE2  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3490   000EE6  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3491   000EEA  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3492   000EEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3493   000EF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3494   000EF2  0E00               	movlw	0
  3495   000EF4  ECF1  F015         	call	___xxtofl
  3496   000EF8  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  3497   000EFC  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  3498   000F00  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  3499   000F04  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  3500   000F08                     
  3501                           ;color.c: 233:     redmax = cMax->red;
  3502   000F08  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3503   000F0A  6ED9               	movwf	fsr2l,c
  3504   000F0C  6ADA               	clrf	fsr2h,c
  3505   000F0E  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3506   000F12  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3507   000F16  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3508   000F1A  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3509   000F1E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3510   000F20  6A05               	clrf	(___xxtofl@val+3)^0,c
  3511   000F22  0E00               	movlw	0
  3512   000F24  ECF1  F015         	call	___xxtofl
  3513   000F28  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  3514   000F2C  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  3515   000F30  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  3516   000F34  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  3517   000F38                     
  3518                           ;color.c: 234:     greencurrent = cCurr->green;
  3519   000F38  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3520   000F3A  6ED9               	movwf	fsr2l,c
  3521   000F3C  6ADA               	clrf	fsr2h,c
  3522   000F3E  0E02               	movlw	2
  3523   000F40  26D9               	addwf	fsr2l,f,c
  3524   000F42  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3525   000F46  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3526   000F4A  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3527   000F4E  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3528   000F52  6A04               	clrf	(___xxtofl@val+2)^0,c
  3529   000F54  6A05               	clrf	(___xxtofl@val+3)^0,c
  3530   000F56  0E00               	movlw	0
  3531   000F58  ECF1  F015         	call	___xxtofl
  3532   000F5C  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  3533   000F60  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  3534   000F64  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  3535   000F68  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  3536   000F6C                     
  3537                           ;color.c: 235:     greenmax = cMax->green;
  3538   000F6C  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3539   000F6E  6ED9               	movwf	fsr2l,c
  3540   000F70  6ADA               	clrf	fsr2h,c
  3541   000F72  0E02               	movlw	2
  3542   000F74  26D9               	addwf	fsr2l,f,c
  3543   000F76  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3544   000F7A  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3545   000F7E  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3546   000F82  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3547   000F86  6A04               	clrf	(___xxtofl@val+2)^0,c
  3548   000F88  6A05               	clrf	(___xxtofl@val+3)^0,c
  3549   000F8A  0E00               	movlw	0
  3550   000F8C  ECF1  F015         	call	___xxtofl
  3551   000F90  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  3552   000F94  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  3553   000F98  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  3554   000F9C  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  3555   000FA0                     
  3556                           ;color.c: 236:     bluecurrent = cCurr->blue;
  3557   000FA0  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3558   000FA2  6ED9               	movwf	fsr2l,c
  3559   000FA4  6ADA               	clrf	fsr2h,c
  3560   000FA6  0E04               	movlw	4
  3561   000FA8  26D9               	addwf	fsr2l,f,c
  3562   000FAA  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3563   000FAE  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3564   000FB2  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3565   000FB6  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3566   000FBA  6A04               	clrf	(___xxtofl@val+2)^0,c
  3567   000FBC  6A05               	clrf	(___xxtofl@val+3)^0,c
  3568   000FBE  0E00               	movlw	0
  3569   000FC0  ECF1  F015         	call	___xxtofl
  3570   000FC4  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  3571   000FC8  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  3572   000FCC  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  3573   000FD0  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  3574   000FD4                     
  3575                           ;color.c: 237:     bluemax = cMax->blue;
  3576   000FD4  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3577   000FD6  6ED9               	movwf	fsr2l,c
  3578   000FD8  6ADA               	clrf	fsr2h,c
  3579   000FDA  0E04               	movlw	4
  3580   000FDC  26D9               	addwf	fsr2l,f,c
  3581   000FDE  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3582   000FE2  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3583   000FE6  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3584   000FEA  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3585   000FEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3586   000FF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3587   000FF2  0E00               	movlw	0
  3588   000FF4  ECF1  F015         	call	___xxtofl
  3589   000FF8  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  3590   000FFC  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  3591   001000  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  3592   001004  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  3593   001008                     
  3594                           ;color.c: 238:     clearcurrent = cCurr->clear;
  3595   001008  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3596   00100A  6ED9               	movwf	fsr2l,c
  3597   00100C  6ADA               	clrf	fsr2h,c
  3598   00100E  0E06               	movlw	6
  3599   001010  26D9               	addwf	fsr2l,f,c
  3600   001012  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3601   001016  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3602   00101A  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3603   00101E  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3604   001022  6A04               	clrf	(___xxtofl@val+2)^0,c
  3605   001024  6A05               	clrf	(___xxtofl@val+3)^0,c
  3606   001026  0E00               	movlw	0
  3607   001028  ECF1  F015         	call	___xxtofl
  3608   00102C  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  3609   001030  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  3610   001034  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  3611   001038  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  3612   00103C                     
  3613                           ;color.c: 239:     clearmax = cMax->clear;
  3614   00103C  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3615   00103E  6ED9               	movwf	fsr2l,c
  3616   001040  6ADA               	clrf	fsr2h,c
  3617   001042  0E06               	movlw	6
  3618   001044  26D9               	addwf	fsr2l,f,c
  3619   001046  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3620   00104A  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3621   00104E  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3622   001052  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3623   001056  6A04               	clrf	(___xxtofl@val+2)^0,c
  3624   001058  6A05               	clrf	(___xxtofl@val+3)^0,c
  3625   00105A  0E00               	movlw	0
  3626   00105C  ECF1  F015         	call	___xxtofl
  3627   001060  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  3628   001064  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  3629   001068  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  3630   00106C  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  3631   001070  C078  F029         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  3632   001074  C079  F02A         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  3633   001078  C07A  F02B         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  3634   00107C  C07B  F02C         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  3635   001080  C07C  F02D         	movff	convert_rgb2hue@clearmax,___fldiv@a
  3636   001084  C07D  F02E         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  3637   001088  C07E  F02F         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  3638   00108C  C07F  F030         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  3639   001090  ECDB  F011         	call	___fldiv	;wreg free
  3640   001094                     
  3641                           ;color.c: 242:     char c_char[20];;color.c: 248:     r = redcurrent/redmax;
  3642   001094  C060  F029         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  3643   001098  C061  F02A         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  3644   00109C  C062  F02B         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  3645   0010A0  C063  F02C         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  3646   0010A4  C064  F02D         	movff	convert_rgb2hue@redmax,___fldiv@a
  3647   0010A8  C065  F02E         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  3648   0010AC  C066  F02F         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  3649   0010B0  C067  F030         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  3650   0010B4  ECDB  F011         	call	___fldiv	;wreg free
  3651   0010B8  C029  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  3652   0010BC  C02A  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  3653   0010C0  C02B  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  3654   0010C4  C02C  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  3655   0010C8                     
  3656                           ;color.c: 249:     g = greencurrent/greenmax;
  3657   0010C8  C068  F029         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  3658   0010CC  C069  F02A         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  3659   0010D0  C06A  F02B         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  3660   0010D4  C06B  F02C         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  3661   0010D8  C06C  F02D         	movff	convert_rgb2hue@greenmax,___fldiv@a
  3662   0010DC  C06D  F02E         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  3663   0010E0  C06E  F02F         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  3664   0010E4  C06F  F030         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  3665   0010E8  ECDB  F011         	call	___fldiv	;wreg free
  3666   0010EC  C029  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3667   0010F0  C02A  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3668   0010F4  C02B  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3669   0010F8  C02C  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3670   0010FC                     
  3671                           ;color.c: 250:     b = bluecurrent/bluemax;
  3672   0010FC  C070  F029         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3673   001100  C071  F02A         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3674   001104  C072  F02B         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3675   001108  C073  F02C         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3676   00110C  C074  F02D         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3677   001110  C075  F02E         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3678   001114  C076  F02F         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3679   001118  C077  F030         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3680   00111C  ECDB  F011         	call	___fldiv	;wreg free
  3681   001120  C029  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3682   001124  C02A  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3683   001128  C02B  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3684   00112C  C02C  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3685   001130                     
  3686                           ;color.c: 252:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3687   001130  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3688   001134  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3689   001138  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3690   00113C  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3691   001140  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3692   001144  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3693   001148  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3694   00114C  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3695   001150  EC38  F01B         	call	___flge	;wreg free
  3696   001154  A0D8               	btfss	status,0,c
  3697   001156  EFAF  F008         	goto	u4031
  3698   00115A  EFB1  F008         	goto	u4030
  3699   00115E                     u4031:
  3700   00115E  EFE6  F008         	goto	l4658
  3701   001162                     u4030:
  3702   001162  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3703   001166  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3704   00116A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3705   00116E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3706   001172  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3707   001176  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3708   00117A  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3709   00117E  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3710   001182  EC38  F01B         	call	___flge	;wreg free
  3711   001186  A0D8               	btfss	status,0,c
  3712   001188  EFC8  F008         	goto	u4041
  3713   00118C  EFCA  F008         	goto	u4040
  3714   001190                     u4041:
  3715   001190  EFD4  F008         	goto	l128
  3716   001194                     u4040:
  3717   001194  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$432
  3718   001198  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$432+1
  3719   00119C  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$432+2
  3720   0011A0  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$432+3
  3721   0011A4  EFDC  F008         	goto	l130
  3722   0011A8                     l128:
  3723   0011A8  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$432
  3724   0011AC  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$432+1
  3725   0011B0  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$432+2
  3726   0011B4  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$432+3
  3727   0011B8                     l130:
  3728   0011B8  C080  F090         	movff	_convert_rgb2hue$432,convert_rgb2hue@min
  3729   0011BC  C081  F091         	movff	_convert_rgb2hue$432+1,convert_rgb2hue@min+1
  3730   0011C0  C082  F092         	movff	_convert_rgb2hue$432+2,convert_rgb2hue@min+2
  3731   0011C4  C083  F093         	movff	_convert_rgb2hue$432+3,convert_rgb2hue@min+3
  3732   0011C8  EF19  F009         	goto	l4662
  3733   0011CC                     l4658:
  3734   0011CC  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3735   0011D0  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3736   0011D4  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3737   0011D8  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3738   0011DC  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3739   0011E0  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3740   0011E4  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3741   0011E8  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3742   0011EC  EC38  F01B         	call	___flge	;wreg free
  3743   0011F0  A0D8               	btfss	status,0,c
  3744   0011F2  EFFD  F008         	goto	u4051
  3745   0011F6  EFFF  F008         	goto	u4050
  3746   0011FA                     u4051:
  3747   0011FA  EF09  F009         	goto	l132
  3748   0011FE                     u4050:
  3749   0011FE  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$433
  3750   001202  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$433+1
  3751   001206  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$433+2
  3752   00120A  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$433+3
  3753   00120E  EF11  F009         	goto	l134
  3754   001212                     l132:
  3755   001212  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$433
  3756   001216  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$433+1
  3757   00121A  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$433+2
  3758   00121E  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$433+3
  3759   001222                     l134:
  3760   001222  C084  F090         	movff	_convert_rgb2hue$433,convert_rgb2hue@min
  3761   001226  C085  F091         	movff	_convert_rgb2hue$433+1,convert_rgb2hue@min+1
  3762   00122A  C086  F092         	movff	_convert_rgb2hue$433+2,convert_rgb2hue@min+2
  3763   00122E  C087  F093         	movff	_convert_rgb2hue$433+3,convert_rgb2hue@min+3
  3764   001232                     l4662:
  3765                           
  3766                           ;color.c: 253:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3767   001232  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3768   001236  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3769   00123A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3770   00123E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3771   001242  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3772   001246  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3773   00124A  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3774   00124E  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3775   001252  EC38  F01B         	call	___flge	;wreg free
  3776   001256  A0D8               	btfss	status,0,c
  3777   001258  EF30  F009         	goto	u4061
  3778   00125C  EF32  F009         	goto	u4060
  3779   001260                     u4061:
  3780   001260  EF67  F009         	goto	l4668
  3781   001264                     u4060:
  3782   001264  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3783   001268  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3784   00126C  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3785   001270  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3786   001274  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3787   001278  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3788   00127C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3789   001280  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3790   001284  EC38  F01B         	call	___flge	;wreg free
  3791   001288  A0D8               	btfss	status,0,c
  3792   00128A  EF49  F009         	goto	u4071
  3793   00128E  EF4B  F009         	goto	u4070
  3794   001292                     u4071:
  3795   001292  EF55  F009         	goto	l140
  3796   001296                     u4070:
  3797   001296  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$434
  3798   00129A  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$434+1
  3799   00129E  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$434+2
  3800   0012A2  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$434+3
  3801   0012A6  EF5D  F009         	goto	l142
  3802   0012AA                     l140:
  3803   0012AA  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$434
  3804   0012AE  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$434+1
  3805   0012B2  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$434+2
  3806   0012B6  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$434+3
  3807   0012BA                     l142:
  3808   0012BA  C088  F098         	movff	_convert_rgb2hue$434,convert_rgb2hue@max
  3809   0012BE  C089  F099         	movff	_convert_rgb2hue$434+1,convert_rgb2hue@max+1
  3810   0012C2  C08A  F09A         	movff	_convert_rgb2hue$434+2,convert_rgb2hue@max+2
  3811   0012C6  C08B  F09B         	movff	_convert_rgb2hue$434+3,convert_rgb2hue@max+3
  3812   0012CA  EF9A  F009         	goto	l4672
  3813   0012CE                     l4668:
  3814   0012CE  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3815   0012D2  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3816   0012D6  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3817   0012DA  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3818   0012DE  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3819   0012E2  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3820   0012E6  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3821   0012EA  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3822   0012EE  EC38  F01B         	call	___flge	;wreg free
  3823   0012F2  A0D8               	btfss	status,0,c
  3824   0012F4  EF7E  F009         	goto	u4081
  3825   0012F8  EF80  F009         	goto	u4080
  3826   0012FC                     u4081:
  3827   0012FC  EF8A  F009         	goto	l144
  3828   001300                     u4080:
  3829   001300  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$435
  3830   001304  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$435+1
  3831   001308  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$435+2
  3832   00130C  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$435+3
  3833   001310  EF92  F009         	goto	l146
  3834   001314                     l144:
  3835   001314  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$435
  3836   001318  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$435+1
  3837   00131C  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$435+2
  3838   001320  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$435+3
  3839   001324                     l146:
  3840   001324  C08C  F098         	movff	_convert_rgb2hue$435,convert_rgb2hue@max
  3841   001328  C08D  F099         	movff	_convert_rgb2hue$435+1,convert_rgb2hue@max+1
  3842   00132C  C08E  F09A         	movff	_convert_rgb2hue$435+2,convert_rgb2hue@max+2
  3843   001330  C08F  F09B         	movff	_convert_rgb2hue$435+3,convert_rgb2hue@max+3
  3844   001334                     l4672:
  3845                           
  3846                           ;color.c: 254:     diff = max - min;
  3847   001334  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3848   001338  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3849   00133C  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3850   001340  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3851   001344  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3852   001348  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3853   00134C  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3854   001350  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3855   001354  EC67  F021         	call	___flsub	;wreg free
  3856   001358  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3857   00135C  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3858   001360  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3859   001364  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3860                           
  3861                           ;color.c: 255:     if (max == min) {
  3862   001368  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3863   00136C  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3864   001370  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3865   001374  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3866   001378  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3867   00137C  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3868   001380  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3869   001384  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3870   001388  EC1B  F01E         	call	___fleq	;wreg free
  3871   00138C  A0D8               	btfss	status,0,c
  3872   00138E  EFCB  F009         	goto	u4091
  3873   001392  EFCD  F009         	goto	u4090
  3874   001396                     u4091:
  3875   001396  EFD8  F009         	goto	l4676
  3876   00139A                     u4090:
  3877   00139A                     
  3878                           ;color.c: 256:         hue = 0;
  3879   00139A  0E00               	movlw	0
  3880   00139C  0100               	movlb	0	; () banked
  3881   00139E  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3882   0013A0  0E00               	movlw	0
  3883   0013A2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3884   0013A4  0E00               	movlw	0
  3885   0013A6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3886   0013A8  0E00               	movlw	0
  3887   0013AA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3888                           
  3889                           ;color.c: 257:     } else if (max == r){
  3890   0013AC  EFE1  F00A         	goto	l4688
  3891   0013B0                     l4676:
  3892   0013B0  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3893   0013B4  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3894   0013B8  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3895   0013BC  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3896   0013C0  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3897   0013C4  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3898   0013C8  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3899   0013CC  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3900   0013D0  EC1B  F01E         	call	___fleq	;wreg free
  3901   0013D4  A0D8               	btfss	status,0,c
  3902   0013D6  EFEF  F009         	goto	u4101
  3903   0013DA  EFF1  F009         	goto	u4100
  3904   0013DE                     u4101:
  3905   0013DE  EF1F  F00A         	goto	l4680
  3906   0013E2                     u4100:
  3907   0013E2                     
  3908                           ;color.c: 258:         hue = (b - g) / diff;
  3909   0013E2  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3910   0013E6  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3911   0013EA  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3912   0013EE  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3913   0013F2  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3914   0013F6  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3915   0013FA  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3916   0013FE  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3917   001402  EC67  F021         	call	___flsub	;wreg free
  3918   001406  C012  F029         	movff	?___flsub,___fldiv@b
  3919   00140A  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  3920   00140E  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  3921   001412  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  3922   001416  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3923   00141A  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3924   00141E  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3925   001422  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3926   001426  ECDB  F011         	call	___fldiv	;wreg free
  3927   00142A  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3928   00142E  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3929   001432  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3930   001436  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3931                           
  3932                           ;color.c: 259:     } else if (max == g){
  3933   00143A  EFE1  F00A         	goto	l4688
  3934   00143E                     l4680:
  3935   00143E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3936   001442  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3937   001446  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3938   00144A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3939   00144E  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3940   001452  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3941   001456  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3942   00145A  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3943   00145E  EC1B  F01E         	call	___fleq	;wreg free
  3944   001462  A0D8               	btfss	status,0,c
  3945   001464  EF36  F00A         	goto	u4111
  3946   001468  EF38  F00A         	goto	u4110
  3947   00146C                     u4111:
  3948   00146C  EF80  F00A         	goto	l4684
  3949   001470                     u4110:
  3950   001470                     
  3951                           ;color.c: 260:         hue = (b - r) / diff;
  3952   001470  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3953   001474  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3954   001478  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3955   00147C  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3956   001480  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3957   001484  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3958   001488  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3959   00148C  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3960   001490  EC67  F021         	call	___flsub	;wreg free
  3961   001494  C012  F029         	movff	?___flsub,___fldiv@b
  3962   001498  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  3963   00149C  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  3964   0014A0  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  3965   0014A4  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3966   0014A8  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3967   0014AC  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3968   0014B0  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3969   0014B4  ECDB  F011         	call	___fldiv	;wreg free
  3970   0014B8  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3971   0014BC  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3972   0014C0  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3973   0014C4  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3974                           
  3975                           ;color.c: 261:         hue = hue + 2;
  3976   0014C8  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3977   0014CC  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3978   0014D0  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3979   0014D4  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3980   0014D8  0E00               	movlw	0
  3981   0014DA  6E06               	movwf	___fladd@a^0,c
  3982   0014DC  0E00               	movlw	0
  3983   0014DE  6E07               	movwf	(___fladd@a+1)^0,c
  3984   0014E0  0E00               	movlw	0
  3985   0014E2  6E08               	movwf	(___fladd@a+2)^0,c
  3986   0014E4  0E40               	movlw	64
  3987   0014E6  6E09               	movwf	(___fladd@a+3)^0,c
  3988   0014E8  EC2C  F00B         	call	___fladd	;wreg free
  3989   0014EC  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3990   0014F0  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3991   0014F4  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3992   0014F8  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3993                           
  3994                           ;color.c: 262:     } else if (max == b){
  3995   0014FC  EFE1  F00A         	goto	l4688
  3996   001500                     l4684:
  3997   001500  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3998   001504  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3999   001508  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  4000   00150C  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  4001   001510  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  4002   001514  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  4003   001518  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  4004   00151C  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  4005   001520  EC1B  F01E         	call	___fleq	;wreg free
  4006   001524  A0D8               	btfss	status,0,c
  4007   001526  EF97  F00A         	goto	u4121
  4008   00152A  EF99  F00A         	goto	u4120
  4009   00152E                     u4121:
  4010   00152E  EFE1  F00A         	goto	l150
  4011   001532                     u4120:
  4012   001532                     
  4013                           ;color.c: 263:         hue = (r - g) / diff;
  4014   001532  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  4015   001536  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  4016   00153A  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  4017   00153E  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  4018   001542  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  4019   001546  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  4020   00154A  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  4021   00154E  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  4022   001552  EC67  F021         	call	___flsub	;wreg free
  4023   001556  C012  F029         	movff	?___flsub,___fldiv@b
  4024   00155A  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  4025   00155E  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  4026   001562  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  4027   001566  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  4028   00156A  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  4029   00156E  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  4030   001572  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  4031   001576  ECDB  F011         	call	___fldiv	;wreg free
  4032   00157A  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  4033   00157E  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  4034   001582  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  4035   001586  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  4036                           
  4037                           ;color.c: 264:         hue = hue + 4;
  4038   00158A  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  4039   00158E  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  4040   001592  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  4041   001596  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  4042   00159A  0E00               	movlw	0
  4043   00159C  6E06               	movwf	___fladd@a^0,c
  4044   00159E  0E00               	movlw	0
  4045   0015A0  6E07               	movwf	(___fladd@a+1)^0,c
  4046   0015A2  0E80               	movlw	128
  4047   0015A4  6E08               	movwf	(___fladd@a+2)^0,c
  4048   0015A6  0E40               	movlw	64
  4049   0015A8  6E09               	movwf	(___fladd@a+3)^0,c
  4050   0015AA  EC2C  F00B         	call	___fladd	;wreg free
  4051   0015AE  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  4052   0015B2  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  4053   0015B6  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  4054   0015BA  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  4055   0015BE  EFE1  F00A         	goto	l4688
  4056   0015C2                     l150:
  4057   0015C2                     l4688:
  4058                           
  4059                           ;color.c: 267:     hue = hue * 60;
  4060   0015C2  C09C  F010         	movff	convert_rgb2hue@hue,___flmul@b
  4061   0015C6  C09D  F011         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  4062   0015CA  C09E  F012         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  4063   0015CE  C09F  F013         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  4064   0015D2  0E00               	movlw	0
  4065   0015D4  6E14               	movwf	___flmul@a^0,c
  4066   0015D6  0E00               	movlw	0
  4067   0015D8  6E15               	movwf	(___flmul@a+1)^0,c
  4068   0015DA  0E70               	movlw	112
  4069   0015DC  6E16               	movwf	(___flmul@a+2)^0,c
  4070   0015DE  0E42               	movlw	66
  4071   0015E0  6E17               	movwf	(___flmul@a+3)^0,c
  4072   0015E2  ECC6  F00F         	call	___flmul	;wreg free
  4073   0015E6  C010  F09C         	movff	?___flmul,convert_rgb2hue@hue
  4074   0015EA  C011  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  4075   0015EE  C012  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  4076   0015F2  C013  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  4077   0015F6                     
  4078                           ;color.c: 268:     if (hue < 0) {
  4079   0015F6  0100               	movlb	0	; () banked
  4080   0015F8  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  4081   0015FA  EF03  F00B         	goto	u4130
  4082   0015FE  EF01  F00B         	goto	u4131
  4083   001602                     u4131:
  4084   001602  EF1D  F00B         	goto	l154
  4085   001606                     u4130:
  4086   001606                     
  4087                           ; BSR set to: 0
  4088                           ;color.c: 269:         hue = hue + 360;
  4089   001606  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  4090   00160A  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  4091   00160E  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  4092   001612  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  4093   001616  0E00               	movlw	0
  4094   001618  6E06               	movwf	___fladd@a^0,c
  4095   00161A  0E00               	movlw	0
  4096   00161C  6E07               	movwf	(___fladd@a+1)^0,c
  4097   00161E  0EB4               	movlw	180
  4098   001620  6E08               	movwf	(___fladd@a+2)^0,c
  4099   001622  0E43               	movlw	67
  4100   001624  6E09               	movwf	(___fladd@a+3)^0,c
  4101   001626  EC2C  F00B         	call	___fladd	;wreg free
  4102   00162A  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  4103   00162E  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  4104   001632  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  4105   001636  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  4106   00163A                     l154:
  4107                           
  4108                           ;color.c: 272:     return (unsigned int)hue;
  4109   00163A  C09C  F042         	movff	convert_rgb2hue@hue,___fltol@f1
  4110   00163E  C09D  F043         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  4111   001642  C09E  F044         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  4112   001646  C09F  F045         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  4113   00164A  ECB5  F01A         	call	___fltol	;wreg free
  4114   00164E  C042  F04C         	movff	?___fltol,?_convert_rgb2hue
  4115   001652  C043  F04D         	movff	?___fltol+1,?_convert_rgb2hue+1
  4116   001656  0012               	return		;funcret
  4117   001658                     __end_of_convert_rgb2hue:
  4118                           	callstack 0
  4119                           
  4120 ;; *************** function ___xxtofl *****************
  4121 ;; Defined at:
  4122 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  sign            1    wreg     unsigned char 
  4125 ;;  val             4    1[COMRAM] long 
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;  sign            1    9[COMRAM] unsigned char 
  4128 ;;  arg             4   11[COMRAM] unsigned long 
  4129 ;;  exp             1   10[COMRAM] unsigned char 
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  4    1[COMRAM] unsigned char 
  4132 ;; Registers used:
  4133 ;;		wreg, status,2, status,0
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4139 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4140 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4141 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4142 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4143 ;;Total ram usage:       14 bytes
  4144 ;; Hardware stack levels used: 1
  4145 ;; Hardware stack levels required when called: 1
  4146 ;; This function calls:
  4147 ;;		Nothing
  4148 ;; This function is called by:
  4149 ;;		_convert_rgb2hue
  4150 ;;		_main
  4151 ;;		_fullSpeedAhead
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text11
  4156   002BE2                     __ptext11:
  4157                           	callstack 0
  4158   002BE2                     ___xxtofl:
  4159                           	callstack 26
  4160                           
  4161                           ;incstack = 0
  4162                           ;___xxtofl@sign stored from wreg
  4163   002BE2  6E0A               	movwf	___xxtofl@sign^0,c
  4164   002BE4  500A               	movf	___xxtofl@sign^0,w,c
  4165   002BE6  B4D8               	btfsc	status,2,c
  4166   002BE8  EFF8  F015         	goto	u3561
  4167   002BEC  EFFA  F015         	goto	u3560
  4168   002BF0                     u3561:
  4169   002BF0  EF1C  F016         	goto	l1389
  4170   002BF4                     u3560:
  4171   002BF4  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4172   002BF6  EF01  F016         	goto	u3570
  4173   002BFA  EFFF  F015         	goto	u3571
  4174   002BFE                     u3571:
  4175   002BFE  EF1C  F016         	goto	l1389
  4176   002C02                     u3570:
  4177   002C02  C002  F006         	movff	___xxtofl@val,??___xxtofl
  4178   002C06  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  4179   002C0A  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  4180   002C0E  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  4181   002C12  1E06               	comf	??___xxtofl^0,f,c
  4182   002C14  1E07               	comf	(??___xxtofl+1)^0,f,c
  4183   002C16  1E08               	comf	(??___xxtofl+2)^0,f,c
  4184   002C18  1E09               	comf	(??___xxtofl+3)^0,f,c
  4185   002C1A  2A06               	incf	??___xxtofl^0,f,c
  4186   002C1C  0E00               	movlw	0
  4187   002C1E  2207               	addwfc	(??___xxtofl+1)^0,f,c
  4188   002C20  2208               	addwfc	(??___xxtofl+2)^0,f,c
  4189   002C22  2209               	addwfc	(??___xxtofl+3)^0,f,c
  4190   002C24  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  4191   002C28  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4192   002C2C  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4193   002C30  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4194   002C34  EF24  F016         	goto	l4234
  4195   002C38                     l1389:
  4196   002C38  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  4197   002C3C  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4198   002C40  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4199   002C44  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4200   002C48                     l4234:
  4201   002C48  5002               	movf	___xxtofl@val^0,w,c
  4202   002C4A  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  4203   002C4C  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  4204   002C4E  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  4205   002C50  A4D8               	btfss	status,2,c
  4206   002C52  EF2D  F016         	goto	u3581
  4207   002C56  EF2F  F016         	goto	u3580
  4208   002C5A                     u3581:
  4209   002C5A  EF39  F016         	goto	l4240
  4210   002C5E                     u3580:
  4211   002C5E  0E00               	movlw	0
  4212   002C60  6E02               	movwf	?___xxtofl^0,c
  4213   002C62  0E00               	movlw	0
  4214   002C64  6E03               	movwf	(?___xxtofl+1)^0,c
  4215   002C66  0E00               	movlw	0
  4216   002C68  6E04               	movwf	(?___xxtofl+2)^0,c
  4217   002C6A  0E00               	movlw	0
  4218   002C6C  6E05               	movwf	(?___xxtofl+3)^0,c
  4219   002C6E  EFCA  F016         	goto	l1392
  4220   002C72                     l4240:
  4221   002C72  0E96               	movlw	150
  4222   002C74  6E0B               	movwf	___xxtofl@exp^0,c
  4223   002C76  EF43  F016         	goto	l4244
  4224   002C7A                     l4242:
  4225   002C7A  2A0B               	incf	___xxtofl@exp^0,f,c
  4226   002C7C  90D8               	bcf	status,0,c
  4227   002C7E  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4228   002C80  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4229   002C82  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4230   002C84  320C               	rrcf	___xxtofl@arg^0,f,c
  4231   002C86                     l4244:
  4232   002C86  0E00               	movlw	0
  4233   002C88  140C               	andwf	___xxtofl@arg^0,w,c
  4234   002C8A  6E06               	movwf	??___xxtofl^0,c
  4235   002C8C  0E00               	movlw	0
  4236   002C8E  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4237   002C90  6E07               	movwf	(??___xxtofl+1)^0,c
  4238   002C92  0E00               	movlw	0
  4239   002C94  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4240   002C96  6E08               	movwf	(??___xxtofl+2)^0,c
  4241   002C98  0EFE               	movlw	254
  4242   002C9A  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4243   002C9C  6E09               	movwf	(??___xxtofl+3)^0,c
  4244   002C9E  5006               	movf	??___xxtofl^0,w,c
  4245   002CA0  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4246   002CA2  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4247   002CA4  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4248   002CA6  A4D8               	btfss	status,2,c
  4249   002CA8  EF58  F016         	goto	u3591
  4250   002CAC  EF5A  F016         	goto	u3590
  4251   002CB0                     u3591:
  4252   002CB0  EF3D  F016         	goto	l4242
  4253   002CB4                     u3590:
  4254   002CB4  EF68  F016         	goto	l1396
  4255   002CB8                     l4246:
  4256   002CB8  2A0B               	incf	___xxtofl@exp^0,f,c
  4257   002CBA  0E01               	movlw	1
  4258   002CBC  260C               	addwf	___xxtofl@arg^0,f,c
  4259   002CBE  0E00               	movlw	0
  4260   002CC0  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4261   002CC2  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4262   002CC4  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4263   002CC6  90D8               	bcf	status,0,c
  4264   002CC8  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4265   002CCA  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4266   002CCC  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4267   002CCE  320C               	rrcf	___xxtofl@arg^0,f,c
  4268   002CD0                     l1396:
  4269   002CD0  0E00               	movlw	0
  4270   002CD2  140C               	andwf	___xxtofl@arg^0,w,c
  4271   002CD4  6E06               	movwf	??___xxtofl^0,c
  4272   002CD6  0E00               	movlw	0
  4273   002CD8  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4274   002CDA  6E07               	movwf	(??___xxtofl+1)^0,c
  4275   002CDC  0E00               	movlw	0
  4276   002CDE  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4277   002CE0  6E08               	movwf	(??___xxtofl+2)^0,c
  4278   002CE2  0EFF               	movlw	255
  4279   002CE4  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4280   002CE6  6E09               	movwf	(??___xxtofl+3)^0,c
  4281   002CE8  5006               	movf	??___xxtofl^0,w,c
  4282   002CEA  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4283   002CEC  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4284   002CEE  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4285   002CF0  A4D8               	btfss	status,2,c
  4286   002CF2  EF7D  F016         	goto	u3601
  4287   002CF6  EF7F  F016         	goto	u3600
  4288   002CFA                     u3601:
  4289   002CFA  EF5C  F016         	goto	l4246
  4290   002CFE                     u3600:
  4291   002CFE  EF87  F016         	goto	l4254
  4292   002D02                     l4252:
  4293   002D02  060B               	decf	___xxtofl@exp^0,f,c
  4294   002D04  90D8               	bcf	status,0,c
  4295   002D06  360C               	rlcf	___xxtofl@arg^0,f,c
  4296   002D08  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4297   002D0A  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4298   002D0C  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4299   002D0E                     l4254:
  4300   002D0E  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4301   002D10  EF8C  F016         	goto	u3611
  4302   002D14  EF8E  F016         	goto	u3610
  4303   002D18                     u3611:
  4304   002D18  EF96  F016         	goto	l1403
  4305   002D1C                     u3610:
  4306   002D1C  0E02               	movlw	2
  4307   002D1E  600B               	cpfslt	___xxtofl@exp^0,c
  4308   002D20  EF94  F016         	goto	u3621
  4309   002D24  EF96  F016         	goto	u3620
  4310   002D28                     u3621:
  4311   002D28  EF81  F016         	goto	l4252
  4312   002D2C                     u3620:
  4313   002D2C                     l1403:
  4314   002D2C  B00B               	btfsc	___xxtofl@exp^0,0,c
  4315   002D2E  EF9B  F016         	goto	u3631
  4316   002D32  EF9D  F016         	goto	u3630
  4317   002D36                     u3631:
  4318   002D36  EF9E  F016         	goto	l4260
  4319   002D3A                     u3630:
  4320   002D3A  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  4321   002D3C                     l4260:
  4322   002D3C  90D8               	bcf	status,0,c
  4323   002D3E  320B               	rrcf	___xxtofl@exp^0,f,c
  4324   002D40  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  4325   002D44  6A07               	clrf	(??___xxtofl+1)^0,c
  4326   002D46  6A08               	clrf	(??___xxtofl+2)^0,c
  4327   002D48  6A09               	clrf	(??___xxtofl+3)^0,c
  4328   002D4A  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  4329   002D4E  6A08               	clrf	(??___xxtofl+2)^0,c
  4330   002D50  6A07               	clrf	(??___xxtofl+1)^0,c
  4331   002D52  6A06               	clrf	??___xxtofl^0,c
  4332   002D54  5006               	movf	??___xxtofl^0,w,c
  4333   002D56  120C               	iorwf	___xxtofl@arg^0,f,c
  4334   002D58  5007               	movf	(??___xxtofl+1)^0,w,c
  4335   002D5A  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4336   002D5C  5008               	movf	(??___xxtofl+2)^0,w,c
  4337   002D5E  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4338   002D60  5009               	movf	(??___xxtofl+3)^0,w,c
  4339   002D62  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4340   002D64  500A               	movf	___xxtofl@sign^0,w,c
  4341   002D66  B4D8               	btfsc	status,2,c
  4342   002D68  EFB8  F016         	goto	u3641
  4343   002D6C  EFBA  F016         	goto	u3640
  4344   002D70                     u3641:
  4345   002D70  EFC2  F016         	goto	l4270
  4346   002D74                     u3640:
  4347   002D74  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4348   002D76  EFC1  F016         	goto	u3650
  4349   002D7A  EFBF  F016         	goto	u3651
  4350   002D7E                     u3651:
  4351   002D7E  EFC2  F016         	goto	l4270
  4352   002D82                     u3650:
  4353   002D82  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  4354   002D84                     l4270:
  4355   002D84  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  4356   002D88  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  4357   002D8C  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  4358   002D90  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  4359   002D94                     l1392:
  4360   002D94  0012               	return		;funcret
  4361   002D96                     __end_of___xxtofl:
  4362                           	callstack 0
  4363                           
  4364 ;; *************** function ___fltol *****************
  4365 ;; Defined at:
  4366 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  f1              4   65[COMRAM] unsigned char 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  exp1            1   74[COMRAM] unsigned char 
  4371 ;;  sign1           1   73[COMRAM] unsigned char 
  4372 ;; Return value:  Size  Location     Type
  4373 ;;                  4   65[COMRAM] long 
  4374 ;; Registers used:
  4375 ;;		wreg, status,2, status,0
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4381 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4382 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4383 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4384 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4385 ;;Total ram usage:       10 bytes
  4386 ;; Hardware stack levels used: 1
  4387 ;; Hardware stack levels required when called: 1
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_convert_rgb2hue
  4392 ;;		_main
  4393 ;;		_fullSpeedAhead
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397                           	psect	text12
  4398   00356A                     __ptext12:
  4399                           	callstack 0
  4400   00356A                     ___fltol:
  4401                           	callstack 26
  4402   00356A  3444               	rlcf	(___fltol@f1+2)^0,w,c
  4403   00356C  3445               	rlcf	(___fltol@f1+3)^0,w,c
  4404   00356E  6E4B               	movwf	___fltol@exp1^0,c
  4405   003570  504B               	movf	___fltol@exp1^0,w,c
  4406   003572  A4D8               	btfss	status,2,c
  4407   003574  EFBE  F01A         	goto	u3491
  4408   003578  EFC0  F01A         	goto	u3490
  4409   00357C                     u3491:
  4410   00357C  EFCA  F01A         	goto	l4190
  4411   003580                     u3490:
  4412   003580                     l4186:
  4413   003580  0E00               	movlw	0
  4414   003582  6E42               	movwf	?___fltol^0,c
  4415   003584  0E00               	movlw	0
  4416   003586  6E43               	movwf	(?___fltol+1)^0,c
  4417   003588  0E00               	movlw	0
  4418   00358A  6E44               	movwf	(?___fltol+2)^0,c
  4419   00358C  0E00               	movlw	0
  4420   00358E  6E45               	movwf	(?___fltol+3)^0,c
  4421   003590  EF37  F01B         	goto	l1031
  4422   003594                     l4190:
  4423   003594  C042  F046         	movff	___fltol@f1,??___fltol
  4424   003598  C043  F047         	movff	___fltol@f1+1,??___fltol+1
  4425   00359C  C044  F048         	movff	___fltol@f1+2,??___fltol+2
  4426   0035A0  C045  F049         	movff	___fltol@f1+3,??___fltol+3
  4427   0035A4  0E20               	movlw	32
  4428   0035A6  EFDA  F01A         	goto	u3500
  4429   0035AA                     u3505:
  4430   0035AA  90D8               	bcf	status,0,c
  4431   0035AC  3249               	rrcf	(??___fltol+3)^0,f,c
  4432   0035AE  3248               	rrcf	(??___fltol+2)^0,f,c
  4433   0035B0  3247               	rrcf	(??___fltol+1)^0,f,c
  4434   0035B2  3246               	rrcf	??___fltol^0,f,c
  4435   0035B4                     u3500:
  4436   0035B4  2EE8               	decfsz	wreg,f,c
  4437   0035B6  EFD5  F01A         	goto	u3505
  4438   0035BA  5046               	movf	??___fltol^0,w,c
  4439   0035BC  6E4A               	movwf	___fltol@sign1^0,c
  4440   0035BE  8E44               	bsf	(___fltol@f1+2)^0,7,c
  4441   0035C0  0EFF               	movlw	255
  4442   0035C2  1642               	andwf	___fltol@f1^0,f,c
  4443   0035C4  0EFF               	movlw	255
  4444   0035C6  1643               	andwf	(___fltol@f1+1)^0,f,c
  4445   0035C8  0EFF               	movlw	255
  4446   0035CA  1644               	andwf	(___fltol@f1+2)^0,f,c
  4447   0035CC  0E00               	movlw	0
  4448   0035CE  1645               	andwf	(___fltol@f1+3)^0,f,c
  4449   0035D0  0E96               	movlw	150
  4450   0035D2  5E4B               	subwf	___fltol@exp1^0,f,c
  4451   0035D4  BE4B               	btfsc	___fltol@exp1^0,7,c
  4452   0035D6  EFF1  F01A         	goto	u3510
  4453   0035DA  EFEF  F01A         	goto	u3511
  4454   0035DE                     u3511:
  4455   0035DE  EF07  F01B         	goto	l4210
  4456   0035E2                     u3510:
  4457   0035E2  504B               	movf	___fltol@exp1^0,w,c
  4458   0035E4  0A80               	xorlw	128
  4459   0035E6  0F97               	addlw	151
  4460   0035E8  B0D8               	btfsc	status,0,c
  4461   0035EA  EFF9  F01A         	goto	u3521
  4462   0035EE  EFFB  F01A         	goto	u3520
  4463   0035F2                     u3521:
  4464   0035F2  EFFD  F01A         	goto	l4206
  4465   0035F6                     u3520:
  4466   0035F6  EFC0  F01A         	goto	l4186
  4467   0035FA                     l4206:
  4468   0035FA  90D8               	bcf	status,0,c
  4469   0035FC  3245               	rrcf	(___fltol@f1+3)^0,f,c
  4470   0035FE  3244               	rrcf	(___fltol@f1+2)^0,f,c
  4471   003600  3243               	rrcf	(___fltol@f1+1)^0,f,c
  4472   003602  3242               	rrcf	___fltol@f1^0,f,c
  4473   003604  3E4B               	incfsz	___fltol@exp1^0,f,c
  4474   003606  EFFD  F01A         	goto	l4206
  4475   00360A  EF1F  F01B         	goto	l4220
  4476   00360E                     l4210:
  4477   00360E  0E1F               	movlw	31
  4478   003610  644B               	cpfsgt	___fltol@exp1^0,c
  4479   003612  EF0D  F01B         	goto	u3531
  4480   003616  EF0F  F01B         	goto	u3530
  4481   00361A                     u3531:
  4482   00361A  EF17  F01B         	goto	l4218
  4483   00361E                     u3530:
  4484   00361E  EFC0  F01A         	goto	l4186
  4485   003622                     l4216:
  4486   003622  90D8               	bcf	status,0,c
  4487   003624  3642               	rlcf	___fltol@f1^0,f,c
  4488   003626  3643               	rlcf	(___fltol@f1+1)^0,f,c
  4489   003628  3644               	rlcf	(___fltol@f1+2)^0,f,c
  4490   00362A  3645               	rlcf	(___fltol@f1+3)^0,f,c
  4491   00362C  064B               	decf	___fltol@exp1^0,f,c
  4492   00362E                     l4218:
  4493   00362E  504B               	movf	___fltol@exp1^0,w,c
  4494   003630  A4D8               	btfss	status,2,c
  4495   003632  EF1D  F01B         	goto	u3541
  4496   003636  EF1F  F01B         	goto	u3540
  4497   00363A                     u3541:
  4498   00363A  EF11  F01B         	goto	l4216
  4499   00363E                     u3540:
  4500   00363E                     l4220:
  4501   00363E  504A               	movf	___fltol@sign1^0,w,c
  4502   003640  B4D8               	btfsc	status,2,c
  4503   003642  EF25  F01B         	goto	u3551
  4504   003646  EF27  F01B         	goto	u3550
  4505   00364A                     u3551:
  4506   00364A  EF2F  F01B         	goto	l4224
  4507   00364E                     u3550:
  4508   00364E  1E45               	comf	(___fltol@f1+3)^0,f,c
  4509   003650  1E44               	comf	(___fltol@f1+2)^0,f,c
  4510   003652  1E43               	comf	(___fltol@f1+1)^0,f,c
  4511   003654  6C42               	negf	___fltol@f1^0,c
  4512   003656  0E00               	movlw	0
  4513   003658  2243               	addwfc	(___fltol@f1+1)^0,f,c
  4514   00365A  2244               	addwfc	(___fltol@f1+2)^0,f,c
  4515   00365C  2245               	addwfc	(___fltol@f1+3)^0,f,c
  4516   00365E                     l4224:
  4517   00365E  C042  F042         	movff	___fltol@f1,?___fltol
  4518   003662  C043  F043         	movff	___fltol@f1+1,?___fltol+1
  4519   003666  C044  F044         	movff	___fltol@f1+2,?___fltol+2
  4520   00366A  C045  F045         	movff	___fltol@f1+3,?___fltol+3
  4521   00366E                     l1031:
  4522   00366E  0012               	return		;funcret
  4523   003670                     __end_of___fltol:
  4524                           	callstack 0
  4525                           
  4526 ;; *************** function ___flsub *****************
  4527 ;; Defined at:
  4528 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  b               4   17[COMRAM] long 
  4531 ;;  a               4   21[COMRAM] long 
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;		None
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  4   17[COMRAM] long 
  4536 ;; Registers used:
  4537 ;;		wreg, status,2, status,0, cstack
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4543 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4546 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4547 ;;Total ram usage:        8 bytes
  4548 ;; Hardware stack levels used: 1
  4549 ;; Hardware stack levels required when called: 2
  4550 ;; This function calls:
  4551 ;;		___fladd
  4552 ;; This function is called by:
  4553 ;;		_convert_rgb2hue
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           	psect	text13
  4558   0042CE                     __ptext13:
  4559                           	callstack 0
  4560   0042CE                     ___flsub:
  4561                           	callstack 26
  4562   0042CE  0E00               	movlw	0
  4563   0042D0  1A16               	xorwf	___flsub@a^0,f,c
  4564   0042D2  0E00               	movlw	0
  4565   0042D4  1A17               	xorwf	(___flsub@a+1)^0,f,c
  4566   0042D6  0E00               	movlw	0
  4567   0042D8  1A18               	xorwf	(___flsub@a+2)^0,f,c
  4568   0042DA  0E80               	movlw	128
  4569   0042DC  1A19               	xorwf	(___flsub@a+3)^0,f,c
  4570   0042DE  C012  F002         	movff	___flsub@b,___fladd@b
  4571   0042E2  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  4572   0042E6  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  4573   0042EA  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  4574   0042EE  C016  F006         	movff	___flsub@a,___fladd@a
  4575   0042F2  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  4576   0042F6  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  4577   0042FA  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  4578   0042FE  EC2C  F00B         	call	___fladd	;wreg free
  4579   004302  C002  F012         	movff	?___fladd,?___flsub
  4580   004306  C003  F013         	movff	?___fladd+1,?___flsub+1
  4581   00430A  C004  F014         	movff	?___fladd+2,?___flsub+2
  4582   00430E  C005  F015         	movff	?___fladd+3,?___flsub+3
  4583   004312  0012               	return		;funcret
  4584   004314                     __end_of___flsub:
  4585                           	callstack 0
  4586                           
  4587 ;; *************** function ___fladd *****************
  4588 ;; Defined at:
  4589 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;  b               4    1[COMRAM] long 
  4592 ;;  a               4    5[COMRAM] long 
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  grs             1   16[COMRAM] unsigned char 
  4595 ;;  bexp            1   15[COMRAM] unsigned char 
  4596 ;;  aexp            1   14[COMRAM] unsigned char 
  4597 ;;  signs           1   13[COMRAM] unsigned char 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  4    1[COMRAM] unsigned char 
  4600 ;; Registers used:
  4601 ;;		wreg, status,2, status,0
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4607 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4608 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4609 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4610 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4611 ;;Total ram usage:       16 bytes
  4612 ;; Hardware stack levels used: 1
  4613 ;; Hardware stack levels required when called: 1
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_convert_rgb2hue
  4618 ;;		___flsub
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text14
  4623   001658                     __ptext14:
  4624                           	callstack 0
  4625   001658                     ___fladd:
  4626                           	callstack 26
  4627   001658  5005               	movf	(___fladd@b+3)^0,w,c
  4628   00165A  0B80               	andlw	128
  4629   00165C  6E0E               	movwf	___fladd@signs^0,c
  4630   00165E  5005               	movf	(___fladd@b+3)^0,w,c
  4631   001660  2405               	addwf	(___fladd@b+3)^0,w,c
  4632   001662  6E10               	movwf	___fladd@bexp^0,c
  4633   001664  AE04               	btfss	(___fladd@b+2)^0,7,c
  4634   001666  EF37  F00B         	goto	u2911
  4635   00166A  EF39  F00B         	goto	u2910
  4636   00166E                     u2911:
  4637   00166E  EF3A  F00B         	goto	l3858
  4638   001672                     u2910:
  4639   001672  8010               	bsf	___fladd@bexp^0,0,c
  4640   001674                     l3858:
  4641   001674  5010               	movf	___fladd@bexp^0,w,c
  4642   001676  B4D8               	btfsc	status,2,c
  4643   001678  EF40  F00B         	goto	u2921
  4644   00167C  EF42  F00B         	goto	u2920
  4645   001680                     u2921:
  4646   001680  EF57  F00B         	goto	l3868
  4647   001684                     u2920:
  4648   001684  2810               	incf	___fladd@bexp^0,w,c
  4649   001686  A4D8               	btfss	status,2,c
  4650   001688  EF48  F00B         	goto	u2931
  4651   00168C  EF4A  F00B         	goto	u2930
  4652   001690                     u2931:
  4653   001690  EF52  F00B         	goto	l3864
  4654   001694                     u2930:
  4655   001694  0E00               	movlw	0
  4656   001696  6E02               	movwf	___fladd@b^0,c
  4657   001698  0E00               	movlw	0
  4658   00169A  6E03               	movwf	(___fladd@b+1)^0,c
  4659   00169C  0E00               	movlw	0
  4660   00169E  6E04               	movwf	(___fladd@b+2)^0,c
  4661   0016A0  0E00               	movlw	0
  4662   0016A2  6E05               	movwf	(___fladd@b+3)^0,c
  4663   0016A4                     l3864:
  4664   0016A4  8E04               	bsf	(___fladd@b+2)^0,7,c
  4665   0016A6  0E00               	movlw	0
  4666   0016A8  6E05               	movwf	(___fladd@b+3)^0,c
  4667   0016AA  EF5F  F00B         	goto	l3870
  4668   0016AE                     l3868:
  4669   0016AE  0E00               	movlw	0
  4670   0016B0  6E02               	movwf	___fladd@b^0,c
  4671   0016B2  0E00               	movlw	0
  4672   0016B4  6E03               	movwf	(___fladd@b+1)^0,c
  4673   0016B6  0E00               	movlw	0
  4674   0016B8  6E04               	movwf	(___fladd@b+2)^0,c
  4675   0016BA  0E00               	movlw	0
  4676   0016BC  6E05               	movwf	(___fladd@b+3)^0,c
  4677   0016BE                     l3870:
  4678   0016BE  5009               	movf	(___fladd@a+3)^0,w,c
  4679   0016C0  0B80               	andlw	128
  4680   0016C2  6E0F               	movwf	___fladd@aexp^0,c
  4681   0016C4  500E               	movf	___fladd@signs^0,w,c
  4682   0016C6  180F               	xorwf	___fladd@aexp^0,w,c
  4683   0016C8  B4D8               	btfsc	status,2,c
  4684   0016CA  EF69  F00B         	goto	u2941
  4685   0016CE  EF6B  F00B         	goto	u2940
  4686   0016D2                     u2941:
  4687   0016D2  EF6C  F00B         	goto	l3876
  4688   0016D6                     u2940:
  4689   0016D6  8C0E               	bsf	___fladd@signs^0,6,c
  4690   0016D8                     l3876:
  4691   0016D8  5009               	movf	(___fladd@a+3)^0,w,c
  4692   0016DA  2409               	addwf	(___fladd@a+3)^0,w,c
  4693   0016DC  6E0F               	movwf	___fladd@aexp^0,c
  4694   0016DE  AE08               	btfss	(___fladd@a+2)^0,7,c
  4695   0016E0  EF74  F00B         	goto	u2951
  4696   0016E4  EF76  F00B         	goto	u2950
  4697   0016E8                     u2951:
  4698   0016E8  EF77  F00B         	goto	l3882
  4699   0016EC                     u2950:
  4700   0016EC  800F               	bsf	___fladd@aexp^0,0,c
  4701   0016EE                     l3882:
  4702   0016EE  500F               	movf	___fladd@aexp^0,w,c
  4703   0016F0  B4D8               	btfsc	status,2,c
  4704   0016F2  EF7D  F00B         	goto	u2961
  4705   0016F6  EF7F  F00B         	goto	u2960
  4706   0016FA                     u2961:
  4707   0016FA  EF94  F00B         	goto	l3892
  4708   0016FE                     u2960:
  4709   0016FE  280F               	incf	___fladd@aexp^0,w,c
  4710   001700  A4D8               	btfss	status,2,c
  4711   001702  EF85  F00B         	goto	u2971
  4712   001706  EF87  F00B         	goto	u2970
  4713   00170A                     u2971:
  4714   00170A  EF8F  F00B         	goto	l3888
  4715   00170E                     u2970:
  4716   00170E  0E00               	movlw	0
  4717   001710  6E06               	movwf	___fladd@a^0,c
  4718   001712  0E00               	movlw	0
  4719   001714  6E07               	movwf	(___fladd@a+1)^0,c
  4720   001716  0E00               	movlw	0
  4721   001718  6E08               	movwf	(___fladd@a+2)^0,c
  4722   00171A  0E00               	movlw	0
  4723   00171C  6E09               	movwf	(___fladd@a+3)^0,c
  4724   00171E                     l3888:
  4725   00171E  8E08               	bsf	(___fladd@a+2)^0,7,c
  4726   001720  0E00               	movlw	0
  4727   001722  6E09               	movwf	(___fladd@a+3)^0,c
  4728   001724  EF9C  F00B         	goto	l3894
  4729   001728                     l3892:
  4730   001728  0E00               	movlw	0
  4731   00172A  6E06               	movwf	___fladd@a^0,c
  4732   00172C  0E00               	movlw	0
  4733   00172E  6E07               	movwf	(___fladd@a+1)^0,c
  4734   001730  0E00               	movlw	0
  4735   001732  6E08               	movwf	(___fladd@a+2)^0,c
  4736   001734  0E00               	movlw	0
  4737   001736  6E09               	movwf	(___fladd@a+3)^0,c
  4738   001738                     l3894:
  4739   001738  5010               	movf	___fladd@bexp^0,w,c
  4740   00173A  5C0F               	subwf	___fladd@aexp^0,w,c
  4741   00173C  B0D8               	btfsc	status,0,c
  4742   00173E  EFA3  F00B         	goto	u2981
  4743   001742  EFA5  F00B         	goto	u2980
  4744   001746                     u2981:
  4745   001746  EFCC  F00B         	goto	l3930
  4746   00174A                     u2980:
  4747   00174A  AC0E               	btfss	___fladd@signs^0,6,c
  4748   00174C  EFAA  F00B         	goto	u2991
  4749   001750  EFAC  F00B         	goto	u2990
  4750   001754                     u2991:
  4751   001754  EFAE  F00B         	goto	l3900
  4752   001758                     u2990:
  4753   001758  0E80               	movlw	128
  4754   00175A  1A0E               	xorwf	___fladd@signs^0,f,c
  4755   00175C                     l3900:
  4756   00175C  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4757   001760  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4758   001764  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4759   001768  C002  F011         	movff	___fladd@b,___fladd@grs
  4760   00176C  C006  F002         	movff	___fladd@a,___fladd@b
  4761   001770  C011  F006         	movff	___fladd@grs,___fladd@a
  4762   001774  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4763   001778  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4764   00177C  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4765   001780  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4766   001784  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4767   001788  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4768   00178C  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4769   001790  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4770   001794  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4771   001798                     l3930:
  4772   001798  0E00               	movlw	0
  4773   00179A  6E11               	movwf	___fladd@grs^0,c
  4774   00179C  5010               	movf	___fladd@bexp^0,w,c
  4775   00179E  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4776   0017A2  6A0B               	clrf	(??___fladd+1)^0,c
  4777   0017A4  5E0A               	subwf	??___fladd^0,f,c
  4778   0017A6  0E00               	movlw	0
  4779   0017A8  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4780   0017AA  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4781   0017AC  EFE1  F00B         	goto	u3001
  4782   0017B0  500B               	movf	(??___fladd+1)^0,w,c
  4783   0017B2  E109               	bnz	u3000
  4784   0017B4  0E1A               	movlw	26
  4785   0017B6  5C0A               	subwf	??___fladd^0,w,c
  4786   0017B8  A0D8               	btfss	status,0,c
  4787   0017BA  EFE1  F00B         	goto	u3001
  4788   0017BE  EFE3  F00B         	goto	u3000
  4789   0017C2                     u3001:
  4790   0017C2  EF1A  F00C         	goto	l1263
  4791   0017C6                     u3000:
  4792   0017C6  5002               	movf	___fladd@b^0,w,c
  4793   0017C8  1003               	iorwf	(___fladd@b+1)^0,w,c
  4794   0017CA  1004               	iorwf	(___fladd@b+2)^0,w,c
  4795   0017CC  1005               	iorwf	(___fladd@b+3)^0,w,c
  4796   0017CE  A4D8               	btfss	status,2,c
  4797   0017D0  EFEC  F00B         	goto	u3011
  4798   0017D4  EFEF  F00B         	goto	u3010
  4799   0017D8                     u3011:
  4800   0017D8  0E01               	movlw	1
  4801   0017DA  EFF0  F00B         	goto	u3020
  4802   0017DE                     u3010:
  4803   0017DE  0E00               	movlw	0
  4804   0017E0                     u3020:
  4805   0017E0  6E11               	movwf	___fladd@grs^0,c
  4806   0017E2  0E00               	movlw	0
  4807   0017E4  6E02               	movwf	___fladd@b^0,c
  4808   0017E6  0E00               	movlw	0
  4809   0017E8  6E03               	movwf	(___fladd@b+1)^0,c
  4810   0017EA  0E00               	movlw	0
  4811   0017EC  6E04               	movwf	(___fladd@b+2)^0,c
  4812   0017EE  0E00               	movlw	0
  4813   0017F0  6E05               	movwf	(___fladd@b+3)^0,c
  4814   0017F2  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4815   0017F6  EF23  F00C         	goto	l1262
  4816   0017FA                     l1264:
  4817   0017FA  A011               	btfss	___fladd@grs^0,0,c
  4818   0017FC  EF02  F00C         	goto	u3031
  4819   001800  EF04  F00C         	goto	u3030
  4820   001804                     u3031:
  4821   001804  EF0A  F00C         	goto	l3942
  4822   001808                     u3030:
  4823   001808  90D8               	bcf	status,0,c
  4824   00180A  3011               	rrcf	___fladd@grs^0,w,c
  4825   00180C  0901               	iorlw	1
  4826   00180E  6E11               	movwf	___fladd@grs^0,c
  4827   001810  EF0C  F00C         	goto	l3944
  4828   001814                     l3942:
  4829   001814  90D8               	bcf	status,0,c
  4830   001816  3211               	rrcf	___fladd@grs^0,f,c
  4831   001818                     l3944:
  4832   001818  A002               	btfss	___fladd@b^0,0,c
  4833   00181A  EF11  F00C         	goto	u3041
  4834   00181E  EF13  F00C         	goto	u3040
  4835   001822                     u3041:
  4836   001822  EF14  F00C         	goto	l3948
  4837   001826                     u3040:
  4838   001826  8E11               	bsf	___fladd@grs^0,7,c
  4839   001828                     l3948:
  4840   001828  3405               	rlcf	(___fladd@b+3)^0,w,c
  4841   00182A  3205               	rrcf	(___fladd@b+3)^0,f,c
  4842   00182C  3204               	rrcf	(___fladd@b+2)^0,f,c
  4843   00182E  3203               	rrcf	(___fladd@b+1)^0,f,c
  4844   001830  3202               	rrcf	___fladd@b^0,f,c
  4845   001832  2A10               	incf	___fladd@bexp^0,f,c
  4846   001834                     l1263:
  4847   001834  500F               	movf	___fladd@aexp^0,w,c
  4848   001836  5C10               	subwf	___fladd@bexp^0,w,c
  4849   001838  A0D8               	btfss	status,0,c
  4850   00183A  EF21  F00C         	goto	u3051
  4851   00183E  EF23  F00C         	goto	u3050
  4852   001842                     u3051:
  4853   001842  EFFD  F00B         	goto	l1264
  4854   001846                     u3050:
  4855   001846                     l1262:
  4856   001846  BC0E               	btfsc	___fladd@signs^0,6,c
  4857   001848  EF28  F00C         	goto	u3061
  4858   00184C  EF2A  F00C         	goto	u3060
  4859   001850                     u3061:
  4860   001850  EF6A  F00C         	goto	l3976
  4861   001854                     u3060:
  4862   001854  5010               	movf	___fladd@bexp^0,w,c
  4863   001856  A4D8               	btfss	status,2,c
  4864   001858  EF30  F00C         	goto	u3071
  4865   00185C  EF32  F00C         	goto	u3070
  4866   001860                     u3071:
  4867   001860  EF3C  F00C         	goto	l3958
  4868   001864                     u3070:
  4869   001864  0E00               	movlw	0
  4870   001866  6E02               	movwf	?___fladd^0,c
  4871   001868  0E00               	movlw	0
  4872   00186A  6E03               	movwf	(?___fladd+1)^0,c
  4873   00186C  0E00               	movlw	0
  4874   00186E  6E04               	movwf	(?___fladd+2)^0,c
  4875   001870  0E00               	movlw	0
  4876   001872  6E05               	movwf	(?___fladd+3)^0,c
  4877   001874  EF8B  F00D         	goto	l1271
  4878   001878                     l3958:
  4879   001878  5006               	movf	___fladd@a^0,w,c
  4880   00187A  2602               	addwf	___fladd@b^0,f,c
  4881   00187C  5007               	movf	(___fladd@a+1)^0,w,c
  4882   00187E  2203               	addwfc	(___fladd@b+1)^0,f,c
  4883   001880  5008               	movf	(___fladd@a+2)^0,w,c
  4884   001882  2204               	addwfc	(___fladd@b+2)^0,f,c
  4885   001884  5009               	movf	(___fladd@a+3)^0,w,c
  4886   001886  2205               	addwfc	(___fladd@b+3)^0,f,c
  4887   001888  A005               	btfss	(___fladd@b+3)^0,0,c
  4888   00188A  EF49  F00C         	goto	u3081
  4889   00188E  EF4B  F00C         	goto	u3080
  4890   001892                     u3081:
  4891   001892  EFF7  F00C         	goto	l4012
  4892   001896                     u3080:
  4893   001896  A011               	btfss	___fladd@grs^0,0,c
  4894   001898  EF50  F00C         	goto	u3091
  4895   00189C  EF52  F00C         	goto	u3090
  4896   0018A0                     u3091:
  4897   0018A0  EF58  F00C         	goto	l3966
  4898   0018A4                     u3090:
  4899   0018A4  90D8               	bcf	status,0,c
  4900   0018A6  3011               	rrcf	___fladd@grs^0,w,c
  4901   0018A8  0901               	iorlw	1
  4902   0018AA  6E11               	movwf	___fladd@grs^0,c
  4903   0018AC  EF5A  F00C         	goto	l3968
  4904   0018B0                     l3966:
  4905   0018B0  90D8               	bcf	status,0,c
  4906   0018B2  3211               	rrcf	___fladd@grs^0,f,c
  4907   0018B4                     l3968:
  4908   0018B4  A002               	btfss	___fladd@b^0,0,c
  4909   0018B6  EF5F  F00C         	goto	u3101
  4910   0018BA  EF61  F00C         	goto	u3100
  4911   0018BE                     u3101:
  4912   0018BE  EF62  F00C         	goto	l3972
  4913   0018C2                     u3100:
  4914   0018C2  8E11               	bsf	___fladd@grs^0,7,c
  4915   0018C4                     l3972:
  4916   0018C4  3405               	rlcf	(___fladd@b+3)^0,w,c
  4917   0018C6  3205               	rrcf	(___fladd@b+3)^0,f,c
  4918   0018C8  3204               	rrcf	(___fladd@b+2)^0,f,c
  4919   0018CA  3203               	rrcf	(___fladd@b+1)^0,f,c
  4920   0018CC  3202               	rrcf	___fladd@b^0,f,c
  4921   0018CE  2A10               	incf	___fladd@bexp^0,f,c
  4922   0018D0  EFF7  F00C         	goto	l4012
  4923   0018D4                     l3976:
  4924   0018D4  5006               	movf	___fladd@a^0,w,c
  4925   0018D6  5C02               	subwf	___fladd@b^0,w,c
  4926   0018D8  5007               	movf	(___fladd@a+1)^0,w,c
  4927   0018DA  5803               	subwfb	(___fladd@b+1)^0,w,c
  4928   0018DC  5008               	movf	(___fladd@a+2)^0,w,c
  4929   0018DE  5804               	subwfb	(___fladd@b+2)^0,w,c
  4930   0018E0  5005               	movf	(___fladd@b+3)^0,w,c
  4931   0018E2  0A80               	xorlw	128
  4932   0018E4  6E0A               	movwf	??___fladd^0,c
  4933   0018E6  5009               	movf	(___fladd@a+3)^0,w,c
  4934   0018E8  0A80               	xorlw	128
  4935   0018EA  580A               	subwfb	??___fladd^0,w,c
  4936   0018EC  B0D8               	btfsc	status,0,c
  4937   0018EE  EF7B  F00C         	goto	u3111
  4938   0018F2  EF7D  F00C         	goto	u3110
  4939   0018F6                     u3111:
  4940   0018F6  EFA8  F00C         	goto	l3986
  4941   0018FA                     u3110:
  4942   0018FA  5002               	movf	___fladd@b^0,w,c
  4943   0018FC  5C06               	subwf	___fladd@a^0,w,c
  4944   0018FE  6E0A               	movwf	??___fladd^0,c
  4945   001900  5003               	movf	(___fladd@b+1)^0,w,c
  4946   001902  5807               	subwfb	(___fladd@a+1)^0,w,c
  4947   001904  6E0B               	movwf	(??___fladd+1)^0,c
  4948   001906  5004               	movf	(___fladd@b+2)^0,w,c
  4949   001908  5808               	subwfb	(___fladd@a+2)^0,w,c
  4950   00190A  6E0C               	movwf	(??___fladd+2)^0,c
  4951   00190C  5005               	movf	(___fladd@b+3)^0,w,c
  4952   00190E  5809               	subwfb	(___fladd@a+3)^0,w,c
  4953   001910  6E0D               	movwf	(??___fladd+3)^0,c
  4954   001912  0EFF               	movlw	255
  4955   001914  240A               	addwf	??___fladd^0,w,c
  4956   001916  6E02               	movwf	___fladd@b^0,c
  4957   001918  0EFF               	movlw	255
  4958   00191A  200B               	addwfc	(??___fladd+1)^0,w,c
  4959   00191C  6E03               	movwf	(___fladd@b+1)^0,c
  4960   00191E  0EFF               	movlw	255
  4961   001920  200C               	addwfc	(??___fladd+2)^0,w,c
  4962   001922  6E04               	movwf	(___fladd@b+2)^0,c
  4963   001924  0EFF               	movlw	255
  4964   001926  200D               	addwfc	(??___fladd+3)^0,w,c
  4965   001928  6E05               	movwf	(___fladd@b+3)^0,c
  4966   00192A  0E80               	movlw	128
  4967   00192C  1A0E               	xorwf	___fladd@signs^0,f,c
  4968   00192E  6C11               	negf	___fladd@grs^0,c
  4969   001930  5011               	movf	___fladd@grs^0,w,c
  4970   001932  A4D8               	btfss	status,2,c
  4971   001934  EF9E  F00C         	goto	u3121
  4972   001938  EFA0  F00C         	goto	u3120
  4973   00193C                     u3121:
  4974   00193C  EFB0  F00C         	goto	l1279
  4975   001940                     u3120:
  4976   001940  0E01               	movlw	1
  4977   001942  2602               	addwf	___fladd@b^0,f,c
  4978   001944  0E00               	movlw	0
  4979   001946  2203               	addwfc	(___fladd@b+1)^0,f,c
  4980   001948  2204               	addwfc	(___fladd@b+2)^0,f,c
  4981   00194A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4982   00194C  EFB0  F00C         	goto	l1279
  4983   001950                     l3986:
  4984   001950  5006               	movf	___fladd@a^0,w,c
  4985   001952  5E02               	subwf	___fladd@b^0,f,c
  4986   001954  5007               	movf	(___fladd@a+1)^0,w,c
  4987   001956  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4988   001958  5008               	movf	(___fladd@a+2)^0,w,c
  4989   00195A  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4990   00195C  5009               	movf	(___fladd@a+3)^0,w,c
  4991   00195E  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4992   001960                     l1279:
  4993   001960  5002               	movf	___fladd@b^0,w,c
  4994   001962  1003               	iorwf	(___fladd@b+1)^0,w,c
  4995   001964  1004               	iorwf	(___fladd@b+2)^0,w,c
  4996   001966  1005               	iorwf	(___fladd@b+3)^0,w,c
  4997   001968  A4D8               	btfss	status,2,c
  4998   00196A  EFB9  F00C         	goto	u3131
  4999   00196E  EFBB  F00C         	goto	u3130
  5000   001972                     u3131:
  5001   001972  EFF0  F00C         	goto	l4010
  5002   001976                     u3130:
  5003   001976  5011               	movf	___fladd@grs^0,w,c
  5004   001978  A4D8               	btfss	status,2,c
  5005   00197A  EFC1  F00C         	goto	u3141
  5006   00197E  EFC3  F00C         	goto	u3140
  5007   001982                     u3141:
  5008   001982  EFF0  F00C         	goto	l4010
  5009   001986                     u3140:
  5010   001986  0E00               	movlw	0
  5011   001988  6E02               	movwf	?___fladd^0,c
  5012   00198A  0E00               	movlw	0
  5013   00198C  6E03               	movwf	(?___fladd+1)^0,c
  5014   00198E  0E00               	movlw	0
  5015   001990  6E04               	movwf	(?___fladd+2)^0,c
  5016   001992  0E00               	movlw	0
  5017   001994  6E05               	movwf	(?___fladd+3)^0,c
  5018   001996  EF8B  F00D         	goto	l1271
  5019   00199A                     l3994:
  5020   00199A  90D8               	bcf	status,0,c
  5021   00199C  3602               	rlcf	___fladd@b^0,f,c
  5022   00199E  3603               	rlcf	(___fladd@b+1)^0,f,c
  5023   0019A0  3604               	rlcf	(___fladd@b+2)^0,f,c
  5024   0019A2  3605               	rlcf	(___fladd@b+3)^0,f,c
  5025   0019A4  AE11               	btfss	___fladd@grs^0,7,c
  5026   0019A6  EFD7  F00C         	goto	u3151
  5027   0019AA  EFD9  F00C         	goto	u3150
  5028   0019AE                     u3151:
  5029   0019AE  EFDA  F00C         	goto	l4000
  5030   0019B2                     u3150:
  5031   0019B2  8002               	bsf	___fladd@b^0,0,c
  5032   0019B4                     l4000:
  5033   0019B4  A011               	btfss	___fladd@grs^0,0,c
  5034   0019B6  EFDF  F00C         	goto	u3161
  5035   0019BA  EFE1  F00C         	goto	u3160
  5036   0019BE                     u3161:
  5037   0019BE  EFE5  F00C         	goto	l4004
  5038   0019C2                     u3160:
  5039   0019C2  80D8               	bsf	status,0,c
  5040   0019C4  3611               	rlcf	___fladd@grs^0,f,c
  5041   0019C6  EFE7  F00C         	goto	l4006
  5042   0019CA                     l4004:
  5043   0019CA  90D8               	bcf	status,0,c
  5044   0019CC  3611               	rlcf	___fladd@grs^0,f,c
  5045   0019CE                     l4006:
  5046   0019CE  5010               	movf	___fladd@bexp^0,w,c
  5047   0019D0  B4D8               	btfsc	status,2,c
  5048   0019D2  EFED  F00C         	goto	u3171
  5049   0019D6  EFEF  F00C         	goto	u3170
  5050   0019DA                     u3171:
  5051   0019DA  EFF0  F00C         	goto	l4010
  5052   0019DE                     u3170:
  5053   0019DE  0610               	decf	___fladd@bexp^0,f,c
  5054   0019E0                     l4010:
  5055   0019E0  AE04               	btfss	(___fladd@b+2)^0,7,c
  5056   0019E2  EFF5  F00C         	goto	u3181
  5057   0019E6  EFF7  F00C         	goto	u3180
  5058   0019EA                     u3181:
  5059   0019EA  EFCD  F00C         	goto	l3994
  5060   0019EE                     u3180:
  5061   0019EE                     l4012:
  5062   0019EE  0E00               	movlw	0
  5063   0019F0  6E0F               	movwf	___fladd@aexp^0,c
  5064   0019F2  AE11               	btfss	___fladd@grs^0,7,c
  5065   0019F4  EFFE  F00C         	goto	u3191
  5066   0019F8  EF00  F00D         	goto	u3190
  5067   0019FC                     u3191:
  5068   0019FC  EF18  F00D         	goto	l1288
  5069   001A00                     u3190:
  5070   001A00  C011  F00A         	movff	___fladd@grs,??___fladd
  5071   001A04  0E7F               	movlw	127
  5072   001A06  160A               	andwf	??___fladd^0,f,c
  5073   001A08  B4D8               	btfsc	status,2,c
  5074   001A0A  EF09  F00D         	goto	u3201
  5075   001A0E  EF0B  F00D         	goto	u3200
  5076   001A12                     u3201:
  5077   001A12  EF0F  F00D         	goto	l1289
  5078   001A16                     u3200:
  5079   001A16                     l4018:
  5080   001A16  0E01               	movlw	1
  5081   001A18  6E0F               	movwf	___fladd@aexp^0,c
  5082   001A1A  EF18  F00D         	goto	l1288
  5083   001A1E                     l1289:
  5084   001A1E  A002               	btfss	___fladd@b^0,0,c
  5085   001A20  EF14  F00D         	goto	u3211
  5086   001A24  EF16  F00D         	goto	u3210
  5087   001A28                     u3211:
  5088   001A28  EF18  F00D         	goto	l1288
  5089   001A2C                     u3210:
  5090   001A2C  EF0B  F00D         	goto	l4018
  5091   001A30                     l1288:
  5092   001A30  500F               	movf	___fladd@aexp^0,w,c
  5093   001A32  B4D8               	btfsc	status,2,c
  5094   001A34  EF1E  F00D         	goto	u3221
  5095   001A38  EF20  F00D         	goto	u3220
  5096   001A3C                     u3221:
  5097   001A3C  EF4B  F00D         	goto	l4030
  5098   001A40                     u3220:
  5099   001A40  0E01               	movlw	1
  5100   001A42  2602               	addwf	___fladd@b^0,f,c
  5101   001A44  0E00               	movlw	0
  5102   001A46  2203               	addwfc	(___fladd@b+1)^0,f,c
  5103   001A48  2204               	addwfc	(___fladd@b+2)^0,f,c
  5104   001A4A  2205               	addwfc	(___fladd@b+3)^0,f,c
  5105   001A4C  A005               	btfss	(___fladd@b+3)^0,0,c
  5106   001A4E  EF2B  F00D         	goto	u3231
  5107   001A52  EF2D  F00D         	goto	u3230
  5108   001A56                     u3231:
  5109   001A56  EF4B  F00D         	goto	l4030
  5110   001A5A                     u3230:
  5111   001A5A  C002  F00A         	movff	___fladd@b,??___fladd
  5112   001A5E  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  5113   001A62  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  5114   001A66  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  5115   001A6A  340D               	rlcf	(??___fladd+3)^0,w,c
  5116   001A6C  320D               	rrcf	(??___fladd+3)^0,f,c
  5117   001A6E  320C               	rrcf	(??___fladd+2)^0,f,c
  5118   001A70  320B               	rrcf	(??___fladd+1)^0,f,c
  5119   001A72  320A               	rrcf	??___fladd^0,f,c
  5120   001A74  C00A  F002         	movff	??___fladd,___fladd@b
  5121   001A78  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  5122   001A7C  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  5123   001A80  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  5124   001A84  2810               	incf	___fladd@bexp^0,w,c
  5125   001A86  B4D8               	btfsc	status,2,c
  5126   001A88  EF48  F00D         	goto	u3241
  5127   001A8C  EF4A  F00D         	goto	u3240
  5128   001A90                     u3241:
  5129   001A90  EF4B  F00D         	goto	l4030
  5130   001A94                     u3240:
  5131   001A94  2A10               	incf	___fladd@bexp^0,f,c
  5132   001A96                     l4030:
  5133   001A96  2810               	incf	___fladd@bexp^0,w,c
  5134   001A98  B4D8               	btfsc	status,2,c
  5135   001A9A  EF51  F00D         	goto	u3251
  5136   001A9E  EF53  F00D         	goto	u3250
  5137   001AA2                     u3251:
  5138   001AA2  EF5B  F00D         	goto	l4034
  5139   001AA6                     u3250:
  5140   001AA6  5010               	movf	___fladd@bexp^0,w,c
  5141   001AA8  A4D8               	btfss	status,2,c
  5142   001AAA  EF59  F00D         	goto	u3261
  5143   001AAE  EF5B  F00D         	goto	u3260
  5144   001AB2                     u3261:
  5145   001AB2  EF6D  F00D         	goto	l4038
  5146   001AB6                     u3260:
  5147   001AB6                     l4034:
  5148   001AB6  0E00               	movlw	0
  5149   001AB8  6E02               	movwf	___fladd@b^0,c
  5150   001ABA  0E00               	movlw	0
  5151   001ABC  6E03               	movwf	(___fladd@b+1)^0,c
  5152   001ABE  0E00               	movlw	0
  5153   001AC0  6E04               	movwf	(___fladd@b+2)^0,c
  5154   001AC2  0E00               	movlw	0
  5155   001AC4  6E05               	movwf	(___fladd@b+3)^0,c
  5156   001AC6  5010               	movf	___fladd@bexp^0,w,c
  5157   001AC8  A4D8               	btfss	status,2,c
  5158   001ACA  EF69  F00D         	goto	u3271
  5159   001ACE  EF6B  F00D         	goto	u3270
  5160   001AD2                     u3271:
  5161   001AD2  EF6D  F00D         	goto	l4038
  5162   001AD6                     u3270:
  5163   001AD6  0E00               	movlw	0
  5164   001AD8  6E0E               	movwf	___fladd@signs^0,c
  5165   001ADA                     l4038:
  5166   001ADA  A010               	btfss	___fladd@bexp^0,0,c
  5167   001ADC  EF72  F00D         	goto	u3281
  5168   001AE0  EF74  F00D         	goto	u3280
  5169   001AE4                     u3281:
  5170   001AE4  EF77  F00D         	goto	l4042
  5171   001AE8                     u3280:
  5172   001AE8  8E04               	bsf	(___fladd@b+2)^0,7,c
  5173   001AEA  EF78  F00D         	goto	l4044
  5174   001AEE                     l4042:
  5175   001AEE  9E04               	bcf	(___fladd@b+2)^0,7,c
  5176   001AF0                     l4044:
  5177   001AF0  90D8               	bcf	status,0,c
  5178   001AF2  3010               	rrcf	___fladd@bexp^0,w,c
  5179   001AF4  6E05               	movwf	(___fladd@b+3)^0,c
  5180   001AF6  AE0E               	btfss	___fladd@signs^0,7,c
  5181   001AF8  EF80  F00D         	goto	u3291
  5182   001AFC  EF82  F00D         	goto	u3290
  5183   001B00                     u3291:
  5184   001B00  EF83  F00D         	goto	l4050
  5185   001B04                     u3290:
  5186   001B04  8E05               	bsf	(___fladd@b+3)^0,7,c
  5187   001B06                     l4050:
  5188   001B06  C002  F002         	movff	___fladd@b,?___fladd
  5189   001B0A  C003  F003         	movff	___fladd@b+1,?___fladd+1
  5190   001B0E  C004  F004         	movff	___fladd@b+2,?___fladd+2
  5191   001B12  C005  F005         	movff	___fladd@b+3,?___fladd+3
  5192   001B16                     l1271:
  5193   001B16  0012               	return		;funcret
  5194   001B18                     __end_of___fladd:
  5195                           	callstack 0
  5196                           
  5197 ;; *************** function ___flmul *****************
  5198 ;; Defined at:
  5199 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;  b               4   15[COMRAM] unsigned char 
  5202 ;;  a               4   19[COMRAM] unsigned char 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  prod            4   34[COMRAM] struct .
  5205 ;;  grs             4   28[COMRAM] unsigned long 
  5206 ;;  temp            2   38[COMRAM] struct .
  5207 ;;  bexp            1   33[COMRAM] unsigned char 
  5208 ;;  aexp            1   32[COMRAM] unsigned char 
  5209 ;;  sign            1   27[COMRAM] unsigned char 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  4   15[COMRAM] unsigned char 
  5212 ;; Registers used:
  5213 ;;		wreg, status,2, status,0, prodl, prodh
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5219 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5220 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5221 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5222 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5223 ;;Total ram usage:       25 bytes
  5224 ;; Hardware stack levels used: 1
  5225 ;; Hardware stack levels required when called: 1
  5226 ;; This function calls:
  5227 ;;		Nothing
  5228 ;; This function is called by:
  5229 ;;		_convert_rgb2hue
  5230 ;;		_main
  5231 ;;		_fullSpeedAhead
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text15
  5236   001F8C                     __ptext15:
  5237                           	callstack 0
  5238   001F8C                     ___flmul:
  5239                           	callstack 26
  5240   001F8C  5013               	movf	(___flmul@b+3)^0,w,c
  5241   001F8E  0B80               	andlw	128
  5242   001F90  6E1C               	movwf	___flmul@sign^0,c
  5243   001F92  5013               	movf	(___flmul@b+3)^0,w,c
  5244   001F94  2413               	addwf	(___flmul@b+3)^0,w,c
  5245   001F96  6E22               	movwf	___flmul@bexp^0,c
  5246   001F98  AE12               	btfss	(___flmul@b+2)^0,7,c
  5247   001F9A  EFD1  F00F         	goto	u3301
  5248   001F9E  EFD3  F00F         	goto	u3300
  5249   001FA2                     u3301:
  5250   001FA2  EFD4  F00F         	goto	l4060
  5251   001FA6                     u3300:
  5252   001FA6  8022               	bsf	___flmul@bexp^0,0,c
  5253   001FA8                     l4060:
  5254   001FA8  5022               	movf	___flmul@bexp^0,w,c
  5255   001FAA  B4D8               	btfsc	status,2,c
  5256   001FAC  EFDA  F00F         	goto	u3311
  5257   001FB0  EFDC  F00F         	goto	u3310
  5258   001FB4                     u3311:
  5259   001FB4  EFEF  F00F         	goto	l4068
  5260   001FB8                     u3310:
  5261   001FB8  2822               	incf	___flmul@bexp^0,w,c
  5262   001FBA  A4D8               	btfss	status,2,c
  5263   001FBC  EFE2  F00F         	goto	u3321
  5264   001FC0  EFE4  F00F         	goto	u3320
  5265   001FC4                     u3321:
  5266   001FC4  EFEC  F00F         	goto	l4066
  5267   001FC8                     u3320:
  5268   001FC8  0E00               	movlw	0
  5269   001FCA  6E10               	movwf	___flmul@b^0,c
  5270   001FCC  0E00               	movlw	0
  5271   001FCE  6E11               	movwf	(___flmul@b+1)^0,c
  5272   001FD0  0E00               	movlw	0
  5273   001FD2  6E12               	movwf	(___flmul@b+2)^0,c
  5274   001FD4  0E00               	movlw	0
  5275   001FD6  6E13               	movwf	(___flmul@b+3)^0,c
  5276   001FD8                     l4066:
  5277   001FD8  8E12               	bsf	(___flmul@b+2)^0,7,c
  5278   001FDA  EFF7  F00F         	goto	l4070
  5279   001FDE                     l4068:
  5280   001FDE  0E00               	movlw	0
  5281   001FE0  6E10               	movwf	___flmul@b^0,c
  5282   001FE2  0E00               	movlw	0
  5283   001FE4  6E11               	movwf	(___flmul@b+1)^0,c
  5284   001FE6  0E00               	movlw	0
  5285   001FE8  6E12               	movwf	(___flmul@b+2)^0,c
  5286   001FEA  0E00               	movlw	0
  5287   001FEC  6E13               	movwf	(___flmul@b+3)^0,c
  5288   001FEE                     l4070:
  5289   001FEE  5017               	movf	(___flmul@a+3)^0,w,c
  5290   001FF0  0B80               	andlw	128
  5291   001FF2  1A1C               	xorwf	___flmul@sign^0,f,c
  5292   001FF4  5017               	movf	(___flmul@a+3)^0,w,c
  5293   001FF6  2417               	addwf	(___flmul@a+3)^0,w,c
  5294   001FF8  6E21               	movwf	___flmul@aexp^0,c
  5295   001FFA  AE16               	btfss	(___flmul@a+2)^0,7,c
  5296   001FFC  EF02  F010         	goto	u3331
  5297   002000  EF04  F010         	goto	u3330
  5298   002004                     u3331:
  5299   002004  EF05  F010         	goto	l4078
  5300   002008                     u3330:
  5301   002008  8021               	bsf	___flmul@aexp^0,0,c
  5302   00200A                     l4078:
  5303   00200A  5021               	movf	___flmul@aexp^0,w,c
  5304   00200C  B4D8               	btfsc	status,2,c
  5305   00200E  EF0B  F010         	goto	u3341
  5306   002012  EF0D  F010         	goto	u3340
  5307   002016                     u3341:
  5308   002016  EF20  F010         	goto	l4086
  5309   00201A                     u3340:
  5310   00201A  2821               	incf	___flmul@aexp^0,w,c
  5311   00201C  A4D8               	btfss	status,2,c
  5312   00201E  EF13  F010         	goto	u3351
  5313   002022  EF15  F010         	goto	u3350
  5314   002026                     u3351:
  5315   002026  EF1D  F010         	goto	l4084
  5316   00202A                     u3350:
  5317   00202A  0E00               	movlw	0
  5318   00202C  6E14               	movwf	___flmul@a^0,c
  5319   00202E  0E00               	movlw	0
  5320   002030  6E15               	movwf	(___flmul@a+1)^0,c
  5321   002032  0E00               	movlw	0
  5322   002034  6E16               	movwf	(___flmul@a+2)^0,c
  5323   002036  0E00               	movlw	0
  5324   002038  6E17               	movwf	(___flmul@a+3)^0,c
  5325   00203A                     l4084:
  5326   00203A  8E16               	bsf	(___flmul@a+2)^0,7,c
  5327   00203C  EF28  F010         	goto	l1348
  5328   002040                     l4086:
  5329   002040  0E00               	movlw	0
  5330   002042  6E14               	movwf	___flmul@a^0,c
  5331   002044  0E00               	movlw	0
  5332   002046  6E15               	movwf	(___flmul@a+1)^0,c
  5333   002048  0E00               	movlw	0
  5334   00204A  6E16               	movwf	(___flmul@a+2)^0,c
  5335   00204C  0E00               	movlw	0
  5336   00204E  6E17               	movwf	(___flmul@a+3)^0,c
  5337   002050                     l1348:
  5338   002050  5021               	movf	___flmul@aexp^0,w,c
  5339   002052  B4D8               	btfsc	status,2,c
  5340   002054  EF2E  F010         	goto	u3361
  5341   002058  EF30  F010         	goto	u3360
  5342   00205C                     u3361:
  5343   00205C  EF38  F010         	goto	l4090
  5344   002060                     u3360:
  5345   002060  5022               	movf	___flmul@bexp^0,w,c
  5346   002062  A4D8               	btfss	status,2,c
  5347   002064  EF36  F010         	goto	u3371
  5348   002068  EF38  F010         	goto	u3370
  5349   00206C                     u3371:
  5350   00206C  EF42  F010         	goto	l4094
  5351   002070                     u3370:
  5352   002070                     l4090:
  5353   002070  0E00               	movlw	0
  5354   002072  6E10               	movwf	?___flmul^0,c
  5355   002074  0E00               	movlw	0
  5356   002076  6E11               	movwf	(?___flmul+1)^0,c
  5357   002078  0E00               	movlw	0
  5358   00207A  6E12               	movwf	(?___flmul+2)^0,c
  5359   00207C  0E00               	movlw	0
  5360   00207E  6E13               	movwf	(?___flmul+3)^0,c
  5361   002080  EFDA  F011         	goto	l1352
  5362   002084                     l4094:
  5363   002084  5016               	movf	(___flmul@a+2)^0,w,c
  5364   002086  0210               	mulwf	___flmul@b^0,c
  5365   002088  CFF3 F027          	movff	prodl,___flmul@temp
  5366   00208C  CFF4 F028          	movff	prodh,___flmul@temp+1
  5367   002090  5027               	movf	___flmul@temp^0,w,c
  5368   002092  6E1D               	movwf	___flmul@grs^0,c
  5369   002094  6A1E               	clrf	(___flmul@grs+1)^0,c
  5370   002096  6A1F               	clrf	(___flmul@grs+2)^0,c
  5371   002098  6A20               	clrf	(___flmul@grs+3)^0,c
  5372   00209A  5028               	movf	(___flmul@temp+1)^0,w,c
  5373   00209C  6E23               	movwf	___flmul@prod^0,c
  5374   00209E  6A24               	clrf	(___flmul@prod+1)^0,c
  5375   0020A0  6A25               	clrf	(___flmul@prod+2)^0,c
  5376   0020A2  6A26               	clrf	(___flmul@prod+3)^0,c
  5377   0020A4  5015               	movf	(___flmul@a+1)^0,w,c
  5378   0020A6  0211               	mulwf	(___flmul@b+1)^0,c
  5379   0020A8  CFF3 F027          	movff	prodl,___flmul@temp
  5380   0020AC  CFF4 F028          	movff	prodh,___flmul@temp+1
  5381   0020B0  5027               	movf	___flmul@temp^0,w,c
  5382   0020B2  261D               	addwf	___flmul@grs^0,f,c
  5383   0020B4  0E00               	movlw	0
  5384   0020B6  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5385   0020B8  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5386   0020BA  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5387   0020BC  5028               	movf	(___flmul@temp+1)^0,w,c
  5388   0020BE  2623               	addwf	___flmul@prod^0,f,c
  5389   0020C0  0E00               	movlw	0
  5390   0020C2  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5391   0020C4  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5392   0020C6  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5393   0020C8  5014               	movf	___flmul@a^0,w,c
  5394   0020CA  0212               	mulwf	(___flmul@b+2)^0,c
  5395   0020CC  CFF3 F027          	movff	prodl,___flmul@temp
  5396   0020D0  CFF4 F028          	movff	prodh,___flmul@temp+1
  5397   0020D4  5027               	movf	___flmul@temp^0,w,c
  5398   0020D6  261D               	addwf	___flmul@grs^0,f,c
  5399   0020D8  0E00               	movlw	0
  5400   0020DA  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5401   0020DC  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5402   0020DE  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5403   0020E0  5028               	movf	(___flmul@temp+1)^0,w,c
  5404   0020E2  2623               	addwf	___flmul@prod^0,f,c
  5405   0020E4  0E00               	movlw	0
  5406   0020E6  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5407   0020E8  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5408   0020EA  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5409   0020EC  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  5410   0020F0  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  5411   0020F4  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  5412   0020F8  6A1D               	clrf	___flmul@grs^0,c
  5413   0020FA  5014               	movf	___flmul@a^0,w,c
  5414   0020FC  0211               	mulwf	(___flmul@b+1)^0,c
  5415   0020FE  CFF3 F027          	movff	prodl,___flmul@temp
  5416   002102  CFF4 F028          	movff	prodh,___flmul@temp+1
  5417   002106  5027               	movf	___flmul@temp^0,w,c
  5418   002108  261D               	addwf	___flmul@grs^0,f,c
  5419   00210A  5028               	movf	(___flmul@temp+1)^0,w,c
  5420   00210C  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5421   00210E  0E00               	movlw	0
  5422   002110  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5423   002112  0E00               	movlw	0
  5424   002114  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5425   002116  5015               	movf	(___flmul@a+1)^0,w,c
  5426   002118  0210               	mulwf	___flmul@b^0,c
  5427   00211A  CFF3 F027          	movff	prodl,___flmul@temp
  5428   00211E  CFF4 F028          	movff	prodh,___flmul@temp+1
  5429   002122  5027               	movf	___flmul@temp^0,w,c
  5430   002124  261D               	addwf	___flmul@grs^0,f,c
  5431   002126  5028               	movf	(___flmul@temp+1)^0,w,c
  5432   002128  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5433   00212A  0E00               	movlw	0
  5434   00212C  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5435   00212E  0E00               	movlw	0
  5436   002130  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5437   002132  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  5438   002136  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  5439   00213A  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  5440   00213E  6A1D               	clrf	___flmul@grs^0,c
  5441   002140  5014               	movf	___flmul@a^0,w,c
  5442   002142  0210               	mulwf	___flmul@b^0,c
  5443   002144  CFF3 F027          	movff	prodl,___flmul@temp
  5444   002148  CFF4 F028          	movff	prodh,___flmul@temp+1
  5445   00214C  5027               	movf	___flmul@temp^0,w,c
  5446   00214E  261D               	addwf	___flmul@grs^0,f,c
  5447   002150  5028               	movf	(___flmul@temp+1)^0,w,c
  5448   002152  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5449   002154  0E00               	movlw	0
  5450   002156  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5451   002158  0E00               	movlw	0
  5452   00215A  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5453   00215C  5016               	movf	(___flmul@a+2)^0,w,c
  5454   00215E  0211               	mulwf	(___flmul@b+1)^0,c
  5455   002160  CFF3 F027          	movff	prodl,___flmul@temp
  5456   002164  CFF4 F028          	movff	prodh,___flmul@temp+1
  5457   002168  5027               	movf	___flmul@temp^0,w,c
  5458   00216A  2623               	addwf	___flmul@prod^0,f,c
  5459   00216C  5028               	movf	(___flmul@temp+1)^0,w,c
  5460   00216E  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5461   002170  0E00               	movlw	0
  5462   002172  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5463   002174  0E00               	movlw	0
  5464   002176  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5465   002178  5015               	movf	(___flmul@a+1)^0,w,c
  5466   00217A  0212               	mulwf	(___flmul@b+2)^0,c
  5467   00217C  CFF3 F027          	movff	prodl,___flmul@temp
  5468   002180  CFF4 F028          	movff	prodh,___flmul@temp+1
  5469   002184  5027               	movf	___flmul@temp^0,w,c
  5470   002186  2623               	addwf	___flmul@prod^0,f,c
  5471   002188  5028               	movf	(___flmul@temp+1)^0,w,c
  5472   00218A  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5473   00218C  0E00               	movlw	0
  5474   00218E  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5475   002190  0E00               	movlw	0
  5476   002192  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5477   002194  5016               	movf	(___flmul@a+2)^0,w,c
  5478   002196  0212               	mulwf	(___flmul@b+2)^0,c
  5479   002198  CFF3 F027          	movff	prodl,___flmul@temp
  5480   00219C  CFF4 F028          	movff	prodh,___flmul@temp+1
  5481   0021A0  5027               	movf	___flmul@temp^0,w,c
  5482   0021A2  6E18               	movwf	??___flmul^0,c
  5483   0021A4  5028               	movf	(___flmul@temp+1)^0,w,c
  5484   0021A6  6E19               	movwf	(??___flmul+1)^0,c
  5485   0021A8  6A1A               	clrf	(??___flmul+2)^0,c
  5486   0021AA  6A1B               	clrf	(??___flmul+3)^0,c
  5487   0021AC  C01A  F01B         	movff	??___flmul+2,??___flmul+3
  5488   0021B0  C019  F01A         	movff	??___flmul+1,??___flmul+2
  5489   0021B4  C018  F019         	movff	??___flmul,??___flmul+1
  5490   0021B8  6A18               	clrf	??___flmul^0,c
  5491   0021BA  5018               	movf	??___flmul^0,w,c
  5492   0021BC  2623               	addwf	___flmul@prod^0,f,c
  5493   0021BE  5019               	movf	(??___flmul+1)^0,w,c
  5494   0021C0  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5495   0021C2  501A               	movf	(??___flmul+2)^0,w,c
  5496   0021C4  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5497   0021C6  501B               	movf	(??___flmul+3)^0,w,c
  5498   0021C8  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5499   0021CA  C01D  F018         	movff	___flmul@grs,??___flmul
  5500   0021CE  C01E  F019         	movff	___flmul@grs+1,??___flmul+1
  5501   0021D2  C01F  F01A         	movff	___flmul@grs+2,??___flmul+2
  5502   0021D6  C020  F01B         	movff	___flmul@grs+3,??___flmul+3
  5503   0021DA  0E19               	movlw	25
  5504   0021DC  EFF5  F010         	goto	u3380
  5505   0021E0                     u3385:
  5506   0021E0  90D8               	bcf	status,0,c
  5507   0021E2  321B               	rrcf	(??___flmul+3)^0,f,c
  5508   0021E4  321A               	rrcf	(??___flmul+2)^0,f,c
  5509   0021E6  3219               	rrcf	(??___flmul+1)^0,f,c
  5510   0021E8  3218               	rrcf	??___flmul^0,f,c
  5511   0021EA                     u3380:
  5512   0021EA  2EE8               	decfsz	wreg,f,c
  5513   0021EC  EFF0  F010         	goto	u3385
  5514   0021F0  5018               	movf	??___flmul^0,w,c
  5515   0021F2  2623               	addwf	___flmul@prod^0,f,c
  5516   0021F4  5019               	movf	(??___flmul+1)^0,w,c
  5517   0021F6  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5518   0021F8  501A               	movf	(??___flmul+2)^0,w,c
  5519   0021FA  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5520   0021FC  501B               	movf	(??___flmul+3)^0,w,c
  5521   0021FE  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5522   002200  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  5523   002204  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  5524   002208  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  5525   00220C  6A1D               	clrf	___flmul@grs^0,c
  5526   00220E  5021               	movf	___flmul@aexp^0,w,c
  5527   002210  C022  F018         	movff	___flmul@bexp,??___flmul
  5528   002214  6A19               	clrf	(??___flmul+1)^0,c
  5529   002216  2618               	addwf	??___flmul^0,f,c
  5530   002218  0E00               	movlw	0
  5531   00221A  2219               	addwfc	(??___flmul+1)^0,f,c
  5532   00221C  0E82               	movlw	130
  5533   00221E  2418               	addwf	??___flmul^0,w,c
  5534   002220  6E27               	movwf	___flmul@temp^0,c
  5535   002222  0EFF               	movlw	255
  5536   002224  2019               	addwfc	(??___flmul+1)^0,w,c
  5537   002226  6E28               	movwf	(___flmul@temp+1)^0,c
  5538   002228  EF2B  F011         	goto	l4142
  5539   00222C                     l4136:
  5540   00222C  90D8               	bcf	status,0,c
  5541   00222E  3623               	rlcf	___flmul@prod^0,f,c
  5542   002230  3624               	rlcf	(___flmul@prod+1)^0,f,c
  5543   002232  3625               	rlcf	(___flmul@prod+2)^0,f,c
  5544   002234  3626               	rlcf	(___flmul@prod+3)^0,f,c
  5545   002236  AE20               	btfss	(___flmul@grs+3)^0,7,c
  5546   002238  EF20  F011         	goto	u3391
  5547   00223C  EF22  F011         	goto	u3390
  5548   002240                     u3391:
  5549   002240  EF23  F011         	goto	l1355
  5550   002244                     u3390:
  5551   002244  8023               	bsf	___flmul@prod^0,0,c
  5552   002246                     l1355:
  5553   002246  90D8               	bcf	status,0,c
  5554   002248  361D               	rlcf	___flmul@grs^0,f,c
  5555   00224A  361E               	rlcf	(___flmul@grs+1)^0,f,c
  5556   00224C  361F               	rlcf	(___flmul@grs+2)^0,f,c
  5557   00224E  3620               	rlcf	(___flmul@grs+3)^0,f,c
  5558   002250  0627               	decf	___flmul@temp^0,f,c
  5559   002252  A0D8               	btfss	status,0,c
  5560   002254  0628               	decf	(___flmul@temp+1)^0,f,c
  5561   002256                     l4142:
  5562   002256  AE25               	btfss	(___flmul@prod+2)^0,7,c
  5563   002258  EF30  F011         	goto	u3401
  5564   00225C  EF32  F011         	goto	u3400
  5565   002260                     u3401:
  5566   002260  EF16  F011         	goto	l4136
  5567   002264                     u3400:
  5568   002264  0E00               	movlw	0
  5569   002266  6E21               	movwf	___flmul@aexp^0,c
  5570   002268  AE20               	btfss	(___flmul@grs+3)^0,7,c
  5571   00226A  EF39  F011         	goto	u3411
  5572   00226E  EF3B  F011         	goto	u3410
  5573   002272                     u3411:
  5574   002272  EF5F  F011         	goto	l1357
  5575   002276                     u3410:
  5576   002276  0EFF               	movlw	255
  5577   002278  141D               	andwf	___flmul@grs^0,w,c
  5578   00227A  6E18               	movwf	??___flmul^0,c
  5579   00227C  0EFF               	movlw	255
  5580   00227E  141E               	andwf	(___flmul@grs+1)^0,w,c
  5581   002280  6E19               	movwf	(??___flmul+1)^0,c
  5582   002282  0EFF               	movlw	255
  5583   002284  141F               	andwf	(___flmul@grs+2)^0,w,c
  5584   002286  6E1A               	movwf	(??___flmul+2)^0,c
  5585   002288  0E7F               	movlw	127
  5586   00228A  1420               	andwf	(___flmul@grs+3)^0,w,c
  5587   00228C  6E1B               	movwf	(??___flmul+3)^0,c
  5588   00228E  5018               	movf	??___flmul^0,w,c
  5589   002290  1019               	iorwf	(??___flmul+1)^0,w,c
  5590   002292  101A               	iorwf	(??___flmul+2)^0,w,c
  5591   002294  101B               	iorwf	(??___flmul+3)^0,w,c
  5592   002296  B4D8               	btfsc	status,2,c
  5593   002298  EF50  F011         	goto	u3421
  5594   00229C  EF52  F011         	goto	u3420
  5595   0022A0                     u3421:
  5596   0022A0  EF56  F011         	goto	l1358
  5597   0022A4                     u3420:
  5598   0022A4                     l4150:
  5599   0022A4  0E01               	movlw	1
  5600   0022A6  6E21               	movwf	___flmul@aexp^0,c
  5601   0022A8  EF5F  F011         	goto	l1357
  5602   0022AC                     l1358:
  5603   0022AC  A023               	btfss	___flmul@prod^0,0,c
  5604   0022AE  EF5B  F011         	goto	u3431
  5605   0022B2  EF5D  F011         	goto	u3430
  5606   0022B6                     u3431:
  5607   0022B6  EF5F  F011         	goto	l1357
  5608   0022BA                     u3430:
  5609   0022BA  EF52  F011         	goto	l4150
  5610   0022BE                     l1357:
  5611   0022BE  5021               	movf	___flmul@aexp^0,w,c
  5612   0022C0  B4D8               	btfsc	status,2,c
  5613   0022C2  EF65  F011         	goto	u3441
  5614   0022C6  EF67  F011         	goto	u3440
  5615   0022CA                     u3441:
  5616   0022CA  EF8B  F011         	goto	l4162
  5617   0022CE                     u3440:
  5618   0022CE  0E01               	movlw	1
  5619   0022D0  2623               	addwf	___flmul@prod^0,f,c
  5620   0022D2  0E00               	movlw	0
  5621   0022D4  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5622   0022D6  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5623   0022D8  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5624   0022DA  A026               	btfss	(___flmul@prod+3)^0,0,c
  5625   0022DC  EF72  F011         	goto	u3451
  5626   0022E0  EF74  F011         	goto	u3450
  5627   0022E4                     u3451:
  5628   0022E4  EF8B  F011         	goto	l4162
  5629   0022E8                     u3450:
  5630   0022E8  C023  F018         	movff	___flmul@prod,??___flmul
  5631   0022EC  C024  F019         	movff	___flmul@prod+1,??___flmul+1
  5632   0022F0  C025  F01A         	movff	___flmul@prod+2,??___flmul+2
  5633   0022F4  C026  F01B         	movff	___flmul@prod+3,??___flmul+3
  5634   0022F8  341B               	rlcf	(??___flmul+3)^0,w,c
  5635   0022FA  321B               	rrcf	(??___flmul+3)^0,f,c
  5636   0022FC  321A               	rrcf	(??___flmul+2)^0,f,c
  5637   0022FE  3219               	rrcf	(??___flmul+1)^0,f,c
  5638   002300  3218               	rrcf	??___flmul^0,f,c
  5639   002302  C018  F023         	movff	??___flmul,___flmul@prod
  5640   002306  C019  F024         	movff	??___flmul+1,___flmul@prod+1
  5641   00230A  C01A  F025         	movff	??___flmul+2,___flmul@prod+2
  5642   00230E  C01B  F026         	movff	??___flmul+3,___flmul@prod+3
  5643   002312  4A27               	infsnz	___flmul@temp^0,f,c
  5644   002314  2A28               	incf	(___flmul@temp+1)^0,f,c
  5645   002316                     l4162:
  5646   002316  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  5647   002318  EF96  F011         	goto	u3461
  5648   00231C  5028               	movf	(___flmul@temp+1)^0,w,c
  5649   00231E  E108               	bnz	u3460
  5650   002320  2827               	incf	___flmul@temp^0,w,c
  5651   002322  A0D8               	btfss	status,0,c
  5652   002324  EF96  F011         	goto	u3461
  5653   002328  EF98  F011         	goto	u3460
  5654   00232C                     u3461:
  5655   00232C  EFA2  F011         	goto	l4166
  5656   002330                     u3460:
  5657   002330  0E00               	movlw	0
  5658   002332  6E23               	movwf	___flmul@prod^0,c
  5659   002334  0E00               	movlw	0
  5660   002336  6E24               	movwf	(___flmul@prod+1)^0,c
  5661   002338  0E80               	movlw	128
  5662   00233A  6E25               	movwf	(___flmul@prod+2)^0,c
  5663   00233C  0E7F               	movlw	127
  5664   00233E  6E26               	movwf	(___flmul@prod+3)^0,c
  5665   002340  EFD0  F011         	goto	l4178
  5666   002344                     l4166:
  5667   002344  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  5668   002346  EFAF  F011         	goto	u3470
  5669   00234A  5028               	movf	(___flmul@temp+1)^0,w,c
  5670   00234C  E106               	bnz	u3471
  5671   00234E  0427               	decf	___flmul@temp^0,w,c
  5672   002350  B0D8               	btfsc	status,0,c
  5673   002352  EFAD  F011         	goto	u3471
  5674   002356  EFAF  F011         	goto	u3470
  5675   00235A                     u3471:
  5676   00235A  EFBB  F011         	goto	l1365
  5677   00235E                     u3470:
  5678   00235E  0E00               	movlw	0
  5679   002360  6E23               	movwf	___flmul@prod^0,c
  5680   002362  0E00               	movlw	0
  5681   002364  6E24               	movwf	(___flmul@prod+1)^0,c
  5682   002366  0E00               	movlw	0
  5683   002368  6E25               	movwf	(___flmul@prod+2)^0,c
  5684   00236A  0E00               	movlw	0
  5685   00236C  6E26               	movwf	(___flmul@prod+3)^0,c
  5686   00236E  0E00               	movlw	0
  5687   002370  6E1C               	movwf	___flmul@sign^0,c
  5688   002372  EFD0  F011         	goto	l4178
  5689   002376                     l1365:
  5690   002376  C027  F022         	movff	___flmul@temp,___flmul@bexp
  5691   00237A  0EFF               	movlw	255
  5692   00237C  1623               	andwf	___flmul@prod^0,f,c
  5693   00237E  0EFF               	movlw	255
  5694   002380  1624               	andwf	(___flmul@prod+1)^0,f,c
  5695   002382  0E7F               	movlw	127
  5696   002384  1625               	andwf	(___flmul@prod+2)^0,f,c
  5697   002386  0E00               	movlw	0
  5698   002388  1626               	andwf	(___flmul@prod+3)^0,f,c
  5699   00238A  A022               	btfss	___flmul@bexp^0,0,c
  5700   00238C  EFCA  F011         	goto	u3481
  5701   002390  EFCC  F011         	goto	u3480
  5702   002394                     u3481:
  5703   002394  EFCD  F011         	goto	l4176
  5704   002398                     u3480:
  5705   002398  8E25               	bsf	(___flmul@prod+2)^0,7,c
  5706   00239A                     l4176:
  5707   00239A  90D8               	bcf	status,0,c
  5708   00239C  3022               	rrcf	___flmul@bexp^0,w,c
  5709   00239E  6E26               	movwf	(___flmul@prod+3)^0,c
  5710   0023A0                     l4178:
  5711   0023A0  501C               	movf	___flmul@sign^0,w,c
  5712   0023A2  1226               	iorwf	(___flmul@prod+3)^0,f,c
  5713   0023A4  C023  F010         	movff	___flmul@prod,?___flmul
  5714   0023A8  C024  F011         	movff	___flmul@prod+1,?___flmul+1
  5715   0023AC  C025  F012         	movff	___flmul@prod+2,?___flmul+2
  5716   0023B0  C026  F013         	movff	___flmul@prod+3,?___flmul+3
  5717   0023B4                     l1352:
  5718   0023B4  0012               	return		;funcret
  5719   0023B6                     __end_of___flmul:
  5720                           	callstack 0
  5721                           
  5722 ;; *************** function ___flge *****************
  5723 ;; Defined at:
  5724 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;  ff1             4    1[COMRAM] unsigned char 
  5727 ;;  ff2             4    5[COMRAM] unsigned char 
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;		None
  5730 ;; Return value:  Size  Location     Type
  5731 ;;		None               void
  5732 ;; Registers used:
  5733 ;;		wreg, status,2, status,0
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5739 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5741 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5742 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5743 ;;Total ram usage:       12 bytes
  5744 ;; Hardware stack levels used: 1
  5745 ;; Hardware stack levels required when called: 1
  5746 ;; This function calls:
  5747 ;;		Nothing
  5748 ;; This function is called by:
  5749 ;;		_convert_rgb2hue
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text16
  5754   003670                     __ptext16:
  5755                           	callstack 0
  5756   003670                     ___flge:
  5757                           	callstack 27
  5758   003670  0E00               	movlw	0
  5759   003672  1402               	andwf	___flge@ff1^0,w,c
  5760   003674  6E0A               	movwf	??___flge^0,c
  5761   003676  0E00               	movlw	0
  5762   003678  1403               	andwf	(___flge@ff1+1)^0,w,c
  5763   00367A  6E0B               	movwf	(??___flge+1)^0,c
  5764   00367C  0E80               	movlw	128
  5765   00367E  1404               	andwf	(___flge@ff1+2)^0,w,c
  5766   003680  6E0C               	movwf	(??___flge+2)^0,c
  5767   003682  0E7F               	movlw	127
  5768   003684  1405               	andwf	(___flge@ff1+3)^0,w,c
  5769   003686  6E0D               	movwf	(??___flge+3)^0,c
  5770   003688  500A               	movf	??___flge^0,w,c
  5771   00368A  100B               	iorwf	(??___flge+1)^0,w,c
  5772   00368C  100C               	iorwf	(??___flge+2)^0,w,c
  5773   00368E  100D               	iorwf	(??___flge+3)^0,w,c
  5774   003690  A4D8               	btfss	status,2,c
  5775   003692  EF4D  F01B         	goto	u3981
  5776   003696  EF4F  F01B         	goto	u3980
  5777   00369A                     u3981:
  5778   00369A  EF57  F01B         	goto	l4570
  5779   00369E                     u3980:
  5780   00369E  0E00               	movlw	0
  5781   0036A0  6E02               	movwf	___flge@ff1^0,c
  5782   0036A2  0E00               	movlw	0
  5783   0036A4  6E03               	movwf	(___flge@ff1+1)^0,c
  5784   0036A6  0E00               	movlw	0
  5785   0036A8  6E04               	movwf	(___flge@ff1+2)^0,c
  5786   0036AA  0E00               	movlw	0
  5787   0036AC  6E05               	movwf	(___flge@ff1+3)^0,c
  5788   0036AE                     l4570:
  5789   0036AE  0E00               	movlw	0
  5790   0036B0  1406               	andwf	___flge@ff2^0,w,c
  5791   0036B2  6E0A               	movwf	??___flge^0,c
  5792   0036B4  0E00               	movlw	0
  5793   0036B6  1407               	andwf	(___flge@ff2+1)^0,w,c
  5794   0036B8  6E0B               	movwf	(??___flge+1)^0,c
  5795   0036BA  0E80               	movlw	128
  5796   0036BC  1408               	andwf	(___flge@ff2+2)^0,w,c
  5797   0036BE  6E0C               	movwf	(??___flge+2)^0,c
  5798   0036C0  0E7F               	movlw	127
  5799   0036C2  1409               	andwf	(___flge@ff2+3)^0,w,c
  5800   0036C4  6E0D               	movwf	(??___flge+3)^0,c
  5801   0036C6  500A               	movf	??___flge^0,w,c
  5802   0036C8  100B               	iorwf	(??___flge+1)^0,w,c
  5803   0036CA  100C               	iorwf	(??___flge+2)^0,w,c
  5804   0036CC  100D               	iorwf	(??___flge+3)^0,w,c
  5805   0036CE  A4D8               	btfss	status,2,c
  5806   0036D0  EF6C  F01B         	goto	u3991
  5807   0036D4  EF6E  F01B         	goto	u3990
  5808   0036D8                     u3991:
  5809   0036D8  EF76  F01B         	goto	l4574
  5810   0036DC                     u3990:
  5811   0036DC  0E00               	movlw	0
  5812   0036DE  6E06               	movwf	___flge@ff2^0,c
  5813   0036E0  0E00               	movlw	0
  5814   0036E2  6E07               	movwf	(___flge@ff2+1)^0,c
  5815   0036E4  0E00               	movlw	0
  5816   0036E6  6E08               	movwf	(___flge@ff2+2)^0,c
  5817   0036E8  0E00               	movlw	0
  5818   0036EA  6E09               	movwf	(___flge@ff2+3)^0,c
  5819   0036EC                     l4574:
  5820   0036EC  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5821   0036EE  EF7B  F01B         	goto	u4001
  5822   0036F2  EF7D  F01B         	goto	u4000
  5823   0036F6                     u4001:
  5824   0036F6  EF86  F01B         	goto	l4578
  5825   0036FA                     u4000:
  5826   0036FA  6C02               	negf	___flge@ff1^0,c
  5827   0036FC  1E03               	comf	(___flge@ff1+1)^0,f,c
  5828   0036FE  B0D8               	btfsc	status,0,c
  5829   003700  2A03               	incf	(___flge@ff1+1)^0,f,c
  5830   003702  1E04               	comf	(___flge@ff1+2)^0,f,c
  5831   003704  B0D8               	btfsc	status,0,c
  5832   003706  2A04               	incf	(___flge@ff1+2)^0,f,c
  5833   003708  0E80               	movlw	128
  5834   00370A  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5835   00370C                     l4578:
  5836   00370C  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5837   00370E  EF8B  F01B         	goto	u4011
  5838   003712  EF8D  F01B         	goto	u4010
  5839   003716                     u4011:
  5840   003716  EF96  F01B         	goto	l999
  5841   00371A                     u4010:
  5842   00371A  6C06               	negf	___flge@ff2^0,c
  5843   00371C  1E07               	comf	(___flge@ff2+1)^0,f,c
  5844   00371E  B0D8               	btfsc	status,0,c
  5845   003720  2A07               	incf	(___flge@ff2+1)^0,f,c
  5846   003722  1E08               	comf	(___flge@ff2+2)^0,f,c
  5847   003724  B0D8               	btfsc	status,0,c
  5848   003726  2A08               	incf	(___flge@ff2+2)^0,f,c
  5849   003728  0E80               	movlw	128
  5850   00372A  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5851   00372C                     l999:
  5852   00372C  0E00               	movlw	0
  5853   00372E  1A02               	xorwf	___flge@ff1^0,f,c
  5854   003730  0E00               	movlw	0
  5855   003732  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5856   003734  0E00               	movlw	0
  5857   003736  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5858   003738  0E80               	movlw	128
  5859   00373A  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5860   00373C  0E00               	movlw	0
  5861   00373E  1A06               	xorwf	___flge@ff2^0,f,c
  5862   003740  0E00               	movlw	0
  5863   003742  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5864   003744  0E00               	movlw	0
  5865   003746  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5866   003748  0E80               	movlw	128
  5867   00374A  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5868   00374C  5006               	movf	___flge@ff2^0,w,c
  5869   00374E  5C02               	subwf	___flge@ff1^0,w,c
  5870   003750  5007               	movf	(___flge@ff2+1)^0,w,c
  5871   003752  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5872   003754  5008               	movf	(___flge@ff2+2)^0,w,c
  5873   003756  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5874   003758  5009               	movf	(___flge@ff2+3)^0,w,c
  5875   00375A  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5876   00375C  B0D8               	btfsc	status,0,c
  5877   00375E  EFB3  F01B         	goto	u4021
  5878   003762  EFB5  F01B         	goto	u4020
  5879   003766                     u4021:
  5880   003766  EFB8  F01B         	goto	l4584
  5881   00376A                     u4020:
  5882   00376A  90D8               	bcf	status,0,c
  5883   00376C  EFB9  F01B         	goto	l1004
  5884   003770                     l4584:
  5885   003770  80D8               	bsf	status,0,c
  5886   003772                     l1004:
  5887   003772  0012               	return		;funcret
  5888   003774                     __end_of___flge:
  5889                           	callstack 0
  5890                           
  5891 ;; *************** function ___fleq *****************
  5892 ;; Defined at:
  5893 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;  ff1             4    1[COMRAM] unsigned char 
  5896 ;;  ff2             4    5[COMRAM] unsigned char 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;		None
  5899 ;; Return value:  Size  Location     Type
  5900 ;;		None               void
  5901 ;; Registers used:
  5902 ;;		wreg, status,2, status,0
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5908 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5910 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5911 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5912 ;;Total ram usage:       12 bytes
  5913 ;; Hardware stack levels used: 1
  5914 ;; Hardware stack levels required when called: 1
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_convert_rgb2hue
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           	psect	text17
  5923   003C36                     __ptext17:
  5924                           	callstack 0
  5925   003C36                     ___fleq:
  5926                           	callstack 27
  5927   003C36  0E00               	movlw	0
  5928   003C38  1402               	andwf	___fleq@ff1^0,w,c
  5929   003C3A  6E0A               	movwf	??___fleq^0,c
  5930   003C3C  0E00               	movlw	0
  5931   003C3E  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5932   003C40  6E0B               	movwf	(??___fleq+1)^0,c
  5933   003C42  0E80               	movlw	128
  5934   003C44  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5935   003C46  6E0C               	movwf	(??___fleq+2)^0,c
  5936   003C48  0E7F               	movlw	127
  5937   003C4A  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5938   003C4C  6E0D               	movwf	(??___fleq+3)^0,c
  5939   003C4E  500A               	movf	??___fleq^0,w,c
  5940   003C50  100B               	iorwf	(??___fleq+1)^0,w,c
  5941   003C52  100C               	iorwf	(??___fleq+2)^0,w,c
  5942   003C54  100D               	iorwf	(??___fleq+3)^0,w,c
  5943   003C56  A4D8               	btfss	status,2,c
  5944   003C58  EF30  F01E         	goto	u3951
  5945   003C5C  EF32  F01E         	goto	u3950
  5946   003C60                     u3951:
  5947   003C60  EF3A  F01E         	goto	l4554
  5948   003C64                     u3950:
  5949   003C64  0E00               	movlw	0
  5950   003C66  6E02               	movwf	___fleq@ff1^0,c
  5951   003C68  0E00               	movlw	0
  5952   003C6A  6E03               	movwf	(___fleq@ff1+1)^0,c
  5953   003C6C  0E00               	movlw	0
  5954   003C6E  6E04               	movwf	(___fleq@ff1+2)^0,c
  5955   003C70  0E00               	movlw	0
  5956   003C72  6E05               	movwf	(___fleq@ff1+3)^0,c
  5957   003C74                     l4554:
  5958   003C74  0E00               	movlw	0
  5959   003C76  1406               	andwf	___fleq@ff2^0,w,c
  5960   003C78  6E0A               	movwf	??___fleq^0,c
  5961   003C7A  0E00               	movlw	0
  5962   003C7C  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5963   003C7E  6E0B               	movwf	(??___fleq+1)^0,c
  5964   003C80  0E80               	movlw	128
  5965   003C82  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5966   003C84  6E0C               	movwf	(??___fleq+2)^0,c
  5967   003C86  0E7F               	movlw	127
  5968   003C88  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5969   003C8A  6E0D               	movwf	(??___fleq+3)^0,c
  5970   003C8C  500A               	movf	??___fleq^0,w,c
  5971   003C8E  100B               	iorwf	(??___fleq+1)^0,w,c
  5972   003C90  100C               	iorwf	(??___fleq+2)^0,w,c
  5973   003C92  100D               	iorwf	(??___fleq+3)^0,w,c
  5974   003C94  A4D8               	btfss	status,2,c
  5975   003C96  EF4F  F01E         	goto	u3961
  5976   003C9A  EF51  F01E         	goto	u3960
  5977   003C9E                     u3961:
  5978   003C9E  EF59  F01E         	goto	l4558
  5979   003CA2                     u3960:
  5980   003CA2  0E00               	movlw	0
  5981   003CA4  6E06               	movwf	___fleq@ff2^0,c
  5982   003CA6  0E00               	movlw	0
  5983   003CA8  6E07               	movwf	(___fleq@ff2+1)^0,c
  5984   003CAA  0E00               	movlw	0
  5985   003CAC  6E08               	movwf	(___fleq@ff2+2)^0,c
  5986   003CAE  0E00               	movlw	0
  5987   003CB0  6E09               	movwf	(___fleq@ff2+3)^0,c
  5988   003CB2                     l4558:
  5989   003CB2  5006               	movf	___fleq@ff2^0,w,c
  5990   003CB4  1802               	xorwf	___fleq@ff1^0,w,c
  5991   003CB6  E10F               	bnz	u3970
  5992   003CB8  5007               	movf	(___fleq@ff2+1)^0,w,c
  5993   003CBA  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5994   003CBC  E10C               	bnz	u3970
  5995   003CBE  5008               	movf	(___fleq@ff2+2)^0,w,c
  5996   003CC0  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5997   003CC2  E109               	bnz	u3970
  5998   003CC4  5009               	movf	(___fleq@ff2+3)^0,w,c
  5999   003CC6  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  6000   003CC8  B4D8               	btfsc	status,2,c
  6001   003CCA  EF69  F01E         	goto	u3971
  6002   003CCE  EF6B  F01E         	goto	u3970
  6003   003CD2                     u3971:
  6004   003CD2  EF6E  F01E         	goto	l4562
  6005   003CD6                     u3970:
  6006   003CD6  90D8               	bcf	status,0,c
  6007   003CD8  EF6F  F01E         	goto	l993
  6008   003CDC                     l4562:
  6009   003CDC  80D8               	bsf	status,0,c
  6010   003CDE                     l993:
  6011   003CDE  0012               	return		;funcret
  6012   003CE0                     __end_of___fleq:
  6013                           	callstack 0
  6014                           
  6015 ;; *************** function ___fldiv *****************
  6016 ;; Defined at:
  6017 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;  b               4   40[COMRAM] unsigned char 
  6020 ;;  a               4   44[COMRAM] unsigned char 
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;  grs             4   59[COMRAM] unsigned long 
  6023 ;;  rem             4   52[COMRAM] unsigned long 
  6024 ;;  new_exp         2   57[COMRAM] short 
  6025 ;;  aexp            1   64[COMRAM] unsigned char 
  6026 ;;  bexp            1   63[COMRAM] unsigned char 
  6027 ;;  sign            1   56[COMRAM] unsigned char 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  4   40[COMRAM] unsigned char 
  6030 ;; Registers used:
  6031 ;;		wreg, status,2, status,0
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6037 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6038 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6039 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6040 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6041 ;;Total ram usage:       25 bytes
  6042 ;; Hardware stack levels used: 1
  6043 ;; Hardware stack levels required when called: 1
  6044 ;; This function calls:
  6045 ;;		Nothing
  6046 ;; This function is called by:
  6047 ;;		_convert_rgb2hue
  6048 ;;		_main
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           	psect	text18
  6053   0023B6                     __ptext18:
  6054                           	callstack 0
  6055   0023B6                     ___fldiv:
  6056                           	callstack 27
  6057   0023B6  502C               	movf	(___fldiv@b+3)^0,w,c
  6058   0023B8  0B80               	andlw	128
  6059   0023BA  6E39               	movwf	___fldiv@sign^0,c
  6060   0023BC  502C               	movf	(___fldiv@b+3)^0,w,c
  6061   0023BE  242C               	addwf	(___fldiv@b+3)^0,w,c
  6062   0023C0  6E40               	movwf	___fldiv@bexp^0,c
  6063   0023C2  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  6064   0023C4  EFE6  F011         	goto	u3721
  6065   0023C8  EFE8  F011         	goto	u3720
  6066   0023CC                     u3721:
  6067   0023CC  EFE9  F011         	goto	l4412
  6068   0023D0                     u3720:
  6069   0023D0  8040               	bsf	___fldiv@bexp^0,0,c
  6070   0023D2                     l4412:
  6071   0023D2  5040               	movf	___fldiv@bexp^0,w,c
  6072   0023D4  B4D8               	btfsc	status,2,c
  6073   0023D6  EFEF  F011         	goto	u3731
  6074   0023DA  EFF1  F011         	goto	u3730
  6075   0023DE                     u3731:
  6076   0023DE  EF06  F012         	goto	l4422
  6077   0023E2                     u3730:
  6078   0023E2  2840               	incf	___fldiv@bexp^0,w,c
  6079   0023E4  A4D8               	btfss	status,2,c
  6080   0023E6  EFF7  F011         	goto	u3741
  6081   0023EA  EFF9  F011         	goto	u3740
  6082   0023EE                     u3741:
  6083   0023EE  EF01  F012         	goto	l4418
  6084   0023F2                     u3740:
  6085   0023F2  0E00               	movlw	0
  6086   0023F4  6E29               	movwf	___fldiv@b^0,c
  6087   0023F6  0E00               	movlw	0
  6088   0023F8  6E2A               	movwf	(___fldiv@b+1)^0,c
  6089   0023FA  0E00               	movlw	0
  6090   0023FC  6E2B               	movwf	(___fldiv@b+2)^0,c
  6091   0023FE  0E00               	movlw	0
  6092   002400  6E2C               	movwf	(___fldiv@b+3)^0,c
  6093   002402                     l4418:
  6094   002402  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  6095   002404  0E00               	movlw	0
  6096   002406  6E2C               	movwf	(___fldiv@b+3)^0,c
  6097   002408  EF0E  F012         	goto	l4424
  6098   00240C                     l4422:
  6099   00240C  0E00               	movlw	0
  6100   00240E  6E29               	movwf	___fldiv@b^0,c
  6101   002410  0E00               	movlw	0
  6102   002412  6E2A               	movwf	(___fldiv@b+1)^0,c
  6103   002414  0E00               	movlw	0
  6104   002416  6E2B               	movwf	(___fldiv@b+2)^0,c
  6105   002418  0E00               	movlw	0
  6106   00241A  6E2C               	movwf	(___fldiv@b+3)^0,c
  6107   00241C                     l4424:
  6108   00241C  5030               	movf	(___fldiv@a+3)^0,w,c
  6109   00241E  0B80               	andlw	128
  6110   002420  1A39               	xorwf	___fldiv@sign^0,f,c
  6111   002422  5030               	movf	(___fldiv@a+3)^0,w,c
  6112   002424  2430               	addwf	(___fldiv@a+3)^0,w,c
  6113   002426  6E41               	movwf	___fldiv@aexp^0,c
  6114   002428  AE2F               	btfss	(___fldiv@a+2)^0,7,c
  6115   00242A  EF19  F012         	goto	u3751
  6116   00242E  EF1B  F012         	goto	u3750
  6117   002432                     u3751:
  6118   002432  EF1C  F012         	goto	l4432
  6119   002436                     u3750:
  6120   002436  8041               	bsf	___fldiv@aexp^0,0,c
  6121   002438                     l4432:
  6122   002438  5041               	movf	___fldiv@aexp^0,w,c
  6123   00243A  B4D8               	btfsc	status,2,c
  6124   00243C  EF22  F012         	goto	u3761
  6125   002440  EF24  F012         	goto	u3760
  6126   002444                     u3761:
  6127   002444  EF39  F012         	goto	l4442
  6128   002448                     u3760:
  6129   002448  2841               	incf	___fldiv@aexp^0,w,c
  6130   00244A  A4D8               	btfss	status,2,c
  6131   00244C  EF2A  F012         	goto	u3771
  6132   002450  EF2C  F012         	goto	u3770
  6133   002454                     u3771:
  6134   002454  EF34  F012         	goto	l4438
  6135   002458                     u3770:
  6136   002458  0E00               	movlw	0
  6137   00245A  6E2D               	movwf	___fldiv@a^0,c
  6138   00245C  0E00               	movlw	0
  6139   00245E  6E2E               	movwf	(___fldiv@a+1)^0,c
  6140   002460  0E00               	movlw	0
  6141   002462  6E2F               	movwf	(___fldiv@a+2)^0,c
  6142   002464  0E00               	movlw	0
  6143   002466  6E30               	movwf	(___fldiv@a+3)^0,c
  6144   002468                     l4438:
  6145   002468  8E2F               	bsf	(___fldiv@a+2)^0,7,c
  6146   00246A  0E00               	movlw	0
  6147   00246C  6E30               	movwf	(___fldiv@a+3)^0,c
  6148   00246E  EF41  F012         	goto	l4444
  6149   002472                     l4442:
  6150   002472  0E00               	movlw	0
  6151   002474  6E2D               	movwf	___fldiv@a^0,c
  6152   002476  0E00               	movlw	0
  6153   002478  6E2E               	movwf	(___fldiv@a+1)^0,c
  6154   00247A  0E00               	movlw	0
  6155   00247C  6E2F               	movwf	(___fldiv@a+2)^0,c
  6156   00247E  0E00               	movlw	0
  6157   002480  6E30               	movwf	(___fldiv@a+3)^0,c
  6158   002482                     l4444:
  6159   002482  502D               	movf	___fldiv@a^0,w,c
  6160   002484  102E               	iorwf	(___fldiv@a+1)^0,w,c
  6161   002486  102F               	iorwf	(___fldiv@a+2)^0,w,c
  6162   002488  1030               	iorwf	(___fldiv@a+3)^0,w,c
  6163   00248A  A4D8               	btfss	status,2,c
  6164   00248C  EF4A  F012         	goto	u3781
  6165   002490  EF4C  F012         	goto	u3780
  6166   002494                     u3781:
  6167   002494  EF64  F012         	goto	l4456
  6168   002498                     u3780:
  6169   002498  0E00               	movlw	0
  6170   00249A  6E29               	movwf	___fldiv@b^0,c
  6171   00249C  0E00               	movlw	0
  6172   00249E  6E2A               	movwf	(___fldiv@b+1)^0,c
  6173   0024A0  0E00               	movlw	0
  6174   0024A2  6E2B               	movwf	(___fldiv@b+2)^0,c
  6175   0024A4  0E00               	movlw	0
  6176   0024A6  6E2C               	movwf	(___fldiv@b+3)^0,c
  6177   0024A8  0E80               	movlw	128
  6178   0024AA  122B               	iorwf	(___fldiv@b+2)^0,f,c
  6179   0024AC  0E7F               	movlw	127
  6180   0024AE  122C               	iorwf	(___fldiv@b+3)^0,f,c
  6181   0024B0                     l4450:
  6182   0024B0  5039               	movf	___fldiv@sign^0,w,c
  6183   0024B2  122C               	iorwf	(___fldiv@b+3)^0,f,c
  6184   0024B4  C029  F029         	movff	___fldiv@b,?___fldiv
  6185   0024B8  C02A  F02A         	movff	___fldiv@b+1,?___fldiv+1
  6186   0024BC  C02B  F02B         	movff	___fldiv@b+2,?___fldiv+2
  6187   0024C0  C02C  F02C         	movff	___fldiv@b+3,?___fldiv+3
  6188   0024C4  EFA7  F013         	goto	l1316
  6189   0024C8                     l4456:
  6190   0024C8  5040               	movf	___fldiv@bexp^0,w,c
  6191   0024CA  A4D8               	btfss	status,2,c
  6192   0024CC  EF6A  F012         	goto	u3791
  6193   0024D0  EF6C  F012         	goto	u3790
  6194   0024D4                     u3791:
  6195   0024D4  EF76  F012         	goto	l4464
  6196   0024D8                     u3790:
  6197   0024D8  0E00               	movlw	0
  6198   0024DA  6E29               	movwf	?___fldiv^0,c
  6199   0024DC  0E00               	movlw	0
  6200   0024DE  6E2A               	movwf	(?___fldiv+1)^0,c
  6201   0024E0  0E00               	movlw	0
  6202   0024E2  6E2B               	movwf	(?___fldiv+2)^0,c
  6203   0024E4  0E00               	movlw	0
  6204   0024E6  6E2C               	movwf	(?___fldiv+3)^0,c
  6205   0024E8  EFA7  F013         	goto	l1316
  6206   0024EC                     l4464:
  6207   0024EC  5041               	movf	___fldiv@aexp^0,w,c
  6208   0024EE  C040  F031         	movff	___fldiv@bexp,??___fldiv
  6209   0024F2  6A32               	clrf	(??___fldiv+1)^0,c
  6210   0024F4  5E31               	subwf	??___fldiv^0,f,c
  6211   0024F6  0E00               	movlw	0
  6212   0024F8  5A32               	subwfb	(??___fldiv+1)^0,f,c
  6213   0024FA  0E7F               	movlw	127
  6214   0024FC  2431               	addwf	??___fldiv^0,w,c
  6215   0024FE  6E3A               	movwf	___fldiv@new_exp^0,c
  6216   002500  0E00               	movlw	0
  6217   002502  2032               	addwfc	(??___fldiv+1)^0,w,c
  6218   002504  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  6219   002506  C029  F035         	movff	___fldiv@b,___fldiv@rem
  6220   00250A  C02A  F036         	movff	___fldiv@b+1,___fldiv@rem+1
  6221   00250E  C02B  F037         	movff	___fldiv@b+2,___fldiv@rem+2
  6222   002512  C02C  F038         	movff	___fldiv@b+3,___fldiv@rem+3
  6223   002516  0E00               	movlw	0
  6224   002518  6E29               	movwf	___fldiv@b^0,c
  6225   00251A  0E00               	movlw	0
  6226   00251C  6E2A               	movwf	(___fldiv@b+1)^0,c
  6227   00251E  0E00               	movlw	0
  6228   002520  6E2B               	movwf	(___fldiv@b+2)^0,c
  6229   002522  0E00               	movlw	0
  6230   002524  6E2C               	movwf	(___fldiv@b+3)^0,c
  6231   002526  0E00               	movlw	0
  6232   002528  6E3C               	movwf	___fldiv@grs^0,c
  6233   00252A  0E00               	movlw	0
  6234   00252C  6E3D               	movwf	(___fldiv@grs+1)^0,c
  6235   00252E  0E00               	movlw	0
  6236   002530  6E3E               	movwf	(___fldiv@grs+2)^0,c
  6237   002532  0E00               	movlw	0
  6238   002534  6E3F               	movwf	(___fldiv@grs+3)^0,c
  6239   002536  0E00               	movlw	0
  6240   002538  6E41               	movwf	___fldiv@aexp^0,c
  6241   00253A  EFD7  F012         	goto	l1318
  6242   00253E                     l4474:
  6243   00253E  5041               	movf	___fldiv@aexp^0,w,c
  6244   002540  B4D8               	btfsc	status,2,c
  6245   002542  EFA5  F012         	goto	u3801
  6246   002546  EFA7  F012         	goto	u3800
  6247   00254A                     u3801:
  6248   00254A  EFBE  F012         	goto	l4482
  6249   00254E                     u3800:
  6250   00254E  90D8               	bcf	status,0,c
  6251   002550  3635               	rlcf	___fldiv@rem^0,f,c
  6252   002552  3636               	rlcf	(___fldiv@rem+1)^0,f,c
  6253   002554  3637               	rlcf	(___fldiv@rem+2)^0,f,c
  6254   002556  3638               	rlcf	(___fldiv@rem+3)^0,f,c
  6255   002558  90D8               	bcf	status,0,c
  6256   00255A  3629               	rlcf	___fldiv@b^0,f,c
  6257   00255C  362A               	rlcf	(___fldiv@b+1)^0,f,c
  6258   00255E  362B               	rlcf	(___fldiv@b+2)^0,f,c
  6259   002560  362C               	rlcf	(___fldiv@b+3)^0,f,c
  6260   002562  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  6261   002564  EFB6  F012         	goto	u3811
  6262   002568  EFB8  F012         	goto	u3810
  6263   00256C                     u3811:
  6264   00256C  EFB9  F012         	goto	l1321
  6265   002570                     u3810:
  6266   002570  8029               	bsf	___fldiv@b^0,0,c
  6267   002572                     l1321:
  6268   002572  90D8               	bcf	status,0,c
  6269   002574  363C               	rlcf	___fldiv@grs^0,f,c
  6270   002576  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  6271   002578  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  6272   00257A  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  6273   00257C                     l4482:
  6274   00257C  502D               	movf	___fldiv@a^0,w,c
  6275   00257E  5C35               	subwf	___fldiv@rem^0,w,c
  6276   002580  502E               	movf	(___fldiv@a+1)^0,w,c
  6277   002582  5836               	subwfb	(___fldiv@rem+1)^0,w,c
  6278   002584  502F               	movf	(___fldiv@a+2)^0,w,c
  6279   002586  5837               	subwfb	(___fldiv@rem+2)^0,w,c
  6280   002588  5030               	movf	(___fldiv@a+3)^0,w,c
  6281   00258A  5838               	subwfb	(___fldiv@rem+3)^0,w,c
  6282   00258C  A0D8               	btfss	status,0,c
  6283   00258E  EFCB  F012         	goto	u3821
  6284   002592  EFCD  F012         	goto	u3820
  6285   002596                     u3821:
  6286   002596  EFD6  F012         	goto	l4488
  6287   00259A                     u3820:
  6288   00259A  8C3F               	bsf	(___fldiv@grs+3)^0,6,c
  6289   00259C  502D               	movf	___fldiv@a^0,w,c
  6290   00259E  5E35               	subwf	___fldiv@rem^0,f,c
  6291   0025A0  502E               	movf	(___fldiv@a+1)^0,w,c
  6292   0025A2  5A36               	subwfb	(___fldiv@rem+1)^0,f,c
  6293   0025A4  502F               	movf	(___fldiv@a+2)^0,w,c
  6294   0025A6  5A37               	subwfb	(___fldiv@rem+2)^0,f,c
  6295   0025A8  5030               	movf	(___fldiv@a+3)^0,w,c
  6296   0025AA  5A38               	subwfb	(___fldiv@rem+3)^0,f,c
  6297   0025AC                     l4488:
  6298   0025AC  2A41               	incf	___fldiv@aexp^0,f,c
  6299   0025AE                     l1318:
  6300   0025AE  0E19               	movlw	25
  6301   0025B0  6441               	cpfsgt	___fldiv@aexp^0,c
  6302   0025B2  EFDD  F012         	goto	u3831
  6303   0025B6  EFDF  F012         	goto	u3830
  6304   0025BA                     u3831:
  6305   0025BA  EF9F  F012         	goto	l4474
  6306   0025BE                     u3830:
  6307   0025BE  5035               	movf	___fldiv@rem^0,w,c
  6308   0025C0  1036               	iorwf	(___fldiv@rem+1)^0,w,c
  6309   0025C2  1037               	iorwf	(___fldiv@rem+2)^0,w,c
  6310   0025C4  1038               	iorwf	(___fldiv@rem+3)^0,w,c
  6311   0025C6  B4D8               	btfsc	status,2,c
  6312   0025C8  EFE8  F012         	goto	u3841
  6313   0025CC  EFEA  F012         	goto	u3840
  6314   0025D0                     u3841:
  6315   0025D0  EF02  F013         	goto	l4500
  6316   0025D4                     u3840:
  6317   0025D4  803C               	bsf	___fldiv@grs^0,0,c
  6318   0025D6  EF02  F013         	goto	l4500
  6319   0025DA                     l4494:
  6320   0025DA  90D8               	bcf	status,0,c
  6321   0025DC  3629               	rlcf	___fldiv@b^0,f,c
  6322   0025DE  362A               	rlcf	(___fldiv@b+1)^0,f,c
  6323   0025E0  362B               	rlcf	(___fldiv@b+2)^0,f,c
  6324   0025E2  362C               	rlcf	(___fldiv@b+3)^0,f,c
  6325   0025E4  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  6326   0025E6  EFF7  F012         	goto	u3851
  6327   0025EA  EFF9  F012         	goto	u3850
  6328   0025EE                     u3851:
  6329   0025EE  EFFA  F012         	goto	l1327
  6330   0025F2                     u3850:
  6331   0025F2  8029               	bsf	___fldiv@b^0,0,c
  6332   0025F4                     l1327:
  6333   0025F4  90D8               	bcf	status,0,c
  6334   0025F6  363C               	rlcf	___fldiv@grs^0,f,c
  6335   0025F8  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  6336   0025FA  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  6337   0025FC  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  6338   0025FE  063A               	decf	___fldiv@new_exp^0,f,c
  6339   002600  A0D8               	btfss	status,0,c
  6340   002602  063B               	decf	(___fldiv@new_exp+1)^0,f,c
  6341   002604                     l4500:
  6342   002604  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  6343   002606  EF07  F013         	goto	u3861
  6344   00260A  EF09  F013         	goto	u3860
  6345   00260E                     u3861:
  6346   00260E  EFED  F012         	goto	l4494
  6347   002612                     u3860:
  6348   002612  0E00               	movlw	0
  6349   002614  6E41               	movwf	___fldiv@aexp^0,c
  6350   002616  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  6351   002618  EF10  F013         	goto	u3871
  6352   00261C  EF12  F013         	goto	u3870
  6353   002620                     u3871:
  6354   002620  EF36  F013         	goto	l1329
  6355   002624                     u3870:
  6356   002624  0EFF               	movlw	255
  6357   002626  143C               	andwf	___fldiv@grs^0,w,c
  6358   002628  6E31               	movwf	??___fldiv^0,c
  6359   00262A  0EFF               	movlw	255
  6360   00262C  143D               	andwf	(___fldiv@grs+1)^0,w,c
  6361   00262E  6E32               	movwf	(??___fldiv+1)^0,c
  6362   002630  0EFF               	movlw	255
  6363   002632  143E               	andwf	(___fldiv@grs+2)^0,w,c
  6364   002634  6E33               	movwf	(??___fldiv+2)^0,c
  6365   002636  0E7F               	movlw	127
  6366   002638  143F               	andwf	(___fldiv@grs+3)^0,w,c
  6367   00263A  6E34               	movwf	(??___fldiv+3)^0,c
  6368   00263C  5031               	movf	??___fldiv^0,w,c
  6369   00263E  1032               	iorwf	(??___fldiv+1)^0,w,c
  6370   002640  1033               	iorwf	(??___fldiv+2)^0,w,c
  6371   002642  1034               	iorwf	(??___fldiv+3)^0,w,c
  6372   002644  B4D8               	btfsc	status,2,c
  6373   002646  EF27  F013         	goto	u3881
  6374   00264A  EF29  F013         	goto	u3880
  6375   00264E                     u3881:
  6376   00264E  EF2D  F013         	goto	l1330
  6377   002652                     u3880:
  6378   002652                     l4508:
  6379   002652  0E01               	movlw	1
  6380   002654  6E41               	movwf	___fldiv@aexp^0,c
  6381   002656  EF36  F013         	goto	l1329
  6382   00265A                     l1330:
  6383   00265A  A029               	btfss	___fldiv@b^0,0,c
  6384   00265C  EF32  F013         	goto	u3891
  6385   002660  EF34  F013         	goto	u3890
  6386   002664                     u3891:
  6387   002664  EF36  F013         	goto	l1329
  6388   002668                     u3890:
  6389   002668  EF29  F013         	goto	l4508
  6390   00266C                     l1329:
  6391   00266C  5041               	movf	___fldiv@aexp^0,w,c
  6392   00266E  B4D8               	btfsc	status,2,c
  6393   002670  EF3C  F013         	goto	u3901
  6394   002674  EF3E  F013         	goto	u3900
  6395   002678                     u3901:
  6396   002678  EF62  F013         	goto	l4520
  6397   00267C                     u3900:
  6398   00267C  0E01               	movlw	1
  6399   00267E  2629               	addwf	___fldiv@b^0,f,c
  6400   002680  0E00               	movlw	0
  6401   002682  222A               	addwfc	(___fldiv@b+1)^0,f,c
  6402   002684  222B               	addwfc	(___fldiv@b+2)^0,f,c
  6403   002686  222C               	addwfc	(___fldiv@b+3)^0,f,c
  6404   002688  A02C               	btfss	(___fldiv@b+3)^0,0,c
  6405   00268A  EF49  F013         	goto	u3911
  6406   00268E  EF4B  F013         	goto	u3910
  6407   002692                     u3911:
  6408   002692  EF62  F013         	goto	l4520
  6409   002696                     u3910:
  6410   002696  C029  F031         	movff	___fldiv@b,??___fldiv
  6411   00269A  C02A  F032         	movff	___fldiv@b+1,??___fldiv+1
  6412   00269E  C02B  F033         	movff	___fldiv@b+2,??___fldiv+2
  6413   0026A2  C02C  F034         	movff	___fldiv@b+3,??___fldiv+3
  6414   0026A6  3434               	rlcf	(??___fldiv+3)^0,w,c
  6415   0026A8  3234               	rrcf	(??___fldiv+3)^0,f,c
  6416   0026AA  3233               	rrcf	(??___fldiv+2)^0,f,c
  6417   0026AC  3232               	rrcf	(??___fldiv+1)^0,f,c
  6418   0026AE  3231               	rrcf	??___fldiv^0,f,c
  6419   0026B0  C031  F029         	movff	??___fldiv,___fldiv@b
  6420   0026B4  C032  F02A         	movff	??___fldiv+1,___fldiv@b+1
  6421   0026B8  C033  F02B         	movff	??___fldiv+2,___fldiv@b+2
  6422   0026BC  C034  F02C         	movff	??___fldiv+3,___fldiv@b+3
  6423   0026C0  4A3A               	infsnz	___fldiv@new_exp^0,f,c
  6424   0026C2  2A3B               	incf	(___fldiv@new_exp+1)^0,f,c
  6425   0026C4                     l4520:
  6426   0026C4  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6427   0026C6  EF6D  F013         	goto	u3921
  6428   0026CA  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  6429   0026CC  E108               	bnz	u3920
  6430   0026CE  283A               	incf	___fldiv@new_exp^0,w,c
  6431   0026D0  A0D8               	btfss	status,0,c
  6432   0026D2  EF6D  F013         	goto	u3921
  6433   0026D6  EF6F  F013         	goto	u3920
  6434   0026DA                     u3921:
  6435   0026DA  EF7A  F013         	goto	l4524
  6436   0026DE                     u3920:
  6437   0026DE  0E00               	movlw	0
  6438   0026E0  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  6439   0026E2  683A               	setf	___fldiv@new_exp^0,c
  6440   0026E4  0E00               	movlw	0
  6441   0026E6  6E29               	movwf	___fldiv@b^0,c
  6442   0026E8  0E00               	movlw	0
  6443   0026EA  6E2A               	movwf	(___fldiv@b+1)^0,c
  6444   0026EC  0E00               	movlw	0
  6445   0026EE  6E2B               	movwf	(___fldiv@b+2)^0,c
  6446   0026F0  0E00               	movlw	0
  6447   0026F2  6E2C               	movwf	(___fldiv@b+3)^0,c
  6448   0026F4                     l4524:
  6449   0026F4  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6450   0026F6  EF87  F013         	goto	u3930
  6451   0026FA  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  6452   0026FC  E106               	bnz	u3931
  6453   0026FE  043A               	decf	___fldiv@new_exp^0,w,c
  6454   002700  B0D8               	btfsc	status,0,c
  6455   002702  EF85  F013         	goto	u3931
  6456   002706  EF87  F013         	goto	u3930
  6457   00270A                     u3931:
  6458   00270A  EF95  F013         	goto	l4528
  6459   00270E                     u3930:
  6460   00270E  0E00               	movlw	0
  6461   002710  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  6462   002712  0E00               	movlw	0
  6463   002714  6E3A               	movwf	___fldiv@new_exp^0,c
  6464   002716  0E00               	movlw	0
  6465   002718  6E29               	movwf	___fldiv@b^0,c
  6466   00271A  0E00               	movlw	0
  6467   00271C  6E2A               	movwf	(___fldiv@b+1)^0,c
  6468   00271E  0E00               	movlw	0
  6469   002720  6E2B               	movwf	(___fldiv@b+2)^0,c
  6470   002722  0E00               	movlw	0
  6471   002724  6E2C               	movwf	(___fldiv@b+3)^0,c
  6472   002726  0E00               	movlw	0
  6473   002728  6E39               	movwf	___fldiv@sign^0,c
  6474   00272A                     l4528:
  6475   00272A  C03A  F040         	movff	___fldiv@new_exp,___fldiv@bexp
  6476   00272E  A040               	btfss	___fldiv@bexp^0,0,c
  6477   002730  EF9C  F013         	goto	u3941
  6478   002734  EF9E  F013         	goto	u3940
  6479   002738                     u3941:
  6480   002738  EFA1  F013         	goto	l4534
  6481   00273C                     u3940:
  6482   00273C  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  6483   00273E  EFA2  F013         	goto	l4536
  6484   002742                     l4534:
  6485   002742  9E2B               	bcf	(___fldiv@b+2)^0,7,c
  6486   002744                     l4536:
  6487   002744  90D8               	bcf	status,0,c
  6488   002746  3040               	rrcf	___fldiv@bexp^0,w,c
  6489   002748  6E2C               	movwf	(___fldiv@b+3)^0,c
  6490   00274A  EF58  F012         	goto	l4450
  6491   00274E                     l1316:
  6492   00274E  0012               	return		;funcret
  6493   002750                     __end_of___fldiv:
  6494                           	callstack 0
  6495                           
  6496 ;; *************** function _initUSART4 *****************
  6497 ;; Defined at:
  6498 ;;		line 14 in file "serial.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;		None
  6501 ;; Auto vars:     Size  Location     Type
  6502 ;;		None
  6503 ;; Return value:  Size  Location     Type
  6504 ;;                  1    wreg      void 
  6505 ;; Registers used:
  6506 ;;		wreg, status,2
  6507 ;; Tracked objects:
  6508 ;;		On entry : 0/0
  6509 ;;		On exit  : 0/0
  6510 ;;		Unchanged: 0/0
  6511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6516 ;;Total ram usage:        0 bytes
  6517 ;; Hardware stack levels used: 1
  6518 ;; Hardware stack levels required when called: 1
  6519 ;; This function calls:
  6520 ;;		Nothing
  6521 ;; This function is called by:
  6522 ;;		_main
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           	psect	text19
  6527   004950                     __ptext19:
  6528                           	callstack 0
  6529   004950                     _initUSART4:
  6530                           	callstack 29
  6531   004950                     
  6532                           ;serial.c: 15:     RC0PPS = 0x12;
  6533   004950  0E12               	movlw	18
  6534   004952  010E               	movlb	14	; () banked
  6535   004954  6F62               	movwf	98,b	;volatile
  6536                           
  6537                           ;serial.c: 16:     RX4PPS = 0x11;
  6538   004956  0E11               	movlw	17
  6539   004958  6F15               	movwf	21,b	;volatile
  6540   00495A                     
  6541                           ; BSR set to: 14
  6542                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  6543   00495A  97E9               	bcf	233,3,b	;volatile
  6544   00495C                     
  6545                           ; BSR set to: 14
  6546                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  6547   00495C  95E8               	bcf	232,2,b	;volatile
  6548                           
  6549                           ;serial.c: 19:     SP4BRGL = 51;
  6550   00495E  0E33               	movlw	51
  6551   004960  6FE5               	movwf	229,b	;volatile
  6552                           
  6553                           ;serial.c: 20:     SP4BRGH = 0;
  6554   004962  0E00               	movlw	0
  6555   004964  6FE6               	movwf	230,b	;volatile
  6556   004966                     
  6557                           ; BSR set to: 14
  6558                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  6559   004966  89E7               	bsf	231,4,b	;volatile
  6560   004968                     
  6561                           ; BSR set to: 14
  6562                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  6563   004968  8BE8               	bsf	232,5,b	;volatile
  6564   00496A                     
  6565                           ; BSR set to: 14
  6566                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  6567   00496A  8FE7               	bsf	231,7,b	;volatile
  6568   00496C                     
  6569                           ; BSR set to: 14
  6570   00496C  0012               	return		;funcret
  6571   00496E                     __end_of_initUSART4:
  6572                           	callstack 0
  6573                           
  6574 ;; *************** function _initDCmotorsPWM *****************
  6575 ;; Defined at:
  6576 ;;		line 5 in file "dc_motor.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;		None
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      void 
  6583 ;; Registers used:
  6584 ;;		wreg, status,2
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6590 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6593 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6594 ;;Total ram usage:        2 bytes
  6595 ;; Hardware stack levels used: 1
  6596 ;; Hardware stack levels required when called: 1
  6597 ;; This function calls:
  6598 ;;		Nothing
  6599 ;; This function is called by:
  6600 ;;		_main
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           	psect	text20
  6605   003E20                     __ptext20:
  6606                           	callstack 0
  6607   003E20                     _initDCmotorsPWM:
  6608                           	callstack 29
  6609   003E20                     
  6610                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  6611   003E20  9485               	bcf	133,2,c	;volatile
  6612                           
  6613                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  6614   003E22  9E83               	bcf	131,7,c	;volatile
  6615                           
  6616                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  6617   003E24  9885               	bcf	133,4,c	;volatile
  6618                           
  6619                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  6620   003E26  9C87               	bcf	135,6,c	;volatile
  6621                           
  6622                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  6623   003E28  947D               	bcf	125,2,c	;volatile
  6624                           
  6625                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  6626   003E2A  9E7B               	bcf	123,7,c	;volatile
  6627                           
  6628                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  6629   003E2C  987D               	bcf	125,4,c	;volatile
  6630                           
  6631                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  6632   003E2E  9C7F               	bcf	127,6,c	;volatile
  6633   003E30                     
  6634                           ;dc_motor.c: 18:     RE2PPS=0x05;
  6635   003E30  0E05               	movlw	5
  6636   003E32  010E               	movlb	14	; () banked
  6637   003E34  6F74               	movwf	116,b	;volatile
  6638                           
  6639                           ;dc_motor.c: 19:     RE4PPS=0x06;
  6640   003E36  0E06               	movlw	6
  6641   003E38  6F76               	movwf	118,b	;volatile
  6642                           
  6643                           ;dc_motor.c: 20:     RC7PPS=0x07;
  6644   003E3A  0E07               	movlw	7
  6645   003E3C  6F69               	movwf	105,b	;volatile
  6646                           
  6647                           ;dc_motor.c: 21:     RG6PPS=0x08;
  6648   003E3E  0E08               	movlw	8
  6649   003E40  6F88               	movwf	136,b	;volatile
  6650                           
  6651                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  6652   003E42  50BD               	movf	189,w,c	;volatile
  6653   003E44  0B8F               	andlw	-113
  6654   003E46  0940               	iorlw	64
  6655   003E48  6EBD               	movwf	189,c	;volatile
  6656                           
  6657                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  6658   003E4A  0EE0               	movlw	-32
  6659   003E4C  16BE               	andwf	190,f,c	;volatile
  6660                           
  6661                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  6662   003E4E  50BF               	movf	191,w,c	;volatile
  6663   003E50  0BF0               	andlw	-16
  6664   003E52  0901               	iorlw	1
  6665   003E54  6EBF               	movwf	191,c	;volatile
  6666   003E56                     
  6667                           ; BSR set to: 14
  6668                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  6669   003E56  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  6670   003E5A                     
  6671                           ; BSR set to: 14
  6672                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  6673   003E5A  8EBD               	bsf	189,7,c	;volatile
  6674                           
  6675                           ;dc_motor.c: 35:     CCPR1H=0;
  6676   003E5C  0E00               	movlw	0
  6677   003E5E  6EAA               	movwf	170,c	;volatile
  6678                           
  6679                           ;dc_motor.c: 36:     CCPR2H=0;
  6680   003E60  0E00               	movlw	0
  6681   003E62  6EA6               	movwf	166,c	;volatile
  6682                           
  6683                           ;dc_motor.c: 37:     CCPR3H=0;
  6684   003E64  0E00               	movlw	0
  6685   003E66  010F               	movlb	15	; () banked
  6686   003E68  6F25               	movwf	37,b	;volatile
  6687                           
  6688                           ;dc_motor.c: 38:     CCPR4H=0;
  6689   003E6A  0E00               	movlw	0
  6690   003E6C  6F21               	movwf	33,b	;volatile
  6691                           
  6692                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  6693   003E6E  0EFC               	movlw	-4
  6694   003E70  16AD               	andwf	173,f,c	;volatile
  6695                           
  6696                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  6697   003E72  0EF3               	movlw	-13
  6698   003E74  16AD               	andwf	173,f,c	;volatile
  6699                           
  6700                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  6701   003E76  0ECF               	movlw	-49
  6702   003E78  16AD               	andwf	173,f,c	;volatile
  6703                           
  6704                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  6705   003E7A  0E3F               	movlw	-193
  6706   003E7C  16AD               	andwf	173,f,c	;volatile
  6707   003E7E                     
  6708                           ; BSR set to: 15
  6709                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  6710   003E7E  88AB               	bsf	171,4,c	;volatile
  6711                           
  6712                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  6713   003E80  50AB               	movf	171,w,c	;volatile
  6714   003E82  0BF0               	andlw	-16
  6715   003E84  090C               	iorlw	12
  6716   003E86  6EAB               	movwf	171,c	;volatile
  6717   003E88                     
  6718                           ; BSR set to: 15
  6719                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  6720   003E88  8EAB               	bsf	171,7,c	;volatile
  6721   003E8A                     
  6722                           ; BSR set to: 15
  6723                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  6724   003E8A  88A7               	bsf	167,4,c	;volatile
  6725                           
  6726                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  6727   003E8C  50A7               	movf	167,w,c	;volatile
  6728   003E8E  0BF0               	andlw	-16
  6729   003E90  090C               	iorlw	12
  6730   003E92  6EA7               	movwf	167,c	;volatile
  6731   003E94                     
  6732                           ; BSR set to: 15
  6733                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  6734   003E94  8EA7               	bsf	167,7,c	;volatile
  6735   003E96                     
  6736                           ; BSR set to: 15
  6737                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  6738   003E96  8926               	bsf	38,4,b	;volatile
  6739                           
  6740                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  6741   003E98  5126               	movf	38,w,b	;volatile
  6742   003E9A  0BF0               	andlw	-16
  6743   003E9C  090C               	iorlw	12
  6744   003E9E  6F26               	movwf	38,b	;volatile
  6745   003EA0                     
  6746                           ; BSR set to: 15
  6747                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6748   003EA0  8F26               	bsf	38,7,b	;volatile
  6749   003EA2                     
  6750                           ; BSR set to: 15
  6751                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6752   003EA2  8922               	bsf	34,4,b	;volatile
  6753                           
  6754                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6755   003EA4  5122               	movf	34,w,b	;volatile
  6756   003EA6  0BF0               	andlw	-16
  6757   003EA8  090C               	iorlw	12
  6758   003EAA  6F22               	movwf	34,b	;volatile
  6759   003EAC                     
  6760                           ; BSR set to: 15
  6761                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6762   003EAC  8F22               	bsf	34,7,b	;volatile
  6763   003EAE                     
  6764                           ; BSR set to: 15
  6765   003EAE  0012               	return		;funcret
  6766   003EB0                     __end_of_initDCmotorsPWM:
  6767                           	callstack 0
  6768                           
  6769 ;; *************** function _get16bitTMR0val *****************
  6770 ;; Defined at:
  6771 ;;		line 34 in file "timers.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;  path_step       2    6[COMRAM] unsigned int 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  combined_val    2   12[COMRAM] int 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  2    6[COMRAM] unsigned int 
  6778 ;; Registers used:
  6779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6787 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6788 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6789 ;;Total ram usage:        8 bytes
  6790 ;; Hardware stack levels used: 1
  6791 ;; Hardware stack levels required when called: 2
  6792 ;; This function calls:
  6793 ;;		_logAction
  6794 ;; This function is called by:
  6795 ;;		_main
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           	psect	text21
  6800   00445E                     __ptext21:
  6801                           	callstack 0
  6802   00445E                     _get16bitTMR0val:
  6803                           	callstack 28
  6804   00445E                     
  6805                           ;timers.c: 34: unsigned int get16bitTMR0val(unsigned int path_step);timers.c: 35: {;time
      +                          rs.c: 36:     int combined_value;;timers.c: 37:     combined_value = TMR0L | (TMR0H << 8
      +                          );
  6806   00445E  50D4               	movf	212,w,c	;volatile
  6807   004460  6E0A               	movwf	(??_get16bitTMR0val+1)^0,c
  6808   004462  6A09               	clrf	??_get16bitTMR0val^0,c
  6809   004464  50D3               	movf	211,w,c	;volatile
  6810   004466  6E0B               	movwf	(??_get16bitTMR0val+2)^0,c
  6811   004468  6A0C               	clrf	(??_get16bitTMR0val+3)^0,c
  6812   00446A  5009               	movf	??_get16bitTMR0val^0,w,c
  6813   00446C  100B               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6814   00446E  6E0D               	movwf	get16bitTMR0val@combined_value^0,c
  6815   004470  500A               	movf	(??_get16bitTMR0val+1)^0,w,c
  6816   004472  100C               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6817   004474  6E0E               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6818   004476                     
  6819                           ;timers.c: 38:     logAction(0,combined_value, path_step);
  6820   004476  C00D  F002         	movff	get16bitTMR0val@combined_value,logAction@newTime
  6821   00447A  C00E  F003         	movff	get16bitTMR0val@combined_value+1,logAction@newTime+1
  6822   00447E  C007  F004         	movff	get16bitTMR0val@path_step,logAction@path_step
  6823   004482  C008  F005         	movff	get16bitTMR0val@path_step+1,logAction@path_step+1
  6824   004486  0E00               	movlw	0
  6825   004488  EC8A  F021         	call	_logAction
  6826   00448C                     
  6827                           ;timers.c: 39:     path_step++;
  6828   00448C  4A07               	infsnz	get16bitTMR0val@path_step^0,f,c
  6829   00448E  2A08               	incf	(get16bitTMR0val@path_step+1)^0,f,c
  6830   004490                     
  6831                           ;timers.c: 40:     return path_step;
  6832   004490  C007  F007         	movff	get16bitTMR0val@path_step,?_get16bitTMR0val
  6833   004494  C008  F008         	movff	get16bitTMR0val@path_step+1,?_get16bitTMR0val+1
  6834   004498  0012               	return		;funcret
  6835   00449A                     __end_of_get16bitTMR0val:
  6836                           	callstack 0
  6837                           
  6838 ;; *************** function _decision *****************
  6839 ;; Defined at:
  6840 ;;		line 275 in file "color.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;  hue             2   32[COMRAM] unsigned int 
  6843 ;;  path_step       2   34[COMRAM] unsigned int 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  color           2    0        unsigned int 
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  2   32[COMRAM] unsigned int 
  6848 ;; Registers used:
  6849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6855 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6858 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6859 ;;Total ram usage:        4 bytes
  6860 ;; Hardware stack levels used: 1
  6861 ;; Hardware stack levels required when called: 6
  6862 ;; This function calls:
  6863 ;;		_logAction
  6864 ;;		_moveBlue
  6865 ;;		_moveGreen
  6866 ;;		_moveLightBlue
  6867 ;;		_moveOrange
  6868 ;;		_movePink
  6869 ;;		_moveRed
  6870 ;;		_moveYellow
  6871 ;; This function is called by:
  6872 ;;		_main
  6873 ;; This function uses a non-reentrant model
  6874 ;;
  6875                           
  6876                           	psect	text22
  6877   002750                     __ptext22:
  6878                           	callstack 0
  6879   002750                     _decision:
  6880                           	callstack 24
  6881   002750                     
  6882                           ;color.c: 280:     unsigned int color;;color.c: 282:     if (hue<=10 || hue>=355) {
  6883   002750  5022               	movf	(decision@hue+1)^0,w,c
  6884   002752  E109               	bnz	u5410
  6885   002754  0E0B               	movlw	11
  6886   002756  5C21               	subwf	decision@hue^0,w,c
  6887   002758  A0D8               	btfss	status,0,c
  6888   00275A  EFB1  F013         	goto	u5411
  6889   00275E  EFB3  F013         	goto	u5410
  6890   002762                     u5411:
  6891   002762  EFBE  F013         	goto	l6174
  6892   002766                     u5410:
  6893   002766  0E63               	movlw	99
  6894   002768  5C21               	subwf	decision@hue^0,w,c
  6895   00276A  0E01               	movlw	1
  6896   00276C  5822               	subwfb	(decision@hue+1)^0,w,c
  6897   00276E  A0D8               	btfss	status,0,c
  6898   002770  EFBC  F013         	goto	u5421
  6899   002774  EFBE  F013         	goto	u5420
  6900   002778                     u5421:
  6901   002778  EFD3  F013         	goto	l6182
  6902   00277C                     u5420:
  6903   00277C                     l6174:
  6904                           
  6905                           ;color.c: 283:         moveRed(&motorL, &motorR);
  6906   00277C  0EF4               	movlw	low _motorL
  6907   00277E  6E1D               	movwf	moveRed@mL^0,c
  6908   002780  0EEB               	movlw	low _motorR
  6909   002782  6E1E               	movwf	moveRed@mR^0,c
  6910   002784  ECE9  F022         	call	_moveRed	;wreg free
  6911   002788                     
  6912                           ;color.c: 284:         logAction(1,0, path_step);
  6913   002788  0E00               	movlw	0
  6914   00278A  6E03               	movwf	(logAction@newTime+1)^0,c
  6915   00278C  0E00               	movlw	0
  6916   00278E  6E02               	movwf	logAction@newTime^0,c
  6917   002790  C023  F004         	movff	decision@path_step,logAction@path_step
  6918   002794  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6919   002798  0E01               	movlw	1
  6920   00279A  EC8A  F021         	call	_logAction
  6921   00279E                     l6180:
  6922                           
  6923                           ;color.c: 286:         path_step++;
  6924   00279E  4A23               	infsnz	decision@path_step^0,f,c
  6925   0027A0  2A24               	incf	(decision@path_step+1)^0,f,c
  6926                           
  6927                           ;color.c: 287:     }
  6928   0027A2  EFC9  F014         	goto	l6254
  6929   0027A6                     l6182:
  6930   0027A6  5022               	movf	(decision@hue+1)^0,w,c
  6931   0027A8  E109               	bnz	u5430
  6932   0027AA  0E69               	movlw	105
  6933   0027AC  5C21               	subwf	decision@hue^0,w,c
  6934   0027AE  A0D8               	btfss	status,0,c
  6935   0027B0  EFDC  F013         	goto	u5431
  6936   0027B4  EFDE  F013         	goto	u5430
  6937   0027B8                     u5431:
  6938   0027B8  EFFC  F013         	goto	l6194
  6939   0027BC                     u5430:
  6940   0027BC  5022               	movf	(decision@hue+1)^0,w,c
  6941   0027BE  E107               	bnz	u5441
  6942   0027C0  0E83               	movlw	131
  6943   0027C2  5C21               	subwf	decision@hue^0,w,c
  6944   0027C4  B0D8               	btfsc	status,0,c
  6945   0027C6  EFE7  F013         	goto	u5441
  6946   0027CA  EFE9  F013         	goto	u5440
  6947   0027CE                     u5441:
  6948   0027CE  EFFC  F013         	goto	l6194
  6949   0027D2                     u5440:
  6950   0027D2                     
  6951                           ;color.c: 289:         moveGreen(&motorL, &motorR);
  6952   0027D2  0EF4               	movlw	low _motorL
  6953   0027D4  6E1D               	movwf	moveGreen@mL^0,c
  6954   0027D6  0EEB               	movlw	low _motorR
  6955   0027D8  6E1E               	movwf	moveGreen@mR^0,c
  6956   0027DA  EC98  F023         	call	_moveGreen	;wreg free
  6957   0027DE                     
  6958                           ;color.c: 290:         logAction(2,0, path_step);
  6959   0027DE  0E00               	movlw	0
  6960   0027E0  6E03               	movwf	(logAction@newTime+1)^0,c
  6961   0027E2  0E00               	movlw	0
  6962   0027E4  6E02               	movwf	logAction@newTime^0,c
  6963   0027E6  C023  F004         	movff	decision@path_step,logAction@path_step
  6964   0027EA  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  6965   0027EE  0E02               	movlw	2
  6966   0027F0  EC8A  F021         	call	_logAction
  6967   0027F4  EFCF  F013         	goto	l6180
  6968   0027F8                     l6194:
  6969   0027F8  5022               	movf	(decision@hue+1)^0,w,c
  6970   0027FA  E109               	bnz	u5450
  6971   0027FC  0EE6               	movlw	230
  6972   0027FE  5C21               	subwf	decision@hue^0,w,c
  6973   002800  A0D8               	btfss	status,0,c
  6974   002802  EF05  F014         	goto	u5451
  6975   002806  EF07  F014         	goto	u5450
  6976   00280A                     u5451:
  6977   00280A  EF25  F014         	goto	l6206
  6978   00280E                     u5450:
  6979   00280E  5022               	movf	(decision@hue+1)^0,w,c
  6980   002810  E107               	bnz	u5461
  6981   002812  0EF1               	movlw	241
  6982   002814  5C21               	subwf	decision@hue^0,w,c
  6983   002816  B0D8               	btfsc	status,0,c
  6984   002818  EF10  F014         	goto	u5461
  6985   00281C  EF12  F014         	goto	u5460
  6986   002820                     u5461:
  6987   002820  EF25  F014         	goto	l6206
  6988   002824                     u5460:
  6989   002824                     
  6990                           ;color.c: 294:         moveBlue(&motorL,&motorR);
  6991   002824  0EF4               	movlw	low _motorL
  6992   002826  6E1D               	movwf	moveBlue@mL^0,c
  6993   002828  0EEB               	movlw	low _motorR
  6994   00282A  6E1E               	movwf	moveBlue@mR^0,c
  6995   00282C  ECB1  F023         	call	_moveBlue	;wreg free
  6996   002830                     
  6997                           ;color.c: 295:         logAction(3,0, path_step);
  6998   002830  0E00               	movlw	0
  6999   002832  6E03               	movwf	(logAction@newTime+1)^0,c
  7000   002834  0E00               	movlw	0
  7001   002836  6E02               	movwf	logAction@newTime^0,c
  7002   002838  C023  F004         	movff	decision@path_step,logAction@path_step
  7003   00283C  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  7004   002840  0E03               	movlw	3
  7005   002842  EC8A  F021         	call	_logAction
  7006   002846  EFCF  F013         	goto	l6180
  7007   00284A                     l6206:
  7008   00284A  5022               	movf	(decision@hue+1)^0,w,c
  7009   00284C  E109               	bnz	u5470
  7010   00284E  0ED8               	movlw	216
  7011   002850  5C21               	subwf	decision@hue^0,w,c
  7012   002852  A0D8               	btfss	status,0,c
  7013   002854  EF2E  F014         	goto	u5471
  7014   002858  EF30  F014         	goto	u5470
  7015   00285C                     u5471:
  7016   00285C  EF4E  F014         	goto	l6218
  7017   002860                     u5470:
  7018   002860  5022               	movf	(decision@hue+1)^0,w,c
  7019   002862  E107               	bnz	u5481
  7020   002864  0EDE               	movlw	222
  7021   002866  5C21               	subwf	decision@hue^0,w,c
  7022   002868  B0D8               	btfsc	status,0,c
  7023   00286A  EF39  F014         	goto	u5481
  7024   00286E  EF3B  F014         	goto	u5480
  7025   002872                     u5481:
  7026   002872  EF4E  F014         	goto	l6218
  7027   002876                     u5480:
  7028   002876                     
  7029                           ;color.c: 299:         moveLightBlue(&motorL,&motorR);
  7030   002876  0EF4               	movlw	low _motorL
  7031   002878  6E1D               	movwf	moveLightBlue@mL^0,c
  7032   00287A  0EEB               	movlw	low _motorR
  7033   00287C  6E1E               	movwf	moveLightBlue@mR^0,c
  7034   00287E  EC66  F023         	call	_moveLightBlue	;wreg free
  7035   002882                     
  7036                           ;color.c: 300:         logAction(5,0, path_step);
  7037   002882  0E00               	movlw	0
  7038   002884  6E03               	movwf	(logAction@newTime+1)^0,c
  7039   002886  0E00               	movlw	0
  7040   002888  6E02               	movwf	logAction@newTime^0,c
  7041   00288A  C023  F004         	movff	decision@path_step,logAction@path_step
  7042   00288E  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  7043   002892  0E05               	movlw	5
  7044   002894  EC8A  F021         	call	_logAction
  7045   002898  EFCF  F013         	goto	l6180
  7046   00289C                     l6218:
  7047   00289C  0E2E               	movlw	46
  7048   00289E  5C21               	subwf	decision@hue^0,w,c
  7049   0028A0  0E01               	movlw	1
  7050   0028A2  5822               	subwfb	(decision@hue+1)^0,w,c
  7051   0028A4  A0D8               	btfss	status,0,c
  7052   0028A6  EF57  F014         	goto	u5491
  7053   0028AA  EF59  F014         	goto	u5490
  7054   0028AE                     u5491:
  7055   0028AE  EF77  F014         	goto	l6230
  7056   0028B2                     u5490:
  7057   0028B2  0E5B               	movlw	91
  7058   0028B4  5C21               	subwf	decision@hue^0,w,c
  7059   0028B6  0E01               	movlw	1
  7060   0028B8  5822               	subwfb	(decision@hue+1)^0,w,c
  7061   0028BA  B0D8               	btfsc	status,0,c
  7062   0028BC  EF62  F014         	goto	u5501
  7063   0028C0  EF64  F014         	goto	u5500
  7064   0028C4                     u5501:
  7065   0028C4  EF77  F014         	goto	l6230
  7066   0028C8                     u5500:
  7067   0028C8                     
  7068                           ;color.c: 304:         moveYellow(&motorL,&motorR);
  7069   0028C8  0EF4               	movlw	low _motorL
  7070   0028CA  6E1D               	movwf	moveYellow@mL^0,c
  7071   0028CC  0EEB               	movlw	low _motorR
  7072   0028CE  6E1E               	movwf	moveYellow@mR^0,c
  7073   0028D0  ECD0  F022         	call	_moveYellow	;wreg free
  7074   0028D4                     
  7075                           ;color.c: 305:         logAction(1,0, path_step);
  7076   0028D4  0E00               	movlw	0
  7077   0028D6  6E03               	movwf	(logAction@newTime+1)^0,c
  7078   0028D8  0E00               	movlw	0
  7079   0028DA  6E02               	movwf	logAction@newTime^0,c
  7080   0028DC  C023  F004         	movff	decision@path_step,logAction@path_step
  7081   0028E0  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  7082   0028E4  0E01               	movlw	1
  7083   0028E6  EC8A  F021         	call	_logAction
  7084   0028EA  EFCF  F013         	goto	l6180
  7085   0028EE                     l6230:
  7086   0028EE  5022               	movf	(decision@hue+1)^0,w,c
  7087   0028F0  E109               	bnz	u5510
  7088   0028F2  0E0F               	movlw	15
  7089   0028F4  5C21               	subwf	decision@hue^0,w,c
  7090   0028F6  A0D8               	btfss	status,0,c
  7091   0028F8  EF80  F014         	goto	u5511
  7092   0028FC  EF82  F014         	goto	u5510
  7093   002900                     u5511:
  7094   002900  EFA0  F014         	goto	l6242
  7095   002904                     u5510:
  7096   002904  5022               	movf	(decision@hue+1)^0,w,c
  7097   002906  E107               	bnz	u5521
  7098   002908  0E24               	movlw	36
  7099   00290A  5C21               	subwf	decision@hue^0,w,c
  7100   00290C  B0D8               	btfsc	status,0,c
  7101   00290E  EF8B  F014         	goto	u5521
  7102   002912  EF8D  F014         	goto	u5520
  7103   002916                     u5521:
  7104   002916  EFA0  F014         	goto	l6242
  7105   00291A                     u5520:
  7106   00291A                     
  7107                           ;color.c: 309:         moveOrange(&motorL,&motorR);
  7108   00291A  0EF4               	movlw	low _motorL
  7109   00291C  6E1D               	movwf	moveOrange@mL^0,c
  7110   00291E  0EEB               	movlw	low _motorR
  7111   002920  6E1E               	movwf	moveOrange@mR^0,c
  7112   002922  EC34  F023         	call	_moveOrange	;wreg free
  7113   002926                     
  7114                           ;color.c: 310:         logAction(4,0, path_step);
  7115   002926  0E00               	movlw	0
  7116   002928  6E03               	movwf	(logAction@newTime+1)^0,c
  7117   00292A  0E00               	movlw	0
  7118   00292C  6E02               	movwf	logAction@newTime^0,c
  7119   00292E  C023  F004         	movff	decision@path_step,logAction@path_step
  7120   002932  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  7121   002936  0E04               	movlw	4
  7122   002938  EC8A  F021         	call	_logAction
  7123   00293C  EFCF  F013         	goto	l6180
  7124   002940                     l6242:
  7125   002940  5022               	movf	(decision@hue+1)^0,w,c
  7126   002942  E109               	bnz	u5530
  7127   002944  0EF4               	movlw	244
  7128   002946  5C21               	subwf	decision@hue^0,w,c
  7129   002948  A0D8               	btfss	status,0,c
  7130   00294A  EFA9  F014         	goto	u5531
  7131   00294E  EFAB  F014         	goto	u5530
  7132   002952                     u5531:
  7133   002952  EFC9  F014         	goto	l167
  7134   002956                     u5530:
  7135   002956  5022               	movf	(decision@hue+1)^0,w,c
  7136   002958  E107               	bnz	u5541
  7137   00295A  0EFC               	movlw	252
  7138   00295C  5C21               	subwf	decision@hue^0,w,c
  7139   00295E  B0D8               	btfsc	status,0,c
  7140   002960  EFB4  F014         	goto	u5541
  7141   002964  EFB6  F014         	goto	u5540
  7142   002968                     u5541:
  7143   002968  EFC9  F014         	goto	l167
  7144   00296C                     u5540:
  7145   00296C                     
  7146                           ;color.c: 314:         movePink(&motorL,&motorR);
  7147   00296C  0EF4               	movlw	low _motorL
  7148   00296E  6E1D               	movwf	movePink@mL^0,c
  7149   002970  0EEB               	movlw	low _motorR
  7150   002972  6E1E               	movwf	movePink@mR^0,c
  7151   002974  EC02  F023         	call	_movePink	;wreg free
  7152   002978                     
  7153                           ;color.c: 315:         logAction(2,0, path_step);
  7154   002978  0E00               	movlw	0
  7155   00297A  6E03               	movwf	(logAction@newTime+1)^0,c
  7156   00297C  0E00               	movlw	0
  7157   00297E  6E02               	movwf	logAction@newTime^0,c
  7158   002980  C023  F004         	movff	decision@path_step,logAction@path_step
  7159   002984  C024  F005         	movff	decision@path_step+1,logAction@path_step+1
  7160   002988  0E02               	movlw	2
  7161   00298A  EC8A  F021         	call	_logAction
  7162   00298E  EFCF  F013         	goto	l6180
  7163   002992                     l167:
  7164   002992                     l6254:
  7165                           
  7166                           ;color.c: 321:     return path_step;
  7167   002992  C023  F021         	movff	decision@path_step,?_decision
  7168   002996  C024  F022         	movff	decision@path_step+1,?_decision+1
  7169   00299A  0012               	return		;funcret
  7170   00299C                     __end_of_decision:
  7171                           	callstack 0
  7172                           
  7173 ;; *************** function _moveYellow *****************
  7174 ;; Defined at:
  7175 ;;		line 284 in file "dc_motor.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7178 ;;		 -> motorL(9), 
  7179 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7180 ;;		 -> motorR(9), 
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;		None
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  1    wreg      void 
  7185 ;; Registers used:
  7186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7187 ;; Tracked objects:
  7188 ;;		On entry : 0/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7192 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7194 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7195 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7196 ;;Total ram usage:        4 bytes
  7197 ;; Hardware stack levels used: 1
  7198 ;; Hardware stack levels required when called: 5
  7199 ;; This function calls:
  7200 ;;		_backOneAndHalf
  7201 ;;		_right90
  7202 ;; This function is called by:
  7203 ;;		_decision
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text23
  7208   0045A0                     __ptext23:
  7209                           	callstack 0
  7210   0045A0                     _moveYellow:
  7211                           	callstack 24
  7212   0045A0                     
  7213                           ;dc_motor.c: 284: void moveYellow(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          285: {;dc_motor.c: 287:     backOneAndHalf(mL,mR);
  7214   0045A0  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  7215   0045A4  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  7216   0045A8  EC1B  F023         	call	_backOneAndHalf	;wreg free
  7217   0045AC                     
  7218                           ;dc_motor.c: 288:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7219   0045AC  0E29               	movlw	41
  7220   0045AE  6E20               	movwf	(??_moveYellow+1)^0,c
  7221   0045B0  0E96               	movlw	150
  7222   0045B2  6E1F               	movwf	??_moveYellow^0,c
  7223   0045B4  0E7F               	movlw	127
  7224   0045B6                     u5837:
  7225   0045B6  2EE8               	decfsz	wreg,f,c
  7226   0045B8  D7FE               	bra	u5837
  7227   0045BA  2E1F               	decfsz	??_moveYellow^0,f,c
  7228   0045BC  D7FC               	bra	u5837
  7229   0045BE  2E20               	decfsz	(??_moveYellow+1)^0,f,c
  7230   0045C0  D7FA               	bra	u5837
  7231   0045C2  0000               	nop	
  7232   0045C4                     
  7233                           ;dc_motor.c: 289:     right90(mL,mR);
  7234   0045C4  C01D  F019         	movff	moveYellow@mL,right90@mL
  7235   0045C8  C01E  F01A         	movff	moveYellow@mR,right90@mR
  7236   0045CC  ECFC  F023         	call	_right90	;wreg free
  7237   0045D0  0012               	return		;funcret
  7238   0045D2                     __end_of_moveYellow:
  7239                           	callstack 0
  7240                           
  7241 ;; *************** function _moveRed *****************
  7242 ;; Defined at:
  7243 ;;		line 255 in file "dc_motor.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7246 ;;		 -> motorL(9), 
  7247 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7248 ;;		 -> motorR(9), 
  7249 ;; Auto vars:     Size  Location     Type
  7250 ;;		None
  7251 ;; Return value:  Size  Location     Type
  7252 ;;                  1    wreg      void 
  7253 ;; Registers used:
  7254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7255 ;; Tracked objects:
  7256 ;;		On entry : 0/0
  7257 ;;		On exit  : 0/0
  7258 ;;		Unchanged: 0/0
  7259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7262 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7263 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7264 ;;Total ram usage:        4 bytes
  7265 ;; Hardware stack levels used: 1
  7266 ;; Hardware stack levels required when called: 5
  7267 ;; This function calls:
  7268 ;;		_backHalf
  7269 ;;		_right90
  7270 ;; This function is called by:
  7271 ;;		_decision
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           	psect	text24
  7276   0045D2                     __ptext24:
  7277                           	callstack 0
  7278   0045D2                     _moveRed:
  7279                           	callstack 24
  7280   0045D2                     
  7281                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 256
      +                          : {;dc_motor.c: 258:     backHalf(mL,mR);
  7282   0045D2  C01D  F019         	movff	moveRed@mL,backHalf@mL
  7283   0045D6  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  7284   0045DA  EC2C  F024         	call	_backHalf	;wreg free
  7285   0045DE                     
  7286                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7287   0045DE  0E29               	movlw	41
  7288   0045E0  6E20               	movwf	(??_moveRed+1)^0,c
  7289   0045E2  0E96               	movlw	150
  7290   0045E4  6E1F               	movwf	??_moveRed^0,c
  7291   0045E6  0E7F               	movlw	127
  7292   0045E8                     u5847:
  7293   0045E8  2EE8               	decfsz	wreg,f,c
  7294   0045EA  D7FE               	bra	u5847
  7295   0045EC  2E1F               	decfsz	??_moveRed^0,f,c
  7296   0045EE  D7FC               	bra	u5847
  7297   0045F0  2E20               	decfsz	(??_moveRed+1)^0,f,c
  7298   0045F2  D7FA               	bra	u5847
  7299   0045F4  0000               	nop	
  7300   0045F6                     
  7301                           ;dc_motor.c: 260:     right90(mL,mR);
  7302   0045F6  C01D  F019         	movff	moveRed@mL,right90@mL
  7303   0045FA  C01E  F01A         	movff	moveRed@mR,right90@mR
  7304   0045FE  ECFC  F023         	call	_right90	;wreg free
  7305   004602  0012               	return		;funcret
  7306   004604                     __end_of_moveRed:
  7307                           	callstack 0
  7308                           
  7309 ;; *************** function _right90 *****************
  7310 ;; Defined at:
  7311 ;;		line 193 in file "dc_motor.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7314 ;;		 -> motorL(9), 
  7315 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7316 ;;		 -> motorR(9), 
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;		None
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  1    wreg      void 
  7321 ;; Registers used:
  7322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7328 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7330 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7331 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7332 ;;Total ram usage:        4 bytes
  7333 ;; Hardware stack levels used: 1
  7334 ;; Hardware stack levels required when called: 4
  7335 ;; This function calls:
  7336 ;;		_stop
  7337 ;;		_turnRight
  7338 ;; This function is called by:
  7339 ;;		_moveRed
  7340 ;;		_moveYellow
  7341 ;;		_reverseTurn
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           	psect	text25
  7346   0047F8                     __ptext25:
  7347                           	callstack 0
  7348   0047F8                     _right90:
  7349                           	callstack 24
  7350   0047F8                     
  7351                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  7352   0047F8  C019  F014         	movff	right90@mL,turnRight@mL
  7353   0047FC  C01A  F015         	movff	right90@mR,turnRight@mR
  7354   004800  EC9F  F01F         	call	_turnRight	;wreg free
  7355   004804                     
  7356                           ;dc_motor.c: 196:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7357   004804  0E18               	movlw	24
  7358   004806  6E1C               	movwf	(??_right90+1)^0,c
  7359   004808  0E8A               	movlw	138
  7360   00480A  6E1B               	movwf	??_right90^0,c
  7361   00480C  0EE8               	movlw	232
  7362   00480E                     u5857:
  7363   00480E  2EE8               	decfsz	wreg,f,c
  7364   004810  D7FE               	bra	u5857
  7365   004812  2E1B               	decfsz	??_right90^0,f,c
  7366   004814  D7FC               	bra	u5857
  7367   004816  2E1C               	decfsz	(??_right90+1)^0,f,c
  7368   004818  D7FA               	bra	u5857
  7369   00481A                     
  7370                           ;dc_motor.c: 197:     stop(mL,mR);
  7371   00481A  C019  F014         	movff	right90@mL,stop@mL
  7372   00481E  C01A  F015         	movff	right90@mR,stop@mR
  7373   004822  EC58  F01F         	call	_stop	;wreg free
  7374   004826  0012               	return		;funcret
  7375   004828                     __end_of_right90:
  7376                           	callstack 0
  7377                           
  7378 ;; *************** function _movePink *****************
  7379 ;; Defined at:
  7380 ;;		line 293 in file "dc_motor.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7383 ;;		 -> motorL(9), 
  7384 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7385 ;;		 -> motorR(9), 
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;		None
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  1    wreg      void 
  7390 ;; Registers used:
  7391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7397 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7399 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7400 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7401 ;;Total ram usage:        4 bytes
  7402 ;; Hardware stack levels used: 1
  7403 ;; Hardware stack levels required when called: 5
  7404 ;; This function calls:
  7405 ;;		_backOneAndHalf
  7406 ;;		_left90
  7407 ;; This function is called by:
  7408 ;;		_decision
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text26
  7413   004604                     __ptext26:
  7414                           	callstack 0
  7415   004604                     _movePink:
  7416                           	callstack 24
  7417   004604                     
  7418                           ;dc_motor.c: 293: void movePink(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 29
      +                          4: {;dc_motor.c: 296:     backOneAndHalf(mL,mR);
  7419   004604  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  7420   004608  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  7421   00460C  EC1B  F023         	call	_backOneAndHalf	;wreg free
  7422   004610                     
  7423                           ;dc_motor.c: 297:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7424   004610  0E29               	movlw	41
  7425   004612  6E20               	movwf	(??_movePink+1)^0,c
  7426   004614  0E96               	movlw	150
  7427   004616  6E1F               	movwf	??_movePink^0,c
  7428   004618  0E7F               	movlw	127
  7429   00461A                     u5867:
  7430   00461A  2EE8               	decfsz	wreg,f,c
  7431   00461C  D7FE               	bra	u5867
  7432   00461E  2E1F               	decfsz	??_movePink^0,f,c
  7433   004620  D7FC               	bra	u5867
  7434   004622  2E20               	decfsz	(??_movePink+1)^0,f,c
  7435   004624  D7FA               	bra	u5867
  7436   004626  0000               	nop	
  7437   004628                     
  7438                           ;dc_motor.c: 298:     left90(mL,mR);
  7439   004628  C01D  F019         	movff	movePink@mL,left90@mL
  7440   00462C  C01E  F01A         	movff	movePink@mR,left90@mR
  7441   004630  EC14  F024         	call	_left90	;wreg free
  7442   004634  0012               	return		;funcret
  7443   004636                     __end_of_movePink:
  7444                           	callstack 0
  7445                           
  7446 ;; *************** function _backOneAndHalf *****************
  7447 ;; Defined at:
  7448 ;;		line 241 in file "dc_motor.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7451 ;;		 -> motorL(9), 
  7452 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7453 ;;		 -> motorR(9), 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;		None
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7467 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7468 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7469 ;;Total ram usage:        4 bytes
  7470 ;; Hardware stack levels used: 1
  7471 ;; Hardware stack levels required when called: 4
  7472 ;; This function calls:
  7473 ;;		_fullSpeedBack
  7474 ;;		_stop
  7475 ;; This function is called by:
  7476 ;;		_moveYellow
  7477 ;;		_movePink
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481                           	psect	text27
  7482   004636                     __ptext27:
  7483                           	callstack 0
  7484   004636                     _backOneAndHalf:
  7485                           	callstack 24
  7486   004636                     
  7487                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  7488   004636  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  7489   00463A  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  7490   00463E  EC1D  F020         	call	_fullSpeedBack	;wreg free
  7491   004642                     
  7492                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  7493   004642  0E6A               	movlw	106
  7494   004644  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  7495   004646  0E85               	movlw	133
  7496   004648  6E1B               	movwf	??_backOneAndHalf^0,c
  7497   00464A  0EB4               	movlw	180
  7498   00464C                     u5877:
  7499   00464C  2EE8               	decfsz	wreg,f,c
  7500   00464E  D7FE               	bra	u5877
  7501   004650  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  7502   004652  D7FC               	bra	u5877
  7503   004654  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  7504   004656  D7FA               	bra	u5877
  7505   004658  D000               	nop2	
  7506   00465A                     
  7507                           ;dc_motor.c: 245:     stop(mL,mR);
  7508   00465A  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  7509   00465E  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  7510   004662  EC58  F01F         	call	_stop	;wreg free
  7511   004666  0012               	return		;funcret
  7512   004668                     __end_of_backOneAndHalf:
  7513                           	callstack 0
  7514                           
  7515 ;; *************** function _moveOrange *****************
  7516 ;; Defined at:
  7517 ;;		line 302 in file "dc_motor.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7520 ;;		 -> motorL(9), 
  7521 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7522 ;;		 -> motorR(9), 
  7523 ;; Auto vars:     Size  Location     Type
  7524 ;;		None
  7525 ;; Return value:  Size  Location     Type
  7526 ;;                  1    wreg      void 
  7527 ;; Registers used:
  7528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7529 ;; Tracked objects:
  7530 ;;		On entry : 0/0
  7531 ;;		On exit  : 0/0
  7532 ;;		Unchanged: 0/0
  7533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7534 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7536 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7537 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7538 ;;Total ram usage:        4 bytes
  7539 ;; Hardware stack levels used: 1
  7540 ;; Hardware stack levels required when called: 5
  7541 ;; This function calls:
  7542 ;;		_backHalf
  7543 ;;		_right135
  7544 ;; This function is called by:
  7545 ;;		_decision
  7546 ;; This function uses a non-reentrant model
  7547 ;;
  7548                           
  7549                           	psect	text28
  7550   004668                     __ptext28:
  7551                           	callstack 0
  7552   004668                     _moveOrange:
  7553                           	callstack 24
  7554   004668                     
  7555                           ;dc_motor.c: 302: void moveOrange(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          303: {;dc_motor.c: 305:     backHalf(mL,mR);
  7556   004668  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  7557   00466C  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  7558   004670  EC2C  F024         	call	_backHalf	;wreg free
  7559   004674                     
  7560                           ;dc_motor.c: 306:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7561   004674  0E29               	movlw	41
  7562   004676  6E20               	movwf	(??_moveOrange+1)^0,c
  7563   004678  0E96               	movlw	150
  7564   00467A  6E1F               	movwf	??_moveOrange^0,c
  7565   00467C  0E7F               	movlw	127
  7566   00467E                     u5887:
  7567   00467E  2EE8               	decfsz	wreg,f,c
  7568   004680  D7FE               	bra	u5887
  7569   004682  2E1F               	decfsz	??_moveOrange^0,f,c
  7570   004684  D7FC               	bra	u5887
  7571   004686  2E20               	decfsz	(??_moveOrange+1)^0,f,c
  7572   004688  D7FA               	bra	u5887
  7573   00468A  0000               	nop	
  7574   00468C                     
  7575                           ;dc_motor.c: 307:     right135(mL,mR);
  7576   00468C  C01D  F019         	movff	moveOrange@mL,right135@mL
  7577   004690  C01E  F01A         	movff	moveOrange@mR,right135@mR
  7578   004694  EC4D  F023         	call	_right135	;wreg free
  7579   004698  0012               	return		;funcret
  7580   00469A                     __end_of_moveOrange:
  7581                           	callstack 0
  7582                           
  7583 ;; *************** function _right135 *****************
  7584 ;; Defined at:
  7585 ;;		line 217 in file "dc_motor.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7588 ;;		 -> motorL(9), 
  7589 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7590 ;;		 -> motorR(9), 
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;		None
  7593 ;; Return value:  Size  Location     Type
  7594 ;;                  1    wreg      void 
  7595 ;; Registers used:
  7596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7597 ;; Tracked objects:
  7598 ;;		On entry : 0/0
  7599 ;;		On exit  : 0/0
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7602 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7604 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7605 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7606 ;;Total ram usage:        4 bytes
  7607 ;; Hardware stack levels used: 1
  7608 ;; Hardware stack levels required when called: 4
  7609 ;; This function calls:
  7610 ;;		_stop
  7611 ;;		_turnRight
  7612 ;; This function is called by:
  7613 ;;		_moveOrange
  7614 ;;		_reverseTurn
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text29
  7619   00469A                     __ptext29:
  7620                           	callstack 0
  7621   00469A                     _right135:
  7622                           	callstack 24
  7623   00469A                     
  7624                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  7625   00469A  C019  F014         	movff	right135@mL,turnRight@mL
  7626   00469E  C01A  F015         	movff	right135@mR,turnRight@mR
  7627   0046A2  EC9F  F01F         	call	_turnRight	;wreg free
  7628   0046A6                     
  7629                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7630   0046A6  0E21               	movlw	33
  7631   0046A8  6E1C               	movwf	(??_right135+1)^0,c
  7632   0046AA  0E78               	movlw	120
  7633   0046AC  6E1B               	movwf	??_right135^0,c
  7634   0046AE  0E98               	movlw	152
  7635   0046B0                     u5897:
  7636   0046B0  2EE8               	decfsz	wreg,f,c
  7637   0046B2  D7FE               	bra	u5897
  7638   0046B4  2E1B               	decfsz	??_right135^0,f,c
  7639   0046B6  D7FC               	bra	u5897
  7640   0046B8  2E1C               	decfsz	(??_right135+1)^0,f,c
  7641   0046BA  D7FA               	bra	u5897
  7642   0046BC  D000               	nop2	
  7643   0046BE                     
  7644                           ;dc_motor.c: 221:     stop(mL,mR);
  7645   0046BE  C019  F014         	movff	right135@mL,stop@mL
  7646   0046C2  C01A  F015         	movff	right135@mR,stop@mR
  7647   0046C6  EC58  F01F         	call	_stop	;wreg free
  7648   0046CA  0012               	return		;funcret
  7649   0046CC                     __end_of_right135:
  7650                           	callstack 0
  7651                           
  7652 ;; *************** function _turnRight *****************
  7653 ;; Defined at:
  7654 ;;		line 125 in file "dc_motor.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7657 ;;		 -> motorL(9), 
  7658 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7659 ;;		 -> motorR(9), 
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;  i               2   22[COMRAM] unsigned int 
  7662 ;; Return value:  Size  Location     Type
  7663 ;;                  1    wreg      void 
  7664 ;; Registers used:
  7665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7666 ;; Tracked objects:
  7667 ;;		On entry : 0/0
  7668 ;;		On exit  : 0/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7671 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7672 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7674 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7675 ;;Total ram usage:        5 bytes
  7676 ;; Hardware stack levels used: 1
  7677 ;; Hardware stack levels required when called: 3
  7678 ;; This function calls:
  7679 ;;		_setMotorPWM
  7680 ;; This function is called by:
  7681 ;;		_right90
  7682 ;;		_right135
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text30
  7687   003F3E                     __ptext30:
  7688                           	callstack 0
  7689   003F3E                     _turnRight:
  7690                           	callstack 24
  7691   003F3E                     
  7692                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7693   003F3E  5014               	movf	turnRight@mL^0,w,c
  7694   003F40  6ED9               	movwf	fsr2l,c
  7695   003F42  6ADA               	clrf	fsr2h,c
  7696   003F44  0E01               	movlw	1
  7697   003F46  26D9               	addwf	fsr2l,f,c
  7698   003F48  0E01               	movlw	1
  7699   003F4A  6EDF               	movwf	indf2,c
  7700                           
  7701                           ;dc_motor.c: 129:     mR->direction = 0;
  7702   003F4C  5015               	movf	turnRight@mR^0,w,c
  7703   003F4E  6ED9               	movwf	fsr2l,c
  7704   003F50  6ADA               	clrf	fsr2h,c
  7705   003F52  0E01               	movlw	1
  7706   003F54  26D9               	addwf	fsr2l,f,c
  7707   003F56  6ADF               	clrf	indf2,c
  7708   003F58                     
  7709                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7710   003F58  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7711   003F5C  ECFA  F018         	call	_setMotorPWM	;wreg free
  7712   003F60                     
  7713                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7714   003F60  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7715   003F64  ECFA  F018         	call	_setMotorPWM	;wreg free
  7716   003F68                     
  7717                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7718   003F68  0E00               	movlw	0
  7719   003F6A  6E18               	movwf	(turnRight@i+1)^0,c
  7720   003F6C  0E00               	movlw	0
  7721   003F6E  6E17               	movwf	turnRight@i^0,c
  7722   003F70                     l5750:
  7723                           
  7724                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7725   003F70  5014               	movf	turnRight@mL^0,w,c
  7726   003F72  6ED9               	movwf	fsr2l,c
  7727   003F74  6ADA               	clrf	fsr2h,c
  7728   003F76  2ADF               	incf	indf2,f,c
  7729                           
  7730                           ;dc_motor.c: 136:         mR->power++;
  7731   003F78  5015               	movf	turnRight@mR^0,w,c
  7732   003F7A  6ED9               	movwf	fsr2l,c
  7733   003F7C  6ADA               	clrf	fsr2h,c
  7734   003F7E  2ADF               	incf	indf2,f,c
  7735   003F80                     
  7736                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7737   003F80  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7738   003F84  ECFA  F018         	call	_setMotorPWM	;wreg free
  7739   003F88                     
  7740                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7741   003F88  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7742   003F8C  ECFA  F018         	call	_setMotorPWM	;wreg free
  7743   003F90                     
  7744                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7745   003F90  0E0B               	movlw	11
  7746   003F92  6E16               	movwf	??_turnRight^0,c
  7747   003F94  0E62               	movlw	98
  7748   003F96                     u5907:
  7749   003F96  2EE8               	decfsz	wreg,f,c
  7750   003F98  D7FE               	bra	u5907
  7751   003F9A  2E16               	decfsz	??_turnRight^0,f,c
  7752   003F9C  D7FC               	bra	u5907
  7753   003F9E  D000               	nop2	
  7754   003FA0                     
  7755                           ;dc_motor.c: 140:     }
  7756   003FA0  4A17               	infsnz	turnRight@i^0,f,c
  7757   003FA2  2A18               	incf	(turnRight@i+1)^0,f,c
  7758   003FA4  5018               	movf	(turnRight@i+1)^0,w,c
  7759   003FA6  E109               	bnz	u5180
  7760   003FA8  0E32               	movlw	50
  7761   003FAA  5C17               	subwf	turnRight@i^0,w,c
  7762   003FAC  A0D8               	btfss	status,0,c
  7763   003FAE  EFDB  F01F         	goto	u5181
  7764   003FB2  EFDD  F01F         	goto	u5180
  7765   003FB6                     u5181:
  7766   003FB6  EFB8  F01F         	goto	l5750
  7767   003FBA                     u5180:
  7768   003FBA  0012               	return		;funcret
  7769   003FBC                     __end_of_turnRight:
  7770                           	callstack 0
  7771                           
  7772 ;; *************** function _moveLightBlue *****************
  7773 ;; Defined at:
  7774 ;;		line 311 in file "dc_motor.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7777 ;;		 -> motorL(9), 
  7778 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7779 ;;		 -> motorR(9), 
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;		None
  7782 ;; Return value:  Size  Location     Type
  7783 ;;                  1    wreg      void 
  7784 ;; Registers used:
  7785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7786 ;; Tracked objects:
  7787 ;;		On entry : 0/0
  7788 ;;		On exit  : 0/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7791 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7793 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7794 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7795 ;;Total ram usage:        4 bytes
  7796 ;; Hardware stack levels used: 1
  7797 ;; Hardware stack levels required when called: 5
  7798 ;; This function calls:
  7799 ;;		_backHalf
  7800 ;;		_left135
  7801 ;; This function is called by:
  7802 ;;		_decision
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           	psect	text31
  7807   0046CC                     __ptext31:
  7808                           	callstack 0
  7809   0046CC                     _moveLightBlue:
  7810                           	callstack 24
  7811   0046CC                     
  7812                           ;dc_motor.c: 311: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 312: {;dc_motor.c: 314:     backHalf(mL,mR);
  7813   0046CC  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7814   0046D0  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7815   0046D4  EC2C  F024         	call	_backHalf	;wreg free
  7816   0046D8                     
  7817                           ;dc_motor.c: 315:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7818   0046D8  0E29               	movlw	41
  7819   0046DA  6E20               	movwf	(??_moveLightBlue+1)^0,c
  7820   0046DC  0E96               	movlw	150
  7821   0046DE  6E1F               	movwf	??_moveLightBlue^0,c
  7822   0046E0  0E7F               	movlw	127
  7823   0046E2                     u5917:
  7824   0046E2  2EE8               	decfsz	wreg,f,c
  7825   0046E4  D7FE               	bra	u5917
  7826   0046E6  2E1F               	decfsz	??_moveLightBlue^0,f,c
  7827   0046E8  D7FC               	bra	u5917
  7828   0046EA  2E20               	decfsz	(??_moveLightBlue+1)^0,f,c
  7829   0046EC  D7FA               	bra	u5917
  7830   0046EE  0000               	nop	
  7831   0046F0                     
  7832                           ;dc_motor.c: 316:     left135(mL,mR);
  7833   0046F0  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7834   0046F4  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7835   0046F8  EC7F  F023         	call	_left135	;wreg free
  7836   0046FC  0012               	return		;funcret
  7837   0046FE                     __end_of_moveLightBlue:
  7838                           	callstack 0
  7839                           
  7840 ;; *************** function _left135 *****************
  7841 ;; Defined at:
  7842 ;;		line 225 in file "dc_motor.c"
  7843 ;; Parameters:    Size  Location     Type
  7844 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7845 ;;		 -> motorL(9), 
  7846 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7847 ;;		 -> motorR(9), 
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;		None
  7850 ;; Return value:  Size  Location     Type
  7851 ;;                  1    wreg      void 
  7852 ;; Registers used:
  7853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7854 ;; Tracked objects:
  7855 ;;		On entry : 0/0
  7856 ;;		On exit  : 0/0
  7857 ;;		Unchanged: 0/0
  7858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7859 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7861 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7862 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7863 ;;Total ram usage:        4 bytes
  7864 ;; Hardware stack levels used: 1
  7865 ;; Hardware stack levels required when called: 4
  7866 ;; This function calls:
  7867 ;;		_stop
  7868 ;;		_turnLeft
  7869 ;; This function is called by:
  7870 ;;		_moveLightBlue
  7871 ;;		_reverseTurn
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875                           	psect	text32
  7876   0046FE                     __ptext32:
  7877                           	callstack 0
  7878   0046FE                     _left135:
  7879                           	callstack 24
  7880   0046FE                     
  7881                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7882   0046FE  C019  F014         	movff	left135@mL,turnLeft@mL
  7883   004702  C01A  F015         	movff	left135@mR,turnLeft@mR
  7884   004706  ECDE  F01F         	call	_turnLeft	;wreg free
  7885   00470A                     
  7886                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7887   00470A  0E21               	movlw	33
  7888   00470C  6E1C               	movwf	(??_left135+1)^0,c
  7889   00470E  0E78               	movlw	120
  7890   004710  6E1B               	movwf	??_left135^0,c
  7891   004712  0E98               	movlw	152
  7892   004714                     u5927:
  7893   004714  2EE8               	decfsz	wreg,f,c
  7894   004716  D7FE               	bra	u5927
  7895   004718  2E1B               	decfsz	??_left135^0,f,c
  7896   00471A  D7FC               	bra	u5927
  7897   00471C  2E1C               	decfsz	(??_left135+1)^0,f,c
  7898   00471E  D7FA               	bra	u5927
  7899   004720  D000               	nop2	
  7900   004722                     
  7901                           ;dc_motor.c: 229:     stop(mL,mR);
  7902   004722  C019  F014         	movff	left135@mL,stop@mL
  7903   004726  C01A  F015         	movff	left135@mR,stop@mR
  7904   00472A  EC58  F01F         	call	_stop	;wreg free
  7905   00472E  0012               	return		;funcret
  7906   004730                     __end_of_left135:
  7907                           	callstack 0
  7908                           
  7909 ;; *************** function _moveGreen *****************
  7910 ;; Defined at:
  7911 ;;		line 266 in file "dc_motor.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7914 ;;		 -> motorL(9), 
  7915 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7916 ;;		 -> motorR(9), 
  7917 ;; Auto vars:     Size  Location     Type
  7918 ;;		None
  7919 ;; Return value:  Size  Location     Type
  7920 ;;                  1    wreg      void 
  7921 ;; Registers used:
  7922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7923 ;; Tracked objects:
  7924 ;;		On entry : 0/0
  7925 ;;		On exit  : 0/0
  7926 ;;		Unchanged: 0/0
  7927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7928 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7930 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7931 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7932 ;;Total ram usage:        4 bytes
  7933 ;; Hardware stack levels used: 1
  7934 ;; Hardware stack levels required when called: 5
  7935 ;; This function calls:
  7936 ;;		_backHalf
  7937 ;;		_left90
  7938 ;; This function is called by:
  7939 ;;		_decision
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           	psect	text33
  7944   004730                     __ptext33:
  7945                           	callstack 0
  7946   004730                     _moveGreen:
  7947                           	callstack 24
  7948   004730                     
  7949                           ;dc_motor.c: 266: void moveGreen(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          67: {;dc_motor.c: 269:     backHalf(mL,mR);
  7950   004730  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7951   004734  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7952   004738  EC2C  F024         	call	_backHalf	;wreg free
  7953   00473C                     
  7954                           ;dc_motor.c: 270:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7955   00473C  0E29               	movlw	41
  7956   00473E  6E20               	movwf	(??_moveGreen+1)^0,c
  7957   004740  0E96               	movlw	150
  7958   004742  6E1F               	movwf	??_moveGreen^0,c
  7959   004744  0E7F               	movlw	127
  7960   004746                     u5937:
  7961   004746  2EE8               	decfsz	wreg,f,c
  7962   004748  D7FE               	bra	u5937
  7963   00474A  2E1F               	decfsz	??_moveGreen^0,f,c
  7964   00474C  D7FC               	bra	u5937
  7965   00474E  2E20               	decfsz	(??_moveGreen+1)^0,f,c
  7966   004750  D7FA               	bra	u5937
  7967   004752  0000               	nop	
  7968   004754                     
  7969                           ;dc_motor.c: 271:     left90(mL,mR);
  7970   004754  C01D  F019         	movff	moveGreen@mL,left90@mL
  7971   004758  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7972   00475C  EC14  F024         	call	_left90	;wreg free
  7973   004760  0012               	return		;funcret
  7974   004762                     __end_of_moveGreen:
  7975                           	callstack 0
  7976                           
  7977 ;; *************** function _left90 *****************
  7978 ;; Defined at:
  7979 ;;		line 201 in file "dc_motor.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7982 ;;		 -> motorL(9), 
  7983 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7984 ;;		 -> motorR(9), 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;		None
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  1    wreg      void 
  7989 ;; Registers used:
  7990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7991 ;; Tracked objects:
  7992 ;;		On entry : 0/0
  7993 ;;		On exit  : 0/0
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7996 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7998 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7999 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8000 ;;Total ram usage:        4 bytes
  8001 ;; Hardware stack levels used: 1
  8002 ;; Hardware stack levels required when called: 4
  8003 ;; This function calls:
  8004 ;;		_stop
  8005 ;;		_turnLeft
  8006 ;; This function is called by:
  8007 ;;		_moveGreen
  8008 ;;		_movePink
  8009 ;;		_reverseTurn
  8010 ;; This function uses a non-reentrant model
  8011 ;;
  8012                           
  8013                           	psect	text34
  8014   004828                     __ptext34:
  8015                           	callstack 0
  8016   004828                     _left90:
  8017                           	callstack 24
  8018   004828                     
  8019                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  8020   004828  C019  F014         	movff	left90@mL,turnLeft@mL
  8021   00482C  C01A  F015         	movff	left90@mR,turnLeft@mR
  8022   004830  ECDE  F01F         	call	_turnLeft	;wreg free
  8023   004834                     
  8024                           ;dc_motor.c: 204:     _delay((unsigned long)((290)*(64000000/4000.0)));
  8025   004834  0E18               	movlw	24
  8026   004836  6E1C               	movwf	(??_left90+1)^0,c
  8027   004838  0E8A               	movlw	138
  8028   00483A  6E1B               	movwf	??_left90^0,c
  8029   00483C  0EE8               	movlw	232
  8030   00483E                     u5947:
  8031   00483E  2EE8               	decfsz	wreg,f,c
  8032   004840  D7FE               	bra	u5947
  8033   004842  2E1B               	decfsz	??_left90^0,f,c
  8034   004844  D7FC               	bra	u5947
  8035   004846  2E1C               	decfsz	(??_left90+1)^0,f,c
  8036   004848  D7FA               	bra	u5947
  8037   00484A                     
  8038                           ;dc_motor.c: 205:     stop(mL,mR);
  8039   00484A  C019  F014         	movff	left90@mL,stop@mL
  8040   00484E  C01A  F015         	movff	left90@mR,stop@mR
  8041   004852  EC58  F01F         	call	_stop	;wreg free
  8042   004856  0012               	return		;funcret
  8043   004858                     __end_of_left90:
  8044                           	callstack 0
  8045                           
  8046 ;; *************** function _moveBlue *****************
  8047 ;; Defined at:
  8048 ;;		line 275 in file "dc_motor.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  8051 ;;		 -> motorL(9), 
  8052 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  8053 ;;		 -> motorR(9), 
  8054 ;; Auto vars:     Size  Location     Type
  8055 ;;		None
  8056 ;; Return value:  Size  Location     Type
  8057 ;;                  1    wreg      void 
  8058 ;; Registers used:
  8059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8060 ;; Tracked objects:
  8061 ;;		On entry : 0/0
  8062 ;;		On exit  : 0/0
  8063 ;;		Unchanged: 0/0
  8064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8067 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8068 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8069 ;;Total ram usage:        4 bytes
  8070 ;; Hardware stack levels used: 1
  8071 ;; Hardware stack levels required when called: 5
  8072 ;; This function calls:
  8073 ;;		_backHalf
  8074 ;;		_turn180
  8075 ;; This function is called by:
  8076 ;;		_decision
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           	psect	text35
  8081   004762                     __ptext35:
  8082                           	callstack 0
  8083   004762                     _moveBlue:
  8084                           	callstack 24
  8085   004762                     
  8086                           ;dc_motor.c: 275: void moveBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 27
      +                          6: {;dc_motor.c: 278:     backHalf(mL,mR);
  8087   004762  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  8088   004766  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  8089   00476A  EC2C  F024         	call	_backHalf	;wreg free
  8090   00476E                     
  8091                           ;dc_motor.c: 279:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8092   00476E  0E29               	movlw	41
  8093   004770  6E20               	movwf	(??_moveBlue+1)^0,c
  8094   004772  0E96               	movlw	150
  8095   004774  6E1F               	movwf	??_moveBlue^0,c
  8096   004776  0E7F               	movlw	127
  8097   004778                     u5957:
  8098   004778  2EE8               	decfsz	wreg,f,c
  8099   00477A  D7FE               	bra	u5957
  8100   00477C  2E1F               	decfsz	??_moveBlue^0,f,c
  8101   00477E  D7FC               	bra	u5957
  8102   004780  2E20               	decfsz	(??_moveBlue+1)^0,f,c
  8103   004782  D7FA               	bra	u5957
  8104   004784  0000               	nop	
  8105   004786                     
  8106                           ;dc_motor.c: 280:     turn180(mL,mR);
  8107   004786  C01D  F019         	movff	moveBlue@mL,turn180@mL
  8108   00478A  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  8109   00478E  ECCA  F023         	call	_turn180	;wreg free
  8110   004792  0012               	return		;funcret
  8111   004794                     __end_of_moveBlue:
  8112                           	callstack 0
  8113                           
  8114 ;; *************** function _turn180 *****************
  8115 ;; Defined at:
  8116 ;;		line 209 in file "dc_motor.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8119 ;;		 -> motorL(9), 
  8120 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8121 ;;		 -> motorR(9), 
  8122 ;; Auto vars:     Size  Location     Type
  8123 ;;		None
  8124 ;; Return value:  Size  Location     Type
  8125 ;;                  1    wreg      void 
  8126 ;; Registers used:
  8127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8133 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8135 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8136 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8137 ;;Total ram usage:        4 bytes
  8138 ;; Hardware stack levels used: 1
  8139 ;; Hardware stack levels required when called: 4
  8140 ;; This function calls:
  8141 ;;		_stop
  8142 ;;		_turnLeft
  8143 ;; This function is called by:
  8144 ;;		_moveBlue
  8145 ;;		_moveWhite
  8146 ;;		_reverseTurn
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           	psect	text36
  8151   004794                     __ptext36:
  8152                           	callstack 0
  8153   004794                     _turn180:
  8154                           	callstack 24
  8155   004794                     
  8156                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  8157   004794  C019  F014         	movff	turn180@mL,turnLeft@mL
  8158   004798  C01A  F015         	movff	turn180@mR,turnLeft@mR
  8159   00479C  ECDE  F01F         	call	_turnLeft	;wreg free
  8160   0047A0                     
  8161                           ;dc_motor.c: 212:     _delay((unsigned long)((580)*(64000000/4000.0)));
  8162   0047A0  0E30               	movlw	48
  8163   0047A2  6E1C               	movwf	(??_turn180+1)^0,c
  8164   0047A4  0E14               	movlw	20
  8165   0047A6  6E1B               	movwf	??_turn180^0,c
  8166   0047A8  0ED1               	movlw	209
  8167   0047AA                     u5967:
  8168   0047AA  2EE8               	decfsz	wreg,f,c
  8169   0047AC  D7FE               	bra	u5967
  8170   0047AE  2E1B               	decfsz	??_turn180^0,f,c
  8171   0047B0  D7FC               	bra	u5967
  8172   0047B2  2E1C               	decfsz	(??_turn180+1)^0,f,c
  8173   0047B4  D7FA               	bra	u5967
  8174   0047B6  0000               	nop	
  8175   0047B8                     
  8176                           ;dc_motor.c: 213:     stop(mL,mR);
  8177   0047B8  C019  F014         	movff	turn180@mL,stop@mL
  8178   0047BC  C01A  F015         	movff	turn180@mR,stop@mR
  8179   0047C0  EC58  F01F         	call	_stop	;wreg free
  8180   0047C4  0012               	return		;funcret
  8181   0047C6                     __end_of_turn180:
  8182                           	callstack 0
  8183                           
  8184 ;; *************** function _turnLeft *****************
  8185 ;; Defined at:
  8186 ;;		line 105 in file "dc_motor.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8189 ;;		 -> motorL(9), 
  8190 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8191 ;;		 -> motorR(9), 
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;  i               2   22[COMRAM] unsigned int 
  8194 ;; Return value:  Size  Location     Type
  8195 ;;                  1    wreg      void 
  8196 ;; Registers used:
  8197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8198 ;; Tracked objects:
  8199 ;;		On entry : 0/0
  8200 ;;		On exit  : 0/0
  8201 ;;		Unchanged: 0/0
  8202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8203 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8206 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8207 ;;Total ram usage:        5 bytes
  8208 ;; Hardware stack levels used: 1
  8209 ;; Hardware stack levels required when called: 3
  8210 ;; This function calls:
  8211 ;;		_setMotorPWM
  8212 ;; This function is called by:
  8213 ;;		_left90
  8214 ;;		_turn180
  8215 ;;		_left135
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text37
  8220   003FBC                     __ptext37:
  8221                           	callstack 0
  8222   003FBC                     _turnLeft:
  8223                           	callstack 24
  8224   003FBC                     
  8225                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  8226   003FBC  5014               	movf	turnLeft@mL^0,w,c
  8227   003FBE  6ED9               	movwf	fsr2l,c
  8228   003FC0  6ADA               	clrf	fsr2h,c
  8229   003FC2  0E01               	movlw	1
  8230   003FC4  26D9               	addwf	fsr2l,f,c
  8231   003FC6  6ADF               	clrf	indf2,c
  8232                           
  8233                           ;dc_motor.c: 109:     mR->direction = 1;
  8234   003FC8  5015               	movf	turnLeft@mR^0,w,c
  8235   003FCA  6ED9               	movwf	fsr2l,c
  8236   003FCC  6ADA               	clrf	fsr2h,c
  8237   003FCE  0E01               	movlw	1
  8238   003FD0  26D9               	addwf	fsr2l,f,c
  8239   003FD2  0E01               	movlw	1
  8240   003FD4  6EDF               	movwf	indf2,c
  8241   003FD6                     
  8242                           ;dc_motor.c: 111:     setMotorPWM(mL);
  8243   003FD6  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8244   003FDA  ECFA  F018         	call	_setMotorPWM	;wreg free
  8245   003FDE                     
  8246                           ;dc_motor.c: 112:     setMotorPWM(mR);
  8247   003FDE  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8248   003FE2  ECFA  F018         	call	_setMotorPWM	;wreg free
  8249   003FE6                     
  8250                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  8251   003FE6  0E00               	movlw	0
  8252   003FE8  6E18               	movwf	(turnLeft@i+1)^0,c
  8253   003FEA  0E00               	movlw	0
  8254   003FEC  6E17               	movwf	turnLeft@i^0,c
  8255   003FEE                     l5726:
  8256                           
  8257                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  8258   003FEE  5014               	movf	turnLeft@mL^0,w,c
  8259   003FF0  6ED9               	movwf	fsr2l,c
  8260   003FF2  6ADA               	clrf	fsr2h,c
  8261   003FF4  2ADF               	incf	indf2,f,c
  8262                           
  8263                           ;dc_motor.c: 116:         mR->power++;
  8264   003FF6  5015               	movf	turnLeft@mR^0,w,c
  8265   003FF8  6ED9               	movwf	fsr2l,c
  8266   003FFA  6ADA               	clrf	fsr2h,c
  8267   003FFC  2ADF               	incf	indf2,f,c
  8268   003FFE                     
  8269                           ;dc_motor.c: 117:         setMotorPWM(mL);
  8270   003FFE  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8271   004002  ECFA  F018         	call	_setMotorPWM	;wreg free
  8272   004006                     
  8273                           ;dc_motor.c: 118:         setMotorPWM(mR);
  8274   004006  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8275   00400A  ECFA  F018         	call	_setMotorPWM	;wreg free
  8276   00400E                     
  8277                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8278   00400E  0E0B               	movlw	11
  8279   004010  6E16               	movwf	??_turnLeft^0,c
  8280   004012  0E62               	movlw	98
  8281   004014                     u5977:
  8282   004014  2EE8               	decfsz	wreg,f,c
  8283   004016  D7FE               	bra	u5977
  8284   004018  2E16               	decfsz	??_turnLeft^0,f,c
  8285   00401A  D7FC               	bra	u5977
  8286   00401C  D000               	nop2	
  8287   00401E                     
  8288                           ;dc_motor.c: 120:     }
  8289   00401E  4A17               	infsnz	turnLeft@i^0,f,c
  8290   004020  2A18               	incf	(turnLeft@i+1)^0,f,c
  8291   004022  5018               	movf	(turnLeft@i+1)^0,w,c
  8292   004024  E109               	bnz	u5170
  8293   004026  0E32               	movlw	50
  8294   004028  5C17               	subwf	turnLeft@i^0,w,c
  8295   00402A  A0D8               	btfss	status,0,c
  8296   00402C  EF1A  F020         	goto	u5171
  8297   004030  EF1C  F020         	goto	u5170
  8298   004034                     u5171:
  8299   004034  EFF7  F01F         	goto	l5726
  8300   004038                     u5170:
  8301   004038  0012               	return		;funcret
  8302   00403A                     __end_of_turnLeft:
  8303                           	callstack 0
  8304                           
  8305 ;; *************** function _backHalf *****************
  8306 ;; Defined at:
  8307 ;;		line 233 in file "dc_motor.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8310 ;;		 -> motorL(9), 
  8311 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8312 ;;		 -> motorR(9), 
  8313 ;; Auto vars:     Size  Location     Type
  8314 ;;		None
  8315 ;; Return value:  Size  Location     Type
  8316 ;;                  1    wreg      void 
  8317 ;; Registers used:
  8318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8319 ;; Tracked objects:
  8320 ;;		On entry : 0/0
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8324 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8326 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8327 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8328 ;;Total ram usage:        4 bytes
  8329 ;; Hardware stack levels used: 1
  8330 ;; Hardware stack levels required when called: 4
  8331 ;; This function calls:
  8332 ;;		_fullSpeedBack
  8333 ;;		_stop
  8334 ;; This function is called by:
  8335 ;;		_moveRed
  8336 ;;		_moveGreen
  8337 ;;		_moveBlue
  8338 ;;		_moveOrange
  8339 ;;		_moveLightBlue
  8340 ;;		_moveWhite
  8341 ;;		_reverseTurn
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           	psect	text38
  8346   004858                     __ptext38:
  8347                           	callstack 0
  8348   004858                     _backHalf:
  8349                           	callstack 24
  8350   004858                     
  8351                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  8352   004858  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  8353   00485C  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  8354   004860  EC1D  F020         	call	_fullSpeedBack	;wreg free
  8355   004864                     
  8356                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  8357   004864  0E19               	movlw	25
  8358   004866  6E1C               	movwf	(??_backHalf+1)^0,c
  8359   004868  0E5A               	movlw	90
  8360   00486A  6E1B               	movwf	??_backHalf^0,c
  8361   00486C  0EB2               	movlw	178
  8362   00486E                     u5987:
  8363   00486E  2EE8               	decfsz	wreg,f,c
  8364   004870  D7FE               	bra	u5987
  8365   004872  2E1B               	decfsz	??_backHalf^0,f,c
  8366   004874  D7FC               	bra	u5987
  8367   004876  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  8368   004878  D7FA               	bra	u5987
  8369   00487A                     
  8370                           ;dc_motor.c: 237:     stop(mL,mR);
  8371   00487A  C019  F014         	movff	backHalf@mL,stop@mL
  8372   00487E  C01A  F015         	movff	backHalf@mR,stop@mR
  8373   004882  EC58  F01F         	call	_stop	;wreg free
  8374   004886  0012               	return		;funcret
  8375   004888                     __end_of_backHalf:
  8376                           	callstack 0
  8377                           
  8378 ;; *************** function _stop *****************
  8379 ;; Defined at:
  8380 ;;		line 88 in file "dc_motor.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8383 ;;		 -> motorL(9), 
  8384 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8385 ;;		 -> motorR(9), 
  8386 ;; Auto vars:     Size  Location     Type
  8387 ;;		None
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  1    wreg      void 
  8390 ;; Registers used:
  8391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8397 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8400 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8401 ;;Total ram usage:        3 bytes
  8402 ;; Hardware stack levels used: 1
  8403 ;; Hardware stack levels required when called: 3
  8404 ;; This function calls:
  8405 ;;		_setMotorPWM
  8406 ;; This function is called by:
  8407 ;;		_main
  8408 ;;		_right90
  8409 ;;		_left90
  8410 ;;		_turn180
  8411 ;;		_right135
  8412 ;;		_left135
  8413 ;;		_backHalf
  8414 ;;		_backOneAndHalf
  8415 ;;		_reverseStraight
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           	psect	text39
  8420   003EB0                     __ptext39:
  8421                           	callstack 0
  8422   003EB0                     _stop:
  8423                           	callstack 27
  8424   003EB0                     
  8425                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  8426   003EB0  EF88  F01F         	goto	l5710
  8427   003EB4                     l5696:
  8428                           
  8429                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  8430   003EB4  5014               	movf	stop@mL^0,w,c
  8431   003EB6  6ED9               	movwf	fsr2l,c
  8432   003EB8  6ADA               	clrf	fsr2h,c
  8433   003EBA  50DF               	movf	indf2,w,c
  8434   003EBC  B4D8               	btfsc	status,2,c
  8435   003EBE  EF63  F01F         	goto	u5131
  8436   003EC2  EF65  F01F         	goto	u5130
  8437   003EC6                     u5131:
  8438   003EC6  EF69  F01F         	goto	l5700
  8439   003ECA                     u5130:
  8440   003ECA  5014               	movf	stop@mL^0,w,c
  8441   003ECC  6ED9               	movwf	fsr2l,c
  8442   003ECE  6ADA               	clrf	fsr2h,c
  8443   003ED0  06DF               	decf	indf2,f,c
  8444   003ED2                     l5700:
  8445                           
  8446                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  8447   003ED2  5015               	movf	stop@mR^0,w,c
  8448   003ED4  6ED9               	movwf	fsr2l,c
  8449   003ED6  6ADA               	clrf	fsr2h,c
  8450   003ED8  50DF               	movf	indf2,w,c
  8451   003EDA  B4D8               	btfsc	status,2,c
  8452   003EDC  EF72  F01F         	goto	u5141
  8453   003EE0  EF74  F01F         	goto	u5140
  8454   003EE4                     u5141:
  8455   003EE4  EF78  F01F         	goto	l5704
  8456   003EE8                     u5140:
  8457   003EE8  5015               	movf	stop@mR^0,w,c
  8458   003EEA  6ED9               	movwf	fsr2l,c
  8459   003EEC  6ADA               	clrf	fsr2h,c
  8460   003EEE  06DF               	decf	indf2,f,c
  8461   003EF0                     l5704:
  8462                           
  8463                           ;dc_motor.c: 96:         setMotorPWM(mL);
  8464   003EF0  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8465   003EF4  ECFA  F018         	call	_setMotorPWM	;wreg free
  8466   003EF8                     
  8467                           ;dc_motor.c: 97:         setMotorPWM(mR);
  8468   003EF8  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8469   003EFC  ECFA  F018         	call	_setMotorPWM	;wreg free
  8470   003F00                     
  8471                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8472   003F00  0E0B               	movlw	11
  8473   003F02  6E16               	movwf	??_stop^0,c
  8474   003F04  0E62               	movlw	98
  8475   003F06                     u5997:
  8476   003F06  2EE8               	decfsz	wreg,f,c
  8477   003F08  D7FE               	bra	u5997
  8478   003F0A  2E16               	decfsz	??_stop^0,f,c
  8479   003F0C  D7FC               	bra	u5997
  8480   003F0E  D000               	nop2	
  8481   003F10                     l5710:
  8482                           
  8483                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  8484   003F10  5014               	movf	stop@mL^0,w,c
  8485   003F12  6ED9               	movwf	fsr2l,c
  8486   003F14  6ADA               	clrf	fsr2h,c
  8487   003F16  50DF               	movf	indf2,w,c
  8488   003F18  A4D8               	btfss	status,2,c
  8489   003F1A  EF91  F01F         	goto	u5151
  8490   003F1E  EF93  F01F         	goto	u5150
  8491   003F22                     u5151:
  8492   003F22  EF5A  F01F         	goto	l5696
  8493   003F26                     u5150:
  8494   003F26  5015               	movf	stop@mR^0,w,c
  8495   003F28  6ED9               	movwf	fsr2l,c
  8496   003F2A  6ADA               	clrf	fsr2h,c
  8497   003F2C  50DF               	movf	indf2,w,c
  8498   003F2E  A4D8               	btfss	status,2,c
  8499   003F30  EF9C  F01F         	goto	u5161
  8500   003F34  EF9E  F01F         	goto	u5160
  8501   003F38                     u5161:
  8502   003F38  EF5A  F01F         	goto	l5696
  8503   003F3C                     u5160:
  8504   003F3C  0012               	return		;funcret
  8505   003F3E                     __end_of_stop:
  8506                           	callstack 0
  8507                           
  8508 ;; *************** function _fullSpeedBack *****************
  8509 ;; Defined at:
  8510 ;;		line 165 in file "dc_motor.c"
  8511 ;; Parameters:    Size  Location     Type
  8512 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8513 ;;		 -> motorL(9), 
  8514 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8515 ;;		 -> motorR(9), 
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;  power           2   22[COMRAM] int 
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  1    wreg      void 
  8520 ;; Registers used:
  8521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8529 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8530 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8531 ;;Total ram usage:        5 bytes
  8532 ;; Hardware stack levels used: 1
  8533 ;; Hardware stack levels required when called: 3
  8534 ;; This function calls:
  8535 ;;		_setMotorPWM
  8536 ;; This function is called by:
  8537 ;;		_backHalf
  8538 ;;		_backOneAndHalf
  8539 ;; This function uses a non-reentrant model
  8540 ;;
  8541                           
  8542                           	psect	text40
  8543   00403A                     __ptext40:
  8544                           	callstack 0
  8545   00403A                     _fullSpeedBack:
  8546                           	callstack 24
  8547   00403A                     
  8548                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  8549   00403A  5014               	movf	fullSpeedBack@mL^0,w,c
  8550   00403C  6ED9               	movwf	fsr2l,c
  8551   00403E  6ADA               	clrf	fsr2h,c
  8552   004040  0E01               	movlw	1
  8553   004042  26D9               	addwf	fsr2l,f,c
  8554   004044  6ADF               	clrf	indf2,c
  8555                           
  8556                           ;dc_motor.c: 169:     mR->direction = 0;
  8557   004046  5015               	movf	fullSpeedBack@mR^0,w,c
  8558   004048  6ED9               	movwf	fsr2l,c
  8559   00404A  6ADA               	clrf	fsr2h,c
  8560   00404C  0E01               	movlw	1
  8561   00404E  26D9               	addwf	fsr2l,f,c
  8562   004050  6ADF               	clrf	indf2,c
  8563   004052                     
  8564                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8565   004052  0E00               	movlw	0
  8566   004054  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8567   004056  0E00               	movlw	0
  8568   004058  6E17               	movwf	fullSpeedBack@power^0,c
  8569   00405A                     l5770:
  8570                           
  8571                           ;dc_motor.c: 172:         mL->power = power;
  8572   00405A  5014               	movf	fullSpeedBack@mL^0,w,c
  8573   00405C  6ED9               	movwf	fsr2l,c
  8574   00405E  6ADA               	clrf	fsr2h,c
  8575   004060  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8576                           
  8577                           ;dc_motor.c: 173:         mR->power = power;
  8578   004064  5015               	movf	fullSpeedBack@mR^0,w,c
  8579   004066  6ED9               	movwf	fsr2l,c
  8580   004068  6ADA               	clrf	fsr2h,c
  8581   00406A  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8582   00406E                     
  8583                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8584   00406E  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8585   004072  ECFA  F018         	call	_setMotorPWM	;wreg free
  8586   004076                     
  8587                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8588   004076  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8589   00407A  ECFA  F018         	call	_setMotorPWM	;wreg free
  8590   00407E                     
  8591                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8592   00407E  0E0B               	movlw	11
  8593   004080  6E16               	movwf	??_fullSpeedBack^0,c
  8594   004082  0E62               	movlw	98
  8595   004084                     u6007:
  8596   004084  2EE8               	decfsz	wreg,f,c
  8597   004086  D7FE               	bra	u6007
  8598   004088  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8599   00408A  D7FC               	bra	u6007
  8600   00408C  D000               	nop2	
  8601   00408E                     
  8602                           ;dc_motor.c: 181:     }
  8603   00408E  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8604   004090  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8605   004092  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8606   004094  EF55  F020         	goto	u5191
  8607   004098  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8608   00409A  E109               	bnz	u5190
  8609   00409C  0E33               	movlw	51
  8610   00409E  5C17               	subwf	fullSpeedBack@power^0,w,c
  8611   0040A0  A0D8               	btfss	status,0,c
  8612   0040A2  EF55  F020         	goto	u5191
  8613   0040A6  EF57  F020         	goto	u5190
  8614   0040AA                     u5191:
  8615   0040AA  EF2D  F020         	goto	l5770
  8616   0040AE                     u5190:
  8617   0040AE  0012               	return		;funcret
  8618   0040B0                     __end_of_fullSpeedBack:
  8619                           	callstack 0
  8620                           
  8621 ;; *************** function _setMotorPWM *****************
  8622 ;; Defined at:
  8623 ;;		line 65 in file "dc_motor.c"
  8624 ;; Parameters:    Size  Location     Type
  8625 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8626 ;;		 -> motorR(9), motorL(9), 
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;  negDuty         1   18[COMRAM] unsigned char 
  8629 ;;  posDuty         1   17[COMRAM] unsigned char 
  8630 ;; Return value:  Size  Location     Type
  8631 ;;                  1    wreg      void 
  8632 ;; Registers used:
  8633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8634 ;; Tracked objects:
  8635 ;;		On entry : 0/0
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8639 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8641 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8642 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8643 ;;Total ram usage:        5 bytes
  8644 ;; Hardware stack levels used: 1
  8645 ;; Hardware stack levels required when called: 2
  8646 ;; This function calls:
  8647 ;;		___lwdiv
  8648 ;;		___wmul
  8649 ;; This function is called by:
  8650 ;;		_stop
  8651 ;;		_turnLeft
  8652 ;;		_turnRight
  8653 ;;		_fullSpeedAhead
  8654 ;;		_fullSpeedBack
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           	psect	text41
  8659   0031F4                     __ptext41:
  8660                           	callstack 0
  8661   0031F4                     _setMotorPWM:
  8662                           	callstack 27
  8663   0031F4                     
  8664                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8665   0031F4  500F               	movf	setMotorPWM@m^0,w,c
  8666   0031F6  6ED9               	movwf	fsr2l,c
  8667   0031F8  6ADA               	clrf	fsr2h,c
  8668   0031FA  0E02               	movlw	2
  8669   0031FC  26D9               	addwf	fsr2l,f,c
  8670   0031FE  50DF               	movf	indf2,w,c
  8671   003200  B4D8               	btfsc	status,2,c
  8672   003202  EF05  F019         	goto	u5041
  8673   003206  EF07  F019         	goto	u5040
  8674   00320A                     u5041:
  8675   00320A  EF37  F019         	goto	l5624
  8676   00320E                     u5040:
  8677   00320E                     
  8678                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8679   00320E  500F               	movf	setMotorPWM@m^0,w,c
  8680   003210  6ED9               	movwf	fsr2l,c
  8681   003212  6ADA               	clrf	fsr2h,c
  8682   003214  50DF               	movf	indf2,w,c
  8683   003216  6E10               	movwf	??_setMotorPWM^0,c
  8684   003218  5010               	movf	??_setMotorPWM^0,w,c
  8685   00321A  6E02               	movwf	___wmul@multiplier^0,c
  8686   00321C  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8687   00321E  500F               	movf	setMotorPWM@m^0,w,c
  8688   003220  6ED9               	movwf	fsr2l,c
  8689   003222  6ADA               	clrf	fsr2h,c
  8690   003224  0E03               	movlw	3
  8691   003226  26D9               	addwf	fsr2l,f,c
  8692   003228  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8693   00322C  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8694   003230  EC85  F024         	call	___wmul	;wreg free
  8695   003234  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8696   003238  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8697   00323C  0E00               	movlw	0
  8698   00323E  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8699   003240  0E64               	movlw	100
  8700   003242  6E0A               	movwf	___lwdiv@divisor^0,c
  8701   003244  EC58  F020         	call	___lwdiv	;wreg free
  8702   003248  500F               	movf	setMotorPWM@m^0,w,c
  8703   00324A  6ED9               	movwf	fsr2l,c
  8704   00324C  6ADA               	clrf	fsr2h,c
  8705   00324E  0E03               	movlw	3
  8706   003250  26D9               	addwf	fsr2l,f,c
  8707   003252  50DF               	movf	indf2,w,c
  8708   003254  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8709   003256  5008               	movf	?___lwdiv^0,w,c
  8710   003258  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8711   00325A  6E12               	movwf	setMotorPWM@posDuty^0,c
  8712   00325C                     
  8713                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8714   00325C  500F               	movf	setMotorPWM@m^0,w,c
  8715   00325E  6ED9               	movwf	fsr2l,c
  8716   003260  6ADA               	clrf	fsr2h,c
  8717   003262  0E03               	movlw	3
  8718   003264  26D9               	addwf	fsr2l,f,c
  8719   003266  50DF               	movf	indf2,w,c
  8720   003268  6E13               	movwf	setMotorPWM@negDuty^0,c
  8721                           
  8722                           ;dc_motor.c: 72:     }
  8723   00326A  EF58  F019         	goto	l5628
  8724   00326E                     l5624:
  8725                           
  8726                           ;dc_motor.c: 74:         posDuty=0;
  8727   00326E  0E00               	movlw	0
  8728   003270  6E12               	movwf	setMotorPWM@posDuty^0,c
  8729   003272                     
  8730                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8731   003272  500F               	movf	setMotorPWM@m^0,w,c
  8732   003274  6ED9               	movwf	fsr2l,c
  8733   003276  6ADA               	clrf	fsr2h,c
  8734   003278  50DF               	movf	indf2,w,c
  8735   00327A  6E10               	movwf	??_setMotorPWM^0,c
  8736   00327C  5010               	movf	??_setMotorPWM^0,w,c
  8737   00327E  6E02               	movwf	___wmul@multiplier^0,c
  8738   003280  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8739   003282  500F               	movf	setMotorPWM@m^0,w,c
  8740   003284  6ED9               	movwf	fsr2l,c
  8741   003286  6ADA               	clrf	fsr2h,c
  8742   003288  0E03               	movlw	3
  8743   00328A  26D9               	addwf	fsr2l,f,c
  8744   00328C  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8745   003290  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8746   003294  EC85  F024         	call	___wmul	;wreg free
  8747   003298  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8748   00329C  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8749   0032A0  0E00               	movlw	0
  8750   0032A2  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8751   0032A4  0E64               	movlw	100
  8752   0032A6  6E0A               	movwf	___lwdiv@divisor^0,c
  8753   0032A8  EC58  F020         	call	___lwdiv	;wreg free
  8754   0032AC  5008               	movf	?___lwdiv^0,w,c
  8755   0032AE  6E13               	movwf	setMotorPWM@negDuty^0,c
  8756   0032B0                     l5628:
  8757                           
  8758                           ;dc_motor.c: 78:     if (m->direction) {
  8759   0032B0  500F               	movf	setMotorPWM@m^0,w,c
  8760   0032B2  6ED9               	movwf	fsr2l,c
  8761   0032B4  6ADA               	clrf	fsr2h,c
  8762   0032B6  0E01               	movlw	1
  8763   0032B8  26D9               	addwf	fsr2l,f,c
  8764   0032BA  50DF               	movf	indf2,w,c
  8765   0032BC  B4D8               	btfsc	status,2,c
  8766   0032BE  EF63  F019         	goto	u5051
  8767   0032C2  EF65  F019         	goto	u5050
  8768   0032C6                     u5051:
  8769   0032C6  EF85  F019         	goto	l5632
  8770   0032CA                     u5050:
  8771   0032CA                     
  8772                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8773   0032CA  500F               	movf	setMotorPWM@m^0,w,c
  8774   0032CC  6ED9               	movwf	fsr2l,c
  8775   0032CE  6ADA               	clrf	fsr2h,c
  8776   0032D0  0E05               	movlw	5
  8777   0032D2  26D9               	addwf	fsr2l,f,c
  8778   0032D4  CFDE F010          	movff	postinc2,??_setMotorPWM
  8779   0032D8  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8780   0032DC  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8781   0032E0  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8782   0032E4  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8783                           
  8784                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8785   0032E8  500F               	movf	setMotorPWM@m^0,w,c
  8786   0032EA  6ED9               	movwf	fsr2l,c
  8787   0032EC  6ADA               	clrf	fsr2h,c
  8788   0032EE  0E07               	movlw	7
  8789   0032F0  26D9               	addwf	fsr2l,f,c
  8790   0032F2  CFDE F010          	movff	postinc2,??_setMotorPWM
  8791   0032F6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8792   0032FA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8793   0032FE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8794   003302  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8795                           
  8796                           ;dc_motor.c: 81:     } else {
  8797   003306  EFA3  F019         	goto	l421
  8798   00330A                     l5632:
  8799                           
  8800                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8801   00330A  500F               	movf	setMotorPWM@m^0,w,c
  8802   00330C  6ED9               	movwf	fsr2l,c
  8803   00330E  6ADA               	clrf	fsr2h,c
  8804   003310  0E05               	movlw	5
  8805   003312  26D9               	addwf	fsr2l,f,c
  8806   003314  CFDE F010          	movff	postinc2,??_setMotorPWM
  8807   003318  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8808   00331C  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8809   003320  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8810   003324  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8811                           
  8812                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8813   003328  500F               	movf	setMotorPWM@m^0,w,c
  8814   00332A  6ED9               	movwf	fsr2l,c
  8815   00332C  6ADA               	clrf	fsr2h,c
  8816   00332E  0E07               	movlw	7
  8817   003330  26D9               	addwf	fsr2l,f,c
  8818   003332  CFDE F010          	movff	postinc2,??_setMotorPWM
  8819   003336  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8820   00333A  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8821   00333E  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8822   003342  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8823   003346                     l421:
  8824   003346  0012               	return		;funcret
  8825   003348                     __end_of_setMotorPWM:
  8826                           	callstack 0
  8827                           
  8828 ;; *************** function ___lwdiv *****************
  8829 ;; Defined at:
  8830 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;  dividend        2    7[COMRAM] unsigned int 
  8833 ;;  divisor         2    9[COMRAM] unsigned int 
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;  quotient        2   11[COMRAM] unsigned int 
  8836 ;;  counter         1   13[COMRAM] unsigned char 
  8837 ;; Return value:  Size  Location     Type
  8838 ;;                  2    7[COMRAM] unsigned int 
  8839 ;; Registers used:
  8840 ;;		wreg, status,2, status,0
  8841 ;; Tracked objects:
  8842 ;;		On entry : 0/0
  8843 ;;		On exit  : 0/0
  8844 ;;		Unchanged: 0/0
  8845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8846 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8847 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8849 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8850 ;;Total ram usage:        7 bytes
  8851 ;; Hardware stack levels used: 1
  8852 ;; Hardware stack levels required when called: 1
  8853 ;; This function calls:
  8854 ;;		Nothing
  8855 ;; This function is called by:
  8856 ;;		_setMotorPWM
  8857 ;;		_ADC2String
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           	psect	text42
  8862   0040B0                     __ptext42:
  8863                           	callstack 0
  8864   0040B0                     ___lwdiv:
  8865                           	callstack 27
  8866   0040B0  0E00               	movlw	0
  8867   0040B2  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  8868   0040B4  0E00               	movlw	0
  8869   0040B6  6E0C               	movwf	___lwdiv@quotient^0,c
  8870   0040B8  500A               	movf	___lwdiv@divisor^0,w,c
  8871   0040BA  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8872   0040BC  B4D8               	btfsc	status,2,c
  8873   0040BE  EF63  F020         	goto	u2591
  8874   0040C2  EF65  F020         	goto	u2590
  8875   0040C6                     u2591:
  8876   0040C6  EF8D  F020         	goto	l1225
  8877   0040CA                     u2590:
  8878   0040CA  0E01               	movlw	1
  8879   0040CC  6E0E               	movwf	___lwdiv@counter^0,c
  8880   0040CE  EF6D  F020         	goto	l3606
  8881   0040D2                     l3604:
  8882   0040D2  90D8               	bcf	status,0,c
  8883   0040D4  360A               	rlcf	___lwdiv@divisor^0,f,c
  8884   0040D6  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8885   0040D8  2A0E               	incf	___lwdiv@counter^0,f,c
  8886   0040DA                     l3606:
  8887   0040DA  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8888   0040DC  EF72  F020         	goto	u2601
  8889   0040E0  EF74  F020         	goto	u2600
  8890   0040E4                     u2601:
  8891   0040E4  EF69  F020         	goto	l3604
  8892   0040E8                     u2600:
  8893   0040E8                     l3608:
  8894   0040E8  90D8               	bcf	status,0,c
  8895   0040EA  360C               	rlcf	___lwdiv@quotient^0,f,c
  8896   0040EC  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8897   0040EE  500A               	movf	___lwdiv@divisor^0,w,c
  8898   0040F0  5C08               	subwf	___lwdiv@dividend^0,w,c
  8899   0040F2  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8900   0040F4  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8901   0040F6  A0D8               	btfss	status,0,c
  8902   0040F8  EF80  F020         	goto	u2611
  8903   0040FC  EF82  F020         	goto	u2610
  8904   004100                     u2611:
  8905   004100  EF87  F020         	goto	l3616
  8906   004104                     u2610:
  8907   004104  500A               	movf	___lwdiv@divisor^0,w,c
  8908   004106  5E08               	subwf	___lwdiv@dividend^0,f,c
  8909   004108  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8910   00410A  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8911   00410C  800C               	bsf	___lwdiv@quotient^0,0,c
  8912   00410E                     l3616:
  8913   00410E  90D8               	bcf	status,0,c
  8914   004110  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8915   004112  320A               	rrcf	___lwdiv@divisor^0,f,c
  8916   004114  2E0E               	decfsz	___lwdiv@counter^0,f,c
  8917   004116  EF74  F020         	goto	l3608
  8918   00411A                     l1225:
  8919   00411A  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  8920   00411E  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8921   004122  0012               	return		;funcret
  8922   004124                     __end_of___lwdiv:
  8923                           	callstack 0
  8924                           
  8925 ;; *************** function _logAction *****************
  8926 ;; Defined at:
  8927 ;;		line 13 in file "return_func.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;  newAction       1    wreg     unsigned char 
  8930 ;;  newTime         2    1[COMRAM] int 
  8931 ;;  path_step       2    3[COMRAM] unsigned int 
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;  newAction       1    5[COMRAM] unsigned char 
  8934 ;; Return value:  Size  Location     Type
  8935 ;;                  1    wreg      void 
  8936 ;; Registers used:
  8937 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8943 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8946 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8947 ;;Total ram usage:        5 bytes
  8948 ;; Hardware stack levels used: 1
  8949 ;; Hardware stack levels required when called: 1
  8950 ;; This function calls:
  8951 ;;		Nothing
  8952 ;; This function is called by:
  8953 ;;		_decision
  8954 ;;		_get16bitTMR0val
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           	psect	text43
  8959   004314                     __ptext43:
  8960                           	callstack 0
  8961   004314                     _logAction:
  8962                           	callstack 28
  8963                           
  8964                           ;incstack = 0
  8965                           ;logAction@newAction stored from wreg
  8966   004314  6E06               	movwf	logAction@newAction^0,c
  8967   004316                     
  8968                           ;return_func.c: 14:     if (path_step < 50) {
  8969   004316  5005               	movf	(logAction@path_step+1)^0,w,c
  8970   004318  E107               	bnz	u4141
  8971   00431A  0E32               	movlw	50
  8972   00431C  5C04               	subwf	logAction@path_step^0,w,c
  8973   00431E  B0D8               	btfsc	status,0,c
  8974   004320  EF94  F021         	goto	u4141
  8975   004324  EF96  F021         	goto	u4140
  8976   004328                     u4141:
  8977   004328  EFAB  F021         	goto	l696
  8978   00432C                     u4140:
  8979   00432C                     
  8980                           ;return_func.c: 15:         action[path_step] = newAction;
  8981   00432C  0E3C               	movlw	low _action
  8982   00432E  2404               	addwf	logAction@path_step^0,w,c
  8983   004330  6ED9               	movwf	fsr2l,c
  8984   004332  0E01               	movlw	high _action
  8985   004334  2005               	addwfc	(logAction@path_step+1)^0,w,c
  8986   004336  6EDA               	movwf	fsr2h,c
  8987   004338  C006  FFDF         	movff	logAction@newAction,indf2
  8988                           
  8989                           ;return_func.c: 16:         time[path_step] = newTime;
  8990   00433C  90D8               	bcf	status,0,c
  8991   00433E  3404               	rlcf	logAction@path_step^0,w,c
  8992   004340  6ED9               	movwf	fsr2l,c
  8993   004342  3405               	rlcf	(logAction@path_step+1)^0,w,c
  8994   004344  6EDA               	movwf	fsr2h,c
  8995   004346  0E00               	movlw	low _time
  8996   004348  26D9               	addwf	fsr2l,f,c
  8997   00434A  0E02               	movlw	high _time
  8998   00434C  22DA               	addwfc	fsr2h,f,c
  8999   00434E  C002  FFDE         	movff	logAction@newTime,postinc2
  9000   004352  C003  FFDD         	movff	logAction@newTime+1,postdec2
  9001   004356                     l696:
  9002   004356  0012               	return		;funcret
  9003   004358                     __end_of_logAction:
  9004                           	callstack 0
  9005                           
  9006 ;; *************** function _color_click_init *****************
  9007 ;; Defined at:
  9008 ;;		line 9 in file "color.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;		None
  9011 ;; Auto vars:     Size  Location     Type
  9012 ;;		None
  9013 ;; Return value:  Size  Location     Type
  9014 ;;                  1    wreg      void 
  9015 ;; Registers used:
  9016 ;;		wreg, status,2, status,0, cstack
  9017 ;; Tracked objects:
  9018 ;;		On entry : 0/0
  9019 ;;		On exit  : 0/0
  9020 ;;		Unchanged: 0/0
  9021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9024 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9025 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9026 ;;Total ram usage:        1 bytes
  9027 ;; Hardware stack levels used: 1
  9028 ;; Hardware stack levels required when called: 4
  9029 ;; This function calls:
  9030 ;;		_I2C_2_Master_Init
  9031 ;;		_color_writetoaddr
  9032 ;; This function is called by:
  9033 ;;		_main
  9034 ;; This function uses a non-reentrant model
  9035 ;;
  9036                           
  9037                           	psect	text44
  9038   0044D2                     __ptext44:
  9039                           	callstack 0
  9040   0044D2                     _color_click_init:
  9041                           	callstack 26
  9042   0044D2                     
  9043                           ;color.c: 12:     I2C_2_Master_Init();
  9044   0044D2  EC5C  F024         	call	_I2C_2_Master_Init	;wreg free
  9045   0044D6                     
  9046                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  9047   0044D6  0E01               	movlw	1
  9048   0044D8  6E04               	movwf	color_writetoaddr@value^0,c
  9049   0044DA  0E00               	movlw	0
  9050   0044DC  EC98  F024         	call	_color_writetoaddr
  9051   0044E0                     
  9052                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  9053   0044E0  0E3F               	movlw	63
  9054   0044E2  6E06               	movwf	??_color_click_init^0,c
  9055   0044E4  0E55               	movlw	85
  9056   0044E6                     u6017:
  9057   0044E6  2EE8               	decfsz	wreg,f,c
  9058   0044E8  D7FE               	bra	u6017
  9059   0044EA  2E06               	decfsz	??_color_click_init^0,f,c
  9060   0044EC  D7FC               	bra	u6017
  9061   0044EE  0000               	nop	
  9062   0044F0                     
  9063                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  9064   0044F0  0E03               	movlw	3
  9065   0044F2  6E04               	movwf	color_writetoaddr@value^0,c
  9066   0044F4  0E00               	movlw	0
  9067   0044F6  EC98  F024         	call	_color_writetoaddr
  9068   0044FA                     
  9069                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  9070   0044FA  0ED5               	movlw	213
  9071   0044FC  6E04               	movwf	color_writetoaddr@value^0,c
  9072   0044FE  0E01               	movlw	1
  9073   004500  EC98  F024         	call	_color_writetoaddr
  9074   004504  0012               	return		;funcret
  9075   004506                     __end_of_color_click_init:
  9076                           	callstack 0
  9077                           
  9078 ;; *************** function _color_writetoaddr *****************
  9079 ;; Defined at:
  9080 ;;		line 25 in file "color.c"
  9081 ;; Parameters:    Size  Location     Type
  9082 ;;  address         1    wreg     unsigned char 
  9083 ;;  value           1    3[COMRAM] unsigned char 
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;  address         1    4[COMRAM] unsigned char 
  9086 ;; Return value:  Size  Location     Type
  9087 ;;                  1    wreg      void 
  9088 ;; Registers used:
  9089 ;;		wreg, status,2, status,0, cstack
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9095 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9098 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9099 ;;Total ram usage:        2 bytes
  9100 ;; Hardware stack levels used: 1
  9101 ;; Hardware stack levels required when called: 3
  9102 ;; This function calls:
  9103 ;;		_I2C_2_Master_Start
  9104 ;;		_I2C_2_Master_Stop
  9105 ;;		_I2C_2_Master_Write
  9106 ;; This function is called by:
  9107 ;;		_color_click_init
  9108 ;; This function uses a non-reentrant model
  9109 ;;
  9110                           
  9111                           	psect	text45
  9112   004930                     __ptext45:
  9113                           	callstack 0
  9114   004930                     _color_writetoaddr:
  9115                           	callstack 26
  9116                           
  9117                           ;incstack = 0
  9118                           ;color_writetoaddr@address stored from wreg
  9119   004930  6E05               	movwf	color_writetoaddr@address^0,c
  9120   004932                     
  9121                           ;color.c: 26:     I2C_2_Master_Start();
  9122   004932  ECEA  F024         	call	_I2C_2_Master_Start	;wreg free
  9123                           
  9124                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  9125   004936  0E52               	movlw	82
  9126   004938  ECDF  F024         	call	_I2C_2_Master_Write
  9127                           
  9128                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  9129   00493C  5005               	movf	color_writetoaddr@address^0,w,c
  9130   00493E  0980               	iorlw	128
  9131   004940  ECDF  F024         	call	_I2C_2_Master_Write
  9132                           
  9133                           ;color.c: 29:     I2C_2_Master_Write(value);
  9134   004944  5004               	movf	color_writetoaddr@value^0,w,c
  9135   004946  ECDF  F024         	call	_I2C_2_Master_Write
  9136                           
  9137                           ;color.c: 30:     I2C_2_Master_Stop();
  9138   00494A  ECE5  F024         	call	_I2C_2_Master_Stop	;wreg free
  9139   00494E  0012               	return		;funcret
  9140   004950                     __end_of_color_writetoaddr:
  9141                           	callstack 0
  9142                           
  9143 ;; *************** function _I2C_2_Master_Init *****************
  9144 ;; Defined at:
  9145 ;;		line 4 in file "i2c.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;		None
  9148 ;; Auto vars:     Size  Location     Type
  9149 ;;		None
  9150 ;; Return value:  Size  Location     Type
  9151 ;;                  1    wreg      void 
  9152 ;; Registers used:
  9153 ;;		wreg, status,2
  9154 ;; Tracked objects:
  9155 ;;		On entry : 0/0
  9156 ;;		On exit  : 0/0
  9157 ;;		Unchanged: 0/0
  9158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9163 ;;Total ram usage:        0 bytes
  9164 ;; Hardware stack levels used: 1
  9165 ;; Hardware stack levels required when called: 1
  9166 ;; This function calls:
  9167 ;;		Nothing
  9168 ;; This function is called by:
  9169 ;;		_color_click_init
  9170 ;; This function uses a non-reentrant model
  9171 ;;
  9172                           
  9173                           	psect	text46
  9174   0048B8                     __ptext46:
  9175                           	callstack 0
  9176   0048B8                     _I2C_2_Master_Init:
  9177                           	callstack 28
  9178   0048B8                     
  9179                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  9180   0048B8  010E               	movlb	14	; () banked
  9181   0048BA  51D9               	movf	217,w,b	;volatile
  9182   0048BC  0BF0               	andlw	-16
  9183   0048BE  0908               	iorlw	8
  9184   0048C0  6FD9               	movwf	217,b	;volatile
  9185   0048C2                     
  9186                           ; BSR set to: 14
  9187                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9188   0048C2  8BD9               	bsf	217,5,b	;volatile
  9189                           
  9190                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9191   0048C4  0E9F               	movlw	159
  9192   0048C6  6FD6               	movwf	214,b	;volatile
  9193   0048C8                     
  9194                           ; BSR set to: 14
  9195                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9196   0048C8  8A84               	bsf	132,5,c	;volatile
  9197   0048CA                     
  9198                           ; BSR set to: 14
  9199                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9200   0048CA  8C84               	bsf	132,6,c	;volatile
  9201   0048CC                     
  9202                           ; BSR set to: 14
  9203                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9204   0048CC  9BA7               	bcf	167,5,b	;volatile
  9205   0048CE                     
  9206                           ; BSR set to: 14
  9207                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9208   0048CE  9DA7               	bcf	167,6,b	;volatile
  9209                           
  9210                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9211   0048D0  0E1D               	movlw	29
  9212   0048D2  6F1D               	movwf	29,b	;volatile
  9213                           
  9214                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9215   0048D4  0E1E               	movlw	30
  9216   0048D6  6F1C               	movwf	28,b	;volatile
  9217                           
  9218                           ;i2c.c: 18:   RD5PPS=0x1C;
  9219   0048D8  0E1C               	movlw	28
  9220   0048DA  6F6F               	movwf	111,b	;volatile
  9221                           
  9222                           ;i2c.c: 19:   RD6PPS=0x1B;
  9223   0048DC  0E1B               	movlw	27
  9224   0048DE  6F70               	movwf	112,b	;volatile
  9225   0048E0                     
  9226                           ; BSR set to: 14
  9227   0048E0  0012               	return		;funcret
  9228   0048E2                     __end_of_I2C_2_Master_Init:
  9229                           	callstack 0
  9230                           
  9231 ;; *************** function _calibration_routine *****************
  9232 ;; Defined at:
  9233 ;;		line 133 in file "color.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;  cCal            1   70[COMRAM] PTR struct colors
  9236 ;;		 -> colorCalibration(10), 
  9237 ;; Auto vars:     Size  Location     Type
  9238 ;;  cal_state      20   50[BANK0 ] unsigned char [20]
  9239 ;; Return value:  Size  Location     Type
  9240 ;;                  1    wreg      void 
  9241 ;; Registers used:
  9242 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9243 ;; Tracked objects:
  9244 ;;		On entry : 0/0
  9245 ;;		On exit  : 0/0
  9246 ;;		Unchanged: 0/0
  9247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9248 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9249 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9250 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9251 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9252 ;;Total ram usage:       23 bytes
  9253 ;; Hardware stack levels used: 1
  9254 ;; Hardware stack levels required when called: 10
  9255 ;; This function calls:
  9256 ;;		_color_read_Blue
  9257 ;;		_color_read_Clear
  9258 ;;		_color_read_Green
  9259 ;;		_color_read_Red
  9260 ;;		_send2USART
  9261 ;;		_sendStringSerial4
  9262 ;;		_sprintf
  9263 ;; This function is called by:
  9264 ;;		_main
  9265 ;; This function uses a non-reentrant model
  9266 ;;
  9267                           
  9268                           	psect	text47
  9269   00299C                     __ptext47:
  9270                           	callstack 0
  9271   00299C                     _calibration_routine:
  9272                           	callstack 20
  9273   00299C                     
  9274                           ;color.c: 133: void calibration_routine(colors *cCal);color.c: 134: {;color.c: 136:     
      +                          LATGbits.LATG0 = 0;
  9275   00299C  907F               	bcf	127,0,c	;volatile
  9276                           
  9277                           ;color.c: 137:     LATEbits.LATE7 = 0;
  9278   00299E  9E7D               	bcf	125,7,c	;volatile
  9279                           
  9280                           ;color.c: 138:     LATAbits.LATA3 = 0;
  9281   0029A0  9679               	bcf	121,3,c	;volatile
  9282   0029A2                     
  9283                           ;color.c: 140:     char cal_state[20];;color.c: 144:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  9284   0029A2  0E92               	movlw	low calibration_routine@cal_state
  9285   0029A4  6E32               	movwf	sprintf@s^0,c
  9286   0029A6  0E8A               	movlw	low STR_1
  9287   0029A8  6E33               	movwf	sprintf@fmt^0,c
  9288   0029AA  0EC3               	movlw	low STR_2
  9289   0029AC  6E34               	movwf	(?_sprintf+2)^0,c
  9290   0029AE  5034               	movf	(?_sprintf+2)^0,w,c
  9291   0029B0  A4D8               	btfss	status,2,c
  9292   0029B2  0E0E               	movlw	high __smallconst
  9293   0029B4  6E35               	movwf	(?_sprintf+3)^0,c
  9294   0029B6  EC83  F022         	call	_sprintf	;wreg free
  9295   0029BA                     
  9296                           ;color.c: 145:     sendStringSerial4(cal_state);
  9297   0029BA  0E92               	movlw	low calibration_routine@cal_state
  9298   0029BC  6E03               	movwf	sendStringSerial4@string^0,c
  9299   0029BE  ECE3  F023         	call	_sendStringSerial4	;wreg free
  9300   0029C2                     l102:
  9301                           
  9302                           ;color.c: 148:     while(PORTFbits.RF2 == 1){
  9303   0029C2  B48E               	btfsc	142,2,c	;volatile
  9304   0029C4  EFE6  F014         	goto	u5351
  9305   0029C8  EFE8  F014         	goto	u5350
  9306   0029CC                     u5351:
  9307   0029CC  EFE1  F014         	goto	l102
  9308   0029D0                     u5350:
  9309   0029D0                     
  9310                           ;color.c: 152:     LATGbits.LATG0 = 1;
  9311   0029D0  807F               	bsf	127,0,c	;volatile
  9312   0029D2                     
  9313                           ;color.c: 153:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9314   0029D2  0E29               	movlw	41
  9315   0029D4  6E49               	movwf	(??_calibration_routine+1)^0,c
  9316   0029D6  0E96               	movlw	150
  9317   0029D8  6E48               	movwf	??_calibration_routine^0,c
  9318   0029DA  0E7F               	movlw	127
  9319   0029DC                     u6027:
  9320   0029DC  2EE8               	decfsz	wreg,f,c
  9321   0029DE  D7FE               	bra	u6027
  9322   0029E0  2E48               	decfsz	??_calibration_routine^0,f,c
  9323   0029E2  D7FC               	bra	u6027
  9324   0029E4  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9325   0029E6  D7FA               	bra	u6027
  9326   0029E8  0000               	nop	
  9327   0029EA                     
  9328                           ;color.c: 154:     (cCal->red) = color_read_Red();
  9329   0029EA  ECC7  F020         	call	_color_read_Red	;wreg free
  9330   0029EE  5047               	movf	calibration_routine@cCal^0,w,c
  9331   0029F0  6ED9               	movwf	fsr2l,c
  9332   0029F2  6ADA               	clrf	fsr2h,c
  9333   0029F4  C006  FFDE         	movff	?_color_read_Red,postinc2
  9334   0029F8  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  9335   0029FC                     
  9336                           ;color.c: 155:     LATGbits.LATG0 = 0;
  9337   0029FC  907F               	bcf	127,0,c	;volatile
  9338   0029FE                     
  9339                           ;color.c: 158:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  9340   0029FE  0E92               	movlw	low calibration_routine@cal_state
  9341   002A00  6E32               	movwf	sprintf@s^0,c
  9342   002A02  0E01               	movlw	low STR_3
  9343   002A04  6E33               	movwf	sprintf@fmt^0,c
  9344   002A06  0EC3               	movlw	low STR_2
  9345   002A08  6E34               	movwf	(?_sprintf+2)^0,c
  9346   002A0A  5034               	movf	(?_sprintf+2)^0,w,c
  9347   002A0C  A4D8               	btfss	status,2,c
  9348   002A0E  0E0E               	movlw	high __smallconst
  9349   002A10  6E35               	movwf	(?_sprintf+3)^0,c
  9350   002A12  EC83  F022         	call	_sprintf	;wreg free
  9351   002A16                     
  9352                           ;color.c: 159:     sendStringSerial4(&cal_state);
  9353   002A16  0E92               	movlw	low calibration_routine@cal_state
  9354   002A18  6E03               	movwf	sendStringSerial4@string^0,c
  9355   002A1A  ECE3  F023         	call	_sendStringSerial4	;wreg free
  9356   002A1E                     l105:
  9357                           
  9358                           ;color.c: 161:     while(PORTFbits.RF2 == 1){
  9359   002A1E  B48E               	btfsc	142,2,c	;volatile
  9360   002A20  EF14  F015         	goto	u5361
  9361   002A24  EF16  F015         	goto	u5360
  9362   002A28                     u5361:
  9363   002A28  EF0F  F015         	goto	l105
  9364   002A2C                     u5360:
  9365   002A2C                     
  9366                           ;color.c: 165:     LATEbits.LATE7 = 1;
  9367   002A2C  8E7D               	bsf	125,7,c	;volatile
  9368   002A2E                     
  9369                           ;color.c: 166:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9370   002A2E  0E29               	movlw	41
  9371   002A30  6E49               	movwf	(??_calibration_routine+1)^0,c
  9372   002A32  0E96               	movlw	150
  9373   002A34  6E48               	movwf	??_calibration_routine^0,c
  9374   002A36  0E7F               	movlw	127
  9375   002A38                     u6037:
  9376   002A38  2EE8               	decfsz	wreg,f,c
  9377   002A3A  D7FE               	bra	u6037
  9378   002A3C  2E48               	decfsz	??_calibration_routine^0,f,c
  9379   002A3E  D7FC               	bra	u6037
  9380   002A40  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9381   002A42  D7FA               	bra	u6037
  9382   002A44  0000               	nop	
  9383   002A46                     
  9384                           ;color.c: 167:     (cCal->green) = color_read_Green();
  9385   002A46  ECEF  F020         	call	_color_read_Green	;wreg free
  9386   002A4A  5047               	movf	calibration_routine@cCal^0,w,c
  9387   002A4C  6ED9               	movwf	fsr2l,c
  9388   002A4E  6ADA               	clrf	fsr2h,c
  9389   002A50  0E02               	movlw	2
  9390   002A52  26D9               	addwf	fsr2l,f,c
  9391   002A54  C006  FFDE         	movff	?_color_read_Green,postinc2
  9392   002A58  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  9393   002A5C                     
  9394                           ;color.c: 168:     LATEbits.LATE7 = 0;
  9395   002A5C  9E7D               	bcf	125,7,c	;volatile
  9396   002A5E                     
  9397                           ;color.c: 171:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  9398   002A5E  0E92               	movlw	low calibration_routine@cal_state
  9399   002A60  6E32               	movwf	sprintf@s^0,c
  9400   002A62  0E3B               	movlw	low STR_5
  9401   002A64  6E33               	movwf	sprintf@fmt^0,c
  9402   002A66  0EC3               	movlw	low STR_2
  9403   002A68  6E34               	movwf	(?_sprintf+2)^0,c
  9404   002A6A  5034               	movf	(?_sprintf+2)^0,w,c
  9405   002A6C  A4D8               	btfss	status,2,c
  9406   002A6E  0E0E               	movlw	high __smallconst
  9407   002A70  6E35               	movwf	(?_sprintf+3)^0,c
  9408   002A72  EC83  F022         	call	_sprintf	;wreg free
  9409   002A76                     
  9410                           ;color.c: 172:     sendStringSerial4(&cal_state);
  9411   002A76  0E92               	movlw	low calibration_routine@cal_state
  9412   002A78  6E03               	movwf	sendStringSerial4@string^0,c
  9413   002A7A  ECE3  F023         	call	_sendStringSerial4	;wreg free
  9414   002A7E                     l108:
  9415                           
  9416                           ;color.c: 174:     while(PORTFbits.RF2 == 1){
  9417   002A7E  B48E               	btfsc	142,2,c	;volatile
  9418   002A80  EF44  F015         	goto	u5371
  9419   002A84  EF46  F015         	goto	u5370
  9420   002A88                     u5371:
  9421   002A88  EF3F  F015         	goto	l108
  9422   002A8C                     u5370:
  9423   002A8C                     
  9424                           ;color.c: 178:     LATAbits.LATA3 = 1;
  9425   002A8C  8679               	bsf	121,3,c	;volatile
  9426   002A8E                     
  9427                           ;color.c: 179:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9428   002A8E  0E29               	movlw	41
  9429   002A90  6E49               	movwf	(??_calibration_routine+1)^0,c
  9430   002A92  0E96               	movlw	150
  9431   002A94  6E48               	movwf	??_calibration_routine^0,c
  9432   002A96  0E7F               	movlw	127
  9433   002A98                     u6047:
  9434   002A98  2EE8               	decfsz	wreg,f,c
  9435   002A9A  D7FE               	bra	u6047
  9436   002A9C  2E48               	decfsz	??_calibration_routine^0,f,c
  9437   002A9E  D7FC               	bra	u6047
  9438   002AA0  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9439   002AA2  D7FA               	bra	u6047
  9440   002AA4  0000               	nop	
  9441   002AA6                     
  9442                           ;color.c: 180:     (cCal->blue) = color_read_Blue();
  9443   002AA6  EC3F  F021         	call	_color_read_Blue	;wreg free
  9444   002AAA  5047               	movf	calibration_routine@cCal^0,w,c
  9445   002AAC  6ED9               	movwf	fsr2l,c
  9446   002AAE  6ADA               	clrf	fsr2h,c
  9447   002AB0  0E04               	movlw	4
  9448   002AB2  26D9               	addwf	fsr2l,f,c
  9449   002AB4  C006  FFDE         	movff	?_color_read_Blue,postinc2
  9450   002AB8  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  9451   002ABC                     
  9452                           ;color.c: 181:     LATAbits.LATA3 = 0;
  9453   002ABC  9679               	bcf	121,3,c	;volatile
  9454   002ABE                     
  9455                           ;color.c: 184:     sprintf(cal_state,"Calibration state =  white", ".");
  9456   002ABE  0E92               	movlw	low calibration_routine@cal_state
  9457   002AC0  6E32               	movwf	sprintf@s^0,c
  9458   002AC2  0E56               	movlw	low STR_7
  9459   002AC4  6E33               	movwf	sprintf@fmt^0,c
  9460   002AC6  0EC3               	movlw	low STR_2
  9461   002AC8  6E34               	movwf	(?_sprintf+2)^0,c
  9462   002ACA  5034               	movf	(?_sprintf+2)^0,w,c
  9463   002ACC  A4D8               	btfss	status,2,c
  9464   002ACE  0E0E               	movlw	high __smallconst
  9465   002AD0  6E35               	movwf	(?_sprintf+3)^0,c
  9466   002AD2  EC83  F022         	call	_sprintf	;wreg free
  9467   002AD6                     
  9468                           ;color.c: 185:     sendStringSerial4(&cal_state);
  9469   002AD6  0E92               	movlw	low calibration_routine@cal_state
  9470   002AD8  6E03               	movwf	sendStringSerial4@string^0,c
  9471   002ADA  ECE3  F023         	call	_sendStringSerial4	;wreg free
  9472   002ADE                     l111:
  9473                           
  9474                           ;color.c: 187:     while(PORTFbits.RF2 == 1){
  9475   002ADE  B48E               	btfsc	142,2,c	;volatile
  9476   002AE0  EF74  F015         	goto	u5381
  9477   002AE4  EF76  F015         	goto	u5380
  9478   002AE8                     u5381:
  9479   002AE8  EF6F  F015         	goto	l111
  9480   002AEC                     u5380:
  9481   002AEC                     
  9482                           ;color.c: 190:     LATGbits.LATG0 = 1;
  9483   002AEC  807F               	bsf	127,0,c	;volatile
  9484                           
  9485                           ;color.c: 191:     LATEbits.LATE7 = 1;
  9486   002AEE  8E7D               	bsf	125,7,c	;volatile
  9487                           
  9488                           ;color.c: 192:     LATAbits.LATA3 = 1;
  9489   002AF0  8679               	bsf	121,3,c	;volatile
  9490   002AF2                     
  9491                           ;color.c: 193:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9492   002AF2  0E29               	movlw	41
  9493   002AF4  6E49               	movwf	(??_calibration_routine+1)^0,c
  9494   002AF6  0E96               	movlw	150
  9495   002AF8  6E48               	movwf	??_calibration_routine^0,c
  9496   002AFA  0E7F               	movlw	127
  9497   002AFC                     u6057:
  9498   002AFC  2EE8               	decfsz	wreg,f,c
  9499   002AFE  D7FE               	bra	u6057
  9500   002B00  2E48               	decfsz	??_calibration_routine^0,f,c
  9501   002B02  D7FC               	bra	u6057
  9502   002B04  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9503   002B06  D7FA               	bra	u6057
  9504   002B08  0000               	nop	
  9505   002B0A                     
  9506                           ;color.c: 194:     (cCal->clear) = color_read_Clear();
  9507   002B0A  EC17  F021         	call	_color_read_Clear	;wreg free
  9508   002B0E  5047               	movf	calibration_routine@cCal^0,w,c
  9509   002B10  6ED9               	movwf	fsr2l,c
  9510   002B12  6ADA               	clrf	fsr2h,c
  9511   002B14  0E06               	movlw	6
  9512   002B16  26D9               	addwf	fsr2l,f,c
  9513   002B18  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9514   002B1C  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9515   002B20                     
  9516                           ;color.c: 195:     LATGbits.LATG0 = 0;
  9517   002B20  907F               	bcf	127,0,c	;volatile
  9518   002B22                     
  9519                           ;color.c: 196:     LATEbits.LATE7 = 0;
  9520   002B22  9E7D               	bcf	125,7,c	;volatile
  9521   002B24                     
  9522                           ;color.c: 197:     LATAbits.LATA3 = 0;
  9523   002B24  9679               	bcf	121,3,c	;volatile
  9524   002B26                     
  9525                           ;color.c: 199:     sprintf(cal_state,"Calibration state =  ambient", ".");
  9526   002B26  0E92               	movlw	low calibration_routine@cal_state
  9527   002B28  6E32               	movwf	sprintf@s^0,c
  9528   002B2A  0E1E               	movlw	low STR_9
  9529   002B2C  6E33               	movwf	sprintf@fmt^0,c
  9530   002B2E  0EC3               	movlw	low STR_2
  9531   002B30  6E34               	movwf	(?_sprintf+2)^0,c
  9532   002B32  5034               	movf	(?_sprintf+2)^0,w,c
  9533   002B34  A4D8               	btfss	status,2,c
  9534   002B36  0E0E               	movlw	high __smallconst
  9535   002B38  6E35               	movwf	(?_sprintf+3)^0,c
  9536   002B3A  EC83  F022         	call	_sprintf	;wreg free
  9537   002B3E                     
  9538                           ;color.c: 200:     sendStringSerial4(&cal_state);
  9539   002B3E  0E92               	movlw	low calibration_routine@cal_state
  9540   002B40  6E03               	movwf	sendStringSerial4@string^0,c
  9541   002B42  ECE3  F023         	call	_sendStringSerial4	;wreg free
  9542   002B46                     l114:
  9543                           
  9544                           ;color.c: 202:     while(PORTFbits.RF2 == 1){
  9545   002B46  B48E               	btfsc	142,2,c	;volatile
  9546   002B48  EFA8  F015         	goto	u5391
  9547   002B4C  EFAA  F015         	goto	u5390
  9548   002B50                     u5391:
  9549   002B50  EFA3  F015         	goto	l114
  9550   002B54                     u5390:
  9551   002B54                     
  9552                           ;color.c: 205:     LATGbits.LATG0 = 1;
  9553   002B54  807F               	bsf	127,0,c	;volatile
  9554                           
  9555                           ;color.c: 206:     LATEbits.LATE7 = 1;
  9556   002B56  8E7D               	bsf	125,7,c	;volatile
  9557                           
  9558                           ;color.c: 207:     LATAbits.LATA3 = 1;
  9559   002B58  8679               	bsf	121,3,c	;volatile
  9560   002B5A                     
  9561                           ;color.c: 208:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9562   002B5A  0E29               	movlw	41
  9563   002B5C  6E49               	movwf	(??_calibration_routine+1)^0,c
  9564   002B5E  0E96               	movlw	150
  9565   002B60  6E48               	movwf	??_calibration_routine^0,c
  9566   002B62  0E7F               	movlw	127
  9567   002B64                     u6067:
  9568   002B64  2EE8               	decfsz	wreg,f,c
  9569   002B66  D7FE               	bra	u6067
  9570   002B68  2E48               	decfsz	??_calibration_routine^0,f,c
  9571   002B6A  D7FC               	bra	u6067
  9572   002B6C  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9573   002B6E  D7FA               	bra	u6067
  9574   002B70  0000               	nop	
  9575   002B72                     
  9576                           ;color.c: 209:     (cCal->ambient) = color_read_Clear();
  9577   002B72  EC17  F021         	call	_color_read_Clear	;wreg free
  9578   002B76  5047               	movf	calibration_routine@cCal^0,w,c
  9579   002B78  6ED9               	movwf	fsr2l,c
  9580   002B7A  6ADA               	clrf	fsr2h,c
  9581   002B7C  0E08               	movlw	8
  9582   002B7E  26D9               	addwf	fsr2l,f,c
  9583   002B80  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9584   002B84  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9585   002B88                     
  9586                           ;color.c: 210:     LATGbits.LATG0 = 0;
  9587   002B88  907F               	bcf	127,0,c	;volatile
  9588   002B8A                     
  9589                           ;color.c: 211:     LATEbits.LATE7 = 0;
  9590   002B8A  9E7D               	bcf	125,7,c	;volatile
  9591   002B8C                     
  9592                           ;color.c: 212:     LATAbits.LATA3 = 0;
  9593   002B8C  9679               	bcf	121,3,c	;volatile
  9594   002B8E                     
  9595                           ;color.c: 216:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  9596   002B8E  0E92               	movlw	low calibration_routine@cal_state
  9597   002B90  6E32               	movwf	sprintf@s^0,c
  9598   002B92  0E71               	movlw	low STR_11
  9599   002B94  6E33               	movwf	sprintf@fmt^0,c
  9600   002B96  0EC3               	movlw	low STR_2
  9601   002B98  6E34               	movwf	(?_sprintf+2)^0,c
  9602   002B9A  5034               	movf	(?_sprintf+2)^0,w,c
  9603   002B9C  A4D8               	btfss	status,2,c
  9604   002B9E  0E0E               	movlw	high __smallconst
  9605   002BA0  6E35               	movwf	(?_sprintf+3)^0,c
  9606   002BA2  EC83  F022         	call	_sprintf	;wreg free
  9607   002BA6                     
  9608                           ;color.c: 217:     sendStringSerial4(&cal_state);
  9609   002BA6  0E92               	movlw	low calibration_routine@cal_state
  9610   002BA8  6E03               	movwf	sendStringSerial4@string^0,c
  9611   002BAA  ECE3  F023         	call	_sendStringSerial4	;wreg free
  9612   002BAE                     
  9613                           ;color.c: 218:     send2USART(colorCalibration.ambient);
  9614   002BAE  C0E9  F045         	movff	_colorCalibration+8,send2USART@hue
  9615   002BB2  C0EA  F046         	movff	_colorCalibration+9,send2USART@hue+1
  9616   002BB6  ECB7  F024         	call	_send2USART	;wreg free
  9617   002BBA                     l117:
  9618                           
  9619                           ;color.c: 220:     while(PORTFbits.RF2 == 1){
  9620   002BBA  B48E               	btfsc	142,2,c	;volatile
  9621   002BBC  EFE2  F015         	goto	u5401
  9622   002BC0  EFE4  F015         	goto	u5400
  9623   002BC4                     u5401:
  9624   002BC4  EFDD  F015         	goto	l117
  9625   002BC8                     u5400:
  9626   002BC8                     
  9627                           ;color.c: 223:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9628   002BC8  0E29               	movlw	41
  9629   002BCA  6E49               	movwf	(??_calibration_routine+1)^0,c
  9630   002BCC  0E96               	movlw	150
  9631   002BCE  6E48               	movwf	??_calibration_routine^0,c
  9632   002BD0  0E7F               	movlw	127
  9633   002BD2                     u6077:
  9634   002BD2  2EE8               	decfsz	wreg,f,c
  9635   002BD4  D7FE               	bra	u6077
  9636   002BD6  2E48               	decfsz	??_calibration_routine^0,f,c
  9637   002BD8  D7FC               	bra	u6077
  9638   002BDA  2E49               	decfsz	(??_calibration_routine+1)^0,f,c
  9639   002BDC  D7FA               	bra	u6077
  9640   002BDE  0000               	nop	
  9641   002BE0  0012               	return		;funcret
  9642   002BE2                     __end_of_calibration_routine:
  9643                           	callstack 0
  9644                           
  9645 ;; *************** function _send2USART *****************
  9646 ;; Defined at:
  9647 ;;		line 146 in file "serial.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;  hue             2   68[COMRAM] unsigned int 
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      void 
  9654 ;; Registers used:
  9655 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9661 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9662 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9664 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9665 ;;Total ram usage:       52 bytes
  9666 ;; Hardware stack levels used: 1
  9667 ;; Hardware stack levels required when called: 9
  9668 ;; This function calls:
  9669 ;;		_sendStringSerial4
  9670 ;;		_sprintf
  9671 ;; This function is called by:
  9672 ;;		_calibration_routine
  9673 ;;		_main
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           	psect	text48
  9678   00496E                     __ptext48:
  9679                           	callstack 0
  9680   00496E                     _send2USART:
  9681                           	callstack 21
  9682   00496E                     
  9683                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  9684   00496E  0E60               	movlw	low send2USART@hue_char
  9685   004970  6E32               	movwf	sprintf@s^0,c
  9686   004972  0EB7               	movlw	low STR_14
  9687   004974  6E33               	movwf	sprintf@fmt^0,c
  9688   004976  C045  F034         	movff	send2USART@hue,?_sprintf+2
  9689   00497A  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  9690   00497E  EC83  F022         	call	_sprintf	;wreg free
  9691   004982                     
  9692                           ;serial.c: 158:         sendStringSerial4(hue_char);
  9693   004982  0E60               	movlw	low send2USART@hue_char
  9694   004984  6E03               	movwf	sendStringSerial4@string^0,c
  9695   004986  ECE3  F023         	call	_sendStringSerial4	;wreg free
  9696   00498A  0012               	return		;funcret
  9697   00498C                     __end_of_send2USART:
  9698                           	callstack 0
  9699                           
  9700 ;; *************** function _sprintf *****************
  9701 ;; Defined at:
  9702 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;  s               1   49[COMRAM] PTR unsigned char 
  9705 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  9706 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9707 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9708 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9709 ;; Auto vars:     Size  Location     Type
  9710 ;;  f              12   56[COMRAM] struct _IO_FILE
  9711 ;;  ret             2    0        int 
  9712 ;;  ap              1   55[COMRAM] PTR void [1]
  9713 ;;		 -> ?_sprintf(2), 
  9714 ;; Return value:  Size  Location     Type
  9715 ;;                  2   49[COMRAM] int 
  9716 ;; Registers used:
  9717 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9718 ;; Tracked objects:
  9719 ;;		On entry : 0/0
  9720 ;;		On exit  : 0/0
  9721 ;;		Unchanged: 0/0
  9722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9723 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9724 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9726 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9727 ;;Total ram usage:       19 bytes
  9728 ;; Hardware stack levels used: 1
  9729 ;; Hardware stack levels required when called: 8
  9730 ;; This function calls:
  9731 ;;		_vfprintf
  9732 ;; This function is called by:
  9733 ;;		_calibration_routine
  9734 ;;		_send2USART
  9735 ;;		_ADC2String
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           	psect	text49
  9740   004506                     __ptext49:
  9741                           	callstack 0
  9742   004506                     _sprintf:
  9743                           	callstack 21
  9744   004506  0E34               	movlw	low (?_sprintf+2)
  9745   004508  6E38               	movwf	sprintf@ap^0,c
  9746   00450A  C032  F039         	movff	sprintf@s,sprintf@f
  9747   00450E  0E00               	movlw	0
  9748   004510  6E3D               	movwf	(sprintf@f+4)^0,c
  9749   004512  0E00               	movlw	0
  9750   004514  6E3C               	movwf	(sprintf@f+3)^0,c
  9751   004516  0E00               	movlw	0
  9752   004518  6E44               	movwf	(sprintf@f+11)^0,c
  9753   00451A  0E00               	movlw	0
  9754   00451C  6E43               	movwf	(sprintf@f+10)^0,c
  9755   00451E  0E39               	movlw	low sprintf@f
  9756   004520  6E2E               	movwf	vfprintf@fp^0,c
  9757   004522  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9758   004526  0E38               	movlw	low sprintf@ap
  9759   004528  6E30               	movwf	vfprintf@ap^0,c
  9760   00452A  ECCD  F021         	call	_vfprintf	;wreg free
  9761   00452E  5032               	movf	sprintf@s^0,w,c
  9762   004530  243C               	addwf	(sprintf@f+3)^0,w,c
  9763   004532  6ED9               	movwf	fsr2l,c
  9764   004534  6ADA               	clrf	fsr2h,c
  9765   004536  6ADF               	clrf	indf2,c
  9766   004538  0012               	return		;funcret
  9767   00453A                     __end_of_sprintf:
  9768                           	callstack 0
  9769                           
  9770 ;; *************** function _vfprintf *****************
  9771 ;; Defined at:
  9772 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9773 ;; Parameters:    Size  Location     Type
  9774 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9775 ;;		 -> sprintf@f(12), 
  9776 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9777 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9778 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9779 ;;  ap              1   47[COMRAM] PTR PTR void 
  9780 ;;		 -> sprintf@ap(1), 
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9783 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9784 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9785 ;; Return value:  Size  Location     Type
  9786 ;;                  2   45[COMRAM] int 
  9787 ;; Registers used:
  9788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9789 ;; Tracked objects:
  9790 ;;		On entry : 0/0
  9791 ;;		On exit  : 0/0
  9792 ;;		Unchanged: 0/0
  9793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9794 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9797 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9798 ;;Total ram usage:        4 bytes
  9799 ;; Hardware stack levels used: 1
  9800 ;; Hardware stack levels required when called: 7
  9801 ;; This function calls:
  9802 ;;		_vfpfcnvrt
  9803 ;; This function is called by:
  9804 ;;		_sprintf
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           	psect	text50
  9809   00439A                     __ptext50:
  9810                           	callstack 0
  9811   00439A                     _vfprintf:
  9812                           	callstack 21
  9813   00439A                     
  9814                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9815   00439A  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9816                           
  9817                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9818   00439E  EFD9  F021         	goto	l5790
  9819   0043A2                     l5788:
  9820                           
  9821                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9822   0043A2  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9823   0043A6  0E31               	movlw	low vfprintf@cfmt
  9824   0043A8  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9825   0043AA  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9826   0043AE  ECCB  F016         	call	_vfpfcnvrt	;wreg free
  9827   0043B2                     l5790:
  9828                           
  9829                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9830   0043B2  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9831   0043B6                     	if	1	;There is more than 1 active tblptr byte
  9832   0043B6  0E0E               	movlw	high __smallconst
  9833   0043B8  6EF7               	movwf	tblptrh,c
  9834   0043BA                     	endif
  9835   0043BA                     	if	0	;tblptru may be non-zero
  9836   0043BA                     	endif
  9837   0043BA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9838   0043BA  0E00               	movlw	low (__smallconst shr (0+16))
  9839   0043BC  6EF8               	movwf	tblptru,c
  9840   0043BE                     	endif
  9841   0043BE  0008               	tblrd		*
  9842   0043C0  50F5               	movf	tablat,w,c
  9843   0043C2  0900               	iorlw	0
  9844   0043C4  A4D8               	btfss	status,2,c
  9845   0043C6  EFE7  F021         	goto	u5211
  9846   0043CA  EFE9  F021         	goto	u5210
  9847   0043CE                     u5211:
  9848   0043CE  EFD1  F021         	goto	l5788
  9849   0043D2                     u5210:
  9850   0043D2                     
  9851                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9852   0043D2  0E00               	movlw	0
  9853   0043D4  6E2F               	movwf	(?_vfprintf+1)^0,c
  9854   0043D6  0E00               	movlw	0
  9855   0043D8  6E2E               	movwf	?_vfprintf^0,c
  9856   0043DA  0012               	return		;funcret
  9857   0043DC                     __end_of_vfprintf:
  9858                           	callstack 0
  9859                           
  9860 ;; *************** function _vfpfcnvrt *****************
  9861 ;; Defined at:
  9862 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9863 ;; Parameters:    Size  Location     Type
  9864 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9865 ;;		 -> sprintf@f(12), 
  9866 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9867 ;;		 -> vfprintf@cfmt(1), 
  9868 ;;  ap              1   36[COMRAM] PTR PTR void 
  9869 ;;		 -> sprintf@ap(1), 
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;  convarg         4   39[COMRAM] struct .
  9872 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9873 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9874 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9875 ;;  done            1   43[COMRAM] _Bool 
  9876 ;;  c               1    0        unsigned char 
  9877 ;; Return value:  Size  Location     Type
  9878 ;;                  1    wreg      void 
  9879 ;; Registers used:
  9880 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9881 ;; Tracked objects:
  9882 ;;		On entry : 0/0
  9883 ;;		On exit  : 0/0
  9884 ;;		Unchanged: 0/0
  9885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9886 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9887 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9888 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9889 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9890 ;;Total ram usage:       11 bytes
  9891 ;; Hardware stack levels used: 1
  9892 ;; Hardware stack levels required when called: 6
  9893 ;; This function calls:
  9894 ;;		_dtoa
  9895 ;;		_fputc
  9896 ;;		_read_prec_or_width
  9897 ;; This function is called by:
  9898 ;;		_vfprintf
  9899 ;; This function uses a non-reentrant model
  9900 ;;
  9901                           
  9902                           	psect	text51
  9903   002D96                     __ptext51:
  9904                           	callstack 0
  9905   002D96                     _vfpfcnvrt:
  9906                           	callstack 21
  9907   002D96                     
  9908                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9909   002D96  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9910   002D98  6ED9               	movwf	fsr2l,c
  9911   002D9A  6ADA               	clrf	fsr2h,c
  9912   002D9C  CFDF FFF6          	movff	indf2,tblptrl
  9913   002DA0                     	if	1	;There is more than 1 active tblptr byte
  9914   002DA0  0E0E               	movlw	high __smallconst
  9915   002DA2  6EF7               	movwf	tblptrh,c
  9916   002DA4                     	endif
  9917   002DA4                     	if	0	;tblptru may be non-zero
  9918   002DA4                     	endif
  9919   002DA4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9920   002DA4  0E00               	movlw	low (__smallconst shr (0+16))
  9921   002DA6  6EF8               	movwf	tblptru,c
  9922   002DA8                     	endif
  9923   002DA8  0008               	tblrd		*
  9924   002DAA  50F5               	movf	tablat,w,c
  9925   002DAC  0A25               	xorlw	37
  9926   002DAE  A4D8               	btfss	status,2,c
  9927   002DB0  EFDC  F016         	goto	u5061
  9928   002DB4  EFDE  F016         	goto	u5060
  9929   002DB8                     u5061:
  9930   002DB8  EF7B  F017         	goto	l5680
  9931   002DBC                     u5060:
  9932   002DBC                     
  9933                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9934   002DBC  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9935   002DBE  6ED9               	movwf	fsr2l,c
  9936   002DC0  6ADA               	clrf	fsr2h,c
  9937   002DC2  2ADF               	incf	indf2,f,c
  9938   002DC4                     
  9939                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9940   002DC4  0E00               	movlw	0
  9941   002DC6  0100               	movlb	0	; () banked
  9942   002DC8  6FCF               	movwf	(_width+1)& (0+255),b
  9943   002DCA  0E00               	movlw	0
  9944   002DCC  6FCE               	movwf	_width& (0+255),b
  9945   002DCE  C0CE  F0D2         	movff	_width,_flags
  9946   002DD2                     
  9947                           ; BSR set to: 0
  9948                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9949   002DD2  69D0               	setf	_prec& (0+255),b
  9950   002DD4  69D1               	setf	(_prec+1)& (0+255),b
  9951   002DD6                     
  9952                           ; BSR set to: 0
  9953                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9954   002DD6  0E00               	movlw	0
  9955   002DD8  6E2C               	movwf	vfpfcnvrt@done^0,c
  9956                           
  9957                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9958   002DDA  EF16  F017         	goto	l5654
  9959   002DDE                     l5644:
  9960                           
  9961                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9962   002DDE  0100               	movlb	0	; () banked
  9963   002DE0  83D2               	bsf	_flags& (0+255),1,b
  9964   002DE2                     
  9965                           ; BSR set to: 0
  9966                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9967   002DE2  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9968   002DE4  6ED9               	movwf	fsr2l,c
  9969   002DE6  6ADA               	clrf	fsr2h,c
  9970   002DE8  2ADF               	incf	indf2,f,c
  9971                           
  9972                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9973   002DEA  EF16  F017         	goto	l5654
  9974   002DEE                     l5648:
  9975                           
  9976                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9977   002DEE  0E01               	movlw	1
  9978   002DF0  6E2C               	movwf	vfpfcnvrt@done^0,c
  9979                           
  9980                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9981   002DF2  EF16  F017         	goto	l5654
  9982   002DF6                     l5652:
  9983   002DF6  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9984   002DF8  6ED9               	movwf	fsr2l,c
  9985   002DFA  6ADA               	clrf	fsr2h,c
  9986   002DFC  CFDF FFF6          	movff	indf2,tblptrl
  9987   002E00                     	if	1	;There is more than 1 active tblptr byte
  9988   002E00  0E0E               	movlw	high __smallconst
  9989   002E02  6EF7               	movwf	tblptrh,c
  9990   002E04                     	endif
  9991   002E04                     	if	0	;tblptru may be non-zero
  9992   002E04                     	endif
  9993   002E04                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9994   002E04  0E00               	movlw	low (__smallconst shr (0+16))
  9995   002E06  6EF8               	movwf	tblptru,c
  9996   002E08                     	endif
  9997   002E08  0008               	tblrd		*
  9998   002E0A  50F5               	movf	tablat,w,c
  9999   002E0C  6E26               	movwf	??_vfpfcnvrt^0,c
 10000   002E0E  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
 10001                           
 10002                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10003                           ; Switch size 1, requested type "simple"
 10004                           ; Number of cases is 1, Range of values is 0 to 0
 10005                           ; switch strategies available:
 10006                           ; Name         Instructions Cycles
 10007                           ; simple_byte            4     3 (average)
 10008                           ;	Chosen strategy is simple_byte
 10009   002E10  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
 10010   002E12  0A00               	xorlw	0	; case 0
 10011   002E14  B4D8               	btfsc	status,2,c
 10012   002E16  EF0F  F017         	goto	l6476
 10013   002E1A  EFF7  F016         	goto	l5648
 10014   002E1E                     l6476:
 10015                           
 10016                           ; Switch size 1, requested type "simple"
 10017                           ; Number of cases is 1, Range of values is 48 to 48
 10018                           ; switch strategies available:
 10019                           ; Name         Instructions Cycles
 10020                           ; simple_byte            4     3 (average)
 10021                           ;	Chosen strategy is simple_byte
 10022   002E1E  5026               	movf	??_vfpfcnvrt^0,w,c
 10023   002E20  0A30               	xorlw	48	; case 48
 10024   002E22  B4D8               	btfsc	status,2,c
 10025   002E24  EFEF  F016         	goto	l5644
 10026   002E28  EFF7  F016         	goto	l5648
 10027   002E2C                     l5654:
 10028                           
 10029                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
 10030   002E2C  502C               	movf	vfpfcnvrt@done^0,w,c
 10031   002E2E  B4D8               	btfsc	status,2,c
 10032   002E30  EF1C  F017         	goto	u5071
 10033   002E34  EF1E  F017         	goto	u5070
 10034   002E38                     u5071:
 10035   002E38  EFFB  F016         	goto	l5652
 10036   002E3C                     u5070:
 10037   002E3C                     
 10038                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
 10039   002E3C  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
 10040   002E40  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
 10041   002E44  ECC4  F01D         	call	_read_prec_or_width	;wreg free
 10042   002E48  C008  F0CE         	movff	?_read_prec_or_width,_width
 10043   002E4C  C009  F0CF         	movff	?_read_prec_or_width+1,_width+1
 10044   002E50                     
 10045                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
 10046   002E50  0100               	movlb	0	; () banked
 10047   002E52  BFCF               	btfsc	(_width+1)& (0+255),7,b
 10048   002E54  EF30  F017         	goto	u5080
 10049   002E58  EF2E  F017         	goto	u5081
 10050   002E5C                     u5081:
 10051   002E5C  EF35  F017         	goto	l5662
 10052   002E60                     u5080:
 10053   002E60                     
 10054                           ; BSR set to: 0
 10055                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
 10056   002E60  81D2               	bsf	_flags& (0+255),0,b
 10057                           
 10058                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
 10059   002E62  6DCE               	negf	_width& (0+255),b
 10060   002E64  1FCF               	comf	(_width+1)& (0+255),f,b
 10061   002E66  B0D8               	btfsc	status,0,c
 10062   002E68  2BCF               	incf	(_width+1)& (0+255),f,b
 10063   002E6A                     l5662:
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
 10067   002E6A  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10068   002E6C  6ED9               	movwf	fsr2l,c
 10069   002E6E  6ADA               	clrf	fsr2h,c
 10070   002E70  50DF               	movf	indf2,w,c
 10071   002E72  6E2D               	movwf	vfpfcnvrt@cp^0,c
 10072   002E74                     
 10073                           ; BSR set to: 0
 10074                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
 10075   002E74  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 10076   002E78                     	if	1	;There is more than 1 active tblptr byte
 10077   002E78  0E0E               	movlw	high __smallconst
 10078   002E7A  6EF7               	movwf	tblptrh,c
 10079   002E7C                     	endif
 10080   002E7C                     	if	0	;tblptru may be non-zero
 10081   002E7C                     	endif
 10082   002E7C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10083   002E7C  0E00               	movlw	low (__smallconst shr (0+16))
 10084   002E7E  6EF8               	movwf	tblptru,c
 10085   002E80                     	endif
 10086   002E80  0008               	tblrd		*
 10087   002E82  50F5               	movf	tablat,w,c
 10088   002E84  0A64               	xorlw	100
 10089   002E86  B4D8               	btfsc	status,2,c
 10090   002E88  EF48  F017         	goto	u5091
 10091   002E8C  EF4A  F017         	goto	u5090
 10092   002E90                     u5091:
 10093   002E90  EF5A  F017         	goto	l5668
 10094   002E94                     u5090:
 10095   002E94                     
 10096                           ; BSR set to: 0
 10097   002E94  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 10098   002E98                     	if	1	;There is more than 1 active tblptr byte
 10099   002E98  0E0E               	movlw	high __smallconst
 10100   002E9A  6EF7               	movwf	tblptrh,c
 10101   002E9C                     	endif
 10102   002E9C                     	if	0	;tblptru may be non-zero
 10103   002E9C                     	endif
 10104   002E9C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10105   002E9C  0E00               	movlw	low (__smallconst shr (0+16))
 10106   002E9E  6EF8               	movwf	tblptru,c
 10107   002EA0                     	endif
 10108   002EA0  0008               	tblrd		*
 10109   002EA2  50F5               	movf	tablat,w,c
 10110   002EA4  0A69               	xorlw	105
 10111   002EA6  A4D8               	btfss	status,2,c
 10112   002EA8  EF58  F017         	goto	u5101
 10113   002EAC  EF5A  F017         	goto	u5100
 10114   002EB0                     u5101:
 10115   002EB0  EF75  F017         	goto	l5676
 10116   002EB4                     u5100:
 10117   002EB4                     l5668:
 10118                           
 10119                           ; BSR set to: 0
 10120                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
 10121   002EB4  5025               	movf	vfpfcnvrt@ap^0,w,c
 10122   002EB6  6ED9               	movwf	fsr2l,c
 10123   002EB8  6ADA               	clrf	fsr2h,c
 10124   002EBA  0E02               	movlw	2
 10125   002EBC  26DF               	addwf	indf2,f,c
 10126   002EBE  5CDF               	subwf	indf2,w,c
 10127   002EC0  6ED9               	movwf	fsr2l,c
 10128   002EC2  6ADA               	clrf	fsr2h,c
 10129   002EC4  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
 10130   002EC8  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
 10131   002ECC                     
 10132                           ; BSR set to: 0
 10133                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
 10134   002ECC  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10135   002ECE  6ED9               	movwf	fsr2l,c
 10136   002ED0  6ADA               	clrf	fsr2h,c
 10137   002ED2  282D               	incf	vfpfcnvrt@cp^0,w,c
 10138   002ED4  6EDF               	movwf	indf2,c
 10139   002ED6                     
 10140                           ; BSR set to: 0
 10141                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
 10142   002ED6  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
 10143   002EDA  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
 10144   002EDE  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
 10145   002EE2  EC8F  F017         	call	_dtoa	;wreg free
 10146   002EE6  EF8E  F017         	goto	l1476
 10147   002EEA                     l5676:
 10148                           
 10149                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
 10150   002EEA  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10151   002EEC  6ED9               	movwf	fsr2l,c
 10152   002EEE  6ADA               	clrf	fsr2h,c
 10153   002EF0  2ADF               	incf	indf2,f,c
 10154   002EF2  EF8E  F017         	goto	l1476
 10155   002EF6                     l5680:
 10156                           
 10157                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
 10158   002EF6  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10159   002EF8  6ED9               	movwf	fsr2l,c
 10160   002EFA  6ADA               	clrf	fsr2h,c
 10161   002EFC  CFDF FFF6          	movff	indf2,tblptrl
 10162   002F00                     	if	1	;There is more than 1 active tblptr byte
 10163   002F00  0E0E               	movlw	high __smallconst
 10164   002F02  6EF7               	movwf	tblptrh,c
 10165   002F04                     	endif
 10166   002F04                     	if	0	;tblptru may be non-zero
 10167   002F04                     	endif
 10168   002F04                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10169   002F04  0E00               	movlw	low (__smallconst shr (0+16))
 10170   002F06  6EF8               	movwf	tblptru,c
 10171   002F08                     	endif
 10172   002F08  0008               	tblrd		*
 10173   002F0A  50F5               	movf	tablat,w,c
 10174   002F0C  6E02               	movwf	fputc@c^0,c
 10175   002F0E  6A03               	clrf	(fputc@c+1)^0,c
 10176   002F10  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
 10177   002F14  EC70  F01E         	call	_fputc	;wreg free
 10178   002F18  EF75  F017         	goto	l5676
 10179   002F1C                     l1476:
 10180   002F1C  0012               	return		;funcret
 10181   002F1E                     __end_of_vfpfcnvrt:
 10182                           	callstack 0
 10183                           
 10184 ;; *************** function _read_prec_or_width *****************
 10185 ;; Defined at:
 10186 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10187 ;; Parameters:    Size  Location     Type
 10188 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
 10189 ;;		 -> vfprintf@cfmt(1), 
 10190 ;;  ap              1    8[COMRAM] PTR PTR void [1]
 10191 ;;		 -> sprintf@ap(1), 
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  c               1    9[COMRAM] unsigned char 
 10194 ;;  n               2   10[COMRAM] int 
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  2    7[COMRAM] int 
 10197 ;; Registers used:
 10198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10205 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10207 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10208 ;;Total ram usage:        5 bytes
 10209 ;; Hardware stack levels used: 1
 10210 ;; Hardware stack levels required when called: 2
 10211 ;; This function calls:
 10212 ;;		___wmul
 10213 ;; This function is called by:
 10214 ;;		_vfpfcnvrt
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           	psect	text52
 10219   003B88                     __ptext52:
 10220                           	callstack 0
 10221   003B88                     _read_prec_or_width:
 10222                           	callstack 24
 10223   003B88                     
 10224                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
 10225   003B88  0E00               	movlw	0
 10226   003B8A  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10227   003B8C  0E00               	movlw	0
 10228   003B8E  6E0B               	movwf	read_prec_or_width@n^0,c
 10229   003B90                     
 10230                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
 10231   003B90  5008               	movf	read_prec_or_width@fmt^0,w,c
 10232   003B92  6ED9               	movwf	fsr2l,c
 10233   003B94  6ADA               	clrf	fsr2h,c
 10234   003B96  CFDF FFF6          	movff	indf2,tblptrl
 10235   003B9A                     	if	1	;There is more than 1 active tblptr byte
 10236   003B9A  0E0E               	movlw	high __smallconst
 10237   003B9C  6EF7               	movwf	tblptrh,c
 10238   003B9E                     	endif
 10239   003B9E                     	if	0	;tblptru may be non-zero
 10240   003B9E                     	endif
 10241   003B9E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10242   003B9E  0E00               	movlw	low (__smallconst shr (0+16))
 10243   003BA0  6EF8               	movwf	tblptru,c
 10244   003BA2                     	endif
 10245   003BA2  0008               	tblrd		*
 10246   003BA4  50F5               	movf	tablat,w,c
 10247   003BA6  0A2A               	xorlw	42
 10248   003BA8  A4D8               	btfss	status,2,c
 10249   003BAA  EFD9  F01D         	goto	u5021
 10250   003BAE  EFDB  F01D         	goto	u5020
 10251   003BB2                     u5021:
 10252   003BB2  EF01  F01E         	goto	l5616
 10253   003BB6                     u5020:
 10254   003BB6                     
 10255                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
 10256   003BB6  5008               	movf	read_prec_or_width@fmt^0,w,c
 10257   003BB8  6ED9               	movwf	fsr2l,c
 10258   003BBA  6ADA               	clrf	fsr2h,c
 10259   003BBC  2ADF               	incf	indf2,f,c
 10260   003BBE                     
 10261                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
 10262   003BBE  5009               	movf	read_prec_or_width@ap^0,w,c
 10263   003BC0  6ED9               	movwf	fsr2l,c
 10264   003BC2  6ADA               	clrf	fsr2h,c
 10265   003BC4  0E02               	movlw	2
 10266   003BC6  26DF               	addwf	indf2,f,c
 10267   003BC8  5CDF               	subwf	indf2,w,c
 10268   003BCA  6ED9               	movwf	fsr2l,c
 10269   003BCC  6ADA               	clrf	fsr2h,c
 10270   003BCE  CFDE F00B          	movff	postinc2,read_prec_or_width@n
 10271   003BD2  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
 10272                           
 10273                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
 10274   003BD6  EF16  F01E         	goto	l1457
 10275   003BDA                     l5612:
 10276                           
 10277                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
 10278   003BDA  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
 10279   003BDE  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
 10280   003BE2  0E00               	movlw	0
 10281   003BE4  6E05               	movwf	(___wmul@multiplicand+1)^0,c
 10282   003BE6  0E0A               	movlw	10
 10283   003BE8  6E04               	movwf	___wmul@multiplicand^0,c
 10284   003BEA  EC85  F024         	call	___wmul	;wreg free
 10285   003BEE  500A               	movf	read_prec_or_width@c^0,w,c
 10286   003BF0  2402               	addwf	?___wmul^0,w,c
 10287   003BF2  6E0B               	movwf	read_prec_or_width@n^0,c
 10288   003BF4  0E00               	movlw	0
 10289   003BF6  2003               	addwfc	(?___wmul+1)^0,w,c
 10290   003BF8  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10291   003BFA                     
 10292                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
 10293   003BFA  5008               	movf	read_prec_or_width@fmt^0,w,c
 10294   003BFC  6ED9               	movwf	fsr2l,c
 10295   003BFE  6ADA               	clrf	fsr2h,c
 10296   003C00  2ADF               	incf	indf2,f,c
 10297   003C02                     l5616:
 10298                           
 10299                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
 10300   003C02  5008               	movf	read_prec_or_width@fmt^0,w,c
 10301   003C04  6ED9               	movwf	fsr2l,c
 10302   003C06  6ADA               	clrf	fsr2h,c
 10303   003C08  CFDF FFF6          	movff	indf2,tblptrl
 10304   003C0C                     	if	1	;There is more than 1 active tblptr byte
 10305   003C0C  0E0E               	movlw	high __smallconst
 10306   003C0E  6EF7               	movwf	tblptrh,c
 10307   003C10                     	endif
 10308   003C10                     	if	0	;tblptru may be non-zero
 10309   003C10                     	endif
 10310   003C10                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10311   003C10  0E00               	movlw	low (__smallconst shr (0+16))
 10312   003C12  6EF8               	movwf	tblptru,c
 10313   003C14                     	endif
 10314   003C14  0008               	tblrd		*
 10315   003C16  50F5               	movf	tablat,w,c
 10316   003C18  0FD0               	addlw	208
 10317   003C1A  6E0A               	movwf	read_prec_or_width@c^0,c
 10318   003C1C  0E09               	movlw	9
 10319   003C1E  640A               	cpfsgt	read_prec_or_width@c^0,c
 10320   003C20  EF14  F01E         	goto	u5031
 10321   003C24  EF16  F01E         	goto	u5030
 10322   003C28                     u5031:
 10323   003C28  EFED  F01D         	goto	l5612
 10324   003C2C                     u5030:
 10325   003C2C                     l1457:
 10326                           
 10327                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
 10328   003C2C  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
 10329   003C30  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
 10330   003C34  0012               	return		;funcret
 10331   003C36                     __end_of_read_prec_or_width:
 10332                           	callstack 0
 10333                           
 10334 ;; *************** function ___wmul *****************
 10335 ;; Defined at:
 10336 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 10337 ;; Parameters:    Size  Location     Type
 10338 ;;  multiplier      2    1[COMRAM] unsigned int 
 10339 ;;  multiplicand    2    3[COMRAM] unsigned int 
 10340 ;; Auto vars:     Size  Location     Type
 10341 ;;  product         2    5[COMRAM] unsigned int 
 10342 ;; Return value:  Size  Location     Type
 10343 ;;                  2    1[COMRAM] unsigned int 
 10344 ;; Registers used:
 10345 ;;		wreg, status,2, status,0, prodl, prodh
 10346 ;; Tracked objects:
 10347 ;;		On entry : 0/0
 10348 ;;		On exit  : 0/0
 10349 ;;		Unchanged: 0/0
 10350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10351 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10352 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10354 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10355 ;;Total ram usage:        6 bytes
 10356 ;; Hardware stack levels used: 1
 10357 ;; Hardware stack levels required when called: 1
 10358 ;; This function calls:
 10359 ;;		Nothing
 10360 ;; This function is called by:
 10361 ;;		_setMotorPWM
 10362 ;;		_read_prec_or_width
 10363 ;;		_ADC2String
 10364 ;; This function uses a non-reentrant model
 10365 ;;
 10366                           
 10367                           	psect	text53
 10368   00490A                     __ptext53:
 10369                           	callstack 0
 10370   00490A                     ___wmul:
 10371                           	callstack 27
 10372   00490A  5002               	movf	___wmul@multiplier^0,w,c
 10373   00490C  0204               	mulwf	___wmul@multiplicand^0,c
 10374   00490E  CFF3 F006          	movff	prodl,___wmul@product
 10375   004912  CFF4 F007          	movff	prodh,___wmul@product+1
 10376   004916  5002               	movf	___wmul@multiplier^0,w,c
 10377   004918  0205               	mulwf	(___wmul@multiplicand+1)^0,c
 10378   00491A  50F3               	movf	243,w,c
 10379   00491C  2607               	addwf	(___wmul@product+1)^0,f,c
 10380   00491E  5003               	movf	(___wmul@multiplier+1)^0,w,c
 10381   004920  0204               	mulwf	___wmul@multiplicand^0,c
 10382   004922  50F3               	movf	243,w,c
 10383   004924  2607               	addwf	(___wmul@product+1)^0,f,c
 10384   004926  C006  F002         	movff	___wmul@product,?___wmul
 10385   00492A  C007  F003         	movff	___wmul@product+1,?___wmul+1
 10386   00492E  0012               	return		;funcret
 10387   004930                     __end_of___wmul:
 10388                           	callstack 0
 10389                           
 10390 ;; *************** function _dtoa *****************
 10391 ;; Defined at:
 10392 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10393 ;; Parameters:    Size  Location     Type
 10394 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
 10395 ;;		 -> sprintf@f(12), 
 10396 ;;  d               2   24[COMRAM] int 
 10397 ;; Auto vars:     Size  Location     Type
 10398 ;;  i               2   32[COMRAM] int 
 10399 ;;  w               2   29[COMRAM] int 
 10400 ;;  s               1   31[COMRAM] unsigned char 
 10401 ;;  p               1   28[COMRAM] _Bool 
 10402 ;; Return value:  Size  Location     Type
 10403 ;;                  1    wreg      void 
 10404 ;; Registers used:
 10405 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10406 ;; Tracked objects:
 10407 ;;		On entry : 0/0
 10408 ;;		On exit  : 0/0
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10411 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10412 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10414 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10415 ;;Total ram usage:       11 bytes
 10416 ;; Hardware stack levels used: 1
 10417 ;; Hardware stack levels required when called: 5
 10418 ;; This function calls:
 10419 ;;		___awdiv
 10420 ;;		___awmod
 10421 ;;		_abs
 10422 ;;		_pad
 10423 ;; This function is called by:
 10424 ;;		_vfpfcnvrt
 10425 ;; This function uses a non-reentrant model
 10426 ;;
 10427                           
 10428                           	psect	text54
 10429   002F1E                     __ptext54:
 10430                           	callstack 0
 10431   002F1E                     _dtoa:
 10432                           	callstack 21
 10433   002F1E                     
 10434                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
 10435   002F1E  0E01               	movlw	1
 10436   002F20  6E1D               	movwf	dtoa@p^0,c
 10437   002F22                     
 10438                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
 10439   002F22  BE1A               	btfsc	(dtoa@d+1)^0,7,c
 10440   002F24  EF96  F017         	goto	u4921
 10441   002F28  EF99  F017         	goto	u4920
 10442   002F2C                     u4921:
 10443   002F2C  0E01               	movlw	1
 10444   002F2E  EF9A  F017         	goto	u4930
 10445   002F32                     u4920:
 10446   002F32  0E00               	movlw	0
 10447   002F34                     u4930:
 10448   002F34  6E20               	movwf	dtoa@s^0,c
 10449   002F36                     
 10450                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
 10451   002F36  C0CE  F01E         	movff	_width,dtoa@w
 10452   002F3A  C0CF  F01F         	movff	_width+1,dtoa@w+1
 10453   002F3E                     
 10454                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
 10455   002F3E  5020               	movf	dtoa@s^0,w,c
 10456   002F40  B4D8               	btfsc	status,2,c
 10457   002F42  EFA5  F017         	goto	u4941
 10458   002F46  EFA7  F017         	goto	u4940
 10459   002F4A                     u4941:
 10460   002F4A  EFBE  F017         	goto	l1440
 10461   002F4E                     u4940:
 10462   002F4E                     
 10463                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
 10464   002F4E  061E               	decf	dtoa@w^0,f,c
 10465   002F50  A0D8               	btfss	status,0,c
 10466   002F52  061F               	decf	(dtoa@w+1)^0,f,c
 10467   002F54                     
 10468                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
 10469   002F54  5020               	movf	dtoa@s^0,w,c
 10470   002F56  A4D8               	btfss	status,2,c
 10471   002F58  EFB0  F017         	goto	u4951
 10472   002F5C  EFB2  F017         	goto	u4950
 10473   002F60                     u4951:
 10474   002F60  EFB8  F017         	goto	l5568
 10475   002F64                     u4950:
 10476   002F64  0E00               	movlw	0
 10477   002F66  6E1C               	movwf	(_dtoa$3086+1)^0,c
 10478   002F68  0E2B               	movlw	43
 10479   002F6A  6E1B               	movwf	_dtoa$3086^0,c
 10480   002F6C  EFBC  F017         	goto	l5570
 10481   002F70                     l5568:
 10482   002F70  0E00               	movlw	0
 10483   002F72  6E1C               	movwf	(_dtoa$3086+1)^0,c
 10484   002F74  0E2D               	movlw	45
 10485   002F76  6E1B               	movwf	_dtoa$3086^0,c
 10486   002F78                     l5570:
 10487   002F78  C01B  F020         	movff	_dtoa$3086,dtoa@s
 10488   002F7C                     l1440:
 10489                           
 10490                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
 10491   002F7C  0E00               	movlw	0
 10492   002F7E  6E22               	movwf	(dtoa@i+1)^0,c
 10493   002F80  0E1F               	movlw	31
 10494   002F82  6E21               	movwf	dtoa@i^0,c
 10495   002F84                     
 10496                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
 10497   002F84  0E00               	movlw	0
 10498   002F86  0101               	movlb	1	; () banked
 10499   002F88  6FA1               	movwf	(_dbuf+31)& (0+255),b
 10500                           
 10501                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10502   002F8A  EFF6  F017         	goto	l5584
 10503   002F8E                     l5574:
 10504                           
 10505                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
 10506   002F8E  0621               	decf	dtoa@i^0,f,c
 10507   002F90  A0D8               	btfss	status,0,c
 10508   002F92  0622               	decf	(dtoa@i+1)^0,f,c
 10509   002F94                     
 10510                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
 10511   002F94  0E82               	movlw	low _dbuf
 10512   002F96  2421               	addwf	dtoa@i^0,w,c
 10513   002F98  6ED9               	movwf	fsr2l,c
 10514   002F9A  0E01               	movlw	high _dbuf
 10515   002F9C  2022               	addwfc	(dtoa@i+1)^0,w,c
 10516   002F9E  6EDA               	movwf	fsr2h,c
 10517   002FA0  C019  F002         	movff	dtoa@d,___awmod@dividend
 10518   002FA4  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
 10519   002FA8  0E00               	movlw	0
 10520   002FAA  6E05               	movwf	(___awmod@divisor+1)^0,c
 10521   002FAC  0E0A               	movlw	10
 10522   002FAE  6E04               	movwf	___awmod@divisor^0,c
 10523   002FB0  EC6C  F01D         	call	___awmod	;wreg free
 10524   002FB4  C002  F008         	movff	?___awmod,abs@a
 10525   002FB8  C003  F009         	movff	?___awmod+1,abs@a+1
 10526   002FBC  EC9D  F022         	call	_abs	;wreg free
 10527   002FC0  5008               	movf	?_abs^0,w,c
 10528   002FC2  0F30               	addlw	48
 10529   002FC4  6EDF               	movwf	indf2,c
 10530   002FC6                     
 10531                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
 10532   002FC6  0E00               	movlw	0
 10533   002FC8  6E1D               	movwf	dtoa@p^0,c
 10534   002FCA                     
 10535                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
 10536   002FCA  061E               	decf	dtoa@w^0,f,c
 10537   002FCC  A0D8               	btfss	status,0,c
 10538   002FCE  061F               	decf	(dtoa@w+1)^0,f,c
 10539   002FD0                     
 10540                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
 10541   002FD0  C019  F002         	movff	dtoa@d,___awdiv@dividend
 10542   002FD4  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
 10543   002FD8  0E00               	movlw	0
 10544   002FDA  6E05               	movwf	(___awdiv@divisor+1)^0,c
 10545   002FDC  0E0A               	movlw	10
 10546   002FDE  6E04               	movwf	___awdiv@divisor^0,c
 10547   002FE0  EC0A  F01D         	call	___awdiv	;wreg free
 10548   002FE4  C002  F019         	movff	?___awdiv,dtoa@d
 10549   002FE8  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
 10550   002FEC                     l5584:
 10551                           
 10552                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10553   002FEC  BE22               	btfsc	(dtoa@i+1)^0,7,c
 10554   002FEE  EF01  F018         	goto	u4961
 10555   002FF2  5022               	movf	(dtoa@i+1)^0,w,c
 10556   002FF4  E108               	bnz	u4960
 10557   002FF6  0421               	decf	dtoa@i^0,w,c
 10558   002FF8  A0D8               	btfss	status,0,c
 10559   002FFA  EF01  F018         	goto	u4961
 10560   002FFE  EF03  F018         	goto	u4960
 10561   003002                     u4961:
 10562   003002  EF29  F018         	goto	l5594
 10563   003006                     u4960:
 10564   003006  5019               	movf	dtoa@d^0,w,c
 10565   003008  101A               	iorwf	(dtoa@d+1)^0,w,c
 10566   00300A  A4D8               	btfss	status,2,c
 10567   00300C  EF0A  F018         	goto	u4971
 10568   003010  EF0C  F018         	goto	u4970
 10569   003014                     u4971:
 10570   003014  EFC7  F017         	goto	l5574
 10571   003018                     u4970:
 10572   003018  501D               	movf	dtoa@p^0,w,c
 10573   00301A  A4D8               	btfss	status,2,c
 10574   00301C  EF12  F018         	goto	u4981
 10575   003020  EF14  F018         	goto	u4980
 10576   003024                     u4981:
 10577   003024  EFC7  F017         	goto	l5574
 10578   003028                     u4980:
 10579   003028  BE1F               	btfsc	(dtoa@w+1)^0,7,c
 10580   00302A  EF1F  F018         	goto	u4991
 10581   00302E  501F               	movf	(dtoa@w+1)^0,w,c
 10582   003030  E108               	bnz	u4990
 10583   003032  041E               	decf	dtoa@w^0,w,c
 10584   003034  A0D8               	btfss	status,0,c
 10585   003036  EF1F  F018         	goto	u4991
 10586   00303A  EF21  F018         	goto	u4990
 10587   00303E                     u4991:
 10588   00303E  EF29  F018         	goto	l5594
 10589   003042                     u4990:
 10590   003042  0100               	movlb	0	; () banked
 10591   003044  B3D2               	btfsc	_flags& (0+255),1,b
 10592   003046  EF27  F018         	goto	u5001
 10593   00304A  EF29  F018         	goto	u5000
 10594   00304E                     u5001:
 10595   00304E  EFC7  F017         	goto	l5574
 10596   003052                     u5000:
 10597   003052                     l5594:
 10598                           
 10599                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 10600   003052  5020               	movf	dtoa@s^0,w,c
 10601   003054  B4D8               	btfsc	status,2,c
 10602   003056  EF2F  F018         	goto	u5011
 10603   00305A  EF31  F018         	goto	u5010
 10604   00305E                     u5011:
 10605   00305E  EF3C  F018         	goto	l5600
 10606   003062                     u5010:
 10607   003062                     
 10608                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 10609   003062  0621               	decf	dtoa@i^0,f,c
 10610   003064  A0D8               	btfss	status,0,c
 10611   003066  0622               	decf	(dtoa@i+1)^0,f,c
 10612   003068                     
 10613                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 10614   003068  0E82               	movlw	low _dbuf
 10615   00306A  2421               	addwf	dtoa@i^0,w,c
 10616   00306C  6ED9               	movwf	fsr2l,c
 10617   00306E  0E01               	movlw	high _dbuf
 10618   003070  2022               	addwfc	(dtoa@i+1)^0,w,c
 10619   003072  6EDA               	movwf	fsr2h,c
 10620   003074  C020  FFDF         	movff	dtoa@s,indf2
 10621   003078                     l5600:
 10622                           
 10623                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 10624   003078  C018  F010         	movff	dtoa@fp,pad@fp
 10625   00307C  0E82               	movlw	low _dbuf
 10626   00307E  2421               	addwf	dtoa@i^0,w,c
 10627   003080  6E11               	movwf	pad@buf^0,c
 10628   003082  0E01               	movlw	high _dbuf
 10629   003084  2022               	addwfc	(dtoa@i+1)^0,w,c
 10630   003086  6E12               	movwf	(pad@buf+1)^0,c
 10631   003088  C01E  F013         	movff	dtoa@w,pad@p
 10632   00308C  C01F  F014         	movff	dtoa@w+1,pad@p+1
 10633   003090  ECC5  F01E         	call	_pad	;wreg free
 10634   003094  0012               	return		;funcret
 10635   003096                     __end_of_dtoa:
 10636                           	callstack 0
 10637                           
 10638 ;; *************** function _pad *****************
 10639 ;; Defined at:
 10640 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10641 ;; Parameters:    Size  Location     Type
 10642 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 10643 ;;		 -> sprintf@f(12), 
 10644 ;;  buf             2   16[COMRAM] PTR unsigned char 
 10645 ;;		 -> dbuf(32), 
 10646 ;;  p               2   18[COMRAM] int 
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;  i               2   21[COMRAM] int 
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      void 
 10651 ;; Registers used:
 10652 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10658 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10659 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10660 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10661 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10662 ;;Total ram usage:        8 bytes
 10663 ;; Hardware stack levels used: 1
 10664 ;; Hardware stack levels required when called: 4
 10665 ;; This function calls:
 10666 ;;		_fputc
 10667 ;;		_fputs
 10668 ;; This function is called by:
 10669 ;;		_dtoa
 10670 ;; This function uses a non-reentrant model
 10671 ;;
 10672                           
 10673                           	psect	text55
 10674   003D8A                     __ptext55:
 10675                           	callstack 0
 10676   003D8A                     _pad:
 10677                           	callstack 21
 10678   003D8A                     
 10679                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 10680   003D8A  0100               	movlb	0	; () banked
 10681   003D8C  A1D2               	btfss	_flags& (0+255),0,b
 10682   003D8E  EFCB  F01E         	goto	u4871
 10683   003D92  EFCD  F01E         	goto	u4870
 10684   003D96                     u4871:
 10685   003D96  EFD5  F01E         	goto	l5538
 10686   003D9A                     u4870:
 10687   003D9A                     
 10688                           ; BSR set to: 0
 10689                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 10690   003D9A  C011  F00A         	movff	pad@buf,fputs@s
 10691   003D9E  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10692   003DA2  C010  F00C         	movff	pad@fp,fputs@fp
 10693   003DA6  EC0F  F022         	call	_fputs	;wreg free
 10694   003DAA                     l5538:
 10695                           
 10696                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10697   003DAA  BE14               	btfsc	(pad@p+1)^0,7,c
 10698   003DAC  EFDC  F01E         	goto	u4880
 10699   003DB0  EFDA  F01E         	goto	u4881
 10700   003DB4                     u4881:
 10701   003DB4  EFE0  F01E         	goto	l1432
 10702   003DB8                     u4880:
 10703   003DB8                     
 10704                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10705   003DB8  0E00               	movlw	0
 10706   003DBA  6E14               	movwf	(pad@p+1)^0,c
 10707   003DBC  0E00               	movlw	0
 10708   003DBE  6E13               	movwf	pad@p^0,c
 10709   003DC0                     l1432:
 10710                           
 10711                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10712   003DC0  0E00               	movlw	0
 10713   003DC2  6E17               	movwf	(pad@i+1)^0,c
 10714   003DC4  0E00               	movlw	0
 10715   003DC6  6E16               	movwf	pad@i^0,c
 10716                           
 10717                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10718   003DC8  EFF0  F01E         	goto	l5546
 10719   003DCC                     l5542:
 10720                           
 10721                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10722   003DCC  0E00               	movlw	0
 10723   003DCE  6E03               	movwf	(fputc@c+1)^0,c
 10724   003DD0  0E20               	movlw	32
 10725   003DD2  6E02               	movwf	fputc@c^0,c
 10726   003DD4  C010  F004         	movff	pad@fp,fputc@fp
 10727   003DD8  EC70  F01E         	call	_fputc	;wreg free
 10728   003DDC                     
 10729                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10730   003DDC  4A16               	infsnz	pad@i^0,f,c
 10731   003DDE  2A17               	incf	(pad@i+1)^0,f,c
 10732   003DE0                     l5546:
 10733                           
 10734                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10735   003DE0  5013               	movf	pad@p^0,w,c
 10736   003DE2  5C16               	subwf	pad@i^0,w,c
 10737   003DE4  5017               	movf	(pad@i+1)^0,w,c
 10738   003DE6  0A80               	xorlw	128
 10739   003DE8  6E15               	movwf	??_pad^0,c
 10740   003DEA  5014               	movf	(pad@p+1)^0,w,c
 10741   003DEC  0A80               	xorlw	128
 10742   003DEE  5815               	subwfb	??_pad^0,w,c
 10743   003DF0  A0D8               	btfss	status,0,c
 10744   003DF2  EFFD  F01E         	goto	u4891
 10745   003DF6  EFFF  F01E         	goto	u4890
 10746   003DFA                     u4891:
 10747   003DFA  EFE6  F01E         	goto	l5542
 10748   003DFE                     u4890:
 10749   003DFE                     
 10750                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10751   003DFE  0100               	movlb	0	; () banked
 10752   003E00  B1D2               	btfsc	_flags& (0+255),0,b
 10753   003E02  EF05  F01F         	goto	u4901
 10754   003E06  EF07  F01F         	goto	u4900
 10755   003E0A                     u4901:
 10756   003E0A  EF0F  F01F         	goto	l1437
 10757   003E0E                     u4900:
 10758   003E0E                     
 10759                           ; BSR set to: 0
 10760                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10761   003E0E  C011  F00A         	movff	pad@buf,fputs@s
 10762   003E12  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10763   003E16  C010  F00C         	movff	pad@fp,fputs@fp
 10764   003E1A  EC0F  F022         	call	_fputs	;wreg free
 10765   003E1E                     l1437:
 10766   003E1E  0012               	return		;funcret
 10767   003E20                     __end_of_pad:
 10768                           	callstack 0
 10769                           
 10770 ;; *************** function _fputs *****************
 10771 ;; Defined at:
 10772 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10773 ;; Parameters:    Size  Location     Type
 10774 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10775 ;;		 -> dbuf(32), 
 10776 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10777 ;;		 -> sprintf@f(12), 
 10778 ;; Auto vars:     Size  Location     Type
 10779 ;;  i               2   13[COMRAM] int 
 10780 ;;  c               1   12[COMRAM] unsigned char 
 10781 ;; Return value:  Size  Location     Type
 10782 ;;                  2    9[COMRAM] int 
 10783 ;; Registers used:
 10784 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10785 ;; Tracked objects:
 10786 ;;		On entry : 0/0
 10787 ;;		On exit  : 0/0
 10788 ;;		Unchanged: 0/0
 10789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10790 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10791 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10793 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10794 ;;Total ram usage:        6 bytes
 10795 ;; Hardware stack levels used: 1
 10796 ;; Hardware stack levels required when called: 3
 10797 ;; This function calls:
 10798 ;;		_fputc
 10799 ;; This function is called by:
 10800 ;;		_pad
 10801 ;; This function uses a non-reentrant model
 10802 ;;
 10803                           
 10804                           	psect	text56
 10805   00441E                     __ptext56:
 10806                           	callstack 0
 10807   00441E                     _fputs:
 10808                           	callstack 21
 10809   00441E  0E00               	movlw	0
 10810   004420  6E0F               	movwf	(fputs@i+1)^0,c
 10811   004422  0E00               	movlw	0
 10812   004424  6E0E               	movwf	fputs@i^0,c
 10813   004426  EF1E  F022         	goto	l5446
 10814   00442A                     l5442:
 10815   00442A  C00D  F002         	movff	fputs@c,fputc@c
 10816   00442E  6A03               	clrf	(fputc@c+1)^0,c
 10817   004430  C00C  F004         	movff	fputs@fp,fputc@fp
 10818   004434  EC70  F01E         	call	_fputc	;wreg free
 10819   004438  4A0E               	infsnz	fputs@i^0,f,c
 10820   00443A  2A0F               	incf	(fputs@i+1)^0,f,c
 10821   00443C                     l5446:
 10822   00443C  500E               	movf	fputs@i^0,w,c
 10823   00443E  240A               	addwf	fputs@s^0,w,c
 10824   004440  6ED9               	movwf	fsr2l,c
 10825   004442  500F               	movf	(fputs@i+1)^0,w,c
 10826   004444  200B               	addwfc	(fputs@s+1)^0,w,c
 10827   004446  6EDA               	movwf	fsr2h,c
 10828   004448  50DF               	movf	indf2,w,c
 10829   00444A  6E0D               	movwf	fputs@c^0,c
 10830   00444C  500D               	movf	fputs@c^0,w,c
 10831   00444E  A4D8               	btfss	status,2,c
 10832   004450  EF2C  F022         	goto	u4741
 10833   004454  EF2E  F022         	goto	u4740
 10834   004458                     u4741:
 10835   004458  EF15  F022         	goto	l5442
 10836   00445C                     u4740:
 10837   00445C  0012               	return		;funcret
 10838   00445E                     __end_of_fputs:
 10839                           	callstack 0
 10840                           
 10841 ;; *************** function _fputc *****************
 10842 ;; Defined at:
 10843 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10844 ;; Parameters:    Size  Location     Type
 10845 ;;  c               2    1[COMRAM] int 
 10846 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10847 ;;		 -> sprintf@f(12), 
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;		None
 10850 ;; Return value:  Size  Location     Type
 10851 ;;                  2    1[COMRAM] int 
 10852 ;; Registers used:
 10853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10859 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10861 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10862 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10863 ;;Total ram usage:        8 bytes
 10864 ;; Hardware stack levels used: 1
 10865 ;; Hardware stack levels required when called: 2
 10866 ;; This function calls:
 10867 ;;		_putch
 10868 ;; This function is called by:
 10869 ;;		_pad
 10870 ;;		_vfpfcnvrt
 10871 ;;		_fputs
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           	psect	text57
 10876   003CE0                     __ptext57:
 10877                           	callstack 0
 10878   003CE0                     _fputc:
 10879                           	callstack 24
 10880   003CE0  5004               	movf	fputc@fp^0,w,c
 10881   003CE2  B4D8               	btfsc	status,2,c
 10882   003CE4  EF76  F01E         	goto	u4701
 10883   003CE8  EF78  F01E         	goto	u4700
 10884   003CEC                     u4701:
 10885   003CEC  EF80  F01E         	goto	l5430
 10886   003CF0                     u4700:
 10887   003CF0  5004               	movf	fputc@fp^0,w,c
 10888   003CF2  A4D8               	btfss	status,2,c
 10889   003CF4  EF7E  F01E         	goto	u4711
 10890   003CF8  EF80  F01E         	goto	u4710
 10891   003CFC                     u4711:
 10892   003CFC  EF85  F01E         	goto	l5432
 10893   003D00                     u4710:
 10894   003D00                     l5430:
 10895   003D00  5002               	movf	fputc@c^0,w,c
 10896   003D02  ECF4  F024         	call	_putch
 10897   003D06  EFC4  F01E         	goto	l1501
 10898   003D0A                     l5432:
 10899   003D0A  5004               	movf	fputc@fp^0,w,c
 10900   003D0C  6ED9               	movwf	fsr2l,c
 10901   003D0E  6ADA               	clrf	fsr2h,c
 10902   003D10  0E0A               	movlw	10
 10903   003D12  26D9               	addwf	fsr2l,f,c
 10904   003D14  50DE               	movf	postinc2,w,c
 10905   003D16  10DE               	iorwf	postinc2,w,c
 10906   003D18  B4D8               	btfsc	status,2,c
 10907   003D1A  EF91  F01E         	goto	u4721
 10908   003D1E  EF93  F01E         	goto	u4720
 10909   003D22                     u4721:
 10910   003D22  EFAC  F01E         	goto	l5436
 10911   003D26                     u4720:
 10912   003D26  5004               	movf	fputc@fp^0,w,c
 10913   003D28  6ED9               	movwf	fsr2l,c
 10914   003D2A  6ADA               	clrf	fsr2h,c
 10915   003D2C  0E0A               	movlw	10
 10916   003D2E  26D9               	addwf	fsr2l,f,c
 10917   003D30  5004               	movf	fputc@fp^0,w,c
 10918   003D32  6EE1               	movwf	fsr1l,c
 10919   003D34  6AE2               	clrf	fsr1h,c
 10920   003D36  0E03               	movlw	3
 10921   003D38  26E1               	addwf	fsr1l,f,c
 10922   003D3A  50DE               	movf	postinc2,w,c
 10923   003D3C  5CE6               	subwf	postinc1,w,c
 10924   003D3E  50E6               	movf	postinc1,w,c
 10925   003D40  0A80               	xorlw	128
 10926   003D42  6E09               	movwf	(??_fputc+4)^0,c
 10927   003D44  50DE               	movf	postinc2,w,c
 10928   003D46  0A80               	xorlw	128
 10929   003D48  5809               	subwfb	(??_fputc+4)^0,w,c
 10930   003D4A  B0D8               	btfsc	status,0,c
 10931   003D4C  EFAA  F01E         	goto	u4731
 10932   003D50  EFAC  F01E         	goto	u4730
 10933   003D54                     u4731:
 10934   003D54  EFC4  F01E         	goto	l1501
 10935   003D58                     u4730:
 10936   003D58                     l5436:
 10937   003D58  5004               	movf	fputc@fp^0,w,c
 10938   003D5A  6ED9               	movwf	fsr2l,c
 10939   003D5C  6ADA               	clrf	fsr2h,c
 10940   003D5E  0E03               	movlw	3
 10941   003D60  26D9               	addwf	fsr2l,f,c
 10942   003D62  50DF               	movf	indf2,w,c
 10943   003D64  6E05               	movwf	??_fputc^0,c
 10944   003D66  5004               	movf	fputc@fp^0,w,c
 10945   003D68  6ED9               	movwf	fsr2l,c
 10946   003D6A  6ADA               	clrf	fsr2h,c
 10947   003D6C  50DF               	movf	indf2,w,c
 10948   003D6E  2405               	addwf	??_fputc^0,w,c
 10949   003D70  6ED9               	movwf	fsr2l,c
 10950   003D72  6ADA               	clrf	fsr2h,c
 10951   003D74  C002  FFDF         	movff	fputc@c,indf2
 10952   003D78  5004               	movf	fputc@fp^0,w,c
 10953   003D7A  6ED9               	movwf	fsr2l,c
 10954   003D7C  6ADA               	clrf	fsr2h,c
 10955   003D7E  0E03               	movlw	3
 10956   003D80  26D9               	addwf	fsr2l,f,c
 10957   003D82  2ADE               	incf	postinc2,f,c
 10958   003D84  0E00               	movlw	0
 10959   003D86  22DD               	addwfc	postdec2,f,c
 10960   003D88                     l1501:
 10961   003D88  0012               	return		;funcret
 10962   003D8A                     __end_of_fputc:
 10963                           	callstack 0
 10964                           
 10965 ;; *************** function _putch *****************
 10966 ;; Defined at:
 10967 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10968 ;; Parameters:    Size  Location     Type
 10969 ;;  c               1    wreg     unsigned char 
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;  c               1    0[COMRAM] unsigned char 
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  1    wreg      void 
 10974 ;; Registers used:
 10975 ;;		wreg
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10985 ;;Total ram usage:        0 bytes
 10986 ;; Hardware stack levels used: 1
 10987 ;; Hardware stack levels required when called: 1
 10988 ;; This function calls:
 10989 ;;		Nothing
 10990 ;; This function is called by:
 10991 ;;		_fputc
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           	psect	text58
 10996   0049E8                     __ptext58:
 10997                           	callstack 0
 10998   0049E8                     _putch:
 10999                           	callstack 24
 11000   0049E8  0012               	return		;funcret
 11001   0049EA                     __end_of_putch:
 11002                           	callstack 0
 11003                           
 11004 ;; *************** function _abs *****************
 11005 ;; Defined at:
 11006 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 11007 ;; Parameters:    Size  Location     Type
 11008 ;;  a               2    7[COMRAM] int 
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;		None
 11011 ;; Return value:  Size  Location     Type
 11012 ;;                  2    7[COMRAM] int 
 11013 ;; Registers used:
 11014 ;;		wreg, status,2, status,0
 11015 ;; Tracked objects:
 11016 ;;		On entry : 0/0
 11017 ;;		On exit  : 0/0
 11018 ;;		Unchanged: 0/0
 11019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11020 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11022 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11023 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11024 ;;Total ram usage:        4 bytes
 11025 ;; Hardware stack levels used: 1
 11026 ;; Hardware stack levels required when called: 1
 11027 ;; This function calls:
 11028 ;;		Nothing
 11029 ;; This function is called by:
 11030 ;;		_dtoa
 11031 ;; This function uses a non-reentrant model
 11032 ;;
 11033                           
 11034                           	psect	text59
 11035   00453A                     __ptext59:
 11036                           	callstack 0
 11037   00453A                     _abs:
 11038                           	callstack 24
 11039   00453A  BE09               	btfsc	(abs@a+1)^0,7,c
 11040   00453C  EFA2  F022         	goto	u4911
 11041   004540  EFA4  F022         	goto	u4910
 11042   004544                     u4911:
 11043   004544  EFAA  F022         	goto	l1486
 11044   004548                     u4910:
 11045   004548  C008  F008         	movff	abs@a,?_abs
 11046   00454C  C009  F009         	movff	abs@a+1,?_abs+1
 11047   004550  EFB6  F022         	goto	l1489
 11048   004554                     l1486:
 11049   004554  C008  F00A         	movff	abs@a,??_abs
 11050   004558  C009  F00B         	movff	abs@a+1,??_abs+1
 11051   00455C  1E0A               	comf	??_abs^0,f,c
 11052   00455E  1E0B               	comf	(??_abs+1)^0,f,c
 11053   004560  4A0A               	infsnz	??_abs^0,f,c
 11054   004562  2A0B               	incf	(??_abs+1)^0,f,c
 11055   004564  C00A  F008         	movff	??_abs,?_abs
 11056   004568  C00B  F009         	movff	??_abs+1,?_abs+1
 11057   00456C                     l1489:
 11058   00456C  0012               	return		;funcret
 11059   00456E                     __end_of_abs:
 11060                           	callstack 0
 11061                           
 11062 ;; *************** function ___awmod *****************
 11063 ;; Defined at:
 11064 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;  dividend        2    1[COMRAM] int 
 11067 ;;  divisor         2    3[COMRAM] int 
 11068 ;; Auto vars:     Size  Location     Type
 11069 ;;  sign            1    6[COMRAM] unsigned char 
 11070 ;;  counter         1    5[COMRAM] unsigned char 
 11071 ;; Return value:  Size  Location     Type
 11072 ;;                  2    1[COMRAM] int 
 11073 ;; Registers used:
 11074 ;;		wreg, status,2, status,0
 11075 ;; Tracked objects:
 11076 ;;		On entry : 0/0
 11077 ;;		On exit  : 0/0
 11078 ;;		Unchanged: 0/0
 11079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11080 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11081 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11083 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11084 ;;Total ram usage:        6 bytes
 11085 ;; Hardware stack levels used: 1
 11086 ;; Hardware stack levels required when called: 1
 11087 ;; This function calls:
 11088 ;;		Nothing
 11089 ;; This function is called by:
 11090 ;;		_dtoa
 11091 ;; This function uses a non-reentrant model
 11092 ;;
 11093                           
 11094                           	psect	text60
 11095   003AD8                     __ptext60:
 11096                           	callstack 0
 11097   003AD8                     ___awmod:
 11098                           	callstack 24
 11099   003AD8  0E00               	movlw	0
 11100   003ADA  6E07               	movwf	___awmod@sign^0,c
 11101   003ADC  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 11102   003ADE  EF75  F01D         	goto	u4810
 11103   003AE2  EF73  F01D         	goto	u4811
 11104   003AE6                     u4811:
 11105   003AE6  EF7B  F01D         	goto	l5506
 11106   003AEA                     u4810:
 11107   003AEA  6C02               	negf	___awmod@dividend^0,c
 11108   003AEC  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11109   003AEE  B0D8               	btfsc	status,0,c
 11110   003AF0  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11111   003AF2  0E01               	movlw	1
 11112   003AF4  6E07               	movwf	___awmod@sign^0,c
 11113   003AF6                     l5506:
 11114   003AF6  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 11115   003AF8  EF82  F01D         	goto	u4820
 11116   003AFC  EF80  F01D         	goto	u4821
 11117   003B00                     u4821:
 11118   003B00  EF86  F01D         	goto	l5510
 11119   003B04                     u4820:
 11120   003B04  6C04               	negf	___awmod@divisor^0,c
 11121   003B06  1E05               	comf	(___awmod@divisor+1)^0,f,c
 11122   003B08  B0D8               	btfsc	status,0,c
 11123   003B0A  2A05               	incf	(___awmod@divisor+1)^0,f,c
 11124   003B0C                     l5510:
 11125   003B0C  5004               	movf	___awmod@divisor^0,w,c
 11126   003B0E  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 11127   003B10  B4D8               	btfsc	status,2,c
 11128   003B12  EF8D  F01D         	goto	u4831
 11129   003B16  EF8F  F01D         	goto	u4830
 11130   003B1A                     u4831:
 11131   003B1A  EFB3  F01D         	goto	l5526
 11132   003B1E                     u4830:
 11133   003B1E  0E01               	movlw	1
 11134   003B20  6E06               	movwf	___awmod@counter^0,c
 11135   003B22  EF97  F01D         	goto	l5516
 11136   003B26                     l5514:
 11137   003B26  90D8               	bcf	status,0,c
 11138   003B28  3604               	rlcf	___awmod@divisor^0,f,c
 11139   003B2A  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 11140   003B2C  2A06               	incf	___awmod@counter^0,f,c
 11141   003B2E                     l5516:
 11142   003B2E  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 11143   003B30  EF9C  F01D         	goto	u4841
 11144   003B34  EF9E  F01D         	goto	u4840
 11145   003B38                     u4841:
 11146   003B38  EF93  F01D         	goto	l5514
 11147   003B3C                     u4840:
 11148   003B3C                     l5518:
 11149   003B3C  5004               	movf	___awmod@divisor^0,w,c
 11150   003B3E  5C02               	subwf	___awmod@dividend^0,w,c
 11151   003B40  5005               	movf	(___awmod@divisor+1)^0,w,c
 11152   003B42  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 11153   003B44  A0D8               	btfss	status,0,c
 11154   003B46  EFA7  F01D         	goto	u4851
 11155   003B4A  EFA9  F01D         	goto	u4850
 11156   003B4E                     u4851:
 11157   003B4E  EFAD  F01D         	goto	l5522
 11158   003B52                     u4850:
 11159   003B52  5004               	movf	___awmod@divisor^0,w,c
 11160   003B54  5E02               	subwf	___awmod@dividend^0,f,c
 11161   003B56  5005               	movf	(___awmod@divisor+1)^0,w,c
 11162   003B58  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 11163   003B5A                     l5522:
 11164   003B5A  90D8               	bcf	status,0,c
 11165   003B5C  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 11166   003B5E  3204               	rrcf	___awmod@divisor^0,f,c
 11167   003B60  2E06               	decfsz	___awmod@counter^0,f,c
 11168   003B62  EF9E  F01D         	goto	l5518
 11169   003B66                     l5526:
 11170   003B66  5007               	movf	___awmod@sign^0,w,c
 11171   003B68  B4D8               	btfsc	status,2,c
 11172   003B6A  EFB9  F01D         	goto	u4861
 11173   003B6E  EFBB  F01D         	goto	u4860
 11174   003B72                     u4861:
 11175   003B72  EFBF  F01D         	goto	l5530
 11176   003B76                     u4860:
 11177   003B76  6C02               	negf	___awmod@dividend^0,c
 11178   003B78  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11179   003B7A  B0D8               	btfsc	status,0,c
 11180   003B7C  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11181   003B7E                     l5530:
 11182   003B7E  C002  F002         	movff	___awmod@dividend,?___awmod
 11183   003B82  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 11184   003B86  0012               	return		;funcret
 11185   003B88                     __end_of___awmod:
 11186                           	callstack 0
 11187                           
 11188 ;; *************** function ___awdiv *****************
 11189 ;; Defined at:
 11190 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 11191 ;; Parameters:    Size  Location     Type
 11192 ;;  dividend        2    1[COMRAM] int 
 11193 ;;  divisor         2    3[COMRAM] int 
 11194 ;; Auto vars:     Size  Location     Type
 11195 ;;  quotient        2    7[COMRAM] int 
 11196 ;;  sign            1    6[COMRAM] unsigned char 
 11197 ;;  counter         1    5[COMRAM] unsigned char 
 11198 ;; Return value:  Size  Location     Type
 11199 ;;                  2    1[COMRAM] int 
 11200 ;; Registers used:
 11201 ;;		wreg, status,2, status,0
 11202 ;; Tracked objects:
 11203 ;;		On entry : 0/0
 11204 ;;		On exit  : 0/0
 11205 ;;		Unchanged: 0/0
 11206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11208 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11210 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11211 ;;Total ram usage:        8 bytes
 11212 ;; Hardware stack levels used: 1
 11213 ;; Hardware stack levels required when called: 1
 11214 ;; This function calls:
 11215 ;;		Nothing
 11216 ;; This function is called by:
 11217 ;;		_dtoa
 11218 ;; This function uses a non-reentrant model
 11219 ;;
 11220                           
 11221                           	psect	text61
 11222   003A14                     __ptext61:
 11223                           	callstack 0
 11224   003A14                     ___awdiv:
 11225                           	callstack 24
 11226   003A14  0E00               	movlw	0
 11227   003A16  6E07               	movwf	___awdiv@sign^0,c
 11228   003A18  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 11229   003A1A  EF13  F01D         	goto	u4750
 11230   003A1E  EF11  F01D         	goto	u4751
 11231   003A22                     u4751:
 11232   003A22  EF19  F01D         	goto	l5462
 11233   003A26                     u4750:
 11234   003A26  6C04               	negf	___awdiv@divisor^0,c
 11235   003A28  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 11236   003A2A  B0D8               	btfsc	status,0,c
 11237   003A2C  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 11238   003A2E  0E01               	movlw	1
 11239   003A30  6E07               	movwf	___awdiv@sign^0,c
 11240   003A32                     l5462:
 11241   003A32  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 11242   003A34  EF20  F01D         	goto	u4760
 11243   003A38  EF1E  F01D         	goto	u4761
 11244   003A3C                     u4761:
 11245   003A3C  EF26  F01D         	goto	l5468
 11246   003A40                     u4760:
 11247   003A40  6C02               	negf	___awdiv@dividend^0,c
 11248   003A42  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 11249   003A44  B0D8               	btfsc	status,0,c
 11250   003A46  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 11251   003A48  0E01               	movlw	1
 11252   003A4A  1A07               	xorwf	___awdiv@sign^0,f,c
 11253   003A4C                     l5468:
 11254   003A4C  0E00               	movlw	0
 11255   003A4E  6E09               	movwf	(___awdiv@quotient+1)^0,c
 11256   003A50  0E00               	movlw	0
 11257   003A52  6E08               	movwf	___awdiv@quotient^0,c
 11258   003A54  5004               	movf	___awdiv@divisor^0,w,c
 11259   003A56  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 11260   003A58  B4D8               	btfsc	status,2,c
 11261   003A5A  EF31  F01D         	goto	u4771
 11262   003A5E  EF33  F01D         	goto	u4770
 11263   003A62                     u4771:
 11264   003A62  EF5B  F01D         	goto	l5490
 11265   003A66                     u4770:
 11266   003A66  0E01               	movlw	1
 11267   003A68  6E06               	movwf	___awdiv@counter^0,c
 11268   003A6A  EF3B  F01D         	goto	l5476
 11269   003A6E                     l5474:
 11270   003A6E  90D8               	bcf	status,0,c
 11271   003A70  3604               	rlcf	___awdiv@divisor^0,f,c
 11272   003A72  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 11273   003A74  2A06               	incf	___awdiv@counter^0,f,c
 11274   003A76                     l5476:
 11275   003A76  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 11276   003A78  EF40  F01D         	goto	u4781
 11277   003A7C  EF42  F01D         	goto	u4780
 11278   003A80                     u4781:
 11279   003A80  EF37  F01D         	goto	l5474
 11280   003A84                     u4780:
 11281   003A84                     l5478:
 11282   003A84  90D8               	bcf	status,0,c
 11283   003A86  3608               	rlcf	___awdiv@quotient^0,f,c
 11284   003A88  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 11285   003A8A  5004               	movf	___awdiv@divisor^0,w,c
 11286   003A8C  5C02               	subwf	___awdiv@dividend^0,w,c
 11287   003A8E  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11288   003A90  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 11289   003A92  A0D8               	btfss	status,0,c
 11290   003A94  EF4E  F01D         	goto	u4791
 11291   003A98  EF50  F01D         	goto	u4790
 11292   003A9C                     u4791:
 11293   003A9C  EF55  F01D         	goto	l5486
 11294   003AA0                     u4790:
 11295   003AA0  5004               	movf	___awdiv@divisor^0,w,c
 11296   003AA2  5E02               	subwf	___awdiv@dividend^0,f,c
 11297   003AA4  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11298   003AA6  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 11299   003AA8  8008               	bsf	___awdiv@quotient^0,0,c
 11300   003AAA                     l5486:
 11301   003AAA  90D8               	bcf	status,0,c
 11302   003AAC  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 11303   003AAE  3204               	rrcf	___awdiv@divisor^0,f,c
 11304   003AB0  2E06               	decfsz	___awdiv@counter^0,f,c
 11305   003AB2  EF42  F01D         	goto	l5478
 11306   003AB6                     l5490:
 11307   003AB6  5007               	movf	___awdiv@sign^0,w,c
 11308   003AB8  B4D8               	btfsc	status,2,c
 11309   003ABA  EF61  F01D         	goto	u4801
 11310   003ABE  EF63  F01D         	goto	u4800
 11311   003AC2                     u4801:
 11312   003AC2  EF67  F01D         	goto	l5494
 11313   003AC6                     u4800:
 11314   003AC6  6C08               	negf	___awdiv@quotient^0,c
 11315   003AC8  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 11316   003ACA  B0D8               	btfsc	status,0,c
 11317   003ACC  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 11318   003ACE                     l5494:
 11319   003ACE  C008  F002         	movff	___awdiv@quotient,?___awdiv
 11320   003AD2  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 11321   003AD6  0012               	return		;funcret
 11322   003AD8                     __end_of___awdiv:
 11323                           	callstack 0
 11324                           
 11325 ;; *************** function _sendStringSerial4 *****************
 11326 ;; Defined at:
 11327 ;;		line 41 in file "serial.c"
 11328 ;; Parameters:    Size  Location     Type
 11329 ;;  string          1    2[COMRAM] PTR unsigned char 
 11330 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 11331 ;; Auto vars:     Size  Location     Type
 11332 ;;		None
 11333 ;; Return value:  Size  Location     Type
 11334 ;;                  1    wreg      void 
 11335 ;; Registers used:
 11336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11337 ;; Tracked objects:
 11338 ;;		On entry : 0/0
 11339 ;;		On exit  : 0/0
 11340 ;;		Unchanged: 0/0
 11341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11342 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11345 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11346 ;;Total ram usage:        1 bytes
 11347 ;; Hardware stack levels used: 1
 11348 ;; Hardware stack levels required when called: 2
 11349 ;; This function calls:
 11350 ;;		_sendCharSerial4
 11351 ;; This function is called by:
 11352 ;;		_calibration_routine
 11353 ;;		_send2USART
 11354 ;;		_sendAllReadings
 11355 ;; This function uses a non-reentrant model
 11356 ;;
 11357                           
 11358                           	psect	text62
 11359   0047C6                     __ptext62:
 11360                           	callstack 0
 11361   0047C6                     _sendStringSerial4:
 11362                           	callstack 27
 11363   0047C6                     
 11364                           ;serial.c: 44:     while(*string != 0){
 11365   0047C6  EFF0  F023         	goto	l5846
 11366   0047CA                     l5840:
 11367                           
 11368                           ;serial.c: 46:   sendCharSerial4(*string++);
 11369   0047CA  5003               	movf	sendStringSerial4@string^0,w,c
 11370   0047CC  6ED9               	movwf	fsr2l,c
 11371   0047CE  6ADA               	clrf	fsr2h,c
 11372   0047D0  50DF               	movf	indf2,w,c
 11373   0047D2  ECD3  F024         	call	_sendCharSerial4
 11374   0047D6  2A03               	incf	sendStringSerial4@string^0,f,c
 11375   0047D8                     
 11376                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 11377   0047D8  0E6A               	movlw	106
 11378   0047DA                     u6087:
 11379   0047DA  2EE8               	decfsz	wreg,f,c
 11380   0047DC  D7FE               	bra	u6087
 11381   0047DE  D000               	nop2	
 11382   0047E0                     l5846:
 11383                           
 11384                           ;serial.c: 44:     while(*string != 0){
 11385   0047E0  5003               	movf	sendStringSerial4@string^0,w,c
 11386   0047E2  6ED9               	movwf	fsr2l,c
 11387   0047E4  6ADA               	clrf	fsr2h,c
 11388   0047E6  50DF               	movf	indf2,w,c
 11389   0047E8  A4D8               	btfss	status,2,c
 11390   0047EA  EFF9  F023         	goto	u5241
 11391   0047EE  EFFB  F023         	goto	u5240
 11392   0047F2                     u5241:
 11393   0047F2  EFE5  F023         	goto	l5840
 11394   0047F6                     u5240:
 11395   0047F6  0012               	return		;funcret
 11396   0047F8                     __end_of_sendStringSerial4:
 11397                           	callstack 0
 11398                           
 11399 ;; *************** function _sendCharSerial4 *****************
 11400 ;; Defined at:
 11401 ;;		line 35 in file "serial.c"
 11402 ;; Parameters:    Size  Location     Type
 11403 ;;  charToSend      1    wreg     unsigned char 
 11404 ;; Auto vars:     Size  Location     Type
 11405 ;;  charToSend      1    1[COMRAM] unsigned char 
 11406 ;; Return value:  Size  Location     Type
 11407 ;;                  1    wreg      void 
 11408 ;; Registers used:
 11409 ;;		wreg
 11410 ;; Tracked objects:
 11411 ;;		On entry : 0/0
 11412 ;;		On exit  : 0/0
 11413 ;;		Unchanged: 0/0
 11414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11419 ;;Total ram usage:        1 bytes
 11420 ;; Hardware stack levels used: 1
 11421 ;; Hardware stack levels required when called: 1
 11422 ;; This function calls:
 11423 ;;		Nothing
 11424 ;; This function is called by:
 11425 ;;		_sendStringSerial4
 11426 ;; This function uses a non-reentrant model
 11427 ;;
 11428                           
 11429                           	psect	text63
 11430   0049A6                     __ptext63:
 11431                           	callstack 0
 11432   0049A6                     _sendCharSerial4:
 11433                           	callstack 27
 11434                           
 11435                           ;incstack = 0
 11436                           ;sendCharSerial4@charToSend stored from wreg
 11437   0049A6  6E02               	movwf	sendCharSerial4@charToSend^0,c
 11438   0049A8                     l554:
 11439   0049A8  010E               	movlb	14	; () banked
 11440   0049AA  A537               	btfss	55,2,b	;volatile
 11441   0049AC  EFDA  F024         	goto	u5201
 11442   0049B0  EFDC  F024         	goto	u5200
 11443   0049B4                     u5201:
 11444   0049B4  EFD4  F024         	goto	l554
 11445   0049B8                     u5200:
 11446   0049B8                     
 11447                           ; BSR set to: 14
 11448                           ;serial.c: 37:     TX4REG = charToSend;
 11449   0049B8  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 11450   0049BC                     
 11451                           ; BSR set to: 14
 11452   0049BC  0012               	return		;funcret
 11453   0049BE                     __end_of_sendCharSerial4:
 11454                           	callstack 0
 11455                           
 11456 ;; *************** function _color_read_Red *****************
 11457 ;; Defined at:
 11458 ;;		line 33 in file "color.c"
 11459 ;; Parameters:    Size  Location     Type
 11460 ;;		None
 11461 ;; Auto vars:     Size  Location     Type
 11462 ;;  tmp             2   10[COMRAM] unsigned int 
 11463 ;; Return value:  Size  Location     Type
 11464 ;;                  2    5[COMRAM] unsigned int 
 11465 ;; Registers used:
 11466 ;;		wreg, status,2, status,0, cstack
 11467 ;; Tracked objects:
 11468 ;;		On entry : 0/0
 11469 ;;		On exit  : 0/0
 11470 ;;		Unchanged: 0/0
 11471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11472 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11473 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11474 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11475 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11476 ;;Total ram usage:        7 bytes
 11477 ;; Hardware stack levels used: 1
 11478 ;; Hardware stack levels required when called: 3
 11479 ;; This function calls:
 11480 ;;		_I2C_2_Master_Read
 11481 ;;		_I2C_2_Master_RepStart
 11482 ;;		_I2C_2_Master_Start
 11483 ;;		_I2C_2_Master_Stop
 11484 ;;		_I2C_2_Master_Write
 11485 ;; This function is called by:
 11486 ;;		_reading_hue
 11487 ;;		_calibration_routine
 11488 ;; This function uses a non-reentrant model
 11489 ;;
 11490                           
 11491                           	psect	text64
 11492   00418E                     __ptext64:
 11493                           	callstack 0
 11494   00418E                     _color_read_Red:
 11495                           	callstack 26
 11496   00418E                     
 11497                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
 11498   00418E  ECEA  F024         	call	_I2C_2_Master_Start	;wreg free
 11499                           
 11500                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 11501   004192  0E52               	movlw	82
 11502   004194  ECDF  F024         	call	_I2C_2_Master_Write
 11503                           
 11504                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 11505   004198  0EB6               	movlw	182
 11506   00419A  ECDF  F024         	call	_I2C_2_Master_Write
 11507                           
 11508                           ;color.c: 39:  I2C_2_Master_RepStart();
 11509   00419E  ECEF  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11510                           
 11511                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 11512   0041A2  0E53               	movlw	83
 11513   0041A4  ECDF  F024         	call	_I2C_2_Master_Write
 11514                           
 11515                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
 11516   0041A8  0E01               	movlw	1
 11517   0041AA  ECEE  F021         	call	_I2C_2_Master_Read
 11518   0041AE  6E08               	movwf	??_color_read_Red^0,c
 11519   0041B0  5008               	movf	??_color_read_Red^0,w,c
 11520   0041B2  6E0B               	movwf	color_read_Red@tmp^0,c
 11521   0041B4  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 11522                           
 11523                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11524   0041B6  0E00               	movlw	0
 11525   0041B8  ECEE  F021         	call	_I2C_2_Master_Read
 11526   0041BC  6E08               	movwf	??_color_read_Red^0,c
 11527   0041BE  5008               	movf	??_color_read_Red^0,w,c
 11528   0041C0  6E0A               	movwf	(??_color_read_Red+2)^0,c
 11529   0041C2  6A09               	clrf	(??_color_read_Red+1)^0,c
 11530   0041C4  500B               	movf	color_read_Red@tmp^0,w,c
 11531   0041C6  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 11532   0041C8  6E0B               	movwf	color_read_Red@tmp^0,c
 11533   0041CA  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 11534   0041CC  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 11535   0041CE  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 11536                           
 11537                           ;color.c: 43:  I2C_2_Master_Stop();
 11538   0041D0  ECE5  F024         	call	_I2C_2_Master_Stop	;wreg free
 11539   0041D4                     
 11540                           ;color.c: 44:  return tmp;
 11541   0041D4  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 11542   0041D8  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 11543   0041DC  0012               	return		;funcret
 11544   0041DE                     __end_of_color_read_Red:
 11545                           	callstack 0
 11546                           
 11547 ;; *************** function _color_read_Green *****************
 11548 ;; Defined at:
 11549 ;;		line 47 in file "color.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;		None
 11552 ;; Auto vars:     Size  Location     Type
 11553 ;;  tmp             2   10[COMRAM] unsigned int 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  2    5[COMRAM] unsigned int 
 11556 ;; Registers used:
 11557 ;;		wreg, status,2, status,0, cstack
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11563 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11564 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11565 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11566 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11567 ;;Total ram usage:        7 bytes
 11568 ;; Hardware stack levels used: 1
 11569 ;; Hardware stack levels required when called: 3
 11570 ;; This function calls:
 11571 ;;		_I2C_2_Master_Read
 11572 ;;		_I2C_2_Master_RepStart
 11573 ;;		_I2C_2_Master_Start
 11574 ;;		_I2C_2_Master_Stop
 11575 ;;		_I2C_2_Master_Write
 11576 ;; This function is called by:
 11577 ;;		_reading_hue
 11578 ;;		_calibration_routine
 11579 ;; This function uses a non-reentrant model
 11580 ;;
 11581                           
 11582                           	psect	text65
 11583   0041DE                     __ptext65:
 11584                           	callstack 0
 11585   0041DE                     _color_read_Green:
 11586                           	callstack 26
 11587   0041DE                     
 11588                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
 11589   0041DE  ECEA  F024         	call	_I2C_2_Master_Start	;wreg free
 11590                           
 11591                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 11592   0041E2  0E52               	movlw	82
 11593   0041E4  ECDF  F024         	call	_I2C_2_Master_Write
 11594                           
 11595                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 11596   0041E8  0EB8               	movlw	184
 11597   0041EA  ECDF  F024         	call	_I2C_2_Master_Write
 11598                           
 11599                           ;color.c: 53:  I2C_2_Master_RepStart();
 11600   0041EE  ECEF  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11601                           
 11602                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 11603   0041F2  0E53               	movlw	83
 11604   0041F4  ECDF  F024         	call	_I2C_2_Master_Write
 11605                           
 11606                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
 11607   0041F8  0E01               	movlw	1
 11608   0041FA  ECEE  F021         	call	_I2C_2_Master_Read
 11609   0041FE  6E08               	movwf	??_color_read_Green^0,c
 11610   004200  5008               	movf	??_color_read_Green^0,w,c
 11611   004202  6E0B               	movwf	color_read_Green@tmp^0,c
 11612   004204  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 11613                           
 11614                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11615   004206  0E00               	movlw	0
 11616   004208  ECEE  F021         	call	_I2C_2_Master_Read
 11617   00420C  6E08               	movwf	??_color_read_Green^0,c
 11618   00420E  5008               	movf	??_color_read_Green^0,w,c
 11619   004210  6E0A               	movwf	(??_color_read_Green+2)^0,c
 11620   004212  6A09               	clrf	(??_color_read_Green+1)^0,c
 11621   004214  500B               	movf	color_read_Green@tmp^0,w,c
 11622   004216  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 11623   004218  6E0B               	movwf	color_read_Green@tmp^0,c
 11624   00421A  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 11625   00421C  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 11626   00421E  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 11627                           
 11628                           ;color.c: 57:  I2C_2_Master_Stop();
 11629   004220  ECE5  F024         	call	_I2C_2_Master_Stop	;wreg free
 11630   004224                     
 11631                           ;color.c: 58:  return tmp;
 11632   004224  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 11633   004228  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 11634   00422C  0012               	return		;funcret
 11635   00422E                     __end_of_color_read_Green:
 11636                           	callstack 0
 11637                           
 11638 ;; *************** function _color_read_Clear *****************
 11639 ;; Defined at:
 11640 ;;		line 76 in file "color.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;		None
 11643 ;; Auto vars:     Size  Location     Type
 11644 ;;  tmp             2   10[COMRAM] unsigned int 
 11645 ;; Return value:  Size  Location     Type
 11646 ;;                  2    5[COMRAM] unsigned int 
 11647 ;; Registers used:
 11648 ;;		wreg, status,2, status,0, cstack
 11649 ;; Tracked objects:
 11650 ;;		On entry : 0/0
 11651 ;;		On exit  : 0/0
 11652 ;;		Unchanged: 0/0
 11653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11654 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11656 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11657 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11658 ;;Total ram usage:        7 bytes
 11659 ;; Hardware stack levels used: 1
 11660 ;; Hardware stack levels required when called: 3
 11661 ;; This function calls:
 11662 ;;		_I2C_2_Master_Read
 11663 ;;		_I2C_2_Master_RepStart
 11664 ;;		_I2C_2_Master_Start
 11665 ;;		_I2C_2_Master_Stop
 11666 ;;		_I2C_2_Master_Write
 11667 ;; This function is called by:
 11668 ;;		_reading_hue
 11669 ;;		_calibration_routine
 11670 ;;		_main
 11671 ;; This function uses a non-reentrant model
 11672 ;;
 11673                           
 11674                           	psect	text66
 11675   00422E                     __ptext66:
 11676                           	callstack 0
 11677   00422E                     _color_read_Clear:
 11678                           	callstack 26
 11679   00422E                     
 11680                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 11681   00422E  ECEA  F024         	call	_I2C_2_Master_Start	;wreg free
 11682                           
 11683                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 11684   004232  0E52               	movlw	82
 11685   004234  ECDF  F024         	call	_I2C_2_Master_Write
 11686                           
 11687                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 11688   004238  0EB4               	movlw	180
 11689   00423A  ECDF  F024         	call	_I2C_2_Master_Write
 11690                           
 11691                           ;color.c: 82:  I2C_2_Master_RepStart();
 11692   00423E  ECEF  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11693                           
 11694                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 11695   004242  0E53               	movlw	83
 11696   004244  ECDF  F024         	call	_I2C_2_Master_Write
 11697                           
 11698                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 11699   004248  0E01               	movlw	1
 11700   00424A  ECEE  F021         	call	_I2C_2_Master_Read
 11701   00424E  6E08               	movwf	??_color_read_Clear^0,c
 11702   004250  5008               	movf	??_color_read_Clear^0,w,c
 11703   004252  6E0B               	movwf	color_read_Clear@tmp^0,c
 11704   004254  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11705                           
 11706                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11707   004256  0E00               	movlw	0
 11708   004258  ECEE  F021         	call	_I2C_2_Master_Read
 11709   00425C  6E08               	movwf	??_color_read_Clear^0,c
 11710   00425E  5008               	movf	??_color_read_Clear^0,w,c
 11711   004260  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11712   004262  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11713   004264  500B               	movf	color_read_Clear@tmp^0,w,c
 11714   004266  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11715   004268  6E0B               	movwf	color_read_Clear@tmp^0,c
 11716   00426A  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11717   00426C  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11718   00426E  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11719                           
 11720                           ;color.c: 86:  I2C_2_Master_Stop();
 11721   004270  ECE5  F024         	call	_I2C_2_Master_Stop	;wreg free
 11722   004274                     
 11723                           ;color.c: 87:  return tmp;
 11724   004274  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11725   004278  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11726   00427C  0012               	return		;funcret
 11727   00427E                     __end_of_color_read_Clear:
 11728                           	callstack 0
 11729                           
 11730 ;; *************** function _color_read_Blue *****************
 11731 ;; Defined at:
 11732 ;;		line 61 in file "color.c"
 11733 ;; Parameters:    Size  Location     Type
 11734 ;;		None
 11735 ;; Auto vars:     Size  Location     Type
 11736 ;;  tmp             2   10[COMRAM] unsigned int 
 11737 ;; Return value:  Size  Location     Type
 11738 ;;                  2    5[COMRAM] unsigned int 
 11739 ;; Registers used:
 11740 ;;		wreg, status,2, status,0, cstack
 11741 ;; Tracked objects:
 11742 ;;		On entry : 0/0
 11743 ;;		On exit  : 0/0
 11744 ;;		Unchanged: 0/0
 11745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11746 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11748 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11749 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11750 ;;Total ram usage:        7 bytes
 11751 ;; Hardware stack levels used: 1
 11752 ;; Hardware stack levels required when called: 3
 11753 ;; This function calls:
 11754 ;;		_I2C_2_Master_Read
 11755 ;;		_I2C_2_Master_RepStart
 11756 ;;		_I2C_2_Master_Start
 11757 ;;		_I2C_2_Master_Stop
 11758 ;;		_I2C_2_Master_Write
 11759 ;; This function is called by:
 11760 ;;		_reading_hue
 11761 ;;		_calibration_routine
 11762 ;; This function uses a non-reentrant model
 11763 ;;
 11764                           
 11765                           	psect	text67
 11766   00427E                     __ptext67:
 11767                           	callstack 0
 11768   00427E                     _color_read_Blue:
 11769                           	callstack 26
 11770   00427E                     
 11771                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
 11772   00427E  ECEA  F024         	call	_I2C_2_Master_Start	;wreg free
 11773                           
 11774                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 11775   004282  0E52               	movlw	82
 11776   004284  ECDF  F024         	call	_I2C_2_Master_Write
 11777                           
 11778                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 11779   004288  0EBA               	movlw	186
 11780   00428A  ECDF  F024         	call	_I2C_2_Master_Write
 11781                           
 11782                           ;color.c: 67:  I2C_2_Master_RepStart();
 11783   00428E  ECEF  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11784                           
 11785                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 11786   004292  0E53               	movlw	83
 11787   004294  ECDF  F024         	call	_I2C_2_Master_Write
 11788                           
 11789                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
 11790   004298  0E01               	movlw	1
 11791   00429A  ECEE  F021         	call	_I2C_2_Master_Read
 11792   00429E  6E08               	movwf	??_color_read_Blue^0,c
 11793   0042A0  5008               	movf	??_color_read_Blue^0,w,c
 11794   0042A2  6E0B               	movwf	color_read_Blue@tmp^0,c
 11795   0042A4  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11796                           
 11797                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11798   0042A6  0E00               	movlw	0
 11799   0042A8  ECEE  F021         	call	_I2C_2_Master_Read
 11800   0042AC  6E08               	movwf	??_color_read_Blue^0,c
 11801   0042AE  5008               	movf	??_color_read_Blue^0,w,c
 11802   0042B0  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11803   0042B2  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11804   0042B4  500B               	movf	color_read_Blue@tmp^0,w,c
 11805   0042B6  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11806   0042B8  6E0B               	movwf	color_read_Blue@tmp^0,c
 11807   0042BA  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11808   0042BC  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11809   0042BE  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11810                           
 11811                           ;color.c: 71:  I2C_2_Master_Stop();
 11812   0042C0  ECE5  F024         	call	_I2C_2_Master_Stop	;wreg free
 11813   0042C4                     
 11814                           ;color.c: 72:  return tmp;
 11815   0042C4  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11816   0042C8  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11817   0042CC  0012               	return		;funcret
 11818   0042CE                     __end_of_color_read_Blue:
 11819                           	callstack 0
 11820                           
 11821 ;; *************** function _I2C_2_Master_Write *****************
 11822 ;; Defined at:
 11823 ;;		line 45 in file "i2c.c"
 11824 ;; Parameters:    Size  Location     Type
 11825 ;;  data_byte       1    wreg     unsigned char 
 11826 ;; Auto vars:     Size  Location     Type
 11827 ;;  data_byte       1    2[COMRAM] unsigned char 
 11828 ;; Return value:  Size  Location     Type
 11829 ;;                  1    wreg      void 
 11830 ;; Registers used:
 11831 ;;		wreg, status,2, status,0, cstack
 11832 ;; Tracked objects:
 11833 ;;		On entry : 0/0
 11834 ;;		On exit  : 0/0
 11835 ;;		Unchanged: 0/0
 11836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11838 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11840 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11841 ;;Total ram usage:        1 bytes
 11842 ;; Hardware stack levels used: 1
 11843 ;; Hardware stack levels required when called: 2
 11844 ;; This function calls:
 11845 ;;		_I2C_2_Master_Idle
 11846 ;; This function is called by:
 11847 ;;		_color_writetoaddr
 11848 ;;		_color_read_Red
 11849 ;;		_color_read_Green
 11850 ;;		_color_read_Blue
 11851 ;;		_color_read_Clear
 11852 ;; This function uses a non-reentrant model
 11853 ;;
 11854                           
 11855                           	psect	text68
 11856   0049BE                     __ptext68:
 11857                           	callstack 0
 11858   0049BE                     _I2C_2_Master_Write:
 11859                           	callstack 26
 11860                           
 11861                           ;incstack = 0
 11862                           ;I2C_2_Master_Write@data_byte stored from wreg
 11863   0049BE  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11864   0049C0                     
 11865                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11866   0049C0  EC71  F024         	call	_I2C_2_Master_Idle	;wreg free
 11867   0049C4                     
 11868                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11869   0049C4  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11870   0049C8  0012               	return		;funcret
 11871   0049CA                     __end_of_I2C_2_Master_Write:
 11872                           	callstack 0
 11873                           
 11874 ;; *************** function _I2C_2_Master_Stop *****************
 11875 ;; Defined at:
 11876 ;;		line 39 in file "i2c.c"
 11877 ;; Parameters:    Size  Location     Type
 11878 ;;		None
 11879 ;; Auto vars:     Size  Location     Type
 11880 ;;		None
 11881 ;; Return value:  Size  Location     Type
 11882 ;;                  1    wreg      void 
 11883 ;; Registers used:
 11884 ;;		wreg, status,2, status,0, cstack
 11885 ;; Tracked objects:
 11886 ;;		On entry : 0/0
 11887 ;;		On exit  : 0/0
 11888 ;;		Unchanged: 0/0
 11889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11894 ;;Total ram usage:        0 bytes
 11895 ;; Hardware stack levels used: 1
 11896 ;; Hardware stack levels required when called: 2
 11897 ;; This function calls:
 11898 ;;		_I2C_2_Master_Idle
 11899 ;; This function is called by:
 11900 ;;		_color_writetoaddr
 11901 ;;		_color_read_Red
 11902 ;;		_color_read_Green
 11903 ;;		_color_read_Blue
 11904 ;;		_color_read_Clear
 11905 ;; This function uses a non-reentrant model
 11906 ;;
 11907                           
 11908                           	psect	text69
 11909   0049CA                     __ptext69:
 11910                           	callstack 0
 11911   0049CA                     _I2C_2_Master_Stop:
 11912                           	callstack 26
 11913   0049CA                     
 11914                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11915   0049CA  EC71  F024         	call	_I2C_2_Master_Idle	;wreg free
 11916   0049CE                     
 11917                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11918   0049CE  010E               	movlb	14	; () banked
 11919   0049D0  85DA               	bsf	218,2,b	;volatile
 11920   0049D2                     
 11921                           ; BSR set to: 14
 11922   0049D2  0012               	return		;funcret
 11923   0049D4                     __end_of_I2C_2_Master_Stop:
 11924                           	callstack 0
 11925                           
 11926 ;; *************** function _I2C_2_Master_Start *****************
 11927 ;; Defined at:
 11928 ;;		line 27 in file "i2c.c"
 11929 ;; Parameters:    Size  Location     Type
 11930 ;;		None
 11931 ;; Auto vars:     Size  Location     Type
 11932 ;;		None
 11933 ;; Return value:  Size  Location     Type
 11934 ;;                  1    wreg      void 
 11935 ;; Registers used:
 11936 ;;		wreg, status,2, status,0, cstack
 11937 ;; Tracked objects:
 11938 ;;		On entry : 0/0
 11939 ;;		On exit  : 0/0
 11940 ;;		Unchanged: 0/0
 11941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11946 ;;Total ram usage:        0 bytes
 11947 ;; Hardware stack levels used: 1
 11948 ;; Hardware stack levels required when called: 2
 11949 ;; This function calls:
 11950 ;;		_I2C_2_Master_Idle
 11951 ;; This function is called by:
 11952 ;;		_color_writetoaddr
 11953 ;;		_color_read_Red
 11954 ;;		_color_read_Green
 11955 ;;		_color_read_Blue
 11956 ;;		_color_read_Clear
 11957 ;; This function uses a non-reentrant model
 11958 ;;
 11959                           
 11960                           	psect	text70
 11961   0049D4                     __ptext70:
 11962                           	callstack 0
 11963   0049D4                     _I2C_2_Master_Start:
 11964                           	callstack 26
 11965   0049D4                     
 11966                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11967   0049D4  EC71  F024         	call	_I2C_2_Master_Idle	;wreg free
 11968   0049D8                     
 11969                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11970   0049D8  010E               	movlb	14	; () banked
 11971   0049DA  81DA               	bsf	218,0,b	;volatile
 11972   0049DC                     
 11973                           ; BSR set to: 14
 11974   0049DC  0012               	return		;funcret
 11975   0049DE                     __end_of_I2C_2_Master_Start:
 11976                           	callstack 0
 11977                           
 11978 ;; *************** function _I2C_2_Master_RepStart *****************
 11979 ;; Defined at:
 11980 ;;		line 33 in file "i2c.c"
 11981 ;; Parameters:    Size  Location     Type
 11982 ;;		None
 11983 ;; Auto vars:     Size  Location     Type
 11984 ;;		None
 11985 ;; Return value:  Size  Location     Type
 11986 ;;                  1    wreg      void 
 11987 ;; Registers used:
 11988 ;;		wreg, status,2, status,0, cstack
 11989 ;; Tracked objects:
 11990 ;;		On entry : 0/0
 11991 ;;		On exit  : 0/0
 11992 ;;		Unchanged: 0/0
 11993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11998 ;;Total ram usage:        0 bytes
 11999 ;; Hardware stack levels used: 1
 12000 ;; Hardware stack levels required when called: 2
 12001 ;; This function calls:
 12002 ;;		_I2C_2_Master_Idle
 12003 ;; This function is called by:
 12004 ;;		_color_read_Red
 12005 ;;		_color_read_Green
 12006 ;;		_color_read_Blue
 12007 ;;		_color_read_Clear
 12008 ;; This function uses a non-reentrant model
 12009 ;;
 12010                           
 12011                           	psect	text71
 12012   0049DE                     __ptext71:
 12013                           	callstack 0
 12014   0049DE                     _I2C_2_Master_RepStart:
 12015                           	callstack 26
 12016   0049DE                     
 12017                           ;i2c.c: 35:   I2C_2_Master_Idle();
 12018   0049DE  EC71  F024         	call	_I2C_2_Master_Idle	;wreg free
 12019   0049E2                     
 12020                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 12021   0049E2  010E               	movlb	14	; () banked
 12022   0049E4  83DA               	bsf	218,1,b	;volatile
 12023   0049E6                     
 12024                           ; BSR set to: 14
 12025   0049E6  0012               	return		;funcret
 12026   0049E8                     __end_of_I2C_2_Master_RepStart:
 12027                           	callstack 0
 12028                           
 12029 ;; *************** function _I2C_2_Master_Read *****************
 12030 ;; Defined at:
 12031 ;;		line 51 in file "i2c.c"
 12032 ;; Parameters:    Size  Location     Type
 12033 ;;  ack             1    wreg     unsigned char 
 12034 ;; Auto vars:     Size  Location     Type
 12035 ;;  ack             1    3[COMRAM] unsigned char 
 12036 ;;  tmp             1    4[COMRAM] unsigned char 
 12037 ;; Return value:  Size  Location     Type
 12038 ;;                  1    wreg      unsigned char 
 12039 ;; Registers used:
 12040 ;;		wreg, status,2, status,0, cstack
 12041 ;; Tracked objects:
 12042 ;;		On entry : 0/0
 12043 ;;		On exit  : 0/0
 12044 ;;		Unchanged: 0/0
 12045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12047 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12048 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12049 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12050 ;;Total ram usage:        3 bytes
 12051 ;; Hardware stack levels used: 1
 12052 ;; Hardware stack levels required when called: 2
 12053 ;; This function calls:
 12054 ;;		_I2C_2_Master_Idle
 12055 ;; This function is called by:
 12056 ;;		_color_read_Red
 12057 ;;		_color_read_Green
 12058 ;;		_color_read_Blue
 12059 ;;		_color_read_Clear
 12060 ;; This function uses a non-reentrant model
 12061 ;;
 12062                           
 12063                           	psect	text72
 12064   0043DC                     __ptext72:
 12065                           	callstack 0
 12066   0043DC                     _I2C_2_Master_Read:
 12067                           	callstack 26
 12068                           
 12069                           ; BSR set to: 14
 12070                           ;incstack = 0
 12071                           ;I2C_2_Master_Read@ack stored from wreg
 12072   0043DC  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 12073   0043DE                     
 12074                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 12075   0043DE  EC71  F024         	call	_I2C_2_Master_Idle	;wreg free
 12076   0043E2                     
 12077                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 12078   0043E2  010E               	movlb	14	; () banked
 12079   0043E4  87DA               	bsf	218,3,b	;volatile
 12080                           
 12081                           ;i2c.c: 56:   I2C_2_Master_Idle();
 12082   0043E6  EC71  F024         	call	_I2C_2_Master_Idle	;wreg free
 12083   0043EA                     
 12084                           ;i2c.c: 57:   tmp = SSP2BUF;
 12085   0043EA  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 12086                           
 12087                           ;i2c.c: 58:   I2C_2_Master_Idle();
 12088   0043EE  EC71  F024         	call	_I2C_2_Master_Idle	;wreg free
 12089   0043F2                     
 12090                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 12091   0043F2  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 12092   0043F4  B4D8               	btfsc	status,2,c
 12093   0043F6  EFFF  F021         	goto	u5221
 12094   0043FA  EF03  F022         	goto	u5220
 12095   0043FE                     u5221:
 12096   0043FE  6A03               	clrf	??_I2C_2_Master_Read^0,c
 12097   004400  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 12098   004402  EF04  F022         	goto	u5238
 12099   004406                     u5220:
 12100   004406  6A03               	clrf	??_I2C_2_Master_Read^0,c
 12101   004408                     u5238:
 12102   004408  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 12103   00440A  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 12104   00440C  010E               	movlb	14	; () banked
 12105   00440E  51DA               	movf	218,w,b	;volatile
 12106   004410  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 12107   004412  0BDF               	andlw	-33
 12108   004414  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 12109   004416  6FDA               	movwf	218,b	;volatile
 12110   004418                     
 12111                           ; BSR set to: 14
 12112                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 12113   004418  89DA               	bsf	218,4,b	;volatile
 12114   00441A                     
 12115                           ; BSR set to: 14
 12116                           ;i2c.c: 61:   return tmp;
 12117   00441A  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 12118   00441C                     
 12119                           ; BSR set to: 14
 12120   00441C  0012               	return		;funcret
 12121   00441E                     __end_of_I2C_2_Master_Read:
 12122                           	callstack 0
 12123                           
 12124 ;; *************** function _I2C_2_Master_Idle *****************
 12125 ;; Defined at:
 12126 ;;		line 22 in file "i2c.c"
 12127 ;; Parameters:    Size  Location     Type
 12128 ;;		None
 12129 ;; Auto vars:     Size  Location     Type
 12130 ;;		None
 12131 ;; Return value:  Size  Location     Type
 12132 ;;                  1    wreg      void 
 12133 ;; Registers used:
 12134 ;;		wreg, status,2, status,0
 12135 ;; Tracked objects:
 12136 ;;		On entry : 0/0
 12137 ;;		On exit  : 0/0
 12138 ;;		Unchanged: 0/0
 12139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12142 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12143 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12144 ;;Total ram usage:        1 bytes
 12145 ;; Hardware stack levels used: 1
 12146 ;; Hardware stack levels required when called: 1
 12147 ;; This function calls:
 12148 ;;		Nothing
 12149 ;; This function is called by:
 12150 ;;		_I2C_2_Master_Start
 12151 ;;		_I2C_2_Master_RepStart
 12152 ;;		_I2C_2_Master_Stop
 12153 ;;		_I2C_2_Master_Write
 12154 ;;		_I2C_2_Master_Read
 12155 ;; This function uses a non-reentrant model
 12156 ;;
 12157                           
 12158                           	psect	text73
 12159   0048E2                     __ptext73:
 12160                           	callstack 0
 12161   0048E2                     _I2C_2_Master_Idle:
 12162                           	callstack 26
 12163   0048E2                     l203:
 12164   0048E2  010E               	movlb	14	; () banked
 12165   0048E4  B5D8               	btfsc	216,2,b	;volatile
 12166   0048E6  EF77  F024         	goto	u5111
 12167   0048EA  EF79  F024         	goto	u5110
 12168   0048EE                     u5111:
 12169   0048EE  EF71  F024         	goto	l203
 12170   0048F2                     u5110:
 12171   0048F2                     
 12172                           ; BSR set to: 14
 12173   0048F2  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 12174   0048F6  0E1F               	movlw	31
 12175   0048F8  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 12176   0048FA  A4D8               	btfss	status,2,c
 12177   0048FC  EF82  F024         	goto	u5121
 12178   004900  EF84  F024         	goto	u5120
 12179   004904                     u5121:
 12180   004904  EF71  F024         	goto	l203
 12181   004908                     u5120:
 12182   004908                     
 12183                           ; BSR set to: 14
 12184   004908  0012               	return		;funcret
 12185   00490A                     __end_of_I2C_2_Master_Idle:
 12186                           	callstack 0
 12187                           
 12188 ;; *************** function _Timer0_init *****************
 12189 ;; Defined at:
 12190 ;;		line 8 in file "timers.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;		None
 12193 ;; Auto vars:     Size  Location     Type
 12194 ;;		None
 12195 ;; Return value:  Size  Location     Type
 12196 ;;                  1    wreg      void 
 12197 ;; Registers used:
 12198 ;;		wreg, status,2
 12199 ;; Tracked objects:
 12200 ;;		On entry : 0/0
 12201 ;;		On exit  : 0/0
 12202 ;;		Unchanged: 0/0
 12203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12208 ;;Total ram usage:        0 bytes
 12209 ;; Hardware stack levels used: 1
 12210 ;; Hardware stack levels required when called: 1
 12211 ;; This function calls:
 12212 ;;		Nothing
 12213 ;; This function is called by:
 12214 ;;		_main
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           	psect	text74
 12219   004888                     __ptext74:
 12220                           	callstack 0
 12221   004888                     _Timer0_init:
 12222                           	callstack 29
 12223   004888                     
 12224                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
 12225   004888  50D6               	movf	214,w,c	;volatile
 12226   00488A  0B1F               	andlw	-225
 12227   00488C  0940               	iorlw	64
 12228   00488E  6ED6               	movwf	214,c	;volatile
 12229   004890                     
 12230                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
 12231   004890  88D6               	bsf	214,4,c	;volatile
 12232                           
 12233                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b1101;
 12234   004892  50D6               	movf	214,w,c	;volatile
 12235   004894  0BF0               	andlw	-16
 12236   004896  090D               	iorlw	13
 12237   004898  6ED6               	movwf	214,c	;volatile
 12238   00489A                     
 12239                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
 12240   00489A  88D5               	bsf	213,4,c	;volatile
 12241   00489C                     
 12242                           ;timers.c: 15:     PIE0bits.TMR0IE = 1;
 12243   00489C  010E               	movlb	14	; () banked
 12244   00489E  8B29               	bsf	41,5,b	;volatile
 12245   0048A0                     
 12246                           ; BSR set to: 14
 12247                           ;timers.c: 16:     PIR0bits.TMR0IF = 0;
 12248   0048A0  9B33               	bcf	51,5,b	;volatile
 12249   0048A2                     
 12250                           ; BSR set to: 14
 12251                           ;timers.c: 17:     IPR0bits.TMR0IP = 0;
 12252   0048A2  9B1F               	bcf	31,5,b	;volatile
 12253   0048A4                     
 12254                           ; BSR set to: 14
 12255                           ;timers.c: 18:     INTCONbits.IPEN = 1;
 12256   0048A4  8AF2               	bsf	242,5,c	;volatile
 12257   0048A6                     
 12258                           ; BSR set to: 14
 12259                           ;timers.c: 19:     INTCONbits.PEIE = 1;
 12260   0048A6  8CF2               	bsf	242,6,c	;volatile
 12261   0048A8                     
 12262                           ; BSR set to: 14
 12263                           ;timers.c: 20:     INTCONbits.GIE = 1;
 12264   0048A8  8EF2               	bsf	242,7,c	;volatile
 12265   0048AA                     
 12266                           ; BSR set to: 14
 12267                           ;timers.c: 22:     TRISGbits.TRISG1 = 1;
 12268   0048AA  8287               	bsf	135,1,c	;volatile
 12269   0048AC                     
 12270                           ; BSR set to: 14
 12271                           ;timers.c: 23:     LATGbits.LATG1 = 0;
 12272   0048AC  927F               	bcf	127,1,c	;volatile
 12273                           
 12274                           ;timers.c: 25:     TMR0L = 0;
 12275   0048AE  0E00               	movlw	0
 12276   0048B0  6ED3               	movwf	211,c	;volatile
 12277                           
 12278                           ;timers.c: 26:     TMR0H = 0;
 12279   0048B2  0E00               	movlw	0
 12280   0048B4  6ED4               	movwf	212,c	;volatile
 12281   0048B6                     
 12282                           ; BSR set to: 14
 12283   0048B6  0012               	return		;funcret
 12284   0048B8                     __end_of_Timer0_init:
 12285                           	callstack 0
 12286                           
 12287 ;; *************** function _ADC_init *****************
 12288 ;; Defined at:
 12289 ;;		line 9 in file "ADC.c"
 12290 ;; Parameters:    Size  Location     Type
 12291 ;;		None
 12292 ;; Auto vars:     Size  Location     Type
 12293 ;;		None
 12294 ;; Return value:  Size  Location     Type
 12295 ;;                  1    wreg      void 
 12296 ;; Registers used:
 12297 ;;		wreg, status,2
 12298 ;; Tracked objects:
 12299 ;;		On entry : 0/0
 12300 ;;		On exit  : 0/0
 12301 ;;		Unchanged: 0/0
 12302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12307 ;;Total ram usage:        0 bytes
 12308 ;; Hardware stack levels used: 1
 12309 ;; Hardware stack levels required when called: 1
 12310 ;; This function calls:
 12311 ;;		Nothing
 12312 ;; This function is called by:
 12313 ;;		_main
 12314 ;; This function uses a non-reentrant model
 12315 ;;
 12316                           
 12317                           	psect	text75
 12318   00498C                     __ptext75:
 12319                           	callstack 0
 12320   00498C                     _ADC_init:
 12321                           	callstack 29
 12322   00498C                     
 12323                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 12324   00498C  8C86               	bsf	134,6,c	;volatile
 12325                           
 12326                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 12327   00498E  010E               	movlb	14	; () banked
 12328   004990  8DB4               	bsf	180,6,b	;volatile
 12329                           
 12330                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 12331   004992  010F               	movlb	15	; () banked
 12332   004994  9958               	bcf	88,4,b	;volatile
 12333   004996                     
 12334                           ; BSR set to: 15
 12335                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 12336   004996  0EFC               	movlw	-4
 12337   004998  1758               	andwf	88,f,b	;volatile
 12338                           
 12339                           ;ADC.c: 17:     ADPCH=0b101110;
 12340   00499A  0E2E               	movlw	46
 12341   00499C  6F5F               	movwf	95,b	;volatile
 12342   00499E                     
 12343                           ; BSR set to: 15
 12344                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 12345   00499E  9460               	bcf	96,2,c	;volatile
 12346   0049A0                     
 12347                           ; BSR set to: 15
 12348                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 12349   0049A0  8860               	bsf	96,4,c	;volatile
 12350   0049A2                     
 12351                           ; BSR set to: 15
 12352                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 12353   0049A2  8E60               	bsf	96,7,c	;volatile
 12354   0049A4                     
 12355                           ; BSR set to: 15
 12356   0049A4  0012               	return		;funcret
 12357   0049A6                     __end_of_ADC_init:
 12358                           	callstack 0
 12359                           
 12360 ;; *************** function _LowISR *****************
 12361 ;; Defined at:
 12362 ;;		line 42 in file "timers.c"
 12363 ;; Parameters:    Size  Location     Type
 12364 ;;		None
 12365 ;; Auto vars:     Size  Location     Type
 12366 ;;		None
 12367 ;; Return value:  Size  Location     Type
 12368 ;;                  1    wreg      void 
 12369 ;; Registers used:
 12370 ;;		None
 12371 ;; Tracked objects:
 12372 ;;		On entry : 0/0
 12373 ;;		On exit  : 0/0
 12374 ;;		Unchanged: 0/0
 12375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12378 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12379 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12380 ;;Total ram usage:        1 bytes
 12381 ;; Hardware stack levels used: 1
 12382 ;; This function calls:
 12383 ;;		Nothing
 12384 ;; This function is called by:
 12385 ;;		Interrupt level 1
 12386 ;; This function uses a non-reentrant model
 12387 ;;
 12388                           
 12389                           	psect	intcodelo
 12390   000018                     __pintcodelo:
 12391                           	callstack 0
 12392   000018                     _LowISR:
 12393                           	callstack 20
 12394                           
 12395                           ; BSR set to: 15
 12396                           ;incstack = 0
 12397   000018  805E               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 12398   00001A  CFE0 F001          	movff	bsr,??_LowISR
 12399   00001E                     
 12400                           ;timers.c: 45:     if (PIR0bits.TMR0IF == 1) {
 12401   00001E  010E               	movlb	14	; () banked
 12402   000020  AB33               	btfss	51,5,b	;volatile
 12403   000022  EF15  F000         	goto	i1u236_21
 12404   000026  EF17  F000         	goto	i1u236_20
 12405   00002A                     i1u236_21:
 12406   00002A  EF19  F000         	goto	i1l654
 12407   00002E                     i1u236_20:
 12408   00002E                     
 12409                           ; BSR set to: 14
 12410                           ;timers.c: 46:         LATGbits.LATG1 = 1;
 12411   00002E  827F               	bsf	127,1,c	;volatile
 12412                           
 12413                           ;timers.c: 48:         PIR0bits.TMR0IF = 0;
 12414   000030  9B33               	bcf	51,5,b	;volatile
 12415   000032                     i1l654:
 12416                           
 12417                           ; BSR set to: 14
 12418   000032  C001  FFE0         	movff	??_LowISR,bsr
 12419   000036  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 12420   000038  0010               	retfie	
 12421   00003A                     __end_of_LowISR:
 12422                           	callstack 0
 12423                           
 12424                           	psect	rparam
 12425   000000                     
 12426                           	psect	temp
 12427   00005E                     btemp:
 12428                           	callstack 0
 12429   00005E                     	ds	1
 12430   000000                     int$flags	set	btemp
 12431   000000                     wtemp8	set	btemp+1
 12432   000000                     ttemp5	set	btemp+1
 12433   000000                     ttemp6	set	btemp+4
 12434   000000                     ttemp7	set	btemp+8
 12435                           
 12436                           	psect	config
 12437                           
 12438                           ;Config register CONFIG1L @ 0x300000
 12439                           ;	External Oscillator mode Selection bits
 12440                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12441                           ;	Power-up default value for COSC bits
 12442                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12443   300000                     	org	3145728
 12444   300000  AA                 	db	170
 12445                           
 12446                           ;Config register CONFIG1H @ 0x300001
 12447                           ;	unspecified, using default values
 12448                           ;	Clock Out Enable bit
 12449                           ;	CLKOUTEN = 0x1, unprogrammed default
 12450                           ;	Clock Switch Enable bit
 12451                           ;	CSWEN = 0x1, unprogrammed default
 12452                           ;	Fail-Safe Clock Monitor Enable bit
 12453                           ;	FCMEN = 0x1, unprogrammed default
 12454   300001                     	org	3145729
 12455   300001  FF                 	db	255
 12456                           
 12457                           ;Config register CONFIG3L @ 0x300004
 12458                           ;	WDT Period Select bits
 12459                           ;	WDTCPS = 0x1F, unprogrammed default
 12460                           ;	WDT operating mode
 12461                           ;	WDTE = OFF, WDT Disabled
 12462   300004                     	org	3145732
 12463   300004  9F                 	db	159
 12464                           
 12465                           ;Config register CONFIG3H @ 0x300005
 12466                           ;	unspecified, using default values
 12467                           ;	WDT Window Select bits
 12468                           ;	WDTCWS = 0x7, unprogrammed default
 12469                           ;	WDT input clock selector
 12470                           ;	WDTCCS = 0x7, unprogrammed default
 12471   300005                     	org	3145733
 12472   300005  FF                 	db	255
 12473                           tosu	equ	0xFFF
 12474                           tosh	equ	0xFFE
 12475                           tosl	equ	0xFFD
 12476                           stkptr	equ	0xFFC
 12477                           pclatu	equ	0xFFB
 12478                           pclath	equ	0xFFA
 12479                           pcl	equ	0xFF9
 12480                           tblptru	equ	0xFF8
 12481                           tblptrh	equ	0xFF7
 12482                           tblptrl	equ	0xFF6
 12483                           tablat	equ	0xFF5
 12484                           prodh	equ	0xFF4
 12485                           prodl	equ	0xFF3
 12486                           indf0	equ	0xFEF
 12487                           postinc0	equ	0xFEE
 12488                           postdec0	equ	0xFED
 12489                           preinc0	equ	0xFEC
 12490                           plusw0	equ	0xFEB
 12491                           fsr0h	equ	0xFEA
 12492                           fsr0l	equ	0xFE9
 12493                           wreg	equ	0xFE8
 12494                           indf1	equ	0xFE7
 12495                           postinc1	equ	0xFE6
 12496                           postdec1	equ	0xFE5
 12497                           preinc1	equ	0xFE4
 12498                           plusw1	equ	0xFE3
 12499                           fsr1h	equ	0xFE2
 12500                           fsr1l	equ	0xFE1
 12501                           bsr	equ	0xFE0
 12502                           indf2	equ	0xFDF
 12503                           postinc2	equ	0xFDE
 12504                           postdec2	equ	0xFDD
 12505                           preinc2	equ	0xFDC
 12506                           plusw2	equ	0xFDB
 12507                           fsr2h	equ	0xFDA
 12508                           fsr2l	equ	0xFD9
 12509                           status	equ	0xFD8

Data Sizes:
    Strings     196
    Constant    0
    Data        1
    BSS         330
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     92      93
    BANK0           160     90     158
    BANK1           256      0     162
    BANK2           256      0     100
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    S3007$buffer	PTR unsigned char  size(2) Largest target is 0

    S3007$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _returnHome->_reverseStraight
    _reverseTurn->_backHalf
    _reverseTurn->_left135
    _reverseTurn->_left90
    _reverseTurn->_right135
    _reverseTurn->_right90
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->___fltol
    _moveWhite->_backHalf
    _moveWhite->_turn180
    ___aldiv->___lmul
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _get16bitTMR0val->_logAction
    _decision->_moveBlue
    _decision->_moveGreen
    _decision->_moveLightBlue
    _decision->_moveOrange
    _decision->_movePink
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_send2USART
    _send2USART->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _calibration_routine->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0  340112
                                             90 COMRAM     2     2      0
                                             76 BANK0     14    14      0
                           _ADC_init
                        _Timer0_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          11     7      4  104595
                                              0 BANK0     11     7      4
                            ___aldiv
                             ___lmul
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          5     2      3   65377
                                             28 COMRAM     5     2      3
                           _backHalf
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                     10     4      6   14914
                                             80 COMRAM    10     4      6
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    8685
                                             75 COMRAM     5     3      2
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     122
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   22828
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                             13 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   17753
                                             79 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   16849
                                             75 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    1246
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     609
                                             65 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3497
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2718
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    2352
                                             15 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2767
                                             40 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2    1470
                                              6 COMRAM     8     6      2
                          _logAction
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  157886
                                             32 COMRAM     4     0      4
                          _logAction
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           4     2      2   21028
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              4     2      2   22648
                                             28 COMRAM     4     2      2
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   10452
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             4     2      2   21208
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   10272
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           4     2      2   22468
                                             28 COMRAM     4     2      2
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   10272
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    4118
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        4     2      2   22648
                                             28 COMRAM     4     2      2
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   10452
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            4     2      2   22828
                                             28 COMRAM     4     2      2
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   10632
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             4     2      2   22828
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   10632
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    4298
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   11892
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    5670
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4118
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    3442
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _logAction                                            5     1      4    1326
                                              1 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   24112
                                             70 COMRAM     3     2      1
                                             50 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11646
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10359
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    8607
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8119
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1452
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1012
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     816
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Timer0_init
   ___fldiv
     ___flmul (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
     ___xxtofl (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _send2USART
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
             _read_prec_or_width
               ___wmul
     _sendStringSerial4
     _sprintf
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _logAction
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _right90
   _fullSpeedAhead
     ___flmul
     ___fltol
     ___xxtofl
     _setMotorPWM
   _get16bitTMR0val
     _logAction
   _initDCmotorsPWM
   _initUSART4
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _backHalf
       _left135
       _left90
       _right135
       _right90
       _turn180
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A2       7       63.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5A      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5C      5D       1       98.9%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     201      66        0.0%
DATA                 0      0     201       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 15 02:41:26 2024

             logAction@newTime 0002             logAction@newAction 0006                 _color_read_Red 418E  
                 ___fldiv@aexp 0041                   ___fldiv@bexp 0040             fullSpeedBack@power 0017  
                 ___fldiv@sign 0039                _color_read_Blue 427E                             l81 4504  
                           l90 422C                             l84 494E                             l93 42CC  
                           l87 41DC                             l96 427C                             l99 3948  
                 ___awdiv@sign 0007                             bsr 0FE0            ___wmul@multiplicand 0004  
              moveLightBlue@mL 001D                moveLightBlue@mR 001E             convert_rgb2hue@max 0098  
           convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090               _color_read_Clear 422E  
             _color_read_Green 41DE                            l110 2A8C                            l102 29C2  
                          l111 2ADE                            l120 2BE0                            l104 29D0  
                          l200 48E0                            l113 2AEC                            l105 2A1E  
                          l114 2B46                            l130 11B8                            l203 48E2  
                          l107 2A2C                            l212 49E6                            l116 2B54  
                          l108 2A7E                            l140 12AA                            l132 1212  
                          l221 441C                            l117 2BBA                            l206 4908  
                          l150 15C2                            l142 12BA                            l134 1222  
                          l215 49D2                            l144 1314                            l128 11A8  
                          l209 49DC                            l218 49C8                            l154 163A  
                          l146 1324             logAction@path_step 0004                            l155 1656  
                          l331 1F36                            l421 3346                            l173 299A  
                          l325 1D74                            l414 3EAE                            l167 2992  
                          l434 4038                            l452 4826                            l444 3A12  
                          l349 49A4                            l429 3F3C                            l461 46CA  
                          l470 4666                            l702 31F2                            l455 4856  
                          l439 3FBA                            l711 44BA                            l608 498A  
                          l464 472E                            l449 40AE                            l473 4602  
                          l545 496C                            l554 49A8                            l458 47C4  
                          l482 45D0                            l714 44D0                            l722 385E  
                          l563 47F6                            l467 4886                            l491 46FC  
                          l731 345C                            l476 4760                            l708 31F2  
                          l645 48B6                            l557 49BC                            l485 4634  
                          l813 3568                            l725 345A                            l734 492E  
                          l494 459E                            l479 4792                            l488 4698  
                          l648 4498                            l745 417C                            l746 418C  
                          l696 4356                            l965 3AD6                            l993 3CDE  
                          l978 3B86                            l999 372C                            _abs 453A  
                          _pad 3D8A            convert_rgb2hue@cMax 004C                   ___awmod@sign 0007  
          convert_rgb2hue@diff 0094                            wreg 0FE8                   ___flmul@aexp 0021  
                 ___flmul@bexp 0022                   ___flmul@sign 001C                   ___flmul@temp 0027  
                 ___flmul@prod 0023                   ___fltol@exp1 004B                           l1004 3772  
                         l1031 366E                           ?_abs 0008                           l1232 4122  
                         l1304 4312                           l1225 411A                           l1321 2572  
                         l1330 265A                           l1403 2D2C                           l1412 4538  
                         l1316 274E                           l1501 3D88                           l1318 25AE  
                         l1262 1846                           l1327 25F4                           l1271 1B16  
                         l1263 1834                           l1512 49E8                           l1432 3DC0  
                         l1440 2F7C                           l1352 23B4                           l4000 19B4  
                         l1264 17FA                           l1329 266C                           l4002 19C2  
                         l4010 19E0                           l1435 3DFE                           l1355 2246  
                         l4100 20B0                           l1348 2050                           l4004 19CA  
                         l4012 19EE                           l1509 445C                           l1437 3E1E  
                         l1453 3094                           l1461 3C34                           l1365 2376  
                         l1357 22BE                           l1358 22AC                           l4110 20FA  
                         l4102 20BC                           l4022 1A40                           l4030 1A96  
                         l4014 19F2                           l4006 19CE                           l1279 1960  
                         l4120 214C                           l4112 2106                           l4104 20D4  
                         l4040 1AE8                           l4032 1AA6                           l4024 1A4C  
                         l4016 1A00                           l1288 1A30                           l4008 19DE  
                         l4200 35E2                           l1392 2D94                           l1457 3C2C  
                         l1289 1A1E                           l1482 43DA                           l4130 21CA  
                         l4122 215C                           l4114 2116                           l4106 20E0  
                         l4050 1B06                           l4042 1AEE                           l4034 1AB6  
                         l4026 1A5A                           l4018 1A16                           l4210 360E  
                         l5100 489A                           l1476 2F1C                           l4140 2244  
                         l4132 2200                           l4124 2178                           l4116 2122  
                         l4108 20EC                           l4060 1FA8                           l4044 1AF0  
                         l4036 1AD6                           l4028 1A94                           l4220 363E  
                         l1396 2CD0                           l1389 2C38                           l5110 48A6  
                         l5102 489C                           l1486 4554                           l4150 22A4  
                         l4142 2256                           l4134 220E                           l4126 2184  
                         l4118 2132                           l4070 1FEE                           l4062 1FB8  
                         l4054 1F8C                           l4046 1AF6                           l4038 1ADA  
                         l4222 364E                           l4206 35FA                           l4230 2BF4  
                         l5112 48A8                           l5104 48A0                           l3600 40B8  
                         l5120 3E30                           l4160 2312                           l4144 2264  
                         l4136 222C                           l4128 21A0                           l4080 201A  
                         l4072 1FF4                           l4064 1FC8                           l4056 1F98  
                         l4048 1B04                           l4224 365E                           l4216 3622  
                         l4208 3604                           l4240 2C72                           l4232 2C02  
                         l4400 449A                           l6000 30EC                           l1489 456C  
                         l5114 48AA                           l5106 48A2                           l3610 40EE  
                         l3602 40CA                           l5130 3E8A                           l5122 3E56  
                         l4410 23D0                           l4170 237A                           l4154 22CE  
                         l4162 2316                           l4146 2268                           l4138 2236  
                         l4090 2070                           l4082 202A                           l4074 1FFA  
                         l4066 1FD8                           l4058 1FA6                           l4218 362E  
                         l4250 2CC6                           l4242 2C7A                           l4234 2C48  
                         l4402 44A6                           l6010 313E                           l6002 30F8  
                         l5116 48AC                           l5108 48A4                           l3612 4104  
                         l3604 40D2                           l5140 3EAC                           l5132 3E94  
                         l5124 3E5A                           l4500 2604                           l4420 2404  
                         l4412 23D2                           l4180 23A4                           l4172 238A  
                         l4164 2330                           l4156 22DA                           l4148 2276  
                         l4084 203A                           l4076 2008                           l4068 1FDE  
                         l4260 2D3C                           l4252 2D02                           l4244 2C86  
                         l4236 2C5E                           l4228 2BE4                           l4404 44B6  
                         l6020 319C                           l6012 3156                           l6004 3110  
                         l6110 29EA                           l6102 299C                           l3614 410C  
                         l3606 40DA                           l5142 445E                           l5134 3E96  
                         l5126 3E7E                           l5118 3E20                           l4502 2612  
                         l4430 2436                           l4414 23E2                           l4422 240C  
                         l4406 23B6                           l4174 2398                           l4166 2344  
                         l4158 22E8                           l4094 2084                           l4086 2040  
                         l4078 200A                           l4190 3594                           l4270 2D84  
                         l4262 2D40                           l4254 2D0E                           l4246 2CB8  
                         l6030 3774                           l6022 31AC                           l6014 3166  
                         l6006 3120                           l5080 49A0                           l6120 2A46  
                         l6112 29FC                           l6104 29A2                           l3616 410E  
                         l3608 40E8                           l6200 2830                           l5144 4476  
                         l5136 3EA0                           l5128 3E88                           l4512 267C  
                         l4520 26C4                           l4504 2616                           l4440 246A  
                         l4432 2438                           l4424 241C                           l4416 23F2  
                         l4408 23C2                           l4176 239A                           l4168 235E  
                         l4096 2090                           l4088 2060                           l4192 35BE  
                         l4184 356A                           l4264 2D64                           l4256 2D1C  
                         l4248 2CBA                           l6040 37EE                           l6032 377C  
                         l6024 31BE                           l6016 3178                           l6008 3132  
                         l5082 49A2                           l5074 498C                           l6130 2AA6  
                         l6122 2A5C                           l6114 29FE                           l6106 29BA  
                         l3618 4114                           l6210 2876                           l6202 2846  
                         l5146 448C                           l5138 3EA2                           l5090 4966  
                         l4530 272E                           l4522 26DE                           l4514 2688  
                         l4506 2624                           l4450 24B0                           l4434 2448  
                         l4442 2472                           l4426 2422                           l4418 2402  
                         l4178 23A0                           l4098 209A                           l4194 35C0  
                         l4186 3580                           l4266 2D74                           l4258 2D3A  
                         l6050 383C                           l6042 37FA                           l6034 379E  
                         l6026 31CA                           l6018 3184                           l5076 4996  
                         l5500 3ADC                           l6140 2B0A                           l6132 2ABC  
                         l6124 2A5E                           l6116 2A16                           l6108 29D2  
                         l6060 44F0                           l6220 28B2                           l6212 2882  
                         l5148 4490                           l5092 4968                           l5084 4950  
                         l4532 273C                           l4524 26F4                           l4516 2696  
                         l4508 2652                           l4460 24D8                           l4452 24B4  
                         l4444 2482                           l4436 2458                           l4428 2428  
                         l3900 175C                           l4196 35D0                           l4268 2D82  
                         l6052 3848                           l6044 381C                           l6036 37AA  
                         l6028 31E2                           l6300 1B42                           l5078 499E  
                         l5510 3B0C                           l5502 3AEA                           l5430 3D00  
                         l6150 2B3E                           l6142 2B20                           l6134 2ABE  
                         l6126 2A76                           l6118 2A2E                           l6062 44FA  
                         l6054 44D2                           l6222 28C8                           l6230 28EE  
                         l6214 2898                           l6206 284A                           l5094 496A  
                         l5086 495A                           l4534 2742                           l4526 270E  
                         l4518 26C0                           l4470 2526                           l4446 2498  
                         l4438 2468                           l4550 3C36                           l3910 1770  
                         l3902 1760                           l4198 35D4                           l4630 0F08  
                         l6070 3890                           l6038 37CC                           l6046 3824  
                         l6310 1B62                           l6302 1B4A                           ?_pad 0010  
                         l5096 4888                           l5520 3B52                           l5512 3B1E  
                         l5504 3AF2                           l5432 3D0A                           l5440 441E  
                         l5600 3078                           l6160 2B8C                           l6152 2B5A  
                         l6144 2B22                           l6136 2AD6                           l6128 2A8E  
                         l6056 44D6                           l6232 2904                           l6224 28D4  
                         l6208 2860                           l5088 495C                           l4536 2744  
                         l4528 272A                           l4480 2570                           l4472 2536  
                         l4464 24EC                           l4448 24A8                           l4456 24C8  
                         l4560 3CD6                           l4552 3C64                           l3920 1784  
                         l3912 1774                           l3904 1764                           l4544 42CE  
                         l4640 1008                           l4632 0F38                           l6080 38C6  
                         l6072 3892                           l6064 3860                           l6048 3830  
                         l6400 1DDC                           l6320 1B80                           l6312 1B66  
                         l6304 1B52                           l5098 4890                           l5530 3B7E  
                         l5522 3B5A                           l5514 3B26                           l5506 3AF6  
                         l5434 3D26                           l5426 3CE0                           l5442 442A  
                         l5450 4926                           l5610 3BBE                           l6162 2B8E  
                         l6154 2B72                           l6146 2B24                           l6138 2AF2  
                         l6058 44E0                           l4706 4316                           l6250 298E  
                         l6234 291A                           l6242 2940                           l6226 28EA  
                         l6218 289C                           l6170 2750                           l4490 25BE  
                         l4482 257C                           l4474 253E                           l4466 2506  
                         l4458 24D8                           l4562 3CDC                           l4554 3C74  
                         l4570 36AE                           l3922 1788                           l3914 1778  
                         l3906 1768                           l3930 1798                           l4546 42DE  
                         l4650 10FC                           l4642 103C                           l4634 0F6C  
                         l4626 0EC6                           l6090 38FA                           l6082 38C8  
                         l6074 3894                           l6066 3866                           l6410 1EAA  
                         l6402 1DF2                           l6330 1B8A                           l6322 1B82  
                         l6314 1B6E                           l6306 1B5A                           l5460 3A2E  
                         l5524 3B60                           l5516 3B2E                           l5508 3B04  
                         l5436 3D58                           l5428 3CF0                           l5444 4438  
                         l5540 3DB8                           l5612 3BDA                           l5604 3B88  
                         l6164 2BA6                           l6156 2B88                           l6148 2B26  
                         l4708 432C                           l5620 320E                           l5700 3ED2  
                         l6244 2956                           l6236 2926                           l6180 279E  
                         l6172 2766                           l4492 25D4                           l4484 259A  
                         l4476 254E                           l4468 2516                           l4556 3CA2  
                         l4580 371A                           l4572 36DC                           l3940 1808  
                         l3932 179C                           l3924 178C                           l3916 177C  
                         l3908 176C                           l3860 1684                           l3852 1658  
                         l4660 11FE                           l4652 1130                           l4644 1070  
                         l4636 0FA0                           l4628 0ED8                           l6092 38FC  
                         l6084 38CA                           l6076 3896                           l6068 387E  
                         l4820 4142                           l6260 334E                           l6420 1F0A  
                         l6412 1EC2                           l6404 1E02                           l6340 1B96  
                         l6332 1B8C                           l6324 1B84                           l6316 1B76  
                         l6308 1B5E                           l5470 3A54                           l5462 3A32  
                         l5454 3A14                           l5518 3B3C                           l5526 3B66  
                         l5550 453A                           l5446 443C                           l5542 3DCC  
                         l5534 3D8A                           l5614 3BFA                           l5606 3B90  
                         l6166 2BAE                           l6158 2B8A                           l4590 48C2  
                         l3598 40B0                           l5630 32CA                           l5622 325C  
                         l5702 3EE8                           l5710 3F10                           l6246 296C  
                         l6238 293C                           l6190 27F4                           l6254 2992  
                         l6182 27A6                           l6174 277C                           l4494 25DA  
                         l4486 259C                           l4478 2562                           l4558 3CB2  
                         l4582 376A                           l4574 36EC                           l4566 3670  
                         l3950 1832                           l3942 1814                           l3934 17C6  
                         l3926 1790                           l3918 1780                           l3870 16BE  
                         l3862 1694                           l3854 1664                           l4670 1300  
                         l4662 1232                           l4654 1162                           l4646 1094  
                         l4638 0FD4                           l6094 3916                           l6086 38E2  
                         l6078 38C4                           l4830 3470                           l4822 4152  
                         l6270 33F8                           l6262 335A                           l6430 1F66  
                         l6422 1F20                           l6414 1ECE                           l6406 1E24  
                         l6350 1BA0                           l6342 1B98                           l6334 1B8E  
                         l6326 1B86                           l6318 1B7E                           l5800 49C0  
                         l5480 3A8A                           l5472 3A66                           l5464 3A40  
                         l5456 3A18                           l5528 3B76                           l5552 4548  
                         l5544 3DDC                           l5536 3D9A                           l5560 2F3E  
                         l5448 490A                           l5608 3BB6                           l5616 3C02  
                         l5640 2DD2                           l6168 2BC8                           l4592 48C8  
                         l5632 330A                           l5624 326E                           l5712 3F26  
                         l5704 3EF0                           l5720 3FE6                           l6248 2978  
                         l6184 27BC                           l6176 2788                           l4496 25E4  
                         l4488 25AC                           l4584 3770                           l4576 36FA  
                         l4568 369E                           l3960 1888                           l3952 1854  
                         l3944 1818                           l3936 17E2                           l3928 1794  
                         l3880 16EC                           l3872 16C4                           l3864 16A4  
                         l3856 1672                           l4680 143E                           l4672 1334  
                         l4664 1264                           l4656 1194                           l4648 10C8  
                         l6096 392C                           l6088 38F8                           l4840 34A6  
                         l4832 3480                           l4824 415C                           l4816 4124  
                         l6280 3450                           l6272 3408                           l6264 336E  
                         l6432 1F68                           l6424 1F44                           l6416 1EE6  
                         l6408 1E46                           l6360 1BCC                           l6352 1BA2  
                         l6344 1B9A                           l6336 1B90                           l6328 1B88  
                         l5810 49E2                           l5802 49C4                           l5482 3AA0  
                         l5474 3A6E                           l5490 3AB6                           l5466 3A48  
                         l5458 3A26                           l5546 3DE0                           l5538 3DAA  
                         l5570 2F78                           l5562 2F4E                           l5554 2F1E  
                         l5642 2DD6                           l5634 2D96                           l4594 48CA  
                         l5626 3272                           l5618 31F4                           l5706 3EF8  
                         l5730 4006                           l5714 3FBC                           l6186 27D2  
                         l6194 27F8                           l6178 279E                           l4498 25F2  
                         l4578 370C                           l3970 18C2                           l3962 1896  
                         l3954 1864                           l3946 1826                           l3938 17F2  
                         l3890 1720                           l3882 16EE                           l3874 16D6  
                         l3866 16A6                           l3858 1674                           l4690 15F6  
                         l4682 1470                           l4674 139A                           l4666 1296  
                         l4658 11CC                           l6098 3940                           l4850 34EE  
                         l4842 34B6                           l4834 3484                           l4826 345E  
                         l4818 4134                           l6274 3428                           l6266 337A  
                         l6258 3348                           l6426 1F44                           l6418 1EF2  
                         l6370 1BE0                           l6362 1BCE                           l6354 1BB8  
                         l6346 1B9C                           l6338 1B94                           l6290 1B28  
                         l6282 1B18                           l5820 4418                           l5812 43DE  
                         l5804 49CA                           l5492 3AC6                           l5484 3AA8  
                         l5476 3A76                           l5468 3A4C                           l5548 3E0E  
                         l5580 2FCA                           l5572 2F84                           l5564 2F54  
                         l5556 2F22                           l5660 2E60                           l5652 2DF6  
                         l5644 2DDE                           l5636 2DBC                           l4596 48CC  
                         l4588 48B8                           l5628 32B0                           l5708 3F00  
                         l5900 4858                           l5732 400E                           l5716 3FD6  
                         l5740 3F58                           l6196 280E                           l6188 27DE  
                         l3980 192E                           l3972 18C4                           l3964 18A4  
                         l3948 1828                           l3884 16FE                           l3892 1728  
                         l3876 16D8                           l3868 16AE                           l4692 1606  
                         l4684 1500                           l4676 13B0                           l4668 12CE  
                         l4860 3532                           l4852 34F8                           l4844 34CC  
                         l4836 3492                           l4828 3462                           l6276 3438  
                         l6268 33E6                           l6428 1F50                           l6380 1CA4  
                         l6372 1BEC                           l6364 1BD0                           l6356 1BBA  
                         l6348 1B9E                           l6292 1B28                           l6284 1B1C  
                         l5822 441A                           l5814 43E2                           l5806 49CE  
                         l5494 3ACE                           l5486 3AAA                           l5478 3A84  
                         l5590 3028                           l5582 2FD0                           l5574 2F8E  
                         l5566 2F64                           l5558 2F36                           l5670 2ECC  
                         l5662 2E6A                           l5646 2DE2                           l5654 2E2C  
                         l5638 2DC4                           l5830 4516                           l4598 48CE  
                         l5902 4864                           l5734 401E                           l5726 3FEE  
                         l5718 3FDE                           l5750 3F70                           l5742 3F60  
                         l5910 465A                           l6198 2824                           l3990 1986  
                         l3982 1930                           l3974 18CE                           l3966 18B0  
                         l3958 1878                           l3894 1738                           l3886 170E  
                         l3878 16DE                           l4686 1532                           l4678 13E2  
                         l4854 3516                           l4846 34D4                           l4862 3538  
                         l4838 34A2                           l6390 1D82                           l6382 1CF4  
                         l6374 1C0E                           l6366 1BD2                           l6358 1BC2  
                         l6294 1B34                           l6286 1B20                           l5816 43EA  
                         l5808 49DE                           l5920 41DE                           l5840 47CA  
                         l5488 3AB0                           l5592 3042                           l5576 2F94  
                         l5584 2FEC                           l5568 2F70                           l5672 2ED6  
                         l5664 2E74                           l5656 2E3C                           l5648 2DEE  
                         l5680 2EF6                           l5832 451E                           l5912 4932  
                         l5904 487A                           l5736 4022                           l5728 3FFE  
                         l5760 3FA4                           l5752 3F80                           l5744 3F68  
                         l3984 1940                           l3968 18B4                           l3976 18D4  
                         l3896 174A                           l3888 171E                           l4688 15C2  
                         l4864 3548                           l4856 3526                           l4848 34E0  
                         l6392 1D96                           l6376 1C30                           l6368 1BDE  
                         l6296 1B3A                           l6288 1B24                           l5690 48E2  
                         l5818 43F2                           l5922 4224                           l5914 418E  
                         l5842 47D6                           l5498 3AD8                           l5586 3006  
                         l5594 3052                           l5578 2FC6                           l5666 2E94  
                         l5658 2E50                           l5834 452E                           l5826 4506  
                         l5770 405A                           l5762 403A                           l5754 3F88  
                         l5738 3F3E                           l5906 4636                           l3994 199A  
                         l3978 18FA                           l3986 1950                           l3898 1758  
                         l4866 3558                           l4858 3528                           l5850 3966  
                         l6394 1DAE                           l6386 1D5C                           l6378 1C94  
                         l6298 1B3E                           l5692 48F2                           l5932 422E  
                         l5916 41D4                           l5844 47D8                           l5596 3062  
                         l5588 3018                           l5676 2EEA                           l5668 2EB4  
                         l6476 2E1E                           l5828 450E                           l5940 4982  
                         l5780 4092                           l5772 406E                           l5764 4052  
                         l5756 3F90                           l5908 4642                           l3996 19A4  
                         l3988 1976                           l5860 39D2                           l6396 1DBA  
                         l6388 1D76                           l5926 427E                           l5934 4274  
                         l5782 49A8                           l5846 47E0                           l5838 47C6  
                         l5598 3068                           l5790 43B2                           l5774 4076  
                         l5694 3EB0                           l5950 473C                           l5758 3FA0  
                         l5870 47F8                           l5942 45D2                           l3998 19B2  
                         l5862 39DA                           l6398 1DD0                           l5928 42C4  
                         l5784 49B8                           l5792 43D2                           l5776 407E  
                         l5696 3EB4                           l5880 484A                           l5952 4754  
                         l5960 46CC                           l5872 4804                           l5944 45DE  
                         l5864 39E2                           l5856 396E                           l5848 394A  
                         l5786 439A                           l5938 496E                           l5778 408E  
                         l5698 3ECA                           l5882 4794                           l5954 4762  
                         l5962 46D8                           l5890 46A6                           l5874 481A  
                         l5946 45F6                           l5970 45C4                           l5866 39F2  
                         l5858 3978                           l5796 49D4                           l5788 43A2  
                         l5884 47A0                           l5956 476E                           l5876 4828  
                         l5948 4730                           l5964 46F0                           l5892 46BE  
                         l5972 4668                           l5980 4610                           l5868 39F6  
                         l5798 49D8                           l5886 47B8                           l5958 4786  
                         l5878 4834                           l5894 46FE                           l5974 4674  
                         l5982 4628                           l5966 45A0                           l5990 3096  
                         l5896 470A                           l5888 469A                           l5976 468C  
                         l5968 45AC                           l5984 456E                           l5992 30A6  
                         l5898 4722                           l5978 4604                           l5986 457A  
                         l5994 30B2                           l5988 4592                           l5996 30CA  
                         l5998 30DA                           STR_1 0E8A                           STR_2 0EC3  
                         STR_3 0E01                           STR_4 0EC3                           STR_5 0E3B  
                         STR_6 0EC3                           STR_7 0E56                           STR_8 0EC3  
                         STR_9 0E1E                           u3000 17C6                           u3001 17C2  
                         u3010 17DE                           u3011 17D8                           u3100 18C2  
                         u3020 17E0                           u3101 18BE                           u3110 18FA  
                         u3030 1808                           u3111 18F6                           u3031 1804  
                         u4000 36FA                           u3200 1A16                           u3120 1940  
                         u3040 1826                   _BAUD4CONbits 0EE9                           u4001 36F6  
                         u3201 1A12                           u3121 193C                           u3041 1822  
                         u4010 371A                           u3210 1A2C                           u3130 1976  
                         u3050 1846                           u4011 3716                           u3211 1A28  
                         u3131 1972                           u3051 1842                           u4020 376A  
                         u3300 1FA6                           u3220 1A40                           u3140 1986  
                         u3060 1854                           u4100 13E2                           u4021 3766  
                         u3301 1FA2                           u3221 1A3C                           u3141 1982  
                         u3061 1850                           u4101 13DE                           u3310 1FB8  
                         u3230 1A5A                           u3150 19B2                           u3070 1864  
                         u4110 1470                           u4030 1162                           u3311 1FB4  
                         u3231 1A56                           u3151 19AE                           u3071 1860  
                         u4111 146C                           u4031 115E                           u5000 3052  
                         u2600 40E8                           u3400 2264                           u3320 1FC8  
                         u3240 1A94                           u3160 19C2                           u3080 1896  
                         u4120 1532                           u4040 1194                           u5001 304E  
                         u2601 40E4                           u3401 2260                           u3321 1FC4  
                         u3241 1A90                           u3161 19BE                           u3081 1892  
                         u4121 152E                           u4041 1190                           u5010 3062  
                         u2610 4104                           u3410 2276                           u3330 2008  
                         u3250 1AA6                           u3170 19DE                           u3090 18A4  
                         u4130 1606                           u4050 11FE                           _T2PR 0FBC  
                         u5011 305E                           u2611 4100                           u3411 2272  
                         u3331 2004                           u3251 1AA2                           u3171 19DA  
                         u3091 18A0                           u4131 1602                           u4051 11FA  
                         u5020 3BB6                           u5100 2EB4                           u4140 432C  
                         u3420 22A4                           u3340 201A                           u3260 1AB6  
                         u3180 19EE                           u3500 35B4                           u4060 1264  
                         u4300 3516                           u5021 3BB2                           u5101 2EB0  
                         u4141 4328                           u3421 22A0                           u3341 2016  
                         u3261 1AB2                           u3181 19EA                           u4061 1260  
                         u4301 3512                           u5110 48F2                           u5030 3C2C  
                         u3430 22BA                           u3350 202A                           u3270 1AD6  
                         u3190 1A00                           u3510 35E2                           u4070 1296  
                         u4310 3548                           u5111 48EE                           u5031 3C28  
                         u3431 22B6                           u3351 2026                           u3271 1AD2  
                         u3191 19FC                           u3511 35DE                           u4071 1292  
                         u4311 3544                           u5120 4908                           u5200 49B8  
                         u5040 320E                           u3440 22CE                           u3360 2060  
                         u3280 1AE8                           u3520 35F6                           u3600 2CFE  
                         u4080 1300                           u4240 4142                           u5121 4904  
                         u5201 49B4                           u5041 320A                           u3441 22CA  
                         u3361 205C                           u3281 1AE4                           u3521 35F2  
                         u3505 35AA                           u3601 2CFA                           u4081 12FC  
                         u4241 413E                           u5210 43D2                           u5050 32CA  
                         u5130 3ECA                           u3450 22E8                           u3370 2070  
                         u3290 1B04                           u3530 361E                           u3610 2D1C  
                         u4090 139A                           u4250 417C                           u5211 43CE  
                         u5051 32C6                           u5131 3EC6                           u3451 22E4  
                         u3371 206C                           u3291 1B00                           u3531 361A  
                         u3611 2D18                           u4091 1396                           u4251 4178  
                         u5220 4406                           u5060 2DBC                           u5140 3EE8  
                         u3460 2330                           u3380 21EA                           u3540 363E  
                         u3620 2D2C                           u4260 3470                           u5300 31BE  
                         u5221 43FE                           u5061 2DB8                           u5141 3EE4  
                         u3461 232C                           u3541 363A                           u3621 2D28  
                         u4261 346C                           u5301 31BA                           u5070 2E3C  
                         u2590 40CA                           u5150 3F26                           u3470 235E  
                         u3390 2244                           u2910 1672                           u3550 364E  
                         u3630 2D3A                           u4270 3492                           u3710 44D0  
                         u5310 379E                           u5071 2E38                           u2591 40C6  
                         u6007 4084                           u5151 3F22                           u3471 235A  
                         u3391 2240                           u2911 166E                           u3551 364A  
                         u3631 2D36                           u4271 348E                           u3711 44CC  
                         u5311 379A                           u5240 47F6                           u5080 2E60  
                         u5400 2BC8                           u5160 3F3C                           u3800 254E  
                         u3720 23D0                           u3480 2398                           u2920 1684  
                         u3640 2D74                           u3560 2BF4                           u4280 34CC  
                         u5320 37CC                           u5241 47F2                           u5081 2E5C  
                         u5401 2BC4                           u6017 44E6                           u5161 3F38  
                         u3801 254A                           u3721 23CC                           u3481 2394  
                         u3385 21E0                           u2921 1680                           u3641 2D70  
                         u3561 2BF0                           u4281 34C8                           u5321 37C8  
                         u5090 2E94                           u5170 4038                           u5410 2766  
                         u3810 2570                           u3730 23E2                           u2930 1694  
                         u3490 3580                           u3650 2D82                           u3570 2C02  
                         u4290 34EE                           u5250 3A12                           u5330 37EE  
                         u5091 2E90                           u6027 29DC                           u5171 4034  
                         u5411 2762                           u3811 256C                           u3731 23DE  
                         u2931 1690                           u3491 357C                           u3651 2D7E  
                         u3571 2BFE                           u4291 34EA                           u5251 3A0E  
                         u5331 37EA                           u4700 3CF0                           u5180 3FBA  
                         u5500 28C8                           u5420 277C                           u3900 267C  
                         u3820 259A                           u3740 23F2                           u2940 16D6  
                         u3580 2C5E                           u5340 381C                           u5260 30A6  
                         u4701 3CEC                           u6037 2A38                           u5181 3FB6  
                         u5501 28C4                           u5421 2778                           u3901 2678  
                         u3821 2596                           u3741 23EE                           u2941 16D2  
                         u3581 2C5A                           u5341 3818                           u5261 30A2  
                         u5238 4408                           u4710 3D00                           u5350 29D0  
                         u5190 40AE                           u5510 2904                           u5430 27BC  
                         u3910 2696                           u3830 25BE                           u3750 2436  
                         u2950 16EC                           u3590 2CB4                           u5270 30EC  
                         u4711 3CFC                           u6047 2A98                           u5351 29CC  
                         u5191 40AA                           u5511 2900                           u5431 27B8  
                         u3911 2692                           u3831 25BA                           u3751 2432  
                         u2951 16E8                           u3591 2CB0                           u5271 30E8  
                         u4800 3AC6                           u4720 3D26                           u5360 2A2C  
                         u5520 291A                           u5440 27D2                           u3920 26DE  
                         u3840 25D4                           u3760 2448                           u2960 16FE  
                         u5280 3132                           u5600 1F0A                           u4801 3AC2  
                         u4721 3D22                           u6057 2AFC                           u5361 2A28  
                         u5521 2916                           u5441 27CE                           u3921 26DA  
                         u3841 25D0                           u3761 2444                           u2961 16FA  
                         u5281 312E                           u5601 1F06                           u4810 3AEA  
                         u4730 3D58                           u5370 2A8C                           u5530 2956  
                         u5450 280E                           u3930 270E                           u3850 25F2  
                         u3770 2458                           u2970 170E                           u5290 3178  
                         u5610 1F20                           u4811 3AE6                           u4731 3D54  
                         u6067 2B64                           u5371 2A88                           u5531 2952  
                         u5451 280A                           u3931 270A                           u3851 25EE  
                         u3771 2454                           u2971 170A                           u5291 3174  
                         u5611 1F1C                           u4820 3B04                           u4740 445C  
                         u4900 3E0E                           u5380 2AEC                           u5540 296C  
                         u5460 2824                           u3940 273C                           u3860 2612  
                         u3780 2498                           u2980 174A                           u5620 1F36  
                         u4821 3B00                           u4741 4458                           u4901 3E0A  
                         u6077 2BD2                           u5381 2AE8                           u5541 2968  
                         u5461 2820                           u3941 2738                           u3861 260E  
                         u3781 2494                           u2981 1746                           u5621 1F32  
                         u4750 3A26                           u4830 3B1E                           u4910 4548  
                         u5390 2B54                           u5470 2860                           u3870 2624  
                         u3790 24D8                           u3950 3C64                           u2990 1758  
                         u5550 336E                           u5630 1F44                           u6087 47DA  
                         u4751 3A22                           u4831 3B1A                           u4911 4544  
                         u5391 2B50                           u5471 285C                           u3871 2620  
                         u3791 24D4                           u3951 3C60                           u2991 1754  
                         u5551 336A                           u5631 1F40                           u4760 3A40  
                         u4840 3B3C                           u4920 2F32                           u5480 2876  
                         u3880 2652                           u3960 3CA2                           u5560 3408  
                         u4761 3A3C                           u4841 3B38                           u4921 2F2C  
                         u5481 2872                           u3881 264E                           u3961 3C9E  
                         u5561 3404                           u4770 3A66                           u4850 3B52  
                         u4930 2F34                           u5490 28B2                           u3890 2668  
                         u3970 3CD6                           u5570 344C                           u4771 3A62  
                         u4851 3B4E                           u5491 28AE                           u3891 2664  
                         u3971 3CD2                           u5707 30BC                           u5571 3448  
                         u4780 3A84                           u4860 3B76                           u4940 2F4E  
                         u3980 369E                           u5580 1D74                           u4781 3A80  
                         u4861 3B72                           u4941 2F4A                           u3981 369A  
                         u5717 3102                           u5581 1D70                           u4790 3AA0  
                         u4870 3D9A                           u4950 2F64                           u3990 36DC  
                         u5590 1EC2                           u4791 3A9C                           u4871 3D96  
                         u4951 2F60                           u3991 36D8                           u5807 38A0  
                         u5727 3148                           u5591 1EBE                           u4880 3DB8  
                         u4960 3006                           u4881 3DB4                           u4961 3002  
                         u5817 38D4                           u5737 318E                           u5657 1BAC  
                         u4890 3DFE                           u4970 3018                           u4891 3DFA  
                         u4971 3014                           u5907 3F96                           u5827 3908  
                         u5747 31D4                           u5667 1DA0                           u4980 3028  
                         u4981 3024                           u5917 46E2                           u5837 45B6  
                         u5757 3852                           u5677 1DC4                           u4990 3042  
                         u4991 303E                           u5927 4714                           u5847 45E8  
                         u5767 39E8                           u5687 1DE6                           u5937 4746  
                         u5857 480E                           u5777 44AC                           u5697 1ED8  
                         u5947 483E                           u5867 461A                           u5787 4584  
                         u5957 4778                           u5877 464C                           u5797 3870  
                         u5967 47AA                           u5887 467E                           u5977 4014  
                         u5897 46B0                           u5987 486E                           u5997 3F06  
                         abs@a 0008                           _dbuf 0182                           _main 1B18  
                         _dtoa 2F1E           convert_rgb2hue@cCurr 004D                           _prec 00D0  
                         _time 0200                           pad@i 0016                           pad@p 0013  
                         fsr1h 0FE2                           fsr2h 0FDA                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           btemp 005E  
                         _stop 3EB0            fullSpeedAhead@power 004F                           prodh 0FF4  
                         prodl 0FF3                           start 003A               __end_of_ADC_init 49A6  
              ___fldiv@new_exp 003A         __end_of_color_read_Red 41DE                   ___param_bank 0000  
               reading_hue@hue 0054                          ??_abs 000A                          ??_pad 0015  
                ___fltol@sign1 004A                __end_of___aldiv 356A                __end_of___fladd 1B18  
                        ?_main 0001                          ?_dtoa 0018                          _ADPCH 0F5F  
              __end_of___fldiv 2750                __end_of___awdiv 3AD8                          STR_10 0EC3  
                        STR_11 0E71                          STR_12 0EC3                          STR_13 0EA2  
                        STR_14 0EB7                __end_of___awmod 3B88                __end_of___flmul 23B6  
              __end_of___flsub 4314                __end_of___fltol 3670                          ?_stop 0014  
              ___awdiv@divisor 0004                __end_of___lwdiv 4124                          i1l654 0032  
              ___awdiv@counter 0006              ??_convert_rgb2hue 004E                   vfpfcnvrt@fmt 0024  
                        _TMR0H 0FD4                          _TMR0L 0FD3            ___lmul@multiplicand 0006  
              __end_of_left135 4730        __end_of_sendCharSerial4 49BE     __end_of_I2C_2_Master_Start 49DE  
   __end_of_I2C_2_Master_Write 49CA                          _flags 00D2            read_prec_or_width@c 000A  
          read_prec_or_width@n 000B                          _fputc 3CE0                          _fputs 441E  
                        pad@fp 0010                          _width 00CE                          _putch 49E8  
                        dtoa@d 0019                          dtoa@i 0021                          dtoa@p 001D  
              __end_of_right90 4828                          dtoa@s 0020                          dtoa@w 001E  
                 ?_reading_hue 0050                __end_of_moveRed 4604                          tablat 0FF5  
              __end_of_turn180 47C6                          ttemp5 005F                          ttemp6 0062  
                        ttemp7 0066                          status 0FD8                          wtemp8 005F  
              __end_of_sprintf 453A          convert_rgb2hue@redmax 0064        __end_of_color_read_Blue 42CE  
        _I2C_2_Master_RepStart 49DE                ?_color_read_Red 0006                __initialization 4358  
                 __end_of_main 1F8C                   __end_of_dtoa 3096                   __end_of_stop 3F3E  
        __end_of_moveLightBlue 46FE                  main@clear_max 00B2                _get16bitTMR0val 445E  
                       ??_main 005B                         ??_dtoa 001B                         ??_stop 0016  
                __activetblptr 0003     __end_of_read_prec_or_width 3C36                _reverseStraight 3774  
                 ?_setMotorPWM 000F                         ?_fputc 0002                         ?_fputs 000A  
                       _ADRESH 0F64                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21               ___awdiv@dividend 0002  
             __end_of_backHalf 4888                         ?_putch 0001                         _RC0PPS 0E62  
                       _RC4REG 0EE3                         _RE2PPS 0E74                         _RD5PPS 0E6F  
                       _RC7PPS 0E69                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       i1l3446 001E                         i1l3448 002E                         _RG6PPS 0E88  
                vfpfcnvrt@done 002C       __end_of_color_click_init 4506                         _RX4PPS 0E15  
                       _TX4REG 0EE4               __end_of___xxtofl 2D96    convert_rgb2hue@greencurrent 0068  
             __end_of_decision 299C                         _LowISR 0018                  ??_Timer0_init 0002  
                main@path_step 00B6                   _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0031  
                       ___flge 3670                         ___fleq 3C36                         ___lmul 4124  
                    ??___aldiv 0016                      ??___fladd 000A                         ___wmul 490A  
                    ??___fldiv 0031               backOneAndHalf@mL 0019                      ??___awdiv 0006  
             backOneAndHalf@mR 001A                      ??___awmod 0006                      ??___flmul 0018  
                       _action 013C                      ??___flsub 001A                      ??___fltol 0046  
                    ??___lwdiv 000C                         _left90 4828           read_prec_or_width@ap 0009  
                 ?_reverseTurn 001D                         clear_0 4370                         clear_1 437C  
                       clear_2 4388               ___awdiv@quotient 0008                ___awmod@divisor 0004  
                       _motorL 00F4                         _motorR 00EB                         isa$std 0001  
              ___awmod@counter 0006                      ??_left135 001B             send2USART@hue_char 0060  
                       pad@buf 0011               __end_of_right135 46CC                         dtoa@fp 0018  
             __end_of_moveBlue 4794               __end_of_movePink 4636                         fputc@c 0002  
                       fputs@c 000D                         fputs@i 000E                         fputs@s 000A  
                    ??_right90 001B                   __mediumconst 0000        calibration_routine@cCal 0047  
                    ??_moveRed 001F                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8                      ?_ADC_init 0001               ?_sendCharSerial4 0001  
       convert_rgb2hue@bluemax 0074                         putch@c 0001               __end_of_vfprintf 43DC  
                    ??_turn180 001B                         stop@mL 0014                         stop@mR 0015  
            ??_initDCmotorsPWM 0004                      ??_sprintf 0038               __end_of_turnLeft 403A  
     get16bitTMR0val@path_step 0007                     ___flge@ff1 0002                     ___flge@ff2 0006  
                 ___xxtofl@arg 000C                   ___xxtofl@exp 000B                   ___xxtofl@val 0002  
                   ___fleq@ff1 0002                     ___fleq@ff2 0006                fullSpeedBack@mL 0014  
              fullSpeedBack@mR 0015                     __accesstop 0060        __end_of__initialization 4390  
     __end_of_color_read_Clear 427E       __end_of_color_read_Green 422E         ?_I2C_2_Master_RepStart 0001  
               _backOneAndHalf 4636                  ___rparam_used 0001                     ___fltol@f1 0042  
             ?_color_read_Blue 0006                 __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 449A  
                _fullSpeedBack 403A                   __pidataBANK0 49EA                  __end_of_fputc 3D8A  
                __end_of_fputs 445E                  __end_of_putch 49EA        __end_of_reverseStraight 3860  
          __end_of_Timer0_init 48B8               reading_hue@cCurr 0050                     ??_ADC_init 0002  
               main@clear_norm 00B8                     backHalf@mL 0019                     backHalf@mR 001A  
                      ??_fputc 0005                        ??_fputs 000D                        ??_putch 0002  
                   __pbssBANK0 00BA                     __pbssBANK1 0100                     __pbssBANK2 0200  
       __end_of_backOneAndHalf 4668                        ?_LowISR 0001              _color_writetoaddr 4930  
                 _T2CLKCONbits 0FBF                 ?_fullSpeedBack 0014                _convert_rgb2hue 0EC6  
                      ?___flge 0002                        ?___fleq 0002             ?_color_writetoaddr 0004  
                      ?___lmul 0002                  _customDelayMs 449A                        ?___wmul 0002  
                      ?_left90 0019          reverseTurn@actionStep 001F                 ___lmul@product 000A  
                    ?_backHalf 0019            ??_color_writetoaddr 0005                      ?___xxtofl 0002  
          _convert_rgb2hue$432 0080            _convert_rgb2hue$433 0084            _convert_rgb2hue$434 0088  
          _convert_rgb2hue$435 008C                      ?_decision 0021                        _SP4BRGH 0EE6  
                      _SP4BRGL 0EE5                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
                  moveGreen@mL 001D                    moveGreen@mR 001E                ?_backOneAndHalf 0019  
       color_writetoaddr@value 0004               ??_color_read_Red 0008      __end_of_color_writetoaddr 4950  
                    _ADREFbits 0F58                      ?_right135 0019             _I2C_2_Master_Start 49D4  
                   _initUSART4 4950             _I2C_2_Master_Write 49BE                      ?_moveBlue 001D  
            main@clear_current 00AE                        __Hparam 0000                      ?_movePink 001D  
                      __Lparam 0000              color_read_Red@tmp 000B                    moveWhite@mL 001D  
                  moveWhite@mR 001E      customDelayMs@milliseconds 0002                    _Timer0_init 4888  
               ?_customDelayMs 0002        sendStringSerial4@string 0003               ?_get16bitTMR0val 0007  
                      ___aldiv 345E                        ___fladd 1658                        ___fldiv 23B6  
                      ___awdiv 3A14                        ___awmod 3AD8                        ___flmul 1F8C  
                      ___flsub 42CE                        ___fltol 356A            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 40B0            ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E  
                 __psmallconst 0E00                        __pcinit 4358                     ??_backHalf 001B  
            __end_of_logAction 4358                        __ramtop 0E00               ?_reverseStraight 0051  
                   _send2USART 496E                      ?_turnLeft 0014                        _left135 46FE  
                      __ptext0 1B18                        __ptext1 3348                        __ptext2 3096  
                      __ptext3 3774                        __ptext4 394A                        __ptext5 449A  
                      __ptext6 456E                        __ptext7 4124                        __ptext8 345E  
                      __ptext9 3860                      _T2CONbits 0FBD          read_prec_or_width@fmt 0008  
                   ??___xxtofl 0006               ___awmod@dividend 0002                     ??_decision 0025  
       reverseStraight@delayMs 0059               ___aldiv@dividend 000E                        _right90 47F8  
                    _T2HLTbits 0FBE                        _moveRed 45D2                  _RxBufWriteCnt 00D6  
                      _turn180 4794                        _sprintf 4506                        main@hue 00AC  
         ??_I2C_2_Master_Start 0003           ??_I2C_2_Master_Write 0003           end_of_initialization 4390  
            __end_of_moveGreen 4762         reverseStraight@time_ms 0053              __end_of_moveWhite 45A0  
                      fputc@fp 0004        __end_of_convert_rgb2hue 1658                        fputs@fp 000C  
            ?_color_click_init 0001             _read_prec_or_width 3B88                     _moveOrange 4668  
                   ??_right135 001B                     _moveYellow 45A0                ??_fullSpeedBack 0016  
                   ??_moveBlue 001F             ??_color_click_init 0006        convert_rgb2hue@clearmax 007C  
                   ??_movePink 001F               _colorCalibration 00E1            returnHome@path_step 0062  
            __end_of_vfpfcnvrt 2F1E               ___aldiv@quotient 0018                        postdec2 0FDD  
          ?_read_prec_or_width 0008                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0028                     ??_vfprintf 0031  
      convert_rgb2hue@greenmax 006C                   _colorCurrent 00D7                     _returnHome 3348  
              _initDCmotorsPWM 3E20                     ??_turnLeft 0016                      _PORTFbits 0F8E  
           setMotorPWM@negDuty 0013              __end_of_turnRight 3FBC                    ___fladd@grs 0011  
                ___xxtofl@sign 000A                    returnHome@i 0069                      _TRISAbits 0F81  
           setMotorPWM@posDuty 0012                      _TRISCbits 0F83                      _TRISDbits 0F84  
                    _TRISEbits 0F85                      _TRISFbits 0F86                      _TRISGbits 0F87  
                    _TRISHbits 0F88               convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A  
             convert_rgb2hue@g 00A4                    ___fldiv@grs 003C               convert_rgb2hue@r 00A0  
                  ___fldiv@rem 0035               fullSpeedAhead@mL 004C               fullSpeedAhead@mR 004D  
     color_writetoaddr@address 0005        ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 001D  
                  _CCP1CONbits 0FAB            _calibration_routine 299C              ?_color_read_Clear 0006  
                 _EUSART4RXbuf 00BA                   _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0006     convert_rgb2hue@bluecurrent 0070                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0002  
              ??_customDelayMs 0004             ??_color_read_Clear 0008             ??_color_read_Green 0008  
               __end_of_LowISR 003A      convert_rgb2hue@redcurrent 0060                 __end_of___flge 3774  
               __end_of___fleq 3CE0                 _fullSpeedAhead 394A                 __end_of___lmul 418E  
                  vfpfcnvrt@ap 0025                    vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023  
               __end_of___wmul 4930                 __end_of_left90 4858                    ?_send2USART 0045  
         ?_calibration_routine 0047            color_read_Clear@tmp 000B            start_initialization 4358  
 calibration_routine@cal_state 0092                    __end_of_abs 456E                    __end_of_pad 3E20  
                _TxBufWriteCnt 005D               ?_convert_rgb2hue 004C                    ?_moveOrange 001D  
                  ?_moveYellow 001D            color_read_Green@tmp 000B                       ??_LowISR 0001  
      __end_of_initDCmotorsPWM 3EB0                    vfprintf@fmt 002F         __end_of_fullSpeedAhead 3A14  
                     ??___flge 000A                       ??___fleq 000A                       ??___lmul 000A  
                     ??___wmul 0006                       ??_left90 001B                    __pdataBANK0 00FD  
                  ?_returnHome 0060          ??_calibration_routine 0048                  _moveLightBlue 46CC  
                    ___fladd@a 0006                      ___fladd@b 0002                      ___fldiv@a 002D  
                    ___fldiv@b 0029                      ___flmul@a 0014                      ___flmul@b 0010  
                  __pbssCOMRAM 005D                      ___flsub@a 0016                      ___flsub@b 0012  
                __pcstackBANK0 0060               ??_backOneAndHalf 001B              reverseStraight@mL 0051  
            reverseStraight@mR 0052          returnHome@action_turn 0068                  ??_reading_hue 0052  
                   right135@mL 0019                     right135@mR 001A               ___lwdiv@dividend 0008  
                    _dtoa$3086 001B                   ?_Timer0_init 0001                ?_fullSpeedAhead 004C  
                     ?___aldiv 000E                       ?___fladd 0002                       ?___fldiv 0029  
                     ?___awdiv 0002                       ?___awmod 0002                       ?___flmul 0010  
                     ?___flsub 0012                       ?___fltol 0042                       ?___lwdiv 0008  
                   moveBlue@mL 001D                     moveBlue@mR 001E                 ?_moveLightBlue 001D  
                  __pintcodelo 0018                       ?_left135 0019                   _readingIndex 00D3  
         I2C_2_Master_Read@ack 0004           I2C_2_Master_Read@tmp 0005                    __smallconst 0E00  
                   movePink@mL 001D                     movePink@mR 001E              _I2C_2_Master_Idle 48E2  
                    _logAction 4314              _I2C_2_Master_Init 48B8              _I2C_2_Master_Read 43DC  
                     ?_right90 0019              _I2C_2_Master_Stop 49CA                       ?_moveRed 001D  
                 _RxBufReadCnt 00D5                       _ADC_init 498C             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010  
                     ?_turn180 0019             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000C  
     initDCmotorsPWM@PWMperiod 0002                       ?_sprintf 0032                ___aldiv@divisor 0012  
            _sendStringSerial4 47C6            ??_I2C_2_Master_Idle 0002                ___aldiv@counter 0016  
          ??_I2C_2_Master_Init 0002            ??_I2C_2_Master_Read 0003                 ___wmul@product 0006  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0003                       _LATCbits 0F7B  
                     _LATDbits 0F7C                       _LATEbits 0F7D                       _LATFbits 0F7E  
                     _LATGbits 0F7F                       _LATHbits 0F80                       _IPR0bits 0E1F  
                     _PIE0bits 0E29             ?_sendStringSerial4 0003                      _moveGreen 4730  
                     _PIE4bits 0E2D            __end_of_reading_hue 394A                       i1u236_20 002E  
                     i1u236_21 002A                      _moveWhite 456E                    turnRight@mL 0014  
                  turnRight@mR 0015                       _PIR0bits 0E33                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0002                      left135@mL 0019                      left135@mR 001A  
            ??_sendCharSerial4 0002                       _SSP2CON2 0EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 0ED8                  ??_reverseTurn 0020                      _vfpfcnvrt 2D96  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 490A      __end_of_I2C_2_Master_Init 48E2  
    __end_of_I2C_2_Master_Read 441E              ___wmul@multiplier 0002      __end_of_I2C_2_Master_Stop 49D4  
                 setMotorPWM@m 000F    I2C_2_Master_Write@data_byte 0003                    _ldrReadings 016E  
                   ?_logAction 0002              ??_color_read_Blue 0008                   _TxBufReadCnt 00D4  
                    _turnRight 3F3E              ___lmul@multiplier 0002      __end_of_sendStringSerial4 47F8  
                 moveOrange@mL 001D                   moveOrange@mR 001E  __end_of_I2C_2_Master_RepStart 49E8  
           color_read_Blue@tmp 000B            __end_of_setMotorPWM 3348                   ??_initUSART4 0002  
                   ?_moveGreen 001D                     ?_moveWhite 001D                       __Hrparam 0000  
                   vfprintf@ap 0030                       __Lrparam 0000                     vfprintf@fp 002E  
        __end_of_fullSpeedBack 40B0                ??_moveLightBlue 001F                   moveYellow@mL 001D  
                 moveYellow@mR 001E                     ?_vfpfcnvrt 0023                       _backHalf 4858  
                 ??_send2USART 0047                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                     _dataFlag 00FD                     sprintf@fmt 0033                       ___xxtofl 2BE2  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6                       _decision 2750  
          __end_of_reverseTurn 31F4                      right90@mL 0019                      right90@mR 001A  
              ___lwdiv@divisor 000A             __end_of_initUSART4 496E                ___lwdiv@counter 000E  
                   ?_turnRight 0014                       __ptext10 0EC6                       __ptext11 2BE2  
                     __ptext20 3E20                       __ptext12 356A                       __ptext21 445E  
                     __ptext13 42CE                       __ptext30 3F3E                       __ptext22 2750  
                     __ptext14 1658                       __ptext31 46CC                       __ptext23 45A0  
                     __ptext15 1F8C                       __ptext40 403A                       __ptext32 46FE  
                     __ptext24 45D2                       __ptext16 3670                       __ptext41 31F4  
                     __ptext33 4730                       __ptext25 47F8                       __ptext17 3C36  
                     __ptext50 439A                       __ptext42 40B0                       __ptext34 4828  
                     __ptext26 4604                       __ptext18 23B6                       __ptext51 2D96  
                     __ptext43 4314                       __ptext35 4762                       __ptext27 4636  
                     __ptext19 4950                       __ptext60 3AD8                       __ptext52 3B88  
                     __ptext44 44D2                       __ptext36 4794                       __ptext28 4668  
                     __ptext61 3A14                       __ptext53 490A                       __ptext45 4930  
                     __ptext37 3FBC                       __ptext29 469A                       __ptext70 49D4  
                     __ptext62 47C6                       __ptext54 2F1E                       __ptext46 48B8  
                     __ptext38 4858                       __ptext71 49DE                       __ptext63 49A6  
                     __ptext55 3D8A                       __ptext47 299C                       __ptext39 3EB0  
                     __ptext72 43DC                       __ptext64 418E                       __ptext56 441E  
                     __ptext48 496E                       __ptext73 48E2                       __ptext65 41DE  
                     __ptext57 3CE0                       __ptext49 4506                       __ptext74 4888  
                     __ptext66 422E                       __ptext58 49E8                       __ptext75 498C  
                     __ptext67 427E                       __ptext59 453A                       __ptext68 49BE  
                     __ptext69 49CA                    decision@hue 0021                      moveRed@mL 001D  
                    moveRed@mR 001E                   _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA  
                  _reading_hue 3860                  reverseTurn@mL 001D                  reverseTurn@mR 001E  
                 ??_moveOrange 001F                     turnLeft@mL 0014                     turnLeft@mR 0015  
                 ??_moveYellow 001F             __end_of_send2USART 498C                       _right135 469A  
                     _moveBlue 4762                       _movePink 4604                     turnRight@i 0017  
        __end_of_customDelayMs 44D2                       isa$xinst 0000                       left90@mL 0019  
                     left90@mR 001A                     _RC4STAbits 0EE7              returnHome@time_ms 0064  
                     int$flags 005E                       _vfprintf 439A                   ??_returnHome 005B  
                     _turnLeft 3FBC                      turn180@mL 0019                      turn180@mR 001A  
                  ??_logAction 0006                     _INTCONbits 0FF2                 customDelayMs@i 0005  
           __end_of_moveOrange 469A             __end_of_moveYellow 45D2                    _setMotorPWM 31F4  
            ??_get16bitTMR0val 0009                       intlevel1 0000                      sprintf@ap 0038  
            decision@path_step 0023              ??_reverseStraight 0057               ??_fullSpeedAhead 004E  
get16bitTMR0val@combined_value 000D             __end_of_returnHome 345E                    ??_moveGreen 001F  
                    turnLeft@i 0017                    ??_moveWhite 001F    __end_of_calibration_routine 2BE2  
  convert_rgb2hue@clearcurrent 0078                  send2USART@hue 0045                    ??_vfpfcnvrt 0026  
                  _reverseTurn 3096               _color_click_init 44D2                       sprintf@f 0039  
                     sprintf@s 0032                     _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C  
                 ___aldiv@sign 0017                    ??_turnRight 0016                  ___fladd@signs 000E  
                   _TX4STAbits 0EE8                _sendCharSerial4 49A6                   ___fladd@aexp 000F  
                 ___fladd@bexp 0010                   returnHome@mL 0060                   returnHome@mR 0061  
