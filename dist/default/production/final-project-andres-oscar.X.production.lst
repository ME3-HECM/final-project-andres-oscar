

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 14:55:44 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=3
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=3
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=3
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=2
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    89                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    90   000000                     
    91                           ; Generated 21/07/2023 GMT
    92                           ; 
    93                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution. Publication is not required when
   107                           ;        this file is used in an embedded application.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC18F67K40 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125   000000                     
   126                           	psect	idataBANK0
   127   0043FE                     __pidataBANK0:
   128                           	callstack 0
   129                           
   130                           ;initializer for _dataFlag
   131   0043FE  01                 	db	1
   132   000000                     _TMR0H	set	4052
   133   000000                     _TX4REG	set	3812
   134   000000                     _RC4STAbits	set	3815
   135   000000                     _SP4BRGH	set	3814
   136   000000                     _LATFbits	set	3966
   137   000000                     _LATHbits	set	3968
   138   000000                     _TRISFbits	set	3974
   139   000000                     _TRISAbits	set	3969
   140   000000                     _TRISEbits	set	3973
   141   000000                     _TRISGbits	set	3975
   142   000000                     _TRISDbits	set	3972
   143   000000                     _PORTFbits	set	3982
   144   000000                     _SSP2CON2bits	set	3802
   145   000000                     _RX4PPS	set	3605
   146   000000                     _SSP2CLKPPS	set	3612
   147   000000                     _SSP2DATPPS	set	3613
   148   000000                     _ANSELDbits	set	3751
   149   000000                     _SSP2ADD	set	3798
   150   000000                     _SSP2CON1bits	set	3801
   151   000000                     _LATAbits	set	3961
   152   000000                     _LATEbits	set	3965
   153   000000                     _LATGbits	set	3967
   154   000000                     _LATCbits	set	3963
   155   000000                     _LATDbits	set	3964
   156   000000                     _CCPR2H	set	4006
   157   000000                     _CCPR1H	set	4010
   158   000000                     _RC4REG	set	3811
   159   000000                     _SP4BRGL	set	3813
   160   000000                     _TX4STAbits	set	3816
   161   000000                     _BAUD4CONbits	set	3817
   162   000000                     _SSP2CON2	set	3802
   163   000000                     _CCPR4H	set	3873
   164   000000                     _CCPR3H	set	3877
   165   000000                     _SSP2STAT	set	3800
   166   000000                     _ANSELFbits	set	3764
   167   000000                     _SSP2BUF	set	3797
   168   000000                     _IPR0bits	set	3615
   169   000000                     _PIE0bits	set	3625
   170   000000                     _PIE4bits	set	3629
   171   000000                     _PIR4bits	set	3639
   172   000000                     _RC0PPS	set	3682
   173   000000                     _RC7PPS	set	3689
   174   000000                     _RD5PPS	set	3695
   175   000000                     _RE2PPS	set	3700
   176   000000                     _RD6PPS	set	3696
   177   000000                     _CCP1CONbits	set	4011
   178   000000                     _CCPTMRS0bits	set	4013
   179   000000                     _T2PR	set	4028
   180   000000                     _T2CONbits	set	4029
   181   000000                     _T0CON0bits	set	4053
   182   000000                     _CCP2CONbits	set	4007
   183   000000                     _CCP3CONbits	set	3878
   184   000000                     _ADREFbits	set	3928
   185   000000                     _CCP4CONbits	set	3874
   186   000000                     _TRISHbits	set	3976
   187   000000                     _TRISCbits	set	3971
   188   000000                     _INTCONbits	set	4082
   189   000000                     _T0CON1bits	set	4054
   190   000000                     _ADPCH	set	3935
   191   000000                     _ADRESH	set	3940
   192   000000                     _ADCON0bits	set	3936
   193   000000                     _RE4PPS	set	3702
   194   000000                     _RG6PPS	set	3720
   195   000000                     _TMR0L	set	4051
   196   000000                     _T2CLKCONbits	set	4031
   197   000000                     _T2HLTbits	set	4030
   198   000000                     _PIR0bits	set	3635
   199                           
   200                           	psect	smallconst
   201   000E00                     __psmallconst:
   202                           	callstack 0
   203   000E00  00                 	db	0
   204   000E01                     STR_7:
   205                           
   206                           ; BSR set to: 15
   207   000E01  43                 	db	67	;'C'
   208   000E02  61                 	db	97	;'a'
   209   000E03  6C                 	db	108	;'l'
   210   000E04  69                 	db	105	;'i'
   211   000E05  62                 	db	98	;'b'
   212   000E06  72                 	db	114	;'r'
   213   000E07  61                 	db	97	;'a'
   214   000E08  74                 	db	116	;'t'
   215   000E09  69                 	db	105	;'i'
   216   000E0A  6F                 	db	111	;'o'
   217   000E0B  6E                 	db	110	;'n'
   218   000E0C  20                 	db	32
   219   000E0D  73                 	db	115	;'s'
   220   000E0E  74                 	db	116	;'t'
   221   000E0F  61                 	db	97	;'a'
   222   000E10  74                 	db	116	;'t'
   223   000E11  65                 	db	101	;'e'
   224   000E12  20                 	db	32
   225   000E13  3D                 	db	61	;'='
   226   000E14  20                 	db	32
   227   000E15  20                 	db	32
   228   000E16  77                 	db	119	;'w'
   229   000E17  68                 	db	104	;'h'
   230   000E18  69                 	db	105	;'i'
   231   000E19  74                 	db	116	;'t'
   232   000E1A  65                 	db	101	;'e'
   233   000E1B  20                 	db	32
   234   000E1C  6C                 	db	108	;'l'
   235   000E1D  69                 	db	105	;'i'
   236   000E1E  67                 	db	103	;'g'
   237   000E1F  68                 	db	104	;'h'
   238   000E20  74                 	db	116	;'t'
   239   000E21  00                 	db	0
   240   000E22                     STR_3:
   241                           
   242                           ; BSR set to: 15
   243   000E22  43                 	db	67	;'C'
   244   000E23  61                 	db	97	;'a'
   245   000E24  6C                 	db	108	;'l'
   246   000E25  69                 	db	105	;'i'
   247   000E26  62                 	db	98	;'b'
   248   000E27  72                 	db	114	;'r'
   249   000E28  61                 	db	97	;'a'
   250   000E29  74                 	db	116	;'t'
   251   000E2A  69                 	db	105	;'i'
   252   000E2B  6F                 	db	111	;'o'
   253   000E2C  6E                 	db	110	;'n'
   254   000E2D  20                 	db	32
   255   000E2E  73                 	db	115	;'s'
   256   000E2F  74                 	db	116	;'t'
   257   000E30  61                 	db	97	;'a'
   258   000E31  74                 	db	116	;'t'
   259   000E32  65                 	db	101	;'e'
   260   000E33  20                 	db	32
   261   000E34  3D                 	db	61	;'='
   262   000E35  20                 	db	32
   263   000E36  67                 	db	103	;'g'
   264   000E37  72                 	db	114	;'r'
   265   000E38  65                 	db	101	;'e'
   266   000E39  65                 	db	101	;'e'
   267   000E3A  6E                 	db	110	;'n'
   268   000E3B  20                 	db	32
   269   000E3C  0A                 	db	10
   270   000E3D  0D                 	db	13
   271   000E3E  00                 	db	0
   272   000E3F                     STR_5:
   273                           
   274                           ; BSR set to: 15
   275   000E3F  43                 	db	67	;'C'
   276   000E40  61                 	db	97	;'a'
   277   000E41  6C                 	db	108	;'l'
   278   000E42  69                 	db	105	;'i'
   279   000E43  62                 	db	98	;'b'
   280   000E44  72                 	db	114	;'r'
   281   000E45  61                 	db	97	;'a'
   282   000E46  74                 	db	116	;'t'
   283   000E47  69                 	db	105	;'i'
   284   000E48  6F                 	db	111	;'o'
   285   000E49  6E                 	db	110	;'n'
   286   000E4A  20                 	db	32
   287   000E4B  73                 	db	115	;'s'
   288   000E4C  74                 	db	116	;'t'
   289   000E4D  61                 	db	97	;'a'
   290   000E4E  74                 	db	116	;'t'
   291   000E4F  65                 	db	101	;'e'
   292   000E50  3D                 	db	61	;'='
   293   000E51  20                 	db	32
   294   000E52  62                 	db	98	;'b'
   295   000E53  6C                 	db	108	;'l'
   296   000E54  75                 	db	117	;'u'
   297   000E55  65                 	db	101	;'e'
   298   000E56  20                 	db	32
   299   000E57  0A                 	db	10
   300   000E58  0D                 	db	13
   301   000E59  00                 	db	0
   302   000E5A                     STR_9:
   303                           
   304                           ; BSR set to: 15
   305   000E5A  43                 	db	67	;'C'
   306   000E5B  41                 	db	65	;'A'
   307   000E5C  4C                 	db	76	;'L'
   308   000E5D  49                 	db	73	;'I'
   309   000E5E  42                 	db	66	;'B'
   310   000E5F  52                 	db	82	;'R'
   311   000E60  41                 	db	65	;'A'
   312   000E61  54                 	db	84	;'T'
   313   000E62  49                 	db	73	;'I'
   314   000E63  4F                 	db	79	;'O'
   315   000E64  4E                 	db	78	;'N'
   316   000E65  20                 	db	32
   317   000E66  43                 	db	67	;'C'
   318   000E67  4F                 	db	79	;'O'
   319   000E68  4D                 	db	77	;'M'
   320   000E69  50                 	db	80	;'P'
   321   000E6A  4C                 	db	76	;'L'
   322   000E6B  45                 	db	69	;'E'
   323   000E6C  54                 	db	84	;'T'
   324   000E6D  45                 	db	69	;'E'
   325   000E6E  44                 	db	68	;'D'
   326   000E6F  20                 	db	32
   327   000E70  0A                 	db	10
   328   000E71  0D                 	db	13
   329   000E72  00                 	db	0
   330   000E73                     STR_1:
   331                           
   332                           ; BSR set to: 15
   333   000E73  43                 	db	67	;'C'
   334   000E74  61                 	db	97	;'a'
   335   000E75  6C                 	db	108	;'l'
   336   000E76  69                 	db	105	;'i'
   337   000E77  62                 	db	98	;'b'
   338   000E78  72                 	db	114	;'r'
   339   000E79  61                 	db	97	;'a'
   340   000E7A  74                 	db	116	;'t'
   341   000E7B  69                 	db	105	;'i'
   342   000E7C  6F                 	db	111	;'o'
   343   000E7D  6E                 	db	110	;'n'
   344   000E7E  20                 	db	32
   345   000E7F  73                 	db	115	;'s'
   346   000E80  74                 	db	116	;'t'
   347   000E81  61                 	db	97	;'a'
   348   000E82  74                 	db	116	;'t'
   349   000E83  65                 	db	101	;'e'
   350   000E84  20                 	db	32
   351   000E85  3D                 	db	61	;'='
   352   000E86  20                 	db	32
   353   000E87  72                 	db	114	;'r'
   354   000E88  65                 	db	101	;'e'
   355   000E89  64                 	db	100	;'d'
   356   000E8A  00                 	db	0
   357   000E8B                     
   358                           ; BSR set to: 15
   359   000E8B  56                 	db	86	;'V'
   360   000E8C  6F                 	db	111	;'o'
   361   000E8D  6C                 	db	108	;'l'
   362   000E8E  74                 	db	116	;'t'
   363   000E8F  61                 	db	97	;'a'
   364   000E90  67                 	db	103	;'g'
   365   000E91  65                 	db	101	;'e'
   366   000E92  20                 	db	32
   367   000E93  3D                 	db	61	;'='
   368   000E94  20                 	db	32
   369   000E95  25                 	db	37
   370   000E96  64                 	db	100	;'d'
   371   000E97  2E                 	db	46
   372   000E98  25                 	db	37
   373   000E99  30                 	db	48	;'0'
   374   000E9A  32                 	db	50	;'2'
   375   000E9B  64                 	db	100	;'d'
   376   000E9C  2C                 	db	44
   377   000E9D  20                 	db	32
   378   000E9E  20                 	db	32
   379   000E9F  00                 	db	0
   380   000EA0                     STR_13:
   381                           
   382                           ; BSR set to: 15
   383   000EA0  68                 	db	104	;'h'
   384   000EA1  75                 	db	117	;'u'
   385   000EA2  65                 	db	101	;'e'
   386   000EA3  3D                 	db	61	;'='
   387   000EA4  25                 	db	37
   388   000EA5  30                 	db	48	;'0'
   389   000EA6  33                 	db	51	;'3'
   390   000EA7  64                 	db	100	;'d'
   391   000EA8  2C                 	db	44
   392   000EA9  20                 	db	32
   393   000EAA  20                 	db	32
   394   000EAB  00                 	db	0
   395   000EAC                     STR_11:
   396                           
   397                           ; BSR set to: 15
   398   000EAC  63                 	db	99	;'c'
   399   000EAD  6C                 	db	108	;'l'
   400   000EAE  65                 	db	101	;'e'
   401   000EAF  61                 	db	97	;'a'
   402   000EB0  72                 	db	114	;'r'
   403   000EB1  3D                 	db	61	;'='
   404   000EB2  25                 	db	37
   405   000EB3  30                 	db	48	;'0'
   406   000EB4  33                 	db	51	;'3'
   407   000EB5  64                 	db	100	;'d'
   408   000EB6  00                 	db	0
   409   000EB7                     STR_2:
   410                           
   411                           ; BSR set to: 15
   412   000EB7  2E                 	db	46
   413   000EB8  00                 	db	0
   414   000EB9  00                 	db	0	; dummy byte at the end
   415   000000                     
   416                           ; #config settings
   417                           
   418                           	psect	cinit
   419   003EB2                     __pcinit:
   420                           	callstack 0
   421   003EB2                     start_initialization:
   422                           	callstack 0
   423   003EB2                     __initialization:
   424                           	callstack 0
   425                           
   426                           ; Initialize objects allocated to BANK0 (1 bytes)
   427                           ; load TBLPTR registers with __pidataBANK0
   428   003EB2  0EFE               	movlw	low __pidataBANK0
   429   003EB4  6EF6               	movwf	tblptrl,c
   430   003EB6  0E43               	movlw	high __pidataBANK0
   431   003EB8  6EF7               	movwf	tblptrh,c
   432   003EBA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   433   003EBC  6EF8               	movwf	tblptru,c
   434   003EBE  0009               	tblrd		*+	;fetch initializer
   435   003EC0  CFF5 F0FF          	movff	tablat,__pdataBANK0
   436                           
   437                           ; Clear objects allocated to BANK2 (150 bytes)
   438   003EC4  EE02  F000         	lfsr	0,__pbssBANK2
   439   003EC8  0E96               	movlw	150
   440   003ECA                     clear_0:
   441   003ECA  6AEE               	clrf	postinc0,c
   442   003ECC  06E8               	decf	wreg,f,c
   443   003ECE  E1FD               	bnz	clear_0
   444                           
   445                           ; Clear objects allocated to BANK1 (140 bytes)
   446   003ED0  EE01  F000         	lfsr	0,__pbssBANK1
   447   003ED4  0E8C               	movlw	140
   448   003ED6                     clear_1:
   449   003ED6  6AEE               	clrf	postinc0,c
   450   003ED8  06E8               	decf	wreg,f,c
   451   003EDA  E1FD               	bnz	clear_1
   452                           
   453                           ; Clear objects allocated to BANK0 (39 bytes)
   454   003EDC  EE00  F0D8         	lfsr	0,__pbssBANK0
   455   003EE0  0E27               	movlw	39
   456   003EE2                     clear_2:
   457   003EE2  6AEE               	clrf	postinc0,c
   458   003EE4  06E8               	decf	wreg,f,c
   459   003EE6  E1FD               	bnz	clear_2
   460                           
   461                           ; Clear objects allocated to COMRAM (5 bytes)
   462   003EE8  6A5F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   463   003EEA  6A5E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   464   003EEC  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   465   003EEE  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   466   003EF0  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   467   003EF2                     end_of_initialization:
   468                           	callstack 0
   469   003EF2                     __end_of__initialization:
   470                           	callstack 0
   471   003EF2  0100               	movlb	0
   472   003EF4  EF82  F011         	goto	_main	;jump to C main() function
   473                           
   474                           	psect	bssCOMRAM
   475   00005B                     __pbssCOMRAM:
   476                           	callstack 0
   477   00005B                     _flags:
   478                           	callstack 0
   479   00005B                     	ds	1
   480   00005C                     _TxBufReadCnt:
   481                           	callstack 0
   482   00005C                     	ds	1
   483   00005D                     _TxBufWriteCnt:
   484                           	callstack 0
   485   00005D                     	ds	1
   486   00005E                     _RxBufReadCnt:
   487                           	callstack 0
   488   00005E                     	ds	1
   489   00005F                     _RxBufWriteCnt:
   490                           	callstack 0
   491   00005F                     	ds	1
   492                           
   493                           	psect	bssBANK0
   494   0000D8                     __pbssBANK0:
   495                           	callstack 0
   496   0000D8                     _width:
   497                           	callstack 0
   498   0000D8                     	ds	2
   499   0000DA                     _prec:
   500                           	callstack 0
   501   0000DA                     	ds	2
   502   0000DC                     _readingIndex:
   503                           	callstack 0
   504   0000DC                     	ds	1
   505   0000DD                     _motorR:
   506                           	callstack 0
   507   0000DD                     	ds	9
   508   0000E6                     _motorL:
   509                           	callstack 0
   510   0000E6                     	ds	9
   511   0000EF                     _colorCurrent:
   512                           	callstack 0
   513   0000EF                     	ds	8
   514   0000F7                     _colorCalibration:
   515                           	callstack 0
   516   0000F7                     	ds	8
   517                           
   518                           	psect	dataBANK0
   519   0000FF                     __pdataBANK0:
   520                           	callstack 0
   521   0000FF                     _dataFlag:
   522                           	callstack 0
   523   0000FF                     	ds	1
   524                           
   525                           	psect	bssBANK1
   526   000100                     __pbssBANK1:
   527                           	callstack 0
   528   000100                     _EUSART4TXbuf:
   529                           	callstack 0
   530   000100                     	ds	60
   531   00013C                     _ldrReadings:
   532                           	callstack 0
   533   00013C                     	ds	20
   534   000150                     _EUSART4RXbuf:
   535                           	callstack 0
   536   000150                     	ds	20
   537   000164                     _hue:
   538                           	callstack 0
   539   000164                     	ds	8
   540   00016C                     _dbuf:
   541                           	callstack 0
   542   00016C                     	ds	32
   543                           
   544                           	psect	bssBANK2
   545   000200                     __pbssBANK2:
   546                           	callstack 0
   547   000200                     _path:
   548                           	callstack 0
   549   000200                     	ds	150
   550                           
   551                           	psect	cstackBANK0
   552   000060                     __pcstackBANK0:
   553                           	callstack 0
   554   000060                     convert_rgb2hue@c_char:
   555                           	callstack 0
   556   000060                     send2USART@hue_char:
   557                           	callstack 0
   558                           
   559                           ; 50 bytes @ 0x0
   560   000060                     	ds	20
   561   000074                     convert_rgb2hue@redcurrent:
   562                           	callstack 0
   563                           
   564                           ; 4 bytes @ 0x14
   565   000074                     	ds	4
   566   000078                     convert_rgb2hue@redmax:
   567                           	callstack 0
   568                           
   569                           ; 4 bytes @ 0x18
   570   000078                     	ds	4
   571   00007C                     convert_rgb2hue@greencurrent:
   572                           	callstack 0
   573                           
   574                           ; 4 bytes @ 0x1C
   575   00007C                     	ds	4
   576   000080                     convert_rgb2hue@greenmax:
   577                           	callstack 0
   578                           
   579                           ; 4 bytes @ 0x20
   580   000080                     	ds	4
   581   000084                     convert_rgb2hue@bluecurrent:
   582                           	callstack 0
   583                           
   584                           ; 4 bytes @ 0x24
   585   000084                     	ds	4
   586   000088                     convert_rgb2hue@bluemax:
   587                           	callstack 0
   588                           
   589                           ; 4 bytes @ 0x28
   590   000088                     	ds	4
   591   00008C                     convert_rgb2hue@clearcurrent:
   592                           	callstack 0
   593                           
   594                           ; 4 bytes @ 0x2C
   595   00008C                     	ds	4
   596   000090                     convert_rgb2hue@clearmax:
   597                           	callstack 0
   598                           
   599                           ; 4 bytes @ 0x30
   600   000090                     	ds	4
   601   000094                     convert_rgb2hue@c:
   602                           	callstack 0
   603                           
   604                           ; 4 bytes @ 0x34
   605   000094                     	ds	4
   606   000098                     _convert_rgb2hue$429:
   607                           	callstack 0
   608                           
   609                           ; 4 bytes @ 0x38
   610   000098                     	ds	4
   611   00009C                     _convert_rgb2hue$430:
   612                           	callstack 0
   613                           
   614                           ; 4 bytes @ 0x3C
   615   00009C                     	ds	4
   616   0000A0                     _convert_rgb2hue$431:
   617                           	callstack 0
   618                           
   619                           ; 4 bytes @ 0x40
   620   0000A0                     	ds	4
   621   0000A4                     _convert_rgb2hue$432:
   622                           	callstack 0
   623                           
   624                           ; 4 bytes @ 0x44
   625   0000A4                     	ds	4
   626   0000A8                     convert_rgb2hue@min:
   627                           	callstack 0
   628                           
   629                           ; 4 bytes @ 0x48
   630   0000A8                     	ds	4
   631   0000AC                     convert_rgb2hue@diff:
   632                           	callstack 0
   633                           
   634                           ; 4 bytes @ 0x4C
   635   0000AC                     	ds	4
   636   0000B0                     convert_rgb2hue@max:
   637                           	callstack 0
   638                           
   639                           ; 4 bytes @ 0x50
   640   0000B0                     	ds	4
   641   0000B4                     convert_rgb2hue@hue:
   642                           	callstack 0
   643                           
   644                           ; 4 bytes @ 0x54
   645   0000B4                     	ds	4
   646   0000B8                     convert_rgb2hue@r:
   647                           	callstack 0
   648                           
   649                           ; 4 bytes @ 0x58
   650   0000B8                     	ds	4
   651   0000BC                     convert_rgb2hue@g:
   652                           	callstack 0
   653                           
   654                           ; 4 bytes @ 0x5C
   655   0000BC                     	ds	4
   656   0000C0                     convert_rgb2hue@b:
   657                           	callstack 0
   658                           
   659                           ; 4 bytes @ 0x60
   660   0000C0                     	ds	4
   661   0000C4                     ??_main:
   662                           
   663                           ; 1 bytes @ 0x64
   664   0000C4                     	ds	2
   665   0000C6                     main@current:
   666                           	callstack 0
   667                           
   668                           ; 4 bytes @ 0x66
   669   0000C6                     	ds	4
   670   0000CA                     main@maximum:
   671                           	callstack 0
   672                           
   673                           ; 4 bytes @ 0x6A
   674   0000CA                     	ds	4
   675   0000CE                     main@hue:
   676                           	callstack 0
   677                           
   678                           ; 2 bytes @ 0x6E
   679   0000CE                     	ds	2
   680   0000D0                     main@time:
   681                           	callstack 0
   682                           
   683                           ; 2 bytes @ 0x70
   684   0000D0                     	ds	2
   685   0000D2                     main@clear_norm:
   686                           	callstack 0
   687                           
   688                           ; 4 bytes @ 0x72
   689   0000D2                     	ds	4
   690   0000D6                     main@path_length:
   691                           	callstack 0
   692                           
   693                           ; 2 bytes @ 0x76
   694   0000D6                     	ds	2
   695                           
   696                           	psect	cstackCOMRAM
   697   000001                     __pcstackCOMRAM:
   698                           	callstack 0
   699   000001                     ??_I2C_2_Master_Idle:
   700   000001                     ?_get16bitTMR0val:
   701                           	callstack 0
   702   000001                     ?___wmul:
   703                           	callstack 0
   704   000001                     ?___awdiv:
   705                           	callstack 0
   706   000001                     ?___awmod:
   707                           	callstack 0
   708   000001                     ?___fladd:
   709                           	callstack 0
   710   000001                     ?___flmul:
   711                           	callstack 0
   712   000001                     ?___fltol:
   713                           	callstack 0
   714   000001                     ?___xxtofl:
   715                           	callstack 0
   716   000001                     sendCharSerial4@charToSend:
   717                           	callstack 0
   718   000001                     initDCmotorsPWM@PWMperiod:
   719                           	callstack 0
   720   000001                     customDelayMs@milliseconds:
   721                           	callstack 0
   722   000001                     ___wmul@multiplier:
   723                           	callstack 0
   724   000001                     ___awdiv@dividend:
   725                           	callstack 0
   726   000001                     ___awmod@dividend:
   727                           	callstack 0
   728   000001                     fputc@c:
   729                           	callstack 0
   730   000001                     ___fleq@ff1:
   731                           	callstack 0
   732   000001                     ___flge@ff1:
   733                           	callstack 0
   734   000001                     ___fltol@f1:
   735                           	callstack 0
   736   000001                     ___fladd@b:
   737                           	callstack 0
   738   000001                     ___flmul@b:
   739                           	callstack 0
   740   000001                     ___xxtofl@val:
   741                           	callstack 0
   742                           
   743                           ; 4 bytes @ 0x0
   744   000001                     	ds	1
   745   000002                     ??_I2C_2_Master_Read:
   746   000002                     I2C_2_Master_Write@data_byte:
   747                           	callstack 0
   748   000002                     sendStringSerial4@string:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0x1
   752   000002                     	ds	1
   753   000003                     ??_get16bitTMR0val:
   754   000003                     ??_customDelayMs:
   755   000003                     color_writetoaddr@value:
   756                           	callstack 0
   757   000003                     I2C_2_Master_Read@ack:
   758                           	callstack 0
   759   000003                     fputc@fp:
   760                           	callstack 0
   761   000003                     ___wmul@multiplicand:
   762                           	callstack 0
   763   000003                     ___awdiv@divisor:
   764                           	callstack 0
   765   000003                     ___awmod@divisor:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x2
   769   000003                     	ds	1
   770   000004                     ??_fputc:
   771   000004                     color_writetoaddr@address:
   772                           	callstack 0
   773   000004                     I2C_2_Master_Read@tmp:
   774                           	callstack 0
   775   000004                     customDelayMs@i:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x3
   779   000004                     	ds	1
   780   000005                     ??_color_click_init:
   781   000005                     ??___fltol:
   782   000005                     ??___xxtofl:
   783   000005                     ?_color_read_Red:
   784                           	callstack 0
   785   000005                     ?_color_read_Green:
   786                           	callstack 0
   787   000005                     ?_color_read_Blue:
   788                           	callstack 0
   789   000005                     ?_color_read_Clear:
   790                           	callstack 0
   791   000005                     ___awdiv@counter:
   792                           	callstack 0
   793   000005                     ___awmod@counter:
   794                           	callstack 0
   795   000005                     ___wmul@product:
   796                           	callstack 0
   797   000005                     ___fleq@ff2:
   798                           	callstack 0
   799   000005                     ___flge@ff2:
   800                           	callstack 0
   801   000005                     ___fladd@a:
   802                           	callstack 0
   803   000005                     ___flmul@a:
   804                           	callstack 0
   805                           
   806                           ; 4 bytes @ 0x4
   807   000005                     	ds	1
   808   000006                     ___awdiv@sign:
   809                           	callstack 0
   810   000006                     ___awmod@sign:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0x5
   814   000006                     	ds	1
   815   000007                     ??_color_read_Red:
   816   000007                     ??_color_read_Green:
   817   000007                     ??_color_read_Blue:
   818   000007                     ??_color_read_Clear:
   819   000007                     ?_abs:
   820                           	callstack 0
   821   000007                     ?___lwdiv:
   822                           	callstack 0
   823   000007                     ?_read_prec_or_width:
   824                           	callstack 0
   825   000007                     read_prec_or_width@fmt:
   826                           	callstack 0
   827   000007                     logAction@time:
   828                           	callstack 0
   829   000007                     get16bitTMR0val@combined_value:
   830                           	callstack 0
   831   000007                     ___awdiv@quotient:
   832                           	callstack 0
   833   000007                     ___lwdiv@dividend:
   834                           	callstack 0
   835   000007                     abs@a:
   836                           	callstack 0
   837                           
   838                           ; 2 bytes @ 0x6
   839   000007                     	ds	1
   840   000008                     read_prec_or_width@ap:
   841                           	callstack 0
   842                           
   843                           ; 1 bytes @ 0x7
   844   000008                     	ds	1
   845   000009                     ??___fladd:
   846   000009                     ??___flmul:
   847   000009                     ??_abs:
   848   000009                     ??___fleq:
   849   000009                     ??___flge:
   850   000009                     ___fltol@sign1:
   851                           	callstack 0
   852   000009                     ___xxtofl@sign:
   853                           	callstack 0
   854   000009                     read_prec_or_width@c:
   855                           	callstack 0
   856   000009                     logAction@pathLength:
   857                           	callstack 0
   858   000009                     ___lwdiv@divisor:
   859                           	callstack 0
   860   000009                     fputs@s:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0x8
   864   000009                     	ds	1
   865   00000A                     ___fltol@exp1:
   866                           	callstack 0
   867   00000A                     ___xxtofl@exp:
   868                           	callstack 0
   869   00000A                     color_read_Red@tmp:
   870                           	callstack 0
   871   00000A                     color_read_Green@tmp:
   872                           	callstack 0
   873   00000A                     color_read_Blue@tmp:
   874                           	callstack 0
   875   00000A                     color_read_Clear@tmp:
   876                           	callstack 0
   877   00000A                     read_prec_or_width@n:
   878                           	callstack 0
   879                           
   880                           ; 2 bytes @ 0x9
   881   00000A                     	ds	1
   882   00000B                     logAction@action:
   883                           	callstack 0
   884   00000B                     fputs@fp:
   885                           	callstack 0
   886   00000B                     ___lwdiv@quotient:
   887                           	callstack 0
   888   00000B                     ___xxtofl@arg:
   889                           	callstack 0
   890                           
   891                           ; 4 bytes @ 0xA
   892   00000B                     	ds	1
   893   00000C                     fputs@c:
   894                           	callstack 0
   895                           
   896                           ; 1 bytes @ 0xB
   897   00000C                     	ds	1
   898   00000D                     ___lwdiv@counter:
   899                           	callstack 0
   900   00000D                     ___fladd@signs:
   901                           	callstack 0
   902   00000D                     ___flmul@sign:
   903                           	callstack 0
   904   00000D                     fputs@i:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0xC
   908   00000D                     	ds	1
   909   00000E                     setMotorPWM@m:
   910                           	callstack 0
   911   00000E                     ___fladd@aexp:
   912                           	callstack 0
   913   00000E                     ___flmul@grs:
   914                           	callstack 0
   915                           
   916                           ; 4 bytes @ 0xD
   917   00000E                     	ds	1
   918   00000F                     ??_setMotorPWM:
   919   00000F                     ___fladd@bexp:
   920                           	callstack 0
   921   00000F                     pad@fp:
   922                           	callstack 0
   923                           
   924                           ; 1 bytes @ 0xE
   925   00000F                     	ds	1
   926   000010                     ___fladd@grs:
   927                           	callstack 0
   928   000010                     pad@buf:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0xF
   932   000010                     	ds	1
   933   000011                     ?___flsub:
   934                           	callstack 0
   935   000011                     setMotorPWM@posDuty:
   936                           	callstack 0
   937   000011                     ___flsub@b:
   938                           	callstack 0
   939                           
   940                           ; 4 bytes @ 0x10
   941   000011                     	ds	1
   942   000012                     setMotorPWM@negDuty:
   943                           	callstack 0
   944   000012                     ___flmul@aexp:
   945                           	callstack 0
   946   000012                     pad@p:
   947                           	callstack 0
   948                           
   949                           ; 2 bytes @ 0x11
   950   000012                     	ds	1
   951   000013                     stop@mL:
   952                           	callstack 0
   953   000013                     turnLeft@mL:
   954                           	callstack 0
   955   000013                     turnRight@mL:
   956                           	callstack 0
   957   000013                     fullSpeedAhead@mL:
   958                           	callstack 0
   959   000013                     fullSpeedBack@mL:
   960                           	callstack 0
   961   000013                     ___flmul@bexp:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0x12
   965   000013                     	ds	1
   966   000014                     ??_pad:
   967   000014                     stop@mR:
   968                           	callstack 0
   969   000014                     turnLeft@mR:
   970                           	callstack 0
   971   000014                     turnRight@mR:
   972                           	callstack 0
   973   000014                     fullSpeedAhead@mR:
   974                           	callstack 0
   975   000014                     fullSpeedBack@mR:
   976                           	callstack 0
   977   000014                     ___flmul@prod:
   978                           	callstack 0
   979                           
   980                           ; 4 bytes @ 0x13
   981   000014                     	ds	1
   982   000015                     ??_fullSpeedAhead:
   983   000015                     ??_stop:
   984   000015                     ??_turnLeft:
   985   000015                     ??_turnRight:
   986   000015                     ??_fullSpeedBack:
   987   000015                     pad@i:
   988                           	callstack 0
   989   000015                     ___flsub@a:
   990                           	callstack 0
   991                           
   992                           ; 4 bytes @ 0x14
   993   000015                     	ds	1
   994   000016                     turnLeft@i:
   995                           	callstack 0
   996   000016                     turnRight@i:
   997                           	callstack 0
   998   000016                     fullSpeedAhead@power:
   999                           	callstack 0
  1000   000016                     fullSpeedBack@power:
  1001                           	callstack 0
  1002                           
  1003                           ; 2 bytes @ 0x15
  1004   000016                     	ds	1
  1005   000017                     dtoa@fp:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x16
  1009   000017                     	ds	1
  1010   000018                     right90@mL:
  1011                           	callstack 0
  1012   000018                     left90@mL:
  1013                           	callstack 0
  1014   000018                     turn180@mL:
  1015                           	callstack 0
  1016   000018                     right135@mL:
  1017                           	callstack 0
  1018   000018                     left135@mL:
  1019                           	callstack 0
  1020   000018                     backHalf@mL:
  1021                           	callstack 0
  1022   000018                     backOneAndHalf@mL:
  1023                           	callstack 0
  1024   000018                     reverseStraight@mL:
  1025                           	callstack 0
  1026   000018                     ___flmul@temp:
  1027                           	callstack 0
  1028   000018                     dtoa@d:
  1029                           	callstack 0
  1030                           
  1031                           ; 2 bytes @ 0x17
  1032   000018                     	ds	1
  1033   000019                     ?___fldiv:
  1034                           	callstack 0
  1035   000019                     right90@mR:
  1036                           	callstack 0
  1037   000019                     left90@mR:
  1038                           	callstack 0
  1039   000019                     turn180@mR:
  1040                           	callstack 0
  1041   000019                     right135@mR:
  1042                           	callstack 0
  1043   000019                     left135@mR:
  1044                           	callstack 0
  1045   000019                     backHalf@mR:
  1046                           	callstack 0
  1047   000019                     backOneAndHalf@mR:
  1048                           	callstack 0
  1049   000019                     reverseStraight@mR:
  1050                           	callstack 0
  1051   000019                     ___fldiv@b:
  1052                           	callstack 0
  1053                           
  1054                           ; 4 bytes @ 0x18
  1055   000019                     	ds	1
  1056   00001A                     ??_right90:
  1057   00001A                     ??_left90:
  1058   00001A                     ??_turn180:
  1059   00001A                     ??_right135:
  1060   00001A                     ??_left135:
  1061   00001A                     ??_backHalf:
  1062   00001A                     ??_backOneAndHalf:
  1063   00001A                     reverseStraight@time:
  1064                           	callstack 0
  1065   00001A                     _dtoa$2963:
  1066                           	callstack 0
  1067                           
  1068                           ; 2 bytes @ 0x19
  1069   00001A                     	ds	2
  1070   00001C                     moveRed@mL:
  1071                           	callstack 0
  1072   00001C                     moveGreen@mL:
  1073                           	callstack 0
  1074   00001C                     moveBlue@mL:
  1075                           	callstack 0
  1076   00001C                     moveYellow@mL:
  1077                           	callstack 0
  1078   00001C                     movePink@mL:
  1079                           	callstack 0
  1080   00001C                     moveOrange@mL:
  1081                           	callstack 0
  1082   00001C                     moveLightBlue@mL:
  1083                           	callstack 0
  1084   00001C                     reverseTurn@mL:
  1085                           	callstack 0
  1086   00001C                     dtoa@p:
  1087                           	callstack 0
  1088   00001C                     reverseStraight@delayMs:
  1089                           	callstack 0
  1090                           
  1091                           ; 2 bytes @ 0x1B
  1092   00001C                     	ds	1
  1093   00001D                     moveRed@mR:
  1094                           	callstack 0
  1095   00001D                     moveGreen@mR:
  1096                           	callstack 0
  1097   00001D                     moveBlue@mR:
  1098                           	callstack 0
  1099   00001D                     moveYellow@mR:
  1100                           	callstack 0
  1101   00001D                     movePink@mR:
  1102                           	callstack 0
  1103   00001D                     moveOrange@mR:
  1104                           	callstack 0
  1105   00001D                     moveLightBlue@mR:
  1106                           	callstack 0
  1107   00001D                     reverseTurn@mR:
  1108                           	callstack 0
  1109   00001D                     dtoa@w:
  1110                           	callstack 0
  1111   00001D                     ___fldiv@a:
  1112                           	callstack 0
  1113                           
  1114                           ; 4 bytes @ 0x1C
  1115   00001D                     	ds	1
  1116   00001E                     reverseTurn@turnDirection:
  1117                           	callstack 0
  1118   00001E                     moveRed@path_length:
  1119                           	callstack 0
  1120   00001E                     moveGreen@path_length:
  1121                           	callstack 0
  1122   00001E                     moveBlue@path_length:
  1123                           	callstack 0
  1124   00001E                     moveYellow@path_length:
  1125                           	callstack 0
  1126   00001E                     movePink@path_length:
  1127                           	callstack 0
  1128   00001E                     moveOrange@path_length:
  1129                           	callstack 0
  1130   00001E                     moveLightBlue@path_length:
  1131                           	callstack 0
  1132                           
  1133                           ; 2 bytes @ 0x1D
  1134   00001E                     	ds	1
  1135   00001F                     returnHome@mL:
  1136                           	callstack 0
  1137   00001F                     dtoa@s:
  1138                           	callstack 0
  1139                           
  1140                           ; 1 bytes @ 0x1E
  1141   00001F                     	ds	1
  1142   000020                     ??_moveRed:
  1143   000020                     ??_moveGreen:
  1144   000020                     ??_moveBlue:
  1145   000020                     ??_moveLightBlue:
  1146   000020                     ??_moveYellow:
  1147   000020                     ??_moveOrange:
  1148   000020                     ??_movePink:
  1149   000020                     returnHome@mR:
  1150                           	callstack 0
  1151   000020                     dtoa@i:
  1152                           	callstack 0
  1153                           
  1154                           ; 2 bytes @ 0x1F
  1155   000020                     	ds	1
  1156   000021                     ??___fldiv:
  1157   000021                     returnHome@path:
  1158                           	callstack 0
  1159                           
  1160                           ; 2 bytes @ 0x20
  1161   000021                     	ds	1
  1162   000022                     vfpfcnvrt@fp:
  1163                           	callstack 0
  1164   000022                     decision@hue:
  1165                           	callstack 0
  1166                           
  1167                           ; 2 bytes @ 0x21
  1168   000022                     	ds	1
  1169   000023                     vfpfcnvrt@fmt:
  1170                           	callstack 0
  1171   000023                     returnHome@pathLength:
  1172                           	callstack 0
  1173                           
  1174                           ; 2 bytes @ 0x22
  1175   000023                     	ds	1
  1176   000024                     vfpfcnvrt@ap:
  1177                           	callstack 0
  1178   000024                     decision@path_length:
  1179                           	callstack 0
  1180                           
  1181                           ; 2 bytes @ 0x23
  1182   000024                     	ds	1
  1183   000025                     ??_returnHome:
  1184   000025                     ??_vfpfcnvrt:
  1185   000025                     ___fldiv@rem:
  1186                           	callstack 0
  1187                           
  1188                           ; 4 bytes @ 0x24
  1189   000025                     	ds	1
  1190   000026                     
  1191                           ; 1 bytes @ 0x25
  1192   000026                     	ds	1
  1193   000027                     returnHome@time:
  1194                           	callstack 0
  1195   000027                     vfpfcnvrt@convarg:
  1196                           	callstack 0
  1197                           
  1198                           ; 4 bytes @ 0x26
  1199   000027                     	ds	2
  1200   000029                     returnHome@action:
  1201                           	callstack 0
  1202   000029                     ___fldiv@sign:
  1203                           	callstack 0
  1204                           
  1205                           ; 1 bytes @ 0x28
  1206   000029                     	ds	1
  1207   00002A                     returnHome@i:
  1208                           	callstack 0
  1209   00002A                     ___fldiv@new_exp:
  1210                           	callstack 0
  1211                           
  1212                           ; 2 bytes @ 0x29
  1213   00002A                     	ds	1
  1214   00002B                     vfpfcnvrt@done:
  1215                           	callstack 0
  1216                           
  1217                           ; 1 bytes @ 0x2A
  1218   00002B                     	ds	1
  1219   00002C                     vfpfcnvrt@cp:
  1220                           	callstack 0
  1221   00002C                     ___fldiv@grs:
  1222                           	callstack 0
  1223                           
  1224                           ; 4 bytes @ 0x2B
  1225   00002C                     	ds	1
  1226   00002D                     ?_vfprintf:
  1227                           	callstack 0
  1228   00002D                     vfprintf@fp:
  1229                           	callstack 0
  1230                           
  1231                           ; 1 bytes @ 0x2C
  1232   00002D                     	ds	1
  1233   00002E                     vfprintf@fmt:
  1234                           	callstack 0
  1235                           
  1236                           ; 1 bytes @ 0x2D
  1237   00002E                     	ds	1
  1238   00002F                     vfprintf@ap:
  1239                           	callstack 0
  1240                           
  1241                           ; 1 bytes @ 0x2E
  1242   00002F                     	ds	1
  1243   000030                     ___fldiv@bexp:
  1244                           	callstack 0
  1245   000030                     vfprintf@cfmt:
  1246                           	callstack 0
  1247                           
  1248                           ; 1 bytes @ 0x2F
  1249   000030                     	ds	1
  1250   000031                     ?_sprintf:
  1251                           	callstack 0
  1252   000031                     ___fldiv@aexp:
  1253                           	callstack 0
  1254   000031                     sprintf@s:
  1255                           	callstack 0
  1256                           
  1257                           ; 1 bytes @ 0x30
  1258   000031                     	ds	1
  1259   000032                     sprintf@fmt:
  1260                           	callstack 0
  1261                           
  1262                           ; 1 bytes @ 0x31
  1263   000032                     	ds	5
  1264   000037                     sprintf@ap:
  1265                           	callstack 0
  1266                           
  1267                           ; 1 bytes @ 0x36
  1268   000037                     	ds	1
  1269   000038                     sprintf@f:
  1270                           	callstack 0
  1271                           
  1272                           ; 12 bytes @ 0x37
  1273   000038                     	ds	12
  1274   000044                     ?_convert_rgb2hue:
  1275                           	callstack 0
  1276   000044                     calibration_routine@cCal:
  1277                           	callstack 0
  1278   000044                     convert_rgb2hue@cMax:
  1279                           	callstack 0
  1280   000044                     send2USART@hue:
  1281                           	callstack 0
  1282                           
  1283                           ; 2 bytes @ 0x43
  1284   000044                     	ds	1
  1285   000045                     ??_calibration_routine:
  1286   000045                     convert_rgb2hue@cCurr:
  1287                           	callstack 0
  1288                           
  1289                           ; 1 bytes @ 0x44
  1290   000045                     	ds	1
  1291   000046                     ??_convert_rgb2hue:
  1292   000046                     
  1293                           ; 1 bytes @ 0x45
  1294   000046                     	ds	1
  1295   000047                     calibration_routine@cal_state:
  1296                           	callstack 0
  1297                           
  1298                           ; 20 bytes @ 0x46
  1299   000047                     	ds	1
  1300   000048                     ?_reading_hue:
  1301                           	callstack 0
  1302   000048                     reading_hue@cCurr:
  1303                           	callstack 0
  1304                           
  1305                           ; 1 bytes @ 0x47
  1306   000048                     	ds	2
  1307   00004A                     ??_reading_hue:
  1308                           
  1309                           ; 1 bytes @ 0x49
  1310   00004A                     	ds	2
  1311   00004C                     reading_hue@hue:
  1312                           	callstack 0
  1313                           
  1314                           ; 2 bytes @ 0x4B
  1315   00004C                     	ds	15
  1316                           
  1317 ;;
  1318 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1319 ;;
  1320 ;; *************** function _main *****************
  1321 ;; Defined at:
  1322 ;;		line 29 in file "main.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;  time            2  112[BANK0 ] int 
  1327 ;;  clear_norm      4  114[BANK0 ] float 
  1328 ;;  maximum         4  106[BANK0 ] float 
  1329 ;;  current         4  102[BANK0 ] float 
  1330 ;;  hue_char       20    0        unsigned char [20]
  1331 ;;  path_length     2  118[BANK0 ] unsigned int 
  1332 ;;  PWMcycle        2    0        unsigned int 
  1333 ;;  hue             2  110[BANK0 ] unsigned int 
  1334 ;;  clear           2    0        unsigned int 
  1335 ;;  green           2    0        unsigned int 
  1336 ;;  blue            2    0        unsigned int 
  1337 ;;  red             2    0        unsigned int 
  1338 ;;  battery_leve    2    0        unsigned int 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  1    wreg      void 
  1341 ;; Registers used:
  1342 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1349 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1350 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1351 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1352 ;;Total ram usage:       20 bytes
  1353 ;; Hardware stack levels required when called: 10
  1354 ;; This function calls:
  1355 ;;		_ADC_init
  1356 ;;		___fldiv
  1357 ;;		___flge
  1358 ;;		___xxtofl
  1359 ;;		_calibration_routine
  1360 ;;		_color_click_init
  1361 ;;		_color_read_Clear
  1362 ;;		_decision
  1363 ;;		_fullSpeedAhead
  1364 ;;		_get16bitTMR0val
  1365 ;;		_initDCmotorsPWM
  1366 ;;		_initUSART4
  1367 ;;		_logAction
  1368 ;;		_reading_hue
  1369 ;;		_returnHome
  1370 ;;		_stop
  1371 ;; This function is called by:
  1372 ;;		Startup code after reset
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           	psect	text0
  1377   002304                     __ptext0:
  1378                           	callstack 0
  1379   002304                     _main:
  1380                           	callstack 21
  1381   002304                     
  1382                           ;main.c: 31:     ADC_init();
  1383   002304  ECD0  F021         	call	_ADC_init	;wreg free
  1384   002308                     
  1385                           ;main.c: 32:     color_click_init();
  1386   002308  EC40  F020         	call	_color_click_init	;wreg free
  1387   00230C                     
  1388                           ;main.c: 33:     initUSART4();
  1389   00230C  ECC1  F021         	call	_initUSART4	;wreg free
  1390   002310                     
  1391                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
  1392   002310  0E00               	movlw	0
  1393   002312  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1394   002314  0E63               	movlw	99
  1395   002316  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1396   002318  ECC9  F01B         	call	_initDCmotorsPWM	;wreg free
  1397   00231C                     
  1398                           ;main.c: 40:     motorL.power = 0;
  1399   00231C  0E00               	movlw	0
  1400   00231E  0100               	movlb	0	; () banked
  1401   002320  6FE6               	movwf	_motorL& (0+255),b
  1402   002322                     
  1403                           ; BSR set to: 0
  1404                           ;main.c: 41:     motorL.direction = 1;
  1405   002322  0E01               	movlw	1
  1406   002324  6FE7               	movwf	(_motorL+1)& (0+255),b
  1407   002326                     
  1408                           ; BSR set to: 0
  1409                           ;main.c: 42:     motorL.brakemode = 1;
  1410   002326  0E01               	movlw	1
  1411   002328  6FE8               	movwf	(_motorL+2)& (0+255),b
  1412   00232A                     
  1413                           ; BSR set to: 0
  1414                           ;main.c: 43:     motorL.PWMperiod = PWMcycle;
  1415   00232A  0E00               	movlw	0
  1416   00232C  6FEA               	movwf	(_motorL+4)& (0+255),b
  1417   00232E  0E63               	movlw	99
  1418   002330  6FE9               	movwf	(_motorL+3)& (0+255),b
  1419   002332                     
  1420                           ; BSR set to: 0
  1421                           ;main.c: 44:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1422   002332  0EAA               	movlw	170
  1423   002334  6FEB               	movwf	(_motorL+5)& (0+255),b
  1424   002336  0E0F               	movlw	15
  1425   002338  6FEC               	movwf	(_motorL+6)& (0+255),b
  1426   00233A                     
  1427                           ; BSR set to: 0
  1428                           ;main.c: 45:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1429   00233A  0EA6               	movlw	166
  1430   00233C  6FED               	movwf	(_motorL+7)& (0+255),b
  1431   00233E  0E0F               	movlw	15
  1432   002340  6FEE               	movwf	(_motorL+8)& (0+255),b
  1433   002342                     
  1434                           ; BSR set to: 0
  1435                           ;main.c: 47:     motorR.power = 0;
  1436   002342  0E00               	movlw	0
  1437   002344  6FDD               	movwf	_motorR& (0+255),b
  1438   002346                     
  1439                           ; BSR set to: 0
  1440                           ;main.c: 48:     motorR.direction = 1;
  1441   002346  0E01               	movlw	1
  1442   002348  6FDE               	movwf	(_motorR+1)& (0+255),b
  1443   00234A                     
  1444                           ; BSR set to: 0
  1445                           ;main.c: 49:     motorR.brakemode = 1;
  1446   00234A  0E01               	movlw	1
  1447   00234C  6FDF               	movwf	(_motorR+2)& (0+255),b
  1448   00234E                     
  1449                           ; BSR set to: 0
  1450                           ;main.c: 50:     motorR.PWMperiod = PWMcycle;
  1451   00234E  0E00               	movlw	0
  1452   002350  6FE1               	movwf	(_motorR+4)& (0+255),b
  1453   002352  0E63               	movlw	99
  1454   002354  6FE0               	movwf	(_motorR+3)& (0+255),b
  1455                           
  1456                           ;main.c: 51:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1457   002356  0E25               	movlw	37
  1458   002358  6FE2               	movwf	(_motorR+5)& (0+255),b
  1459   00235A  0E0F               	movlw	15
  1460   00235C  6FE3               	movwf	(_motorR+6)& (0+255),b
  1461                           
  1462                           ;main.c: 52:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1463   00235E  0E21               	movlw	33
  1464   002360  6FE4               	movwf	(_motorR+7)& (0+255),b
  1465   002362  0E0F               	movlw	15
  1466   002364  6FE5               	movwf	(_motorR+8)& (0+255),b
  1467   002366                     
  1468                           ; BSR set to: 0
  1469                           ;main.c: 55:     LATDbits.LATD7=0;
  1470   002366  9E7C               	bcf	124,7,c	;volatile
  1471   002368                     
  1472                           ; BSR set to: 0
  1473                           ;main.c: 56:     TRISDbits.TRISD7=0;
  1474   002368  9E84               	bcf	132,7,c	;volatile
  1475   00236A                     
  1476                           ; BSR set to: 0
  1477                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1478   00236A  9087               	bcf	135,0,c	;volatile
  1479   00236C                     
  1480                           ; BSR set to: 0
  1481                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1482   00236C  907F               	bcf	127,0,c	;volatile
  1483   00236E                     
  1484                           ; BSR set to: 0
  1485                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1486   00236E  9E85               	bcf	133,7,c	;volatile
  1487   002370                     
  1488                           ; BSR set to: 0
  1489                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1490   002370  9E7D               	bcf	125,7,c	;volatile
  1491   002372                     
  1492                           ; BSR set to: 0
  1493                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1494   002372  9681               	bcf	129,3,c	;volatile
  1495   002374                     
  1496                           ; BSR set to: 0
  1497                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1498   002374  9679               	bcf	121,3,c	;volatile
  1499   002376                     
  1500                           ; BSR set to: 0
  1501                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1502   002376  8686               	bsf	134,3,c	;volatile
  1503   002378                     
  1504                           ; BSR set to: 0
  1505                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1506   002378  010E               	movlb	14	; () banked
  1507   00237A  97B4               	bcf	180,3,b	;volatile
  1508   00237C                     
  1509                           ; BSR set to: 14
  1510                           ;main.c: 76:     unsigned int battery_level;;main.c: 77:     unsigned int red;;main.c: 7
      +                          8:     unsigned int blue;;main.c: 79:     unsigned int green;;main.c: 80:     unsigned i
      +                          nt clear;;main.c: 81:     unsigned int hue;;main.c: 82:     char hue_char[20];;main.c: 8
      +                          3:     unsigned int path_length = 0;
  1511   00237C  0E00               	movlw	0
  1512   00237E  0100               	movlb	0	; () banked
  1513   002380  6FD7               	movwf	(main@path_length+1)& (0+255),b
  1514   002382  0E00               	movlw	0
  1515   002384  6FD6               	movwf	main@path_length& (0+255),b
  1516   002386                     
  1517                           ; BSR set to: 0
  1518                           ;main.c: 84:     TRISHbits.TRISH3 = 0;
  1519   002386  9688               	bcf	136,3,c	;volatile
  1520   002388                     
  1521                           ; BSR set to: 0
  1522                           ;main.c: 85:     LATHbits.LATH3 = 1;
  1523   002388  8680               	bsf	128,3,c	;volatile
  1524   00238A                     
  1525                           ; BSR set to: 0
  1526                           ;main.c: 86:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1527   00238A  0E19               	movlw	25
  1528   00238C  0100               	movlb	0	; () banked
  1529   00238E  6FC5               	movwf	(??_main+1)& (0+255),b
  1530   002390  0E5A               	movlw	90
  1531   002392  6FC4               	movwf	??_main& (0+255),b
  1532   002394  0EB1               	movlw	177
  1533   002396                     u4797:
  1534   002396  2EE8               	decfsz	wreg,f,c
  1535   002398  D7FE               	bra	u4797
  1536   00239A  2FC4               	decfsz	??_main& (0+255),f,b
  1537   00239C  D7FC               	bra	u4797
  1538   00239E  2FC5               	decfsz	(??_main+1)& (0+255),f,b
  1539   0023A0  D7FA               	bra	u4797
  1540   0023A2  D000               	nop2	
  1541   0023A4                     
  1542                           ;main.c: 87:     LATHbits.LATH3 = 0;
  1543   0023A4  9680               	bcf	128,3,c	;volatile
  1544   0023A6                     
  1545                           ;main.c: 88:     LATFbits.LATF2 = 0;
  1546   0023A6  947E               	bcf	126,2,c	;volatile
  1547   0023A8                     
  1548                           ;main.c: 89:     TRISFbits.TRISF2 = 1;
  1549   0023A8  8486               	bsf	134,2,c	;volatile
  1550   0023AA                     
  1551                           ;main.c: 90:     ANSELFbits.ANSELF2 = 0;
  1552   0023AA  010E               	movlb	14	; () banked
  1553   0023AC  95B4               	bcf	180,2,b	;volatile
  1554   0023AE                     
  1555                           ; BSR set to: 14
  1556                           ;main.c: 93:     calibration_routine(&colorCalibration);
  1557   0023AE  0EF7               	movlw	low _colorCalibration
  1558   0023B0  6E44               	movwf	calibration_routine@cCal^0,c
  1559   0023B2  ECAD  F012         	call	_calibration_routine	;wreg free
  1560   0023B6                     l5369:
  1561                           
  1562                           ;main.c: 99:         LATGbits.LATG0 = 1;
  1563   0023B6  807F               	bsf	127,0,c	;volatile
  1564   0023B8                     
  1565                           ;main.c: 100:         LATEbits.LATE7 = 1;
  1566   0023B8  8E7D               	bsf	125,7,c	;volatile
  1567   0023BA                     
  1568                           ;main.c: 101:         LATAbits.LATA3 = 1;
  1569   0023BA  8679               	bsf	121,3,c	;volatile
  1570   0023BC                     
  1571                           ;main.c: 104:         fullSpeedAhead(&motorL,&motorR);
  1572   0023BC  0EE6               	movlw	low _motorL
  1573   0023BE  6E13               	movwf	fullSpeedAhead@mL^0,c
  1574   0023C0  0EDD               	movlw	low _motorR
  1575   0023C2  6E14               	movwf	fullSpeedAhead@mR^0,c
  1576   0023C4  ECD6  F01C         	call	_fullSpeedAhead	;wreg free
  1577   0023C8                     
  1578                           ;main.c: 105:         T0CON0bits.T0EN=1;
  1579   0023C8  8ED5               	bsf	213,7,c	;volatile
  1580   0023CA                     
  1581                           ;main.c: 107:         (colorCurrent.clear) = color_read_Clear();
  1582   0023CA  EC0D  F01E         	call	_color_read_Clear	;wreg free
  1583   0023CE  C005  F0F5         	movff	?_color_read_Clear,_colorCurrent+6
  1584   0023D2  C006  F0F6         	movff	?_color_read_Clear+1,_colorCurrent+7
  1585   0023D6                     
  1586                           ;main.c: 108:         float current = colorCurrent.clear;
  1587   0023D6  C0F5  F001         	movff	_colorCurrent+6,___xxtofl@val
  1588   0023DA  C0F6  F002         	movff	_colorCurrent+7,___xxtofl@val+1
  1589   0023DE  6A03               	clrf	(___xxtofl@val+2)^0,c
  1590   0023E0  6A04               	clrf	(___xxtofl@val+3)^0,c
  1591   0023E2  0E00               	movlw	0
  1592   0023E4  EC7A  F014         	call	___xxtofl
  1593   0023E8  C001  F0C6         	movff	?___xxtofl,main@current
  1594   0023EC  C002  F0C7         	movff	?___xxtofl+1,main@current+1
  1595   0023F0  C003  F0C8         	movff	?___xxtofl+2,main@current+2
  1596   0023F4  C004  F0C9         	movff	?___xxtofl+3,main@current+3
  1597   0023F8                     
  1598                           ;main.c: 109:         float maximum = colorCalibration.clear;
  1599   0023F8  C0FD  F001         	movff	_colorCalibration+6,___xxtofl@val
  1600   0023FC  C0FE  F002         	movff	_colorCalibration+7,___xxtofl@val+1
  1601   002400  6A03               	clrf	(___xxtofl@val+2)^0,c
  1602   002402  6A04               	clrf	(___xxtofl@val+3)^0,c
  1603   002404  0E00               	movlw	0
  1604   002406  EC7A  F014         	call	___xxtofl
  1605   00240A  C001  F0CA         	movff	?___xxtofl,main@maximum
  1606   00240E  C002  F0CB         	movff	?___xxtofl+1,main@maximum+1
  1607   002412  C003  F0CC         	movff	?___xxtofl+2,main@maximum+2
  1608   002416  C004  F0CD         	movff	?___xxtofl+3,main@maximum+3
  1609   00241A                     
  1610                           ;main.c: 110:         float clear_norm = current/maximum;
  1611   00241A  C0C6  F019         	movff	main@current,___fldiv@b
  1612   00241E  C0C7  F01A         	movff	main@current+1,___fldiv@b+1
  1613   002422  C0C8  F01B         	movff	main@current+2,___fldiv@b+2
  1614   002426  C0C9  F01C         	movff	main@current+3,___fldiv@b+3
  1615   00242A  C0CA  F01D         	movff	main@maximum,___fldiv@a
  1616   00242E  C0CB  F01E         	movff	main@maximum+1,___fldiv@a+1
  1617   002432  C0CC  F01F         	movff	main@maximum+2,___fldiv@a+2
  1618   002436  C0CD  F020         	movff	main@maximum+3,___fldiv@a+3
  1619   00243A  ECB5  F00F         	call	___fldiv	;wreg free
  1620   00243E  C019  F0D2         	movff	?___fldiv,main@clear_norm
  1621   002442  C01A  F0D3         	movff	?___fldiv+1,main@clear_norm+1
  1622   002446  C01B  F0D4         	movff	?___fldiv+2,main@clear_norm+2
  1623   00244A  C01C  F0D5         	movff	?___fldiv+3,main@clear_norm+3
  1624   00244E                     
  1625                           ;main.c: 113:         if (clear_norm > 0.15){
  1626   00244E  0E9A               	movlw	154
  1627   002450  6E01               	movwf	___flge@ff1^0,c
  1628   002452  0E99               	movlw	153
  1629   002454  6E02               	movwf	(___flge@ff1+1)^0,c
  1630   002456  0E19               	movlw	25
  1631   002458  6E03               	movwf	(___flge@ff1+2)^0,c
  1632   00245A  0E3E               	movlw	62
  1633   00245C  6E04               	movwf	(___flge@ff1+3)^0,c
  1634   00245E  C0D2  F005         	movff	main@clear_norm,___flge@ff2
  1635   002462  C0D3  F006         	movff	main@clear_norm+1,___flge@ff2+1
  1636   002466  C0D4  F007         	movff	main@clear_norm+2,___flge@ff2+2
  1637   00246A  C0D5  F008         	movff	main@clear_norm+3,___flge@ff2+3
  1638   00246E  ECFF  F017         	call	___flge	;wreg free
  1639   002472  B0D8               	btfsc	status,0,c
  1640   002474  EF3E  F012         	goto	u4761
  1641   002478  EF40  F012         	goto	u4760
  1642   00247C                     u4761:
  1643   00247C  EFDB  F011         	goto	l5369
  1644   002480                     u4760:
  1645   002480                     
  1646                           ;main.c: 115:             stop(&motorL,&motorR);
  1647   002480  0EE6               	movlw	low _motorL
  1648   002482  6E13               	movwf	stop@mL^0,c
  1649   002484  0EDD               	movlw	low _motorR
  1650   002486  6E14               	movwf	stop@mR^0,c
  1651   002488  EC11  F01C         	call	_stop	;wreg free
  1652   00248C                     
  1653                           ;main.c: 117:             int time = get16bitTMR0val();
  1654   00248C  EC91  F021         	call	_get16bitTMR0val	;wreg free
  1655   002490  C001  F0D0         	movff	?_get16bitTMR0val,main@time
  1656   002494  C002  F0D1         	movff	?_get16bitTMR0val+1,main@time+1
  1657   002498                     
  1658                           ;main.c: 118:             T0CON0bits.T0EN=0;
  1659   002498  9ED5               	bcf	213,7,c	;volatile
  1660   00249A                     
  1661                           ;main.c: 119:             logAction('F',time, path_length);
  1662   00249A  C0D0  F007         	movff	main@time,logAction@time
  1663   00249E  C0D1  F008         	movff	main@time+1,logAction@time+1
  1664   0024A2  C0D6  F009         	movff	main@path_length,logAction@pathLength
  1665   0024A6  C0D7  F00A         	movff	main@path_length+1,logAction@pathLength+1
  1666   0024AA  0E46               	movlw	70
  1667   0024AC  EC88  F01D         	call	_logAction
  1668   0024B0                     
  1669                           ;main.c: 123:             fullSpeedAhead(&motorL,&motorR);
  1670   0024B0  0EE6               	movlw	low _motorL
  1671   0024B2  6E13               	movwf	fullSpeedAhead@mL^0,c
  1672   0024B4  0EDD               	movlw	low _motorR
  1673   0024B6  6E14               	movwf	fullSpeedAhead@mR^0,c
  1674   0024B8  ECD6  F01C         	call	_fullSpeedAhead	;wreg free
  1675   0024BC                     
  1676                           ;main.c: 124:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1677   0024BC  0E11               	movlw	17
  1678   0024BE  0100               	movlb	0	; () banked
  1679   0024C0  6FC5               	movwf	(??_main+1)& (0+255),b
  1680   0024C2  0E3C               	movlw	60
  1681   0024C4  6FC4               	movwf	??_main& (0+255),b
  1682   0024C6  0ECB               	movlw	203
  1683   0024C8                     u4807:
  1684   0024C8  2EE8               	decfsz	wreg,f,c
  1685   0024CA  D7FE               	bra	u4807
  1686   0024CC  2FC4               	decfsz	??_main& (0+255),f,b
  1687   0024CE  D7FC               	bra	u4807
  1688   0024D0  2FC5               	decfsz	(??_main+1)& (0+255),f,b
  1689   0024D2  D7FA               	bra	u4807
  1690   0024D4                     
  1691                           ;main.c: 125:             stop(&motorL,&motorR);
  1692   0024D4  0EE6               	movlw	low _motorL
  1693   0024D6  6E13               	movwf	stop@mL^0,c
  1694   0024D8  0EDD               	movlw	low _motorR
  1695   0024DA  6E14               	movwf	stop@mR^0,c
  1696   0024DC  EC11  F01C         	call	_stop	;wreg free
  1697   0024E0                     
  1698                           ;main.c: 127:             if (clear_norm > 0.75){
  1699   0024E0  0E00               	movlw	0
  1700   0024E2  6E01               	movwf	___flge@ff1^0,c
  1701   0024E4  0E00               	movlw	0
  1702   0024E6  6E02               	movwf	(___flge@ff1+1)^0,c
  1703   0024E8  0E40               	movlw	64
  1704   0024EA  6E03               	movwf	(___flge@ff1+2)^0,c
  1705   0024EC  0E3F               	movlw	63
  1706   0024EE  6E04               	movwf	(___flge@ff1+3)^0,c
  1707   0024F0  C0D2  F005         	movff	main@clear_norm,___flge@ff2
  1708   0024F4  C0D3  F006         	movff	main@clear_norm+1,___flge@ff2+1
  1709   0024F8  C0D4  F007         	movff	main@clear_norm+2,___flge@ff2+2
  1710   0024FC  C0D5  F008         	movff	main@clear_norm+3,___flge@ff2+3
  1711   002500  ECFF  F017         	call	___flge	;wreg free
  1712   002504  B0D8               	btfsc	status,0,c
  1713   002506  EF87  F012         	goto	u4771
  1714   00250A  EF89  F012         	goto	u4770
  1715   00250E                     u4771:
  1716   00250E  EF97  F012         	goto	l5407
  1717   002512                     u4770:
  1718   002512                     
  1719                           ;main.c: 128:                 returnHome(&motorL, &motorR, &path ,path_length);
  1720   002512  0EE6               	movlw	low _motorL
  1721   002514  6E1F               	movwf	returnHome@mL^0,c
  1722   002516  0EDD               	movlw	low _motorR
  1723   002518  6E20               	movwf	returnHome@mR^0,c
  1724   00251A  0E00               	movlw	low _path
  1725   00251C  6E21               	movwf	returnHome@path^0,c
  1726   00251E  0E02               	movlw	high _path
  1727   002520  6E22               	movwf	(returnHome@path+1)^0,c
  1728   002522  C0D6  F023         	movff	main@path_length,returnHome@pathLength
  1729   002526  C0D7  F024         	movff	main@path_length+1,returnHome@pathLength+1
  1730   00252A  EC80  F01A         	call	_returnHome	;wreg free
  1731   00252E                     l5407:
  1732                           
  1733                           ;main.c: 131:             hue = reading_hue(&colorCurrent);
  1734   00252E  0EEF               	movlw	low _colorCurrent
  1735   002530  6E48               	movwf	reading_hue@cCurr^0,c
  1736   002532  EC81  F018         	call	_reading_hue	;wreg free
  1737   002536  C048  F0CE         	movff	?_reading_hue,main@hue
  1738   00253A  C049  F0CF         	movff	?_reading_hue+1,main@hue+1
  1739   00253E                     
  1740                           ;main.c: 132:             decision(hue, path_length);
  1741   00253E  C0CE  F022         	movff	main@hue,decision@hue
  1742   002542  C0CF  F023         	movff	main@hue+1,decision@hue+1
  1743   002546  C0D6  F024         	movff	main@path_length,decision@path_length
  1744   00254A  C0D7  F025         	movff	main@path_length+1,decision@path_length+1
  1745   00254E  EC96  F013         	call	_decision	;wreg free
  1746   002552  EFDB  F011         	goto	l5369
  1747   002556  EF00  F000         	goto	start
  1748   00255A                     __end_of_main:
  1749                           	callstack 0
  1750                           
  1751 ;; *************** function _returnHome *****************
  1752 ;; Defined at:
  1753 ;;		line 376 in file "dc_motor.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  1756 ;;		 -> motorL(9), 
  1757 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  1758 ;;		 -> motorR(9), 
  1759 ;;  path            2   32[COMRAM] PTR PTR struct PathStep
  1760 ;;		 -> path(150), 
  1761 ;;  pathLength      2   34[COMRAM] int 
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;  time            2   38[COMRAM] unsigned int 
  1764 ;;  action          1   40[COMRAM] unsigned char 
  1765 ;;  i               2   41[COMRAM] int 
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  1    wreg      void 
  1768 ;; Registers used:
  1769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1775 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1776 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1777 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1778 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1779 ;;Total ram usage:       13 bytes
  1780 ;; Hardware stack levels used: 1
  1781 ;; Hardware stack levels required when called: 5
  1782 ;; This function calls:
  1783 ;;		_reverseStraight
  1784 ;;		_reverseTurn
  1785 ;; This function is called by:
  1786 ;;		_main
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           	psect	text1
  1791   003500                     __ptext1:
  1792                           	callstack 0
  1793   003500                     _returnHome:
  1794                           	callstack 25
  1795   003500                     
  1796                           ;dc_motor.c: 376: void returnHome(struct DC_motor *mL, struct DC_motor *mR, struct PathS
      +                          tep *path[], int pathLength);dc_motor.c: 377: {;dc_motor.c: 378:     for (int i = pathLe
      +                          ngth; i >= 0; i--) {
  1797   003500  C023  F02A         	movff	returnHome@pathLength,returnHome@i
  1798   003504  C024  F02B         	movff	returnHome@pathLength+1,returnHome@i+1
  1799   003508                     l5283:
  1800   003508  BE2B               	btfsc	(returnHome@i+1)^0,7,c
  1801   00350A  EF8B  F01A         	goto	u4740
  1802   00350E  EF89  F01A         	goto	u4741
  1803   003512                     u4741:
  1804   003512  EF8D  F01A         	goto	l5287
  1805   003516                     u4740:
  1806   003516  EFD5  F01A         	goto	l502
  1807   00351A                     l5287:
  1808                           
  1809                           ;dc_motor.c: 379:         char action = path[i]->action;
  1810   00351A  90D8               	bcf	status,0,c
  1811   00351C  342A               	rlcf	returnHome@i^0,w,c
  1812   00351E  6ED9               	movwf	fsr2l,c
  1813   003520  342B               	rlcf	(returnHome@i+1)^0,w,c
  1814   003522  6EDA               	movwf	fsr2h,c
  1815   003524  5021               	movf	returnHome@path^0,w,c
  1816   003526  26D9               	addwf	fsr2l,f,c
  1817   003528  5022               	movf	(returnHome@path+1)^0,w,c
  1818   00352A  22DA               	addwfc	fsr2h,f,c
  1819   00352C  CFDE F025          	movff	postinc2,??_returnHome
  1820   003530  CFDD F026          	movff	postdec2,??_returnHome+1
  1821   003534  C025  FFD9         	movff	??_returnHome,fsr2l
  1822   003538  C026  FFDA         	movff	??_returnHome+1,fsr2h
  1823   00353C  50DF               	movf	indf2,w,c
  1824   00353E  6E29               	movwf	returnHome@action^0,c
  1825   003540                     
  1826                           ;dc_motor.c: 380:         unsigned int time = path[i]->time;
  1827   003540  90D8               	bcf	status,0,c
  1828   003542  342A               	rlcf	returnHome@i^0,w,c
  1829   003544  6ED9               	movwf	fsr2l,c
  1830   003546  342B               	rlcf	(returnHome@i+1)^0,w,c
  1831   003548  6EDA               	movwf	fsr2h,c
  1832   00354A  5021               	movf	returnHome@path^0,w,c
  1833   00354C  26D9               	addwf	fsr2l,f,c
  1834   00354E  5022               	movf	(returnHome@path+1)^0,w,c
  1835   003550  22DA               	addwfc	fsr2h,f,c
  1836   003552  EE10 F001          	lfsr	1,1
  1837   003556  50DE               	movf	postinc2,w,c
  1838   003558  26E1               	addwf	fsr1l,f,c
  1839   00355A  50DD               	movf	postdec2,w,c
  1840   00355C  22E2               	addwfc	fsr1h,f,c
  1841   00355E  CFE6 F027          	movff	postinc1,returnHome@time
  1842   003562  CFE5 F028          	movff	postdec1,returnHome@time+1
  1843   003566                     
  1844                           ;dc_motor.c: 382:         if (action == 'F'){reverseStraight(mL, mR, time);}
  1845   003566  0E46               	movlw	70
  1846   003568  1829               	xorwf	returnHome@action^0,w,c
  1847   00356A  A4D8               	btfss	status,2,c
  1848   00356C  EFBA  F01A         	goto	u4751
  1849   003570  EFBC  F01A         	goto	u4750
  1850   003574                     u4751:
  1851   003574  EFC8  F01A         	goto	l5295
  1852   003578                     u4750:
  1853   003578  C01F  F018         	movff	returnHome@mL,reverseStraight@mL
  1854   00357C  C020  F019         	movff	returnHome@mR,reverseStraight@mR
  1855   003580  C027  F01A         	movff	returnHome@time,reverseStraight@time
  1856   003584  C028  F01B         	movff	returnHome@time+1,reverseStraight@time+1
  1857   003588  ECFC  F018         	call	_reverseStraight	;wreg free
  1858   00358C  EFD0  F01A         	goto	l5297
  1859   003590                     l5295:
  1860   003590  C01F  F01C         	movff	returnHome@mL,reverseTurn@mL
  1861   003594  C020  F01D         	movff	returnHome@mR,reverseTurn@mR
  1862   003598  C029  F01E         	movff	returnHome@action,reverseTurn@turnDirection
  1863   00359C  EC7C  F01F         	call	_reverseTurn	;wreg free
  1864   0035A0                     l5297:
  1865                           
  1866                           ;dc_motor.c: 386:     }
  1867   0035A0  062A               	decf	returnHome@i^0,f,c
  1868   0035A2  A0D8               	btfss	status,0,c
  1869   0035A4  062B               	decf	(returnHome@i+1)^0,f,c
  1870   0035A6  EF84  F01A         	goto	l5283
  1871   0035AA                     l502:
  1872   0035AA  0012               	return		;funcret
  1873   0035AC                     __end_of_returnHome:
  1874                           	callstack 0
  1875                           
  1876 ;; *************** function _reverseTurn *****************
  1877 ;; Defined at:
  1878 ;;		line 338 in file "dc_motor.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  1881 ;;		 -> motorL(9), 
  1882 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  1883 ;;		 -> motorR(9), 
  1884 ;;  turnDirectio    1   29[COMRAM] unsigned char 
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;		None
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  1    wreg      void 
  1889 ;; Registers used:
  1890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1896 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1899 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1900 ;;Total ram usage:        3 bytes
  1901 ;; Hardware stack levels used: 1
  1902 ;; Hardware stack levels required when called: 4
  1903 ;; This function calls:
  1904 ;;		_left135
  1905 ;;		_right135
  1906 ;;		_turn180
  1907 ;;		_turnLeft
  1908 ;;		_turnRight
  1909 ;; This function is called by:
  1910 ;;		_returnHome
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text2
  1915   003EF8                     __ptext2:
  1916                           	callstack 0
  1917   003EF8                     _reverseTurn:
  1918                           	callstack 25
  1919   003EF8                     
  1920                           ;dc_motor.c: 339:     if (turnDirection == 'R') {
  1921   003EF8  0E52               	movlw	82
  1922   003EFA  181E               	xorwf	reverseTurn@turnDirection^0,w,c
  1923   003EFC  A4D8               	btfss	status,2,c
  1924   003EFE  EF83  F01F         	goto	u3981
  1925   003F02  EF85  F01F         	goto	u3980
  1926   003F06                     u3981:
  1927   003F06  EF8D  F01F         	goto	l4503
  1928   003F0A                     u3980:
  1929   003F0A                     
  1930                           ;dc_motor.c: 340:         turnLeft(mL, mR);
  1931   003F0A  C01C  F013         	movff	reverseTurn@mL,turnLeft@mL
  1932   003F0E  C01D  F014         	movff	reverseTurn@mR,turnLeft@mR
  1933   003F12  EC97  F01C         	call	_turnLeft	;wreg free
  1934                           
  1935                           ;dc_motor.c: 341:     } else if (turnDirection == 'L') {
  1936   003F16  EF9E  F01F         	goto	l483
  1937   003F1A                     l4503:
  1938   003F1A  0E4C               	movlw	76
  1939   003F1C  181E               	xorwf	reverseTurn@turnDirection^0,w,c
  1940   003F1E  A4D8               	btfss	status,2,c
  1941   003F20  EF94  F01F         	goto	u3991
  1942   003F24  EF96  F01F         	goto	u3990
  1943   003F28                     u3991:
  1944   003F28  EF9E  F01F         	goto	l482
  1945   003F2C                     u3990:
  1946   003F2C                     
  1947                           ;dc_motor.c: 342:         turnRight(mL, mR);
  1948   003F2C  C01C  F013         	movff	reverseTurn@mL,turnRight@mL
  1949   003F30  C01D  F014         	movff	reverseTurn@mR,turnRight@mR
  1950   003F34  EC58  F01C         	call	_turnRight	;wreg free
  1951                           
  1952                           ;dc_motor.c: 343:     } else if (turnDirection == '180') {
  1953   003F38  EF9E  F01F         	goto	l483
  1954   003F3C                     l482:
  1955   003F3C                     l483:
  1956   003F3C  0012               	return		;funcret
  1957   003F3E                     __end_of_reverseTurn:
  1958                           	callstack 0
  1959                           
  1960 ;; *************** function _reverseStraight *****************
  1961 ;; Defined at:
  1962 ;;		line 361 in file "dc_motor.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  1965 ;;		 -> motorL(9), 
  1966 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  1967 ;;		 -> motorR(9), 
  1968 ;;  time            2   25[COMRAM] int 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  delayMs         2   27[COMRAM] int 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      void 
  1973 ;; Registers used:
  1974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1980 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1981 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1983 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1984 ;;Total ram usage:        6 bytes
  1985 ;; Hardware stack levels used: 1
  1986 ;; Hardware stack levels required when called: 3
  1987 ;; This function calls:
  1988 ;;		_customDelayMs
  1989 ;;		_fullSpeedAhead
  1990 ;;		_stop
  1991 ;; This function is called by:
  1992 ;;		_returnHome
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text3
  1997   0031F8                     __ptext3:
  1998                           	callstack 0
  1999   0031F8                     _reverseStraight:
  2000                           	callstack 26
  2001   0031F8                     
  2002                           ;dc_motor.c: 363:     int delayMs;;dc_motor.c: 366:     if (time<1000 && time>800){delay
      +                          Ms = 3000; }
  2003   0031F8  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2004   0031FA  EF0A  F019         	goto	u4000
  2005   0031FE  0EE8               	movlw	232
  2006   003200  5C1A               	subwf	reverseStraight@time^0,w,c
  2007   003202  0E03               	movlw	3
  2008   003204  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2009   003206  B0D8               	btfsc	status,0,c
  2010   003208  EF08  F019         	goto	u4001
  2011   00320C  EF0A  F019         	goto	u4000
  2012   003210                     u4001:
  2013   003210  EF1C  F019         	goto	l4519
  2014   003214                     u4000:
  2015   003214  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2016   003216  EF16  F019         	goto	u4011
  2017   00321A  0E21               	movlw	33
  2018   00321C  5C1A               	subwf	reverseStraight@time^0,w,c
  2019   00321E  0E03               	movlw	3
  2020   003220  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2021   003222  A0D8               	btfss	status,0,c
  2022   003224  EF16  F019         	goto	u4011
  2023   003228  EF18  F019         	goto	u4010
  2024   00322C                     u4011:
  2025   00322C  EF1C  F019         	goto	l4519
  2026   003230                     u4010:
  2027   003230  0E0B               	movlw	11
  2028   003232  6E1D               	movwf	(reverseStraight@delayMs+1)^0,c
  2029   003234  0EB8               	movlw	184
  2030   003236  6E1C               	movwf	reverseStraight@delayMs^0,c
  2031   003238                     l4519:
  2032                           
  2033                           ;dc_motor.c: 367:     if (time<800 && time>600){delayMs = 2000; }
  2034   003238  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2035   00323A  EF2A  F019         	goto	u4020
  2036   00323E  0E20               	movlw	32
  2037   003240  5C1A               	subwf	reverseStraight@time^0,w,c
  2038   003242  0E03               	movlw	3
  2039   003244  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2040   003246  B0D8               	btfsc	status,0,c
  2041   003248  EF28  F019         	goto	u4021
  2042   00324C  EF2A  F019         	goto	u4020
  2043   003250                     u4021:
  2044   003250  EF3C  F019         	goto	l4525
  2045   003254                     u4020:
  2046   003254  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2047   003256  EF36  F019         	goto	u4031
  2048   00325A  0E59               	movlw	89
  2049   00325C  5C1A               	subwf	reverseStraight@time^0,w,c
  2050   00325E  0E02               	movlw	2
  2051   003260  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2052   003262  A0D8               	btfss	status,0,c
  2053   003264  EF36  F019         	goto	u4031
  2054   003268  EF38  F019         	goto	u4030
  2055   00326C                     u4031:
  2056   00326C  EF3C  F019         	goto	l4525
  2057   003270                     u4030:
  2058   003270  0E07               	movlw	7
  2059   003272  6E1D               	movwf	(reverseStraight@delayMs+1)^0,c
  2060   003274  0ED0               	movlw	208
  2061   003276  6E1C               	movwf	reverseStraight@delayMs^0,c
  2062   003278                     l4525:
  2063                           
  2064                           ;dc_motor.c: 368:     if (time<600 && time>400){delayMs = 1000;}
  2065   003278  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2066   00327A  EF4A  F019         	goto	u4040
  2067   00327E  0E58               	movlw	88
  2068   003280  5C1A               	subwf	reverseStraight@time^0,w,c
  2069   003282  0E02               	movlw	2
  2070   003284  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2071   003286  B0D8               	btfsc	status,0,c
  2072   003288  EF48  F019         	goto	u4041
  2073   00328C  EF4A  F019         	goto	u4040
  2074   003290                     u4041:
  2075   003290  EF5C  F019         	goto	l4531
  2076   003294                     u4040:
  2077   003294  BE1B               	btfsc	(reverseStraight@time+1)^0,7,c
  2078   003296  EF56  F019         	goto	u4051
  2079   00329A  0E91               	movlw	145
  2080   00329C  5C1A               	subwf	reverseStraight@time^0,w,c
  2081   00329E  0E01               	movlw	1
  2082   0032A0  581B               	subwfb	(reverseStraight@time+1)^0,w,c
  2083   0032A2  A0D8               	btfss	status,0,c
  2084   0032A4  EF56  F019         	goto	u4051
  2085   0032A8  EF58  F019         	goto	u4050
  2086   0032AC                     u4051:
  2087   0032AC  EF5C  F019         	goto	l4531
  2088   0032B0                     u4050:
  2089   0032B0  0E03               	movlw	3
  2090   0032B2  6E1D               	movwf	(reverseStraight@delayMs+1)^0,c
  2091   0032B4  0EE8               	movlw	232
  2092   0032B6  6E1C               	movwf	reverseStraight@delayMs^0,c
  2093   0032B8                     l4531:
  2094                           
  2095                           ;dc_motor.c: 370:     fullSpeedAhead(mL, mR);
  2096   0032B8  C018  F013         	movff	reverseStraight@mL,fullSpeedAhead@mL
  2097   0032BC  C019  F014         	movff	reverseStraight@mR,fullSpeedAhead@mR
  2098   0032C0  ECD6  F01C         	call	_fullSpeedAhead	;wreg free
  2099   0032C4                     
  2100                           ;dc_motor.c: 371:     customDelayMs(delayMs);
  2101   0032C4  C01C  F001         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2102   0032C8  C01D  F002         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2103   0032CC  EC24  F020         	call	_customDelayMs	;wreg free
  2104   0032D0                     
  2105                           ;dc_motor.c: 372:     stop(mL, mR);
  2106   0032D0  C018  F013         	movff	reverseStraight@mL,stop@mL
  2107   0032D4  C019  F014         	movff	reverseStraight@mR,stop@mR
  2108   0032D8  EC11  F01C         	call	_stop	;wreg free
  2109   0032DC  0012               	return		;funcret
  2110   0032DE                     __end_of_reverseStraight:
  2111                           	callstack 0
  2112                           
  2113 ;; *************** function _fullSpeedAhead *****************
  2114 ;; Defined at:
  2115 ;;		line 144 in file "dc_motor.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  2118 ;;		 -> motorL(9), 
  2119 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  2120 ;;		 -> motorR(9), 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  power           2   21[COMRAM] int 
  2123 ;; Return value:  Size  Location     Type
  2124 ;;                  1    wreg      void 
  2125 ;; Registers used:
  2126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2127 ;; Tracked objects:
  2128 ;;		On entry : 0/0
  2129 ;;		On exit  : 0/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2132 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2133 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2134 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2135 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2136 ;;Total ram usage:        5 bytes
  2137 ;; Hardware stack levels used: 1
  2138 ;; Hardware stack levels required when called: 2
  2139 ;; This function calls:
  2140 ;;		_setMotorPWM
  2141 ;; This function is called by:
  2142 ;;		_main
  2143 ;;		_reverseStraight
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           	psect	text4
  2148   0039AC                     __ptext4:
  2149                           	callstack 0
  2150   0039AC                     _fullSpeedAhead:
  2151                           	callstack 26
  2152   0039AC                     
  2153                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2154   0039AC  5013               	movf	fullSpeedAhead@mL^0,w,c
  2155   0039AE  6ED9               	movwf	fsr2l,c
  2156   0039B0  6ADA               	clrf	fsr2h,c
  2157   0039B2  0E01               	movlw	1
  2158   0039B4  26D9               	addwf	fsr2l,f,c
  2159   0039B6  0E01               	movlw	1
  2160   0039B8  6EDF               	movwf	indf2,c
  2161                           
  2162                           ;dc_motor.c: 148:     mR->direction = 1;
  2163   0039BA  5014               	movf	fullSpeedAhead@mR^0,w,c
  2164   0039BC  6ED9               	movwf	fsr2l,c
  2165   0039BE  6ADA               	clrf	fsr2h,c
  2166   0039C0  0E01               	movlw	1
  2167   0039C2  26D9               	addwf	fsr2l,f,c
  2168   0039C4  0E01               	movlw	1
  2169   0039C6  6EDF               	movwf	indf2,c
  2170   0039C8                     
  2171                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2172   0039C8  0E00               	movlw	0
  2173   0039CA  6E17               	movwf	(fullSpeedAhead@power+1)^0,c
  2174   0039CC  0E00               	movlw	0
  2175   0039CE  6E16               	movwf	fullSpeedAhead@power^0,c
  2176   0039D0                     l3859:
  2177                           
  2178                           ;dc_motor.c: 151:         mL->power = power;
  2179   0039D0  5013               	movf	fullSpeedAhead@mL^0,w,c
  2180   0039D2  6ED9               	movwf	fsr2l,c
  2181   0039D4  6ADA               	clrf	fsr2h,c
  2182   0039D6  C016  FFDF         	movff	fullSpeedAhead@power,indf2
  2183                           
  2184                           ;dc_motor.c: 152:         mR->power = power;
  2185   0039DA  5014               	movf	fullSpeedAhead@mR^0,w,c
  2186   0039DC  6ED9               	movwf	fsr2l,c
  2187   0039DE  6ADA               	clrf	fsr2h,c
  2188   0039E0  C016  FFDF         	movff	fullSpeedAhead@power,indf2
  2189   0039E4                     
  2190                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2191   0039E4  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2192   0039E8  ECD2  F016         	call	_setMotorPWM	;wreg free
  2193   0039EC                     
  2194                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2195   0039EC  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2196   0039F0  ECD2  F016         	call	_setMotorPWM	;wreg free
  2197   0039F4                     
  2198                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2199   0039F4  0E0B               	movlw	11
  2200   0039F6  6E15               	movwf	??_fullSpeedAhead^0,c
  2201   0039F8  0E62               	movlw	98
  2202   0039FA                     u4817:
  2203   0039FA  2EE8               	decfsz	wreg,f,c
  2204   0039FC  D7FE               	bra	u4817
  2205   0039FE  2E15               	decfsz	??_fullSpeedAhead^0,f,c
  2206   003A00  D7FC               	bra	u4817
  2207   003A02  D000               	nop2	
  2208   003A04                     
  2209                           ;dc_motor.c: 160:     }
  2210   003A04  4A16               	infsnz	fullSpeedAhead@power^0,f,c
  2211   003A06  2A17               	incf	(fullSpeedAhead@power+1)^0,f,c
  2212   003A08  BE17               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2213   003A0A  EF10  F01D         	goto	u3171
  2214   003A0E  5017               	movf	(fullSpeedAhead@power+1)^0,w,c
  2215   003A10  E109               	bnz	u3170
  2216   003A12  0E33               	movlw	51
  2217   003A14  5C16               	subwf	fullSpeedAhead@power^0,w,c
  2218   003A16  A0D8               	btfss	status,0,c
  2219   003A18  EF10  F01D         	goto	u3171
  2220   003A1C  EF12  F01D         	goto	u3170
  2221   003A20                     u3171:
  2222   003A20  EFE8  F01C         	goto	l3859
  2223   003A24                     u3170:
  2224   003A24  0012               	return		;funcret
  2225   003A26                     __end_of_fullSpeedAhead:
  2226                           	callstack 0
  2227                           
  2228 ;; *************** function _customDelayMs *****************
  2229 ;; Defined at:
  2230 ;;		line 354 in file "dc_motor.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  milliseconds    2    0[COMRAM] unsigned int 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  i               2    3[COMRAM] unsigned int 
  2235 ;; Return value:  Size  Location     Type
  2236 ;;                  1    wreg      void 
  2237 ;; Registers used:
  2238 ;;		wreg, status,2, status,0
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2244 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2247 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2248 ;;Total ram usage:        5 bytes
  2249 ;; Hardware stack levels used: 1
  2250 ;; This function calls:
  2251 ;;		Nothing
  2252 ;; This function is called by:
  2253 ;;		_reverseStraight
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           	psect	text5
  2258   004048                     __ptext5:
  2259                           	callstack 0
  2260   004048                     _customDelayMs:
  2261                           	callstack 28
  2262   004048                     
  2263                           ;dc_motor.c: 355:     for (unsigned int i = 0; i < milliseconds; i++) {
  2264   004048  0E00               	movlw	0
  2265   00404A  6E05               	movwf	(customDelayMs@i+1)^0,c
  2266   00404C  0E00               	movlw	0
  2267   00404E  6E04               	movwf	customDelayMs@i^0,c
  2268   004050  EF34  F020         	goto	l486
  2269   004054                     l3921:
  2270                           
  2271                           ;dc_motor.c: 356:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2272   004054  0E15               	movlw	21
  2273   004056  6E03               	movwf	??_customDelayMs^0,c
  2274   004058  0EC6               	movlw	198
  2275   00405A                     u4827:
  2276   00405A  2EE8               	decfsz	wreg,f,c
  2277   00405C  D7FE               	bra	u4827
  2278   00405E  2E03               	decfsz	??_customDelayMs^0,f,c
  2279   004060  D7FC               	bra	u4827
  2280   004062  D000               	nop2	
  2281   004064                     
  2282                           ;dc_motor.c: 357:     }
  2283   004064  4A04               	infsnz	customDelayMs@i^0,f,c
  2284   004066  2A05               	incf	(customDelayMs@i+1)^0,f,c
  2285   004068                     l486:
  2286   004068  5001               	movf	customDelayMs@milliseconds^0,w,c
  2287   00406A  5C04               	subwf	customDelayMs@i^0,w,c
  2288   00406C  5002               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2289   00406E  5805               	subwfb	(customDelayMs@i+1)^0,w,c
  2290   004070  A0D8               	btfss	status,0,c
  2291   004072  EF3D  F020         	goto	u3191
  2292   004076  EF3F  F020         	goto	u3190
  2293   00407A                     u3191:
  2294   00407A  EF2A  F020         	goto	l3921
  2295   00407E                     u3190:
  2296   00407E  0012               	return		;funcret
  2297   004080                     __end_of_customDelayMs:
  2298                           	callstack 0
  2299                           
  2300 ;; *************** function _reading_hue *****************
  2301 ;; Defined at:
  2302 ;;		line 136 in file "color.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;  cCurr           1   71[COMRAM] PTR struct colors
  2305 ;;		 -> colorCurrent(8), 
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;  led_state      50    0        unsigned char [50]
  2308 ;;  hue             2   75[COMRAM] unsigned int 
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  2   71[COMRAM] unsigned int 
  2311 ;; Registers used:
  2312 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2318 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2319 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2320 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2321 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2322 ;;Total ram usage:        6 bytes
  2323 ;; Hardware stack levels used: 1
  2324 ;; Hardware stack levels required when called: 9
  2325 ;; This function calls:
  2326 ;;		_color_read_Blue
  2327 ;;		_color_read_Clear
  2328 ;;		_color_read_Green
  2329 ;;		_color_read_Red
  2330 ;;		_convert_rgb2hue
  2331 ;;		_send2USART
  2332 ;; This function is called by:
  2333 ;;		_main
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           	psect	text6
  2338   003102                     __ptext6:
  2339                           	callstack 0
  2340   003102                     _reading_hue:
  2341                           	callstack 21
  2342   003102                     
  2343                           ;color.c: 136: unsigned int reading_hue(colors *cCurr);color.c: 137: {;color.c: 138:    
      +                           unsigned int hue;;color.c: 140:     char led_state[50];;color.c: 145:     LATGbits.LATG
      +                          0 = 1;
  2344   003102  807F               	bsf	127,0,c	;volatile
  2345                           
  2346                           ;color.c: 146:     LATEbits.LATE7 = 0;
  2347   003104  9E7D               	bcf	125,7,c	;volatile
  2348                           
  2349                           ;color.c: 147:     LATAbits.LATA3 = 0;
  2350   003106  9679               	bcf	121,3,c	;volatile
  2351   003108                     
  2352                           ;color.c: 148:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2353   003108  0E29               	movlw	41
  2354   00310A  6E4B               	movwf	(??_reading_hue+1)^0,c
  2355   00310C  0E96               	movlw	150
  2356   00310E  6E4A               	movwf	??_reading_hue^0,c
  2357   003110  0E7F               	movlw	127
  2358   003112                     u4837:
  2359   003112  2EE8               	decfsz	wreg,f,c
  2360   003114  D7FE               	bra	u4837
  2361   003116  2E4A               	decfsz	??_reading_hue^0,f,c
  2362   003118  D7FC               	bra	u4837
  2363   00311A  2E4B               	decfsz	(??_reading_hue+1)^0,f,c
  2364   00311C  D7FA               	bra	u4837
  2365   00311E  0000               	nop	
  2366   003120                     
  2367                           ;color.c: 149:     (cCurr->red)= color_read_Red();
  2368   003120  ECBD  F01D         	call	_color_read_Red	;wreg free
  2369   003124  5048               	movf	reading_hue@cCurr^0,w,c
  2370   003126  6ED9               	movwf	fsr2l,c
  2371   003128  6ADA               	clrf	fsr2h,c
  2372   00312A  C005  FFDE         	movff	?_color_read_Red,postinc2
  2373   00312E  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  2374   003132                     
  2375                           ;color.c: 154:     LATGbits.LATG0 = 0;
  2376   003132  907F               	bcf	127,0,c	;volatile
  2377   003134                     
  2378                           ;color.c: 155:     LATEbits.LATE7 = 1;
  2379   003134  8E7D               	bsf	125,7,c	;volatile
  2380   003136                     
  2381                           ;color.c: 156:     LATAbits.LATA3 = 0;
  2382   003136  9679               	bcf	121,3,c	;volatile
  2383   003138                     
  2384                           ;color.c: 157:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2385   003138  0E29               	movlw	41
  2386   00313A  6E4B               	movwf	(??_reading_hue+1)^0,c
  2387   00313C  0E96               	movlw	150
  2388   00313E  6E4A               	movwf	??_reading_hue^0,c
  2389   003140  0E7F               	movlw	127
  2390   003142                     u4847:
  2391   003142  2EE8               	decfsz	wreg,f,c
  2392   003144  D7FE               	bra	u4847
  2393   003146  2E4A               	decfsz	??_reading_hue^0,f,c
  2394   003148  D7FC               	bra	u4847
  2395   00314A  2E4B               	decfsz	(??_reading_hue+1)^0,f,c
  2396   00314C  D7FA               	bra	u4847
  2397   00314E  0000               	nop	
  2398                           
  2399                           ;color.c: 158:     (cCurr->green) = color_read_Green();
  2400   003150  ECE5  F01D         	call	_color_read_Green	;wreg free
  2401   003154  5048               	movf	reading_hue@cCurr^0,w,c
  2402   003156  6ED9               	movwf	fsr2l,c
  2403   003158  6ADA               	clrf	fsr2h,c
  2404   00315A  0E02               	movlw	2
  2405   00315C  26D9               	addwf	fsr2l,f,c
  2406   00315E  C005  FFDE         	movff	?_color_read_Green,postinc2
  2407   003162  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  2408   003166                     
  2409                           ;color.c: 164:     LATGbits.LATG0 = 0;
  2410   003166  907F               	bcf	127,0,c	;volatile
  2411   003168                     
  2412                           ;color.c: 165:     LATEbits.LATE7 = 0;
  2413   003168  9E7D               	bcf	125,7,c	;volatile
  2414   00316A                     
  2415                           ;color.c: 166:     LATAbits.LATA3 = 1;
  2416   00316A  8679               	bsf	121,3,c	;volatile
  2417   00316C                     
  2418                           ;color.c: 167:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2419   00316C  0E29               	movlw	41
  2420   00316E  6E4B               	movwf	(??_reading_hue+1)^0,c
  2421   003170  0E96               	movlw	150
  2422   003172  6E4A               	movwf	??_reading_hue^0,c
  2423   003174  0E7F               	movlw	127
  2424   003176                     u4857:
  2425   003176  2EE8               	decfsz	wreg,f,c
  2426   003178  D7FE               	bra	u4857
  2427   00317A  2E4A               	decfsz	??_reading_hue^0,f,c
  2428   00317C  D7FC               	bra	u4857
  2429   00317E  2E4B               	decfsz	(??_reading_hue+1)^0,f,c
  2430   003180  D7FA               	bra	u4857
  2431   003182  0000               	nop	
  2432   003184                     
  2433                           ;color.c: 168:     (cCurr->blue) = color_read_Blue();
  2434   003184  EC35  F01E         	call	_color_read_Blue	;wreg free
  2435   003188  5048               	movf	reading_hue@cCurr^0,w,c
  2436   00318A  6ED9               	movwf	fsr2l,c
  2437   00318C  6ADA               	clrf	fsr2h,c
  2438   00318E  0E04               	movlw	4
  2439   003190  26D9               	addwf	fsr2l,f,c
  2440   003192  C005  FFDE         	movff	?_color_read_Blue,postinc2
  2441   003196  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  2442   00319A                     
  2443                           ;color.c: 173:     LATGbits.LATG0 = 1;
  2444   00319A  807F               	bsf	127,0,c	;volatile
  2445   00319C                     
  2446                           ;color.c: 174:     LATEbits.LATE7 = 1;
  2447   00319C  8E7D               	bsf	125,7,c	;volatile
  2448   00319E                     
  2449                           ;color.c: 175:     LATAbits.LATA3 = 1;
  2450   00319E  8679               	bsf	121,3,c	;volatile
  2451                           
  2452                           ;color.c: 176:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2453   0031A0  0E29               	movlw	41
  2454   0031A2  6E4B               	movwf	(??_reading_hue+1)^0,c
  2455   0031A4  0E96               	movlw	150
  2456   0031A6  6E4A               	movwf	??_reading_hue^0,c
  2457   0031A8  0E7F               	movlw	127
  2458   0031AA                     u4867:
  2459   0031AA  2EE8               	decfsz	wreg,f,c
  2460   0031AC  D7FE               	bra	u4867
  2461   0031AE  2E4A               	decfsz	??_reading_hue^0,f,c
  2462   0031B0  D7FC               	bra	u4867
  2463   0031B2  2E4B               	decfsz	(??_reading_hue+1)^0,f,c
  2464   0031B4  D7FA               	bra	u4867
  2465   0031B6  0000               	nop	
  2466   0031B8                     
  2467                           ;color.c: 177:     (cCurr->clear) = color_read_Clear();
  2468   0031B8  EC0D  F01E         	call	_color_read_Clear	;wreg free
  2469   0031BC  5048               	movf	reading_hue@cCurr^0,w,c
  2470   0031BE  6ED9               	movwf	fsr2l,c
  2471   0031C0  6ADA               	clrf	fsr2h,c
  2472   0031C2  0E06               	movlw	6
  2473   0031C4  26D9               	addwf	fsr2l,f,c
  2474   0031C6  C005  FFDE         	movff	?_color_read_Clear,postinc2
  2475   0031CA  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  2476   0031CE                     
  2477                           ;color.c: 184:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  2478   0031CE  0EF7               	movlw	low _colorCalibration
  2479   0031D0  6E44               	movwf	convert_rgb2hue@cMax^0,c
  2480   0031D2  0EEF               	movlw	low _colorCurrent
  2481   0031D4  6E45               	movwf	convert_rgb2hue@cCurr^0,c
  2482   0031D6  EC5D  F007         	call	_convert_rgb2hue	;wreg free
  2483   0031DA  C044  F04C         	movff	?_convert_rgb2hue,reading_hue@hue
  2484   0031DE  C045  F04D         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  2485   0031E2                     
  2486                           ;color.c: 189:     send2USART(hue);
  2487   0031E2  C04C  F044         	movff	reading_hue@hue,send2USART@hue
  2488   0031E6  C04D  F045         	movff	reading_hue@hue+1,send2USART@hue+1
  2489   0031EA  ECB2  F021         	call	_send2USART	;wreg free
  2490   0031EE                     
  2491                           ;color.c: 191:     return hue;
  2492   0031EE  C04C  F048         	movff	reading_hue@hue,?_reading_hue
  2493   0031F2  C04D  F049         	movff	reading_hue@hue+1,?_reading_hue+1
  2494   0031F6  0012               	return		;funcret
  2495   0031F8                     __end_of_reading_hue:
  2496                           	callstack 0
  2497                           
  2498 ;; *************** function _send2USART *****************
  2499 ;; Defined at:
  2500 ;;		line 146 in file "serial.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  hue             2   67[COMRAM] unsigned int 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2514 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2515 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2517 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;Total ram usage:       52 bytes
  2519 ;; Hardware stack levels used: 1
  2520 ;; Hardware stack levels required when called: 8
  2521 ;; This function calls:
  2522 ;;		_sendStringSerial4
  2523 ;;		_sprintf
  2524 ;; This function is called by:
  2525 ;;		_reading_hue
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           	psect	text7
  2530   004364                     __ptext7:
  2531                           	callstack 0
  2532   004364                     _send2USART:
  2533                           	callstack 21
  2534   004364                     
  2535                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  2536   004364  0E60               	movlw	low send2USART@hue_char
  2537   004366  6E31               	movwf	sprintf@s^0,c
  2538   004368  0EA0               	movlw	low STR_13
  2539   00436A  6E32               	movwf	sprintf@fmt^0,c
  2540   00436C  C044  F033         	movff	send2USART@hue,?_sprintf+2
  2541   004370  C045  F034         	movff	send2USART@hue+1,?_sprintf+3
  2542   004374  EC5A  F020         	call	_sprintf	;wreg free
  2543   004378                     
  2544                           ;serial.c: 158:         sendStringSerial4(hue_char);
  2545   004378  0E60               	movlw	low send2USART@hue_char
  2546   00437A  6E02               	movwf	sendStringSerial4@string^0,c
  2547   00437C  EC24  F021         	call	_sendStringSerial4	;wreg free
  2548   004380  0012               	return		;funcret
  2549   004382                     __end_of_send2USART:
  2550                           	callstack 0
  2551                           
  2552 ;; *************** function _convert_rgb2hue *****************
  2553 ;; Defined at:
  2554 ;;		line 274 in file "color.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  cMax            1   67[COMRAM] PTR struct colors
  2557 ;;		 -> colorCalibration(8), 
  2558 ;;  cCurr           1   68[COMRAM] PTR struct colors
  2559 ;;		 -> colorCurrent(8), 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;  c_char         20    0[BANK0 ] unsigned char [20]
  2562 ;;  b               4   96[BANK0 ] float 
  2563 ;;  g               4   92[BANK0 ] float 
  2564 ;;  r               4   88[BANK0 ] float 
  2565 ;;  hue             4   84[BANK0 ] float 
  2566 ;;  max             4   80[BANK0 ] float 
  2567 ;;  diff            4   76[BANK0 ] float 
  2568 ;;  min             4   72[BANK0 ] float 
  2569 ;;  c               4   52[BANK0 ] float 
  2570 ;;  clearmax        4   48[BANK0 ] float 
  2571 ;;  clearcurrent    4   44[BANK0 ] float 
  2572 ;;  bluemax         4   40[BANK0 ] float 
  2573 ;;  bluecurrent     4   36[BANK0 ] float 
  2574 ;;  greenmax        4   32[BANK0 ] float 
  2575 ;;  greencurrent    4   28[BANK0 ] float 
  2576 ;;  redmax          4   24[BANK0 ] float 
  2577 ;;  redcurrent      4   20[BANK0 ] float 
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  2   67[COMRAM] unsigned int 
  2580 ;; Registers used:
  2581 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2587 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2588 ;;      Locals:         0     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2589 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2590 ;;      Totals:         4     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2591 ;;Total ram usage:      104 bytes
  2592 ;; Hardware stack levels used: 1
  2593 ;; Hardware stack levels required when called: 8
  2594 ;; This function calls:
  2595 ;;		___fladd
  2596 ;;		___fldiv
  2597 ;;		___fleq
  2598 ;;		___flge
  2599 ;;		___flmul
  2600 ;;		___flsub
  2601 ;;		___fltol
  2602 ;;		___xxtofl
  2603 ;;		_sendStringSerial4
  2604 ;;		_sprintf
  2605 ;; This function is called by:
  2606 ;;		_reading_hue
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text8
  2611   000EBA                     __ptext8:
  2612                           	callstack 0
  2613   000EBA                     _convert_rgb2hue:
  2614                           	callstack 21
  2615   000EBA                     
  2616                           ;color.c: 274: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 275: {;color.c: 276:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 277:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  2617   000EBA  0E00               	movlw	0
  2618   000EBC  0100               	movlb	0	; () banked
  2619   000EBE  6FB4               	movwf	convert_rgb2hue@hue& (0+255),b
  2620   000EC0  0E00               	movlw	0
  2621   000EC2  6FB5               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2622   000EC4  0E00               	movlw	0
  2623   000EC6  6FB6               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2624   000EC8  0E00               	movlw	0
  2625   000ECA  6FB7               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2626   000ECC                     
  2627                           ; BSR set to: 0
  2628                           ;color.c: 279:     redcurrent = cCurr->red;
  2629   000ECC  5045               	movf	convert_rgb2hue@cCurr^0,w,c
  2630   000ECE  6ED9               	movwf	fsr2l,c
  2631   000ED0  6ADA               	clrf	fsr2h,c
  2632   000ED2  CFDE F046          	movff	postinc2,??_convert_rgb2hue
  2633   000ED6  CFDD F047          	movff	postdec2,??_convert_rgb2hue+1
  2634   000EDA  C046  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2635   000EDE  C047  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2636   000EE2  6A03               	clrf	(___xxtofl@val+2)^0,c
  2637   000EE4  6A04               	clrf	(___xxtofl@val+3)^0,c
  2638   000EE6  0E00               	movlw	0
  2639   000EE8  EC7A  F014         	call	___xxtofl
  2640   000EEC  C001  F074         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  2641   000EF0  C002  F075         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  2642   000EF4  C003  F076         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  2643   000EF8  C004  F077         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  2644   000EFC                     
  2645                           ;color.c: 280:     redmax = cMax->red;
  2646   000EFC  5044               	movf	convert_rgb2hue@cMax^0,w,c
  2647   000EFE  6ED9               	movwf	fsr2l,c
  2648   000F00  6ADA               	clrf	fsr2h,c
  2649   000F02  CFDE F046          	movff	postinc2,??_convert_rgb2hue
  2650   000F06  CFDD F047          	movff	postdec2,??_convert_rgb2hue+1
  2651   000F0A  C046  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2652   000F0E  C047  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2653   000F12  6A03               	clrf	(___xxtofl@val+2)^0,c
  2654   000F14  6A04               	clrf	(___xxtofl@val+3)^0,c
  2655   000F16  0E00               	movlw	0
  2656   000F18  EC7A  F014         	call	___xxtofl
  2657   000F1C  C001  F078         	movff	?___xxtofl,convert_rgb2hue@redmax
  2658   000F20  C002  F079         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  2659   000F24  C003  F07A         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  2660   000F28  C004  F07B         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  2661   000F2C                     
  2662                           ;color.c: 281:     greencurrent = cCurr->green;
  2663   000F2C  5045               	movf	convert_rgb2hue@cCurr^0,w,c
  2664   000F2E  6ED9               	movwf	fsr2l,c
  2665   000F30  6ADA               	clrf	fsr2h,c
  2666   000F32  0E02               	movlw	2
  2667   000F34  26D9               	addwf	fsr2l,f,c
  2668   000F36  CFDE F046          	movff	postinc2,??_convert_rgb2hue
  2669   000F3A  CFDD F047          	movff	postdec2,??_convert_rgb2hue+1
  2670   000F3E  C046  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2671   000F42  C047  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2672   000F46  6A03               	clrf	(___xxtofl@val+2)^0,c
  2673   000F48  6A04               	clrf	(___xxtofl@val+3)^0,c
  2674   000F4A  0E00               	movlw	0
  2675   000F4C  EC7A  F014         	call	___xxtofl
  2676   000F50  C001  F07C         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  2677   000F54  C002  F07D         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  2678   000F58  C003  F07E         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  2679   000F5C  C004  F07F         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  2680   000F60                     
  2681                           ;color.c: 282:     greenmax = cMax->green;
  2682   000F60  5044               	movf	convert_rgb2hue@cMax^0,w,c
  2683   000F62  6ED9               	movwf	fsr2l,c
  2684   000F64  6ADA               	clrf	fsr2h,c
  2685   000F66  0E02               	movlw	2
  2686   000F68  26D9               	addwf	fsr2l,f,c
  2687   000F6A  CFDE F046          	movff	postinc2,??_convert_rgb2hue
  2688   000F6E  CFDD F047          	movff	postdec2,??_convert_rgb2hue+1
  2689   000F72  C046  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2690   000F76  C047  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2691   000F7A  6A03               	clrf	(___xxtofl@val+2)^0,c
  2692   000F7C  6A04               	clrf	(___xxtofl@val+3)^0,c
  2693   000F7E  0E00               	movlw	0
  2694   000F80  EC7A  F014         	call	___xxtofl
  2695   000F84  C001  F080         	movff	?___xxtofl,convert_rgb2hue@greenmax
  2696   000F88  C002  F081         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  2697   000F8C  C003  F082         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  2698   000F90  C004  F083         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  2699   000F94                     
  2700                           ;color.c: 283:     bluecurrent = cCurr->blue;
  2701   000F94  5045               	movf	convert_rgb2hue@cCurr^0,w,c
  2702   000F96  6ED9               	movwf	fsr2l,c
  2703   000F98  6ADA               	clrf	fsr2h,c
  2704   000F9A  0E04               	movlw	4
  2705   000F9C  26D9               	addwf	fsr2l,f,c
  2706   000F9E  CFDE F046          	movff	postinc2,??_convert_rgb2hue
  2707   000FA2  CFDD F047          	movff	postdec2,??_convert_rgb2hue+1
  2708   000FA6  C046  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2709   000FAA  C047  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2710   000FAE  6A03               	clrf	(___xxtofl@val+2)^0,c
  2711   000FB0  6A04               	clrf	(___xxtofl@val+3)^0,c
  2712   000FB2  0E00               	movlw	0
  2713   000FB4  EC7A  F014         	call	___xxtofl
  2714   000FB8  C001  F084         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  2715   000FBC  C002  F085         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  2716   000FC0  C003  F086         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  2717   000FC4  C004  F087         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  2718   000FC8                     
  2719                           ;color.c: 284:     bluemax = cMax->blue;
  2720   000FC8  5044               	movf	convert_rgb2hue@cMax^0,w,c
  2721   000FCA  6ED9               	movwf	fsr2l,c
  2722   000FCC  6ADA               	clrf	fsr2h,c
  2723   000FCE  0E04               	movlw	4
  2724   000FD0  26D9               	addwf	fsr2l,f,c
  2725   000FD2  CFDE F046          	movff	postinc2,??_convert_rgb2hue
  2726   000FD6  CFDD F047          	movff	postdec2,??_convert_rgb2hue+1
  2727   000FDA  C046  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2728   000FDE  C047  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2729   000FE2  6A03               	clrf	(___xxtofl@val+2)^0,c
  2730   000FE4  6A04               	clrf	(___xxtofl@val+3)^0,c
  2731   000FE6  0E00               	movlw	0
  2732   000FE8  EC7A  F014         	call	___xxtofl
  2733   000FEC  C001  F088         	movff	?___xxtofl,convert_rgb2hue@bluemax
  2734   000FF0  C002  F089         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  2735   000FF4  C003  F08A         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  2736   000FF8  C004  F08B         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  2737   000FFC                     
  2738                           ;color.c: 285:     clearcurrent = cCurr->clear;
  2739   000FFC  5045               	movf	convert_rgb2hue@cCurr^0,w,c
  2740   000FFE  6ED9               	movwf	fsr2l,c
  2741   001000  6ADA               	clrf	fsr2h,c
  2742   001002  0E06               	movlw	6
  2743   001004  26D9               	addwf	fsr2l,f,c
  2744   001006  CFDE F046          	movff	postinc2,??_convert_rgb2hue
  2745   00100A  CFDD F047          	movff	postdec2,??_convert_rgb2hue+1
  2746   00100E  C046  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2747   001012  C047  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2748   001016  6A03               	clrf	(___xxtofl@val+2)^0,c
  2749   001018  6A04               	clrf	(___xxtofl@val+3)^0,c
  2750   00101A  0E00               	movlw	0
  2751   00101C  EC7A  F014         	call	___xxtofl
  2752   001020  C001  F08C         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  2753   001024  C002  F08D         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  2754   001028  C003  F08E         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  2755   00102C  C004  F08F         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  2756   001030                     
  2757                           ;color.c: 286:     clearmax = cMax->clear;
  2758   001030  5044               	movf	convert_rgb2hue@cMax^0,w,c
  2759   001032  6ED9               	movwf	fsr2l,c
  2760   001034  6ADA               	clrf	fsr2h,c
  2761   001036  0E06               	movlw	6
  2762   001038  26D9               	addwf	fsr2l,f,c
  2763   00103A  CFDE F046          	movff	postinc2,??_convert_rgb2hue
  2764   00103E  CFDD F047          	movff	postdec2,??_convert_rgb2hue+1
  2765   001042  C046  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  2766   001046  C047  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2767   00104A  6A03               	clrf	(___xxtofl@val+2)^0,c
  2768   00104C  6A04               	clrf	(___xxtofl@val+3)^0,c
  2769   00104E  0E00               	movlw	0
  2770   001050  EC7A  F014         	call	___xxtofl
  2771   001054  C001  F090         	movff	?___xxtofl,convert_rgb2hue@clearmax
  2772   001058  C002  F091         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  2773   00105C  C003  F092         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  2774   001060  C004  F093         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  2775   001064                     
  2776                           ;color.c: 288:     c = clearcurrent/clearmax;
  2777   001064  C08C  F019         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  2778   001068  C08D  F01A         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  2779   00106C  C08E  F01B         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  2780   001070  C08F  F01C         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  2781   001074  C090  F01D         	movff	convert_rgb2hue@clearmax,___fldiv@a
  2782   001078  C091  F01E         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  2783   00107C  C092  F01F         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  2784   001080  C093  F020         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  2785   001084  ECB5  F00F         	call	___fldiv	;wreg free
  2786   001088  C019  F094         	movff	?___fldiv,convert_rgb2hue@c
  2787   00108C  C01A  F095         	movff	?___fldiv+1,convert_rgb2hue@c+1
  2788   001090  C01B  F096         	movff	?___fldiv+2,convert_rgb2hue@c+2
  2789   001094  C01C  F097         	movff	?___fldiv+3,convert_rgb2hue@c+3
  2790   001098                     
  2791                           ;color.c: 289:     char c_char[20];;color.c: 290:     sprintf(c_char, "clear=%03d", c);
  2792   001098  0E60               	movlw	low convert_rgb2hue@c_char
  2793   00109A  6E31               	movwf	sprintf@s^0,c
  2794   00109C  0EAC               	movlw	low STR_11
  2795   00109E  6E32               	movwf	sprintf@fmt^0,c
  2796   0010A0  C094  F033         	movff	convert_rgb2hue@c,?_sprintf+2
  2797   0010A4  C095  F034         	movff	convert_rgb2hue@c+1,?_sprintf+3
  2798   0010A8  C096  F035         	movff	convert_rgb2hue@c+2,?_sprintf+4
  2799   0010AC  C097  F036         	movff	convert_rgb2hue@c+3,?_sprintf+5
  2800   0010B0  EC5A  F020         	call	_sprintf	;wreg free
  2801   0010B4                     
  2802                           ;color.c: 291:     sendStringSerial4(c_char);
  2803   0010B4  0E60               	movlw	low convert_rgb2hue@c_char
  2804   0010B6  6E02               	movwf	sendStringSerial4@string^0,c
  2805   0010B8  EC24  F021         	call	_sendStringSerial4	;wreg free
  2806   0010BC                     
  2807                           ;color.c: 295:     r = redcurrent/redmax;
  2808   0010BC  C074  F019         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  2809   0010C0  C075  F01A         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  2810   0010C4  C076  F01B         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  2811   0010C8  C077  F01C         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  2812   0010CC  C078  F01D         	movff	convert_rgb2hue@redmax,___fldiv@a
  2813   0010D0  C079  F01E         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  2814   0010D4  C07A  F01F         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  2815   0010D8  C07B  F020         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  2816   0010DC  ECB5  F00F         	call	___fldiv	;wreg free
  2817   0010E0  C019  F0B8         	movff	?___fldiv,convert_rgb2hue@r
  2818   0010E4  C01A  F0B9         	movff	?___fldiv+1,convert_rgb2hue@r+1
  2819   0010E8  C01B  F0BA         	movff	?___fldiv+2,convert_rgb2hue@r+2
  2820   0010EC  C01C  F0BB         	movff	?___fldiv+3,convert_rgb2hue@r+3
  2821   0010F0                     
  2822                           ;color.c: 296:     g = greencurrent/greenmax;
  2823   0010F0  C07C  F019         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  2824   0010F4  C07D  F01A         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  2825   0010F8  C07E  F01B         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  2826   0010FC  C07F  F01C         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  2827   001100  C080  F01D         	movff	convert_rgb2hue@greenmax,___fldiv@a
  2828   001104  C081  F01E         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  2829   001108  C082  F01F         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  2830   00110C  C083  F020         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  2831   001110  ECB5  F00F         	call	___fldiv	;wreg free
  2832   001114  C019  F0BC         	movff	?___fldiv,convert_rgb2hue@g
  2833   001118  C01A  F0BD         	movff	?___fldiv+1,convert_rgb2hue@g+1
  2834   00111C  C01B  F0BE         	movff	?___fldiv+2,convert_rgb2hue@g+2
  2835   001120  C01C  F0BF         	movff	?___fldiv+3,convert_rgb2hue@g+3
  2836   001124                     
  2837                           ;color.c: 297:     b = bluecurrent/bluemax;
  2838   001124  C084  F019         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  2839   001128  C085  F01A         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  2840   00112C  C086  F01B         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  2841   001130  C087  F01C         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  2842   001134  C088  F01D         	movff	convert_rgb2hue@bluemax,___fldiv@a
  2843   001138  C089  F01E         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  2844   00113C  C08A  F01F         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  2845   001140  C08B  F020         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  2846   001144  ECB5  F00F         	call	___fldiv	;wreg free
  2847   001148  C019  F0C0         	movff	?___fldiv,convert_rgb2hue@b
  2848   00114C  C01A  F0C1         	movff	?___fldiv+1,convert_rgb2hue@b+1
  2849   001150  C01B  F0C2         	movff	?___fldiv+2,convert_rgb2hue@b+2
  2850   001154  C01C  F0C3         	movff	?___fldiv+3,convert_rgb2hue@b+3
  2851   001158                     
  2852                           ;color.c: 299:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  2853   001158  C0B8  F001         	movff	convert_rgb2hue@r,___flge@ff1
  2854   00115C  C0B9  F002         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2855   001160  C0BA  F003         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2856   001164  C0BB  F004         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2857   001168  C0BC  F005         	movff	convert_rgb2hue@g,___flge@ff2
  2858   00116C  C0BD  F006         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2859   001170  C0BE  F007         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2860   001174  C0BF  F008         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2861   001178  ECFF  F017         	call	___flge	;wreg free
  2862   00117C  A0D8               	btfss	status,0,c
  2863   00117E  EFC3  F008         	goto	u4581
  2864   001182  EFC5  F008         	goto	u4580
  2865   001186                     u4581:
  2866   001186  EFFA  F008         	goto	l5147
  2867   00118A                     u4580:
  2868   00118A  C0BC  F001         	movff	convert_rgb2hue@g,___flge@ff1
  2869   00118E  C0BD  F002         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2870   001192  C0BE  F003         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2871   001196  C0BF  F004         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2872   00119A  C0C0  F005         	movff	convert_rgb2hue@b,___flge@ff2
  2873   00119E  C0C1  F006         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2874   0011A2  C0C2  F007         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2875   0011A6  C0C3  F008         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2876   0011AA  ECFF  F017         	call	___flge	;wreg free
  2877   0011AE  A0D8               	btfss	status,0,c
  2878   0011B0  EFDC  F008         	goto	u4591
  2879   0011B4  EFDE  F008         	goto	u4590
  2880   0011B8                     u4591:
  2881   0011B8  EFE8  F008         	goto	l119
  2882   0011BC                     u4590:
  2883   0011BC  C0C0  F098         	movff	convert_rgb2hue@b,_convert_rgb2hue$429
  2884   0011C0  C0C1  F099         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$429+1
  2885   0011C4  C0C2  F09A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$429+2
  2886   0011C8  C0C3  F09B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$429+3
  2887   0011CC  EFF0  F008         	goto	l121
  2888   0011D0                     l119:
  2889   0011D0  C0BC  F098         	movff	convert_rgb2hue@g,_convert_rgb2hue$429
  2890   0011D4  C0BD  F099         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$429+1
  2891   0011D8  C0BE  F09A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$429+2
  2892   0011DC  C0BF  F09B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$429+3
  2893   0011E0                     l121:
  2894   0011E0  C098  F0A8         	movff	_convert_rgb2hue$429,convert_rgb2hue@min
  2895   0011E4  C099  F0A9         	movff	_convert_rgb2hue$429+1,convert_rgb2hue@min+1
  2896   0011E8  C09A  F0AA         	movff	_convert_rgb2hue$429+2,convert_rgb2hue@min+2
  2897   0011EC  C09B  F0AB         	movff	_convert_rgb2hue$429+3,convert_rgb2hue@min+3
  2898   0011F0  EF2D  F009         	goto	l5151
  2899   0011F4                     l5147:
  2900   0011F4  C0B8  F001         	movff	convert_rgb2hue@r,___flge@ff1
  2901   0011F8  C0B9  F002         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2902   0011FC  C0BA  F003         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2903   001200  C0BB  F004         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2904   001204  C0C0  F005         	movff	convert_rgb2hue@b,___flge@ff2
  2905   001208  C0C1  F006         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2906   00120C  C0C2  F007         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2907   001210  C0C3  F008         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2908   001214  ECFF  F017         	call	___flge	;wreg free
  2909   001218  A0D8               	btfss	status,0,c
  2910   00121A  EF11  F009         	goto	u4601
  2911   00121E  EF13  F009         	goto	u4600
  2912   001222                     u4601:
  2913   001222  EF1D  F009         	goto	l123
  2914   001226                     u4600:
  2915   001226  C0C0  F09C         	movff	convert_rgb2hue@b,_convert_rgb2hue$430
  2916   00122A  C0C1  F09D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$430+1
  2917   00122E  C0C2  F09E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$430+2
  2918   001232  C0C3  F09F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$430+3
  2919   001236  EF25  F009         	goto	l125
  2920   00123A                     l123:
  2921   00123A  C0B8  F09C         	movff	convert_rgb2hue@r,_convert_rgb2hue$430
  2922   00123E  C0B9  F09D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$430+1
  2923   001242  C0BA  F09E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$430+2
  2924   001246  C0BB  F09F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$430+3
  2925   00124A                     l125:
  2926   00124A  C09C  F0A8         	movff	_convert_rgb2hue$430,convert_rgb2hue@min
  2927   00124E  C09D  F0A9         	movff	_convert_rgb2hue$430+1,convert_rgb2hue@min+1
  2928   001252  C09E  F0AA         	movff	_convert_rgb2hue$430+2,convert_rgb2hue@min+2
  2929   001256  C09F  F0AB         	movff	_convert_rgb2hue$430+3,convert_rgb2hue@min+3
  2930   00125A                     l5151:
  2931                           
  2932                           ;color.c: 300:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  2933   00125A  C0BC  F001         	movff	convert_rgb2hue@g,___flge@ff1
  2934   00125E  C0BD  F002         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2935   001262  C0BE  F003         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2936   001266  C0BF  F004         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2937   00126A  C0B8  F005         	movff	convert_rgb2hue@r,___flge@ff2
  2938   00126E  C0B9  F006         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2939   001272  C0BA  F007         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2940   001276  C0BB  F008         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2941   00127A  ECFF  F017         	call	___flge	;wreg free
  2942   00127E  A0D8               	btfss	status,0,c
  2943   001280  EF44  F009         	goto	u4611
  2944   001284  EF46  F009         	goto	u4610
  2945   001288                     u4611:
  2946   001288  EF7B  F009         	goto	l5157
  2947   00128C                     u4610:
  2948   00128C  C0C0  F001         	movff	convert_rgb2hue@b,___flge@ff1
  2949   001290  C0C1  F002         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2950   001294  C0C2  F003         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2951   001298  C0C3  F004         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2952   00129C  C0BC  F005         	movff	convert_rgb2hue@g,___flge@ff2
  2953   0012A0  C0BD  F006         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2954   0012A4  C0BE  F007         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2955   0012A8  C0BF  F008         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2956   0012AC  ECFF  F017         	call	___flge	;wreg free
  2957   0012B0  A0D8               	btfss	status,0,c
  2958   0012B2  EF5D  F009         	goto	u4621
  2959   0012B6  EF5F  F009         	goto	u4620
  2960   0012BA                     u4621:
  2961   0012BA  EF69  F009         	goto	l131
  2962   0012BE                     u4620:
  2963   0012BE  C0C0  F0A0         	movff	convert_rgb2hue@b,_convert_rgb2hue$431
  2964   0012C2  C0C1  F0A1         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$431+1
  2965   0012C6  C0C2  F0A2         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$431+2
  2966   0012CA  C0C3  F0A3         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$431+3
  2967   0012CE  EF71  F009         	goto	l133
  2968   0012D2                     l131:
  2969   0012D2  C0BC  F0A0         	movff	convert_rgb2hue@g,_convert_rgb2hue$431
  2970   0012D6  C0BD  F0A1         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$431+1
  2971   0012DA  C0BE  F0A2         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$431+2
  2972   0012DE  C0BF  F0A3         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$431+3
  2973   0012E2                     l133:
  2974   0012E2  C0A0  F0B0         	movff	_convert_rgb2hue$431,convert_rgb2hue@max
  2975   0012E6  C0A1  F0B1         	movff	_convert_rgb2hue$431+1,convert_rgb2hue@max+1
  2976   0012EA  C0A2  F0B2         	movff	_convert_rgb2hue$431+2,convert_rgb2hue@max+2
  2977   0012EE  C0A3  F0B3         	movff	_convert_rgb2hue$431+3,convert_rgb2hue@max+3
  2978   0012F2  EFAE  F009         	goto	l5161
  2979   0012F6                     l5157:
  2980   0012F6  C0C0  F001         	movff	convert_rgb2hue@b,___flge@ff1
  2981   0012FA  C0C1  F002         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2982   0012FE  C0C2  F003         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2983   001302  C0C3  F004         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2984   001306  C0B8  F005         	movff	convert_rgb2hue@r,___flge@ff2
  2985   00130A  C0B9  F006         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2986   00130E  C0BA  F007         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2987   001312  C0BB  F008         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2988   001316  ECFF  F017         	call	___flge	;wreg free
  2989   00131A  A0D8               	btfss	status,0,c
  2990   00131C  EF92  F009         	goto	u4631
  2991   001320  EF94  F009         	goto	u4630
  2992   001324                     u4631:
  2993   001324  EF9E  F009         	goto	l135
  2994   001328                     u4630:
  2995   001328  C0C0  F0A4         	movff	convert_rgb2hue@b,_convert_rgb2hue$432
  2996   00132C  C0C1  F0A5         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$432+1
  2997   001330  C0C2  F0A6         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$432+2
  2998   001334  C0C3  F0A7         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$432+3
  2999   001338  EFA6  F009         	goto	l137
  3000   00133C                     l135:
  3001   00133C  C0B8  F0A4         	movff	convert_rgb2hue@r,_convert_rgb2hue$432
  3002   001340  C0B9  F0A5         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$432+1
  3003   001344  C0BA  F0A6         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$432+2
  3004   001348  C0BB  F0A7         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$432+3
  3005   00134C                     l137:
  3006   00134C  C0A4  F0B0         	movff	_convert_rgb2hue$432,convert_rgb2hue@max
  3007   001350  C0A5  F0B1         	movff	_convert_rgb2hue$432+1,convert_rgb2hue@max+1
  3008   001354  C0A6  F0B2         	movff	_convert_rgb2hue$432+2,convert_rgb2hue@max+2
  3009   001358  C0A7  F0B3         	movff	_convert_rgb2hue$432+3,convert_rgb2hue@max+3
  3010   00135C                     l5161:
  3011                           
  3012                           ;color.c: 301:     diff = max - min;
  3013   00135C  C0B0  F011         	movff	convert_rgb2hue@max,___flsub@b
  3014   001360  C0B1  F012         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3015   001364  C0B2  F013         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3016   001368  C0B3  F014         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3017   00136C  C0A8  F015         	movff	convert_rgb2hue@min,___flsub@a
  3018   001370  C0A9  F016         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3019   001374  C0AA  F017         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3020   001378  C0AB  F018         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3021   00137C  EC9F  F01F         	call	___flsub	;wreg free
  3022   001380  C011  F0AC         	movff	?___flsub,convert_rgb2hue@diff
  3023   001384  C012  F0AD         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3024   001388  C013  F0AE         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3025   00138C  C014  F0AF         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3026                           
  3027                           ;color.c: 302:     if (max == min) {
  3028   001390  C0B0  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  3029   001394  C0B1  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3030   001398  C0B2  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3031   00139C  C0B3  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3032   0013A0  C0A8  F005         	movff	convert_rgb2hue@min,___fleq@ff2
  3033   0013A4  C0A9  F006         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3034   0013A8  C0AA  F007         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3035   0013AC  C0AB  F008         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3036   0013B0  ECD6  F01A         	call	___fleq	;wreg free
  3037   0013B4  A0D8               	btfss	status,0,c
  3038   0013B6  EFDF  F009         	goto	u4641
  3039   0013BA  EFE1  F009         	goto	u4640
  3040   0013BE                     u4641:
  3041   0013BE  EFEC  F009         	goto	l5165
  3042   0013C2                     u4640:
  3043   0013C2                     
  3044                           ;color.c: 303:         hue = 0;
  3045   0013C2  0E00               	movlw	0
  3046   0013C4  0100               	movlb	0	; () banked
  3047   0013C6  6FB4               	movwf	convert_rgb2hue@hue& (0+255),b
  3048   0013C8  0E00               	movlw	0
  3049   0013CA  6FB5               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3050   0013CC  0E00               	movlw	0
  3051   0013CE  6FB6               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3052   0013D0  0E00               	movlw	0
  3053   0013D2  6FB7               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3054                           
  3055                           ;color.c: 304:     } else if (max == r){
  3056   0013D4  EFF5  F00A         	goto	l5177
  3057   0013D8                     l5165:
  3058   0013D8  C0B0  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  3059   0013DC  C0B1  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3060   0013E0  C0B2  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3061   0013E4  C0B3  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3062   0013E8  C0B8  F005         	movff	convert_rgb2hue@r,___fleq@ff2
  3063   0013EC  C0B9  F006         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3064   0013F0  C0BA  F007         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3065   0013F4  C0BB  F008         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3066   0013F8  ECD6  F01A         	call	___fleq	;wreg free
  3067   0013FC  A0D8               	btfss	status,0,c
  3068   0013FE  EF03  F00A         	goto	u4651
  3069   001402  EF05  F00A         	goto	u4650
  3070   001406                     u4651:
  3071   001406  EF33  F00A         	goto	l5169
  3072   00140A                     u4650:
  3073   00140A                     
  3074                           ;color.c: 305:         hue = (b - g) / diff;
  3075   00140A  C0BC  F015         	movff	convert_rgb2hue@g,___flsub@a
  3076   00140E  C0BD  F016         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3077   001412  C0BE  F017         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3078   001416  C0BF  F018         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3079   00141A  C0C0  F011         	movff	convert_rgb2hue@b,___flsub@b
  3080   00141E  C0C1  F012         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3081   001422  C0C2  F013         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3082   001426  C0C3  F014         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3083   00142A  EC9F  F01F         	call	___flsub	;wreg free
  3084   00142E  C011  F019         	movff	?___flsub,___fldiv@b
  3085   001432  C012  F01A         	movff	?___flsub+1,___fldiv@b+1
  3086   001436  C013  F01B         	movff	?___flsub+2,___fldiv@b+2
  3087   00143A  C014  F01C         	movff	?___flsub+3,___fldiv@b+3
  3088   00143E  C0AC  F01D         	movff	convert_rgb2hue@diff,___fldiv@a
  3089   001442  C0AD  F01E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3090   001446  C0AE  F01F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3091   00144A  C0AF  F020         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3092   00144E  ECB5  F00F         	call	___fldiv	;wreg free
  3093   001452  C019  F0B4         	movff	?___fldiv,convert_rgb2hue@hue
  3094   001456  C01A  F0B5         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3095   00145A  C01B  F0B6         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3096   00145E  C01C  F0B7         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3097                           
  3098                           ;color.c: 306:     } else if (max == g){
  3099   001462  EFF5  F00A         	goto	l5177
  3100   001466                     l5169:
  3101   001466  C0B0  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  3102   00146A  C0B1  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3103   00146E  C0B2  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3104   001472  C0B3  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3105   001476  C0BC  F005         	movff	convert_rgb2hue@g,___fleq@ff2
  3106   00147A  C0BD  F006         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3107   00147E  C0BE  F007         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3108   001482  C0BF  F008         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3109   001486  ECD6  F01A         	call	___fleq	;wreg free
  3110   00148A  A0D8               	btfss	status,0,c
  3111   00148C  EF4A  F00A         	goto	u4661
  3112   001490  EF4C  F00A         	goto	u4660
  3113   001494                     u4661:
  3114   001494  EF94  F00A         	goto	l5173
  3115   001498                     u4660:
  3116   001498                     
  3117                           ;color.c: 307:         hue = (b - r) / diff;
  3118   001498  C0B8  F015         	movff	convert_rgb2hue@r,___flsub@a
  3119   00149C  C0B9  F016         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3120   0014A0  C0BA  F017         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3121   0014A4  C0BB  F018         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3122   0014A8  C0C0  F011         	movff	convert_rgb2hue@b,___flsub@b
  3123   0014AC  C0C1  F012         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3124   0014B0  C0C2  F013         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3125   0014B4  C0C3  F014         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3126   0014B8  EC9F  F01F         	call	___flsub	;wreg free
  3127   0014BC  C011  F019         	movff	?___flsub,___fldiv@b
  3128   0014C0  C012  F01A         	movff	?___flsub+1,___fldiv@b+1
  3129   0014C4  C013  F01B         	movff	?___flsub+2,___fldiv@b+2
  3130   0014C8  C014  F01C         	movff	?___flsub+3,___fldiv@b+3
  3131   0014CC  C0AC  F01D         	movff	convert_rgb2hue@diff,___fldiv@a
  3132   0014D0  C0AD  F01E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3133   0014D4  C0AE  F01F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3134   0014D8  C0AF  F020         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3135   0014DC  ECB5  F00F         	call	___fldiv	;wreg free
  3136   0014E0  C019  F0B4         	movff	?___fldiv,convert_rgb2hue@hue
  3137   0014E4  C01A  F0B5         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3138   0014E8  C01B  F0B6         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3139   0014EC  C01C  F0B7         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3140                           
  3141                           ;color.c: 308:         hue = hue + 2;
  3142   0014F0  C0B4  F001         	movff	convert_rgb2hue@hue,___fladd@b
  3143   0014F4  C0B5  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3144   0014F8  C0B6  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3145   0014FC  C0B7  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3146   001500  0E00               	movlw	0
  3147   001502  6E05               	movwf	___fladd@a^0,c
  3148   001504  0E00               	movlw	0
  3149   001506  6E06               	movwf	(___fladd@a+1)^0,c
  3150   001508  0E00               	movlw	0
  3151   00150A  6E07               	movwf	(___fladd@a+2)^0,c
  3152   00150C  0E40               	movlw	64
  3153   00150E  6E08               	movwf	(___fladd@a+3)^0,c
  3154   001510  EC40  F00B         	call	___fladd	;wreg free
  3155   001514  C001  F0B4         	movff	?___fladd,convert_rgb2hue@hue
  3156   001518  C002  F0B5         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3157   00151C  C003  F0B6         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3158   001520  C004  F0B7         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3159                           
  3160                           ;color.c: 309:     } else if (max == b){
  3161   001524  EFF5  F00A         	goto	l5177
  3162   001528                     l5173:
  3163   001528  C0B0  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  3164   00152C  C0B1  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3165   001530  C0B2  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3166   001534  C0B3  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3167   001538  C0C0  F005         	movff	convert_rgb2hue@b,___fleq@ff2
  3168   00153C  C0C1  F006         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3169   001540  C0C2  F007         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3170   001544  C0C3  F008         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3171   001548  ECD6  F01A         	call	___fleq	;wreg free
  3172   00154C  A0D8               	btfss	status,0,c
  3173   00154E  EFAB  F00A         	goto	u4671
  3174   001552  EFAD  F00A         	goto	u4670
  3175   001556                     u4671:
  3176   001556  EFF5  F00A         	goto	l141
  3177   00155A                     u4670:
  3178   00155A                     
  3179                           ;color.c: 310:         hue = (r - g) / diff;
  3180   00155A  C0BC  F015         	movff	convert_rgb2hue@g,___flsub@a
  3181   00155E  C0BD  F016         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3182   001562  C0BE  F017         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3183   001566  C0BF  F018         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3184   00156A  C0B8  F011         	movff	convert_rgb2hue@r,___flsub@b
  3185   00156E  C0B9  F012         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3186   001572  C0BA  F013         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3187   001576  C0BB  F014         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3188   00157A  EC9F  F01F         	call	___flsub	;wreg free
  3189   00157E  C011  F019         	movff	?___flsub,___fldiv@b
  3190   001582  C012  F01A         	movff	?___flsub+1,___fldiv@b+1
  3191   001586  C013  F01B         	movff	?___flsub+2,___fldiv@b+2
  3192   00158A  C014  F01C         	movff	?___flsub+3,___fldiv@b+3
  3193   00158E  C0AC  F01D         	movff	convert_rgb2hue@diff,___fldiv@a
  3194   001592  C0AD  F01E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3195   001596  C0AE  F01F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3196   00159A  C0AF  F020         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3197   00159E  ECB5  F00F         	call	___fldiv	;wreg free
  3198   0015A2  C019  F0B4         	movff	?___fldiv,convert_rgb2hue@hue
  3199   0015A6  C01A  F0B5         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3200   0015AA  C01B  F0B6         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3201   0015AE  C01C  F0B7         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3202                           
  3203                           ;color.c: 311:         hue = hue + 4;
  3204   0015B2  C0B4  F001         	movff	convert_rgb2hue@hue,___fladd@b
  3205   0015B6  C0B5  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3206   0015BA  C0B6  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3207   0015BE  C0B7  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3208   0015C2  0E00               	movlw	0
  3209   0015C4  6E05               	movwf	___fladd@a^0,c
  3210   0015C6  0E00               	movlw	0
  3211   0015C8  6E06               	movwf	(___fladd@a+1)^0,c
  3212   0015CA  0E80               	movlw	128
  3213   0015CC  6E07               	movwf	(___fladd@a+2)^0,c
  3214   0015CE  0E40               	movlw	64
  3215   0015D0  6E08               	movwf	(___fladd@a+3)^0,c
  3216   0015D2  EC40  F00B         	call	___fladd	;wreg free
  3217   0015D6  C001  F0B4         	movff	?___fladd,convert_rgb2hue@hue
  3218   0015DA  C002  F0B5         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3219   0015DE  C003  F0B6         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3220   0015E2  C004  F0B7         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3221   0015E6  EFF5  F00A         	goto	l5177
  3222   0015EA                     l141:
  3223   0015EA                     l5177:
  3224                           
  3225                           ;color.c: 314:     hue = hue * 60;
  3226   0015EA  C0B4  F001         	movff	convert_rgb2hue@hue,___flmul@b
  3227   0015EE  C0B5  F002         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3228   0015F2  C0B6  F003         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3229   0015F6  C0B7  F004         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3230   0015FA  0E00               	movlw	0
  3231   0015FC  6E05               	movwf	___flmul@a^0,c
  3232   0015FE  0E00               	movlw	0
  3233   001600  6E06               	movwf	(___flmul@a+1)^0,c
  3234   001602  0E70               	movlw	112
  3235   001604  6E07               	movwf	(___flmul@a+2)^0,c
  3236   001606  0E42               	movlw	66
  3237   001608  6E08               	movwf	(___flmul@a+3)^0,c
  3238   00160A  ECA0  F00D         	call	___flmul	;wreg free
  3239   00160E  C001  F0B4         	movff	?___flmul,convert_rgb2hue@hue
  3240   001612  C002  F0B5         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3241   001616  C003  F0B6         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3242   00161A  C004  F0B7         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3243   00161E                     
  3244                           ;color.c: 315:     if (hue < 0) {
  3245   00161E  0100               	movlb	0	; () banked
  3246   001620  BFB7               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3247   001622  EF17  F00B         	goto	u4680
  3248   001626  EF15  F00B         	goto	u4681
  3249   00162A                     u4681:
  3250   00162A  EF31  F00B         	goto	l145
  3251   00162E                     u4680:
  3252   00162E                     
  3253                           ; BSR set to: 0
  3254                           ;color.c: 316:         hue = hue + 360;
  3255   00162E  C0B4  F001         	movff	convert_rgb2hue@hue,___fladd@b
  3256   001632  C0B5  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3257   001636  C0B6  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3258   00163A  C0B7  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3259   00163E  0E00               	movlw	0
  3260   001640  6E05               	movwf	___fladd@a^0,c
  3261   001642  0E00               	movlw	0
  3262   001644  6E06               	movwf	(___fladd@a+1)^0,c
  3263   001646  0EB4               	movlw	180
  3264   001648  6E07               	movwf	(___fladd@a+2)^0,c
  3265   00164A  0E43               	movlw	67
  3266   00164C  6E08               	movwf	(___fladd@a+3)^0,c
  3267   00164E  EC40  F00B         	call	___fladd	;wreg free
  3268   001652  C001  F0B4         	movff	?___fladd,convert_rgb2hue@hue
  3269   001656  C002  F0B5         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3270   00165A  C003  F0B6         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3271   00165E  C004  F0B7         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3272   001662                     l145:
  3273                           
  3274                           ;color.c: 319:     return (unsigned int)hue;
  3275   001662  C0B4  F001         	movff	convert_rgb2hue@hue,___fltol@f1
  3276   001666  C0B5  F002         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3277   00166A  C0B6  F003         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3278   00166E  C0B7  F004         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3279   001672  EC7C  F017         	call	___fltol	;wreg free
  3280   001676  C001  F044         	movff	?___fltol,?_convert_rgb2hue
  3281   00167A  C002  F045         	movff	?___fltol+1,?_convert_rgb2hue+1
  3282   00167E  0012               	return		;funcret
  3283   001680                     __end_of_convert_rgb2hue:
  3284                           	callstack 0
  3285                           
  3286 ;; *************** function ___xxtofl *****************
  3287 ;; Defined at:
  3288 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  sign            1    wreg     unsigned char 
  3291 ;;  val             4    0[COMRAM] long 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  sign            1    8[COMRAM] unsigned char 
  3294 ;;  arg             4   10[COMRAM] unsigned long 
  3295 ;;  exp             1    9[COMRAM] unsigned char 
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  4    0[COMRAM] unsigned char 
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, status,0
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3305 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3306 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3307 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3308 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3309 ;;Total ram usage:       14 bytes
  3310 ;; Hardware stack levels used: 1
  3311 ;; This function calls:
  3312 ;;		Nothing
  3313 ;; This function is called by:
  3314 ;;		_convert_rgb2hue
  3315 ;;		_main
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text9
  3320   0028F4                     __ptext9:
  3321                           	callstack 0
  3322   0028F4                     ___xxtofl:
  3323                           	callstack 28
  3324                           
  3325                           ;incstack = 0
  3326                           ;___xxtofl@sign stored from wreg
  3327   0028F4  6E09               	movwf	___xxtofl@sign^0,c
  3328   0028F6  5009               	movf	___xxtofl@sign^0,w,c
  3329   0028F8  B4D8               	btfsc	status,2,c
  3330   0028FA  EF81  F014         	goto	u3771
  3331   0028FE  EF83  F014         	goto	u3770
  3332   002902                     u3771:
  3333   002902  EFA5  F014         	goto	l1296
  3334   002906                     u3770:
  3335   002906  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  3336   002908  EF8A  F014         	goto	u3780
  3337   00290C  EF88  F014         	goto	u3781
  3338   002910                     u3781:
  3339   002910  EFA5  F014         	goto	l1296
  3340   002914                     u3780:
  3341   002914  C001  F005         	movff	___xxtofl@val,??___xxtofl
  3342   002918  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  3343   00291C  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  3344   002920  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  3345   002924  1E05               	comf	??___xxtofl^0,f,c
  3346   002926  1E06               	comf	(??___xxtofl+1)^0,f,c
  3347   002928  1E07               	comf	(??___xxtofl+2)^0,f,c
  3348   00292A  1E08               	comf	(??___xxtofl+3)^0,f,c
  3349   00292C  2A05               	incf	??___xxtofl^0,f,c
  3350   00292E  0E00               	movlw	0
  3351   002930  2206               	addwfc	(??___xxtofl+1)^0,f,c
  3352   002932  2207               	addwfc	(??___xxtofl+2)^0,f,c
  3353   002934  2208               	addwfc	(??___xxtofl+3)^0,f,c
  3354   002936  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  3355   00293A  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  3356   00293E  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  3357   002942  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  3358   002946  EFAD  F014         	goto	l4287
  3359   00294A                     l1296:
  3360   00294A  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  3361   00294E  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3362   002952  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3363   002956  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3364   00295A                     l4287:
  3365   00295A  5001               	movf	___xxtofl@val^0,w,c
  3366   00295C  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  3367   00295E  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  3368   002960  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  3369   002962  A4D8               	btfss	status,2,c
  3370   002964  EFB6  F014         	goto	u3791
  3371   002968  EFB8  F014         	goto	u3790
  3372   00296C                     u3791:
  3373   00296C  EFC2  F014         	goto	l4293
  3374   002970                     u3790:
  3375   002970  0E00               	movlw	0
  3376   002972  6E01               	movwf	?___xxtofl^0,c
  3377   002974  0E00               	movlw	0
  3378   002976  6E02               	movwf	(?___xxtofl+1)^0,c
  3379   002978  0E00               	movlw	0
  3380   00297A  6E03               	movwf	(?___xxtofl+2)^0,c
  3381   00297C  0E00               	movlw	0
  3382   00297E  6E04               	movwf	(?___xxtofl+3)^0,c
  3383   002980  EF53  F015         	goto	l1299
  3384   002984                     l4293:
  3385   002984  0E96               	movlw	150
  3386   002986  6E0A               	movwf	___xxtofl@exp^0,c
  3387   002988  EFCC  F014         	goto	l4297
  3388   00298C                     l4295:
  3389   00298C  2A0A               	incf	___xxtofl@exp^0,f,c
  3390   00298E  90D8               	bcf	status,0,c
  3391   002990  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  3392   002992  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  3393   002994  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  3394   002996  320B               	rrcf	___xxtofl@arg^0,f,c
  3395   002998                     l4297:
  3396   002998  0E00               	movlw	0
  3397   00299A  140B               	andwf	___xxtofl@arg^0,w,c
  3398   00299C  6E05               	movwf	??___xxtofl^0,c
  3399   00299E  0E00               	movlw	0
  3400   0029A0  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  3401   0029A2  6E06               	movwf	(??___xxtofl+1)^0,c
  3402   0029A4  0E00               	movlw	0
  3403   0029A6  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  3404   0029A8  6E07               	movwf	(??___xxtofl+2)^0,c
  3405   0029AA  0EFE               	movlw	254
  3406   0029AC  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  3407   0029AE  6E08               	movwf	(??___xxtofl+3)^0,c
  3408   0029B0  5005               	movf	??___xxtofl^0,w,c
  3409   0029B2  1006               	iorwf	(??___xxtofl+1)^0,w,c
  3410   0029B4  1007               	iorwf	(??___xxtofl+2)^0,w,c
  3411   0029B6  1008               	iorwf	(??___xxtofl+3)^0,w,c
  3412   0029B8  A4D8               	btfss	status,2,c
  3413   0029BA  EFE1  F014         	goto	u3801
  3414   0029BE  EFE3  F014         	goto	u3800
  3415   0029C2                     u3801:
  3416   0029C2  EFC6  F014         	goto	l4295
  3417   0029C6                     u3800:
  3418   0029C6  EFF1  F014         	goto	l1303
  3419   0029CA                     l4299:
  3420   0029CA  2A0A               	incf	___xxtofl@exp^0,f,c
  3421   0029CC  0E01               	movlw	1
  3422   0029CE  260B               	addwf	___xxtofl@arg^0,f,c
  3423   0029D0  0E00               	movlw	0
  3424   0029D2  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  3425   0029D4  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  3426   0029D6  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  3427   0029D8  90D8               	bcf	status,0,c
  3428   0029DA  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  3429   0029DC  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  3430   0029DE  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  3431   0029E0  320B               	rrcf	___xxtofl@arg^0,f,c
  3432   0029E2                     l1303:
  3433   0029E2  0E00               	movlw	0
  3434   0029E4  140B               	andwf	___xxtofl@arg^0,w,c
  3435   0029E6  6E05               	movwf	??___xxtofl^0,c
  3436   0029E8  0E00               	movlw	0
  3437   0029EA  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  3438   0029EC  6E06               	movwf	(??___xxtofl+1)^0,c
  3439   0029EE  0E00               	movlw	0
  3440   0029F0  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  3441   0029F2  6E07               	movwf	(??___xxtofl+2)^0,c
  3442   0029F4  0EFF               	movlw	255
  3443   0029F6  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  3444   0029F8  6E08               	movwf	(??___xxtofl+3)^0,c
  3445   0029FA  5005               	movf	??___xxtofl^0,w,c
  3446   0029FC  1006               	iorwf	(??___xxtofl+1)^0,w,c
  3447   0029FE  1007               	iorwf	(??___xxtofl+2)^0,w,c
  3448   002A00  1008               	iorwf	(??___xxtofl+3)^0,w,c
  3449   002A02  A4D8               	btfss	status,2,c
  3450   002A04  EF06  F015         	goto	u3811
  3451   002A08  EF08  F015         	goto	u3810
  3452   002A0C                     u3811:
  3453   002A0C  EFE5  F014         	goto	l4299
  3454   002A10                     u3810:
  3455   002A10  EF10  F015         	goto	l4307
  3456   002A14                     l4305:
  3457   002A14  060A               	decf	___xxtofl@exp^0,f,c
  3458   002A16  90D8               	bcf	status,0,c
  3459   002A18  360B               	rlcf	___xxtofl@arg^0,f,c
  3460   002A1A  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  3461   002A1C  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  3462   002A1E  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  3463   002A20                     l4307:
  3464   002A20  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  3465   002A22  EF15  F015         	goto	u3821
  3466   002A26  EF17  F015         	goto	u3820
  3467   002A2A                     u3821:
  3468   002A2A  EF1F  F015         	goto	l1310
  3469   002A2E                     u3820:
  3470   002A2E  0E02               	movlw	2
  3471   002A30  600A               	cpfslt	___xxtofl@exp^0,c
  3472   002A32  EF1D  F015         	goto	u3831
  3473   002A36  EF1F  F015         	goto	u3830
  3474   002A3A                     u3831:
  3475   002A3A  EF0A  F015         	goto	l4305
  3476   002A3E                     u3830:
  3477   002A3E                     l1310:
  3478   002A3E  B00A               	btfsc	___xxtofl@exp^0,0,c
  3479   002A40  EF24  F015         	goto	u3841
  3480   002A44  EF26  F015         	goto	u3840
  3481   002A48                     u3841:
  3482   002A48  EF27  F015         	goto	l4313
  3483   002A4C                     u3840:
  3484   002A4C  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  3485   002A4E                     l4313:
  3486   002A4E  90D8               	bcf	status,0,c
  3487   002A50  320A               	rrcf	___xxtofl@exp^0,f,c
  3488   002A52  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  3489   002A56  6A06               	clrf	(??___xxtofl+1)^0,c
  3490   002A58  6A07               	clrf	(??___xxtofl+2)^0,c
  3491   002A5A  6A08               	clrf	(??___xxtofl+3)^0,c
  3492   002A5C  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  3493   002A60  6A07               	clrf	(??___xxtofl+2)^0,c
  3494   002A62  6A06               	clrf	(??___xxtofl+1)^0,c
  3495   002A64  6A05               	clrf	??___xxtofl^0,c
  3496   002A66  5005               	movf	??___xxtofl^0,w,c
  3497   002A68  120B               	iorwf	___xxtofl@arg^0,f,c
  3498   002A6A  5006               	movf	(??___xxtofl+1)^0,w,c
  3499   002A6C  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  3500   002A6E  5007               	movf	(??___xxtofl+2)^0,w,c
  3501   002A70  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  3502   002A72  5008               	movf	(??___xxtofl+3)^0,w,c
  3503   002A74  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  3504   002A76  5009               	movf	___xxtofl@sign^0,w,c
  3505   002A78  B4D8               	btfsc	status,2,c
  3506   002A7A  EF41  F015         	goto	u3851
  3507   002A7E  EF43  F015         	goto	u3850
  3508   002A82                     u3851:
  3509   002A82  EF4B  F015         	goto	l4323
  3510   002A86                     u3850:
  3511   002A86  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  3512   002A88  EF4A  F015         	goto	u3860
  3513   002A8C  EF48  F015         	goto	u3861
  3514   002A90                     u3861:
  3515   002A90  EF4B  F015         	goto	l4323
  3516   002A94                     u3860:
  3517   002A94  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  3518   002A96                     l4323:
  3519   002A96  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  3520   002A9A  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  3521   002A9E  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  3522   002AA2  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  3523   002AA6                     l1299:
  3524   002AA6  0012               	return		;funcret
  3525   002AA8                     __end_of___xxtofl:
  3526                           	callstack 0
  3527                           
  3528 ;; *************** function ___fltol *****************
  3529 ;; Defined at:
  3530 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;  f1              4    0[COMRAM] unsigned char 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  exp1            1    9[COMRAM] unsigned char 
  3535 ;;  sign1           1    8[COMRAM] unsigned char 
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  4    0[COMRAM] long 
  3538 ;; Registers used:
  3539 ;;		wreg, status,2, status,0
  3540 ;; Tracked objects:
  3541 ;;		On entry : 0/0
  3542 ;;		On exit  : 0/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3546 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3547 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3548 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3549 ;;Total ram usage:       10 bytes
  3550 ;; Hardware stack levels used: 1
  3551 ;; This function calls:
  3552 ;;		Nothing
  3553 ;; This function is called by:
  3554 ;;		_convert_rgb2hue
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text10
  3559   002EF8                     __ptext10:
  3560                           	callstack 0
  3561   002EF8                     ___fltol:
  3562                           	callstack 28
  3563   002EF8  3403               	rlcf	(___fltol@f1+2)^0,w,c
  3564   002EFA  3404               	rlcf	(___fltol@f1+3)^0,w,c
  3565   002EFC  6E0A               	movwf	___fltol@exp1^0,c
  3566   002EFE  500A               	movf	___fltol@exp1^0,w,c
  3567   002F00  A4D8               	btfss	status,2,c
  3568   002F02  EF85  F017         	goto	u3701
  3569   002F06  EF87  F017         	goto	u3700
  3570   002F0A                     u3701:
  3571   002F0A  EF91  F017         	goto	l4243
  3572   002F0E                     u3700:
  3573   002F0E                     l4239:
  3574   002F0E  0E00               	movlw	0
  3575   002F10  6E01               	movwf	?___fltol^0,c
  3576   002F12  0E00               	movlw	0
  3577   002F14  6E02               	movwf	(?___fltol+1)^0,c
  3578   002F16  0E00               	movlw	0
  3579   002F18  6E03               	movwf	(?___fltol+2)^0,c
  3580   002F1A  0E00               	movlw	0
  3581   002F1C  6E04               	movwf	(?___fltol+3)^0,c
  3582   002F1E  EFFE  F017         	goto	l938
  3583   002F22                     l4243:
  3584   002F22  C001  F005         	movff	___fltol@f1,??___fltol
  3585   002F26  C002  F006         	movff	___fltol@f1+1,??___fltol+1
  3586   002F2A  C003  F007         	movff	___fltol@f1+2,??___fltol+2
  3587   002F2E  C004  F008         	movff	___fltol@f1+3,??___fltol+3
  3588   002F32  0E20               	movlw	32
  3589   002F34  EFA1  F017         	goto	u3710
  3590   002F38                     u3715:
  3591   002F38  90D8               	bcf	status,0,c
  3592   002F3A  3208               	rrcf	(??___fltol+3)^0,f,c
  3593   002F3C  3207               	rrcf	(??___fltol+2)^0,f,c
  3594   002F3E  3206               	rrcf	(??___fltol+1)^0,f,c
  3595   002F40  3205               	rrcf	??___fltol^0,f,c
  3596   002F42                     u3710:
  3597   002F42  2EE8               	decfsz	wreg,f,c
  3598   002F44  EF9C  F017         	goto	u3715
  3599   002F48  5005               	movf	??___fltol^0,w,c
  3600   002F4A  6E09               	movwf	___fltol@sign1^0,c
  3601   002F4C  8E03               	bsf	(___fltol@f1+2)^0,7,c
  3602   002F4E  0EFF               	movlw	255
  3603   002F50  1601               	andwf	___fltol@f1^0,f,c
  3604   002F52  0EFF               	movlw	255
  3605   002F54  1602               	andwf	(___fltol@f1+1)^0,f,c
  3606   002F56  0EFF               	movlw	255
  3607   002F58  1603               	andwf	(___fltol@f1+2)^0,f,c
  3608   002F5A  0E00               	movlw	0
  3609   002F5C  1604               	andwf	(___fltol@f1+3)^0,f,c
  3610   002F5E  0E96               	movlw	150
  3611   002F60  5E0A               	subwf	___fltol@exp1^0,f,c
  3612   002F62  BE0A               	btfsc	___fltol@exp1^0,7,c
  3613   002F64  EFB8  F017         	goto	u3720
  3614   002F68  EFB6  F017         	goto	u3721
  3615   002F6C                     u3721:
  3616   002F6C  EFCE  F017         	goto	l4263
  3617   002F70                     u3720:
  3618   002F70  500A               	movf	___fltol@exp1^0,w,c
  3619   002F72  0A80               	xorlw	128
  3620   002F74  0F97               	addlw	151
  3621   002F76  B0D8               	btfsc	status,0,c
  3622   002F78  EFC0  F017         	goto	u3731
  3623   002F7C  EFC2  F017         	goto	u3730
  3624   002F80                     u3731:
  3625   002F80  EFC4  F017         	goto	l4259
  3626   002F84                     u3730:
  3627   002F84  EF87  F017         	goto	l4239
  3628   002F88                     l4259:
  3629   002F88  90D8               	bcf	status,0,c
  3630   002F8A  3204               	rrcf	(___fltol@f1+3)^0,f,c
  3631   002F8C  3203               	rrcf	(___fltol@f1+2)^0,f,c
  3632   002F8E  3202               	rrcf	(___fltol@f1+1)^0,f,c
  3633   002F90  3201               	rrcf	___fltol@f1^0,f,c
  3634   002F92  3E0A               	incfsz	___fltol@exp1^0,f,c
  3635   002F94  EFC4  F017         	goto	l4259
  3636   002F98  EFE6  F017         	goto	l4273
  3637   002F9C                     l4263:
  3638   002F9C  0E1F               	movlw	31
  3639   002F9E  640A               	cpfsgt	___fltol@exp1^0,c
  3640   002FA0  EFD4  F017         	goto	u3741
  3641   002FA4  EFD6  F017         	goto	u3740
  3642   002FA8                     u3741:
  3643   002FA8  EFDE  F017         	goto	l4271
  3644   002FAC                     u3740:
  3645   002FAC  EF87  F017         	goto	l4239
  3646   002FB0                     l4269:
  3647   002FB0  90D8               	bcf	status,0,c
  3648   002FB2  3601               	rlcf	___fltol@f1^0,f,c
  3649   002FB4  3602               	rlcf	(___fltol@f1+1)^0,f,c
  3650   002FB6  3603               	rlcf	(___fltol@f1+2)^0,f,c
  3651   002FB8  3604               	rlcf	(___fltol@f1+3)^0,f,c
  3652   002FBA  060A               	decf	___fltol@exp1^0,f,c
  3653   002FBC                     l4271:
  3654   002FBC  500A               	movf	___fltol@exp1^0,w,c
  3655   002FBE  A4D8               	btfss	status,2,c
  3656   002FC0  EFE4  F017         	goto	u3751
  3657   002FC4  EFE6  F017         	goto	u3750
  3658   002FC8                     u3751:
  3659   002FC8  EFD8  F017         	goto	l4269
  3660   002FCC                     u3750:
  3661   002FCC                     l4273:
  3662   002FCC  5009               	movf	___fltol@sign1^0,w,c
  3663   002FCE  B4D8               	btfsc	status,2,c
  3664   002FD0  EFEC  F017         	goto	u3761
  3665   002FD4  EFEE  F017         	goto	u3760
  3666   002FD8                     u3761:
  3667   002FD8  EFF6  F017         	goto	l4277
  3668   002FDC                     u3760:
  3669   002FDC  1E04               	comf	(___fltol@f1+3)^0,f,c
  3670   002FDE  1E03               	comf	(___fltol@f1+2)^0,f,c
  3671   002FE0  1E02               	comf	(___fltol@f1+1)^0,f,c
  3672   002FE2  6C01               	negf	___fltol@f1^0,c
  3673   002FE4  0E00               	movlw	0
  3674   002FE6  2202               	addwfc	(___fltol@f1+1)^0,f,c
  3675   002FE8  2203               	addwfc	(___fltol@f1+2)^0,f,c
  3676   002FEA  2204               	addwfc	(___fltol@f1+3)^0,f,c
  3677   002FEC                     l4277:
  3678   002FEC  C001  F001         	movff	___fltol@f1,?___fltol
  3679   002FF0  C002  F002         	movff	___fltol@f1+1,?___fltol+1
  3680   002FF4  C003  F003         	movff	___fltol@f1+2,?___fltol+2
  3681   002FF8  C004  F004         	movff	___fltol@f1+3,?___fltol+3
  3682   002FFC                     l938:
  3683   002FFC  0012               	return		;funcret
  3684   002FFE                     __end_of___fltol:
  3685                           	callstack 0
  3686                           
  3687 ;; *************** function ___flsub *****************
  3688 ;; Defined at:
  3689 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;  b               4   16[COMRAM] long 
  3692 ;;  a               4   20[COMRAM] long 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;		None
  3695 ;; Return value:  Size  Location     Type
  3696 ;;                  4   16[COMRAM] long 
  3697 ;; Registers used:
  3698 ;;		wreg, status,2, status,0, cstack
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/0
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3704 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3707 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3708 ;;Total ram usage:        8 bytes
  3709 ;; Hardware stack levels used: 1
  3710 ;; Hardware stack levels required when called: 1
  3711 ;; This function calls:
  3712 ;;		___fladd
  3713 ;; This function is called by:
  3714 ;;		_convert_rgb2hue
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text11
  3719   003F3E                     __ptext11:
  3720                           	callstack 0
  3721   003F3E                     ___flsub:
  3722                           	callstack 27
  3723   003F3E  0E00               	movlw	0
  3724   003F40  1A15               	xorwf	___flsub@a^0,f,c
  3725   003F42  0E00               	movlw	0
  3726   003F44  1A16               	xorwf	(___flsub@a+1)^0,f,c
  3727   003F46  0E00               	movlw	0
  3728   003F48  1A17               	xorwf	(___flsub@a+2)^0,f,c
  3729   003F4A  0E80               	movlw	128
  3730   003F4C  1A18               	xorwf	(___flsub@a+3)^0,f,c
  3731   003F4E  C011  F001         	movff	___flsub@b,___fladd@b
  3732   003F52  C012  F002         	movff	___flsub@b+1,___fladd@b+1
  3733   003F56  C013  F003         	movff	___flsub@b+2,___fladd@b+2
  3734   003F5A  C014  F004         	movff	___flsub@b+3,___fladd@b+3
  3735   003F5E  C015  F005         	movff	___flsub@a,___fladd@a
  3736   003F62  C016  F006         	movff	___flsub@a+1,___fladd@a+1
  3737   003F66  C017  F007         	movff	___flsub@a+2,___fladd@a+2
  3738   003F6A  C018  F008         	movff	___flsub@a+3,___fladd@a+3
  3739   003F6E  EC40  F00B         	call	___fladd	;wreg free
  3740   003F72  C001  F011         	movff	?___fladd,?___flsub
  3741   003F76  C002  F012         	movff	?___fladd+1,?___flsub+1
  3742   003F7A  C003  F013         	movff	?___fladd+2,?___flsub+2
  3743   003F7E  C004  F014         	movff	?___fladd+3,?___flsub+3
  3744   003F82  0012               	return		;funcret
  3745   003F84                     __end_of___flsub:
  3746                           	callstack 0
  3747                           
  3748 ;; *************** function ___fladd *****************
  3749 ;; Defined at:
  3750 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  b               4    0[COMRAM] long 
  3753 ;;  a               4    4[COMRAM] long 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  grs             1   15[COMRAM] unsigned char 
  3756 ;;  bexp            1   14[COMRAM] unsigned char 
  3757 ;;  aexp            1   13[COMRAM] unsigned char 
  3758 ;;  signs           1   12[COMRAM] unsigned char 
  3759 ;; Return value:  Size  Location     Type
  3760 ;;                  4    0[COMRAM] unsigned char 
  3761 ;; Registers used:
  3762 ;;		wreg, status,2, status,0
  3763 ;; Tracked objects:
  3764 ;;		On entry : 0/0
  3765 ;;		On exit  : 0/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3768 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3769 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3770 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3771 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3772 ;;Total ram usage:       16 bytes
  3773 ;; Hardware stack levels used: 1
  3774 ;; This function calls:
  3775 ;;		Nothing
  3776 ;; This function is called by:
  3777 ;;		_convert_rgb2hue
  3778 ;;		___flsub
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           	psect	text12
  3783   001680                     __ptext12:
  3784                           	callstack 0
  3785   001680                     ___fladd:
  3786                           	callstack 27
  3787   001680  5004               	movf	(___fladd@b+3)^0,w,c
  3788   001682  0B80               	andlw	128
  3789   001684  6E0D               	movwf	___fladd@signs^0,c
  3790   001686  5004               	movf	(___fladd@b+3)^0,w,c
  3791   001688  2404               	addwf	(___fladd@b+3)^0,w,c
  3792   00168A  6E0F               	movwf	___fladd@bexp^0,c
  3793   00168C  AE03               	btfss	(___fladd@b+2)^0,7,c
  3794   00168E  EF4B  F00B         	goto	u2741
  3795   001692  EF4D  F00B         	goto	u2740
  3796   001696                     u2741:
  3797   001696  EF4E  F00B         	goto	l3593
  3798   00169A                     u2740:
  3799   00169A  800F               	bsf	___fladd@bexp^0,0,c
  3800   00169C                     l3593:
  3801   00169C  500F               	movf	___fladd@bexp^0,w,c
  3802   00169E  B4D8               	btfsc	status,2,c
  3803   0016A0  EF54  F00B         	goto	u2751
  3804   0016A4  EF56  F00B         	goto	u2750
  3805   0016A8                     u2751:
  3806   0016A8  EF6B  F00B         	goto	l3603
  3807   0016AC                     u2750:
  3808   0016AC  280F               	incf	___fladd@bexp^0,w,c
  3809   0016AE  A4D8               	btfss	status,2,c
  3810   0016B0  EF5C  F00B         	goto	u2761
  3811   0016B4  EF5E  F00B         	goto	u2760
  3812   0016B8                     u2761:
  3813   0016B8  EF66  F00B         	goto	l3599
  3814   0016BC                     u2760:
  3815   0016BC  0E00               	movlw	0
  3816   0016BE  6E01               	movwf	___fladd@b^0,c
  3817   0016C0  0E00               	movlw	0
  3818   0016C2  6E02               	movwf	(___fladd@b+1)^0,c
  3819   0016C4  0E00               	movlw	0
  3820   0016C6  6E03               	movwf	(___fladd@b+2)^0,c
  3821   0016C8  0E00               	movlw	0
  3822   0016CA  6E04               	movwf	(___fladd@b+3)^0,c
  3823   0016CC                     l3599:
  3824   0016CC  8E03               	bsf	(___fladd@b+2)^0,7,c
  3825   0016CE  0E00               	movlw	0
  3826   0016D0  6E04               	movwf	(___fladd@b+3)^0,c
  3827   0016D2  EF73  F00B         	goto	l3605
  3828   0016D6                     l3603:
  3829   0016D6  0E00               	movlw	0
  3830   0016D8  6E01               	movwf	___fladd@b^0,c
  3831   0016DA  0E00               	movlw	0
  3832   0016DC  6E02               	movwf	(___fladd@b+1)^0,c
  3833   0016DE  0E00               	movlw	0
  3834   0016E0  6E03               	movwf	(___fladd@b+2)^0,c
  3835   0016E2  0E00               	movlw	0
  3836   0016E4  6E04               	movwf	(___fladd@b+3)^0,c
  3837   0016E6                     l3605:
  3838   0016E6  5008               	movf	(___fladd@a+3)^0,w,c
  3839   0016E8  0B80               	andlw	128
  3840   0016EA  6E0E               	movwf	___fladd@aexp^0,c
  3841   0016EC  500D               	movf	___fladd@signs^0,w,c
  3842   0016EE  180E               	xorwf	___fladd@aexp^0,w,c
  3843   0016F0  B4D8               	btfsc	status,2,c
  3844   0016F2  EF7D  F00B         	goto	u2771
  3845   0016F6  EF7F  F00B         	goto	u2770
  3846   0016FA                     u2771:
  3847   0016FA  EF80  F00B         	goto	l3611
  3848   0016FE                     u2770:
  3849   0016FE  8C0D               	bsf	___fladd@signs^0,6,c
  3850   001700                     l3611:
  3851   001700  5008               	movf	(___fladd@a+3)^0,w,c
  3852   001702  2408               	addwf	(___fladd@a+3)^0,w,c
  3853   001704  6E0E               	movwf	___fladd@aexp^0,c
  3854   001706  AE07               	btfss	(___fladd@a+2)^0,7,c
  3855   001708  EF88  F00B         	goto	u2781
  3856   00170C  EF8A  F00B         	goto	u2780
  3857   001710                     u2781:
  3858   001710  EF8B  F00B         	goto	l3617
  3859   001714                     u2780:
  3860   001714  800E               	bsf	___fladd@aexp^0,0,c
  3861   001716                     l3617:
  3862   001716  500E               	movf	___fladd@aexp^0,w,c
  3863   001718  B4D8               	btfsc	status,2,c
  3864   00171A  EF91  F00B         	goto	u2791
  3865   00171E  EF93  F00B         	goto	u2790
  3866   001722                     u2791:
  3867   001722  EFA8  F00B         	goto	l3627
  3868   001726                     u2790:
  3869   001726  280E               	incf	___fladd@aexp^0,w,c
  3870   001728  A4D8               	btfss	status,2,c
  3871   00172A  EF99  F00B         	goto	u2801
  3872   00172E  EF9B  F00B         	goto	u2800
  3873   001732                     u2801:
  3874   001732  EFA3  F00B         	goto	l3623
  3875   001736                     u2800:
  3876   001736  0E00               	movlw	0
  3877   001738  6E05               	movwf	___fladd@a^0,c
  3878   00173A  0E00               	movlw	0
  3879   00173C  6E06               	movwf	(___fladd@a+1)^0,c
  3880   00173E  0E00               	movlw	0
  3881   001740  6E07               	movwf	(___fladd@a+2)^0,c
  3882   001742  0E00               	movlw	0
  3883   001744  6E08               	movwf	(___fladd@a+3)^0,c
  3884   001746                     l3623:
  3885   001746  8E07               	bsf	(___fladd@a+2)^0,7,c
  3886   001748  0E00               	movlw	0
  3887   00174A  6E08               	movwf	(___fladd@a+3)^0,c
  3888   00174C  EFB0  F00B         	goto	l3629
  3889   001750                     l3627:
  3890   001750  0E00               	movlw	0
  3891   001752  6E05               	movwf	___fladd@a^0,c
  3892   001754  0E00               	movlw	0
  3893   001756  6E06               	movwf	(___fladd@a+1)^0,c
  3894   001758  0E00               	movlw	0
  3895   00175A  6E07               	movwf	(___fladd@a+2)^0,c
  3896   00175C  0E00               	movlw	0
  3897   00175E  6E08               	movwf	(___fladd@a+3)^0,c
  3898   001760                     l3629:
  3899   001760  500F               	movf	___fladd@bexp^0,w,c
  3900   001762  5C0E               	subwf	___fladd@aexp^0,w,c
  3901   001764  B0D8               	btfsc	status,0,c
  3902   001766  EFB7  F00B         	goto	u2811
  3903   00176A  EFB9  F00B         	goto	u2810
  3904   00176E                     u2811:
  3905   00176E  EFE0  F00B         	goto	l3665
  3906   001772                     u2810:
  3907   001772  AC0D               	btfss	___fladd@signs^0,6,c
  3908   001774  EFBE  F00B         	goto	u2821
  3909   001778  EFC0  F00B         	goto	u2820
  3910   00177C                     u2821:
  3911   00177C  EFC2  F00B         	goto	l3635
  3912   001780                     u2820:
  3913   001780  0E80               	movlw	128
  3914   001782  1A0D               	xorwf	___fladd@signs^0,f,c
  3915   001784                     l3635:
  3916   001784  C00F  F010         	movff	___fladd@bexp,___fladd@grs
  3917   001788  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  3918   00178C  C010  F00E         	movff	___fladd@grs,___fladd@aexp
  3919   001790  C001  F010         	movff	___fladd@b,___fladd@grs
  3920   001794  C005  F001         	movff	___fladd@a,___fladd@b
  3921   001798  C010  F005         	movff	___fladd@grs,___fladd@a
  3922   00179C  C002  F010         	movff	___fladd@b+1,___fladd@grs
  3923   0017A0  C006  F002         	movff	___fladd@a+1,___fladd@b+1
  3924   0017A4  C010  F006         	movff	___fladd@grs,___fladd@a+1
  3925   0017A8  C003  F010         	movff	___fladd@b+2,___fladd@grs
  3926   0017AC  C007  F003         	movff	___fladd@a+2,___fladd@b+2
  3927   0017B0  C010  F007         	movff	___fladd@grs,___fladd@a+2
  3928   0017B4  C004  F010         	movff	___fladd@b+3,___fladd@grs
  3929   0017B8  C008  F004         	movff	___fladd@a+3,___fladd@b+3
  3930   0017BC  C010  F008         	movff	___fladd@grs,___fladd@a+3
  3931   0017C0                     l3665:
  3932   0017C0  0E00               	movlw	0
  3933   0017C2  6E10               	movwf	___fladd@grs^0,c
  3934   0017C4  500F               	movf	___fladd@bexp^0,w,c
  3935   0017C6  C00E  F009         	movff	___fladd@aexp,??___fladd
  3936   0017CA  6A0A               	clrf	(??___fladd+1)^0,c
  3937   0017CC  5E09               	subwf	??___fladd^0,f,c
  3938   0017CE  0E00               	movlw	0
  3939   0017D0  5A0A               	subwfb	(??___fladd+1)^0,f,c
  3940   0017D2  BE0A               	btfsc	(??___fladd+1)^0,7,c
  3941   0017D4  EFF5  F00B         	goto	u2831
  3942   0017D8  500A               	movf	(??___fladd+1)^0,w,c
  3943   0017DA  E109               	bnz	u2830
  3944   0017DC  0E1A               	movlw	26
  3945   0017DE  5C09               	subwf	??___fladd^0,w,c
  3946   0017E0  A0D8               	btfss	status,0,c
  3947   0017E2  EFF5  F00B         	goto	u2831
  3948   0017E6  EFF7  F00B         	goto	u2830
  3949   0017EA                     u2831:
  3950   0017EA  EF2E  F00C         	goto	l1170
  3951   0017EE                     u2830:
  3952   0017EE  5001               	movf	___fladd@b^0,w,c
  3953   0017F0  1002               	iorwf	(___fladd@b+1)^0,w,c
  3954   0017F2  1003               	iorwf	(___fladd@b+2)^0,w,c
  3955   0017F4  1004               	iorwf	(___fladd@b+3)^0,w,c
  3956   0017F6  A4D8               	btfss	status,2,c
  3957   0017F8  EF00  F00C         	goto	u2841
  3958   0017FC  EF03  F00C         	goto	u2840
  3959   001800                     u2841:
  3960   001800  0E01               	movlw	1
  3961   001802  EF04  F00C         	goto	u2850
  3962   001806                     u2840:
  3963   001806  0E00               	movlw	0
  3964   001808                     u2850:
  3965   001808  6E10               	movwf	___fladd@grs^0,c
  3966   00180A  0E00               	movlw	0
  3967   00180C  6E01               	movwf	___fladd@b^0,c
  3968   00180E  0E00               	movlw	0
  3969   001810  6E02               	movwf	(___fladd@b+1)^0,c
  3970   001812  0E00               	movlw	0
  3971   001814  6E03               	movwf	(___fladd@b+2)^0,c
  3972   001816  0E00               	movlw	0
  3973   001818  6E04               	movwf	(___fladd@b+3)^0,c
  3974   00181A  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  3975   00181E  EF37  F00C         	goto	l1169
  3976   001822                     l1171:
  3977   001822  A010               	btfss	___fladd@grs^0,0,c
  3978   001824  EF16  F00C         	goto	u2861
  3979   001828  EF18  F00C         	goto	u2860
  3980   00182C                     u2861:
  3981   00182C  EF1E  F00C         	goto	l3677
  3982   001830                     u2860:
  3983   001830  90D8               	bcf	status,0,c
  3984   001832  3010               	rrcf	___fladd@grs^0,w,c
  3985   001834  0901               	iorlw	1
  3986   001836  6E10               	movwf	___fladd@grs^0,c
  3987   001838  EF20  F00C         	goto	l3679
  3988   00183C                     l3677:
  3989   00183C  90D8               	bcf	status,0,c
  3990   00183E  3210               	rrcf	___fladd@grs^0,f,c
  3991   001840                     l3679:
  3992   001840  A001               	btfss	___fladd@b^0,0,c
  3993   001842  EF25  F00C         	goto	u2871
  3994   001846  EF27  F00C         	goto	u2870
  3995   00184A                     u2871:
  3996   00184A  EF28  F00C         	goto	l3683
  3997   00184E                     u2870:
  3998   00184E  8E10               	bsf	___fladd@grs^0,7,c
  3999   001850                     l3683:
  4000   001850  3404               	rlcf	(___fladd@b+3)^0,w,c
  4001   001852  3204               	rrcf	(___fladd@b+3)^0,f,c
  4002   001854  3203               	rrcf	(___fladd@b+2)^0,f,c
  4003   001856  3202               	rrcf	(___fladd@b+1)^0,f,c
  4004   001858  3201               	rrcf	___fladd@b^0,f,c
  4005   00185A  2A0F               	incf	___fladd@bexp^0,f,c
  4006   00185C                     l1170:
  4007   00185C  500E               	movf	___fladd@aexp^0,w,c
  4008   00185E  5C0F               	subwf	___fladd@bexp^0,w,c
  4009   001860  A0D8               	btfss	status,0,c
  4010   001862  EF35  F00C         	goto	u2881
  4011   001866  EF37  F00C         	goto	u2880
  4012   00186A                     u2881:
  4013   00186A  EF11  F00C         	goto	l1171
  4014   00186E                     u2880:
  4015   00186E                     l1169:
  4016   00186E  BC0D               	btfsc	___fladd@signs^0,6,c
  4017   001870  EF3C  F00C         	goto	u2891
  4018   001874  EF3E  F00C         	goto	u2890
  4019   001878                     u2891:
  4020   001878  EF7E  F00C         	goto	l3711
  4021   00187C                     u2890:
  4022   00187C  500F               	movf	___fladd@bexp^0,w,c
  4023   00187E  A4D8               	btfss	status,2,c
  4024   001880  EF44  F00C         	goto	u2901
  4025   001884  EF46  F00C         	goto	u2900
  4026   001888                     u2901:
  4027   001888  EF50  F00C         	goto	l3693
  4028   00188C                     u2900:
  4029   00188C  0E00               	movlw	0
  4030   00188E  6E01               	movwf	?___fladd^0,c
  4031   001890  0E00               	movlw	0
  4032   001892  6E02               	movwf	(?___fladd+1)^0,c
  4033   001894  0E00               	movlw	0
  4034   001896  6E03               	movwf	(?___fladd+2)^0,c
  4035   001898  0E00               	movlw	0
  4036   00189A  6E04               	movwf	(?___fladd+3)^0,c
  4037   00189C  EF9F  F00D         	goto	l1178
  4038   0018A0                     l3693:
  4039   0018A0  5005               	movf	___fladd@a^0,w,c
  4040   0018A2  2601               	addwf	___fladd@b^0,f,c
  4041   0018A4  5006               	movf	(___fladd@a+1)^0,w,c
  4042   0018A6  2202               	addwfc	(___fladd@b+1)^0,f,c
  4043   0018A8  5007               	movf	(___fladd@a+2)^0,w,c
  4044   0018AA  2203               	addwfc	(___fladd@b+2)^0,f,c
  4045   0018AC  5008               	movf	(___fladd@a+3)^0,w,c
  4046   0018AE  2204               	addwfc	(___fladd@b+3)^0,f,c
  4047   0018B0  A004               	btfss	(___fladd@b+3)^0,0,c
  4048   0018B2  EF5D  F00C         	goto	u2911
  4049   0018B6  EF5F  F00C         	goto	u2910
  4050   0018BA                     u2911:
  4051   0018BA  EF0B  F00D         	goto	l3747
  4052   0018BE                     u2910:
  4053   0018BE  A010               	btfss	___fladd@grs^0,0,c
  4054   0018C0  EF64  F00C         	goto	u2921
  4055   0018C4  EF66  F00C         	goto	u2920
  4056   0018C8                     u2921:
  4057   0018C8  EF6C  F00C         	goto	l3701
  4058   0018CC                     u2920:
  4059   0018CC  90D8               	bcf	status,0,c
  4060   0018CE  3010               	rrcf	___fladd@grs^0,w,c
  4061   0018D0  0901               	iorlw	1
  4062   0018D2  6E10               	movwf	___fladd@grs^0,c
  4063   0018D4  EF6E  F00C         	goto	l3703
  4064   0018D8                     l3701:
  4065   0018D8  90D8               	bcf	status,0,c
  4066   0018DA  3210               	rrcf	___fladd@grs^0,f,c
  4067   0018DC                     l3703:
  4068   0018DC  A001               	btfss	___fladd@b^0,0,c
  4069   0018DE  EF73  F00C         	goto	u2931
  4070   0018E2  EF75  F00C         	goto	u2930
  4071   0018E6                     u2931:
  4072   0018E6  EF76  F00C         	goto	l3707
  4073   0018EA                     u2930:
  4074   0018EA  8E10               	bsf	___fladd@grs^0,7,c
  4075   0018EC                     l3707:
  4076   0018EC  3404               	rlcf	(___fladd@b+3)^0,w,c
  4077   0018EE  3204               	rrcf	(___fladd@b+3)^0,f,c
  4078   0018F0  3203               	rrcf	(___fladd@b+2)^0,f,c
  4079   0018F2  3202               	rrcf	(___fladd@b+1)^0,f,c
  4080   0018F4  3201               	rrcf	___fladd@b^0,f,c
  4081   0018F6  2A0F               	incf	___fladd@bexp^0,f,c
  4082   0018F8  EF0B  F00D         	goto	l3747
  4083   0018FC                     l3711:
  4084   0018FC  5005               	movf	___fladd@a^0,w,c
  4085   0018FE  5C01               	subwf	___fladd@b^0,w,c
  4086   001900  5006               	movf	(___fladd@a+1)^0,w,c
  4087   001902  5802               	subwfb	(___fladd@b+1)^0,w,c
  4088   001904  5007               	movf	(___fladd@a+2)^0,w,c
  4089   001906  5803               	subwfb	(___fladd@b+2)^0,w,c
  4090   001908  5004               	movf	(___fladd@b+3)^0,w,c
  4091   00190A  0A80               	xorlw	128
  4092   00190C  6E09               	movwf	??___fladd^0,c
  4093   00190E  5008               	movf	(___fladd@a+3)^0,w,c
  4094   001910  0A80               	xorlw	128
  4095   001912  5809               	subwfb	??___fladd^0,w,c
  4096   001914  B0D8               	btfsc	status,0,c
  4097   001916  EF8F  F00C         	goto	u2941
  4098   00191A  EF91  F00C         	goto	u2940
  4099   00191E                     u2941:
  4100   00191E  EFBC  F00C         	goto	l3721
  4101   001922                     u2940:
  4102   001922  5001               	movf	___fladd@b^0,w,c
  4103   001924  5C05               	subwf	___fladd@a^0,w,c
  4104   001926  6E09               	movwf	??___fladd^0,c
  4105   001928  5002               	movf	(___fladd@b+1)^0,w,c
  4106   00192A  5806               	subwfb	(___fladd@a+1)^0,w,c
  4107   00192C  6E0A               	movwf	(??___fladd+1)^0,c
  4108   00192E  5003               	movf	(___fladd@b+2)^0,w,c
  4109   001930  5807               	subwfb	(___fladd@a+2)^0,w,c
  4110   001932  6E0B               	movwf	(??___fladd+2)^0,c
  4111   001934  5004               	movf	(___fladd@b+3)^0,w,c
  4112   001936  5808               	subwfb	(___fladd@a+3)^0,w,c
  4113   001938  6E0C               	movwf	(??___fladd+3)^0,c
  4114   00193A  0EFF               	movlw	255
  4115   00193C  2409               	addwf	??___fladd^0,w,c
  4116   00193E  6E01               	movwf	___fladd@b^0,c
  4117   001940  0EFF               	movlw	255
  4118   001942  200A               	addwfc	(??___fladd+1)^0,w,c
  4119   001944  6E02               	movwf	(___fladd@b+1)^0,c
  4120   001946  0EFF               	movlw	255
  4121   001948  200B               	addwfc	(??___fladd+2)^0,w,c
  4122   00194A  6E03               	movwf	(___fladd@b+2)^0,c
  4123   00194C  0EFF               	movlw	255
  4124   00194E  200C               	addwfc	(??___fladd+3)^0,w,c
  4125   001950  6E04               	movwf	(___fladd@b+3)^0,c
  4126   001952  0E80               	movlw	128
  4127   001954  1A0D               	xorwf	___fladd@signs^0,f,c
  4128   001956  6C10               	negf	___fladd@grs^0,c
  4129   001958  5010               	movf	___fladd@grs^0,w,c
  4130   00195A  A4D8               	btfss	status,2,c
  4131   00195C  EFB2  F00C         	goto	u2951
  4132   001960  EFB4  F00C         	goto	u2950
  4133   001964                     u2951:
  4134   001964  EFC4  F00C         	goto	l1186
  4135   001968                     u2950:
  4136   001968  0E01               	movlw	1
  4137   00196A  2601               	addwf	___fladd@b^0,f,c
  4138   00196C  0E00               	movlw	0
  4139   00196E  2202               	addwfc	(___fladd@b+1)^0,f,c
  4140   001970  2203               	addwfc	(___fladd@b+2)^0,f,c
  4141   001972  2204               	addwfc	(___fladd@b+3)^0,f,c
  4142   001974  EFC4  F00C         	goto	l1186
  4143   001978                     l3721:
  4144   001978  5005               	movf	___fladd@a^0,w,c
  4145   00197A  5E01               	subwf	___fladd@b^0,f,c
  4146   00197C  5006               	movf	(___fladd@a+1)^0,w,c
  4147   00197E  5A02               	subwfb	(___fladd@b+1)^0,f,c
  4148   001980  5007               	movf	(___fladd@a+2)^0,w,c
  4149   001982  5A03               	subwfb	(___fladd@b+2)^0,f,c
  4150   001984  5008               	movf	(___fladd@a+3)^0,w,c
  4151   001986  5A04               	subwfb	(___fladd@b+3)^0,f,c
  4152   001988                     l1186:
  4153   001988  5001               	movf	___fladd@b^0,w,c
  4154   00198A  1002               	iorwf	(___fladd@b+1)^0,w,c
  4155   00198C  1003               	iorwf	(___fladd@b+2)^0,w,c
  4156   00198E  1004               	iorwf	(___fladd@b+3)^0,w,c
  4157   001990  A4D8               	btfss	status,2,c
  4158   001992  EFCD  F00C         	goto	u2961
  4159   001996  EFCF  F00C         	goto	u2960
  4160   00199A                     u2961:
  4161   00199A  EF04  F00D         	goto	l3745
  4162   00199E                     u2960:
  4163   00199E  5010               	movf	___fladd@grs^0,w,c
  4164   0019A0  A4D8               	btfss	status,2,c
  4165   0019A2  EFD5  F00C         	goto	u2971
  4166   0019A6  EFD7  F00C         	goto	u2970
  4167   0019AA                     u2971:
  4168   0019AA  EF04  F00D         	goto	l3745
  4169   0019AE                     u2970:
  4170   0019AE  0E00               	movlw	0
  4171   0019B0  6E01               	movwf	?___fladd^0,c
  4172   0019B2  0E00               	movlw	0
  4173   0019B4  6E02               	movwf	(?___fladd+1)^0,c
  4174   0019B6  0E00               	movlw	0
  4175   0019B8  6E03               	movwf	(?___fladd+2)^0,c
  4176   0019BA  0E00               	movlw	0
  4177   0019BC  6E04               	movwf	(?___fladd+3)^0,c
  4178   0019BE  EF9F  F00D         	goto	l1178
  4179   0019C2                     l3729:
  4180   0019C2  90D8               	bcf	status,0,c
  4181   0019C4  3601               	rlcf	___fladd@b^0,f,c
  4182   0019C6  3602               	rlcf	(___fladd@b+1)^0,f,c
  4183   0019C8  3603               	rlcf	(___fladd@b+2)^0,f,c
  4184   0019CA  3604               	rlcf	(___fladd@b+3)^0,f,c
  4185   0019CC  AE10               	btfss	___fladd@grs^0,7,c
  4186   0019CE  EFEB  F00C         	goto	u2981
  4187   0019D2  EFED  F00C         	goto	u2980
  4188   0019D6                     u2981:
  4189   0019D6  EFEE  F00C         	goto	l3735
  4190   0019DA                     u2980:
  4191   0019DA  8001               	bsf	___fladd@b^0,0,c
  4192   0019DC                     l3735:
  4193   0019DC  A010               	btfss	___fladd@grs^0,0,c
  4194   0019DE  EFF3  F00C         	goto	u2991
  4195   0019E2  EFF5  F00C         	goto	u2990
  4196   0019E6                     u2991:
  4197   0019E6  EFF9  F00C         	goto	l3739
  4198   0019EA                     u2990:
  4199   0019EA  80D8               	bsf	status,0,c
  4200   0019EC  3610               	rlcf	___fladd@grs^0,f,c
  4201   0019EE  EFFB  F00C         	goto	l3741
  4202   0019F2                     l3739:
  4203   0019F2  90D8               	bcf	status,0,c
  4204   0019F4  3610               	rlcf	___fladd@grs^0,f,c
  4205   0019F6                     l3741:
  4206   0019F6  500F               	movf	___fladd@bexp^0,w,c
  4207   0019F8  B4D8               	btfsc	status,2,c
  4208   0019FA  EF01  F00D         	goto	u3001
  4209   0019FE  EF03  F00D         	goto	u3000
  4210   001A02                     u3001:
  4211   001A02  EF04  F00D         	goto	l3745
  4212   001A06                     u3000:
  4213   001A06  060F               	decf	___fladd@bexp^0,f,c
  4214   001A08                     l3745:
  4215   001A08  AE03               	btfss	(___fladd@b+2)^0,7,c
  4216   001A0A  EF09  F00D         	goto	u3011
  4217   001A0E  EF0B  F00D         	goto	u3010
  4218   001A12                     u3011:
  4219   001A12  EFE1  F00C         	goto	l3729
  4220   001A16                     u3010:
  4221   001A16                     l3747:
  4222   001A16  0E00               	movlw	0
  4223   001A18  6E0E               	movwf	___fladd@aexp^0,c
  4224   001A1A  AE10               	btfss	___fladd@grs^0,7,c
  4225   001A1C  EF12  F00D         	goto	u3021
  4226   001A20  EF14  F00D         	goto	u3020
  4227   001A24                     u3021:
  4228   001A24  EF2C  F00D         	goto	l1195
  4229   001A28                     u3020:
  4230   001A28  C010  F009         	movff	___fladd@grs,??___fladd
  4231   001A2C  0E7F               	movlw	127
  4232   001A2E  1609               	andwf	??___fladd^0,f,c
  4233   001A30  B4D8               	btfsc	status,2,c
  4234   001A32  EF1D  F00D         	goto	u3031
  4235   001A36  EF1F  F00D         	goto	u3030
  4236   001A3A                     u3031:
  4237   001A3A  EF23  F00D         	goto	l1196
  4238   001A3E                     u3030:
  4239   001A3E                     l3753:
  4240   001A3E  0E01               	movlw	1
  4241   001A40  6E0E               	movwf	___fladd@aexp^0,c
  4242   001A42  EF2C  F00D         	goto	l1195
  4243   001A46                     l1196:
  4244   001A46  A001               	btfss	___fladd@b^0,0,c
  4245   001A48  EF28  F00D         	goto	u3041
  4246   001A4C  EF2A  F00D         	goto	u3040
  4247   001A50                     u3041:
  4248   001A50  EF2C  F00D         	goto	l1195
  4249   001A54                     u3040:
  4250   001A54  EF1F  F00D         	goto	l3753
  4251   001A58                     l1195:
  4252   001A58  500E               	movf	___fladd@aexp^0,w,c
  4253   001A5A  B4D8               	btfsc	status,2,c
  4254   001A5C  EF32  F00D         	goto	u3051
  4255   001A60  EF34  F00D         	goto	u3050
  4256   001A64                     u3051:
  4257   001A64  EF5F  F00D         	goto	l3765
  4258   001A68                     u3050:
  4259   001A68  0E01               	movlw	1
  4260   001A6A  2601               	addwf	___fladd@b^0,f,c
  4261   001A6C  0E00               	movlw	0
  4262   001A6E  2202               	addwfc	(___fladd@b+1)^0,f,c
  4263   001A70  2203               	addwfc	(___fladd@b+2)^0,f,c
  4264   001A72  2204               	addwfc	(___fladd@b+3)^0,f,c
  4265   001A74  A004               	btfss	(___fladd@b+3)^0,0,c
  4266   001A76  EF3F  F00D         	goto	u3061
  4267   001A7A  EF41  F00D         	goto	u3060
  4268   001A7E                     u3061:
  4269   001A7E  EF5F  F00D         	goto	l3765
  4270   001A82                     u3060:
  4271   001A82  C001  F009         	movff	___fladd@b,??___fladd
  4272   001A86  C002  F00A         	movff	___fladd@b+1,??___fladd+1
  4273   001A8A  C003  F00B         	movff	___fladd@b+2,??___fladd+2
  4274   001A8E  C004  F00C         	movff	___fladd@b+3,??___fladd+3
  4275   001A92  340C               	rlcf	(??___fladd+3)^0,w,c
  4276   001A94  320C               	rrcf	(??___fladd+3)^0,f,c
  4277   001A96  320B               	rrcf	(??___fladd+2)^0,f,c
  4278   001A98  320A               	rrcf	(??___fladd+1)^0,f,c
  4279   001A9A  3209               	rrcf	??___fladd^0,f,c
  4280   001A9C  C009  F001         	movff	??___fladd,___fladd@b
  4281   001AA0  C00A  F002         	movff	??___fladd+1,___fladd@b+1
  4282   001AA4  C00B  F003         	movff	??___fladd+2,___fladd@b+2
  4283   001AA8  C00C  F004         	movff	??___fladd+3,___fladd@b+3
  4284   001AAC  280F               	incf	___fladd@bexp^0,w,c
  4285   001AAE  B4D8               	btfsc	status,2,c
  4286   001AB0  EF5C  F00D         	goto	u3071
  4287   001AB4  EF5E  F00D         	goto	u3070
  4288   001AB8                     u3071:
  4289   001AB8  EF5F  F00D         	goto	l3765
  4290   001ABC                     u3070:
  4291   001ABC  2A0F               	incf	___fladd@bexp^0,f,c
  4292   001ABE                     l3765:
  4293   001ABE  280F               	incf	___fladd@bexp^0,w,c
  4294   001AC0  B4D8               	btfsc	status,2,c
  4295   001AC2  EF65  F00D         	goto	u3081
  4296   001AC6  EF67  F00D         	goto	u3080
  4297   001ACA                     u3081:
  4298   001ACA  EF6F  F00D         	goto	l3769
  4299   001ACE                     u3080:
  4300   001ACE  500F               	movf	___fladd@bexp^0,w,c
  4301   001AD0  A4D8               	btfss	status,2,c
  4302   001AD2  EF6D  F00D         	goto	u3091
  4303   001AD6  EF6F  F00D         	goto	u3090
  4304   001ADA                     u3091:
  4305   001ADA  EF81  F00D         	goto	l3773
  4306   001ADE                     u3090:
  4307   001ADE                     l3769:
  4308   001ADE  0E00               	movlw	0
  4309   001AE0  6E01               	movwf	___fladd@b^0,c
  4310   001AE2  0E00               	movlw	0
  4311   001AE4  6E02               	movwf	(___fladd@b+1)^0,c
  4312   001AE6  0E00               	movlw	0
  4313   001AE8  6E03               	movwf	(___fladd@b+2)^0,c
  4314   001AEA  0E00               	movlw	0
  4315   001AEC  6E04               	movwf	(___fladd@b+3)^0,c
  4316   001AEE  500F               	movf	___fladd@bexp^0,w,c
  4317   001AF0  A4D8               	btfss	status,2,c
  4318   001AF2  EF7D  F00D         	goto	u3101
  4319   001AF6  EF7F  F00D         	goto	u3100
  4320   001AFA                     u3101:
  4321   001AFA  EF81  F00D         	goto	l3773
  4322   001AFE                     u3100:
  4323   001AFE  0E00               	movlw	0
  4324   001B00  6E0D               	movwf	___fladd@signs^0,c
  4325   001B02                     l3773:
  4326   001B02  A00F               	btfss	___fladd@bexp^0,0,c
  4327   001B04  EF86  F00D         	goto	u3111
  4328   001B08  EF88  F00D         	goto	u3110
  4329   001B0C                     u3111:
  4330   001B0C  EF8B  F00D         	goto	l3777
  4331   001B10                     u3110:
  4332   001B10  8E03               	bsf	(___fladd@b+2)^0,7,c
  4333   001B12  EF8C  F00D         	goto	l3779
  4334   001B16                     l3777:
  4335   001B16  9E03               	bcf	(___fladd@b+2)^0,7,c
  4336   001B18                     l3779:
  4337   001B18  90D8               	bcf	status,0,c
  4338   001B1A  300F               	rrcf	___fladd@bexp^0,w,c
  4339   001B1C  6E04               	movwf	(___fladd@b+3)^0,c
  4340   001B1E  AE0D               	btfss	___fladd@signs^0,7,c
  4341   001B20  EF94  F00D         	goto	u3121
  4342   001B24  EF96  F00D         	goto	u3120
  4343   001B28                     u3121:
  4344   001B28  EF97  F00D         	goto	l3785
  4345   001B2C                     u3120:
  4346   001B2C  8E04               	bsf	(___fladd@b+3)^0,7,c
  4347   001B2E                     l3785:
  4348   001B2E  C001  F001         	movff	___fladd@b,?___fladd
  4349   001B32  C002  F002         	movff	___fladd@b+1,?___fladd+1
  4350   001B36  C003  F003         	movff	___fladd@b+2,?___fladd+2
  4351   001B3A  C004  F004         	movff	___fladd@b+3,?___fladd+3
  4352   001B3E                     l1178:
  4353   001B3E  0012               	return		;funcret
  4354   001B40                     __end_of___fladd:
  4355                           	callstack 0
  4356                           
  4357 ;; *************** function ___flmul *****************
  4358 ;; Defined at:
  4359 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  b               4    0[COMRAM] unsigned char 
  4362 ;;  a               4    4[COMRAM] unsigned char 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;  prod            4   19[COMRAM] struct .
  4365 ;;  grs             4   13[COMRAM] unsigned long 
  4366 ;;  temp            2   23[COMRAM] struct .
  4367 ;;  bexp            1   18[COMRAM] unsigned char 
  4368 ;;  aexp            1   17[COMRAM] unsigned char 
  4369 ;;  sign            1   12[COMRAM] unsigned char 
  4370 ;; Return value:  Size  Location     Type
  4371 ;;                  4    0[COMRAM] unsigned char 
  4372 ;; Registers used:
  4373 ;;		wreg, status,2, status,0, prodl, prodh
  4374 ;; Tracked objects:
  4375 ;;		On entry : 0/0
  4376 ;;		On exit  : 0/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4379 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4380 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4381 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4382 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4383 ;;Total ram usage:       25 bytes
  4384 ;; Hardware stack levels used: 1
  4385 ;; This function calls:
  4386 ;;		Nothing
  4387 ;; This function is called by:
  4388 ;;		_convert_rgb2hue
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text13
  4393   001B40                     __ptext13:
  4394                           	callstack 0
  4395   001B40                     ___flmul:
  4396                           	callstack 28
  4397   001B40  5004               	movf	(___flmul@b+3)^0,w,c
  4398   001B42  0B80               	andlw	128
  4399   001B44  6E0D               	movwf	___flmul@sign^0,c
  4400   001B46  5004               	movf	(___flmul@b+3)^0,w,c
  4401   001B48  2404               	addwf	(___flmul@b+3)^0,w,c
  4402   001B4A  6E13               	movwf	___flmul@bexp^0,c
  4403   001B4C  AE03               	btfss	(___flmul@b+2)^0,7,c
  4404   001B4E  EFAB  F00D         	goto	u3431
  4405   001B52  EFAD  F00D         	goto	u3430
  4406   001B56                     u3431:
  4407   001B56  EFAE  F00D         	goto	l4069
  4408   001B5A                     u3430:
  4409   001B5A  8013               	bsf	___flmul@bexp^0,0,c
  4410   001B5C                     l4069:
  4411   001B5C  5013               	movf	___flmul@bexp^0,w,c
  4412   001B5E  B4D8               	btfsc	status,2,c
  4413   001B60  EFB4  F00D         	goto	u3441
  4414   001B64  EFB6  F00D         	goto	u3440
  4415   001B68                     u3441:
  4416   001B68  EFC9  F00D         	goto	l4077
  4417   001B6C                     u3440:
  4418   001B6C  2813               	incf	___flmul@bexp^0,w,c
  4419   001B6E  A4D8               	btfss	status,2,c
  4420   001B70  EFBC  F00D         	goto	u3451
  4421   001B74  EFBE  F00D         	goto	u3450
  4422   001B78                     u3451:
  4423   001B78  EFC6  F00D         	goto	l4075
  4424   001B7C                     u3450:
  4425   001B7C  0E00               	movlw	0
  4426   001B7E  6E01               	movwf	___flmul@b^0,c
  4427   001B80  0E00               	movlw	0
  4428   001B82  6E02               	movwf	(___flmul@b+1)^0,c
  4429   001B84  0E00               	movlw	0
  4430   001B86  6E03               	movwf	(___flmul@b+2)^0,c
  4431   001B88  0E00               	movlw	0
  4432   001B8A  6E04               	movwf	(___flmul@b+3)^0,c
  4433   001B8C                     l4075:
  4434   001B8C  8E03               	bsf	(___flmul@b+2)^0,7,c
  4435   001B8E  EFD1  F00D         	goto	l4079
  4436   001B92                     l4077:
  4437   001B92  0E00               	movlw	0
  4438   001B94  6E01               	movwf	___flmul@b^0,c
  4439   001B96  0E00               	movlw	0
  4440   001B98  6E02               	movwf	(___flmul@b+1)^0,c
  4441   001B9A  0E00               	movlw	0
  4442   001B9C  6E03               	movwf	(___flmul@b+2)^0,c
  4443   001B9E  0E00               	movlw	0
  4444   001BA0  6E04               	movwf	(___flmul@b+3)^0,c
  4445   001BA2                     l4079:
  4446   001BA2  5008               	movf	(___flmul@a+3)^0,w,c
  4447   001BA4  0B80               	andlw	128
  4448   001BA6  1A0D               	xorwf	___flmul@sign^0,f,c
  4449   001BA8  5008               	movf	(___flmul@a+3)^0,w,c
  4450   001BAA  2408               	addwf	(___flmul@a+3)^0,w,c
  4451   001BAC  6E12               	movwf	___flmul@aexp^0,c
  4452   001BAE  AE07               	btfss	(___flmul@a+2)^0,7,c
  4453   001BB0  EFDC  F00D         	goto	u3461
  4454   001BB4  EFDE  F00D         	goto	u3460
  4455   001BB8                     u3461:
  4456   001BB8  EFDF  F00D         	goto	l4087
  4457   001BBC                     u3460:
  4458   001BBC  8012               	bsf	___flmul@aexp^0,0,c
  4459   001BBE                     l4087:
  4460   001BBE  5012               	movf	___flmul@aexp^0,w,c
  4461   001BC0  B4D8               	btfsc	status,2,c
  4462   001BC2  EFE5  F00D         	goto	u3471
  4463   001BC6  EFE7  F00D         	goto	u3470
  4464   001BCA                     u3471:
  4465   001BCA  EFFA  F00D         	goto	l4095
  4466   001BCE                     u3470:
  4467   001BCE  2812               	incf	___flmul@aexp^0,w,c
  4468   001BD0  A4D8               	btfss	status,2,c
  4469   001BD2  EFED  F00D         	goto	u3481
  4470   001BD6  EFEF  F00D         	goto	u3480
  4471   001BDA                     u3481:
  4472   001BDA  EFF7  F00D         	goto	l4093
  4473   001BDE                     u3480:
  4474   001BDE  0E00               	movlw	0
  4475   001BE0  6E05               	movwf	___flmul@a^0,c
  4476   001BE2  0E00               	movlw	0
  4477   001BE4  6E06               	movwf	(___flmul@a+1)^0,c
  4478   001BE6  0E00               	movlw	0
  4479   001BE8  6E07               	movwf	(___flmul@a+2)^0,c
  4480   001BEA  0E00               	movlw	0
  4481   001BEC  6E08               	movwf	(___flmul@a+3)^0,c
  4482   001BEE                     l4093:
  4483   001BEE  8E07               	bsf	(___flmul@a+2)^0,7,c
  4484   001BF0  EF02  F00E         	goto	l1255
  4485   001BF4                     l4095:
  4486   001BF4  0E00               	movlw	0
  4487   001BF6  6E05               	movwf	___flmul@a^0,c
  4488   001BF8  0E00               	movlw	0
  4489   001BFA  6E06               	movwf	(___flmul@a+1)^0,c
  4490   001BFC  0E00               	movlw	0
  4491   001BFE  6E07               	movwf	(___flmul@a+2)^0,c
  4492   001C00  0E00               	movlw	0
  4493   001C02  6E08               	movwf	(___flmul@a+3)^0,c
  4494   001C04                     l1255:
  4495   001C04  5012               	movf	___flmul@aexp^0,w,c
  4496   001C06  B4D8               	btfsc	status,2,c
  4497   001C08  EF08  F00E         	goto	u3491
  4498   001C0C  EF0A  F00E         	goto	u3490
  4499   001C10                     u3491:
  4500   001C10  EF12  F00E         	goto	l4099
  4501   001C14                     u3490:
  4502   001C14  5013               	movf	___flmul@bexp^0,w,c
  4503   001C16  A4D8               	btfss	status,2,c
  4504   001C18  EF10  F00E         	goto	u3501
  4505   001C1C  EF12  F00E         	goto	u3500
  4506   001C20                     u3501:
  4507   001C20  EF1C  F00E         	goto	l4103
  4508   001C24                     u3500:
  4509   001C24                     l4099:
  4510   001C24  0E00               	movlw	0
  4511   001C26  6E01               	movwf	?___flmul^0,c
  4512   001C28  0E00               	movlw	0
  4513   001C2A  6E02               	movwf	(?___flmul+1)^0,c
  4514   001C2C  0E00               	movlw	0
  4515   001C2E  6E03               	movwf	(?___flmul+2)^0,c
  4516   001C30  0E00               	movlw	0
  4517   001C32  6E04               	movwf	(?___flmul+3)^0,c
  4518   001C34  EFB4  F00F         	goto	l1259
  4519   001C38                     l4103:
  4520   001C38  5007               	movf	(___flmul@a+2)^0,w,c
  4521   001C3A  0201               	mulwf	___flmul@b^0,c
  4522   001C3C  CFF3 F018          	movff	prodl,___flmul@temp
  4523   001C40  CFF4 F019          	movff	prodh,___flmul@temp+1
  4524   001C44  5018               	movf	___flmul@temp^0,w,c
  4525   001C46  6E0E               	movwf	___flmul@grs^0,c
  4526   001C48  6A0F               	clrf	(___flmul@grs+1)^0,c
  4527   001C4A  6A10               	clrf	(___flmul@grs+2)^0,c
  4528   001C4C  6A11               	clrf	(___flmul@grs+3)^0,c
  4529   001C4E  5019               	movf	(___flmul@temp+1)^0,w,c
  4530   001C50  6E14               	movwf	___flmul@prod^0,c
  4531   001C52  6A15               	clrf	(___flmul@prod+1)^0,c
  4532   001C54  6A16               	clrf	(___flmul@prod+2)^0,c
  4533   001C56  6A17               	clrf	(___flmul@prod+3)^0,c
  4534   001C58  5006               	movf	(___flmul@a+1)^0,w,c
  4535   001C5A  0202               	mulwf	(___flmul@b+1)^0,c
  4536   001C5C  CFF3 F018          	movff	prodl,___flmul@temp
  4537   001C60  CFF4 F019          	movff	prodh,___flmul@temp+1
  4538   001C64  5018               	movf	___flmul@temp^0,w,c
  4539   001C66  260E               	addwf	___flmul@grs^0,f,c
  4540   001C68  0E00               	movlw	0
  4541   001C6A  220F               	addwfc	(___flmul@grs+1)^0,f,c
  4542   001C6C  2210               	addwfc	(___flmul@grs+2)^0,f,c
  4543   001C6E  2211               	addwfc	(___flmul@grs+3)^0,f,c
  4544   001C70  5019               	movf	(___flmul@temp+1)^0,w,c
  4545   001C72  2614               	addwf	___flmul@prod^0,f,c
  4546   001C74  0E00               	movlw	0
  4547   001C76  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4548   001C78  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4549   001C7A  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4550   001C7C  5005               	movf	___flmul@a^0,w,c
  4551   001C7E  0203               	mulwf	(___flmul@b+2)^0,c
  4552   001C80  CFF3 F018          	movff	prodl,___flmul@temp
  4553   001C84  CFF4 F019          	movff	prodh,___flmul@temp+1
  4554   001C88  5018               	movf	___flmul@temp^0,w,c
  4555   001C8A  260E               	addwf	___flmul@grs^0,f,c
  4556   001C8C  0E00               	movlw	0
  4557   001C8E  220F               	addwfc	(___flmul@grs+1)^0,f,c
  4558   001C90  2210               	addwfc	(___flmul@grs+2)^0,f,c
  4559   001C92  2211               	addwfc	(___flmul@grs+3)^0,f,c
  4560   001C94  5019               	movf	(___flmul@temp+1)^0,w,c
  4561   001C96  2614               	addwf	___flmul@prod^0,f,c
  4562   001C98  0E00               	movlw	0
  4563   001C9A  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4564   001C9C  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4565   001C9E  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4566   001CA0  C010  F011         	movff	___flmul@grs+2,___flmul@grs+3
  4567   001CA4  C00F  F010         	movff	___flmul@grs+1,___flmul@grs+2
  4568   001CA8  C00E  F00F         	movff	___flmul@grs,___flmul@grs+1
  4569   001CAC  6A0E               	clrf	___flmul@grs^0,c
  4570   001CAE  5005               	movf	___flmul@a^0,w,c
  4571   001CB0  0202               	mulwf	(___flmul@b+1)^0,c
  4572   001CB2  CFF3 F018          	movff	prodl,___flmul@temp
  4573   001CB6  CFF4 F019          	movff	prodh,___flmul@temp+1
  4574   001CBA  5018               	movf	___flmul@temp^0,w,c
  4575   001CBC  260E               	addwf	___flmul@grs^0,f,c
  4576   001CBE  5019               	movf	(___flmul@temp+1)^0,w,c
  4577   001CC0  220F               	addwfc	(___flmul@grs+1)^0,f,c
  4578   001CC2  0E00               	movlw	0
  4579   001CC4  2210               	addwfc	(___flmul@grs+2)^0,f,c
  4580   001CC6  0E00               	movlw	0
  4581   001CC8  2211               	addwfc	(___flmul@grs+3)^0,f,c
  4582   001CCA  5006               	movf	(___flmul@a+1)^0,w,c
  4583   001CCC  0201               	mulwf	___flmul@b^0,c
  4584   001CCE  CFF3 F018          	movff	prodl,___flmul@temp
  4585   001CD2  CFF4 F019          	movff	prodh,___flmul@temp+1
  4586   001CD6  5018               	movf	___flmul@temp^0,w,c
  4587   001CD8  260E               	addwf	___flmul@grs^0,f,c
  4588   001CDA  5019               	movf	(___flmul@temp+1)^0,w,c
  4589   001CDC  220F               	addwfc	(___flmul@grs+1)^0,f,c
  4590   001CDE  0E00               	movlw	0
  4591   001CE0  2210               	addwfc	(___flmul@grs+2)^0,f,c
  4592   001CE2  0E00               	movlw	0
  4593   001CE4  2211               	addwfc	(___flmul@grs+3)^0,f,c
  4594   001CE6  C010  F011         	movff	___flmul@grs+2,___flmul@grs+3
  4595   001CEA  C00F  F010         	movff	___flmul@grs+1,___flmul@grs+2
  4596   001CEE  C00E  F00F         	movff	___flmul@grs,___flmul@grs+1
  4597   001CF2  6A0E               	clrf	___flmul@grs^0,c
  4598   001CF4  5005               	movf	___flmul@a^0,w,c
  4599   001CF6  0201               	mulwf	___flmul@b^0,c
  4600   001CF8  CFF3 F018          	movff	prodl,___flmul@temp
  4601   001CFC  CFF4 F019          	movff	prodh,___flmul@temp+1
  4602   001D00  5018               	movf	___flmul@temp^0,w,c
  4603   001D02  260E               	addwf	___flmul@grs^0,f,c
  4604   001D04  5019               	movf	(___flmul@temp+1)^0,w,c
  4605   001D06  220F               	addwfc	(___flmul@grs+1)^0,f,c
  4606   001D08  0E00               	movlw	0
  4607   001D0A  2210               	addwfc	(___flmul@grs+2)^0,f,c
  4608   001D0C  0E00               	movlw	0
  4609   001D0E  2211               	addwfc	(___flmul@grs+3)^0,f,c
  4610   001D10  5007               	movf	(___flmul@a+2)^0,w,c
  4611   001D12  0202               	mulwf	(___flmul@b+1)^0,c
  4612   001D14  CFF3 F018          	movff	prodl,___flmul@temp
  4613   001D18  CFF4 F019          	movff	prodh,___flmul@temp+1
  4614   001D1C  5018               	movf	___flmul@temp^0,w,c
  4615   001D1E  2614               	addwf	___flmul@prod^0,f,c
  4616   001D20  5019               	movf	(___flmul@temp+1)^0,w,c
  4617   001D22  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4618   001D24  0E00               	movlw	0
  4619   001D26  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4620   001D28  0E00               	movlw	0
  4621   001D2A  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4622   001D2C  5006               	movf	(___flmul@a+1)^0,w,c
  4623   001D2E  0203               	mulwf	(___flmul@b+2)^0,c
  4624   001D30  CFF3 F018          	movff	prodl,___flmul@temp
  4625   001D34  CFF4 F019          	movff	prodh,___flmul@temp+1
  4626   001D38  5018               	movf	___flmul@temp^0,w,c
  4627   001D3A  2614               	addwf	___flmul@prod^0,f,c
  4628   001D3C  5019               	movf	(___flmul@temp+1)^0,w,c
  4629   001D3E  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4630   001D40  0E00               	movlw	0
  4631   001D42  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4632   001D44  0E00               	movlw	0
  4633   001D46  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4634   001D48  5007               	movf	(___flmul@a+2)^0,w,c
  4635   001D4A  0203               	mulwf	(___flmul@b+2)^0,c
  4636   001D4C  CFF3 F018          	movff	prodl,___flmul@temp
  4637   001D50  CFF4 F019          	movff	prodh,___flmul@temp+1
  4638   001D54  5018               	movf	___flmul@temp^0,w,c
  4639   001D56  6E09               	movwf	??___flmul^0,c
  4640   001D58  5019               	movf	(___flmul@temp+1)^0,w,c
  4641   001D5A  6E0A               	movwf	(??___flmul+1)^0,c
  4642   001D5C  6A0B               	clrf	(??___flmul+2)^0,c
  4643   001D5E  6A0C               	clrf	(??___flmul+3)^0,c
  4644   001D60  C00B  F00C         	movff	??___flmul+2,??___flmul+3
  4645   001D64  C00A  F00B         	movff	??___flmul+1,??___flmul+2
  4646   001D68  C009  F00A         	movff	??___flmul,??___flmul+1
  4647   001D6C  6A09               	clrf	??___flmul^0,c
  4648   001D6E  5009               	movf	??___flmul^0,w,c
  4649   001D70  2614               	addwf	___flmul@prod^0,f,c
  4650   001D72  500A               	movf	(??___flmul+1)^0,w,c
  4651   001D74  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4652   001D76  500B               	movf	(??___flmul+2)^0,w,c
  4653   001D78  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4654   001D7A  500C               	movf	(??___flmul+3)^0,w,c
  4655   001D7C  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4656   001D7E  C00E  F009         	movff	___flmul@grs,??___flmul
  4657   001D82  C00F  F00A         	movff	___flmul@grs+1,??___flmul+1
  4658   001D86  C010  F00B         	movff	___flmul@grs+2,??___flmul+2
  4659   001D8A  C011  F00C         	movff	___flmul@grs+3,??___flmul+3
  4660   001D8E  0E19               	movlw	25
  4661   001D90  EFCF  F00E         	goto	u3510
  4662   001D94                     u3515:
  4663   001D94  90D8               	bcf	status,0,c
  4664   001D96  320C               	rrcf	(??___flmul+3)^0,f,c
  4665   001D98  320B               	rrcf	(??___flmul+2)^0,f,c
  4666   001D9A  320A               	rrcf	(??___flmul+1)^0,f,c
  4667   001D9C  3209               	rrcf	??___flmul^0,f,c
  4668   001D9E                     u3510:
  4669   001D9E  2EE8               	decfsz	wreg,f,c
  4670   001DA0  EFCA  F00E         	goto	u3515
  4671   001DA4  5009               	movf	??___flmul^0,w,c
  4672   001DA6  2614               	addwf	___flmul@prod^0,f,c
  4673   001DA8  500A               	movf	(??___flmul+1)^0,w,c
  4674   001DAA  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4675   001DAC  500B               	movf	(??___flmul+2)^0,w,c
  4676   001DAE  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4677   001DB0  500C               	movf	(??___flmul+3)^0,w,c
  4678   001DB2  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4679   001DB4  C010  F011         	movff	___flmul@grs+2,___flmul@grs+3
  4680   001DB8  C00F  F010         	movff	___flmul@grs+1,___flmul@grs+2
  4681   001DBC  C00E  F00F         	movff	___flmul@grs,___flmul@grs+1
  4682   001DC0  6A0E               	clrf	___flmul@grs^0,c
  4683   001DC2  5012               	movf	___flmul@aexp^0,w,c
  4684   001DC4  C013  F009         	movff	___flmul@bexp,??___flmul
  4685   001DC8  6A0A               	clrf	(??___flmul+1)^0,c
  4686   001DCA  2609               	addwf	??___flmul^0,f,c
  4687   001DCC  0E00               	movlw	0
  4688   001DCE  220A               	addwfc	(??___flmul+1)^0,f,c
  4689   001DD0  0E82               	movlw	130
  4690   001DD2  2409               	addwf	??___flmul^0,w,c
  4691   001DD4  6E18               	movwf	___flmul@temp^0,c
  4692   001DD6  0EFF               	movlw	255
  4693   001DD8  200A               	addwfc	(??___flmul+1)^0,w,c
  4694   001DDA  6E19               	movwf	(___flmul@temp+1)^0,c
  4695   001DDC  EF05  F00F         	goto	l4151
  4696   001DE0                     l4145:
  4697   001DE0  90D8               	bcf	status,0,c
  4698   001DE2  3614               	rlcf	___flmul@prod^0,f,c
  4699   001DE4  3615               	rlcf	(___flmul@prod+1)^0,f,c
  4700   001DE6  3616               	rlcf	(___flmul@prod+2)^0,f,c
  4701   001DE8  3617               	rlcf	(___flmul@prod+3)^0,f,c
  4702   001DEA  AE11               	btfss	(___flmul@grs+3)^0,7,c
  4703   001DEC  EFFA  F00E         	goto	u3521
  4704   001DF0  EFFC  F00E         	goto	u3520
  4705   001DF4                     u3521:
  4706   001DF4  EFFD  F00E         	goto	l1262
  4707   001DF8                     u3520:
  4708   001DF8  8014               	bsf	___flmul@prod^0,0,c
  4709   001DFA                     l1262:
  4710   001DFA  90D8               	bcf	status,0,c
  4711   001DFC  360E               	rlcf	___flmul@grs^0,f,c
  4712   001DFE  360F               	rlcf	(___flmul@grs+1)^0,f,c
  4713   001E00  3610               	rlcf	(___flmul@grs+2)^0,f,c
  4714   001E02  3611               	rlcf	(___flmul@grs+3)^0,f,c
  4715   001E04  0618               	decf	___flmul@temp^0,f,c
  4716   001E06  A0D8               	btfss	status,0,c
  4717   001E08  0619               	decf	(___flmul@temp+1)^0,f,c
  4718   001E0A                     l4151:
  4719   001E0A  AE16               	btfss	(___flmul@prod+2)^0,7,c
  4720   001E0C  EF0A  F00F         	goto	u3531
  4721   001E10  EF0C  F00F         	goto	u3530
  4722   001E14                     u3531:
  4723   001E14  EFF0  F00E         	goto	l4145
  4724   001E18                     u3530:
  4725   001E18  0E00               	movlw	0
  4726   001E1A  6E12               	movwf	___flmul@aexp^0,c
  4727   001E1C  AE11               	btfss	(___flmul@grs+3)^0,7,c
  4728   001E1E  EF13  F00F         	goto	u3541
  4729   001E22  EF15  F00F         	goto	u3540
  4730   001E26                     u3541:
  4731   001E26  EF39  F00F         	goto	l1264
  4732   001E2A                     u3540:
  4733   001E2A  0EFF               	movlw	255
  4734   001E2C  140E               	andwf	___flmul@grs^0,w,c
  4735   001E2E  6E09               	movwf	??___flmul^0,c
  4736   001E30  0EFF               	movlw	255
  4737   001E32  140F               	andwf	(___flmul@grs+1)^0,w,c
  4738   001E34  6E0A               	movwf	(??___flmul+1)^0,c
  4739   001E36  0EFF               	movlw	255
  4740   001E38  1410               	andwf	(___flmul@grs+2)^0,w,c
  4741   001E3A  6E0B               	movwf	(??___flmul+2)^0,c
  4742   001E3C  0E7F               	movlw	127
  4743   001E3E  1411               	andwf	(___flmul@grs+3)^0,w,c
  4744   001E40  6E0C               	movwf	(??___flmul+3)^0,c
  4745   001E42  5009               	movf	??___flmul^0,w,c
  4746   001E44  100A               	iorwf	(??___flmul+1)^0,w,c
  4747   001E46  100B               	iorwf	(??___flmul+2)^0,w,c
  4748   001E48  100C               	iorwf	(??___flmul+3)^0,w,c
  4749   001E4A  B4D8               	btfsc	status,2,c
  4750   001E4C  EF2A  F00F         	goto	u3551
  4751   001E50  EF2C  F00F         	goto	u3550
  4752   001E54                     u3551:
  4753   001E54  EF30  F00F         	goto	l1265
  4754   001E58                     u3550:
  4755   001E58                     l4159:
  4756   001E58  0E01               	movlw	1
  4757   001E5A  6E12               	movwf	___flmul@aexp^0,c
  4758   001E5C  EF39  F00F         	goto	l1264
  4759   001E60                     l1265:
  4760   001E60  A014               	btfss	___flmul@prod^0,0,c
  4761   001E62  EF35  F00F         	goto	u3561
  4762   001E66  EF37  F00F         	goto	u3560
  4763   001E6A                     u3561:
  4764   001E6A  EF39  F00F         	goto	l1264
  4765   001E6E                     u3560:
  4766   001E6E  EF2C  F00F         	goto	l4159
  4767   001E72                     l1264:
  4768   001E72  5012               	movf	___flmul@aexp^0,w,c
  4769   001E74  B4D8               	btfsc	status,2,c
  4770   001E76  EF3F  F00F         	goto	u3571
  4771   001E7A  EF41  F00F         	goto	u3570
  4772   001E7E                     u3571:
  4773   001E7E  EF65  F00F         	goto	l4171
  4774   001E82                     u3570:
  4775   001E82  0E01               	movlw	1
  4776   001E84  2614               	addwf	___flmul@prod^0,f,c
  4777   001E86  0E00               	movlw	0
  4778   001E88  2215               	addwfc	(___flmul@prod+1)^0,f,c
  4779   001E8A  2216               	addwfc	(___flmul@prod+2)^0,f,c
  4780   001E8C  2217               	addwfc	(___flmul@prod+3)^0,f,c
  4781   001E8E  A017               	btfss	(___flmul@prod+3)^0,0,c
  4782   001E90  EF4C  F00F         	goto	u3581
  4783   001E94  EF4E  F00F         	goto	u3580
  4784   001E98                     u3581:
  4785   001E98  EF65  F00F         	goto	l4171
  4786   001E9C                     u3580:
  4787   001E9C  C014  F009         	movff	___flmul@prod,??___flmul
  4788   001EA0  C015  F00A         	movff	___flmul@prod+1,??___flmul+1
  4789   001EA4  C016  F00B         	movff	___flmul@prod+2,??___flmul+2
  4790   001EA8  C017  F00C         	movff	___flmul@prod+3,??___flmul+3
  4791   001EAC  340C               	rlcf	(??___flmul+3)^0,w,c
  4792   001EAE  320C               	rrcf	(??___flmul+3)^0,f,c
  4793   001EB0  320B               	rrcf	(??___flmul+2)^0,f,c
  4794   001EB2  320A               	rrcf	(??___flmul+1)^0,f,c
  4795   001EB4  3209               	rrcf	??___flmul^0,f,c
  4796   001EB6  C009  F014         	movff	??___flmul,___flmul@prod
  4797   001EBA  C00A  F015         	movff	??___flmul+1,___flmul@prod+1
  4798   001EBE  C00B  F016         	movff	??___flmul+2,___flmul@prod+2
  4799   001EC2  C00C  F017         	movff	??___flmul+3,___flmul@prod+3
  4800   001EC6  4A18               	infsnz	___flmul@temp^0,f,c
  4801   001EC8  2A19               	incf	(___flmul@temp+1)^0,f,c
  4802   001ECA                     l4171:
  4803   001ECA  BE19               	btfsc	(___flmul@temp+1)^0,7,c
  4804   001ECC  EF70  F00F         	goto	u3591
  4805   001ED0  5019               	movf	(___flmul@temp+1)^0,w,c
  4806   001ED2  E108               	bnz	u3590
  4807   001ED4  2818               	incf	___flmul@temp^0,w,c
  4808   001ED6  A0D8               	btfss	status,0,c
  4809   001ED8  EF70  F00F         	goto	u3591
  4810   001EDC  EF72  F00F         	goto	u3590
  4811   001EE0                     u3591:
  4812   001EE0  EF7C  F00F         	goto	l4175
  4813   001EE4                     u3590:
  4814   001EE4  0E00               	movlw	0
  4815   001EE6  6E14               	movwf	___flmul@prod^0,c
  4816   001EE8  0E00               	movlw	0
  4817   001EEA  6E15               	movwf	(___flmul@prod+1)^0,c
  4818   001EEC  0E80               	movlw	128
  4819   001EEE  6E16               	movwf	(___flmul@prod+2)^0,c
  4820   001EF0  0E7F               	movlw	127
  4821   001EF2  6E17               	movwf	(___flmul@prod+3)^0,c
  4822   001EF4  EFAA  F00F         	goto	l4187
  4823   001EF8                     l4175:
  4824   001EF8  BE19               	btfsc	(___flmul@temp+1)^0,7,c
  4825   001EFA  EF89  F00F         	goto	u3600
  4826   001EFE  5019               	movf	(___flmul@temp+1)^0,w,c
  4827   001F00  E106               	bnz	u3601
  4828   001F02  0418               	decf	___flmul@temp^0,w,c
  4829   001F04  B0D8               	btfsc	status,0,c
  4830   001F06  EF87  F00F         	goto	u3601
  4831   001F0A  EF89  F00F         	goto	u3600
  4832   001F0E                     u3601:
  4833   001F0E  EF95  F00F         	goto	l1272
  4834   001F12                     u3600:
  4835   001F12  0E00               	movlw	0
  4836   001F14  6E14               	movwf	___flmul@prod^0,c
  4837   001F16  0E00               	movlw	0
  4838   001F18  6E15               	movwf	(___flmul@prod+1)^0,c
  4839   001F1A  0E00               	movlw	0
  4840   001F1C  6E16               	movwf	(___flmul@prod+2)^0,c
  4841   001F1E  0E00               	movlw	0
  4842   001F20  6E17               	movwf	(___flmul@prod+3)^0,c
  4843   001F22  0E00               	movlw	0
  4844   001F24  6E0D               	movwf	___flmul@sign^0,c
  4845   001F26  EFAA  F00F         	goto	l4187
  4846   001F2A                     l1272:
  4847   001F2A  C018  F013         	movff	___flmul@temp,___flmul@bexp
  4848   001F2E  0EFF               	movlw	255
  4849   001F30  1614               	andwf	___flmul@prod^0,f,c
  4850   001F32  0EFF               	movlw	255
  4851   001F34  1615               	andwf	(___flmul@prod+1)^0,f,c
  4852   001F36  0E7F               	movlw	127
  4853   001F38  1616               	andwf	(___flmul@prod+2)^0,f,c
  4854   001F3A  0E00               	movlw	0
  4855   001F3C  1617               	andwf	(___flmul@prod+3)^0,f,c
  4856   001F3E  A013               	btfss	___flmul@bexp^0,0,c
  4857   001F40  EFA4  F00F         	goto	u3611
  4858   001F44  EFA6  F00F         	goto	u3610
  4859   001F48                     u3611:
  4860   001F48  EFA7  F00F         	goto	l4185
  4861   001F4C                     u3610:
  4862   001F4C  8E16               	bsf	(___flmul@prod+2)^0,7,c
  4863   001F4E                     l4185:
  4864   001F4E  90D8               	bcf	status,0,c
  4865   001F50  3013               	rrcf	___flmul@bexp^0,w,c
  4866   001F52  6E17               	movwf	(___flmul@prod+3)^0,c
  4867   001F54                     l4187:
  4868   001F54  500D               	movf	___flmul@sign^0,w,c
  4869   001F56  1217               	iorwf	(___flmul@prod+3)^0,f,c
  4870   001F58  C014  F001         	movff	___flmul@prod,?___flmul
  4871   001F5C  C015  F002         	movff	___flmul@prod+1,?___flmul+1
  4872   001F60  C016  F003         	movff	___flmul@prod+2,?___flmul+2
  4873   001F64  C017  F004         	movff	___flmul@prod+3,?___flmul+3
  4874   001F68                     l1259:
  4875   001F68  0012               	return		;funcret
  4876   001F6A                     __end_of___flmul:
  4877                           	callstack 0
  4878                           
  4879 ;; *************** function ___flge *****************
  4880 ;; Defined at:
  4881 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;  ff1             4    0[COMRAM] unsigned char 
  4884 ;;  ff2             4    4[COMRAM] unsigned char 
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;		None
  4887 ;; Return value:  Size  Location     Type
  4888 ;;		None               void
  4889 ;; Registers used:
  4890 ;;		wreg, status,2, status,0
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4896 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4898 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4899 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4900 ;;Total ram usage:       12 bytes
  4901 ;; Hardware stack levels used: 1
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		_convert_rgb2hue
  4906 ;;		_main
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           	psect	text14
  4911   002FFE                     __ptext14:
  4912                           	callstack 0
  4913   002FFE                     ___flge:
  4914                           	callstack 28
  4915   002FFE  0E00               	movlw	0
  4916   003000  1401               	andwf	___flge@ff1^0,w,c
  4917   003002  6E09               	movwf	??___flge^0,c
  4918   003004  0E00               	movlw	0
  4919   003006  1402               	andwf	(___flge@ff1+1)^0,w,c
  4920   003008  6E0A               	movwf	(??___flge+1)^0,c
  4921   00300A  0E80               	movlw	128
  4922   00300C  1403               	andwf	(___flge@ff1+2)^0,w,c
  4923   00300E  6E0B               	movwf	(??___flge+2)^0,c
  4924   003010  0E7F               	movlw	127
  4925   003012  1404               	andwf	(___flge@ff1+3)^0,w,c
  4926   003014  6E0C               	movwf	(??___flge+3)^0,c
  4927   003016  5009               	movf	??___flge^0,w,c
  4928   003018  100A               	iorwf	(??___flge+1)^0,w,c
  4929   00301A  100B               	iorwf	(??___flge+2)^0,w,c
  4930   00301C  100C               	iorwf	(??___flge+3)^0,w,c
  4931   00301E  A4D8               	btfss	status,2,c
  4932   003020  EF14  F018         	goto	u3651
  4933   003024  EF16  F018         	goto	u3650
  4934   003028                     u3651:
  4935   003028  EF1E  F018         	goto	l4219
  4936   00302C                     u3650:
  4937   00302C  0E00               	movlw	0
  4938   00302E  6E01               	movwf	___flge@ff1^0,c
  4939   003030  0E00               	movlw	0
  4940   003032  6E02               	movwf	(___flge@ff1+1)^0,c
  4941   003034  0E00               	movlw	0
  4942   003036  6E03               	movwf	(___flge@ff1+2)^0,c
  4943   003038  0E00               	movlw	0
  4944   00303A  6E04               	movwf	(___flge@ff1+3)^0,c
  4945   00303C                     l4219:
  4946   00303C  0E00               	movlw	0
  4947   00303E  1405               	andwf	___flge@ff2^0,w,c
  4948   003040  6E09               	movwf	??___flge^0,c
  4949   003042  0E00               	movlw	0
  4950   003044  1406               	andwf	(___flge@ff2+1)^0,w,c
  4951   003046  6E0A               	movwf	(??___flge+1)^0,c
  4952   003048  0E80               	movlw	128
  4953   00304A  1407               	andwf	(___flge@ff2+2)^0,w,c
  4954   00304C  6E0B               	movwf	(??___flge+2)^0,c
  4955   00304E  0E7F               	movlw	127
  4956   003050  1408               	andwf	(___flge@ff2+3)^0,w,c
  4957   003052  6E0C               	movwf	(??___flge+3)^0,c
  4958   003054  5009               	movf	??___flge^0,w,c
  4959   003056  100A               	iorwf	(??___flge+1)^0,w,c
  4960   003058  100B               	iorwf	(??___flge+2)^0,w,c
  4961   00305A  100C               	iorwf	(??___flge+3)^0,w,c
  4962   00305C  A4D8               	btfss	status,2,c
  4963   00305E  EF33  F018         	goto	u3661
  4964   003062  EF35  F018         	goto	u3660
  4965   003066                     u3661:
  4966   003066  EF3D  F018         	goto	l4223
  4967   00306A                     u3660:
  4968   00306A  0E00               	movlw	0
  4969   00306C  6E05               	movwf	___flge@ff2^0,c
  4970   00306E  0E00               	movlw	0
  4971   003070  6E06               	movwf	(___flge@ff2+1)^0,c
  4972   003072  0E00               	movlw	0
  4973   003074  6E07               	movwf	(___flge@ff2+2)^0,c
  4974   003076  0E00               	movlw	0
  4975   003078  6E08               	movwf	(___flge@ff2+3)^0,c
  4976   00307A                     l4223:
  4977   00307A  AE04               	btfss	(___flge@ff1+3)^0,7,c
  4978   00307C  EF42  F018         	goto	u3671
  4979   003080  EF44  F018         	goto	u3670
  4980   003084                     u3671:
  4981   003084  EF4D  F018         	goto	l4227
  4982   003088                     u3670:
  4983   003088  6C01               	negf	___flge@ff1^0,c
  4984   00308A  1E02               	comf	(___flge@ff1+1)^0,f,c
  4985   00308C  B0D8               	btfsc	status,0,c
  4986   00308E  2A02               	incf	(___flge@ff1+1)^0,f,c
  4987   003090  1E03               	comf	(___flge@ff1+2)^0,f,c
  4988   003092  B0D8               	btfsc	status,0,c
  4989   003094  2A03               	incf	(___flge@ff1+2)^0,f,c
  4990   003096  0E80               	movlw	128
  4991   003098  5604               	subfwb	(___flge@ff1+3)^0,f,c
  4992   00309A                     l4227:
  4993   00309A  AE08               	btfss	(___flge@ff2+3)^0,7,c
  4994   00309C  EF52  F018         	goto	u3681
  4995   0030A0  EF54  F018         	goto	u3680
  4996   0030A4                     u3681:
  4997   0030A4  EF5D  F018         	goto	l906
  4998   0030A8                     u3680:
  4999   0030A8  6C05               	negf	___flge@ff2^0,c
  5000   0030AA  1E06               	comf	(___flge@ff2+1)^0,f,c
  5001   0030AC  B0D8               	btfsc	status,0,c
  5002   0030AE  2A06               	incf	(___flge@ff2+1)^0,f,c
  5003   0030B0  1E07               	comf	(___flge@ff2+2)^0,f,c
  5004   0030B2  B0D8               	btfsc	status,0,c
  5005   0030B4  2A07               	incf	(___flge@ff2+2)^0,f,c
  5006   0030B6  0E80               	movlw	128
  5007   0030B8  5608               	subfwb	(___flge@ff2+3)^0,f,c
  5008   0030BA                     l906:
  5009   0030BA  0E00               	movlw	0
  5010   0030BC  1A01               	xorwf	___flge@ff1^0,f,c
  5011   0030BE  0E00               	movlw	0
  5012   0030C0  1A02               	xorwf	(___flge@ff1+1)^0,f,c
  5013   0030C2  0E00               	movlw	0
  5014   0030C4  1A03               	xorwf	(___flge@ff1+2)^0,f,c
  5015   0030C6  0E80               	movlw	128
  5016   0030C8  1A04               	xorwf	(___flge@ff1+3)^0,f,c
  5017   0030CA  0E00               	movlw	0
  5018   0030CC  1A05               	xorwf	___flge@ff2^0,f,c
  5019   0030CE  0E00               	movlw	0
  5020   0030D0  1A06               	xorwf	(___flge@ff2+1)^0,f,c
  5021   0030D2  0E00               	movlw	0
  5022   0030D4  1A07               	xorwf	(___flge@ff2+2)^0,f,c
  5023   0030D6  0E80               	movlw	128
  5024   0030D8  1A08               	xorwf	(___flge@ff2+3)^0,f,c
  5025   0030DA  5005               	movf	___flge@ff2^0,w,c
  5026   0030DC  5C01               	subwf	___flge@ff1^0,w,c
  5027   0030DE  5006               	movf	(___flge@ff2+1)^0,w,c
  5028   0030E0  5802               	subwfb	(___flge@ff1+1)^0,w,c
  5029   0030E2  5007               	movf	(___flge@ff2+2)^0,w,c
  5030   0030E4  5803               	subwfb	(___flge@ff1+2)^0,w,c
  5031   0030E6  5008               	movf	(___flge@ff2+3)^0,w,c
  5032   0030E8  5804               	subwfb	(___flge@ff1+3)^0,w,c
  5033   0030EA  B0D8               	btfsc	status,0,c
  5034   0030EC  EF7A  F018         	goto	u3691
  5035   0030F0  EF7C  F018         	goto	u3690
  5036   0030F4                     u3691:
  5037   0030F4  EF7F  F018         	goto	l4233
  5038   0030F8                     u3690:
  5039   0030F8  90D8               	bcf	status,0,c
  5040   0030FA  EF80  F018         	goto	l911
  5041   0030FE                     l4233:
  5042   0030FE  80D8               	bsf	status,0,c
  5043   003100                     l911:
  5044   003100  0012               	return		;funcret
  5045   003102                     __end_of___flge:
  5046                           	callstack 0
  5047                           
  5048 ;; *************** function ___fleq *****************
  5049 ;; Defined at:
  5050 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;  ff1             4    0[COMRAM] unsigned char 
  5053 ;;  ff2             4    4[COMRAM] unsigned char 
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;		None               void
  5058 ;; Registers used:
  5059 ;;		wreg, status,2, status,0
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5065 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5067 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5068 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5069 ;;Total ram usage:       12 bytes
  5070 ;; Hardware stack levels used: 1
  5071 ;; This function calls:
  5072 ;;		Nothing
  5073 ;; This function is called by:
  5074 ;;		_convert_rgb2hue
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           	psect	text15
  5079   0035AC                     __ptext15:
  5080                           	callstack 0
  5081   0035AC                     ___fleq:
  5082                           	callstack 28
  5083   0035AC  0E00               	movlw	0
  5084   0035AE  1401               	andwf	___fleq@ff1^0,w,c
  5085   0035B0  6E09               	movwf	??___fleq^0,c
  5086   0035B2  0E00               	movlw	0
  5087   0035B4  1402               	andwf	(___fleq@ff1+1)^0,w,c
  5088   0035B6  6E0A               	movwf	(??___fleq+1)^0,c
  5089   0035B8  0E80               	movlw	128
  5090   0035BA  1403               	andwf	(___fleq@ff1+2)^0,w,c
  5091   0035BC  6E0B               	movwf	(??___fleq+2)^0,c
  5092   0035BE  0E7F               	movlw	127
  5093   0035C0  1404               	andwf	(___fleq@ff1+3)^0,w,c
  5094   0035C2  6E0C               	movwf	(??___fleq+3)^0,c
  5095   0035C4  5009               	movf	??___fleq^0,w,c
  5096   0035C6  100A               	iorwf	(??___fleq+1)^0,w,c
  5097   0035C8  100B               	iorwf	(??___fleq+2)^0,w,c
  5098   0035CA  100C               	iorwf	(??___fleq+3)^0,w,c
  5099   0035CC  A4D8               	btfss	status,2,c
  5100   0035CE  EFEB  F01A         	goto	u3621
  5101   0035D2  EFED  F01A         	goto	u3620
  5102   0035D6                     u3621:
  5103   0035D6  EFF5  F01A         	goto	l4203
  5104   0035DA                     u3620:
  5105   0035DA  0E00               	movlw	0
  5106   0035DC  6E01               	movwf	___fleq@ff1^0,c
  5107   0035DE  0E00               	movlw	0
  5108   0035E0  6E02               	movwf	(___fleq@ff1+1)^0,c
  5109   0035E2  0E00               	movlw	0
  5110   0035E4  6E03               	movwf	(___fleq@ff1+2)^0,c
  5111   0035E6  0E00               	movlw	0
  5112   0035E8  6E04               	movwf	(___fleq@ff1+3)^0,c
  5113   0035EA                     l4203:
  5114   0035EA  0E00               	movlw	0
  5115   0035EC  1405               	andwf	___fleq@ff2^0,w,c
  5116   0035EE  6E09               	movwf	??___fleq^0,c
  5117   0035F0  0E00               	movlw	0
  5118   0035F2  1406               	andwf	(___fleq@ff2+1)^0,w,c
  5119   0035F4  6E0A               	movwf	(??___fleq+1)^0,c
  5120   0035F6  0E80               	movlw	128
  5121   0035F8  1407               	andwf	(___fleq@ff2+2)^0,w,c
  5122   0035FA  6E0B               	movwf	(??___fleq+2)^0,c
  5123   0035FC  0E7F               	movlw	127
  5124   0035FE  1408               	andwf	(___fleq@ff2+3)^0,w,c
  5125   003600  6E0C               	movwf	(??___fleq+3)^0,c
  5126   003602  5009               	movf	??___fleq^0,w,c
  5127   003604  100A               	iorwf	(??___fleq+1)^0,w,c
  5128   003606  100B               	iorwf	(??___fleq+2)^0,w,c
  5129   003608  100C               	iorwf	(??___fleq+3)^0,w,c
  5130   00360A  A4D8               	btfss	status,2,c
  5131   00360C  EF0A  F01B         	goto	u3631
  5132   003610  EF0C  F01B         	goto	u3630
  5133   003614                     u3631:
  5134   003614  EF14  F01B         	goto	l4207
  5135   003618                     u3630:
  5136   003618  0E00               	movlw	0
  5137   00361A  6E05               	movwf	___fleq@ff2^0,c
  5138   00361C  0E00               	movlw	0
  5139   00361E  6E06               	movwf	(___fleq@ff2+1)^0,c
  5140   003620  0E00               	movlw	0
  5141   003622  6E07               	movwf	(___fleq@ff2+2)^0,c
  5142   003624  0E00               	movlw	0
  5143   003626  6E08               	movwf	(___fleq@ff2+3)^0,c
  5144   003628                     l4207:
  5145   003628  5005               	movf	___fleq@ff2^0,w,c
  5146   00362A  1801               	xorwf	___fleq@ff1^0,w,c
  5147   00362C  E10F               	bnz	u3640
  5148   00362E  5006               	movf	(___fleq@ff2+1)^0,w,c
  5149   003630  1802               	xorwf	(___fleq@ff1+1)^0,w,c
  5150   003632  E10C               	bnz	u3640
  5151   003634  5007               	movf	(___fleq@ff2+2)^0,w,c
  5152   003636  1803               	xorwf	(___fleq@ff1+2)^0,w,c
  5153   003638  E109               	bnz	u3640
  5154   00363A  5008               	movf	(___fleq@ff2+3)^0,w,c
  5155   00363C  1804               	xorwf	(___fleq@ff1+3)^0,w,c
  5156   00363E  B4D8               	btfsc	status,2,c
  5157   003640  EF24  F01B         	goto	u3641
  5158   003644  EF26  F01B         	goto	u3640
  5159   003648                     u3641:
  5160   003648  EF29  F01B         	goto	l4211
  5161   00364C                     u3640:
  5162   00364C  90D8               	bcf	status,0,c
  5163   00364E  EF2A  F01B         	goto	l900
  5164   003652                     l4211:
  5165   003652  80D8               	bsf	status,0,c
  5166   003654                     l900:
  5167   003654  0012               	return		;funcret
  5168   003656                     __end_of___fleq:
  5169                           	callstack 0
  5170                           
  5171 ;; *************** function ___fldiv *****************
  5172 ;; Defined at:
  5173 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  b               4   24[COMRAM] unsigned char 
  5176 ;;  a               4   28[COMRAM] unsigned char 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;  grs             4   43[COMRAM] unsigned long 
  5179 ;;  rem             4   36[COMRAM] unsigned long 
  5180 ;;  new_exp         2   41[COMRAM] short 
  5181 ;;  aexp            1   48[COMRAM] unsigned char 
  5182 ;;  bexp            1   47[COMRAM] unsigned char 
  5183 ;;  sign            1   40[COMRAM] unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  4   24[COMRAM] unsigned char 
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, status,0
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5193 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5194 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5195 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5196 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5197 ;;Total ram usage:       25 bytes
  5198 ;; Hardware stack levels used: 1
  5199 ;; This function calls:
  5200 ;;		Nothing
  5201 ;; This function is called by:
  5202 ;;		_convert_rgb2hue
  5203 ;;		_main
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text16
  5208   001F6A                     __ptext16:
  5209                           	callstack 0
  5210   001F6A                     ___fldiv:
  5211                           	callstack 28
  5212   001F6A  501C               	movf	(___fldiv@b+3)^0,w,c
  5213   001F6C  0B80               	andlw	128
  5214   001F6E  6E29               	movwf	___fldiv@sign^0,c
  5215   001F70  501C               	movf	(___fldiv@b+3)^0,w,c
  5216   001F72  241C               	addwf	(___fldiv@b+3)^0,w,c
  5217   001F74  6E30               	movwf	___fldiv@bexp^0,c
  5218   001F76  AE1B               	btfss	(___fldiv@b+2)^0,7,c
  5219   001F78  EFC0  F00F         	goto	u3201
  5220   001F7C  EFC2  F00F         	goto	u3200
  5221   001F80                     u3201:
  5222   001F80  EFC3  F00F         	goto	l3931
  5223   001F84                     u3200:
  5224   001F84  8030               	bsf	___fldiv@bexp^0,0,c
  5225   001F86                     l3931:
  5226   001F86  5030               	movf	___fldiv@bexp^0,w,c
  5227   001F88  B4D8               	btfsc	status,2,c
  5228   001F8A  EFC9  F00F         	goto	u3211
  5229   001F8E  EFCB  F00F         	goto	u3210
  5230   001F92                     u3211:
  5231   001F92  EFE0  F00F         	goto	l3941
  5232   001F96                     u3210:
  5233   001F96  2830               	incf	___fldiv@bexp^0,w,c
  5234   001F98  A4D8               	btfss	status,2,c
  5235   001F9A  EFD1  F00F         	goto	u3221
  5236   001F9E  EFD3  F00F         	goto	u3220
  5237   001FA2                     u3221:
  5238   001FA2  EFDB  F00F         	goto	l3937
  5239   001FA6                     u3220:
  5240   001FA6  0E00               	movlw	0
  5241   001FA8  6E19               	movwf	___fldiv@b^0,c
  5242   001FAA  0E00               	movlw	0
  5243   001FAC  6E1A               	movwf	(___fldiv@b+1)^0,c
  5244   001FAE  0E00               	movlw	0
  5245   001FB0  6E1B               	movwf	(___fldiv@b+2)^0,c
  5246   001FB2  0E00               	movlw	0
  5247   001FB4  6E1C               	movwf	(___fldiv@b+3)^0,c
  5248   001FB6                     l3937:
  5249   001FB6  8E1B               	bsf	(___fldiv@b+2)^0,7,c
  5250   001FB8  0E00               	movlw	0
  5251   001FBA  6E1C               	movwf	(___fldiv@b+3)^0,c
  5252   001FBC  EFE8  F00F         	goto	l3943
  5253   001FC0                     l3941:
  5254   001FC0  0E00               	movlw	0
  5255   001FC2  6E19               	movwf	___fldiv@b^0,c
  5256   001FC4  0E00               	movlw	0
  5257   001FC6  6E1A               	movwf	(___fldiv@b+1)^0,c
  5258   001FC8  0E00               	movlw	0
  5259   001FCA  6E1B               	movwf	(___fldiv@b+2)^0,c
  5260   001FCC  0E00               	movlw	0
  5261   001FCE  6E1C               	movwf	(___fldiv@b+3)^0,c
  5262   001FD0                     l3943:
  5263   001FD0  5020               	movf	(___fldiv@a+3)^0,w,c
  5264   001FD2  0B80               	andlw	128
  5265   001FD4  1A29               	xorwf	___fldiv@sign^0,f,c
  5266   001FD6  5020               	movf	(___fldiv@a+3)^0,w,c
  5267   001FD8  2420               	addwf	(___fldiv@a+3)^0,w,c
  5268   001FDA  6E31               	movwf	___fldiv@aexp^0,c
  5269   001FDC  AE1F               	btfss	(___fldiv@a+2)^0,7,c
  5270   001FDE  EFF3  F00F         	goto	u3231
  5271   001FE2  EFF5  F00F         	goto	u3230
  5272   001FE6                     u3231:
  5273   001FE6  EFF6  F00F         	goto	l3951
  5274   001FEA                     u3230:
  5275   001FEA  8031               	bsf	___fldiv@aexp^0,0,c
  5276   001FEC                     l3951:
  5277   001FEC  5031               	movf	___fldiv@aexp^0,w,c
  5278   001FEE  B4D8               	btfsc	status,2,c
  5279   001FF0  EFFC  F00F         	goto	u3241
  5280   001FF4  EFFE  F00F         	goto	u3240
  5281   001FF8                     u3241:
  5282   001FF8  EF13  F010         	goto	l3961
  5283   001FFC                     u3240:
  5284   001FFC  2831               	incf	___fldiv@aexp^0,w,c
  5285   001FFE  A4D8               	btfss	status,2,c
  5286   002000  EF04  F010         	goto	u3251
  5287   002004  EF06  F010         	goto	u3250
  5288   002008                     u3251:
  5289   002008  EF0E  F010         	goto	l3957
  5290   00200C                     u3250:
  5291   00200C  0E00               	movlw	0
  5292   00200E  6E1D               	movwf	___fldiv@a^0,c
  5293   002010  0E00               	movlw	0
  5294   002012  6E1E               	movwf	(___fldiv@a+1)^0,c
  5295   002014  0E00               	movlw	0
  5296   002016  6E1F               	movwf	(___fldiv@a+2)^0,c
  5297   002018  0E00               	movlw	0
  5298   00201A  6E20               	movwf	(___fldiv@a+3)^0,c
  5299   00201C                     l3957:
  5300   00201C  8E1F               	bsf	(___fldiv@a+2)^0,7,c
  5301   00201E  0E00               	movlw	0
  5302   002020  6E20               	movwf	(___fldiv@a+3)^0,c
  5303   002022  EF1B  F010         	goto	l3963
  5304   002026                     l3961:
  5305   002026  0E00               	movlw	0
  5306   002028  6E1D               	movwf	___fldiv@a^0,c
  5307   00202A  0E00               	movlw	0
  5308   00202C  6E1E               	movwf	(___fldiv@a+1)^0,c
  5309   00202E  0E00               	movlw	0
  5310   002030  6E1F               	movwf	(___fldiv@a+2)^0,c
  5311   002032  0E00               	movlw	0
  5312   002034  6E20               	movwf	(___fldiv@a+3)^0,c
  5313   002036                     l3963:
  5314   002036  501D               	movf	___fldiv@a^0,w,c
  5315   002038  101E               	iorwf	(___fldiv@a+1)^0,w,c
  5316   00203A  101F               	iorwf	(___fldiv@a+2)^0,w,c
  5317   00203C  1020               	iorwf	(___fldiv@a+3)^0,w,c
  5318   00203E  A4D8               	btfss	status,2,c
  5319   002040  EF24  F010         	goto	u3261
  5320   002044  EF26  F010         	goto	u3260
  5321   002048                     u3261:
  5322   002048  EF3E  F010         	goto	l3975
  5323   00204C                     u3260:
  5324   00204C  0E00               	movlw	0
  5325   00204E  6E19               	movwf	___fldiv@b^0,c
  5326   002050  0E00               	movlw	0
  5327   002052  6E1A               	movwf	(___fldiv@b+1)^0,c
  5328   002054  0E00               	movlw	0
  5329   002056  6E1B               	movwf	(___fldiv@b+2)^0,c
  5330   002058  0E00               	movlw	0
  5331   00205A  6E1C               	movwf	(___fldiv@b+3)^0,c
  5332   00205C  0E80               	movlw	128
  5333   00205E  121B               	iorwf	(___fldiv@b+2)^0,f,c
  5334   002060  0E7F               	movlw	127
  5335   002062  121C               	iorwf	(___fldiv@b+3)^0,f,c
  5336   002064                     l3969:
  5337   002064  5029               	movf	___fldiv@sign^0,w,c
  5338   002066  121C               	iorwf	(___fldiv@b+3)^0,f,c
  5339   002068  C019  F019         	movff	___fldiv@b,?___fldiv
  5340   00206C  C01A  F01A         	movff	___fldiv@b+1,?___fldiv+1
  5341   002070  C01B  F01B         	movff	___fldiv@b+2,?___fldiv+2
  5342   002074  C01C  F01C         	movff	___fldiv@b+3,?___fldiv+3
  5343   002078  EF81  F011         	goto	l1223
  5344   00207C                     l3975:
  5345   00207C  5030               	movf	___fldiv@bexp^0,w,c
  5346   00207E  A4D8               	btfss	status,2,c
  5347   002080  EF44  F010         	goto	u3271
  5348   002084  EF46  F010         	goto	u3270
  5349   002088                     u3271:
  5350   002088  EF50  F010         	goto	l3983
  5351   00208C                     u3270:
  5352   00208C  0E00               	movlw	0
  5353   00208E  6E19               	movwf	?___fldiv^0,c
  5354   002090  0E00               	movlw	0
  5355   002092  6E1A               	movwf	(?___fldiv+1)^0,c
  5356   002094  0E00               	movlw	0
  5357   002096  6E1B               	movwf	(?___fldiv+2)^0,c
  5358   002098  0E00               	movlw	0
  5359   00209A  6E1C               	movwf	(?___fldiv+3)^0,c
  5360   00209C  EF81  F011         	goto	l1223
  5361   0020A0                     l3983:
  5362   0020A0  5031               	movf	___fldiv@aexp^0,w,c
  5363   0020A2  C030  F021         	movff	___fldiv@bexp,??___fldiv
  5364   0020A6  6A22               	clrf	(??___fldiv+1)^0,c
  5365   0020A8  5E21               	subwf	??___fldiv^0,f,c
  5366   0020AA  0E00               	movlw	0
  5367   0020AC  5A22               	subwfb	(??___fldiv+1)^0,f,c
  5368   0020AE  0E7F               	movlw	127
  5369   0020B0  2421               	addwf	??___fldiv^0,w,c
  5370   0020B2  6E2A               	movwf	___fldiv@new_exp^0,c
  5371   0020B4  0E00               	movlw	0
  5372   0020B6  2022               	addwfc	(??___fldiv+1)^0,w,c
  5373   0020B8  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  5374   0020BA  C019  F025         	movff	___fldiv@b,___fldiv@rem
  5375   0020BE  C01A  F026         	movff	___fldiv@b+1,___fldiv@rem+1
  5376   0020C2  C01B  F027         	movff	___fldiv@b+2,___fldiv@rem+2
  5377   0020C6  C01C  F028         	movff	___fldiv@b+3,___fldiv@rem+3
  5378   0020CA  0E00               	movlw	0
  5379   0020CC  6E19               	movwf	___fldiv@b^0,c
  5380   0020CE  0E00               	movlw	0
  5381   0020D0  6E1A               	movwf	(___fldiv@b+1)^0,c
  5382   0020D2  0E00               	movlw	0
  5383   0020D4  6E1B               	movwf	(___fldiv@b+2)^0,c
  5384   0020D6  0E00               	movlw	0
  5385   0020D8  6E1C               	movwf	(___fldiv@b+3)^0,c
  5386   0020DA  0E00               	movlw	0
  5387   0020DC  6E2C               	movwf	___fldiv@grs^0,c
  5388   0020DE  0E00               	movlw	0
  5389   0020E0  6E2D               	movwf	(___fldiv@grs+1)^0,c
  5390   0020E2  0E00               	movlw	0
  5391   0020E4  6E2E               	movwf	(___fldiv@grs+2)^0,c
  5392   0020E6  0E00               	movlw	0
  5393   0020E8  6E2F               	movwf	(___fldiv@grs+3)^0,c
  5394   0020EA  0E00               	movlw	0
  5395   0020EC  6E31               	movwf	___fldiv@aexp^0,c
  5396   0020EE  EFB1  F010         	goto	l1225
  5397   0020F2                     l3993:
  5398   0020F2  5031               	movf	___fldiv@aexp^0,w,c
  5399   0020F4  B4D8               	btfsc	status,2,c
  5400   0020F6  EF7F  F010         	goto	u3281
  5401   0020FA  EF81  F010         	goto	u3280
  5402   0020FE                     u3281:
  5403   0020FE  EF98  F010         	goto	l4001
  5404   002102                     u3280:
  5405   002102  90D8               	bcf	status,0,c
  5406   002104  3625               	rlcf	___fldiv@rem^0,f,c
  5407   002106  3626               	rlcf	(___fldiv@rem+1)^0,f,c
  5408   002108  3627               	rlcf	(___fldiv@rem+2)^0,f,c
  5409   00210A  3628               	rlcf	(___fldiv@rem+3)^0,f,c
  5410   00210C  90D8               	bcf	status,0,c
  5411   00210E  3619               	rlcf	___fldiv@b^0,f,c
  5412   002110  361A               	rlcf	(___fldiv@b+1)^0,f,c
  5413   002112  361B               	rlcf	(___fldiv@b+2)^0,f,c
  5414   002114  361C               	rlcf	(___fldiv@b+3)^0,f,c
  5415   002116  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  5416   002118  EF90  F010         	goto	u3291
  5417   00211C  EF92  F010         	goto	u3290
  5418   002120                     u3291:
  5419   002120  EF93  F010         	goto	l1228
  5420   002124                     u3290:
  5421   002124  8019               	bsf	___fldiv@b^0,0,c
  5422   002126                     l1228:
  5423   002126  90D8               	bcf	status,0,c
  5424   002128  362C               	rlcf	___fldiv@grs^0,f,c
  5425   00212A  362D               	rlcf	(___fldiv@grs+1)^0,f,c
  5426   00212C  362E               	rlcf	(___fldiv@grs+2)^0,f,c
  5427   00212E  362F               	rlcf	(___fldiv@grs+3)^0,f,c
  5428   002130                     l4001:
  5429   002130  501D               	movf	___fldiv@a^0,w,c
  5430   002132  5C25               	subwf	___fldiv@rem^0,w,c
  5431   002134  501E               	movf	(___fldiv@a+1)^0,w,c
  5432   002136  5826               	subwfb	(___fldiv@rem+1)^0,w,c
  5433   002138  501F               	movf	(___fldiv@a+2)^0,w,c
  5434   00213A  5827               	subwfb	(___fldiv@rem+2)^0,w,c
  5435   00213C  5020               	movf	(___fldiv@a+3)^0,w,c
  5436   00213E  5828               	subwfb	(___fldiv@rem+3)^0,w,c
  5437   002140  A0D8               	btfss	status,0,c
  5438   002142  EFA5  F010         	goto	u3301
  5439   002146  EFA7  F010         	goto	u3300
  5440   00214A                     u3301:
  5441   00214A  EFB0  F010         	goto	l4007
  5442   00214E                     u3300:
  5443   00214E  8C2F               	bsf	(___fldiv@grs+3)^0,6,c
  5444   002150  501D               	movf	___fldiv@a^0,w,c
  5445   002152  5E25               	subwf	___fldiv@rem^0,f,c
  5446   002154  501E               	movf	(___fldiv@a+1)^0,w,c
  5447   002156  5A26               	subwfb	(___fldiv@rem+1)^0,f,c
  5448   002158  501F               	movf	(___fldiv@a+2)^0,w,c
  5449   00215A  5A27               	subwfb	(___fldiv@rem+2)^0,f,c
  5450   00215C  5020               	movf	(___fldiv@a+3)^0,w,c
  5451   00215E  5A28               	subwfb	(___fldiv@rem+3)^0,f,c
  5452   002160                     l4007:
  5453   002160  2A31               	incf	___fldiv@aexp^0,f,c
  5454   002162                     l1225:
  5455   002162  0E19               	movlw	25
  5456   002164  6431               	cpfsgt	___fldiv@aexp^0,c
  5457   002166  EFB7  F010         	goto	u3311
  5458   00216A  EFB9  F010         	goto	u3310
  5459   00216E                     u3311:
  5460   00216E  EF79  F010         	goto	l3993
  5461   002172                     u3310:
  5462   002172  5025               	movf	___fldiv@rem^0,w,c
  5463   002174  1026               	iorwf	(___fldiv@rem+1)^0,w,c
  5464   002176  1027               	iorwf	(___fldiv@rem+2)^0,w,c
  5465   002178  1028               	iorwf	(___fldiv@rem+3)^0,w,c
  5466   00217A  B4D8               	btfsc	status,2,c
  5467   00217C  EFC2  F010         	goto	u3321
  5468   002180  EFC4  F010         	goto	u3320
  5469   002184                     u3321:
  5470   002184  EFDC  F010         	goto	l4019
  5471   002188                     u3320:
  5472   002188  802C               	bsf	___fldiv@grs^0,0,c
  5473   00218A  EFDC  F010         	goto	l4019
  5474   00218E                     l4013:
  5475   00218E  90D8               	bcf	status,0,c
  5476   002190  3619               	rlcf	___fldiv@b^0,f,c
  5477   002192  361A               	rlcf	(___fldiv@b+1)^0,f,c
  5478   002194  361B               	rlcf	(___fldiv@b+2)^0,f,c
  5479   002196  361C               	rlcf	(___fldiv@b+3)^0,f,c
  5480   002198  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  5481   00219A  EFD1  F010         	goto	u3331
  5482   00219E  EFD3  F010         	goto	u3330
  5483   0021A2                     u3331:
  5484   0021A2  EFD4  F010         	goto	l1234
  5485   0021A6                     u3330:
  5486   0021A6  8019               	bsf	___fldiv@b^0,0,c
  5487   0021A8                     l1234:
  5488   0021A8  90D8               	bcf	status,0,c
  5489   0021AA  362C               	rlcf	___fldiv@grs^0,f,c
  5490   0021AC  362D               	rlcf	(___fldiv@grs+1)^0,f,c
  5491   0021AE  362E               	rlcf	(___fldiv@grs+2)^0,f,c
  5492   0021B0  362F               	rlcf	(___fldiv@grs+3)^0,f,c
  5493   0021B2  062A               	decf	___fldiv@new_exp^0,f,c
  5494   0021B4  A0D8               	btfss	status,0,c
  5495   0021B6  062B               	decf	(___fldiv@new_exp+1)^0,f,c
  5496   0021B8                     l4019:
  5497   0021B8  AE1B               	btfss	(___fldiv@b+2)^0,7,c
  5498   0021BA  EFE1  F010         	goto	u3341
  5499   0021BE  EFE3  F010         	goto	u3340
  5500   0021C2                     u3341:
  5501   0021C2  EFC7  F010         	goto	l4013
  5502   0021C6                     u3340:
  5503   0021C6  0E00               	movlw	0
  5504   0021C8  6E31               	movwf	___fldiv@aexp^0,c
  5505   0021CA  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  5506   0021CC  EFEA  F010         	goto	u3351
  5507   0021D0  EFEC  F010         	goto	u3350
  5508   0021D4                     u3351:
  5509   0021D4  EF10  F011         	goto	l1236
  5510   0021D8                     u3350:
  5511   0021D8  0EFF               	movlw	255
  5512   0021DA  142C               	andwf	___fldiv@grs^0,w,c
  5513   0021DC  6E21               	movwf	??___fldiv^0,c
  5514   0021DE  0EFF               	movlw	255
  5515   0021E0  142D               	andwf	(___fldiv@grs+1)^0,w,c
  5516   0021E2  6E22               	movwf	(??___fldiv+1)^0,c
  5517   0021E4  0EFF               	movlw	255
  5518   0021E6  142E               	andwf	(___fldiv@grs+2)^0,w,c
  5519   0021E8  6E23               	movwf	(??___fldiv+2)^0,c
  5520   0021EA  0E7F               	movlw	127
  5521   0021EC  142F               	andwf	(___fldiv@grs+3)^0,w,c
  5522   0021EE  6E24               	movwf	(??___fldiv+3)^0,c
  5523   0021F0  5021               	movf	??___fldiv^0,w,c
  5524   0021F2  1022               	iorwf	(??___fldiv+1)^0,w,c
  5525   0021F4  1023               	iorwf	(??___fldiv+2)^0,w,c
  5526   0021F6  1024               	iorwf	(??___fldiv+3)^0,w,c
  5527   0021F8  B4D8               	btfsc	status,2,c
  5528   0021FA  EF01  F011         	goto	u3361
  5529   0021FE  EF03  F011         	goto	u3360
  5530   002202                     u3361:
  5531   002202  EF07  F011         	goto	l1237
  5532   002206                     u3360:
  5533   002206                     l4027:
  5534   002206  0E01               	movlw	1
  5535   002208  6E31               	movwf	___fldiv@aexp^0,c
  5536   00220A  EF10  F011         	goto	l1236
  5537   00220E                     l1237:
  5538   00220E  A019               	btfss	___fldiv@b^0,0,c
  5539   002210  EF0C  F011         	goto	u3371
  5540   002214  EF0E  F011         	goto	u3370
  5541   002218                     u3371:
  5542   002218  EF10  F011         	goto	l1236
  5543   00221C                     u3370:
  5544   00221C  EF03  F011         	goto	l4027
  5545   002220                     l1236:
  5546   002220  5031               	movf	___fldiv@aexp^0,w,c
  5547   002222  B4D8               	btfsc	status,2,c
  5548   002224  EF16  F011         	goto	u3381
  5549   002228  EF18  F011         	goto	u3380
  5550   00222C                     u3381:
  5551   00222C  EF3C  F011         	goto	l4039
  5552   002230                     u3380:
  5553   002230  0E01               	movlw	1
  5554   002232  2619               	addwf	___fldiv@b^0,f,c
  5555   002234  0E00               	movlw	0
  5556   002236  221A               	addwfc	(___fldiv@b+1)^0,f,c
  5557   002238  221B               	addwfc	(___fldiv@b+2)^0,f,c
  5558   00223A  221C               	addwfc	(___fldiv@b+3)^0,f,c
  5559   00223C  A01C               	btfss	(___fldiv@b+3)^0,0,c
  5560   00223E  EF23  F011         	goto	u3391
  5561   002242  EF25  F011         	goto	u3390
  5562   002246                     u3391:
  5563   002246  EF3C  F011         	goto	l4039
  5564   00224A                     u3390:
  5565   00224A  C019  F021         	movff	___fldiv@b,??___fldiv
  5566   00224E  C01A  F022         	movff	___fldiv@b+1,??___fldiv+1
  5567   002252  C01B  F023         	movff	___fldiv@b+2,??___fldiv+2
  5568   002256  C01C  F024         	movff	___fldiv@b+3,??___fldiv+3
  5569   00225A  3424               	rlcf	(??___fldiv+3)^0,w,c
  5570   00225C  3224               	rrcf	(??___fldiv+3)^0,f,c
  5571   00225E  3223               	rrcf	(??___fldiv+2)^0,f,c
  5572   002260  3222               	rrcf	(??___fldiv+1)^0,f,c
  5573   002262  3221               	rrcf	??___fldiv^0,f,c
  5574   002264  C021  F019         	movff	??___fldiv,___fldiv@b
  5575   002268  C022  F01A         	movff	??___fldiv+1,___fldiv@b+1
  5576   00226C  C023  F01B         	movff	??___fldiv+2,___fldiv@b+2
  5577   002270  C024  F01C         	movff	??___fldiv+3,___fldiv@b+3
  5578   002274  4A2A               	infsnz	___fldiv@new_exp^0,f,c
  5579   002276  2A2B               	incf	(___fldiv@new_exp+1)^0,f,c
  5580   002278                     l4039:
  5581   002278  BE2B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5582   00227A  EF47  F011         	goto	u3401
  5583   00227E  502B               	movf	(___fldiv@new_exp+1)^0,w,c
  5584   002280  E108               	bnz	u3400
  5585   002282  282A               	incf	___fldiv@new_exp^0,w,c
  5586   002284  A0D8               	btfss	status,0,c
  5587   002286  EF47  F011         	goto	u3401
  5588   00228A  EF49  F011         	goto	u3400
  5589   00228E                     u3401:
  5590   00228E  EF54  F011         	goto	l4043
  5591   002292                     u3400:
  5592   002292  0E00               	movlw	0
  5593   002294  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  5594   002296  682A               	setf	___fldiv@new_exp^0,c
  5595   002298  0E00               	movlw	0
  5596   00229A  6E19               	movwf	___fldiv@b^0,c
  5597   00229C  0E00               	movlw	0
  5598   00229E  6E1A               	movwf	(___fldiv@b+1)^0,c
  5599   0022A0  0E00               	movlw	0
  5600   0022A2  6E1B               	movwf	(___fldiv@b+2)^0,c
  5601   0022A4  0E00               	movlw	0
  5602   0022A6  6E1C               	movwf	(___fldiv@b+3)^0,c
  5603   0022A8                     l4043:
  5604   0022A8  BE2B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5605   0022AA  EF61  F011         	goto	u3410
  5606   0022AE  502B               	movf	(___fldiv@new_exp+1)^0,w,c
  5607   0022B0  E106               	bnz	u3411
  5608   0022B2  042A               	decf	___fldiv@new_exp^0,w,c
  5609   0022B4  B0D8               	btfsc	status,0,c
  5610   0022B6  EF5F  F011         	goto	u3411
  5611   0022BA  EF61  F011         	goto	u3410
  5612   0022BE                     u3411:
  5613   0022BE  EF6F  F011         	goto	l4047
  5614   0022C2                     u3410:
  5615   0022C2  0E00               	movlw	0
  5616   0022C4  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  5617   0022C6  0E00               	movlw	0
  5618   0022C8  6E2A               	movwf	___fldiv@new_exp^0,c
  5619   0022CA  0E00               	movlw	0
  5620   0022CC  6E19               	movwf	___fldiv@b^0,c
  5621   0022CE  0E00               	movlw	0
  5622   0022D0  6E1A               	movwf	(___fldiv@b+1)^0,c
  5623   0022D2  0E00               	movlw	0
  5624   0022D4  6E1B               	movwf	(___fldiv@b+2)^0,c
  5625   0022D6  0E00               	movlw	0
  5626   0022D8  6E1C               	movwf	(___fldiv@b+3)^0,c
  5627   0022DA  0E00               	movlw	0
  5628   0022DC  6E29               	movwf	___fldiv@sign^0,c
  5629   0022DE                     l4047:
  5630   0022DE  C02A  F030         	movff	___fldiv@new_exp,___fldiv@bexp
  5631   0022E2  A030               	btfss	___fldiv@bexp^0,0,c
  5632   0022E4  EF76  F011         	goto	u3421
  5633   0022E8  EF78  F011         	goto	u3420
  5634   0022EC                     u3421:
  5635   0022EC  EF7B  F011         	goto	l4053
  5636   0022F0                     u3420:
  5637   0022F0  8E1B               	bsf	(___fldiv@b+2)^0,7,c
  5638   0022F2  EF7C  F011         	goto	l4055
  5639   0022F6                     l4053:
  5640   0022F6  9E1B               	bcf	(___fldiv@b+2)^0,7,c
  5641   0022F8                     l4055:
  5642   0022F8  90D8               	bcf	status,0,c
  5643   0022FA  3030               	rrcf	___fldiv@bexp^0,w,c
  5644   0022FC  6E1C               	movwf	(___fldiv@b+3)^0,c
  5645   0022FE  EF32  F010         	goto	l3969
  5646   002302                     l1223:
  5647   002302  0012               	return		;funcret
  5648   002304                     __end_of___fldiv:
  5649                           	callstack 0
  5650                           
  5651 ;; *************** function _initUSART4 *****************
  5652 ;; Defined at:
  5653 ;;		line 14 in file "serial.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;		None
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;		None
  5658 ;; Return value:  Size  Location     Type
  5659 ;;                  1    wreg      void 
  5660 ;; Registers used:
  5661 ;;		wreg, status,2
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5671 ;;Total ram usage:        0 bytes
  5672 ;; Hardware stack levels used: 1
  5673 ;; This function calls:
  5674 ;;		Nothing
  5675 ;; This function is called by:
  5676 ;;		_main
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           	psect	text17
  5681   004382                     __ptext17:
  5682                           	callstack 0
  5683   004382                     _initUSART4:
  5684                           	callstack 30
  5685   004382                     
  5686                           ;serial.c: 15:     RC0PPS = 0x12;
  5687   004382  0E12               	movlw	18
  5688   004384  010E               	movlb	14	; () banked
  5689   004386  6F62               	movwf	98,b	;volatile
  5690                           
  5691                           ;serial.c: 16:     RX4PPS = 0x11;
  5692   004388  0E11               	movlw	17
  5693   00438A  6F15               	movwf	21,b	;volatile
  5694   00438C                     
  5695                           ; BSR set to: 14
  5696                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  5697   00438C  97E9               	bcf	233,3,b	;volatile
  5698   00438E                     
  5699                           ; BSR set to: 14
  5700                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  5701   00438E  95E8               	bcf	232,2,b	;volatile
  5702                           
  5703                           ;serial.c: 19:     SP4BRGL = 51;
  5704   004390  0E33               	movlw	51
  5705   004392  6FE5               	movwf	229,b	;volatile
  5706                           
  5707                           ;serial.c: 20:     SP4BRGH = 0;
  5708   004394  0E00               	movlw	0
  5709   004396  6FE6               	movwf	230,b	;volatile
  5710   004398                     
  5711                           ; BSR set to: 14
  5712                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  5713   004398  89E7               	bsf	231,4,b	;volatile
  5714   00439A                     
  5715                           ; BSR set to: 14
  5716                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  5717   00439A  8BE8               	bsf	232,5,b	;volatile
  5718   00439C                     
  5719                           ; BSR set to: 14
  5720                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  5721   00439C  8FE7               	bsf	231,7,b	;volatile
  5722   00439E                     
  5723                           ; BSR set to: 14
  5724   00439E  0012               	return		;funcret
  5725   0043A0                     __end_of_initUSART4:
  5726                           	callstack 0
  5727                           
  5728 ;; *************** function _initDCmotorsPWM *****************
  5729 ;; Defined at:
  5730 ;;		line 5 in file "dc_motor.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;		None
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  1    wreg      void 
  5737 ;; Registers used:
  5738 ;;		wreg, status,2
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5744 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5747 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5748 ;;Total ram usage:        2 bytes
  5749 ;; Hardware stack levels used: 1
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_main
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           	psect	text18
  5758   003792                     __ptext18:
  5759                           	callstack 0
  5760   003792                     _initDCmotorsPWM:
  5761                           	callstack 30
  5762   003792                     
  5763                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  5764   003792  9485               	bcf	133,2,c	;volatile
  5765                           
  5766                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  5767   003794  9E83               	bcf	131,7,c	;volatile
  5768                           
  5769                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  5770   003796  9885               	bcf	133,4,c	;volatile
  5771                           
  5772                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  5773   003798  9C87               	bcf	135,6,c	;volatile
  5774                           
  5775                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5776   00379A  947D               	bcf	125,2,c	;volatile
  5777                           
  5778                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  5779   00379C  9E7B               	bcf	123,7,c	;volatile
  5780                           
  5781                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5782   00379E  987D               	bcf	125,4,c	;volatile
  5783                           
  5784                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  5785   0037A0  9C7F               	bcf	127,6,c	;volatile
  5786   0037A2                     
  5787                           ;dc_motor.c: 18:     RE2PPS=0x05;
  5788   0037A2  0E05               	movlw	5
  5789   0037A4  010E               	movlb	14	; () banked
  5790   0037A6  6F74               	movwf	116,b	;volatile
  5791                           
  5792                           ;dc_motor.c: 19:     RE4PPS=0x06;
  5793   0037A8  0E06               	movlw	6
  5794   0037AA  6F76               	movwf	118,b	;volatile
  5795                           
  5796                           ;dc_motor.c: 20:     RC7PPS=0x07;
  5797   0037AC  0E07               	movlw	7
  5798   0037AE  6F69               	movwf	105,b	;volatile
  5799                           
  5800                           ;dc_motor.c: 21:     RG6PPS=0x08;
  5801   0037B0  0E08               	movlw	8
  5802   0037B2  6F88               	movwf	136,b	;volatile
  5803                           
  5804                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  5805   0037B4  50BD               	movf	189,w,c	;volatile
  5806   0037B6  0B8F               	andlw	-113
  5807   0037B8  0940               	iorlw	64
  5808   0037BA  6EBD               	movwf	189,c	;volatile
  5809                           
  5810                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  5811   0037BC  0EE0               	movlw	-32
  5812   0037BE  16BE               	andwf	190,f,c	;volatile
  5813                           
  5814                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  5815   0037C0  50BF               	movf	191,w,c	;volatile
  5816   0037C2  0BF0               	andlw	-16
  5817   0037C4  0901               	iorlw	1
  5818   0037C6  6EBF               	movwf	191,c	;volatile
  5819   0037C8                     
  5820                           ; BSR set to: 14
  5821                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  5822   0037C8  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5823   0037CC                     
  5824                           ; BSR set to: 14
  5825                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  5826   0037CC  8EBD               	bsf	189,7,c	;volatile
  5827                           
  5828                           ;dc_motor.c: 35:     CCPR1H=0;
  5829   0037CE  0E00               	movlw	0
  5830   0037D0  6EAA               	movwf	170,c	;volatile
  5831                           
  5832                           ;dc_motor.c: 36:     CCPR2H=0;
  5833   0037D2  0E00               	movlw	0
  5834   0037D4  6EA6               	movwf	166,c	;volatile
  5835                           
  5836                           ;dc_motor.c: 37:     CCPR3H=0;
  5837   0037D6  0E00               	movlw	0
  5838   0037D8  010F               	movlb	15	; () banked
  5839   0037DA  6F25               	movwf	37,b	;volatile
  5840                           
  5841                           ;dc_motor.c: 38:     CCPR4H=0;
  5842   0037DC  0E00               	movlw	0
  5843   0037DE  6F21               	movwf	33,b	;volatile
  5844                           
  5845                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  5846   0037E0  0EFC               	movlw	-4
  5847   0037E2  16AD               	andwf	173,f,c	;volatile
  5848                           
  5849                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  5850   0037E4  0EF3               	movlw	-13
  5851   0037E6  16AD               	andwf	173,f,c	;volatile
  5852                           
  5853                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  5854   0037E8  0ECF               	movlw	-49
  5855   0037EA  16AD               	andwf	173,f,c	;volatile
  5856                           
  5857                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  5858   0037EC  0E3F               	movlw	-193
  5859   0037EE  16AD               	andwf	173,f,c	;volatile
  5860   0037F0                     
  5861                           ; BSR set to: 15
  5862                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  5863   0037F0  88AB               	bsf	171,4,c	;volatile
  5864                           
  5865                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  5866   0037F2  50AB               	movf	171,w,c	;volatile
  5867   0037F4  0BF0               	andlw	-16
  5868   0037F6  090C               	iorlw	12
  5869   0037F8  6EAB               	movwf	171,c	;volatile
  5870   0037FA                     
  5871                           ; BSR set to: 15
  5872                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  5873   0037FA  8EAB               	bsf	171,7,c	;volatile
  5874   0037FC                     
  5875                           ; BSR set to: 15
  5876                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  5877   0037FC  88A7               	bsf	167,4,c	;volatile
  5878                           
  5879                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  5880   0037FE  50A7               	movf	167,w,c	;volatile
  5881   003800  0BF0               	andlw	-16
  5882   003802  090C               	iorlw	12
  5883   003804  6EA7               	movwf	167,c	;volatile
  5884   003806                     
  5885                           ; BSR set to: 15
  5886                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  5887   003806  8EA7               	bsf	167,7,c	;volatile
  5888   003808                     
  5889                           ; BSR set to: 15
  5890                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  5891   003808  8926               	bsf	38,4,b	;volatile
  5892                           
  5893                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  5894   00380A  5126               	movf	38,w,b	;volatile
  5895   00380C  0BF0               	andlw	-16
  5896   00380E  090C               	iorlw	12
  5897   003810  6F26               	movwf	38,b	;volatile
  5898   003812                     
  5899                           ; BSR set to: 15
  5900                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  5901   003812  8F26               	bsf	38,7,b	;volatile
  5902   003814                     
  5903                           ; BSR set to: 15
  5904                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  5905   003814  8922               	bsf	34,4,b	;volatile
  5906                           
  5907                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  5908   003816  5122               	movf	34,w,b	;volatile
  5909   003818  0BF0               	andlw	-16
  5910   00381A  090C               	iorlw	12
  5911   00381C  6F22               	movwf	34,b	;volatile
  5912   00381E                     
  5913                           ; BSR set to: 15
  5914                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  5915   00381E  8F22               	bsf	34,7,b	;volatile
  5916   003820                     
  5917                           ; BSR set to: 15
  5918   003820  0012               	return		;funcret
  5919   003822                     __end_of_initDCmotorsPWM:
  5920                           	callstack 0
  5921                           
  5922 ;; *************** function _get16bitTMR0val *****************
  5923 ;; Defined at:
  5924 ;;		line 27 in file "timers.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;		None
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;  combined_val    2    6[COMRAM] unsigned int 
  5929 ;; Return value:  Size  Location     Type
  5930 ;;                  2    0[COMRAM] unsigned int 
  5931 ;; Registers used:
  5932 ;;		wreg, status,2, status,0
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5938 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5940 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5941 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5942 ;;Total ram usage:        8 bytes
  5943 ;; Hardware stack levels used: 1
  5944 ;; This function calls:
  5945 ;;		Nothing
  5946 ;; This function is called by:
  5947 ;;		_main
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           	psect	text19
  5952   004322                     __ptext19:
  5953                           	callstack 0
  5954   004322                     _get16bitTMR0val:
  5955                           	callstack 30
  5956   004322                     
  5957                           ;timers.c: 29:     unsigned int combined_value;;timers.c: 30:     combined_value = TMR0L
      +                           | (TMR0H << 8);
  5958   004322  50D4               	movf	212,w,c	;volatile
  5959   004324  6E04               	movwf	(??_get16bitTMR0val+1)^0,c
  5960   004326  6A03               	clrf	??_get16bitTMR0val^0,c
  5961   004328  50D3               	movf	211,w,c	;volatile
  5962   00432A  6E05               	movwf	(??_get16bitTMR0val+2)^0,c
  5963   00432C  6A06               	clrf	(??_get16bitTMR0val+3)^0,c
  5964   00432E  5003               	movf	??_get16bitTMR0val^0,w,c
  5965   004330  1005               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  5966   004332  6E07               	movwf	get16bitTMR0val@combined_value^0,c
  5967   004334  5004               	movf	(??_get16bitTMR0val+1)^0,w,c
  5968   004336  1006               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  5969   004338  6E08               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  5970   00433A                     
  5971                           ;timers.c: 31:     return combined_value;
  5972   00433A  C007  F001         	movff	get16bitTMR0val@combined_value,?_get16bitTMR0val
  5973   00433E  C008  F002         	movff	get16bitTMR0val@combined_value+1,?_get16bitTMR0val+1
  5974   004342  0012               	return		;funcret
  5975   004344                     __end_of_get16bitTMR0val:
  5976                           	callstack 0
  5977                           
  5978 ;; *************** function _decision *****************
  5979 ;; Defined at:
  5980 ;;		line 322 in file "color.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;  hue             2   33[COMRAM] unsigned int 
  5983 ;;  path_length     2   35[COMRAM] unsigned int 
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;  color          20    0        unsigned char [20]
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  1    wreg      void 
  5988 ;; Registers used:
  5989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5995 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5998 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5999 ;;Total ram usage:        4 bytes
  6000 ;; Hardware stack levels used: 1
  6001 ;; Hardware stack levels required when called: 5
  6002 ;; This function calls:
  6003 ;;		_moveBlue
  6004 ;;		_moveGreen
  6005 ;;		_moveLightBlue
  6006 ;;		_moveOrange
  6007 ;;		_movePink
  6008 ;;		_moveRed
  6009 ;;		_moveYellow
  6010 ;; This function is called by:
  6011 ;;		_main
  6012 ;; This function uses a non-reentrant model
  6013 ;;
  6014                           
  6015                           	psect	text20
  6016   00272C                     __ptext20:
  6017                           	callstack 0
  6018   00272C                     _decision:
  6019                           	callstack 25
  6020   00272C                     
  6021                           ;color.c: 325:     char color[20];;color.c: 329:     if (hue<=10) {
  6022   00272C  5023               	movf	(decision@hue+1)^0,w,c
  6023   00272E  E107               	bnz	u4111
  6024   002730  0E0B               	movlw	11
  6025   002732  5C22               	subwf	decision@hue^0,w,c
  6026   002734  B0D8               	btfsc	status,0,c
  6027   002736  EF9F  F013         	goto	u4111
  6028   00273A  EFA1  F013         	goto	u4110
  6029   00273E                     u4111:
  6030   00273E  EFAD  F013         	goto	l4643
  6031   002742                     u4110:
  6032   002742                     
  6033                           ;color.c: 330:         moveRed(&motorL, &motorR, path_length);
  6034   002742  0EE6               	movlw	low _motorL
  6035   002744  6E1C               	movwf	moveRed@mL^0,c
  6036   002746  0EDD               	movlw	low _motorR
  6037   002748  6E1D               	movwf	moveRed@mR^0,c
  6038   00274A  C024  F01E         	movff	decision@path_length,moveRed@path_length
  6039   00274E  C025  F01F         	movff	decision@path_length+1,moveRed@path_length+1
  6040   002752  EC81  F01E         	call	_moveRed	;wreg free
  6041                           
  6042                           ;color.c: 331:     } else if (hue>=105 && hue<=130){
  6043   002756  EF79  F014         	goto	l162
  6044   00275A                     l4643:
  6045   00275A  5023               	movf	(decision@hue+1)^0,w,c
  6046   00275C  E109               	bnz	u4120
  6047   00275E  0E69               	movlw	105
  6048   002760  5C22               	subwf	decision@hue^0,w,c
  6049   002762  A0D8               	btfss	status,0,c
  6050   002764  EFB6  F013         	goto	u4121
  6051   002768  EFB8  F013         	goto	u4120
  6052   00276C                     u4121:
  6053   00276C  EFCF  F013         	goto	l4649
  6054   002770                     u4120:
  6055   002770  5023               	movf	(decision@hue+1)^0,w,c
  6056   002772  E107               	bnz	u4131
  6057   002774  0E83               	movlw	131
  6058   002776  5C22               	subwf	decision@hue^0,w,c
  6059   002778  B0D8               	btfsc	status,0,c
  6060   00277A  EFC1  F013         	goto	u4131
  6061   00277E  EFC3  F013         	goto	u4130
  6062   002782                     u4131:
  6063   002782  EFCF  F013         	goto	l4649
  6064   002786                     u4130:
  6065   002786                     
  6066                           ;color.c: 332:         moveGreen(&motorL, &motorR, path_length);
  6067   002786  0EE6               	movlw	low _motorL
  6068   002788  6E1C               	movwf	moveGreen@mL^0,c
  6069   00278A  0EDD               	movlw	low _motorR
  6070   00278C  6E1D               	movwf	moveGreen@mR^0,c
  6071   00278E  C024  F01E         	movff	decision@path_length,moveGreen@path_length
  6072   002792  C025  F01F         	movff	decision@path_length+1,moveGreen@path_length+1
  6073   002796  EC11  F01F         	call	_moveGreen	;wreg free
  6074                           
  6075                           ;color.c: 333:     } else if (hue>=230 && hue<=240){
  6076   00279A  EF79  F014         	goto	l162
  6077   00279E                     l4649:
  6078   00279E  5023               	movf	(decision@hue+1)^0,w,c
  6079   0027A0  E109               	bnz	u4140
  6080   0027A2  0EE6               	movlw	230
  6081   0027A4  5C22               	subwf	decision@hue^0,w,c
  6082   0027A6  A0D8               	btfss	status,0,c
  6083   0027A8  EFD8  F013         	goto	u4141
  6084   0027AC  EFDA  F013         	goto	u4140
  6085   0027B0                     u4141:
  6086   0027B0  EFF1  F013         	goto	l4655
  6087   0027B4                     u4140:
  6088   0027B4  5023               	movf	(decision@hue+1)^0,w,c
  6089   0027B6  E107               	bnz	u4151
  6090   0027B8  0EF1               	movlw	241
  6091   0027BA  5C22               	subwf	decision@hue^0,w,c
  6092   0027BC  B0D8               	btfsc	status,0,c
  6093   0027BE  EFE3  F013         	goto	u4151
  6094   0027C2  EFE5  F013         	goto	u4150
  6095   0027C6                     u4151:
  6096   0027C6  EFF1  F013         	goto	l4655
  6097   0027CA                     u4150:
  6098   0027CA                     
  6099                           ;color.c: 334:         moveBlue(&motorL,&motorR, path_length);
  6100   0027CA  0EE6               	movlw	low _motorL
  6101   0027CC  6E1C               	movwf	moveBlue@mL^0,c
  6102   0027CE  0EDD               	movlw	low _motorR
  6103   0027D0  6E1D               	movwf	moveBlue@mR^0,c
  6104   0027D2  C024  F01E         	movff	decision@path_length,moveBlue@path_length
  6105   0027D6  C025  F01F         	movff	decision@path_length+1,moveBlue@path_length+1
  6106   0027DA  EC35  F01F         	call	_moveBlue	;wreg free
  6107                           
  6108                           ;color.c: 335:     } else if (hue>=216 && hue<=221){
  6109   0027DE  EF79  F014         	goto	l162
  6110   0027E2                     l4655:
  6111   0027E2  5023               	movf	(decision@hue+1)^0,w,c
  6112   0027E4  E109               	bnz	u4160
  6113   0027E6  0ED8               	movlw	216
  6114   0027E8  5C22               	subwf	decision@hue^0,w,c
  6115   0027EA  A0D8               	btfss	status,0,c
  6116   0027EC  EFFA  F013         	goto	u4161
  6117   0027F0  EFFC  F013         	goto	u4160
  6118   0027F4                     u4161:
  6119   0027F4  EF13  F014         	goto	l4661
  6120   0027F8                     u4160:
  6121   0027F8  5023               	movf	(decision@hue+1)^0,w,c
  6122   0027FA  E107               	bnz	u4171
  6123   0027FC  0EDE               	movlw	222
  6124   0027FE  5C22               	subwf	decision@hue^0,w,c
  6125   002800  B0D8               	btfsc	status,0,c
  6126   002802  EF05  F014         	goto	u4171
  6127   002806  EF07  F014         	goto	u4170
  6128   00280A                     u4171:
  6129   00280A  EF13  F014         	goto	l4661
  6130   00280E                     u4170:
  6131   00280E                     
  6132                           ;color.c: 336:         moveLightBlue(&motorL,&motorR, path_length);
  6133   00280E  0EE6               	movlw	low _motorL
  6134   002810  6E1C               	movwf	moveLightBlue@mL^0,c
  6135   002812  0EDD               	movlw	low _motorR
  6136   002814  6E1D               	movwf	moveLightBlue@mR^0,c
  6137   002816  C024  F01E         	movff	decision@path_length,moveLightBlue@path_length
  6138   00281A  C025  F01F         	movff	decision@path_length+1,moveLightBlue@path_length+1
  6139   00281E  ECED  F01E         	call	_moveLightBlue	;wreg free
  6140                           
  6141                           ;color.c: 337:     } else if (hue>=302 && hue<=346){
  6142   002822  EF79  F014         	goto	l162
  6143   002826                     l4661:
  6144   002826  0E2E               	movlw	46
  6145   002828  5C22               	subwf	decision@hue^0,w,c
  6146   00282A  0E01               	movlw	1
  6147   00282C  5823               	subwfb	(decision@hue+1)^0,w,c
  6148   00282E  A0D8               	btfss	status,0,c
  6149   002830  EF1C  F014         	goto	u4181
  6150   002834  EF1E  F014         	goto	u4180
  6151   002838                     u4181:
  6152   002838  EF35  F014         	goto	l4667
  6153   00283C                     u4180:
  6154   00283C  0E5B               	movlw	91
  6155   00283E  5C22               	subwf	decision@hue^0,w,c
  6156   002840  0E01               	movlw	1
  6157   002842  5823               	subwfb	(decision@hue+1)^0,w,c
  6158   002844  B0D8               	btfsc	status,0,c
  6159   002846  EF27  F014         	goto	u4191
  6160   00284A  EF29  F014         	goto	u4190
  6161   00284E                     u4191:
  6162   00284E  EF35  F014         	goto	l4667
  6163   002852                     u4190:
  6164   002852                     
  6165                           ;color.c: 338:         moveYellow(&motorL,&motorR, path_length);
  6166   002852  0EE6               	movlw	low _motorL
  6167   002854  6E1C               	movwf	moveYellow@mL^0,c
  6168   002856  0EDD               	movlw	low _motorR
  6169   002858  6E1D               	movwf	moveYellow@mR^0,c
  6170   00285A  C024  F01E         	movff	decision@path_length,moveYellow@path_length
  6171   00285E  C025  F01F         	movff	decision@path_length+1,moveYellow@path_length+1
  6172   002862  EC5D  F01E         	call	_moveYellow	;wreg free
  6173                           
  6174                           ;color.c: 339:     } else if (hue>14 && hue<=35){
  6175   002866  EF79  F014         	goto	l162
  6176   00286A                     l4667:
  6177   00286A  5023               	movf	(decision@hue+1)^0,w,c
  6178   00286C  E109               	bnz	u4200
  6179   00286E  0E0F               	movlw	15
  6180   002870  5C22               	subwf	decision@hue^0,w,c
  6181   002872  A0D8               	btfss	status,0,c
  6182   002874  EF3E  F014         	goto	u4201
  6183   002878  EF40  F014         	goto	u4200
  6184   00287C                     u4201:
  6185   00287C  EF57  F014         	goto	l4673
  6186   002880                     u4200:
  6187   002880  5023               	movf	(decision@hue+1)^0,w,c
  6188   002882  E107               	bnz	u4211
  6189   002884  0E24               	movlw	36
  6190   002886  5C22               	subwf	decision@hue^0,w,c
  6191   002888  B0D8               	btfsc	status,0,c
  6192   00288A  EF49  F014         	goto	u4211
  6193   00288E  EF4B  F014         	goto	u4210
  6194   002892                     u4211:
  6195   002892  EF57  F014         	goto	l4673
  6196   002896                     u4210:
  6197   002896                     
  6198                           ;color.c: 340:         moveOrange(&motorL,&motorR, path_length);
  6199   002896  0EE6               	movlw	low _motorL
  6200   002898  6E1C               	movwf	moveOrange@mL^0,c
  6201   00289A  0EDD               	movlw	low _motorR
  6202   00289C  6E1D               	movwf	moveOrange@mR^0,c
  6203   00289E  C024  F01E         	movff	decision@path_length,moveOrange@path_length
  6204   0028A2  C025  F01F         	movff	decision@path_length+1,moveOrange@path_length+1
  6205   0028A6  ECC9  F01E         	call	_moveOrange	;wreg free
  6206                           
  6207                           ;color.c: 341:     } else if (hue>=244 && hue<=251){
  6208   0028AA  EF79  F014         	goto	l162
  6209   0028AE                     l4673:
  6210   0028AE  5023               	movf	(decision@hue+1)^0,w,c
  6211   0028B0  E109               	bnz	u4220
  6212   0028B2  0EF4               	movlw	244
  6213   0028B4  5C22               	subwf	decision@hue^0,w,c
  6214   0028B6  A0D8               	btfss	status,0,c
  6215   0028B8  EF60  F014         	goto	u4221
  6216   0028BC  EF62  F014         	goto	u4220
  6217   0028C0                     u4221:
  6218   0028C0  EF79  F014         	goto	l156
  6219   0028C4                     u4220:
  6220   0028C4  5023               	movf	(decision@hue+1)^0,w,c
  6221   0028C6  E107               	bnz	u4231
  6222   0028C8  0EFC               	movlw	252
  6223   0028CA  5C22               	subwf	decision@hue^0,w,c
  6224   0028CC  B0D8               	btfsc	status,0,c
  6225   0028CE  EF6B  F014         	goto	u4231
  6226   0028D2  EF6D  F014         	goto	u4230
  6227   0028D6                     u4231:
  6228   0028D6  EF79  F014         	goto	l156
  6229   0028DA                     u4230:
  6230   0028DA                     
  6231                           ;color.c: 342:         movePink(&motorL,&motorR, path_length);
  6232   0028DA  0EE6               	movlw	low _motorL
  6233   0028DC  6E1C               	movwf	movePink@mL^0,c
  6234   0028DE  0EDD               	movlw	low _motorR
  6235   0028E0  6E1D               	movwf	movePink@mR^0,c
  6236   0028E2  C024  F01E         	movff	decision@path_length,movePink@path_length
  6237   0028E6  C025  F01F         	movff	decision@path_length+1,movePink@path_length+1
  6238   0028EA  ECA5  F01E         	call	_movePink	;wreg free
  6239   0028EE  EF79  F014         	goto	l162
  6240   0028F2                     l156:
  6241   0028F2                     l162:
  6242   0028F2  0012               	return		;funcret
  6243   0028F4                     __end_of_decision:
  6244                           	callstack 0
  6245                           
  6246 ;; *************** function _moveYellow *****************
  6247 ;; Defined at:
  6248 ;;		line 282 in file "dc_motor.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6251 ;;		 -> motorL(9), 
  6252 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6253 ;;		 -> motorR(9), 
  6254 ;;  path_length     2   29[COMRAM] unsigned int 
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;		None
  6257 ;; Return value:  Size  Location     Type
  6258 ;;                  1    wreg      void 
  6259 ;; Registers used:
  6260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6261 ;; Tracked objects:
  6262 ;;		On entry : 0/0
  6263 ;;		On exit  : 0/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6266 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6268 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6269 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6270 ;;Total ram usage:        6 bytes
  6271 ;; Hardware stack levels used: 1
  6272 ;; Hardware stack levels required when called: 4
  6273 ;; This function calls:
  6274 ;;		_backOneAndHalf
  6275 ;;		_logAction
  6276 ;;		_right90
  6277 ;; This function is called by:
  6278 ;;		_decision
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	text21
  6283   003CBA                     __ptext21:
  6284                           	callstack 0
  6285   003CBA                     _moveYellow:
  6286                           	callstack 25
  6287   003CBA                     
  6288                           ;dc_motor.c: 282: void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 283: {;dc_motor.c: 285:     backOneAndHalf(mL,mR);
  6289   003CBA  C01C  F018         	movff	moveYellow@mL,backOneAndHalf@mL
  6290   003CBE  C01D  F019         	movff	moveYellow@mR,backOneAndHalf@mR
  6291   003CC2  ECA7  F020         	call	_backOneAndHalf	;wreg free
  6292   003CC6                     
  6293                           ;dc_motor.c: 286:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6294   003CC6  0E29               	movlw	41
  6295   003CC8  6E21               	movwf	(??_moveYellow+1)^0,c
  6296   003CCA  0E96               	movlw	150
  6297   003CCC  6E20               	movwf	??_moveYellow^0,c
  6298   003CCE  0E7F               	movlw	127
  6299   003CD0                     u4877:
  6300   003CD0  2EE8               	decfsz	wreg,f,c
  6301   003CD2  D7FE               	bra	u4877
  6302   003CD4  2E20               	decfsz	??_moveYellow^0,f,c
  6303   003CD6  D7FC               	bra	u4877
  6304   003CD8  2E21               	decfsz	(??_moveYellow+1)^0,f,c
  6305   003CDA  D7FA               	bra	u4877
  6306   003CDC  0000               	nop	
  6307   003CDE                     
  6308                           ;dc_motor.c: 287:     right90(mL,mR);
  6309   003CDE  C01C  F018         	movff	moveYellow@mL,right90@mL
  6310   003CE2  C01D  F019         	movff	moveYellow@mR,right90@mR
  6311   003CE6  EC8E  F020         	call	_right90	;wreg free
  6312   003CEA                     
  6313                           ;dc_motor.c: 288:     logAction('R',0, path_length);
  6314   003CEA  0E00               	movlw	0
  6315   003CEC  6E08               	movwf	(logAction@time+1)^0,c
  6316   003CEE  0E00               	movlw	0
  6317   003CF0  6E07               	movwf	logAction@time^0,c
  6318   003CF2  C01E  F009         	movff	moveYellow@path_length,logAction@pathLength
  6319   003CF6  C01F  F00A         	movff	moveYellow@path_length+1,logAction@pathLength+1
  6320   003CFA  0E52               	movlw	82
  6321   003CFC  EC88  F01D         	call	_logAction
  6322   003D00  0012               	return		;funcret
  6323   003D02                     __end_of_moveYellow:
  6324                           	callstack 0
  6325                           
  6326 ;; *************** function _moveRed *****************
  6327 ;; Defined at:
  6328 ;;		line 255 in file "dc_motor.c"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6331 ;;		 -> motorL(9), 
  6332 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6333 ;;		 -> motorR(9), 
  6334 ;;  path_length     2   29[COMRAM] unsigned int 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;		None
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  1    wreg      void 
  6339 ;; Registers used:
  6340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6348 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6349 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6350 ;;Total ram usage:        6 bytes
  6351 ;; Hardware stack levels used: 1
  6352 ;; Hardware stack levels required when called: 4
  6353 ;; This function calls:
  6354 ;;		_backHalf
  6355 ;;		_logAction
  6356 ;;		_right90
  6357 ;; This function is called by:
  6358 ;;		_decision
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text22
  6363   003D02                     __ptext22:
  6364                           	callstack 0
  6365   003D02                     _moveRed:
  6366                           	callstack 25
  6367   003D02                     
  6368                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int pa
      +                          th_length);dc_motor.c: 256: {;dc_motor.c: 258:     backHalf(mL,mR);
  6369   003D02  C01C  F018         	movff	moveRed@mL,backHalf@mL
  6370   003D06  C01D  F019         	movff	moveRed@mR,backHalf@mR
  6371   003D0A  EC3D  F021         	call	_backHalf	;wreg free
  6372   003D0E                     
  6373                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6374   003D0E  0E29               	movlw	41
  6375   003D10  6E21               	movwf	(??_moveRed+1)^0,c
  6376   003D12  0E96               	movlw	150
  6377   003D14  6E20               	movwf	??_moveRed^0,c
  6378   003D16  0E7F               	movlw	127
  6379   003D18                     u4887:
  6380   003D18  2EE8               	decfsz	wreg,f,c
  6381   003D1A  D7FE               	bra	u4887
  6382   003D1C  2E20               	decfsz	??_moveRed^0,f,c
  6383   003D1E  D7FC               	bra	u4887
  6384   003D20  2E21               	decfsz	(??_moveRed+1)^0,f,c
  6385   003D22  D7FA               	bra	u4887
  6386   003D24  0000               	nop	
  6387   003D26                     
  6388                           ;dc_motor.c: 260:     right90(mL,mR);
  6389   003D26  C01C  F018         	movff	moveRed@mL,right90@mL
  6390   003D2A  C01D  F019         	movff	moveRed@mR,right90@mR
  6391   003D2E  EC8E  F020         	call	_right90	;wreg free
  6392   003D32                     
  6393                           ;dc_motor.c: 261:     logAction('R',0, path_length);
  6394   003D32  0E00               	movlw	0
  6395   003D34  6E08               	movwf	(logAction@time+1)^0,c
  6396   003D36  0E00               	movlw	0
  6397   003D38  6E07               	movwf	logAction@time^0,c
  6398   003D3A  C01E  F009         	movff	moveRed@path_length,logAction@pathLength
  6399   003D3E  C01F  F00A         	movff	moveRed@path_length+1,logAction@pathLength+1
  6400   003D42  0E52               	movlw	82
  6401   003D44  EC88  F01D         	call	_logAction
  6402   003D48  0012               	return		;funcret
  6403   003D4A                     __end_of_moveRed:
  6404                           	callstack 0
  6405                           
  6406 ;; *************** function _right90 *****************
  6407 ;; Defined at:
  6408 ;;		line 193 in file "dc_motor.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6411 ;;		 -> motorL(9), 
  6412 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6413 ;;		 -> motorR(9), 
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;		None
  6416 ;; Return value:  Size  Location     Type
  6417 ;;                  1    wreg      void 
  6418 ;; Registers used:
  6419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6420 ;; Tracked objects:
  6421 ;;		On entry : 0/0
  6422 ;;		On exit  : 0/0
  6423 ;;		Unchanged: 0/0
  6424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6425 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6427 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6428 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6429 ;;Total ram usage:        4 bytes
  6430 ;; Hardware stack levels used: 1
  6431 ;; Hardware stack levels required when called: 3
  6432 ;; This function calls:
  6433 ;;		_stop
  6434 ;;		_turnRight
  6435 ;; This function is called by:
  6436 ;;		_moveRed
  6437 ;;		_moveYellow
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text23
  6442   00411C                     __ptext23:
  6443                           	callstack 0
  6444   00411C                     _right90:
  6445                           	callstack 25
  6446   00411C                     
  6447                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  6448   00411C  C018  F013         	movff	right90@mL,turnRight@mL
  6449   004120  C019  F014         	movff	right90@mR,turnRight@mR
  6450   004124  EC58  F01C         	call	_turnRight	;wreg free
  6451   004128                     
  6452                           ;dc_motor.c: 196:     _delay((unsigned long)((260)*(64000000/4000.0)));
  6453   004128  0E16               	movlw	22
  6454   00412A  6E1B               	movwf	(??_right90+1)^0,c
  6455   00412C  0E1B               	movlw	27
  6456   00412E  6E1A               	movwf	??_right90^0,c
  6457   004130  0E88               	movlw	136
  6458   004132                     u4897:
  6459   004132  2EE8               	decfsz	wreg,f,c
  6460   004134  D7FE               	bra	u4897
  6461   004136  2E1A               	decfsz	??_right90^0,f,c
  6462   004138  D7FC               	bra	u4897
  6463   00413A  2E1B               	decfsz	(??_right90+1)^0,f,c
  6464   00413C  D7FA               	bra	u4897
  6465   00413E  D000               	nop2	
  6466   004140                     
  6467                           ;dc_motor.c: 197:     stop(mL,mR);
  6468   004140  C018  F013         	movff	right90@mL,stop@mL
  6469   004144  C019  F014         	movff	right90@mR,stop@mR
  6470   004148  EC11  F01C         	call	_stop	;wreg free
  6471   00414C  0012               	return		;funcret
  6472   00414E                     __end_of_right90:
  6473                           	callstack 0
  6474                           
  6475 ;; *************** function _movePink *****************
  6476 ;; Defined at:
  6477 ;;		line 291 in file "dc_motor.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6480 ;;		 -> motorL(9), 
  6481 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6482 ;;		 -> motorR(9), 
  6483 ;;  path_length     2   29[COMRAM] unsigned int 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      void 
  6488 ;; Registers used:
  6489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6495 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6497 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6498 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6499 ;;Total ram usage:        6 bytes
  6500 ;; Hardware stack levels used: 1
  6501 ;; Hardware stack levels required when called: 4
  6502 ;; This function calls:
  6503 ;;		_backOneAndHalf
  6504 ;;		_left90
  6505 ;;		_logAction
  6506 ;; This function is called by:
  6507 ;;		_decision
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           	psect	text24
  6512   003D4A                     __ptext24:
  6513                           	callstack 0
  6514   003D4A                     _movePink:
  6515                           	callstack 25
  6516   003D4A                     
  6517                           ;dc_motor.c: 291: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 292: {;dc_motor.c: 294:     backOneAndHalf(mL,mR);
  6518   003D4A  C01C  F018         	movff	movePink@mL,backOneAndHalf@mL
  6519   003D4E  C01D  F019         	movff	movePink@mR,backOneAndHalf@mR
  6520   003D52  ECA7  F020         	call	_backOneAndHalf	;wreg free
  6521   003D56                     
  6522                           ;dc_motor.c: 295:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6523   003D56  0E29               	movlw	41
  6524   003D58  6E21               	movwf	(??_movePink+1)^0,c
  6525   003D5A  0E96               	movlw	150
  6526   003D5C  6E20               	movwf	??_movePink^0,c
  6527   003D5E  0E7F               	movlw	127
  6528   003D60                     u4907:
  6529   003D60  2EE8               	decfsz	wreg,f,c
  6530   003D62  D7FE               	bra	u4907
  6531   003D64  2E20               	decfsz	??_movePink^0,f,c
  6532   003D66  D7FC               	bra	u4907
  6533   003D68  2E21               	decfsz	(??_movePink+1)^0,f,c
  6534   003D6A  D7FA               	bra	u4907
  6535   003D6C  0000               	nop	
  6536   003D6E                     
  6537                           ;dc_motor.c: 296:     left90(mL,mR);
  6538   003D6E  C01C  F018         	movff	movePink@mL,left90@mL
  6539   003D72  C01D  F019         	movff	movePink@mR,left90@mR
  6540   003D76  ECF2  F020         	call	_left90	;wreg free
  6541   003D7A                     
  6542                           ;dc_motor.c: 297:     logAction('L',0, path_length);
  6543   003D7A  0E00               	movlw	0
  6544   003D7C  6E08               	movwf	(logAction@time+1)^0,c
  6545   003D7E  0E00               	movlw	0
  6546   003D80  6E07               	movwf	logAction@time^0,c
  6547   003D82  C01E  F009         	movff	movePink@path_length,logAction@pathLength
  6548   003D86  C01F  F00A         	movff	movePink@path_length+1,logAction@pathLength+1
  6549   003D8A  0E4C               	movlw	76
  6550   003D8C  EC88  F01D         	call	_logAction
  6551   003D90  0012               	return		;funcret
  6552   003D92                     __end_of_movePink:
  6553                           	callstack 0
  6554                           
  6555 ;; *************** function _backOneAndHalf *****************
  6556 ;; Defined at:
  6557 ;;		line 241 in file "dc_motor.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6560 ;;		 -> motorL(9), 
  6561 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6562 ;;		 -> motorR(9), 
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;		None
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  1    wreg      void 
  6567 ;; Registers used:
  6568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6569 ;; Tracked objects:
  6570 ;;		On entry : 0/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6576 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6577 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6578 ;;Total ram usage:        4 bytes
  6579 ;; Hardware stack levels used: 1
  6580 ;; Hardware stack levels required when called: 3
  6581 ;; This function calls:
  6582 ;;		_fullSpeedBack
  6583 ;;		_stop
  6584 ;; This function is called by:
  6585 ;;		_moveYellow
  6586 ;;		_movePink
  6587 ;; This function uses a non-reentrant model
  6588 ;;
  6589                           
  6590                           	psect	text25
  6591   00414E                     __ptext25:
  6592                           	callstack 0
  6593   00414E                     _backOneAndHalf:
  6594                           	callstack 25
  6595   00414E                     
  6596                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  6597   00414E  C018  F013         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  6598   004152  C019  F014         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  6599   004156  EC13  F01D         	call	_fullSpeedBack	;wreg free
  6600   00415A                     
  6601                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  6602   00415A  0E6A               	movlw	106
  6603   00415C  6E1B               	movwf	(??_backOneAndHalf+1)^0,c
  6604   00415E  0E85               	movlw	133
  6605   004160  6E1A               	movwf	??_backOneAndHalf^0,c
  6606   004162  0EB4               	movlw	180
  6607   004164                     u4917:
  6608   004164  2EE8               	decfsz	wreg,f,c
  6609   004166  D7FE               	bra	u4917
  6610   004168  2E1A               	decfsz	??_backOneAndHalf^0,f,c
  6611   00416A  D7FC               	bra	u4917
  6612   00416C  2E1B               	decfsz	(??_backOneAndHalf+1)^0,f,c
  6613   00416E  D7FA               	bra	u4917
  6614   004170  D000               	nop2	
  6615   004172                     
  6616                           ;dc_motor.c: 245:     stop(mL,mR);
  6617   004172  C018  F013         	movff	backOneAndHalf@mL,stop@mL
  6618   004176  C019  F014         	movff	backOneAndHalf@mR,stop@mR
  6619   00417A  EC11  F01C         	call	_stop	;wreg free
  6620   00417E  0012               	return		;funcret
  6621   004180                     __end_of_backOneAndHalf:
  6622                           	callstack 0
  6623                           
  6624 ;; *************** function _moveOrange *****************
  6625 ;; Defined at:
  6626 ;;		line 300 in file "dc_motor.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6629 ;;		 -> motorL(9), 
  6630 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6631 ;;		 -> motorR(9), 
  6632 ;;  path_length     2   29[COMRAM] unsigned int 
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;		None
  6635 ;; Return value:  Size  Location     Type
  6636 ;;                  1    wreg      void 
  6637 ;; Registers used:
  6638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6639 ;; Tracked objects:
  6640 ;;		On entry : 0/0
  6641 ;;		On exit  : 0/0
  6642 ;;		Unchanged: 0/0
  6643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6644 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6646 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6647 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6648 ;;Total ram usage:        6 bytes
  6649 ;; Hardware stack levels used: 1
  6650 ;; Hardware stack levels required when called: 4
  6651 ;; This function calls:
  6652 ;;		_backHalf
  6653 ;;		_logAction
  6654 ;;		_right135
  6655 ;; This function is called by:
  6656 ;;		_decision
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           	psect	text26
  6661   003D92                     __ptext26:
  6662                           	callstack 0
  6663   003D92                     _moveOrange:
  6664                           	callstack 25
  6665   003D92                     
  6666                           ;dc_motor.c: 300: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 301: {;dc_motor.c: 303:     backHalf(mL,mR);
  6667   003D92  C01C  F018         	movff	moveOrange@mL,backHalf@mL
  6668   003D96  C01D  F019         	movff	moveOrange@mR,backHalf@mR
  6669   003D9A  EC3D  F021         	call	_backHalf	;wreg free
  6670   003D9E                     
  6671                           ;dc_motor.c: 304:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6672   003D9E  0E29               	movlw	41
  6673   003DA0  6E21               	movwf	(??_moveOrange+1)^0,c
  6674   003DA2  0E96               	movlw	150
  6675   003DA4  6E20               	movwf	??_moveOrange^0,c
  6676   003DA6  0E7F               	movlw	127
  6677   003DA8                     u4927:
  6678   003DA8  2EE8               	decfsz	wreg,f,c
  6679   003DAA  D7FE               	bra	u4927
  6680   003DAC  2E20               	decfsz	??_moveOrange^0,f,c
  6681   003DAE  D7FC               	bra	u4927
  6682   003DB0  2E21               	decfsz	(??_moveOrange+1)^0,f,c
  6683   003DB2  D7FA               	bra	u4927
  6684   003DB4  0000               	nop	
  6685   003DB6                     
  6686                           ;dc_motor.c: 305:     right135(mL,mR);
  6687   003DB6  C01C  F018         	movff	moveOrange@mL,right135@mL
  6688   003DBA  C01D  F019         	movff	moveOrange@mR,right135@mR
  6689   003DBE  ECC0  F020         	call	_right135	;wreg free
  6690   003DC2                     
  6691                           ;dc_motor.c: 306:     logAction('135R',0, path_length);
  6692   003DC2  0E00               	movlw	0
  6693   003DC4  6E08               	movwf	(logAction@time+1)^0,c
  6694   003DC6  0E00               	movlw	0
  6695   003DC8  6E07               	movwf	logAction@time^0,c
  6696   003DCA  C01E  F009         	movff	moveOrange@path_length,logAction@pathLength
  6697   003DCE  C01F  F00A         	movff	moveOrange@path_length+1,logAction@pathLength+1
  6698   003DD2  0E52               	movlw	82
  6699   003DD4  EC88  F01D         	call	_logAction
  6700   003DD8  0012               	return		;funcret
  6701   003DDA                     __end_of_moveOrange:
  6702                           	callstack 0
  6703                           
  6704 ;; *************** function _right135 *****************
  6705 ;; Defined at:
  6706 ;;		line 217 in file "dc_motor.c"
  6707 ;; Parameters:    Size  Location     Type
  6708 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6709 ;;		 -> motorL(9), 
  6710 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6711 ;;		 -> motorR(9), 
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;		None
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6723 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6725 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6726 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6727 ;;Total ram usage:        4 bytes
  6728 ;; Hardware stack levels used: 1
  6729 ;; Hardware stack levels required when called: 3
  6730 ;; This function calls:
  6731 ;;		_stop
  6732 ;;		_turnRight
  6733 ;; This function is called by:
  6734 ;;		_moveOrange
  6735 ;;		_reverseTurn
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           	psect	text27
  6740   004180                     __ptext27:
  6741                           	callstack 0
  6742   004180                     _right135:
  6743                           	callstack 25
  6744   004180                     
  6745                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  6746   004180  C018  F013         	movff	right135@mL,turnRight@mL
  6747   004184  C019  F014         	movff	right135@mR,turnRight@mR
  6748   004188  EC58  F01C         	call	_turnRight	;wreg free
  6749   00418C                     
  6750                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  6751   00418C  0E21               	movlw	33
  6752   00418E  6E1B               	movwf	(??_right135+1)^0,c
  6753   004190  0E78               	movlw	120
  6754   004192  6E1A               	movwf	??_right135^0,c
  6755   004194  0E98               	movlw	152
  6756   004196                     u4937:
  6757   004196  2EE8               	decfsz	wreg,f,c
  6758   004198  D7FE               	bra	u4937
  6759   00419A  2E1A               	decfsz	??_right135^0,f,c
  6760   00419C  D7FC               	bra	u4937
  6761   00419E  2E1B               	decfsz	(??_right135+1)^0,f,c
  6762   0041A0  D7FA               	bra	u4937
  6763   0041A2  D000               	nop2	
  6764   0041A4                     
  6765                           ;dc_motor.c: 221:     stop(mL,mR);
  6766   0041A4  C018  F013         	movff	right135@mL,stop@mL
  6767   0041A8  C019  F014         	movff	right135@mR,stop@mR
  6768   0041AC  EC11  F01C         	call	_stop	;wreg free
  6769   0041B0  0012               	return		;funcret
  6770   0041B2                     __end_of_right135:
  6771                           	callstack 0
  6772                           
  6773 ;; *************** function _turnRight *****************
  6774 ;; Defined at:
  6775 ;;		line 125 in file "dc_motor.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6778 ;;		 -> motorL(9), 
  6779 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6780 ;;		 -> motorR(9), 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  i               2   21[COMRAM] unsigned int 
  6783 ;; Return value:  Size  Location     Type
  6784 ;;                  1    wreg      void 
  6785 ;; Registers used:
  6786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6793 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6794 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6795 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6796 ;;Total ram usage:        5 bytes
  6797 ;; Hardware stack levels used: 1
  6798 ;; Hardware stack levels required when called: 2
  6799 ;; This function calls:
  6800 ;;		_setMotorPWM
  6801 ;; This function is called by:
  6802 ;;		_right90
  6803 ;;		_right135
  6804 ;;		_reverseTurn
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           	psect	text28
  6809   0038B0                     __ptext28:
  6810                           	callstack 0
  6811   0038B0                     _turnRight:
  6812                           	callstack 26
  6813   0038B0                     
  6814                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  6815   0038B0  5013               	movf	turnRight@mL^0,w,c
  6816   0038B2  6ED9               	movwf	fsr2l,c
  6817   0038B4  6ADA               	clrf	fsr2h,c
  6818   0038B6  0E01               	movlw	1
  6819   0038B8  26D9               	addwf	fsr2l,f,c
  6820   0038BA  0E01               	movlw	1
  6821   0038BC  6EDF               	movwf	indf2,c
  6822                           
  6823                           ;dc_motor.c: 129:     mR->direction = 0;
  6824   0038BE  5014               	movf	turnRight@mR^0,w,c
  6825   0038C0  6ED9               	movwf	fsr2l,c
  6826   0038C2  6ADA               	clrf	fsr2h,c
  6827   0038C4  0E01               	movlw	1
  6828   0038C6  26D9               	addwf	fsr2l,f,c
  6829   0038C8  6ADF               	clrf	indf2,c
  6830   0038CA                     
  6831                           ;dc_motor.c: 131:     setMotorPWM(mL);
  6832   0038CA  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  6833   0038CE  ECD2  F016         	call	_setMotorPWM	;wreg free
  6834   0038D2                     
  6835                           ;dc_motor.c: 132:     setMotorPWM(mR);
  6836   0038D2  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  6837   0038D6  ECD2  F016         	call	_setMotorPWM	;wreg free
  6838   0038DA                     
  6839                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  6840   0038DA  0E00               	movlw	0
  6841   0038DC  6E17               	movwf	(turnRight@i+1)^0,c
  6842   0038DE  0E00               	movlw	0
  6843   0038E0  6E16               	movwf	turnRight@i^0,c
  6844   0038E2                     l3551:
  6845                           
  6846                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  6847   0038E2  5013               	movf	turnRight@mL^0,w,c
  6848   0038E4  6ED9               	movwf	fsr2l,c
  6849   0038E6  6ADA               	clrf	fsr2h,c
  6850   0038E8  2ADF               	incf	indf2,f,c
  6851                           
  6852                           ;dc_motor.c: 136:         mR->power++;
  6853   0038EA  5014               	movf	turnRight@mR^0,w,c
  6854   0038EC  6ED9               	movwf	fsr2l,c
  6855   0038EE  6ADA               	clrf	fsr2h,c
  6856   0038F0  2ADF               	incf	indf2,f,c
  6857   0038F2                     
  6858                           ;dc_motor.c: 137:         setMotorPWM(mL);
  6859   0038F2  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  6860   0038F6  ECD2  F016         	call	_setMotorPWM	;wreg free
  6861   0038FA                     
  6862                           ;dc_motor.c: 138:         setMotorPWM(mR);
  6863   0038FA  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  6864   0038FE  ECD2  F016         	call	_setMotorPWM	;wreg free
  6865   003902                     
  6866                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  6867   003902  0E0B               	movlw	11
  6868   003904  6E15               	movwf	??_turnRight^0,c
  6869   003906  0E62               	movlw	98
  6870   003908                     u4947:
  6871   003908  2EE8               	decfsz	wreg,f,c
  6872   00390A  D7FE               	bra	u4947
  6873   00390C  2E15               	decfsz	??_turnRight^0,f,c
  6874   00390E  D7FC               	bra	u4947
  6875   003910  D000               	nop2	
  6876   003912                     
  6877                           ;dc_motor.c: 140:     }
  6878   003912  4A16               	infsnz	turnRight@i^0,f,c
  6879   003914  2A17               	incf	(turnRight@i+1)^0,f,c
  6880   003916  5017               	movf	(turnRight@i+1)^0,w,c
  6881   003918  E109               	bnz	u2710
  6882   00391A  0E32               	movlw	50
  6883   00391C  5C16               	subwf	turnRight@i^0,w,c
  6884   00391E  A0D8               	btfss	status,0,c
  6885   003920  EF94  F01C         	goto	u2711
  6886   003924  EF96  F01C         	goto	u2710
  6887   003928                     u2711:
  6888   003928  EF71  F01C         	goto	l3551
  6889   00392C                     u2710:
  6890   00392C  0012               	return		;funcret
  6891   00392E                     __end_of_turnRight:
  6892                           	callstack 0
  6893                           
  6894 ;; *************** function _moveLightBlue *****************
  6895 ;; Defined at:
  6896 ;;		line 309 in file "dc_motor.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6899 ;;		 -> motorL(9), 
  6900 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6901 ;;		 -> motorR(9), 
  6902 ;;  path_length     2   29[COMRAM] unsigned int 
  6903 ;; Auto vars:     Size  Location     Type
  6904 ;;		None
  6905 ;; Return value:  Size  Location     Type
  6906 ;;                  1    wreg      void 
  6907 ;; Registers used:
  6908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6909 ;; Tracked objects:
  6910 ;;		On entry : 0/0
  6911 ;;		On exit  : 0/0
  6912 ;;		Unchanged: 0/0
  6913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6914 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6916 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6917 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6918 ;;Total ram usage:        6 bytes
  6919 ;; Hardware stack levels used: 1
  6920 ;; Hardware stack levels required when called: 4
  6921 ;; This function calls:
  6922 ;;		_backHalf
  6923 ;;		_left135
  6924 ;;		_logAction
  6925 ;; This function is called by:
  6926 ;;		_decision
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           	psect	text29
  6931   003DDA                     __ptext29:
  6932                           	callstack 0
  6933   003DDA                     _moveLightBlue:
  6934                           	callstack 25
  6935   003DDA                     
  6936                           ;dc_motor.c: 309: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_length);dc_motor.c: 310: {;dc_motor.c: 312:     backHalf(mL,mR);
  6937   003DDA  C01C  F018         	movff	moveLightBlue@mL,backHalf@mL
  6938   003DDE  C01D  F019         	movff	moveLightBlue@mR,backHalf@mR
  6939   003DE2  EC3D  F021         	call	_backHalf	;wreg free
  6940   003DE6                     
  6941                           ;dc_motor.c: 313:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6942   003DE6  0E29               	movlw	41
  6943   003DE8  6E21               	movwf	(??_moveLightBlue+1)^0,c
  6944   003DEA  0E96               	movlw	150
  6945   003DEC  6E20               	movwf	??_moveLightBlue^0,c
  6946   003DEE  0E7F               	movlw	127
  6947   003DF0                     u4957:
  6948   003DF0  2EE8               	decfsz	wreg,f,c
  6949   003DF2  D7FE               	bra	u4957
  6950   003DF4  2E20               	decfsz	??_moveLightBlue^0,f,c
  6951   003DF6  D7FC               	bra	u4957
  6952   003DF8  2E21               	decfsz	(??_moveLightBlue+1)^0,f,c
  6953   003DFA  D7FA               	bra	u4957
  6954   003DFC  0000               	nop	
  6955   003DFE                     
  6956                           ;dc_motor.c: 314:     left135(mL,mR);
  6957   003DFE  C01C  F018         	movff	moveLightBlue@mL,left135@mL
  6958   003E02  C01D  F019         	movff	moveLightBlue@mR,left135@mR
  6959   003E06  ECD9  F020         	call	_left135	;wreg free
  6960   003E0A                     
  6961                           ;dc_motor.c: 315:     logAction('135L',0,path_length);
  6962   003E0A  0E00               	movlw	0
  6963   003E0C  6E08               	movwf	(logAction@time+1)^0,c
  6964   003E0E  0E00               	movlw	0
  6965   003E10  6E07               	movwf	logAction@time^0,c
  6966   003E12  C01E  F009         	movff	moveLightBlue@path_length,logAction@pathLength
  6967   003E16  C01F  F00A         	movff	moveLightBlue@path_length+1,logAction@pathLength+1
  6968   003E1A  0E4C               	movlw	76
  6969   003E1C  EC88  F01D         	call	_logAction
  6970   003E20  0012               	return		;funcret
  6971   003E22                     __end_of_moveLightBlue:
  6972                           	callstack 0
  6973                           
  6974 ;; *************** function _left135 *****************
  6975 ;; Defined at:
  6976 ;;		line 225 in file "dc_motor.c"
  6977 ;; Parameters:    Size  Location     Type
  6978 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6979 ;;		 -> motorL(9), 
  6980 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6981 ;;		 -> motorR(9), 
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;		None
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  1    wreg      void 
  6986 ;; Registers used:
  6987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6993 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6995 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6996 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6997 ;;Total ram usage:        4 bytes
  6998 ;; Hardware stack levels used: 1
  6999 ;; Hardware stack levels required when called: 3
  7000 ;; This function calls:
  7001 ;;		_stop
  7002 ;;		_turnLeft
  7003 ;; This function is called by:
  7004 ;;		_moveLightBlue
  7005 ;;		_reverseTurn
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           	psect	text30
  7010   0041B2                     __ptext30:
  7011                           	callstack 0
  7012   0041B2                     _left135:
  7013                           	callstack 25
  7014   0041B2                     
  7015                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7016   0041B2  C018  F013         	movff	left135@mL,turnLeft@mL
  7017   0041B6  C019  F014         	movff	left135@mR,turnLeft@mR
  7018   0041BA  EC97  F01C         	call	_turnLeft	;wreg free
  7019   0041BE                     
  7020                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7021   0041BE  0E21               	movlw	33
  7022   0041C0  6E1B               	movwf	(??_left135+1)^0,c
  7023   0041C2  0E78               	movlw	120
  7024   0041C4  6E1A               	movwf	??_left135^0,c
  7025   0041C6  0E98               	movlw	152
  7026   0041C8                     u4967:
  7027   0041C8  2EE8               	decfsz	wreg,f,c
  7028   0041CA  D7FE               	bra	u4967
  7029   0041CC  2E1A               	decfsz	??_left135^0,f,c
  7030   0041CE  D7FC               	bra	u4967
  7031   0041D0  2E1B               	decfsz	(??_left135+1)^0,f,c
  7032   0041D2  D7FA               	bra	u4967
  7033   0041D4  D000               	nop2	
  7034   0041D6                     
  7035                           ;dc_motor.c: 229:     stop(mL,mR);
  7036   0041D6  C018  F013         	movff	left135@mL,stop@mL
  7037   0041DA  C019  F014         	movff	left135@mR,stop@mR
  7038   0041DE  EC11  F01C         	call	_stop	;wreg free
  7039   0041E2  0012               	return		;funcret
  7040   0041E4                     __end_of_left135:
  7041                           	callstack 0
  7042                           
  7043 ;; *************** function _moveGreen *****************
  7044 ;; Defined at:
  7045 ;;		line 264 in file "dc_motor.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  7048 ;;		 -> motorL(9), 
  7049 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  7050 ;;		 -> motorR(9), 
  7051 ;;  path_length     2   29[COMRAM] unsigned int 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;		None
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  1    wreg      void 
  7056 ;; Registers used:
  7057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7063 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7065 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7066 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7067 ;;Total ram usage:        6 bytes
  7068 ;; Hardware stack levels used: 1
  7069 ;; Hardware stack levels required when called: 4
  7070 ;; This function calls:
  7071 ;;		_backHalf
  7072 ;;		_left90
  7073 ;;		_logAction
  7074 ;; This function is called by:
  7075 ;;		_decision
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           	psect	text31
  7080   003E22                     __ptext31:
  7081                           	callstack 0
  7082   003E22                     _moveGreen:
  7083                           	callstack 25
  7084   003E22                     
  7085                           ;dc_motor.c: 264: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          path_length);dc_motor.c: 265: {;dc_motor.c: 267:     backHalf(mL,mR);
  7086   003E22  C01C  F018         	movff	moveGreen@mL,backHalf@mL
  7087   003E26  C01D  F019         	movff	moveGreen@mR,backHalf@mR
  7088   003E2A  EC3D  F021         	call	_backHalf	;wreg free
  7089   003E2E                     
  7090                           ;dc_motor.c: 268:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7091   003E2E  0E29               	movlw	41
  7092   003E30  6E21               	movwf	(??_moveGreen+1)^0,c
  7093   003E32  0E96               	movlw	150
  7094   003E34  6E20               	movwf	??_moveGreen^0,c
  7095   003E36  0E7F               	movlw	127
  7096   003E38                     u4977:
  7097   003E38  2EE8               	decfsz	wreg,f,c
  7098   003E3A  D7FE               	bra	u4977
  7099   003E3C  2E20               	decfsz	??_moveGreen^0,f,c
  7100   003E3E  D7FC               	bra	u4977
  7101   003E40  2E21               	decfsz	(??_moveGreen+1)^0,f,c
  7102   003E42  D7FA               	bra	u4977
  7103   003E44  0000               	nop	
  7104   003E46                     
  7105                           ;dc_motor.c: 269:     left90(mL,mR);
  7106   003E46  C01C  F018         	movff	moveGreen@mL,left90@mL
  7107   003E4A  C01D  F019         	movff	moveGreen@mR,left90@mR
  7108   003E4E  ECF2  F020         	call	_left90	;wreg free
  7109   003E52                     
  7110                           ;dc_motor.c: 270:     logAction('L',0, path_length);
  7111   003E52  0E00               	movlw	0
  7112   003E54  6E08               	movwf	(logAction@time+1)^0,c
  7113   003E56  0E00               	movlw	0
  7114   003E58  6E07               	movwf	logAction@time^0,c
  7115   003E5A  C01E  F009         	movff	moveGreen@path_length,logAction@pathLength
  7116   003E5E  C01F  F00A         	movff	moveGreen@path_length+1,logAction@pathLength+1
  7117   003E62  0E4C               	movlw	76
  7118   003E64  EC88  F01D         	call	_logAction
  7119   003E68  0012               	return		;funcret
  7120   003E6A                     __end_of_moveGreen:
  7121                           	callstack 0
  7122                           
  7123 ;; *************** function _left90 *****************
  7124 ;; Defined at:
  7125 ;;		line 201 in file "dc_motor.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7128 ;;		 -> motorL(9), 
  7129 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7130 ;;		 -> motorR(9), 
  7131 ;; Auto vars:     Size  Location     Type
  7132 ;;		None
  7133 ;; Return value:  Size  Location     Type
  7134 ;;                  1    wreg      void 
  7135 ;; Registers used:
  7136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7142 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7145 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7146 ;;Total ram usage:        4 bytes
  7147 ;; Hardware stack levels used: 1
  7148 ;; Hardware stack levels required when called: 3
  7149 ;; This function calls:
  7150 ;;		_stop
  7151 ;;		_turnLeft
  7152 ;; This function is called by:
  7153 ;;		_moveGreen
  7154 ;;		_movePink
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           	psect	text32
  7159   0041E4                     __ptext32:
  7160                           	callstack 0
  7161   0041E4                     _left90:
  7162                           	callstack 25
  7163   0041E4                     
  7164                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  7165   0041E4  C018  F013         	movff	left90@mL,turnLeft@mL
  7166   0041E8  C019  F014         	movff	left90@mR,turnLeft@mR
  7167   0041EC  EC97  F01C         	call	_turnLeft	;wreg free
  7168   0041F0                     
  7169                           ;dc_motor.c: 204:     _delay((unsigned long)((260)*(64000000/4000.0)));
  7170   0041F0  0E16               	movlw	22
  7171   0041F2  6E1B               	movwf	(??_left90+1)^0,c
  7172   0041F4  0E1B               	movlw	27
  7173   0041F6  6E1A               	movwf	??_left90^0,c
  7174   0041F8  0E88               	movlw	136
  7175   0041FA                     u4987:
  7176   0041FA  2EE8               	decfsz	wreg,f,c
  7177   0041FC  D7FE               	bra	u4987
  7178   0041FE  2E1A               	decfsz	??_left90^0,f,c
  7179   004200  D7FC               	bra	u4987
  7180   004202  2E1B               	decfsz	(??_left90+1)^0,f,c
  7181   004204  D7FA               	bra	u4987
  7182   004206  D000               	nop2	
  7183   004208                     
  7184                           ;dc_motor.c: 205:     stop(mL,mR);
  7185   004208  C018  F013         	movff	left90@mL,stop@mL
  7186   00420C  C019  F014         	movff	left90@mR,stop@mR
  7187   004210  EC11  F01C         	call	_stop	;wreg free
  7188   004214  0012               	return		;funcret
  7189   004216                     __end_of_left90:
  7190                           	callstack 0
  7191                           
  7192 ;; *************** function _moveBlue *****************
  7193 ;; Defined at:
  7194 ;;		line 273 in file "dc_motor.c"
  7195 ;; Parameters:    Size  Location     Type
  7196 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  7197 ;;		 -> motorL(9), 
  7198 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  7199 ;;		 -> motorR(9), 
  7200 ;;  path_length     2   29[COMRAM] unsigned int 
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;		None
  7203 ;; Return value:  Size  Location     Type
  7204 ;;                  1    wreg      void 
  7205 ;; Registers used:
  7206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/0
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7212 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7214 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7215 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7216 ;;Total ram usage:        6 bytes
  7217 ;; Hardware stack levels used: 1
  7218 ;; Hardware stack levels required when called: 4
  7219 ;; This function calls:
  7220 ;;		_backHalf
  7221 ;;		_logAction
  7222 ;;		_turn180
  7223 ;; This function is called by:
  7224 ;;		_decision
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           	psect	text33
  7229   003E6A                     __ptext33:
  7230                           	callstack 0
  7231   003E6A                     _moveBlue:
  7232                           	callstack 25
  7233   003E6A                     
  7234                           ;dc_motor.c: 273: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 274: {;dc_motor.c: 276:     backHalf(mL,mR);
  7235   003E6A  C01C  F018         	movff	moveBlue@mL,backHalf@mL
  7236   003E6E  C01D  F019         	movff	moveBlue@mR,backHalf@mR
  7237   003E72  EC3D  F021         	call	_backHalf	;wreg free
  7238   003E76                     
  7239                           ;dc_motor.c: 277:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7240   003E76  0E29               	movlw	41
  7241   003E78  6E21               	movwf	(??_moveBlue+1)^0,c
  7242   003E7A  0E96               	movlw	150
  7243   003E7C  6E20               	movwf	??_moveBlue^0,c
  7244   003E7E  0E7F               	movlw	127
  7245   003E80                     u4997:
  7246   003E80  2EE8               	decfsz	wreg,f,c
  7247   003E82  D7FE               	bra	u4997
  7248   003E84  2E20               	decfsz	??_moveBlue^0,f,c
  7249   003E86  D7FC               	bra	u4997
  7250   003E88  2E21               	decfsz	(??_moveBlue+1)^0,f,c
  7251   003E8A  D7FA               	bra	u4997
  7252   003E8C  0000               	nop	
  7253   003E8E                     
  7254                           ;dc_motor.c: 278:     turn180(mL,mR);
  7255   003E8E  C01C  F018         	movff	moveBlue@mL,turn180@mL
  7256   003E92  C01D  F019         	movff	moveBlue@mR,turn180@mR
  7257   003E96  EC0B  F021         	call	_turn180	;wreg free
  7258   003E9A                     
  7259                           ;dc_motor.c: 279:     logAction('180',0, path_length);
  7260   003E9A  0E00               	movlw	0
  7261   003E9C  6E08               	movwf	(logAction@time+1)^0,c
  7262   003E9E  0E00               	movlw	0
  7263   003EA0  6E07               	movwf	logAction@time^0,c
  7264   003EA2  C01E  F009         	movff	moveBlue@path_length,logAction@pathLength
  7265   003EA6  C01F  F00A         	movff	moveBlue@path_length+1,logAction@pathLength+1
  7266   003EAA  0E30               	movlw	48
  7267   003EAC  EC88  F01D         	call	_logAction
  7268   003EB0  0012               	return		;funcret
  7269   003EB2                     __end_of_moveBlue:
  7270                           	callstack 0
  7271                           
  7272 ;; *************** function _turn180 *****************
  7273 ;; Defined at:
  7274 ;;		line 209 in file "dc_motor.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7277 ;;		 -> motorL(9), 
  7278 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7279 ;;		 -> motorR(9), 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;		None
  7282 ;; Return value:  Size  Location     Type
  7283 ;;                  1    wreg      void 
  7284 ;; Registers used:
  7285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7286 ;; Tracked objects:
  7287 ;;		On entry : 0/0
  7288 ;;		On exit  : 0/0
  7289 ;;		Unchanged: 0/0
  7290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7291 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7293 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7294 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7295 ;;Total ram usage:        4 bytes
  7296 ;; Hardware stack levels used: 1
  7297 ;; Hardware stack levels required when called: 3
  7298 ;; This function calls:
  7299 ;;		_stop
  7300 ;;		_turnLeft
  7301 ;; This function is called by:
  7302 ;;		_moveBlue
  7303 ;;		_reverseTurn
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           	psect	text34
  7308   004216                     __ptext34:
  7309                           	callstack 0
  7310   004216                     _turn180:
  7311                           	callstack 25
  7312   004216                     
  7313                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  7314   004216  C018  F013         	movff	turn180@mL,turnLeft@mL
  7315   00421A  C019  F014         	movff	turn180@mR,turnLeft@mR
  7316   00421E  EC97  F01C         	call	_turnLeft	;wreg free
  7317   004222                     
  7318                           ;dc_motor.c: 212:     _delay((unsigned long)((520)*(64000000/4000.0)));
  7319   004222  0E2B               	movlw	43
  7320   004224  6E1B               	movwf	(??_turn180+1)^0,c
  7321   004226  0E36               	movlw	54
  7322   004228  6E1A               	movwf	??_turn180^0,c
  7323   00422A  0E13               	movlw	19
  7324   00422C                     u5007:
  7325   00422C  2EE8               	decfsz	wreg,f,c
  7326   00422E  D7FE               	bra	u5007
  7327   004230  2E1A               	decfsz	??_turn180^0,f,c
  7328   004232  D7FC               	bra	u5007
  7329   004234  2E1B               	decfsz	(??_turn180+1)^0,f,c
  7330   004236  D7FA               	bra	u5007
  7331   004238  0000               	nop	
  7332   00423A                     
  7333                           ;dc_motor.c: 213:     stop(mL,mR);
  7334   00423A  C018  F013         	movff	turn180@mL,stop@mL
  7335   00423E  C019  F014         	movff	turn180@mR,stop@mR
  7336   004242  EC11  F01C         	call	_stop	;wreg free
  7337   004246  0012               	return		;funcret
  7338   004248                     __end_of_turn180:
  7339                           	callstack 0
  7340                           
  7341 ;; *************** function _turnLeft *****************
  7342 ;; Defined at:
  7343 ;;		line 105 in file "dc_motor.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7346 ;;		 -> motorL(9), 
  7347 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7348 ;;		 -> motorR(9), 
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;  i               2   21[COMRAM] unsigned int 
  7351 ;; Return value:  Size  Location     Type
  7352 ;;                  1    wreg      void 
  7353 ;; Registers used:
  7354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7355 ;; Tracked objects:
  7356 ;;		On entry : 0/0
  7357 ;;		On exit  : 0/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7360 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7363 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7364 ;;Total ram usage:        5 bytes
  7365 ;; Hardware stack levels used: 1
  7366 ;; Hardware stack levels required when called: 2
  7367 ;; This function calls:
  7368 ;;		_setMotorPWM
  7369 ;; This function is called by:
  7370 ;;		_left90
  7371 ;;		_turn180
  7372 ;;		_left135
  7373 ;;		_reverseTurn
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           	psect	text35
  7378   00392E                     __ptext35:
  7379                           	callstack 0
  7380   00392E                     _turnLeft:
  7381                           	callstack 26
  7382   00392E                     
  7383                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  7384   00392E  5013               	movf	turnLeft@mL^0,w,c
  7385   003930  6ED9               	movwf	fsr2l,c
  7386   003932  6ADA               	clrf	fsr2h,c
  7387   003934  0E01               	movlw	1
  7388   003936  26D9               	addwf	fsr2l,f,c
  7389   003938  6ADF               	clrf	indf2,c
  7390                           
  7391                           ;dc_motor.c: 109:     mR->direction = 1;
  7392   00393A  5014               	movf	turnLeft@mR^0,w,c
  7393   00393C  6ED9               	movwf	fsr2l,c
  7394   00393E  6ADA               	clrf	fsr2h,c
  7395   003940  0E01               	movlw	1
  7396   003942  26D9               	addwf	fsr2l,f,c
  7397   003944  0E01               	movlw	1
  7398   003946  6EDF               	movwf	indf2,c
  7399   003948                     
  7400                           ;dc_motor.c: 111:     setMotorPWM(mL);
  7401   003948  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  7402   00394C  ECD2  F016         	call	_setMotorPWM	;wreg free
  7403   003950                     
  7404                           ;dc_motor.c: 112:     setMotorPWM(mR);
  7405   003950  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  7406   003954  ECD2  F016         	call	_setMotorPWM	;wreg free
  7407   003958                     
  7408                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  7409   003958  0E00               	movlw	0
  7410   00395A  6E17               	movwf	(turnLeft@i+1)^0,c
  7411   00395C  0E00               	movlw	0
  7412   00395E  6E16               	movwf	turnLeft@i^0,c
  7413   003960                     l3527:
  7414                           
  7415                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  7416   003960  5013               	movf	turnLeft@mL^0,w,c
  7417   003962  6ED9               	movwf	fsr2l,c
  7418   003964  6ADA               	clrf	fsr2h,c
  7419   003966  2ADF               	incf	indf2,f,c
  7420                           
  7421                           ;dc_motor.c: 116:         mR->power++;
  7422   003968  5014               	movf	turnLeft@mR^0,w,c
  7423   00396A  6ED9               	movwf	fsr2l,c
  7424   00396C  6ADA               	clrf	fsr2h,c
  7425   00396E  2ADF               	incf	indf2,f,c
  7426   003970                     
  7427                           ;dc_motor.c: 117:         setMotorPWM(mL);
  7428   003970  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  7429   003974  ECD2  F016         	call	_setMotorPWM	;wreg free
  7430   003978                     
  7431                           ;dc_motor.c: 118:         setMotorPWM(mR);
  7432   003978  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  7433   00397C  ECD2  F016         	call	_setMotorPWM	;wreg free
  7434   003980                     
  7435                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7436   003980  0E0B               	movlw	11
  7437   003982  6E15               	movwf	??_turnLeft^0,c
  7438   003984  0E62               	movlw	98
  7439   003986                     u5017:
  7440   003986  2EE8               	decfsz	wreg,f,c
  7441   003988  D7FE               	bra	u5017
  7442   00398A  2E15               	decfsz	??_turnLeft^0,f,c
  7443   00398C  D7FC               	bra	u5017
  7444   00398E  D000               	nop2	
  7445   003990                     
  7446                           ;dc_motor.c: 120:     }
  7447   003990  4A16               	infsnz	turnLeft@i^0,f,c
  7448   003992  2A17               	incf	(turnLeft@i+1)^0,f,c
  7449   003994  5017               	movf	(turnLeft@i+1)^0,w,c
  7450   003996  E109               	bnz	u2700
  7451   003998  0E32               	movlw	50
  7452   00399A  5C16               	subwf	turnLeft@i^0,w,c
  7453   00399C  A0D8               	btfss	status,0,c
  7454   00399E  EFD3  F01C         	goto	u2701
  7455   0039A2  EFD5  F01C         	goto	u2700
  7456   0039A6                     u2701:
  7457   0039A6  EFB0  F01C         	goto	l3527
  7458   0039AA                     u2700:
  7459   0039AA  0012               	return		;funcret
  7460   0039AC                     __end_of_turnLeft:
  7461                           	callstack 0
  7462                           
  7463 ;; *************** function _logAction *****************
  7464 ;; Defined at:
  7465 ;;		line 329 in file "dc_motor.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;  action          1    wreg     unsigned char 
  7468 ;;  time            2    6[COMRAM] int 
  7469 ;;  pathLength      2    8[COMRAM] unsigned int 
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;  action          1   10[COMRAM] unsigned char 
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      void 
  7474 ;; Registers used:
  7475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7481 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7482 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7484 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7485 ;;Total ram usage:        5 bytes
  7486 ;; Hardware stack levels used: 1
  7487 ;; Hardware stack levels required when called: 1
  7488 ;; This function calls:
  7489 ;;		___wmul
  7490 ;; This function is called by:
  7491 ;;		_main
  7492 ;;		_moveRed
  7493 ;;		_moveGreen
  7494 ;;		_moveBlue
  7495 ;;		_moveYellow
  7496 ;;		_movePink
  7497 ;;		_moveOrange
  7498 ;;		_moveLightBlue
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           	psect	text36
  7503   003B10                     __ptext36:
  7504                           	callstack 0
  7505   003B10                     _logAction:
  7506                           	callstack 29
  7507                           
  7508                           ;incstack = 0
  7509                           ;logAction@action stored from wreg
  7510   003B10  6E0B               	movwf	logAction@action^0,c
  7511   003B12                     
  7512                           ;dc_motor.c: 330:     if (pathLength < 50) {
  7513   003B12  500A               	movf	(logAction@pathLength+1)^0,w,c
  7514   003B14  E107               	bnz	u3181
  7515   003B16  0E32               	movlw	50
  7516   003B18  5C09               	subwf	logAction@pathLength^0,w,c
  7517   003B1A  B0D8               	btfsc	status,0,c
  7518   003B1C  EF92  F01D         	goto	u3181
  7519   003B20  EF94  F01D         	goto	u3180
  7520   003B24                     u3181:
  7521   003B24  EFBC  F01D         	goto	l471
  7522   003B28                     u3180:
  7523   003B28                     
  7524                           ;dc_motor.c: 331:         path[pathLength].action = action;
  7525   003B28  C009  F001         	movff	logAction@pathLength,___wmul@multiplier
  7526   003B2C  C00A  F002         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7527   003B30  0E00               	movlw	0
  7528   003B32  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  7529   003B34  0E03               	movlw	3
  7530   003B36  6E03               	movwf	___wmul@multiplicand^0,c
  7531   003B38  EC7E  F021         	call	___wmul	;wreg free
  7532   003B3C  0E00               	movlw	low _path
  7533   003B3E  2401               	addwf	?___wmul^0,w,c
  7534   003B40  6ED9               	movwf	fsr2l,c
  7535   003B42  0E02               	movlw	high _path
  7536   003B44  2002               	addwfc	(?___wmul+1)^0,w,c
  7537   003B46  6EDA               	movwf	fsr2h,c
  7538   003B48  C00B  FFDF         	movff	logAction@action,indf2
  7539                           
  7540                           ;dc_motor.c: 332:         path[pathLength].time = time;
  7541   003B4C  C009  F001         	movff	logAction@pathLength,___wmul@multiplier
  7542   003B50  C00A  F002         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7543   003B54  0E00               	movlw	0
  7544   003B56  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  7545   003B58  0E03               	movlw	3
  7546   003B5A  6E03               	movwf	___wmul@multiplicand^0,c
  7547   003B5C  EC7E  F021         	call	___wmul	;wreg free
  7548   003B60  0E01               	movlw	low (_path+1)
  7549   003B62  2401               	addwf	?___wmul^0,w,c
  7550   003B64  6ED9               	movwf	fsr2l,c
  7551   003B66  0E02               	movlw	high (_path+1)
  7552   003B68  2002               	addwfc	(?___wmul+1)^0,w,c
  7553   003B6A  6EDA               	movwf	fsr2h,c
  7554   003B6C  C007  FFDE         	movff	logAction@time,postinc2
  7555   003B70  C008  FFDD         	movff	logAction@time+1,postdec2
  7556   003B74                     
  7557                           ;dc_motor.c: 333:         pathLength++;
  7558   003B74  4A09               	infsnz	logAction@pathLength^0,f,c
  7559   003B76  2A0A               	incf	(logAction@pathLength+1)^0,f,c
  7560   003B78                     l471:
  7561   003B78  0012               	return		;funcret
  7562   003B7A                     __end_of_logAction:
  7563                           	callstack 0
  7564                           
  7565 ;; *************** function _backHalf *****************
  7566 ;; Defined at:
  7567 ;;		line 233 in file "dc_motor.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7570 ;;		 -> motorL(9), 
  7571 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7572 ;;		 -> motorR(9), 
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;		None
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  1    wreg      void 
  7577 ;; Registers used:
  7578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/0
  7581 ;;		On exit  : 0/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7584 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7586 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7587 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7588 ;;Total ram usage:        4 bytes
  7589 ;; Hardware stack levels used: 1
  7590 ;; Hardware stack levels required when called: 3
  7591 ;; This function calls:
  7592 ;;		_fullSpeedBack
  7593 ;;		_stop
  7594 ;; This function is called by:
  7595 ;;		_moveRed
  7596 ;;		_moveGreen
  7597 ;;		_moveBlue
  7598 ;;		_moveOrange
  7599 ;;		_moveLightBlue
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           	psect	text37
  7604   00427A                     __ptext37:
  7605                           	callstack 0
  7606   00427A                     _backHalf:
  7607                           	callstack 25
  7608   00427A                     
  7609                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  7610   00427A  C018  F013         	movff	backHalf@mL,fullSpeedBack@mL
  7611   00427E  C019  F014         	movff	backHalf@mR,fullSpeedBack@mR
  7612   004282  EC13  F01D         	call	_fullSpeedBack	;wreg free
  7613   004286                     
  7614                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  7615   004286  0E19               	movlw	25
  7616   004288  6E1B               	movwf	(??_backHalf+1)^0,c
  7617   00428A  0E5A               	movlw	90
  7618   00428C  6E1A               	movwf	??_backHalf^0,c
  7619   00428E  0EB2               	movlw	178
  7620   004290                     u5027:
  7621   004290  2EE8               	decfsz	wreg,f,c
  7622   004292  D7FE               	bra	u5027
  7623   004294  2E1A               	decfsz	??_backHalf^0,f,c
  7624   004296  D7FC               	bra	u5027
  7625   004298  2E1B               	decfsz	(??_backHalf+1)^0,f,c
  7626   00429A  D7FA               	bra	u5027
  7627   00429C                     
  7628                           ;dc_motor.c: 237:     stop(mL,mR);
  7629   00429C  C018  F013         	movff	backHalf@mL,stop@mL
  7630   0042A0  C019  F014         	movff	backHalf@mR,stop@mR
  7631   0042A4  EC11  F01C         	call	_stop	;wreg free
  7632   0042A8  0012               	return		;funcret
  7633   0042AA                     __end_of_backHalf:
  7634                           	callstack 0
  7635                           
  7636 ;; *************** function _stop *****************
  7637 ;; Defined at:
  7638 ;;		line 88 in file "dc_motor.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7641 ;;		 -> motorL(9), 
  7642 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7643 ;;		 -> motorR(9), 
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;		None
  7646 ;; Return value:  Size  Location     Type
  7647 ;;                  1    wreg      void 
  7648 ;; Registers used:
  7649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7650 ;; Tracked objects:
  7651 ;;		On entry : 0/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7655 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7657 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7658 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7659 ;;Total ram usage:        3 bytes
  7660 ;; Hardware stack levels used: 1
  7661 ;; Hardware stack levels required when called: 2
  7662 ;; This function calls:
  7663 ;;		_setMotorPWM
  7664 ;; This function is called by:
  7665 ;;		_main
  7666 ;;		_right90
  7667 ;;		_left90
  7668 ;;		_turn180
  7669 ;;		_right135
  7670 ;;		_left135
  7671 ;;		_backHalf
  7672 ;;		_backOneAndHalf
  7673 ;;		_reverseStraight
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           
  7677                           	psect	text38
  7678   003822                     __ptext38:
  7679                           	callstack 0
  7680   003822                     _stop:
  7681                           	callstack 28
  7682   003822                     
  7683                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  7684   003822  EF41  F01C         	goto	l3511
  7685   003826                     l3497:
  7686                           
  7687                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  7688   003826  5013               	movf	stop@mL^0,w,c
  7689   003828  6ED9               	movwf	fsr2l,c
  7690   00382A  6ADA               	clrf	fsr2h,c
  7691   00382C  50DF               	movf	indf2,w,c
  7692   00382E  B4D8               	btfsc	status,2,c
  7693   003830  EF1C  F01C         	goto	u2661
  7694   003834  EF1E  F01C         	goto	u2660
  7695   003838                     u2661:
  7696   003838  EF22  F01C         	goto	l3501
  7697   00383C                     u2660:
  7698   00383C  5013               	movf	stop@mL^0,w,c
  7699   00383E  6ED9               	movwf	fsr2l,c
  7700   003840  6ADA               	clrf	fsr2h,c
  7701   003842  06DF               	decf	indf2,f,c
  7702   003844                     l3501:
  7703                           
  7704                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  7705   003844  5014               	movf	stop@mR^0,w,c
  7706   003846  6ED9               	movwf	fsr2l,c
  7707   003848  6ADA               	clrf	fsr2h,c
  7708   00384A  50DF               	movf	indf2,w,c
  7709   00384C  B4D8               	btfsc	status,2,c
  7710   00384E  EF2B  F01C         	goto	u2671
  7711   003852  EF2D  F01C         	goto	u2670
  7712   003856                     u2671:
  7713   003856  EF31  F01C         	goto	l3505
  7714   00385A                     u2670:
  7715   00385A  5014               	movf	stop@mR^0,w,c
  7716   00385C  6ED9               	movwf	fsr2l,c
  7717   00385E  6ADA               	clrf	fsr2h,c
  7718   003860  06DF               	decf	indf2,f,c
  7719   003862                     l3505:
  7720                           
  7721                           ;dc_motor.c: 96:         setMotorPWM(mL);
  7722   003862  C013  F00E         	movff	stop@mL,setMotorPWM@m
  7723   003866  ECD2  F016         	call	_setMotorPWM	;wreg free
  7724   00386A                     
  7725                           ;dc_motor.c: 97:         setMotorPWM(mR);
  7726   00386A  C014  F00E         	movff	stop@mR,setMotorPWM@m
  7727   00386E  ECD2  F016         	call	_setMotorPWM	;wreg free
  7728   003872                     
  7729                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7730   003872  0E0B               	movlw	11
  7731   003874  6E15               	movwf	??_stop^0,c
  7732   003876  0E62               	movlw	98
  7733   003878                     u5037:
  7734   003878  2EE8               	decfsz	wreg,f,c
  7735   00387A  D7FE               	bra	u5037
  7736   00387C  2E15               	decfsz	??_stop^0,f,c
  7737   00387E  D7FC               	bra	u5037
  7738   003880  D000               	nop2	
  7739   003882                     l3511:
  7740                           
  7741                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  7742   003882  5013               	movf	stop@mL^0,w,c
  7743   003884  6ED9               	movwf	fsr2l,c
  7744   003886  6ADA               	clrf	fsr2h,c
  7745   003888  50DF               	movf	indf2,w,c
  7746   00388A  A4D8               	btfss	status,2,c
  7747   00388C  EF4A  F01C         	goto	u2681
  7748   003890  EF4C  F01C         	goto	u2680
  7749   003894                     u2681:
  7750   003894  EF13  F01C         	goto	l3497
  7751   003898                     u2680:
  7752   003898  5014               	movf	stop@mR^0,w,c
  7753   00389A  6ED9               	movwf	fsr2l,c
  7754   00389C  6ADA               	clrf	fsr2h,c
  7755   00389E  50DF               	movf	indf2,w,c
  7756   0038A0  A4D8               	btfss	status,2,c
  7757   0038A2  EF55  F01C         	goto	u2691
  7758   0038A6  EF57  F01C         	goto	u2690
  7759   0038AA                     u2691:
  7760   0038AA  EF13  F01C         	goto	l3497
  7761   0038AE                     u2690:
  7762   0038AE  0012               	return		;funcret
  7763   0038B0                     __end_of_stop:
  7764                           	callstack 0
  7765                           
  7766 ;; *************** function _fullSpeedBack *****************
  7767 ;; Defined at:
  7768 ;;		line 165 in file "dc_motor.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7771 ;;		 -> motorL(9), 
  7772 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7773 ;;		 -> motorR(9), 
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;  power           2   21[COMRAM] int 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  1    wreg      void 
  7778 ;; Registers used:
  7779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7787 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7788 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7789 ;;Total ram usage:        5 bytes
  7790 ;; Hardware stack levels used: 1
  7791 ;; Hardware stack levels required when called: 2
  7792 ;; This function calls:
  7793 ;;		_setMotorPWM
  7794 ;; This function is called by:
  7795 ;;		_backHalf
  7796 ;;		_backOneAndHalf
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           	psect	text39
  7801   003A26                     __ptext39:
  7802                           	callstack 0
  7803   003A26                     _fullSpeedBack:
  7804                           	callstack 25
  7805   003A26                     
  7806                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  7807   003A26  5013               	movf	fullSpeedBack@mL^0,w,c
  7808   003A28  6ED9               	movwf	fsr2l,c
  7809   003A2A  6ADA               	clrf	fsr2h,c
  7810   003A2C  0E01               	movlw	1
  7811   003A2E  26D9               	addwf	fsr2l,f,c
  7812   003A30  6ADF               	clrf	indf2,c
  7813                           
  7814                           ;dc_motor.c: 169:     mR->direction = 0;
  7815   003A32  5014               	movf	fullSpeedBack@mR^0,w,c
  7816   003A34  6ED9               	movwf	fsr2l,c
  7817   003A36  6ADA               	clrf	fsr2h,c
  7818   003A38  0E01               	movlw	1
  7819   003A3A  26D9               	addwf	fsr2l,f,c
  7820   003A3C  6ADF               	clrf	indf2,c
  7821   003A3E                     
  7822                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  7823   003A3E  0E00               	movlw	0
  7824   003A40  6E17               	movwf	(fullSpeedBack@power+1)^0,c
  7825   003A42  0E00               	movlw	0
  7826   003A44  6E16               	movwf	fullSpeedBack@power^0,c
  7827   003A46                     l3571:
  7828                           
  7829                           ;dc_motor.c: 172:         mL->power = power;
  7830   003A46  5013               	movf	fullSpeedBack@mL^0,w,c
  7831   003A48  6ED9               	movwf	fsr2l,c
  7832   003A4A  6ADA               	clrf	fsr2h,c
  7833   003A4C  C016  FFDF         	movff	fullSpeedBack@power,indf2
  7834                           
  7835                           ;dc_motor.c: 173:         mR->power = power;
  7836   003A50  5014               	movf	fullSpeedBack@mR^0,w,c
  7837   003A52  6ED9               	movwf	fsr2l,c
  7838   003A54  6ADA               	clrf	fsr2h,c
  7839   003A56  C016  FFDF         	movff	fullSpeedBack@power,indf2
  7840   003A5A                     
  7841                           ;dc_motor.c: 176:         setMotorPWM(mL);
  7842   003A5A  C013  F00E         	movff	fullSpeedBack@mL,setMotorPWM@m
  7843   003A5E  ECD2  F016         	call	_setMotorPWM	;wreg free
  7844   003A62                     
  7845                           ;dc_motor.c: 177:         setMotorPWM(mR);
  7846   003A62  C014  F00E         	movff	fullSpeedBack@mR,setMotorPWM@m
  7847   003A66  ECD2  F016         	call	_setMotorPWM	;wreg free
  7848   003A6A                     
  7849                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7850   003A6A  0E0B               	movlw	11
  7851   003A6C  6E15               	movwf	??_fullSpeedBack^0,c
  7852   003A6E  0E62               	movlw	98
  7853   003A70                     u5047:
  7854   003A70  2EE8               	decfsz	wreg,f,c
  7855   003A72  D7FE               	bra	u5047
  7856   003A74  2E15               	decfsz	??_fullSpeedBack^0,f,c
  7857   003A76  D7FC               	bra	u5047
  7858   003A78  D000               	nop2	
  7859   003A7A                     
  7860                           ;dc_motor.c: 181:     }
  7861   003A7A  4A16               	infsnz	fullSpeedBack@power^0,f,c
  7862   003A7C  2A17               	incf	(fullSpeedBack@power+1)^0,f,c
  7863   003A7E  BE17               	btfsc	(fullSpeedBack@power+1)^0,7,c
  7864   003A80  EF4B  F01D         	goto	u2721
  7865   003A84  5017               	movf	(fullSpeedBack@power+1)^0,w,c
  7866   003A86  E109               	bnz	u2720
  7867   003A88  0E33               	movlw	51
  7868   003A8A  5C16               	subwf	fullSpeedBack@power^0,w,c
  7869   003A8C  A0D8               	btfss	status,0,c
  7870   003A8E  EF4B  F01D         	goto	u2721
  7871   003A92  EF4D  F01D         	goto	u2720
  7872   003A96                     u2721:
  7873   003A96  EF23  F01D         	goto	l3571
  7874   003A9A                     u2720:
  7875   003A9A  0012               	return		;funcret
  7876   003A9C                     __end_of_fullSpeedBack:
  7877                           	callstack 0
  7878                           
  7879 ;; *************** function _setMotorPWM *****************
  7880 ;; Defined at:
  7881 ;;		line 65 in file "dc_motor.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;  m               1   13[COMRAM] PTR struct DC_motor
  7884 ;;		 -> motorR(9), motorL(9), 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;  negDuty         1   17[COMRAM] unsigned char 
  7887 ;;  posDuty         1   16[COMRAM] unsigned char 
  7888 ;; Return value:  Size  Location     Type
  7889 ;;                  1    wreg      void 
  7890 ;; Registers used:
  7891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7897 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7898 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7899 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7900 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7901 ;;Total ram usage:        5 bytes
  7902 ;; Hardware stack levels used: 1
  7903 ;; Hardware stack levels required when called: 1
  7904 ;; This function calls:
  7905 ;;		___lwdiv
  7906 ;;		___wmul
  7907 ;; This function is called by:
  7908 ;;		_stop
  7909 ;;		_turnLeft
  7910 ;;		_turnRight
  7911 ;;		_fullSpeedAhead
  7912 ;;		_fullSpeedBack
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text40
  7917   002DA4                     __ptext40:
  7918                           	callstack 0
  7919   002DA4                     _setMotorPWM:
  7920                           	callstack 28
  7921   002DA4                     
  7922                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  7923   002DA4  500E               	movf	setMotorPWM@m^0,w,c
  7924   002DA6  6ED9               	movwf	fsr2l,c
  7925   002DA8  6ADA               	clrf	fsr2h,c
  7926   002DAA  0E02               	movlw	2
  7927   002DAC  26D9               	addwf	fsr2l,f,c
  7928   002DAE  50DF               	movf	indf2,w,c
  7929   002DB0  B4D8               	btfsc	status,2,c
  7930   002DB2  EFDD  F016         	goto	u2571
  7931   002DB6  EFDF  F016         	goto	u2570
  7932   002DBA                     u2571:
  7933   002DBA  EF0F  F017         	goto	l3425
  7934   002DBE                     u2570:
  7935   002DBE                     
  7936                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  7937   002DBE  500E               	movf	setMotorPWM@m^0,w,c
  7938   002DC0  6ED9               	movwf	fsr2l,c
  7939   002DC2  6ADA               	clrf	fsr2h,c
  7940   002DC4  50DF               	movf	indf2,w,c
  7941   002DC6  6E0F               	movwf	??_setMotorPWM^0,c
  7942   002DC8  500F               	movf	??_setMotorPWM^0,w,c
  7943   002DCA  6E01               	movwf	___wmul@multiplier^0,c
  7944   002DCC  6A02               	clrf	(___wmul@multiplier+1)^0,c
  7945   002DCE  500E               	movf	setMotorPWM@m^0,w,c
  7946   002DD0  6ED9               	movwf	fsr2l,c
  7947   002DD2  6ADA               	clrf	fsr2h,c
  7948   002DD4  0E03               	movlw	3
  7949   002DD6  26D9               	addwf	fsr2l,f,c
  7950   002DD8  CFDE F003          	movff	postinc2,___wmul@multiplicand
  7951   002DDC  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  7952   002DE0  EC7E  F021         	call	___wmul	;wreg free
  7953   002DE4  C001  F007         	movff	?___wmul,___lwdiv@dividend
  7954   002DE8  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  7955   002DEC  0E00               	movlw	0
  7956   002DEE  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  7957   002DF0  0E64               	movlw	100
  7958   002DF2  6E09               	movwf	___lwdiv@divisor^0,c
  7959   002DF4  EC4E  F01D         	call	___lwdiv	;wreg free
  7960   002DF8  500E               	movf	setMotorPWM@m^0,w,c
  7961   002DFA  6ED9               	movwf	fsr2l,c
  7962   002DFC  6ADA               	clrf	fsr2h,c
  7963   002DFE  0E03               	movlw	3
  7964   002E00  26D9               	addwf	fsr2l,f,c
  7965   002E02  50DF               	movf	indf2,w,c
  7966   002E04  6E10               	movwf	(??_setMotorPWM+1)^0,c
  7967   002E06  5007               	movf	?___lwdiv^0,w,c
  7968   002E08  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  7969   002E0A  6E11               	movwf	setMotorPWM@posDuty^0,c
  7970   002E0C                     
  7971                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  7972   002E0C  500E               	movf	setMotorPWM@m^0,w,c
  7973   002E0E  6ED9               	movwf	fsr2l,c
  7974   002E10  6ADA               	clrf	fsr2h,c
  7975   002E12  0E03               	movlw	3
  7976   002E14  26D9               	addwf	fsr2l,f,c
  7977   002E16  50DF               	movf	indf2,w,c
  7978   002E18  6E12               	movwf	setMotorPWM@negDuty^0,c
  7979                           
  7980                           ;dc_motor.c: 72:     }
  7981   002E1A  EF30  F017         	goto	l3429
  7982   002E1E                     l3425:
  7983                           
  7984                           ;dc_motor.c: 74:         posDuty=0;
  7985   002E1E  0E00               	movlw	0
  7986   002E20  6E11               	movwf	setMotorPWM@posDuty^0,c
  7987   002E22                     
  7988                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  7989   002E22  500E               	movf	setMotorPWM@m^0,w,c
  7990   002E24  6ED9               	movwf	fsr2l,c
  7991   002E26  6ADA               	clrf	fsr2h,c
  7992   002E28  50DF               	movf	indf2,w,c
  7993   002E2A  6E0F               	movwf	??_setMotorPWM^0,c
  7994   002E2C  500F               	movf	??_setMotorPWM^0,w,c
  7995   002E2E  6E01               	movwf	___wmul@multiplier^0,c
  7996   002E30  6A02               	clrf	(___wmul@multiplier+1)^0,c
  7997   002E32  500E               	movf	setMotorPWM@m^0,w,c
  7998   002E34  6ED9               	movwf	fsr2l,c
  7999   002E36  6ADA               	clrf	fsr2h,c
  8000   002E38  0E03               	movlw	3
  8001   002E3A  26D9               	addwf	fsr2l,f,c
  8002   002E3C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  8003   002E40  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  8004   002E44  EC7E  F021         	call	___wmul	;wreg free
  8005   002E48  C001  F007         	movff	?___wmul,___lwdiv@dividend
  8006   002E4C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  8007   002E50  0E00               	movlw	0
  8008   002E52  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  8009   002E54  0E64               	movlw	100
  8010   002E56  6E09               	movwf	___lwdiv@divisor^0,c
  8011   002E58  EC4E  F01D         	call	___lwdiv	;wreg free
  8012   002E5C  5007               	movf	?___lwdiv^0,w,c
  8013   002E5E  6E12               	movwf	setMotorPWM@negDuty^0,c
  8014   002E60                     l3429:
  8015                           
  8016                           ;dc_motor.c: 78:     if (m->direction) {
  8017   002E60  500E               	movf	setMotorPWM@m^0,w,c
  8018   002E62  6ED9               	movwf	fsr2l,c
  8019   002E64  6ADA               	clrf	fsr2h,c
  8020   002E66  0E01               	movlw	1
  8021   002E68  26D9               	addwf	fsr2l,f,c
  8022   002E6A  50DF               	movf	indf2,w,c
  8023   002E6C  B4D8               	btfsc	status,2,c
  8024   002E6E  EF3B  F017         	goto	u2581
  8025   002E72  EF3D  F017         	goto	u2580
  8026   002E76                     u2581:
  8027   002E76  EF5D  F017         	goto	l3433
  8028   002E7A                     u2580:
  8029   002E7A                     
  8030                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8031   002E7A  500E               	movf	setMotorPWM@m^0,w,c
  8032   002E7C  6ED9               	movwf	fsr2l,c
  8033   002E7E  6ADA               	clrf	fsr2h,c
  8034   002E80  0E05               	movlw	5
  8035   002E82  26D9               	addwf	fsr2l,f,c
  8036   002E84  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8037   002E88  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8038   002E8C  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8039   002E90  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8040   002E94  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  8041                           
  8042                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8043   002E98  500E               	movf	setMotorPWM@m^0,w,c
  8044   002E9A  6ED9               	movwf	fsr2l,c
  8045   002E9C  6ADA               	clrf	fsr2h,c
  8046   002E9E  0E07               	movlw	7
  8047   002EA0  26D9               	addwf	fsr2l,f,c
  8048   002EA2  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8049   002EA6  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8050   002EAA  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8051   002EAE  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8052   002EB2  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  8053                           
  8054                           ;dc_motor.c: 81:     } else {
  8055   002EB6  EF7B  F017         	goto	l397
  8056   002EBA                     l3433:
  8057                           
  8058                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8059   002EBA  500E               	movf	setMotorPWM@m^0,w,c
  8060   002EBC  6ED9               	movwf	fsr2l,c
  8061   002EBE  6ADA               	clrf	fsr2h,c
  8062   002EC0  0E05               	movlw	5
  8063   002EC2  26D9               	addwf	fsr2l,f,c
  8064   002EC4  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8065   002EC8  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8066   002ECC  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8067   002ED0  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8068   002ED4  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  8069                           
  8070                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8071   002ED8  500E               	movf	setMotorPWM@m^0,w,c
  8072   002EDA  6ED9               	movwf	fsr2l,c
  8073   002EDC  6ADA               	clrf	fsr2h,c
  8074   002EDE  0E07               	movlw	7
  8075   002EE0  26D9               	addwf	fsr2l,f,c
  8076   002EE2  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8077   002EE6  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8078   002EEA  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8079   002EEE  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8080   002EF2  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  8081   002EF6                     l397:
  8082   002EF6  0012               	return		;funcret
  8083   002EF8                     __end_of_setMotorPWM:
  8084                           	callstack 0
  8085                           
  8086 ;; *************** function ___lwdiv *****************
  8087 ;; Defined at:
  8088 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  dividend        2    6[COMRAM] unsigned int 
  8091 ;;  divisor         2    8[COMRAM] unsigned int 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  quotient        2   10[COMRAM] unsigned int 
  8094 ;;  counter         1   12[COMRAM] unsigned char 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;                  2    6[COMRAM] unsigned int 
  8097 ;; Registers used:
  8098 ;;		wreg, status,2, status,0
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8104 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8105 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8107 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8108 ;;Total ram usage:        7 bytes
  8109 ;; Hardware stack levels used: 1
  8110 ;; This function calls:
  8111 ;;		Nothing
  8112 ;; This function is called by:
  8113 ;;		_setMotorPWM
  8114 ;;		_ADC2String
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           	psect	text41
  8119   003A9C                     __ptext41:
  8120                           	callstack 0
  8121   003A9C                     ___lwdiv:
  8122                           	callstack 28
  8123   003A9C  0E00               	movlw	0
  8124   003A9E  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  8125   003AA0  0E00               	movlw	0
  8126   003AA2  6E0B               	movwf	___lwdiv@quotient^0,c
  8127   003AA4  5009               	movf	___lwdiv@divisor^0,w,c
  8128   003AA6  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8129   003AA8  B4D8               	btfsc	status,2,c
  8130   003AAA  EF59  F01D         	goto	u2421
  8131   003AAE  EF5B  F01D         	goto	u2420
  8132   003AB2                     u2421:
  8133   003AB2  EF83  F01D         	goto	l1132
  8134   003AB6                     u2420:
  8135   003AB6  0E01               	movlw	1
  8136   003AB8  6E0D               	movwf	___lwdiv@counter^0,c
  8137   003ABA  EF63  F01D         	goto	l3341
  8138   003ABE                     l3339:
  8139   003ABE  90D8               	bcf	status,0,c
  8140   003AC0  3609               	rlcf	___lwdiv@divisor^0,f,c
  8141   003AC2  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8142   003AC4  2A0D               	incf	___lwdiv@counter^0,f,c
  8143   003AC6                     l3341:
  8144   003AC6  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  8145   003AC8  EF68  F01D         	goto	u2431
  8146   003ACC  EF6A  F01D         	goto	u2430
  8147   003AD0                     u2431:
  8148   003AD0  EF5F  F01D         	goto	l3339
  8149   003AD4                     u2430:
  8150   003AD4                     l3343:
  8151   003AD4  90D8               	bcf	status,0,c
  8152   003AD6  360B               	rlcf	___lwdiv@quotient^0,f,c
  8153   003AD8  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8154   003ADA  5009               	movf	___lwdiv@divisor^0,w,c
  8155   003ADC  5C07               	subwf	___lwdiv@dividend^0,w,c
  8156   003ADE  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  8157   003AE0  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8158   003AE2  A0D8               	btfss	status,0,c
  8159   003AE4  EF76  F01D         	goto	u2441
  8160   003AE8  EF78  F01D         	goto	u2440
  8161   003AEC                     u2441:
  8162   003AEC  EF7D  F01D         	goto	l3351
  8163   003AF0                     u2440:
  8164   003AF0  5009               	movf	___lwdiv@divisor^0,w,c
  8165   003AF2  5E07               	subwf	___lwdiv@dividend^0,f,c
  8166   003AF4  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  8167   003AF6  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8168   003AF8  800B               	bsf	___lwdiv@quotient^0,0,c
  8169   003AFA                     l3351:
  8170   003AFA  90D8               	bcf	status,0,c
  8171   003AFC  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8172   003AFE  3209               	rrcf	___lwdiv@divisor^0,f,c
  8173   003B00  2E0D               	decfsz	___lwdiv@counter^0,f,c
  8174   003B02  EF6A  F01D         	goto	l3343
  8175   003B06                     l1132:
  8176   003B06  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  8177   003B0A  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8178   003B0E  0012               	return		;funcret
  8179   003B10                     __end_of___lwdiv:
  8180                           	callstack 0
  8181                           
  8182 ;; *************** function _color_click_init *****************
  8183 ;; Defined at:
  8184 ;;		line 8 in file "color.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;		None
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;		None
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  1    wreg      void 
  8191 ;; Registers used:
  8192 ;;		wreg, status,2, status,0, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8200 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8201 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8202 ;;Total ram usage:        1 bytes
  8203 ;; Hardware stack levels used: 1
  8204 ;; Hardware stack levels required when called: 3
  8205 ;; This function calls:
  8206 ;;		_I2C_2_Master_Init
  8207 ;;		_color_writetoaddr
  8208 ;; This function is called by:
  8209 ;;		_main
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           	psect	text42
  8214   004080                     __ptext42:
  8215                           	callstack 0
  8216   004080                     _color_click_init:
  8217                           	callstack 27
  8218   004080                     
  8219                           ;color.c: 11:     I2C_2_Master_Init();
  8220   004080  EC55  F021         	call	_I2C_2_Master_Init	;wreg free
  8221   004084                     
  8222                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  8223   004084  0E01               	movlw	1
  8224   004086  6E03               	movwf	color_writetoaddr@value^0,c
  8225   004088  0E00               	movlw	0
  8226   00408A  ECA2  F021         	call	_color_writetoaddr
  8227   00408E                     
  8228                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8229   00408E  0E3F               	movlw	63
  8230   004090  6E05               	movwf	??_color_click_init^0,c
  8231   004092  0E55               	movlw	85
  8232   004094                     u5057:
  8233   004094  2EE8               	decfsz	wreg,f,c
  8234   004096  D7FE               	bra	u5057
  8235   004098  2E05               	decfsz	??_color_click_init^0,f,c
  8236   00409A  D7FC               	bra	u5057
  8237   00409C  0000               	nop	
  8238   00409E                     
  8239                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  8240   00409E  0E03               	movlw	3
  8241   0040A0  6E03               	movwf	color_writetoaddr@value^0,c
  8242   0040A2  0E00               	movlw	0
  8243   0040A4  ECA2  F021         	call	_color_writetoaddr
  8244   0040A8                     
  8245                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  8246   0040A8  0ED5               	movlw	213
  8247   0040AA  6E03               	movwf	color_writetoaddr@value^0,c
  8248   0040AC  0E01               	movlw	1
  8249   0040AE  ECA2  F021         	call	_color_writetoaddr
  8250   0040B2  0012               	return		;funcret
  8251   0040B4                     __end_of_color_click_init:
  8252                           	callstack 0
  8253                           
  8254 ;; *************** function _color_writetoaddr *****************
  8255 ;; Defined at:
  8256 ;;		line 24 in file "color.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;  address         1    wreg     unsigned char 
  8259 ;;  value           1    2[COMRAM] unsigned char 
  8260 ;; Auto vars:     Size  Location     Type
  8261 ;;  address         1    3[COMRAM] unsigned char 
  8262 ;; Return value:  Size  Location     Type
  8263 ;;                  1    wreg      void 
  8264 ;; Registers used:
  8265 ;;		wreg, status,2, status,0, cstack
  8266 ;; Tracked objects:
  8267 ;;		On entry : 0/0
  8268 ;;		On exit  : 0/0
  8269 ;;		Unchanged: 0/0
  8270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8271 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8274 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8275 ;;Total ram usage:        2 bytes
  8276 ;; Hardware stack levels used: 1
  8277 ;; Hardware stack levels required when called: 2
  8278 ;; This function calls:
  8279 ;;		_I2C_2_Master_Start
  8280 ;;		_I2C_2_Master_Stop
  8281 ;;		_I2C_2_Master_Write
  8282 ;; This function is called by:
  8283 ;;		_color_click_init
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           	psect	text43
  8288   004344                     __ptext43:
  8289                           	callstack 0
  8290   004344                     _color_writetoaddr:
  8291                           	callstack 27
  8292                           
  8293                           ;incstack = 0
  8294                           ;color_writetoaddr@address stored from wreg
  8295   004344  6E04               	movwf	color_writetoaddr@address^0,c
  8296   004346                     
  8297                           ;color.c: 25:     I2C_2_Master_Start();
  8298   004346  ECF4  F021         	call	_I2C_2_Master_Start	;wreg free
  8299                           
  8300                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  8301   00434A  0E52               	movlw	82
  8302   00434C  ECE9  F021         	call	_I2C_2_Master_Write
  8303                           
  8304                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  8305   004350  5004               	movf	color_writetoaddr@address^0,w,c
  8306   004352  0980               	iorlw	128
  8307   004354  ECE9  F021         	call	_I2C_2_Master_Write
  8308                           
  8309                           ;color.c: 28:     I2C_2_Master_Write(value);
  8310   004358  5003               	movf	color_writetoaddr@value^0,w,c
  8311   00435A  ECE9  F021         	call	_I2C_2_Master_Write
  8312                           
  8313                           ;color.c: 29:     I2C_2_Master_Stop();
  8314   00435E  ECEF  F021         	call	_I2C_2_Master_Stop	;wreg free
  8315   004362  0012               	return		;funcret
  8316   004364                     __end_of_color_writetoaddr:
  8317                           	callstack 0
  8318                           
  8319 ;; *************** function _I2C_2_Master_Init *****************
  8320 ;; Defined at:
  8321 ;;		line 4 in file "i2c.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;		None
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;		None
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  1    wreg      void 
  8328 ;; Registers used:
  8329 ;;		wreg, status,2
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8339 ;;Total ram usage:        0 bytes
  8340 ;; Hardware stack levels used: 1
  8341 ;; This function calls:
  8342 ;;		Nothing
  8343 ;; This function is called by:
  8344 ;;		_color_click_init
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           	psect	text44
  8349   0042AA                     __ptext44:
  8350                           	callstack 0
  8351   0042AA                     _I2C_2_Master_Init:
  8352                           	callstack 29
  8353   0042AA                     
  8354                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8355   0042AA  010E               	movlb	14	; () banked
  8356   0042AC  51D9               	movf	217,w,b	;volatile
  8357   0042AE  0BF0               	andlw	-16
  8358   0042B0  0908               	iorlw	8
  8359   0042B2  6FD9               	movwf	217,b	;volatile
  8360   0042B4                     
  8361                           ; BSR set to: 14
  8362                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8363   0042B4  8BD9               	bsf	217,5,b	;volatile
  8364                           
  8365                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8366   0042B6  0E9F               	movlw	159
  8367   0042B8  6FD6               	movwf	214,b	;volatile
  8368   0042BA                     
  8369                           ; BSR set to: 14
  8370                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8371   0042BA  8A84               	bsf	132,5,c	;volatile
  8372   0042BC                     
  8373                           ; BSR set to: 14
  8374                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8375   0042BC  8C84               	bsf	132,6,c	;volatile
  8376   0042BE                     
  8377                           ; BSR set to: 14
  8378                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8379   0042BE  9BA7               	bcf	167,5,b	;volatile
  8380   0042C0                     
  8381                           ; BSR set to: 14
  8382                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8383   0042C0  9DA7               	bcf	167,6,b	;volatile
  8384                           
  8385                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8386   0042C2  0E1D               	movlw	29
  8387   0042C4  6F1D               	movwf	29,b	;volatile
  8388                           
  8389                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8390   0042C6  0E1E               	movlw	30
  8391   0042C8  6F1C               	movwf	28,b	;volatile
  8392                           
  8393                           ;i2c.c: 18:   RD5PPS=0x1C;
  8394   0042CA  0E1C               	movlw	28
  8395   0042CC  6F6F               	movwf	111,b	;volatile
  8396                           
  8397                           ;i2c.c: 19:   RD6PPS=0x1B;
  8398   0042CE  0E1B               	movlw	27
  8399   0042D0  6F70               	movwf	112,b	;volatile
  8400   0042D2                     
  8401                           ; BSR set to: 14
  8402   0042D2  0012               	return		;funcret
  8403   0042D4                     __end_of_I2C_2_Master_Init:
  8404                           	callstack 0
  8405                           
  8406 ;; *************** function _calibration_routine *****************
  8407 ;; Defined at:
  8408 ;;		line 197 in file "color.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;  cCal            1   67[COMRAM] PTR struct colors
  8411 ;;		 -> colorCalibration(8), 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;  cal_state      20   70[COMRAM] unsigned char [20]
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  1    wreg      void 
  8416 ;; Registers used:
  8417 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8423 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8424 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8425 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8426 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8427 ;;Total ram usage:       23 bytes
  8428 ;; Hardware stack levels used: 1
  8429 ;; Hardware stack levels required when called: 8
  8430 ;; This function calls:
  8431 ;;		_color_read_Blue
  8432 ;;		_color_read_Clear
  8433 ;;		_color_read_Green
  8434 ;;		_color_read_Red
  8435 ;;		_sendStringSerial4
  8436 ;;		_sprintf
  8437 ;; This function is called by:
  8438 ;;		_main
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           	psect	text45
  8443   00255A                     __ptext45:
  8444                           	callstack 0
  8445   00255A                     _calibration_routine:
  8446                           	callstack 22
  8447   00255A                     
  8448                           ;color.c: 197: void calibration_routine(colors *cCal);color.c: 198: {;color.c: 200:     
      +                          LATGbits.LATG0 = 0;
  8449   00255A  907F               	bcf	127,0,c	;volatile
  8450                           
  8451                           ;color.c: 201:     LATEbits.LATE7 = 0;
  8452   00255C  9E7D               	bcf	125,7,c	;volatile
  8453                           
  8454                           ;color.c: 202:     LATAbits.LATA3 = 0;
  8455   00255E  9679               	bcf	121,3,c	;volatile
  8456   002560                     
  8457                           ;color.c: 204:     char cal_state[20];;color.c: 208:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  8458   002560  0E47               	movlw	low calibration_routine@cal_state
  8459   002562  6E31               	movwf	sprintf@s^0,c
  8460   002564  0E73               	movlw	low STR_1
  8461   002566  6E32               	movwf	sprintf@fmt^0,c
  8462   002568  0EB7               	movlw	low STR_2
  8463   00256A  6E33               	movwf	(?_sprintf+2)^0,c
  8464   00256C  5033               	movf	(?_sprintf+2)^0,w,c
  8465   00256E  A4D8               	btfss	status,2,c
  8466   002570  0E0E               	movlw	high __smallconst
  8467   002572  6E34               	movwf	(?_sprintf+3)^0,c
  8468   002574  EC5A  F020         	call	_sprintf	;wreg free
  8469   002578                     
  8470                           ;color.c: 209:     sendStringSerial4(cal_state);
  8471   002578  0E47               	movlw	low calibration_routine@cal_state
  8472   00257A  6E02               	movwf	sendStringSerial4@string^0,c
  8473   00257C  EC24  F021         	call	_sendStringSerial4	;wreg free
  8474   002580                     l96:
  8475                           
  8476                           ;color.c: 212:     while(PORTFbits.RF2 == 1){
  8477   002580  B48E               	btfsc	142,2,c	;volatile
  8478   002582  EFC5  F012         	goto	u4691
  8479   002586  EFC7  F012         	goto	u4690
  8480   00258A                     u4691:
  8481   00258A  EFC0  F012         	goto	l96
  8482   00258E                     u4690:
  8483   00258E                     
  8484                           ;color.c: 216:     LATGbits.LATG0 = 1;
  8485   00258E  807F               	bsf	127,0,c	;volatile
  8486   002590                     
  8487                           ;color.c: 217:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8488   002590  0E29               	movlw	41
  8489   002592  6E46               	movwf	(??_calibration_routine+1)^0,c
  8490   002594  0E96               	movlw	150
  8491   002596  6E45               	movwf	??_calibration_routine^0,c
  8492   002598  0E7F               	movlw	127
  8493   00259A                     u5067:
  8494   00259A  2EE8               	decfsz	wreg,f,c
  8495   00259C  D7FE               	bra	u5067
  8496   00259E  2E45               	decfsz	??_calibration_routine^0,f,c
  8497   0025A0  D7FC               	bra	u5067
  8498   0025A2  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  8499   0025A4  D7FA               	bra	u5067
  8500   0025A6  0000               	nop	
  8501   0025A8                     
  8502                           ;color.c: 218:     (cCal->red) = color_read_Red();
  8503   0025A8  ECBD  F01D         	call	_color_read_Red	;wreg free
  8504   0025AC  5044               	movf	calibration_routine@cCal^0,w,c
  8505   0025AE  6ED9               	movwf	fsr2l,c
  8506   0025B0  6ADA               	clrf	fsr2h,c
  8507   0025B2  C005  FFDE         	movff	?_color_read_Red,postinc2
  8508   0025B6  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  8509   0025BA                     
  8510                           ;color.c: 219:     LATGbits.LATG0 = 0;
  8511   0025BA  907F               	bcf	127,0,c	;volatile
  8512   0025BC                     
  8513                           ;color.c: 222:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  8514   0025BC  0E47               	movlw	low calibration_routine@cal_state
  8515   0025BE  6E31               	movwf	sprintf@s^0,c
  8516   0025C0  0E22               	movlw	low STR_3
  8517   0025C2  6E32               	movwf	sprintf@fmt^0,c
  8518   0025C4  0EB7               	movlw	low STR_2
  8519   0025C6  6E33               	movwf	(?_sprintf+2)^0,c
  8520   0025C8  5033               	movf	(?_sprintf+2)^0,w,c
  8521   0025CA  A4D8               	btfss	status,2,c
  8522   0025CC  0E0E               	movlw	high __smallconst
  8523   0025CE  6E34               	movwf	(?_sprintf+3)^0,c
  8524   0025D0  EC5A  F020         	call	_sprintf	;wreg free
  8525   0025D4                     
  8526                           ;color.c: 223:     sendStringSerial4(&cal_state);
  8527   0025D4  0E47               	movlw	low calibration_routine@cal_state
  8528   0025D6  6E02               	movwf	sendStringSerial4@string^0,c
  8529   0025D8  EC24  F021         	call	_sendStringSerial4	;wreg free
  8530   0025DC                     l99:
  8531                           
  8532                           ;color.c: 225:     while(PORTFbits.RF2 == 1){
  8533   0025DC  B48E               	btfsc	142,2,c	;volatile
  8534   0025DE  EFF3  F012         	goto	u4701
  8535   0025E2  EFF5  F012         	goto	u4700
  8536   0025E6                     u4701:
  8537   0025E6  EFEE  F012         	goto	l99
  8538   0025EA                     u4700:
  8539   0025EA                     
  8540                           ;color.c: 229:     LATEbits.LATE7 = 1;
  8541   0025EA  8E7D               	bsf	125,7,c	;volatile
  8542   0025EC                     
  8543                           ;color.c: 230:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8544   0025EC  0E29               	movlw	41
  8545   0025EE  6E46               	movwf	(??_calibration_routine+1)^0,c
  8546   0025F0  0E96               	movlw	150
  8547   0025F2  6E45               	movwf	??_calibration_routine^0,c
  8548   0025F4  0E7F               	movlw	127
  8549   0025F6                     u5077:
  8550   0025F6  2EE8               	decfsz	wreg,f,c
  8551   0025F8  D7FE               	bra	u5077
  8552   0025FA  2E45               	decfsz	??_calibration_routine^0,f,c
  8553   0025FC  D7FC               	bra	u5077
  8554   0025FE  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  8555   002600  D7FA               	bra	u5077
  8556   002602  0000               	nop	
  8557   002604                     
  8558                           ;color.c: 231:     (cCal->green) = color_read_Green();
  8559   002604  ECE5  F01D         	call	_color_read_Green	;wreg free
  8560   002608  5044               	movf	calibration_routine@cCal^0,w,c
  8561   00260A  6ED9               	movwf	fsr2l,c
  8562   00260C  6ADA               	clrf	fsr2h,c
  8563   00260E  0E02               	movlw	2
  8564   002610  26D9               	addwf	fsr2l,f,c
  8565   002612  C005  FFDE         	movff	?_color_read_Green,postinc2
  8566   002616  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  8567   00261A                     
  8568                           ;color.c: 232:     LATEbits.LATE7 = 0;
  8569   00261A  9E7D               	bcf	125,7,c	;volatile
  8570   00261C                     
  8571                           ;color.c: 235:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  8572   00261C  0E47               	movlw	low calibration_routine@cal_state
  8573   00261E  6E31               	movwf	sprintf@s^0,c
  8574   002620  0E3F               	movlw	low STR_5
  8575   002622  6E32               	movwf	sprintf@fmt^0,c
  8576   002624  0EB7               	movlw	low STR_2
  8577   002626  6E33               	movwf	(?_sprintf+2)^0,c
  8578   002628  5033               	movf	(?_sprintf+2)^0,w,c
  8579   00262A  A4D8               	btfss	status,2,c
  8580   00262C  0E0E               	movlw	high __smallconst
  8581   00262E  6E34               	movwf	(?_sprintf+3)^0,c
  8582   002630  EC5A  F020         	call	_sprintf	;wreg free
  8583   002634                     
  8584                           ;color.c: 236:     sendStringSerial4(&cal_state);
  8585   002634  0E47               	movlw	low calibration_routine@cal_state
  8586   002636  6E02               	movwf	sendStringSerial4@string^0,c
  8587   002638  EC24  F021         	call	_sendStringSerial4	;wreg free
  8588   00263C                     l102:
  8589                           
  8590                           ;color.c: 238:     while(PORTFbits.RF2 == 1){
  8591   00263C  B48E               	btfsc	142,2,c	;volatile
  8592   00263E  EF23  F013         	goto	u4711
  8593   002642  EF25  F013         	goto	u4710
  8594   002646                     u4711:
  8595   002646  EF1E  F013         	goto	l102
  8596   00264A                     u4710:
  8597   00264A                     
  8598                           ;color.c: 242:     LATAbits.LATA3 = 1;
  8599   00264A  8679               	bsf	121,3,c	;volatile
  8600   00264C                     
  8601                           ;color.c: 243:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8602   00264C  0E29               	movlw	41
  8603   00264E  6E46               	movwf	(??_calibration_routine+1)^0,c
  8604   002650  0E96               	movlw	150
  8605   002652  6E45               	movwf	??_calibration_routine^0,c
  8606   002654  0E7F               	movlw	127
  8607   002656                     u5087:
  8608   002656  2EE8               	decfsz	wreg,f,c
  8609   002658  D7FE               	bra	u5087
  8610   00265A  2E45               	decfsz	??_calibration_routine^0,f,c
  8611   00265C  D7FC               	bra	u5087
  8612   00265E  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  8613   002660  D7FA               	bra	u5087
  8614   002662  0000               	nop	
  8615   002664                     
  8616                           ;color.c: 244:     (cCal->blue) = color_read_Blue();
  8617   002664  EC35  F01E         	call	_color_read_Blue	;wreg free
  8618   002668  5044               	movf	calibration_routine@cCal^0,w,c
  8619   00266A  6ED9               	movwf	fsr2l,c
  8620   00266C  6ADA               	clrf	fsr2h,c
  8621   00266E  0E04               	movlw	4
  8622   002670  26D9               	addwf	fsr2l,f,c
  8623   002672  C005  FFDE         	movff	?_color_read_Blue,postinc2
  8624   002676  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  8625   00267A                     
  8626                           ;color.c: 245:     LATAbits.LATA3 = 0;
  8627   00267A  9679               	bcf	121,3,c	;volatile
  8628   00267C                     
  8629                           ;color.c: 248:     sprintf(cal_state,"Calibration state =  white light", ".");
  8630   00267C  0E47               	movlw	low calibration_routine@cal_state
  8631   00267E  6E31               	movwf	sprintf@s^0,c
  8632   002680  0E01               	movlw	low STR_7
  8633   002682  6E32               	movwf	sprintf@fmt^0,c
  8634   002684  0EB7               	movlw	low STR_2
  8635   002686  6E33               	movwf	(?_sprintf+2)^0,c
  8636   002688  5033               	movf	(?_sprintf+2)^0,w,c
  8637   00268A  A4D8               	btfss	status,2,c
  8638   00268C  0E0E               	movlw	high __smallconst
  8639   00268E  6E34               	movwf	(?_sprintf+3)^0,c
  8640   002690  EC5A  F020         	call	_sprintf	;wreg free
  8641   002694                     
  8642                           ;color.c: 249:     sendStringSerial4(&cal_state);
  8643   002694  0E47               	movlw	low calibration_routine@cal_state
  8644   002696  6E02               	movwf	sendStringSerial4@string^0,c
  8645   002698  EC24  F021         	call	_sendStringSerial4	;wreg free
  8646   00269C                     l105:
  8647                           
  8648                           ;color.c: 251:     while(PORTFbits.RF2 == 1){
  8649   00269C  B48E               	btfsc	142,2,c	;volatile
  8650   00269E  EF53  F013         	goto	u4721
  8651   0026A2  EF55  F013         	goto	u4720
  8652   0026A6                     u4721:
  8653   0026A6  EF4E  F013         	goto	l105
  8654   0026AA                     u4720:
  8655   0026AA                     
  8656                           ;color.c: 254:     LATGbits.LATG0 = 1;
  8657   0026AA  807F               	bsf	127,0,c	;volatile
  8658                           
  8659                           ;color.c: 255:     LATEbits.LATE7 = 1;
  8660   0026AC  8E7D               	bsf	125,7,c	;volatile
  8661                           
  8662                           ;color.c: 256:     LATAbits.LATA3 = 1;
  8663   0026AE  8679               	bsf	121,3,c	;volatile
  8664   0026B0                     
  8665                           ;color.c: 257:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8666   0026B0  0E29               	movlw	41
  8667   0026B2  6E46               	movwf	(??_calibration_routine+1)^0,c
  8668   0026B4  0E96               	movlw	150
  8669   0026B6  6E45               	movwf	??_calibration_routine^0,c
  8670   0026B8  0E7F               	movlw	127
  8671   0026BA                     u5097:
  8672   0026BA  2EE8               	decfsz	wreg,f,c
  8673   0026BC  D7FE               	bra	u5097
  8674   0026BE  2E45               	decfsz	??_calibration_routine^0,f,c
  8675   0026C0  D7FC               	bra	u5097
  8676   0026C2  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  8677   0026C4  D7FA               	bra	u5097
  8678   0026C6  0000               	nop	
  8679   0026C8                     
  8680                           ;color.c: 258:     (cCal->clear) = color_read_Clear();
  8681   0026C8  EC0D  F01E         	call	_color_read_Clear	;wreg free
  8682   0026CC  5044               	movf	calibration_routine@cCal^0,w,c
  8683   0026CE  6ED9               	movwf	fsr2l,c
  8684   0026D0  6ADA               	clrf	fsr2h,c
  8685   0026D2  0E06               	movlw	6
  8686   0026D4  26D9               	addwf	fsr2l,f,c
  8687   0026D6  C005  FFDE         	movff	?_color_read_Clear,postinc2
  8688   0026DA  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  8689   0026DE                     
  8690                           ;color.c: 259:     LATGbits.LATG0 = 0;
  8691   0026DE  907F               	bcf	127,0,c	;volatile
  8692   0026E0                     
  8693                           ;color.c: 260:     LATEbits.LATE7 = 0;
  8694   0026E0  9E7D               	bcf	125,7,c	;volatile
  8695   0026E2                     
  8696                           ;color.c: 261:     LATAbits.LATA3 = 0;
  8697   0026E2  9679               	bcf	121,3,c	;volatile
  8698   0026E4                     
  8699                           ;color.c: 264:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  8700   0026E4  0E47               	movlw	low calibration_routine@cal_state
  8701   0026E6  6E31               	movwf	sprintf@s^0,c
  8702   0026E8  0E5A               	movlw	low STR_9
  8703   0026EA  6E32               	movwf	sprintf@fmt^0,c
  8704   0026EC  0EB7               	movlw	low STR_2
  8705   0026EE  6E33               	movwf	(?_sprintf+2)^0,c
  8706   0026F0  5033               	movf	(?_sprintf+2)^0,w,c
  8707   0026F2  A4D8               	btfss	status,2,c
  8708   0026F4  0E0E               	movlw	high __smallconst
  8709   0026F6  6E34               	movwf	(?_sprintf+3)^0,c
  8710   0026F8  EC5A  F020         	call	_sprintf	;wreg free
  8711   0026FC                     
  8712                           ;color.c: 265:     sendStringSerial4(&cal_state);
  8713   0026FC  0E47               	movlw	low calibration_routine@cal_state
  8714   0026FE  6E02               	movwf	sendStringSerial4@string^0,c
  8715   002700  EC24  F021         	call	_sendStringSerial4	;wreg free
  8716   002704                     l108:
  8717                           
  8718                           ;color.c: 267:     while(PORTFbits.RF2 == 1){
  8719   002704  B48E               	btfsc	142,2,c	;volatile
  8720   002706  EF87  F013         	goto	u4731
  8721   00270A  EF89  F013         	goto	u4730
  8722   00270E                     u4731:
  8723   00270E  EF82  F013         	goto	l108
  8724   002712                     u4730:
  8725   002712                     
  8726                           ;color.c: 270:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8727   002712  0E29               	movlw	41
  8728   002714  6E46               	movwf	(??_calibration_routine+1)^0,c
  8729   002716  0E96               	movlw	150
  8730   002718  6E45               	movwf	??_calibration_routine^0,c
  8731   00271A  0E7F               	movlw	127
  8732   00271C                     u5107:
  8733   00271C  2EE8               	decfsz	wreg,f,c
  8734   00271E  D7FE               	bra	u5107
  8735   002720  2E45               	decfsz	??_calibration_routine^0,f,c
  8736   002722  D7FC               	bra	u5107
  8737   002724  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  8738   002726  D7FA               	bra	u5107
  8739   002728  0000               	nop	
  8740   00272A  0012               	return		;funcret
  8741   00272C                     __end_of_calibration_routine:
  8742                           	callstack 0
  8743                           
  8744 ;; *************** function _sprintf *****************
  8745 ;; Defined at:
  8746 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  8747 ;; Parameters:    Size  Location     Type
  8748 ;;  s               1   48[COMRAM] PTR unsigned char 
  8749 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), convert_rgb2hue@c_char(20), calibration_routine@cal_state(2
      +0), 
  8750 ;;  fmt             1   49[COMRAM] PTR const unsigned char 
  8751 ;;		 -> STR_13(12), STR_12(21), STR_11(11), STR_9(25), 
  8752 ;;		 -> STR_7(33), STR_5(27), STR_3(29), STR_1(24), 
  8753 ;; Auto vars:     Size  Location     Type
  8754 ;;  f              12   55[COMRAM] struct _IO_FILE
  8755 ;;  ret             2    0        int 
  8756 ;;  ap              1   54[COMRAM] PTR void [1]
  8757 ;;		 -> ?_sprintf(2), 
  8758 ;; Return value:  Size  Location     Type
  8759 ;;                  2   48[COMRAM] int 
  8760 ;; Registers used:
  8761 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8762 ;; Tracked objects:
  8763 ;;		On entry : 0/0
  8764 ;;		On exit  : 0/0
  8765 ;;		Unchanged: 0/0
  8766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8767 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8768 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8770 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8771 ;;Total ram usage:       19 bytes
  8772 ;; Hardware stack levels used: 1
  8773 ;; Hardware stack levels required when called: 7
  8774 ;; This function calls:
  8775 ;;		_vfprintf
  8776 ;; This function is called by:
  8777 ;;		_calibration_routine
  8778 ;;		_convert_rgb2hue
  8779 ;;		_send2USART
  8780 ;;		_ADC2String
  8781 ;; This function uses a non-reentrant model
  8782 ;;
  8783                           
  8784                           	psect	text46
  8785   0040B4                     __ptext46:
  8786                           	callstack 0
  8787   0040B4                     _sprintf:
  8788                           	callstack 21
  8789   0040B4  0E33               	movlw	low (?_sprintf+2)
  8790   0040B6  6E37               	movwf	sprintf@ap^0,c
  8791   0040B8  C031  F038         	movff	sprintf@s,sprintf@f
  8792   0040BC  0E00               	movlw	0
  8793   0040BE  6E3C               	movwf	(sprintf@f+4)^0,c
  8794   0040C0  0E00               	movlw	0
  8795   0040C2  6E3B               	movwf	(sprintf@f+3)^0,c
  8796   0040C4  0E00               	movlw	0
  8797   0040C6  6E43               	movwf	(sprintf@f+11)^0,c
  8798   0040C8  0E00               	movlw	0
  8799   0040CA  6E42               	movwf	(sprintf@f+10)^0,c
  8800   0040CC  0E38               	movlw	low sprintf@f
  8801   0040CE  6E2D               	movwf	vfprintf@fp^0,c
  8802   0040D0  C032  F02E         	movff	sprintf@fmt,vfprintf@fmt
  8803   0040D4  0E37               	movlw	low sprintf@ap
  8804   0040D6  6E2F               	movwf	vfprintf@ap^0,c
  8805   0040D8  ECC2  F01F         	call	_vfprintf	;wreg free
  8806   0040DC  5031               	movf	sprintf@s^0,w,c
  8807   0040DE  243B               	addwf	(sprintf@f+3)^0,w,c
  8808   0040E0  6ED9               	movwf	fsr2l,c
  8809   0040E2  6ADA               	clrf	fsr2h,c
  8810   0040E4  6ADF               	clrf	indf2,c
  8811   0040E6  0012               	return		;funcret
  8812   0040E8                     __end_of_sprintf:
  8813                           	callstack 0
  8814                           
  8815 ;; *************** function _vfprintf *****************
  8816 ;; Defined at:
  8817 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  8818 ;; Parameters:    Size  Location     Type
  8819 ;;  fp              1   44[COMRAM] PTR struct _IO_FILE
  8820 ;;		 -> sprintf@f(12), 
  8821 ;;  fmt             1   45[COMRAM] PTR const unsigned char 
  8822 ;;		 -> STR_13(12), STR_12(21), STR_11(11), STR_9(25), 
  8823 ;;		 -> STR_7(33), STR_5(27), STR_3(29), STR_1(24), 
  8824 ;;  ap              1   46[COMRAM] PTR PTR void 
  8825 ;;		 -> sprintf@ap(1), 
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;  cfmt            1   47[COMRAM] PTR unsigned char 
  8828 ;;		 -> STR_13(12), STR_12(21), STR_11(11), STR_9(25), 
  8829 ;;		 -> STR_7(33), STR_5(27), STR_3(29), STR_1(24), 
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  2   44[COMRAM] int 
  8832 ;; Registers used:
  8833 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8839 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8840 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8842 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8843 ;;Total ram usage:        4 bytes
  8844 ;; Hardware stack levels used: 1
  8845 ;; Hardware stack levels required when called: 6
  8846 ;; This function calls:
  8847 ;;		_vfpfcnvrt
  8848 ;; This function is called by:
  8849 ;;		_sprintf
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           	psect	text47
  8854   003F84                     __ptext47:
  8855                           	callstack 0
  8856   003F84                     _vfprintf:
  8857                           	callstack 21
  8858   003F84                     
  8859                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  8860   003F84  C02E  F030         	movff	vfprintf@fmt,vfprintf@cfmt
  8861                           
  8862                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  8863   003F88  EFCE  F01F         	goto	l5093
  8864   003F8C                     l5091:
  8865                           
  8866                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  8867   003F8C  C02D  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  8868   003F90  0E30               	movlw	low vfprintf@cfmt
  8869   003F92  6E23               	movwf	vfpfcnvrt@fmt^0,c
  8870   003F94  C02F  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  8871   003F98  EC54  F015         	call	_vfpfcnvrt	;wreg free
  8872   003F9C                     l5093:
  8873                           
  8874                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  8875   003F9C  C030  FFF6         	movff	vfprintf@cfmt,tblptrl
  8876   003FA0                     	if	1	;There is more than 1 active tblptr byte
  8877   003FA0  0E0E               	movlw	high __smallconst
  8878   003FA2  6EF7               	movwf	tblptrh,c
  8879   003FA4                     	endif
  8880   003FA4                     	if	0	;tblptru may be non-zero
  8881   003FA4                     	endif
  8882   003FA4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8883   003FA4  0E00               	movlw	low (__smallconst shr (0+16))
  8884   003FA6  6EF8               	movwf	tblptru,c
  8885   003FA8                     	endif
  8886   003FA8  0008               	tblrd		*
  8887   003FAA  50F5               	movf	tablat,w,c
  8888   003FAC  0900               	iorlw	0
  8889   003FAE  A4D8               	btfss	status,2,c
  8890   003FB0  EFDC  F01F         	goto	u4571
  8891   003FB4  EFDE  F01F         	goto	u4570
  8892   003FB8                     u4571:
  8893   003FB8  EFC6  F01F         	goto	l5091
  8894   003FBC                     u4570:
  8895   003FBC                     
  8896                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  8897   003FBC  0E00               	movlw	0
  8898   003FBE  6E2E               	movwf	(?_vfprintf+1)^0,c
  8899   003FC0  0E00               	movlw	0
  8900   003FC2  6E2D               	movwf	?_vfprintf^0,c
  8901   003FC4  0012               	return		;funcret
  8902   003FC6                     __end_of_vfprintf:
  8903                           	callstack 0
  8904                           
  8905 ;; *************** function _vfpfcnvrt *****************
  8906 ;; Defined at:
  8907 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  8910 ;;		 -> sprintf@f(12), 
  8911 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  8912 ;;		 -> vfprintf@cfmt(1), 
  8913 ;;  ap              1   35[COMRAM] PTR PTR void 
  8914 ;;		 -> sprintf@ap(1), 
  8915 ;; Auto vars:     Size  Location     Type
  8916 ;;  convarg         4   38[COMRAM] struct .
  8917 ;;  cp              1   43[COMRAM] PTR unsigned char 
  8918 ;;		 -> STR_13(12), STR_12(21), STR_11(11), STR_9(25), 
  8919 ;;		 -> STR_7(33), STR_5(27), STR_3(29), STR_1(24), 
  8920 ;;  done            1   42[COMRAM] _Bool 
  8921 ;;  c               1    0        unsigned char 
  8922 ;; Return value:  Size  Location     Type
  8923 ;;                  1    wreg      void 
  8924 ;; Registers used:
  8925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8926 ;; Tracked objects:
  8927 ;;		On entry : 0/0
  8928 ;;		On exit  : 0/0
  8929 ;;		Unchanged: 0/0
  8930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8931 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8932 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8933 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8934 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8935 ;;Total ram usage:       11 bytes
  8936 ;; Hardware stack levels used: 1
  8937 ;; Hardware stack levels required when called: 5
  8938 ;; This function calls:
  8939 ;;		_dtoa
  8940 ;;		_fputc
  8941 ;;		_read_prec_or_width
  8942 ;; This function is called by:
  8943 ;;		_vfprintf
  8944 ;; This function uses a non-reentrant model
  8945 ;;
  8946                           
  8947                           	psect	text48
  8948   002AA8                     __ptext48:
  8949                           	callstack 0
  8950   002AA8                     _vfpfcnvrt:
  8951                           	callstack 21
  8952   002AA8                     
  8953                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  8954   002AA8  5023               	movf	vfpfcnvrt@fmt^0,w,c
  8955   002AAA  6ED9               	movwf	fsr2l,c
  8956   002AAC  6ADA               	clrf	fsr2h,c
  8957   002AAE  CFDF FFF6          	movff	indf2,tblptrl
  8958   002AB2                     	if	1	;There is more than 1 active tblptr byte
  8959   002AB2  0E0E               	movlw	high __smallconst
  8960   002AB4  6EF7               	movwf	tblptrh,c
  8961   002AB6                     	endif
  8962   002AB6                     	if	0	;tblptru may be non-zero
  8963   002AB6                     	endif
  8964   002AB6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8965   002AB6  0E00               	movlw	low (__smallconst shr (0+16))
  8966   002AB8  6EF8               	movwf	tblptru,c
  8967   002ABA                     	endif
  8968   002ABA  0008               	tblrd		*
  8969   002ABC  50F5               	movf	tablat,w,c
  8970   002ABE  0A25               	xorlw	37
  8971   002AC0  A4D8               	btfss	status,2,c
  8972   002AC2  EF65  F015         	goto	u4521
  8973   002AC6  EF67  F015         	goto	u4520
  8974   002ACA                     u4521:
  8975   002ACA  EF03  F016         	goto	l5079
  8976   002ACE                     u4520:
  8977   002ACE                     
  8978                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  8979   002ACE  5023               	movf	vfpfcnvrt@fmt^0,w,c
  8980   002AD0  6ED9               	movwf	fsr2l,c
  8981   002AD2  6ADA               	clrf	fsr2h,c
  8982   002AD4  2ADF               	incf	indf2,f,c
  8983   002AD6                     
  8984                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  8985   002AD6  0E00               	movlw	0
  8986   002AD8  0100               	movlb	0	; () banked
  8987   002ADA  6FD9               	movwf	(_width+1)& (0+255),b
  8988   002ADC  0E00               	movlw	0
  8989   002ADE  6FD8               	movwf	_width& (0+255),b
  8990   002AE0  C0D8  F05B         	movff	_width,_flags
  8991   002AE4                     
  8992                           ; BSR set to: 0
  8993                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  8994   002AE4  69DA               	setf	_prec& (0+255),b
  8995   002AE6  69DB               	setf	(_prec+1)& (0+255),b
  8996   002AE8                     
  8997                           ; BSR set to: 0
  8998                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  8999   002AE8  0E00               	movlw	0
  9000   002AEA  6E2B               	movwf	vfpfcnvrt@done^0,c
  9001                           
  9002                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9003   002AEC  EF9E  F015         	goto	l5053
  9004   002AF0                     l5043:
  9005                           
  9006                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9007   002AF0  825B               	bsf	_flags^0,1,c
  9008   002AF2                     
  9009                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9010   002AF2  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9011   002AF4  6ED9               	movwf	fsr2l,c
  9012   002AF6  6ADA               	clrf	fsr2h,c
  9013   002AF8  2ADF               	incf	indf2,f,c
  9014                           
  9015                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9016   002AFA  EF9E  F015         	goto	l5053
  9017   002AFE                     l5047:
  9018                           
  9019                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9020   002AFE  0E01               	movlw	1
  9021   002B00  6E2B               	movwf	vfpfcnvrt@done^0,c
  9022                           
  9023                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9024   002B02  EF9E  F015         	goto	l5053
  9025   002B06                     l5051:
  9026   002B06  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9027   002B08  6ED9               	movwf	fsr2l,c
  9028   002B0A  6ADA               	clrf	fsr2h,c
  9029   002B0C  CFDF FFF6          	movff	indf2,tblptrl
  9030   002B10                     	if	1	;There is more than 1 active tblptr byte
  9031   002B10  0E0E               	movlw	high __smallconst
  9032   002B12  6EF7               	movwf	tblptrh,c
  9033   002B14                     	endif
  9034   002B14                     	if	0	;tblptru may be non-zero
  9035   002B14                     	endif
  9036   002B14                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9037   002B14  0E00               	movlw	low (__smallconst shr (0+16))
  9038   002B16  6EF8               	movwf	tblptru,c
  9039   002B18                     	endif
  9040   002B18  0008               	tblrd		*
  9041   002B1A  50F5               	movf	tablat,w,c
  9042   002B1C  6E25               	movwf	??_vfpfcnvrt^0,c
  9043   002B1E  6A26               	clrf	(??_vfpfcnvrt+1)^0,c
  9044                           
  9045                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9046                           ; Switch size 1, requested type "simple"
  9047                           ; Number of cases is 1, Range of values is 0 to 0
  9048                           ; switch strategies available:
  9049                           ; Name         Instructions Cycles
  9050                           ; simple_byte            4     3 (average)
  9051                           ;	Chosen strategy is simple_byte
  9052   002B20  5026               	movf	(??_vfpfcnvrt+1)^0,w,c
  9053   002B22  0A00               	xorlw	0	; case 0
  9054   002B24  B4D8               	btfsc	status,2,c
  9055   002B26  EF97  F015         	goto	l5453
  9056   002B2A  EF7F  F015         	goto	l5047
  9057   002B2E                     l5453:
  9058                           
  9059                           ; Switch size 1, requested type "simple"
  9060                           ; Number of cases is 1, Range of values is 48 to 48
  9061                           ; switch strategies available:
  9062                           ; Name         Instructions Cycles
  9063                           ; simple_byte            4     3 (average)
  9064                           ;	Chosen strategy is simple_byte
  9065   002B2E  5025               	movf	??_vfpfcnvrt^0,w,c
  9066   002B30  0A30               	xorlw	48	; case 48
  9067   002B32  B4D8               	btfsc	status,2,c
  9068   002B34  EF78  F015         	goto	l5043
  9069   002B38  EF7F  F015         	goto	l5047
  9070   002B3C                     l5053:
  9071                           
  9072                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9073   002B3C  502B               	movf	vfpfcnvrt@done^0,w,c
  9074   002B3E  B4D8               	btfsc	status,2,c
  9075   002B40  EFA4  F015         	goto	u4531
  9076   002B44  EFA6  F015         	goto	u4530
  9077   002B48                     u4531:
  9078   002B48  EF83  F015         	goto	l5051
  9079   002B4C                     u4530:
  9080   002B4C                     
  9081                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9082   002B4C  C023  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9083   002B50  C024  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9084   002B54  EC29  F01A         	call	_read_prec_or_width	;wreg free
  9085   002B58  C007  F0D8         	movff	?_read_prec_or_width,_width
  9086   002B5C  C008  F0D9         	movff	?_read_prec_or_width+1,_width+1
  9087   002B60                     
  9088                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9089   002B60  0100               	movlb	0	; () banked
  9090   002B62  BFD9               	btfsc	(_width+1)& (0+255),7,b
  9091   002B64  EFB8  F015         	goto	u4540
  9092   002B68  EFB6  F015         	goto	u4541
  9093   002B6C                     u4541:
  9094   002B6C  EFBD  F015         	goto	l5061
  9095   002B70                     u4540:
  9096   002B70                     
  9097                           ; BSR set to: 0
  9098                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9099   002B70  805B               	bsf	_flags^0,0,c
  9100                           
  9101                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9102   002B72  6DD8               	negf	_width& (0+255),b
  9103   002B74  1FD9               	comf	(_width+1)& (0+255),f,b
  9104   002B76  B0D8               	btfsc	status,0,c
  9105   002B78  2BD9               	incf	(_width+1)& (0+255),f,b
  9106   002B7A                     l5061:
  9107                           
  9108                           ; BSR set to: 0
  9109                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9110   002B7A  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9111   002B7C  6ED9               	movwf	fsr2l,c
  9112   002B7E  6ADA               	clrf	fsr2h,c
  9113   002B80  50DF               	movf	indf2,w,c
  9114   002B82  6E2C               	movwf	vfpfcnvrt@cp^0,c
  9115   002B84                     
  9116                           ; BSR set to: 0
  9117                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9118   002B84  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9119   002B88                     	if	1	;There is more than 1 active tblptr byte
  9120   002B88  0E0E               	movlw	high __smallconst
  9121   002B8A  6EF7               	movwf	tblptrh,c
  9122   002B8C                     	endif
  9123   002B8C                     	if	0	;tblptru may be non-zero
  9124   002B8C                     	endif
  9125   002B8C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9126   002B8C  0E00               	movlw	low (__smallconst shr (0+16))
  9127   002B8E  6EF8               	movwf	tblptru,c
  9128   002B90                     	endif
  9129   002B90  0008               	tblrd		*
  9130   002B92  50F5               	movf	tablat,w,c
  9131   002B94  0A64               	xorlw	100
  9132   002B96  B4D8               	btfsc	status,2,c
  9133   002B98  EFD0  F015         	goto	u4551
  9134   002B9C  EFD2  F015         	goto	u4550
  9135   002BA0                     u4551:
  9136   002BA0  EFE2  F015         	goto	l5067
  9137   002BA4                     u4550:
  9138   002BA4                     
  9139                           ; BSR set to: 0
  9140   002BA4  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9141   002BA8                     	if	1	;There is more than 1 active tblptr byte
  9142   002BA8  0E0E               	movlw	high __smallconst
  9143   002BAA  6EF7               	movwf	tblptrh,c
  9144   002BAC                     	endif
  9145   002BAC                     	if	0	;tblptru may be non-zero
  9146   002BAC                     	endif
  9147   002BAC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9148   002BAC  0E00               	movlw	low (__smallconst shr (0+16))
  9149   002BAE  6EF8               	movwf	tblptru,c
  9150   002BB0                     	endif
  9151   002BB0  0008               	tblrd		*
  9152   002BB2  50F5               	movf	tablat,w,c
  9153   002BB4  0A69               	xorlw	105
  9154   002BB6  A4D8               	btfss	status,2,c
  9155   002BB8  EFE0  F015         	goto	u4561
  9156   002BBC  EFE2  F015         	goto	u4560
  9157   002BC0                     u4561:
  9158   002BC0  EFFD  F015         	goto	l5075
  9159   002BC4                     u4560:
  9160   002BC4                     l5067:
  9161                           
  9162                           ; BSR set to: 0
  9163                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9164   002BC4  5024               	movf	vfpfcnvrt@ap^0,w,c
  9165   002BC6  6ED9               	movwf	fsr2l,c
  9166   002BC8  6ADA               	clrf	fsr2h,c
  9167   002BCA  0E02               	movlw	2
  9168   002BCC  26DF               	addwf	indf2,f,c
  9169   002BCE  5CDF               	subwf	indf2,w,c
  9170   002BD0  6ED9               	movwf	fsr2l,c
  9171   002BD2  6ADA               	clrf	fsr2h,c
  9172   002BD4  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  9173   002BD8  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  9174   002BDC                     
  9175                           ; BSR set to: 0
  9176                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9177   002BDC  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9178   002BDE  6ED9               	movwf	fsr2l,c
  9179   002BE0  6ADA               	clrf	fsr2h,c
  9180   002BE2  282C               	incf	vfpfcnvrt@cp^0,w,c
  9181   002BE4  6EDF               	movwf	indf2,c
  9182   002BE6                     
  9183                           ; BSR set to: 0
  9184                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9185   002BE6  C022  F017         	movff	vfpfcnvrt@fp,dtoa@fp
  9186   002BEA  C027  F018         	movff	vfpfcnvrt@convarg,dtoa@d
  9187   002BEE  C028  F019         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9188   002BF2  EC17  F016         	call	_dtoa	;wreg free
  9189   002BF6  EF16  F016         	goto	l1383
  9190   002BFA                     l5075:
  9191                           
  9192                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9193   002BFA  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9194   002BFC  6ED9               	movwf	fsr2l,c
  9195   002BFE  6ADA               	clrf	fsr2h,c
  9196   002C00  2ADF               	incf	indf2,f,c
  9197   002C02  EF16  F016         	goto	l1383
  9198   002C06                     l5079:
  9199                           
  9200                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9201   002C06  5023               	movf	vfpfcnvrt@fmt^0,w,c
  9202   002C08  6ED9               	movwf	fsr2l,c
  9203   002C0A  6ADA               	clrf	fsr2h,c
  9204   002C0C  CFDF FFF6          	movff	indf2,tblptrl
  9205   002C10                     	if	1	;There is more than 1 active tblptr byte
  9206   002C10  0E0E               	movlw	high __smallconst
  9207   002C12  6EF7               	movwf	tblptrh,c
  9208   002C14                     	endif
  9209   002C14                     	if	0	;tblptru may be non-zero
  9210   002C14                     	endif
  9211   002C14                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9212   002C14  0E00               	movlw	low (__smallconst shr (0+16))
  9213   002C16  6EF8               	movwf	tblptru,c
  9214   002C18                     	endif
  9215   002C18  0008               	tblrd		*
  9216   002C1A  50F5               	movf	tablat,w,c
  9217   002C1C  6E01               	movwf	fputc@c^0,c
  9218   002C1E  6A02               	clrf	(fputc@c+1)^0,c
  9219   002C20  C022  F003         	movff	vfpfcnvrt@fp,fputc@fp
  9220   002C24  EC2B  F01B         	call	_fputc	;wreg free
  9221   002C28  EFFD  F015         	goto	l5075
  9222   002C2C                     l1383:
  9223   002C2C  0012               	return		;funcret
  9224   002C2E                     __end_of_vfpfcnvrt:
  9225                           	callstack 0
  9226                           
  9227 ;; *************** function _read_prec_or_width *****************
  9228 ;; Defined at:
  9229 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  9232 ;;		 -> vfprintf@cfmt(1), 
  9233 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  9234 ;;		 -> sprintf@ap(1), 
  9235 ;; Auto vars:     Size  Location     Type
  9236 ;;  c               1    8[COMRAM] unsigned char 
  9237 ;;  n               2    9[COMRAM] int 
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  2    6[COMRAM] int 
  9240 ;; Registers used:
  9241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9247 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9248 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9250 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9251 ;;Total ram usage:        5 bytes
  9252 ;; Hardware stack levels used: 1
  9253 ;; Hardware stack levels required when called: 1
  9254 ;; This function calls:
  9255 ;;		___wmul
  9256 ;; This function is called by:
  9257 ;;		_vfpfcnvrt
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           	psect	text49
  9262   003452                     __ptext49:
  9263                           	callstack 0
  9264   003452                     _read_prec_or_width:
  9265                           	callstack 24
  9266   003452                     
  9267                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  9268   003452  0E00               	movlw	0
  9269   003454  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  9270   003456  0E00               	movlw	0
  9271   003458  6E0A               	movwf	read_prec_or_width@n^0,c
  9272   00345A                     
  9273                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  9274   00345A  5007               	movf	read_prec_or_width@fmt^0,w,c
  9275   00345C  6ED9               	movwf	fsr2l,c
  9276   00345E  6ADA               	clrf	fsr2h,c
  9277   003460  CFDF FFF6          	movff	indf2,tblptrl
  9278   003464                     	if	1	;There is more than 1 active tblptr byte
  9279   003464  0E0E               	movlw	high __smallconst
  9280   003466  6EF7               	movwf	tblptrh,c
  9281   003468                     	endif
  9282   003468                     	if	0	;tblptru may be non-zero
  9283   003468                     	endif
  9284   003468                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9285   003468  0E00               	movlw	low (__smallconst shr (0+16))
  9286   00346A  6EF8               	movwf	tblptru,c
  9287   00346C                     	endif
  9288   00346C  0008               	tblrd		*
  9289   00346E  50F5               	movf	tablat,w,c
  9290   003470  0A2A               	xorlw	42
  9291   003472  A4D8               	btfss	status,2,c
  9292   003474  EF3E  F01A         	goto	u2551
  9293   003478  EF40  F01A         	goto	u2550
  9294   00347C                     u2551:
  9295   00347C  EF66  F01A         	goto	l3417
  9296   003480                     u2550:
  9297   003480                     
  9298                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  9299   003480  5007               	movf	read_prec_or_width@fmt^0,w,c
  9300   003482  6ED9               	movwf	fsr2l,c
  9301   003484  6ADA               	clrf	fsr2h,c
  9302   003486  2ADF               	incf	indf2,f,c
  9303   003488                     
  9304                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  9305   003488  5008               	movf	read_prec_or_width@ap^0,w,c
  9306   00348A  6ED9               	movwf	fsr2l,c
  9307   00348C  6ADA               	clrf	fsr2h,c
  9308   00348E  0E02               	movlw	2
  9309   003490  26DF               	addwf	indf2,f,c
  9310   003492  5CDF               	subwf	indf2,w,c
  9311   003494  6ED9               	movwf	fsr2l,c
  9312   003496  6ADA               	clrf	fsr2h,c
  9313   003498  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  9314   00349C  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  9315                           
  9316                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  9317   0034A0  EF7B  F01A         	goto	l1364
  9318   0034A4                     l3413:
  9319                           
  9320                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  9321   0034A4  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  9322   0034A8  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  9323   0034AC  0E00               	movlw	0
  9324   0034AE  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  9325   0034B0  0E0A               	movlw	10
  9326   0034B2  6E03               	movwf	___wmul@multiplicand^0,c
  9327   0034B4  EC7E  F021         	call	___wmul	;wreg free
  9328   0034B8  5009               	movf	read_prec_or_width@c^0,w,c
  9329   0034BA  2401               	addwf	?___wmul^0,w,c
  9330   0034BC  6E0A               	movwf	read_prec_or_width@n^0,c
  9331   0034BE  0E00               	movlw	0
  9332   0034C0  2002               	addwfc	(?___wmul+1)^0,w,c
  9333   0034C2  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  9334   0034C4                     
  9335                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  9336   0034C4  5007               	movf	read_prec_or_width@fmt^0,w,c
  9337   0034C6  6ED9               	movwf	fsr2l,c
  9338   0034C8  6ADA               	clrf	fsr2h,c
  9339   0034CA  2ADF               	incf	indf2,f,c
  9340   0034CC                     l3417:
  9341                           
  9342                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  9343   0034CC  5007               	movf	read_prec_or_width@fmt^0,w,c
  9344   0034CE  6ED9               	movwf	fsr2l,c
  9345   0034D0  6ADA               	clrf	fsr2h,c
  9346   0034D2  CFDF FFF6          	movff	indf2,tblptrl
  9347   0034D6                     	if	1	;There is more than 1 active tblptr byte
  9348   0034D6  0E0E               	movlw	high __smallconst
  9349   0034D8  6EF7               	movwf	tblptrh,c
  9350   0034DA                     	endif
  9351   0034DA                     	if	0	;tblptru may be non-zero
  9352   0034DA                     	endif
  9353   0034DA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9354   0034DA  0E00               	movlw	low (__smallconst shr (0+16))
  9355   0034DC  6EF8               	movwf	tblptru,c
  9356   0034DE                     	endif
  9357   0034DE  0008               	tblrd		*
  9358   0034E0  50F5               	movf	tablat,w,c
  9359   0034E2  0FD0               	addlw	208
  9360   0034E4  6E09               	movwf	read_prec_or_width@c^0,c
  9361   0034E6  0E09               	movlw	9
  9362   0034E8  6409               	cpfsgt	read_prec_or_width@c^0,c
  9363   0034EA  EF79  F01A         	goto	u2561
  9364   0034EE  EF7B  F01A         	goto	u2560
  9365   0034F2                     u2561:
  9366   0034F2  EF52  F01A         	goto	l3413
  9367   0034F6                     u2560:
  9368   0034F6                     l1364:
  9369                           
  9370                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  9371   0034F6  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  9372   0034FA  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  9373   0034FE  0012               	return		;funcret
  9374   003500                     __end_of_read_prec_or_width:
  9375                           	callstack 0
  9376                           
  9377 ;; *************** function ___wmul *****************
  9378 ;; Defined at:
  9379 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;  multiplier      2    0[COMRAM] unsigned int 
  9382 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;  product         2    4[COMRAM] unsigned int 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  2    0[COMRAM] unsigned int 
  9387 ;; Registers used:
  9388 ;;		wreg, status,2, status,0, prodl, prodh
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9394 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9395 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9397 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9398 ;;Total ram usage:        6 bytes
  9399 ;; Hardware stack levels used: 1
  9400 ;; This function calls:
  9401 ;;		Nothing
  9402 ;; This function is called by:
  9403 ;;		_setMotorPWM
  9404 ;;		_read_prec_or_width
  9405 ;;		_ADC2String
  9406 ;;		_logAction
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           	psect	text50
  9411   0042FC                     __ptext50:
  9412                           	callstack 0
  9413   0042FC                     ___wmul:
  9414                           	callstack 28
  9415   0042FC  5001               	movf	___wmul@multiplier^0,w,c
  9416   0042FE  0203               	mulwf	___wmul@multiplicand^0,c
  9417   004300  CFF3 F005          	movff	prodl,___wmul@product
  9418   004304  CFF4 F006          	movff	prodh,___wmul@product+1
  9419   004308  5001               	movf	___wmul@multiplier^0,w,c
  9420   00430A  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  9421   00430C  50F3               	movf	243,w,c
  9422   00430E  2606               	addwf	(___wmul@product+1)^0,f,c
  9423   004310  5002               	movf	(___wmul@multiplier+1)^0,w,c
  9424   004312  0203               	mulwf	___wmul@multiplicand^0,c
  9425   004314  50F3               	movf	243,w,c
  9426   004316  2606               	addwf	(___wmul@product+1)^0,f,c
  9427   004318  C005  F001         	movff	___wmul@product,?___wmul
  9428   00431C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9429   004320  0012               	return		;funcret
  9430   004322                     __end_of___wmul:
  9431                           	callstack 0
  9432                           
  9433 ;; *************** function _dtoa *****************
  9434 ;; Defined at:
  9435 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  9438 ;;		 -> sprintf@f(12), 
  9439 ;;  d               2   23[COMRAM] int 
  9440 ;; Auto vars:     Size  Location     Type
  9441 ;;  i               2   31[COMRAM] int 
  9442 ;;  w               2   28[COMRAM] int 
  9443 ;;  s               1   30[COMRAM] unsigned char 
  9444 ;;  p               1   27[COMRAM] _Bool 
  9445 ;; Return value:  Size  Location     Type
  9446 ;;                  1    wreg      void 
  9447 ;; Registers used:
  9448 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9449 ;; Tracked objects:
  9450 ;;		On entry : 0/0
  9451 ;;		On exit  : 0/0
  9452 ;;		Unchanged: 0/0
  9453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9454 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9455 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9457 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9458 ;;Total ram usage:       11 bytes
  9459 ;; Hardware stack levels used: 1
  9460 ;; Hardware stack levels required when called: 4
  9461 ;; This function calls:
  9462 ;;		___awdiv
  9463 ;;		___awmod
  9464 ;;		_abs
  9465 ;;		_pad
  9466 ;; This function is called by:
  9467 ;;		_vfpfcnvrt
  9468 ;; This function uses a non-reentrant model
  9469 ;;
  9470                           
  9471                           	psect	text51
  9472   002C2E                     __ptext51:
  9473                           	callstack 0
  9474   002C2E                     _dtoa:
  9475                           	callstack 21
  9476   002C2E                     
  9477                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  9478   002C2E  0E01               	movlw	1
  9479   002C30  6E1C               	movwf	dtoa@p^0,c
  9480   002C32                     
  9481                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  9482   002C32  BE19               	btfsc	(dtoa@d+1)^0,7,c
  9483   002C34  EF1E  F016         	goto	u4421
  9484   002C38  EF21  F016         	goto	u4420
  9485   002C3C                     u4421:
  9486   002C3C  0E01               	movlw	1
  9487   002C3E  EF22  F016         	goto	u4430
  9488   002C42                     u4420:
  9489   002C42  0E00               	movlw	0
  9490   002C44                     u4430:
  9491   002C44  6E1F               	movwf	dtoa@s^0,c
  9492   002C46                     
  9493                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  9494   002C46  C0D8  F01D         	movff	_width,dtoa@w
  9495   002C4A  C0D9  F01E         	movff	_width+1,dtoa@w+1
  9496   002C4E                     
  9497                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  9498   002C4E  501F               	movf	dtoa@s^0,w,c
  9499   002C50  B4D8               	btfsc	status,2,c
  9500   002C52  EF2D  F016         	goto	u4441
  9501   002C56  EF2F  F016         	goto	u4440
  9502   002C5A                     u4441:
  9503   002C5A  EF46  F016         	goto	l1347
  9504   002C5E                     u4440:
  9505   002C5E                     
  9506                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  9507   002C5E  061D               	decf	dtoa@w^0,f,c
  9508   002C60  A0D8               	btfss	status,0,c
  9509   002C62  061E               	decf	(dtoa@w+1)^0,f,c
  9510   002C64                     
  9511                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  9512   002C64  501F               	movf	dtoa@s^0,w,c
  9513   002C66  A4D8               	btfss	status,2,c
  9514   002C68  EF38  F016         	goto	u4451
  9515   002C6C  EF3A  F016         	goto	u4450
  9516   002C70                     u4451:
  9517   002C70  EF40  F016         	goto	l4997
  9518   002C74                     u4450:
  9519   002C74  0E00               	movlw	0
  9520   002C76  6E1B               	movwf	(_dtoa$2963+1)^0,c
  9521   002C78  0E2B               	movlw	43
  9522   002C7A  6E1A               	movwf	_dtoa$2963^0,c
  9523   002C7C  EF44  F016         	goto	l4999
  9524   002C80                     l4997:
  9525   002C80  0E00               	movlw	0
  9526   002C82  6E1B               	movwf	(_dtoa$2963+1)^0,c
  9527   002C84  0E2D               	movlw	45
  9528   002C86  6E1A               	movwf	_dtoa$2963^0,c
  9529   002C88                     l4999:
  9530   002C88  C01A  F01F         	movff	_dtoa$2963,dtoa@s
  9531   002C8C                     l1347:
  9532                           
  9533                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  9534   002C8C  0E00               	movlw	0
  9535   002C8E  6E21               	movwf	(dtoa@i+1)^0,c
  9536   002C90  0E1F               	movlw	31
  9537   002C92  6E20               	movwf	dtoa@i^0,c
  9538   002C94                     
  9539                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  9540   002C94  0E00               	movlw	0
  9541   002C96  0101               	movlb	1	; () banked
  9542   002C98  6F8B               	movwf	(_dbuf+31)& (0+255),b
  9543                           
  9544                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9545   002C9A  EF7E  F016         	goto	l5013
  9546   002C9E                     l5003:
  9547                           
  9548                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  9549   002C9E  0620               	decf	dtoa@i^0,f,c
  9550   002CA0  A0D8               	btfss	status,0,c
  9551   002CA2  0621               	decf	(dtoa@i+1)^0,f,c
  9552   002CA4                     
  9553                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  9554   002CA4  0E6C               	movlw	low _dbuf
  9555   002CA6  2420               	addwf	dtoa@i^0,w,c
  9556   002CA8  6ED9               	movwf	fsr2l,c
  9557   002CAA  0E01               	movlw	high _dbuf
  9558   002CAC  2021               	addwfc	(dtoa@i+1)^0,w,c
  9559   002CAE  6EDA               	movwf	fsr2h,c
  9560   002CB0  C018  F001         	movff	dtoa@d,___awmod@dividend
  9561   002CB4  C019  F002         	movff	dtoa@d+1,___awmod@dividend+1
  9562   002CB8  0E00               	movlw	0
  9563   002CBA  6E04               	movwf	(___awmod@divisor+1)^0,c
  9564   002CBC  0E0A               	movlw	10
  9565   002CBE  6E03               	movwf	___awmod@divisor^0,c
  9566   002CC0  ECD1  F019         	call	___awmod	;wreg free
  9567   002CC4  C001  F007         	movff	?___awmod,abs@a
  9568   002CC8  C002  F008         	movff	?___awmod+1,abs@a+1
  9569   002CCC  EC74  F020         	call	_abs	;wreg free
  9570   002CD0  5007               	movf	?_abs^0,w,c
  9571   002CD2  0F30               	addlw	48
  9572   002CD4  6EDF               	movwf	indf2,c
  9573   002CD6                     
  9574                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  9575   002CD6  0E00               	movlw	0
  9576   002CD8  6E1C               	movwf	dtoa@p^0,c
  9577   002CDA                     
  9578                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  9579   002CDA  061D               	decf	dtoa@w^0,f,c
  9580   002CDC  A0D8               	btfss	status,0,c
  9581   002CDE  061E               	decf	(dtoa@w+1)^0,f,c
  9582   002CE0                     
  9583                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  9584   002CE0  C018  F001         	movff	dtoa@d,___awdiv@dividend
  9585   002CE4  C019  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  9586   002CE8  0E00               	movlw	0
  9587   002CEA  6E04               	movwf	(___awdiv@divisor+1)^0,c
  9588   002CEC  0E0A               	movlw	10
  9589   002CEE  6E03               	movwf	___awdiv@divisor^0,c
  9590   002CF0  EC6F  F019         	call	___awdiv	;wreg free
  9591   002CF4  C001  F018         	movff	?___awdiv,dtoa@d
  9592   002CF8  C002  F019         	movff	?___awdiv+1,dtoa@d+1
  9593   002CFC                     l5013:
  9594                           
  9595                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9596   002CFC  BE21               	btfsc	(dtoa@i+1)^0,7,c
  9597   002CFE  EF89  F016         	goto	u4461
  9598   002D02  5021               	movf	(dtoa@i+1)^0,w,c
  9599   002D04  E108               	bnz	u4460
  9600   002D06  0420               	decf	dtoa@i^0,w,c
  9601   002D08  A0D8               	btfss	status,0,c
  9602   002D0A  EF89  F016         	goto	u4461
  9603   002D0E  EF8B  F016         	goto	u4460
  9604   002D12                     u4461:
  9605   002D12  EFB0  F016         	goto	l5023
  9606   002D16                     u4460:
  9607   002D16  5018               	movf	dtoa@d^0,w,c
  9608   002D18  1019               	iorwf	(dtoa@d+1)^0,w,c
  9609   002D1A  A4D8               	btfss	status,2,c
  9610   002D1C  EF92  F016         	goto	u4471
  9611   002D20  EF94  F016         	goto	u4470
  9612   002D24                     u4471:
  9613   002D24  EF4F  F016         	goto	l5003
  9614   002D28                     u4470:
  9615   002D28  501C               	movf	dtoa@p^0,w,c
  9616   002D2A  A4D8               	btfss	status,2,c
  9617   002D2C  EF9A  F016         	goto	u4481
  9618   002D30  EF9C  F016         	goto	u4480
  9619   002D34                     u4481:
  9620   002D34  EF4F  F016         	goto	l5003
  9621   002D38                     u4480:
  9622   002D38  BE1E               	btfsc	(dtoa@w+1)^0,7,c
  9623   002D3A  EFA7  F016         	goto	u4491
  9624   002D3E  501E               	movf	(dtoa@w+1)^0,w,c
  9625   002D40  E108               	bnz	u4490
  9626   002D42  041D               	decf	dtoa@w^0,w,c
  9627   002D44  A0D8               	btfss	status,0,c
  9628   002D46  EFA7  F016         	goto	u4491
  9629   002D4A  EFA9  F016         	goto	u4490
  9630   002D4E                     u4491:
  9631   002D4E  EFB0  F016         	goto	l5023
  9632   002D52                     u4490:
  9633   002D52  B25B               	btfsc	_flags^0,1,c
  9634   002D54  EFAE  F016         	goto	u4501
  9635   002D58  EFB0  F016         	goto	u4500
  9636   002D5C                     u4501:
  9637   002D5C  EF4F  F016         	goto	l5003
  9638   002D60                     u4500:
  9639   002D60                     l5023:
  9640                           
  9641                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  9642   002D60  501F               	movf	dtoa@s^0,w,c
  9643   002D62  B4D8               	btfsc	status,2,c
  9644   002D64  EFB6  F016         	goto	u4511
  9645   002D68  EFB8  F016         	goto	u4510
  9646   002D6C                     u4511:
  9647   002D6C  EFC3  F016         	goto	l5029
  9648   002D70                     u4510:
  9649   002D70                     
  9650                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  9651   002D70  0620               	decf	dtoa@i^0,f,c
  9652   002D72  A0D8               	btfss	status,0,c
  9653   002D74  0621               	decf	(dtoa@i+1)^0,f,c
  9654   002D76                     
  9655                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  9656   002D76  0E6C               	movlw	low _dbuf
  9657   002D78  2420               	addwf	dtoa@i^0,w,c
  9658   002D7A  6ED9               	movwf	fsr2l,c
  9659   002D7C  0E01               	movlw	high _dbuf
  9660   002D7E  2021               	addwfc	(dtoa@i+1)^0,w,c
  9661   002D80  6EDA               	movwf	fsr2h,c
  9662   002D82  C01F  FFDF         	movff	dtoa@s,indf2
  9663   002D86                     l5029:
  9664                           
  9665                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  9666   002D86  C017  F00F         	movff	dtoa@fp,pad@fp
  9667   002D8A  0E6C               	movlw	low _dbuf
  9668   002D8C  2420               	addwf	dtoa@i^0,w,c
  9669   002D8E  6E10               	movwf	pad@buf^0,c
  9670   002D90  0E01               	movlw	high _dbuf
  9671   002D92  2021               	addwfc	(dtoa@i+1)^0,w,c
  9672   002D94  6E11               	movwf	(pad@buf+1)^0,c
  9673   002D96  C01D  F012         	movff	dtoa@w,pad@p
  9674   002D9A  C01E  F013         	movff	dtoa@w+1,pad@p+1
  9675   002D9E  EC80  F01B         	call	_pad	;wreg free
  9676   002DA2  0012               	return		;funcret
  9677   002DA4                     __end_of_dtoa:
  9678                           	callstack 0
  9679                           
  9680 ;; *************** function _pad *****************
  9681 ;; Defined at:
  9682 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9683 ;; Parameters:    Size  Location     Type
  9684 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  9685 ;;		 -> sprintf@f(12), 
  9686 ;;  buf             2   15[COMRAM] PTR unsigned char 
  9687 ;;		 -> dbuf(32), 
  9688 ;;  p               2   17[COMRAM] int 
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;  i               2   20[COMRAM] int 
  9691 ;; Return value:  Size  Location     Type
  9692 ;;                  1    wreg      void 
  9693 ;; Registers used:
  9694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9695 ;; Tracked objects:
  9696 ;;		On entry : 0/0
  9697 ;;		On exit  : 0/0
  9698 ;;		Unchanged: 0/0
  9699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9700 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9701 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9702 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9703 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9704 ;;Total ram usage:        8 bytes
  9705 ;; Hardware stack levels used: 1
  9706 ;; Hardware stack levels required when called: 3
  9707 ;; This function calls:
  9708 ;;		_fputc
  9709 ;;		_fputs
  9710 ;; This function is called by:
  9711 ;;		_dtoa
  9712 ;; This function uses a non-reentrant model
  9713 ;;
  9714                           
  9715                           	psect	text52
  9716   003700                     __ptext52:
  9717                           	callstack 0
  9718   003700                     _pad:
  9719                           	callstack 21
  9720   003700                     
  9721                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  9722   003700  A05B               	btfss	_flags^0,0,c
  9723   003702  EF85  F01B         	goto	u4381
  9724   003706  EF87  F01B         	goto	u4380
  9725   00370A                     u4381:
  9726   00370A  EF8F  F01B         	goto	l4971
  9727   00370E                     u4380:
  9728   00370E                     
  9729                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  9730   00370E  C010  F009         	movff	pad@buf,fputs@s
  9731   003712  C011  F00A         	movff	pad@buf+1,fputs@s+1
  9732   003716  C00F  F00B         	movff	pad@fp,fputs@fp
  9733   00371A  EC04  F020         	call	_fputs	;wreg free
  9734   00371E                     l4971:
  9735                           
  9736                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  9737   00371E  BE13               	btfsc	(pad@p+1)^0,7,c
  9738   003720  EF96  F01B         	goto	u4390
  9739   003724  EF94  F01B         	goto	u4391
  9740   003728                     u4391:
  9741   003728  EF9A  F01B         	goto	l1339
  9742   00372C                     u4390:
  9743   00372C                     
  9744                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  9745   00372C  0E00               	movlw	0
  9746   00372E  6E13               	movwf	(pad@p+1)^0,c
  9747   003730  0E00               	movlw	0
  9748   003732  6E12               	movwf	pad@p^0,c
  9749   003734                     l1339:
  9750                           
  9751                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  9752   003734  0E00               	movlw	0
  9753   003736  6E16               	movwf	(pad@i+1)^0,c
  9754   003738  0E00               	movlw	0
  9755   00373A  6E15               	movwf	pad@i^0,c
  9756                           
  9757                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9758   00373C  EFAA  F01B         	goto	l4979
  9759   003740                     l4975:
  9760                           
  9761                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  9762   003740  0E00               	movlw	0
  9763   003742  6E02               	movwf	(fputc@c+1)^0,c
  9764   003744  0E20               	movlw	32
  9765   003746  6E01               	movwf	fputc@c^0,c
  9766   003748  C00F  F003         	movff	pad@fp,fputc@fp
  9767   00374C  EC2B  F01B         	call	_fputc	;wreg free
  9768   003750                     
  9769                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  9770   003750  4A15               	infsnz	pad@i^0,f,c
  9771   003752  2A16               	incf	(pad@i+1)^0,f,c
  9772   003754                     l4979:
  9773                           
  9774                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9775   003754  5012               	movf	pad@p^0,w,c
  9776   003756  5C15               	subwf	pad@i^0,w,c
  9777   003758  5016               	movf	(pad@i+1)^0,w,c
  9778   00375A  0A80               	xorlw	128
  9779   00375C  6E14               	movwf	??_pad^0,c
  9780   00375E  5013               	movf	(pad@p+1)^0,w,c
  9781   003760  0A80               	xorlw	128
  9782   003762  5814               	subwfb	??_pad^0,w,c
  9783   003764  A0D8               	btfss	status,0,c
  9784   003766  EFB7  F01B         	goto	u4401
  9785   00376A  EFB9  F01B         	goto	u4400
  9786   00376E                     u4401:
  9787   00376E  EFA0  F01B         	goto	l4975
  9788   003772                     u4400:
  9789   003772                     
  9790                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  9791   003772  B05B               	btfsc	_flags^0,0,c
  9792   003774  EFBE  F01B         	goto	u4411
  9793   003778  EFC0  F01B         	goto	u4410
  9794   00377C                     u4411:
  9795   00377C  EFC8  F01B         	goto	l1344
  9796   003780                     u4410:
  9797   003780                     
  9798                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  9799   003780  C010  F009         	movff	pad@buf,fputs@s
  9800   003784  C011  F00A         	movff	pad@buf+1,fputs@s+1
  9801   003788  C00F  F00B         	movff	pad@fp,fputs@fp
  9802   00378C  EC04  F020         	call	_fputs	;wreg free
  9803   003790                     l1344:
  9804   003790  0012               	return		;funcret
  9805   003792                     __end_of_pad:
  9806                           	callstack 0
  9807                           
  9808 ;; *************** function _fputs *****************
  9809 ;; Defined at:
  9810 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  9811 ;; Parameters:    Size  Location     Type
  9812 ;;  s               2    8[COMRAM] PTR const unsigned char 
  9813 ;;		 -> dbuf(32), 
  9814 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  9815 ;;		 -> sprintf@f(12), 
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;  i               2   12[COMRAM] int 
  9818 ;;  c               1   11[COMRAM] unsigned char 
  9819 ;; Return value:  Size  Location     Type
  9820 ;;                  2    8[COMRAM] int 
  9821 ;; Registers used:
  9822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9823 ;; Tracked objects:
  9824 ;;		On entry : 0/0
  9825 ;;		On exit  : 0/0
  9826 ;;		Unchanged: 0/0
  9827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9828 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9829 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9831 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9832 ;;Total ram usage:        6 bytes
  9833 ;; Hardware stack levels used: 1
  9834 ;; Hardware stack levels required when called: 2
  9835 ;; This function calls:
  9836 ;;		_fputc
  9837 ;; This function is called by:
  9838 ;;		_pad
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842                           	psect	text53
  9843   004008                     __ptext53:
  9844                           	callstack 0
  9845   004008                     _fputs:
  9846                           	callstack 21
  9847   004008  0E00               	movlw	0
  9848   00400A  6E0E               	movwf	(fputs@i+1)^0,c
  9849   00400C  0E00               	movlw	0
  9850   00400E  6E0D               	movwf	fputs@i^0,c
  9851   004010  EF13  F020         	goto	l4965
  9852   004014                     l4961:
  9853   004014  C00C  F001         	movff	fputs@c,fputc@c
  9854   004018  6A02               	clrf	(fputc@c+1)^0,c
  9855   00401A  C00B  F003         	movff	fputs@fp,fputc@fp
  9856   00401E  EC2B  F01B         	call	_fputc	;wreg free
  9857   004022  4A0D               	infsnz	fputs@i^0,f,c
  9858   004024  2A0E               	incf	(fputs@i+1)^0,f,c
  9859   004026                     l4965:
  9860   004026  500D               	movf	fputs@i^0,w,c
  9861   004028  2409               	addwf	fputs@s^0,w,c
  9862   00402A  6ED9               	movwf	fsr2l,c
  9863   00402C  500E               	movf	(fputs@i+1)^0,w,c
  9864   00402E  200A               	addwfc	(fputs@s+1)^0,w,c
  9865   004030  6EDA               	movwf	fsr2h,c
  9866   004032  50DF               	movf	indf2,w,c
  9867   004034  6E0C               	movwf	fputs@c^0,c
  9868   004036  500C               	movf	fputs@c^0,w,c
  9869   004038  A4D8               	btfss	status,2,c
  9870   00403A  EF21  F020         	goto	u4371
  9871   00403E  EF23  F020         	goto	u4370
  9872   004042                     u4371:
  9873   004042  EF0A  F020         	goto	l4961
  9874   004046                     u4370:
  9875   004046  0012               	return		;funcret
  9876   004048                     __end_of_fputs:
  9877                           	callstack 0
  9878                           
  9879 ;; *************** function _fputc *****************
  9880 ;; Defined at:
  9881 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  9882 ;; Parameters:    Size  Location     Type
  9883 ;;  c               2    0[COMRAM] int 
  9884 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  9885 ;;		 -> sprintf@f(12), 
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;                  2    0[COMRAM] int 
  9890 ;; Registers used:
  9891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9897 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9899 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9900 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9901 ;;Total ram usage:        8 bytes
  9902 ;; Hardware stack levels used: 1
  9903 ;; Hardware stack levels required when called: 1
  9904 ;; This function calls:
  9905 ;;		_putch
  9906 ;; This function is called by:
  9907 ;;		_pad
  9908 ;;		_vfpfcnvrt
  9909 ;;		_fputs
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           	psect	text54
  9914   003656                     __ptext54:
  9915                           	callstack 0
  9916   003656                     _fputc:
  9917                           	callstack 24
  9918   003656  5003               	movf	fputc@fp^0,w,c
  9919   003658  B4D8               	btfsc	status,2,c
  9920   00365A  EF31  F01B         	goto	u2201
  9921   00365E  EF33  F01B         	goto	u2200
  9922   003662                     u2201:
  9923   003662  EF3B  F01B         	goto	l3209
  9924   003666                     u2200:
  9925   003666  5003               	movf	fputc@fp^0,w,c
  9926   003668  A4D8               	btfss	status,2,c
  9927   00366A  EF39  F01B         	goto	u2211
  9928   00366E  EF3B  F01B         	goto	u2210
  9929   003672                     u2211:
  9930   003672  EF40  F01B         	goto	l3211
  9931   003676                     u2210:
  9932   003676                     l3209:
  9933   003676  5001               	movf	fputc@c^0,w,c
  9934   003678  ECFE  F021         	call	_putch
  9935   00367C  EF7F  F01B         	goto	l1408
  9936   003680                     l3211:
  9937   003680  5003               	movf	fputc@fp^0,w,c
  9938   003682  6ED9               	movwf	fsr2l,c
  9939   003684  6ADA               	clrf	fsr2h,c
  9940   003686  0E0A               	movlw	10
  9941   003688  26D9               	addwf	fsr2l,f,c
  9942   00368A  50DE               	movf	postinc2,w,c
  9943   00368C  10DE               	iorwf	postinc2,w,c
  9944   00368E  B4D8               	btfsc	status,2,c
  9945   003690  EF4C  F01B         	goto	u2221
  9946   003694  EF4E  F01B         	goto	u2220
  9947   003698                     u2221:
  9948   003698  EF67  F01B         	goto	l3215
  9949   00369C                     u2220:
  9950   00369C  5003               	movf	fputc@fp^0,w,c
  9951   00369E  6ED9               	movwf	fsr2l,c
  9952   0036A0  6ADA               	clrf	fsr2h,c
  9953   0036A2  0E0A               	movlw	10
  9954   0036A4  26D9               	addwf	fsr2l,f,c
  9955   0036A6  5003               	movf	fputc@fp^0,w,c
  9956   0036A8  6EE1               	movwf	fsr1l,c
  9957   0036AA  6AE2               	clrf	fsr1h,c
  9958   0036AC  0E03               	movlw	3
  9959   0036AE  26E1               	addwf	fsr1l,f,c
  9960   0036B0  50DE               	movf	postinc2,w,c
  9961   0036B2  5CE6               	subwf	postinc1,w,c
  9962   0036B4  50E6               	movf	postinc1,w,c
  9963   0036B6  0A80               	xorlw	128
  9964   0036B8  6E08               	movwf	(??_fputc+4)^0,c
  9965   0036BA  50DE               	movf	postinc2,w,c
  9966   0036BC  0A80               	xorlw	128
  9967   0036BE  5808               	subwfb	(??_fputc+4)^0,w,c
  9968   0036C0  B0D8               	btfsc	status,0,c
  9969   0036C2  EF65  F01B         	goto	u2231
  9970   0036C6  EF67  F01B         	goto	u2230
  9971   0036CA                     u2231:
  9972   0036CA  EF7F  F01B         	goto	l1408
  9973   0036CE                     u2230:
  9974   0036CE                     l3215:
  9975   0036CE  5003               	movf	fputc@fp^0,w,c
  9976   0036D0  6ED9               	movwf	fsr2l,c
  9977   0036D2  6ADA               	clrf	fsr2h,c
  9978   0036D4  0E03               	movlw	3
  9979   0036D6  26D9               	addwf	fsr2l,f,c
  9980   0036D8  50DF               	movf	indf2,w,c
  9981   0036DA  6E04               	movwf	??_fputc^0,c
  9982   0036DC  5003               	movf	fputc@fp^0,w,c
  9983   0036DE  6ED9               	movwf	fsr2l,c
  9984   0036E0  6ADA               	clrf	fsr2h,c
  9985   0036E2  50DF               	movf	indf2,w,c
  9986   0036E4  2404               	addwf	??_fputc^0,w,c
  9987   0036E6  6ED9               	movwf	fsr2l,c
  9988   0036E8  6ADA               	clrf	fsr2h,c
  9989   0036EA  C001  FFDF         	movff	fputc@c,indf2
  9990   0036EE  5003               	movf	fputc@fp^0,w,c
  9991   0036F0  6ED9               	movwf	fsr2l,c
  9992   0036F2  6ADA               	clrf	fsr2h,c
  9993   0036F4  0E03               	movlw	3
  9994   0036F6  26D9               	addwf	fsr2l,f,c
  9995   0036F8  2ADE               	incf	postinc2,f,c
  9996   0036FA  0E00               	movlw	0
  9997   0036FC  22DD               	addwfc	postdec2,f,c
  9998   0036FE                     l1408:
  9999   0036FE  0012               	return		;funcret
 10000   003700                     __end_of_fputc:
 10001                           	callstack 0
 10002                           
 10003 ;; *************** function _putch *****************
 10004 ;; Defined at:
 10005 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10006 ;; Parameters:    Size  Location     Type
 10007 ;;  c               1    wreg     unsigned char 
 10008 ;; Auto vars:     Size  Location     Type
 10009 ;;  c               1    0[COMRAM] unsigned char 
 10010 ;; Return value:  Size  Location     Type
 10011 ;;                  1    wreg      void 
 10012 ;; Registers used:
 10013 ;;		wreg
 10014 ;; Tracked objects:
 10015 ;;		On entry : 0/0
 10016 ;;		On exit  : 0/0
 10017 ;;		Unchanged: 0/0
 10018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10023 ;;Total ram usage:        0 bytes
 10024 ;; Hardware stack levels used: 1
 10025 ;; This function calls:
 10026 ;;		Nothing
 10027 ;; This function is called by:
 10028 ;;		_fputc
 10029 ;; This function uses a non-reentrant model
 10030 ;;
 10031                           
 10032                           	psect	text55
 10033   0043FC                     __ptext55:
 10034                           	callstack 0
 10035   0043FC                     _putch:
 10036                           	callstack 24
 10037   0043FC  0012               	return		;funcret
 10038   0043FE                     __end_of_putch:
 10039                           	callstack 0
 10040                           
 10041 ;; *************** function _abs *****************
 10042 ;; Defined at:
 10043 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10044 ;; Parameters:    Size  Location     Type
 10045 ;;  a               2    6[COMRAM] int 
 10046 ;; Auto vars:     Size  Location     Type
 10047 ;;		None
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  2    6[COMRAM] int 
 10050 ;; Registers used:
 10051 ;;		wreg, status,2, status,0
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10059 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10060 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10061 ;;Total ram usage:        4 bytes
 10062 ;; Hardware stack levels used: 1
 10063 ;; This function calls:
 10064 ;;		Nothing
 10065 ;; This function is called by:
 10066 ;;		_dtoa
 10067 ;; This function uses a non-reentrant model
 10068 ;;
 10069                           
 10070                           	psect	text56
 10071   0040E8                     __ptext56:
 10072                           	callstack 0
 10073   0040E8                     _abs:
 10074                           	callstack 24
 10075   0040E8  BE08               	btfsc	(abs@a+1)^0,7,c
 10076   0040EA  EF79  F020         	goto	u2411
 10077   0040EE  EF7B  F020         	goto	u2410
 10078   0040F2                     u2411:
 10079   0040F2  EF81  F020         	goto	l1393
 10080   0040F6                     u2410:
 10081   0040F6  C007  F007         	movff	abs@a,?_abs
 10082   0040FA  C008  F008         	movff	abs@a+1,?_abs+1
 10083   0040FE  EF8D  F020         	goto	l1396
 10084   004102                     l1393:
 10085   004102  C007  F009         	movff	abs@a,??_abs
 10086   004106  C008  F00A         	movff	abs@a+1,??_abs+1
 10087   00410A  1E09               	comf	??_abs^0,f,c
 10088   00410C  1E0A               	comf	(??_abs+1)^0,f,c
 10089   00410E  4A09               	infsnz	??_abs^0,f,c
 10090   004110  2A0A               	incf	(??_abs+1)^0,f,c
 10091   004112  C009  F007         	movff	??_abs,?_abs
 10092   004116  C00A  F008         	movff	??_abs+1,?_abs+1
 10093   00411A                     l1396:
 10094   00411A  0012               	return		;funcret
 10095   00411C                     __end_of_abs:
 10096                           	callstack 0
 10097                           
 10098 ;; *************** function ___awmod *****************
 10099 ;; Defined at:
 10100 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10101 ;; Parameters:    Size  Location     Type
 10102 ;;  dividend        2    0[COMRAM] int 
 10103 ;;  divisor         2    2[COMRAM] int 
 10104 ;; Auto vars:     Size  Location     Type
 10105 ;;  sign            1    5[COMRAM] unsigned char 
 10106 ;;  counter         1    4[COMRAM] unsigned char 
 10107 ;; Return value:  Size  Location     Type
 10108 ;;                  2    0[COMRAM] int 
 10109 ;; Registers used:
 10110 ;;		wreg, status,2, status,0
 10111 ;; Tracked objects:
 10112 ;;		On entry : 0/0
 10113 ;;		On exit  : 0/0
 10114 ;;		Unchanged: 0/0
 10115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10116 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10117 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10119 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10120 ;;Total ram usage:        6 bytes
 10121 ;; Hardware stack levels used: 1
 10122 ;; This function calls:
 10123 ;;		Nothing
 10124 ;; This function is called by:
 10125 ;;		_dtoa
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           	psect	text57
 10130   0033A2                     __ptext57:
 10131                           	callstack 0
 10132   0033A2                     ___awmod:
 10133                           	callstack 24
 10134   0033A2  0E00               	movlw	0
 10135   0033A4  6E06               	movwf	___awmod@sign^0,c
 10136   0033A6  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
 10137   0033A8  EFDA  F019         	goto	u2310
 10138   0033AC  EFD8  F019         	goto	u2311
 10139   0033B0                     u2311:
 10140   0033B0  EFE0  F019         	goto	l3285
 10141   0033B4                     u2310:
 10142   0033B4  6C01               	negf	___awmod@dividend^0,c
 10143   0033B6  1E02               	comf	(___awmod@dividend+1)^0,f,c
 10144   0033B8  B0D8               	btfsc	status,0,c
 10145   0033BA  2A02               	incf	(___awmod@dividend+1)^0,f,c
 10146   0033BC  0E01               	movlw	1
 10147   0033BE  6E06               	movwf	___awmod@sign^0,c
 10148   0033C0                     l3285:
 10149   0033C0  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
 10150   0033C2  EFE7  F019         	goto	u2320
 10151   0033C6  EFE5  F019         	goto	u2321
 10152   0033CA                     u2321:
 10153   0033CA  EFEB  F019         	goto	l3289
 10154   0033CE                     u2320:
 10155   0033CE  6C03               	negf	___awmod@divisor^0,c
 10156   0033D0  1E04               	comf	(___awmod@divisor+1)^0,f,c
 10157   0033D2  B0D8               	btfsc	status,0,c
 10158   0033D4  2A04               	incf	(___awmod@divisor+1)^0,f,c
 10159   0033D6                     l3289:
 10160   0033D6  5003               	movf	___awmod@divisor^0,w,c
 10161   0033D8  1004               	iorwf	(___awmod@divisor+1)^0,w,c
 10162   0033DA  B4D8               	btfsc	status,2,c
 10163   0033DC  EFF2  F019         	goto	u2331
 10164   0033E0  EFF4  F019         	goto	u2330
 10165   0033E4                     u2331:
 10166   0033E4  EF18  F01A         	goto	l3305
 10167   0033E8                     u2330:
 10168   0033E8  0E01               	movlw	1
 10169   0033EA  6E05               	movwf	___awmod@counter^0,c
 10170   0033EC  EFFC  F019         	goto	l3295
 10171   0033F0                     l3293:
 10172   0033F0  90D8               	bcf	status,0,c
 10173   0033F2  3603               	rlcf	___awmod@divisor^0,f,c
 10174   0033F4  3604               	rlcf	(___awmod@divisor+1)^0,f,c
 10175   0033F6  2A05               	incf	___awmod@counter^0,f,c
 10176   0033F8                     l3295:
 10177   0033F8  AE04               	btfss	(___awmod@divisor+1)^0,7,c
 10178   0033FA  EF01  F01A         	goto	u2341
 10179   0033FE  EF03  F01A         	goto	u2340
 10180   003402                     u2341:
 10181   003402  EFF8  F019         	goto	l3293
 10182   003406                     u2340:
 10183   003406                     l3297:
 10184   003406  5003               	movf	___awmod@divisor^0,w,c
 10185   003408  5C01               	subwf	___awmod@dividend^0,w,c
 10186   00340A  5004               	movf	(___awmod@divisor+1)^0,w,c
 10187   00340C  5802               	subwfb	(___awmod@dividend+1)^0,w,c
 10188   00340E  A0D8               	btfss	status,0,c
 10189   003410  EF0C  F01A         	goto	u2351
 10190   003414  EF0E  F01A         	goto	u2350
 10191   003418                     u2351:
 10192   003418  EF12  F01A         	goto	l3301
 10193   00341C                     u2350:
 10194   00341C  5003               	movf	___awmod@divisor^0,w,c
 10195   00341E  5E01               	subwf	___awmod@dividend^0,f,c
 10196   003420  5004               	movf	(___awmod@divisor+1)^0,w,c
 10197   003422  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
 10198   003424                     l3301:
 10199   003424  90D8               	bcf	status,0,c
 10200   003426  3204               	rrcf	(___awmod@divisor+1)^0,f,c
 10201   003428  3203               	rrcf	___awmod@divisor^0,f,c
 10202   00342A  2E05               	decfsz	___awmod@counter^0,f,c
 10203   00342C  EF03  F01A         	goto	l3297
 10204   003430                     l3305:
 10205   003430  5006               	movf	___awmod@sign^0,w,c
 10206   003432  B4D8               	btfsc	status,2,c
 10207   003434  EF1E  F01A         	goto	u2361
 10208   003438  EF20  F01A         	goto	u2360
 10209   00343C                     u2361:
 10210   00343C  EF24  F01A         	goto	l3309
 10211   003440                     u2360:
 10212   003440  6C01               	negf	___awmod@dividend^0,c
 10213   003442  1E02               	comf	(___awmod@dividend+1)^0,f,c
 10214   003444  B0D8               	btfsc	status,0,c
 10215   003446  2A02               	incf	(___awmod@dividend+1)^0,f,c
 10216   003448                     l3309:
 10217   003448  C001  F001         	movff	___awmod@dividend,?___awmod
 10218   00344C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 10219   003450  0012               	return		;funcret
 10220   003452                     __end_of___awmod:
 10221                           	callstack 0
 10222                           
 10223 ;; *************** function ___awdiv *****************
 10224 ;; Defined at:
 10225 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;  dividend        2    0[COMRAM] int 
 10228 ;;  divisor         2    2[COMRAM] int 
 10229 ;; Auto vars:     Size  Location     Type
 10230 ;;  quotient        2    6[COMRAM] int 
 10231 ;;  sign            1    5[COMRAM] unsigned char 
 10232 ;;  counter         1    4[COMRAM] unsigned char 
 10233 ;; Return value:  Size  Location     Type
 10234 ;;                  2    0[COMRAM] int 
 10235 ;; Registers used:
 10236 ;;		wreg, status,2, status,0
 10237 ;; Tracked objects:
 10238 ;;		On entry : 0/0
 10239 ;;		On exit  : 0/0
 10240 ;;		Unchanged: 0/0
 10241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10242 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10243 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10245 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10246 ;;Total ram usage:        8 bytes
 10247 ;; Hardware stack levels used: 1
 10248 ;; This function calls:
 10249 ;;		Nothing
 10250 ;; This function is called by:
 10251 ;;		_dtoa
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           	psect	text58
 10256   0032DE                     __ptext58:
 10257                           	callstack 0
 10258   0032DE                     ___awdiv:
 10259                           	callstack 24
 10260   0032DE  0E00               	movlw	0
 10261   0032E0  6E06               	movwf	___awdiv@sign^0,c
 10262   0032E2  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
 10263   0032E4  EF78  F019         	goto	u2250
 10264   0032E8  EF76  F019         	goto	u2251
 10265   0032EC                     u2251:
 10266   0032EC  EF7E  F019         	goto	l3241
 10267   0032F0                     u2250:
 10268   0032F0  6C03               	negf	___awdiv@divisor^0,c
 10269   0032F2  1E04               	comf	(___awdiv@divisor+1)^0,f,c
 10270   0032F4  B0D8               	btfsc	status,0,c
 10271   0032F6  2A04               	incf	(___awdiv@divisor+1)^0,f,c
 10272   0032F8  0E01               	movlw	1
 10273   0032FA  6E06               	movwf	___awdiv@sign^0,c
 10274   0032FC                     l3241:
 10275   0032FC  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
 10276   0032FE  EF85  F019         	goto	u2260
 10277   003302  EF83  F019         	goto	u2261
 10278   003306                     u2261:
 10279   003306  EF8B  F019         	goto	l3247
 10280   00330A                     u2260:
 10281   00330A  6C01               	negf	___awdiv@dividend^0,c
 10282   00330C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
 10283   00330E  B0D8               	btfsc	status,0,c
 10284   003310  2A02               	incf	(___awdiv@dividend+1)^0,f,c
 10285   003312  0E01               	movlw	1
 10286   003314  1A06               	xorwf	___awdiv@sign^0,f,c
 10287   003316                     l3247:
 10288   003316  0E00               	movlw	0
 10289   003318  6E08               	movwf	(___awdiv@quotient+1)^0,c
 10290   00331A  0E00               	movlw	0
 10291   00331C  6E07               	movwf	___awdiv@quotient^0,c
 10292   00331E  5003               	movf	___awdiv@divisor^0,w,c
 10293   003320  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
 10294   003322  B4D8               	btfsc	status,2,c
 10295   003324  EF96  F019         	goto	u2271
 10296   003328  EF98  F019         	goto	u2270
 10297   00332C                     u2271:
 10298   00332C  EFC0  F019         	goto	l3269
 10299   003330                     u2270:
 10300   003330  0E01               	movlw	1
 10301   003332  6E05               	movwf	___awdiv@counter^0,c
 10302   003334  EFA0  F019         	goto	l3255
 10303   003338                     l3253:
 10304   003338  90D8               	bcf	status,0,c
 10305   00333A  3603               	rlcf	___awdiv@divisor^0,f,c
 10306   00333C  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
 10307   00333E  2A05               	incf	___awdiv@counter^0,f,c
 10308   003340                     l3255:
 10309   003340  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
 10310   003342  EFA5  F019         	goto	u2281
 10311   003346  EFA7  F019         	goto	u2280
 10312   00334A                     u2281:
 10313   00334A  EF9C  F019         	goto	l3253
 10314   00334E                     u2280:
 10315   00334E                     l3257:
 10316   00334E  90D8               	bcf	status,0,c
 10317   003350  3607               	rlcf	___awdiv@quotient^0,f,c
 10318   003352  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
 10319   003354  5003               	movf	___awdiv@divisor^0,w,c
 10320   003356  5C01               	subwf	___awdiv@dividend^0,w,c
 10321   003358  5004               	movf	(___awdiv@divisor+1)^0,w,c
 10322   00335A  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
 10323   00335C  A0D8               	btfss	status,0,c
 10324   00335E  EFB3  F019         	goto	u2291
 10325   003362  EFB5  F019         	goto	u2290
 10326   003366                     u2291:
 10327   003366  EFBA  F019         	goto	l3265
 10328   00336A                     u2290:
 10329   00336A  5003               	movf	___awdiv@divisor^0,w,c
 10330   00336C  5E01               	subwf	___awdiv@dividend^0,f,c
 10331   00336E  5004               	movf	(___awdiv@divisor+1)^0,w,c
 10332   003370  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
 10333   003372  8007               	bsf	___awdiv@quotient^0,0,c
 10334   003374                     l3265:
 10335   003374  90D8               	bcf	status,0,c
 10336   003376  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
 10337   003378  3203               	rrcf	___awdiv@divisor^0,f,c
 10338   00337A  2E05               	decfsz	___awdiv@counter^0,f,c
 10339   00337C  EFA7  F019         	goto	l3257
 10340   003380                     l3269:
 10341   003380  5006               	movf	___awdiv@sign^0,w,c
 10342   003382  B4D8               	btfsc	status,2,c
 10343   003384  EFC6  F019         	goto	u2301
 10344   003388  EFC8  F019         	goto	u2300
 10345   00338C                     u2301:
 10346   00338C  EFCC  F019         	goto	l3273
 10347   003390                     u2300:
 10348   003390  6C07               	negf	___awdiv@quotient^0,c
 10349   003392  1E08               	comf	(___awdiv@quotient+1)^0,f,c
 10350   003394  B0D8               	btfsc	status,0,c
 10351   003396  2A08               	incf	(___awdiv@quotient+1)^0,f,c
 10352   003398                     l3273:
 10353   003398  C007  F001         	movff	___awdiv@quotient,?___awdiv
 10354   00339C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 10355   0033A0  0012               	return		;funcret
 10356   0033A2                     __end_of___awdiv:
 10357                           	callstack 0
 10358                           
 10359 ;; *************** function _sendStringSerial4 *****************
 10360 ;; Defined at:
 10361 ;;		line 41 in file "serial.c"
 10362 ;; Parameters:    Size  Location     Type
 10363 ;;  string          1    1[COMRAM] PTR unsigned char 
 10364 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), convert_rgb2hue@c_char(20), calibration_routine@cal_state(2
      +0), 
 10365 ;; Auto vars:     Size  Location     Type
 10366 ;;		None
 10367 ;; Return value:  Size  Location     Type
 10368 ;;                  1    wreg      void 
 10369 ;; Registers used:
 10370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10371 ;; Tracked objects:
 10372 ;;		On entry : 0/0
 10373 ;;		On exit  : 0/0
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10376 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10379 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10380 ;;Total ram usage:        1 bytes
 10381 ;; Hardware stack levels used: 1
 10382 ;; Hardware stack levels required when called: 1
 10383 ;; This function calls:
 10384 ;;		_sendCharSerial4
 10385 ;; This function is called by:
 10386 ;;		_calibration_routine
 10387 ;;		_convert_rgb2hue
 10388 ;;		_send2USART
 10389 ;;		_sendAllReadings
 10390 ;; This function uses a non-reentrant model
 10391 ;;
 10392                           
 10393                           	psect	text59
 10394   004248                     __ptext59:
 10395                           	callstack 0
 10396   004248                     _sendStringSerial4:
 10397                           	callstack 27
 10398   004248                     
 10399                           ;serial.c: 44:     while(*string != 0){
 10400   004248  EF31  F021         	goto	l3849
 10401   00424C                     l3843:
 10402                           
 10403                           ;serial.c: 46:   sendCharSerial4(*string++);
 10404   00424C  5002               	movf	sendStringSerial4@string^0,w,c
 10405   00424E  6ED9               	movwf	fsr2l,c
 10406   004250  6ADA               	clrf	fsr2h,c
 10407   004252  50DF               	movf	indf2,w,c
 10408   004254  ECDD  F021         	call	_sendCharSerial4
 10409   004258  2A02               	incf	sendStringSerial4@string^0,f,c
 10410   00425A                     
 10411                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 10412   00425A  0E6A               	movlw	106
 10413   00425C                     u5117:
 10414   00425C  2EE8               	decfsz	wreg,f,c
 10415   00425E  D7FE               	bra	u5117
 10416   004260  D000               	nop2	
 10417   004262                     l3849:
 10418                           
 10419                           ;serial.c: 44:     while(*string != 0){
 10420   004262  5002               	movf	sendStringSerial4@string^0,w,c
 10421   004264  6ED9               	movwf	fsr2l,c
 10422   004266  6ADA               	clrf	fsr2h,c
 10423   004268  50DF               	movf	indf2,w,c
 10424   00426A  A4D8               	btfss	status,2,c
 10425   00426C  EF3A  F021         	goto	u3161
 10426   004270  EF3C  F021         	goto	u3160
 10427   004274                     u3161:
 10428   004274  EF26  F021         	goto	l3843
 10429   004278                     u3160:
 10430   004278  0012               	return		;funcret
 10431   00427A                     __end_of_sendStringSerial4:
 10432                           	callstack 0
 10433                           
 10434 ;; *************** function _sendCharSerial4 *****************
 10435 ;; Defined at:
 10436 ;;		line 35 in file "serial.c"
 10437 ;; Parameters:    Size  Location     Type
 10438 ;;  charToSend      1    wreg     unsigned char 
 10439 ;; Auto vars:     Size  Location     Type
 10440 ;;  charToSend      1    0[COMRAM] unsigned char 
 10441 ;; Return value:  Size  Location     Type
 10442 ;;                  1    wreg      void 
 10443 ;; Registers used:
 10444 ;;		wreg
 10445 ;; Tracked objects:
 10446 ;;		On entry : 0/0
 10447 ;;		On exit  : 0/0
 10448 ;;		Unchanged: 0/0
 10449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10451 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10453 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10454 ;;Total ram usage:        1 bytes
 10455 ;; Hardware stack levels used: 1
 10456 ;; This function calls:
 10457 ;;		Nothing
 10458 ;; This function is called by:
 10459 ;;		_sendStringSerial4
 10460 ;; This function uses a non-reentrant model
 10461 ;;
 10462                           
 10463                           	psect	text60
 10464   0043BA                     __ptext60:
 10465                           	callstack 0
 10466   0043BA                     _sendCharSerial4:
 10467                           	callstack 27
 10468                           
 10469                           ;incstack = 0
 10470                           ;sendCharSerial4@charToSend stored from wreg
 10471   0043BA  6E01               	movwf	sendCharSerial4@charToSend^0,c
 10472   0043BC                     l562:
 10473   0043BC  010E               	movlb	14	; () banked
 10474   0043BE  A537               	btfss	55,2,b	;volatile
 10475   0043C0  EFE4  F021         	goto	u2731
 10476   0043C4  EFE6  F021         	goto	u2730
 10477   0043C8                     u2731:
 10478   0043C8  EFDE  F021         	goto	l562
 10479   0043CC                     u2730:
 10480   0043CC                     
 10481                           ; BSR set to: 14
 10482                           ;serial.c: 37:     TX4REG = charToSend;
 10483   0043CC  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 10484   0043D0                     
 10485                           ; BSR set to: 14
 10486   0043D0  0012               	return		;funcret
 10487   0043D2                     __end_of_sendCharSerial4:
 10488                           	callstack 0
 10489                           
 10490 ;; *************** function _color_read_Red *****************
 10491 ;; Defined at:
 10492 ;;		line 32 in file "color.c"
 10493 ;; Parameters:    Size  Location     Type
 10494 ;;		None
 10495 ;; Auto vars:     Size  Location     Type
 10496 ;;  tmp             2    9[COMRAM] unsigned int 
 10497 ;; Return value:  Size  Location     Type
 10498 ;;                  2    4[COMRAM] unsigned int 
 10499 ;; Registers used:
 10500 ;;		wreg, status,2, status,0, cstack
 10501 ;; Tracked objects:
 10502 ;;		On entry : 0/0
 10503 ;;		On exit  : 0/0
 10504 ;;		Unchanged: 0/0
 10505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10506 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10507 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10508 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10509 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10510 ;;Total ram usage:        7 bytes
 10511 ;; Hardware stack levels used: 1
 10512 ;; Hardware stack levels required when called: 2
 10513 ;; This function calls:
 10514 ;;		_I2C_2_Master_Read
 10515 ;;		_I2C_2_Master_RepStart
 10516 ;;		_I2C_2_Master_Start
 10517 ;;		_I2C_2_Master_Stop
 10518 ;;		_I2C_2_Master_Write
 10519 ;; This function is called by:
 10520 ;;		_reading_hue
 10521 ;;		_calibration_routine
 10522 ;; This function uses a non-reentrant model
 10523 ;;
 10524                           
 10525                           	psect	text61
 10526   003B7A                     __ptext61:
 10527                           	callstack 0
 10528   003B7A                     _color_read_Red:
 10529                           	callstack 27
 10530   003B7A                     
 10531                           ;color.c: 34:  unsigned int tmp;;color.c: 35:  I2C_2_Master_Start();
 10532   003B7A  ECF4  F021         	call	_I2C_2_Master_Start	;wreg free
 10533                           
 10534                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
 10535   003B7E  0E52               	movlw	82
 10536   003B80  ECE9  F021         	call	_I2C_2_Master_Write
 10537                           
 10538                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
 10539   003B84  0EB6               	movlw	182
 10540   003B86  ECE9  F021         	call	_I2C_2_Master_Write
 10541                           
 10542                           ;color.c: 38:  I2C_2_Master_RepStart();
 10543   003B8A  ECF9  F021         	call	_I2C_2_Master_RepStart	;wreg free
 10544                           
 10545                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
 10546   003B8E  0E53               	movlw	83
 10547   003B90  ECE9  F021         	call	_I2C_2_Master_Write
 10548                           
 10549                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
 10550   003B94  0E01               	movlw	1
 10551   003B96  ECE3  F01F         	call	_I2C_2_Master_Read
 10552   003B9A  6E07               	movwf	??_color_read_Red^0,c
 10553   003B9C  5007               	movf	??_color_read_Red^0,w,c
 10554   003B9E  6E0A               	movwf	color_read_Red@tmp^0,c
 10555   003BA0  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
 10556                           
 10557                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10558   003BA2  0E00               	movlw	0
 10559   003BA4  ECE3  F01F         	call	_I2C_2_Master_Read
 10560   003BA8  6E07               	movwf	??_color_read_Red^0,c
 10561   003BAA  5007               	movf	??_color_read_Red^0,w,c
 10562   003BAC  6E09               	movwf	(??_color_read_Red+2)^0,c
 10563   003BAE  6A08               	clrf	(??_color_read_Red+1)^0,c
 10564   003BB0  500A               	movf	color_read_Red@tmp^0,w,c
 10565   003BB2  1008               	iorwf	(??_color_read_Red+1)^0,w,c
 10566   003BB4  6E0A               	movwf	color_read_Red@tmp^0,c
 10567   003BB6  500B               	movf	(color_read_Red@tmp+1)^0,w,c
 10568   003BB8  1009               	iorwf	(??_color_read_Red+2)^0,w,c
 10569   003BBA  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
 10570                           
 10571                           ;color.c: 42:  I2C_2_Master_Stop();
 10572   003BBC  ECEF  F021         	call	_I2C_2_Master_Stop	;wreg free
 10573   003BC0                     
 10574                           ;color.c: 43:  return tmp;
 10575   003BC0  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
 10576   003BC4  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10577   003BC8  0012               	return		;funcret
 10578   003BCA                     __end_of_color_read_Red:
 10579                           	callstack 0
 10580                           
 10581 ;; *************** function _color_read_Green *****************
 10582 ;; Defined at:
 10583 ;;		line 46 in file "color.c"
 10584 ;; Parameters:    Size  Location     Type
 10585 ;;		None
 10586 ;; Auto vars:     Size  Location     Type
 10587 ;;  tmp             2    9[COMRAM] unsigned int 
 10588 ;; Return value:  Size  Location     Type
 10589 ;;                  2    4[COMRAM] unsigned int 
 10590 ;; Registers used:
 10591 ;;		wreg, status,2, status,0, cstack
 10592 ;; Tracked objects:
 10593 ;;		On entry : 0/0
 10594 ;;		On exit  : 0/0
 10595 ;;		Unchanged: 0/0
 10596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10597 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10598 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10599 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10600 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10601 ;;Total ram usage:        7 bytes
 10602 ;; Hardware stack levels used: 1
 10603 ;; Hardware stack levels required when called: 2
 10604 ;; This function calls:
 10605 ;;		_I2C_2_Master_Read
 10606 ;;		_I2C_2_Master_RepStart
 10607 ;;		_I2C_2_Master_Start
 10608 ;;		_I2C_2_Master_Stop
 10609 ;;		_I2C_2_Master_Write
 10610 ;; This function is called by:
 10611 ;;		_reading_hue
 10612 ;;		_calibration_routine
 10613 ;; This function uses a non-reentrant model
 10614 ;;
 10615                           
 10616                           	psect	text62
 10617   003BCA                     __ptext62:
 10618                           	callstack 0
 10619   003BCA                     _color_read_Green:
 10620                           	callstack 27
 10621   003BCA                     
 10622                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
 10623   003BCA  ECF4  F021         	call	_I2C_2_Master_Start	;wreg free
 10624                           
 10625                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
 10626   003BCE  0E52               	movlw	82
 10627   003BD0  ECE9  F021         	call	_I2C_2_Master_Write
 10628                           
 10629                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
 10630   003BD4  0EB8               	movlw	184
 10631   003BD6  ECE9  F021         	call	_I2C_2_Master_Write
 10632                           
 10633                           ;color.c: 52:  I2C_2_Master_RepStart();
 10634   003BDA  ECF9  F021         	call	_I2C_2_Master_RepStart	;wreg free
 10635                           
 10636                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
 10637   003BDE  0E53               	movlw	83
 10638   003BE0  ECE9  F021         	call	_I2C_2_Master_Write
 10639                           
 10640                           ;color.c: 54:  tmp=I2C_2_Master_Read(1);
 10641   003BE4  0E01               	movlw	1
 10642   003BE6  ECE3  F01F         	call	_I2C_2_Master_Read
 10643   003BEA  6E07               	movwf	??_color_read_Green^0,c
 10644   003BEC  5007               	movf	??_color_read_Green^0,w,c
 10645   003BEE  6E0A               	movwf	color_read_Green@tmp^0,c
 10646   003BF0  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
 10647                           
 10648                           ;color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10649   003BF2  0E00               	movlw	0
 10650   003BF4  ECE3  F01F         	call	_I2C_2_Master_Read
 10651   003BF8  6E07               	movwf	??_color_read_Green^0,c
 10652   003BFA  5007               	movf	??_color_read_Green^0,w,c
 10653   003BFC  6E09               	movwf	(??_color_read_Green+2)^0,c
 10654   003BFE  6A08               	clrf	(??_color_read_Green+1)^0,c
 10655   003C00  500A               	movf	color_read_Green@tmp^0,w,c
 10656   003C02  1008               	iorwf	(??_color_read_Green+1)^0,w,c
 10657   003C04  6E0A               	movwf	color_read_Green@tmp^0,c
 10658   003C06  500B               	movf	(color_read_Green@tmp+1)^0,w,c
 10659   003C08  1009               	iorwf	(??_color_read_Green+2)^0,w,c
 10660   003C0A  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
 10661                           
 10662                           ;color.c: 56:  I2C_2_Master_Stop();
 10663   003C0C  ECEF  F021         	call	_I2C_2_Master_Stop	;wreg free
 10664   003C10                     
 10665                           ;color.c: 57:  return tmp;
 10666   003C10  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
 10667   003C14  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10668   003C18  0012               	return		;funcret
 10669   003C1A                     __end_of_color_read_Green:
 10670                           	callstack 0
 10671                           
 10672 ;; *************** function _color_read_Clear *****************
 10673 ;; Defined at:
 10674 ;;		line 75 in file "color.c"
 10675 ;; Parameters:    Size  Location     Type
 10676 ;;		None
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;  tmp             2    9[COMRAM] unsigned int 
 10679 ;; Return value:  Size  Location     Type
 10680 ;;                  2    4[COMRAM] unsigned int 
 10681 ;; Registers used:
 10682 ;;		wreg, status,2, status,0, cstack
 10683 ;; Tracked objects:
 10684 ;;		On entry : 0/0
 10685 ;;		On exit  : 0/0
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10688 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10689 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10690 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10691 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10692 ;;Total ram usage:        7 bytes
 10693 ;; Hardware stack levels used: 1
 10694 ;; Hardware stack levels required when called: 2
 10695 ;; This function calls:
 10696 ;;		_I2C_2_Master_Read
 10697 ;;		_I2C_2_Master_RepStart
 10698 ;;		_I2C_2_Master_Start
 10699 ;;		_I2C_2_Master_Stop
 10700 ;;		_I2C_2_Master_Write
 10701 ;; This function is called by:
 10702 ;;		_reading_hue
 10703 ;;		_calibration_routine
 10704 ;;		_main
 10705 ;; This function uses a non-reentrant model
 10706 ;;
 10707                           
 10708                           	psect	text63
 10709   003C1A                     __ptext63:
 10710                           	callstack 0
 10711   003C1A                     _color_read_Clear:
 10712                           	callstack 27
 10713   003C1A                     
 10714                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
 10715   003C1A  ECF4  F021         	call	_I2C_2_Master_Start	;wreg free
 10716                           
 10717                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 10718   003C1E  0E52               	movlw	82
 10719   003C20  ECE9  F021         	call	_I2C_2_Master_Write
 10720                           
 10721                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
 10722   003C24  0EB4               	movlw	180
 10723   003C26  ECE9  F021         	call	_I2C_2_Master_Write
 10724                           
 10725                           ;color.c: 81:  I2C_2_Master_RepStart();
 10726   003C2A  ECF9  F021         	call	_I2C_2_Master_RepStart	;wreg free
 10727                           
 10728                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 10729   003C2E  0E53               	movlw	83
 10730   003C30  ECE9  F021         	call	_I2C_2_Master_Write
 10731                           
 10732                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
 10733   003C34  0E01               	movlw	1
 10734   003C36  ECE3  F01F         	call	_I2C_2_Master_Read
 10735   003C3A  6E07               	movwf	??_color_read_Clear^0,c
 10736   003C3C  5007               	movf	??_color_read_Clear^0,w,c
 10737   003C3E  6E0A               	movwf	color_read_Clear@tmp^0,c
 10738   003C40  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
 10739                           
 10740                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10741   003C42  0E00               	movlw	0
 10742   003C44  ECE3  F01F         	call	_I2C_2_Master_Read
 10743   003C48  6E07               	movwf	??_color_read_Clear^0,c
 10744   003C4A  5007               	movf	??_color_read_Clear^0,w,c
 10745   003C4C  6E09               	movwf	(??_color_read_Clear+2)^0,c
 10746   003C4E  6A08               	clrf	(??_color_read_Clear+1)^0,c
 10747   003C50  500A               	movf	color_read_Clear@tmp^0,w,c
 10748   003C52  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
 10749   003C54  6E0A               	movwf	color_read_Clear@tmp^0,c
 10750   003C56  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
 10751   003C58  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
 10752   003C5A  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
 10753                           
 10754                           ;color.c: 85:  I2C_2_Master_Stop();
 10755   003C5C  ECEF  F021         	call	_I2C_2_Master_Stop	;wreg free
 10756   003C60                     
 10757                           ;color.c: 86:  return tmp;
 10758   003C60  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
 10759   003C64  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10760   003C68  0012               	return		;funcret
 10761   003C6A                     __end_of_color_read_Clear:
 10762                           	callstack 0
 10763                           
 10764 ;; *************** function _color_read_Blue *****************
 10765 ;; Defined at:
 10766 ;;		line 60 in file "color.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;		None
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  tmp             2    9[COMRAM] unsigned int 
 10771 ;; Return value:  Size  Location     Type
 10772 ;;                  2    4[COMRAM] unsigned int 
 10773 ;; Registers used:
 10774 ;;		wreg, status,2, status,0, cstack
 10775 ;; Tracked objects:
 10776 ;;		On entry : 0/0
 10777 ;;		On exit  : 0/0
 10778 ;;		Unchanged: 0/0
 10779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10780 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10781 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10782 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10783 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10784 ;;Total ram usage:        7 bytes
 10785 ;; Hardware stack levels used: 1
 10786 ;; Hardware stack levels required when called: 2
 10787 ;; This function calls:
 10788 ;;		_I2C_2_Master_Read
 10789 ;;		_I2C_2_Master_RepStart
 10790 ;;		_I2C_2_Master_Start
 10791 ;;		_I2C_2_Master_Stop
 10792 ;;		_I2C_2_Master_Write
 10793 ;; This function is called by:
 10794 ;;		_reading_hue
 10795 ;;		_calibration_routine
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           	psect	text64
 10800   003C6A                     __ptext64:
 10801                           	callstack 0
 10802   003C6A                     _color_read_Blue:
 10803                           	callstack 27
 10804   003C6A                     
 10805                           ;color.c: 62:  unsigned int tmp;;color.c: 63:  I2C_2_Master_Start();
 10806   003C6A  ECF4  F021         	call	_I2C_2_Master_Start	;wreg free
 10807                           
 10808                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x00);
 10809   003C6E  0E52               	movlw	82
 10810   003C70  ECE9  F021         	call	_I2C_2_Master_Write
 10811                           
 10812                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x1A);
 10813   003C74  0EBA               	movlw	186
 10814   003C76  ECE9  F021         	call	_I2C_2_Master_Write
 10815                           
 10816                           ;color.c: 66:  I2C_2_Master_RepStart();
 10817   003C7A  ECF9  F021         	call	_I2C_2_Master_RepStart	;wreg free
 10818                           
 10819                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
 10820   003C7E  0E53               	movlw	83
 10821   003C80  ECE9  F021         	call	_I2C_2_Master_Write
 10822                           
 10823                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
 10824   003C84  0E01               	movlw	1
 10825   003C86  ECE3  F01F         	call	_I2C_2_Master_Read
 10826   003C8A  6E07               	movwf	??_color_read_Blue^0,c
 10827   003C8C  5007               	movf	??_color_read_Blue^0,w,c
 10828   003C8E  6E0A               	movwf	color_read_Blue@tmp^0,c
 10829   003C90  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
 10830                           
 10831                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10832   003C92  0E00               	movlw	0
 10833   003C94  ECE3  F01F         	call	_I2C_2_Master_Read
 10834   003C98  6E07               	movwf	??_color_read_Blue^0,c
 10835   003C9A  5007               	movf	??_color_read_Blue^0,w,c
 10836   003C9C  6E09               	movwf	(??_color_read_Blue+2)^0,c
 10837   003C9E  6A08               	clrf	(??_color_read_Blue+1)^0,c
 10838   003CA0  500A               	movf	color_read_Blue@tmp^0,w,c
 10839   003CA2  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
 10840   003CA4  6E0A               	movwf	color_read_Blue@tmp^0,c
 10841   003CA6  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
 10842   003CA8  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
 10843   003CAA  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
 10844                           
 10845                           ;color.c: 70:  I2C_2_Master_Stop();
 10846   003CAC  ECEF  F021         	call	_I2C_2_Master_Stop	;wreg free
 10847   003CB0                     
 10848                           ;color.c: 71:  return tmp;
 10849   003CB0  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
 10850   003CB4  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 10851   003CB8  0012               	return		;funcret
 10852   003CBA                     __end_of_color_read_Blue:
 10853                           	callstack 0
 10854                           
 10855 ;; *************** function _I2C_2_Master_Write *****************
 10856 ;; Defined at:
 10857 ;;		line 45 in file "i2c.c"
 10858 ;; Parameters:    Size  Location     Type
 10859 ;;  data_byte       1    wreg     unsigned char 
 10860 ;; Auto vars:     Size  Location     Type
 10861 ;;  data_byte       1    1[COMRAM] unsigned char 
 10862 ;; Return value:  Size  Location     Type
 10863 ;;                  1    wreg      void 
 10864 ;; Registers used:
 10865 ;;		wreg, status,2, status,0, cstack
 10866 ;; Tracked objects:
 10867 ;;		On entry : 0/0
 10868 ;;		On exit  : 0/0
 10869 ;;		Unchanged: 0/0
 10870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10874 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10875 ;;Total ram usage:        1 bytes
 10876 ;; Hardware stack levels used: 1
 10877 ;; Hardware stack levels required when called: 1
 10878 ;; This function calls:
 10879 ;;		_I2C_2_Master_Idle
 10880 ;; This function is called by:
 10881 ;;		_color_writetoaddr
 10882 ;;		_color_read_Red
 10883 ;;		_color_read_Green
 10884 ;;		_color_read_Blue
 10885 ;;		_color_read_Clear
 10886 ;; This function uses a non-reentrant model
 10887 ;;
 10888                           
 10889                           	psect	text65
 10890   0043D2                     __ptext65:
 10891                           	callstack 0
 10892   0043D2                     _I2C_2_Master_Write:
 10893                           	callstack 27
 10894                           
 10895                           ;incstack = 0
 10896                           ;I2C_2_Master_Write@data_byte stored from wreg
 10897   0043D2  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
 10898   0043D4                     
 10899                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 10900   0043D4  EC6A  F021         	call	_I2C_2_Master_Idle	;wreg free
 10901   0043D8                     
 10902                           ;i2c.c: 48:   SSP2BUF = data_byte;
 10903   0043D8  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 10904   0043DC  0012               	return		;funcret
 10905   0043DE                     __end_of_I2C_2_Master_Write:
 10906                           	callstack 0
 10907                           
 10908 ;; *************** function _I2C_2_Master_Stop *****************
 10909 ;; Defined at:
 10910 ;;		line 39 in file "i2c.c"
 10911 ;; Parameters:    Size  Location     Type
 10912 ;;		None
 10913 ;; Auto vars:     Size  Location     Type
 10914 ;;		None
 10915 ;; Return value:  Size  Location     Type
 10916 ;;                  1    wreg      void 
 10917 ;; Registers used:
 10918 ;;		wreg, status,2, status,0, cstack
 10919 ;; Tracked objects:
 10920 ;;		On entry : 0/0
 10921 ;;		On exit  : 0/0
 10922 ;;		Unchanged: 0/0
 10923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10928 ;;Total ram usage:        0 bytes
 10929 ;; Hardware stack levels used: 1
 10930 ;; Hardware stack levels required when called: 1
 10931 ;; This function calls:
 10932 ;;		_I2C_2_Master_Idle
 10933 ;; This function is called by:
 10934 ;;		_color_writetoaddr
 10935 ;;		_color_read_Red
 10936 ;;		_color_read_Green
 10937 ;;		_color_read_Blue
 10938 ;;		_color_read_Clear
 10939 ;; This function uses a non-reentrant model
 10940 ;;
 10941                           
 10942                           	psect	text66
 10943   0043DE                     __ptext66:
 10944                           	callstack 0
 10945   0043DE                     _I2C_2_Master_Stop:
 10946                           	callstack 27
 10947   0043DE                     
 10948                           ;i2c.c: 41:   I2C_2_Master_Idle();
 10949   0043DE  EC6A  F021         	call	_I2C_2_Master_Idle	;wreg free
 10950   0043E2                     
 10951                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 10952   0043E2  010E               	movlb	14	; () banked
 10953   0043E4  85DA               	bsf	218,2,b	;volatile
 10954   0043E6                     
 10955                           ; BSR set to: 14
 10956   0043E6  0012               	return		;funcret
 10957   0043E8                     __end_of_I2C_2_Master_Stop:
 10958                           	callstack 0
 10959                           
 10960 ;; *************** function _I2C_2_Master_Start *****************
 10961 ;; Defined at:
 10962 ;;		line 27 in file "i2c.c"
 10963 ;; Parameters:    Size  Location     Type
 10964 ;;		None
 10965 ;; Auto vars:     Size  Location     Type
 10966 ;;		None
 10967 ;; Return value:  Size  Location     Type
 10968 ;;                  1    wreg      void 
 10969 ;; Registers used:
 10970 ;;		wreg, status,2, status,0, cstack
 10971 ;; Tracked objects:
 10972 ;;		On entry : 0/0
 10973 ;;		On exit  : 0/0
 10974 ;;		Unchanged: 0/0
 10975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10980 ;;Total ram usage:        0 bytes
 10981 ;; Hardware stack levels used: 1
 10982 ;; Hardware stack levels required when called: 1
 10983 ;; This function calls:
 10984 ;;		_I2C_2_Master_Idle
 10985 ;; This function is called by:
 10986 ;;		_color_writetoaddr
 10987 ;;		_color_read_Red
 10988 ;;		_color_read_Green
 10989 ;;		_color_read_Blue
 10990 ;;		_color_read_Clear
 10991 ;; This function uses a non-reentrant model
 10992 ;;
 10993                           
 10994                           	psect	text67
 10995   0043E8                     __ptext67:
 10996                           	callstack 0
 10997   0043E8                     _I2C_2_Master_Start:
 10998                           	callstack 27
 10999   0043E8                     
 11000                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11001   0043E8  EC6A  F021         	call	_I2C_2_Master_Idle	;wreg free
 11002   0043EC                     
 11003                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11004   0043EC  010E               	movlb	14	; () banked
 11005   0043EE  81DA               	bsf	218,0,b	;volatile
 11006   0043F0                     
 11007                           ; BSR set to: 14
 11008   0043F0  0012               	return		;funcret
 11009   0043F2                     __end_of_I2C_2_Master_Start:
 11010                           	callstack 0
 11011                           
 11012 ;; *************** function _I2C_2_Master_RepStart *****************
 11013 ;; Defined at:
 11014 ;;		line 33 in file "i2c.c"
 11015 ;; Parameters:    Size  Location     Type
 11016 ;;		None
 11017 ;; Auto vars:     Size  Location     Type
 11018 ;;		None
 11019 ;; Return value:  Size  Location     Type
 11020 ;;                  1    wreg      void 
 11021 ;; Registers used:
 11022 ;;		wreg, status,2, status,0, cstack
 11023 ;; Tracked objects:
 11024 ;;		On entry : 0/0
 11025 ;;		On exit  : 0/0
 11026 ;;		Unchanged: 0/0
 11027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11032 ;;Total ram usage:        0 bytes
 11033 ;; Hardware stack levels used: 1
 11034 ;; Hardware stack levels required when called: 1
 11035 ;; This function calls:
 11036 ;;		_I2C_2_Master_Idle
 11037 ;; This function is called by:
 11038 ;;		_color_read_Red
 11039 ;;		_color_read_Green
 11040 ;;		_color_read_Blue
 11041 ;;		_color_read_Clear
 11042 ;; This function uses a non-reentrant model
 11043 ;;
 11044                           
 11045                           	psect	text68
 11046   0043F2                     __ptext68:
 11047                           	callstack 0
 11048   0043F2                     _I2C_2_Master_RepStart:
 11049                           	callstack 27
 11050   0043F2                     
 11051                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11052   0043F2  EC6A  F021         	call	_I2C_2_Master_Idle	;wreg free
 11053   0043F6                     
 11054                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11055   0043F6  010E               	movlb	14	; () banked
 11056   0043F8  83DA               	bsf	218,1,b	;volatile
 11057   0043FA                     
 11058                           ; BSR set to: 14
 11059   0043FA  0012               	return		;funcret
 11060   0043FC                     __end_of_I2C_2_Master_RepStart:
 11061                           	callstack 0
 11062                           
 11063 ;; *************** function _I2C_2_Master_Read *****************
 11064 ;; Defined at:
 11065 ;;		line 51 in file "i2c.c"
 11066 ;; Parameters:    Size  Location     Type
 11067 ;;  ack             1    wreg     unsigned char 
 11068 ;; Auto vars:     Size  Location     Type
 11069 ;;  ack             1    2[COMRAM] unsigned char 
 11070 ;;  tmp             1    3[COMRAM] unsigned char 
 11071 ;; Return value:  Size  Location     Type
 11072 ;;                  1    wreg      unsigned char 
 11073 ;; Registers used:
 11074 ;;		wreg, status,2, status,0, cstack
 11075 ;; Tracked objects:
 11076 ;;		On entry : 0/0
 11077 ;;		On exit  : 0/0
 11078 ;;		Unchanged: 0/0
 11079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11081 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11082 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11083 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11084 ;;Total ram usage:        3 bytes
 11085 ;; Hardware stack levels used: 1
 11086 ;; Hardware stack levels required when called: 1
 11087 ;; This function calls:
 11088 ;;		_I2C_2_Master_Idle
 11089 ;; This function is called by:
 11090 ;;		_color_read_Red
 11091 ;;		_color_read_Green
 11092 ;;		_color_read_Blue
 11093 ;;		_color_read_Clear
 11094 ;; This function uses a non-reentrant model
 11095 ;;
 11096                           
 11097                           	psect	text69
 11098   003FC6                     __ptext69:
 11099                           	callstack 0
 11100   003FC6                     _I2C_2_Master_Read:
 11101                           	callstack 27
 11102                           
 11103                           ; BSR set to: 14
 11104                           ;incstack = 0
 11105                           ;I2C_2_Master_Read@ack stored from wreg
 11106   003FC6  6E03               	movwf	I2C_2_Master_Read@ack^0,c
 11107   003FC8                     
 11108                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11109   003FC8  EC6A  F021         	call	_I2C_2_Master_Idle	;wreg free
 11110   003FCC                     
 11111                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11112   003FCC  010E               	movlb	14	; () banked
 11113   003FCE  87DA               	bsf	218,3,b	;volatile
 11114                           
 11115                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11116   003FD0  EC6A  F021         	call	_I2C_2_Master_Idle	;wreg free
 11117   003FD4                     
 11118                           ;i2c.c: 57:   tmp = SSP2BUF;
 11119   003FD4  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11120                           
 11121                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11122   003FD8  EC6A  F021         	call	_I2C_2_Master_Idle	;wreg free
 11123   003FDC                     
 11124                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11125   003FDC  5003               	movf	I2C_2_Master_Read@ack^0,w,c
 11126   003FDE  B4D8               	btfsc	status,2,c
 11127   003FE0  EFF4  F01F         	goto	u3141
 11128   003FE4  EFF8  F01F         	goto	u3140
 11129   003FE8                     u3141:
 11130   003FE8  6A02               	clrf	??_I2C_2_Master_Read^0,c
 11131   003FEA  2A02               	incf	??_I2C_2_Master_Read^0,f,c
 11132   003FEC  EFF9  F01F         	goto	u3158
 11133   003FF0                     u3140:
 11134   003FF0  6A02               	clrf	??_I2C_2_Master_Read^0,c
 11135   003FF2                     u3158:
 11136   003FF2  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
 11137   003FF4  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
 11138   003FF6  010E               	movlb	14	; () banked
 11139   003FF8  51DA               	movf	218,w,b	;volatile
 11140   003FFA  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
 11141   003FFC  0BDF               	andlw	-33
 11142   003FFE  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
 11143   004000  6FDA               	movwf	218,b	;volatile
 11144   004002                     
 11145                           ; BSR set to: 14
 11146                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11147   004002  89DA               	bsf	218,4,b	;volatile
 11148   004004                     
 11149                           ; BSR set to: 14
 11150                           ;i2c.c: 61:   return tmp;
 11151   004004  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
 11152   004006                     
 11153                           ; BSR set to: 14
 11154   004006  0012               	return		;funcret
 11155   004008                     __end_of_I2C_2_Master_Read:
 11156                           	callstack 0
 11157                           
 11158 ;; *************** function _I2C_2_Master_Idle *****************
 11159 ;; Defined at:
 11160 ;;		line 22 in file "i2c.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;		None
 11163 ;; Auto vars:     Size  Location     Type
 11164 ;;		None
 11165 ;; Return value:  Size  Location     Type
 11166 ;;                  1    wreg      void 
 11167 ;; Registers used:
 11168 ;;		wreg, status,2, status,0
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/0
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11176 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11178 ;;Total ram usage:        1 bytes
 11179 ;; Hardware stack levels used: 1
 11180 ;; This function calls:
 11181 ;;		Nothing
 11182 ;; This function is called by:
 11183 ;;		_I2C_2_Master_Start
 11184 ;;		_I2C_2_Master_RepStart
 11185 ;;		_I2C_2_Master_Stop
 11186 ;;		_I2C_2_Master_Write
 11187 ;;		_I2C_2_Master_Read
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191                           	psect	text70
 11192   0042D4                     __ptext70:
 11193                           	callstack 0
 11194   0042D4                     _I2C_2_Master_Idle:
 11195                           	callstack 27
 11196   0042D4                     l192:
 11197   0042D4  010E               	movlb	14	; () banked
 11198   0042D6  B5D8               	btfsc	216,2,b	;volatile
 11199   0042D8  EF70  F021         	goto	u2641
 11200   0042DC  EF72  F021         	goto	u2640
 11201   0042E0                     u2641:
 11202   0042E0  EF6A  F021         	goto	l192
 11203   0042E4                     u2640:
 11204   0042E4                     
 11205                           ; BSR set to: 14
 11206   0042E4  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11207   0042E8  0E1F               	movlw	31
 11208   0042EA  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
 11209   0042EC  A4D8               	btfss	status,2,c
 11210   0042EE  EF7B  F021         	goto	u2651
 11211   0042F2  EF7D  F021         	goto	u2650
 11212   0042F6                     u2651:
 11213   0042F6  EF6A  F021         	goto	l192
 11214   0042FA                     u2650:
 11215   0042FA                     
 11216                           ; BSR set to: 14
 11217   0042FA  0012               	return		;funcret
 11218   0042FC                     __end_of_I2C_2_Master_Idle:
 11219                           	callstack 0
 11220                           
 11221 ;; *************** function _ADC_init *****************
 11222 ;; Defined at:
 11223 ;;		line 9 in file "ADC.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;		None
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;		None
 11228 ;; Return value:  Size  Location     Type
 11229 ;;                  1    wreg      void 
 11230 ;; Registers used:
 11231 ;;		wreg, status,2
 11232 ;; Tracked objects:
 11233 ;;		On entry : 0/0
 11234 ;;		On exit  : 0/0
 11235 ;;		Unchanged: 0/0
 11236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11241 ;;Total ram usage:        0 bytes
 11242 ;; Hardware stack levels used: 1
 11243 ;; This function calls:
 11244 ;;		Nothing
 11245 ;; This function is called by:
 11246 ;;		_main
 11247 ;; This function uses a non-reentrant model
 11248 ;;
 11249                           
 11250                           	psect	text71
 11251   0043A0                     __ptext71:
 11252                           	callstack 0
 11253   0043A0                     _ADC_init:
 11254                           	callstack 30
 11255   0043A0                     
 11256                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 11257   0043A0  8C86               	bsf	134,6,c	;volatile
 11258                           
 11259                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 11260   0043A2  010E               	movlb	14	; () banked
 11261   0043A4  8DB4               	bsf	180,6,b	;volatile
 11262                           
 11263                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 11264   0043A6  010F               	movlb	15	; () banked
 11265   0043A8  9958               	bcf	88,4,b	;volatile
 11266   0043AA                     
 11267                           ; BSR set to: 15
 11268                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 11269   0043AA  0EFC               	movlw	-4
 11270   0043AC  1758               	andwf	88,f,b	;volatile
 11271                           
 11272                           ;ADC.c: 17:     ADPCH=0b101110;
 11273   0043AE  0E2E               	movlw	46
 11274   0043B0  6F5F               	movwf	95,b	;volatile
 11275   0043B2                     
 11276                           ; BSR set to: 15
 11277                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 11278   0043B2  9460               	bcf	96,2,c	;volatile
 11279   0043B4                     
 11280                           ; BSR set to: 15
 11281                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 11282   0043B4  8860               	bsf	96,4,c	;volatile
 11283   0043B6                     
 11284                           ; BSR set to: 15
 11285                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 11286   0043B6  8E60               	bsf	96,7,c	;volatile
 11287   0043B8                     
 11288                           ; BSR set to: 15
 11289   0043B8  0012               	return		;funcret
 11290   0043BA                     __end_of_ADC_init:
 11291                           	callstack 0
 11292                           
 11293                           	psect	rparam
 11294   000000                     
 11295                           	psect	config
 11296                           
 11297                           ;Config register CONFIG1L @ 0x300000
 11298                           ;	External Oscillator mode Selection bits
 11299                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11300                           ;	Power-up default value for COSC bits
 11301                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11302   300000                     	org	3145728
 11303   300000  AA                 	db	170
 11304                           
 11305                           ;Config register CONFIG1H @ 0x300001
 11306                           ;	unspecified, using default values
 11307                           ;	Clock Out Enable bit
 11308                           ;	CLKOUTEN = 0x1, unprogrammed default
 11309                           ;	Clock Switch Enable bit
 11310                           ;	CSWEN = 0x1, unprogrammed default
 11311                           ;	Fail-Safe Clock Monitor Enable bit
 11312                           ;	FCMEN = 0x1, unprogrammed default
 11313   300001                     	org	3145729
 11314   300001  FF                 	db	255
 11315                           
 11316                           ;Config register CONFIG3L @ 0x300004
 11317                           ;	WDT Period Select bits
 11318                           ;	WDTCPS = 0x1F, unprogrammed default
 11319                           ;	WDT operating mode
 11320                           ;	WDTE = OFF, WDT Disabled
 11321   300004                     	org	3145732
 11322   300004  9F                 	db	159
 11323                           
 11324                           ;Config register CONFIG3H @ 0x300005
 11325                           ;	unspecified, using default values
 11326                           ;	WDT Window Select bits
 11327                           ;	WDTCWS = 0x7, unprogrammed default
 11328                           ;	WDT input clock selector
 11329                           ;	WDTCCS = 0x7, unprogrammed default
 11330   300005                     	org	3145733
 11331   300005  FF                 	db	255
 11332                           tosu	equ	0xFFF
 11333                           tosh	equ	0xFFE
 11334                           tosl	equ	0xFFD
 11335                           stkptr	equ	0xFFC
 11336                           pclatu	equ	0xFFB
 11337                           pclath	equ	0xFFA
 11338                           pcl	equ	0xFF9
 11339                           tblptru	equ	0xFF8
 11340                           tblptrh	equ	0xFF7
 11341                           tblptrl	equ	0xFF6
 11342                           tablat	equ	0xFF5
 11343                           prodh	equ	0xFF4
 11344                           prodl	equ	0xFF3
 11345                           indf0	equ	0xFEF
 11346                           postinc0	equ	0xFEE
 11347                           postdec0	equ	0xFED
 11348                           preinc0	equ	0xFEC
 11349                           plusw0	equ	0xFEB
 11350                           fsr0h	equ	0xFEA
 11351                           fsr0l	equ	0xFE9
 11352                           wreg	equ	0xFE8
 11353                           indf1	equ	0xFE7
 11354                           postinc1	equ	0xFE6
 11355                           postdec1	equ	0xFE5
 11356                           preinc1	equ	0xFE4
 11357                           plusw1	equ	0xFE3
 11358                           fsr1h	equ	0xFE2
 11359                           fsr1l	equ	0xFE1
 11360                           bsr	equ	0xFE0
 11361                           indf2	equ	0xFDF
 11362                           postinc2	equ	0xFDE
 11363                           postdec2	equ	0xFDD
 11364                           preinc2	equ	0xFDC
 11365                           plusw2	equ	0xFDB
 11366                           fsr2h	equ	0xFDA
 11367                           fsr2l	equ	0xFD9
 11368                           status	equ	0xFD8

Data Sizes:
    Strings     184
    Constant    0
    Data        1
    BSS         334
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     90      95
    BANK0           160    120     160
    BANK1           256      0     140
    BANK2           256      0     150
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    returnHome@path	PTR PTR struct PathStep size(2) Largest target is 150
		 -> path(BANK2[150]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S2884$buffer	PTR unsigned char  size(2) Largest target is 0

    S2884$source	PTR const unsigned char  size(2) Largest target is 0

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), convert_rgb2hue@c_char(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[11]), STR_12(CODE[21]), STR_13(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), convert_rgb2hue@c_char(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[11]), STR_12(CODE[21]), STR_13(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[11]), STR_12(CODE[21]), STR_13(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[11]), STR_12(CODE[21]), STR_13(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_calibration_routine
    _returnHome->_reverseTurn
    _reverseTurn->_left135
    _reverseTurn->_right135
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _reading_hue->_convert_rgb2hue
    _send2USART->_sprintf
    _convert_rgb2hue->_sprintf
    ___flsub->___fladd
    ___fldiv->___flsub
    _decision->_moveBlue
    _decision->_moveGreen
    _decision->_moveLightBlue
    _decision->_moveOrange
    _decision->_movePink
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _logAction->___wmul
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                52    52      0  261563
                                            100 BANK0     20    20      0
                           _ADC_init
                            ___fldiv
                             ___flge
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                          _logAction
                        _reading_hue
                         _returnHome
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          13     7      6   46267
                                             30 COMRAM    13     7      6
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          3     0      3   36114
                                             27 COMRAM     3     0      3
                            _left135
                           _right135
                            _turn180
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                      6     2      4    9347
                                             23 COMRAM     6     2      4
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    3867
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     122
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   37515
                                             71 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
                         _send2USART
 ---------------------------------------------------------------------------------
 (2) _send2USART                                          52    50      2   10318
                                             67 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   26466
                                             67 COMRAM     4     2      2
                                              0 BANK0    100   100      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     866
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     305
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3497
                                             16 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2718
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1744
                                              0 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1398
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2463
                                             24 COMRAM    25    17      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2      23
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _decision                                            24    20      4  149836
                                             33 COMRAM     4     0      4
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   20908
                                             27 COMRAM     6     2      4
                     _backOneAndHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   21364
                                             27 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2    9144
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   21060
                                             27 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2    8992
                                             23 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           6     2      4   21364
                                             27 COMRAM     6     2      4
                           _backHalf
                          _logAction
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2    9144
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            5     3      2    3867
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        6     2      4   21516
                                             27 COMRAM     6     2      4
                           _backHalf
                            _left135
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2    9296
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   21516
                                             27 COMRAM     6     2      4
                           _backHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2    9296
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             6     2      4   21516
                                             27 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2    9296
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             5     3      2    4019
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _logAction                                            5     1      4    2434
                                              6 COMRAM     5     1      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2    9448
                                             23 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    4885
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    3715
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    3189
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   11111
                                             67 COMRAM    23    22      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    15      6    9442
                                             48 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             4     1      3    7690
                                             44 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           12     9      3    7202
                                             33 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (6) _read_prec_or_width                                   5     3      2    1439
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1107
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                11     8      3    4210
                                             22 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                  8     3      5    2391
                                             14 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (8) _fputs                                                6     3      3    1182
                                              8 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3     682
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _sendStringSerial4                                    1     0      1     675
                                              1 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (4) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___fldiv
     ___flsub (ARG)
       ___fladd
   ___flge
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _logAction
         ___wmul
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
       _logAction
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
       _logAction
     _moveOrange
       _backHalf
       _logAction
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
       _logAction
     _moveRed
       _backHalf
       _logAction
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _logAction
       _right90
   _fullSpeedAhead
     _setMotorPWM
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _logAction
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
       _sendStringSerial4
       _sprintf
     _send2USART
       _sendStringSerial4
       _sprintf
   _returnHome
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _left135
       _right135
       _turn180
       _turnLeft
       _turnRight
   _stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      8C       7       54.7%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     78      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5A      5F       1      100.0%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     221      66        0.0%
DATA                 0      0     221       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 14:55:44 2024

               _color_read_Red 3B7A                   ___fldiv@aexp 0031                   ___fldiv@bexp 0030  
           fullSpeedBack@power 0016                   ___fldiv@sign 0029                _color_read_Blue 3C6A  
                           l81 3BC8                             l90 3C68                             l75 40B2  
                           l84 3C18                             l93 31F6                             l78 4362  
                           l87 3CB8                             l96 2580                             l98 258E  
                           l99 25DC                   ___awdiv@sign 0006            ___wmul@multiplicand 0003  
              moveLightBlue@mL 001C                moveLightBlue@mR 001D             convert_rgb2hue@max 00B0  
           convert_rgb2hue@hue 00B4             convert_rgb2hue@min 00A8               _color_read_Clear 3C1A  
             _color_read_Green 3BCA                            l101 25EA                            l102 263C  
                          l111 272A                            l104 264A                            l201 43FA  
                          l105 269C                            l121 11E0                            l210 4006  
                          l107 26AA                            l131 12D2                            l123 123A  
                          l204 43E6                            l108 2704                            l141 15EA  
                          l133 12E2                            l125 124A                            l207 43DC  
                          l135 133C                            l119 11D0                            l145 1662  
                          l137 134C                            l410 39AA                            l162 28F2  
                          l146 167E                            l156 28F2                            l420 3A24  
                          l325 43B8                            l405 38AE                            l502 35AA  
                          l431 4214                            l415 392C                            l192 42D4  
                          l440 41E2                            l425 3A9A                            l434 4246  
                          l195 42FA                            l443 42A8                            l452 3E68  
                          l428 414C                            l189 42D2                            l437 41B0  
                          l461 3D90                            l198 43F0                            l446 417E  
                          l390 3820                            l471 3B78                            l455 3EB0  
                          l464 3DD8                            l616 4380                            l641 4320  
                          l449 3D48                            l553 439E                            l562 43BC  
                          l458 3D00                            l482 3F3C                            l571 4278  
                          l467 3E20                            l483 3F3C                            l900 3654  
                          l565 43D0                            l397 2EF6                            l638 4342  
                          l486 4068                            l911 3100                            l495 32DC  
                          l489 407E                            l906 30BA                            l872 33A0  
                          l938 2FFC                            l885 3450                            _abs 40E8  
                          _pad 3700                            _hue 0164            convert_rgb2hue@cMax 0044  
                 ___awmod@sign 0006            convert_rgb2hue@diff 00AC            logAction@pathLength 0009  
                          wreg 0FE8                   ___flmul@aexp 0012                   ___flmul@bexp 0013  
                 ___flmul@sign 000D                   ___flmul@temp 0018                   ___flmul@prod 0014  
                 ___fltol@exp1 000A                           l1211 3F82                           ?_abs 0007  
                         l1132 3B06                           l1310 2A3E                           l1223 2302  
                         l1303 29E2                           l1225 2162                           l1234 21A8  
                         l1170 185C                           l1139 3B0E                           l1171 1822  
                         l1236 2220                           l1228 2126                           l1237 220E  
                         l1342 3772                           l1262 1DFA                           l1319 40E6  
                         l1255 1C04                           l1408 36FE                           l1416 4046  
                         l1344 3790                           l1360 2DA2                           l1272 1F2A  
                         l1264 1E72                           l4001 2130                           l1265 1E60  
                         l1169 186E                           l1186 1988                           l1178 1B3E  
                         l1419 43FC                           l3211 3680                           l1339 3734  
                         l1347 2C8C                           l4011 2188                           l4003 214E  
                         l1259 1F68                           l1195 1A58                           l1364 34F6  
                         l1196 1A46                           l3301 3424                           l3213 369C  
                         l3205 3656                           l4021 21C6                           l4013 218E  
                         l4005 2150                           l3303 342A                           l3215 36CE  
                         l3207 3666                           l1383 2C2C                           l4031 2230  
                         l4023 21CA                           l4015 2198                           l4007 2160  
                         l4111 1C70                           l4103 1C38                           l1368 34FE  
                         l1296 294A                           l3241 32FC                           l3233 32DE  
                         l3305 3430                           l1393 4102                           l3209 3676  
                         l5001 2C94                           l4041 2292                           l4033 223C  
                         l4025 21D8                           l4017 21A6                           l4009 2172  
                         l4201 35DA                           l4121 1CBA                           l4113 1C88  
                         l4105 1C44                           l3251 3330                           l3243 330A  
                         l3235 32E2                           l3307 3440                           l3331 40F6  
                         l5011 2CE0                           l5003 2C9E                           l3227 42FC  
                         l3411 3488                           l4051 22F0                           l4043 22A8  
                         l4035 224A                           l4027 2206                           l4019 21B8  
                         l4211 3652                           l4203 35EA                           l4131 1D10  
                         l4123 1CCA                           l4115 1C94                           l4107 1C4E  
                         l1299 2AA6                           l1396 411A                           l3261 336A  
                         l3253 3338                           l3245 3312                           l3237 32F0  
                         l3309 3448                           l5021 2D52                           l5005 2CA4  
                         l5013 2CFC                           l3229 4318                           l3413 34A4  
                         l3405 3452                           l1389 3FC4                           l5101 40BC  
                         l3341 3AC6                           l3333 3A9C                           l3421 2DBE  
                         l3501 3844                           l4053 22F6                           l4045 22C2  
                         l4037 2274                           l4205 3618                           l4221 306A  
                         l4141 1DB4                           l4133 1D2C                           l4125 1CD6  
                         l4117 1CA0                           l4109 1C64                           l4301 29CC  
                         l3271 3390                           l3263 3372                           l3255 3340  
                         l3247 3316                           l3239 32F8                           l5015 2D16  
                         l5023 2D60                           l5007 2CD6                           l3415 34C4  
                         l3407 345A                           l5103 40C4                           l3351 3AFA  
                         l3343 3AD4                           l3335 3AA4                           l3431 2E7A  
                         l3423 2E0C                           l3503 385A                           l3511 3882  
                         l4055 22F8                           l4047 22DE                           l4039 2278  
                         l4207 3628                           l4231 30F8                           l4223 307A  
                         l4215 2FFE                           l4151 1E0A                           l4143 1DC2  
                         l4135 1D38                           l4127 1CE6                           l4119 1CAE  
                         l4071 1B6C                           l4063 1B40                           l4311 2A4C  
                         l4303 29D8                           l5111 0EBA                           l3273 3398  
                         l3265 3374                           l3257 334E                           l3249 331E  
                         l3281 33B4                           l3329 40E8                           l5025 2D70  
                         l5017 2D28                           l5009 2CDA                           l3409 3480  
                         l3417 34CC                           l5041 2AE8                           l5033 2AA8  
                         l5105 40CC                           l3353 3B00                           l3345 3ADA  
                         l3337 3AB6                           l3433 2EBA                           l3425 2E1E  
                         l3513 3898                           l3505 3862                           l3521 3958  
                         l4049 22E2                           l4209 364C                           l4233 30FE  
                         l4225 3088                           l4217 302C                           l4153 1E18  
                         l4145 1DE0                           l4137 1D54                           l4129 1D00  
                         l4081 1BA8                           l4073 1B7C                           l4065 1B4C  
                         l3601 16CE                           l4321 2A94                           l4313 2A4E  
                         l4305 2A14                           l5121 0F94                           l5113 0ECC  
                         l5201 3138                           l3267 337A                           l3259 3354  
                         l3291 33E8                           l3283 33BC                           l5027 2D76  
                         l5019 2D38                           l5051 2B06                           l5043 2AF0  
                         l5035 2ACE                           l5107 40DC                           l4331 42BA  
                         l3347 3AF0                           l3339 3ABE                           l3427 2E22  
                         l3419 2DA4                           l3507 386A                           l3531 3978  
                         l3515 392E                           l4227 309A                           l4219 303C  
                         l4163 1E82                           l4171 1ECA                           l4155 1E1C  
                         l4147 1DEA                           l4139 1D7E                           l4091 1BDE  
                         l4083 1BAE                           l4075 1B8C                           l4067 1B5A  
                         l3611 1700                           l3603 16D6                           l4251 2F62  
                         l4243 2F22                           l4323 2A96                           l4315 2A52  
                         l4307 2A20                           l5131 1098                           l5123 0FC8  
                         l5115 0EFC                           l5211 3184                           l5203 3166  
                         l4341 3B7A                           l3269 3380                           l3293 33F0  
                         l3285 33C0                           l3277 33A2                           l5029 2D86  
                         l5061 2B7A                           l5045 2AF2                           l5053 2B3C  
                         l5037 2AD6                           l4333 42BC                           l3349 3AF8  
                         l3429 2E60                           l3509 3872                           l3533 3980  
                         l3517 3948                           l3541 38CA                           l4229 30A8  
                         l4181 1F3E                           l4173 1EE4                           l4165 1E8E  
                         l4157 1E2A                           l4149 1DF8                           l4093 1BEE  
                         l4085 1BBC                           l4077 1B92                           l4069 1B5C  
                         l3701 18D8                           l3621 1736                           l3613 1706  
                         l3605 16E6                           l4261 2F92                           l4253 2F70  
                         l4245 2F4C                           l4237 2EF8                           l4317 2A76  
                         l4309 2A2E                           l5141 1158                           l5133 10B4  
                         l5125 0FFC                           l5117 0F2C                           l5221 31CE  
                         l5213 319A                           l5205 3168                           l4501 3F0A  
                         l5301 2304                           l4343 3BC0                           l3295 33F8  
                         l3287 33CE                           l3279 33A6                           l5071 2BE6  
                         l5063 2B84                           l5055 2B4C                           l5047 2AFE  
                         l5039 2AE4                           l5231 2560                           l4335 42BE  
                         l4327 42AA                           l3535 3990                           l3527 3960  
                         l3519 3950                           l3551 38E2                           l3543 38D2  
                         l4183 1F4C                           l4175 1EF8                           l4167 1E9C  
                         l4159 1E58                           l4095 1BF4                           l4087 1BBE  
                         l4079 1BA2                           l3703 18DC                           l3711 18FC  
                         l3631 1772                           l3623 1746                           l3615 1714  
                         l3607 16EC                           l4271 2FBC                           l4263 2F9C  
                         l4247 2F4E                           l4239 2F0E                           l4319 2A86  
                         l5151 125A                           l5143 118A                           l5135 10BC  
                         l5127 1030                           l5119 0F60                           l5223 31E2  
                         l5215 319C                           l5207 316A                           l4503 3F1A  
                         l5311 231C                           l5303 2308                           l3801 43EC  
                         l4353 3C6A                           l4361 3C60                           l3297 3406  
                         l3289 33D6                           l5065 2BA4                           l5057 2B60  
                         l5241 25BC                           l5233 2578                           l4337 42C0  
                         l4329 42B4                           l3537 3994                           l3529 3970  
                         l3561 3916                           l3553 38F2                           l3545 38DA  
                         l4185 1F4E                           l4177 1F12                           l4169 1EC6  
                         l4097 1C14                           l4089 1BCE                           l3713 1922  
                         l3721 1978                           l3705 18EA                           l3641 1790  
                         l3633 1780                           l3625 1748                           l3617 1716  
                         l3609 16FE                           l4193 3F3E                           l4273 2FCC  
                         l4249 2F5E                           l4281 28F6                           l5161 135C  
                         l5153 128C                           l5145 11BC                           l5137 10F0  
                         l5129 1064                           l5225 31EE                           l5217 319E  
                         l5209 316C                           l4521 3254                           l4513 31F8  
                         l4505 3F2C                           l5401 24D4                           l5321 233A  
                         l5313 2322                           l5305 230C                           l3491 42D4  
                         l3811 43F2                           l3803 43D4                           l4355 3CB0  
                         l4347 3BCA                           l3299 341C                           l5075 2BFA  
                         l5067 2BC4                           l5059 2B70                           l5091 3F8C  
                         l5251 261C                           l5243 25D4                           l5235 2590  
                         l4339 4346                           l3571 3A46                           l3563 3A26  
                         l4451 3E22                           l3555 38FA                           l3539 38B0  
                         l4443 3D02                           l4179 1F2E                           l4187 1F54  
                         l4099 1C24                           l3731 19CC                           l3723 199E  
                         l3715 1956                           l3707 18EC                           l3651 17A4  
                         l3643 1794                           l3635 1784                           l3619 1726  
                         l3627 1750                           l4195 3F4E                           l4275 2FDC  
                         l4259 2F88                           l4283 2906                           l5171 1498  
                         l5163 13C2                           l5155 12BE                           l5147 11F4  
                         l5139 1124                           l5219 31B8                           l4531 32B8  
                         l4523 3270                           l4515 3214                           l5403 24E0  
                         l5331 2366                           l5323 2342                           l5315 2326  
                         l5307 2310                           l3493 42E4                           l3821 3FDC  
                         l3813 43F6                           l3805 43D8                           l4349 3C10  
                         l5069 2BDC                           l5093 3F9C                           l5261 267C  
                         l5253 2634                           l5245 25EC                           l5237 25A8  
                         l5229 255A                           l4541 408E                           l3581 3A7E  
                         l3573 3A5A                           l3565 3A3E                           l4461 3E76  
                         l4453 3E2E                           l3901 41B2                           l3557 3902  
                         l4445 3D0E                           l4701 3792                           l4189 1F58  
                         l3741 19F6                           l3733 19DA                           l3725 19AE  
                         l3717 1958                           l3709 18F6                           l3661 17B8  
                         l3653 17A8                           l3645 1798                           l3637 1788  
                         l3629 1760                           l4277 2FEC                           l4269 2FB0  
                         l4293 2984                           l4285 2914                           l5181 162E  
                         l5173 1528                           l5165 13D8                           l5157 12F6  
                         l5149 1226                           l4533 32C4                           l4525 3278  
                         l4517 3230                           l5405 2512                           l5341 2370  
                         l5333 2368                           l5325 2346                           l5317 232A  
                         l5309 2310                           ?_pad 000F                           l3823 4002  
                         l3815 3FC8                           l3807 43DE                           l4359 3C1A  
                         l3583 43BC                           l5079 2C06                           l5095 3FBC  
                         l5271 26E0                           l5263 2694                           l5255 264C  
                         l5247 2604                           l5239 25BA                           l4543 409E  
                         l3575 3A62                           l3495 3822                           l3911 429C  
                         l4463 3E8E                           l4455 3E46                           l3903 41BE  
                         l4471 3DFE                           l3559 3912                           l4447 3D26  
                         l4711 37FA                           l4703 37A2                           l4199 35AC  
                         l3751 1A28                           l3743 1A06                           l3735 19DC  
                         l3719 1968                           l3671 180A                           l3663 17BC  
                         l3655 17AC                           l3647 179C                           l3639 178C  
                         l3591 169A                           l4295 298C                           l4287 295A  
                         l5175 155A                           l5167 140A                           l5159 1328  
                         l5191 3108                           l4535 32D0                           l4527 3294  
                         l4519 3238                           l5407 252E                           l5351 237C  
                         l5343 2372                           l5335 236A                           l5327 234A  
                         l5319 2332                           l3825 4004                           l3817 3FCC  
                         l3809 43E2                           l3585 43CC                           l3841 4248  
                         l5089 3F84                           l5273 26E2                           l5265 26B0  
                         l5257 2664                           l5249 261A                           l4545 40A8  
                         l4537 4080                           l3577 3A6A                           l3497 3826  
                         l4465 3E9A                           l4457 3E52                           l3905 41D6  
                         l4473 3E0A                           l3913 414E                           l4449 3D32  
                         l4481 3CEA                           l4641 2742                           l4721 3814  
                         l4713 37FC                           l4705 37C8                           l3761 1A82  
                         l3753 1A3E                           l3737 19EA                           l3729 19C2  
                         l3745 1A08                           l3681 184E                           l3673 181A  
                         l3657 17B0                           l3649 17A0                           l3665 17C0  
                         l3593 169C                           l4297 2998                           l4289 2970  
                         l5169 1466                           l5177 15EA                           l5185 4364  
                         l5193 3120                           l3921 4054                           l4529 32B0  
                         l5281 3500                           l5409 253E                           l5361 23A6  
                         l5353 2386                           l5345 2374                           l5337 236C  
                         l5329 234E                           l3819 3FD4                           l3843 424C  
                         l5099 40B4                           l5275 26E4                           l5267 26C8  
                         l5259 267A                           l4539 4084                           l3579 3A7A  
                         l3499 383C                           l3907 427A                           l4459 3E6A  
                         l4467 3DDA                           l4483 3D92                           l3915 415A  
                         l4491 3D4A                           l4475 3CBA                           l4651 27B4  
                         l4643 275A                           l4723 381E                           l4715 3806  
                         l4707 37CC                           l3931 1F86                           l3771 1AFE  
                         l3763 1ABC                           l3739 19F2                           l3747 1A16  
                         l3683 1850                           l3675 1830                           l3667 17C4  
                         l3659 17B4                           l3595 16AC                           l3587 1680  
                         l4299 29CA                           l5179 161E                           l5187 4378  
                         l5195 3132                           l3923 4064                           l3851 39AC  
                         l5291 3566                           l5283 3508                           l5371 23B8  
                         l5363 23A8                           l5355 2388                           l5347 2376  
                         l5339 236E                           l3845 4258                           l5453 2B2E  
                         l5277 26FC                           l5269 26DE                           l3909 4286  
                         l4469 3DE6                           l4485 3D9E                           l3917 4172  
                         l4493 3D56                           l4477 3CC6                           l4661 2826  
                         l4653 27CA                           l4645 2770                           l4725 4322  
                         l4717 3808                           l4709 37F0                           l3933 1F96  
                         l3941 1FC0                           l3925 1F6A                           l3781 1B1E  
                         l3773 1B02                           l3757 1A68                           l3765 1ABE  
                         l3749 1A1A                           l3693 18A0                           l3685 185A  
                         l3677 183C                           l3669 17EE                           l3597 16BC  
                         l3589 168C                           l5197 3134                           l5189 3102  
                         l3861 39E4                           l3853 39C8                           l5293 3578  
                         l5381 23D6                           l5373 23BA                           l5365 23AA  
                         l5357 238A                           l5349 2378                           l3847 425A  
                         l5279 2712                           l3871 3B12                           l4487 3DB6  
                         l4495 3D6E                           l4479 3CDE                           l4671 2896  
                         l4663 283C                           l4655 27E2                           l4647 2786  
                         l4639 272C                           l4727 433A                           l4719 3812  
                         l3951 1FEC                           l3943 1FD0                           l3935 1FA6  
                         l3927 1F76                           l3783 1B2C                           l3775 1B10  
                         l3767 1ACE                           l3759 1A74                           l3695 18B0  
                         l3687 187C                           l3679 1840                           l3599 16CC  
                         l5199 3136                           l3919 4048                           l3863 39EC  
                         l5295 3590                           l5287 351A                           l5391 248C  
                         l5383 23F8                           l5375 23BC                           l5367 23AE  
                         l5359 23A4                           l4681 43AA                           l3849 4262  
                         l3873 3B28                           l4489 3DC2                           l4497 3D7A  
                         l3881 4140                           l4673 28AE                           l4665 2852  
                         l4657 27F8                           l4649 279E                           l3953 1FFC  
                         l3961 2026                           l3945 1FD6                           l3937 1FB6  
                         l3929 1F84                           l3785 1B2E                           l3777 1B16  
                         l3769 1ADE                           l3697 18BE                           l3689 188C  
                         l3865 39F4                           l5297 35A0                           l5289 3540  
                         l5393 2498                           l5385 241A                           l5377 23C8  
                         l5369 23B6                           l4683 43B2                           l3875 3B74  
                         l3891 4222                           l3883 41E4                           l4675 28C4  
                         l4667 286A                           l4659 280E                           l4691 438C  
                         l3971 2068                           l3963 2036                           l3955 200C  
                         l3947 1FDC                           l3939 1FB8                           l3779 1B18  
                         l3699 18CC                           l3867 3A04                           l3859 39D0  
                         l4499 3EF8                           l5395 249A                           l5387 244E  
                         l5379 23CA                           l4685 43B4                           l3893 423A  
                         l3885 41F0                           l3877 411C                           l4677 28DA  
                         l4669 2880                           l4693 438E                           l3965 204C  
                         l3957 201C                           l3949 1FEA                           l3869 3A08  
                         l5397 24B0                           l5389 2480                           l4687 43B6  
                         l4679 43A0                           l3799 43E8                           l3887 4208  
                         l3895 4180                           l3879 4128                           l4695 4398  
                         l3991 20EA                           l3983 20A0                           l3967 205C  
                         l3975 207C                           l3959 201E                           l5399 24BC  
                         l4961 4014                           l3889 4216                           l3897 418C  
                         l4697 439A                           l4689 4382                           l3993 20F2  
                         l3985 20BA                           l3977 208C                           l3969 2064  
                         l4963 4022                           l4971 371E                           l3899 41A4  
                         l4699 439C                           l3995 2102                           l3987 20CA  
                         l3979 208C                           l4965 4026                           l4981 3780  
                         l4973 372C                           l3997 2116                           l3989 20DA  
                         l4959 4008                           l4975 3740                           l4967 3700  
                         l4991 2C5E                           l4983 2C2E                           l3999 2124  
                         l4977 3750                           l4969 370E                           l4993 2C64  
                         l4985 2C32                           l4979 3754                           l4995 2C74  
                         l4987 2C46                           l4997 2C80                           l4989 2C4E  
                         l4999 2C88                           STR_1 0E73                           STR_2 0EB7  
                         STR_3 0E22                           STR_4 0EB7                           STR_5 0E3F  
                         STR_6 0EB7                           STR_7 0E01                           STR_8 0EB7  
                         STR_9 0E5A                           u2200 3666                           u3000 1A06  
                         u2201 3662                           u3001 1A02                           u2210 3676  
                         u3010 1A16                           u2211 3672                           u3011 1A12  
                         u2300 3390                           u2220 369C                           u3100 1AFE  
                         u3020 1A28                           u2301 338C                           u2221 3698  
                         u3101 1AFA                           u3021 1A24                           u2310 33B4  
                         u2230 36CE                           u3110 1B10                           u3030 1A3E  
                         u2311 33B0                           u2231 36CA                           u3111 1B0C  
                         u3031 1A3A                           u2320 33CE                           u3200 1F84  
                         u3120 1B2C                           u3040 1A54                           u4000 3214  
                 _BAUD4CONbits 0EE9                           u2321 33CA                           u3201 1F80  
                         u3121 1B28                           u3041 1A50                           u4001 3210  
                         u2250 32F0                           u2330 33E8                           u2410 40F6  
                         u3210 1F96                           u3050 1A68                           u4010 3230  
                         u2251 32EC                           u2331 33E4                           u2411 40F2  
                         u3211 1F92                           u3051 1A64                           u4011 322C  
                         u3140 3FF0                           u2260 330A                           u2340 3406  
                         u2420 3AB6                           u3300 214E                           u3220 1FA6  
                         u3060 1A82                           u4020 3254                           u3141 3FE8  
                         u2261 3306                           u2341 3402                           u2421 3AB2  
                         u3301 214A                           u3221 1FA2                           u3061 1A7E  
                         u4021 3250                           u2270 3330                           u2350 341C  
                         u2430 3AD4                           u4110 2742                           u3310 2172  
                         u3230 1FEA                           u3070 1ABC                           u4030 3270  
                         u2271 332C                           u2351 3418                           u2431 3AD0  
                         u4111 273E                           u3311 216E                           u3231 1FE6  
                         u3071 1AB8                           u4031 326C                           u3160 4278  
                         u2280 334E                           u2360 3440                           u2440 3AF0  
                         u4200 2880                           u4120 2770                           u3400 2292  
                         u3320 2188                           u3240 1FFC                           u3080 1ACE  
                         u4040 3294                           u3161 4274                           u2281 334A  
                         u2361 343C                           u2441 3AEC                           u4201 287C  
                         u4121 276C                           u3401 228E                           u3321 2184  
                         u3241 1FF8                           u3081 1ACA                           u4041 3290  
                         u2290 336A                           u4210 2896                           u4130 2786  
                         u3410 22C2                           u3330 21A6                           u3250 200C  
                         u3090 1ADE                           u3170 3A24                           u4050 32B0  
                         _T2PR 0FBC                           u2291 3366                           u4211 2892  
                         u4131 2782                           u3411 22BE                           u3331 21A2  
                         u3251 2008                           u3091 1ADA                           u3171 3A20  
                         u4051 32AC                           u3180 3B28                           u2700 39AA  
                         u4220 28C4                           u4140 27B4                           u3420 22F0  
                         u3340 21C6                           u3260 204C                           u3500 1C24  
                         u3181 3B24                           u2701 39A6                           u4221 28C0  
                         u4141 27B0                           u3421 22EC                           u3341 21C2  
                         u3261 2048                           u3501 1C20                           u3158 3FF2  
                         u2550 3480                           u2710 392C                           u4230 28DA  
                         u4150 27CA                           u3350 21D8                           u3270 208C  
                         u3510 1D9E                           u3430 1B5A                           u3190 407E  
                         u2551 347C                           u5007 422C                           u2711 3928  
                         u4231 28D6                           u4151 27C6                           u3351 21D4  
                         u3271 2088                           u3431 1B56                           u3191 407A  
                         u2640 42E4                           u4400 3772                           u2560 34F6  
                         u2720 3A9A                           u4160 27F8                           u3360 2206  
                         u3280 2102                           u3600 1F12                           u3520 1DF8  
                         u3440 1B6C                           u2800 1736                           u2641 42E0  
                         u4401 376E                           u2561 34F2                           u2721 3A96  
                         u5017 3986                           u4161 27F4                           u3361 2202  
                         u3281 20FE                           u3601 1F0E                           u3521 1DF4  
                         u3441 1B68                           u2801 1732                           u2650 42FA  
                         u2730 43CC                           u4410 3780                           u2570 2DBE  
                         u4170 280E                           u3370 221C                           u3290 2124  
                         u3610 1F4C                           u3530 1E18                           u3450 1B7C  
                         u2810 1772                           u2651 42F6                           u2731 43C8  
                         u4411 377C                           u5107 271C                           u2571 2DBA  
                         u5027 4290                           u4171 280A                           u3371 2218  
                         u3291 2120                           u3611 1F48                           u3531 1E14  
                         u3515 1D94                           u3451 1B78                           u2811 176E  
                         u4500 2D60                           u4420 2C42                           u2580 2E7A  
                         u2660 383C                           u4180 283C                           u3380 2230  
                         u3620 35DA                           u3540 1E2A                           u3460 1BBC  
                         u2900 188C                           u2820 1780                           u2740 169A  
                         u3700 2F0E                           u5117 425C                           u4501 2D5C  
                         u4421 2C3C                           u2581 2E76                           u5037 3878  
                         u2661 3838                           u4181 2838                           u3381 222C  
                         u3621 35D6                           u3541 1E26                           u3461 1BB8  
                         u2901 1888                           u2821 177C                           u2741 1696  
                         u3701 2F0A                           u4510 2D70                           u4430 2C44  
                         u2670 385A                           u4190 2852                           u3390 224A  
                         u3630 3618                           u3550 1E58                           u3470 1BCE  
                         u2910 18BE                           u2830 17EE                           u2750 16AC  
                         u3710 2F42                           u4511 2D6C                           u5047 3A70  
                         u2671 3856                           u4191 284E                           u3391 2246  
                         u3631 3614                           u3551 1E54                           u3471 1BCA  
                         u2911 18BA                           u2831 17EA                           u2751 16A8  
                         u4440 2C5E                           u4520 2ACE                           u2680 3898  
                         u3640 364C                           u3560 1E6E                           u3480 1BDE  
                         u2920 18CC                           u2840 1806                           u2760 16BC  
                         u3720 2F70                           u3800 29C6                           u4600 1226  
                         u4441 2C5A                           u4521 2ACA                           u5057 4094  
                         u2681 3894                           u3641 3648                           u3561 1E6A  
                         u3481 1BDA                           u2921 18C8                           u2841 1800  
                         u2761 16B8                           u3721 2F6C                           u3801 29C2  
                         u4601 1222                           u4370 4046                           u4450 2C74  
                         u4530 2B4C                           u2690 38AE                           u3650 302C  
                         u3570 1E82                           u3490 1C14                           u2930 18EA  
                         u2850 1808                           u2770 16FE                           u3730 2F84  
                         u3810 2A10                           u4610 128C                           u4371 4042  
                         u4451 2C70                           u4531 2B48                           u5067 259A  
                         u2691 38AA                           u3651 3028                           u3571 1E7E  
                         u3491 1C10                           u2931 18E6                           u2771 16FA  
                         u3731 2F80                           u3715 2F38                           u3811 2A0C  
                         u4611 1288                           u4380 370E                           u4460 2D16  
                         u4540 2B70                           u4700 25EA                           u3660 306A  
                         u3580 1E9C                           u2940 1922                           u2860 1830  
                         u2780 1714                           u3740 2FAC                           u3820 2A2E  
                         u4620 12BE                           u4381 370A                           u4461 2D12  
                         u4541 2B6C                           u5077 25F6                           u4701 25E6  
                         u3661 3066                           u3581 1E98                           u2941 191E  
                         u2861 182C                           u2781 1710                           u3741 2FA8  
                         u3821 2A2A                           u4621 12BA                           u4390 372C  
                         u4470 2D28                           u4550 2BA4                           u4710 264A  
                         u3670 3088                           u3590 1EE4                           u2950 1968  
                         u2870 184E                           u2790 1726                           u3750 2FCC  
                         u3830 2A3E                           u4630 1328                           u4391 3728  
                         u4471 2D24                           u4551 2BA0                           u5087 2656  
                         u4711 2646                           u3671 3084                           u3591 1EE0  
                         u2951 1964                           u2871 184A                           u2791 1722  
                         u3751 2FC8                           u3831 2A3A                           u4631 1324  
                         u4480 2D38                           u4560 2BC4                           u4720 26AA  
                         u3680 30A8                           u2960 199E                           u2880 186E  
                         u3760 2FDC                           u3840 2A4C                           u4640 13C2  
                         u4481 2D34                           u4561 2BC0                           u5097 26BA  
                         u4721 26A6                           u3681 30A4                           u2961 199A  
                         u2881 186A                           u3761 2FD8                           u3841 2A48  
                         u4641 13BE                           u4490 2D52                           u4570 3FBC  
                         u4730 2712                           u3690 30F8                           u2970 19AE  
                         u2890 187C                           u3850 2A86                           u3770 2906  
                         u4650 140A                           u4491 2D4E                           u4571 3FB8  
                         u4731 270E                           u3691 30F4                           u2971 19AA  
                         u2891 1878                           u3851 2A82                           u3771 2902  
                         u4651 1406                           u2980 19DA                           u3860 2A94  
                         u3780 2914                           u4660 1498                           u4580 118A  
                         u4740 3516                           u2981 19D6                           u3861 2A90  
                         u3781 2910                           u4661 1494                           u4581 1186  
                         u4741 3512                           u2990 19EA                           u3790 2970  
                         u4670 155A                           u4590 11BC                           u4750 3578  
                         u2991 19E6                           u3791 296C                           u4671 1556  
                         u4591 11B8                           u4751 3574                           u4807 24C8  
                         u4680 162E                           u4760 2480                           u4681 162A  
                         u4817 39FA                           u4761 247C                           u4690 258E  
                         u4770 2512                           u4691 258A                           u4907 3D60  
                         u4827 405A                           u4771 250E                           u3980 3F0A  
                         u4917 4164                           u4837 3112                           u3981 3F06  
                         u3990 3F2C                           u4927 3DA8                           u4847 3142  
                         u3991 3F28                           u4937 4196                           u4857 3176  
                         u4947 3908                           u4867 31AA                           u4957 3DF0  
                         u4877 3CD0                           u4797 2396                           u4967 41C8  
                         u4887 3D18                           u4977 3E38                           u4897 4132  
                         u4987 41FA                           u4997 3E80                    main@current 00C6  
                  main@maximum 00CA                           abs@a 0007                           _dbuf 016C  
                         _main 2304                           _dtoa 2C2E                           _path 0200  
         convert_rgb2hue@cCurr 0045                           _prec 00DA                           pad@i 0015  
                         pad@p 0012                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         _stop 3822            fullSpeedAhead@power 0016                           prodh 0FF4  
                         prodl 0FF3                           start 0000               __end_of_ADC_init 43BA  
              ___fldiv@new_exp 002A         __end_of_color_read_Red 3BCA                   ___param_bank 0000  
               reading_hue@hue 004C                          ??_abs 0009                          ??_pad 0014  
                ___fltol@sign1 0009                __end_of___fladd 1B40                          ?_main 0001  
                        ?_dtoa 0017                          _ADPCH 0F5F                __end_of___fldiv 2304  
              __end_of___awdiv 33A2                          STR_10 0EB7                          STR_11 0EAC  
                        STR_12 0E8B                          STR_13 0EA0                __end_of___awmod 3452  
              __end_of___flmul 1F6A                __end_of___flsub 3F84                __end_of___fltol 2FFE  
                        ?_stop 0013                ___awdiv@divisor 0003                __end_of___lwdiv 3B10  
              ___awdiv@counter 0005              ??_convert_rgb2hue 0046                   vfpfcnvrt@fmt 0023  
                        _TMR0H 0FD4                          _TMR0L 0FD3                __end_of_left135 41E4  
      __end_of_sendCharSerial4 43D2     __end_of_I2C_2_Master_Start 43F2     __end_of_I2C_2_Master_Write 43DE  
                        _flags 005B            read_prec_or_width@c 0009            read_prec_or_width@n 000A  
                        _fputc 3656                          _fputs 4008                          pad@fp 000F  
                        _width 00D8                          _putch 43FC                          dtoa@d 0018  
                        dtoa@i 0020                          dtoa@p 001C                __end_of_right90 414E  
                        dtoa@s 001F                          dtoa@w 001D                   ?_reading_hue 0048  
              __end_of_moveRed 3D4A          convert_rgb2hue@c_char 0060                          tablat 0FF5  
        moveYellow@path_length 001E                __end_of_turn180 4248                          status 0FD8  
              __end_of_sprintf 40E8          convert_rgb2hue@redmax 0078        __end_of_color_read_Blue 3CBA  
        _I2C_2_Master_RepStart 43F2                ?_color_read_Red 0005                __initialization 3EB2  
                 __end_of_main 255A                   __end_of_dtoa 2DA4                   __end_of_stop 38B0  
        __end_of_moveLightBlue 3E22                _get16bitTMR0val 4322                         ??_main 00C4  
                       ??_dtoa 001A                         ??_stop 0015                  __activetblptr 0003  
   __end_of_read_prec_or_width 3500                _reverseStraight 31F8                   ?_setMotorPWM 000E  
                       ?_fputc 0001                         ?_fputs 0009                         _ADRESH 0F64  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0001               __end_of_backHalf 42AA  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       _RE4PPS 0E76                         _RD6PPS 0E70                         _RG6PPS 0E88  
                vfpfcnvrt@done 002B       __end_of_color_click_init 40B4                         _RX4PPS 0E15  
                       _TX4REG 0EE4               __end_of___xxtofl 2AA8    convert_rgb2hue@greencurrent 007C  
             __end_of_decision 28F4                   _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0030  
                       ___flge 2FFE                         ___fleq 35AC                      ??___fladd 0009  
                       ___wmul 42FC                      ??___fldiv 0021               backOneAndHalf@mL 0018  
                    ??___awdiv 0005               backOneAndHalf@mR 0019                      ??___awmod 0005  
                    ??___flmul 0009                      ??___flsub 0019                      ??___fltol 0005  
                    ??___lwdiv 000B                         _left90 41E4           read_prec_or_width@ap 0008  
                 ?_reverseTurn 001C                         clear_0 3ECA                         clear_1 3ED6  
                       clear_2 3EE2               ___awdiv@quotient 0007                ___awmod@divisor 0003  
                       _motorL 00E6                         _motorR 00DD                         isa$std 0001  
              ___awmod@counter 0005                      ??_left135 001A             send2USART@hue_char 0060  
                       pad@buf 0010               __end_of_right135 41B2                         dtoa@fp 0017  
             __end_of_moveBlue 3EB2               __end_of_movePink 3D92                         fputc@c 0001  
                       fputs@c 000C                         fputs@i 000D                         fputs@s 0009  
                    ??_right90 001A                   __mediumconst 0000        calibration_routine@cCal 0044  
                    ??_moveRed 0020                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8                      ?_ADC_init 0001               ?_sendCharSerial4 0001  
       convert_rgb2hue@bluemax 0088                         putch@c 0001               __end_of_vfprintf 3FC6  
                    ??_turn180 001A                         stop@mL 0013                         stop@mR 0014  
            ??_initDCmotorsPWM 0003                      ??_sprintf 0037               __end_of_turnLeft 39AC  
                   ___flge@ff1 0001                     ___flge@ff2 0005                   ___xxtofl@arg 000B  
                 ___xxtofl@exp 000A                   ___xxtofl@val 0001                     ___fleq@ff1 0001  
                   ___fleq@ff2 0005                fullSpeedBack@mL 0013                fullSpeedBack@mR 0014  
                   __accesstop 0060        __end_of__initialization 3EF2       __end_of_color_read_Clear 3C6A  
     __end_of_color_read_Green 3C1A         ?_I2C_2_Master_RepStart 0001                 _backOneAndHalf 414E  
                ___rparam_used 0001                     ___fltol@f1 0001               ?_color_read_Blue 0005  
               __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 4344                  _fullSpeedBack 3A26  
                 __pidataBANK0 43FE                  __end_of_fputc 3700                  __end_of_fputs 4048  
                __end_of_putch 43FE        __end_of_reverseStraight 32DE               reading_hue@cCurr 0048  
          moveBlue@path_length 001E                     ??_ADC_init 0001                 main@clear_norm 00D2  
                   backHalf@mL 0018                     backHalf@mR 0019                        ??_fputc 0004  
                      ??_fputs 000C                        ??_putch 0001                     __pbssBANK0 00D8  
                   __pbssBANK1 0100                     __pbssBANK2 0200         __end_of_backOneAndHalf 4180  
            _color_writetoaddr 4344                   _T2CLKCONbits 0FBF                 ?_fullSpeedBack 0013  
              _convert_rgb2hue 0EBA                        ?___flge 0001                        ?___fleq 0001  
           ?_color_writetoaddr 0003                  _customDelayMs 4048                        ?___wmul 0001  
                      ?_left90 0018                      ?_backHalf 0018            ??_color_writetoaddr 0004  
                    ?___xxtofl 0001            _convert_rgb2hue$430 009C            _convert_rgb2hue$431 00A0  
          _convert_rgb2hue$432 00A4            _convert_rgb2hue$429 0098                      ?_decision 0022  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5                    moveGreen@mL 001C                    moveGreen@mR 001D  
              ?_backOneAndHalf 0018         color_writetoaddr@value 0003               ??_color_read_Red 0007  
    __end_of_color_writetoaddr 4364                      _ADREFbits 0F58                      ?_right135 0018  
           _I2C_2_Master_Start 43E8                     _initUSART4 4382             _I2C_2_Master_Write 43D2  
                    ?_moveBlue 001C                        __Hparam 0000                      ?_movePink 001C  
                      __Lparam 0000              color_read_Red@tmp 000A      customDelayMs@milliseconds 0001  
               ?_customDelayMs 0001        sendStringSerial4@string 0002               ?_get16bitTMR0val 0001  
                      ___fladd 1680                        ___fldiv 1F6A                        ___awdiv 32DE  
                      ___awmod 33A2                        ___flmul 1B40                        ___flsub 3F3E  
                      ___fltol 2EF8            ?_I2C_2_Master_Start 0001                        ___lwdiv 3A9C  
          ?_I2C_2_Master_Write 0001                      ?_vfprintf 002D                   __psmallconst 0E00  
                      __pcinit 3EB2                     ??_backHalf 001A              __end_of_logAction 3B7A  
                      __ramtop 0E00               ?_reverseStraight 0018                     _send2USART 4364  
                    ?_turnLeft 0013                        _left135 41B2                        __ptext0 2304  
                      __ptext1 3500                        __ptext2 3EF8                        __ptext3 31F8  
                      __ptext4 39AC                        __ptext5 4048                        __ptext6 3102  
                      __ptext7 4364                        __ptext8 0EBA                        __ptext9 28F4  
                    _T2CONbits 0FBD          read_prec_or_width@fmt 0007                     ??___xxtofl 0005  
             ___awmod@dividend 0001                     ??_decision 0026         reverseStraight@delayMs 001C  
                      _right90 411C                      _T2HLTbits 0FBE                        _moveRed 3D02  
                _RxBufWriteCnt 005F                        _turn180 4216                        _sprintf 40B4  
                      main@hue 00CE           ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002  
         end_of_initialization 3EF2              __end_of_moveGreen 3E6A                        fputc@fp 0003  
      __end_of_convert_rgb2hue 1680                        fputs@fp 000B              ?_color_click_init 0001  
           _read_prec_or_width 3452                     _moveOrange 3D92                     ??_right135 001A  
                   _moveYellow 3CBA                ??_fullSpeedBack 0015                     ??_moveBlue 0020  
           ??_color_click_init 0005        convert_rgb2hue@clearmax 0090                     ??_movePink 0020  
             _colorCalibration 00F7              __end_of_vfpfcnvrt 2C2E                        postdec1 0FE5  
                      postdec2 0FDD            ?_read_prec_or_width 0007                        postinc0 0FEE  
                      postinc1 0FE6                        postinc2 0FDE               vfpfcnvrt@convarg 0027  
                   ??_vfprintf 0030        convert_rgb2hue@greenmax 0080                   _colorCurrent 00EF  
                   _returnHome 3500                _initDCmotorsPWM 3792                     ??_turnLeft 0015  
                    _PORTFbits 0F8E             setMotorPWM@negDuty 0012              __end_of_turnRight 392E  
                  ___fladd@grs 0010       reverseTurn@turnDirection 001E                  ___xxtofl@sign 0009  
                  returnHome@i 002A                      _TRISAbits 0F81             setMotorPWM@posDuty 0011  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
                logAction@time 0007               convert_rgb2hue@b 00C0               convert_rgb2hue@c 0094  
         ??_read_prec_or_width 0009               convert_rgb2hue@g 00BC                    ___fldiv@grs 002C  
             convert_rgb2hue@r 00B8                    ___fldiv@rem 0025               fullSpeedAhead@mL 0013  
             fullSpeedAhead@mR 0014       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
                  ___flmul@grs 000E                    _CCP1CONbits 0FAB            _calibration_routine 255A  
            ?_color_read_Clear 0005                   _EUSART4RXbuf 0150                   _EUSART4TXbuf 0100  
                  _CCP2CONbits 0FA7              ?_color_read_Green 0005     convert_rgb2hue@bluecurrent 0084  
          movePink@path_length 001E                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001                ??_customDelayMs 0003  
           ??_color_read_Clear 0007             ??_color_read_Green 0007      convert_rgb2hue@redcurrent 0074  
               __end_of___flge 3102                 __end_of___fleq 3656                 _fullSpeedAhead 39AC  
                  vfpfcnvrt@ap 0024                    vfpfcnvrt@cp 002C                    vfpfcnvrt@fp 0022  
               __end_of___wmul 4322                 __end_of_left90 4216                    ?_send2USART 0044  
         ?_calibration_routine 0044            reverseStraight@time 001A            color_read_Clear@tmp 000A  
          start_initialization 3EB2           moveGreen@path_length 001E   calibration_routine@cal_state 0047  
                  __end_of_abs 411C                    __end_of_pad 3792                  _TxBufWriteCnt 005D  
             ?_convert_rgb2hue 0044                    ?_moveOrange 001C                    ?_moveYellow 001C  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 3822                    vfprintf@fmt 002E  
       __end_of_fullSpeedAhead 3A26                       ??___flge 0009                       ??___fleq 0009  
                     ??___wmul 0005                       ??_left90 001A                    __pdataBANK0 00FF  
                  ?_returnHome 001F          ??_calibration_routine 0045                  _moveLightBlue 3DDA  
                    ___fladd@a 0005                      ___fladd@b 0001                      ___fldiv@a 001D  
                    ___fldiv@b 0019                      ___flmul@a 0005                      ___flmul@b 0001  
                  __pbssCOMRAM 005B                      ___flsub@a 0015                      ___flsub@b 0011  
                __pcstackBANK0 0060               ??_backOneAndHalf 001A              reverseStraight@mL 0018  
            reverseStraight@mR 0019                  ??_reading_hue 004A            decision@path_length 0024  
                   right135@mL 0018                     right135@mR 0019               ___lwdiv@dividend 0007  
                    _dtoa$2963 001A                ?_fullSpeedAhead 0013                       ?___fladd 0001  
                     ?___fldiv 0019                       ?___awdiv 0001                       ?___awmod 0001  
                     ?___flmul 0001                       ?___flsub 0011                       ?___fltol 0001  
                     ?___lwdiv 0007                     moveBlue@mL 001C                     moveBlue@mR 001D  
               ?_moveLightBlue 001C                       ?_left135 0018                   _readingIndex 00DC  
         I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004                    __smallconst 0E00  
                   movePink@mL 001C                     movePink@mR 001D              _I2C_2_Master_Idle 42D4  
                    _logAction 3B10              _I2C_2_Master_Init 42AA              _I2C_2_Master_Read 3FC6  
                     ?_right90 0018              _I2C_2_Master_Stop 43DE                       ?_moveRed 001C  
                 _RxBufReadCnt 005E                       _ADC_init 43A0             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 000F  
                     ?_turn180 0018             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B  
     initDCmotorsPWM@PWMperiod 0001                       ?_sprintf 0031              _sendStringSerial4 4248  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 0F7B                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E                       _LATGbits 0F7F                       _LATHbits 0F80  
                     _IPR0bits 0E1F                       _PIE0bits 0E29             ?_sendStringSerial4 0002  
                    _moveGreen 3E22                       _PIE4bits 0E2D            __end_of_reading_hue 31F8  
                  turnRight@mL 0013                    turnRight@mR 0014                       _PIR0bits 0E33  
                     _PIR4bits 0E37               ?_initDCmotorsPWM 0001                      left135@mL 0018  
                    left135@mR 0019              ??_sendCharSerial4 0001                       _SSP2CON2 0EDA  
          ??_sendStringSerial4 0003                       _SSP2STAT 0ED8                  ??_reverseTurn 001F  
                    _vfpfcnvrt 2AA8                     _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 42FC  
    __end_of_I2C_2_Master_Init 42D4      __end_of_I2C_2_Master_Read 4008              ___wmul@multiplier 0001  
    __end_of_I2C_2_Master_Stop 43E8                   setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002  
                  _ldrReadings 013C                     ?_logAction 0007              ??_color_read_Blue 0007  
                 _TxBufReadCnt 005C                      _turnRight 38B0      __end_of_sendStringSerial4 427A  
                 moveOrange@mL 001C                   moveOrange@mR 001D  __end_of_I2C_2_Master_RepStart 43FC  
           color_read_Blue@tmp 000A            __end_of_setMotorPWM 2EF8                main@path_length 00D6  
                 ??_initUSART4 0001                     ?_moveGreen 001C                       __Hrparam 0000  
                   vfprintf@ap 002F                       __Lrparam 0000                     vfprintf@fp 002D  
        __end_of_fullSpeedBack 3A9C                ??_moveLightBlue 0020                   moveYellow@mL 001C  
                 moveYellow@mR 001D                     ?_vfpfcnvrt 0022          moveOrange@path_length 001E  
                     _backHalf 427A                   ??_send2USART 0046                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                       _dataFlag 00FF                     sprintf@fmt 0032  
                     ___xxtofl 28F4                     _T0CON0bits 0FD5                     _T0CON1bits 0FD6  
                     _decision 272C            __end_of_reverseTurn 3F3E                      right90@mL 0018  
                    right90@mR 0019                ___lwdiv@divisor 0009             __end_of_initUSART4 43A0  
              ___lwdiv@counter 000D                     ?_turnRight 0013                       __ptext10 2EF8  
                     __ptext11 3F3E                       __ptext20 272C                       __ptext12 1680  
                     __ptext21 3CBA                       __ptext13 1B40                       __ptext30 41B2  
                     __ptext22 3D02                       __ptext14 2FFE                       __ptext31 3E22  
                     __ptext23 411C                       __ptext15 35AC                       __ptext40 2DA4  
                     __ptext32 41E4                       __ptext24 3D4A                       __ptext16 1F6A  
                     __ptext41 3A9C                       __ptext33 3E6A                       __ptext25 414E  
                     __ptext17 4382                       __ptext50 42FC                       __ptext42 4080  
                     __ptext34 4216                       __ptext26 3D92                       __ptext18 3792  
                     __ptext51 2C2E                       __ptext43 4344                       __ptext35 392E  
                     __ptext27 4180                       __ptext19 4322                       __ptext60 43BA  
                     __ptext52 3700                       __ptext44 42AA                       __ptext36 3B10  
                     __ptext28 38B0                       __ptext61 3B7A                       __ptext53 4008  
                     __ptext45 255A                       __ptext37 427A                       __ptext29 3DDA  
                     __ptext70 42D4                       __ptext62 3BCA                       __ptext54 3656  
                     __ptext46 40B4                       __ptext38 3822                       __ptext71 43A0  
                     __ptext63 3C1A                       __ptext55 43FC                       __ptext47 3F84  
                     __ptext39 3A26                       __ptext64 3C6A                       __ptext56 40E8  
                     __ptext48 2AA8                       __ptext65 43D2                       __ptext57 33A2  
                     __ptext49 3452                       __ptext66 43DE                       __ptext58 32DE  
                     __ptext67 43E8                       __ptext59 4248                       __ptext68 43F2  
                     __ptext69 3FC6                    decision@hue 0022                      moveRed@mL 001C  
                    moveRed@mR 001D                   _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA  
                  _reading_hue 3102                  reverseTurn@mL 001C                  reverseTurn@mR 001D  
                 ??_moveOrange 0020                     turnLeft@mL 0013                     turnLeft@mR 0014  
                 ??_moveYellow 0020             __end_of_send2USART 4382                       _right135 4180  
                     _moveBlue 3E6A                       _movePink 3D4A                     turnRight@i 0016  
           moveRed@path_length 001E          __end_of_customDelayMs 4080                       isa$xinst 0000  
                     left90@mL 0018                       left90@mR 0019                     _RC4STAbits 0EE7  
                     _vfprintf 3F84                   ??_returnHome 0025                       main@time 00D0  
                     _turnLeft 392E                      turn180@mL 0018                      turn180@mR 0019  
                  ??_logAction 000B                     _INTCONbits 0FF2                 customDelayMs@i 0004  
           __end_of_moveOrange 3DDA             __end_of_moveYellow 3D02                    _setMotorPWM 2DA4  
            ??_get16bitTMR0val 0003                      sprintf@ap 0037           returnHome@pathLength 0023  
            ??_reverseStraight 001C               ??_fullSpeedAhead 0015       moveLightBlue@path_length 001E  
get16bitTMR0val@combined_value 0007             __end_of_returnHome 35AC                    ??_moveGreen 0020  
             returnHome@action 0029                      turnLeft@i 0016    __end_of_calibration_routine 272C  
  convert_rgb2hue@clearcurrent 008C                  send2USART@hue 0044                    ??_vfpfcnvrt 0025  
                  _reverseTurn 3EF8               _color_click_init 4080                       sprintf@f 0038  
                     sprintf@s 0031                     _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C  
                  ??_turnRight 0015                  ___fladd@signs 000D                     _TX4STAbits 0EE8  
              _sendCharSerial4 43BA                 returnHome@path 0021                 returnHome@time 0027  
                 ___fladd@aexp 000E                   ___fladd@bexp 000F                   returnHome@mL 001F  
                 returnHome@mR 0020                logAction@action 000B  
