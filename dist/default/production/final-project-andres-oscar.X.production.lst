

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 14 23:38:22 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=3
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    91                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    92                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    93                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    94                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    95   000000                     
    96                           ; Generated 21/07/2023 GMT
    97                           ; 
    98                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution. Publication is not required when
   112                           ;        this file is used in an embedded application.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC18F67K40 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130   000000                     
   131                           	psect	idataBANK0
   132   0048A4                     __pidataBANK0:
   133                           	callstack 0
   134                           
   135                           ;initializer for _dataFlag
   136   0048A4  01                 	db	1
   137   000000                     _TMR0H	set	4052
   138   000000                     _TX4REG	set	3812
   139   000000                     _RC4STAbits	set	3815
   140   000000                     _SP4BRGH	set	3814
   141   000000                     _LATHbits	set	3968
   142   000000                     _LATFbits	set	3966
   143   000000                     _TRISFbits	set	3974
   144   000000                     _TRISAbits	set	3969
   145   000000                     _TRISEbits	set	3973
   146   000000                     _TRISGbits	set	3975
   147   000000                     _TRISDbits	set	3972
   148   000000                     _PORTFbits	set	3982
   149   000000                     _SSP2CON2bits	set	3802
   150   000000                     _RX4PPS	set	3605
   151   000000                     _SSP2CLKPPS	set	3612
   152   000000                     _SSP2DATPPS	set	3613
   153   000000                     _ANSELDbits	set	3751
   154   000000                     _SSP2ADD	set	3798
   155   000000                     _SSP2CON1bits	set	3801
   156   000000                     _LATAbits	set	3961
   157   000000                     _LATEbits	set	3965
   158   000000                     _LATGbits	set	3967
   159   000000                     _LATCbits	set	3963
   160   000000                     _LATDbits	set	3964
   161   000000                     _CCPR2H	set	4006
   162   000000                     _CCPR1H	set	4010
   163   000000                     _RC4REG	set	3811
   164   000000                     _SP4BRGL	set	3813
   165   000000                     _TX4STAbits	set	3816
   166   000000                     _BAUD4CONbits	set	3817
   167   000000                     _SSP2CON2	set	3802
   168   000000                     _CCPR4H	set	3873
   169   000000                     _CCPR3H	set	3877
   170   000000                     _SSP2STAT	set	3800
   171   000000                     _ANSELFbits	set	3764
   172   000000                     _SSP2BUF	set	3797
   173   000000                     _IPR0bits	set	3615
   174   000000                     _PIE0bits	set	3625
   175   000000                     _PIE4bits	set	3629
   176   000000                     _PIR4bits	set	3639
   177   000000                     _RC0PPS	set	3682
   178   000000                     _RC7PPS	set	3689
   179   000000                     _RD5PPS	set	3695
   180   000000                     _RE2PPS	set	3700
   181   000000                     _RD6PPS	set	3696
   182   000000                     _CCP1CONbits	set	4011
   183   000000                     _CCPTMRS0bits	set	4013
   184   000000                     _T2PR	set	4028
   185   000000                     _T2CONbits	set	4029
   186   000000                     _T0CON0bits	set	4053
   187   000000                     _CCP2CONbits	set	4007
   188   000000                     _CCP3CONbits	set	3878
   189   000000                     _ADREFbits	set	3928
   190   000000                     _CCP4CONbits	set	3874
   191   000000                     _TRISHbits	set	3976
   192   000000                     _TRISCbits	set	3971
   193   000000                     _INTCONbits	set	4082
   194   000000                     _T0CON1bits	set	4054
   195   000000                     _ADPCH	set	3935
   196   000000                     _ADRESH	set	3940
   197   000000                     _ADCON0bits	set	3936
   198   000000                     _RE4PPS	set	3702
   199   000000                     _RG6PPS	set	3720
   200   000000                     _TMR0L	set	4051
   201   000000                     _T2CLKCONbits	set	4031
   202   000000                     _T2HLTbits	set	4030
   203   000000                     _PIR0bits	set	3635
   204                           
   205                           	psect	smallconst
   206   000E00                     __psmallconst:
   207                           	callstack 0
   208   000E00  00                 	db	0
   209   000E01                     STR_3:
   210                           
   211                           ; BSR set to: 14
   212   000E01  43                 	db	67	;'C'
   213   000E02  61                 	db	97	;'a'
   214   000E03  6C                 	db	108	;'l'
   215   000E04  69                 	db	105	;'i'
   216   000E05  62                 	db	98	;'b'
   217   000E06  72                 	db	114	;'r'
   218   000E07  61                 	db	97	;'a'
   219   000E08  74                 	db	116	;'t'
   220   000E09  69                 	db	105	;'i'
   221   000E0A  6F                 	db	111	;'o'
   222   000E0B  6E                 	db	110	;'n'
   223   000E0C  20                 	db	32
   224   000E0D  73                 	db	115	;'s'
   225   000E0E  74                 	db	116	;'t'
   226   000E0F  61                 	db	97	;'a'
   227   000E10  74                 	db	116	;'t'
   228   000E11  65                 	db	101	;'e'
   229   000E12  20                 	db	32
   230   000E13  3D                 	db	61	;'='
   231   000E14  20                 	db	32
   232   000E15  67                 	db	103	;'g'
   233   000E16  72                 	db	114	;'r'
   234   000E17  65                 	db	101	;'e'
   235   000E18  65                 	db	101	;'e'
   236   000E19  6E                 	db	110	;'n'
   237   000E1A  20                 	db	32
   238   000E1B  0A                 	db	10
   239   000E1C  0D                 	db	13
   240   000E1D  00                 	db	0
   241   000E1E                     STR_9:
   242                           
   243                           ; BSR set to: 14
   244   000E1E  43                 	db	67	;'C'
   245   000E1F  61                 	db	97	;'a'
   246   000E20  6C                 	db	108	;'l'
   247   000E21  69                 	db	105	;'i'
   248   000E22  62                 	db	98	;'b'
   249   000E23  72                 	db	114	;'r'
   250   000E24  61                 	db	97	;'a'
   251   000E25  74                 	db	116	;'t'
   252   000E26  69                 	db	105	;'i'
   253   000E27  6F                 	db	111	;'o'
   254   000E28  6E                 	db	110	;'n'
   255   000E29  20                 	db	32
   256   000E2A  73                 	db	115	;'s'
   257   000E2B  74                 	db	116	;'t'
   258   000E2C  61                 	db	97	;'a'
   259   000E2D  74                 	db	116	;'t'
   260   000E2E  65                 	db	101	;'e'
   261   000E2F  20                 	db	32
   262   000E30  3D                 	db	61	;'='
   263   000E31  20                 	db	32
   264   000E32  20                 	db	32
   265   000E33  61                 	db	97	;'a'
   266   000E34  6D                 	db	109	;'m'
   267   000E35  62                 	db	98	;'b'
   268   000E36  69                 	db	105	;'i'
   269   000E37  65                 	db	101	;'e'
   270   000E38  6E                 	db	110	;'n'
   271   000E39  74                 	db	116	;'t'
   272   000E3A  00                 	db	0
   273   000E3B                     STR_5:
   274                           
   275                           ; BSR set to: 14
   276   000E3B  43                 	db	67	;'C'
   277   000E3C  61                 	db	97	;'a'
   278   000E3D  6C                 	db	108	;'l'
   279   000E3E  69                 	db	105	;'i'
   280   000E3F  62                 	db	98	;'b'
   281   000E40  72                 	db	114	;'r'
   282   000E41  61                 	db	97	;'a'
   283   000E42  74                 	db	116	;'t'
   284   000E43  69                 	db	105	;'i'
   285   000E44  6F                 	db	111	;'o'
   286   000E45  6E                 	db	110	;'n'
   287   000E46  20                 	db	32
   288   000E47  73                 	db	115	;'s'
   289   000E48  74                 	db	116	;'t'
   290   000E49  61                 	db	97	;'a'
   291   000E4A  74                 	db	116	;'t'
   292   000E4B  65                 	db	101	;'e'
   293   000E4C  3D                 	db	61	;'='
   294   000E4D  20                 	db	32
   295   000E4E  62                 	db	98	;'b'
   296   000E4F  6C                 	db	108	;'l'
   297   000E50  75                 	db	117	;'u'
   298   000E51  65                 	db	101	;'e'
   299   000E52  20                 	db	32
   300   000E53  0A                 	db	10
   301   000E54  0D                 	db	13
   302   000E55  00                 	db	0
   303   000E56                     STR_7:
   304                           
   305                           ; BSR set to: 14
   306   000E56  43                 	db	67	;'C'
   307   000E57  61                 	db	97	;'a'
   308   000E58  6C                 	db	108	;'l'
   309   000E59  69                 	db	105	;'i'
   310   000E5A  62                 	db	98	;'b'
   311   000E5B  72                 	db	114	;'r'
   312   000E5C  61                 	db	97	;'a'
   313   000E5D  74                 	db	116	;'t'
   314   000E5E  69                 	db	105	;'i'
   315   000E5F  6F                 	db	111	;'o'
   316   000E60  6E                 	db	110	;'n'
   317   000E61  20                 	db	32
   318   000E62  73                 	db	115	;'s'
   319   000E63  74                 	db	116	;'t'
   320   000E64  61                 	db	97	;'a'
   321   000E65  74                 	db	116	;'t'
   322   000E66  65                 	db	101	;'e'
   323   000E67  20                 	db	32
   324   000E68  3D                 	db	61	;'='
   325   000E69  20                 	db	32
   326   000E6A  20                 	db	32
   327   000E6B  77                 	db	119	;'w'
   328   000E6C  68                 	db	104	;'h'
   329   000E6D  69                 	db	105	;'i'
   330   000E6E  74                 	db	116	;'t'
   331   000E6F  65                 	db	101	;'e'
   332   000E70  00                 	db	0
   333   000E71                     STR_11:
   334                           
   335                           ; BSR set to: 14
   336   000E71  43                 	db	67	;'C'
   337   000E72  41                 	db	65	;'A'
   338   000E73  4C                 	db	76	;'L'
   339   000E74  49                 	db	73	;'I'
   340   000E75  42                 	db	66	;'B'
   341   000E76  52                 	db	82	;'R'
   342   000E77  41                 	db	65	;'A'
   343   000E78  54                 	db	84	;'T'
   344   000E79  49                 	db	73	;'I'
   345   000E7A  4F                 	db	79	;'O'
   346   000E7B  4E                 	db	78	;'N'
   347   000E7C  20                 	db	32
   348   000E7D  43                 	db	67	;'C'
   349   000E7E  4F                 	db	79	;'O'
   350   000E7F  4D                 	db	77	;'M'
   351   000E80  50                 	db	80	;'P'
   352   000E81  4C                 	db	76	;'L'
   353   000E82  45                 	db	69	;'E'
   354   000E83  54                 	db	84	;'T'
   355   000E84  45                 	db	69	;'E'
   356   000E85  44                 	db	68	;'D'
   357   000E86  20                 	db	32
   358   000E87  0A                 	db	10
   359   000E88  0D                 	db	13
   360   000E89  00                 	db	0
   361   000E8A                     STR_1:
   362                           
   363                           ; BSR set to: 14
   364   000E8A  43                 	db	67	;'C'
   365   000E8B  61                 	db	97	;'a'
   366   000E8C  6C                 	db	108	;'l'
   367   000E8D  69                 	db	105	;'i'
   368   000E8E  62                 	db	98	;'b'
   369   000E8F  72                 	db	114	;'r'
   370   000E90  61                 	db	97	;'a'
   371   000E91  74                 	db	116	;'t'
   372   000E92  69                 	db	105	;'i'
   373   000E93  6F                 	db	111	;'o'
   374   000E94  6E                 	db	110	;'n'
   375   000E95  20                 	db	32
   376   000E96  73                 	db	115	;'s'
   377   000E97  74                 	db	116	;'t'
   378   000E98  61                 	db	97	;'a'
   379   000E99  74                 	db	116	;'t'
   380   000E9A  65                 	db	101	;'e'
   381   000E9B  20                 	db	32
   382   000E9C  3D                 	db	61	;'='
   383   000E9D  20                 	db	32
   384   000E9E  72                 	db	114	;'r'
   385   000E9F  65                 	db	101	;'e'
   386   000EA0  64                 	db	100	;'d'
   387   000EA1  00                 	db	0
   388   000EA2                     
   389                           ; BSR set to: 14
   390   000EA2  56                 	db	86	;'V'
   391   000EA3  6F                 	db	111	;'o'
   392   000EA4  6C                 	db	108	;'l'
   393   000EA5  74                 	db	116	;'t'
   394   000EA6  61                 	db	97	;'a'
   395   000EA7  67                 	db	103	;'g'
   396   000EA8  65                 	db	101	;'e'
   397   000EA9  20                 	db	32
   398   000EAA  3D                 	db	61	;'='
   399   000EAB  20                 	db	32
   400   000EAC  25                 	db	37
   401   000EAD  64                 	db	100	;'d'
   402   000EAE  2E                 	db	46
   403   000EAF  25                 	db	37
   404   000EB0  30                 	db	48	;'0'
   405   000EB1  32                 	db	50	;'2'
   406   000EB2  64                 	db	100	;'d'
   407   000EB3  2C                 	db	44
   408   000EB4  20                 	db	32
   409   000EB5  20                 	db	32
   410   000EB6  00                 	db	0
   411   000EB7                     STR_14:
   412                           
   413                           ; BSR set to: 14
   414   000EB7  68                 	db	104	;'h'
   415   000EB8  75                 	db	117	;'u'
   416   000EB9  65                 	db	101	;'e'
   417   000EBA  3D                 	db	61	;'='
   418   000EBB  25                 	db	37
   419   000EBC  30                 	db	48	;'0'
   420   000EBD  33                 	db	51	;'3'
   421   000EBE  64                 	db	100	;'d'
   422   000EBF  2C                 	db	44
   423   000EC0  20                 	db	32
   424   000EC1  20                 	db	32
   425   000EC2  00                 	db	0
   426   000EC3                     STR_2:
   427                           
   428                           ; BSR set to: 14
   429   000EC3  2E                 	db	46
   430   000EC4  00                 	db	0
   431   000EC5  00                 	db	0	; dummy byte at the end
   432   000000                     
   433                           ; #config settings
   434                           
   435                           	psect	cinit
   436   004244                     __pcinit:
   437                           	callstack 0
   438   004244                     start_initialization:
   439                           	callstack 0
   440   004244                     __initialization:
   441                           	callstack 0
   442                           
   443                           ; Initialize objects allocated to BANK0 (1 bytes)
   444                           ; load TBLPTR registers with __pidataBANK0
   445   004244  0EA4               	movlw	low __pidataBANK0
   446   004246  6EF6               	movwf	tblptrl,c
   447   004248  0E48               	movlw	high __pidataBANK0
   448   00424A  6EF7               	movwf	tblptrh,c
   449   00424C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   450   00424E  6EF8               	movwf	tblptru,c
   451   004250  0009               	tblrd		*+	;fetch initializer
   452   004252  CFF5 F0F7          	movff	tablat,__pdataBANK0
   453                           
   454                           ; Clear objects allocated to BANK2 (100 bytes)
   455   004256  EE02  F000         	lfsr	0,__pbssBANK2
   456   00425A  0E64               	movlw	100
   457   00425C                     clear_0:
   458   00425C  6AEE               	clrf	postinc0,c
   459   00425E  06E8               	decf	wreg,f,c
   460   004260  E1FD               	bnz	clear_0
   461                           
   462                           ; Clear objects allocated to BANK1 (182 bytes)
   463   004262  EE01  F000         	lfsr	0,__pbssBANK1
   464   004266  0EB6               	movlw	182
   465   004268                     clear_1:
   466   004268  6AEE               	clrf	postinc0,c
   467   00426A  06E8               	decf	wreg,f,c
   468   00426C  E1FD               	bnz	clear_1
   469                           
   470                           ; Clear objects allocated to BANK0 (57 bytes)
   471   00426E  EE00  F0BE         	lfsr	0,__pbssBANK0
   472   004272  0E39               	movlw	57
   473   004274                     clear_2:
   474   004274  6AEE               	clrf	postinc0,c
   475   004276  06E8               	decf	wreg,f,c
   476   004278  E1FD               	bnz	clear_2
   477                           
   478                           ; Clear objects allocated to COMRAM (1 bytes)
   479   00427A  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   480   00427C                     end_of_initialization:
   481                           	callstack 0
   482   00427C                     __end_of__initialization:
   483                           	callstack 0
   484   00427C  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   485   00427E  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   486   004280  0100               	movlb	0
   487   004282  EF6E  F011         	goto	_main	;jump to C main() function
   488                           
   489                           	psect	bssCOMRAM
   490   00005D                     __pbssCOMRAM:
   491                           	callstack 0
   492   00005D                     _TxBufWriteCnt:
   493                           	callstack 0
   494   00005D                     	ds	1
   495                           
   496                           	psect	bssBANK0
   497   0000BE                     __pbssBANK0:
   498                           	callstack 0
   499   0000BE                     _hue:
   500                           	callstack 0
   501   0000BE                     	ds	10
   502   0000C8                     _width:
   503                           	callstack 0
   504   0000C8                     	ds	2
   505   0000CA                     _prec:
   506                           	callstack 0
   507   0000CA                     	ds	2
   508   0000CC                     _flags:
   509                           	callstack 0
   510   0000CC                     	ds	1
   511   0000CD                     _readingIndex:
   512                           	callstack 0
   513   0000CD                     	ds	1
   514   0000CE                     _TxBufReadCnt:
   515                           	callstack 0
   516   0000CE                     	ds	1
   517   0000CF                     _RxBufReadCnt:
   518                           	callstack 0
   519   0000CF                     	ds	1
   520   0000D0                     _RxBufWriteCnt:
   521                           	callstack 0
   522   0000D0                     	ds	1
   523   0000D1                     _colorCurrent:
   524                           	callstack 0
   525   0000D1                     	ds	10
   526   0000DB                     _colorCalibration:
   527                           	callstack 0
   528   0000DB                     	ds	10
   529   0000E5                     _motorR:
   530                           	callstack 0
   531   0000E5                     	ds	9
   532   0000EE                     _motorL:
   533                           	callstack 0
   534   0000EE                     	ds	9
   535                           
   536                           	psect	dataBANK0
   537   0000F7                     __pdataBANK0:
   538                           	callstack 0
   539   0000F7                     _dataFlag:
   540                           	callstack 0
   541   0000F7                     	ds	1
   542                           
   543                           	psect	bssBANK1
   544   000100                     __pbssBANK1:
   545                           	callstack 0
   546   000100                     _EUSART4TXbuf:
   547                           	callstack 0
   548   000100                     	ds	60
   549   00013C                     _action:
   550                           	callstack 0
   551   00013C                     	ds	50
   552   00016E                     _ldrReadings:
   553                           	callstack 0
   554   00016E                     	ds	20
   555   000182                     _EUSART4RXbuf:
   556                           	callstack 0
   557   000182                     	ds	20
   558   000196                     _dbuf:
   559                           	callstack 0
   560   000196                     	ds	32
   561                           
   562                           	psect	bssBANK2
   563   000200                     __pbssBANK2:
   564                           	callstack 0
   565   000200                     _time:
   566                           	callstack 0
   567   000200                     	ds	100
   568                           
   569                           	psect	cstackBANK0
   570   000060                     __pcstackBANK0:
   571                           	callstack 0
   572   000060                     reverseStraight@mL:
   573                           	callstack 0
   574   000060                     convert_rgb2hue@redcurrent:
   575                           	callstack 0
   576   000060                     send2USART@hue_char:
   577                           	callstack 0
   578                           
   579                           ; 50 bytes @ 0x0
   580   000060                     	ds	1
   581   000061                     reverseStraight@mR:
   582                           	callstack 0
   583                           
   584                           ; 1 bytes @ 0x1
   585   000061                     	ds	1
   586   000062                     reverseStraight@time_ms:
   587                           	callstack 0
   588                           
   589                           ; 4 bytes @ 0x2
   590   000062                     	ds	2
   591   000064                     convert_rgb2hue@redmax:
   592                           	callstack 0
   593                           
   594                           ; 4 bytes @ 0x4
   595   000064                     	ds	2
   596   000066                     reverseStraight@delayMs:
   597                           	callstack 0
   598                           
   599                           ; 2 bytes @ 0x6
   600   000066                     	ds	2
   601   000068                     returnHome@mL:
   602                           	callstack 0
   603   000068                     convert_rgb2hue@greencurrent:
   604                           	callstack 0
   605                           
   606                           ; 4 bytes @ 0x8
   607   000068                     	ds	1
   608   000069                     returnHome@mR:
   609                           	callstack 0
   610                           
   611                           ; 1 bytes @ 0x9
   612   000069                     	ds	1
   613   00006A                     returnHome@path_step:
   614                           	callstack 0
   615                           
   616                           ; 2 bytes @ 0xA
   617   00006A                     	ds	2
   618   00006C                     convert_rgb2hue@greenmax:
   619                           	callstack 0
   620   00006C                     returnHome@time_ms:
   621                           	callstack 0
   622                           
   623                           ; 4 bytes @ 0xC
   624   00006C                     	ds	4
   625   000070                     returnHome@action_turn:
   626                           	callstack 0
   627   000070                     convert_rgb2hue@bluecurrent:
   628                           	callstack 0
   629                           
   630                           ; 4 bytes @ 0x10
   631   000070                     	ds	1
   632   000071                     returnHome@i:
   633                           	callstack 0
   634                           
   635                           ; 2 bytes @ 0x11
   636   000071                     	ds	3
   637   000074                     convert_rgb2hue@bluemax:
   638                           	callstack 0
   639                           
   640                           ; 4 bytes @ 0x14
   641   000074                     	ds	4
   642   000078                     convert_rgb2hue@clearcurrent:
   643                           	callstack 0
   644                           
   645                           ; 4 bytes @ 0x18
   646   000078                     	ds	4
   647   00007C                     convert_rgb2hue@clearmax:
   648                           	callstack 0
   649                           
   650                           ; 4 bytes @ 0x1C
   651   00007C                     	ds	4
   652   000080                     _convert_rgb2hue$438:
   653                           	callstack 0
   654                           
   655                           ; 4 bytes @ 0x20
   656   000080                     	ds	4
   657   000084                     _convert_rgb2hue$439:
   658                           	callstack 0
   659                           
   660                           ; 4 bytes @ 0x24
   661   000084                     	ds	4
   662   000088                     _convert_rgb2hue$440:
   663                           	callstack 0
   664                           
   665                           ; 4 bytes @ 0x28
   666   000088                     	ds	4
   667   00008C                     _convert_rgb2hue$441:
   668                           	callstack 0
   669                           
   670                           ; 4 bytes @ 0x2C
   671   00008C                     	ds	4
   672   000090                     convert_rgb2hue@min:
   673                           	callstack 0
   674                           
   675                           ; 4 bytes @ 0x30
   676   000090                     	ds	4
   677   000094                     convert_rgb2hue@diff:
   678                           	callstack 0
   679                           
   680                           ; 4 bytes @ 0x34
   681   000094                     	ds	4
   682   000098                     convert_rgb2hue@max:
   683                           	callstack 0
   684                           
   685                           ; 4 bytes @ 0x38
   686   000098                     	ds	4
   687   00009C                     convert_rgb2hue@hue:
   688                           	callstack 0
   689                           
   690                           ; 4 bytes @ 0x3C
   691   00009C                     	ds	4
   692   0000A0                     convert_rgb2hue@r:
   693                           	callstack 0
   694                           
   695                           ; 4 bytes @ 0x40
   696   0000A0                     	ds	4
   697   0000A4                     convert_rgb2hue@g:
   698                           	callstack 0
   699                           
   700                           ; 4 bytes @ 0x44
   701   0000A4                     	ds	4
   702   0000A8                     convert_rgb2hue@b:
   703                           	callstack 0
   704                           
   705                           ; 4 bytes @ 0x48
   706   0000A8                     	ds	4
   707   0000AC                     ??_reading_hue:
   708                           
   709                           ; 1 bytes @ 0x4C
   710   0000AC                     	ds	2
   711   0000AE                     reading_hue@hue:
   712                           	callstack 0
   713                           
   714                           ; 2 bytes @ 0x4E
   715   0000AE                     	ds	2
   716   0000B0                     ??_main:
   717                           
   718                           ; 1 bytes @ 0x50
   719   0000B0                     	ds	2
   720   0000B2                     main@current:
   721                           	callstack 0
   722                           
   723                           ; 4 bytes @ 0x52
   724   0000B2                     	ds	4
   725   0000B6                     main@ambient:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0x56
   729   0000B6                     	ds	2
   730   0000B8                     main@clear_norm:
   731                           	callstack 0
   732                           
   733                           ; 2 bytes @ 0x58
   734   0000B8                     	ds	2
   735   0000BA                     main@hue:
   736                           	callstack 0
   737                           
   738                           ; 2 bytes @ 0x5A
   739   0000BA                     	ds	2
   740   0000BC                     main@path_step:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x5C
   744   0000BC                     	ds	2
   745                           
   746                           	psect	cstackCOMRAM
   747   000001                     __pcstackCOMRAM:
   748                           	callstack 0
   749   000001                     ??_LowISR:
   750   000001                     
   751                           ; 1 bytes @ 0x0
   752   000001                     	ds	1
   753   000002                     ??_I2C_2_Master_Idle:
   754   000002                     ?___wmul:
   755                           	callstack 0
   756   000002                     ?___awdiv:
   757                           	callstack 0
   758   000002                     ?___awmod:
   759                           	callstack 0
   760   000002                     ?___fladd:
   761                           	callstack 0
   762   000002                     ?___lmul:
   763                           	callstack 0
   764   000002                     ?___xxtofl:
   765                           	callstack 0
   766   000002                     sendCharSerial4@charToSend:
   767                           	callstack 0
   768   000002                     initDCmotorsPWM@PWMperiod:
   769                           	callstack 0
   770   000002                     logAction@newTime:
   771                           	callstack 0
   772   000002                     customDelayMs@milliseconds:
   773                           	callstack 0
   774   000002                     ___wmul@multiplier:
   775                           	callstack 0
   776   000002                     ___awdiv@dividend:
   777                           	callstack 0
   778   000002                     ___awmod@dividend:
   779                           	callstack 0
   780   000002                     fputc@c:
   781                           	callstack 0
   782   000002                     ___lmul@multiplier:
   783                           	callstack 0
   784   000002                     ___fleq@ff1:
   785                           	callstack 0
   786   000002                     ___flge@ff1:
   787                           	callstack 0
   788   000002                     ___fladd@b:
   789                           	callstack 0
   790   000002                     ___xxtofl@val:
   791                           	callstack 0
   792                           
   793                           ; 4 bytes @ 0x1
   794   000002                     	ds	1
   795   000003                     ??_I2C_2_Master_Read:
   796   000003                     I2C_2_Master_Write@data_byte:
   797                           	callstack 0
   798   000003                     sendStringSerial4@string:
   799                           	callstack 0
   800                           
   801                           ; 1 bytes @ 0x2
   802   000003                     	ds	1
   803   000004                     ??_customDelayMs:
   804   000004                     color_writetoaddr@value:
   805                           	callstack 0
   806   000004                     I2C_2_Master_Read@ack:
   807                           	callstack 0
   808   000004                     fputc@fp:
   809                           	callstack 0
   810   000004                     logAction@path_step:
   811                           	callstack 0
   812   000004                     ___wmul@multiplicand:
   813                           	callstack 0
   814   000004                     ___awdiv@divisor:
   815                           	callstack 0
   816   000004                     ___awmod@divisor:
   817                           	callstack 0
   818                           
   819                           ; 2 bytes @ 0x3
   820   000004                     	ds	1
   821   000005                     ??_fputc:
   822   000005                     color_writetoaddr@address:
   823                           	callstack 0
   824   000005                     I2C_2_Master_Read@tmp:
   825                           	callstack 0
   826   000005                     customDelayMs@i:
   827                           	callstack 0
   828                           
   829                           ; 2 bytes @ 0x4
   830   000005                     	ds	1
   831   000006                     ??_color_click_init:
   832   000006                     ??___xxtofl:
   833   000006                     ?_color_read_Red:
   834                           	callstack 0
   835   000006                     ?_color_read_Green:
   836                           	callstack 0
   837   000006                     ?_color_read_Blue:
   838                           	callstack 0
   839   000006                     ?_color_read_Clear:
   840                           	callstack 0
   841   000006                     logAction@newAction:
   842                           	callstack 0
   843   000006                     ___awdiv@counter:
   844                           	callstack 0
   845   000006                     ___awmod@counter:
   846                           	callstack 0
   847   000006                     ___wmul@product:
   848                           	callstack 0
   849   000006                     ___lmul@multiplicand:
   850                           	callstack 0
   851   000006                     ___fleq@ff2:
   852                           	callstack 0
   853   000006                     ___flge@ff2:
   854                           	callstack 0
   855   000006                     ___fladd@a:
   856                           	callstack 0
   857                           
   858                           ; 4 bytes @ 0x5
   859   000006                     	ds	1
   860   000007                     ?_get16bitTMR0val:
   861                           	callstack 0
   862   000007                     ___awdiv@sign:
   863                           	callstack 0
   864   000007                     ___awmod@sign:
   865                           	callstack 0
   866   000007                     get16bitTMR0val@path_step:
   867                           	callstack 0
   868                           
   869                           ; 2 bytes @ 0x6
   870   000007                     	ds	1
   871   000008                     ??_color_read_Red:
   872   000008                     ??_color_read_Green:
   873   000008                     ??_color_read_Blue:
   874   000008                     ??_color_read_Clear:
   875   000008                     ?_abs:
   876                           	callstack 0
   877   000008                     ?___lwdiv:
   878                           	callstack 0
   879   000008                     ?_read_prec_or_width:
   880                           	callstack 0
   881   000008                     read_prec_or_width@fmt:
   882                           	callstack 0
   883   000008                     ___awdiv@quotient:
   884                           	callstack 0
   885   000008                     ___lwdiv@dividend:
   886                           	callstack 0
   887   000008                     abs@a:
   888                           	callstack 0
   889                           
   890                           ; 2 bytes @ 0x7
   891   000008                     	ds	1
   892   000009                     ??_get16bitTMR0val:
   893   000009                     read_prec_or_width@ap:
   894                           	callstack 0
   895                           
   896                           ; 1 bytes @ 0x8
   897   000009                     	ds	1
   898   00000A                     ??___fladd:
   899   00000A                     ??_abs:
   900   00000A                     ??___fleq:
   901   00000A                     ??___flge:
   902   00000A                     ___xxtofl@sign:
   903                           	callstack 0
   904   00000A                     read_prec_or_width@c:
   905                           	callstack 0
   906   00000A                     ___lwdiv@divisor:
   907                           	callstack 0
   908   00000A                     fputs@s:
   909                           	callstack 0
   910   00000A                     ___lmul@product:
   911                           	callstack 0
   912                           
   913                           ; 4 bytes @ 0x9
   914   00000A                     	ds	1
   915   00000B                     ___xxtofl@exp:
   916                           	callstack 0
   917   00000B                     color_read_Red@tmp:
   918                           	callstack 0
   919   00000B                     color_read_Green@tmp:
   920                           	callstack 0
   921   00000B                     color_read_Blue@tmp:
   922                           	callstack 0
   923   00000B                     color_read_Clear@tmp:
   924                           	callstack 0
   925   00000B                     read_prec_or_width@n:
   926                           	callstack 0
   927                           
   928                           ; 2 bytes @ 0xA
   929   00000B                     	ds	1
   930   00000C                     fputs@fp:
   931                           	callstack 0
   932   00000C                     ___lwdiv@quotient:
   933                           	callstack 0
   934   00000C                     ___xxtofl@arg:
   935                           	callstack 0
   936                           
   937                           ; 4 bytes @ 0xB
   938   00000C                     	ds	1
   939   00000D                     fputs@c:
   940                           	callstack 0
   941   00000D                     get16bitTMR0val@combined_value:
   942                           	callstack 0
   943                           
   944                           ; 2 bytes @ 0xC
   945   00000D                     	ds	1
   946   00000E                     ?___aldiv:
   947                           	callstack 0
   948   00000E                     ___lwdiv@counter:
   949                           	callstack 0
   950   00000E                     ___fladd@signs:
   951                           	callstack 0
   952   00000E                     fputs@i:
   953                           	callstack 0
   954   00000E                     ___aldiv@dividend:
   955                           	callstack 0
   956                           
   957                           ; 4 bytes @ 0xD
   958   00000E                     	ds	1
   959   00000F                     setMotorPWM@m:
   960                           	callstack 0
   961   00000F                     ___fladd@aexp:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0xE
   965   00000F                     	ds	1
   966   000010                     ??_setMotorPWM:
   967   000010                     ___fladd@bexp:
   968                           	callstack 0
   969   000010                     pad@fp:
   970                           	callstack 0
   971                           
   972                           ; 1 bytes @ 0xF
   973   000010                     	ds	1
   974   000011                     ___fladd@grs:
   975                           	callstack 0
   976   000011                     pad@buf:
   977                           	callstack 0
   978                           
   979                           ; 2 bytes @ 0x10
   980   000011                     	ds	1
   981   000012                     ?___flsub:
   982                           	callstack 0
   983   000012                     setMotorPWM@posDuty:
   984                           	callstack 0
   985   000012                     ___aldiv@divisor:
   986                           	callstack 0
   987   000012                     ___flsub@b:
   988                           	callstack 0
   989                           
   990                           ; 4 bytes @ 0x11
   991   000012                     	ds	1
   992   000013                     setMotorPWM@negDuty:
   993                           	callstack 0
   994   000013                     pad@p:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0x12
   998   000013                     	ds	1
   999   000014                     stop@mL:
  1000                           	callstack 0
  1001   000014                     turnLeft@mL:
  1002                           	callstack 0
  1003   000014                     turnRight@mL:
  1004                           	callstack 0
  1005   000014                     fullSpeedBack@mL:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x13
  1009   000014                     	ds	1
  1010   000015                     ??_pad:
  1011   000015                     stop@mR:
  1012                           	callstack 0
  1013   000015                     turnLeft@mR:
  1014                           	callstack 0
  1015   000015                     turnRight@mR:
  1016                           	callstack 0
  1017   000015                     fullSpeedBack@mR:
  1018                           	callstack 0
  1019                           
  1020                           ; 1 bytes @ 0x14
  1021   000015                     	ds	1
  1022   000016                     ??_stop:
  1023   000016                     ??_turnLeft:
  1024   000016                     ??_turnRight:
  1025   000016                     ??_fullSpeedBack:
  1026   000016                     ___aldiv@counter:
  1027                           	callstack 0
  1028   000016                     pad@i:
  1029                           	callstack 0
  1030   000016                     ___flsub@a:
  1031                           	callstack 0
  1032                           
  1033                           ; 4 bytes @ 0x15
  1034   000016                     	ds	1
  1035   000017                     ___aldiv@sign:
  1036                           	callstack 0
  1037   000017                     turnLeft@i:
  1038                           	callstack 0
  1039   000017                     turnRight@i:
  1040                           	callstack 0
  1041   000017                     fullSpeedBack@power:
  1042                           	callstack 0
  1043                           
  1044                           ; 2 bytes @ 0x16
  1045   000017                     	ds	1
  1046   000018                     dtoa@fp:
  1047                           	callstack 0
  1048   000018                     ___aldiv@quotient:
  1049                           	callstack 0
  1050                           
  1051                           ; 4 bytes @ 0x17
  1052   000018                     	ds	1
  1053   000019                     right90@mL:
  1054                           	callstack 0
  1055   000019                     left90@mL:
  1056                           	callstack 0
  1057   000019                     turn180@mL:
  1058                           	callstack 0
  1059   000019                     right135@mL:
  1060                           	callstack 0
  1061   000019                     left135@mL:
  1062                           	callstack 0
  1063   000019                     backHalf@mL:
  1064                           	callstack 0
  1065   000019                     backOneAndHalf@mL:
  1066                           	callstack 0
  1067   000019                     dtoa@d:
  1068                           	callstack 0
  1069                           
  1070                           ; 2 bytes @ 0x18
  1071   000019                     	ds	1
  1072   00001A                     ?___flmul:
  1073                           	callstack 0
  1074   00001A                     right90@mR:
  1075                           	callstack 0
  1076   00001A                     left90@mR:
  1077                           	callstack 0
  1078   00001A                     turn180@mR:
  1079                           	callstack 0
  1080   00001A                     right135@mR:
  1081                           	callstack 0
  1082   00001A                     left135@mR:
  1083                           	callstack 0
  1084   00001A                     backHalf@mR:
  1085                           	callstack 0
  1086   00001A                     backOneAndHalf@mR:
  1087                           	callstack 0
  1088   00001A                     ___flmul@b:
  1089                           	callstack 0
  1090                           
  1091                           ; 4 bytes @ 0x19
  1092   00001A                     	ds	1
  1093   00001B                     ??_right90:
  1094   00001B                     ??_left90:
  1095   00001B                     ??_turn180:
  1096   00001B                     ??_right135:
  1097   00001B                     ??_left135:
  1098   00001B                     ??_backHalf:
  1099   00001B                     ??_backOneAndHalf:
  1100   00001B                     _dtoa$3088:
  1101                           	callstack 0
  1102                           
  1103                           ; 2 bytes @ 0x1A
  1104   00001B                     	ds	2
  1105   00001D                     moveRed@mL:
  1106                           	callstack 0
  1107   00001D                     moveGreen@mL:
  1108                           	callstack 0
  1109   00001D                     moveBlue@mL:
  1110                           	callstack 0
  1111   00001D                     moveYellow@mL:
  1112                           	callstack 0
  1113   00001D                     movePink@mL:
  1114                           	callstack 0
  1115   00001D                     moveOrange@mL:
  1116                           	callstack 0
  1117   00001D                     moveLightBlue@mL:
  1118                           	callstack 0
  1119   00001D                     moveWhite@mL:
  1120                           	callstack 0
  1121   00001D                     reverseTurn@mL:
  1122                           	callstack 0
  1123   00001D                     dtoa@p:
  1124                           	callstack 0
  1125                           
  1126                           ; 1 bytes @ 0x1C
  1127   00001D                     	ds	1
  1128   00001E                     moveRed@mR:
  1129                           	callstack 0
  1130   00001E                     moveGreen@mR:
  1131                           	callstack 0
  1132   00001E                     moveBlue@mR:
  1133                           	callstack 0
  1134   00001E                     moveYellow@mR:
  1135                           	callstack 0
  1136   00001E                     movePink@mR:
  1137                           	callstack 0
  1138   00001E                     moveOrange@mR:
  1139                           	callstack 0
  1140   00001E                     moveLightBlue@mR:
  1141                           	callstack 0
  1142   00001E                     moveWhite@mR:
  1143                           	callstack 0
  1144   00001E                     reverseTurn@mR:
  1145                           	callstack 0
  1146   00001E                     dtoa@w:
  1147                           	callstack 0
  1148   00001E                     ___flmul@a:
  1149                           	callstack 0
  1150                           
  1151                           ; 4 bytes @ 0x1D
  1152   00001E                     	ds	1
  1153   00001F                     ??_moveRed:
  1154   00001F                     ??_moveGreen:
  1155   00001F                     ??_moveBlue:
  1156   00001F                     ??_moveLightBlue:
  1157   00001F                     ??_moveYellow:
  1158   00001F                     ??_moveOrange:
  1159   00001F                     ??_movePink:
  1160   00001F                     ??_moveWhite:
  1161   00001F                     reverseTurn@actionStep:
  1162                           	callstack 0
  1163                           
  1164                           ; 1 bytes @ 0x1E
  1165   00001F                     	ds	1
  1166   000020                     ??_reverseTurn:
  1167   000020                     dtoa@s:
  1168                           	callstack 0
  1169                           
  1170                           ; 1 bytes @ 0x1F
  1171   000020                     	ds	1
  1172   000021                     dtoa@i:
  1173                           	callstack 0
  1174                           
  1175                           ; 2 bytes @ 0x20
  1176   000021                     	ds	1
  1177   000022                     ??___flmul:
  1178                           
  1179                           ; 1 bytes @ 0x21
  1180   000022                     	ds	1
  1181   000023                     vfpfcnvrt@fp:
  1182                           	callstack 0
  1183                           
  1184                           ; 1 bytes @ 0x22
  1185   000023                     	ds	1
  1186   000024                     vfpfcnvrt@fmt:
  1187                           	callstack 0
  1188                           
  1189                           ; 1 bytes @ 0x23
  1190   000024                     	ds	1
  1191   000025                     vfpfcnvrt@ap:
  1192                           	callstack 0
  1193                           
  1194                           ; 1 bytes @ 0x24
  1195   000025                     	ds	1
  1196   000026                     ??_vfpfcnvrt:
  1197   000026                     ___flmul@sign:
  1198                           	callstack 0
  1199                           
  1200                           ; 1 bytes @ 0x25
  1201   000026                     	ds	1
  1202   000027                     ___flmul@grs:
  1203                           	callstack 0
  1204                           
  1205                           ; 4 bytes @ 0x26
  1206   000027                     	ds	1
  1207   000028                     vfpfcnvrt@convarg:
  1208                           	callstack 0
  1209                           
  1210                           ; 4 bytes @ 0x27
  1211   000028                     	ds	3
  1212   00002B                     ___flmul@aexp:
  1213                           	callstack 0
  1214                           
  1215                           ; 1 bytes @ 0x2A
  1216   00002B                     	ds	1
  1217   00002C                     ___flmul@bexp:
  1218                           	callstack 0
  1219   00002C                     vfpfcnvrt@done:
  1220                           	callstack 0
  1221                           
  1222                           ; 1 bytes @ 0x2B
  1223   00002C                     	ds	1
  1224   00002D                     vfpfcnvrt@cp:
  1225                           	callstack 0
  1226   00002D                     ___flmul@prod:
  1227                           	callstack 0
  1228                           
  1229                           ; 4 bytes @ 0x2C
  1230   00002D                     	ds	1
  1231   00002E                     ?_vfprintf:
  1232                           	callstack 0
  1233   00002E                     vfprintf@fp:
  1234                           	callstack 0
  1235                           
  1236                           ; 1 bytes @ 0x2D
  1237   00002E                     	ds	1
  1238   00002F                     vfprintf@fmt:
  1239                           	callstack 0
  1240                           
  1241                           ; 1 bytes @ 0x2E
  1242   00002F                     	ds	1
  1243   000030                     vfprintf@ap:
  1244                           	callstack 0
  1245                           
  1246                           ; 1 bytes @ 0x2F
  1247   000030                     	ds	1
  1248   000031                     vfprintf@cfmt:
  1249                           	callstack 0
  1250   000031                     ___flmul@temp:
  1251                           	callstack 0
  1252                           
  1253                           ; 2 bytes @ 0x30
  1254   000031                     	ds	1
  1255   000032                     ?_sprintf:
  1256                           	callstack 0
  1257   000032                     sprintf@s:
  1258                           	callstack 0
  1259                           
  1260                           ; 1 bytes @ 0x31
  1261   000032                     	ds	1
  1262   000033                     ?___fldiv:
  1263                           	callstack 0
  1264   000033                     sprintf@fmt:
  1265                           	callstack 0
  1266   000033                     ___fldiv@b:
  1267                           	callstack 0
  1268                           
  1269                           ; 4 bytes @ 0x32
  1270   000033                     	ds	4
  1271   000037                     ___fldiv@a:
  1272                           	callstack 0
  1273                           
  1274                           ; 4 bytes @ 0x36
  1275   000037                     	ds	1
  1276   000038                     sprintf@ap:
  1277                           	callstack 0
  1278                           
  1279                           ; 1 bytes @ 0x37
  1280   000038                     	ds	1
  1281   000039                     sprintf@f:
  1282                           	callstack 0
  1283                           
  1284                           ; 12 bytes @ 0x38
  1285   000039                     	ds	2
  1286   00003B                     ??___fldiv:
  1287                           
  1288                           ; 1 bytes @ 0x3A
  1289   00003B                     	ds	4
  1290   00003F                     ___fldiv@rem:
  1291                           	callstack 0
  1292                           
  1293                           ; 4 bytes @ 0x3E
  1294   00003F                     	ds	4
  1295   000043                     ___fldiv@sign:
  1296                           	callstack 0
  1297                           
  1298                           ; 1 bytes @ 0x42
  1299   000043                     	ds	1
  1300   000044                     ___fldiv@new_exp:
  1301                           	callstack 0
  1302                           
  1303                           ; 2 bytes @ 0x43
  1304   000044                     	ds	1
  1305   000045                     calibration_routine@cCal:
  1306                           	callstack 0
  1307   000045                     send2USART@hue:
  1308                           	callstack 0
  1309                           
  1310                           ; 2 bytes @ 0x44
  1311   000045                     	ds	1
  1312   000046                     ??_calibration_routine:
  1313   000046                     ___fldiv@grs:
  1314                           	callstack 0
  1315                           
  1316                           ; 4 bytes @ 0x45
  1317   000046                     	ds	1
  1318   000047                     ?_decision:
  1319                           	callstack 0
  1320   000047                     decision@hue:
  1321                           	callstack 0
  1322                           
  1323                           ; 2 bytes @ 0x46
  1324   000047                     	ds	1
  1325   000048                     calibration_routine@cal_state:
  1326                           	callstack 0
  1327                           
  1328                           ; 20 bytes @ 0x47
  1329   000048                     	ds	1
  1330   000049                     decision@path_step:
  1331                           	callstack 0
  1332                           
  1333                           ; 2 bytes @ 0x48
  1334   000049                     	ds	1
  1335   00004A                     ___fldiv@bexp:
  1336                           	callstack 0
  1337                           
  1338                           ; 1 bytes @ 0x49
  1339   00004A                     	ds	1
  1340   00004B                     ___fldiv@aexp:
  1341                           	callstack 0
  1342   00004B                     decision@color:
  1343                           	callstack 0
  1344                           
  1345                           ; 2 bytes @ 0x4A
  1346   00004B                     	ds	1
  1347   00004C                     ?___fltol:
  1348                           	callstack 0
  1349   00004C                     ___fltol@f1:
  1350                           	callstack 0
  1351                           
  1352                           ; 4 bytes @ 0x4B
  1353   00004C                     	ds	4
  1354   000050                     ??___fltol:
  1355                           
  1356                           ; 1 bytes @ 0x4F
  1357   000050                     	ds	4
  1358   000054                     ___fltol@sign1:
  1359                           	callstack 0
  1360                           
  1361                           ; 1 bytes @ 0x53
  1362   000054                     	ds	1
  1363   000055                     ___fltol@exp1:
  1364                           	callstack 0
  1365                           
  1366                           ; 1 bytes @ 0x54
  1367   000055                     	ds	1
  1368   000056                     ?_convert_rgb2hue:
  1369                           	callstack 0
  1370   000056                     convert_rgb2hue@cMax:
  1371                           	callstack 0
  1372   000056                     fullSpeedAhead@mL:
  1373                           	callstack 0
  1374                           
  1375                           ; 1 bytes @ 0x55
  1376   000056                     	ds	1
  1377   000057                     convert_rgb2hue@cCurr:
  1378                           	callstack 0
  1379   000057                     fullSpeedAhead@mR:
  1380                           	callstack 0
  1381                           
  1382                           ; 1 bytes @ 0x56
  1383   000057                     	ds	1
  1384   000058                     ??_convert_rgb2hue:
  1385   000058                     ??_fullSpeedAhead:
  1386                           
  1387                           ; 1 bytes @ 0x57
  1388   000058                     	ds	1
  1389   000059                     fullSpeedAhead@power:
  1390                           	callstack 0
  1391                           
  1392                           ; 2 bytes @ 0x58
  1393   000059                     	ds	1
  1394   00005A                     ?_reading_hue:
  1395                           	callstack 0
  1396   00005A                     reading_hue@cCurr:
  1397                           	callstack 0
  1398                           
  1399                           ; 1 bytes @ 0x59
  1400   00005A                     	ds	1
  1401   00005B                     ??_reverseStraight:
  1402                           
  1403                           ; 1 bytes @ 0x5A
  1404   00005B                     	ds	2
  1405   00005D                     
  1406                           ; 1 bytes @ 0x5C
  1407 ;;
  1408 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1409 ;;
  1410 ;; *************** function _main *****************
  1411 ;; Defined at:
  1412 ;;		line 29 in file "main.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;  white           2    0        unsigned int 
  1417 ;;  current         4   82[BANK0 ] float 
  1418 ;;  path_step       2   92[BANK0 ] unsigned int 
  1419 ;;  hue             2   90[BANK0 ] unsigned int 
  1420 ;;  clear_norm      2   88[BANK0 ] unsigned int 
  1421 ;;  PWMcycle        2    0        unsigned int 
  1422 ;;  ambient         2   86[BANK0 ] unsigned int 
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      void 
  1425 ;; Registers used:
  1426 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1433 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1434 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1435 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1436 ;;Total ram usage:       14 bytes
  1437 ;; Hardware stack levels required when called: 11
  1438 ;; This function calls:
  1439 ;;		_ADC_init
  1440 ;;		___fldiv
  1441 ;;		___flmul
  1442 ;;		___flsub
  1443 ;;		___fltol
  1444 ;;		___xxtofl
  1445 ;;		_calibration_routine
  1446 ;;		_color_click_init
  1447 ;;		_color_read_Clear
  1448 ;;		_decision
  1449 ;;		_fullSpeedAhead
  1450 ;;		_get16bitTMR0val
  1451 ;;		_initDCmotorsPWM
  1452 ;;		_initUSART4
  1453 ;;		_reading_hue
  1454 ;;		_returnHome
  1455 ;;		_send2USART
  1456 ;;		_stop
  1457 ;; This function is called by:
  1458 ;;		Startup code after reset
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           	psect	text0
  1463   0022DC                     __ptext0:
  1464                           	callstack 0
  1465   0022DC                     _main:
  1466                           	callstack 20
  1467   0022DC                     
  1468                           ;main.c: 31:     ADC_init();
  1469   0022DC  EC23  F024         	call	_ADC_init	;wreg free
  1470   0022E0                     
  1471                           ;main.c: 32:     color_click_init();
  1472   0022E0  ECDE  F021         	call	_color_click_init	;wreg free
  1473   0022E4                     
  1474                           ;main.c: 33:     initUSART4();
  1475   0022E4  EC05  F024         	call	_initUSART4	;wreg free
  1476   0022E8                     
  1477                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
  1478   0022E8  0E00               	movlw	0
  1479   0022EA  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1480   0022EC  0E63               	movlw	99
  1481   0022EE  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1482   0022F0  EC86  F01E         	call	_initDCmotorsPWM	;wreg free
  1483   0022F4                     
  1484                           ;main.c: 40:     motorL.power = 0;
  1485   0022F4  0E00               	movlw	0
  1486   0022F6  0100               	movlb	0	; () banked
  1487   0022F8  6FEE               	movwf	_motorL& (0+255),b
  1488   0022FA                     
  1489                           ; BSR set to: 0
  1490                           ;main.c: 41:     motorL.direction = 1;
  1491   0022FA  0E01               	movlw	1
  1492   0022FC  6FEF               	movwf	(_motorL+1)& (0+255),b
  1493   0022FE                     
  1494                           ; BSR set to: 0
  1495                           ;main.c: 42:     motorL.brakemode = 1;
  1496   0022FE  0E01               	movlw	1
  1497   002300  6FF0               	movwf	(_motorL+2)& (0+255),b
  1498   002302                     
  1499                           ; BSR set to: 0
  1500                           ;main.c: 43:     motorL.PWMperiod = PWMcycle;
  1501   002302  0E00               	movlw	0
  1502   002304  6FF2               	movwf	(_motorL+4)& (0+255),b
  1503   002306  0E63               	movlw	99
  1504   002308  6FF1               	movwf	(_motorL+3)& (0+255),b
  1505   00230A                     
  1506                           ; BSR set to: 0
  1507                           ;main.c: 44:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1508   00230A  0EAA               	movlw	170
  1509   00230C  6FF3               	movwf	(_motorL+5)& (0+255),b
  1510   00230E  0E0F               	movlw	15
  1511   002310  6FF4               	movwf	(_motorL+6)& (0+255),b
  1512   002312                     
  1513                           ; BSR set to: 0
  1514                           ;main.c: 45:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1515   002312  0EA6               	movlw	166
  1516   002314  6FF5               	movwf	(_motorL+7)& (0+255),b
  1517   002316  0E0F               	movlw	15
  1518   002318  6FF6               	movwf	(_motorL+8)& (0+255),b
  1519   00231A                     
  1520                           ; BSR set to: 0
  1521                           ;main.c: 47:     motorR.power = 0;
  1522   00231A  0E00               	movlw	0
  1523   00231C  6FE5               	movwf	_motorR& (0+255),b
  1524   00231E                     
  1525                           ; BSR set to: 0
  1526                           ;main.c: 48:     motorR.direction = 1;
  1527   00231E  0E01               	movlw	1
  1528   002320  6FE6               	movwf	(_motorR+1)& (0+255),b
  1529   002322                     
  1530                           ; BSR set to: 0
  1531                           ;main.c: 49:     motorR.brakemode = 1;
  1532   002322  0E01               	movlw	1
  1533   002324  6FE7               	movwf	(_motorR+2)& (0+255),b
  1534   002326                     
  1535                           ; BSR set to: 0
  1536                           ;main.c: 50:     motorR.PWMperiod = PWMcycle;
  1537   002326  0E00               	movlw	0
  1538   002328  6FE9               	movwf	(_motorR+4)& (0+255),b
  1539   00232A  0E63               	movlw	99
  1540   00232C  6FE8               	movwf	(_motorR+3)& (0+255),b
  1541                           
  1542                           ;main.c: 51:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1543   00232E  0E25               	movlw	37
  1544   002330  6FEA               	movwf	(_motorR+5)& (0+255),b
  1545   002332  0E0F               	movlw	15
  1546   002334  6FEB               	movwf	(_motorR+6)& (0+255),b
  1547                           
  1548                           ;main.c: 52:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1549   002336  0E21               	movlw	33
  1550   002338  6FEC               	movwf	(_motorR+7)& (0+255),b
  1551   00233A  0E0F               	movlw	15
  1552   00233C  6FED               	movwf	(_motorR+8)& (0+255),b
  1553   00233E                     
  1554                           ; BSR set to: 0
  1555                           ;main.c: 55:     LATDbits.LATD7=0;
  1556   00233E  9E7C               	bcf	124,7,c	;volatile
  1557   002340                     
  1558                           ; BSR set to: 0
  1559                           ;main.c: 56:     TRISDbits.TRISD7=0;
  1560   002340  9E84               	bcf	132,7,c	;volatile
  1561   002342                     
  1562                           ; BSR set to: 0
  1563                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1564   002342  9087               	bcf	135,0,c	;volatile
  1565   002344                     
  1566                           ; BSR set to: 0
  1567                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1568   002344  907F               	bcf	127,0,c	;volatile
  1569   002346                     
  1570                           ; BSR set to: 0
  1571                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1572   002346  9E85               	bcf	133,7,c	;volatile
  1573   002348                     
  1574                           ; BSR set to: 0
  1575                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1576   002348  9E7D               	bcf	125,7,c	;volatile
  1577   00234A                     
  1578                           ; BSR set to: 0
  1579                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1580   00234A  9681               	bcf	129,3,c	;volatile
  1581   00234C                     
  1582                           ; BSR set to: 0
  1583                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1584   00234C  9679               	bcf	121,3,c	;volatile
  1585   00234E                     
  1586                           ; BSR set to: 0
  1587                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1588   00234E  8686               	bsf	134,3,c	;volatile
  1589   002350                     
  1590                           ; BSR set to: 0
  1591                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1592   002350  010E               	movlb	14	; () banked
  1593   002352  97B4               	bcf	180,3,b	;volatile
  1594   002354                     
  1595                           ; BSR set to: 14
  1596                           ;main.c: 75:     TRISFbits.TRISF2 = 1;
  1597   002354  8486               	bsf	134,2,c	;volatile
  1598   002356                     
  1599                           ; BSR set to: 14
  1600                           ;main.c: 76:     LATFbits.LATF2 = 0;
  1601   002356  947E               	bcf	126,2,c	;volatile
  1602   002358                     
  1603                           ; BSR set to: 14
  1604                           ;main.c: 77:     ANSELFbits.ANSELF2 = 0;
  1605   002358  95B4               	bcf	180,2,b	;volatile
  1606   00235A                     
  1607                           ; BSR set to: 14
  1608                           ;main.c: 80:     TRISGbits.TRISG1 = 0;
  1609   00235A  9287               	bcf	135,1,c	;volatile
  1610   00235C                     
  1611                           ; BSR set to: 14
  1612                           ;main.c: 81:     LATGbits.LATG1 = 0;
  1613   00235C  927F               	bcf	127,1,c	;volatile
  1614   00235E                     
  1615                           ; BSR set to: 14
  1616                           ;main.c: 87:     TRISHbits.TRISH3 = 0;
  1617   00235E  9688               	bcf	136,3,c	;volatile
  1618   002360                     
  1619                           ; BSR set to: 14
  1620                           ;main.c: 88:     LATHbits.LATH3 = 1;
  1621   002360  8680               	bsf	128,3,c	;volatile
  1622   002362                     
  1623                           ; BSR set to: 14
  1624                           ;main.c: 89:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1625   002362  0E19               	movlw	25
  1626   002364  0100               	movlb	0	; () banked
  1627   002366  6FB1               	movwf	(??_main+1)& (0+255),b
  1628   002368  0E5A               	movlw	90
  1629   00236A  6FB0               	movwf	??_main& (0+255),b
  1630   00236C  0EB1               	movlw	177
  1631   00236E                     u5147:
  1632   00236E  2EE8               	decfsz	wreg,f,c
  1633   002370  D7FE               	bra	u5147
  1634   002372  2FB0               	decfsz	??_main& (0+255),f,b
  1635   002374  D7FC               	bra	u5147
  1636   002376  2FB1               	decfsz	(??_main+1)& (0+255),f,b
  1637   002378  D7FA               	bra	u5147
  1638   00237A  D000               	nop2	
  1639   00237C                     
  1640                           ;main.c: 90:     LATHbits.LATH3 = 0;
  1641   00237C  9680               	bcf	128,3,c	;volatile
  1642   00237E                     
  1643                           ;main.c: 94:     calibration_routine(&colorCalibration);
  1644   00237E  0EDB               	movlw	low _colorCalibration
  1645   002380  6E45               	movwf	calibration_routine@cCal^0,c
  1646   002382  EC5A  F014         	call	_calibration_routine	;wreg free
  1647   002386                     
  1648                           ;main.c: 96:     unsigned int clear_norm;;main.c: 97:     float current;;main.c: 98:    
      +                           unsigned int path_step = 0;
  1649   002386  0E00               	movlw	0
  1650   002388  0100               	movlb	0	; () banked
  1651   00238A  6FBD               	movwf	(main@path_step+1)& (0+255),b
  1652   00238C  0E00               	movlw	0
  1653   00238E  6FBC               	movwf	main@path_step& (0+255),b
  1654   002390                     
  1655                           ; BSR set to: 0
  1656                           ;main.c: 99:     unsigned int hue;;main.c: 100:     unsigned int ambient;;main.c: 102:  
      +                             ambient = colorCurrent.ambient;
  1657   002390  C0D9  F0B6         	movff	_colorCurrent+8,main@ambient
  1658   002394  C0DA  F0B7         	movff	_colorCurrent+9,main@ambient+1
  1659   002398                     l5742:
  1660                           
  1661                           ;main.c: 108:         LATGbits.LATG0 = 1;
  1662   002398  807F               	bsf	127,0,c	;volatile
  1663   00239A                     
  1664                           ;main.c: 109:         LATEbits.LATE7 = 1;
  1665   00239A  8E7D               	bsf	125,7,c	;volatile
  1666   00239C                     
  1667                           ;main.c: 110:         LATAbits.LATA3 = 1;
  1668   00239C  8679               	bsf	121,3,c	;volatile
  1669   00239E                     
  1670                           ;main.c: 113:         fullSpeedAhead(&motorL,&motorR);
  1671   00239E  0EEE               	movlw	low _motorL
  1672   0023A0  6E56               	movwf	fullSpeedAhead@mL^0,c
  1673   0023A2  0EE5               	movlw	low _motorR
  1674   0023A4  6E57               	movwf	fullSpeedAhead@mR^0,c
  1675   0023A6  EC1B  F01C         	call	_fullSpeedAhead	;wreg free
  1676   0023AA                     
  1677                           ;main.c: 114:         T0CON0bits.T0EN=1;
  1678   0023AA  8ED5               	bsf	213,7,c	;volatile
  1679   0023AC                     
  1680                           ;main.c: 116:         (colorCurrent.clear) = color_read_Clear();
  1681   0023AC  EC8D  F020         	call	_color_read_Clear	;wreg free
  1682   0023B0  C006  F0D7         	movff	?_color_read_Clear,_colorCurrent+6
  1683   0023B4  C007  F0D8         	movff	?_color_read_Clear+1,_colorCurrent+7
  1684   0023B8                     
  1685                           ;main.c: 117:         current = colorCurrent.clear;
  1686   0023B8  C0D7  F002         	movff	_colorCurrent+6,___xxtofl@val
  1687   0023BC  C0D8  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1688   0023C0  6A04               	clrf	(___xxtofl@val+2)^0,c
  1689   0023C2  6A05               	clrf	(___xxtofl@val+3)^0,c
  1690   0023C4  0E00               	movlw	0
  1691   0023C6  EC77  F015         	call	___xxtofl
  1692   0023CA  C002  F0B2         	movff	?___xxtofl,main@current
  1693   0023CE  C003  F0B3         	movff	?___xxtofl+1,main@current+1
  1694   0023D2  C004  F0B4         	movff	?___xxtofl+2,main@current+2
  1695   0023D6  C005  F0B5         	movff	?___xxtofl+3,main@current+3
  1696   0023DA                     
  1697                           ;main.c: 119:         clear_norm = (current-ambient)*100/(colorCalibration.clear - ambie
      +                          nt);
  1698   0023DA  0100               	movlb	0	; () banked
  1699   0023DC  51B6               	movf	main@ambient& (0+255),w,b
  1700   0023DE  5DE1               	subwf	(_colorCalibration+6)& (0+255),w,b
  1701   0023E0  6FB0               	movwf	??_main& (0+255),b
  1702   0023E2  51B7               	movf	(main@ambient+1)& (0+255),w,b
  1703   0023E4  59E2               	subwfb	(_colorCalibration+7)& (0+255),w,b
  1704   0023E6  6FB1               	movwf	(??_main+1)& (0+255),b
  1705   0023E8  C0B0  F002         	movff	??_main,___xxtofl@val
  1706   0023EC  C0B1  F003         	movff	??_main+1,___xxtofl@val+1
  1707   0023F0  6A04               	clrf	(___xxtofl@val+2)^0,c
  1708   0023F2  6A05               	clrf	(___xxtofl@val+3)^0,c
  1709   0023F4  0E00               	movlw	0
  1710   0023F6  EC77  F015         	call	___xxtofl
  1711   0023FA  C002  F037         	movff	?___xxtofl,___fldiv@a
  1712   0023FE  C003  F038         	movff	?___xxtofl+1,___fldiv@a+1
  1713   002402  C004  F039         	movff	?___xxtofl+2,___fldiv@a+2
  1714   002406  C005  F03A         	movff	?___xxtofl+3,___fldiv@a+3
  1715   00240A  0E00               	movlw	0
  1716   00240C  6E1E               	movwf	___flmul@a^0,c
  1717   00240E  0E00               	movlw	0
  1718   002410  6E1F               	movwf	(___flmul@a+1)^0,c
  1719   002412  0EC8               	movlw	200
  1720   002414  6E20               	movwf	(___flmul@a+2)^0,c
  1721   002416  0E42               	movlw	66
  1722   002418  6E21               	movwf	(___flmul@a+3)^0,c
  1723   00241A  C0B6  F002         	movff	main@ambient,___xxtofl@val
  1724   00241E  C0B7  F003         	movff	main@ambient+1,___xxtofl@val+1
  1725   002422  6A04               	clrf	(___xxtofl@val+2)^0,c
  1726   002424  6A05               	clrf	(___xxtofl@val+3)^0,c
  1727   002426  0E00               	movlw	0
  1728   002428  EC77  F015         	call	___xxtofl
  1729   00242C  C002  F016         	movff	?___xxtofl,___flsub@a
  1730   002430  C003  F017         	movff	?___xxtofl+1,___flsub@a+1
  1731   002434  C004  F018         	movff	?___xxtofl+2,___flsub@a+2
  1732   002438  C005  F019         	movff	?___xxtofl+3,___flsub@a+3
  1733   00243C  C0B2  F012         	movff	main@current,___flsub@b
  1734   002440  C0B3  F013         	movff	main@current+1,___flsub@b+1
  1735   002444  C0B4  F014         	movff	main@current+2,___flsub@b+2
  1736   002448  C0B5  F015         	movff	main@current+3,___flsub@b+3
  1737   00244C  ECDD  F020         	call	___flsub	;wreg free
  1738   002450  C012  F01A         	movff	?___flsub,___flmul@b
  1739   002454  C013  F01B         	movff	?___flsub+1,___flmul@b+1
  1740   002458  C014  F01C         	movff	?___flsub+2,___flmul@b+2
  1741   00245C  C015  F01D         	movff	?___flsub+3,___flmul@b+3
  1742   002460  EC8C  F00D         	call	___flmul	;wreg free
  1743   002464  C01A  F033         	movff	?___flmul,___fldiv@b
  1744   002468  C01B  F034         	movff	?___flmul+1,___fldiv@b+1
  1745   00246C  C01C  F035         	movff	?___flmul+2,___fldiv@b+2
  1746   002470  C01D  F036         	movff	?___flmul+3,___fldiv@b+3
  1747   002474  ECA1  F00F         	call	___fldiv	;wreg free
  1748   002478  C033  F04C         	movff	?___fldiv,___fltol@f1
  1749   00247C  C034  F04D         	movff	?___fldiv+1,___fltol@f1+1
  1750   002480  C035  F04E         	movff	?___fldiv+2,___fltol@f1+2
  1751   002484  C036  F04F         	movff	?___fldiv+3,___fltol@f1+3
  1752   002488  ECB0  F019         	call	___fltol	;wreg free
  1753   00248C  C04C  F0B8         	movff	?___fltol,main@clear_norm
  1754   002490  C04D  F0B9         	movff	?___fltol+1,main@clear_norm+1
  1755   002494                     
  1756                           ;main.c: 122:         if (clear_norm > 8){
  1757   002494  0100               	movlb	0	; () banked
  1758   002496  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1759   002498  E109               	bnz	u5070
  1760   00249A  0E09               	movlw	9
  1761   00249C  5DB8               	subwf	main@clear_norm& (0+255),w,b
  1762   00249E  A0D8               	btfss	status,0,c
  1763   0024A0  EF54  F012         	goto	u5071
  1764   0024A4  EF56  F012         	goto	u5070
  1765   0024A8                     u5071:
  1766   0024A8  EFCC  F011         	goto	l5742
  1767   0024AC                     u5070:
  1768   0024AC                     
  1769                           ; BSR set to: 0
  1770                           ;main.c: 124:             stop(&motorL,&motorR);
  1771   0024AC  0EEE               	movlw	low _motorL
  1772   0024AE  6E14               	movwf	stop@mL^0,c
  1773   0024B0  0EE5               	movlw	low _motorR
  1774   0024B2  6E15               	movwf	stop@mR^0,c
  1775   0024B4  ECCE  F01E         	call	_stop	;wreg free
  1776   0024B8                     
  1777                           ;main.c: 127:             path_step = get16bitTMR0val(path_step);
  1778   0024B8  C0BC  F007         	movff	main@path_step,get16bitTMR0val@path_step
  1779   0024BC  C0BD  F008         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  1780   0024C0  ECA5  F021         	call	_get16bitTMR0val	;wreg free
  1781   0024C4  C007  F0BC         	movff	?_get16bitTMR0val,main@path_step
  1782   0024C8  C008  F0BD         	movff	?_get16bitTMR0val+1,main@path_step+1
  1783   0024CC                     
  1784                           ;main.c: 129:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1785   0024CC  0E11               	movlw	17
  1786   0024CE  0100               	movlb	0	; () banked
  1787   0024D0  6FB1               	movwf	(??_main+1)& (0+255),b
  1788   0024D2  0E3C               	movlw	60
  1789   0024D4  6FB0               	movwf	??_main& (0+255),b
  1790   0024D6  0ECB               	movlw	203
  1791   0024D8                     u5157:
  1792   0024D8  2EE8               	decfsz	wreg,f,c
  1793   0024DA  D7FE               	bra	u5157
  1794   0024DC  2FB0               	decfsz	??_main& (0+255),f,b
  1795   0024DE  D7FC               	bra	u5157
  1796   0024E0  2FB1               	decfsz	(??_main+1)& (0+255),f,b
  1797   0024E2  D7FA               	bra	u5157
  1798   0024E4                     
  1799                           ;main.c: 132:             fullSpeedAhead(&motorL,&motorR);
  1800   0024E4  0EEE               	movlw	low _motorL
  1801   0024E6  6E56               	movwf	fullSpeedAhead@mL^0,c
  1802   0024E8  0EE5               	movlw	low _motorR
  1803   0024EA  6E57               	movwf	fullSpeedAhead@mR^0,c
  1804   0024EC  EC1B  F01C         	call	_fullSpeedAhead	;wreg free
  1805   0024F0                     
  1806                           ;main.c: 133:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1807   0024F0  0E19               	movlw	25
  1808   0024F2  0100               	movlb	0	; () banked
  1809   0024F4  6FB1               	movwf	(??_main+1)& (0+255),b
  1810   0024F6  0E5A               	movlw	90
  1811   0024F8  6FB0               	movwf	??_main& (0+255),b
  1812   0024FA  0EB1               	movlw	177
  1813   0024FC                     u5167:
  1814   0024FC  2EE8               	decfsz	wreg,f,c
  1815   0024FE  D7FE               	bra	u5167
  1816   002500  2FB0               	decfsz	??_main& (0+255),f,b
  1817   002502  D7FC               	bra	u5167
  1818   002504  2FB1               	decfsz	(??_main+1)& (0+255),f,b
  1819   002506  D7FA               	bra	u5167
  1820   002508  D000               	nop2	
  1821   00250A                     
  1822                           ;main.c: 134:             stop(&motorL,&motorR);
  1823   00250A  0EEE               	movlw	low _motorL
  1824   00250C  6E14               	movwf	stop@mL^0,c
  1825   00250E  0EE5               	movlw	low _motorR
  1826   002510  6E15               	movwf	stop@mR^0,c
  1827   002512  ECCE  F01E         	call	_stop	;wreg free
  1828   002516                     
  1829                           ;main.c: 135:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1830   002516  0E19               	movlw	25
  1831   002518  0100               	movlb	0	; () banked
  1832   00251A  6FB1               	movwf	(??_main+1)& (0+255),b
  1833   00251C  0E5A               	movlw	90
  1834   00251E  6FB0               	movwf	??_main& (0+255),b
  1835   002520  0EB1               	movlw	177
  1836   002522                     u5177:
  1837   002522  2EE8               	decfsz	wreg,f,c
  1838   002524  D7FE               	bra	u5177
  1839   002526  2FB0               	decfsz	??_main& (0+255),f,b
  1840   002528  D7FC               	bra	u5177
  1841   00252A  2FB1               	decfsz	(??_main+1)& (0+255),f,b
  1842   00252C  D7FA               	bra	u5177
  1843   00252E  D000               	nop2	
  1844   002530                     
  1845                           ;main.c: 136:             hue = reading_hue(&colorCurrent);
  1846   002530  0ED1               	movlw	low _colorCurrent
  1847   002532  6E5A               	movwf	reading_hue@cCurr^0,c
  1848   002534  ECA6  F01B         	call	_reading_hue	;wreg free
  1849   002538  C05A  F0BA         	movff	?_reading_hue,main@hue
  1850   00253C  C05B  F0BB         	movff	?_reading_hue+1,main@hue+1
  1851   002540                     
  1852                           ;main.c: 138:          if (clear_norm > 20){
  1853   002540  0100               	movlb	0	; () banked
  1854   002542  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1855   002544  E109               	bnz	u5080
  1856   002546  0E15               	movlw	21
  1857   002548  5DB8               	subwf	main@clear_norm& (0+255),w,b
  1858   00254A  A0D8               	btfss	status,0,c
  1859   00254C  EFAA  F012         	goto	u5081
  1860   002550  EFAC  F012         	goto	u5080
  1861   002554                     u5081:
  1862   002554  EFC5  F012         	goto	l5784
  1863   002558                     u5080:
  1864   002558                     
  1865                           ; BSR set to: 0
  1866                           ;main.c: 139:              fullSpeedAhead(&motorL,&motorR);
  1867   002558  0EEE               	movlw	low _motorL
  1868   00255A  6E56               	movwf	fullSpeedAhead@mL^0,c
  1869   00255C  0EE5               	movlw	low _motorR
  1870   00255E  6E57               	movwf	fullSpeedAhead@mR^0,c
  1871   002560  EC1B  F01C         	call	_fullSpeedAhead	;wreg free
  1872   002564                     
  1873                           ;main.c: 140:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1874   002564  0E09               	movlw	9
  1875   002566  0100               	movlb	0	; () banked
  1876   002568  6FB1               	movwf	(??_main+1)& (0+255),b
  1877   00256A  0E1E               	movlw	30
  1878   00256C  6FB0               	movwf	??_main& (0+255),b
  1879   00256E  0EE4               	movlw	228
  1880   002570                     u5187:
  1881   002570  2EE8               	decfsz	wreg,f,c
  1882   002572  D7FE               	bra	u5187
  1883   002574  2FB0               	decfsz	??_main& (0+255),f,b
  1884   002576  D7FC               	bra	u5187
  1885   002578  2FB1               	decfsz	(??_main+1)& (0+255),f,b
  1886   00257A  D7FA               	bra	u5187
  1887   00257C  0000               	nop	
  1888   00257E                     
  1889                           ;main.c: 141:             stop(&motorL,&motorR);
  1890   00257E  0EEE               	movlw	low _motorL
  1891   002580  6E14               	movwf	stop@mL^0,c
  1892   002582  0EE5               	movlw	low _motorR
  1893   002584  6E15               	movwf	stop@mR^0,c
  1894   002586  ECCE  F01E         	call	_stop	;wreg free
  1895   00258A                     l5784:
  1896                           
  1897                           ;main.c: 143:          if ((clear_norm > 50 && !(hue >= 302 && hue <= 346)) || LATGbits.
      +                          LATG1 == 1) {
  1898   00258A  0100               	movlb	0	; () banked
  1899   00258C  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1900   00258E  E109               	bnz	u5090
  1901   002590  0E33               	movlw	51
  1902   002592  5DB8               	subwf	main@clear_norm& (0+255),w,b
  1903   002594  A0D8               	btfss	status,0,c
  1904   002596  EFCF  F012         	goto	u5091
  1905   00259A  EFD1  F012         	goto	u5090
  1906   00259E                     u5091:
  1907   00259E  EFE7  F012         	goto	l331
  1908   0025A2                     u5090:
  1909   0025A2                     
  1910                           ; BSR set to: 0
  1911   0025A2  0E2E               	movlw	46
  1912   0025A4  5DBA               	subwf	main@hue& (0+255),w,b
  1913   0025A6  0E01               	movlw	1
  1914   0025A8  59BB               	subwfb	(main@hue+1)& (0+255),w,b
  1915   0025AA  A0D8               	btfss	status,0,c
  1916   0025AC  EFDA  F012         	goto	u5101
  1917   0025B0  EFDC  F012         	goto	u5100
  1918   0025B4                     u5101:
  1919   0025B4  EFEE  F012         	goto	l5790
  1920   0025B8                     u5100:
  1921   0025B8                     
  1922                           ; BSR set to: 0
  1923   0025B8  0E5B               	movlw	91
  1924   0025BA  5DBA               	subwf	main@hue& (0+255),w,b
  1925   0025BC  0E01               	movlw	1
  1926   0025BE  59BB               	subwfb	(main@hue+1)& (0+255),w,b
  1927   0025C0  B0D8               	btfsc	status,0,c
  1928   0025C2  EFE5  F012         	goto	u5111
  1929   0025C6  EFE7  F012         	goto	u5110
  1930   0025CA                     u5111:
  1931   0025CA  EFEE  F012         	goto	l5790
  1932   0025CE                     u5110:
  1933   0025CE                     l331:
  1934                           
  1935                           ; BSR set to: 0
  1936   0025CE  A27F               	btfss	127,1,c	;volatile
  1937   0025D0  EFEC  F012         	goto	u5121
  1938   0025D4  EFEE  F012         	goto	u5120
  1939   0025D8                     u5121:
  1940   0025D8  EF00  F013         	goto	l5798
  1941   0025DC                     u5120:
  1942   0025DC                     l5790:
  1943   0025DC                     
  1944                           ; BSR set to: 0
  1945                           ;main.c: 147:                 send2USART(white);
  1946   0025DC  0E00               	movlw	0
  1947   0025DE  6E46               	movwf	(send2USART@hue+1)^0,c
  1948   0025E0  0E08               	movlw	8
  1949   0025E2  6E45               	movwf	send2USART@hue^0,c
  1950   0025E4  EC14  F024         	call	_send2USART	;wreg free
  1951   0025E8                     
  1952                           ;main.c: 148:                 returnHome(&motorL, &motorR, path_step);
  1953   0025E8  0EEE               	movlw	low _motorL
  1954   0025EA  0100               	movlb	0	; () banked
  1955   0025EC  6F68               	movwf	returnHome@mL& (0+255),b
  1956   0025EE  0EE5               	movlw	low _motorR
  1957   0025F0  6F69               	movwf	returnHome@mR& (0+255),b
  1958   0025F2  C0BC  F06A         	movff	main@path_step,returnHome@path_step
  1959   0025F6  C0BD  F06B         	movff	main@path_step+1,returnHome@path_step+1
  1960   0025FA  ECB5  F01A         	call	_returnHome	;wreg free
  1961   0025FE                     
  1962                           ;main.c: 149:                 LATGbits.LATG1 = 0;
  1963   0025FE  927F               	bcf	127,1,c	;volatile
  1964   002600                     l5798:
  1965                           
  1966                           ;main.c: 152:             path_step = decision(hue, path_step);
  1967   002600  C0BA  F047         	movff	main@hue,decision@hue
  1968   002604  C0BB  F048         	movff	main@hue+1,decision@hue+1
  1969   002608  C0BC  F049         	movff	main@path_step,decision@path_step
  1970   00260C  C0BD  F04A         	movff	main@path_step+1,decision@path_step+1
  1971   002610  EC12  F013         	call	_decision	;wreg free
  1972   002614  C047  F0BC         	movff	?_decision,main@path_step
  1973   002618  C048  F0BD         	movff	?_decision+1,main@path_step+1
  1974   00261C  EFCC  F011         	goto	l5742
  1975   002620  EF1D  F000         	goto	start
  1976   002624                     __end_of_main:
  1977                           	callstack 0
  1978                           
  1979 ;; *************** function _returnHome *****************
  1980 ;; Defined at:
  1981 ;;		line 76 in file "return_func.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  mL              1    8[BANK0 ] PTR struct DC_motor
  1984 ;;		 -> motorL(9), 
  1985 ;;  mR              1    9[BANK0 ] PTR struct DC_motor
  1986 ;;		 -> motorR(9), 
  1987 ;;  path_step       2   10[BANK0 ] unsigned int 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  time_ms         4   12[BANK0 ] long 
  1990 ;;  action_turn     1   16[BANK0 ] unsigned char 
  1991 ;;  i               2   17[BANK0 ] unsigned int 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2001 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2002 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2004 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2005 ;;Total ram usage:       11 bytes
  2006 ;; Hardware stack levels used: 1
  2007 ;; Hardware stack levels required when called: 6
  2008 ;; This function calls:
  2009 ;;		___aldiv
  2010 ;;		___lmul
  2011 ;;		_moveWhite
  2012 ;;		_reverseStraight
  2013 ;;		_reverseTurn
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text1
  2020   00356A                     __ptext1:
  2021                           	callstack 0
  2022   00356A                     _returnHome:
  2023                           	callstack 24
  2024   00356A                     
  2025                           ;return_func.c: 76: void returnHome(struct DC_motor *mL, struct DC_motor *mR, unsigned i
      +                          nt path_step);return_func.c: 77: {;return_func.c: 79:     LATGbits.LATG0 = 0;
  2026   00356A  907F               	bcf	127,0,c	;volatile
  2027                           
  2028                           ;return_func.c: 80:     LATEbits.LATE7 = 0;
  2029   00356C  9E7D               	bcf	125,7,c	;volatile
  2030                           
  2031                           ;return_func.c: 81:     LATAbits.LATA3 = 0;
  2032   00356E  9679               	bcf	121,3,c	;volatile
  2033   003570                     
  2034                           ;return_func.c: 83:     moveWhite(&motorL,&motorR);
  2035   003570  0EEE               	movlw	low _motorL
  2036   003572  6E1D               	movwf	moveWhite@mL^0,c
  2037   003574  0EE5               	movlw	low _motorR
  2038   003576  6E1E               	movwf	moveWhite@mR^0,c
  2039   003578  EC2C  F022         	call	_moveWhite	;wreg free
  2040   00357C                     
  2041                           ;return_func.c: 85:     for (unsigned int i = path_step; i>=0; i--) {
  2042   00357C  C06A  F071         	movff	returnHome@path_step,returnHome@i
  2043   003580  C06B  F072         	movff	returnHome@path_step+1,returnHome@i+1
  2044   003584                     l5088:
  2045                           
  2046                           ;return_func.c: 87:         long time_ms = time[i]*65535*4*8192/64000000;
  2047   003584  90D8               	bcf	status,0,c
  2048   003586  0100               	movlb	0	; () banked
  2049   003588  3571               	rlcf	returnHome@i& (0+255),w,b
  2050   00358A  6ED9               	movwf	fsr2l,c
  2051   00358C  3572               	rlcf	(returnHome@i+1)& (0+255),w,b
  2052   00358E  6EDA               	movwf	fsr2h,c
  2053   003590  0E00               	movlw	low _time
  2054   003592  26D9               	addwf	fsr2l,f,c
  2055   003594  0E02               	movlw	high _time
  2056   003596  22DA               	addwfc	fsr2h,f,c
  2057   003598  CFDE F002          	movff	postinc2,___lmul@multiplier
  2058   00359C  CFDD F003          	movff	postdec2,___lmul@multiplier+1
  2059   0035A0  0E00               	movlw	0
  2060   0035A2  BE03               	btfsc	(___lmul@multiplier+1)^0,7,c
  2061   0035A4  0EFF               	movlw	-1
  2062   0035A6  6E04               	movwf	(___lmul@multiplier+2)^0,c
  2063   0035A8  6E05               	movwf	(___lmul@multiplier+3)^0,c
  2064   0035AA  0E00               	movlw	0
  2065   0035AC  6E06               	movwf	___lmul@multiplicand^0,c
  2066   0035AE  0E80               	movlw	128
  2067   0035B0  6E07               	movwf	(___lmul@multiplicand+1)^0,c
  2068   0035B2  0EFF               	movlw	255
  2069   0035B4  6E08               	movwf	(___lmul@multiplicand+2)^0,c
  2070   0035B6  0E7F               	movlw	127
  2071   0035B8  6E09               	movwf	(___lmul@multiplicand+3)^0,c
  2072   0035BA  EC08  F020         	call	___lmul	;wreg free
  2073   0035BE  C002  F00E         	movff	?___lmul,___aldiv@dividend
  2074   0035C2  C003  F00F         	movff	?___lmul+1,___aldiv@dividend+1
  2075   0035C6  C004  F010         	movff	?___lmul+2,___aldiv@dividend+2
  2076   0035CA  C005  F011         	movff	?___lmul+3,___aldiv@dividend+3
  2077   0035CE  0E00               	movlw	0
  2078   0035D0  6E12               	movwf	___aldiv@divisor^0,c
  2079   0035D2  0E90               	movlw	144
  2080   0035D4  6E13               	movwf	(___aldiv@divisor+1)^0,c
  2081   0035D6  0ED0               	movlw	208
  2082   0035D8  6E14               	movwf	(___aldiv@divisor+2)^0,c
  2083   0035DA  0E03               	movlw	3
  2084   0035DC  6E15               	movwf	(___aldiv@divisor+3)^0,c
  2085   0035DE  EC2A  F019         	call	___aldiv	;wreg free
  2086   0035E2  C00E  F06C         	movff	?___aldiv,returnHome@time_ms
  2087   0035E6  C00F  F06D         	movff	?___aldiv+1,returnHome@time_ms+1
  2088   0035EA  C010  F06E         	movff	?___aldiv+2,returnHome@time_ms+2
  2089   0035EE  C011  F06F         	movff	?___aldiv+3,returnHome@time_ms+3
  2090   0035F2                     
  2091                           ;return_func.c: 88:         char action_turn = action[i];
  2092   0035F2  0E3C               	movlw	low _action
  2093   0035F4  0100               	movlb	0	; () banked
  2094   0035F6  2571               	addwf	returnHome@i& (0+255),w,b
  2095   0035F8  6ED9               	movwf	fsr2l,c
  2096   0035FA  0E01               	movlw	high _action
  2097   0035FC  2172               	addwfc	(returnHome@i+1)& (0+255),w,b
  2098   0035FE  6EDA               	movwf	fsr2h,c
  2099   003600  50DF               	movf	indf2,w,c
  2100   003602  6F70               	movwf	returnHome@action_turn& (0+255),b
  2101   003604                     
  2102                           ; BSR set to: 0
  2103                           ;return_func.c: 89:         if (action[i] == 0){reverseStraight(&motorL, &motorR, time_m
      +                          s);}
  2104   003604  0E3C               	movlw	low _action
  2105   003606  2571               	addwf	returnHome@i& (0+255),w,b
  2106   003608  6ED9               	movwf	fsr2l,c
  2107   00360A  0E01               	movlw	high _action
  2108   00360C  2172               	addwfc	(returnHome@i+1)& (0+255),w,b
  2109   00360E  6EDA               	movwf	fsr2h,c
  2110   003610  50DF               	movf	indf2,w,c
  2111   003612  A4D8               	btfss	status,2,c
  2112   003614  EF0E  F01B         	goto	u4501
  2113   003618  EF10  F01B         	goto	u4500
  2114   00361C                     u4501:
  2115   00361C  EF20  F01B         	goto	l5096
  2116   003620                     u4500:
  2117   003620                     
  2118                           ; BSR set to: 0
  2119   003620  0EEE               	movlw	low _motorL
  2120   003622  6F60               	movwf	reverseStraight@mL& (0+255),b
  2121   003624  0EE5               	movlw	low _motorR
  2122   003626  6F61               	movwf	reverseStraight@mR& (0+255),b
  2123   003628  C06C  F062         	movff	returnHome@time_ms,reverseStraight@time_ms
  2124   00362C  C06D  F063         	movff	returnHome@time_ms+1,reverseStraight@time_ms+1
  2125   003630  C06E  F064         	movff	returnHome@time_ms+2,reverseStraight@time_ms+2
  2126   003634  C06F  F065         	movff	returnHome@time_ms+3,reverseStraight@time_ms+3
  2127   003638  EC2F  F01B         	call	_reverseStraight	;wreg free
  2128   00363C  EF28  F01B         	goto	l5098
  2129   003640                     l5096:
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;return_func.c: 92:             reverseTurn(&motorL, &motorR,action_turn);
  2133   003640  0EEE               	movlw	low _motorL
  2134   003642  6E1D               	movwf	reverseTurn@mL^0,c
  2135   003644  0EE5               	movlw	low _motorR
  2136   003646  6E1E               	movwf	reverseTurn@mR^0,c
  2137   003648  C070  F01F         	movff	returnHome@action_turn,reverseTurn@actionStep
  2138   00364C  ECD1  F017         	call	_reverseTurn	;wreg free
  2139   003650                     l5098:
  2140                           
  2141                           ;return_func.c: 95:     }
  2142   003650  0100               	movlb	0	; () banked
  2143   003652  0771               	decf	returnHome@i& (0+255),f,b
  2144   003654  A0D8               	btfss	status,0,c
  2145   003656  0772               	decf	(returnHome@i+1)& (0+255),f,b
  2146   003658  EFC2  F01A         	goto	l5088
  2147   00365C  0012               	return		;funcret
  2148   00365E                     __end_of_returnHome:
  2149                           	callstack 0
  2150                           
  2151 ;; *************** function _reverseTurn *****************
  2152 ;; Defined at:
  2153 ;;		line 23 in file "return_func.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2156 ;;		 -> motorL(9), 
  2157 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2158 ;;		 -> motorR(9), 
  2159 ;;  actionStep      1   30[COMRAM] unsigned char 
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;		None
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2171 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2173 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2174 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2175 ;;Total ram usage:        5 bytes
  2176 ;; Hardware stack levels used: 1
  2177 ;; Hardware stack levels required when called: 5
  2178 ;; This function calls:
  2179 ;;		_backHalf
  2180 ;;		_left135
  2181 ;;		_left90
  2182 ;;		_right135
  2183 ;;		_right90
  2184 ;;		_turn180
  2185 ;; This function is called by:
  2186 ;;		_returnHome
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text2
  2191   002FA2                     __ptext2:
  2192                           	callstack 0
  2193   002FA2                     _reverseTurn:
  2194                           	callstack 24
  2195   002FA2                     
  2196                           ;return_func.c: 24:     if (actionStep == 1) {
  2197   002FA2  041F               	decf	reverseTurn@actionStep^0,w,c
  2198   002FA4  A4D8               	btfss	status,2,c
  2199   002FA6  EFD7  F017         	goto	u4131
  2200   002FAA  EFD9  F017         	goto	u4130
  2201   002FAE                     u4131:
  2202   002FAE  EFF3  F017         	goto	l4722
  2203   002FB2                     u4130:
  2204   002FB2                     
  2205                           ;return_func.c: 25:         backHalf(mL,mR);
  2206   002FB2  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2207   002FB6  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2208   002FBA  ECA1  F023         	call	_backHalf	;wreg free
  2209   002FBE                     
  2210                           ;return_func.c: 26:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2211   002FBE  0E29               	movlw	41
  2212   002FC0  6E21               	movwf	(??_reverseTurn+1)^0,c
  2213   002FC2  0E96               	movlw	150
  2214   002FC4  6E20               	movwf	??_reverseTurn^0,c
  2215   002FC6  0E7F               	movlw	127
  2216   002FC8                     u5197:
  2217   002FC8  2EE8               	decfsz	wreg,f,c
  2218   002FCA  D7FE               	bra	u5197
  2219   002FCC  2E20               	decfsz	??_reverseTurn^0,f,c
  2220   002FCE  D7FC               	bra	u5197
  2221   002FD0  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2222   002FD2  D7FA               	bra	u5197
  2223   002FD4  0000               	nop	
  2224   002FD6                     
  2225                           ;return_func.c: 27:         left90(mL,mR);
  2226   002FD6  C01D  F019         	movff	reverseTurn@mL,left90@mL
  2227   002FDA  C01E  F01A         	movff	reverseTurn@mR,left90@mR
  2228   002FDE  EC89  F023         	call	_left90	;wreg free
  2229                           
  2230                           ;return_func.c: 28:     } else if (actionStep == 2) {
  2231   002FE2  EF7F  F018         	goto	l708
  2232   002FE6                     l4722:
  2233   002FE6  0E02               	movlw	2
  2234   002FE8  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2235   002FEA  A4D8               	btfss	status,2,c
  2236   002FEC  EFFA  F017         	goto	u4141
  2237   002FF0  EFFC  F017         	goto	u4140
  2238   002FF4                     u4141:
  2239   002FF4  EF16  F018         	goto	l4730
  2240   002FF8                     u4140:
  2241   002FF8                     
  2242                           ;return_func.c: 30:         backHalf(mL,mR);
  2243   002FF8  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2244   002FFC  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2245   003000  ECA1  F023         	call	_backHalf	;wreg free
  2246   003004                     
  2247                           ;return_func.c: 31:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2248   003004  0E29               	movlw	41
  2249   003006  6E21               	movwf	(??_reverseTurn+1)^0,c
  2250   003008  0E96               	movlw	150
  2251   00300A  6E20               	movwf	??_reverseTurn^0,c
  2252   00300C  0E7F               	movlw	127
  2253   00300E                     u5207:
  2254   00300E  2EE8               	decfsz	wreg,f,c
  2255   003010  D7FE               	bra	u5207
  2256   003012  2E20               	decfsz	??_reverseTurn^0,f,c
  2257   003014  D7FC               	bra	u5207
  2258   003016  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2259   003018  D7FA               	bra	u5207
  2260   00301A  0000               	nop	
  2261   00301C                     
  2262                           ;return_func.c: 32:         right90(mL,mR);
  2263   00301C  C01D  F019         	movff	reverseTurn@mL,right90@mL
  2264   003020  C01E  F01A         	movff	reverseTurn@mR,right90@mR
  2265   003024  EC71  F023         	call	_right90	;wreg free
  2266                           
  2267                           ;return_func.c: 33:     } else if (actionStep == 3) {
  2268   003028  EF7F  F018         	goto	l708
  2269   00302C                     l4730:
  2270   00302C  0E03               	movlw	3
  2271   00302E  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2272   003030  A4D8               	btfss	status,2,c
  2273   003032  EF1D  F018         	goto	u4151
  2274   003036  EF1F  F018         	goto	u4150
  2275   00303A                     u4151:
  2276   00303A  EF39  F018         	goto	l4738
  2277   00303E                     u4150:
  2278   00303E                     
  2279                           ;return_func.c: 35:          backHalf(mL,mR);
  2280   00303E  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2281   003042  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2282   003046  ECA1  F023         	call	_backHalf	;wreg free
  2283   00304A                     
  2284                           ;return_func.c: 36:          _delay((unsigned long)((500)*(64000000/4000.0)));
  2285   00304A  0E29               	movlw	41
  2286   00304C  6E21               	movwf	(??_reverseTurn+1)^0,c
  2287   00304E  0E96               	movlw	150
  2288   003050  6E20               	movwf	??_reverseTurn^0,c
  2289   003052  0E7F               	movlw	127
  2290   003054                     u5217:
  2291   003054  2EE8               	decfsz	wreg,f,c
  2292   003056  D7FE               	bra	u5217
  2293   003058  2E20               	decfsz	??_reverseTurn^0,f,c
  2294   00305A  D7FC               	bra	u5217
  2295   00305C  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2296   00305E  D7FA               	bra	u5217
  2297   003060  0000               	nop	
  2298   003062                     
  2299                           ;return_func.c: 37:         turn180(mL,mR);
  2300   003062  C01D  F019         	movff	reverseTurn@mL,turn180@mL
  2301   003066  C01E  F01A         	movff	reverseTurn@mR,turn180@mR
  2302   00306A  EC3F  F023         	call	_turn180	;wreg free
  2303                           
  2304                           ;return_func.c: 38:     } else if (actionStep == 4) {
  2305   00306E  EF7F  F018         	goto	l708
  2306   003072                     l4738:
  2307   003072  0E04               	movlw	4
  2308   003074  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2309   003076  A4D8               	btfss	status,2,c
  2310   003078  EF40  F018         	goto	u4161
  2311   00307C  EF42  F018         	goto	u4160
  2312   003080                     u4161:
  2313   003080  EF5C  F018         	goto	l4746
  2314   003084                     u4160:
  2315   003084                     
  2316                           ;return_func.c: 40:         backHalf(mL,mR);
  2317   003084  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2318   003088  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2319   00308C  ECA1  F023         	call	_backHalf	;wreg free
  2320   003090                     
  2321                           ;return_func.c: 41:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2322   003090  0E29               	movlw	41
  2323   003092  6E21               	movwf	(??_reverseTurn+1)^0,c
  2324   003094  0E96               	movlw	150
  2325   003096  6E20               	movwf	??_reverseTurn^0,c
  2326   003098  0E7F               	movlw	127
  2327   00309A                     u5227:
  2328   00309A  2EE8               	decfsz	wreg,f,c
  2329   00309C  D7FE               	bra	u5227
  2330   00309E  2E20               	decfsz	??_reverseTurn^0,f,c
  2331   0030A0  D7FC               	bra	u5227
  2332   0030A2  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2333   0030A4  D7FA               	bra	u5227
  2334   0030A6  0000               	nop	
  2335   0030A8                     
  2336                           ;return_func.c: 42:         left135(mL,mR);
  2337   0030A8  C01D  F019         	movff	reverseTurn@mL,left135@mL
  2338   0030AC  C01E  F01A         	movff	reverseTurn@mR,left135@mR
  2339   0030B0  ECF4  F022         	call	_left135	;wreg free
  2340                           
  2341                           ;return_func.c: 43:     } else if (actionStep == 5) {
  2342   0030B4  EF7F  F018         	goto	l708
  2343   0030B8                     l4746:
  2344   0030B8  0E05               	movlw	5
  2345   0030BA  181F               	xorwf	reverseTurn@actionStep^0,w,c
  2346   0030BC  A4D8               	btfss	status,2,c
  2347   0030BE  EF63  F018         	goto	u4171
  2348   0030C2  EF65  F018         	goto	u4170
  2349   0030C6                     u4171:
  2350   0030C6  EF7F  F018         	goto	l702
  2351   0030CA                     u4170:
  2352   0030CA                     
  2353                           ;return_func.c: 44:         backHalf(mL,mR);
  2354   0030CA  C01D  F019         	movff	reverseTurn@mL,backHalf@mL
  2355   0030CE  C01E  F01A         	movff	reverseTurn@mR,backHalf@mR
  2356   0030D2  ECA1  F023         	call	_backHalf	;wreg free
  2357   0030D6                     
  2358                           ;return_func.c: 45:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2359   0030D6  0E29               	movlw	41
  2360   0030D8  6E21               	movwf	(??_reverseTurn+1)^0,c
  2361   0030DA  0E96               	movlw	150
  2362   0030DC  6E20               	movwf	??_reverseTurn^0,c
  2363   0030DE  0E7F               	movlw	127
  2364   0030E0                     u5237:
  2365   0030E0  2EE8               	decfsz	wreg,f,c
  2366   0030E2  D7FE               	bra	u5237
  2367   0030E4  2E20               	decfsz	??_reverseTurn^0,f,c
  2368   0030E6  D7FC               	bra	u5237
  2369   0030E8  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2370   0030EA  D7FA               	bra	u5237
  2371   0030EC  0000               	nop	
  2372   0030EE                     
  2373                           ;return_func.c: 46:         right135(mL,mR);
  2374   0030EE  C01D  F019         	movff	reverseTurn@mL,right135@mL
  2375   0030F2  C01E  F01A         	movff	reverseTurn@mR,right135@mR
  2376   0030F6  ECC2  F022         	call	_right135	;wreg free
  2377   0030FA  EF7F  F018         	goto	l708
  2378   0030FE                     l702:
  2379   0030FE                     l708:
  2380   0030FE  0012               	return		;funcret
  2381   003100                     __end_of_reverseTurn:
  2382                           	callstack 0
  2383                           
  2384 ;; *************** function _reverseStraight *****************
  2385 ;; Defined at:
  2386 ;;		line 59 in file "return_func.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;  mL              1    0[BANK0 ] PTR struct DC_motor
  2389 ;;		 -> motorL(9), 
  2390 ;;  mR              1    1[BANK0 ] PTR struct DC_motor
  2391 ;;		 -> motorR(9), 
  2392 ;;  time_ms         4    2[BANK0 ] long 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  delayMs         2    6[BANK0 ] unsigned int 
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      void 
  2397 ;; Registers used:
  2398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2404 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2405 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2406 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2407 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2408 ;;Total ram usage:       10 bytes
  2409 ;; Hardware stack levels used: 1
  2410 ;; Hardware stack levels required when called: 4
  2411 ;; This function calls:
  2412 ;;		_customDelayMs
  2413 ;;		_fullSpeedAhead
  2414 ;;		_stop
  2415 ;; This function is called by:
  2416 ;;		_returnHome
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text3
  2421   00365E                     __ptext3:
  2422                           	callstack 0
  2423   00365E                     _reverseStraight:
  2424                           	callstack 25
  2425   00365E                     
  2426                           ;return_func.c: 59: void reverseStraight(struct DC_motor *mL, struct DC_motor *mR, long 
      +                          time_ms);return_func.c: 60: {;return_func.c: 62:     unsigned int delayMs = 1000;
  2427   00365E  0E03               	movlw	3
  2428   003660  0100               	movlb	0	; () banked
  2429   003662  6F67               	movwf	(reverseStraight@delayMs+1)& (0+255),b
  2430   003664  0EE8               	movlw	232
  2431   003666  6F66               	movwf	reverseStraight@delayMs& (0+255),b
  2432   003668                     
  2433                           ; BSR set to: 0
  2434                           ;return_func.c: 65:     if (time_ms>5500){delayMs = 3000; }
  2435   003668  BF65               	btfsc	(reverseStraight@time_ms+3)& (0+255),7,b
  2436   00366A  EF43  F01B         	goto	u4181
  2437   00366E  5165               	movf	(reverseStraight@time_ms+3)& (0+255),w,b
  2438   003670  1164               	iorwf	(reverseStraight@time_ms+2)& (0+255),w,b
  2439   003672  E10B               	bnz	u4180
  2440   003674  0E7D               	movlw	125
  2441   003676  5D62               	subwf	reverseStraight@time_ms& (0+255),w,b
  2442   003678  0E15               	movlw	21
  2443   00367A  5963               	subwfb	(reverseStraight@time_ms+1)& (0+255),w,b
  2444   00367C  A0D8               	btfss	status,0,c
  2445   00367E  EF43  F01B         	goto	u4181
  2446   003682  EF45  F01B         	goto	u4180
  2447   003686                     u4181:
  2448   003686  EF4B  F01B         	goto	l4760
  2449   00368A                     u4180:
  2450   00368A                     
  2451                           ; BSR set to: 0
  2452   00368A  0E0B               	movlw	11
  2453   00368C  6F67               	movwf	(reverseStraight@delayMs+1)& (0+255),b
  2454   00368E  0EB8               	movlw	184
  2455   003690  6F66               	movwf	reverseStraight@delayMs& (0+255),b
  2456   003692  EF88  F01B         	goto	l4770
  2457   003696                     l4760:
  2458                           
  2459                           ; BSR set to: 0
  2460   003696  BF65               	btfsc	(reverseStraight@time_ms+3)& (0+255),7,b
  2461   003698  EF5A  F01B         	goto	u4191
  2462   00369C  5165               	movf	(reverseStraight@time_ms+3)& (0+255),w,b
  2463   00369E  1164               	iorwf	(reverseStraight@time_ms+2)& (0+255),w,b
  2464   0036A0  E10B               	bnz	u4190
  2465   0036A2  0EB9               	movlw	185
  2466   0036A4  5D62               	subwf	reverseStraight@time_ms& (0+255),w,b
  2467   0036A6  0E0B               	movlw	11
  2468   0036A8  5963               	subwfb	(reverseStraight@time_ms+1)& (0+255),w,b
  2469   0036AA  A0D8               	btfss	status,0,c
  2470   0036AC  EF5A  F01B         	goto	u4191
  2471   0036B0  EF5C  F01B         	goto	u4190
  2472   0036B4                     u4191:
  2473   0036B4  EF73  F01B         	goto	l4766
  2474   0036B8                     u4190:
  2475   0036B8                     
  2476                           ; BSR set to: 0
  2477   0036B8  BF65               	btfsc	(reverseStraight@time_ms+3)& (0+255),7,b
  2478   0036BA  EF6B  F01B         	goto	u4201
  2479   0036BE  5165               	movf	(reverseStraight@time_ms+3)& (0+255),w,b
  2480   0036C0  1164               	iorwf	(reverseStraight@time_ms+2)& (0+255),w,b
  2481   0036C2  E10B               	bnz	u4200
  2482   0036C4  0E05               	movlw	5
  2483   0036C6  5D62               	subwf	reverseStraight@time_ms& (0+255),w,b
  2484   0036C8  0E10               	movlw	16
  2485   0036CA  5963               	subwfb	(reverseStraight@time_ms+1)& (0+255),w,b
  2486   0036CC  A0D8               	btfss	status,0,c
  2487   0036CE  EF6B  F01B         	goto	u4201
  2488   0036D2  EF6D  F01B         	goto	u4200
  2489   0036D6                     u4201:
  2490   0036D6  EF73  F01B         	goto	l4766
  2491   0036DA                     u4200:
  2492   0036DA                     
  2493                           ; BSR set to: 0
  2494   0036DA  0E07               	movlw	7
  2495   0036DC  6F67               	movwf	(reverseStraight@delayMs+1)& (0+255),b
  2496   0036DE  0ED0               	movlw	208
  2497   0036E0  6F66               	movwf	reverseStraight@delayMs& (0+255),b
  2498   0036E2  EF88  F01B         	goto	l4770
  2499   0036E6                     l4766:
  2500                           
  2501                           ; BSR set to: 0
  2502   0036E6  BF65               	btfsc	(reverseStraight@time_ms+3)& (0+255),7,b
  2503   0036E8  EF84  F01B         	goto	u4210
  2504   0036EC  5165               	movf	(reverseStraight@time_ms+3)& (0+255),w,b
  2505   0036EE  1164               	iorwf	(reverseStraight@time_ms+2)& (0+255),w,b
  2506   0036F0  E109               	bnz	u4211
  2507   0036F2  0EB8               	movlw	184
  2508   0036F4  5D62               	subwf	reverseStraight@time_ms& (0+255),w,b
  2509   0036F6  0E0B               	movlw	11
  2510   0036F8  5963               	subwfb	(reverseStraight@time_ms+1)& (0+255),w,b
  2511   0036FA  B0D8               	btfsc	status,0,c
  2512   0036FC  EF82  F01B         	goto	u4211
  2513   003700  EF84  F01B         	goto	u4210
  2514   003704                     u4211:
  2515   003704  EF88  F01B         	goto	l4770
  2516   003708                     u4210:
  2517   003708                     
  2518                           ; BSR set to: 0
  2519   003708  0E03               	movlw	3
  2520   00370A  6F67               	movwf	(reverseStraight@delayMs+1)& (0+255),b
  2521   00370C  0EE8               	movlw	232
  2522   00370E  6F66               	movwf	reverseStraight@delayMs& (0+255),b
  2523   003710                     l4770:
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;return_func.c: 69:     fullSpeedAhead(&motorL,&motorR);
  2527   003710  0EEE               	movlw	low _motorL
  2528   003712  6E56               	movwf	fullSpeedAhead@mL^0,c
  2529   003714  0EE5               	movlw	low _motorR
  2530   003716  6E57               	movwf	fullSpeedAhead@mR^0,c
  2531   003718  EC1B  F01C         	call	_fullSpeedAhead	;wreg free
  2532   00371C                     
  2533                           ;return_func.c: 70:     customDelayMs(delayMs);
  2534   00371C  C066  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2535   003720  C067  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2536   003724  ECC2  F021         	call	_customDelayMs	;wreg free
  2537   003728                     
  2538                           ;return_func.c: 71:     stop(&motorL,&motorR);
  2539   003728  0EEE               	movlw	low _motorL
  2540   00372A  6E14               	movwf	stop@mL^0,c
  2541   00372C  0EE5               	movlw	low _motorR
  2542   00372E  6E15               	movwf	stop@mR^0,c
  2543   003730  ECCE  F01E         	call	_stop	;wreg free
  2544   003734                     
  2545                           ;return_func.c: 72:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2546   003734  0E19               	movlw	25
  2547   003736  6E5C               	movwf	(??_reverseStraight+1)^0,c
  2548   003738  0E5A               	movlw	90
  2549   00373A  6E5B               	movwf	??_reverseStraight^0,c
  2550   00373C  0EB2               	movlw	178
  2551   00373E                     u5247:
  2552   00373E  2EE8               	decfsz	wreg,f,c
  2553   003740  D7FE               	bra	u5247
  2554   003742  2E5B               	decfsz	??_reverseStraight^0,f,c
  2555   003744  D7FC               	bra	u5247
  2556   003746  2E5C               	decfsz	(??_reverseStraight+1)^0,f,c
  2557   003748  D7FA               	bra	u5247
  2558   00374A  0012               	return		;funcret
  2559   00374C                     __end_of_reverseStraight:
  2560                           	callstack 0
  2561                           
  2562 ;; *************** function _fullSpeedAhead *****************
  2563 ;; Defined at:
  2564 ;;		line 144 in file "dc_motor.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;  mL              1   85[COMRAM] PTR struct DC_motor
  2567 ;;		 -> motorL(9), 
  2568 ;;  mR              1   86[COMRAM] PTR struct DC_motor
  2569 ;;		 -> motorR(9), 
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  power           2   88[COMRAM] int 
  2572 ;; Return value:  Size  Location     Type
  2573 ;;                  1    wreg      void 
  2574 ;; Registers used:
  2575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2581 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2582 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2583 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2584 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2585 ;;Total ram usage:        5 bytes
  2586 ;; Hardware stack levels used: 1
  2587 ;; Hardware stack levels required when called: 3
  2588 ;; This function calls:
  2589 ;;		___flmul
  2590 ;;		___fltol
  2591 ;;		___xxtofl
  2592 ;;		_setMotorPWM
  2593 ;; This function is called by:
  2594 ;;		_main
  2595 ;;		_reverseStraight
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           	psect	text4
  2600   003836                     __ptext4:
  2601                           	callstack 0
  2602   003836                     _fullSpeedAhead:
  2603                           	callstack 25
  2604   003836                     
  2605                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2606   003836  5056               	movf	fullSpeedAhead@mL^0,w,c
  2607   003838  6ED9               	movwf	fsr2l,c
  2608   00383A  6ADA               	clrf	fsr2h,c
  2609   00383C  0E01               	movlw	1
  2610   00383E  26D9               	addwf	fsr2l,f,c
  2611   003840  0E01               	movlw	1
  2612   003842  6EDF               	movwf	indf2,c
  2613                           
  2614                           ;dc_motor.c: 148:     mR->direction = 1;
  2615   003844  5057               	movf	fullSpeedAhead@mR^0,w,c
  2616   003846  6ED9               	movwf	fsr2l,c
  2617   003848  6ADA               	clrf	fsr2h,c
  2618   00384A  0E01               	movlw	1
  2619   00384C  26D9               	addwf	fsr2l,f,c
  2620   00384E  0E01               	movlw	1
  2621   003850  6EDF               	movwf	indf2,c
  2622   003852                     
  2623                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2624   003852  0E00               	movlw	0
  2625   003854  6E5A               	movwf	(fullSpeedAhead@power+1)^0,c
  2626   003856  0E00               	movlw	0
  2627   003858  6E59               	movwf	fullSpeedAhead@power^0,c
  2628   00385A                     l4306:
  2629                           
  2630                           ;dc_motor.c: 151:         mL->power = power;
  2631   00385A  5056               	movf	fullSpeedAhead@mL^0,w,c
  2632   00385C  6ED9               	movwf	fsr2l,c
  2633   00385E  6ADA               	clrf	fsr2h,c
  2634   003860  C059  FFDF         	movff	fullSpeedAhead@power,indf2
  2635   003864                     
  2636                           ;dc_motor.c: 152:         mR->power = power*1.6;
  2637   003864  5057               	movf	fullSpeedAhead@mR^0,w,c
  2638   003866  6ED9               	movwf	fsr2l,c
  2639   003868  6ADA               	clrf	fsr2h,c
  2640   00386A  0ECD               	movlw	205
  2641   00386C  6E1E               	movwf	___flmul@a^0,c
  2642   00386E  0ECC               	movlw	204
  2643   003870  6E1F               	movwf	(___flmul@a+1)^0,c
  2644   003872  0ECC               	movlw	204
  2645   003874  6E20               	movwf	(___flmul@a+2)^0,c
  2646   003876  0E3F               	movlw	63
  2647   003878  6E21               	movwf	(___flmul@a+3)^0,c
  2648   00387A  C059  F002         	movff	fullSpeedAhead@power,___xxtofl@val
  2649   00387E  C05A  F003         	movff	fullSpeedAhead@power+1,___xxtofl@val+1
  2650   003882  0E00               	movlw	0
  2651   003884  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  2652   003886  0EFF               	movlw	-1
  2653   003888  6E04               	movwf	(___xxtofl@val+2)^0,c
  2654   00388A  6E05               	movwf	(___xxtofl@val+3)^0,c
  2655   00388C  0E01               	movlw	1
  2656   00388E  EC77  F015         	call	___xxtofl
  2657   003892  C002  F01A         	movff	?___xxtofl,___flmul@b
  2658   003896  C003  F01B         	movff	?___xxtofl+1,___flmul@b+1
  2659   00389A  C004  F01C         	movff	?___xxtofl+2,___flmul@b+2
  2660   00389E  C005  F01D         	movff	?___xxtofl+3,___flmul@b+3
  2661   0038A2  EC8C  F00D         	call	___flmul	;wreg free
  2662   0038A6  C01A  F04C         	movff	?___flmul,___fltol@f1
  2663   0038AA  C01B  F04D         	movff	?___flmul+1,___fltol@f1+1
  2664   0038AE  C01C  F04E         	movff	?___flmul+2,___fltol@f1+2
  2665   0038B2  C01D  F04F         	movff	?___flmul+3,___fltol@f1+3
  2666   0038B6  ECB0  F019         	call	___fltol	;wreg free
  2667   0038BA  504C               	movf	?___fltol^0,w,c
  2668   0038BC  6EDF               	movwf	indf2,c
  2669   0038BE                     
  2670                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2671   0038BE  C056  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2672   0038C2  EC80  F018         	call	_setMotorPWM	;wreg free
  2673   0038C6                     
  2674                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2675   0038C6  C057  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2676   0038CA  EC80  F018         	call	_setMotorPWM	;wreg free
  2677   0038CE                     
  2678                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2679   0038CE  0E0B               	movlw	11
  2680   0038D0  6E58               	movwf	??_fullSpeedAhead^0,c
  2681   0038D2  0E62               	movlw	98
  2682   0038D4                     u5257:
  2683   0038D4  2EE8               	decfsz	wreg,f,c
  2684   0038D6  D7FE               	bra	u5257
  2685   0038D8  2E58               	decfsz	??_fullSpeedAhead^0,f,c
  2686   0038DA  D7FC               	bra	u5257
  2687   0038DC  D000               	nop2	
  2688   0038DE                     
  2689                           ;dc_motor.c: 160:     }
  2690   0038DE  4A59               	infsnz	fullSpeedAhead@power^0,f,c
  2691   0038E0  2A5A               	incf	(fullSpeedAhead@power+1)^0,f,c
  2692   0038E2  BE5A               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2693   0038E4  EF7D  F01C         	goto	u3681
  2694   0038E8  505A               	movf	(fullSpeedAhead@power+1)^0,w,c
  2695   0038EA  E109               	bnz	u3680
  2696   0038EC  0E33               	movlw	51
  2697   0038EE  5C59               	subwf	fullSpeedAhead@power^0,w,c
  2698   0038F0  A0D8               	btfss	status,0,c
  2699   0038F2  EF7D  F01C         	goto	u3681
  2700   0038F6  EF7F  F01C         	goto	u3680
  2701   0038FA                     u3681:
  2702   0038FA  EF2D  F01C         	goto	l4306
  2703   0038FE                     u3680:
  2704   0038FE  0012               	return		;funcret
  2705   003900                     __end_of_fullSpeedAhead:
  2706                           	callstack 0
  2707                           
  2708 ;; *************** function _customDelayMs *****************
  2709 ;; Defined at:
  2710 ;;		line 52 in file "return_func.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  i               2    4[COMRAM] unsigned int 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      void 
  2717 ;; Registers used:
  2718 ;;		wreg, status,2, status,0
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2724 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2725 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2726 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2727 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2728 ;;Total ram usage:        5 bytes
  2729 ;; Hardware stack levels used: 1
  2730 ;; Hardware stack levels required when called: 1
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_reverseStraight
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text5
  2739   004384                     __ptext5:
  2740                           	callstack 0
  2741   004384                     _customDelayMs:
  2742                           	callstack 27
  2743   004384                     
  2744                           ;return_func.c: 53:     for (unsigned int i = 0; i < milliseconds; i++) {
  2745   004384  0E00               	movlw	0
  2746   004386  6E06               	movwf	(customDelayMs@i+1)^0,c
  2747   004388  0E00               	movlw	0
  2748   00438A  6E05               	movwf	customDelayMs@i^0,c
  2749   00438C  EFD2  F021         	goto	l711
  2750   004390                     l4364:
  2751                           
  2752                           ;return_func.c: 54:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2753   004390  0E15               	movlw	21
  2754   004392  6E04               	movwf	??_customDelayMs^0,c
  2755   004394  0EC6               	movlw	198
  2756   004396                     u5267:
  2757   004396  2EE8               	decfsz	wreg,f,c
  2758   004398  D7FE               	bra	u5267
  2759   00439A  2E04               	decfsz	??_customDelayMs^0,f,c
  2760   00439C  D7FC               	bra	u5267
  2761   00439E  D000               	nop2	
  2762   0043A0                     
  2763                           ;return_func.c: 55:     }
  2764   0043A0  4A05               	infsnz	customDelayMs@i^0,f,c
  2765   0043A2  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2766   0043A4                     l711:
  2767   0043A4  5002               	movf	customDelayMs@milliseconds^0,w,c
  2768   0043A6  5C05               	subwf	customDelayMs@i^0,w,c
  2769   0043A8  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2770   0043AA  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2771   0043AC  A0D8               	btfss	status,0,c
  2772   0043AE  EFDB  F021         	goto	u3691
  2773   0043B2  EFDD  F021         	goto	u3690
  2774   0043B6                     u3691:
  2775   0043B6  EFC8  F021         	goto	l4364
  2776   0043BA                     u3690:
  2777   0043BA  0012               	return		;funcret
  2778   0043BC                     __end_of_customDelayMs:
  2779                           	callstack 0
  2780                           
  2781 ;; *************** function _moveWhite *****************
  2782 ;; Defined at:
  2783 ;;		line 321 in file "dc_motor.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2786 ;;		 -> motorL(9), 
  2787 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2788 ;;		 -> motorR(9), 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;		None
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  1    wreg      void 
  2793 ;; Registers used:
  2794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2800 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2802 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2803 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2804 ;;Total ram usage:        4 bytes
  2805 ;; Hardware stack levels used: 1
  2806 ;; Hardware stack levels required when called: 5
  2807 ;; This function calls:
  2808 ;;		_backHalf
  2809 ;;		_turn180
  2810 ;; This function is called by:
  2811 ;;		_returnHome
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           	psect	text6
  2816   004458                     __ptext6:
  2817                           	callstack 0
  2818   004458                     _moveWhite:
  2819                           	callstack 24
  2820   004458                     
  2821                           ;dc_motor.c: 321: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          22: {;dc_motor.c: 324:     backHalf(mL,mR);
  2822   004458  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  2823   00445C  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  2824   004460  ECA1  F023         	call	_backHalf	;wreg free
  2825   004464                     
  2826                           ;dc_motor.c: 325:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2827   004464  0E29               	movlw	41
  2828   004466  6E20               	movwf	(??_moveWhite+1)^0,c
  2829   004468  0E96               	movlw	150
  2830   00446A  6E1F               	movwf	??_moveWhite^0,c
  2831   00446C  0E7F               	movlw	127
  2832   00446E                     u5277:
  2833   00446E  2EE8               	decfsz	wreg,f,c
  2834   004470  D7FE               	bra	u5277
  2835   004472  2E1F               	decfsz	??_moveWhite^0,f,c
  2836   004474  D7FC               	bra	u5277
  2837   004476  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  2838   004478  D7FA               	bra	u5277
  2839   00447A  0000               	nop	
  2840   00447C                     
  2841                           ;dc_motor.c: 326:     turn180(mL,mR);
  2842   00447C  C01D  F019         	movff	moveWhite@mL,turn180@mL
  2843   004480  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  2844   004484  EC3F  F023         	call	_turn180	;wreg free
  2845   004488  0012               	return		;funcret
  2846   00448A                     __end_of_moveWhite:
  2847                           	callstack 0
  2848                           
  2849 ;; *************** function ___lmul *****************
  2850 ;; Defined at:
  2851 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  multiplier      4    1[COMRAM] unsigned long 
  2854 ;;  multiplicand    4    5[COMRAM] unsigned long 
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  product         4    9[COMRAM] unsigned long 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  4    1[COMRAM] unsigned long 
  2859 ;; Registers used:
  2860 ;;		wreg, status,2, status,0
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2866 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2867 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2869 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2870 ;;Total ram usage:       12 bytes
  2871 ;; Hardware stack levels used: 1
  2872 ;; Hardware stack levels required when called: 1
  2873 ;; This function calls:
  2874 ;;		Nothing
  2875 ;; This function is called by:
  2876 ;;		_returnHome
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           	psect	text7
  2881   004010                     __ptext7:
  2882                           	callstack 0
  2883   004010                     ___lmul:
  2884                           	callstack 28
  2885   004010  0E00               	movlw	0
  2886   004012  6E0A               	movwf	___lmul@product^0,c
  2887   004014  0E00               	movlw	0
  2888   004016  6E0B               	movwf	(___lmul@product+1)^0,c
  2889   004018  0E00               	movlw	0
  2890   00401A  6E0C               	movwf	(___lmul@product+2)^0,c
  2891   00401C  0E00               	movlw	0
  2892   00401E  6E0D               	movwf	(___lmul@product+3)^0,c
  2893   004020                     l4780:
  2894   004020  A002               	btfss	___lmul@multiplier^0,0,c
  2895   004022  EF15  F020         	goto	u4221
  2896   004026  EF17  F020         	goto	u4220
  2897   00402A                     u4221:
  2898   00402A  EF1F  F020         	goto	l4784
  2899   00402E                     u4220:
  2900   00402E  5006               	movf	___lmul@multiplicand^0,w,c
  2901   004030  260A               	addwf	___lmul@product^0,f,c
  2902   004032  5007               	movf	(___lmul@multiplicand+1)^0,w,c
  2903   004034  220B               	addwfc	(___lmul@product+1)^0,f,c
  2904   004036  5008               	movf	(___lmul@multiplicand+2)^0,w,c
  2905   004038  220C               	addwfc	(___lmul@product+2)^0,f,c
  2906   00403A  5009               	movf	(___lmul@multiplicand+3)^0,w,c
  2907   00403C  220D               	addwfc	(___lmul@product+3)^0,f,c
  2908   00403E                     l4784:
  2909   00403E  90D8               	bcf	status,0,c
  2910   004040  3606               	rlcf	___lmul@multiplicand^0,f,c
  2911   004042  3607               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2912   004044  3608               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2913   004046  3609               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2914   004048  90D8               	bcf	status,0,c
  2915   00404A  3205               	rrcf	(___lmul@multiplier+3)^0,f,c
  2916   00404C  3204               	rrcf	(___lmul@multiplier+2)^0,f,c
  2917   00404E  3203               	rrcf	(___lmul@multiplier+1)^0,f,c
  2918   004050  3202               	rrcf	___lmul@multiplier^0,f,c
  2919   004052  5002               	movf	___lmul@multiplier^0,w,c
  2920   004054  1003               	iorwf	(___lmul@multiplier+1)^0,w,c
  2921   004056  1004               	iorwf	(___lmul@multiplier+2)^0,w,c
  2922   004058  1005               	iorwf	(___lmul@multiplier+3)^0,w,c
  2923   00405A  A4D8               	btfss	status,2,c
  2924   00405C  EF32  F020         	goto	u4231
  2925   004060  EF34  F020         	goto	u4230
  2926   004064                     u4231:
  2927   004064  EF10  F020         	goto	l4780
  2928   004068                     u4230:
  2929   004068  C00A  F002         	movff	___lmul@product,?___lmul
  2930   00406C  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  2931   004070  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  2932   004074  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  2933   004078  0012               	return		;funcret
  2934   00407A                     __end_of___lmul:
  2935                           	callstack 0
  2936                           
  2937 ;; *************** function ___aldiv *****************
  2938 ;; Defined at:
  2939 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  dividend        4   13[COMRAM] long 
  2942 ;;  divisor         4   17[COMRAM] long 
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  quotient        4   23[COMRAM] long 
  2945 ;;  sign            1   22[COMRAM] unsigned char 
  2946 ;;  counter         1   21[COMRAM] unsigned char 
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  4   13[COMRAM] long 
  2949 ;; Registers used:
  2950 ;;		wreg, status,2, status,0
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2956 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2957 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2959 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2960 ;;Total ram usage:       14 bytes
  2961 ;; Hardware stack levels used: 1
  2962 ;; Hardware stack levels required when called: 1
  2963 ;; This function calls:
  2964 ;;		Nothing
  2965 ;; This function is called by:
  2966 ;;		_returnHome
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           	psect	text8
  2971   003254                     __ptext8:
  2972                           	callstack 0
  2973   003254                     ___aldiv:
  2974                           	callstack 28
  2975   003254  0E00               	movlw	0
  2976   003256  6E17               	movwf	___aldiv@sign^0,c
  2977   003258  BE15               	btfsc	(___aldiv@divisor+3)^0,7,c
  2978   00325A  EF33  F019         	goto	u4240
  2979   00325E  EF31  F019         	goto	u4241
  2980   003262                     u4241:
  2981   003262  EF3D  F019         	goto	l4796
  2982   003266                     u4240:
  2983   003266  1E15               	comf	(___aldiv@divisor+3)^0,f,c
  2984   003268  1E14               	comf	(___aldiv@divisor+2)^0,f,c
  2985   00326A  1E13               	comf	(___aldiv@divisor+1)^0,f,c
  2986   00326C  6C12               	negf	___aldiv@divisor^0,c
  2987   00326E  0E00               	movlw	0
  2988   003270  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
  2989   003272  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
  2990   003274  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
  2991   003276  0E01               	movlw	1
  2992   003278  6E17               	movwf	___aldiv@sign^0,c
  2993   00327A                     l4796:
  2994   00327A  BE11               	btfsc	(___aldiv@dividend+3)^0,7,c
  2995   00327C  EF44  F019         	goto	u4250
  2996   003280  EF42  F019         	goto	u4251
  2997   003284                     u4251:
  2998   003284  EF4E  F019         	goto	l4802
  2999   003288                     u4250:
  3000   003288  1E11               	comf	(___aldiv@dividend+3)^0,f,c
  3001   00328A  1E10               	comf	(___aldiv@dividend+2)^0,f,c
  3002   00328C  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
  3003   00328E  6C0E               	negf	___aldiv@dividend^0,c
  3004   003290  0E00               	movlw	0
  3005   003292  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
  3006   003294  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
  3007   003296  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
  3008   003298  0E01               	movlw	1
  3009   00329A  1A17               	xorwf	___aldiv@sign^0,f,c
  3010   00329C                     l4802:
  3011   00329C  0E00               	movlw	0
  3012   00329E  6E18               	movwf	___aldiv@quotient^0,c
  3013   0032A0  0E00               	movlw	0
  3014   0032A2  6E19               	movwf	(___aldiv@quotient+1)^0,c
  3015   0032A4  0E00               	movlw	0
  3016   0032A6  6E1A               	movwf	(___aldiv@quotient+2)^0,c
  3017   0032A8  0E00               	movlw	0
  3018   0032AA  6E1B               	movwf	(___aldiv@quotient+3)^0,c
  3019   0032AC  5012               	movf	___aldiv@divisor^0,w,c
  3020   0032AE  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
  3021   0032B0  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
  3022   0032B2  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
  3023   0032B4  B4D8               	btfsc	status,2,c
  3024   0032B6  EF5F  F019         	goto	u4261
  3025   0032BA  EF61  F019         	goto	u4260
  3026   0032BE                     u4261:
  3027   0032BE  EF97  F019         	goto	l4824
  3028   0032C2                     u4260:
  3029   0032C2  0E01               	movlw	1
  3030   0032C4  6E16               	movwf	___aldiv@counter^0,c
  3031   0032C6  EF6B  F019         	goto	l4810
  3032   0032CA                     l4808:
  3033   0032CA  90D8               	bcf	status,0,c
  3034   0032CC  3612               	rlcf	___aldiv@divisor^0,f,c
  3035   0032CE  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
  3036   0032D0  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
  3037   0032D2  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
  3038   0032D4  2A16               	incf	___aldiv@counter^0,f,c
  3039   0032D6                     l4810:
  3040   0032D6  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
  3041   0032D8  EF70  F019         	goto	u4271
  3042   0032DC  EF72  F019         	goto	u4270
  3043   0032E0                     u4271:
  3044   0032E0  EF65  F019         	goto	l4808
  3045   0032E4                     u4270:
  3046   0032E4                     l4812:
  3047   0032E4  90D8               	bcf	status,0,c
  3048   0032E6  3618               	rlcf	___aldiv@quotient^0,f,c
  3049   0032E8  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
  3050   0032EA  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
  3051   0032EC  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
  3052   0032EE  5012               	movf	___aldiv@divisor^0,w,c
  3053   0032F0  5C0E               	subwf	___aldiv@dividend^0,w,c
  3054   0032F2  5013               	movf	(___aldiv@divisor+1)^0,w,c
  3055   0032F4  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
  3056   0032F6  5014               	movf	(___aldiv@divisor+2)^0,w,c
  3057   0032F8  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
  3058   0032FA  5015               	movf	(___aldiv@divisor+3)^0,w,c
  3059   0032FC  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
  3060   0032FE  A0D8               	btfss	status,0,c
  3061   003300  EF84  F019         	goto	u4281
  3062   003304  EF86  F019         	goto	u4280
  3063   003308                     u4281:
  3064   003308  EF8F  F019         	goto	l4820
  3065   00330C                     u4280:
  3066   00330C  5012               	movf	___aldiv@divisor^0,w,c
  3067   00330E  5E0E               	subwf	___aldiv@dividend^0,f,c
  3068   003310  5013               	movf	(___aldiv@divisor+1)^0,w,c
  3069   003312  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
  3070   003314  5014               	movf	(___aldiv@divisor+2)^0,w,c
  3071   003316  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
  3072   003318  5015               	movf	(___aldiv@divisor+3)^0,w,c
  3073   00331A  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
  3074   00331C  8018               	bsf	___aldiv@quotient^0,0,c
  3075   00331E                     l4820:
  3076   00331E  90D8               	bcf	status,0,c
  3077   003320  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
  3078   003322  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
  3079   003324  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
  3080   003326  3212               	rrcf	___aldiv@divisor^0,f,c
  3081   003328  2E16               	decfsz	___aldiv@counter^0,f,c
  3082   00332A  EF72  F019         	goto	l4812
  3083   00332E                     l4824:
  3084   00332E  5017               	movf	___aldiv@sign^0,w,c
  3085   003330  B4D8               	btfsc	status,2,c
  3086   003332  EF9D  F019         	goto	u4291
  3087   003336  EF9F  F019         	goto	u4290
  3088   00333A                     u4291:
  3089   00333A  EFA7  F019         	goto	l4828
  3090   00333E                     u4290:
  3091   00333E  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
  3092   003340  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
  3093   003342  1E19               	comf	(___aldiv@quotient+1)^0,f,c
  3094   003344  6C18               	negf	___aldiv@quotient^0,c
  3095   003346  0E00               	movlw	0
  3096   003348  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
  3097   00334A  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
  3098   00334C  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
  3099   00334E                     l4828:
  3100   00334E  C018  F00E         	movff	___aldiv@quotient,?___aldiv
  3101   003352  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
  3102   003356  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
  3103   00335A  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
  3104   00335E  0012               	return		;funcret
  3105   003360                     __end_of___aldiv:
  3106                           	callstack 0
  3107                           
  3108 ;; *************** function _reading_hue *****************
  3109 ;; Defined at:
  3110 ;;		line 91 in file "color.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;  cCurr           1   89[COMRAM] PTR struct colors
  3113 ;;		 -> colorCurrent(10), 
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  led_state      50    0        unsigned char [50]
  3116 ;;  hue             2   78[BANK0 ] unsigned int 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  2   89[COMRAM] unsigned int 
  3119 ;; Registers used:
  3120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3126 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3127 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3128 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3129 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3130 ;;Total ram usage:        6 bytes
  3131 ;; Hardware stack levels used: 1
  3132 ;; Hardware stack levels required when called: 4
  3133 ;; This function calls:
  3134 ;;		_color_read_Blue
  3135 ;;		_color_read_Clear
  3136 ;;		_color_read_Green
  3137 ;;		_color_read_Red
  3138 ;;		_convert_rgb2hue
  3139 ;; This function is called by:
  3140 ;;		_main
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text9
  3145   00374C                     __ptext9:
  3146                           	callstack 0
  3147   00374C                     _reading_hue:
  3148                           	callstack 26
  3149   00374C                     
  3150                           ;color.c: 91: unsigned int reading_hue(colors *cCurr);color.c: 92: {;color.c: 93:     un
      +                          signed int hue;;color.c: 95:     char led_state[50];;color.c: 98:     LATGbits.LATG0 = 1
      +                          ;
  3151   00374C  807F               	bsf	127,0,c	;volatile
  3152                           
  3153                           ;color.c: 99:     LATEbits.LATE7 = 0;
  3154   00374E  9E7D               	bcf	125,7,c	;volatile
  3155                           
  3156                           ;color.c: 100:     LATAbits.LATA3 = 0;
  3157   003750  9679               	bcf	121,3,c	;volatile
  3158   003752                     
  3159                           ;color.c: 101:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3160   003752  0E29               	movlw	41
  3161   003754  0100               	movlb	0	; () banked
  3162   003756  6FAD               	movwf	(??_reading_hue+1)& (0+255),b
  3163   003758  0E96               	movlw	150
  3164   00375A  6FAC               	movwf	??_reading_hue& (0+255),b
  3165   00375C  0E7F               	movlw	127
  3166   00375E                     u5287:
  3167   00375E  2EE8               	decfsz	wreg,f,c
  3168   003760  D7FE               	bra	u5287
  3169   003762  2FAC               	decfsz	??_reading_hue& (0+255),f,b
  3170   003764  D7FC               	bra	u5287
  3171   003766  2FAD               	decfsz	(??_reading_hue+1)& (0+255),f,b
  3172   003768  D7FA               	bra	u5287
  3173   00376A                     
  3174                           ;color.c: 102:     (cCurr->red)= color_read_Red();
  3175   00376A  EC3D  F020         	call	_color_read_Red	;wreg free
  3176   00376E  505A               	movf	reading_hue@cCurr^0,w,c
  3177   003770  6ED9               	movwf	fsr2l,c
  3178   003772  6ADA               	clrf	fsr2h,c
  3179   003774  C006  FFDE         	movff	?_color_read_Red,postinc2
  3180   003778  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  3181   00377C                     
  3182                           ;color.c: 104:     LATGbits.LATG0 = 0;
  3183   00377C  907F               	bcf	127,0,c	;volatile
  3184   00377E                     
  3185                           ;color.c: 105:     LATEbits.LATE7 = 1;
  3186   00377E  8E7D               	bsf	125,7,c	;volatile
  3187   003780                     
  3188                           ;color.c: 106:     LATAbits.LATA3 = 0;
  3189   003780  9679               	bcf	121,3,c	;volatile
  3190   003782                     
  3191                           ;color.c: 107:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3192   003782  0E29               	movlw	41
  3193   003784  0100               	movlb	0	; () banked
  3194   003786  6FAD               	movwf	(??_reading_hue+1)& (0+255),b
  3195   003788  0E96               	movlw	150
  3196   00378A  6FAC               	movwf	??_reading_hue& (0+255),b
  3197   00378C  0E7F               	movlw	127
  3198   00378E                     u5297:
  3199   00378E  2EE8               	decfsz	wreg,f,c
  3200   003790  D7FE               	bra	u5297
  3201   003792  2FAC               	decfsz	??_reading_hue& (0+255),f,b
  3202   003794  D7FC               	bra	u5297
  3203   003796  2FAD               	decfsz	(??_reading_hue+1)& (0+255),f,b
  3204   003798  D7FA               	bra	u5297
  3205                           
  3206                           ;color.c: 108:     (cCurr->green) = color_read_Green();
  3207   00379A  EC65  F020         	call	_color_read_Green	;wreg free
  3208   00379E  505A               	movf	reading_hue@cCurr^0,w,c
  3209   0037A0  6ED9               	movwf	fsr2l,c
  3210   0037A2  6ADA               	clrf	fsr2h,c
  3211   0037A4  0E02               	movlw	2
  3212   0037A6  26D9               	addwf	fsr2l,f,c
  3213   0037A8  C006  FFDE         	movff	?_color_read_Green,postinc2
  3214   0037AC  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  3215   0037B0                     
  3216                           ;color.c: 110:     LATGbits.LATG0 = 0;
  3217   0037B0  907F               	bcf	127,0,c	;volatile
  3218   0037B2                     
  3219                           ;color.c: 111:     LATEbits.LATE7 = 0;
  3220   0037B2  9E7D               	bcf	125,7,c	;volatile
  3221   0037B4                     
  3222                           ;color.c: 112:     LATAbits.LATA3 = 1;
  3223   0037B4  8679               	bsf	121,3,c	;volatile
  3224   0037B6                     
  3225                           ;color.c: 113:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3226   0037B6  0E29               	movlw	41
  3227   0037B8  0100               	movlb	0	; () banked
  3228   0037BA  6FAD               	movwf	(??_reading_hue+1)& (0+255),b
  3229   0037BC  0E96               	movlw	150
  3230   0037BE  6FAC               	movwf	??_reading_hue& (0+255),b
  3231   0037C0  0E7F               	movlw	127
  3232   0037C2                     u5307:
  3233   0037C2  2EE8               	decfsz	wreg,f,c
  3234   0037C4  D7FE               	bra	u5307
  3235   0037C6  2FAC               	decfsz	??_reading_hue& (0+255),f,b
  3236   0037C8  D7FC               	bra	u5307
  3237   0037CA  2FAD               	decfsz	(??_reading_hue+1)& (0+255),f,b
  3238   0037CC  D7FA               	bra	u5307
  3239   0037CE                     
  3240                           ;color.c: 114:     (cCurr->blue) = color_read_Blue();
  3241   0037CE  ECB5  F020         	call	_color_read_Blue	;wreg free
  3242   0037D2  505A               	movf	reading_hue@cCurr^0,w,c
  3243   0037D4  6ED9               	movwf	fsr2l,c
  3244   0037D6  6ADA               	clrf	fsr2h,c
  3245   0037D8  0E04               	movlw	4
  3246   0037DA  26D9               	addwf	fsr2l,f,c
  3247   0037DC  C006  FFDE         	movff	?_color_read_Blue,postinc2
  3248   0037E0  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  3249   0037E4                     
  3250                           ;color.c: 116:     LATGbits.LATG0 = 1;
  3251   0037E4  807F               	bsf	127,0,c	;volatile
  3252   0037E6                     
  3253                           ;color.c: 117:     LATEbits.LATE7 = 1;
  3254   0037E6  8E7D               	bsf	125,7,c	;volatile
  3255   0037E8                     
  3256                           ;color.c: 118:     LATAbits.LATA3 = 1;
  3257   0037E8  8679               	bsf	121,3,c	;volatile
  3258                           
  3259                           ;color.c: 119:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3260   0037EA  0E29               	movlw	41
  3261   0037EC  0100               	movlb	0	; () banked
  3262   0037EE  6FAD               	movwf	(??_reading_hue+1)& (0+255),b
  3263   0037F0  0E96               	movlw	150
  3264   0037F2  6FAC               	movwf	??_reading_hue& (0+255),b
  3265   0037F4  0E7F               	movlw	127
  3266   0037F6                     u5317:
  3267   0037F6  2EE8               	decfsz	wreg,f,c
  3268   0037F8  D7FE               	bra	u5317
  3269   0037FA  2FAC               	decfsz	??_reading_hue& (0+255),f,b
  3270   0037FC  D7FC               	bra	u5317
  3271   0037FE  2FAD               	decfsz	(??_reading_hue+1)& (0+255),f,b
  3272   003800  D7FA               	bra	u5317
  3273   003802                     
  3274                           ;color.c: 120:     (cCurr->clear) = color_read_Clear();
  3275   003802  EC8D  F020         	call	_color_read_Clear	;wreg free
  3276   003806  505A               	movf	reading_hue@cCurr^0,w,c
  3277   003808  6ED9               	movwf	fsr2l,c
  3278   00380A  6ADA               	clrf	fsr2h,c
  3279   00380C  0E06               	movlw	6
  3280   00380E  26D9               	addwf	fsr2l,f,c
  3281   003810  C006  FFDE         	movff	?_color_read_Clear,postinc2
  3282   003814  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  3283   003818                     
  3284                           ;color.c: 123:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  3285   003818  0EDB               	movlw	low _colorCalibration
  3286   00381A  6E56               	movwf	convert_rgb2hue@cMax^0,c
  3287   00381C  0ED1               	movlw	low _colorCurrent
  3288   00381E  6E57               	movwf	convert_rgb2hue@cCurr^0,c
  3289   003820  EC63  F007         	call	_convert_rgb2hue	;wreg free
  3290   003824  C056  F0AE         	movff	?_convert_rgb2hue,reading_hue@hue
  3291   003828  C057  F0AF         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  3292   00382C                     
  3293                           ;color.c: 127:     return hue;
  3294   00382C  C0AE  F05A         	movff	reading_hue@hue,?_reading_hue
  3295   003830  C0AF  F05B         	movff	reading_hue@hue+1,?_reading_hue+1
  3296   003834  0012               	return		;funcret
  3297   003836                     __end_of_reading_hue:
  3298                           	callstack 0
  3299                           
  3300 ;; *************** function _convert_rgb2hue *****************
  3301 ;; Defined at:
  3302 ;;		line 226 in file "color.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  cMax            1   85[COMRAM] PTR struct colors
  3305 ;;		 -> colorCalibration(10), 
  3306 ;;  cCurr           1   86[COMRAM] PTR struct colors
  3307 ;;		 -> colorCurrent(10), 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  c_char         20    0        unsigned char [20]
  3310 ;;  b               4   72[BANK0 ] float 
  3311 ;;  g               4   68[BANK0 ] float 
  3312 ;;  r               4   64[BANK0 ] float 
  3313 ;;  hue             4   60[BANK0 ] float 
  3314 ;;  max             4   56[BANK0 ] float 
  3315 ;;  diff            4   52[BANK0 ] float 
  3316 ;;  min             4   48[BANK0 ] float 
  3317 ;;  clearmax        4   28[BANK0 ] float 
  3318 ;;  clearcurrent    4   24[BANK0 ] float 
  3319 ;;  bluemax         4   20[BANK0 ] float 
  3320 ;;  bluecurrent     4   16[BANK0 ] float 
  3321 ;;  greenmax        4   12[BANK0 ] float 
  3322 ;;  greencurrent    4    8[BANK0 ] float 
  3323 ;;  redmax          4    4[BANK0 ] float 
  3324 ;;  redcurrent      4    0[BANK0 ] float 
  3325 ;;  c               4    0        float 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  2   85[COMRAM] unsigned int 
  3328 ;; Registers used:
  3329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3335 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3336 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3337 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3338 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3339 ;;Total ram usage:       80 bytes
  3340 ;; Hardware stack levels used: 1
  3341 ;; Hardware stack levels required when called: 3
  3342 ;; This function calls:
  3343 ;;		___fladd
  3344 ;;		___fldiv
  3345 ;;		___fleq
  3346 ;;		___flge
  3347 ;;		___flmul
  3348 ;;		___flsub
  3349 ;;		___fltol
  3350 ;;		___xxtofl
  3351 ;; This function is called by:
  3352 ;;		_reading_hue
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           	psect	text10
  3357   000EC6                     __ptext10:
  3358                           	callstack 0
  3359   000EC6                     _convert_rgb2hue:
  3360                           	callstack 26
  3361   000EC6                     
  3362                           ;color.c: 226: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 227: {;color.c: 228:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 229:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  3363   000EC6  0E00               	movlw	0
  3364   000EC8  0100               	movlb	0	; () banked
  3365   000ECA  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3366   000ECC  0E00               	movlw	0
  3367   000ECE  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3368   000ED0  0E00               	movlw	0
  3369   000ED2  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3370   000ED4  0E00               	movlw	0
  3371   000ED6  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3372   000ED8                     
  3373                           ; BSR set to: 0
  3374                           ;color.c: 231:     redcurrent = cCurr->red;
  3375   000ED8  5057               	movf	convert_rgb2hue@cCurr^0,w,c
  3376   000EDA  6ED9               	movwf	fsr2l,c
  3377   000EDC  6ADA               	clrf	fsr2h,c
  3378   000EDE  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  3379   000EE2  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  3380   000EE6  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3381   000EEA  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3382   000EEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3383   000EF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3384   000EF2  0E00               	movlw	0
  3385   000EF4  EC77  F015         	call	___xxtofl
  3386   000EF8  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  3387   000EFC  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  3388   000F00  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  3389   000F04  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  3390   000F08                     
  3391                           ;color.c: 232:     redmax = cMax->red;
  3392   000F08  5056               	movf	convert_rgb2hue@cMax^0,w,c
  3393   000F0A  6ED9               	movwf	fsr2l,c
  3394   000F0C  6ADA               	clrf	fsr2h,c
  3395   000F0E  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  3396   000F12  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  3397   000F16  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3398   000F1A  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3399   000F1E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3400   000F20  6A05               	clrf	(___xxtofl@val+3)^0,c
  3401   000F22  0E00               	movlw	0
  3402   000F24  EC77  F015         	call	___xxtofl
  3403   000F28  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  3404   000F2C  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  3405   000F30  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  3406   000F34  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  3407   000F38                     
  3408                           ;color.c: 233:     greencurrent = cCurr->green;
  3409   000F38  5057               	movf	convert_rgb2hue@cCurr^0,w,c
  3410   000F3A  6ED9               	movwf	fsr2l,c
  3411   000F3C  6ADA               	clrf	fsr2h,c
  3412   000F3E  0E02               	movlw	2
  3413   000F40  26D9               	addwf	fsr2l,f,c
  3414   000F42  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  3415   000F46  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  3416   000F4A  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3417   000F4E  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3418   000F52  6A04               	clrf	(___xxtofl@val+2)^0,c
  3419   000F54  6A05               	clrf	(___xxtofl@val+3)^0,c
  3420   000F56  0E00               	movlw	0
  3421   000F58  EC77  F015         	call	___xxtofl
  3422   000F5C  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  3423   000F60  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  3424   000F64  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  3425   000F68  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  3426   000F6C                     
  3427                           ;color.c: 234:     greenmax = cMax->green;
  3428   000F6C  5056               	movf	convert_rgb2hue@cMax^0,w,c
  3429   000F6E  6ED9               	movwf	fsr2l,c
  3430   000F70  6ADA               	clrf	fsr2h,c
  3431   000F72  0E02               	movlw	2
  3432   000F74  26D9               	addwf	fsr2l,f,c
  3433   000F76  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  3434   000F7A  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  3435   000F7E  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3436   000F82  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3437   000F86  6A04               	clrf	(___xxtofl@val+2)^0,c
  3438   000F88  6A05               	clrf	(___xxtofl@val+3)^0,c
  3439   000F8A  0E00               	movlw	0
  3440   000F8C  EC77  F015         	call	___xxtofl
  3441   000F90  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  3442   000F94  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  3443   000F98  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  3444   000F9C  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  3445   000FA0                     
  3446                           ;color.c: 235:     bluecurrent = cCurr->blue;
  3447   000FA0  5057               	movf	convert_rgb2hue@cCurr^0,w,c
  3448   000FA2  6ED9               	movwf	fsr2l,c
  3449   000FA4  6ADA               	clrf	fsr2h,c
  3450   000FA6  0E04               	movlw	4
  3451   000FA8  26D9               	addwf	fsr2l,f,c
  3452   000FAA  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  3453   000FAE  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  3454   000FB2  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3455   000FB6  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3456   000FBA  6A04               	clrf	(___xxtofl@val+2)^0,c
  3457   000FBC  6A05               	clrf	(___xxtofl@val+3)^0,c
  3458   000FBE  0E00               	movlw	0
  3459   000FC0  EC77  F015         	call	___xxtofl
  3460   000FC4  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  3461   000FC8  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  3462   000FCC  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  3463   000FD0  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  3464   000FD4                     
  3465                           ;color.c: 236:     bluemax = cMax->blue;
  3466   000FD4  5056               	movf	convert_rgb2hue@cMax^0,w,c
  3467   000FD6  6ED9               	movwf	fsr2l,c
  3468   000FD8  6ADA               	clrf	fsr2h,c
  3469   000FDA  0E04               	movlw	4
  3470   000FDC  26D9               	addwf	fsr2l,f,c
  3471   000FDE  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  3472   000FE2  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  3473   000FE6  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3474   000FEA  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3475   000FEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3476   000FF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3477   000FF2  0E00               	movlw	0
  3478   000FF4  EC77  F015         	call	___xxtofl
  3479   000FF8  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  3480   000FFC  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  3481   001000  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  3482   001004  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  3483   001008                     
  3484                           ;color.c: 237:     clearcurrent = cCurr->clear;
  3485   001008  5057               	movf	convert_rgb2hue@cCurr^0,w,c
  3486   00100A  6ED9               	movwf	fsr2l,c
  3487   00100C  6ADA               	clrf	fsr2h,c
  3488   00100E  0E06               	movlw	6
  3489   001010  26D9               	addwf	fsr2l,f,c
  3490   001012  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  3491   001016  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  3492   00101A  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3493   00101E  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3494   001022  6A04               	clrf	(___xxtofl@val+2)^0,c
  3495   001024  6A05               	clrf	(___xxtofl@val+3)^0,c
  3496   001026  0E00               	movlw	0
  3497   001028  EC77  F015         	call	___xxtofl
  3498   00102C  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  3499   001030  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  3500   001034  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  3501   001038  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  3502   00103C                     
  3503                           ;color.c: 238:     clearmax = cMax->clear;
  3504   00103C  5056               	movf	convert_rgb2hue@cMax^0,w,c
  3505   00103E  6ED9               	movwf	fsr2l,c
  3506   001040  6ADA               	clrf	fsr2h,c
  3507   001042  0E06               	movlw	6
  3508   001044  26D9               	addwf	fsr2l,f,c
  3509   001046  CFDE F058          	movff	postinc2,??_convert_rgb2hue
  3510   00104A  CFDD F059          	movff	postdec2,??_convert_rgb2hue+1
  3511   00104E  C058  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3512   001052  C059  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3513   001056  6A04               	clrf	(___xxtofl@val+2)^0,c
  3514   001058  6A05               	clrf	(___xxtofl@val+3)^0,c
  3515   00105A  0E00               	movlw	0
  3516   00105C  EC77  F015         	call	___xxtofl
  3517   001060  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  3518   001064  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  3519   001068  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  3520   00106C  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  3521   001070  C078  F033         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  3522   001074  C079  F034         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  3523   001078  C07A  F035         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  3524   00107C  C07B  F036         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  3525   001080  C07C  F037         	movff	convert_rgb2hue@clearmax,___fldiv@a
  3526   001084  C07D  F038         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  3527   001088  C07E  F039         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  3528   00108C  C07F  F03A         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  3529   001090  ECA1  F00F         	call	___fldiv	;wreg free
  3530   001094                     
  3531                           ;color.c: 241:     char c_char[20];;color.c: 247:     r = redcurrent/redmax;
  3532   001094  C060  F033         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  3533   001098  C061  F034         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  3534   00109C  C062  F035         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  3535   0010A0  C063  F036         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  3536   0010A4  C064  F037         	movff	convert_rgb2hue@redmax,___fldiv@a
  3537   0010A8  C065  F038         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  3538   0010AC  C066  F039         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  3539   0010B0  C067  F03A         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  3540   0010B4  ECA1  F00F         	call	___fldiv	;wreg free
  3541   0010B8  C033  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  3542   0010BC  C034  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  3543   0010C0  C035  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  3544   0010C4  C036  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  3545   0010C8                     
  3546                           ;color.c: 248:     g = greencurrent/greenmax;
  3547   0010C8  C068  F033         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  3548   0010CC  C069  F034         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  3549   0010D0  C06A  F035         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  3550   0010D4  C06B  F036         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  3551   0010D8  C06C  F037         	movff	convert_rgb2hue@greenmax,___fldiv@a
  3552   0010DC  C06D  F038         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  3553   0010E0  C06E  F039         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  3554   0010E4  C06F  F03A         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  3555   0010E8  ECA1  F00F         	call	___fldiv	;wreg free
  3556   0010EC  C033  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3557   0010F0  C034  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3558   0010F4  C035  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3559   0010F8  C036  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3560   0010FC                     
  3561                           ;color.c: 249:     b = bluecurrent/bluemax;
  3562   0010FC  C070  F033         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3563   001100  C071  F034         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3564   001104  C072  F035         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3565   001108  C073  F036         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3566   00110C  C074  F037         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3567   001110  C075  F038         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3568   001114  C076  F039         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3569   001118  C077  F03A         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3570   00111C  ECA1  F00F         	call	___fldiv	;wreg free
  3571   001120  C033  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3572   001124  C034  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3573   001128  C035  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3574   00112C  C036  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3575   001130                     
  3576                           ;color.c: 251:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3577   001130  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3578   001134  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3579   001138  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3580   00113C  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3581   001140  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3582   001144  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3583   001148  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3584   00114C  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3585   001150  EC33  F01A         	call	___flge	;wreg free
  3586   001154  A0D8               	btfss	status,0,c
  3587   001156  EFAF  F008         	goto	u4011
  3588   00115A  EFB1  F008         	goto	u4010
  3589   00115E                     u4011:
  3590   00115E  EFE6  F008         	goto	l4620
  3591   001162                     u4010:
  3592   001162  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3593   001166  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3594   00116A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3595   00116E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3596   001172  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3597   001176  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3598   00117A  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3599   00117E  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3600   001182  EC33  F01A         	call	___flge	;wreg free
  3601   001186  A0D8               	btfss	status,0,c
  3602   001188  EFC8  F008         	goto	u4021
  3603   00118C  EFCA  F008         	goto	u4020
  3604   001190                     u4021:
  3605   001190  EFD4  F008         	goto	l130
  3606   001194                     u4020:
  3607   001194  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$438
  3608   001198  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$438+1
  3609   00119C  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$438+2
  3610   0011A0  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$438+3
  3611   0011A4  EFDC  F008         	goto	l132
  3612   0011A8                     l130:
  3613   0011A8  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$438
  3614   0011AC  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$438+1
  3615   0011B0  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$438+2
  3616   0011B4  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$438+3
  3617   0011B8                     l132:
  3618   0011B8  C080  F090         	movff	_convert_rgb2hue$438,convert_rgb2hue@min
  3619   0011BC  C081  F091         	movff	_convert_rgb2hue$438+1,convert_rgb2hue@min+1
  3620   0011C0  C082  F092         	movff	_convert_rgb2hue$438+2,convert_rgb2hue@min+2
  3621   0011C4  C083  F093         	movff	_convert_rgb2hue$438+3,convert_rgb2hue@min+3
  3622   0011C8  EF19  F009         	goto	l4624
  3623   0011CC                     l4620:
  3624   0011CC  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3625   0011D0  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3626   0011D4  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3627   0011D8  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3628   0011DC  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3629   0011E0  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3630   0011E4  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3631   0011E8  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3632   0011EC  EC33  F01A         	call	___flge	;wreg free
  3633   0011F0  A0D8               	btfss	status,0,c
  3634   0011F2  EFFD  F008         	goto	u4031
  3635   0011F6  EFFF  F008         	goto	u4030
  3636   0011FA                     u4031:
  3637   0011FA  EF09  F009         	goto	l134
  3638   0011FE                     u4030:
  3639   0011FE  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$439
  3640   001202  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$439+1
  3641   001206  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$439+2
  3642   00120A  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$439+3
  3643   00120E  EF11  F009         	goto	l136
  3644   001212                     l134:
  3645   001212  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$439
  3646   001216  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$439+1
  3647   00121A  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$439+2
  3648   00121E  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$439+3
  3649   001222                     l136:
  3650   001222  C084  F090         	movff	_convert_rgb2hue$439,convert_rgb2hue@min
  3651   001226  C085  F091         	movff	_convert_rgb2hue$439+1,convert_rgb2hue@min+1
  3652   00122A  C086  F092         	movff	_convert_rgb2hue$439+2,convert_rgb2hue@min+2
  3653   00122E  C087  F093         	movff	_convert_rgb2hue$439+3,convert_rgb2hue@min+3
  3654   001232                     l4624:
  3655                           
  3656                           ;color.c: 252:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3657   001232  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3658   001236  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3659   00123A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3660   00123E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3661   001242  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3662   001246  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3663   00124A  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3664   00124E  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3665   001252  EC33  F01A         	call	___flge	;wreg free
  3666   001256  A0D8               	btfss	status,0,c
  3667   001258  EF30  F009         	goto	u4041
  3668   00125C  EF32  F009         	goto	u4040
  3669   001260                     u4041:
  3670   001260  EF67  F009         	goto	l4630
  3671   001264                     u4040:
  3672   001264  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3673   001268  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3674   00126C  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3675   001270  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3676   001274  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3677   001278  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3678   00127C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3679   001280  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3680   001284  EC33  F01A         	call	___flge	;wreg free
  3681   001288  A0D8               	btfss	status,0,c
  3682   00128A  EF49  F009         	goto	u4051
  3683   00128E  EF4B  F009         	goto	u4050
  3684   001292                     u4051:
  3685   001292  EF55  F009         	goto	l142
  3686   001296                     u4050:
  3687   001296  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$440
  3688   00129A  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$440+1
  3689   00129E  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$440+2
  3690   0012A2  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$440+3
  3691   0012A6  EF5D  F009         	goto	l144
  3692   0012AA                     l142:
  3693   0012AA  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$440
  3694   0012AE  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$440+1
  3695   0012B2  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$440+2
  3696   0012B6  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$440+3
  3697   0012BA                     l144:
  3698   0012BA  C088  F098         	movff	_convert_rgb2hue$440,convert_rgb2hue@max
  3699   0012BE  C089  F099         	movff	_convert_rgb2hue$440+1,convert_rgb2hue@max+1
  3700   0012C2  C08A  F09A         	movff	_convert_rgb2hue$440+2,convert_rgb2hue@max+2
  3701   0012C6  C08B  F09B         	movff	_convert_rgb2hue$440+3,convert_rgb2hue@max+3
  3702   0012CA  EF9A  F009         	goto	l4634
  3703   0012CE                     l4630:
  3704   0012CE  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3705   0012D2  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3706   0012D6  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3707   0012DA  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3708   0012DE  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3709   0012E2  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3710   0012E6  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3711   0012EA  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3712   0012EE  EC33  F01A         	call	___flge	;wreg free
  3713   0012F2  A0D8               	btfss	status,0,c
  3714   0012F4  EF7E  F009         	goto	u4061
  3715   0012F8  EF80  F009         	goto	u4060
  3716   0012FC                     u4061:
  3717   0012FC  EF8A  F009         	goto	l146
  3718   001300                     u4060:
  3719   001300  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$441
  3720   001304  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$441+1
  3721   001308  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$441+2
  3722   00130C  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$441+3
  3723   001310  EF92  F009         	goto	l148
  3724   001314                     l146:
  3725   001314  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$441
  3726   001318  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$441+1
  3727   00131C  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$441+2
  3728   001320  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$441+3
  3729   001324                     l148:
  3730   001324  C08C  F098         	movff	_convert_rgb2hue$441,convert_rgb2hue@max
  3731   001328  C08D  F099         	movff	_convert_rgb2hue$441+1,convert_rgb2hue@max+1
  3732   00132C  C08E  F09A         	movff	_convert_rgb2hue$441+2,convert_rgb2hue@max+2
  3733   001330  C08F  F09B         	movff	_convert_rgb2hue$441+3,convert_rgb2hue@max+3
  3734   001334                     l4634:
  3735                           
  3736                           ;color.c: 253:     diff = max - min;
  3737   001334  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3738   001338  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3739   00133C  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3740   001340  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3741   001344  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3742   001348  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3743   00134C  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3744   001350  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3745   001354  ECDD  F020         	call	___flsub	;wreg free
  3746   001358  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3747   00135C  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3748   001360  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3749   001364  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3750                           
  3751                           ;color.c: 254:     if (max == min) {
  3752   001368  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3753   00136C  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3754   001370  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3755   001374  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3756   001378  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3757   00137C  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3758   001380  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3759   001384  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3760   001388  EC91  F01D         	call	___fleq	;wreg free
  3761   00138C  A0D8               	btfss	status,0,c
  3762   00138E  EFCB  F009         	goto	u4071
  3763   001392  EFCD  F009         	goto	u4070
  3764   001396                     u4071:
  3765   001396  EFD8  F009         	goto	l4638
  3766   00139A                     u4070:
  3767   00139A                     
  3768                           ;color.c: 255:         hue = 0;
  3769   00139A  0E00               	movlw	0
  3770   00139C  0100               	movlb	0	; () banked
  3771   00139E  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3772   0013A0  0E00               	movlw	0
  3773   0013A2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3774   0013A4  0E00               	movlw	0
  3775   0013A6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3776   0013A8  0E00               	movlw	0
  3777   0013AA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3778                           
  3779                           ;color.c: 256:     } else if (max == r){
  3780   0013AC  EFE1  F00A         	goto	l4650
  3781   0013B0                     l4638:
  3782   0013B0  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3783   0013B4  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3784   0013B8  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3785   0013BC  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3786   0013C0  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3787   0013C4  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3788   0013C8  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3789   0013CC  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3790   0013D0  EC91  F01D         	call	___fleq	;wreg free
  3791   0013D4  A0D8               	btfss	status,0,c
  3792   0013D6  EFEF  F009         	goto	u4081
  3793   0013DA  EFF1  F009         	goto	u4080
  3794   0013DE                     u4081:
  3795   0013DE  EF1F  F00A         	goto	l4642
  3796   0013E2                     u4080:
  3797   0013E2                     
  3798                           ;color.c: 257:         hue = (b - g) / diff;
  3799   0013E2  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3800   0013E6  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3801   0013EA  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3802   0013EE  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3803   0013F2  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3804   0013F6  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3805   0013FA  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3806   0013FE  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3807   001402  ECDD  F020         	call	___flsub	;wreg free
  3808   001406  C012  F033         	movff	?___flsub,___fldiv@b
  3809   00140A  C013  F034         	movff	?___flsub+1,___fldiv@b+1
  3810   00140E  C014  F035         	movff	?___flsub+2,___fldiv@b+2
  3811   001412  C015  F036         	movff	?___flsub+3,___fldiv@b+3
  3812   001416  C094  F037         	movff	convert_rgb2hue@diff,___fldiv@a
  3813   00141A  C095  F038         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3814   00141E  C096  F039         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3815   001422  C097  F03A         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3816   001426  ECA1  F00F         	call	___fldiv	;wreg free
  3817   00142A  C033  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3818   00142E  C034  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3819   001432  C035  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3820   001436  C036  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3821                           
  3822                           ;color.c: 258:     } else if (max == g){
  3823   00143A  EFE1  F00A         	goto	l4650
  3824   00143E                     l4642:
  3825   00143E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3826   001442  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3827   001446  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3828   00144A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3829   00144E  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3830   001452  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3831   001456  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3832   00145A  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3833   00145E  EC91  F01D         	call	___fleq	;wreg free
  3834   001462  A0D8               	btfss	status,0,c
  3835   001464  EF36  F00A         	goto	u4091
  3836   001468  EF38  F00A         	goto	u4090
  3837   00146C                     u4091:
  3838   00146C  EF80  F00A         	goto	l4646
  3839   001470                     u4090:
  3840   001470                     
  3841                           ;color.c: 259:         hue = (b - r) / diff;
  3842   001470  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3843   001474  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3844   001478  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3845   00147C  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3846   001480  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3847   001484  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3848   001488  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3849   00148C  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3850   001490  ECDD  F020         	call	___flsub	;wreg free
  3851   001494  C012  F033         	movff	?___flsub,___fldiv@b
  3852   001498  C013  F034         	movff	?___flsub+1,___fldiv@b+1
  3853   00149C  C014  F035         	movff	?___flsub+2,___fldiv@b+2
  3854   0014A0  C015  F036         	movff	?___flsub+3,___fldiv@b+3
  3855   0014A4  C094  F037         	movff	convert_rgb2hue@diff,___fldiv@a
  3856   0014A8  C095  F038         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3857   0014AC  C096  F039         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3858   0014B0  C097  F03A         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3859   0014B4  ECA1  F00F         	call	___fldiv	;wreg free
  3860   0014B8  C033  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3861   0014BC  C034  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3862   0014C0  C035  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3863   0014C4  C036  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3864                           
  3865                           ;color.c: 260:         hue = hue + 2;
  3866   0014C8  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3867   0014CC  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3868   0014D0  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3869   0014D4  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3870   0014D8  0E00               	movlw	0
  3871   0014DA  6E06               	movwf	___fladd@a^0,c
  3872   0014DC  0E00               	movlw	0
  3873   0014DE  6E07               	movwf	(___fladd@a+1)^0,c
  3874   0014E0  0E00               	movlw	0
  3875   0014E2  6E08               	movwf	(___fladd@a+2)^0,c
  3876   0014E4  0E40               	movlw	64
  3877   0014E6  6E09               	movwf	(___fladd@a+3)^0,c
  3878   0014E8  EC2C  F00B         	call	___fladd	;wreg free
  3879   0014EC  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3880   0014F0  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3881   0014F4  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3882   0014F8  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3883                           
  3884                           ;color.c: 261:     } else if (max == b){
  3885   0014FC  EFE1  F00A         	goto	l4650
  3886   001500                     l4646:
  3887   001500  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3888   001504  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3889   001508  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3890   00150C  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3891   001510  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3892   001514  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3893   001518  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3894   00151C  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3895   001520  EC91  F01D         	call	___fleq	;wreg free
  3896   001524  A0D8               	btfss	status,0,c
  3897   001526  EF97  F00A         	goto	u4101
  3898   00152A  EF99  F00A         	goto	u4100
  3899   00152E                     u4101:
  3900   00152E  EFE1  F00A         	goto	l152
  3901   001532                     u4100:
  3902   001532                     
  3903                           ;color.c: 262:         hue = (r - g) / diff;
  3904   001532  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3905   001536  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3906   00153A  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3907   00153E  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3908   001542  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3909   001546  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3910   00154A  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3911   00154E  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3912   001552  ECDD  F020         	call	___flsub	;wreg free
  3913   001556  C012  F033         	movff	?___flsub,___fldiv@b
  3914   00155A  C013  F034         	movff	?___flsub+1,___fldiv@b+1
  3915   00155E  C014  F035         	movff	?___flsub+2,___fldiv@b+2
  3916   001562  C015  F036         	movff	?___flsub+3,___fldiv@b+3
  3917   001566  C094  F037         	movff	convert_rgb2hue@diff,___fldiv@a
  3918   00156A  C095  F038         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3919   00156E  C096  F039         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3920   001572  C097  F03A         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3921   001576  ECA1  F00F         	call	___fldiv	;wreg free
  3922   00157A  C033  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3923   00157E  C034  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3924   001582  C035  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3925   001586  C036  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3926                           
  3927                           ;color.c: 263:         hue = hue + 4;
  3928   00158A  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3929   00158E  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3930   001592  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3931   001596  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3932   00159A  0E00               	movlw	0
  3933   00159C  6E06               	movwf	___fladd@a^0,c
  3934   00159E  0E00               	movlw	0
  3935   0015A0  6E07               	movwf	(___fladd@a+1)^0,c
  3936   0015A2  0E80               	movlw	128
  3937   0015A4  6E08               	movwf	(___fladd@a+2)^0,c
  3938   0015A6  0E40               	movlw	64
  3939   0015A8  6E09               	movwf	(___fladd@a+3)^0,c
  3940   0015AA  EC2C  F00B         	call	___fladd	;wreg free
  3941   0015AE  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3942   0015B2  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3943   0015B6  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3944   0015BA  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3945   0015BE  EFE1  F00A         	goto	l4650
  3946   0015C2                     l152:
  3947   0015C2                     l4650:
  3948                           
  3949                           ;color.c: 266:     hue = hue * 60;
  3950   0015C2  C09C  F01A         	movff	convert_rgb2hue@hue,___flmul@b
  3951   0015C6  C09D  F01B         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3952   0015CA  C09E  F01C         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3953   0015CE  C09F  F01D         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3954   0015D2  0E00               	movlw	0
  3955   0015D4  6E1E               	movwf	___flmul@a^0,c
  3956   0015D6  0E00               	movlw	0
  3957   0015D8  6E1F               	movwf	(___flmul@a+1)^0,c
  3958   0015DA  0E70               	movlw	112
  3959   0015DC  6E20               	movwf	(___flmul@a+2)^0,c
  3960   0015DE  0E42               	movlw	66
  3961   0015E0  6E21               	movwf	(___flmul@a+3)^0,c
  3962   0015E2  EC8C  F00D         	call	___flmul	;wreg free
  3963   0015E6  C01A  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3964   0015EA  C01B  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3965   0015EE  C01C  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3966   0015F2  C01D  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3967   0015F6                     
  3968                           ;color.c: 267:     if (hue < 0) {
  3969   0015F6  0100               	movlb	0	; () banked
  3970   0015F8  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3971   0015FA  EF03  F00B         	goto	u4110
  3972   0015FE  EF01  F00B         	goto	u4111
  3973   001602                     u4111:
  3974   001602  EF1D  F00B         	goto	l156
  3975   001606                     u4110:
  3976   001606                     
  3977                           ; BSR set to: 0
  3978                           ;color.c: 268:         hue = hue + 360;
  3979   001606  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3980   00160A  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3981   00160E  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3982   001612  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3983   001616  0E00               	movlw	0
  3984   001618  6E06               	movwf	___fladd@a^0,c
  3985   00161A  0E00               	movlw	0
  3986   00161C  6E07               	movwf	(___fladd@a+1)^0,c
  3987   00161E  0EB4               	movlw	180
  3988   001620  6E08               	movwf	(___fladd@a+2)^0,c
  3989   001622  0E43               	movlw	67
  3990   001624  6E09               	movwf	(___fladd@a+3)^0,c
  3991   001626  EC2C  F00B         	call	___fladd	;wreg free
  3992   00162A  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3993   00162E  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3994   001632  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3995   001636  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3996   00163A                     l156:
  3997                           
  3998                           ;color.c: 271:     return (unsigned int)hue;
  3999   00163A  C09C  F04C         	movff	convert_rgb2hue@hue,___fltol@f1
  4000   00163E  C09D  F04D         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  4001   001642  C09E  F04E         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  4002   001646  C09F  F04F         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  4003   00164A  ECB0  F019         	call	___fltol	;wreg free
  4004   00164E  C04C  F056         	movff	?___fltol,?_convert_rgb2hue
  4005   001652  C04D  F057         	movff	?___fltol+1,?_convert_rgb2hue+1
  4006   001656  0012               	return		;funcret
  4007   001658                     __end_of_convert_rgb2hue:
  4008                           	callstack 0
  4009                           
  4010 ;; *************** function ___xxtofl *****************
  4011 ;; Defined at:
  4012 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;  sign            1    wreg     unsigned char 
  4015 ;;  val             4    1[COMRAM] long 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;  sign            1    9[COMRAM] unsigned char 
  4018 ;;  arg             4   11[COMRAM] unsigned long 
  4019 ;;  exp             1   10[COMRAM] unsigned char 
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  4    1[COMRAM] unsigned char 
  4022 ;; Registers used:
  4023 ;;		wreg, status,2, status,0
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4029 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4030 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4031 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4032 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4033 ;;Total ram usage:       14 bytes
  4034 ;; Hardware stack levels used: 1
  4035 ;; Hardware stack levels required when called: 1
  4036 ;; This function calls:
  4037 ;;		Nothing
  4038 ;; This function is called by:
  4039 ;;		_convert_rgb2hue
  4040 ;;		_main
  4041 ;;		_fullSpeedAhead
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           	psect	text11
  4046   002AEE                     __ptext11:
  4047                           	callstack 0
  4048   002AEE                     ___xxtofl:
  4049                           	callstack 26
  4050                           
  4051                           ;incstack = 0
  4052                           ;___xxtofl@sign stored from wreg
  4053   002AEE  6E0A               	movwf	___xxtofl@sign^0,c
  4054   002AF0  500A               	movf	___xxtofl@sign^0,w,c
  4055   002AF2  B4D8               	btfsc	status,2,c
  4056   002AF4  EF7E  F015         	goto	u3541
  4057   002AF8  EF80  F015         	goto	u3540
  4058   002AFC                     u3541:
  4059   002AFC  EFA2  F015         	goto	l1387
  4060   002B00                     u3540:
  4061   002B00  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4062   002B02  EF87  F015         	goto	u3550
  4063   002B06  EF85  F015         	goto	u3551
  4064   002B0A                     u3551:
  4065   002B0A  EFA2  F015         	goto	l1387
  4066   002B0E                     u3550:
  4067   002B0E  C002  F006         	movff	___xxtofl@val,??___xxtofl
  4068   002B12  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  4069   002B16  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  4070   002B1A  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  4071   002B1E  1E06               	comf	??___xxtofl^0,f,c
  4072   002B20  1E07               	comf	(??___xxtofl+1)^0,f,c
  4073   002B22  1E08               	comf	(??___xxtofl+2)^0,f,c
  4074   002B24  1E09               	comf	(??___xxtofl+3)^0,f,c
  4075   002B26  2A06               	incf	??___xxtofl^0,f,c
  4076   002B28  0E00               	movlw	0
  4077   002B2A  2207               	addwfc	(??___xxtofl+1)^0,f,c
  4078   002B2C  2208               	addwfc	(??___xxtofl+2)^0,f,c
  4079   002B2E  2209               	addwfc	(??___xxtofl+3)^0,f,c
  4080   002B30  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  4081   002B34  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4082   002B38  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4083   002B3C  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4084   002B40  EFAA  F015         	goto	l4196
  4085   002B44                     l1387:
  4086   002B44  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  4087   002B48  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4088   002B4C  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4089   002B50  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4090   002B54                     l4196:
  4091   002B54  5002               	movf	___xxtofl@val^0,w,c
  4092   002B56  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  4093   002B58  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  4094   002B5A  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  4095   002B5C  A4D8               	btfss	status,2,c
  4096   002B5E  EFB3  F015         	goto	u3561
  4097   002B62  EFB5  F015         	goto	u3560
  4098   002B66                     u3561:
  4099   002B66  EFBF  F015         	goto	l4202
  4100   002B6A                     u3560:
  4101   002B6A  0E00               	movlw	0
  4102   002B6C  6E02               	movwf	?___xxtofl^0,c
  4103   002B6E  0E00               	movlw	0
  4104   002B70  6E03               	movwf	(?___xxtofl+1)^0,c
  4105   002B72  0E00               	movlw	0
  4106   002B74  6E04               	movwf	(?___xxtofl+2)^0,c
  4107   002B76  0E00               	movlw	0
  4108   002B78  6E05               	movwf	(?___xxtofl+3)^0,c
  4109   002B7A  EF50  F016         	goto	l1390
  4110   002B7E                     l4202:
  4111   002B7E  0E96               	movlw	150
  4112   002B80  6E0B               	movwf	___xxtofl@exp^0,c
  4113   002B82  EFC9  F015         	goto	l4206
  4114   002B86                     l4204:
  4115   002B86  2A0B               	incf	___xxtofl@exp^0,f,c
  4116   002B88  90D8               	bcf	status,0,c
  4117   002B8A  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4118   002B8C  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4119   002B8E  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4120   002B90  320C               	rrcf	___xxtofl@arg^0,f,c
  4121   002B92                     l4206:
  4122   002B92  0E00               	movlw	0
  4123   002B94  140C               	andwf	___xxtofl@arg^0,w,c
  4124   002B96  6E06               	movwf	??___xxtofl^0,c
  4125   002B98  0E00               	movlw	0
  4126   002B9A  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4127   002B9C  6E07               	movwf	(??___xxtofl+1)^0,c
  4128   002B9E  0E00               	movlw	0
  4129   002BA0  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4130   002BA2  6E08               	movwf	(??___xxtofl+2)^0,c
  4131   002BA4  0EFE               	movlw	254
  4132   002BA6  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4133   002BA8  6E09               	movwf	(??___xxtofl+3)^0,c
  4134   002BAA  5006               	movf	??___xxtofl^0,w,c
  4135   002BAC  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4136   002BAE  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4137   002BB0  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4138   002BB2  A4D8               	btfss	status,2,c
  4139   002BB4  EFDE  F015         	goto	u3571
  4140   002BB8  EFE0  F015         	goto	u3570
  4141   002BBC                     u3571:
  4142   002BBC  EFC3  F015         	goto	l4204
  4143   002BC0                     u3570:
  4144   002BC0  EFEE  F015         	goto	l1394
  4145   002BC4                     l4208:
  4146   002BC4  2A0B               	incf	___xxtofl@exp^0,f,c
  4147   002BC6  0E01               	movlw	1
  4148   002BC8  260C               	addwf	___xxtofl@arg^0,f,c
  4149   002BCA  0E00               	movlw	0
  4150   002BCC  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4151   002BCE  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4152   002BD0  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4153   002BD2  90D8               	bcf	status,0,c
  4154   002BD4  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4155   002BD6  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4156   002BD8  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4157   002BDA  320C               	rrcf	___xxtofl@arg^0,f,c
  4158   002BDC                     l1394:
  4159   002BDC  0E00               	movlw	0
  4160   002BDE  140C               	andwf	___xxtofl@arg^0,w,c
  4161   002BE0  6E06               	movwf	??___xxtofl^0,c
  4162   002BE2  0E00               	movlw	0
  4163   002BE4  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4164   002BE6  6E07               	movwf	(??___xxtofl+1)^0,c
  4165   002BE8  0E00               	movlw	0
  4166   002BEA  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4167   002BEC  6E08               	movwf	(??___xxtofl+2)^0,c
  4168   002BEE  0EFF               	movlw	255
  4169   002BF0  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4170   002BF2  6E09               	movwf	(??___xxtofl+3)^0,c
  4171   002BF4  5006               	movf	??___xxtofl^0,w,c
  4172   002BF6  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4173   002BF8  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4174   002BFA  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4175   002BFC  A4D8               	btfss	status,2,c
  4176   002BFE  EF03  F016         	goto	u3581
  4177   002C02  EF05  F016         	goto	u3580
  4178   002C06                     u3581:
  4179   002C06  EFE2  F015         	goto	l4208
  4180   002C0A                     u3580:
  4181   002C0A  EF0D  F016         	goto	l4216
  4182   002C0E                     l4214:
  4183   002C0E  060B               	decf	___xxtofl@exp^0,f,c
  4184   002C10  90D8               	bcf	status,0,c
  4185   002C12  360C               	rlcf	___xxtofl@arg^0,f,c
  4186   002C14  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4187   002C16  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4188   002C18  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4189   002C1A                     l4216:
  4190   002C1A  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4191   002C1C  EF12  F016         	goto	u3591
  4192   002C20  EF14  F016         	goto	u3590
  4193   002C24                     u3591:
  4194   002C24  EF1C  F016         	goto	l1401
  4195   002C28                     u3590:
  4196   002C28  0E02               	movlw	2
  4197   002C2A  600B               	cpfslt	___xxtofl@exp^0,c
  4198   002C2C  EF1A  F016         	goto	u3601
  4199   002C30  EF1C  F016         	goto	u3600
  4200   002C34                     u3601:
  4201   002C34  EF07  F016         	goto	l4214
  4202   002C38                     u3600:
  4203   002C38                     l1401:
  4204   002C38  B00B               	btfsc	___xxtofl@exp^0,0,c
  4205   002C3A  EF21  F016         	goto	u3611
  4206   002C3E  EF23  F016         	goto	u3610
  4207   002C42                     u3611:
  4208   002C42  EF24  F016         	goto	l4222
  4209   002C46                     u3610:
  4210   002C46  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  4211   002C48                     l4222:
  4212   002C48  90D8               	bcf	status,0,c
  4213   002C4A  320B               	rrcf	___xxtofl@exp^0,f,c
  4214   002C4C  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  4215   002C50  6A07               	clrf	(??___xxtofl+1)^0,c
  4216   002C52  6A08               	clrf	(??___xxtofl+2)^0,c
  4217   002C54  6A09               	clrf	(??___xxtofl+3)^0,c
  4218   002C56  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  4219   002C5A  6A08               	clrf	(??___xxtofl+2)^0,c
  4220   002C5C  6A07               	clrf	(??___xxtofl+1)^0,c
  4221   002C5E  6A06               	clrf	??___xxtofl^0,c
  4222   002C60  5006               	movf	??___xxtofl^0,w,c
  4223   002C62  120C               	iorwf	___xxtofl@arg^0,f,c
  4224   002C64  5007               	movf	(??___xxtofl+1)^0,w,c
  4225   002C66  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4226   002C68  5008               	movf	(??___xxtofl+2)^0,w,c
  4227   002C6A  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4228   002C6C  5009               	movf	(??___xxtofl+3)^0,w,c
  4229   002C6E  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4230   002C70  500A               	movf	___xxtofl@sign^0,w,c
  4231   002C72  B4D8               	btfsc	status,2,c
  4232   002C74  EF3E  F016         	goto	u3621
  4233   002C78  EF40  F016         	goto	u3620
  4234   002C7C                     u3621:
  4235   002C7C  EF48  F016         	goto	l4232
  4236   002C80                     u3620:
  4237   002C80  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4238   002C82  EF47  F016         	goto	u3630
  4239   002C86  EF45  F016         	goto	u3631
  4240   002C8A                     u3631:
  4241   002C8A  EF48  F016         	goto	l4232
  4242   002C8E                     u3630:
  4243   002C8E  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  4244   002C90                     l4232:
  4245   002C90  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  4246   002C94  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  4247   002C98  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  4248   002C9C  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  4249   002CA0                     l1390:
  4250   002CA0  0012               	return		;funcret
  4251   002CA2                     __end_of___xxtofl:
  4252                           	callstack 0
  4253                           
  4254 ;; *************** function ___fltol *****************
  4255 ;; Defined at:
  4256 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  f1              4   75[COMRAM] unsigned char 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;  exp1            1   84[COMRAM] unsigned char 
  4261 ;;  sign1           1   83[COMRAM] unsigned char 
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  4   75[COMRAM] long 
  4264 ;; Registers used:
  4265 ;;		wreg, status,2, status,0
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4271 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4272 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4273 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4274 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4275 ;;Total ram usage:       10 bytes
  4276 ;; Hardware stack levels used: 1
  4277 ;; Hardware stack levels required when called: 1
  4278 ;; This function calls:
  4279 ;;		Nothing
  4280 ;; This function is called by:
  4281 ;;		_convert_rgb2hue
  4282 ;;		_main
  4283 ;;		_fullSpeedAhead
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           	psect	text12
  4288   003360                     __ptext12:
  4289                           	callstack 0
  4290   003360                     ___fltol:
  4291                           	callstack 26
  4292   003360  344E               	rlcf	(___fltol@f1+2)^0,w,c
  4293   003362  344F               	rlcf	(___fltol@f1+3)^0,w,c
  4294   003364  6E55               	movwf	___fltol@exp1^0,c
  4295   003366  5055               	movf	___fltol@exp1^0,w,c
  4296   003368  A4D8               	btfss	status,2,c
  4297   00336A  EFB9  F019         	goto	u3471
  4298   00336E  EFBB  F019         	goto	u3470
  4299   003372                     u3471:
  4300   003372  EFC5  F019         	goto	l4152
  4301   003376                     u3470:
  4302   003376                     l4148:
  4303   003376  0E00               	movlw	0
  4304   003378  6E4C               	movwf	?___fltol^0,c
  4305   00337A  0E00               	movlw	0
  4306   00337C  6E4D               	movwf	(?___fltol+1)^0,c
  4307   00337E  0E00               	movlw	0
  4308   003380  6E4E               	movwf	(?___fltol+2)^0,c
  4309   003382  0E00               	movlw	0
  4310   003384  6E4F               	movwf	(?___fltol+3)^0,c
  4311   003386  EF32  F01A         	goto	l1029
  4312   00338A                     l4152:
  4313   00338A  C04C  F050         	movff	___fltol@f1,??___fltol
  4314   00338E  C04D  F051         	movff	___fltol@f1+1,??___fltol+1
  4315   003392  C04E  F052         	movff	___fltol@f1+2,??___fltol+2
  4316   003396  C04F  F053         	movff	___fltol@f1+3,??___fltol+3
  4317   00339A  0E20               	movlw	32
  4318   00339C  EFD5  F019         	goto	u3480
  4319   0033A0                     u3485:
  4320   0033A0  90D8               	bcf	status,0,c
  4321   0033A2  3253               	rrcf	(??___fltol+3)^0,f,c
  4322   0033A4  3252               	rrcf	(??___fltol+2)^0,f,c
  4323   0033A6  3251               	rrcf	(??___fltol+1)^0,f,c
  4324   0033A8  3250               	rrcf	??___fltol^0,f,c
  4325   0033AA                     u3480:
  4326   0033AA  2EE8               	decfsz	wreg,f,c
  4327   0033AC  EFD0  F019         	goto	u3485
  4328   0033B0  5050               	movf	??___fltol^0,w,c
  4329   0033B2  6E54               	movwf	___fltol@sign1^0,c
  4330   0033B4  8E4E               	bsf	(___fltol@f1+2)^0,7,c
  4331   0033B6  0EFF               	movlw	255
  4332   0033B8  164C               	andwf	___fltol@f1^0,f,c
  4333   0033BA  0EFF               	movlw	255
  4334   0033BC  164D               	andwf	(___fltol@f1+1)^0,f,c
  4335   0033BE  0EFF               	movlw	255
  4336   0033C0  164E               	andwf	(___fltol@f1+2)^0,f,c
  4337   0033C2  0E00               	movlw	0
  4338   0033C4  164F               	andwf	(___fltol@f1+3)^0,f,c
  4339   0033C6  0E96               	movlw	150
  4340   0033C8  5E55               	subwf	___fltol@exp1^0,f,c
  4341   0033CA  BE55               	btfsc	___fltol@exp1^0,7,c
  4342   0033CC  EFEC  F019         	goto	u3490
  4343   0033D0  EFEA  F019         	goto	u3491
  4344   0033D4                     u3491:
  4345   0033D4  EF02  F01A         	goto	l4172
  4346   0033D8                     u3490:
  4347   0033D8  5055               	movf	___fltol@exp1^0,w,c
  4348   0033DA  0A80               	xorlw	128
  4349   0033DC  0F97               	addlw	151
  4350   0033DE  B0D8               	btfsc	status,0,c
  4351   0033E0  EFF4  F019         	goto	u3501
  4352   0033E4  EFF6  F019         	goto	u3500
  4353   0033E8                     u3501:
  4354   0033E8  EFF8  F019         	goto	l4168
  4355   0033EC                     u3500:
  4356   0033EC  EFBB  F019         	goto	l4148
  4357   0033F0                     l4168:
  4358   0033F0  90D8               	bcf	status,0,c
  4359   0033F2  324F               	rrcf	(___fltol@f1+3)^0,f,c
  4360   0033F4  324E               	rrcf	(___fltol@f1+2)^0,f,c
  4361   0033F6  324D               	rrcf	(___fltol@f1+1)^0,f,c
  4362   0033F8  324C               	rrcf	___fltol@f1^0,f,c
  4363   0033FA  3E55               	incfsz	___fltol@exp1^0,f,c
  4364   0033FC  EFF8  F019         	goto	l4168
  4365   003400  EF1A  F01A         	goto	l4182
  4366   003404                     l4172:
  4367   003404  0E1F               	movlw	31
  4368   003406  6455               	cpfsgt	___fltol@exp1^0,c
  4369   003408  EF08  F01A         	goto	u3511
  4370   00340C  EF0A  F01A         	goto	u3510
  4371   003410                     u3511:
  4372   003410  EF12  F01A         	goto	l4180
  4373   003414                     u3510:
  4374   003414  EFBB  F019         	goto	l4148
  4375   003418                     l4178:
  4376   003418  90D8               	bcf	status,0,c
  4377   00341A  364C               	rlcf	___fltol@f1^0,f,c
  4378   00341C  364D               	rlcf	(___fltol@f1+1)^0,f,c
  4379   00341E  364E               	rlcf	(___fltol@f1+2)^0,f,c
  4380   003420  364F               	rlcf	(___fltol@f1+3)^0,f,c
  4381   003422  0655               	decf	___fltol@exp1^0,f,c
  4382   003424                     l4180:
  4383   003424  5055               	movf	___fltol@exp1^0,w,c
  4384   003426  A4D8               	btfss	status,2,c
  4385   003428  EF18  F01A         	goto	u3521
  4386   00342C  EF1A  F01A         	goto	u3520
  4387   003430                     u3521:
  4388   003430  EF0C  F01A         	goto	l4178
  4389   003434                     u3520:
  4390   003434                     l4182:
  4391   003434  5054               	movf	___fltol@sign1^0,w,c
  4392   003436  B4D8               	btfsc	status,2,c
  4393   003438  EF20  F01A         	goto	u3531
  4394   00343C  EF22  F01A         	goto	u3530
  4395   003440                     u3531:
  4396   003440  EF2A  F01A         	goto	l4186
  4397   003444                     u3530:
  4398   003444  1E4F               	comf	(___fltol@f1+3)^0,f,c
  4399   003446  1E4E               	comf	(___fltol@f1+2)^0,f,c
  4400   003448  1E4D               	comf	(___fltol@f1+1)^0,f,c
  4401   00344A  6C4C               	negf	___fltol@f1^0,c
  4402   00344C  0E00               	movlw	0
  4403   00344E  224D               	addwfc	(___fltol@f1+1)^0,f,c
  4404   003450  224E               	addwfc	(___fltol@f1+2)^0,f,c
  4405   003452  224F               	addwfc	(___fltol@f1+3)^0,f,c
  4406   003454                     l4186:
  4407   003454  C04C  F04C         	movff	___fltol@f1,?___fltol
  4408   003458  C04D  F04D         	movff	___fltol@f1+1,?___fltol+1
  4409   00345C  C04E  F04E         	movff	___fltol@f1+2,?___fltol+2
  4410   003460  C04F  F04F         	movff	___fltol@f1+3,?___fltol+3
  4411   003464                     l1029:
  4412   003464  0012               	return		;funcret
  4413   003466                     __end_of___fltol:
  4414                           	callstack 0
  4415                           
  4416 ;; *************** function ___flsub *****************
  4417 ;; Defined at:
  4418 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;  b               4   17[COMRAM] long 
  4421 ;;  a               4   21[COMRAM] long 
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;		None
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  4   17[COMRAM] long 
  4426 ;; Registers used:
  4427 ;;		wreg, status,2, status,0, cstack
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4433 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4436 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4437 ;;Total ram usage:        8 bytes
  4438 ;; Hardware stack levels used: 1
  4439 ;; Hardware stack levels required when called: 2
  4440 ;; This function calls:
  4441 ;;		___fladd
  4442 ;; This function is called by:
  4443 ;;		_convert_rgb2hue
  4444 ;;		_main
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447                           
  4448                           	psect	text13
  4449   0041BA                     __ptext13:
  4450                           	callstack 0
  4451   0041BA                     ___flsub:
  4452                           	callstack 26
  4453   0041BA  0E00               	movlw	0
  4454   0041BC  1A16               	xorwf	___flsub@a^0,f,c
  4455   0041BE  0E00               	movlw	0
  4456   0041C0  1A17               	xorwf	(___flsub@a+1)^0,f,c
  4457   0041C2  0E00               	movlw	0
  4458   0041C4  1A18               	xorwf	(___flsub@a+2)^0,f,c
  4459   0041C6  0E80               	movlw	128
  4460   0041C8  1A19               	xorwf	(___flsub@a+3)^0,f,c
  4461   0041CA  C012  F002         	movff	___flsub@b,___fladd@b
  4462   0041CE  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  4463   0041D2  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  4464   0041D6  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  4465   0041DA  C016  F006         	movff	___flsub@a,___fladd@a
  4466   0041DE  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  4467   0041E2  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  4468   0041E6  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  4469   0041EA  EC2C  F00B         	call	___fladd	;wreg free
  4470   0041EE  C002  F012         	movff	?___fladd,?___flsub
  4471   0041F2  C003  F013         	movff	?___fladd+1,?___flsub+1
  4472   0041F6  C004  F014         	movff	?___fladd+2,?___flsub+2
  4473   0041FA  C005  F015         	movff	?___fladd+3,?___flsub+3
  4474   0041FE  0012               	return		;funcret
  4475   004200                     __end_of___flsub:
  4476                           	callstack 0
  4477                           
  4478 ;; *************** function ___fladd *****************
  4479 ;; Defined at:
  4480 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  b               4    1[COMRAM] long 
  4483 ;;  a               4    5[COMRAM] long 
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;  grs             1   16[COMRAM] unsigned char 
  4486 ;;  bexp            1   15[COMRAM] unsigned char 
  4487 ;;  aexp            1   14[COMRAM] unsigned char 
  4488 ;;  signs           1   13[COMRAM] unsigned char 
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  4    1[COMRAM] unsigned char 
  4491 ;; Registers used:
  4492 ;;		wreg, status,2, status,0
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4498 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4499 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4500 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4501 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4502 ;;Total ram usage:       16 bytes
  4503 ;; Hardware stack levels used: 1
  4504 ;; Hardware stack levels required when called: 1
  4505 ;; This function calls:
  4506 ;;		Nothing
  4507 ;; This function is called by:
  4508 ;;		_convert_rgb2hue
  4509 ;;		___flsub
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text14
  4514   001658                     __ptext14:
  4515                           	callstack 0
  4516   001658                     ___fladd:
  4517                           	callstack 26
  4518   001658  5005               	movf	(___fladd@b+3)^0,w,c
  4519   00165A  0B80               	andlw	128
  4520   00165C  6E0E               	movwf	___fladd@signs^0,c
  4521   00165E  5005               	movf	(___fladd@b+3)^0,w,c
  4522   001660  2405               	addwf	(___fladd@b+3)^0,w,c
  4523   001662  6E10               	movwf	___fladd@bexp^0,c
  4524   001664  AE04               	btfss	(___fladd@b+2)^0,7,c
  4525   001666  EF37  F00B         	goto	u2891
  4526   00166A  EF39  F00B         	goto	u2890
  4527   00166E                     u2891:
  4528   00166E  EF3A  F00B         	goto	l3820
  4529   001672                     u2890:
  4530   001672  8010               	bsf	___fladd@bexp^0,0,c
  4531   001674                     l3820:
  4532   001674  5010               	movf	___fladd@bexp^0,w,c
  4533   001676  B4D8               	btfsc	status,2,c
  4534   001678  EF40  F00B         	goto	u2901
  4535   00167C  EF42  F00B         	goto	u2900
  4536   001680                     u2901:
  4537   001680  EF57  F00B         	goto	l3830
  4538   001684                     u2900:
  4539   001684  2810               	incf	___fladd@bexp^0,w,c
  4540   001686  A4D8               	btfss	status,2,c
  4541   001688  EF48  F00B         	goto	u2911
  4542   00168C  EF4A  F00B         	goto	u2910
  4543   001690                     u2911:
  4544   001690  EF52  F00B         	goto	l3826
  4545   001694                     u2910:
  4546   001694  0E00               	movlw	0
  4547   001696  6E02               	movwf	___fladd@b^0,c
  4548   001698  0E00               	movlw	0
  4549   00169A  6E03               	movwf	(___fladd@b+1)^0,c
  4550   00169C  0E00               	movlw	0
  4551   00169E  6E04               	movwf	(___fladd@b+2)^0,c
  4552   0016A0  0E00               	movlw	0
  4553   0016A2  6E05               	movwf	(___fladd@b+3)^0,c
  4554   0016A4                     l3826:
  4555   0016A4  8E04               	bsf	(___fladd@b+2)^0,7,c
  4556   0016A6  0E00               	movlw	0
  4557   0016A8  6E05               	movwf	(___fladd@b+3)^0,c
  4558   0016AA  EF5F  F00B         	goto	l3832
  4559   0016AE                     l3830:
  4560   0016AE  0E00               	movlw	0
  4561   0016B0  6E02               	movwf	___fladd@b^0,c
  4562   0016B2  0E00               	movlw	0
  4563   0016B4  6E03               	movwf	(___fladd@b+1)^0,c
  4564   0016B6  0E00               	movlw	0
  4565   0016B8  6E04               	movwf	(___fladd@b+2)^0,c
  4566   0016BA  0E00               	movlw	0
  4567   0016BC  6E05               	movwf	(___fladd@b+3)^0,c
  4568   0016BE                     l3832:
  4569   0016BE  5009               	movf	(___fladd@a+3)^0,w,c
  4570   0016C0  0B80               	andlw	128
  4571   0016C2  6E0F               	movwf	___fladd@aexp^0,c
  4572   0016C4  500E               	movf	___fladd@signs^0,w,c
  4573   0016C6  180F               	xorwf	___fladd@aexp^0,w,c
  4574   0016C8  B4D8               	btfsc	status,2,c
  4575   0016CA  EF69  F00B         	goto	u2921
  4576   0016CE  EF6B  F00B         	goto	u2920
  4577   0016D2                     u2921:
  4578   0016D2  EF6C  F00B         	goto	l3838
  4579   0016D6                     u2920:
  4580   0016D6  8C0E               	bsf	___fladd@signs^0,6,c
  4581   0016D8                     l3838:
  4582   0016D8  5009               	movf	(___fladd@a+3)^0,w,c
  4583   0016DA  2409               	addwf	(___fladd@a+3)^0,w,c
  4584   0016DC  6E0F               	movwf	___fladd@aexp^0,c
  4585   0016DE  AE08               	btfss	(___fladd@a+2)^0,7,c
  4586   0016E0  EF74  F00B         	goto	u2931
  4587   0016E4  EF76  F00B         	goto	u2930
  4588   0016E8                     u2931:
  4589   0016E8  EF77  F00B         	goto	l3844
  4590   0016EC                     u2930:
  4591   0016EC  800F               	bsf	___fladd@aexp^0,0,c
  4592   0016EE                     l3844:
  4593   0016EE  500F               	movf	___fladd@aexp^0,w,c
  4594   0016F0  B4D8               	btfsc	status,2,c
  4595   0016F2  EF7D  F00B         	goto	u2941
  4596   0016F6  EF7F  F00B         	goto	u2940
  4597   0016FA                     u2941:
  4598   0016FA  EF94  F00B         	goto	l3854
  4599   0016FE                     u2940:
  4600   0016FE  280F               	incf	___fladd@aexp^0,w,c
  4601   001700  A4D8               	btfss	status,2,c
  4602   001702  EF85  F00B         	goto	u2951
  4603   001706  EF87  F00B         	goto	u2950
  4604   00170A                     u2951:
  4605   00170A  EF8F  F00B         	goto	l3850
  4606   00170E                     u2950:
  4607   00170E  0E00               	movlw	0
  4608   001710  6E06               	movwf	___fladd@a^0,c
  4609   001712  0E00               	movlw	0
  4610   001714  6E07               	movwf	(___fladd@a+1)^0,c
  4611   001716  0E00               	movlw	0
  4612   001718  6E08               	movwf	(___fladd@a+2)^0,c
  4613   00171A  0E00               	movlw	0
  4614   00171C  6E09               	movwf	(___fladd@a+3)^0,c
  4615   00171E                     l3850:
  4616   00171E  8E08               	bsf	(___fladd@a+2)^0,7,c
  4617   001720  0E00               	movlw	0
  4618   001722  6E09               	movwf	(___fladd@a+3)^0,c
  4619   001724  EF9C  F00B         	goto	l3856
  4620   001728                     l3854:
  4621   001728  0E00               	movlw	0
  4622   00172A  6E06               	movwf	___fladd@a^0,c
  4623   00172C  0E00               	movlw	0
  4624   00172E  6E07               	movwf	(___fladd@a+1)^0,c
  4625   001730  0E00               	movlw	0
  4626   001732  6E08               	movwf	(___fladd@a+2)^0,c
  4627   001734  0E00               	movlw	0
  4628   001736  6E09               	movwf	(___fladd@a+3)^0,c
  4629   001738                     l3856:
  4630   001738  5010               	movf	___fladd@bexp^0,w,c
  4631   00173A  5C0F               	subwf	___fladd@aexp^0,w,c
  4632   00173C  B0D8               	btfsc	status,0,c
  4633   00173E  EFA3  F00B         	goto	u2961
  4634   001742  EFA5  F00B         	goto	u2960
  4635   001746                     u2961:
  4636   001746  EFCC  F00B         	goto	l3892
  4637   00174A                     u2960:
  4638   00174A  AC0E               	btfss	___fladd@signs^0,6,c
  4639   00174C  EFAA  F00B         	goto	u2971
  4640   001750  EFAC  F00B         	goto	u2970
  4641   001754                     u2971:
  4642   001754  EFAE  F00B         	goto	l3862
  4643   001758                     u2970:
  4644   001758  0E80               	movlw	128
  4645   00175A  1A0E               	xorwf	___fladd@signs^0,f,c
  4646   00175C                     l3862:
  4647   00175C  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4648   001760  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4649   001764  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4650   001768  C002  F011         	movff	___fladd@b,___fladd@grs
  4651   00176C  C006  F002         	movff	___fladd@a,___fladd@b
  4652   001770  C011  F006         	movff	___fladd@grs,___fladd@a
  4653   001774  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4654   001778  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4655   00177C  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4656   001780  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4657   001784  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4658   001788  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4659   00178C  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4660   001790  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4661   001794  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4662   001798                     l3892:
  4663   001798  0E00               	movlw	0
  4664   00179A  6E11               	movwf	___fladd@grs^0,c
  4665   00179C  5010               	movf	___fladd@bexp^0,w,c
  4666   00179E  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4667   0017A2  6A0B               	clrf	(??___fladd+1)^0,c
  4668   0017A4  5E0A               	subwf	??___fladd^0,f,c
  4669   0017A6  0E00               	movlw	0
  4670   0017A8  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4671   0017AA  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4672   0017AC  EFE1  F00B         	goto	u2981
  4673   0017B0  500B               	movf	(??___fladd+1)^0,w,c
  4674   0017B2  E109               	bnz	u2980
  4675   0017B4  0E1A               	movlw	26
  4676   0017B6  5C0A               	subwf	??___fladd^0,w,c
  4677   0017B8  A0D8               	btfss	status,0,c
  4678   0017BA  EFE1  F00B         	goto	u2981
  4679   0017BE  EFE3  F00B         	goto	u2980
  4680   0017C2                     u2981:
  4681   0017C2  EF1A  F00C         	goto	l1261
  4682   0017C6                     u2980:
  4683   0017C6  5002               	movf	___fladd@b^0,w,c
  4684   0017C8  1003               	iorwf	(___fladd@b+1)^0,w,c
  4685   0017CA  1004               	iorwf	(___fladd@b+2)^0,w,c
  4686   0017CC  1005               	iorwf	(___fladd@b+3)^0,w,c
  4687   0017CE  A4D8               	btfss	status,2,c
  4688   0017D0  EFEC  F00B         	goto	u2991
  4689   0017D4  EFEF  F00B         	goto	u2990
  4690   0017D8                     u2991:
  4691   0017D8  0E01               	movlw	1
  4692   0017DA  EFF0  F00B         	goto	u3000
  4693   0017DE                     u2990:
  4694   0017DE  0E00               	movlw	0
  4695   0017E0                     u3000:
  4696   0017E0  6E11               	movwf	___fladd@grs^0,c
  4697   0017E2  0E00               	movlw	0
  4698   0017E4  6E02               	movwf	___fladd@b^0,c
  4699   0017E6  0E00               	movlw	0
  4700   0017E8  6E03               	movwf	(___fladd@b+1)^0,c
  4701   0017EA  0E00               	movlw	0
  4702   0017EC  6E04               	movwf	(___fladd@b+2)^0,c
  4703   0017EE  0E00               	movlw	0
  4704   0017F0  6E05               	movwf	(___fladd@b+3)^0,c
  4705   0017F2  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4706   0017F6  EF23  F00C         	goto	l1260
  4707   0017FA                     l1262:
  4708   0017FA  A011               	btfss	___fladd@grs^0,0,c
  4709   0017FC  EF02  F00C         	goto	u3011
  4710   001800  EF04  F00C         	goto	u3010
  4711   001804                     u3011:
  4712   001804  EF0A  F00C         	goto	l3904
  4713   001808                     u3010:
  4714   001808  90D8               	bcf	status,0,c
  4715   00180A  3011               	rrcf	___fladd@grs^0,w,c
  4716   00180C  0901               	iorlw	1
  4717   00180E  6E11               	movwf	___fladd@grs^0,c
  4718   001810  EF0C  F00C         	goto	l3906
  4719   001814                     l3904:
  4720   001814  90D8               	bcf	status,0,c
  4721   001816  3211               	rrcf	___fladd@grs^0,f,c
  4722   001818                     l3906:
  4723   001818  A002               	btfss	___fladd@b^0,0,c
  4724   00181A  EF11  F00C         	goto	u3021
  4725   00181E  EF13  F00C         	goto	u3020
  4726   001822                     u3021:
  4727   001822  EF14  F00C         	goto	l3910
  4728   001826                     u3020:
  4729   001826  8E11               	bsf	___fladd@grs^0,7,c
  4730   001828                     l3910:
  4731   001828  3405               	rlcf	(___fladd@b+3)^0,w,c
  4732   00182A  3205               	rrcf	(___fladd@b+3)^0,f,c
  4733   00182C  3204               	rrcf	(___fladd@b+2)^0,f,c
  4734   00182E  3203               	rrcf	(___fladd@b+1)^0,f,c
  4735   001830  3202               	rrcf	___fladd@b^0,f,c
  4736   001832  2A10               	incf	___fladd@bexp^0,f,c
  4737   001834                     l1261:
  4738   001834  500F               	movf	___fladd@aexp^0,w,c
  4739   001836  5C10               	subwf	___fladd@bexp^0,w,c
  4740   001838  A0D8               	btfss	status,0,c
  4741   00183A  EF21  F00C         	goto	u3031
  4742   00183E  EF23  F00C         	goto	u3030
  4743   001842                     u3031:
  4744   001842  EFFD  F00B         	goto	l1262
  4745   001846                     u3030:
  4746   001846                     l1260:
  4747   001846  BC0E               	btfsc	___fladd@signs^0,6,c
  4748   001848  EF28  F00C         	goto	u3041
  4749   00184C  EF2A  F00C         	goto	u3040
  4750   001850                     u3041:
  4751   001850  EF6A  F00C         	goto	l3938
  4752   001854                     u3040:
  4753   001854  5010               	movf	___fladd@bexp^0,w,c
  4754   001856  A4D8               	btfss	status,2,c
  4755   001858  EF30  F00C         	goto	u3051
  4756   00185C  EF32  F00C         	goto	u3050
  4757   001860                     u3051:
  4758   001860  EF3C  F00C         	goto	l3920
  4759   001864                     u3050:
  4760   001864  0E00               	movlw	0
  4761   001866  6E02               	movwf	?___fladd^0,c
  4762   001868  0E00               	movlw	0
  4763   00186A  6E03               	movwf	(?___fladd+1)^0,c
  4764   00186C  0E00               	movlw	0
  4765   00186E  6E04               	movwf	(?___fladd+2)^0,c
  4766   001870  0E00               	movlw	0
  4767   001872  6E05               	movwf	(?___fladd+3)^0,c
  4768   001874  EF8B  F00D         	goto	l1269
  4769   001878                     l3920:
  4770   001878  5006               	movf	___fladd@a^0,w,c
  4771   00187A  2602               	addwf	___fladd@b^0,f,c
  4772   00187C  5007               	movf	(___fladd@a+1)^0,w,c
  4773   00187E  2203               	addwfc	(___fladd@b+1)^0,f,c
  4774   001880  5008               	movf	(___fladd@a+2)^0,w,c
  4775   001882  2204               	addwfc	(___fladd@b+2)^0,f,c
  4776   001884  5009               	movf	(___fladd@a+3)^0,w,c
  4777   001886  2205               	addwfc	(___fladd@b+3)^0,f,c
  4778   001888  A005               	btfss	(___fladd@b+3)^0,0,c
  4779   00188A  EF49  F00C         	goto	u3061
  4780   00188E  EF4B  F00C         	goto	u3060
  4781   001892                     u3061:
  4782   001892  EFF7  F00C         	goto	l3974
  4783   001896                     u3060:
  4784   001896  A011               	btfss	___fladd@grs^0,0,c
  4785   001898  EF50  F00C         	goto	u3071
  4786   00189C  EF52  F00C         	goto	u3070
  4787   0018A0                     u3071:
  4788   0018A0  EF58  F00C         	goto	l3928
  4789   0018A4                     u3070:
  4790   0018A4  90D8               	bcf	status,0,c
  4791   0018A6  3011               	rrcf	___fladd@grs^0,w,c
  4792   0018A8  0901               	iorlw	1
  4793   0018AA  6E11               	movwf	___fladd@grs^0,c
  4794   0018AC  EF5A  F00C         	goto	l3930
  4795   0018B0                     l3928:
  4796   0018B0  90D8               	bcf	status,0,c
  4797   0018B2  3211               	rrcf	___fladd@grs^0,f,c
  4798   0018B4                     l3930:
  4799   0018B4  A002               	btfss	___fladd@b^0,0,c
  4800   0018B6  EF5F  F00C         	goto	u3081
  4801   0018BA  EF61  F00C         	goto	u3080
  4802   0018BE                     u3081:
  4803   0018BE  EF62  F00C         	goto	l3934
  4804   0018C2                     u3080:
  4805   0018C2  8E11               	bsf	___fladd@grs^0,7,c
  4806   0018C4                     l3934:
  4807   0018C4  3405               	rlcf	(___fladd@b+3)^0,w,c
  4808   0018C6  3205               	rrcf	(___fladd@b+3)^0,f,c
  4809   0018C8  3204               	rrcf	(___fladd@b+2)^0,f,c
  4810   0018CA  3203               	rrcf	(___fladd@b+1)^0,f,c
  4811   0018CC  3202               	rrcf	___fladd@b^0,f,c
  4812   0018CE  2A10               	incf	___fladd@bexp^0,f,c
  4813   0018D0  EFF7  F00C         	goto	l3974
  4814   0018D4                     l3938:
  4815   0018D4  5006               	movf	___fladd@a^0,w,c
  4816   0018D6  5C02               	subwf	___fladd@b^0,w,c
  4817   0018D8  5007               	movf	(___fladd@a+1)^0,w,c
  4818   0018DA  5803               	subwfb	(___fladd@b+1)^0,w,c
  4819   0018DC  5008               	movf	(___fladd@a+2)^0,w,c
  4820   0018DE  5804               	subwfb	(___fladd@b+2)^0,w,c
  4821   0018E0  5005               	movf	(___fladd@b+3)^0,w,c
  4822   0018E2  0A80               	xorlw	128
  4823   0018E4  6E0A               	movwf	??___fladd^0,c
  4824   0018E6  5009               	movf	(___fladd@a+3)^0,w,c
  4825   0018E8  0A80               	xorlw	128
  4826   0018EA  580A               	subwfb	??___fladd^0,w,c
  4827   0018EC  B0D8               	btfsc	status,0,c
  4828   0018EE  EF7B  F00C         	goto	u3091
  4829   0018F2  EF7D  F00C         	goto	u3090
  4830   0018F6                     u3091:
  4831   0018F6  EFA8  F00C         	goto	l3948
  4832   0018FA                     u3090:
  4833   0018FA  5002               	movf	___fladd@b^0,w,c
  4834   0018FC  5C06               	subwf	___fladd@a^0,w,c
  4835   0018FE  6E0A               	movwf	??___fladd^0,c
  4836   001900  5003               	movf	(___fladd@b+1)^0,w,c
  4837   001902  5807               	subwfb	(___fladd@a+1)^0,w,c
  4838   001904  6E0B               	movwf	(??___fladd+1)^0,c
  4839   001906  5004               	movf	(___fladd@b+2)^0,w,c
  4840   001908  5808               	subwfb	(___fladd@a+2)^0,w,c
  4841   00190A  6E0C               	movwf	(??___fladd+2)^0,c
  4842   00190C  5005               	movf	(___fladd@b+3)^0,w,c
  4843   00190E  5809               	subwfb	(___fladd@a+3)^0,w,c
  4844   001910  6E0D               	movwf	(??___fladd+3)^0,c
  4845   001912  0EFF               	movlw	255
  4846   001914  240A               	addwf	??___fladd^0,w,c
  4847   001916  6E02               	movwf	___fladd@b^0,c
  4848   001918  0EFF               	movlw	255
  4849   00191A  200B               	addwfc	(??___fladd+1)^0,w,c
  4850   00191C  6E03               	movwf	(___fladd@b+1)^0,c
  4851   00191E  0EFF               	movlw	255
  4852   001920  200C               	addwfc	(??___fladd+2)^0,w,c
  4853   001922  6E04               	movwf	(___fladd@b+2)^0,c
  4854   001924  0EFF               	movlw	255
  4855   001926  200D               	addwfc	(??___fladd+3)^0,w,c
  4856   001928  6E05               	movwf	(___fladd@b+3)^0,c
  4857   00192A  0E80               	movlw	128
  4858   00192C  1A0E               	xorwf	___fladd@signs^0,f,c
  4859   00192E  6C11               	negf	___fladd@grs^0,c
  4860   001930  5011               	movf	___fladd@grs^0,w,c
  4861   001932  A4D8               	btfss	status,2,c
  4862   001934  EF9E  F00C         	goto	u3101
  4863   001938  EFA0  F00C         	goto	u3100
  4864   00193C                     u3101:
  4865   00193C  EFB0  F00C         	goto	l1277
  4866   001940                     u3100:
  4867   001940  0E01               	movlw	1
  4868   001942  2602               	addwf	___fladd@b^0,f,c
  4869   001944  0E00               	movlw	0
  4870   001946  2203               	addwfc	(___fladd@b+1)^0,f,c
  4871   001948  2204               	addwfc	(___fladd@b+2)^0,f,c
  4872   00194A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4873   00194C  EFB0  F00C         	goto	l1277
  4874   001950                     l3948:
  4875   001950  5006               	movf	___fladd@a^0,w,c
  4876   001952  5E02               	subwf	___fladd@b^0,f,c
  4877   001954  5007               	movf	(___fladd@a+1)^0,w,c
  4878   001956  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4879   001958  5008               	movf	(___fladd@a+2)^0,w,c
  4880   00195A  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4881   00195C  5009               	movf	(___fladd@a+3)^0,w,c
  4882   00195E  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4883   001960                     l1277:
  4884   001960  5002               	movf	___fladd@b^0,w,c
  4885   001962  1003               	iorwf	(___fladd@b+1)^0,w,c
  4886   001964  1004               	iorwf	(___fladd@b+2)^0,w,c
  4887   001966  1005               	iorwf	(___fladd@b+3)^0,w,c
  4888   001968  A4D8               	btfss	status,2,c
  4889   00196A  EFB9  F00C         	goto	u3111
  4890   00196E  EFBB  F00C         	goto	u3110
  4891   001972                     u3111:
  4892   001972  EFF0  F00C         	goto	l3972
  4893   001976                     u3110:
  4894   001976  5011               	movf	___fladd@grs^0,w,c
  4895   001978  A4D8               	btfss	status,2,c
  4896   00197A  EFC1  F00C         	goto	u3121
  4897   00197E  EFC3  F00C         	goto	u3120
  4898   001982                     u3121:
  4899   001982  EFF0  F00C         	goto	l3972
  4900   001986                     u3120:
  4901   001986  0E00               	movlw	0
  4902   001988  6E02               	movwf	?___fladd^0,c
  4903   00198A  0E00               	movlw	0
  4904   00198C  6E03               	movwf	(?___fladd+1)^0,c
  4905   00198E  0E00               	movlw	0
  4906   001990  6E04               	movwf	(?___fladd+2)^0,c
  4907   001992  0E00               	movlw	0
  4908   001994  6E05               	movwf	(?___fladd+3)^0,c
  4909   001996  EF8B  F00D         	goto	l1269
  4910   00199A                     l3956:
  4911   00199A  90D8               	bcf	status,0,c
  4912   00199C  3602               	rlcf	___fladd@b^0,f,c
  4913   00199E  3603               	rlcf	(___fladd@b+1)^0,f,c
  4914   0019A0  3604               	rlcf	(___fladd@b+2)^0,f,c
  4915   0019A2  3605               	rlcf	(___fladd@b+3)^0,f,c
  4916   0019A4  AE11               	btfss	___fladd@grs^0,7,c
  4917   0019A6  EFD7  F00C         	goto	u3131
  4918   0019AA  EFD9  F00C         	goto	u3130
  4919   0019AE                     u3131:
  4920   0019AE  EFDA  F00C         	goto	l3962
  4921   0019B2                     u3130:
  4922   0019B2  8002               	bsf	___fladd@b^0,0,c
  4923   0019B4                     l3962:
  4924   0019B4  A011               	btfss	___fladd@grs^0,0,c
  4925   0019B6  EFDF  F00C         	goto	u3141
  4926   0019BA  EFE1  F00C         	goto	u3140
  4927   0019BE                     u3141:
  4928   0019BE  EFE5  F00C         	goto	l3966
  4929   0019C2                     u3140:
  4930   0019C2  80D8               	bsf	status,0,c
  4931   0019C4  3611               	rlcf	___fladd@grs^0,f,c
  4932   0019C6  EFE7  F00C         	goto	l3968
  4933   0019CA                     l3966:
  4934   0019CA  90D8               	bcf	status,0,c
  4935   0019CC  3611               	rlcf	___fladd@grs^0,f,c
  4936   0019CE                     l3968:
  4937   0019CE  5010               	movf	___fladd@bexp^0,w,c
  4938   0019D0  B4D8               	btfsc	status,2,c
  4939   0019D2  EFED  F00C         	goto	u3151
  4940   0019D6  EFEF  F00C         	goto	u3150
  4941   0019DA                     u3151:
  4942   0019DA  EFF0  F00C         	goto	l3972
  4943   0019DE                     u3150:
  4944   0019DE  0610               	decf	___fladd@bexp^0,f,c
  4945   0019E0                     l3972:
  4946   0019E0  AE04               	btfss	(___fladd@b+2)^0,7,c
  4947   0019E2  EFF5  F00C         	goto	u3161
  4948   0019E6  EFF7  F00C         	goto	u3160
  4949   0019EA                     u3161:
  4950   0019EA  EFCD  F00C         	goto	l3956
  4951   0019EE                     u3160:
  4952   0019EE                     l3974:
  4953   0019EE  0E00               	movlw	0
  4954   0019F0  6E0F               	movwf	___fladd@aexp^0,c
  4955   0019F2  AE11               	btfss	___fladd@grs^0,7,c
  4956   0019F4  EFFE  F00C         	goto	u3171
  4957   0019F8  EF00  F00D         	goto	u3170
  4958   0019FC                     u3171:
  4959   0019FC  EF18  F00D         	goto	l1286
  4960   001A00                     u3170:
  4961   001A00  C011  F00A         	movff	___fladd@grs,??___fladd
  4962   001A04  0E7F               	movlw	127
  4963   001A06  160A               	andwf	??___fladd^0,f,c
  4964   001A08  B4D8               	btfsc	status,2,c
  4965   001A0A  EF09  F00D         	goto	u3181
  4966   001A0E  EF0B  F00D         	goto	u3180
  4967   001A12                     u3181:
  4968   001A12  EF0F  F00D         	goto	l1287
  4969   001A16                     u3180:
  4970   001A16                     l3980:
  4971   001A16  0E01               	movlw	1
  4972   001A18  6E0F               	movwf	___fladd@aexp^0,c
  4973   001A1A  EF18  F00D         	goto	l1286
  4974   001A1E                     l1287:
  4975   001A1E  A002               	btfss	___fladd@b^0,0,c
  4976   001A20  EF14  F00D         	goto	u3191
  4977   001A24  EF16  F00D         	goto	u3190
  4978   001A28                     u3191:
  4979   001A28  EF18  F00D         	goto	l1286
  4980   001A2C                     u3190:
  4981   001A2C  EF0B  F00D         	goto	l3980
  4982   001A30                     l1286:
  4983   001A30  500F               	movf	___fladd@aexp^0,w,c
  4984   001A32  B4D8               	btfsc	status,2,c
  4985   001A34  EF1E  F00D         	goto	u3201
  4986   001A38  EF20  F00D         	goto	u3200
  4987   001A3C                     u3201:
  4988   001A3C  EF4B  F00D         	goto	l3992
  4989   001A40                     u3200:
  4990   001A40  0E01               	movlw	1
  4991   001A42  2602               	addwf	___fladd@b^0,f,c
  4992   001A44  0E00               	movlw	0
  4993   001A46  2203               	addwfc	(___fladd@b+1)^0,f,c
  4994   001A48  2204               	addwfc	(___fladd@b+2)^0,f,c
  4995   001A4A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4996   001A4C  A005               	btfss	(___fladd@b+3)^0,0,c
  4997   001A4E  EF2B  F00D         	goto	u3211
  4998   001A52  EF2D  F00D         	goto	u3210
  4999   001A56                     u3211:
  5000   001A56  EF4B  F00D         	goto	l3992
  5001   001A5A                     u3210:
  5002   001A5A  C002  F00A         	movff	___fladd@b,??___fladd
  5003   001A5E  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  5004   001A62  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  5005   001A66  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  5006   001A6A  340D               	rlcf	(??___fladd+3)^0,w,c
  5007   001A6C  320D               	rrcf	(??___fladd+3)^0,f,c
  5008   001A6E  320C               	rrcf	(??___fladd+2)^0,f,c
  5009   001A70  320B               	rrcf	(??___fladd+1)^0,f,c
  5010   001A72  320A               	rrcf	??___fladd^0,f,c
  5011   001A74  C00A  F002         	movff	??___fladd,___fladd@b
  5012   001A78  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  5013   001A7C  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  5014   001A80  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  5015   001A84  2810               	incf	___fladd@bexp^0,w,c
  5016   001A86  B4D8               	btfsc	status,2,c
  5017   001A88  EF48  F00D         	goto	u3221
  5018   001A8C  EF4A  F00D         	goto	u3220
  5019   001A90                     u3221:
  5020   001A90  EF4B  F00D         	goto	l3992
  5021   001A94                     u3220:
  5022   001A94  2A10               	incf	___fladd@bexp^0,f,c
  5023   001A96                     l3992:
  5024   001A96  2810               	incf	___fladd@bexp^0,w,c
  5025   001A98  B4D8               	btfsc	status,2,c
  5026   001A9A  EF51  F00D         	goto	u3231
  5027   001A9E  EF53  F00D         	goto	u3230
  5028   001AA2                     u3231:
  5029   001AA2  EF5B  F00D         	goto	l3996
  5030   001AA6                     u3230:
  5031   001AA6  5010               	movf	___fladd@bexp^0,w,c
  5032   001AA8  A4D8               	btfss	status,2,c
  5033   001AAA  EF59  F00D         	goto	u3241
  5034   001AAE  EF5B  F00D         	goto	u3240
  5035   001AB2                     u3241:
  5036   001AB2  EF6D  F00D         	goto	l4000
  5037   001AB6                     u3240:
  5038   001AB6                     l3996:
  5039   001AB6  0E00               	movlw	0
  5040   001AB8  6E02               	movwf	___fladd@b^0,c
  5041   001ABA  0E00               	movlw	0
  5042   001ABC  6E03               	movwf	(___fladd@b+1)^0,c
  5043   001ABE  0E00               	movlw	0
  5044   001AC0  6E04               	movwf	(___fladd@b+2)^0,c
  5045   001AC2  0E00               	movlw	0
  5046   001AC4  6E05               	movwf	(___fladd@b+3)^0,c
  5047   001AC6  5010               	movf	___fladd@bexp^0,w,c
  5048   001AC8  A4D8               	btfss	status,2,c
  5049   001ACA  EF69  F00D         	goto	u3251
  5050   001ACE  EF6B  F00D         	goto	u3250
  5051   001AD2                     u3251:
  5052   001AD2  EF6D  F00D         	goto	l4000
  5053   001AD6                     u3250:
  5054   001AD6  0E00               	movlw	0
  5055   001AD8  6E0E               	movwf	___fladd@signs^0,c
  5056   001ADA                     l4000:
  5057   001ADA  A010               	btfss	___fladd@bexp^0,0,c
  5058   001ADC  EF72  F00D         	goto	u3261
  5059   001AE0  EF74  F00D         	goto	u3260
  5060   001AE4                     u3261:
  5061   001AE4  EF77  F00D         	goto	l4004
  5062   001AE8                     u3260:
  5063   001AE8  8E04               	bsf	(___fladd@b+2)^0,7,c
  5064   001AEA  EF78  F00D         	goto	l4006
  5065   001AEE                     l4004:
  5066   001AEE  9E04               	bcf	(___fladd@b+2)^0,7,c
  5067   001AF0                     l4006:
  5068   001AF0  90D8               	bcf	status,0,c
  5069   001AF2  3010               	rrcf	___fladd@bexp^0,w,c
  5070   001AF4  6E05               	movwf	(___fladd@b+3)^0,c
  5071   001AF6  AE0E               	btfss	___fladd@signs^0,7,c
  5072   001AF8  EF80  F00D         	goto	u3271
  5073   001AFC  EF82  F00D         	goto	u3270
  5074   001B00                     u3271:
  5075   001B00  EF83  F00D         	goto	l4012
  5076   001B04                     u3270:
  5077   001B04  8E05               	bsf	(___fladd@b+3)^0,7,c
  5078   001B06                     l4012:
  5079   001B06  C002  F002         	movff	___fladd@b,?___fladd
  5080   001B0A  C003  F003         	movff	___fladd@b+1,?___fladd+1
  5081   001B0E  C004  F004         	movff	___fladd@b+2,?___fladd+2
  5082   001B12  C005  F005         	movff	___fladd@b+3,?___fladd+3
  5083   001B16                     l1269:
  5084   001B16  0012               	return		;funcret
  5085   001B18                     __end_of___fladd:
  5086                           	callstack 0
  5087                           
  5088 ;; *************** function ___flmul *****************
  5089 ;; Defined at:
  5090 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;  b               4   25[COMRAM] unsigned char 
  5093 ;;  a               4   29[COMRAM] unsigned char 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  prod            4   44[COMRAM] struct .
  5096 ;;  grs             4   38[COMRAM] unsigned long 
  5097 ;;  temp            2   48[COMRAM] struct .
  5098 ;;  bexp            1   43[COMRAM] unsigned char 
  5099 ;;  aexp            1   42[COMRAM] unsigned char 
  5100 ;;  sign            1   37[COMRAM] unsigned char 
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  4   25[COMRAM] unsigned char 
  5103 ;; Registers used:
  5104 ;;		wreg, status,2, status,0, prodl, prodh
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5110 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5111 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5112 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5113 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5114 ;;Total ram usage:       25 bytes
  5115 ;; Hardware stack levels used: 1
  5116 ;; Hardware stack levels required when called: 1
  5117 ;; This function calls:
  5118 ;;		Nothing
  5119 ;; This function is called by:
  5120 ;;		_convert_rgb2hue
  5121 ;;		_main
  5122 ;;		_fullSpeedAhead
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           	psect	text15
  5127   001B18                     __ptext15:
  5128                           	callstack 0
  5129   001B18                     ___flmul:
  5130                           	callstack 26
  5131   001B18  501D               	movf	(___flmul@b+3)^0,w,c
  5132   001B1A  0B80               	andlw	128
  5133   001B1C  6E26               	movwf	___flmul@sign^0,c
  5134   001B1E  501D               	movf	(___flmul@b+3)^0,w,c
  5135   001B20  241D               	addwf	(___flmul@b+3)^0,w,c
  5136   001B22  6E2C               	movwf	___flmul@bexp^0,c
  5137   001B24  AE1C               	btfss	(___flmul@b+2)^0,7,c
  5138   001B26  EF97  F00D         	goto	u3281
  5139   001B2A  EF99  F00D         	goto	u3280
  5140   001B2E                     u3281:
  5141   001B2E  EF9A  F00D         	goto	l4022
  5142   001B32                     u3280:
  5143   001B32  802C               	bsf	___flmul@bexp^0,0,c
  5144   001B34                     l4022:
  5145   001B34  502C               	movf	___flmul@bexp^0,w,c
  5146   001B36  B4D8               	btfsc	status,2,c
  5147   001B38  EFA0  F00D         	goto	u3291
  5148   001B3C  EFA2  F00D         	goto	u3290
  5149   001B40                     u3291:
  5150   001B40  EFB5  F00D         	goto	l4030
  5151   001B44                     u3290:
  5152   001B44  282C               	incf	___flmul@bexp^0,w,c
  5153   001B46  A4D8               	btfss	status,2,c
  5154   001B48  EFA8  F00D         	goto	u3301
  5155   001B4C  EFAA  F00D         	goto	u3300
  5156   001B50                     u3301:
  5157   001B50  EFB2  F00D         	goto	l4028
  5158   001B54                     u3300:
  5159   001B54  0E00               	movlw	0
  5160   001B56  6E1A               	movwf	___flmul@b^0,c
  5161   001B58  0E00               	movlw	0
  5162   001B5A  6E1B               	movwf	(___flmul@b+1)^0,c
  5163   001B5C  0E00               	movlw	0
  5164   001B5E  6E1C               	movwf	(___flmul@b+2)^0,c
  5165   001B60  0E00               	movlw	0
  5166   001B62  6E1D               	movwf	(___flmul@b+3)^0,c
  5167   001B64                     l4028:
  5168   001B64  8E1C               	bsf	(___flmul@b+2)^0,7,c
  5169   001B66  EFBD  F00D         	goto	l4032
  5170   001B6A                     l4030:
  5171   001B6A  0E00               	movlw	0
  5172   001B6C  6E1A               	movwf	___flmul@b^0,c
  5173   001B6E  0E00               	movlw	0
  5174   001B70  6E1B               	movwf	(___flmul@b+1)^0,c
  5175   001B72  0E00               	movlw	0
  5176   001B74  6E1C               	movwf	(___flmul@b+2)^0,c
  5177   001B76  0E00               	movlw	0
  5178   001B78  6E1D               	movwf	(___flmul@b+3)^0,c
  5179   001B7A                     l4032:
  5180   001B7A  5021               	movf	(___flmul@a+3)^0,w,c
  5181   001B7C  0B80               	andlw	128
  5182   001B7E  1A26               	xorwf	___flmul@sign^0,f,c
  5183   001B80  5021               	movf	(___flmul@a+3)^0,w,c
  5184   001B82  2421               	addwf	(___flmul@a+3)^0,w,c
  5185   001B84  6E2B               	movwf	___flmul@aexp^0,c
  5186   001B86  AE20               	btfss	(___flmul@a+2)^0,7,c
  5187   001B88  EFC8  F00D         	goto	u3311
  5188   001B8C  EFCA  F00D         	goto	u3310
  5189   001B90                     u3311:
  5190   001B90  EFCB  F00D         	goto	l4040
  5191   001B94                     u3310:
  5192   001B94  802B               	bsf	___flmul@aexp^0,0,c
  5193   001B96                     l4040:
  5194   001B96  502B               	movf	___flmul@aexp^0,w,c
  5195   001B98  B4D8               	btfsc	status,2,c
  5196   001B9A  EFD1  F00D         	goto	u3321
  5197   001B9E  EFD3  F00D         	goto	u3320
  5198   001BA2                     u3321:
  5199   001BA2  EFE6  F00D         	goto	l4048
  5200   001BA6                     u3320:
  5201   001BA6  282B               	incf	___flmul@aexp^0,w,c
  5202   001BA8  A4D8               	btfss	status,2,c
  5203   001BAA  EFD9  F00D         	goto	u3331
  5204   001BAE  EFDB  F00D         	goto	u3330
  5205   001BB2                     u3331:
  5206   001BB2  EFE3  F00D         	goto	l4046
  5207   001BB6                     u3330:
  5208   001BB6  0E00               	movlw	0
  5209   001BB8  6E1E               	movwf	___flmul@a^0,c
  5210   001BBA  0E00               	movlw	0
  5211   001BBC  6E1F               	movwf	(___flmul@a+1)^0,c
  5212   001BBE  0E00               	movlw	0
  5213   001BC0  6E20               	movwf	(___flmul@a+2)^0,c
  5214   001BC2  0E00               	movlw	0
  5215   001BC4  6E21               	movwf	(___flmul@a+3)^0,c
  5216   001BC6                     l4046:
  5217   001BC6  8E20               	bsf	(___flmul@a+2)^0,7,c
  5218   001BC8  EFEE  F00D         	goto	l1346
  5219   001BCC                     l4048:
  5220   001BCC  0E00               	movlw	0
  5221   001BCE  6E1E               	movwf	___flmul@a^0,c
  5222   001BD0  0E00               	movlw	0
  5223   001BD2  6E1F               	movwf	(___flmul@a+1)^0,c
  5224   001BD4  0E00               	movlw	0
  5225   001BD6  6E20               	movwf	(___flmul@a+2)^0,c
  5226   001BD8  0E00               	movlw	0
  5227   001BDA  6E21               	movwf	(___flmul@a+3)^0,c
  5228   001BDC                     l1346:
  5229   001BDC  502B               	movf	___flmul@aexp^0,w,c
  5230   001BDE  B4D8               	btfsc	status,2,c
  5231   001BE0  EFF4  F00D         	goto	u3341
  5232   001BE4  EFF6  F00D         	goto	u3340
  5233   001BE8                     u3341:
  5234   001BE8  EFFE  F00D         	goto	l4052
  5235   001BEC                     u3340:
  5236   001BEC  502C               	movf	___flmul@bexp^0,w,c
  5237   001BEE  A4D8               	btfss	status,2,c
  5238   001BF0  EFFC  F00D         	goto	u3351
  5239   001BF4  EFFE  F00D         	goto	u3350
  5240   001BF8                     u3351:
  5241   001BF8  EF08  F00E         	goto	l4056
  5242   001BFC                     u3350:
  5243   001BFC                     l4052:
  5244   001BFC  0E00               	movlw	0
  5245   001BFE  6E1A               	movwf	?___flmul^0,c
  5246   001C00  0E00               	movlw	0
  5247   001C02  6E1B               	movwf	(?___flmul+1)^0,c
  5248   001C04  0E00               	movlw	0
  5249   001C06  6E1C               	movwf	(?___flmul+2)^0,c
  5250   001C08  0E00               	movlw	0
  5251   001C0A  6E1D               	movwf	(?___flmul+3)^0,c
  5252   001C0C  EFA0  F00F         	goto	l1350
  5253   001C10                     l4056:
  5254   001C10  5020               	movf	(___flmul@a+2)^0,w,c
  5255   001C12  021A               	mulwf	___flmul@b^0,c
  5256   001C14  CFF3 F031          	movff	prodl,___flmul@temp
  5257   001C18  CFF4 F032          	movff	prodh,___flmul@temp+1
  5258   001C1C  5031               	movf	___flmul@temp^0,w,c
  5259   001C1E  6E27               	movwf	___flmul@grs^0,c
  5260   001C20  6A28               	clrf	(___flmul@grs+1)^0,c
  5261   001C22  6A29               	clrf	(___flmul@grs+2)^0,c
  5262   001C24  6A2A               	clrf	(___flmul@grs+3)^0,c
  5263   001C26  5032               	movf	(___flmul@temp+1)^0,w,c
  5264   001C28  6E2D               	movwf	___flmul@prod^0,c
  5265   001C2A  6A2E               	clrf	(___flmul@prod+1)^0,c
  5266   001C2C  6A2F               	clrf	(___flmul@prod+2)^0,c
  5267   001C2E  6A30               	clrf	(___flmul@prod+3)^0,c
  5268   001C30  501F               	movf	(___flmul@a+1)^0,w,c
  5269   001C32  021B               	mulwf	(___flmul@b+1)^0,c
  5270   001C34  CFF3 F031          	movff	prodl,___flmul@temp
  5271   001C38  CFF4 F032          	movff	prodh,___flmul@temp+1
  5272   001C3C  5031               	movf	___flmul@temp^0,w,c
  5273   001C3E  2627               	addwf	___flmul@grs^0,f,c
  5274   001C40  0E00               	movlw	0
  5275   001C42  2228               	addwfc	(___flmul@grs+1)^0,f,c
  5276   001C44  2229               	addwfc	(___flmul@grs+2)^0,f,c
  5277   001C46  222A               	addwfc	(___flmul@grs+3)^0,f,c
  5278   001C48  5032               	movf	(___flmul@temp+1)^0,w,c
  5279   001C4A  262D               	addwf	___flmul@prod^0,f,c
  5280   001C4C  0E00               	movlw	0
  5281   001C4E  222E               	addwfc	(___flmul@prod+1)^0,f,c
  5282   001C50  222F               	addwfc	(___flmul@prod+2)^0,f,c
  5283   001C52  2230               	addwfc	(___flmul@prod+3)^0,f,c
  5284   001C54  501E               	movf	___flmul@a^0,w,c
  5285   001C56  021C               	mulwf	(___flmul@b+2)^0,c
  5286   001C58  CFF3 F031          	movff	prodl,___flmul@temp
  5287   001C5C  CFF4 F032          	movff	prodh,___flmul@temp+1
  5288   001C60  5031               	movf	___flmul@temp^0,w,c
  5289   001C62  2627               	addwf	___flmul@grs^0,f,c
  5290   001C64  0E00               	movlw	0
  5291   001C66  2228               	addwfc	(___flmul@grs+1)^0,f,c
  5292   001C68  2229               	addwfc	(___flmul@grs+2)^0,f,c
  5293   001C6A  222A               	addwfc	(___flmul@grs+3)^0,f,c
  5294   001C6C  5032               	movf	(___flmul@temp+1)^0,w,c
  5295   001C6E  262D               	addwf	___flmul@prod^0,f,c
  5296   001C70  0E00               	movlw	0
  5297   001C72  222E               	addwfc	(___flmul@prod+1)^0,f,c
  5298   001C74  222F               	addwfc	(___flmul@prod+2)^0,f,c
  5299   001C76  2230               	addwfc	(___flmul@prod+3)^0,f,c
  5300   001C78  C029  F02A         	movff	___flmul@grs+2,___flmul@grs+3
  5301   001C7C  C028  F029         	movff	___flmul@grs+1,___flmul@grs+2
  5302   001C80  C027  F028         	movff	___flmul@grs,___flmul@grs+1
  5303   001C84  6A27               	clrf	___flmul@grs^0,c
  5304   001C86  501E               	movf	___flmul@a^0,w,c
  5305   001C88  021B               	mulwf	(___flmul@b+1)^0,c
  5306   001C8A  CFF3 F031          	movff	prodl,___flmul@temp
  5307   001C8E  CFF4 F032          	movff	prodh,___flmul@temp+1
  5308   001C92  5031               	movf	___flmul@temp^0,w,c
  5309   001C94  2627               	addwf	___flmul@grs^0,f,c
  5310   001C96  5032               	movf	(___flmul@temp+1)^0,w,c
  5311   001C98  2228               	addwfc	(___flmul@grs+1)^0,f,c
  5312   001C9A  0E00               	movlw	0
  5313   001C9C  2229               	addwfc	(___flmul@grs+2)^0,f,c
  5314   001C9E  0E00               	movlw	0
  5315   001CA0  222A               	addwfc	(___flmul@grs+3)^0,f,c
  5316   001CA2  501F               	movf	(___flmul@a+1)^0,w,c
  5317   001CA4  021A               	mulwf	___flmul@b^0,c
  5318   001CA6  CFF3 F031          	movff	prodl,___flmul@temp
  5319   001CAA  CFF4 F032          	movff	prodh,___flmul@temp+1
  5320   001CAE  5031               	movf	___flmul@temp^0,w,c
  5321   001CB0  2627               	addwf	___flmul@grs^0,f,c
  5322   001CB2  5032               	movf	(___flmul@temp+1)^0,w,c
  5323   001CB4  2228               	addwfc	(___flmul@grs+1)^0,f,c
  5324   001CB6  0E00               	movlw	0
  5325   001CB8  2229               	addwfc	(___flmul@grs+2)^0,f,c
  5326   001CBA  0E00               	movlw	0
  5327   001CBC  222A               	addwfc	(___flmul@grs+3)^0,f,c
  5328   001CBE  C029  F02A         	movff	___flmul@grs+2,___flmul@grs+3
  5329   001CC2  C028  F029         	movff	___flmul@grs+1,___flmul@grs+2
  5330   001CC6  C027  F028         	movff	___flmul@grs,___flmul@grs+1
  5331   001CCA  6A27               	clrf	___flmul@grs^0,c
  5332   001CCC  501E               	movf	___flmul@a^0,w,c
  5333   001CCE  021A               	mulwf	___flmul@b^0,c
  5334   001CD0  CFF3 F031          	movff	prodl,___flmul@temp
  5335   001CD4  CFF4 F032          	movff	prodh,___flmul@temp+1
  5336   001CD8  5031               	movf	___flmul@temp^0,w,c
  5337   001CDA  2627               	addwf	___flmul@grs^0,f,c
  5338   001CDC  5032               	movf	(___flmul@temp+1)^0,w,c
  5339   001CDE  2228               	addwfc	(___flmul@grs+1)^0,f,c
  5340   001CE0  0E00               	movlw	0
  5341   001CE2  2229               	addwfc	(___flmul@grs+2)^0,f,c
  5342   001CE4  0E00               	movlw	0
  5343   001CE6  222A               	addwfc	(___flmul@grs+3)^0,f,c
  5344   001CE8  5020               	movf	(___flmul@a+2)^0,w,c
  5345   001CEA  021B               	mulwf	(___flmul@b+1)^0,c
  5346   001CEC  CFF3 F031          	movff	prodl,___flmul@temp
  5347   001CF0  CFF4 F032          	movff	prodh,___flmul@temp+1
  5348   001CF4  5031               	movf	___flmul@temp^0,w,c
  5349   001CF6  262D               	addwf	___flmul@prod^0,f,c
  5350   001CF8  5032               	movf	(___flmul@temp+1)^0,w,c
  5351   001CFA  222E               	addwfc	(___flmul@prod+1)^0,f,c
  5352   001CFC  0E00               	movlw	0
  5353   001CFE  222F               	addwfc	(___flmul@prod+2)^0,f,c
  5354   001D00  0E00               	movlw	0
  5355   001D02  2230               	addwfc	(___flmul@prod+3)^0,f,c
  5356   001D04  501F               	movf	(___flmul@a+1)^0,w,c
  5357   001D06  021C               	mulwf	(___flmul@b+2)^0,c
  5358   001D08  CFF3 F031          	movff	prodl,___flmul@temp
  5359   001D0C  CFF4 F032          	movff	prodh,___flmul@temp+1
  5360   001D10  5031               	movf	___flmul@temp^0,w,c
  5361   001D12  262D               	addwf	___flmul@prod^0,f,c
  5362   001D14  5032               	movf	(___flmul@temp+1)^0,w,c
  5363   001D16  222E               	addwfc	(___flmul@prod+1)^0,f,c
  5364   001D18  0E00               	movlw	0
  5365   001D1A  222F               	addwfc	(___flmul@prod+2)^0,f,c
  5366   001D1C  0E00               	movlw	0
  5367   001D1E  2230               	addwfc	(___flmul@prod+3)^0,f,c
  5368   001D20  5020               	movf	(___flmul@a+2)^0,w,c
  5369   001D22  021C               	mulwf	(___flmul@b+2)^0,c
  5370   001D24  CFF3 F031          	movff	prodl,___flmul@temp
  5371   001D28  CFF4 F032          	movff	prodh,___flmul@temp+1
  5372   001D2C  5031               	movf	___flmul@temp^0,w,c
  5373   001D2E  6E22               	movwf	??___flmul^0,c
  5374   001D30  5032               	movf	(___flmul@temp+1)^0,w,c
  5375   001D32  6E23               	movwf	(??___flmul+1)^0,c
  5376   001D34  6A24               	clrf	(??___flmul+2)^0,c
  5377   001D36  6A25               	clrf	(??___flmul+3)^0,c
  5378   001D38  C024  F025         	movff	??___flmul+2,??___flmul+3
  5379   001D3C  C023  F024         	movff	??___flmul+1,??___flmul+2
  5380   001D40  C022  F023         	movff	??___flmul,??___flmul+1
  5381   001D44  6A22               	clrf	??___flmul^0,c
  5382   001D46  5022               	movf	??___flmul^0,w,c
  5383   001D48  262D               	addwf	___flmul@prod^0,f,c
  5384   001D4A  5023               	movf	(??___flmul+1)^0,w,c
  5385   001D4C  222E               	addwfc	(___flmul@prod+1)^0,f,c
  5386   001D4E  5024               	movf	(??___flmul+2)^0,w,c
  5387   001D50  222F               	addwfc	(___flmul@prod+2)^0,f,c
  5388   001D52  5025               	movf	(??___flmul+3)^0,w,c
  5389   001D54  2230               	addwfc	(___flmul@prod+3)^0,f,c
  5390   001D56  C027  F022         	movff	___flmul@grs,??___flmul
  5391   001D5A  C028  F023         	movff	___flmul@grs+1,??___flmul+1
  5392   001D5E  C029  F024         	movff	___flmul@grs+2,??___flmul+2
  5393   001D62  C02A  F025         	movff	___flmul@grs+3,??___flmul+3
  5394   001D66  0E19               	movlw	25
  5395   001D68  EFBB  F00E         	goto	u3360
  5396   001D6C                     u3365:
  5397   001D6C  90D8               	bcf	status,0,c
  5398   001D6E  3225               	rrcf	(??___flmul+3)^0,f,c
  5399   001D70  3224               	rrcf	(??___flmul+2)^0,f,c
  5400   001D72  3223               	rrcf	(??___flmul+1)^0,f,c
  5401   001D74  3222               	rrcf	??___flmul^0,f,c
  5402   001D76                     u3360:
  5403   001D76  2EE8               	decfsz	wreg,f,c
  5404   001D78  EFB6  F00E         	goto	u3365
  5405   001D7C  5022               	movf	??___flmul^0,w,c
  5406   001D7E  262D               	addwf	___flmul@prod^0,f,c
  5407   001D80  5023               	movf	(??___flmul+1)^0,w,c
  5408   001D82  222E               	addwfc	(___flmul@prod+1)^0,f,c
  5409   001D84  5024               	movf	(??___flmul+2)^0,w,c
  5410   001D86  222F               	addwfc	(___flmul@prod+2)^0,f,c
  5411   001D88  5025               	movf	(??___flmul+3)^0,w,c
  5412   001D8A  2230               	addwfc	(___flmul@prod+3)^0,f,c
  5413   001D8C  C029  F02A         	movff	___flmul@grs+2,___flmul@grs+3
  5414   001D90  C028  F029         	movff	___flmul@grs+1,___flmul@grs+2
  5415   001D94  C027  F028         	movff	___flmul@grs,___flmul@grs+1
  5416   001D98  6A27               	clrf	___flmul@grs^0,c
  5417   001D9A  502B               	movf	___flmul@aexp^0,w,c
  5418   001D9C  C02C  F022         	movff	___flmul@bexp,??___flmul
  5419   001DA0  6A23               	clrf	(??___flmul+1)^0,c
  5420   001DA2  2622               	addwf	??___flmul^0,f,c
  5421   001DA4  0E00               	movlw	0
  5422   001DA6  2223               	addwfc	(??___flmul+1)^0,f,c
  5423   001DA8  0E82               	movlw	130
  5424   001DAA  2422               	addwf	??___flmul^0,w,c
  5425   001DAC  6E31               	movwf	___flmul@temp^0,c
  5426   001DAE  0EFF               	movlw	255
  5427   001DB0  2023               	addwfc	(??___flmul+1)^0,w,c
  5428   001DB2  6E32               	movwf	(___flmul@temp+1)^0,c
  5429   001DB4  EFF1  F00E         	goto	l4104
  5430   001DB8                     l4098:
  5431   001DB8  90D8               	bcf	status,0,c
  5432   001DBA  362D               	rlcf	___flmul@prod^0,f,c
  5433   001DBC  362E               	rlcf	(___flmul@prod+1)^0,f,c
  5434   001DBE  362F               	rlcf	(___flmul@prod+2)^0,f,c
  5435   001DC0  3630               	rlcf	(___flmul@prod+3)^0,f,c
  5436   001DC2  AE2A               	btfss	(___flmul@grs+3)^0,7,c
  5437   001DC4  EFE6  F00E         	goto	u3371
  5438   001DC8  EFE8  F00E         	goto	u3370
  5439   001DCC                     u3371:
  5440   001DCC  EFE9  F00E         	goto	l1353
  5441   001DD0                     u3370:
  5442   001DD0  802D               	bsf	___flmul@prod^0,0,c
  5443   001DD2                     l1353:
  5444   001DD2  90D8               	bcf	status,0,c
  5445   001DD4  3627               	rlcf	___flmul@grs^0,f,c
  5446   001DD6  3628               	rlcf	(___flmul@grs+1)^0,f,c
  5447   001DD8  3629               	rlcf	(___flmul@grs+2)^0,f,c
  5448   001DDA  362A               	rlcf	(___flmul@grs+3)^0,f,c
  5449   001DDC  0631               	decf	___flmul@temp^0,f,c
  5450   001DDE  A0D8               	btfss	status,0,c
  5451   001DE0  0632               	decf	(___flmul@temp+1)^0,f,c
  5452   001DE2                     l4104:
  5453   001DE2  AE2F               	btfss	(___flmul@prod+2)^0,7,c
  5454   001DE4  EFF6  F00E         	goto	u3381
  5455   001DE8  EFF8  F00E         	goto	u3380
  5456   001DEC                     u3381:
  5457   001DEC  EFDC  F00E         	goto	l4098
  5458   001DF0                     u3380:
  5459   001DF0  0E00               	movlw	0
  5460   001DF2  6E2B               	movwf	___flmul@aexp^0,c
  5461   001DF4  AE2A               	btfss	(___flmul@grs+3)^0,7,c
  5462   001DF6  EFFF  F00E         	goto	u3391
  5463   001DFA  EF01  F00F         	goto	u3390
  5464   001DFE                     u3391:
  5465   001DFE  EF25  F00F         	goto	l1355
  5466   001E02                     u3390:
  5467   001E02  0EFF               	movlw	255
  5468   001E04  1427               	andwf	___flmul@grs^0,w,c
  5469   001E06  6E22               	movwf	??___flmul^0,c
  5470   001E08  0EFF               	movlw	255
  5471   001E0A  1428               	andwf	(___flmul@grs+1)^0,w,c
  5472   001E0C  6E23               	movwf	(??___flmul+1)^0,c
  5473   001E0E  0EFF               	movlw	255
  5474   001E10  1429               	andwf	(___flmul@grs+2)^0,w,c
  5475   001E12  6E24               	movwf	(??___flmul+2)^0,c
  5476   001E14  0E7F               	movlw	127
  5477   001E16  142A               	andwf	(___flmul@grs+3)^0,w,c
  5478   001E18  6E25               	movwf	(??___flmul+3)^0,c
  5479   001E1A  5022               	movf	??___flmul^0,w,c
  5480   001E1C  1023               	iorwf	(??___flmul+1)^0,w,c
  5481   001E1E  1024               	iorwf	(??___flmul+2)^0,w,c
  5482   001E20  1025               	iorwf	(??___flmul+3)^0,w,c
  5483   001E22  B4D8               	btfsc	status,2,c
  5484   001E24  EF16  F00F         	goto	u3401
  5485   001E28  EF18  F00F         	goto	u3400
  5486   001E2C                     u3401:
  5487   001E2C  EF1C  F00F         	goto	l1356
  5488   001E30                     u3400:
  5489   001E30                     l4112:
  5490   001E30  0E01               	movlw	1
  5491   001E32  6E2B               	movwf	___flmul@aexp^0,c
  5492   001E34  EF25  F00F         	goto	l1355
  5493   001E38                     l1356:
  5494   001E38  A02D               	btfss	___flmul@prod^0,0,c
  5495   001E3A  EF21  F00F         	goto	u3411
  5496   001E3E  EF23  F00F         	goto	u3410
  5497   001E42                     u3411:
  5498   001E42  EF25  F00F         	goto	l1355
  5499   001E46                     u3410:
  5500   001E46  EF18  F00F         	goto	l4112
  5501   001E4A                     l1355:
  5502   001E4A  502B               	movf	___flmul@aexp^0,w,c
  5503   001E4C  B4D8               	btfsc	status,2,c
  5504   001E4E  EF2B  F00F         	goto	u3421
  5505   001E52  EF2D  F00F         	goto	u3420
  5506   001E56                     u3421:
  5507   001E56  EF51  F00F         	goto	l4124
  5508   001E5A                     u3420:
  5509   001E5A  0E01               	movlw	1
  5510   001E5C  262D               	addwf	___flmul@prod^0,f,c
  5511   001E5E  0E00               	movlw	0
  5512   001E60  222E               	addwfc	(___flmul@prod+1)^0,f,c
  5513   001E62  222F               	addwfc	(___flmul@prod+2)^0,f,c
  5514   001E64  2230               	addwfc	(___flmul@prod+3)^0,f,c
  5515   001E66  A030               	btfss	(___flmul@prod+3)^0,0,c
  5516   001E68  EF38  F00F         	goto	u3431
  5517   001E6C  EF3A  F00F         	goto	u3430
  5518   001E70                     u3431:
  5519   001E70  EF51  F00F         	goto	l4124
  5520   001E74                     u3430:
  5521   001E74  C02D  F022         	movff	___flmul@prod,??___flmul
  5522   001E78  C02E  F023         	movff	___flmul@prod+1,??___flmul+1
  5523   001E7C  C02F  F024         	movff	___flmul@prod+2,??___flmul+2
  5524   001E80  C030  F025         	movff	___flmul@prod+3,??___flmul+3
  5525   001E84  3425               	rlcf	(??___flmul+3)^0,w,c
  5526   001E86  3225               	rrcf	(??___flmul+3)^0,f,c
  5527   001E88  3224               	rrcf	(??___flmul+2)^0,f,c
  5528   001E8A  3223               	rrcf	(??___flmul+1)^0,f,c
  5529   001E8C  3222               	rrcf	??___flmul^0,f,c
  5530   001E8E  C022  F02D         	movff	??___flmul,___flmul@prod
  5531   001E92  C023  F02E         	movff	??___flmul+1,___flmul@prod+1
  5532   001E96  C024  F02F         	movff	??___flmul+2,___flmul@prod+2
  5533   001E9A  C025  F030         	movff	??___flmul+3,___flmul@prod+3
  5534   001E9E  4A31               	infsnz	___flmul@temp^0,f,c
  5535   001EA0  2A32               	incf	(___flmul@temp+1)^0,f,c
  5536   001EA2                     l4124:
  5537   001EA2  BE32               	btfsc	(___flmul@temp+1)^0,7,c
  5538   001EA4  EF5C  F00F         	goto	u3441
  5539   001EA8  5032               	movf	(___flmul@temp+1)^0,w,c
  5540   001EAA  E108               	bnz	u3440
  5541   001EAC  2831               	incf	___flmul@temp^0,w,c
  5542   001EAE  A0D8               	btfss	status,0,c
  5543   001EB0  EF5C  F00F         	goto	u3441
  5544   001EB4  EF5E  F00F         	goto	u3440
  5545   001EB8                     u3441:
  5546   001EB8  EF68  F00F         	goto	l4128
  5547   001EBC                     u3440:
  5548   001EBC  0E00               	movlw	0
  5549   001EBE  6E2D               	movwf	___flmul@prod^0,c
  5550   001EC0  0E00               	movlw	0
  5551   001EC2  6E2E               	movwf	(___flmul@prod+1)^0,c
  5552   001EC4  0E80               	movlw	128
  5553   001EC6  6E2F               	movwf	(___flmul@prod+2)^0,c
  5554   001EC8  0E7F               	movlw	127
  5555   001ECA  6E30               	movwf	(___flmul@prod+3)^0,c
  5556   001ECC  EF96  F00F         	goto	l4140
  5557   001ED0                     l4128:
  5558   001ED0  BE32               	btfsc	(___flmul@temp+1)^0,7,c
  5559   001ED2  EF75  F00F         	goto	u3450
  5560   001ED6  5032               	movf	(___flmul@temp+1)^0,w,c
  5561   001ED8  E106               	bnz	u3451
  5562   001EDA  0431               	decf	___flmul@temp^0,w,c
  5563   001EDC  B0D8               	btfsc	status,0,c
  5564   001EDE  EF73  F00F         	goto	u3451
  5565   001EE2  EF75  F00F         	goto	u3450
  5566   001EE6                     u3451:
  5567   001EE6  EF81  F00F         	goto	l1363
  5568   001EEA                     u3450:
  5569   001EEA  0E00               	movlw	0
  5570   001EEC  6E2D               	movwf	___flmul@prod^0,c
  5571   001EEE  0E00               	movlw	0
  5572   001EF0  6E2E               	movwf	(___flmul@prod+1)^0,c
  5573   001EF2  0E00               	movlw	0
  5574   001EF4  6E2F               	movwf	(___flmul@prod+2)^0,c
  5575   001EF6  0E00               	movlw	0
  5576   001EF8  6E30               	movwf	(___flmul@prod+3)^0,c
  5577   001EFA  0E00               	movlw	0
  5578   001EFC  6E26               	movwf	___flmul@sign^0,c
  5579   001EFE  EF96  F00F         	goto	l4140
  5580   001F02                     l1363:
  5581   001F02  C031  F02C         	movff	___flmul@temp,___flmul@bexp
  5582   001F06  0EFF               	movlw	255
  5583   001F08  162D               	andwf	___flmul@prod^0,f,c
  5584   001F0A  0EFF               	movlw	255
  5585   001F0C  162E               	andwf	(___flmul@prod+1)^0,f,c
  5586   001F0E  0E7F               	movlw	127
  5587   001F10  162F               	andwf	(___flmul@prod+2)^0,f,c
  5588   001F12  0E00               	movlw	0
  5589   001F14  1630               	andwf	(___flmul@prod+3)^0,f,c
  5590   001F16  A02C               	btfss	___flmul@bexp^0,0,c
  5591   001F18  EF90  F00F         	goto	u3461
  5592   001F1C  EF92  F00F         	goto	u3460
  5593   001F20                     u3461:
  5594   001F20  EF93  F00F         	goto	l4138
  5595   001F24                     u3460:
  5596   001F24  8E2F               	bsf	(___flmul@prod+2)^0,7,c
  5597   001F26                     l4138:
  5598   001F26  90D8               	bcf	status,0,c
  5599   001F28  302C               	rrcf	___flmul@bexp^0,w,c
  5600   001F2A  6E30               	movwf	(___flmul@prod+3)^0,c
  5601   001F2C                     l4140:
  5602   001F2C  5026               	movf	___flmul@sign^0,w,c
  5603   001F2E  1230               	iorwf	(___flmul@prod+3)^0,f,c
  5604   001F30  C02D  F01A         	movff	___flmul@prod,?___flmul
  5605   001F34  C02E  F01B         	movff	___flmul@prod+1,?___flmul+1
  5606   001F38  C02F  F01C         	movff	___flmul@prod+2,?___flmul+2
  5607   001F3C  C030  F01D         	movff	___flmul@prod+3,?___flmul+3
  5608   001F40                     l1350:
  5609   001F40  0012               	return		;funcret
  5610   001F42                     __end_of___flmul:
  5611                           	callstack 0
  5612                           
  5613 ;; *************** function ___flge *****************
  5614 ;; Defined at:
  5615 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  ff1             4    1[COMRAM] unsigned char 
  5618 ;;  ff2             4    5[COMRAM] unsigned char 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;		None
  5621 ;; Return value:  Size  Location     Type
  5622 ;;		None               void
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5630 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5632 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5633 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5634 ;;Total ram usage:       12 bytes
  5635 ;; Hardware stack levels used: 1
  5636 ;; Hardware stack levels required when called: 1
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		_convert_rgb2hue
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text16
  5645   003466                     __ptext16:
  5646                           	callstack 0
  5647   003466                     ___flge:
  5648                           	callstack 27
  5649   003466  0E00               	movlw	0
  5650   003468  1402               	andwf	___flge@ff1^0,w,c
  5651   00346A  6E0A               	movwf	??___flge^0,c
  5652   00346C  0E00               	movlw	0
  5653   00346E  1403               	andwf	(___flge@ff1+1)^0,w,c
  5654   003470  6E0B               	movwf	(??___flge+1)^0,c
  5655   003472  0E80               	movlw	128
  5656   003474  1404               	andwf	(___flge@ff1+2)^0,w,c
  5657   003476  6E0C               	movwf	(??___flge+2)^0,c
  5658   003478  0E7F               	movlw	127
  5659   00347A  1405               	andwf	(___flge@ff1+3)^0,w,c
  5660   00347C  6E0D               	movwf	(??___flge+3)^0,c
  5661   00347E  500A               	movf	??___flge^0,w,c
  5662   003480  100B               	iorwf	(??___flge+1)^0,w,c
  5663   003482  100C               	iorwf	(??___flge+2)^0,w,c
  5664   003484  100D               	iorwf	(??___flge+3)^0,w,c
  5665   003486  A4D8               	btfss	status,2,c
  5666   003488  EF48  F01A         	goto	u3961
  5667   00348C  EF4A  F01A         	goto	u3960
  5668   003490                     u3961:
  5669   003490  EF52  F01A         	goto	l4532
  5670   003494                     u3960:
  5671   003494  0E00               	movlw	0
  5672   003496  6E02               	movwf	___flge@ff1^0,c
  5673   003498  0E00               	movlw	0
  5674   00349A  6E03               	movwf	(___flge@ff1+1)^0,c
  5675   00349C  0E00               	movlw	0
  5676   00349E  6E04               	movwf	(___flge@ff1+2)^0,c
  5677   0034A0  0E00               	movlw	0
  5678   0034A2  6E05               	movwf	(___flge@ff1+3)^0,c
  5679   0034A4                     l4532:
  5680   0034A4  0E00               	movlw	0
  5681   0034A6  1406               	andwf	___flge@ff2^0,w,c
  5682   0034A8  6E0A               	movwf	??___flge^0,c
  5683   0034AA  0E00               	movlw	0
  5684   0034AC  1407               	andwf	(___flge@ff2+1)^0,w,c
  5685   0034AE  6E0B               	movwf	(??___flge+1)^0,c
  5686   0034B0  0E80               	movlw	128
  5687   0034B2  1408               	andwf	(___flge@ff2+2)^0,w,c
  5688   0034B4  6E0C               	movwf	(??___flge+2)^0,c
  5689   0034B6  0E7F               	movlw	127
  5690   0034B8  1409               	andwf	(___flge@ff2+3)^0,w,c
  5691   0034BA  6E0D               	movwf	(??___flge+3)^0,c
  5692   0034BC  500A               	movf	??___flge^0,w,c
  5693   0034BE  100B               	iorwf	(??___flge+1)^0,w,c
  5694   0034C0  100C               	iorwf	(??___flge+2)^0,w,c
  5695   0034C2  100D               	iorwf	(??___flge+3)^0,w,c
  5696   0034C4  A4D8               	btfss	status,2,c
  5697   0034C6  EF67  F01A         	goto	u3971
  5698   0034CA  EF69  F01A         	goto	u3970
  5699   0034CE                     u3971:
  5700   0034CE  EF71  F01A         	goto	l4536
  5701   0034D2                     u3970:
  5702   0034D2  0E00               	movlw	0
  5703   0034D4  6E06               	movwf	___flge@ff2^0,c
  5704   0034D6  0E00               	movlw	0
  5705   0034D8  6E07               	movwf	(___flge@ff2+1)^0,c
  5706   0034DA  0E00               	movlw	0
  5707   0034DC  6E08               	movwf	(___flge@ff2+2)^0,c
  5708   0034DE  0E00               	movlw	0
  5709   0034E0  6E09               	movwf	(___flge@ff2+3)^0,c
  5710   0034E2                     l4536:
  5711   0034E2  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5712   0034E4  EF76  F01A         	goto	u3981
  5713   0034E8  EF78  F01A         	goto	u3980
  5714   0034EC                     u3981:
  5715   0034EC  EF81  F01A         	goto	l4540
  5716   0034F0                     u3980:
  5717   0034F0  6C02               	negf	___flge@ff1^0,c
  5718   0034F2  1E03               	comf	(___flge@ff1+1)^0,f,c
  5719   0034F4  B0D8               	btfsc	status,0,c
  5720   0034F6  2A03               	incf	(___flge@ff1+1)^0,f,c
  5721   0034F8  1E04               	comf	(___flge@ff1+2)^0,f,c
  5722   0034FA  B0D8               	btfsc	status,0,c
  5723   0034FC  2A04               	incf	(___flge@ff1+2)^0,f,c
  5724   0034FE  0E80               	movlw	128
  5725   003500  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5726   003502                     l4540:
  5727   003502  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5728   003504  EF86  F01A         	goto	u3991
  5729   003508  EF88  F01A         	goto	u3990
  5730   00350C                     u3991:
  5731   00350C  EF91  F01A         	goto	l997
  5732   003510                     u3990:
  5733   003510  6C06               	negf	___flge@ff2^0,c
  5734   003512  1E07               	comf	(___flge@ff2+1)^0,f,c
  5735   003514  B0D8               	btfsc	status,0,c
  5736   003516  2A07               	incf	(___flge@ff2+1)^0,f,c
  5737   003518  1E08               	comf	(___flge@ff2+2)^0,f,c
  5738   00351A  B0D8               	btfsc	status,0,c
  5739   00351C  2A08               	incf	(___flge@ff2+2)^0,f,c
  5740   00351E  0E80               	movlw	128
  5741   003520  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5742   003522                     l997:
  5743   003522  0E00               	movlw	0
  5744   003524  1A02               	xorwf	___flge@ff1^0,f,c
  5745   003526  0E00               	movlw	0
  5746   003528  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5747   00352A  0E00               	movlw	0
  5748   00352C  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5749   00352E  0E80               	movlw	128
  5750   003530  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5751   003532  0E00               	movlw	0
  5752   003534  1A06               	xorwf	___flge@ff2^0,f,c
  5753   003536  0E00               	movlw	0
  5754   003538  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5755   00353A  0E00               	movlw	0
  5756   00353C  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5757   00353E  0E80               	movlw	128
  5758   003540  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5759   003542  5006               	movf	___flge@ff2^0,w,c
  5760   003544  5C02               	subwf	___flge@ff1^0,w,c
  5761   003546  5007               	movf	(___flge@ff2+1)^0,w,c
  5762   003548  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5763   00354A  5008               	movf	(___flge@ff2+2)^0,w,c
  5764   00354C  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5765   00354E  5009               	movf	(___flge@ff2+3)^0,w,c
  5766   003550  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5767   003552  B0D8               	btfsc	status,0,c
  5768   003554  EFAE  F01A         	goto	u4001
  5769   003558  EFB0  F01A         	goto	u4000
  5770   00355C                     u4001:
  5771   00355C  EFB3  F01A         	goto	l4546
  5772   003560                     u4000:
  5773   003560  90D8               	bcf	status,0,c
  5774   003562  EFB4  F01A         	goto	l1002
  5775   003566                     l4546:
  5776   003566  80D8               	bsf	status,0,c
  5777   003568                     l1002:
  5778   003568  0012               	return		;funcret
  5779   00356A                     __end_of___flge:
  5780                           	callstack 0
  5781                           
  5782 ;; *************** function ___fleq *****************
  5783 ;; Defined at:
  5784 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;  ff1             4    1[COMRAM] unsigned char 
  5787 ;;  ff2             4    5[COMRAM] unsigned char 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;		None
  5790 ;; Return value:  Size  Location     Type
  5791 ;;		None               void
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5799 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5801 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5802 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5803 ;;Total ram usage:       12 bytes
  5804 ;; Hardware stack levels used: 1
  5805 ;; Hardware stack levels required when called: 1
  5806 ;; This function calls:
  5807 ;;		Nothing
  5808 ;; This function is called by:
  5809 ;;		_convert_rgb2hue
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text17
  5814   003B22                     __ptext17:
  5815                           	callstack 0
  5816   003B22                     ___fleq:
  5817                           	callstack 27
  5818   003B22  0E00               	movlw	0
  5819   003B24  1402               	andwf	___fleq@ff1^0,w,c
  5820   003B26  6E0A               	movwf	??___fleq^0,c
  5821   003B28  0E00               	movlw	0
  5822   003B2A  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5823   003B2C  6E0B               	movwf	(??___fleq+1)^0,c
  5824   003B2E  0E80               	movlw	128
  5825   003B30  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5826   003B32  6E0C               	movwf	(??___fleq+2)^0,c
  5827   003B34  0E7F               	movlw	127
  5828   003B36  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5829   003B38  6E0D               	movwf	(??___fleq+3)^0,c
  5830   003B3A  500A               	movf	??___fleq^0,w,c
  5831   003B3C  100B               	iorwf	(??___fleq+1)^0,w,c
  5832   003B3E  100C               	iorwf	(??___fleq+2)^0,w,c
  5833   003B40  100D               	iorwf	(??___fleq+3)^0,w,c
  5834   003B42  A4D8               	btfss	status,2,c
  5835   003B44  EFA6  F01D         	goto	u3931
  5836   003B48  EFA8  F01D         	goto	u3930
  5837   003B4C                     u3931:
  5838   003B4C  EFB0  F01D         	goto	l4516
  5839   003B50                     u3930:
  5840   003B50  0E00               	movlw	0
  5841   003B52  6E02               	movwf	___fleq@ff1^0,c
  5842   003B54  0E00               	movlw	0
  5843   003B56  6E03               	movwf	(___fleq@ff1+1)^0,c
  5844   003B58  0E00               	movlw	0
  5845   003B5A  6E04               	movwf	(___fleq@ff1+2)^0,c
  5846   003B5C  0E00               	movlw	0
  5847   003B5E  6E05               	movwf	(___fleq@ff1+3)^0,c
  5848   003B60                     l4516:
  5849   003B60  0E00               	movlw	0
  5850   003B62  1406               	andwf	___fleq@ff2^0,w,c
  5851   003B64  6E0A               	movwf	??___fleq^0,c
  5852   003B66  0E00               	movlw	0
  5853   003B68  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5854   003B6A  6E0B               	movwf	(??___fleq+1)^0,c
  5855   003B6C  0E80               	movlw	128
  5856   003B6E  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5857   003B70  6E0C               	movwf	(??___fleq+2)^0,c
  5858   003B72  0E7F               	movlw	127
  5859   003B74  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5860   003B76  6E0D               	movwf	(??___fleq+3)^0,c
  5861   003B78  500A               	movf	??___fleq^0,w,c
  5862   003B7A  100B               	iorwf	(??___fleq+1)^0,w,c
  5863   003B7C  100C               	iorwf	(??___fleq+2)^0,w,c
  5864   003B7E  100D               	iorwf	(??___fleq+3)^0,w,c
  5865   003B80  A4D8               	btfss	status,2,c
  5866   003B82  EFC5  F01D         	goto	u3941
  5867   003B86  EFC7  F01D         	goto	u3940
  5868   003B8A                     u3941:
  5869   003B8A  EFCF  F01D         	goto	l4520
  5870   003B8E                     u3940:
  5871   003B8E  0E00               	movlw	0
  5872   003B90  6E06               	movwf	___fleq@ff2^0,c
  5873   003B92  0E00               	movlw	0
  5874   003B94  6E07               	movwf	(___fleq@ff2+1)^0,c
  5875   003B96  0E00               	movlw	0
  5876   003B98  6E08               	movwf	(___fleq@ff2+2)^0,c
  5877   003B9A  0E00               	movlw	0
  5878   003B9C  6E09               	movwf	(___fleq@ff2+3)^0,c
  5879   003B9E                     l4520:
  5880   003B9E  5006               	movf	___fleq@ff2^0,w,c
  5881   003BA0  1802               	xorwf	___fleq@ff1^0,w,c
  5882   003BA2  E10F               	bnz	u3950
  5883   003BA4  5007               	movf	(___fleq@ff2+1)^0,w,c
  5884   003BA6  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5885   003BA8  E10C               	bnz	u3950
  5886   003BAA  5008               	movf	(___fleq@ff2+2)^0,w,c
  5887   003BAC  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5888   003BAE  E109               	bnz	u3950
  5889   003BB0  5009               	movf	(___fleq@ff2+3)^0,w,c
  5890   003BB2  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5891   003BB4  B4D8               	btfsc	status,2,c
  5892   003BB6  EFDF  F01D         	goto	u3951
  5893   003BBA  EFE1  F01D         	goto	u3950
  5894   003BBE                     u3951:
  5895   003BBE  EFE4  F01D         	goto	l4524
  5896   003BC2                     u3950:
  5897   003BC2  90D8               	bcf	status,0,c
  5898   003BC4  EFE5  F01D         	goto	l991
  5899   003BC8                     l4524:
  5900   003BC8  80D8               	bsf	status,0,c
  5901   003BCA                     l991:
  5902   003BCA  0012               	return		;funcret
  5903   003BCC                     __end_of___fleq:
  5904                           	callstack 0
  5905                           
  5906 ;; *************** function ___fldiv *****************
  5907 ;; Defined at:
  5908 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;  b               4   50[COMRAM] unsigned char 
  5911 ;;  a               4   54[COMRAM] unsigned char 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  grs             4   69[COMRAM] unsigned long 
  5914 ;;  rem             4   62[COMRAM] unsigned long 
  5915 ;;  new_exp         2   67[COMRAM] short 
  5916 ;;  aexp            1   74[COMRAM] unsigned char 
  5917 ;;  bexp            1   73[COMRAM] unsigned char 
  5918 ;;  sign            1   66[COMRAM] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  4   50[COMRAM] unsigned char 
  5921 ;; Registers used:
  5922 ;;		wreg, status,2, status,0
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5928 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5929 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5930 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5931 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5932 ;;Total ram usage:       25 bytes
  5933 ;; Hardware stack levels used: 1
  5934 ;; Hardware stack levels required when called: 1
  5935 ;; This function calls:
  5936 ;;		Nothing
  5937 ;; This function is called by:
  5938 ;;		_convert_rgb2hue
  5939 ;;		_main
  5940 ;; This function uses a non-reentrant model
  5941 ;;
  5942                           
  5943                           	psect	text18
  5944   001F42                     __ptext18:
  5945                           	callstack 0
  5946   001F42                     ___fldiv:
  5947                           	callstack 27
  5948   001F42  5036               	movf	(___fldiv@b+3)^0,w,c
  5949   001F44  0B80               	andlw	128
  5950   001F46  6E43               	movwf	___fldiv@sign^0,c
  5951   001F48  5036               	movf	(___fldiv@b+3)^0,w,c
  5952   001F4A  2436               	addwf	(___fldiv@b+3)^0,w,c
  5953   001F4C  6E4A               	movwf	___fldiv@bexp^0,c
  5954   001F4E  AE35               	btfss	(___fldiv@b+2)^0,7,c
  5955   001F50  EFAC  F00F         	goto	u3701
  5956   001F54  EFAE  F00F         	goto	u3700
  5957   001F58                     u3701:
  5958   001F58  EFAF  F00F         	goto	l4374
  5959   001F5C                     u3700:
  5960   001F5C  804A               	bsf	___fldiv@bexp^0,0,c
  5961   001F5E                     l4374:
  5962   001F5E  504A               	movf	___fldiv@bexp^0,w,c
  5963   001F60  B4D8               	btfsc	status,2,c
  5964   001F62  EFB5  F00F         	goto	u3711
  5965   001F66  EFB7  F00F         	goto	u3710
  5966   001F6A                     u3711:
  5967   001F6A  EFCC  F00F         	goto	l4384
  5968   001F6E                     u3710:
  5969   001F6E  284A               	incf	___fldiv@bexp^0,w,c
  5970   001F70  A4D8               	btfss	status,2,c
  5971   001F72  EFBD  F00F         	goto	u3721
  5972   001F76  EFBF  F00F         	goto	u3720
  5973   001F7A                     u3721:
  5974   001F7A  EFC7  F00F         	goto	l4380
  5975   001F7E                     u3720:
  5976   001F7E  0E00               	movlw	0
  5977   001F80  6E33               	movwf	___fldiv@b^0,c
  5978   001F82  0E00               	movlw	0
  5979   001F84  6E34               	movwf	(___fldiv@b+1)^0,c
  5980   001F86  0E00               	movlw	0
  5981   001F88  6E35               	movwf	(___fldiv@b+2)^0,c
  5982   001F8A  0E00               	movlw	0
  5983   001F8C  6E36               	movwf	(___fldiv@b+3)^0,c
  5984   001F8E                     l4380:
  5985   001F8E  8E35               	bsf	(___fldiv@b+2)^0,7,c
  5986   001F90  0E00               	movlw	0
  5987   001F92  6E36               	movwf	(___fldiv@b+3)^0,c
  5988   001F94  EFD4  F00F         	goto	l4386
  5989   001F98                     l4384:
  5990   001F98  0E00               	movlw	0
  5991   001F9A  6E33               	movwf	___fldiv@b^0,c
  5992   001F9C  0E00               	movlw	0
  5993   001F9E  6E34               	movwf	(___fldiv@b+1)^0,c
  5994   001FA0  0E00               	movlw	0
  5995   001FA2  6E35               	movwf	(___fldiv@b+2)^0,c
  5996   001FA4  0E00               	movlw	0
  5997   001FA6  6E36               	movwf	(___fldiv@b+3)^0,c
  5998   001FA8                     l4386:
  5999   001FA8  503A               	movf	(___fldiv@a+3)^0,w,c
  6000   001FAA  0B80               	andlw	128
  6001   001FAC  1A43               	xorwf	___fldiv@sign^0,f,c
  6002   001FAE  503A               	movf	(___fldiv@a+3)^0,w,c
  6003   001FB0  243A               	addwf	(___fldiv@a+3)^0,w,c
  6004   001FB2  6E4B               	movwf	___fldiv@aexp^0,c
  6005   001FB4  AE39               	btfss	(___fldiv@a+2)^0,7,c
  6006   001FB6  EFDF  F00F         	goto	u3731
  6007   001FBA  EFE1  F00F         	goto	u3730
  6008   001FBE                     u3731:
  6009   001FBE  EFE2  F00F         	goto	l4394
  6010   001FC2                     u3730:
  6011   001FC2  804B               	bsf	___fldiv@aexp^0,0,c
  6012   001FC4                     l4394:
  6013   001FC4  504B               	movf	___fldiv@aexp^0,w,c
  6014   001FC6  B4D8               	btfsc	status,2,c
  6015   001FC8  EFE8  F00F         	goto	u3741
  6016   001FCC  EFEA  F00F         	goto	u3740
  6017   001FD0                     u3741:
  6018   001FD0  EFFF  F00F         	goto	l4404
  6019   001FD4                     u3740:
  6020   001FD4  284B               	incf	___fldiv@aexp^0,w,c
  6021   001FD6  A4D8               	btfss	status,2,c
  6022   001FD8  EFF0  F00F         	goto	u3751
  6023   001FDC  EFF2  F00F         	goto	u3750
  6024   001FE0                     u3751:
  6025   001FE0  EFFA  F00F         	goto	l4400
  6026   001FE4                     u3750:
  6027   001FE4  0E00               	movlw	0
  6028   001FE6  6E37               	movwf	___fldiv@a^0,c
  6029   001FE8  0E00               	movlw	0
  6030   001FEA  6E38               	movwf	(___fldiv@a+1)^0,c
  6031   001FEC  0E00               	movlw	0
  6032   001FEE  6E39               	movwf	(___fldiv@a+2)^0,c
  6033   001FF0  0E00               	movlw	0
  6034   001FF2  6E3A               	movwf	(___fldiv@a+3)^0,c
  6035   001FF4                     l4400:
  6036   001FF4  8E39               	bsf	(___fldiv@a+2)^0,7,c
  6037   001FF6  0E00               	movlw	0
  6038   001FF8  6E3A               	movwf	(___fldiv@a+3)^0,c
  6039   001FFA  EF07  F010         	goto	l4406
  6040   001FFE                     l4404:
  6041   001FFE  0E00               	movlw	0
  6042   002000  6E37               	movwf	___fldiv@a^0,c
  6043   002002  0E00               	movlw	0
  6044   002004  6E38               	movwf	(___fldiv@a+1)^0,c
  6045   002006  0E00               	movlw	0
  6046   002008  6E39               	movwf	(___fldiv@a+2)^0,c
  6047   00200A  0E00               	movlw	0
  6048   00200C  6E3A               	movwf	(___fldiv@a+3)^0,c
  6049   00200E                     l4406:
  6050   00200E  5037               	movf	___fldiv@a^0,w,c
  6051   002010  1038               	iorwf	(___fldiv@a+1)^0,w,c
  6052   002012  1039               	iorwf	(___fldiv@a+2)^0,w,c
  6053   002014  103A               	iorwf	(___fldiv@a+3)^0,w,c
  6054   002016  A4D8               	btfss	status,2,c
  6055   002018  EF10  F010         	goto	u3761
  6056   00201C  EF12  F010         	goto	u3760
  6057   002020                     u3761:
  6058   002020  EF2A  F010         	goto	l4418
  6059   002024                     u3760:
  6060   002024  0E00               	movlw	0
  6061   002026  6E33               	movwf	___fldiv@b^0,c
  6062   002028  0E00               	movlw	0
  6063   00202A  6E34               	movwf	(___fldiv@b+1)^0,c
  6064   00202C  0E00               	movlw	0
  6065   00202E  6E35               	movwf	(___fldiv@b+2)^0,c
  6066   002030  0E00               	movlw	0
  6067   002032  6E36               	movwf	(___fldiv@b+3)^0,c
  6068   002034  0E80               	movlw	128
  6069   002036  1235               	iorwf	(___fldiv@b+2)^0,f,c
  6070   002038  0E7F               	movlw	127
  6071   00203A  1236               	iorwf	(___fldiv@b+3)^0,f,c
  6072   00203C                     l4412:
  6073   00203C  5043               	movf	___fldiv@sign^0,w,c
  6074   00203E  1236               	iorwf	(___fldiv@b+3)^0,f,c
  6075   002040  C033  F033         	movff	___fldiv@b,?___fldiv
  6076   002044  C034  F034         	movff	___fldiv@b+1,?___fldiv+1
  6077   002048  C035  F035         	movff	___fldiv@b+2,?___fldiv+2
  6078   00204C  C036  F036         	movff	___fldiv@b+3,?___fldiv+3
  6079   002050  EF6D  F011         	goto	l1314
  6080   002054                     l4418:
  6081   002054  504A               	movf	___fldiv@bexp^0,w,c
  6082   002056  A4D8               	btfss	status,2,c
  6083   002058  EF30  F010         	goto	u3771
  6084   00205C  EF32  F010         	goto	u3770
  6085   002060                     u3771:
  6086   002060  EF3C  F010         	goto	l4426
  6087   002064                     u3770:
  6088   002064  0E00               	movlw	0
  6089   002066  6E33               	movwf	?___fldiv^0,c
  6090   002068  0E00               	movlw	0
  6091   00206A  6E34               	movwf	(?___fldiv+1)^0,c
  6092   00206C  0E00               	movlw	0
  6093   00206E  6E35               	movwf	(?___fldiv+2)^0,c
  6094   002070  0E00               	movlw	0
  6095   002072  6E36               	movwf	(?___fldiv+3)^0,c
  6096   002074  EF6D  F011         	goto	l1314
  6097   002078                     l4426:
  6098   002078  504B               	movf	___fldiv@aexp^0,w,c
  6099   00207A  C04A  F03B         	movff	___fldiv@bexp,??___fldiv
  6100   00207E  6A3C               	clrf	(??___fldiv+1)^0,c
  6101   002080  5E3B               	subwf	??___fldiv^0,f,c
  6102   002082  0E00               	movlw	0
  6103   002084  5A3C               	subwfb	(??___fldiv+1)^0,f,c
  6104   002086  0E7F               	movlw	127
  6105   002088  243B               	addwf	??___fldiv^0,w,c
  6106   00208A  6E44               	movwf	___fldiv@new_exp^0,c
  6107   00208C  0E00               	movlw	0
  6108   00208E  203C               	addwfc	(??___fldiv+1)^0,w,c
  6109   002090  6E45               	movwf	(___fldiv@new_exp+1)^0,c
  6110   002092  C033  F03F         	movff	___fldiv@b,___fldiv@rem
  6111   002096  C034  F040         	movff	___fldiv@b+1,___fldiv@rem+1
  6112   00209A  C035  F041         	movff	___fldiv@b+2,___fldiv@rem+2
  6113   00209E  C036  F042         	movff	___fldiv@b+3,___fldiv@rem+3
  6114   0020A2  0E00               	movlw	0
  6115   0020A4  6E33               	movwf	___fldiv@b^0,c
  6116   0020A6  0E00               	movlw	0
  6117   0020A8  6E34               	movwf	(___fldiv@b+1)^0,c
  6118   0020AA  0E00               	movlw	0
  6119   0020AC  6E35               	movwf	(___fldiv@b+2)^0,c
  6120   0020AE  0E00               	movlw	0
  6121   0020B0  6E36               	movwf	(___fldiv@b+3)^0,c
  6122   0020B2  0E00               	movlw	0
  6123   0020B4  6E46               	movwf	___fldiv@grs^0,c
  6124   0020B6  0E00               	movlw	0
  6125   0020B8  6E47               	movwf	(___fldiv@grs+1)^0,c
  6126   0020BA  0E00               	movlw	0
  6127   0020BC  6E48               	movwf	(___fldiv@grs+2)^0,c
  6128   0020BE  0E00               	movlw	0
  6129   0020C0  6E49               	movwf	(___fldiv@grs+3)^0,c
  6130   0020C2  0E00               	movlw	0
  6131   0020C4  6E4B               	movwf	___fldiv@aexp^0,c
  6132   0020C6  EF9D  F010         	goto	l1316
  6133   0020CA                     l4436:
  6134   0020CA  504B               	movf	___fldiv@aexp^0,w,c
  6135   0020CC  B4D8               	btfsc	status,2,c
  6136   0020CE  EF6B  F010         	goto	u3781
  6137   0020D2  EF6D  F010         	goto	u3780
  6138   0020D6                     u3781:
  6139   0020D6  EF84  F010         	goto	l4444
  6140   0020DA                     u3780:
  6141   0020DA  90D8               	bcf	status,0,c
  6142   0020DC  363F               	rlcf	___fldiv@rem^0,f,c
  6143   0020DE  3640               	rlcf	(___fldiv@rem+1)^0,f,c
  6144   0020E0  3641               	rlcf	(___fldiv@rem+2)^0,f,c
  6145   0020E2  3642               	rlcf	(___fldiv@rem+3)^0,f,c
  6146   0020E4  90D8               	bcf	status,0,c
  6147   0020E6  3633               	rlcf	___fldiv@b^0,f,c
  6148   0020E8  3634               	rlcf	(___fldiv@b+1)^0,f,c
  6149   0020EA  3635               	rlcf	(___fldiv@b+2)^0,f,c
  6150   0020EC  3636               	rlcf	(___fldiv@b+3)^0,f,c
  6151   0020EE  AE49               	btfss	(___fldiv@grs+3)^0,7,c
  6152   0020F0  EF7C  F010         	goto	u3791
  6153   0020F4  EF7E  F010         	goto	u3790
  6154   0020F8                     u3791:
  6155   0020F8  EF7F  F010         	goto	l1319
  6156   0020FC                     u3790:
  6157   0020FC  8033               	bsf	___fldiv@b^0,0,c
  6158   0020FE                     l1319:
  6159   0020FE  90D8               	bcf	status,0,c
  6160   002100  3646               	rlcf	___fldiv@grs^0,f,c
  6161   002102  3647               	rlcf	(___fldiv@grs+1)^0,f,c
  6162   002104  3648               	rlcf	(___fldiv@grs+2)^0,f,c
  6163   002106  3649               	rlcf	(___fldiv@grs+3)^0,f,c
  6164   002108                     l4444:
  6165   002108  5037               	movf	___fldiv@a^0,w,c
  6166   00210A  5C3F               	subwf	___fldiv@rem^0,w,c
  6167   00210C  5038               	movf	(___fldiv@a+1)^0,w,c
  6168   00210E  5840               	subwfb	(___fldiv@rem+1)^0,w,c
  6169   002110  5039               	movf	(___fldiv@a+2)^0,w,c
  6170   002112  5841               	subwfb	(___fldiv@rem+2)^0,w,c
  6171   002114  503A               	movf	(___fldiv@a+3)^0,w,c
  6172   002116  5842               	subwfb	(___fldiv@rem+3)^0,w,c
  6173   002118  A0D8               	btfss	status,0,c
  6174   00211A  EF91  F010         	goto	u3801
  6175   00211E  EF93  F010         	goto	u3800
  6176   002122                     u3801:
  6177   002122  EF9C  F010         	goto	l4450
  6178   002126                     u3800:
  6179   002126  8C49               	bsf	(___fldiv@grs+3)^0,6,c
  6180   002128  5037               	movf	___fldiv@a^0,w,c
  6181   00212A  5E3F               	subwf	___fldiv@rem^0,f,c
  6182   00212C  5038               	movf	(___fldiv@a+1)^0,w,c
  6183   00212E  5A40               	subwfb	(___fldiv@rem+1)^0,f,c
  6184   002130  5039               	movf	(___fldiv@a+2)^0,w,c
  6185   002132  5A41               	subwfb	(___fldiv@rem+2)^0,f,c
  6186   002134  503A               	movf	(___fldiv@a+3)^0,w,c
  6187   002136  5A42               	subwfb	(___fldiv@rem+3)^0,f,c
  6188   002138                     l4450:
  6189   002138  2A4B               	incf	___fldiv@aexp^0,f,c
  6190   00213A                     l1316:
  6191   00213A  0E19               	movlw	25
  6192   00213C  644B               	cpfsgt	___fldiv@aexp^0,c
  6193   00213E  EFA3  F010         	goto	u3811
  6194   002142  EFA5  F010         	goto	u3810
  6195   002146                     u3811:
  6196   002146  EF65  F010         	goto	l4436
  6197   00214A                     u3810:
  6198   00214A  503F               	movf	___fldiv@rem^0,w,c
  6199   00214C  1040               	iorwf	(___fldiv@rem+1)^0,w,c
  6200   00214E  1041               	iorwf	(___fldiv@rem+2)^0,w,c
  6201   002150  1042               	iorwf	(___fldiv@rem+3)^0,w,c
  6202   002152  B4D8               	btfsc	status,2,c
  6203   002154  EFAE  F010         	goto	u3821
  6204   002158  EFB0  F010         	goto	u3820
  6205   00215C                     u3821:
  6206   00215C  EFC8  F010         	goto	l4462
  6207   002160                     u3820:
  6208   002160  8046               	bsf	___fldiv@grs^0,0,c
  6209   002162  EFC8  F010         	goto	l4462
  6210   002166                     l4456:
  6211   002166  90D8               	bcf	status,0,c
  6212   002168  3633               	rlcf	___fldiv@b^0,f,c
  6213   00216A  3634               	rlcf	(___fldiv@b+1)^0,f,c
  6214   00216C  3635               	rlcf	(___fldiv@b+2)^0,f,c
  6215   00216E  3636               	rlcf	(___fldiv@b+3)^0,f,c
  6216   002170  AE49               	btfss	(___fldiv@grs+3)^0,7,c
  6217   002172  EFBD  F010         	goto	u3831
  6218   002176  EFBF  F010         	goto	u3830
  6219   00217A                     u3831:
  6220   00217A  EFC0  F010         	goto	l1325
  6221   00217E                     u3830:
  6222   00217E  8033               	bsf	___fldiv@b^0,0,c
  6223   002180                     l1325:
  6224   002180  90D8               	bcf	status,0,c
  6225   002182  3646               	rlcf	___fldiv@grs^0,f,c
  6226   002184  3647               	rlcf	(___fldiv@grs+1)^0,f,c
  6227   002186  3648               	rlcf	(___fldiv@grs+2)^0,f,c
  6228   002188  3649               	rlcf	(___fldiv@grs+3)^0,f,c
  6229   00218A  0644               	decf	___fldiv@new_exp^0,f,c
  6230   00218C  A0D8               	btfss	status,0,c
  6231   00218E  0645               	decf	(___fldiv@new_exp+1)^0,f,c
  6232   002190                     l4462:
  6233   002190  AE35               	btfss	(___fldiv@b+2)^0,7,c
  6234   002192  EFCD  F010         	goto	u3841
  6235   002196  EFCF  F010         	goto	u3840
  6236   00219A                     u3841:
  6237   00219A  EFB3  F010         	goto	l4456
  6238   00219E                     u3840:
  6239   00219E  0E00               	movlw	0
  6240   0021A0  6E4B               	movwf	___fldiv@aexp^0,c
  6241   0021A2  AE49               	btfss	(___fldiv@grs+3)^0,7,c
  6242   0021A4  EFD6  F010         	goto	u3851
  6243   0021A8  EFD8  F010         	goto	u3850
  6244   0021AC                     u3851:
  6245   0021AC  EFFC  F010         	goto	l1327
  6246   0021B0                     u3850:
  6247   0021B0  0EFF               	movlw	255
  6248   0021B2  1446               	andwf	___fldiv@grs^0,w,c
  6249   0021B4  6E3B               	movwf	??___fldiv^0,c
  6250   0021B6  0EFF               	movlw	255
  6251   0021B8  1447               	andwf	(___fldiv@grs+1)^0,w,c
  6252   0021BA  6E3C               	movwf	(??___fldiv+1)^0,c
  6253   0021BC  0EFF               	movlw	255
  6254   0021BE  1448               	andwf	(___fldiv@grs+2)^0,w,c
  6255   0021C0  6E3D               	movwf	(??___fldiv+2)^0,c
  6256   0021C2  0E7F               	movlw	127
  6257   0021C4  1449               	andwf	(___fldiv@grs+3)^0,w,c
  6258   0021C6  6E3E               	movwf	(??___fldiv+3)^0,c
  6259   0021C8  503B               	movf	??___fldiv^0,w,c
  6260   0021CA  103C               	iorwf	(??___fldiv+1)^0,w,c
  6261   0021CC  103D               	iorwf	(??___fldiv+2)^0,w,c
  6262   0021CE  103E               	iorwf	(??___fldiv+3)^0,w,c
  6263   0021D0  B4D8               	btfsc	status,2,c
  6264   0021D2  EFED  F010         	goto	u3861
  6265   0021D6  EFEF  F010         	goto	u3860
  6266   0021DA                     u3861:
  6267   0021DA  EFF3  F010         	goto	l1328
  6268   0021DE                     u3860:
  6269   0021DE                     l4470:
  6270   0021DE  0E01               	movlw	1
  6271   0021E0  6E4B               	movwf	___fldiv@aexp^0,c
  6272   0021E2  EFFC  F010         	goto	l1327
  6273   0021E6                     l1328:
  6274   0021E6  A033               	btfss	___fldiv@b^0,0,c
  6275   0021E8  EFF8  F010         	goto	u3871
  6276   0021EC  EFFA  F010         	goto	u3870
  6277   0021F0                     u3871:
  6278   0021F0  EFFC  F010         	goto	l1327
  6279   0021F4                     u3870:
  6280   0021F4  EFEF  F010         	goto	l4470
  6281   0021F8                     l1327:
  6282   0021F8  504B               	movf	___fldiv@aexp^0,w,c
  6283   0021FA  B4D8               	btfsc	status,2,c
  6284   0021FC  EF02  F011         	goto	u3881
  6285   002200  EF04  F011         	goto	u3880
  6286   002204                     u3881:
  6287   002204  EF28  F011         	goto	l4482
  6288   002208                     u3880:
  6289   002208  0E01               	movlw	1
  6290   00220A  2633               	addwf	___fldiv@b^0,f,c
  6291   00220C  0E00               	movlw	0
  6292   00220E  2234               	addwfc	(___fldiv@b+1)^0,f,c
  6293   002210  2235               	addwfc	(___fldiv@b+2)^0,f,c
  6294   002212  2236               	addwfc	(___fldiv@b+3)^0,f,c
  6295   002214  A036               	btfss	(___fldiv@b+3)^0,0,c
  6296   002216  EF0F  F011         	goto	u3891
  6297   00221A  EF11  F011         	goto	u3890
  6298   00221E                     u3891:
  6299   00221E  EF28  F011         	goto	l4482
  6300   002222                     u3890:
  6301   002222  C033  F03B         	movff	___fldiv@b,??___fldiv
  6302   002226  C034  F03C         	movff	___fldiv@b+1,??___fldiv+1
  6303   00222A  C035  F03D         	movff	___fldiv@b+2,??___fldiv+2
  6304   00222E  C036  F03E         	movff	___fldiv@b+3,??___fldiv+3
  6305   002232  343E               	rlcf	(??___fldiv+3)^0,w,c
  6306   002234  323E               	rrcf	(??___fldiv+3)^0,f,c
  6307   002236  323D               	rrcf	(??___fldiv+2)^0,f,c
  6308   002238  323C               	rrcf	(??___fldiv+1)^0,f,c
  6309   00223A  323B               	rrcf	??___fldiv^0,f,c
  6310   00223C  C03B  F033         	movff	??___fldiv,___fldiv@b
  6311   002240  C03C  F034         	movff	??___fldiv+1,___fldiv@b+1
  6312   002244  C03D  F035         	movff	??___fldiv+2,___fldiv@b+2
  6313   002248  C03E  F036         	movff	??___fldiv+3,___fldiv@b+3
  6314   00224C  4A44               	infsnz	___fldiv@new_exp^0,f,c
  6315   00224E  2A45               	incf	(___fldiv@new_exp+1)^0,f,c
  6316   002250                     l4482:
  6317   002250  BE45               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6318   002252  EF33  F011         	goto	u3901
  6319   002256  5045               	movf	(___fldiv@new_exp+1)^0,w,c
  6320   002258  E108               	bnz	u3900
  6321   00225A  2844               	incf	___fldiv@new_exp^0,w,c
  6322   00225C  A0D8               	btfss	status,0,c
  6323   00225E  EF33  F011         	goto	u3901
  6324   002262  EF35  F011         	goto	u3900
  6325   002266                     u3901:
  6326   002266  EF40  F011         	goto	l4486
  6327   00226A                     u3900:
  6328   00226A  0E00               	movlw	0
  6329   00226C  6E45               	movwf	(___fldiv@new_exp+1)^0,c
  6330   00226E  6844               	setf	___fldiv@new_exp^0,c
  6331   002270  0E00               	movlw	0
  6332   002272  6E33               	movwf	___fldiv@b^0,c
  6333   002274  0E00               	movlw	0
  6334   002276  6E34               	movwf	(___fldiv@b+1)^0,c
  6335   002278  0E00               	movlw	0
  6336   00227A  6E35               	movwf	(___fldiv@b+2)^0,c
  6337   00227C  0E00               	movlw	0
  6338   00227E  6E36               	movwf	(___fldiv@b+3)^0,c
  6339   002280                     l4486:
  6340   002280  BE45               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6341   002282  EF4D  F011         	goto	u3910
  6342   002286  5045               	movf	(___fldiv@new_exp+1)^0,w,c
  6343   002288  E106               	bnz	u3911
  6344   00228A  0444               	decf	___fldiv@new_exp^0,w,c
  6345   00228C  B0D8               	btfsc	status,0,c
  6346   00228E  EF4B  F011         	goto	u3911
  6347   002292  EF4D  F011         	goto	u3910
  6348   002296                     u3911:
  6349   002296  EF5B  F011         	goto	l4490
  6350   00229A                     u3910:
  6351   00229A  0E00               	movlw	0
  6352   00229C  6E45               	movwf	(___fldiv@new_exp+1)^0,c
  6353   00229E  0E00               	movlw	0
  6354   0022A0  6E44               	movwf	___fldiv@new_exp^0,c
  6355   0022A2  0E00               	movlw	0
  6356   0022A4  6E33               	movwf	___fldiv@b^0,c
  6357   0022A6  0E00               	movlw	0
  6358   0022A8  6E34               	movwf	(___fldiv@b+1)^0,c
  6359   0022AA  0E00               	movlw	0
  6360   0022AC  6E35               	movwf	(___fldiv@b+2)^0,c
  6361   0022AE  0E00               	movlw	0
  6362   0022B0  6E36               	movwf	(___fldiv@b+3)^0,c
  6363   0022B2  0E00               	movlw	0
  6364   0022B4  6E43               	movwf	___fldiv@sign^0,c
  6365   0022B6                     l4490:
  6366   0022B6  C044  F04A         	movff	___fldiv@new_exp,___fldiv@bexp
  6367   0022BA  A04A               	btfss	___fldiv@bexp^0,0,c
  6368   0022BC  EF62  F011         	goto	u3921
  6369   0022C0  EF64  F011         	goto	u3920
  6370   0022C4                     u3921:
  6371   0022C4  EF67  F011         	goto	l4496
  6372   0022C8                     u3920:
  6373   0022C8  8E35               	bsf	(___fldiv@b+2)^0,7,c
  6374   0022CA  EF68  F011         	goto	l4498
  6375   0022CE                     l4496:
  6376   0022CE  9E35               	bcf	(___fldiv@b+2)^0,7,c
  6377   0022D0                     l4498:
  6378   0022D0  90D8               	bcf	status,0,c
  6379   0022D2  304A               	rrcf	___fldiv@bexp^0,w,c
  6380   0022D4  6E36               	movwf	(___fldiv@b+3)^0,c
  6381   0022D6  EF1E  F010         	goto	l4412
  6382   0022DA                     l1314:
  6383   0022DA  0012               	return		;funcret
  6384   0022DC                     __end_of___fldiv:
  6385                           	callstack 0
  6386                           
  6387 ;; *************** function _initUSART4 *****************
  6388 ;; Defined at:
  6389 ;;		line 14 in file "serial.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;		None
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;		None
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  1    wreg      void 
  6396 ;; Registers used:
  6397 ;;		wreg, status,2
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6407 ;;Total ram usage:        0 bytes
  6408 ;; Hardware stack levels used: 1
  6409 ;; Hardware stack levels required when called: 1
  6410 ;; This function calls:
  6411 ;;		Nothing
  6412 ;; This function is called by:
  6413 ;;		_main
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           	psect	text19
  6418   00480A                     __ptext19:
  6419                           	callstack 0
  6420   00480A                     _initUSART4:
  6421                           	callstack 29
  6422   00480A                     
  6423                           ;serial.c: 15:     RC0PPS = 0x12;
  6424   00480A  0E12               	movlw	18
  6425   00480C  010E               	movlb	14	; () banked
  6426   00480E  6F62               	movwf	98,b	;volatile
  6427                           
  6428                           ;serial.c: 16:     RX4PPS = 0x11;
  6429   004810  0E11               	movlw	17
  6430   004812  6F15               	movwf	21,b	;volatile
  6431   004814                     
  6432                           ; BSR set to: 14
  6433                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  6434   004814  97E9               	bcf	233,3,b	;volatile
  6435   004816                     
  6436                           ; BSR set to: 14
  6437                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  6438   004816  95E8               	bcf	232,2,b	;volatile
  6439                           
  6440                           ;serial.c: 19:     SP4BRGL = 51;
  6441   004818  0E33               	movlw	51
  6442   00481A  6FE5               	movwf	229,b	;volatile
  6443                           
  6444                           ;serial.c: 20:     SP4BRGH = 0;
  6445   00481C  0E00               	movlw	0
  6446   00481E  6FE6               	movwf	230,b	;volatile
  6447   004820                     
  6448                           ; BSR set to: 14
  6449                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  6450   004820  89E7               	bsf	231,4,b	;volatile
  6451   004822                     
  6452                           ; BSR set to: 14
  6453                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  6454   004822  8BE8               	bsf	232,5,b	;volatile
  6455   004824                     
  6456                           ; BSR set to: 14
  6457                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  6458   004824  8FE7               	bsf	231,7,b	;volatile
  6459   004826                     
  6460                           ; BSR set to: 14
  6461   004826  0012               	return		;funcret
  6462   004828                     __end_of_initUSART4:
  6463                           	callstack 0
  6464                           
  6465 ;; *************** function _initDCmotorsPWM *****************
  6466 ;; Defined at:
  6467 ;;		line 5 in file "dc_motor.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;		None
  6472 ;; Return value:  Size  Location     Type
  6473 ;;                  1    wreg      void 
  6474 ;; Registers used:
  6475 ;;		wreg, status,2
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6481 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6484 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6485 ;;Total ram usage:        2 bytes
  6486 ;; Hardware stack levels used: 1
  6487 ;; Hardware stack levels required when called: 1
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_main
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text20
  6496   003D0C                     __ptext20:
  6497                           	callstack 0
  6498   003D0C                     _initDCmotorsPWM:
  6499                           	callstack 29
  6500   003D0C                     
  6501                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  6502   003D0C  9485               	bcf	133,2,c	;volatile
  6503                           
  6504                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  6505   003D0E  9E83               	bcf	131,7,c	;volatile
  6506                           
  6507                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  6508   003D10  9885               	bcf	133,4,c	;volatile
  6509                           
  6510                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  6511   003D12  9C87               	bcf	135,6,c	;volatile
  6512                           
  6513                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  6514   003D14  947D               	bcf	125,2,c	;volatile
  6515                           
  6516                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  6517   003D16  9E7B               	bcf	123,7,c	;volatile
  6518                           
  6519                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  6520   003D18  987D               	bcf	125,4,c	;volatile
  6521                           
  6522                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  6523   003D1A  9C7F               	bcf	127,6,c	;volatile
  6524   003D1C                     
  6525                           ;dc_motor.c: 18:     RE2PPS=0x05;
  6526   003D1C  0E05               	movlw	5
  6527   003D1E  010E               	movlb	14	; () banked
  6528   003D20  6F74               	movwf	116,b	;volatile
  6529                           
  6530                           ;dc_motor.c: 19:     RE4PPS=0x06;
  6531   003D22  0E06               	movlw	6
  6532   003D24  6F76               	movwf	118,b	;volatile
  6533                           
  6534                           ;dc_motor.c: 20:     RC7PPS=0x07;
  6535   003D26  0E07               	movlw	7
  6536   003D28  6F69               	movwf	105,b	;volatile
  6537                           
  6538                           ;dc_motor.c: 21:     RG6PPS=0x08;
  6539   003D2A  0E08               	movlw	8
  6540   003D2C  6F88               	movwf	136,b	;volatile
  6541                           
  6542                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  6543   003D2E  50BD               	movf	189,w,c	;volatile
  6544   003D30  0B8F               	andlw	-113
  6545   003D32  0940               	iorlw	64
  6546   003D34  6EBD               	movwf	189,c	;volatile
  6547                           
  6548                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  6549   003D36  0EE0               	movlw	-32
  6550   003D38  16BE               	andwf	190,f,c	;volatile
  6551                           
  6552                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  6553   003D3A  50BF               	movf	191,w,c	;volatile
  6554   003D3C  0BF0               	andlw	-16
  6555   003D3E  0901               	iorlw	1
  6556   003D40  6EBF               	movwf	191,c	;volatile
  6557   003D42                     
  6558                           ; BSR set to: 14
  6559                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  6560   003D42  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  6561   003D46                     
  6562                           ; BSR set to: 14
  6563                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  6564   003D46  8EBD               	bsf	189,7,c	;volatile
  6565                           
  6566                           ;dc_motor.c: 35:     CCPR1H=0;
  6567   003D48  0E00               	movlw	0
  6568   003D4A  6EAA               	movwf	170,c	;volatile
  6569                           
  6570                           ;dc_motor.c: 36:     CCPR2H=0;
  6571   003D4C  0E00               	movlw	0
  6572   003D4E  6EA6               	movwf	166,c	;volatile
  6573                           
  6574                           ;dc_motor.c: 37:     CCPR3H=0;
  6575   003D50  0E00               	movlw	0
  6576   003D52  010F               	movlb	15	; () banked
  6577   003D54  6F25               	movwf	37,b	;volatile
  6578                           
  6579                           ;dc_motor.c: 38:     CCPR4H=0;
  6580   003D56  0E00               	movlw	0
  6581   003D58  6F21               	movwf	33,b	;volatile
  6582                           
  6583                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  6584   003D5A  0EFC               	movlw	-4
  6585   003D5C  16AD               	andwf	173,f,c	;volatile
  6586                           
  6587                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  6588   003D5E  0EF3               	movlw	-13
  6589   003D60  16AD               	andwf	173,f,c	;volatile
  6590                           
  6591                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  6592   003D62  0ECF               	movlw	-49
  6593   003D64  16AD               	andwf	173,f,c	;volatile
  6594                           
  6595                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  6596   003D66  0E3F               	movlw	-193
  6597   003D68  16AD               	andwf	173,f,c	;volatile
  6598   003D6A                     
  6599                           ; BSR set to: 15
  6600                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  6601   003D6A  88AB               	bsf	171,4,c	;volatile
  6602                           
  6603                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  6604   003D6C  50AB               	movf	171,w,c	;volatile
  6605   003D6E  0BF0               	andlw	-16
  6606   003D70  090C               	iorlw	12
  6607   003D72  6EAB               	movwf	171,c	;volatile
  6608   003D74                     
  6609                           ; BSR set to: 15
  6610                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  6611   003D74  8EAB               	bsf	171,7,c	;volatile
  6612   003D76                     
  6613                           ; BSR set to: 15
  6614                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  6615   003D76  88A7               	bsf	167,4,c	;volatile
  6616                           
  6617                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  6618   003D78  50A7               	movf	167,w,c	;volatile
  6619   003D7A  0BF0               	andlw	-16
  6620   003D7C  090C               	iorlw	12
  6621   003D7E  6EA7               	movwf	167,c	;volatile
  6622   003D80                     
  6623                           ; BSR set to: 15
  6624                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  6625   003D80  8EA7               	bsf	167,7,c	;volatile
  6626   003D82                     
  6627                           ; BSR set to: 15
  6628                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  6629   003D82  8926               	bsf	38,4,b	;volatile
  6630                           
  6631                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  6632   003D84  5126               	movf	38,w,b	;volatile
  6633   003D86  0BF0               	andlw	-16
  6634   003D88  090C               	iorlw	12
  6635   003D8A  6F26               	movwf	38,b	;volatile
  6636   003D8C                     
  6637                           ; BSR set to: 15
  6638                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6639   003D8C  8F26               	bsf	38,7,b	;volatile
  6640   003D8E                     
  6641                           ; BSR set to: 15
  6642                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6643   003D8E  8922               	bsf	34,4,b	;volatile
  6644                           
  6645                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6646   003D90  5122               	movf	34,w,b	;volatile
  6647   003D92  0BF0               	andlw	-16
  6648   003D94  090C               	iorlw	12
  6649   003D96  6F22               	movwf	34,b	;volatile
  6650   003D98                     
  6651                           ; BSR set to: 15
  6652                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6653   003D98  8F22               	bsf	34,7,b	;volatile
  6654   003D9A                     
  6655                           ; BSR set to: 15
  6656   003D9A  0012               	return		;funcret
  6657   003D9C                     __end_of_initDCmotorsPWM:
  6658                           	callstack 0
  6659                           
  6660 ;; *************** function _get16bitTMR0val *****************
  6661 ;; Defined at:
  6662 ;;		line 33 in file "timers.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;  path_step       2    6[COMRAM] unsigned int 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  combined_val    2   12[COMRAM] int 
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  2    6[COMRAM] unsigned int 
  6669 ;; Registers used:
  6670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6677 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6678 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6679 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6680 ;;Total ram usage:        8 bytes
  6681 ;; Hardware stack levels used: 1
  6682 ;; Hardware stack levels required when called: 2
  6683 ;; This function calls:
  6684 ;;		_logAction
  6685 ;; This function is called by:
  6686 ;;		_main
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           	psect	text21
  6691   00434A                     __ptext21:
  6692                           	callstack 0
  6693   00434A                     _get16bitTMR0val:
  6694                           	callstack 28
  6695   00434A                     
  6696                           ;timers.c: 33: unsigned int get16bitTMR0val(unsigned int path_step);timers.c: 34: {;time
      +                          rs.c: 35:     int combined_value;;timers.c: 36:     combined_value = TMR0L | (TMR0H << 8
      +                          );
  6697   00434A  50D4               	movf	212,w,c	;volatile
  6698   00434C  6E0A               	movwf	(??_get16bitTMR0val+1)^0,c
  6699   00434E  6A09               	clrf	??_get16bitTMR0val^0,c
  6700   004350  50D3               	movf	211,w,c	;volatile
  6701   004352  6E0B               	movwf	(??_get16bitTMR0val+2)^0,c
  6702   004354  6A0C               	clrf	(??_get16bitTMR0val+3)^0,c
  6703   004356  5009               	movf	??_get16bitTMR0val^0,w,c
  6704   004358  100B               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6705   00435A  6E0D               	movwf	get16bitTMR0val@combined_value^0,c
  6706   00435C  500A               	movf	(??_get16bitTMR0val+1)^0,w,c
  6707   00435E  100C               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6708   004360  6E0E               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6709   004362                     
  6710                           ;timers.c: 37:     T0CON0bits.T0EN=0;
  6711   004362  9ED5               	bcf	213,7,c	;volatile
  6712   004364                     
  6713                           ;timers.c: 38:     logAction('0',combined_value, path_step);
  6714   004364  C00D  F002         	movff	get16bitTMR0val@combined_value,logAction@newTime
  6715   004368  C00E  F003         	movff	get16bitTMR0val@combined_value+1,logAction@newTime+1
  6716   00436C  C007  F004         	movff	get16bitTMR0val@path_step,logAction@path_step
  6717   004370  C008  F005         	movff	get16bitTMR0val@path_step+1,logAction@path_step+1
  6718   004374  0E30               	movlw	48
  6719   004376  EC00  F021         	call	_logAction
  6720   00437A                     
  6721                           ;timers.c: 39:     return path_step;
  6722   00437A  C007  F007         	movff	get16bitTMR0val@path_step,?_get16bitTMR0val
  6723   00437E  C008  F008         	movff	get16bitTMR0val@path_step+1,?_get16bitTMR0val+1
  6724   004382  0012               	return		;funcret
  6725   004384                     __end_of_get16bitTMR0val:
  6726                           	callstack 0
  6727                           
  6728 ;; *************** function _decision *****************
  6729 ;; Defined at:
  6730 ;;		line 274 in file "color.c"
  6731 ;; Parameters:    Size  Location     Type
  6732 ;;  hue             2   70[COMRAM] unsigned int 
  6733 ;;  path_step       2   72[COMRAM] unsigned int 
  6734 ;; Auto vars:     Size  Location     Type
  6735 ;;  color           2   74[COMRAM] unsigned int 
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  2   70[COMRAM] unsigned int 
  6738 ;; Registers used:
  6739 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6745 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6746 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6748 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6749 ;;Total ram usage:        6 bytes
  6750 ;; Hardware stack levels used: 1
  6751 ;; Hardware stack levels required when called: 10
  6752 ;; This function calls:
  6753 ;;		_logAction
  6754 ;;		_moveBlue
  6755 ;;		_moveGreen
  6756 ;;		_moveLightBlue
  6757 ;;		_moveOrange
  6758 ;;		_movePink
  6759 ;;		_moveRed
  6760 ;;		_moveYellow
  6761 ;;		_send2USART
  6762 ;; This function is called by:
  6763 ;;		_main
  6764 ;; This function uses a non-reentrant model
  6765 ;;
  6766                           
  6767                           	psect	text22
  6768   002624                     __ptext22:
  6769                           	callstack 0
  6770   002624                     _decision:
  6771                           	callstack 20
  6772   002624                     
  6773                           ;color.c: 279:     unsigned int color;;color.c: 281:     if (hue<=10 || hue>=355) {
  6774   002624  5048               	movf	(decision@hue+1)^0,w,c
  6775   002626  E109               	bnz	u4930
  6776   002628  0E0B               	movlw	11
  6777   00262A  5C47               	subwf	decision@hue^0,w,c
  6778   00262C  A0D8               	btfss	status,0,c
  6779   00262E  EF1B  F013         	goto	u4931
  6780   002632  EF1D  F013         	goto	u4930
  6781   002636                     u4931:
  6782   002636  EF28  F013         	goto	l5594
  6783   00263A                     u4930:
  6784   00263A  0E63               	movlw	99
  6785   00263C  5C47               	subwf	decision@hue^0,w,c
  6786   00263E  0E01               	movlw	1
  6787   002640  5848               	subwfb	(decision@hue+1)^0,w,c
  6788   002642  A0D8               	btfss	status,0,c
  6789   002644  EF26  F013         	goto	u4941
  6790   002648  EF28  F013         	goto	u4940
  6791   00264C                     u4941:
  6792   00264C  EF3F  F013         	goto	l5600
  6793   002650                     u4940:
  6794   002650                     l5594:
  6795                           
  6796                           ;color.c: 282:         moveRed(&motorL, &motorR);
  6797   002650  0EEE               	movlw	low _motorL
  6798   002652  6E1D               	movwf	moveRed@mL^0,c
  6799   002654  0EE5               	movlw	low _motorR
  6800   002656  6E1E               	movwf	moveRed@mR^0,c
  6801   002658  EC5E  F022         	call	_moveRed	;wreg free
  6802   00265C                     
  6803                           ;color.c: 283:         logAction('1',0, path_step);
  6804   00265C  0E00               	movlw	0
  6805   00265E  6E03               	movwf	(logAction@newTime+1)^0,c
  6806   002660  0E00               	movlw	0
  6807   002662  6E02               	movwf	logAction@newTime^0,c
  6808   002664  C049  F004         	movff	decision@path_step,logAction@path_step
  6809   002668  C04A  F005         	movff	decision@path_step+1,logAction@path_step+1
  6810   00266C  0E31               	movlw	49
  6811   00266E  EC00  F021         	call	_logAction
  6812   002672                     
  6813                           ;color.c: 284:         color = 1;
  6814   002672  0E00               	movlw	0
  6815   002674  6E4C               	movwf	(decision@color+1)^0,c
  6816   002676  0E01               	movlw	1
  6817   002678  6E4B               	movwf	decision@color^0,c
  6818                           
  6819                           ;color.c: 285:     }
  6820   00267A  EF4D  F014         	goto	l5660
  6821   00267E                     l5600:
  6822   00267E  5048               	movf	(decision@hue+1)^0,w,c
  6823   002680  E109               	bnz	u4950
  6824   002682  0E69               	movlw	105
  6825   002684  5C47               	subwf	decision@hue^0,w,c
  6826   002686  A0D8               	btfss	status,0,c
  6827   002688  EF48  F013         	goto	u4951
  6828   00268C  EF4A  F013         	goto	u4950
  6829   002690                     u4951:
  6830   002690  EF6C  F013         	goto	l5610
  6831   002694                     u4950:
  6832   002694  5048               	movf	(decision@hue+1)^0,w,c
  6833   002696  E107               	bnz	u4961
  6834   002698  0E83               	movlw	131
  6835   00269A  5C47               	subwf	decision@hue^0,w,c
  6836   00269C  B0D8               	btfsc	status,0,c
  6837   00269E  EF53  F013         	goto	u4961
  6838   0026A2  EF55  F013         	goto	u4960
  6839   0026A6                     u4961:
  6840   0026A6  EF6C  F013         	goto	l5610
  6841   0026AA                     u4960:
  6842   0026AA                     
  6843                           ;color.c: 287:         moveGreen(&motorL, &motorR);
  6844   0026AA  0EEE               	movlw	low _motorL
  6845   0026AC  6E1D               	movwf	moveGreen@mL^0,c
  6846   0026AE  0EE5               	movlw	low _motorR
  6847   0026B0  6E1E               	movwf	moveGreen@mR^0,c
  6848   0026B2  EC0D  F023         	call	_moveGreen	;wreg free
  6849   0026B6                     
  6850                           ;color.c: 288:         logAction('2',0, path_step);
  6851   0026B6  0E00               	movlw	0
  6852   0026B8  6E03               	movwf	(logAction@newTime+1)^0,c
  6853   0026BA  0E00               	movlw	0
  6854   0026BC  6E02               	movwf	logAction@newTime^0,c
  6855   0026BE  C049  F004         	movff	decision@path_step,logAction@path_step
  6856   0026C2  C04A  F005         	movff	decision@path_step+1,logAction@path_step+1
  6857   0026C6  0E32               	movlw	50
  6858   0026C8  EC00  F021         	call	_logAction
  6859   0026CC                     
  6860                           ;color.c: 289:         color = 2;
  6861   0026CC  0E00               	movlw	0
  6862   0026CE  6E4C               	movwf	(decision@color+1)^0,c
  6863   0026D0  0E02               	movlw	2
  6864   0026D2  6E4B               	movwf	decision@color^0,c
  6865                           
  6866                           ;color.c: 290:     } else if (hue>=230 && hue<=240){
  6867   0026D4  EF4D  F014         	goto	l5660
  6868   0026D8                     l5610:
  6869   0026D8  5048               	movf	(decision@hue+1)^0,w,c
  6870   0026DA  E109               	bnz	u4970
  6871   0026DC  0EE6               	movlw	230
  6872   0026DE  5C47               	subwf	decision@hue^0,w,c
  6873   0026E0  A0D8               	btfss	status,0,c
  6874   0026E2  EF75  F013         	goto	u4971
  6875   0026E6  EF77  F013         	goto	u4970
  6876   0026EA                     u4971:
  6877   0026EA  EF99  F013         	goto	l5620
  6878   0026EE                     u4970:
  6879   0026EE  5048               	movf	(decision@hue+1)^0,w,c
  6880   0026F0  E107               	bnz	u4981
  6881   0026F2  0EF1               	movlw	241
  6882   0026F4  5C47               	subwf	decision@hue^0,w,c
  6883   0026F6  B0D8               	btfsc	status,0,c
  6884   0026F8  EF80  F013         	goto	u4981
  6885   0026FC  EF82  F013         	goto	u4980
  6886   002700                     u4981:
  6887   002700  EF99  F013         	goto	l5620
  6888   002704                     u4980:
  6889   002704                     
  6890                           ;color.c: 291:         moveBlue(&motorL,&motorR);
  6891   002704  0EEE               	movlw	low _motorL
  6892   002706  6E1D               	movwf	moveBlue@mL^0,c
  6893   002708  0EE5               	movlw	low _motorR
  6894   00270A  6E1E               	movwf	moveBlue@mR^0,c
  6895   00270C  EC26  F023         	call	_moveBlue	;wreg free
  6896   002710                     
  6897                           ;color.c: 292:         logAction('3',0, path_step);
  6898   002710  0E00               	movlw	0
  6899   002712  6E03               	movwf	(logAction@newTime+1)^0,c
  6900   002714  0E00               	movlw	0
  6901   002716  6E02               	movwf	logAction@newTime^0,c
  6902   002718  C049  F004         	movff	decision@path_step,logAction@path_step
  6903   00271C  C04A  F005         	movff	decision@path_step+1,logAction@path_step+1
  6904   002720  0E33               	movlw	51
  6905   002722  EC00  F021         	call	_logAction
  6906   002726                     
  6907                           ;color.c: 293:         color = 3;
  6908   002726  0E00               	movlw	0
  6909   002728  6E4C               	movwf	(decision@color+1)^0,c
  6910   00272A  0E03               	movlw	3
  6911   00272C  6E4B               	movwf	decision@color^0,c
  6912                           
  6913                           ;color.c: 294:     } else if (hue>=216 && hue<=221){
  6914   00272E  EF4D  F014         	goto	l5660
  6915   002732                     l5620:
  6916   002732  5048               	movf	(decision@hue+1)^0,w,c
  6917   002734  E109               	bnz	u4990
  6918   002736  0ED8               	movlw	216
  6919   002738  5C47               	subwf	decision@hue^0,w,c
  6920   00273A  A0D8               	btfss	status,0,c
  6921   00273C  EFA2  F013         	goto	u4991
  6922   002740  EFA4  F013         	goto	u4990
  6923   002744                     u4991:
  6924   002744  EFC6  F013         	goto	l5630
  6925   002748                     u4990:
  6926   002748  5048               	movf	(decision@hue+1)^0,w,c
  6927   00274A  E107               	bnz	u5001
  6928   00274C  0EDE               	movlw	222
  6929   00274E  5C47               	subwf	decision@hue^0,w,c
  6930   002750  B0D8               	btfsc	status,0,c
  6931   002752  EFAD  F013         	goto	u5001
  6932   002756  EFAF  F013         	goto	u5000
  6933   00275A                     u5001:
  6934   00275A  EFC6  F013         	goto	l5630
  6935   00275E                     u5000:
  6936   00275E                     
  6937                           ;color.c: 295:         moveLightBlue(&motorL,&motorR);
  6938   00275E  0EEE               	movlw	low _motorL
  6939   002760  6E1D               	movwf	moveLightBlue@mL^0,c
  6940   002762  0EE5               	movlw	low _motorR
  6941   002764  6E1E               	movwf	moveLightBlue@mR^0,c
  6942   002766  ECDB  F022         	call	_moveLightBlue	;wreg free
  6943   00276A                     
  6944                           ;color.c: 296:         logAction('5',0, path_step);
  6945   00276A  0E00               	movlw	0
  6946   00276C  6E03               	movwf	(logAction@newTime+1)^0,c
  6947   00276E  0E00               	movlw	0
  6948   002770  6E02               	movwf	logAction@newTime^0,c
  6949   002772  C049  F004         	movff	decision@path_step,logAction@path_step
  6950   002776  C04A  F005         	movff	decision@path_step+1,logAction@path_step+1
  6951   00277A  0E35               	movlw	53
  6952   00277C  EC00  F021         	call	_logAction
  6953   002780                     
  6954                           ;color.c: 297:         color = 4;
  6955   002780  0E00               	movlw	0
  6956   002782  6E4C               	movwf	(decision@color+1)^0,c
  6957   002784  0E04               	movlw	4
  6958   002786  6E4B               	movwf	decision@color^0,c
  6959                           
  6960                           ;color.c: 298:     } else if (hue>=302 && hue<=346){
  6961   002788  EF4D  F014         	goto	l5660
  6962   00278C                     l5630:
  6963   00278C  0E2E               	movlw	46
  6964   00278E  5C47               	subwf	decision@hue^0,w,c
  6965   002790  0E01               	movlw	1
  6966   002792  5848               	subwfb	(decision@hue+1)^0,w,c
  6967   002794  A0D8               	btfss	status,0,c
  6968   002796  EFCF  F013         	goto	u5011
  6969   00279A  EFD1  F013         	goto	u5010
  6970   00279E                     u5011:
  6971   00279E  EFF3  F013         	goto	l5640
  6972   0027A2                     u5010:
  6973   0027A2  0E5B               	movlw	91
  6974   0027A4  5C47               	subwf	decision@hue^0,w,c
  6975   0027A6  0E01               	movlw	1
  6976   0027A8  5848               	subwfb	(decision@hue+1)^0,w,c
  6977   0027AA  B0D8               	btfsc	status,0,c
  6978   0027AC  EFDA  F013         	goto	u5021
  6979   0027B0  EFDC  F013         	goto	u5020
  6980   0027B4                     u5021:
  6981   0027B4  EFF3  F013         	goto	l5640
  6982   0027B8                     u5020:
  6983   0027B8                     
  6984                           ;color.c: 299:         moveYellow(&motorL,&motorR);
  6985   0027B8  0EEE               	movlw	low _motorL
  6986   0027BA  6E1D               	movwf	moveYellow@mL^0,c
  6987   0027BC  0EE5               	movlw	low _motorR
  6988   0027BE  6E1E               	movwf	moveYellow@mR^0,c
  6989   0027C0  EC45  F022         	call	_moveYellow	;wreg free
  6990   0027C4                     
  6991                           ;color.c: 300:         logAction('1',0, path_step);
  6992   0027C4  0E00               	movlw	0
  6993   0027C6  6E03               	movwf	(logAction@newTime+1)^0,c
  6994   0027C8  0E00               	movlw	0
  6995   0027CA  6E02               	movwf	logAction@newTime^0,c
  6996   0027CC  C049  F004         	movff	decision@path_step,logAction@path_step
  6997   0027D0  C04A  F005         	movff	decision@path_step+1,logAction@path_step+1
  6998   0027D4  0E31               	movlw	49
  6999   0027D6  EC00  F021         	call	_logAction
  7000   0027DA                     
  7001                           ;color.c: 301:         color = 5;
  7002   0027DA  0E00               	movlw	0
  7003   0027DC  6E4C               	movwf	(decision@color+1)^0,c
  7004   0027DE  0E05               	movlw	5
  7005   0027E0  6E4B               	movwf	decision@color^0,c
  7006                           
  7007                           ;color.c: 302:     } else if (hue>14 && hue<=35){
  7008   0027E2  EF4D  F014         	goto	l5660
  7009   0027E6                     l5640:
  7010   0027E6  5048               	movf	(decision@hue+1)^0,w,c
  7011   0027E8  E109               	bnz	u5030
  7012   0027EA  0E0F               	movlw	15
  7013   0027EC  5C47               	subwf	decision@hue^0,w,c
  7014   0027EE  A0D8               	btfss	status,0,c
  7015   0027F0  EFFC  F013         	goto	u5031
  7016   0027F4  EFFE  F013         	goto	u5030
  7017   0027F8                     u5031:
  7018   0027F8  EF20  F014         	goto	l5650
  7019   0027FC                     u5030:
  7020   0027FC  5048               	movf	(decision@hue+1)^0,w,c
  7021   0027FE  E107               	bnz	u5041
  7022   002800  0E24               	movlw	36
  7023   002802  5C47               	subwf	decision@hue^0,w,c
  7024   002804  B0D8               	btfsc	status,0,c
  7025   002806  EF07  F014         	goto	u5041
  7026   00280A  EF09  F014         	goto	u5040
  7027   00280E                     u5041:
  7028   00280E  EF20  F014         	goto	l5650
  7029   002812                     u5040:
  7030   002812                     
  7031                           ;color.c: 303:         moveOrange(&motorL,&motorR);
  7032   002812  0EEE               	movlw	low _motorL
  7033   002814  6E1D               	movwf	moveOrange@mL^0,c
  7034   002816  0EE5               	movlw	low _motorR
  7035   002818  6E1E               	movwf	moveOrange@mR^0,c
  7036   00281A  ECA9  F022         	call	_moveOrange	;wreg free
  7037   00281E                     
  7038                           ;color.c: 304:         logAction('4',0, path_step);
  7039   00281E  0E00               	movlw	0
  7040   002820  6E03               	movwf	(logAction@newTime+1)^0,c
  7041   002822  0E00               	movlw	0
  7042   002824  6E02               	movwf	logAction@newTime^0,c
  7043   002826  C049  F004         	movff	decision@path_step,logAction@path_step
  7044   00282A  C04A  F005         	movff	decision@path_step+1,logAction@path_step+1
  7045   00282E  0E34               	movlw	52
  7046   002830  EC00  F021         	call	_logAction
  7047   002834                     
  7048                           ;color.c: 305:         color= 6;
  7049   002834  0E00               	movlw	0
  7050   002836  6E4C               	movwf	(decision@color+1)^0,c
  7051   002838  0E06               	movlw	6
  7052   00283A  6E4B               	movwf	decision@color^0,c
  7053                           
  7054                           ;color.c: 306:     } else if (hue>=244 && hue<=251){
  7055   00283C  EF4D  F014         	goto	l5660
  7056   002840                     l5650:
  7057   002840  5048               	movf	(decision@hue+1)^0,w,c
  7058   002842  E109               	bnz	u5050
  7059   002844  0EF4               	movlw	244
  7060   002846  5C47               	subwf	decision@hue^0,w,c
  7061   002848  A0D8               	btfss	status,0,c
  7062   00284A  EF29  F014         	goto	u5051
  7063   00284E  EF2B  F014         	goto	u5050
  7064   002852                     u5051:
  7065   002852  EF4D  F014         	goto	l169
  7066   002856                     u5050:
  7067   002856  5048               	movf	(decision@hue+1)^0,w,c
  7068   002858  E107               	bnz	u5061
  7069   00285A  0EFC               	movlw	252
  7070   00285C  5C47               	subwf	decision@hue^0,w,c
  7071   00285E  B0D8               	btfsc	status,0,c
  7072   002860  EF34  F014         	goto	u5061
  7073   002864  EF36  F014         	goto	u5060
  7074   002868                     u5061:
  7075   002868  EF4D  F014         	goto	l169
  7076   00286C                     u5060:
  7077   00286C                     
  7078                           ;color.c: 307:         movePink(&motorL,&motorR);
  7079   00286C  0EEE               	movlw	low _motorL
  7080   00286E  6E1D               	movwf	movePink@mL^0,c
  7081   002870  0EE5               	movlw	low _motorR
  7082   002872  6E1E               	movwf	movePink@mR^0,c
  7083   002874  EC77  F022         	call	_movePink	;wreg free
  7084   002878                     
  7085                           ;color.c: 308:         logAction('2',0, path_step);
  7086   002878  0E00               	movlw	0
  7087   00287A  6E03               	movwf	(logAction@newTime+1)^0,c
  7088   00287C  0E00               	movlw	0
  7089   00287E  6E02               	movwf	logAction@newTime^0,c
  7090   002880  C049  F004         	movff	decision@path_step,logAction@path_step
  7091   002884  C04A  F005         	movff	decision@path_step+1,logAction@path_step+1
  7092   002888  0E32               	movlw	50
  7093   00288A  EC00  F021         	call	_logAction
  7094   00288E                     
  7095                           ;color.c: 309:         color = 7;
  7096   00288E  0E00               	movlw	0
  7097   002890  6E4C               	movwf	(decision@color+1)^0,c
  7098   002892  0E07               	movlw	7
  7099   002894  6E4B               	movwf	decision@color^0,c
  7100   002896  EF4D  F014         	goto	l5660
  7101   00289A                     l169:
  7102   00289A                     l5660:
  7103                           
  7104                           ;color.c: 312:     send2USART(color);
  7105   00289A  C04B  F045         	movff	decision@color,send2USART@hue
  7106   00289E  C04C  F046         	movff	decision@color+1,send2USART@hue+1
  7107   0028A2  EC14  F024         	call	_send2USART	;wreg free
  7108   0028A6                     
  7109                           ;color.c: 313:     path_step++;
  7110   0028A6  4A49               	infsnz	decision@path_step^0,f,c
  7111   0028A8  2A4A               	incf	(decision@path_step+1)^0,f,c
  7112   0028AA                     
  7113                           ;color.c: 314:     return path_step;
  7114   0028AA  C049  F047         	movff	decision@path_step,?_decision
  7115   0028AE  C04A  F048         	movff	decision@path_step+1,?_decision+1
  7116   0028B2  0012               	return		;funcret
  7117   0028B4                     __end_of_decision:
  7118                           	callstack 0
  7119                           
  7120 ;; *************** function _send2USART *****************
  7121 ;; Defined at:
  7122 ;;		line 146 in file "serial.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;  hue             2   68[COMRAM] unsigned int 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7136 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7137 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7139 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7140 ;;Total ram usage:       52 bytes
  7141 ;; Hardware stack levels used: 1
  7142 ;; Hardware stack levels required when called: 9
  7143 ;; This function calls:
  7144 ;;		_sendStringSerial4
  7145 ;;		_sprintf
  7146 ;; This function is called by:
  7147 ;;		_decision
  7148 ;;		_main
  7149 ;; This function uses a non-reentrant model
  7150 ;;
  7151                           
  7152                           	psect	text23
  7153   004828                     __ptext23:
  7154                           	callstack 0
  7155   004828                     _send2USART:
  7156                           	callstack 21
  7157   004828                     
  7158                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  7159   004828  0E60               	movlw	low send2USART@hue_char
  7160   00482A  6E32               	movwf	sprintf@s^0,c
  7161   00482C  0EB7               	movlw	low STR_14
  7162   00482E  6E33               	movwf	sprintf@fmt^0,c
  7163   004830  C045  F034         	movff	send2USART@hue,?_sprintf+2
  7164   004834  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  7165   004838  ECF8  F021         	call	_sprintf	;wreg free
  7166   00483C                     
  7167                           ;serial.c: 158:         sendStringSerial4(hue_char);
  7168   00483C  0E60               	movlw	low send2USART@hue_char
  7169   00483E  6E03               	movwf	sendStringSerial4@string^0,c
  7170   004840  EC58  F023         	call	_sendStringSerial4	;wreg free
  7171   004844  0012               	return		;funcret
  7172   004846                     __end_of_send2USART:
  7173                           	callstack 0
  7174                           
  7175 ;; *************** function _moveYellow *****************
  7176 ;; Defined at:
  7177 ;;		line 284 in file "dc_motor.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7180 ;;		 -> motorL(9), 
  7181 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7182 ;;		 -> motorR(9), 
  7183 ;; Auto vars:     Size  Location     Type
  7184 ;;		None
  7185 ;; Return value:  Size  Location     Type
  7186 ;;                  1    wreg      void 
  7187 ;; Registers used:
  7188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7189 ;; Tracked objects:
  7190 ;;		On entry : 0/0
  7191 ;;		On exit  : 0/0
  7192 ;;		Unchanged: 0/0
  7193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7194 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7196 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7197 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7198 ;;Total ram usage:        4 bytes
  7199 ;; Hardware stack levels used: 1
  7200 ;; Hardware stack levels required when called: 5
  7201 ;; This function calls:
  7202 ;;		_backOneAndHalf
  7203 ;;		_right90
  7204 ;; This function is called by:
  7205 ;;		_decision
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           	psect	text24
  7210   00448A                     __ptext24:
  7211                           	callstack 0
  7212   00448A                     _moveYellow:
  7213                           	callstack 24
  7214   00448A                     
  7215                           ;dc_motor.c: 284: void moveYellow(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          285: {;dc_motor.c: 287:     backOneAndHalf(mL,mR);
  7216   00448A  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  7217   00448E  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  7218   004492  EC90  F022         	call	_backOneAndHalf	;wreg free
  7219   004496                     
  7220                           ;dc_motor.c: 288:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7221   004496  0E29               	movlw	41
  7222   004498  6E20               	movwf	(??_moveYellow+1)^0,c
  7223   00449A  0E96               	movlw	150
  7224   00449C  6E1F               	movwf	??_moveYellow^0,c
  7225   00449E  0E7F               	movlw	127
  7226   0044A0                     u5327:
  7227   0044A0  2EE8               	decfsz	wreg,f,c
  7228   0044A2  D7FE               	bra	u5327
  7229   0044A4  2E1F               	decfsz	??_moveYellow^0,f,c
  7230   0044A6  D7FC               	bra	u5327
  7231   0044A8  2E20               	decfsz	(??_moveYellow+1)^0,f,c
  7232   0044AA  D7FA               	bra	u5327
  7233   0044AC  0000               	nop	
  7234   0044AE                     
  7235                           ;dc_motor.c: 289:     right90(mL,mR);
  7236   0044AE  C01D  F019         	movff	moveYellow@mL,right90@mL
  7237   0044B2  C01E  F01A         	movff	moveYellow@mR,right90@mR
  7238   0044B6  EC71  F023         	call	_right90	;wreg free
  7239   0044BA  0012               	return		;funcret
  7240   0044BC                     __end_of_moveYellow:
  7241                           	callstack 0
  7242                           
  7243 ;; *************** function _moveRed *****************
  7244 ;; Defined at:
  7245 ;;		line 255 in file "dc_motor.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7248 ;;		 -> motorL(9), 
  7249 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7250 ;;		 -> motorR(9), 
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;		None
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  1    wreg      void 
  7255 ;; Registers used:
  7256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7262 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7264 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7265 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7266 ;;Total ram usage:        4 bytes
  7267 ;; Hardware stack levels used: 1
  7268 ;; Hardware stack levels required when called: 5
  7269 ;; This function calls:
  7270 ;;		_backHalf
  7271 ;;		_right90
  7272 ;; This function is called by:
  7273 ;;		_decision
  7274 ;; This function uses a non-reentrant model
  7275 ;;
  7276                           
  7277                           	psect	text25
  7278   0044BC                     __ptext25:
  7279                           	callstack 0
  7280   0044BC                     _moveRed:
  7281                           	callstack 24
  7282   0044BC                     
  7283                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 256
      +                          : {;dc_motor.c: 258:     backHalf(mL,mR);
  7284   0044BC  C01D  F019         	movff	moveRed@mL,backHalf@mL
  7285   0044C0  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  7286   0044C4  ECA1  F023         	call	_backHalf	;wreg free
  7287   0044C8                     
  7288                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7289   0044C8  0E29               	movlw	41
  7290   0044CA  6E20               	movwf	(??_moveRed+1)^0,c
  7291   0044CC  0E96               	movlw	150
  7292   0044CE  6E1F               	movwf	??_moveRed^0,c
  7293   0044D0  0E7F               	movlw	127
  7294   0044D2                     u5337:
  7295   0044D2  2EE8               	decfsz	wreg,f,c
  7296   0044D4  D7FE               	bra	u5337
  7297   0044D6  2E1F               	decfsz	??_moveRed^0,f,c
  7298   0044D8  D7FC               	bra	u5337
  7299   0044DA  2E20               	decfsz	(??_moveRed+1)^0,f,c
  7300   0044DC  D7FA               	bra	u5337
  7301   0044DE  0000               	nop	
  7302   0044E0                     
  7303                           ;dc_motor.c: 260:     right90(mL,mR);
  7304   0044E0  C01D  F019         	movff	moveRed@mL,right90@mL
  7305   0044E4  C01E  F01A         	movff	moveRed@mR,right90@mR
  7306   0044E8  EC71  F023         	call	_right90	;wreg free
  7307   0044EC  0012               	return		;funcret
  7308   0044EE                     __end_of_moveRed:
  7309                           	callstack 0
  7310                           
  7311 ;; *************** function _right90 *****************
  7312 ;; Defined at:
  7313 ;;		line 193 in file "dc_motor.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7316 ;;		 -> motorL(9), 
  7317 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7318 ;;		 -> motorR(9), 
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;		None
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7330 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7332 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7333 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7334 ;;Total ram usage:        4 bytes
  7335 ;; Hardware stack levels used: 1
  7336 ;; Hardware stack levels required when called: 4
  7337 ;; This function calls:
  7338 ;;		_stop
  7339 ;;		_turnRight
  7340 ;; This function is called by:
  7341 ;;		_moveRed
  7342 ;;		_moveYellow
  7343 ;;		_reverseTurn
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           	psect	text26
  7348   0046E2                     __ptext26:
  7349                           	callstack 0
  7350   0046E2                     _right90:
  7351                           	callstack 24
  7352   0046E2                     
  7353                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  7354   0046E2  C019  F014         	movff	right90@mL,turnRight@mL
  7355   0046E6  C01A  F015         	movff	right90@mR,turnRight@mR
  7356   0046EA  EC15  F01F         	call	_turnRight	;wreg free
  7357   0046EE                     
  7358                           ;dc_motor.c: 196:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7359   0046EE  0E18               	movlw	24
  7360   0046F0  6E1C               	movwf	(??_right90+1)^0,c
  7361   0046F2  0E8A               	movlw	138
  7362   0046F4  6E1B               	movwf	??_right90^0,c
  7363   0046F6  0EE8               	movlw	232
  7364   0046F8                     u5347:
  7365   0046F8  2EE8               	decfsz	wreg,f,c
  7366   0046FA  D7FE               	bra	u5347
  7367   0046FC  2E1B               	decfsz	??_right90^0,f,c
  7368   0046FE  D7FC               	bra	u5347
  7369   004700  2E1C               	decfsz	(??_right90+1)^0,f,c
  7370   004702  D7FA               	bra	u5347
  7371   004704                     
  7372                           ;dc_motor.c: 197:     stop(mL,mR);
  7373   004704  C019  F014         	movff	right90@mL,stop@mL
  7374   004708  C01A  F015         	movff	right90@mR,stop@mR
  7375   00470C  ECCE  F01E         	call	_stop	;wreg free
  7376   004710  0012               	return		;funcret
  7377   004712                     __end_of_right90:
  7378                           	callstack 0
  7379                           
  7380 ;; *************** function _movePink *****************
  7381 ;; Defined at:
  7382 ;;		line 293 in file "dc_motor.c"
  7383 ;; Parameters:    Size  Location     Type
  7384 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7385 ;;		 -> motorL(9), 
  7386 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7387 ;;		 -> motorR(9), 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;		None
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  1    wreg      void 
  7392 ;; Registers used:
  7393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7399 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7401 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7402 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7403 ;;Total ram usage:        4 bytes
  7404 ;; Hardware stack levels used: 1
  7405 ;; Hardware stack levels required when called: 5
  7406 ;; This function calls:
  7407 ;;		_backOneAndHalf
  7408 ;;		_left90
  7409 ;; This function is called by:
  7410 ;;		_decision
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           	psect	text27
  7415   0044EE                     __ptext27:
  7416                           	callstack 0
  7417   0044EE                     _movePink:
  7418                           	callstack 24
  7419   0044EE                     
  7420                           ;dc_motor.c: 293: void movePink(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 29
      +                          4: {;dc_motor.c: 296:     backOneAndHalf(mL,mR);
  7421   0044EE  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  7422   0044F2  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  7423   0044F6  EC90  F022         	call	_backOneAndHalf	;wreg free
  7424   0044FA                     
  7425                           ;dc_motor.c: 297:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7426   0044FA  0E29               	movlw	41
  7427   0044FC  6E20               	movwf	(??_movePink+1)^0,c
  7428   0044FE  0E96               	movlw	150
  7429   004500  6E1F               	movwf	??_movePink^0,c
  7430   004502  0E7F               	movlw	127
  7431   004504                     u5357:
  7432   004504  2EE8               	decfsz	wreg,f,c
  7433   004506  D7FE               	bra	u5357
  7434   004508  2E1F               	decfsz	??_movePink^0,f,c
  7435   00450A  D7FC               	bra	u5357
  7436   00450C  2E20               	decfsz	(??_movePink+1)^0,f,c
  7437   00450E  D7FA               	bra	u5357
  7438   004510  0000               	nop	
  7439   004512                     
  7440                           ;dc_motor.c: 298:     left90(mL,mR);
  7441   004512  C01D  F019         	movff	movePink@mL,left90@mL
  7442   004516  C01E  F01A         	movff	movePink@mR,left90@mR
  7443   00451A  EC89  F023         	call	_left90	;wreg free
  7444   00451E  0012               	return		;funcret
  7445   004520                     __end_of_movePink:
  7446                           	callstack 0
  7447                           
  7448 ;; *************** function _backOneAndHalf *****************
  7449 ;; Defined at:
  7450 ;;		line 241 in file "dc_motor.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7453 ;;		 -> motorL(9), 
  7454 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7455 ;;		 -> motorR(9), 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;		None
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  1    wreg      void 
  7460 ;; Registers used:
  7461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7467 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7469 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7470 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7471 ;;Total ram usage:        4 bytes
  7472 ;; Hardware stack levels used: 1
  7473 ;; Hardware stack levels required when called: 4
  7474 ;; This function calls:
  7475 ;;		_fullSpeedBack
  7476 ;;		_stop
  7477 ;; This function is called by:
  7478 ;;		_moveYellow
  7479 ;;		_movePink
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           	psect	text28
  7484   004520                     __ptext28:
  7485                           	callstack 0
  7486   004520                     _backOneAndHalf:
  7487                           	callstack 24
  7488   004520                     
  7489                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  7490   004520  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  7491   004524  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  7492   004528  EC93  F01F         	call	_fullSpeedBack	;wreg free
  7493   00452C                     
  7494                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  7495   00452C  0E6A               	movlw	106
  7496   00452E  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  7497   004530  0E85               	movlw	133
  7498   004532  6E1B               	movwf	??_backOneAndHalf^0,c
  7499   004534  0EB4               	movlw	180
  7500   004536                     u5367:
  7501   004536  2EE8               	decfsz	wreg,f,c
  7502   004538  D7FE               	bra	u5367
  7503   00453A  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  7504   00453C  D7FC               	bra	u5367
  7505   00453E  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  7506   004540  D7FA               	bra	u5367
  7507   004542  D000               	nop2	
  7508   004544                     
  7509                           ;dc_motor.c: 245:     stop(mL,mR);
  7510   004544  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  7511   004548  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  7512   00454C  ECCE  F01E         	call	_stop	;wreg free
  7513   004550  0012               	return		;funcret
  7514   004552                     __end_of_backOneAndHalf:
  7515                           	callstack 0
  7516                           
  7517 ;; *************** function _moveOrange *****************
  7518 ;; Defined at:
  7519 ;;		line 302 in file "dc_motor.c"
  7520 ;; Parameters:    Size  Location     Type
  7521 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7522 ;;		 -> motorL(9), 
  7523 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7524 ;;		 -> motorR(9), 
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;		None
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  1    wreg      void 
  7529 ;; Registers used:
  7530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7536 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7538 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7539 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7540 ;;Total ram usage:        4 bytes
  7541 ;; Hardware stack levels used: 1
  7542 ;; Hardware stack levels required when called: 5
  7543 ;; This function calls:
  7544 ;;		_backHalf
  7545 ;;		_right135
  7546 ;; This function is called by:
  7547 ;;		_decision
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           	psect	text29
  7552   004552                     __ptext29:
  7553                           	callstack 0
  7554   004552                     _moveOrange:
  7555                           	callstack 24
  7556   004552                     
  7557                           ;dc_motor.c: 302: void moveOrange(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          303: {;dc_motor.c: 305:     backHalf(mL,mR);
  7558   004552  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  7559   004556  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  7560   00455A  ECA1  F023         	call	_backHalf	;wreg free
  7561   00455E                     
  7562                           ;dc_motor.c: 306:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7563   00455E  0E29               	movlw	41
  7564   004560  6E20               	movwf	(??_moveOrange+1)^0,c
  7565   004562  0E96               	movlw	150
  7566   004564  6E1F               	movwf	??_moveOrange^0,c
  7567   004566  0E7F               	movlw	127
  7568   004568                     u5377:
  7569   004568  2EE8               	decfsz	wreg,f,c
  7570   00456A  D7FE               	bra	u5377
  7571   00456C  2E1F               	decfsz	??_moveOrange^0,f,c
  7572   00456E  D7FC               	bra	u5377
  7573   004570  2E20               	decfsz	(??_moveOrange+1)^0,f,c
  7574   004572  D7FA               	bra	u5377
  7575   004574  0000               	nop	
  7576   004576                     
  7577                           ;dc_motor.c: 307:     right135(mL,mR);
  7578   004576  C01D  F019         	movff	moveOrange@mL,right135@mL
  7579   00457A  C01E  F01A         	movff	moveOrange@mR,right135@mR
  7580   00457E  ECC2  F022         	call	_right135	;wreg free
  7581   004582  0012               	return		;funcret
  7582   004584                     __end_of_moveOrange:
  7583                           	callstack 0
  7584                           
  7585 ;; *************** function _right135 *****************
  7586 ;; Defined at:
  7587 ;;		line 217 in file "dc_motor.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7590 ;;		 -> motorL(9), 
  7591 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7592 ;;		 -> motorR(9), 
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;		None
  7595 ;; Return value:  Size  Location     Type
  7596 ;;                  1    wreg      void 
  7597 ;; Registers used:
  7598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7606 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7607 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7608 ;;Total ram usage:        4 bytes
  7609 ;; Hardware stack levels used: 1
  7610 ;; Hardware stack levels required when called: 4
  7611 ;; This function calls:
  7612 ;;		_stop
  7613 ;;		_turnRight
  7614 ;; This function is called by:
  7615 ;;		_moveOrange
  7616 ;;		_reverseTurn
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text30
  7621   004584                     __ptext30:
  7622                           	callstack 0
  7623   004584                     _right135:
  7624                           	callstack 24
  7625   004584                     
  7626                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  7627   004584  C019  F014         	movff	right135@mL,turnRight@mL
  7628   004588  C01A  F015         	movff	right135@mR,turnRight@mR
  7629   00458C  EC15  F01F         	call	_turnRight	;wreg free
  7630   004590                     
  7631                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7632   004590  0E21               	movlw	33
  7633   004592  6E1C               	movwf	(??_right135+1)^0,c
  7634   004594  0E78               	movlw	120
  7635   004596  6E1B               	movwf	??_right135^0,c
  7636   004598  0E98               	movlw	152
  7637   00459A                     u5387:
  7638   00459A  2EE8               	decfsz	wreg,f,c
  7639   00459C  D7FE               	bra	u5387
  7640   00459E  2E1B               	decfsz	??_right135^0,f,c
  7641   0045A0  D7FC               	bra	u5387
  7642   0045A2  2E1C               	decfsz	(??_right135+1)^0,f,c
  7643   0045A4  D7FA               	bra	u5387
  7644   0045A6  D000               	nop2	
  7645   0045A8                     
  7646                           ;dc_motor.c: 221:     stop(mL,mR);
  7647   0045A8  C019  F014         	movff	right135@mL,stop@mL
  7648   0045AC  C01A  F015         	movff	right135@mR,stop@mR
  7649   0045B0  ECCE  F01E         	call	_stop	;wreg free
  7650   0045B4  0012               	return		;funcret
  7651   0045B6                     __end_of_right135:
  7652                           	callstack 0
  7653                           
  7654 ;; *************** function _turnRight *****************
  7655 ;; Defined at:
  7656 ;;		line 125 in file "dc_motor.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7659 ;;		 -> motorL(9), 
  7660 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7661 ;;		 -> motorR(9), 
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;  i               2   22[COMRAM] unsigned int 
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  1    wreg      void 
  7666 ;; Registers used:
  7667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7673 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7674 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7675 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7676 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7677 ;;Total ram usage:        5 bytes
  7678 ;; Hardware stack levels used: 1
  7679 ;; Hardware stack levels required when called: 3
  7680 ;; This function calls:
  7681 ;;		_setMotorPWM
  7682 ;; This function is called by:
  7683 ;;		_right90
  7684 ;;		_right135
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688                           	psect	text31
  7689   003E2A                     __ptext31:
  7690                           	callstack 0
  7691   003E2A                     _turnRight:
  7692                           	callstack 24
  7693   003E2A                     
  7694                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7695   003E2A  5014               	movf	turnRight@mL^0,w,c
  7696   003E2C  6ED9               	movwf	fsr2l,c
  7697   003E2E  6ADA               	clrf	fsr2h,c
  7698   003E30  0E01               	movlw	1
  7699   003E32  26D9               	addwf	fsr2l,f,c
  7700   003E34  0E01               	movlw	1
  7701   003E36  6EDF               	movwf	indf2,c
  7702                           
  7703                           ;dc_motor.c: 129:     mR->direction = 0;
  7704   003E38  5015               	movf	turnRight@mR^0,w,c
  7705   003E3A  6ED9               	movwf	fsr2l,c
  7706   003E3C  6ADA               	clrf	fsr2h,c
  7707   003E3E  0E01               	movlw	1
  7708   003E40  26D9               	addwf	fsr2l,f,c
  7709   003E42  6ADF               	clrf	indf2,c
  7710   003E44                     
  7711                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7712   003E44  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7713   003E48  EC80  F018         	call	_setMotorPWM	;wreg free
  7714   003E4C                     
  7715                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7716   003E4C  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7717   003E50  EC80  F018         	call	_setMotorPWM	;wreg free
  7718   003E54                     
  7719                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7720   003E54  0E00               	movlw	0
  7721   003E56  6E18               	movwf	(turnRight@i+1)^0,c
  7722   003E58  0E00               	movlw	0
  7723   003E5A  6E17               	movwf	turnRight@i^0,c
  7724   003E5C                     l3778:
  7725                           
  7726                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7727   003E5C  5014               	movf	turnRight@mL^0,w,c
  7728   003E5E  6ED9               	movwf	fsr2l,c
  7729   003E60  6ADA               	clrf	fsr2h,c
  7730   003E62  2ADF               	incf	indf2,f,c
  7731                           
  7732                           ;dc_motor.c: 136:         mR->power++;
  7733   003E64  5015               	movf	turnRight@mR^0,w,c
  7734   003E66  6ED9               	movwf	fsr2l,c
  7735   003E68  6ADA               	clrf	fsr2h,c
  7736   003E6A  2ADF               	incf	indf2,f,c
  7737   003E6C                     
  7738                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7739   003E6C  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7740   003E70  EC80  F018         	call	_setMotorPWM	;wreg free
  7741   003E74                     
  7742                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7743   003E74  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7744   003E78  EC80  F018         	call	_setMotorPWM	;wreg free
  7745   003E7C                     
  7746                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7747   003E7C  0E0B               	movlw	11
  7748   003E7E  6E16               	movwf	??_turnRight^0,c
  7749   003E80  0E62               	movlw	98
  7750   003E82                     u5397:
  7751   003E82  2EE8               	decfsz	wreg,f,c
  7752   003E84  D7FE               	bra	u5397
  7753   003E86  2E16               	decfsz	??_turnRight^0,f,c
  7754   003E88  D7FC               	bra	u5397
  7755   003E8A  D000               	nop2	
  7756   003E8C                     
  7757                           ;dc_motor.c: 140:     }
  7758   003E8C  4A17               	infsnz	turnRight@i^0,f,c
  7759   003E8E  2A18               	incf	(turnRight@i+1)^0,f,c
  7760   003E90  5018               	movf	(turnRight@i+1)^0,w,c
  7761   003E92  E109               	bnz	u2860
  7762   003E94  0E32               	movlw	50
  7763   003E96  5C17               	subwf	turnRight@i^0,w,c
  7764   003E98  A0D8               	btfss	status,0,c
  7765   003E9A  EF51  F01F         	goto	u2861
  7766   003E9E  EF53  F01F         	goto	u2860
  7767   003EA2                     u2861:
  7768   003EA2  EF2E  F01F         	goto	l3778
  7769   003EA6                     u2860:
  7770   003EA6  0012               	return		;funcret
  7771   003EA8                     __end_of_turnRight:
  7772                           	callstack 0
  7773                           
  7774 ;; *************** function _moveLightBlue *****************
  7775 ;; Defined at:
  7776 ;;		line 311 in file "dc_motor.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7779 ;;		 -> motorL(9), 
  7780 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7781 ;;		 -> motorR(9), 
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;		None
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  1    wreg      void 
  7786 ;; Registers used:
  7787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7793 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7795 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7796 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7797 ;;Total ram usage:        4 bytes
  7798 ;; Hardware stack levels used: 1
  7799 ;; Hardware stack levels required when called: 5
  7800 ;; This function calls:
  7801 ;;		_backHalf
  7802 ;;		_left135
  7803 ;; This function is called by:
  7804 ;;		_decision
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           	psect	text32
  7809   0045B6                     __ptext32:
  7810                           	callstack 0
  7811   0045B6                     _moveLightBlue:
  7812                           	callstack 24
  7813   0045B6                     
  7814                           ;dc_motor.c: 311: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 312: {;dc_motor.c: 314:     backHalf(mL,mR);
  7815   0045B6  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7816   0045BA  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7817   0045BE  ECA1  F023         	call	_backHalf	;wreg free
  7818   0045C2                     
  7819                           ;dc_motor.c: 315:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7820   0045C2  0E29               	movlw	41
  7821   0045C4  6E20               	movwf	(??_moveLightBlue+1)^0,c
  7822   0045C6  0E96               	movlw	150
  7823   0045C8  6E1F               	movwf	??_moveLightBlue^0,c
  7824   0045CA  0E7F               	movlw	127
  7825   0045CC                     u5407:
  7826   0045CC  2EE8               	decfsz	wreg,f,c
  7827   0045CE  D7FE               	bra	u5407
  7828   0045D0  2E1F               	decfsz	??_moveLightBlue^0,f,c
  7829   0045D2  D7FC               	bra	u5407
  7830   0045D4  2E20               	decfsz	(??_moveLightBlue+1)^0,f,c
  7831   0045D6  D7FA               	bra	u5407
  7832   0045D8  0000               	nop	
  7833   0045DA                     
  7834                           ;dc_motor.c: 316:     left135(mL,mR);
  7835   0045DA  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7836   0045DE  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7837   0045E2  ECF4  F022         	call	_left135	;wreg free
  7838   0045E6  0012               	return		;funcret
  7839   0045E8                     __end_of_moveLightBlue:
  7840                           	callstack 0
  7841                           
  7842 ;; *************** function _left135 *****************
  7843 ;; Defined at:
  7844 ;;		line 225 in file "dc_motor.c"
  7845 ;; Parameters:    Size  Location     Type
  7846 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7847 ;;		 -> motorL(9), 
  7848 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7849 ;;		 -> motorR(9), 
  7850 ;; Auto vars:     Size  Location     Type
  7851 ;;		None
  7852 ;; Return value:  Size  Location     Type
  7853 ;;                  1    wreg      void 
  7854 ;; Registers used:
  7855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7856 ;; Tracked objects:
  7857 ;;		On entry : 0/0
  7858 ;;		On exit  : 0/0
  7859 ;;		Unchanged: 0/0
  7860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7861 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7864 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7865 ;;Total ram usage:        4 bytes
  7866 ;; Hardware stack levels used: 1
  7867 ;; Hardware stack levels required when called: 4
  7868 ;; This function calls:
  7869 ;;		_stop
  7870 ;;		_turnLeft
  7871 ;; This function is called by:
  7872 ;;		_moveLightBlue
  7873 ;;		_reverseTurn
  7874 ;; This function uses a non-reentrant model
  7875 ;;
  7876                           
  7877                           	psect	text33
  7878   0045E8                     __ptext33:
  7879                           	callstack 0
  7880   0045E8                     _left135:
  7881                           	callstack 24
  7882   0045E8                     
  7883                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7884   0045E8  C019  F014         	movff	left135@mL,turnLeft@mL
  7885   0045EC  C01A  F015         	movff	left135@mR,turnLeft@mR
  7886   0045F0  EC54  F01F         	call	_turnLeft	;wreg free
  7887   0045F4                     
  7888                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7889   0045F4  0E21               	movlw	33
  7890   0045F6  6E1C               	movwf	(??_left135+1)^0,c
  7891   0045F8  0E78               	movlw	120
  7892   0045FA  6E1B               	movwf	??_left135^0,c
  7893   0045FC  0E98               	movlw	152
  7894   0045FE                     u5417:
  7895   0045FE  2EE8               	decfsz	wreg,f,c
  7896   004600  D7FE               	bra	u5417
  7897   004602  2E1B               	decfsz	??_left135^0,f,c
  7898   004604  D7FC               	bra	u5417
  7899   004606  2E1C               	decfsz	(??_left135+1)^0,f,c
  7900   004608  D7FA               	bra	u5417
  7901   00460A  D000               	nop2	
  7902   00460C                     
  7903                           ;dc_motor.c: 229:     stop(mL,mR);
  7904   00460C  C019  F014         	movff	left135@mL,stop@mL
  7905   004610  C01A  F015         	movff	left135@mR,stop@mR
  7906   004614  ECCE  F01E         	call	_stop	;wreg free
  7907   004618  0012               	return		;funcret
  7908   00461A                     __end_of_left135:
  7909                           	callstack 0
  7910                           
  7911 ;; *************** function _moveGreen *****************
  7912 ;; Defined at:
  7913 ;;		line 266 in file "dc_motor.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7916 ;;		 -> motorL(9), 
  7917 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7918 ;;		 -> motorR(9), 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;		None
  7921 ;; Return value:  Size  Location     Type
  7922 ;;                  1    wreg      void 
  7923 ;; Registers used:
  7924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7925 ;; Tracked objects:
  7926 ;;		On entry : 0/0
  7927 ;;		On exit  : 0/0
  7928 ;;		Unchanged: 0/0
  7929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7930 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7932 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7933 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7934 ;;Total ram usage:        4 bytes
  7935 ;; Hardware stack levels used: 1
  7936 ;; Hardware stack levels required when called: 5
  7937 ;; This function calls:
  7938 ;;		_backHalf
  7939 ;;		_left90
  7940 ;; This function is called by:
  7941 ;;		_decision
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           	psect	text34
  7946   00461A                     __ptext34:
  7947                           	callstack 0
  7948   00461A                     _moveGreen:
  7949                           	callstack 24
  7950   00461A                     
  7951                           ;dc_motor.c: 266: void moveGreen(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          67: {;dc_motor.c: 269:     backHalf(mL,mR);
  7952   00461A  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7953   00461E  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7954   004622  ECA1  F023         	call	_backHalf	;wreg free
  7955   004626                     
  7956                           ;dc_motor.c: 270:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7957   004626  0E29               	movlw	41
  7958   004628  6E20               	movwf	(??_moveGreen+1)^0,c
  7959   00462A  0E96               	movlw	150
  7960   00462C  6E1F               	movwf	??_moveGreen^0,c
  7961   00462E  0E7F               	movlw	127
  7962   004630                     u5427:
  7963   004630  2EE8               	decfsz	wreg,f,c
  7964   004632  D7FE               	bra	u5427
  7965   004634  2E1F               	decfsz	??_moveGreen^0,f,c
  7966   004636  D7FC               	bra	u5427
  7967   004638  2E20               	decfsz	(??_moveGreen+1)^0,f,c
  7968   00463A  D7FA               	bra	u5427
  7969   00463C  0000               	nop	
  7970   00463E                     
  7971                           ;dc_motor.c: 271:     left90(mL,mR);
  7972   00463E  C01D  F019         	movff	moveGreen@mL,left90@mL
  7973   004642  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7974   004646  EC89  F023         	call	_left90	;wreg free
  7975   00464A  0012               	return		;funcret
  7976   00464C                     __end_of_moveGreen:
  7977                           	callstack 0
  7978                           
  7979 ;; *************** function _left90 *****************
  7980 ;; Defined at:
  7981 ;;		line 201 in file "dc_motor.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7984 ;;		 -> motorL(9), 
  7985 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7986 ;;		 -> motorR(9), 
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;		None
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  1    wreg      void 
  7991 ;; Registers used:
  7992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7998 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8000 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8001 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8002 ;;Total ram usage:        4 bytes
  8003 ;; Hardware stack levels used: 1
  8004 ;; Hardware stack levels required when called: 4
  8005 ;; This function calls:
  8006 ;;		_stop
  8007 ;;		_turnLeft
  8008 ;; This function is called by:
  8009 ;;		_moveGreen
  8010 ;;		_movePink
  8011 ;;		_reverseTurn
  8012 ;; This function uses a non-reentrant model
  8013 ;;
  8014                           
  8015                           	psect	text35
  8016   004712                     __ptext35:
  8017                           	callstack 0
  8018   004712                     _left90:
  8019                           	callstack 24
  8020   004712                     
  8021                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  8022   004712  C019  F014         	movff	left90@mL,turnLeft@mL
  8023   004716  C01A  F015         	movff	left90@mR,turnLeft@mR
  8024   00471A  EC54  F01F         	call	_turnLeft	;wreg free
  8025   00471E                     
  8026                           ;dc_motor.c: 204:     _delay((unsigned long)((290)*(64000000/4000.0)));
  8027   00471E  0E18               	movlw	24
  8028   004720  6E1C               	movwf	(??_left90+1)^0,c
  8029   004722  0E8A               	movlw	138
  8030   004724  6E1B               	movwf	??_left90^0,c
  8031   004726  0EE8               	movlw	232
  8032   004728                     u5437:
  8033   004728  2EE8               	decfsz	wreg,f,c
  8034   00472A  D7FE               	bra	u5437
  8035   00472C  2E1B               	decfsz	??_left90^0,f,c
  8036   00472E  D7FC               	bra	u5437
  8037   004730  2E1C               	decfsz	(??_left90+1)^0,f,c
  8038   004732  D7FA               	bra	u5437
  8039   004734                     
  8040                           ;dc_motor.c: 205:     stop(mL,mR);
  8041   004734  C019  F014         	movff	left90@mL,stop@mL
  8042   004738  C01A  F015         	movff	left90@mR,stop@mR
  8043   00473C  ECCE  F01E         	call	_stop	;wreg free
  8044   004740  0012               	return		;funcret
  8045   004742                     __end_of_left90:
  8046                           	callstack 0
  8047                           
  8048 ;; *************** function _moveBlue *****************
  8049 ;; Defined at:
  8050 ;;		line 275 in file "dc_motor.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  8053 ;;		 -> motorL(9), 
  8054 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  8055 ;;		 -> motorR(9), 
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;		None
  8058 ;; Return value:  Size  Location     Type
  8059 ;;                  1    wreg      void 
  8060 ;; Registers used:
  8061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8062 ;; Tracked objects:
  8063 ;;		On entry : 0/0
  8064 ;;		On exit  : 0/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8067 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8069 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8070 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8071 ;;Total ram usage:        4 bytes
  8072 ;; Hardware stack levels used: 1
  8073 ;; Hardware stack levels required when called: 5
  8074 ;; This function calls:
  8075 ;;		_backHalf
  8076 ;;		_turn180
  8077 ;; This function is called by:
  8078 ;;		_decision
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082                           	psect	text36
  8083   00464C                     __ptext36:
  8084                           	callstack 0
  8085   00464C                     _moveBlue:
  8086                           	callstack 24
  8087   00464C                     
  8088                           ;dc_motor.c: 275: void moveBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 27
      +                          6: {;dc_motor.c: 278:     backHalf(mL,mR);
  8089   00464C  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  8090   004650  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  8091   004654  ECA1  F023         	call	_backHalf	;wreg free
  8092   004658                     
  8093                           ;dc_motor.c: 279:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8094   004658  0E29               	movlw	41
  8095   00465A  6E20               	movwf	(??_moveBlue+1)^0,c
  8096   00465C  0E96               	movlw	150
  8097   00465E  6E1F               	movwf	??_moveBlue^0,c
  8098   004660  0E7F               	movlw	127
  8099   004662                     u5447:
  8100   004662  2EE8               	decfsz	wreg,f,c
  8101   004664  D7FE               	bra	u5447
  8102   004666  2E1F               	decfsz	??_moveBlue^0,f,c
  8103   004668  D7FC               	bra	u5447
  8104   00466A  2E20               	decfsz	(??_moveBlue+1)^0,f,c
  8105   00466C  D7FA               	bra	u5447
  8106   00466E  0000               	nop	
  8107   004670                     
  8108                           ;dc_motor.c: 280:     turn180(mL,mR);
  8109   004670  C01D  F019         	movff	moveBlue@mL,turn180@mL
  8110   004674  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  8111   004678  EC3F  F023         	call	_turn180	;wreg free
  8112   00467C  0012               	return		;funcret
  8113   00467E                     __end_of_moveBlue:
  8114                           	callstack 0
  8115                           
  8116 ;; *************** function _turn180 *****************
  8117 ;; Defined at:
  8118 ;;		line 209 in file "dc_motor.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8121 ;;		 -> motorL(9), 
  8122 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8123 ;;		 -> motorR(9), 
  8124 ;; Auto vars:     Size  Location     Type
  8125 ;;		None
  8126 ;; Return value:  Size  Location     Type
  8127 ;;                  1    wreg      void 
  8128 ;; Registers used:
  8129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8130 ;; Tracked objects:
  8131 ;;		On entry : 0/0
  8132 ;;		On exit  : 0/0
  8133 ;;		Unchanged: 0/0
  8134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8135 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8137 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8138 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8139 ;;Total ram usage:        4 bytes
  8140 ;; Hardware stack levels used: 1
  8141 ;; Hardware stack levels required when called: 4
  8142 ;; This function calls:
  8143 ;;		_stop
  8144 ;;		_turnLeft
  8145 ;; This function is called by:
  8146 ;;		_moveBlue
  8147 ;;		_moveWhite
  8148 ;;		_reverseTurn
  8149 ;; This function uses a non-reentrant model
  8150 ;;
  8151                           
  8152                           	psect	text37
  8153   00467E                     __ptext37:
  8154                           	callstack 0
  8155   00467E                     _turn180:
  8156                           	callstack 24
  8157   00467E                     
  8158                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  8159   00467E  C019  F014         	movff	turn180@mL,turnLeft@mL
  8160   004682  C01A  F015         	movff	turn180@mR,turnLeft@mR
  8161   004686  EC54  F01F         	call	_turnLeft	;wreg free
  8162   00468A                     
  8163                           ;dc_motor.c: 212:     _delay((unsigned long)((580)*(64000000/4000.0)));
  8164   00468A  0E30               	movlw	48
  8165   00468C  6E1C               	movwf	(??_turn180+1)^0,c
  8166   00468E  0E14               	movlw	20
  8167   004690  6E1B               	movwf	??_turn180^0,c
  8168   004692  0ED1               	movlw	209
  8169   004694                     u5457:
  8170   004694  2EE8               	decfsz	wreg,f,c
  8171   004696  D7FE               	bra	u5457
  8172   004698  2E1B               	decfsz	??_turn180^0,f,c
  8173   00469A  D7FC               	bra	u5457
  8174   00469C  2E1C               	decfsz	(??_turn180+1)^0,f,c
  8175   00469E  D7FA               	bra	u5457
  8176   0046A0  0000               	nop	
  8177   0046A2                     
  8178                           ;dc_motor.c: 213:     stop(mL,mR);
  8179   0046A2  C019  F014         	movff	turn180@mL,stop@mL
  8180   0046A6  C01A  F015         	movff	turn180@mR,stop@mR
  8181   0046AA  ECCE  F01E         	call	_stop	;wreg free
  8182   0046AE  0012               	return		;funcret
  8183   0046B0                     __end_of_turn180:
  8184                           	callstack 0
  8185                           
  8186 ;; *************** function _turnLeft *****************
  8187 ;; Defined at:
  8188 ;;		line 105 in file "dc_motor.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8191 ;;		 -> motorL(9), 
  8192 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8193 ;;		 -> motorR(9), 
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  i               2   22[COMRAM] unsigned int 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  1    wreg      void 
  8198 ;; Registers used:
  8199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8205 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8206 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8207 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8208 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8209 ;;Total ram usage:        5 bytes
  8210 ;; Hardware stack levels used: 1
  8211 ;; Hardware stack levels required when called: 3
  8212 ;; This function calls:
  8213 ;;		_setMotorPWM
  8214 ;; This function is called by:
  8215 ;;		_left90
  8216 ;;		_turn180
  8217 ;;		_left135
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text38
  8222   003EA8                     __ptext38:
  8223                           	callstack 0
  8224   003EA8                     _turnLeft:
  8225                           	callstack 24
  8226   003EA8                     
  8227                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  8228   003EA8  5014               	movf	turnLeft@mL^0,w,c
  8229   003EAA  6ED9               	movwf	fsr2l,c
  8230   003EAC  6ADA               	clrf	fsr2h,c
  8231   003EAE  0E01               	movlw	1
  8232   003EB0  26D9               	addwf	fsr2l,f,c
  8233   003EB2  6ADF               	clrf	indf2,c
  8234                           
  8235                           ;dc_motor.c: 109:     mR->direction = 1;
  8236   003EB4  5015               	movf	turnLeft@mR^0,w,c
  8237   003EB6  6ED9               	movwf	fsr2l,c
  8238   003EB8  6ADA               	clrf	fsr2h,c
  8239   003EBA  0E01               	movlw	1
  8240   003EBC  26D9               	addwf	fsr2l,f,c
  8241   003EBE  0E01               	movlw	1
  8242   003EC0  6EDF               	movwf	indf2,c
  8243   003EC2                     
  8244                           ;dc_motor.c: 111:     setMotorPWM(mL);
  8245   003EC2  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8246   003EC6  EC80  F018         	call	_setMotorPWM	;wreg free
  8247   003ECA                     
  8248                           ;dc_motor.c: 112:     setMotorPWM(mR);
  8249   003ECA  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8250   003ECE  EC80  F018         	call	_setMotorPWM	;wreg free
  8251   003ED2                     
  8252                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  8253   003ED2  0E00               	movlw	0
  8254   003ED4  6E18               	movwf	(turnLeft@i+1)^0,c
  8255   003ED6  0E00               	movlw	0
  8256   003ED8  6E17               	movwf	turnLeft@i^0,c
  8257   003EDA                     l3754:
  8258                           
  8259                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  8260   003EDA  5014               	movf	turnLeft@mL^0,w,c
  8261   003EDC  6ED9               	movwf	fsr2l,c
  8262   003EDE  6ADA               	clrf	fsr2h,c
  8263   003EE0  2ADF               	incf	indf2,f,c
  8264                           
  8265                           ;dc_motor.c: 116:         mR->power++;
  8266   003EE2  5015               	movf	turnLeft@mR^0,w,c
  8267   003EE4  6ED9               	movwf	fsr2l,c
  8268   003EE6  6ADA               	clrf	fsr2h,c
  8269   003EE8  2ADF               	incf	indf2,f,c
  8270   003EEA                     
  8271                           ;dc_motor.c: 117:         setMotorPWM(mL);
  8272   003EEA  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8273   003EEE  EC80  F018         	call	_setMotorPWM	;wreg free
  8274   003EF2                     
  8275                           ;dc_motor.c: 118:         setMotorPWM(mR);
  8276   003EF2  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8277   003EF6  EC80  F018         	call	_setMotorPWM	;wreg free
  8278   003EFA                     
  8279                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8280   003EFA  0E0B               	movlw	11
  8281   003EFC  6E16               	movwf	??_turnLeft^0,c
  8282   003EFE  0E62               	movlw	98
  8283   003F00                     u5467:
  8284   003F00  2EE8               	decfsz	wreg,f,c
  8285   003F02  D7FE               	bra	u5467
  8286   003F04  2E16               	decfsz	??_turnLeft^0,f,c
  8287   003F06  D7FC               	bra	u5467
  8288   003F08  D000               	nop2	
  8289   003F0A                     
  8290                           ;dc_motor.c: 120:     }
  8291   003F0A  4A17               	infsnz	turnLeft@i^0,f,c
  8292   003F0C  2A18               	incf	(turnLeft@i+1)^0,f,c
  8293   003F0E  5018               	movf	(turnLeft@i+1)^0,w,c
  8294   003F10  E109               	bnz	u2850
  8295   003F12  0E32               	movlw	50
  8296   003F14  5C17               	subwf	turnLeft@i^0,w,c
  8297   003F16  A0D8               	btfss	status,0,c
  8298   003F18  EF90  F01F         	goto	u2851
  8299   003F1C  EF92  F01F         	goto	u2850
  8300   003F20                     u2851:
  8301   003F20  EF6D  F01F         	goto	l3754
  8302   003F24                     u2850:
  8303   003F24  0012               	return		;funcret
  8304   003F26                     __end_of_turnLeft:
  8305                           	callstack 0
  8306                           
  8307 ;; *************** function _backHalf *****************
  8308 ;; Defined at:
  8309 ;;		line 233 in file "dc_motor.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8312 ;;		 -> motorL(9), 
  8313 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8314 ;;		 -> motorR(9), 
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;		None
  8317 ;; Return value:  Size  Location     Type
  8318 ;;                  1    wreg      void 
  8319 ;; Registers used:
  8320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8321 ;; Tracked objects:
  8322 ;;		On entry : 0/0
  8323 ;;		On exit  : 0/0
  8324 ;;		Unchanged: 0/0
  8325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8329 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8330 ;;Total ram usage:        4 bytes
  8331 ;; Hardware stack levels used: 1
  8332 ;; Hardware stack levels required when called: 4
  8333 ;; This function calls:
  8334 ;;		_fullSpeedBack
  8335 ;;		_stop
  8336 ;; This function is called by:
  8337 ;;		_moveRed
  8338 ;;		_moveGreen
  8339 ;;		_moveBlue
  8340 ;;		_moveOrange
  8341 ;;		_moveLightBlue
  8342 ;;		_moveWhite
  8343 ;;		_reverseTurn
  8344 ;; This function uses a non-reentrant model
  8345 ;;
  8346                           
  8347                           	psect	text39
  8348   004742                     __ptext39:
  8349                           	callstack 0
  8350   004742                     _backHalf:
  8351                           	callstack 24
  8352   004742                     
  8353                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  8354   004742  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  8355   004746  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  8356   00474A  EC93  F01F         	call	_fullSpeedBack	;wreg free
  8357   00474E                     
  8358                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  8359   00474E  0E19               	movlw	25
  8360   004750  6E1C               	movwf	(??_backHalf+1)^0,c
  8361   004752  0E5A               	movlw	90
  8362   004754  6E1B               	movwf	??_backHalf^0,c
  8363   004756  0EB2               	movlw	178
  8364   004758                     u5477:
  8365   004758  2EE8               	decfsz	wreg,f,c
  8366   00475A  D7FE               	bra	u5477
  8367   00475C  2E1B               	decfsz	??_backHalf^0,f,c
  8368   00475E  D7FC               	bra	u5477
  8369   004760  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  8370   004762  D7FA               	bra	u5477
  8371   004764                     
  8372                           ;dc_motor.c: 237:     stop(mL,mR);
  8373   004764  C019  F014         	movff	backHalf@mL,stop@mL
  8374   004768  C01A  F015         	movff	backHalf@mR,stop@mR
  8375   00476C  ECCE  F01E         	call	_stop	;wreg free
  8376   004770  0012               	return		;funcret
  8377   004772                     __end_of_backHalf:
  8378                           	callstack 0
  8379                           
  8380 ;; *************** function _stop *****************
  8381 ;; Defined at:
  8382 ;;		line 88 in file "dc_motor.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8385 ;;		 -> motorL(9), 
  8386 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8387 ;;		 -> motorR(9), 
  8388 ;; Auto vars:     Size  Location     Type
  8389 ;;		None
  8390 ;; Return value:  Size  Location     Type
  8391 ;;                  1    wreg      void 
  8392 ;; Registers used:
  8393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8394 ;; Tracked objects:
  8395 ;;		On entry : 0/0
  8396 ;;		On exit  : 0/0
  8397 ;;		Unchanged: 0/0
  8398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8399 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8401 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8402 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8403 ;;Total ram usage:        3 bytes
  8404 ;; Hardware stack levels used: 1
  8405 ;; Hardware stack levels required when called: 3
  8406 ;; This function calls:
  8407 ;;		_setMotorPWM
  8408 ;; This function is called by:
  8409 ;;		_main
  8410 ;;		_right90
  8411 ;;		_left90
  8412 ;;		_turn180
  8413 ;;		_right135
  8414 ;;		_left135
  8415 ;;		_backHalf
  8416 ;;		_backOneAndHalf
  8417 ;;		_reverseStraight
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           	psect	text40
  8422   003D9C                     __ptext40:
  8423                           	callstack 0
  8424   003D9C                     _stop:
  8425                           	callstack 27
  8426   003D9C                     
  8427                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  8428   003D9C  EFFE  F01E         	goto	l3738
  8429   003DA0                     l3724:
  8430                           
  8431                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  8432   003DA0  5014               	movf	stop@mL^0,w,c
  8433   003DA2  6ED9               	movwf	fsr2l,c
  8434   003DA4  6ADA               	clrf	fsr2h,c
  8435   003DA6  50DF               	movf	indf2,w,c
  8436   003DA8  B4D8               	btfsc	status,2,c
  8437   003DAA  EFD9  F01E         	goto	u2811
  8438   003DAE  EFDB  F01E         	goto	u2810
  8439   003DB2                     u2811:
  8440   003DB2  EFDF  F01E         	goto	l3728
  8441   003DB6                     u2810:
  8442   003DB6  5014               	movf	stop@mL^0,w,c
  8443   003DB8  6ED9               	movwf	fsr2l,c
  8444   003DBA  6ADA               	clrf	fsr2h,c
  8445   003DBC  06DF               	decf	indf2,f,c
  8446   003DBE                     l3728:
  8447                           
  8448                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  8449   003DBE  5015               	movf	stop@mR^0,w,c
  8450   003DC0  6ED9               	movwf	fsr2l,c
  8451   003DC2  6ADA               	clrf	fsr2h,c
  8452   003DC4  50DF               	movf	indf2,w,c
  8453   003DC6  B4D8               	btfsc	status,2,c
  8454   003DC8  EFE8  F01E         	goto	u2821
  8455   003DCC  EFEA  F01E         	goto	u2820
  8456   003DD0                     u2821:
  8457   003DD0  EFEE  F01E         	goto	l3732
  8458   003DD4                     u2820:
  8459   003DD4  5015               	movf	stop@mR^0,w,c
  8460   003DD6  6ED9               	movwf	fsr2l,c
  8461   003DD8  6ADA               	clrf	fsr2h,c
  8462   003DDA  06DF               	decf	indf2,f,c
  8463   003DDC                     l3732:
  8464                           
  8465                           ;dc_motor.c: 96:         setMotorPWM(mL);
  8466   003DDC  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8467   003DE0  EC80  F018         	call	_setMotorPWM	;wreg free
  8468   003DE4                     
  8469                           ;dc_motor.c: 97:         setMotorPWM(mR);
  8470   003DE4  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8471   003DE8  EC80  F018         	call	_setMotorPWM	;wreg free
  8472   003DEC                     
  8473                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8474   003DEC  0E0B               	movlw	11
  8475   003DEE  6E16               	movwf	??_stop^0,c
  8476   003DF0  0E62               	movlw	98
  8477   003DF2                     u5487:
  8478   003DF2  2EE8               	decfsz	wreg,f,c
  8479   003DF4  D7FE               	bra	u5487
  8480   003DF6  2E16               	decfsz	??_stop^0,f,c
  8481   003DF8  D7FC               	bra	u5487
  8482   003DFA  D000               	nop2	
  8483   003DFC                     l3738:
  8484                           
  8485                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  8486   003DFC  5014               	movf	stop@mL^0,w,c
  8487   003DFE  6ED9               	movwf	fsr2l,c
  8488   003E00  6ADA               	clrf	fsr2h,c
  8489   003E02  50DF               	movf	indf2,w,c
  8490   003E04  A4D8               	btfss	status,2,c
  8491   003E06  EF07  F01F         	goto	u2831
  8492   003E0A  EF09  F01F         	goto	u2830
  8493   003E0E                     u2831:
  8494   003E0E  EFD0  F01E         	goto	l3724
  8495   003E12                     u2830:
  8496   003E12  5015               	movf	stop@mR^0,w,c
  8497   003E14  6ED9               	movwf	fsr2l,c
  8498   003E16  6ADA               	clrf	fsr2h,c
  8499   003E18  50DF               	movf	indf2,w,c
  8500   003E1A  A4D8               	btfss	status,2,c
  8501   003E1C  EF12  F01F         	goto	u2841
  8502   003E20  EF14  F01F         	goto	u2840
  8503   003E24                     u2841:
  8504   003E24  EFD0  F01E         	goto	l3724
  8505   003E28                     u2840:
  8506   003E28  0012               	return		;funcret
  8507   003E2A                     __end_of_stop:
  8508                           	callstack 0
  8509                           
  8510 ;; *************** function _fullSpeedBack *****************
  8511 ;; Defined at:
  8512 ;;		line 165 in file "dc_motor.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8515 ;;		 -> motorL(9), 
  8516 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8517 ;;		 -> motorR(9), 
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;  power           2   22[COMRAM] int 
  8520 ;; Return value:  Size  Location     Type
  8521 ;;                  1    wreg      void 
  8522 ;; Registers used:
  8523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8524 ;; Tracked objects:
  8525 ;;		On entry : 0/0
  8526 ;;		On exit  : 0/0
  8527 ;;		Unchanged: 0/0
  8528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8529 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8531 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8532 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8533 ;;Total ram usage:        5 bytes
  8534 ;; Hardware stack levels used: 1
  8535 ;; Hardware stack levels required when called: 3
  8536 ;; This function calls:
  8537 ;;		_setMotorPWM
  8538 ;; This function is called by:
  8539 ;;		_backHalf
  8540 ;;		_backOneAndHalf
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           	psect	text41
  8545   003F26                     __ptext41:
  8546                           	callstack 0
  8547   003F26                     _fullSpeedBack:
  8548                           	callstack 24
  8549   003F26                     
  8550                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  8551   003F26  5014               	movf	fullSpeedBack@mL^0,w,c
  8552   003F28  6ED9               	movwf	fsr2l,c
  8553   003F2A  6ADA               	clrf	fsr2h,c
  8554   003F2C  0E01               	movlw	1
  8555   003F2E  26D9               	addwf	fsr2l,f,c
  8556   003F30  6ADF               	clrf	indf2,c
  8557                           
  8558                           ;dc_motor.c: 169:     mR->direction = 0;
  8559   003F32  5015               	movf	fullSpeedBack@mR^0,w,c
  8560   003F34  6ED9               	movwf	fsr2l,c
  8561   003F36  6ADA               	clrf	fsr2h,c
  8562   003F38  0E01               	movlw	1
  8563   003F3A  26D9               	addwf	fsr2l,f,c
  8564   003F3C  6ADF               	clrf	indf2,c
  8565   003F3E                     
  8566                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8567   003F3E  0E00               	movlw	0
  8568   003F40  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8569   003F42  0E00               	movlw	0
  8570   003F44  6E17               	movwf	fullSpeedBack@power^0,c
  8571   003F46                     l3798:
  8572                           
  8573                           ;dc_motor.c: 172:         mL->power = power;
  8574   003F46  5014               	movf	fullSpeedBack@mL^0,w,c
  8575   003F48  6ED9               	movwf	fsr2l,c
  8576   003F4A  6ADA               	clrf	fsr2h,c
  8577   003F4C  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8578                           
  8579                           ;dc_motor.c: 173:         mR->power = power;
  8580   003F50  5015               	movf	fullSpeedBack@mR^0,w,c
  8581   003F52  6ED9               	movwf	fsr2l,c
  8582   003F54  6ADA               	clrf	fsr2h,c
  8583   003F56  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8584   003F5A                     
  8585                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8586   003F5A  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8587   003F5E  EC80  F018         	call	_setMotorPWM	;wreg free
  8588   003F62                     
  8589                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8590   003F62  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8591   003F66  EC80  F018         	call	_setMotorPWM	;wreg free
  8592   003F6A                     
  8593                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8594   003F6A  0E0B               	movlw	11
  8595   003F6C  6E16               	movwf	??_fullSpeedBack^0,c
  8596   003F6E  0E62               	movlw	98
  8597   003F70                     u5497:
  8598   003F70  2EE8               	decfsz	wreg,f,c
  8599   003F72  D7FE               	bra	u5497
  8600   003F74  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8601   003F76  D7FC               	bra	u5497
  8602   003F78  D000               	nop2	
  8603   003F7A                     
  8604                           ;dc_motor.c: 181:     }
  8605   003F7A  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8606   003F7C  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8607   003F7E  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8608   003F80  EFCB  F01F         	goto	u2871
  8609   003F84  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8610   003F86  E109               	bnz	u2870
  8611   003F88  0E33               	movlw	51
  8612   003F8A  5C17               	subwf	fullSpeedBack@power^0,w,c
  8613   003F8C  A0D8               	btfss	status,0,c
  8614   003F8E  EFCB  F01F         	goto	u2871
  8615   003F92  EFCD  F01F         	goto	u2870
  8616   003F96                     u2871:
  8617   003F96  EFA3  F01F         	goto	l3798
  8618   003F9A                     u2870:
  8619   003F9A  0012               	return		;funcret
  8620   003F9C                     __end_of_fullSpeedBack:
  8621                           	callstack 0
  8622                           
  8623 ;; *************** function _setMotorPWM *****************
  8624 ;; Defined at:
  8625 ;;		line 65 in file "dc_motor.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8628 ;;		 -> motorR(9), motorL(9), 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  negDuty         1   18[COMRAM] unsigned char 
  8631 ;;  posDuty         1   17[COMRAM] unsigned char 
  8632 ;; Return value:  Size  Location     Type
  8633 ;;                  1    wreg      void 
  8634 ;; Registers used:
  8635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8641 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8642 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8643 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8644 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8645 ;;Total ram usage:        5 bytes
  8646 ;; Hardware stack levels used: 1
  8647 ;; Hardware stack levels required when called: 2
  8648 ;; This function calls:
  8649 ;;		___lwdiv
  8650 ;;		___wmul
  8651 ;; This function is called by:
  8652 ;;		_stop
  8653 ;;		_turnLeft
  8654 ;;		_turnRight
  8655 ;;		_fullSpeedAhead
  8656 ;;		_fullSpeedBack
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           	psect	text42
  8661   003100                     __ptext42:
  8662                           	callstack 0
  8663   003100                     _setMotorPWM:
  8664                           	callstack 27
  8665   003100                     
  8666                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8667   003100  500F               	movf	setMotorPWM@m^0,w,c
  8668   003102  6ED9               	movwf	fsr2l,c
  8669   003104  6ADA               	clrf	fsr2h,c
  8670   003106  0E02               	movlw	2
  8671   003108  26D9               	addwf	fsr2l,f,c
  8672   00310A  50DF               	movf	indf2,w,c
  8673   00310C  B4D8               	btfsc	status,2,c
  8674   00310E  EF8B  F018         	goto	u2721
  8675   003112  EF8D  F018         	goto	u2720
  8676   003116                     u2721:
  8677   003116  EFBD  F018         	goto	l3652
  8678   00311A                     u2720:
  8679   00311A                     
  8680                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8681   00311A  500F               	movf	setMotorPWM@m^0,w,c
  8682   00311C  6ED9               	movwf	fsr2l,c
  8683   00311E  6ADA               	clrf	fsr2h,c
  8684   003120  50DF               	movf	indf2,w,c
  8685   003122  6E10               	movwf	??_setMotorPWM^0,c
  8686   003124  5010               	movf	??_setMotorPWM^0,w,c
  8687   003126  6E02               	movwf	___wmul@multiplier^0,c
  8688   003128  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8689   00312A  500F               	movf	setMotorPWM@m^0,w,c
  8690   00312C  6ED9               	movwf	fsr2l,c
  8691   00312E  6ADA               	clrf	fsr2h,c
  8692   003130  0E03               	movlw	3
  8693   003132  26D9               	addwf	fsr2l,f,c
  8694   003134  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8695   003138  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8696   00313C  ECE2  F023         	call	___wmul	;wreg free
  8697   003140  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8698   003144  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8699   003148  0E00               	movlw	0
  8700   00314A  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8701   00314C  0E64               	movlw	100
  8702   00314E  6E0A               	movwf	___lwdiv@divisor^0,c
  8703   003150  ECCE  F01F         	call	___lwdiv	;wreg free
  8704   003154  500F               	movf	setMotorPWM@m^0,w,c
  8705   003156  6ED9               	movwf	fsr2l,c
  8706   003158  6ADA               	clrf	fsr2h,c
  8707   00315A  0E03               	movlw	3
  8708   00315C  26D9               	addwf	fsr2l,f,c
  8709   00315E  50DF               	movf	indf2,w,c
  8710   003160  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8711   003162  5008               	movf	?___lwdiv^0,w,c
  8712   003164  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8713   003166  6E12               	movwf	setMotorPWM@posDuty^0,c
  8714   003168                     
  8715                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8716   003168  500F               	movf	setMotorPWM@m^0,w,c
  8717   00316A  6ED9               	movwf	fsr2l,c
  8718   00316C  6ADA               	clrf	fsr2h,c
  8719   00316E  0E03               	movlw	3
  8720   003170  26D9               	addwf	fsr2l,f,c
  8721   003172  50DF               	movf	indf2,w,c
  8722   003174  6E13               	movwf	setMotorPWM@negDuty^0,c
  8723                           
  8724                           ;dc_motor.c: 72:     }
  8725   003176  EFDE  F018         	goto	l3656
  8726   00317A                     l3652:
  8727                           
  8728                           ;dc_motor.c: 74:         posDuty=0;
  8729   00317A  0E00               	movlw	0
  8730   00317C  6E12               	movwf	setMotorPWM@posDuty^0,c
  8731   00317E                     
  8732                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8733   00317E  500F               	movf	setMotorPWM@m^0,w,c
  8734   003180  6ED9               	movwf	fsr2l,c
  8735   003182  6ADA               	clrf	fsr2h,c
  8736   003184  50DF               	movf	indf2,w,c
  8737   003186  6E10               	movwf	??_setMotorPWM^0,c
  8738   003188  5010               	movf	??_setMotorPWM^0,w,c
  8739   00318A  6E02               	movwf	___wmul@multiplier^0,c
  8740   00318C  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8741   00318E  500F               	movf	setMotorPWM@m^0,w,c
  8742   003190  6ED9               	movwf	fsr2l,c
  8743   003192  6ADA               	clrf	fsr2h,c
  8744   003194  0E03               	movlw	3
  8745   003196  26D9               	addwf	fsr2l,f,c
  8746   003198  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8747   00319C  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8748   0031A0  ECE2  F023         	call	___wmul	;wreg free
  8749   0031A4  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8750   0031A8  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8751   0031AC  0E00               	movlw	0
  8752   0031AE  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8753   0031B0  0E64               	movlw	100
  8754   0031B2  6E0A               	movwf	___lwdiv@divisor^0,c
  8755   0031B4  ECCE  F01F         	call	___lwdiv	;wreg free
  8756   0031B8  5008               	movf	?___lwdiv^0,w,c
  8757   0031BA  6E13               	movwf	setMotorPWM@negDuty^0,c
  8758   0031BC                     l3656:
  8759                           
  8760                           ;dc_motor.c: 78:     if (m->direction) {
  8761   0031BC  500F               	movf	setMotorPWM@m^0,w,c
  8762   0031BE  6ED9               	movwf	fsr2l,c
  8763   0031C0  6ADA               	clrf	fsr2h,c
  8764   0031C2  0E01               	movlw	1
  8765   0031C4  26D9               	addwf	fsr2l,f,c
  8766   0031C6  50DF               	movf	indf2,w,c
  8767   0031C8  B4D8               	btfsc	status,2,c
  8768   0031CA  EFE9  F018         	goto	u2731
  8769   0031CE  EFEB  F018         	goto	u2730
  8770   0031D2                     u2731:
  8771   0031D2  EF0B  F019         	goto	l3660
  8772   0031D6                     u2730:
  8773   0031D6                     
  8774                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8775   0031D6  500F               	movf	setMotorPWM@m^0,w,c
  8776   0031D8  6ED9               	movwf	fsr2l,c
  8777   0031DA  6ADA               	clrf	fsr2h,c
  8778   0031DC  0E05               	movlw	5
  8779   0031DE  26D9               	addwf	fsr2l,f,c
  8780   0031E0  CFDE F010          	movff	postinc2,??_setMotorPWM
  8781   0031E4  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8782   0031E8  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8783   0031EC  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8784   0031F0  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8785                           
  8786                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8787   0031F4  500F               	movf	setMotorPWM@m^0,w,c
  8788   0031F6  6ED9               	movwf	fsr2l,c
  8789   0031F8  6ADA               	clrf	fsr2h,c
  8790   0031FA  0E07               	movlw	7
  8791   0031FC  26D9               	addwf	fsr2l,f,c
  8792   0031FE  CFDE F010          	movff	postinc2,??_setMotorPWM
  8793   003202  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8794   003206  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8795   00320A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8796   00320E  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8797                           
  8798                           ;dc_motor.c: 81:     } else {
  8799   003212  EF29  F019         	goto	l421
  8800   003216                     l3660:
  8801                           
  8802                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8803   003216  500F               	movf	setMotorPWM@m^0,w,c
  8804   003218  6ED9               	movwf	fsr2l,c
  8805   00321A  6ADA               	clrf	fsr2h,c
  8806   00321C  0E05               	movlw	5
  8807   00321E  26D9               	addwf	fsr2l,f,c
  8808   003220  CFDE F010          	movff	postinc2,??_setMotorPWM
  8809   003224  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8810   003228  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8811   00322C  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8812   003230  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8813                           
  8814                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8815   003234  500F               	movf	setMotorPWM@m^0,w,c
  8816   003236  6ED9               	movwf	fsr2l,c
  8817   003238  6ADA               	clrf	fsr2h,c
  8818   00323A  0E07               	movlw	7
  8819   00323C  26D9               	addwf	fsr2l,f,c
  8820   00323E  CFDE F010          	movff	postinc2,??_setMotorPWM
  8821   003242  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8822   003246  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8823   00324A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8824   00324E  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8825   003252                     l421:
  8826   003252  0012               	return		;funcret
  8827   003254                     __end_of_setMotorPWM:
  8828                           	callstack 0
  8829                           
  8830 ;; *************** function ___lwdiv *****************
  8831 ;; Defined at:
  8832 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8833 ;; Parameters:    Size  Location     Type
  8834 ;;  dividend        2    7[COMRAM] unsigned int 
  8835 ;;  divisor         2    9[COMRAM] unsigned int 
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;  quotient        2   11[COMRAM] unsigned int 
  8838 ;;  counter         1   13[COMRAM] unsigned char 
  8839 ;; Return value:  Size  Location     Type
  8840 ;;                  2    7[COMRAM] unsigned int 
  8841 ;; Registers used:
  8842 ;;		wreg, status,2, status,0
  8843 ;; Tracked objects:
  8844 ;;		On entry : 0/0
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8849 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8851 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8852 ;;Total ram usage:        7 bytes
  8853 ;; Hardware stack levels used: 1
  8854 ;; Hardware stack levels required when called: 1
  8855 ;; This function calls:
  8856 ;;		Nothing
  8857 ;; This function is called by:
  8858 ;;		_setMotorPWM
  8859 ;;		_ADC2String
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           	psect	text43
  8864   003F9C                     __ptext43:
  8865                           	callstack 0
  8866   003F9C                     ___lwdiv:
  8867                           	callstack 27
  8868   003F9C  0E00               	movlw	0
  8869   003F9E  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  8870   003FA0  0E00               	movlw	0
  8871   003FA2  6E0C               	movwf	___lwdiv@quotient^0,c
  8872   003FA4  500A               	movf	___lwdiv@divisor^0,w,c
  8873   003FA6  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8874   003FA8  B4D8               	btfsc	status,2,c
  8875   003FAA  EFD9  F01F         	goto	u2571
  8876   003FAE  EFDB  F01F         	goto	u2570
  8877   003FB2                     u2571:
  8878   003FB2  EF03  F020         	goto	l1223
  8879   003FB6                     u2570:
  8880   003FB6  0E01               	movlw	1
  8881   003FB8  6E0E               	movwf	___lwdiv@counter^0,c
  8882   003FBA  EFE3  F01F         	goto	l3568
  8883   003FBE                     l3566:
  8884   003FBE  90D8               	bcf	status,0,c
  8885   003FC0  360A               	rlcf	___lwdiv@divisor^0,f,c
  8886   003FC2  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8887   003FC4  2A0E               	incf	___lwdiv@counter^0,f,c
  8888   003FC6                     l3568:
  8889   003FC6  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8890   003FC8  EFE8  F01F         	goto	u2581
  8891   003FCC  EFEA  F01F         	goto	u2580
  8892   003FD0                     u2581:
  8893   003FD0  EFDF  F01F         	goto	l3566
  8894   003FD4                     u2580:
  8895   003FD4                     l3570:
  8896   003FD4  90D8               	bcf	status,0,c
  8897   003FD6  360C               	rlcf	___lwdiv@quotient^0,f,c
  8898   003FD8  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8899   003FDA  500A               	movf	___lwdiv@divisor^0,w,c
  8900   003FDC  5C08               	subwf	___lwdiv@dividend^0,w,c
  8901   003FDE  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8902   003FE0  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8903   003FE2  A0D8               	btfss	status,0,c
  8904   003FE4  EFF6  F01F         	goto	u2591
  8905   003FE8  EFF8  F01F         	goto	u2590
  8906   003FEC                     u2591:
  8907   003FEC  EFFD  F01F         	goto	l3578
  8908   003FF0                     u2590:
  8909   003FF0  500A               	movf	___lwdiv@divisor^0,w,c
  8910   003FF2  5E08               	subwf	___lwdiv@dividend^0,f,c
  8911   003FF4  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8912   003FF6  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8913   003FF8  800C               	bsf	___lwdiv@quotient^0,0,c
  8914   003FFA                     l3578:
  8915   003FFA  90D8               	bcf	status,0,c
  8916   003FFC  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8917   003FFE  320A               	rrcf	___lwdiv@divisor^0,f,c
  8918   004000  2E0E               	decfsz	___lwdiv@counter^0,f,c
  8919   004002  EFEA  F01F         	goto	l3570
  8920   004006                     l1223:
  8921   004006  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  8922   00400A  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8923   00400E  0012               	return		;funcret
  8924   004010                     __end_of___lwdiv:
  8925                           	callstack 0
  8926                           
  8927 ;; *************** function _logAction *****************
  8928 ;; Defined at:
  8929 ;;		line 13 in file "return_func.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;  newAction       1    wreg     unsigned char 
  8932 ;;  newTime         2    1[COMRAM] int 
  8933 ;;  path_step       2    3[COMRAM] unsigned int 
  8934 ;; Auto vars:     Size  Location     Type
  8935 ;;  newAction       1    5[COMRAM] unsigned char 
  8936 ;; Return value:  Size  Location     Type
  8937 ;;                  1    wreg      void 
  8938 ;; Registers used:
  8939 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8940 ;; Tracked objects:
  8941 ;;		On entry : 0/0
  8942 ;;		On exit  : 0/0
  8943 ;;		Unchanged: 0/0
  8944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8945 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8946 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8948 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8949 ;;Total ram usage:        5 bytes
  8950 ;; Hardware stack levels used: 1
  8951 ;; Hardware stack levels required when called: 1
  8952 ;; This function calls:
  8953 ;;		Nothing
  8954 ;; This function is called by:
  8955 ;;		_decision
  8956 ;;		_get16bitTMR0val
  8957 ;; This function uses a non-reentrant model
  8958 ;;
  8959                           
  8960                           	psect	text44
  8961   004200                     __ptext44:
  8962                           	callstack 0
  8963   004200                     _logAction:
  8964                           	callstack 28
  8965                           
  8966                           ;incstack = 0
  8967                           ;logAction@newAction stored from wreg
  8968   004200  6E06               	movwf	logAction@newAction^0,c
  8969   004202                     
  8970                           ;return_func.c: 14:     if (path_step < 50) {
  8971   004202  5005               	movf	(logAction@path_step+1)^0,w,c
  8972   004204  E107               	bnz	u4121
  8973   004206  0E32               	movlw	50
  8974   004208  5C04               	subwf	logAction@path_step^0,w,c
  8975   00420A  B0D8               	btfsc	status,0,c
  8976   00420C  EF0A  F021         	goto	u4121
  8977   004210  EF0C  F021         	goto	u4120
  8978   004214                     u4121:
  8979   004214  EF21  F021         	goto	l696
  8980   004218                     u4120:
  8981   004218                     
  8982                           ;return_func.c: 15:         action[path_step] = newAction;
  8983   004218  0E3C               	movlw	low _action
  8984   00421A  2404               	addwf	logAction@path_step^0,w,c
  8985   00421C  6ED9               	movwf	fsr2l,c
  8986   00421E  0E01               	movlw	high _action
  8987   004220  2005               	addwfc	(logAction@path_step+1)^0,w,c
  8988   004222  6EDA               	movwf	fsr2h,c
  8989   004224  C006  FFDF         	movff	logAction@newAction,indf2
  8990                           
  8991                           ;return_func.c: 16:         time[path_step] = newTime;
  8992   004228  90D8               	bcf	status,0,c
  8993   00422A  3404               	rlcf	logAction@path_step^0,w,c
  8994   00422C  6ED9               	movwf	fsr2l,c
  8995   00422E  3405               	rlcf	(logAction@path_step+1)^0,w,c
  8996   004230  6EDA               	movwf	fsr2h,c
  8997   004232  0E00               	movlw	low _time
  8998   004234  26D9               	addwf	fsr2l,f,c
  8999   004236  0E02               	movlw	high _time
  9000   004238  22DA               	addwfc	fsr2h,f,c
  9001   00423A  C002  FFDE         	movff	logAction@newTime,postinc2
  9002   00423E  C003  FFDD         	movff	logAction@newTime+1,postdec2
  9003   004242                     l696:
  9004   004242  0012               	return		;funcret
  9005   004244                     __end_of_logAction:
  9006                           	callstack 0
  9007                           
  9008 ;; *************** function _color_click_init *****************
  9009 ;; Defined at:
  9010 ;;		line 9 in file "color.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;		None
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;		None
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  1    wreg      void 
  9017 ;; Registers used:
  9018 ;;		wreg, status,2, status,0, cstack
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9026 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9027 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9028 ;;Total ram usage:        1 bytes
  9029 ;; Hardware stack levels used: 1
  9030 ;; Hardware stack levels required when called: 4
  9031 ;; This function calls:
  9032 ;;		_I2C_2_Master_Init
  9033 ;;		_color_writetoaddr
  9034 ;; This function is called by:
  9035 ;;		_main
  9036 ;; This function uses a non-reentrant model
  9037 ;;
  9038                           
  9039                           	psect	text45
  9040   0043BC                     __ptext45:
  9041                           	callstack 0
  9042   0043BC                     _color_click_init:
  9043                           	callstack 26
  9044   0043BC                     
  9045                           ;color.c: 12:     I2C_2_Master_Init();
  9046   0043BC  ECB9  F023         	call	_I2C_2_Master_Init	;wreg free
  9047   0043C0                     
  9048                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  9049   0043C0  0E01               	movlw	1
  9050   0043C2  6E04               	movwf	color_writetoaddr@value^0,c
  9051   0043C4  0E00               	movlw	0
  9052   0043C6  ECF5  F023         	call	_color_writetoaddr
  9053   0043CA                     
  9054                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  9055   0043CA  0E3F               	movlw	63
  9056   0043CC  6E06               	movwf	??_color_click_init^0,c
  9057   0043CE  0E55               	movlw	85
  9058   0043D0                     u5507:
  9059   0043D0  2EE8               	decfsz	wreg,f,c
  9060   0043D2  D7FE               	bra	u5507
  9061   0043D4  2E06               	decfsz	??_color_click_init^0,f,c
  9062   0043D6  D7FC               	bra	u5507
  9063   0043D8  0000               	nop	
  9064   0043DA                     
  9065                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  9066   0043DA  0E03               	movlw	3
  9067   0043DC  6E04               	movwf	color_writetoaddr@value^0,c
  9068   0043DE  0E00               	movlw	0
  9069   0043E0  ECF5  F023         	call	_color_writetoaddr
  9070   0043E4                     
  9071                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  9072   0043E4  0ED5               	movlw	213
  9073   0043E6  6E04               	movwf	color_writetoaddr@value^0,c
  9074   0043E8  0E01               	movlw	1
  9075   0043EA  ECF5  F023         	call	_color_writetoaddr
  9076   0043EE  0012               	return		;funcret
  9077   0043F0                     __end_of_color_click_init:
  9078                           	callstack 0
  9079                           
  9080 ;; *************** function _color_writetoaddr *****************
  9081 ;; Defined at:
  9082 ;;		line 25 in file "color.c"
  9083 ;; Parameters:    Size  Location     Type
  9084 ;;  address         1    wreg     unsigned char 
  9085 ;;  value           1    3[COMRAM] unsigned char 
  9086 ;; Auto vars:     Size  Location     Type
  9087 ;;  address         1    4[COMRAM] unsigned char 
  9088 ;; Return value:  Size  Location     Type
  9089 ;;                  1    wreg      void 
  9090 ;; Registers used:
  9091 ;;		wreg, status,2, status,0, cstack
  9092 ;; Tracked objects:
  9093 ;;		On entry : 0/0
  9094 ;;		On exit  : 0/0
  9095 ;;		Unchanged: 0/0
  9096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9097 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9100 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9101 ;;Total ram usage:        2 bytes
  9102 ;; Hardware stack levels used: 1
  9103 ;; Hardware stack levels required when called: 3
  9104 ;; This function calls:
  9105 ;;		_I2C_2_Master_Start
  9106 ;;		_I2C_2_Master_Stop
  9107 ;;		_I2C_2_Master_Write
  9108 ;; This function is called by:
  9109 ;;		_color_click_init
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           	psect	text46
  9114   0047EA                     __ptext46:
  9115                           	callstack 0
  9116   0047EA                     _color_writetoaddr:
  9117                           	callstack 26
  9118                           
  9119                           ;incstack = 0
  9120                           ;color_writetoaddr@address stored from wreg
  9121   0047EA  6E05               	movwf	color_writetoaddr@address^0,c
  9122   0047EC                     
  9123                           ;color.c: 26:     I2C_2_Master_Start();
  9124   0047EC  EC47  F024         	call	_I2C_2_Master_Start	;wreg free
  9125                           
  9126                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  9127   0047F0  0E52               	movlw	82
  9128   0047F2  EC3C  F024         	call	_I2C_2_Master_Write
  9129                           
  9130                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  9131   0047F6  5005               	movf	color_writetoaddr@address^0,w,c
  9132   0047F8  0980               	iorlw	128
  9133   0047FA  EC3C  F024         	call	_I2C_2_Master_Write
  9134                           
  9135                           ;color.c: 29:     I2C_2_Master_Write(value);
  9136   0047FE  5004               	movf	color_writetoaddr@value^0,w,c
  9137   004800  EC3C  F024         	call	_I2C_2_Master_Write
  9138                           
  9139                           ;color.c: 30:     I2C_2_Master_Stop();
  9140   004804  EC42  F024         	call	_I2C_2_Master_Stop	;wreg free
  9141   004808  0012               	return		;funcret
  9142   00480A                     __end_of_color_writetoaddr:
  9143                           	callstack 0
  9144                           
  9145 ;; *************** function _I2C_2_Master_Init *****************
  9146 ;; Defined at:
  9147 ;;		line 4 in file "i2c.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;		None
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;		None
  9152 ;; Return value:  Size  Location     Type
  9153 ;;                  1    wreg      void 
  9154 ;; Registers used:
  9155 ;;		wreg, status,2
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9165 ;;Total ram usage:        0 bytes
  9166 ;; Hardware stack levels used: 1
  9167 ;; Hardware stack levels required when called: 1
  9168 ;; This function calls:
  9169 ;;		Nothing
  9170 ;; This function is called by:
  9171 ;;		_color_click_init
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           	psect	text47
  9176   004772                     __ptext47:
  9177                           	callstack 0
  9178   004772                     _I2C_2_Master_Init:
  9179                           	callstack 28
  9180   004772                     
  9181                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  9182   004772  010E               	movlb	14	; () banked
  9183   004774  51D9               	movf	217,w,b	;volatile
  9184   004776  0BF0               	andlw	-16
  9185   004778  0908               	iorlw	8
  9186   00477A  6FD9               	movwf	217,b	;volatile
  9187   00477C                     
  9188                           ; BSR set to: 14
  9189                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9190   00477C  8BD9               	bsf	217,5,b	;volatile
  9191                           
  9192                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9193   00477E  0E9F               	movlw	159
  9194   004780  6FD6               	movwf	214,b	;volatile
  9195   004782                     
  9196                           ; BSR set to: 14
  9197                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9198   004782  8A84               	bsf	132,5,c	;volatile
  9199   004784                     
  9200                           ; BSR set to: 14
  9201                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9202   004784  8C84               	bsf	132,6,c	;volatile
  9203   004786                     
  9204                           ; BSR set to: 14
  9205                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9206   004786  9BA7               	bcf	167,5,b	;volatile
  9207   004788                     
  9208                           ; BSR set to: 14
  9209                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9210   004788  9DA7               	bcf	167,6,b	;volatile
  9211                           
  9212                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9213   00478A  0E1D               	movlw	29
  9214   00478C  6F1D               	movwf	29,b	;volatile
  9215                           
  9216                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9217   00478E  0E1E               	movlw	30
  9218   004790  6F1C               	movwf	28,b	;volatile
  9219                           
  9220                           ;i2c.c: 18:   RD5PPS=0x1C;
  9221   004792  0E1C               	movlw	28
  9222   004794  6F6F               	movwf	111,b	;volatile
  9223                           
  9224                           ;i2c.c: 19:   RD6PPS=0x1B;
  9225   004796  0E1B               	movlw	27
  9226   004798  6F70               	movwf	112,b	;volatile
  9227   00479A                     
  9228                           ; BSR set to: 14
  9229   00479A  0012               	return		;funcret
  9230   00479C                     __end_of_I2C_2_Master_Init:
  9231                           	callstack 0
  9232                           
  9233 ;; *************** function _calibration_routine *****************
  9234 ;; Defined at:
  9235 ;;		line 133 in file "color.c"
  9236 ;; Parameters:    Size  Location     Type
  9237 ;;  cCal            1   68[COMRAM] PTR struct colors
  9238 ;;		 -> colorCalibration(10), 
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;  cal_state      20   71[COMRAM] unsigned char [20]
  9241 ;; Return value:  Size  Location     Type
  9242 ;;                  1    wreg      void 
  9243 ;; Registers used:
  9244 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9245 ;; Tracked objects:
  9246 ;;		On entry : 0/0
  9247 ;;		On exit  : 0/0
  9248 ;;		Unchanged: 0/0
  9249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9250 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9251 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9252 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9253 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9254 ;;Total ram usage:       23 bytes
  9255 ;; Hardware stack levels used: 1
  9256 ;; Hardware stack levels required when called: 9
  9257 ;; This function calls:
  9258 ;;		_color_read_Blue
  9259 ;;		_color_read_Clear
  9260 ;;		_color_read_Green
  9261 ;;		_color_read_Red
  9262 ;;		_sendStringSerial4
  9263 ;;		_sprintf
  9264 ;; This function is called by:
  9265 ;;		_main
  9266 ;; This function uses a non-reentrant model
  9267 ;;
  9268                           
  9269                           	psect	text48
  9270   0028B4                     __ptext48:
  9271                           	callstack 0
  9272   0028B4                     _calibration_routine:
  9273                           	callstack 21
  9274   0028B4                     
  9275                           ;color.c: 133: void calibration_routine(colors *cCal);color.c: 134: {;color.c: 136:     
      +                          LATGbits.LATG0 = 0;
  9276   0028B4  907F               	bcf	127,0,c	;volatile
  9277                           
  9278                           ;color.c: 137:     LATEbits.LATE7 = 0;
  9279   0028B6  9E7D               	bcf	125,7,c	;volatile
  9280                           
  9281                           ;color.c: 138:     LATAbits.LATA3 = 0;
  9282   0028B8  9679               	bcf	121,3,c	;volatile
  9283   0028BA                     
  9284                           ;color.c: 140:     char cal_state[20];;color.c: 144:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  9285   0028BA  0E48               	movlw	low calibration_routine@cal_state
  9286   0028BC  6E32               	movwf	sprintf@s^0,c
  9287   0028BE  0E8A               	movlw	low STR_1
  9288   0028C0  6E33               	movwf	sprintf@fmt^0,c
  9289   0028C2  0EC3               	movlw	low STR_2
  9290   0028C4  6E34               	movwf	(?_sprintf+2)^0,c
  9291   0028C6  5034               	movf	(?_sprintf+2)^0,w,c
  9292   0028C8  A4D8               	btfss	status,2,c
  9293   0028CA  0E0E               	movlw	high __smallconst
  9294   0028CC  6E35               	movwf	(?_sprintf+3)^0,c
  9295   0028CE  ECF8  F021         	call	_sprintf	;wreg free
  9296   0028D2                     
  9297                           ;color.c: 145:     sendStringSerial4(cal_state);
  9298   0028D2  0E48               	movlw	low calibration_routine@cal_state
  9299   0028D4  6E03               	movwf	sendStringSerial4@string^0,c
  9300   0028D6  EC58  F023         	call	_sendStringSerial4	;wreg free
  9301   0028DA                     l104:
  9302                           
  9303                           ;color.c: 148:     while(PORTFbits.RF2 == 1){
  9304   0028DA  B48E               	btfsc	142,2,c	;volatile
  9305   0028DC  EF72  F014         	goto	u4871
  9306   0028E0  EF74  F014         	goto	u4870
  9307   0028E4                     u4871:
  9308   0028E4  EF6D  F014         	goto	l104
  9309   0028E8                     u4870:
  9310   0028E8                     
  9311                           ;color.c: 152:     LATGbits.LATG0 = 1;
  9312   0028E8  807F               	bsf	127,0,c	;volatile
  9313   0028EA                     
  9314                           ;color.c: 153:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9315   0028EA  0E29               	movlw	41
  9316   0028EC  6E47               	movwf	(??_calibration_routine+1)^0,c
  9317   0028EE  0E96               	movlw	150
  9318   0028F0  6E46               	movwf	??_calibration_routine^0,c
  9319   0028F2  0E7F               	movlw	127
  9320   0028F4                     u5517:
  9321   0028F4  2EE8               	decfsz	wreg,f,c
  9322   0028F6  D7FE               	bra	u5517
  9323   0028F8  2E46               	decfsz	??_calibration_routine^0,f,c
  9324   0028FA  D7FC               	bra	u5517
  9325   0028FC  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9326   0028FE  D7FA               	bra	u5517
  9327   002900  0000               	nop	
  9328   002902                     
  9329                           ;color.c: 154:     (cCal->red) = color_read_Red();
  9330   002902  EC3D  F020         	call	_color_read_Red	;wreg free
  9331   002906  5045               	movf	calibration_routine@cCal^0,w,c
  9332   002908  6ED9               	movwf	fsr2l,c
  9333   00290A  6ADA               	clrf	fsr2h,c
  9334   00290C  C006  FFDE         	movff	?_color_read_Red,postinc2
  9335   002910  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  9336   002914                     
  9337                           ;color.c: 155:     LATGbits.LATG0 = 0;
  9338   002914  907F               	bcf	127,0,c	;volatile
  9339   002916                     
  9340                           ;color.c: 158:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  9341   002916  0E48               	movlw	low calibration_routine@cal_state
  9342   002918  6E32               	movwf	sprintf@s^0,c
  9343   00291A  0E01               	movlw	low STR_3
  9344   00291C  6E33               	movwf	sprintf@fmt^0,c
  9345   00291E  0EC3               	movlw	low STR_2
  9346   002920  6E34               	movwf	(?_sprintf+2)^0,c
  9347   002922  5034               	movf	(?_sprintf+2)^0,w,c
  9348   002924  A4D8               	btfss	status,2,c
  9349   002926  0E0E               	movlw	high __smallconst
  9350   002928  6E35               	movwf	(?_sprintf+3)^0,c
  9351   00292A  ECF8  F021         	call	_sprintf	;wreg free
  9352   00292E                     
  9353                           ;color.c: 159:     sendStringSerial4(&cal_state);
  9354   00292E  0E48               	movlw	low calibration_routine@cal_state
  9355   002930  6E03               	movwf	sendStringSerial4@string^0,c
  9356   002932  EC58  F023         	call	_sendStringSerial4	;wreg free
  9357   002936                     l107:
  9358                           
  9359                           ;color.c: 161:     while(PORTFbits.RF2 == 1){
  9360   002936  B48E               	btfsc	142,2,c	;volatile
  9361   002938  EFA0  F014         	goto	u4881
  9362   00293C  EFA2  F014         	goto	u4880
  9363   002940                     u4881:
  9364   002940  EF9B  F014         	goto	l107
  9365   002944                     u4880:
  9366   002944                     
  9367                           ;color.c: 165:     LATEbits.LATE7 = 1;
  9368   002944  8E7D               	bsf	125,7,c	;volatile
  9369   002946                     
  9370                           ;color.c: 166:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9371   002946  0E29               	movlw	41
  9372   002948  6E47               	movwf	(??_calibration_routine+1)^0,c
  9373   00294A  0E96               	movlw	150
  9374   00294C  6E46               	movwf	??_calibration_routine^0,c
  9375   00294E  0E7F               	movlw	127
  9376   002950                     u5527:
  9377   002950  2EE8               	decfsz	wreg,f,c
  9378   002952  D7FE               	bra	u5527
  9379   002954  2E46               	decfsz	??_calibration_routine^0,f,c
  9380   002956  D7FC               	bra	u5527
  9381   002958  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9382   00295A  D7FA               	bra	u5527
  9383   00295C  0000               	nop	
  9384   00295E                     
  9385                           ;color.c: 167:     (cCal->green) = color_read_Green();
  9386   00295E  EC65  F020         	call	_color_read_Green	;wreg free
  9387   002962  5045               	movf	calibration_routine@cCal^0,w,c
  9388   002964  6ED9               	movwf	fsr2l,c
  9389   002966  6ADA               	clrf	fsr2h,c
  9390   002968  0E02               	movlw	2
  9391   00296A  26D9               	addwf	fsr2l,f,c
  9392   00296C  C006  FFDE         	movff	?_color_read_Green,postinc2
  9393   002970  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  9394   002974                     
  9395                           ;color.c: 168:     LATEbits.LATE7 = 0;
  9396   002974  9E7D               	bcf	125,7,c	;volatile
  9397   002976                     
  9398                           ;color.c: 171:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  9399   002976  0E48               	movlw	low calibration_routine@cal_state
  9400   002978  6E32               	movwf	sprintf@s^0,c
  9401   00297A  0E3B               	movlw	low STR_5
  9402   00297C  6E33               	movwf	sprintf@fmt^0,c
  9403   00297E  0EC3               	movlw	low STR_2
  9404   002980  6E34               	movwf	(?_sprintf+2)^0,c
  9405   002982  5034               	movf	(?_sprintf+2)^0,w,c
  9406   002984  A4D8               	btfss	status,2,c
  9407   002986  0E0E               	movlw	high __smallconst
  9408   002988  6E35               	movwf	(?_sprintf+3)^0,c
  9409   00298A  ECF8  F021         	call	_sprintf	;wreg free
  9410   00298E                     
  9411                           ;color.c: 172:     sendStringSerial4(&cal_state);
  9412   00298E  0E48               	movlw	low calibration_routine@cal_state
  9413   002990  6E03               	movwf	sendStringSerial4@string^0,c
  9414   002992  EC58  F023         	call	_sendStringSerial4	;wreg free
  9415   002996                     l110:
  9416                           
  9417                           ;color.c: 174:     while(PORTFbits.RF2 == 1){
  9418   002996  B48E               	btfsc	142,2,c	;volatile
  9419   002998  EFD0  F014         	goto	u4891
  9420   00299C  EFD2  F014         	goto	u4890
  9421   0029A0                     u4891:
  9422   0029A0  EFCB  F014         	goto	l110
  9423   0029A4                     u4890:
  9424   0029A4                     
  9425                           ;color.c: 178:     LATAbits.LATA3 = 1;
  9426   0029A4  8679               	bsf	121,3,c	;volatile
  9427   0029A6                     
  9428                           ;color.c: 179:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9429   0029A6  0E29               	movlw	41
  9430   0029A8  6E47               	movwf	(??_calibration_routine+1)^0,c
  9431   0029AA  0E96               	movlw	150
  9432   0029AC  6E46               	movwf	??_calibration_routine^0,c
  9433   0029AE  0E7F               	movlw	127
  9434   0029B0                     u5537:
  9435   0029B0  2EE8               	decfsz	wreg,f,c
  9436   0029B2  D7FE               	bra	u5537
  9437   0029B4  2E46               	decfsz	??_calibration_routine^0,f,c
  9438   0029B6  D7FC               	bra	u5537
  9439   0029B8  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9440   0029BA  D7FA               	bra	u5537
  9441   0029BC  0000               	nop	
  9442   0029BE                     
  9443                           ;color.c: 180:     (cCal->blue) = color_read_Blue();
  9444   0029BE  ECB5  F020         	call	_color_read_Blue	;wreg free
  9445   0029C2  5045               	movf	calibration_routine@cCal^0,w,c
  9446   0029C4  6ED9               	movwf	fsr2l,c
  9447   0029C6  6ADA               	clrf	fsr2h,c
  9448   0029C8  0E04               	movlw	4
  9449   0029CA  26D9               	addwf	fsr2l,f,c
  9450   0029CC  C006  FFDE         	movff	?_color_read_Blue,postinc2
  9451   0029D0  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  9452   0029D4                     
  9453                           ;color.c: 181:     LATAbits.LATA3 = 0;
  9454   0029D4  9679               	bcf	121,3,c	;volatile
  9455   0029D6                     
  9456                           ;color.c: 184:     sprintf(cal_state,"Calibration state =  white", ".");
  9457   0029D6  0E48               	movlw	low calibration_routine@cal_state
  9458   0029D8  6E32               	movwf	sprintf@s^0,c
  9459   0029DA  0E56               	movlw	low STR_7
  9460   0029DC  6E33               	movwf	sprintf@fmt^0,c
  9461   0029DE  0EC3               	movlw	low STR_2
  9462   0029E0  6E34               	movwf	(?_sprintf+2)^0,c
  9463   0029E2  5034               	movf	(?_sprintf+2)^0,w,c
  9464   0029E4  A4D8               	btfss	status,2,c
  9465   0029E6  0E0E               	movlw	high __smallconst
  9466   0029E8  6E35               	movwf	(?_sprintf+3)^0,c
  9467   0029EA  ECF8  F021         	call	_sprintf	;wreg free
  9468   0029EE                     
  9469                           ;color.c: 185:     sendStringSerial4(&cal_state);
  9470   0029EE  0E48               	movlw	low calibration_routine@cal_state
  9471   0029F0  6E03               	movwf	sendStringSerial4@string^0,c
  9472   0029F2  EC58  F023         	call	_sendStringSerial4	;wreg free
  9473   0029F6                     l113:
  9474                           
  9475                           ;color.c: 187:     while(PORTFbits.RF2 == 1){
  9476   0029F6  B48E               	btfsc	142,2,c	;volatile
  9477   0029F8  EF00  F015         	goto	u4901
  9478   0029FC  EF02  F015         	goto	u4900
  9479   002A00                     u4901:
  9480   002A00  EFFB  F014         	goto	l113
  9481   002A04                     u4900:
  9482   002A04                     
  9483                           ;color.c: 190:     LATGbits.LATG0 = 1;
  9484   002A04  807F               	bsf	127,0,c	;volatile
  9485                           
  9486                           ;color.c: 191:     LATEbits.LATE7 = 1;
  9487   002A06  8E7D               	bsf	125,7,c	;volatile
  9488                           
  9489                           ;color.c: 192:     LATAbits.LATA3 = 1;
  9490   002A08  8679               	bsf	121,3,c	;volatile
  9491   002A0A                     
  9492                           ;color.c: 193:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9493   002A0A  0E29               	movlw	41
  9494   002A0C  6E47               	movwf	(??_calibration_routine+1)^0,c
  9495   002A0E  0E96               	movlw	150
  9496   002A10  6E46               	movwf	??_calibration_routine^0,c
  9497   002A12  0E7F               	movlw	127
  9498   002A14                     u5547:
  9499   002A14  2EE8               	decfsz	wreg,f,c
  9500   002A16  D7FE               	bra	u5547
  9501   002A18  2E46               	decfsz	??_calibration_routine^0,f,c
  9502   002A1A  D7FC               	bra	u5547
  9503   002A1C  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9504   002A1E  D7FA               	bra	u5547
  9505   002A20  0000               	nop	
  9506   002A22                     
  9507                           ;color.c: 194:     (cCal->clear) = color_read_Clear();
  9508   002A22  EC8D  F020         	call	_color_read_Clear	;wreg free
  9509   002A26  5045               	movf	calibration_routine@cCal^0,w,c
  9510   002A28  6ED9               	movwf	fsr2l,c
  9511   002A2A  6ADA               	clrf	fsr2h,c
  9512   002A2C  0E06               	movlw	6
  9513   002A2E  26D9               	addwf	fsr2l,f,c
  9514   002A30  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9515   002A34  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9516   002A38                     
  9517                           ;color.c: 195:     LATGbits.LATG0 = 0;
  9518   002A38  907F               	bcf	127,0,c	;volatile
  9519   002A3A                     
  9520                           ;color.c: 196:     LATEbits.LATE7 = 0;
  9521   002A3A  9E7D               	bcf	125,7,c	;volatile
  9522   002A3C                     
  9523                           ;color.c: 197:     LATAbits.LATA3 = 0;
  9524   002A3C  9679               	bcf	121,3,c	;volatile
  9525   002A3E                     
  9526                           ;color.c: 199:     sprintf(cal_state,"Calibration state =  ambient", ".");
  9527   002A3E  0E48               	movlw	low calibration_routine@cal_state
  9528   002A40  6E32               	movwf	sprintf@s^0,c
  9529   002A42  0E1E               	movlw	low STR_9
  9530   002A44  6E33               	movwf	sprintf@fmt^0,c
  9531   002A46  0EC3               	movlw	low STR_2
  9532   002A48  6E34               	movwf	(?_sprintf+2)^0,c
  9533   002A4A  5034               	movf	(?_sprintf+2)^0,w,c
  9534   002A4C  A4D8               	btfss	status,2,c
  9535   002A4E  0E0E               	movlw	high __smallconst
  9536   002A50  6E35               	movwf	(?_sprintf+3)^0,c
  9537   002A52  ECF8  F021         	call	_sprintf	;wreg free
  9538   002A56                     
  9539                           ;color.c: 200:     sendStringSerial4(&cal_state);
  9540   002A56  0E48               	movlw	low calibration_routine@cal_state
  9541   002A58  6E03               	movwf	sendStringSerial4@string^0,c
  9542   002A5A  EC58  F023         	call	_sendStringSerial4	;wreg free
  9543   002A5E                     l116:
  9544                           
  9545                           ;color.c: 202:     while(PORTFbits.RF2 == 1){
  9546   002A5E  B48E               	btfsc	142,2,c	;volatile
  9547   002A60  EF34  F015         	goto	u4911
  9548   002A64  EF36  F015         	goto	u4910
  9549   002A68                     u4911:
  9550   002A68  EF2F  F015         	goto	l116
  9551   002A6C                     u4910:
  9552   002A6C                     
  9553                           ;color.c: 205:     LATGbits.LATG0 = 1;
  9554   002A6C  807F               	bsf	127,0,c	;volatile
  9555                           
  9556                           ;color.c: 206:     LATEbits.LATE7 = 1;
  9557   002A6E  8E7D               	bsf	125,7,c	;volatile
  9558                           
  9559                           ;color.c: 207:     LATAbits.LATA3 = 1;
  9560   002A70  8679               	bsf	121,3,c	;volatile
  9561   002A72                     
  9562                           ;color.c: 208:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9563   002A72  0E29               	movlw	41
  9564   002A74  6E47               	movwf	(??_calibration_routine+1)^0,c
  9565   002A76  0E96               	movlw	150
  9566   002A78  6E46               	movwf	??_calibration_routine^0,c
  9567   002A7A  0E7F               	movlw	127
  9568   002A7C                     u5557:
  9569   002A7C  2EE8               	decfsz	wreg,f,c
  9570   002A7E  D7FE               	bra	u5557
  9571   002A80  2E46               	decfsz	??_calibration_routine^0,f,c
  9572   002A82  D7FC               	bra	u5557
  9573   002A84  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9574   002A86  D7FA               	bra	u5557
  9575   002A88  0000               	nop	
  9576   002A8A                     
  9577                           ;color.c: 209:     (cCal->ambient) = color_read_Clear();
  9578   002A8A  EC8D  F020         	call	_color_read_Clear	;wreg free
  9579   002A8E  5045               	movf	calibration_routine@cCal^0,w,c
  9580   002A90  6ED9               	movwf	fsr2l,c
  9581   002A92  6ADA               	clrf	fsr2h,c
  9582   002A94  0E08               	movlw	8
  9583   002A96  26D9               	addwf	fsr2l,f,c
  9584   002A98  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9585   002A9C  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9586   002AA0                     
  9587                           ;color.c: 210:     LATGbits.LATG0 = 0;
  9588   002AA0  907F               	bcf	127,0,c	;volatile
  9589   002AA2                     
  9590                           ;color.c: 211:     LATEbits.LATE7 = 0;
  9591   002AA2  9E7D               	bcf	125,7,c	;volatile
  9592   002AA4                     
  9593                           ;color.c: 212:     LATAbits.LATA3 = 0;
  9594   002AA4  9679               	bcf	121,3,c	;volatile
  9595   002AA6                     
  9596                           ;color.c: 216:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  9597   002AA6  0E48               	movlw	low calibration_routine@cal_state
  9598   002AA8  6E32               	movwf	sprintf@s^0,c
  9599   002AAA  0E71               	movlw	low STR_11
  9600   002AAC  6E33               	movwf	sprintf@fmt^0,c
  9601   002AAE  0EC3               	movlw	low STR_2
  9602   002AB0  6E34               	movwf	(?_sprintf+2)^0,c
  9603   002AB2  5034               	movf	(?_sprintf+2)^0,w,c
  9604   002AB4  A4D8               	btfss	status,2,c
  9605   002AB6  0E0E               	movlw	high __smallconst
  9606   002AB8  6E35               	movwf	(?_sprintf+3)^0,c
  9607   002ABA  ECF8  F021         	call	_sprintf	;wreg free
  9608   002ABE                     
  9609                           ;color.c: 217:     sendStringSerial4(&cal_state);
  9610   002ABE  0E48               	movlw	low calibration_routine@cal_state
  9611   002AC0  6E03               	movwf	sendStringSerial4@string^0,c
  9612   002AC2  EC58  F023         	call	_sendStringSerial4	;wreg free
  9613   002AC6                     l119:
  9614                           
  9615                           ;color.c: 219:     while(PORTFbits.RF2 == 1){
  9616   002AC6  B48E               	btfsc	142,2,c	;volatile
  9617   002AC8  EF68  F015         	goto	u4921
  9618   002ACC  EF6A  F015         	goto	u4920
  9619   002AD0                     u4921:
  9620   002AD0  EF63  F015         	goto	l119
  9621   002AD4                     u4920:
  9622   002AD4                     
  9623                           ;color.c: 222:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9624   002AD4  0E29               	movlw	41
  9625   002AD6  6E47               	movwf	(??_calibration_routine+1)^0,c
  9626   002AD8  0E96               	movlw	150
  9627   002ADA  6E46               	movwf	??_calibration_routine^0,c
  9628   002ADC  0E7F               	movlw	127
  9629   002ADE                     u5567:
  9630   002ADE  2EE8               	decfsz	wreg,f,c
  9631   002AE0  D7FE               	bra	u5567
  9632   002AE2  2E46               	decfsz	??_calibration_routine^0,f,c
  9633   002AE4  D7FC               	bra	u5567
  9634   002AE6  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9635   002AE8  D7FA               	bra	u5567
  9636   002AEA  0000               	nop	
  9637   002AEC  0012               	return		;funcret
  9638   002AEE                     __end_of_calibration_routine:
  9639                           	callstack 0
  9640                           
  9641 ;; *************** function _sprintf *****************
  9642 ;; Defined at:
  9643 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;  s               1   49[COMRAM] PTR unsigned char 
  9646 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  9647 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9648 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9649 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;  f              12   56[COMRAM] struct _IO_FILE
  9652 ;;  ret             2    0        int 
  9653 ;;  ap              1   55[COMRAM] PTR void [1]
  9654 ;;		 -> ?_sprintf(2), 
  9655 ;; Return value:  Size  Location     Type
  9656 ;;                  2   49[COMRAM] int 
  9657 ;; Registers used:
  9658 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9659 ;; Tracked objects:
  9660 ;;		On entry : 0/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9664 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9665 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9667 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9668 ;;Total ram usage:       19 bytes
  9669 ;; Hardware stack levels used: 1
  9670 ;; Hardware stack levels required when called: 8
  9671 ;; This function calls:
  9672 ;;		_vfprintf
  9673 ;; This function is called by:
  9674 ;;		_calibration_routine
  9675 ;;		_send2USART
  9676 ;;		_ADC2String
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           	psect	text49
  9681   0043F0                     __ptext49:
  9682                           	callstack 0
  9683   0043F0                     _sprintf:
  9684                           	callstack 21
  9685   0043F0  0E34               	movlw	low (?_sprintf+2)
  9686   0043F2  6E38               	movwf	sprintf@ap^0,c
  9687   0043F4  C032  F039         	movff	sprintf@s,sprintf@f
  9688   0043F8  0E00               	movlw	0
  9689   0043FA  6E3D               	movwf	(sprintf@f+4)^0,c
  9690   0043FC  0E00               	movlw	0
  9691   0043FE  6E3C               	movwf	(sprintf@f+3)^0,c
  9692   004400  0E00               	movlw	0
  9693   004402  6E44               	movwf	(sprintf@f+11)^0,c
  9694   004404  0E00               	movlw	0
  9695   004406  6E43               	movwf	(sprintf@f+10)^0,c
  9696   004408  0E39               	movlw	low sprintf@f
  9697   00440A  6E2E               	movwf	vfprintf@fp^0,c
  9698   00440C  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9699   004410  0E38               	movlw	low sprintf@ap
  9700   004412  6E30               	movwf	vfprintf@ap^0,c
  9701   004414  EC43  F021         	call	_vfprintf	;wreg free
  9702   004418  5032               	movf	sprintf@s^0,w,c
  9703   00441A  243C               	addwf	(sprintf@f+3)^0,w,c
  9704   00441C  6ED9               	movwf	fsr2l,c
  9705   00441E  6ADA               	clrf	fsr2h,c
  9706   004420  6ADF               	clrf	indf2,c
  9707   004422  0012               	return		;funcret
  9708   004424                     __end_of_sprintf:
  9709                           	callstack 0
  9710                           
  9711 ;; *************** function _vfprintf *****************
  9712 ;; Defined at:
  9713 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9716 ;;		 -> sprintf@f(12), 
  9717 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9718 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9719 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9720 ;;  ap              1   47[COMRAM] PTR PTR void 
  9721 ;;		 -> sprintf@ap(1), 
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9724 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9725 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9726 ;; Return value:  Size  Location     Type
  9727 ;;                  2   45[COMRAM] int 
  9728 ;; Registers used:
  9729 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9735 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9738 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9739 ;;Total ram usage:        4 bytes
  9740 ;; Hardware stack levels used: 1
  9741 ;; Hardware stack levels required when called: 7
  9742 ;; This function calls:
  9743 ;;		_vfpfcnvrt
  9744 ;; This function is called by:
  9745 ;;		_sprintf
  9746 ;; This function uses a non-reentrant model
  9747 ;;
  9748                           
  9749                           	psect	text50
  9750   004286                     __ptext50:
  9751                           	callstack 0
  9752   004286                     _vfprintf:
  9753                           	callstack 21
  9754   004286                     
  9755                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9756   004286  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9757                           
  9758                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9759   00428A  EF4F  F021         	goto	l5464
  9760   00428E                     l5462:
  9761                           
  9762                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9763   00428E  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9764   004292  0E31               	movlw	low vfprintf@cfmt
  9765   004294  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9766   004296  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9767   00429A  EC51  F016         	call	_vfpfcnvrt	;wreg free
  9768   00429E                     l5464:
  9769                           
  9770                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9771   00429E  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9772   0042A2                     	if	1	;There is more than 1 active tblptr byte
  9773   0042A2  0E0E               	movlw	high __smallconst
  9774   0042A4  6EF7               	movwf	tblptrh,c
  9775   0042A6                     	endif
  9776   0042A6                     	if	0	;tblptru may be non-zero
  9777   0042A6                     	endif
  9778   0042A6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9779   0042A6  0E00               	movlw	low (__smallconst shr (0+16))
  9780   0042A8  6EF8               	movwf	tblptru,c
  9781   0042AA                     	endif
  9782   0042AA  0008               	tblrd		*
  9783   0042AC  50F5               	movf	tablat,w,c
  9784   0042AE  0900               	iorlw	0
  9785   0042B0  A4D8               	btfss	status,2,c
  9786   0042B2  EF5D  F021         	goto	u4861
  9787   0042B6  EF5F  F021         	goto	u4860
  9788   0042BA                     u4861:
  9789   0042BA  EF47  F021         	goto	l5462
  9790   0042BE                     u4860:
  9791   0042BE                     
  9792                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9793   0042BE  0E00               	movlw	0
  9794   0042C0  6E2F               	movwf	(?_vfprintf+1)^0,c
  9795   0042C2  0E00               	movlw	0
  9796   0042C4  6E2E               	movwf	?_vfprintf^0,c
  9797   0042C6  0012               	return		;funcret
  9798   0042C8                     __end_of_vfprintf:
  9799                           	callstack 0
  9800                           
  9801 ;; *************** function _vfpfcnvrt *****************
  9802 ;; Defined at:
  9803 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9806 ;;		 -> sprintf@f(12), 
  9807 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9808 ;;		 -> vfprintf@cfmt(1), 
  9809 ;;  ap              1   36[COMRAM] PTR PTR void 
  9810 ;;		 -> sprintf@ap(1), 
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;  convarg         4   39[COMRAM] struct .
  9813 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9814 ;;		 -> STR_14(12), STR_13(21), STR_11(25), STR_9(29), 
  9815 ;;		 -> STR_7(27), STR_5(27), STR_3(29), STR_1(24), 
  9816 ;;  done            1   43[COMRAM] _Bool 
  9817 ;;  c               1    0        unsigned char 
  9818 ;; Return value:  Size  Location     Type
  9819 ;;                  1    wreg      void 
  9820 ;; Registers used:
  9821 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9822 ;; Tracked objects:
  9823 ;;		On entry : 0/0
  9824 ;;		On exit  : 0/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9827 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9828 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9829 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9830 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9831 ;;Total ram usage:       11 bytes
  9832 ;; Hardware stack levels used: 1
  9833 ;; Hardware stack levels required when called: 6
  9834 ;; This function calls:
  9835 ;;		_dtoa
  9836 ;;		_fputc
  9837 ;;		_read_prec_or_width
  9838 ;; This function is called by:
  9839 ;;		_vfprintf
  9840 ;; This function uses a non-reentrant model
  9841 ;;
  9842                           
  9843                           	psect	text51
  9844   002CA2                     __ptext51:
  9845                           	callstack 0
  9846   002CA2                     _vfpfcnvrt:
  9847                           	callstack 21
  9848   002CA2                     
  9849                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9850   002CA2  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9851   002CA4  6ED9               	movwf	fsr2l,c
  9852   002CA6  6ADA               	clrf	fsr2h,c
  9853   002CA8  CFDF FFF6          	movff	indf2,tblptrl
  9854   002CAC                     	if	1	;There is more than 1 active tblptr byte
  9855   002CAC  0E0E               	movlw	high __smallconst
  9856   002CAE  6EF7               	movwf	tblptrh,c
  9857   002CB0                     	endif
  9858   002CB0                     	if	0	;tblptru may be non-zero
  9859   002CB0                     	endif
  9860   002CB0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9861   002CB0  0E00               	movlw	low (__smallconst shr (0+16))
  9862   002CB2  6EF8               	movwf	tblptru,c
  9863   002CB4                     	endif
  9864   002CB4  0008               	tblrd		*
  9865   002CB6  50F5               	movf	tablat,w,c
  9866   002CB8  0A25               	xorlw	37
  9867   002CBA  A4D8               	btfss	status,2,c
  9868   002CBC  EF62  F016         	goto	u4811
  9869   002CC0  EF64  F016         	goto	u4810
  9870   002CC4                     u4811:
  9871   002CC4  EF01  F017         	goto	l5450
  9872   002CC8                     u4810:
  9873   002CC8                     
  9874                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9875   002CC8  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9876   002CCA  6ED9               	movwf	fsr2l,c
  9877   002CCC  6ADA               	clrf	fsr2h,c
  9878   002CCE  2ADF               	incf	indf2,f,c
  9879   002CD0                     
  9880                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9881   002CD0  0E00               	movlw	0
  9882   002CD2  0100               	movlb	0	; () banked
  9883   002CD4  6FC9               	movwf	(_width+1)& (0+255),b
  9884   002CD6  0E00               	movlw	0
  9885   002CD8  6FC8               	movwf	_width& (0+255),b
  9886   002CDA  C0C8  F0CC         	movff	_width,_flags
  9887   002CDE                     
  9888                           ; BSR set to: 0
  9889                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9890   002CDE  69CA               	setf	_prec& (0+255),b
  9891   002CE0  69CB               	setf	(_prec+1)& (0+255),b
  9892   002CE2                     
  9893                           ; BSR set to: 0
  9894                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9895   002CE2  0E00               	movlw	0
  9896   002CE4  6E2C               	movwf	vfpfcnvrt@done^0,c
  9897                           
  9898                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9899   002CE6  EF9C  F016         	goto	l5424
  9900   002CEA                     l5414:
  9901                           
  9902                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9903   002CEA  0100               	movlb	0	; () banked
  9904   002CEC  83CC               	bsf	_flags& (0+255),1,b
  9905   002CEE                     
  9906                           ; BSR set to: 0
  9907                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9908   002CEE  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9909   002CF0  6ED9               	movwf	fsr2l,c
  9910   002CF2  6ADA               	clrf	fsr2h,c
  9911   002CF4  2ADF               	incf	indf2,f,c
  9912                           
  9913                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9914   002CF6  EF9C  F016         	goto	l5424
  9915   002CFA                     l5418:
  9916                           
  9917                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9918   002CFA  0E01               	movlw	1
  9919   002CFC  6E2C               	movwf	vfpfcnvrt@done^0,c
  9920                           
  9921                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9922   002CFE  EF9C  F016         	goto	l5424
  9923   002D02                     l5422:
  9924   002D02  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9925   002D04  6ED9               	movwf	fsr2l,c
  9926   002D06  6ADA               	clrf	fsr2h,c
  9927   002D08  CFDF FFF6          	movff	indf2,tblptrl
  9928   002D0C                     	if	1	;There is more than 1 active tblptr byte
  9929   002D0C  0E0E               	movlw	high __smallconst
  9930   002D0E  6EF7               	movwf	tblptrh,c
  9931   002D10                     	endif
  9932   002D10                     	if	0	;tblptru may be non-zero
  9933   002D10                     	endif
  9934   002D10                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9935   002D10  0E00               	movlw	low (__smallconst shr (0+16))
  9936   002D12  6EF8               	movwf	tblptru,c
  9937   002D14                     	endif
  9938   002D14  0008               	tblrd		*
  9939   002D16  50F5               	movf	tablat,w,c
  9940   002D18  6E26               	movwf	??_vfpfcnvrt^0,c
  9941   002D1A  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9942                           
  9943                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9944                           ; Switch size 1, requested type "simple"
  9945                           ; Number of cases is 1, Range of values is 0 to 0
  9946                           ; switch strategies available:
  9947                           ; Name         Instructions Cycles
  9948                           ; simple_byte            4     3 (average)
  9949                           ;	Chosen strategy is simple_byte
  9950   002D1C  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9951   002D1E  0A00               	xorlw	0	; case 0
  9952   002D20  B4D8               	btfsc	status,2,c
  9953   002D22  EF95  F016         	goto	l5842
  9954   002D26  EF7D  F016         	goto	l5418
  9955   002D2A                     l5842:
  9956                           
  9957                           ; Switch size 1, requested type "simple"
  9958                           ; Number of cases is 1, Range of values is 48 to 48
  9959                           ; switch strategies available:
  9960                           ; Name         Instructions Cycles
  9961                           ; simple_byte            4     3 (average)
  9962                           ;	Chosen strategy is simple_byte
  9963   002D2A  5026               	movf	??_vfpfcnvrt^0,w,c
  9964   002D2C  0A30               	xorlw	48	; case 48
  9965   002D2E  B4D8               	btfsc	status,2,c
  9966   002D30  EF75  F016         	goto	l5414
  9967   002D34  EF7D  F016         	goto	l5418
  9968   002D38                     l5424:
  9969                           
  9970                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9971   002D38  502C               	movf	vfpfcnvrt@done^0,w,c
  9972   002D3A  B4D8               	btfsc	status,2,c
  9973   002D3C  EFA2  F016         	goto	u4821
  9974   002D40  EFA4  F016         	goto	u4820
  9975   002D44                     u4821:
  9976   002D44  EF81  F016         	goto	l5422
  9977   002D48                     u4820:
  9978   002D48                     
  9979                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9980   002D48  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9981   002D4C  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9982   002D50  EC3A  F01D         	call	_read_prec_or_width	;wreg free
  9983   002D54  C008  F0C8         	movff	?_read_prec_or_width,_width
  9984   002D58  C009  F0C9         	movff	?_read_prec_or_width+1,_width+1
  9985   002D5C                     
  9986                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9987   002D5C  0100               	movlb	0	; () banked
  9988   002D5E  BFC9               	btfsc	(_width+1)& (0+255),7,b
  9989   002D60  EFB6  F016         	goto	u4830
  9990   002D64  EFB4  F016         	goto	u4831
  9991   002D68                     u4831:
  9992   002D68  EFBB  F016         	goto	l5432
  9993   002D6C                     u4830:
  9994   002D6C                     
  9995                           ; BSR set to: 0
  9996                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9997   002D6C  81CC               	bsf	_flags& (0+255),0,b
  9998                           
  9999                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
 10000   002D6E  6DC8               	negf	_width& (0+255),b
 10001   002D70  1FC9               	comf	(_width+1)& (0+255),f,b
 10002   002D72  B0D8               	btfsc	status,0,c
 10003   002D74  2BC9               	incf	(_width+1)& (0+255),f,b
 10004   002D76                     l5432:
 10005                           
 10006                           ; BSR set to: 0
 10007                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
 10008   002D76  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10009   002D78  6ED9               	movwf	fsr2l,c
 10010   002D7A  6ADA               	clrf	fsr2h,c
 10011   002D7C  50DF               	movf	indf2,w,c
 10012   002D7E  6E2D               	movwf	vfpfcnvrt@cp^0,c
 10013   002D80                     
 10014                           ; BSR set to: 0
 10015                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
 10016   002D80  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 10017   002D84                     	if	1	;There is more than 1 active tblptr byte
 10018   002D84  0E0E               	movlw	high __smallconst
 10019   002D86  6EF7               	movwf	tblptrh,c
 10020   002D88                     	endif
 10021   002D88                     	if	0	;tblptru may be non-zero
 10022   002D88                     	endif
 10023   002D88                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10024   002D88  0E00               	movlw	low (__smallconst shr (0+16))
 10025   002D8A  6EF8               	movwf	tblptru,c
 10026   002D8C                     	endif
 10027   002D8C  0008               	tblrd		*
 10028   002D8E  50F5               	movf	tablat,w,c
 10029   002D90  0A64               	xorlw	100
 10030   002D92  B4D8               	btfsc	status,2,c
 10031   002D94  EFCE  F016         	goto	u4841
 10032   002D98  EFD0  F016         	goto	u4840
 10033   002D9C                     u4841:
 10034   002D9C  EFE0  F016         	goto	l5438
 10035   002DA0                     u4840:
 10036   002DA0                     
 10037                           ; BSR set to: 0
 10038   002DA0  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 10039   002DA4                     	if	1	;There is more than 1 active tblptr byte
 10040   002DA4  0E0E               	movlw	high __smallconst
 10041   002DA6  6EF7               	movwf	tblptrh,c
 10042   002DA8                     	endif
 10043   002DA8                     	if	0	;tblptru may be non-zero
 10044   002DA8                     	endif
 10045   002DA8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10046   002DA8  0E00               	movlw	low (__smallconst shr (0+16))
 10047   002DAA  6EF8               	movwf	tblptru,c
 10048   002DAC                     	endif
 10049   002DAC  0008               	tblrd		*
 10050   002DAE  50F5               	movf	tablat,w,c
 10051   002DB0  0A69               	xorlw	105
 10052   002DB2  A4D8               	btfss	status,2,c
 10053   002DB4  EFDE  F016         	goto	u4851
 10054   002DB8  EFE0  F016         	goto	u4850
 10055   002DBC                     u4851:
 10056   002DBC  EFFB  F016         	goto	l5446
 10057   002DC0                     u4850:
 10058   002DC0                     l5438:
 10059                           
 10060                           ; BSR set to: 0
 10061                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
 10062   002DC0  5025               	movf	vfpfcnvrt@ap^0,w,c
 10063   002DC2  6ED9               	movwf	fsr2l,c
 10064   002DC4  6ADA               	clrf	fsr2h,c
 10065   002DC6  0E02               	movlw	2
 10066   002DC8  26DF               	addwf	indf2,f,c
 10067   002DCA  5CDF               	subwf	indf2,w,c
 10068   002DCC  6ED9               	movwf	fsr2l,c
 10069   002DCE  6ADA               	clrf	fsr2h,c
 10070   002DD0  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
 10071   002DD4  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
 10072   002DD8                     
 10073                           ; BSR set to: 0
 10074                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
 10075   002DD8  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10076   002DDA  6ED9               	movwf	fsr2l,c
 10077   002DDC  6ADA               	clrf	fsr2h,c
 10078   002DDE  282D               	incf	vfpfcnvrt@cp^0,w,c
 10079   002DE0  6EDF               	movwf	indf2,c
 10080   002DE2                     
 10081                           ; BSR set to: 0
 10082                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
 10083   002DE2  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
 10084   002DE6  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
 10085   002DEA  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
 10086   002DEE  EC15  F017         	call	_dtoa	;wreg free
 10087   002DF2  EF14  F017         	goto	l1474
 10088   002DF6                     l5446:
 10089                           
 10090                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
 10091   002DF6  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10092   002DF8  6ED9               	movwf	fsr2l,c
 10093   002DFA  6ADA               	clrf	fsr2h,c
 10094   002DFC  2ADF               	incf	indf2,f,c
 10095   002DFE  EF14  F017         	goto	l1474
 10096   002E02                     l5450:
 10097                           
 10098                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
 10099   002E02  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10100   002E04  6ED9               	movwf	fsr2l,c
 10101   002E06  6ADA               	clrf	fsr2h,c
 10102   002E08  CFDF FFF6          	movff	indf2,tblptrl
 10103   002E0C                     	if	1	;There is more than 1 active tblptr byte
 10104   002E0C  0E0E               	movlw	high __smallconst
 10105   002E0E  6EF7               	movwf	tblptrh,c
 10106   002E10                     	endif
 10107   002E10                     	if	0	;tblptru may be non-zero
 10108   002E10                     	endif
 10109   002E10                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10110   002E10  0E00               	movlw	low (__smallconst shr (0+16))
 10111   002E12  6EF8               	movwf	tblptru,c
 10112   002E14                     	endif
 10113   002E14  0008               	tblrd		*
 10114   002E16  50F5               	movf	tablat,w,c
 10115   002E18  6E02               	movwf	fputc@c^0,c
 10116   002E1A  6A03               	clrf	(fputc@c+1)^0,c
 10117   002E1C  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
 10118   002E20  ECE6  F01D         	call	_fputc	;wreg free
 10119   002E24  EFFB  F016         	goto	l5446
 10120   002E28                     l1474:
 10121   002E28  0012               	return		;funcret
 10122   002E2A                     __end_of_vfpfcnvrt:
 10123                           	callstack 0
 10124                           
 10125 ;; *************** function _read_prec_or_width *****************
 10126 ;; Defined at:
 10127 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10128 ;; Parameters:    Size  Location     Type
 10129 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
 10130 ;;		 -> vfprintf@cfmt(1), 
 10131 ;;  ap              1    8[COMRAM] PTR PTR void [1]
 10132 ;;		 -> sprintf@ap(1), 
 10133 ;; Auto vars:     Size  Location     Type
 10134 ;;  c               1    9[COMRAM] unsigned char 
 10135 ;;  n               2   10[COMRAM] int 
 10136 ;; Return value:  Size  Location     Type
 10137 ;;                  2    7[COMRAM] int 
 10138 ;; Registers used:
 10139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10145 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10146 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10148 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10149 ;;Total ram usage:        5 bytes
 10150 ;; Hardware stack levels used: 1
 10151 ;; Hardware stack levels required when called: 2
 10152 ;; This function calls:
 10153 ;;		___wmul
 10154 ;; This function is called by:
 10155 ;;		_vfpfcnvrt
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           	psect	text52
 10160   003A74                     __ptext52:
 10161                           	callstack 0
 10162   003A74                     _read_prec_or_width:
 10163                           	callstack 24
 10164   003A74                     
 10165                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
 10166   003A74  0E00               	movlw	0
 10167   003A76  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10168   003A78  0E00               	movlw	0
 10169   003A7A  6E0B               	movwf	read_prec_or_width@n^0,c
 10170   003A7C                     
 10171                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
 10172   003A7C  5008               	movf	read_prec_or_width@fmt^0,w,c
 10173   003A7E  6ED9               	movwf	fsr2l,c
 10174   003A80  6ADA               	clrf	fsr2h,c
 10175   003A82  CFDF FFF6          	movff	indf2,tblptrl
 10176   003A86                     	if	1	;There is more than 1 active tblptr byte
 10177   003A86  0E0E               	movlw	high __smallconst
 10178   003A88  6EF7               	movwf	tblptrh,c
 10179   003A8A                     	endif
 10180   003A8A                     	if	0	;tblptru may be non-zero
 10181   003A8A                     	endif
 10182   003A8A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10183   003A8A  0E00               	movlw	low (__smallconst shr (0+16))
 10184   003A8C  6EF8               	movwf	tblptru,c
 10185   003A8E                     	endif
 10186   003A8E  0008               	tblrd		*
 10187   003A90  50F5               	movf	tablat,w,c
 10188   003A92  0A2A               	xorlw	42
 10189   003A94  A4D8               	btfss	status,2,c
 10190   003A96  EF4F  F01D         	goto	u2701
 10191   003A9A  EF51  F01D         	goto	u2700
 10192   003A9E                     u2701:
 10193   003A9E  EF77  F01D         	goto	l3644
 10194   003AA2                     u2700:
 10195   003AA2                     
 10196                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
 10197   003AA2  5008               	movf	read_prec_or_width@fmt^0,w,c
 10198   003AA4  6ED9               	movwf	fsr2l,c
 10199   003AA6  6ADA               	clrf	fsr2h,c
 10200   003AA8  2ADF               	incf	indf2,f,c
 10201   003AAA                     
 10202                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
 10203   003AAA  5009               	movf	read_prec_or_width@ap^0,w,c
 10204   003AAC  6ED9               	movwf	fsr2l,c
 10205   003AAE  6ADA               	clrf	fsr2h,c
 10206   003AB0  0E02               	movlw	2
 10207   003AB2  26DF               	addwf	indf2,f,c
 10208   003AB4  5CDF               	subwf	indf2,w,c
 10209   003AB6  6ED9               	movwf	fsr2l,c
 10210   003AB8  6ADA               	clrf	fsr2h,c
 10211   003ABA  CFDE F00B          	movff	postinc2,read_prec_or_width@n
 10212   003ABE  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
 10213                           
 10214                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
 10215   003AC2  EF8C  F01D         	goto	l1455
 10216   003AC6                     l3640:
 10217                           
 10218                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
 10219   003AC6  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
 10220   003ACA  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
 10221   003ACE  0E00               	movlw	0
 10222   003AD0  6E05               	movwf	(___wmul@multiplicand+1)^0,c
 10223   003AD2  0E0A               	movlw	10
 10224   003AD4  6E04               	movwf	___wmul@multiplicand^0,c
 10225   003AD6  ECE2  F023         	call	___wmul	;wreg free
 10226   003ADA  500A               	movf	read_prec_or_width@c^0,w,c
 10227   003ADC  2402               	addwf	?___wmul^0,w,c
 10228   003ADE  6E0B               	movwf	read_prec_or_width@n^0,c
 10229   003AE0  0E00               	movlw	0
 10230   003AE2  2003               	addwfc	(?___wmul+1)^0,w,c
 10231   003AE4  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10232   003AE6                     
 10233                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
 10234   003AE6  5008               	movf	read_prec_or_width@fmt^0,w,c
 10235   003AE8  6ED9               	movwf	fsr2l,c
 10236   003AEA  6ADA               	clrf	fsr2h,c
 10237   003AEC  2ADF               	incf	indf2,f,c
 10238   003AEE                     l3644:
 10239                           
 10240                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
 10241   003AEE  5008               	movf	read_prec_or_width@fmt^0,w,c
 10242   003AF0  6ED9               	movwf	fsr2l,c
 10243   003AF2  6ADA               	clrf	fsr2h,c
 10244   003AF4  CFDF FFF6          	movff	indf2,tblptrl
 10245   003AF8                     	if	1	;There is more than 1 active tblptr byte
 10246   003AF8  0E0E               	movlw	high __smallconst
 10247   003AFA  6EF7               	movwf	tblptrh,c
 10248   003AFC                     	endif
 10249   003AFC                     	if	0	;tblptru may be non-zero
 10250   003AFC                     	endif
 10251   003AFC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10252   003AFC  0E00               	movlw	low (__smallconst shr (0+16))
 10253   003AFE  6EF8               	movwf	tblptru,c
 10254   003B00                     	endif
 10255   003B00  0008               	tblrd		*
 10256   003B02  50F5               	movf	tablat,w,c
 10257   003B04  0FD0               	addlw	208
 10258   003B06  6E0A               	movwf	read_prec_or_width@c^0,c
 10259   003B08  0E09               	movlw	9
 10260   003B0A  640A               	cpfsgt	read_prec_or_width@c^0,c
 10261   003B0C  EF8A  F01D         	goto	u2711
 10262   003B10  EF8C  F01D         	goto	u2710
 10263   003B14                     u2711:
 10264   003B14  EF63  F01D         	goto	l3640
 10265   003B18                     u2710:
 10266   003B18                     l1455:
 10267                           
 10268                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
 10269   003B18  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
 10270   003B1C  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
 10271   003B20  0012               	return		;funcret
 10272   003B22                     __end_of_read_prec_or_width:
 10273                           	callstack 0
 10274                           
 10275 ;; *************** function ___wmul *****************
 10276 ;; Defined at:
 10277 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 10278 ;; Parameters:    Size  Location     Type
 10279 ;;  multiplier      2    1[COMRAM] unsigned int 
 10280 ;;  multiplicand    2    3[COMRAM] unsigned int 
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;  product         2    5[COMRAM] unsigned int 
 10283 ;; Return value:  Size  Location     Type
 10284 ;;                  2    1[COMRAM] unsigned int 
 10285 ;; Registers used:
 10286 ;;		wreg, status,2, status,0, prodl, prodh
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10292 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10293 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10295 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10296 ;;Total ram usage:        6 bytes
 10297 ;; Hardware stack levels used: 1
 10298 ;; Hardware stack levels required when called: 1
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		_setMotorPWM
 10303 ;;		_read_prec_or_width
 10304 ;;		_ADC2String
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           	psect	text53
 10309   0047C4                     __ptext53:
 10310                           	callstack 0
 10311   0047C4                     ___wmul:
 10312                           	callstack 27
 10313   0047C4  5002               	movf	___wmul@multiplier^0,w,c
 10314   0047C6  0204               	mulwf	___wmul@multiplicand^0,c
 10315   0047C8  CFF3 F006          	movff	prodl,___wmul@product
 10316   0047CC  CFF4 F007          	movff	prodh,___wmul@product+1
 10317   0047D0  5002               	movf	___wmul@multiplier^0,w,c
 10318   0047D2  0205               	mulwf	(___wmul@multiplicand+1)^0,c
 10319   0047D4  50F3               	movf	243,w,c
 10320   0047D6  2607               	addwf	(___wmul@product+1)^0,f,c
 10321   0047D8  5003               	movf	(___wmul@multiplier+1)^0,w,c
 10322   0047DA  0204               	mulwf	___wmul@multiplicand^0,c
 10323   0047DC  50F3               	movf	243,w,c
 10324   0047DE  2607               	addwf	(___wmul@product+1)^0,f,c
 10325   0047E0  C006  F002         	movff	___wmul@product,?___wmul
 10326   0047E4  C007  F003         	movff	___wmul@product+1,?___wmul+1
 10327   0047E8  0012               	return		;funcret
 10328   0047EA                     __end_of___wmul:
 10329                           	callstack 0
 10330                           
 10331 ;; *************** function _dtoa *****************
 10332 ;; Defined at:
 10333 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10334 ;; Parameters:    Size  Location     Type
 10335 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
 10336 ;;		 -> sprintf@f(12), 
 10337 ;;  d               2   24[COMRAM] int 
 10338 ;; Auto vars:     Size  Location     Type
 10339 ;;  i               2   32[COMRAM] int 
 10340 ;;  w               2   29[COMRAM] int 
 10341 ;;  s               1   31[COMRAM] unsigned char 
 10342 ;;  p               1   28[COMRAM] _Bool 
 10343 ;; Return value:  Size  Location     Type
 10344 ;;                  1    wreg      void 
 10345 ;; Registers used:
 10346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10347 ;; Tracked objects:
 10348 ;;		On entry : 0/0
 10349 ;;		On exit  : 0/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10352 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10353 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10355 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10356 ;;Total ram usage:       11 bytes
 10357 ;; Hardware stack levels used: 1
 10358 ;; Hardware stack levels required when called: 5
 10359 ;; This function calls:
 10360 ;;		___awdiv
 10361 ;;		___awmod
 10362 ;;		_abs
 10363 ;;		_pad
 10364 ;; This function is called by:
 10365 ;;		_vfpfcnvrt
 10366 ;; This function uses a non-reentrant model
 10367 ;;
 10368                           
 10369                           	psect	text54
 10370   002E2A                     __ptext54:
 10371                           	callstack 0
 10372   002E2A                     _dtoa:
 10373                           	callstack 21
 10374   002E2A                     
 10375                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
 10376   002E2A  0E01               	movlw	1
 10377   002E2C  6E1D               	movwf	dtoa@p^0,c
 10378   002E2E                     
 10379                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
 10380   002E2E  BE1A               	btfsc	(dtoa@d+1)^0,7,c
 10381   002E30  EF1C  F017         	goto	u4711
 10382   002E34  EF1F  F017         	goto	u4710
 10383   002E38                     u4711:
 10384   002E38  0E01               	movlw	1
 10385   002E3A  EF20  F017         	goto	u4720
 10386   002E3E                     u4710:
 10387   002E3E  0E00               	movlw	0
 10388   002E40                     u4720:
 10389   002E40  6E20               	movwf	dtoa@s^0,c
 10390   002E42                     
 10391                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
 10392   002E42  C0C8  F01E         	movff	_width,dtoa@w
 10393   002E46  C0C9  F01F         	movff	_width+1,dtoa@w+1
 10394   002E4A                     
 10395                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
 10396   002E4A  5020               	movf	dtoa@s^0,w,c
 10397   002E4C  B4D8               	btfsc	status,2,c
 10398   002E4E  EF2B  F017         	goto	u4731
 10399   002E52  EF2D  F017         	goto	u4730
 10400   002E56                     u4731:
 10401   002E56  EF44  F017         	goto	l1438
 10402   002E5A                     u4730:
 10403   002E5A                     
 10404                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
 10405   002E5A  061E               	decf	dtoa@w^0,f,c
 10406   002E5C  A0D8               	btfss	status,0,c
 10407   002E5E  061F               	decf	(dtoa@w+1)^0,f,c
 10408   002E60                     
 10409                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
 10410   002E60  5020               	movf	dtoa@s^0,w,c
 10411   002E62  A4D8               	btfss	status,2,c
 10412   002E64  EF36  F017         	goto	u4741
 10413   002E68  EF38  F017         	goto	u4740
 10414   002E6C                     u4741:
 10415   002E6C  EF3E  F017         	goto	l5368
 10416   002E70                     u4740:
 10417   002E70  0E00               	movlw	0
 10418   002E72  6E1C               	movwf	(_dtoa$3088+1)^0,c
 10419   002E74  0E2B               	movlw	43
 10420   002E76  6E1B               	movwf	_dtoa$3088^0,c
 10421   002E78  EF42  F017         	goto	l5370
 10422   002E7C                     l5368:
 10423   002E7C  0E00               	movlw	0
 10424   002E7E  6E1C               	movwf	(_dtoa$3088+1)^0,c
 10425   002E80  0E2D               	movlw	45
 10426   002E82  6E1B               	movwf	_dtoa$3088^0,c
 10427   002E84                     l5370:
 10428   002E84  C01B  F020         	movff	_dtoa$3088,dtoa@s
 10429   002E88                     l1438:
 10430                           
 10431                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
 10432   002E88  0E00               	movlw	0
 10433   002E8A  6E22               	movwf	(dtoa@i+1)^0,c
 10434   002E8C  0E1F               	movlw	31
 10435   002E8E  6E21               	movwf	dtoa@i^0,c
 10436   002E90                     
 10437                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
 10438   002E90  0E00               	movlw	0
 10439   002E92  0101               	movlb	1	; () banked
 10440   002E94  6FB5               	movwf	(_dbuf+31)& (0+255),b
 10441                           
 10442                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10443   002E96  EF7C  F017         	goto	l5384
 10444   002E9A                     l5374:
 10445                           
 10446                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
 10447   002E9A  0621               	decf	dtoa@i^0,f,c
 10448   002E9C  A0D8               	btfss	status,0,c
 10449   002E9E  0622               	decf	(dtoa@i+1)^0,f,c
 10450   002EA0                     
 10451                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
 10452   002EA0  0E96               	movlw	low _dbuf
 10453   002EA2  2421               	addwf	dtoa@i^0,w,c
 10454   002EA4  6ED9               	movwf	fsr2l,c
 10455   002EA6  0E01               	movlw	high _dbuf
 10456   002EA8  2022               	addwfc	(dtoa@i+1)^0,w,c
 10457   002EAA  6EDA               	movwf	fsr2h,c
 10458   002EAC  C019  F002         	movff	dtoa@d,___awmod@dividend
 10459   002EB0  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
 10460   002EB4  0E00               	movlw	0
 10461   002EB6  6E05               	movwf	(___awmod@divisor+1)^0,c
 10462   002EB8  0E0A               	movlw	10
 10463   002EBA  6E04               	movwf	___awmod@divisor^0,c
 10464   002EBC  ECE2  F01C         	call	___awmod	;wreg free
 10465   002EC0  C002  F008         	movff	?___awmod,abs@a
 10466   002EC4  C003  F009         	movff	?___awmod+1,abs@a+1
 10467   002EC8  EC12  F022         	call	_abs	;wreg free
 10468   002ECC  5008               	movf	?_abs^0,w,c
 10469   002ECE  0F30               	addlw	48
 10470   002ED0  6EDF               	movwf	indf2,c
 10471   002ED2                     
 10472                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
 10473   002ED2  0E00               	movlw	0
 10474   002ED4  6E1D               	movwf	dtoa@p^0,c
 10475   002ED6                     
 10476                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
 10477   002ED6  061E               	decf	dtoa@w^0,f,c
 10478   002ED8  A0D8               	btfss	status,0,c
 10479   002EDA  061F               	decf	(dtoa@w+1)^0,f,c
 10480   002EDC                     
 10481                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
 10482   002EDC  C019  F002         	movff	dtoa@d,___awdiv@dividend
 10483   002EE0  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
 10484   002EE4  0E00               	movlw	0
 10485   002EE6  6E05               	movwf	(___awdiv@divisor+1)^0,c
 10486   002EE8  0E0A               	movlw	10
 10487   002EEA  6E04               	movwf	___awdiv@divisor^0,c
 10488   002EEC  EC80  F01C         	call	___awdiv	;wreg free
 10489   002EF0  C002  F019         	movff	?___awdiv,dtoa@d
 10490   002EF4  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
 10491   002EF8                     l5384:
 10492                           
 10493                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10494   002EF8  BE22               	btfsc	(dtoa@i+1)^0,7,c
 10495   002EFA  EF87  F017         	goto	u4751
 10496   002EFE  5022               	movf	(dtoa@i+1)^0,w,c
 10497   002F00  E108               	bnz	u4750
 10498   002F02  0421               	decf	dtoa@i^0,w,c
 10499   002F04  A0D8               	btfss	status,0,c
 10500   002F06  EF87  F017         	goto	u4751
 10501   002F0A  EF89  F017         	goto	u4750
 10502   002F0E                     u4751:
 10503   002F0E  EFAF  F017         	goto	l5394
 10504   002F12                     u4750:
 10505   002F12  5019               	movf	dtoa@d^0,w,c
 10506   002F14  101A               	iorwf	(dtoa@d+1)^0,w,c
 10507   002F16  A4D8               	btfss	status,2,c
 10508   002F18  EF90  F017         	goto	u4761
 10509   002F1C  EF92  F017         	goto	u4760
 10510   002F20                     u4761:
 10511   002F20  EF4D  F017         	goto	l5374
 10512   002F24                     u4760:
 10513   002F24  501D               	movf	dtoa@p^0,w,c
 10514   002F26  A4D8               	btfss	status,2,c
 10515   002F28  EF98  F017         	goto	u4771
 10516   002F2C  EF9A  F017         	goto	u4770
 10517   002F30                     u4771:
 10518   002F30  EF4D  F017         	goto	l5374
 10519   002F34                     u4770:
 10520   002F34  BE1F               	btfsc	(dtoa@w+1)^0,7,c
 10521   002F36  EFA5  F017         	goto	u4781
 10522   002F3A  501F               	movf	(dtoa@w+1)^0,w,c
 10523   002F3C  E108               	bnz	u4780
 10524   002F3E  041E               	decf	dtoa@w^0,w,c
 10525   002F40  A0D8               	btfss	status,0,c
 10526   002F42  EFA5  F017         	goto	u4781
 10527   002F46  EFA7  F017         	goto	u4780
 10528   002F4A                     u4781:
 10529   002F4A  EFAF  F017         	goto	l5394
 10530   002F4E                     u4780:
 10531   002F4E  0100               	movlb	0	; () banked
 10532   002F50  B3CC               	btfsc	_flags& (0+255),1,b
 10533   002F52  EFAD  F017         	goto	u4791
 10534   002F56  EFAF  F017         	goto	u4790
 10535   002F5A                     u4791:
 10536   002F5A  EF4D  F017         	goto	l5374
 10537   002F5E                     u4790:
 10538   002F5E                     l5394:
 10539                           
 10540                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 10541   002F5E  5020               	movf	dtoa@s^0,w,c
 10542   002F60  B4D8               	btfsc	status,2,c
 10543   002F62  EFB5  F017         	goto	u4801
 10544   002F66  EFB7  F017         	goto	u4800
 10545   002F6A                     u4801:
 10546   002F6A  EFC2  F017         	goto	l5400
 10547   002F6E                     u4800:
 10548   002F6E                     
 10549                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 10550   002F6E  0621               	decf	dtoa@i^0,f,c
 10551   002F70  A0D8               	btfss	status,0,c
 10552   002F72  0622               	decf	(dtoa@i+1)^0,f,c
 10553   002F74                     
 10554                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 10555   002F74  0E96               	movlw	low _dbuf
 10556   002F76  2421               	addwf	dtoa@i^0,w,c
 10557   002F78  6ED9               	movwf	fsr2l,c
 10558   002F7A  0E01               	movlw	high _dbuf
 10559   002F7C  2022               	addwfc	(dtoa@i+1)^0,w,c
 10560   002F7E  6EDA               	movwf	fsr2h,c
 10561   002F80  C020  FFDF         	movff	dtoa@s,indf2
 10562   002F84                     l5400:
 10563                           
 10564                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 10565   002F84  C018  F010         	movff	dtoa@fp,pad@fp
 10566   002F88  0E96               	movlw	low _dbuf
 10567   002F8A  2421               	addwf	dtoa@i^0,w,c
 10568   002F8C  6E11               	movwf	pad@buf^0,c
 10569   002F8E  0E01               	movlw	high _dbuf
 10570   002F90  2022               	addwfc	(dtoa@i+1)^0,w,c
 10571   002F92  6E12               	movwf	(pad@buf+1)^0,c
 10572   002F94  C01E  F013         	movff	dtoa@w,pad@p
 10573   002F98  C01F  F014         	movff	dtoa@w+1,pad@p+1
 10574   002F9C  EC3B  F01E         	call	_pad	;wreg free
 10575   002FA0  0012               	return		;funcret
 10576   002FA2                     __end_of_dtoa:
 10577                           	callstack 0
 10578                           
 10579 ;; *************** function _pad *****************
 10580 ;; Defined at:
 10581 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 10584 ;;		 -> sprintf@f(12), 
 10585 ;;  buf             2   16[COMRAM] PTR unsigned char 
 10586 ;;		 -> dbuf(32), 
 10587 ;;  p               2   18[COMRAM] int 
 10588 ;; Auto vars:     Size  Location     Type
 10589 ;;  i               2   21[COMRAM] int 
 10590 ;; Return value:  Size  Location     Type
 10591 ;;                  1    wreg      void 
 10592 ;; Registers used:
 10593 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10594 ;; Tracked objects:
 10595 ;;		On entry : 0/0
 10596 ;;		On exit  : 0/0
 10597 ;;		Unchanged: 0/0
 10598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10599 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10602 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10603 ;;Total ram usage:        8 bytes
 10604 ;; Hardware stack levels used: 1
 10605 ;; Hardware stack levels required when called: 4
 10606 ;; This function calls:
 10607 ;;		_fputc
 10608 ;;		_fputs
 10609 ;; This function is called by:
 10610 ;;		_dtoa
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           	psect	text55
 10615   003C76                     __ptext55:
 10616                           	callstack 0
 10617   003C76                     _pad:
 10618                           	callstack 21
 10619   003C76                     
 10620                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 10621   003C76  0100               	movlb	0	; () banked
 10622   003C78  A1CC               	btfss	_flags& (0+255),0,b
 10623   003C7A  EF41  F01E         	goto	u4671
 10624   003C7E  EF43  F01E         	goto	u4670
 10625   003C82                     u4671:
 10626   003C82  EF4B  F01E         	goto	l5342
 10627   003C86                     u4670:
 10628   003C86                     
 10629                           ; BSR set to: 0
 10630                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 10631   003C86  C011  F00A         	movff	pad@buf,fputs@s
 10632   003C8A  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10633   003C8E  C010  F00C         	movff	pad@fp,fputs@fp
 10634   003C92  EC85  F021         	call	_fputs	;wreg free
 10635   003C96                     l5342:
 10636                           
 10637                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10638   003C96  BE14               	btfsc	(pad@p+1)^0,7,c
 10639   003C98  EF52  F01E         	goto	u4680
 10640   003C9C  EF50  F01E         	goto	u4681
 10641   003CA0                     u4681:
 10642   003CA0  EF56  F01E         	goto	l1430
 10643   003CA4                     u4680:
 10644   003CA4                     
 10645                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10646   003CA4  0E00               	movlw	0
 10647   003CA6  6E14               	movwf	(pad@p+1)^0,c
 10648   003CA8  0E00               	movlw	0
 10649   003CAA  6E13               	movwf	pad@p^0,c
 10650   003CAC                     l1430:
 10651                           
 10652                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10653   003CAC  0E00               	movlw	0
 10654   003CAE  6E17               	movwf	(pad@i+1)^0,c
 10655   003CB0  0E00               	movlw	0
 10656   003CB2  6E16               	movwf	pad@i^0,c
 10657                           
 10658                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10659   003CB4  EF66  F01E         	goto	l5350
 10660   003CB8                     l5346:
 10661                           
 10662                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10663   003CB8  0E00               	movlw	0
 10664   003CBA  6E03               	movwf	(fputc@c+1)^0,c
 10665   003CBC  0E20               	movlw	32
 10666   003CBE  6E02               	movwf	fputc@c^0,c
 10667   003CC0  C010  F004         	movff	pad@fp,fputc@fp
 10668   003CC4  ECE6  F01D         	call	_fputc	;wreg free
 10669   003CC8                     
 10670                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10671   003CC8  4A16               	infsnz	pad@i^0,f,c
 10672   003CCA  2A17               	incf	(pad@i+1)^0,f,c
 10673   003CCC                     l5350:
 10674                           
 10675                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10676   003CCC  5013               	movf	pad@p^0,w,c
 10677   003CCE  5C16               	subwf	pad@i^0,w,c
 10678   003CD0  5017               	movf	(pad@i+1)^0,w,c
 10679   003CD2  0A80               	xorlw	128
 10680   003CD4  6E15               	movwf	??_pad^0,c
 10681   003CD6  5014               	movf	(pad@p+1)^0,w,c
 10682   003CD8  0A80               	xorlw	128
 10683   003CDA  5815               	subwfb	??_pad^0,w,c
 10684   003CDC  A0D8               	btfss	status,0,c
 10685   003CDE  EF73  F01E         	goto	u4691
 10686   003CE2  EF75  F01E         	goto	u4690
 10687   003CE6                     u4691:
 10688   003CE6  EF5C  F01E         	goto	l5346
 10689   003CEA                     u4690:
 10690   003CEA                     
 10691                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10692   003CEA  0100               	movlb	0	; () banked
 10693   003CEC  B1CC               	btfsc	_flags& (0+255),0,b
 10694   003CEE  EF7B  F01E         	goto	u4701
 10695   003CF2  EF7D  F01E         	goto	u4700
 10696   003CF6                     u4701:
 10697   003CF6  EF85  F01E         	goto	l1435
 10698   003CFA                     u4700:
 10699   003CFA                     
 10700                           ; BSR set to: 0
 10701                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10702   003CFA  C011  F00A         	movff	pad@buf,fputs@s
 10703   003CFE  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10704   003D02  C010  F00C         	movff	pad@fp,fputs@fp
 10705   003D06  EC85  F021         	call	_fputs	;wreg free
 10706   003D0A                     l1435:
 10707   003D0A  0012               	return		;funcret
 10708   003D0C                     __end_of_pad:
 10709                           	callstack 0
 10710                           
 10711 ;; *************** function _fputs *****************
 10712 ;; Defined at:
 10713 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10716 ;;		 -> dbuf(32), 
 10717 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10718 ;;		 -> sprintf@f(12), 
 10719 ;; Auto vars:     Size  Location     Type
 10720 ;;  i               2   13[COMRAM] int 
 10721 ;;  c               1   12[COMRAM] unsigned char 
 10722 ;; Return value:  Size  Location     Type
 10723 ;;                  2    9[COMRAM] int 
 10724 ;; Registers used:
 10725 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10726 ;; Tracked objects:
 10727 ;;		On entry : 0/0
 10728 ;;		On exit  : 0/0
 10729 ;;		Unchanged: 0/0
 10730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10731 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10732 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10734 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10735 ;;Total ram usage:        6 bytes
 10736 ;; Hardware stack levels used: 1
 10737 ;; Hardware stack levels required when called: 3
 10738 ;; This function calls:
 10739 ;;		_fputc
 10740 ;; This function is called by:
 10741 ;;		_pad
 10742 ;; This function uses a non-reentrant model
 10743 ;;
 10744                           
 10745                           	psect	text56
 10746   00430A                     __ptext56:
 10747                           	callstack 0
 10748   00430A                     _fputs:
 10749                           	callstack 21
 10750   00430A  0E00               	movlw	0
 10751   00430C  6E0F               	movwf	(fputs@i+1)^0,c
 10752   00430E  0E00               	movlw	0
 10753   004310  6E0E               	movwf	fputs@i^0,c
 10754   004312  EF94  F021         	goto	l5336
 10755   004316                     l5332:
 10756   004316  C00D  F002         	movff	fputs@c,fputc@c
 10757   00431A  6A03               	clrf	(fputc@c+1)^0,c
 10758   00431C  C00C  F004         	movff	fputs@fp,fputc@fp
 10759   004320  ECE6  F01D         	call	_fputc	;wreg free
 10760   004324  4A0E               	infsnz	fputs@i^0,f,c
 10761   004326  2A0F               	incf	(fputs@i+1)^0,f,c
 10762   004328                     l5336:
 10763   004328  500E               	movf	fputs@i^0,w,c
 10764   00432A  240A               	addwf	fputs@s^0,w,c
 10765   00432C  6ED9               	movwf	fsr2l,c
 10766   00432E  500F               	movf	(fputs@i+1)^0,w,c
 10767   004330  200B               	addwfc	(fputs@s+1)^0,w,c
 10768   004332  6EDA               	movwf	fsr2h,c
 10769   004334  50DF               	movf	indf2,w,c
 10770   004336  6E0D               	movwf	fputs@c^0,c
 10771   004338  500D               	movf	fputs@c^0,w,c
 10772   00433A  A4D8               	btfss	status,2,c
 10773   00433C  EFA2  F021         	goto	u4661
 10774   004340  EFA4  F021         	goto	u4660
 10775   004344                     u4661:
 10776   004344  EF8B  F021         	goto	l5332
 10777   004348                     u4660:
 10778   004348  0012               	return		;funcret
 10779   00434A                     __end_of_fputs:
 10780                           	callstack 0
 10781                           
 10782 ;; *************** function _fputc *****************
 10783 ;; Defined at:
 10784 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;  c               2    1[COMRAM] int 
 10787 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10788 ;;		 -> sprintf@f(12), 
 10789 ;; Auto vars:     Size  Location     Type
 10790 ;;		None
 10791 ;; Return value:  Size  Location     Type
 10792 ;;                  2    1[COMRAM] int 
 10793 ;; Registers used:
 10794 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10795 ;; Tracked objects:
 10796 ;;		On entry : 0/0
 10797 ;;		On exit  : 0/0
 10798 ;;		Unchanged: 0/0
 10799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10800 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10802 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10803 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10804 ;;Total ram usage:        8 bytes
 10805 ;; Hardware stack levels used: 1
 10806 ;; Hardware stack levels required when called: 2
 10807 ;; This function calls:
 10808 ;;		_putch
 10809 ;; This function is called by:
 10810 ;;		_pad
 10811 ;;		_vfpfcnvrt
 10812 ;;		_fputs
 10813 ;; This function uses a non-reentrant model
 10814 ;;
 10815                           
 10816                           	psect	text57
 10817   003BCC                     __ptext57:
 10818                           	callstack 0
 10819   003BCC                     _fputc:
 10820                           	callstack 24
 10821   003BCC  5004               	movf	fputc@fp^0,w,c
 10822   003BCE  B4D8               	btfsc	status,2,c
 10823   003BD0  EFEC  F01D         	goto	u2351
 10824   003BD4  EFEE  F01D         	goto	u2350
 10825   003BD8                     u2351:
 10826   003BD8  EFF6  F01D         	goto	l3436
 10827   003BDC                     u2350:
 10828   003BDC  5004               	movf	fputc@fp^0,w,c
 10829   003BDE  A4D8               	btfss	status,2,c
 10830   003BE0  EFF4  F01D         	goto	u2361
 10831   003BE4  EFF6  F01D         	goto	u2360
 10832   003BE8                     u2361:
 10833   003BE8  EFFB  F01D         	goto	l3438
 10834   003BEC                     u2360:
 10835   003BEC                     l3436:
 10836   003BEC  5002               	movf	fputc@c^0,w,c
 10837   003BEE  EC51  F024         	call	_putch
 10838   003BF2  EF3A  F01E         	goto	l1499
 10839   003BF6                     l3438:
 10840   003BF6  5004               	movf	fputc@fp^0,w,c
 10841   003BF8  6ED9               	movwf	fsr2l,c
 10842   003BFA  6ADA               	clrf	fsr2h,c
 10843   003BFC  0E0A               	movlw	10
 10844   003BFE  26D9               	addwf	fsr2l,f,c
 10845   003C00  50DE               	movf	postinc2,w,c
 10846   003C02  10DE               	iorwf	postinc2,w,c
 10847   003C04  B4D8               	btfsc	status,2,c
 10848   003C06  EF07  F01E         	goto	u2371
 10849   003C0A  EF09  F01E         	goto	u2370
 10850   003C0E                     u2371:
 10851   003C0E  EF22  F01E         	goto	l3442
 10852   003C12                     u2370:
 10853   003C12  5004               	movf	fputc@fp^0,w,c
 10854   003C14  6ED9               	movwf	fsr2l,c
 10855   003C16  6ADA               	clrf	fsr2h,c
 10856   003C18  0E0A               	movlw	10
 10857   003C1A  26D9               	addwf	fsr2l,f,c
 10858   003C1C  5004               	movf	fputc@fp^0,w,c
 10859   003C1E  6EE1               	movwf	fsr1l,c
 10860   003C20  6AE2               	clrf	fsr1h,c
 10861   003C22  0E03               	movlw	3
 10862   003C24  26E1               	addwf	fsr1l,f,c
 10863   003C26  50DE               	movf	postinc2,w,c
 10864   003C28  5CE6               	subwf	postinc1,w,c
 10865   003C2A  50E6               	movf	postinc1,w,c
 10866   003C2C  0A80               	xorlw	128
 10867   003C2E  6E09               	movwf	(??_fputc+4)^0,c
 10868   003C30  50DE               	movf	postinc2,w,c
 10869   003C32  0A80               	xorlw	128
 10870   003C34  5809               	subwfb	(??_fputc+4)^0,w,c
 10871   003C36  B0D8               	btfsc	status,0,c
 10872   003C38  EF20  F01E         	goto	u2381
 10873   003C3C  EF22  F01E         	goto	u2380
 10874   003C40                     u2381:
 10875   003C40  EF3A  F01E         	goto	l1499
 10876   003C44                     u2380:
 10877   003C44                     l3442:
 10878   003C44  5004               	movf	fputc@fp^0,w,c
 10879   003C46  6ED9               	movwf	fsr2l,c
 10880   003C48  6ADA               	clrf	fsr2h,c
 10881   003C4A  0E03               	movlw	3
 10882   003C4C  26D9               	addwf	fsr2l,f,c
 10883   003C4E  50DF               	movf	indf2,w,c
 10884   003C50  6E05               	movwf	??_fputc^0,c
 10885   003C52  5004               	movf	fputc@fp^0,w,c
 10886   003C54  6ED9               	movwf	fsr2l,c
 10887   003C56  6ADA               	clrf	fsr2h,c
 10888   003C58  50DF               	movf	indf2,w,c
 10889   003C5A  2405               	addwf	??_fputc^0,w,c
 10890   003C5C  6ED9               	movwf	fsr2l,c
 10891   003C5E  6ADA               	clrf	fsr2h,c
 10892   003C60  C002  FFDF         	movff	fputc@c,indf2
 10893   003C64  5004               	movf	fputc@fp^0,w,c
 10894   003C66  6ED9               	movwf	fsr2l,c
 10895   003C68  6ADA               	clrf	fsr2h,c
 10896   003C6A  0E03               	movlw	3
 10897   003C6C  26D9               	addwf	fsr2l,f,c
 10898   003C6E  2ADE               	incf	postinc2,f,c
 10899   003C70  0E00               	movlw	0
 10900   003C72  22DD               	addwfc	postdec2,f,c
 10901   003C74                     l1499:
 10902   003C74  0012               	return		;funcret
 10903   003C76                     __end_of_fputc:
 10904                           	callstack 0
 10905                           
 10906 ;; *************** function _putch *****************
 10907 ;; Defined at:
 10908 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10909 ;; Parameters:    Size  Location     Type
 10910 ;;  c               1    wreg     unsigned char 
 10911 ;; Auto vars:     Size  Location     Type
 10912 ;;  c               1    0[COMRAM] unsigned char 
 10913 ;; Return value:  Size  Location     Type
 10914 ;;                  1    wreg      void 
 10915 ;; Registers used:
 10916 ;;		wreg
 10917 ;; Tracked objects:
 10918 ;;		On entry : 0/0
 10919 ;;		On exit  : 0/0
 10920 ;;		Unchanged: 0/0
 10921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10926 ;;Total ram usage:        0 bytes
 10927 ;; Hardware stack levels used: 1
 10928 ;; Hardware stack levels required when called: 1
 10929 ;; This function calls:
 10930 ;;		Nothing
 10931 ;; This function is called by:
 10932 ;;		_fputc
 10933 ;; This function uses a non-reentrant model
 10934 ;;
 10935                           
 10936                           	psect	text58
 10937   0048A2                     __ptext58:
 10938                           	callstack 0
 10939   0048A2                     _putch:
 10940                           	callstack 24
 10941   0048A2  0012               	return		;funcret
 10942   0048A4                     __end_of_putch:
 10943                           	callstack 0
 10944                           
 10945 ;; *************** function _abs *****************
 10946 ;; Defined at:
 10947 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;  a               2    7[COMRAM] int 
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;		None
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  2    7[COMRAM] int 
 10954 ;; Registers used:
 10955 ;;		wreg, status,2, status,0
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10961 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10963 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10964 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10965 ;;Total ram usage:        4 bytes
 10966 ;; Hardware stack levels used: 1
 10967 ;; Hardware stack levels required when called: 1
 10968 ;; This function calls:
 10969 ;;		Nothing
 10970 ;; This function is called by:
 10971 ;;		_dtoa
 10972 ;; This function uses a non-reentrant model
 10973 ;;
 10974                           
 10975                           	psect	text59
 10976   004424                     __ptext59:
 10977                           	callstack 0
 10978   004424                     _abs:
 10979                           	callstack 24
 10980   004424  BE09               	btfsc	(abs@a+1)^0,7,c
 10981   004426  EF17  F022         	goto	u2561
 10982   00442A  EF19  F022         	goto	u2560
 10983   00442E                     u2561:
 10984   00442E  EF1F  F022         	goto	l1484
 10985   004432                     u2560:
 10986   004432  C008  F008         	movff	abs@a,?_abs
 10987   004436  C009  F009         	movff	abs@a+1,?_abs+1
 10988   00443A  EF2B  F022         	goto	l1487
 10989   00443E                     l1484:
 10990   00443E  C008  F00A         	movff	abs@a,??_abs
 10991   004442  C009  F00B         	movff	abs@a+1,??_abs+1
 10992   004446  1E0A               	comf	??_abs^0,f,c
 10993   004448  1E0B               	comf	(??_abs+1)^0,f,c
 10994   00444A  4A0A               	infsnz	??_abs^0,f,c
 10995   00444C  2A0B               	incf	(??_abs+1)^0,f,c
 10996   00444E  C00A  F008         	movff	??_abs,?_abs
 10997   004452  C00B  F009         	movff	??_abs+1,?_abs+1
 10998   004456                     l1487:
 10999   004456  0012               	return		;funcret
 11000   004458                     __end_of_abs:
 11001                           	callstack 0
 11002                           
 11003 ;; *************** function ___awmod *****************
 11004 ;; Defined at:
 11005 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;  dividend        2    1[COMRAM] int 
 11008 ;;  divisor         2    3[COMRAM] int 
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;  sign            1    6[COMRAM] unsigned char 
 11011 ;;  counter         1    5[COMRAM] unsigned char 
 11012 ;; Return value:  Size  Location     Type
 11013 ;;                  2    1[COMRAM] int 
 11014 ;; Registers used:
 11015 ;;		wreg, status,2, status,0
 11016 ;; Tracked objects:
 11017 ;;		On entry : 0/0
 11018 ;;		On exit  : 0/0
 11019 ;;		Unchanged: 0/0
 11020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11021 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11024 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11025 ;;Total ram usage:        6 bytes
 11026 ;; Hardware stack levels used: 1
 11027 ;; Hardware stack levels required when called: 1
 11028 ;; This function calls:
 11029 ;;		Nothing
 11030 ;; This function is called by:
 11031 ;;		_dtoa
 11032 ;; This function uses a non-reentrant model
 11033 ;;
 11034                           
 11035                           	psect	text60
 11036   0039C4                     __ptext60:
 11037                           	callstack 0
 11038   0039C4                     ___awmod:
 11039                           	callstack 24
 11040   0039C4  0E00               	movlw	0
 11041   0039C6  6E07               	movwf	___awmod@sign^0,c
 11042   0039C8  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 11043   0039CA  EFEB  F01C         	goto	u2460
 11044   0039CE  EFE9  F01C         	goto	u2461
 11045   0039D2                     u2461:
 11046   0039D2  EFF1  F01C         	goto	l3512
 11047   0039D6                     u2460:
 11048   0039D6  6C02               	negf	___awmod@dividend^0,c
 11049   0039D8  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11050   0039DA  B0D8               	btfsc	status,0,c
 11051   0039DC  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11052   0039DE  0E01               	movlw	1
 11053   0039E0  6E07               	movwf	___awmod@sign^0,c
 11054   0039E2                     l3512:
 11055   0039E2  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 11056   0039E4  EFF8  F01C         	goto	u2470
 11057   0039E8  EFF6  F01C         	goto	u2471
 11058   0039EC                     u2471:
 11059   0039EC  EFFC  F01C         	goto	l3516
 11060   0039F0                     u2470:
 11061   0039F0  6C04               	negf	___awmod@divisor^0,c
 11062   0039F2  1E05               	comf	(___awmod@divisor+1)^0,f,c
 11063   0039F4  B0D8               	btfsc	status,0,c
 11064   0039F6  2A05               	incf	(___awmod@divisor+1)^0,f,c
 11065   0039F8                     l3516:
 11066   0039F8  5004               	movf	___awmod@divisor^0,w,c
 11067   0039FA  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 11068   0039FC  B4D8               	btfsc	status,2,c
 11069   0039FE  EF03  F01D         	goto	u2481
 11070   003A02  EF05  F01D         	goto	u2480
 11071   003A06                     u2481:
 11072   003A06  EF29  F01D         	goto	l3532
 11073   003A0A                     u2480:
 11074   003A0A  0E01               	movlw	1
 11075   003A0C  6E06               	movwf	___awmod@counter^0,c
 11076   003A0E  EF0D  F01D         	goto	l3522
 11077   003A12                     l3520:
 11078   003A12  90D8               	bcf	status,0,c
 11079   003A14  3604               	rlcf	___awmod@divisor^0,f,c
 11080   003A16  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 11081   003A18  2A06               	incf	___awmod@counter^0,f,c
 11082   003A1A                     l3522:
 11083   003A1A  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 11084   003A1C  EF12  F01D         	goto	u2491
 11085   003A20  EF14  F01D         	goto	u2490
 11086   003A24                     u2491:
 11087   003A24  EF09  F01D         	goto	l3520
 11088   003A28                     u2490:
 11089   003A28                     l3524:
 11090   003A28  5004               	movf	___awmod@divisor^0,w,c
 11091   003A2A  5C02               	subwf	___awmod@dividend^0,w,c
 11092   003A2C  5005               	movf	(___awmod@divisor+1)^0,w,c
 11093   003A2E  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 11094   003A30  A0D8               	btfss	status,0,c
 11095   003A32  EF1D  F01D         	goto	u2501
 11096   003A36  EF1F  F01D         	goto	u2500
 11097   003A3A                     u2501:
 11098   003A3A  EF23  F01D         	goto	l3528
 11099   003A3E                     u2500:
 11100   003A3E  5004               	movf	___awmod@divisor^0,w,c
 11101   003A40  5E02               	subwf	___awmod@dividend^0,f,c
 11102   003A42  5005               	movf	(___awmod@divisor+1)^0,w,c
 11103   003A44  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 11104   003A46                     l3528:
 11105   003A46  90D8               	bcf	status,0,c
 11106   003A48  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 11107   003A4A  3204               	rrcf	___awmod@divisor^0,f,c
 11108   003A4C  2E06               	decfsz	___awmod@counter^0,f,c
 11109   003A4E  EF14  F01D         	goto	l3524
 11110   003A52                     l3532:
 11111   003A52  5007               	movf	___awmod@sign^0,w,c
 11112   003A54  B4D8               	btfsc	status,2,c
 11113   003A56  EF2F  F01D         	goto	u2511
 11114   003A5A  EF31  F01D         	goto	u2510
 11115   003A5E                     u2511:
 11116   003A5E  EF35  F01D         	goto	l3536
 11117   003A62                     u2510:
 11118   003A62  6C02               	negf	___awmod@dividend^0,c
 11119   003A64  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11120   003A66  B0D8               	btfsc	status,0,c
 11121   003A68  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11122   003A6A                     l3536:
 11123   003A6A  C002  F002         	movff	___awmod@dividend,?___awmod
 11124   003A6E  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 11125   003A72  0012               	return		;funcret
 11126   003A74                     __end_of___awmod:
 11127                           	callstack 0
 11128                           
 11129 ;; *************** function ___awdiv *****************
 11130 ;; Defined at:
 11131 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 11132 ;; Parameters:    Size  Location     Type
 11133 ;;  dividend        2    1[COMRAM] int 
 11134 ;;  divisor         2    3[COMRAM] int 
 11135 ;; Auto vars:     Size  Location     Type
 11136 ;;  quotient        2    7[COMRAM] int 
 11137 ;;  sign            1    6[COMRAM] unsigned char 
 11138 ;;  counter         1    5[COMRAM] unsigned char 
 11139 ;; Return value:  Size  Location     Type
 11140 ;;                  2    1[COMRAM] int 
 11141 ;; Registers used:
 11142 ;;		wreg, status,2, status,0
 11143 ;; Tracked objects:
 11144 ;;		On entry : 0/0
 11145 ;;		On exit  : 0/0
 11146 ;;		Unchanged: 0/0
 11147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11149 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11151 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11152 ;;Total ram usage:        8 bytes
 11153 ;; Hardware stack levels used: 1
 11154 ;; Hardware stack levels required when called: 1
 11155 ;; This function calls:
 11156 ;;		Nothing
 11157 ;; This function is called by:
 11158 ;;		_dtoa
 11159 ;; This function uses a non-reentrant model
 11160 ;;
 11161                           
 11162                           	psect	text61
 11163   003900                     __ptext61:
 11164                           	callstack 0
 11165   003900                     ___awdiv:
 11166                           	callstack 24
 11167   003900  0E00               	movlw	0
 11168   003902  6E07               	movwf	___awdiv@sign^0,c
 11169   003904  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 11170   003906  EF89  F01C         	goto	u2400
 11171   00390A  EF87  F01C         	goto	u2401
 11172   00390E                     u2401:
 11173   00390E  EF8F  F01C         	goto	l3468
 11174   003912                     u2400:
 11175   003912  6C04               	negf	___awdiv@divisor^0,c
 11176   003914  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 11177   003916  B0D8               	btfsc	status,0,c
 11178   003918  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 11179   00391A  0E01               	movlw	1
 11180   00391C  6E07               	movwf	___awdiv@sign^0,c
 11181   00391E                     l3468:
 11182   00391E  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 11183   003920  EF96  F01C         	goto	u2410
 11184   003924  EF94  F01C         	goto	u2411
 11185   003928                     u2411:
 11186   003928  EF9C  F01C         	goto	l3474
 11187   00392C                     u2410:
 11188   00392C  6C02               	negf	___awdiv@dividend^0,c
 11189   00392E  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 11190   003930  B0D8               	btfsc	status,0,c
 11191   003932  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 11192   003934  0E01               	movlw	1
 11193   003936  1A07               	xorwf	___awdiv@sign^0,f,c
 11194   003938                     l3474:
 11195   003938  0E00               	movlw	0
 11196   00393A  6E09               	movwf	(___awdiv@quotient+1)^0,c
 11197   00393C  0E00               	movlw	0
 11198   00393E  6E08               	movwf	___awdiv@quotient^0,c
 11199   003940  5004               	movf	___awdiv@divisor^0,w,c
 11200   003942  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 11201   003944  B4D8               	btfsc	status,2,c
 11202   003946  EFA7  F01C         	goto	u2421
 11203   00394A  EFA9  F01C         	goto	u2420
 11204   00394E                     u2421:
 11205   00394E  EFD1  F01C         	goto	l3496
 11206   003952                     u2420:
 11207   003952  0E01               	movlw	1
 11208   003954  6E06               	movwf	___awdiv@counter^0,c
 11209   003956  EFB1  F01C         	goto	l3482
 11210   00395A                     l3480:
 11211   00395A  90D8               	bcf	status,0,c
 11212   00395C  3604               	rlcf	___awdiv@divisor^0,f,c
 11213   00395E  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 11214   003960  2A06               	incf	___awdiv@counter^0,f,c
 11215   003962                     l3482:
 11216   003962  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 11217   003964  EFB6  F01C         	goto	u2431
 11218   003968  EFB8  F01C         	goto	u2430
 11219   00396C                     u2431:
 11220   00396C  EFAD  F01C         	goto	l3480
 11221   003970                     u2430:
 11222   003970                     l3484:
 11223   003970  90D8               	bcf	status,0,c
 11224   003972  3608               	rlcf	___awdiv@quotient^0,f,c
 11225   003974  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 11226   003976  5004               	movf	___awdiv@divisor^0,w,c
 11227   003978  5C02               	subwf	___awdiv@dividend^0,w,c
 11228   00397A  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11229   00397C  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 11230   00397E  A0D8               	btfss	status,0,c
 11231   003980  EFC4  F01C         	goto	u2441
 11232   003984  EFC6  F01C         	goto	u2440
 11233   003988                     u2441:
 11234   003988  EFCB  F01C         	goto	l3492
 11235   00398C                     u2440:
 11236   00398C  5004               	movf	___awdiv@divisor^0,w,c
 11237   00398E  5E02               	subwf	___awdiv@dividend^0,f,c
 11238   003990  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11239   003992  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 11240   003994  8008               	bsf	___awdiv@quotient^0,0,c
 11241   003996                     l3492:
 11242   003996  90D8               	bcf	status,0,c
 11243   003998  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 11244   00399A  3204               	rrcf	___awdiv@divisor^0,f,c
 11245   00399C  2E06               	decfsz	___awdiv@counter^0,f,c
 11246   00399E  EFB8  F01C         	goto	l3484
 11247   0039A2                     l3496:
 11248   0039A2  5007               	movf	___awdiv@sign^0,w,c
 11249   0039A4  B4D8               	btfsc	status,2,c
 11250   0039A6  EFD7  F01C         	goto	u2451
 11251   0039AA  EFD9  F01C         	goto	u2450
 11252   0039AE                     u2451:
 11253   0039AE  EFDD  F01C         	goto	l3500
 11254   0039B2                     u2450:
 11255   0039B2  6C08               	negf	___awdiv@quotient^0,c
 11256   0039B4  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 11257   0039B6  B0D8               	btfsc	status,0,c
 11258   0039B8  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 11259   0039BA                     l3500:
 11260   0039BA  C008  F002         	movff	___awdiv@quotient,?___awdiv
 11261   0039BE  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 11262   0039C2  0012               	return		;funcret
 11263   0039C4                     __end_of___awdiv:
 11264                           	callstack 0
 11265                           
 11266 ;; *************** function _sendStringSerial4 *****************
 11267 ;; Defined at:
 11268 ;;		line 41 in file "serial.c"
 11269 ;; Parameters:    Size  Location     Type
 11270 ;;  string          1    2[COMRAM] PTR unsigned char 
 11271 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 11272 ;; Auto vars:     Size  Location     Type
 11273 ;;		None
 11274 ;; Return value:  Size  Location     Type
 11275 ;;                  1    wreg      void 
 11276 ;; Registers used:
 11277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11283 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11286 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11287 ;;Total ram usage:        1 bytes
 11288 ;; Hardware stack levels used: 1
 11289 ;; Hardware stack levels required when called: 2
 11290 ;; This function calls:
 11291 ;;		_sendCharSerial4
 11292 ;; This function is called by:
 11293 ;;		_calibration_routine
 11294 ;;		_send2USART
 11295 ;;		_sendAllReadings
 11296 ;; This function uses a non-reentrant model
 11297 ;;
 11298                           
 11299                           	psect	text62
 11300   0046B0                     __ptext62:
 11301                           	callstack 0
 11302   0046B0                     _sendStringSerial4:
 11303                           	callstack 27
 11304   0046B0                     
 11305                           ;serial.c: 44:     while(*string != 0){
 11306   0046B0  EF65  F023         	goto	l4296
 11307   0046B4                     l4290:
 11308                           
 11309                           ;serial.c: 46:   sendCharSerial4(*string++);
 11310   0046B4  5003               	movf	sendStringSerial4@string^0,w,c
 11311   0046B6  6ED9               	movwf	fsr2l,c
 11312   0046B8  6ADA               	clrf	fsr2h,c
 11313   0046BA  50DF               	movf	indf2,w,c
 11314   0046BC  EC30  F024         	call	_sendCharSerial4
 11315   0046C0  2A03               	incf	sendStringSerial4@string^0,f,c
 11316   0046C2                     
 11317                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 11318   0046C2  0E6A               	movlw	106
 11319   0046C4                     u5577:
 11320   0046C4  2EE8               	decfsz	wreg,f,c
 11321   0046C6  D7FE               	bra	u5577
 11322   0046C8  D000               	nop2	
 11323   0046CA                     l4296:
 11324                           
 11325                           ;serial.c: 44:     while(*string != 0){
 11326   0046CA  5003               	movf	sendStringSerial4@string^0,w,c
 11327   0046CC  6ED9               	movwf	fsr2l,c
 11328   0046CE  6ADA               	clrf	fsr2h,c
 11329   0046D0  50DF               	movf	indf2,w,c
 11330   0046D2  A4D8               	btfss	status,2,c
 11331   0046D4  EF6E  F023         	goto	u3671
 11332   0046D8  EF70  F023         	goto	u3670
 11333   0046DC                     u3671:
 11334   0046DC  EF5A  F023         	goto	l4290
 11335   0046E0                     u3670:
 11336   0046E0  0012               	return		;funcret
 11337   0046E2                     __end_of_sendStringSerial4:
 11338                           	callstack 0
 11339                           
 11340 ;; *************** function _sendCharSerial4 *****************
 11341 ;; Defined at:
 11342 ;;		line 35 in file "serial.c"
 11343 ;; Parameters:    Size  Location     Type
 11344 ;;  charToSend      1    wreg     unsigned char 
 11345 ;; Auto vars:     Size  Location     Type
 11346 ;;  charToSend      1    1[COMRAM] unsigned char 
 11347 ;; Return value:  Size  Location     Type
 11348 ;;                  1    wreg      void 
 11349 ;; Registers used:
 11350 ;;		wreg
 11351 ;; Tracked objects:
 11352 ;;		On entry : 0/0
 11353 ;;		On exit  : 0/0
 11354 ;;		Unchanged: 0/0
 11355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11357 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11359 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11360 ;;Total ram usage:        1 bytes
 11361 ;; Hardware stack levels used: 1
 11362 ;; Hardware stack levels required when called: 1
 11363 ;; This function calls:
 11364 ;;		Nothing
 11365 ;; This function is called by:
 11366 ;;		_sendStringSerial4
 11367 ;; This function uses a non-reentrant model
 11368 ;;
 11369                           
 11370                           	psect	text63
 11371   004860                     __ptext63:
 11372                           	callstack 0
 11373   004860                     _sendCharSerial4:
 11374                           	callstack 27
 11375                           
 11376                           ;incstack = 0
 11377                           ;sendCharSerial4@charToSend stored from wreg
 11378   004860  6E02               	movwf	sendCharSerial4@charToSend^0,c
 11379   004862                     l554:
 11380   004862  010E               	movlb	14	; () banked
 11381   004864  A537               	btfss	55,2,b	;volatile
 11382   004866  EF37  F024         	goto	u2881
 11383   00486A  EF39  F024         	goto	u2880
 11384   00486E                     u2881:
 11385   00486E  EF31  F024         	goto	l554
 11386   004872                     u2880:
 11387   004872                     
 11388                           ; BSR set to: 14
 11389                           ;serial.c: 37:     TX4REG = charToSend;
 11390   004872  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 11391   004876                     
 11392                           ; BSR set to: 14
 11393   004876  0012               	return		;funcret
 11394   004878                     __end_of_sendCharSerial4:
 11395                           	callstack 0
 11396                           
 11397 ;; *************** function _color_read_Red *****************
 11398 ;; Defined at:
 11399 ;;		line 33 in file "color.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;		None
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;  tmp             2   10[COMRAM] unsigned int 
 11404 ;; Return value:  Size  Location     Type
 11405 ;;                  2    5[COMRAM] unsigned int 
 11406 ;; Registers used:
 11407 ;;		wreg, status,2, status,0, cstack
 11408 ;; Tracked objects:
 11409 ;;		On entry : 0/0
 11410 ;;		On exit  : 0/0
 11411 ;;		Unchanged: 0/0
 11412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11413 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11414 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11415 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11416 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11417 ;;Total ram usage:        7 bytes
 11418 ;; Hardware stack levels used: 1
 11419 ;; Hardware stack levels required when called: 3
 11420 ;; This function calls:
 11421 ;;		_I2C_2_Master_Read
 11422 ;;		_I2C_2_Master_RepStart
 11423 ;;		_I2C_2_Master_Start
 11424 ;;		_I2C_2_Master_Stop
 11425 ;;		_I2C_2_Master_Write
 11426 ;; This function is called by:
 11427 ;;		_reading_hue
 11428 ;;		_calibration_routine
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text64
 11433   00407A                     __ptext64:
 11434                           	callstack 0
 11435   00407A                     _color_read_Red:
 11436                           	callstack 26
 11437   00407A                     
 11438                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
 11439   00407A  EC47  F024         	call	_I2C_2_Master_Start	;wreg free
 11440                           
 11441                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 11442   00407E  0E52               	movlw	82
 11443   004080  EC3C  F024         	call	_I2C_2_Master_Write
 11444                           
 11445                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 11446   004084  0EB6               	movlw	182
 11447   004086  EC3C  F024         	call	_I2C_2_Master_Write
 11448                           
 11449                           ;color.c: 39:  I2C_2_Master_RepStart();
 11450   00408A  EC4C  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11451                           
 11452                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 11453   00408E  0E53               	movlw	83
 11454   004090  EC3C  F024         	call	_I2C_2_Master_Write
 11455                           
 11456                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
 11457   004094  0E01               	movlw	1
 11458   004096  EC64  F021         	call	_I2C_2_Master_Read
 11459   00409A  6E08               	movwf	??_color_read_Red^0,c
 11460   00409C  5008               	movf	??_color_read_Red^0,w,c
 11461   00409E  6E0B               	movwf	color_read_Red@tmp^0,c
 11462   0040A0  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 11463                           
 11464                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11465   0040A2  0E00               	movlw	0
 11466   0040A4  EC64  F021         	call	_I2C_2_Master_Read
 11467   0040A8  6E08               	movwf	??_color_read_Red^0,c
 11468   0040AA  5008               	movf	??_color_read_Red^0,w,c
 11469   0040AC  6E0A               	movwf	(??_color_read_Red+2)^0,c
 11470   0040AE  6A09               	clrf	(??_color_read_Red+1)^0,c
 11471   0040B0  500B               	movf	color_read_Red@tmp^0,w,c
 11472   0040B2  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 11473   0040B4  6E0B               	movwf	color_read_Red@tmp^0,c
 11474   0040B6  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 11475   0040B8  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 11476   0040BA  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 11477                           
 11478                           ;color.c: 43:  I2C_2_Master_Stop();
 11479   0040BC  EC42  F024         	call	_I2C_2_Master_Stop	;wreg free
 11480   0040C0                     
 11481                           ;color.c: 44:  return tmp;
 11482   0040C0  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 11483   0040C4  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 11484   0040C8  0012               	return		;funcret
 11485   0040CA                     __end_of_color_read_Red:
 11486                           	callstack 0
 11487                           
 11488 ;; *************** function _color_read_Green *****************
 11489 ;; Defined at:
 11490 ;;		line 47 in file "color.c"
 11491 ;; Parameters:    Size  Location     Type
 11492 ;;		None
 11493 ;; Auto vars:     Size  Location     Type
 11494 ;;  tmp             2   10[COMRAM] unsigned int 
 11495 ;; Return value:  Size  Location     Type
 11496 ;;                  2    5[COMRAM] unsigned int 
 11497 ;; Registers used:
 11498 ;;		wreg, status,2, status,0, cstack
 11499 ;; Tracked objects:
 11500 ;;		On entry : 0/0
 11501 ;;		On exit  : 0/0
 11502 ;;		Unchanged: 0/0
 11503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11505 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11506 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11507 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11508 ;;Total ram usage:        7 bytes
 11509 ;; Hardware stack levels used: 1
 11510 ;; Hardware stack levels required when called: 3
 11511 ;; This function calls:
 11512 ;;		_I2C_2_Master_Read
 11513 ;;		_I2C_2_Master_RepStart
 11514 ;;		_I2C_2_Master_Start
 11515 ;;		_I2C_2_Master_Stop
 11516 ;;		_I2C_2_Master_Write
 11517 ;; This function is called by:
 11518 ;;		_reading_hue
 11519 ;;		_calibration_routine
 11520 ;; This function uses a non-reentrant model
 11521 ;;
 11522                           
 11523                           	psect	text65
 11524   0040CA                     __ptext65:
 11525                           	callstack 0
 11526   0040CA                     _color_read_Green:
 11527                           	callstack 26
 11528   0040CA                     
 11529                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
 11530   0040CA  EC47  F024         	call	_I2C_2_Master_Start	;wreg free
 11531                           
 11532                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 11533   0040CE  0E52               	movlw	82
 11534   0040D0  EC3C  F024         	call	_I2C_2_Master_Write
 11535                           
 11536                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 11537   0040D4  0EB8               	movlw	184
 11538   0040D6  EC3C  F024         	call	_I2C_2_Master_Write
 11539                           
 11540                           ;color.c: 53:  I2C_2_Master_RepStart();
 11541   0040DA  EC4C  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11542                           
 11543                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 11544   0040DE  0E53               	movlw	83
 11545   0040E0  EC3C  F024         	call	_I2C_2_Master_Write
 11546                           
 11547                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
 11548   0040E4  0E01               	movlw	1
 11549   0040E6  EC64  F021         	call	_I2C_2_Master_Read
 11550   0040EA  6E08               	movwf	??_color_read_Green^0,c
 11551   0040EC  5008               	movf	??_color_read_Green^0,w,c
 11552   0040EE  6E0B               	movwf	color_read_Green@tmp^0,c
 11553   0040F0  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 11554                           
 11555                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11556   0040F2  0E00               	movlw	0
 11557   0040F4  EC64  F021         	call	_I2C_2_Master_Read
 11558   0040F8  6E08               	movwf	??_color_read_Green^0,c
 11559   0040FA  5008               	movf	??_color_read_Green^0,w,c
 11560   0040FC  6E0A               	movwf	(??_color_read_Green+2)^0,c
 11561   0040FE  6A09               	clrf	(??_color_read_Green+1)^0,c
 11562   004100  500B               	movf	color_read_Green@tmp^0,w,c
 11563   004102  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 11564   004104  6E0B               	movwf	color_read_Green@tmp^0,c
 11565   004106  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 11566   004108  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 11567   00410A  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 11568                           
 11569                           ;color.c: 57:  I2C_2_Master_Stop();
 11570   00410C  EC42  F024         	call	_I2C_2_Master_Stop	;wreg free
 11571   004110                     
 11572                           ;color.c: 58:  return tmp;
 11573   004110  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 11574   004114  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 11575   004118  0012               	return		;funcret
 11576   00411A                     __end_of_color_read_Green:
 11577                           	callstack 0
 11578                           
 11579 ;; *************** function _color_read_Clear *****************
 11580 ;; Defined at:
 11581 ;;		line 76 in file "color.c"
 11582 ;; Parameters:    Size  Location     Type
 11583 ;;		None
 11584 ;; Auto vars:     Size  Location     Type
 11585 ;;  tmp             2   10[COMRAM] unsigned int 
 11586 ;; Return value:  Size  Location     Type
 11587 ;;                  2    5[COMRAM] unsigned int 
 11588 ;; Registers used:
 11589 ;;		wreg, status,2, status,0, cstack
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11597 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11598 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11599 ;;Total ram usage:        7 bytes
 11600 ;; Hardware stack levels used: 1
 11601 ;; Hardware stack levels required when called: 3
 11602 ;; This function calls:
 11603 ;;		_I2C_2_Master_Read
 11604 ;;		_I2C_2_Master_RepStart
 11605 ;;		_I2C_2_Master_Start
 11606 ;;		_I2C_2_Master_Stop
 11607 ;;		_I2C_2_Master_Write
 11608 ;; This function is called by:
 11609 ;;		_reading_hue
 11610 ;;		_calibration_routine
 11611 ;;		_main
 11612 ;; This function uses a non-reentrant model
 11613 ;;
 11614                           
 11615                           	psect	text66
 11616   00411A                     __ptext66:
 11617                           	callstack 0
 11618   00411A                     _color_read_Clear:
 11619                           	callstack 26
 11620   00411A                     
 11621                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 11622   00411A  EC47  F024         	call	_I2C_2_Master_Start	;wreg free
 11623                           
 11624                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 11625   00411E  0E52               	movlw	82
 11626   004120  EC3C  F024         	call	_I2C_2_Master_Write
 11627                           
 11628                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 11629   004124  0EB4               	movlw	180
 11630   004126  EC3C  F024         	call	_I2C_2_Master_Write
 11631                           
 11632                           ;color.c: 82:  I2C_2_Master_RepStart();
 11633   00412A  EC4C  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11634                           
 11635                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 11636   00412E  0E53               	movlw	83
 11637   004130  EC3C  F024         	call	_I2C_2_Master_Write
 11638                           
 11639                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 11640   004134  0E01               	movlw	1
 11641   004136  EC64  F021         	call	_I2C_2_Master_Read
 11642   00413A  6E08               	movwf	??_color_read_Clear^0,c
 11643   00413C  5008               	movf	??_color_read_Clear^0,w,c
 11644   00413E  6E0B               	movwf	color_read_Clear@tmp^0,c
 11645   004140  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11646                           
 11647                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11648   004142  0E00               	movlw	0
 11649   004144  EC64  F021         	call	_I2C_2_Master_Read
 11650   004148  6E08               	movwf	??_color_read_Clear^0,c
 11651   00414A  5008               	movf	??_color_read_Clear^0,w,c
 11652   00414C  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11653   00414E  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11654   004150  500B               	movf	color_read_Clear@tmp^0,w,c
 11655   004152  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11656   004154  6E0B               	movwf	color_read_Clear@tmp^0,c
 11657   004156  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11658   004158  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11659   00415A  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11660                           
 11661                           ;color.c: 86:  I2C_2_Master_Stop();
 11662   00415C  EC42  F024         	call	_I2C_2_Master_Stop	;wreg free
 11663   004160                     
 11664                           ;color.c: 87:  return tmp;
 11665   004160  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11666   004164  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11667   004168  0012               	return		;funcret
 11668   00416A                     __end_of_color_read_Clear:
 11669                           	callstack 0
 11670                           
 11671 ;; *************** function _color_read_Blue *****************
 11672 ;; Defined at:
 11673 ;;		line 61 in file "color.c"
 11674 ;; Parameters:    Size  Location     Type
 11675 ;;		None
 11676 ;; Auto vars:     Size  Location     Type
 11677 ;;  tmp             2   10[COMRAM] unsigned int 
 11678 ;; Return value:  Size  Location     Type
 11679 ;;                  2    5[COMRAM] unsigned int 
 11680 ;; Registers used:
 11681 ;;		wreg, status,2, status,0, cstack
 11682 ;; Tracked objects:
 11683 ;;		On entry : 0/0
 11684 ;;		On exit  : 0/0
 11685 ;;		Unchanged: 0/0
 11686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11687 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11688 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11689 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11690 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11691 ;;Total ram usage:        7 bytes
 11692 ;; Hardware stack levels used: 1
 11693 ;; Hardware stack levels required when called: 3
 11694 ;; This function calls:
 11695 ;;		_I2C_2_Master_Read
 11696 ;;		_I2C_2_Master_RepStart
 11697 ;;		_I2C_2_Master_Start
 11698 ;;		_I2C_2_Master_Stop
 11699 ;;		_I2C_2_Master_Write
 11700 ;; This function is called by:
 11701 ;;		_reading_hue
 11702 ;;		_calibration_routine
 11703 ;; This function uses a non-reentrant model
 11704 ;;
 11705                           
 11706                           	psect	text67
 11707   00416A                     __ptext67:
 11708                           	callstack 0
 11709   00416A                     _color_read_Blue:
 11710                           	callstack 26
 11711   00416A                     
 11712                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
 11713   00416A  EC47  F024         	call	_I2C_2_Master_Start	;wreg free
 11714                           
 11715                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 11716   00416E  0E52               	movlw	82
 11717   004170  EC3C  F024         	call	_I2C_2_Master_Write
 11718                           
 11719                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 11720   004174  0EBA               	movlw	186
 11721   004176  EC3C  F024         	call	_I2C_2_Master_Write
 11722                           
 11723                           ;color.c: 67:  I2C_2_Master_RepStart();
 11724   00417A  EC4C  F024         	call	_I2C_2_Master_RepStart	;wreg free
 11725                           
 11726                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 11727   00417E  0E53               	movlw	83
 11728   004180  EC3C  F024         	call	_I2C_2_Master_Write
 11729                           
 11730                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
 11731   004184  0E01               	movlw	1
 11732   004186  EC64  F021         	call	_I2C_2_Master_Read
 11733   00418A  6E08               	movwf	??_color_read_Blue^0,c
 11734   00418C  5008               	movf	??_color_read_Blue^0,w,c
 11735   00418E  6E0B               	movwf	color_read_Blue@tmp^0,c
 11736   004190  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11737                           
 11738                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11739   004192  0E00               	movlw	0
 11740   004194  EC64  F021         	call	_I2C_2_Master_Read
 11741   004198  6E08               	movwf	??_color_read_Blue^0,c
 11742   00419A  5008               	movf	??_color_read_Blue^0,w,c
 11743   00419C  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11744   00419E  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11745   0041A0  500B               	movf	color_read_Blue@tmp^0,w,c
 11746   0041A2  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11747   0041A4  6E0B               	movwf	color_read_Blue@tmp^0,c
 11748   0041A6  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11749   0041A8  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11750   0041AA  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11751                           
 11752                           ;color.c: 71:  I2C_2_Master_Stop();
 11753   0041AC  EC42  F024         	call	_I2C_2_Master_Stop	;wreg free
 11754   0041B0                     
 11755                           ;color.c: 72:  return tmp;
 11756   0041B0  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11757   0041B4  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11758   0041B8  0012               	return		;funcret
 11759   0041BA                     __end_of_color_read_Blue:
 11760                           	callstack 0
 11761                           
 11762 ;; *************** function _I2C_2_Master_Write *****************
 11763 ;; Defined at:
 11764 ;;		line 45 in file "i2c.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;  data_byte       1    wreg     unsigned char 
 11767 ;; Auto vars:     Size  Location     Type
 11768 ;;  data_byte       1    2[COMRAM] unsigned char 
 11769 ;; Return value:  Size  Location     Type
 11770 ;;                  1    wreg      void 
 11771 ;; Registers used:
 11772 ;;		wreg, status,2, status,0, cstack
 11773 ;; Tracked objects:
 11774 ;;		On entry : 0/0
 11775 ;;		On exit  : 0/0
 11776 ;;		Unchanged: 0/0
 11777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11779 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11782 ;;Total ram usage:        1 bytes
 11783 ;; Hardware stack levels used: 1
 11784 ;; Hardware stack levels required when called: 2
 11785 ;; This function calls:
 11786 ;;		_I2C_2_Master_Idle
 11787 ;; This function is called by:
 11788 ;;		_color_writetoaddr
 11789 ;;		_color_read_Red
 11790 ;;		_color_read_Green
 11791 ;;		_color_read_Blue
 11792 ;;		_color_read_Clear
 11793 ;; This function uses a non-reentrant model
 11794 ;;
 11795                           
 11796                           	psect	text68
 11797   004878                     __ptext68:
 11798                           	callstack 0
 11799   004878                     _I2C_2_Master_Write:
 11800                           	callstack 26
 11801                           
 11802                           ;incstack = 0
 11803                           ;I2C_2_Master_Write@data_byte stored from wreg
 11804   004878  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11805   00487A                     
 11806                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11807   00487A  ECCE  F023         	call	_I2C_2_Master_Idle	;wreg free
 11808   00487E                     
 11809                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11810   00487E  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11811   004882  0012               	return		;funcret
 11812   004884                     __end_of_I2C_2_Master_Write:
 11813                           	callstack 0
 11814                           
 11815 ;; *************** function _I2C_2_Master_Stop *****************
 11816 ;; Defined at:
 11817 ;;		line 39 in file "i2c.c"
 11818 ;; Parameters:    Size  Location     Type
 11819 ;;		None
 11820 ;; Auto vars:     Size  Location     Type
 11821 ;;		None
 11822 ;; Return value:  Size  Location     Type
 11823 ;;                  1    wreg      void 
 11824 ;; Registers used:
 11825 ;;		wreg, status,2, status,0, cstack
 11826 ;; Tracked objects:
 11827 ;;		On entry : 0/0
 11828 ;;		On exit  : 0/0
 11829 ;;		Unchanged: 0/0
 11830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11835 ;;Total ram usage:        0 bytes
 11836 ;; Hardware stack levels used: 1
 11837 ;; Hardware stack levels required when called: 2
 11838 ;; This function calls:
 11839 ;;		_I2C_2_Master_Idle
 11840 ;; This function is called by:
 11841 ;;		_color_writetoaddr
 11842 ;;		_color_read_Red
 11843 ;;		_color_read_Green
 11844 ;;		_color_read_Blue
 11845 ;;		_color_read_Clear
 11846 ;; This function uses a non-reentrant model
 11847 ;;
 11848                           
 11849                           	psect	text69
 11850   004884                     __ptext69:
 11851                           	callstack 0
 11852   004884                     _I2C_2_Master_Stop:
 11853                           	callstack 26
 11854   004884                     
 11855                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11856   004884  ECCE  F023         	call	_I2C_2_Master_Idle	;wreg free
 11857   004888                     
 11858                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11859   004888  010E               	movlb	14	; () banked
 11860   00488A  85DA               	bsf	218,2,b	;volatile
 11861   00488C                     
 11862                           ; BSR set to: 14
 11863   00488C  0012               	return		;funcret
 11864   00488E                     __end_of_I2C_2_Master_Stop:
 11865                           	callstack 0
 11866                           
 11867 ;; *************** function _I2C_2_Master_Start *****************
 11868 ;; Defined at:
 11869 ;;		line 27 in file "i2c.c"
 11870 ;; Parameters:    Size  Location     Type
 11871 ;;		None
 11872 ;; Auto vars:     Size  Location     Type
 11873 ;;		None
 11874 ;; Return value:  Size  Location     Type
 11875 ;;                  1    wreg      void 
 11876 ;; Registers used:
 11877 ;;		wreg, status,2, status,0, cstack
 11878 ;; Tracked objects:
 11879 ;;		On entry : 0/0
 11880 ;;		On exit  : 0/0
 11881 ;;		Unchanged: 0/0
 11882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11887 ;;Total ram usage:        0 bytes
 11888 ;; Hardware stack levels used: 1
 11889 ;; Hardware stack levels required when called: 2
 11890 ;; This function calls:
 11891 ;;		_I2C_2_Master_Idle
 11892 ;; This function is called by:
 11893 ;;		_color_writetoaddr
 11894 ;;		_color_read_Red
 11895 ;;		_color_read_Green
 11896 ;;		_color_read_Blue
 11897 ;;		_color_read_Clear
 11898 ;; This function uses a non-reentrant model
 11899 ;;
 11900                           
 11901                           	psect	text70
 11902   00488E                     __ptext70:
 11903                           	callstack 0
 11904   00488E                     _I2C_2_Master_Start:
 11905                           	callstack 26
 11906   00488E                     
 11907                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11908   00488E  ECCE  F023         	call	_I2C_2_Master_Idle	;wreg free
 11909   004892                     
 11910                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11911   004892  010E               	movlb	14	; () banked
 11912   004894  81DA               	bsf	218,0,b	;volatile
 11913   004896                     
 11914                           ; BSR set to: 14
 11915   004896  0012               	return		;funcret
 11916   004898                     __end_of_I2C_2_Master_Start:
 11917                           	callstack 0
 11918                           
 11919 ;; *************** function _I2C_2_Master_RepStart *****************
 11920 ;; Defined at:
 11921 ;;		line 33 in file "i2c.c"
 11922 ;; Parameters:    Size  Location     Type
 11923 ;;		None
 11924 ;; Auto vars:     Size  Location     Type
 11925 ;;		None
 11926 ;; Return value:  Size  Location     Type
 11927 ;;                  1    wreg      void 
 11928 ;; Registers used:
 11929 ;;		wreg, status,2, status,0, cstack
 11930 ;; Tracked objects:
 11931 ;;		On entry : 0/0
 11932 ;;		On exit  : 0/0
 11933 ;;		Unchanged: 0/0
 11934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11939 ;;Total ram usage:        0 bytes
 11940 ;; Hardware stack levels used: 1
 11941 ;; Hardware stack levels required when called: 2
 11942 ;; This function calls:
 11943 ;;		_I2C_2_Master_Idle
 11944 ;; This function is called by:
 11945 ;;		_color_read_Red
 11946 ;;		_color_read_Green
 11947 ;;		_color_read_Blue
 11948 ;;		_color_read_Clear
 11949 ;; This function uses a non-reentrant model
 11950 ;;
 11951                           
 11952                           	psect	text71
 11953   004898                     __ptext71:
 11954                           	callstack 0
 11955   004898                     _I2C_2_Master_RepStart:
 11956                           	callstack 26
 11957   004898                     
 11958                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11959   004898  ECCE  F023         	call	_I2C_2_Master_Idle	;wreg free
 11960   00489C                     
 11961                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11962   00489C  010E               	movlb	14	; () banked
 11963   00489E  83DA               	bsf	218,1,b	;volatile
 11964   0048A0                     
 11965                           ; BSR set to: 14
 11966   0048A0  0012               	return		;funcret
 11967   0048A2                     __end_of_I2C_2_Master_RepStart:
 11968                           	callstack 0
 11969                           
 11970 ;; *************** function _I2C_2_Master_Read *****************
 11971 ;; Defined at:
 11972 ;;		line 51 in file "i2c.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;  ack             1    wreg     unsigned char 
 11975 ;; Auto vars:     Size  Location     Type
 11976 ;;  ack             1    3[COMRAM] unsigned char 
 11977 ;;  tmp             1    4[COMRAM] unsigned char 
 11978 ;; Return value:  Size  Location     Type
 11979 ;;                  1    wreg      unsigned char 
 11980 ;; Registers used:
 11981 ;;		wreg, status,2, status,0, cstack
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11988 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11989 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11990 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11991 ;;Total ram usage:        3 bytes
 11992 ;; Hardware stack levels used: 1
 11993 ;; Hardware stack levels required when called: 2
 11994 ;; This function calls:
 11995 ;;		_I2C_2_Master_Idle
 11996 ;; This function is called by:
 11997 ;;		_color_read_Red
 11998 ;;		_color_read_Green
 11999 ;;		_color_read_Blue
 12000 ;;		_color_read_Clear
 12001 ;; This function uses a non-reentrant model
 12002 ;;
 12003                           
 12004                           	psect	text72
 12005   0042C8                     __ptext72:
 12006                           	callstack 0
 12007   0042C8                     _I2C_2_Master_Read:
 12008                           	callstack 26
 12009                           
 12010                           ; BSR set to: 14
 12011                           ;incstack = 0
 12012                           ;I2C_2_Master_Read@ack stored from wreg
 12013   0042C8  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 12014   0042CA                     
 12015                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 12016   0042CA  ECCE  F023         	call	_I2C_2_Master_Idle	;wreg free
 12017   0042CE                     
 12018                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 12019   0042CE  010E               	movlb	14	; () banked
 12020   0042D0  87DA               	bsf	218,3,b	;volatile
 12021                           
 12022                           ;i2c.c: 56:   I2C_2_Master_Idle();
 12023   0042D2  ECCE  F023         	call	_I2C_2_Master_Idle	;wreg free
 12024   0042D6                     
 12025                           ;i2c.c: 57:   tmp = SSP2BUF;
 12026   0042D6  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 12027                           
 12028                           ;i2c.c: 58:   I2C_2_Master_Idle();
 12029   0042DA  ECCE  F023         	call	_I2C_2_Master_Idle	;wreg free
 12030   0042DE                     
 12031                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 12032   0042DE  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 12033   0042E0  B4D8               	btfsc	status,2,c
 12034   0042E2  EF75  F021         	goto	u3651
 12035   0042E6  EF79  F021         	goto	u3650
 12036   0042EA                     u3651:
 12037   0042EA  6A03               	clrf	??_I2C_2_Master_Read^0,c
 12038   0042EC  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 12039   0042EE  EF7A  F021         	goto	u3668
 12040   0042F2                     u3650:
 12041   0042F2  6A03               	clrf	??_I2C_2_Master_Read^0,c
 12042   0042F4                     u3668:
 12043   0042F4  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 12044   0042F6  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 12045   0042F8  010E               	movlb	14	; () banked
 12046   0042FA  51DA               	movf	218,w,b	;volatile
 12047   0042FC  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 12048   0042FE  0BDF               	andlw	-33
 12049   004300  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 12050   004302  6FDA               	movwf	218,b	;volatile
 12051   004304                     
 12052                           ; BSR set to: 14
 12053                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 12054   004304  89DA               	bsf	218,4,b	;volatile
 12055   004306                     
 12056                           ; BSR set to: 14
 12057                           ;i2c.c: 61:   return tmp;
 12058   004306  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 12059   004308                     
 12060                           ; BSR set to: 14
 12061   004308  0012               	return		;funcret
 12062   00430A                     __end_of_I2C_2_Master_Read:
 12063                           	callstack 0
 12064                           
 12065 ;; *************** function _I2C_2_Master_Idle *****************
 12066 ;; Defined at:
 12067 ;;		line 22 in file "i2c.c"
 12068 ;; Parameters:    Size  Location     Type
 12069 ;;		None
 12070 ;; Auto vars:     Size  Location     Type
 12071 ;;		None
 12072 ;; Return value:  Size  Location     Type
 12073 ;;                  1    wreg      void 
 12074 ;; Registers used:
 12075 ;;		wreg, status,2, status,0
 12076 ;; Tracked objects:
 12077 ;;		On entry : 0/0
 12078 ;;		On exit  : 0/0
 12079 ;;		Unchanged: 0/0
 12080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12083 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12084 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12085 ;;Total ram usage:        1 bytes
 12086 ;; Hardware stack levels used: 1
 12087 ;; Hardware stack levels required when called: 1
 12088 ;; This function calls:
 12089 ;;		Nothing
 12090 ;; This function is called by:
 12091 ;;		_I2C_2_Master_Start
 12092 ;;		_I2C_2_Master_RepStart
 12093 ;;		_I2C_2_Master_Stop
 12094 ;;		_I2C_2_Master_Write
 12095 ;;		_I2C_2_Master_Read
 12096 ;; This function uses a non-reentrant model
 12097 ;;
 12098                           
 12099                           	psect	text73
 12100   00479C                     __ptext73:
 12101                           	callstack 0
 12102   00479C                     _I2C_2_Master_Idle:
 12103                           	callstack 26
 12104   00479C                     l205:
 12105   00479C  010E               	movlb	14	; () banked
 12106   00479E  B5D8               	btfsc	216,2,b	;volatile
 12107   0047A0  EFD4  F023         	goto	u2791
 12108   0047A4  EFD6  F023         	goto	u2790
 12109   0047A8                     u2791:
 12110   0047A8  EFCE  F023         	goto	l205
 12111   0047AC                     u2790:
 12112   0047AC                     
 12113                           ; BSR set to: 14
 12114   0047AC  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 12115   0047B0  0E1F               	movlw	31
 12116   0047B2  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 12117   0047B4  A4D8               	btfss	status,2,c
 12118   0047B6  EFDF  F023         	goto	u2801
 12119   0047BA  EFE1  F023         	goto	u2800
 12120   0047BE                     u2801:
 12121   0047BE  EFCE  F023         	goto	l205
 12122   0047C2                     u2800:
 12123   0047C2                     
 12124                           ; BSR set to: 14
 12125   0047C2  0012               	return		;funcret
 12126   0047C4                     __end_of_I2C_2_Master_Idle:
 12127                           	callstack 0
 12128                           
 12129 ;; *************** function _ADC_init *****************
 12130 ;; Defined at:
 12131 ;;		line 9 in file "ADC.c"
 12132 ;; Parameters:    Size  Location     Type
 12133 ;;		None
 12134 ;; Auto vars:     Size  Location     Type
 12135 ;;		None
 12136 ;; Return value:  Size  Location     Type
 12137 ;;                  1    wreg      void 
 12138 ;; Registers used:
 12139 ;;		wreg, status,2
 12140 ;; Tracked objects:
 12141 ;;		On entry : 0/0
 12142 ;;		On exit  : 0/0
 12143 ;;		Unchanged: 0/0
 12144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12149 ;;Total ram usage:        0 bytes
 12150 ;; Hardware stack levels used: 1
 12151 ;; Hardware stack levels required when called: 1
 12152 ;; This function calls:
 12153 ;;		Nothing
 12154 ;; This function is called by:
 12155 ;;		_main
 12156 ;; This function uses a non-reentrant model
 12157 ;;
 12158                           
 12159                           	psect	text74
 12160   004846                     __ptext74:
 12161                           	callstack 0
 12162   004846                     _ADC_init:
 12163                           	callstack 29
 12164   004846                     
 12165                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 12166   004846  8C86               	bsf	134,6,c	;volatile
 12167                           
 12168                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 12169   004848  010E               	movlb	14	; () banked
 12170   00484A  8DB4               	bsf	180,6,b	;volatile
 12171                           
 12172                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 12173   00484C  010F               	movlb	15	; () banked
 12174   00484E  9958               	bcf	88,4,b	;volatile
 12175   004850                     
 12176                           ; BSR set to: 15
 12177                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 12178   004850  0EFC               	movlw	-4
 12179   004852  1758               	andwf	88,f,b	;volatile
 12180                           
 12181                           ;ADC.c: 17:     ADPCH=0b101110;
 12182   004854  0E2E               	movlw	46
 12183   004856  6F5F               	movwf	95,b	;volatile
 12184   004858                     
 12185                           ; BSR set to: 15
 12186                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 12187   004858  9460               	bcf	96,2,c	;volatile
 12188   00485A                     
 12189                           ; BSR set to: 15
 12190                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 12191   00485A  8860               	bsf	96,4,c	;volatile
 12192   00485C                     
 12193                           ; BSR set to: 15
 12194                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 12195   00485C  8E60               	bsf	96,7,c	;volatile
 12196   00485E                     
 12197                           ; BSR set to: 15
 12198   00485E  0012               	return		;funcret
 12199   004860                     __end_of_ADC_init:
 12200                           	callstack 0
 12201                           
 12202 ;; *************** function _LowISR *****************
 12203 ;; Defined at:
 12204 ;;		line 41 in file "timers.c"
 12205 ;; Parameters:    Size  Location     Type
 12206 ;;		None
 12207 ;; Auto vars:     Size  Location     Type
 12208 ;;		None
 12209 ;; Return value:  Size  Location     Type
 12210 ;;                  1    wreg      void 
 12211 ;; Registers used:
 12212 ;;		None
 12213 ;; Tracked objects:
 12214 ;;		On entry : 0/0
 12215 ;;		On exit  : 0/0
 12216 ;;		Unchanged: 0/0
 12217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12220 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12221 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12222 ;;Total ram usage:        1 bytes
 12223 ;; Hardware stack levels used: 1
 12224 ;; This function calls:
 12225 ;;		Nothing
 12226 ;; This function is called by:
 12227 ;;		Interrupt level 1
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           	psect	intcodelo
 12232   000018                     __pintcodelo:
 12233                           	callstack 0
 12234   000018                     _LowISR:
 12235                           	callstack 20
 12236                           
 12237                           ; BSR set to: 15
 12238                           ;incstack = 0
 12239   000018  805E               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 12240   00001A  CFE0 F001          	movff	bsr,??_LowISR
 12241   00001E                     
 12242                           ;timers.c: 44:     if (PIR0bits.TMR0IF == 1) {
 12243   00001E  010E               	movlb	14	; () banked
 12244   000020  AB33               	btfss	51,5,b	;volatile
 12245   000022  EF15  F000         	goto	i1u234_21
 12246   000026  EF17  F000         	goto	i1u234_20
 12247   00002A                     i1u234_21:
 12248   00002A  EF19  F000         	goto	i1l654
 12249   00002E                     i1u234_20:
 12250   00002E                     
 12251                           ; BSR set to: 14
 12252                           ;timers.c: 45:         LATGbits.LATG1 = 1;
 12253   00002E  827F               	bsf	127,1,c	;volatile
 12254                           
 12255                           ;timers.c: 47:         PIR0bits.TMR0IF = 0;
 12256   000030  9B33               	bcf	51,5,b	;volatile
 12257   000032                     i1l654:
 12258                           
 12259                           ; BSR set to: 14
 12260   000032  C001  FFE0         	movff	??_LowISR,bsr
 12261   000036  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 12262   000038  0010               	retfie	
 12263   00003A                     __end_of_LowISR:
 12264                           	callstack 0
 12265                           
 12266                           	psect	rparam
 12267   000000                     
 12268                           	psect	temp
 12269   00005E                     btemp:
 12270                           	callstack 0
 12271   00005E                     	ds	1
 12272   000000                     int$flags	set	btemp
 12273   000000                     wtemp8	set	btemp+1
 12274   000000                     ttemp5	set	btemp+1
 12275   000000                     ttemp6	set	btemp+4
 12276   000000                     ttemp7	set	btemp+8
 12277                           
 12278                           	psect	config
 12279                           
 12280                           ;Config register CONFIG1L @ 0x300000
 12281                           ;	External Oscillator mode Selection bits
 12282                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12283                           ;	Power-up default value for COSC bits
 12284                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12285   300000                     	org	3145728
 12286   300000  AA                 	db	170
 12287                           
 12288                           ;Config register CONFIG1H @ 0x300001
 12289                           ;	unspecified, using default values
 12290                           ;	Clock Out Enable bit
 12291                           ;	CLKOUTEN = 0x1, unprogrammed default
 12292                           ;	Clock Switch Enable bit
 12293                           ;	CSWEN = 0x1, unprogrammed default
 12294                           ;	Fail-Safe Clock Monitor Enable bit
 12295                           ;	FCMEN = 0x1, unprogrammed default
 12296   300001                     	org	3145729
 12297   300001  FF                 	db	255
 12298                           
 12299                           ;Config register CONFIG3L @ 0x300004
 12300                           ;	WDT Period Select bits
 12301                           ;	WDTCPS = 0x1F, unprogrammed default
 12302                           ;	WDT operating mode
 12303                           ;	WDTE = OFF, WDT Disabled
 12304   300004                     	org	3145732
 12305   300004  9F                 	db	159
 12306                           
 12307                           ;Config register CONFIG3H @ 0x300005
 12308                           ;	unspecified, using default values
 12309                           ;	WDT Window Select bits
 12310                           ;	WDTCWS = 0x7, unprogrammed default
 12311                           ;	WDT input clock selector
 12312                           ;	WDTCCS = 0x7, unprogrammed default
 12313   300005                     	org	3145733
 12314   300005  FF                 	db	255
 12315                           tosu	equ	0xFFF
 12316                           tosh	equ	0xFFE
 12317                           tosl	equ	0xFFD
 12318                           stkptr	equ	0xFFC
 12319                           pclatu	equ	0xFFB
 12320                           pclath	equ	0xFFA
 12321                           pcl	equ	0xFF9
 12322                           tblptru	equ	0xFF8
 12323                           tblptrh	equ	0xFF7
 12324                           tblptrl	equ	0xFF6
 12325                           tablat	equ	0xFF5
 12326                           prodh	equ	0xFF4
 12327                           prodl	equ	0xFF3
 12328                           indf0	equ	0xFEF
 12329                           postinc0	equ	0xFEE
 12330                           postdec0	equ	0xFED
 12331                           preinc0	equ	0xFEC
 12332                           plusw0	equ	0xFEB
 12333                           fsr0h	equ	0xFEA
 12334                           fsr0l	equ	0xFE9
 12335                           wreg	equ	0xFE8
 12336                           indf1	equ	0xFE7
 12337                           postinc1	equ	0xFE6
 12338                           postdec1	equ	0xFE5
 12339                           preinc1	equ	0xFE4
 12340                           plusw1	equ	0xFE3
 12341                           fsr1h	equ	0xFE2
 12342                           fsr1l	equ	0xFE1
 12343                           bsr	equ	0xFE0
 12344                           indf2	equ	0xFDF
 12345                           postinc2	equ	0xFDE
 12346                           postdec2	equ	0xFDD
 12347                           preinc2	equ	0xFDC
 12348                           plusw2	equ	0xFDB
 12349                           fsr2h	equ	0xFDA
 12350                           fsr2l	equ	0xFD9
 12351                           status	equ	0xFD8

Data Sizes:
    Strings     196
    Constant    0
    Data        1
    BSS         340
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     92      93
    BANK0           160     94     152
    BANK1           256      0     182
    BANK2           256      0     100
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    S3009$buffer	PTR unsigned char  size(2) Largest target is 0

    S3009$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[25]), STR_13(CODE[21]), STR_14(CODE[12]), 
		 -> STR_3(CODE[29]), STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[29]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _returnHome->_reverseStraight
    _reverseTurn->_backHalf
    _reverseTurn->_left135
    _reverseTurn->_left90
    _reverseTurn->_right135
    _reverseTurn->_right90
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->___fltol
    _moveWhite->_backHalf
    _moveWhite->_turn180
    ___aldiv->___lmul
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___flmul->___flsub
    ___fldiv->___flmul
    _get16bitTMR0val->_logAction
    _decision->_send2USART
    _send2USART->_sprintf
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_reading_hue
    _returnHome->_reverseStraight
    _reading_hue->_convert_rgb2hue
    _decision->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0  290846
                                             80 BANK0     14    14      0
                           _ADC_init
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          11     7      4   87023
                                              8 BANK0     11     7      4
                            ___aldiv
                             ___lmul
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          5     2      3   54370
                                             28 COMRAM     5     2      3
                           _backHalf
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                     10     4      6   12451
                                             90 COMRAM     2     2      0
                                              0 BANK0      8     2      6
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    7246
                                             85 COMRAM     5     3      2
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     122
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   19016
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                             13 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   16713
                                             89 COMRAM     2     0      2
                                             76 BANK0      4     4      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   16013
                                             85 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    1018
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     457
                                             75 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3649
                                             17 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2718
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    2048
                                             25 COMRAM    25    17      8
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2463
                                             50 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2    1469
                                              6 COMRAM     8     6      2
                          _logAction
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  141971
                                             70 COMRAM     6     2      4
                          _logAction
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
                         _send2USART
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   10112
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           4     2      2   17496
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              4     2      2   18864
                                             28 COMRAM     4     2      2
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2    8704
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             4     2      2   17648
                                             28 COMRAM     4     2      2
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2    8552
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           4     2      2   18712
                                             28 COMRAM     4     2      2
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2    8552
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    3419
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        4     2      2   18864
                                             28 COMRAM     4     2      2
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2    8704
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            4     2      2   19016
                                             28 COMRAM     4     2      2
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2    8856
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             4     2      2   19016
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2    8856
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    3571
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2    9920
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    4741
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    3419
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2893
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _logAction                                            5     1      4    1326
                                              1 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   10908
                                             68 COMRAM    23    22      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6    9146
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    7394
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    6906
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1143
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     811
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4210
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2391
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1182
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     682
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     675
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___fldiv
     ___flmul (ARG)
       ___flsub (ARG)
         ___fladd
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___flmul
   ___flsub
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _logAction
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _right90
     _send2USART
       _sendStringSerial4
       _sprintf
   _fullSpeedAhead
     ___flmul
     ___fltol
     ___xxtofl
     _setMotorPWM
   _get16bitTMR0val
     _logAction
   _initDCmotorsPWM
   _initUSART4
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _backHalf
       _left135
       _left90
       _right135
       _right90
       _turn180
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B6       7       71.1%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5E      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5C      5D       1       98.9%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     20F      66        0.0%
DATA                 0      0     20F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 14 23:38:22 2024

             logAction@newTime 0002             logAction@newAction 0006                 _color_read_Red 407A  
                 ___fldiv@aexp 004B                   ___fldiv@bexp 004A             fullSpeedBack@power 0017  
                 ___fldiv@sign 0043                _color_read_Blue 416A                             l83 43EE  
                           l92 4118                             l86 4808                             l95 41B8  
                           l89 40C8                             l98 4168                   ___awdiv@sign 0007  
                           bsr 0FE0            ___wmul@multiplicand 0004                moveLightBlue@mL 001D  
              moveLightBlue@mR 001E             convert_rgb2hue@max 0098             convert_rgb2hue@hue 009C  
           convert_rgb2hue@min 0090               _color_read_Clear 411A               _color_read_Green 40CA  
                          l101 3834                            l110 2996                            l112 29A4  
                          l104 28DA                            l113 29F6                            l122 2AEC  
                          l106 28E8                            l202 479A                            l130 11A8  
                          l211 4896                            l115 2A04                            l107 2936  
                          l220 4882                            l116 2A5E                            l132 11B8  
                          l205 479C                            l109 2944                            l214 48A0  
                          l118 2A6C                            l142 12AA                            l134 1212  
                          l223 4308                            l119 2AC6                            l208 47C2  
                          l152 15C2                            l144 12BA                            l136 1222  
                          l217 488C                            l146 1314             logAction@path_step 0004  
                          l331 25CE                            l156 163A                            l148 1324  
                          l421 3252                            l157 1656                            l414 3D9A  
                          l175 28B2                            l169 289A                            l434 3F24  
                          l452 4710                            l444 38FE                            l349 485E  
                          l429 3E28                            l461 45B4                            l470 4550  
                          l702 30FE                            l455 4740                            l439 3EA6  
                          l711 43A4                            l464 4618                            l608 4844  
                          l449 3F9A                            l473 44EC                            l545 4826  
                          l554 4862                            l458 46AE                            l482 44BA  
                          l714 43BA                            l722 374A                            l563 46E0  
                          l467 4770                            l491 45E6                            l811 335E  
                          l732 47E8                            l476 464A                            l708 30FE  
                          l557 4876                            l485 451E                            l494 4488  
                          l479 467C                            l743 4068                            l488 4582  
                          l648 4382                            l744 4078                            l696 4242  
                          l963 39C2                            l991 3BCA                            l976 3A72  
                          l997 3522                            _abs 4424                            _pad 3C76  
                          _hue 00BE            convert_rgb2hue@cMax 0056                   ___awmod@sign 0007  
          convert_rgb2hue@diff 0094                            wreg 0FE8                   ___flmul@aexp 002B  
                 ___flmul@bexp 002C                   ___flmul@sign 0026                   ___flmul@temp 0031  
                 ___flmul@prod 002D                    main@ambient 00B6                   ___fltol@exp1 0055  
                         l1002 3568                           ?_abs 0008                           l1029 3464  
                         l1230 400E                           l1302 41FE                           l1223 4006  
                         l1401 2C38                           l1410 4422                           l1314 22DA  
                         l1316 213A                           l1260 1846                           l1325 2180  
                         l1261 1834                           l1510 48A2                           l1430 3CAC  
                         l1350 1F40                           l1262 17FA                           l1327 21F8  
                         l1319 20FE                           l1328 21E6                           l4000 1ADA  
                         l1433 3CEA                           l1353 1DD2                           l1346 1BDC  
                         l4010 1B04                           l4002 1AE8                           l1507 4348  
                         l1435 3D0A                           l1451 2FA0                           l1363 1F02  
                         l1355 1E4A                           l1356 1E38                           l4100 1DC2  
                         l4020 1B32                           l4012 1B06                           l4004 1AEE  
                         l1277 1960                           l1269 1B16                           l1438 2E88  
                         l4110 1E02                           l4102 1DD0                           l4030 1B6A  
                         l4022 1B34                           l4006 1AF0                           l1286 1A30  
                         l1390 2CA0                           l1455 3B18                           l1287 1A1E  
                         l1480 42C6                           l4120 1E74                           l4112 1E30  
                         l4104 1DE2                           l4040 1B96                           l4032 1B7A  
                         l4024 1B44                           l4016 1B18                           l4008 1AF6  
                         l1474 2E28                           l4130 1EEA                           l4122 1E9E  
                         l4106 1DF0                           l4050 1BEC                           l4042 1BA6  
                         l4034 1B80                           l4026 1B54                           l4018 1B24  
                         l4210 2BC6                           l1394 2BDC                           l4202 2B7E  
                         l1459 3B20                           l1387 2B44                           l3500 39BA  
                         l1484 443E                           l4132 1F06                           l4140 1F2C  
                         l4116 1E5A                           l4124 1EA2                           l4108 1DF4  
                         l4060 1C26                           l4052 1BFC                           l4044 1BB6  
                         l4036 1B86                           l4028 1B64                           l4220 2C46  
                         l4212 2BD2                           l4204 2B86                           l4300 3852  
                         l5030 485A                           l3510 39DE                           l4142 1F30  
                         l4134 1F16                           l4126 1EBC                           l4118 1E66  
                         l4070 1C78                           l4062 1C3C                           l4046 1BC6  
                         l4038 1B94                           l4230 2C8E                           l4222 2C48  
                         l4214 2C0E                           l4206 2B92                           l4310 38BE  
                         l1487 4456                           l5032 485C                           l5024 4846  
                         l3520 3A12                           l3512 39E2                           l3504 39C4  
                         l3440 3C12                           l3432 3BCC                           l4320 46E2  
                         l5040 4820                           l4400 1FF4                           l4136 1F24  
                         l4128 1ED0                           l4080 1CBE                           l4072 1C86  
                         l4064 1C48                           l4056 1C10                           l4048 1BCC  
                         l4160 33CA                           l4152 338A                           l4232 2C90  
                         l4224 2C4C                           l4216 2C1A                           l4208 2BC4  
                         l4312 38C6                           l5026 4850                           l4250 487A  
                         l3530 3A4C                           l3522 3A1A                           l3514 39F0  
                         l3506 39C8                           l3442 3C44                           l3434 3BDC  
                         l4330 4734                           l4322 46EE                           l5050 3D42  
                         l5042 4822                           l5034 480A                           l4410 2034  
                         l4402 1FF6                           l4138 1F26                           l4090 1D2C  
                         l4082 1CD8                           l4074 1C92                           l4066 1C60  
                         l4058 1C1C                           l4170 33FA                           l4162 33D8  
                         l4154 33B4                           l4146 3360                           l4226 2C70  
                         l4218 2C28                           l4314 38CE                           l4306 385A  
                         l1499 3C74                           l5028 4858                           l4260 489C  
                         l4252 487E                           l3460 3900                           l3524 3A28  
                         l3532 3A52                           l3516 39F8                           l3508 39D6  
                         l3436 3BEC                           l4332 467E                           l4340 4590  
                         l4324 4704                           l5060 3D80                           l5052 3D46  
                         l5044 4824                           l5036 4814                           l4420 2064  
                         l4412 203C                           l4404 1FFE                           l4092 1D56  
                         l4084 1CE8                           l4076 1CA2                           l4068 1C6C  
                         l4180 3424                           l4172 3404                           l4156 33B6  
                         l4148 3376                           l4228 2C80                           l4316 38DE  
                         l4308 3864                           l4270 4304                           l4262 42CA  
                         l4246 488E                           l4254 4884                           l3470 392C  
                         l3462 3904                           l3534 3A62                           l3526 3A3E  
                         l3518 3A0A                           l3438 3BF6                           l3454 47C4  
                         l4350 4742                           l4334 468A                           l4326 4712  
                         l4342 45A8                           l5070 434A                           l5062 3D82  
                         l5054 3D6A                           l5046 3D0C                           l5038 4816  
                         l4430 20A2                           l4422 2064                           l4414 2040  
                         l4406 200E                           l4094 1D8C                           l4086 1D04  
                         l4078 1CAE                           l4182 3434                           l4158 33C6  
                         l4190 2AF0                           l4318 38E2                           l3720 47AC  
                         l4272 4306                           l4264 42CE                           l4248 4892  
                         l4256 4888                           l3480 395A                           l3472 3934  
                         l3464 3912                           l3536 3A6A                           l3528 3A46  
                         l5400 2F84                           l3456 47E0                           l3640 3AC6  
                         l3632 3A74                           l3560 3F9C                           l3800 3F5A  
                         l4352 474E                           l4336 46A2                           l4328 471E  
                         l4344 45E8                           l4360 4544                           l5072 4362  
                         l5064 3D8C                           l5056 3D74                           l5048 3D1C  
                         l4440 20EE                           l4432 20B2                           l4408 2024  
                         l4520 3B9E                           l4512 3B22                           l4096 1D9A  
                         l4088 1D10                           l4184 3444                           l4168 33F0  
                         l4192 2B00                           l4600 0FD4                           l5080 356A  
                         l4266 42D6                           l4258 4898                           l3810 4862  
                         l4290 46B4                           l3490 3994                           l3482 3962  
                         l3474 3938                           l3466 391A                           l5330 430A  
                         l3642 3AE6                           l3634 3A7C                           l5410 2CDE  
                         l3570 3FD4                           l3562 3FA4                           l3650 3168  
                         l3802 3F62                           l3730 3DD4                           l3722 3D9C  
                         l4354 4764                           l4346 45F4                           l4338 4584  
                         l5074 4364                           l5066 3D8E                           l5058 3D76  
                         l4450 2138                           l4442 20FC                           l4434 20C2  
                         l4426 2078                           l4418 2054                           l4370 1F4E  
                         l4522 3BC2                           l4514 3B50                           l4530 3494  
                         l4098 1DB8                           l4506 41BA                           l4186 3454  
                         l4178 3418                           l4194 2B0E                           l4610 10C8  
                         l4602 1008                           l4362 4384                           l5090 35F2  
                         l5082 3570                           l4268 42DE                           l3812 4872  
                         l4292 46C0                           l3492 3996                           l3484 3970  
                         l3476 3940                           l3468 391E                           l3556 4424  
                         l5332 4316                           l5340 3C86                           l3636 3AA2  
                         l3644 3AEE                           l5412 2CE2                           l5404 2CA2  
                         l3580 4000                           l3572 3FDA                           l3564 3FB6  
                         l3660 3216                           l3652 317A                           l3804 3F6A  
                         l3740 3E12                           l3732 3DDC                           l3724 3DA0  
                         l4348 460C                           l4356 4520                           l4700 44FA  
                         l5076 437A                           l5068 3D98                           l4460 217E  
                         l4452 214A                           l4444 2108                           l4436 20CA  
                         l4428 2092                           l4380 1F8E                           l4372 1F5C  
                         l4524 3BC8                           l4516 3B60                           l4540 3502  
                         l4532 34A4                           l3900 17F2                           l3820 1674  
                         l4508 41CA                           l4196 2B54                           l4620 11CC  
                         l4612 10FC                           l4604 103C                           l5500 37B0  
                         l4364 4390                           l5092 3604                           l5084 357C  
                         l3718 479C                           l4294 46C2                           l3494 399C  
                         l3486 3976                           l3478 3952                           l3558 4432  
                         l5334 4324                           l5350 3CCC                           l5342 3C96  
                         l3638 3AAA                           l5430 2D6C                           l5422 2D02  
                         l5414 2CEA                           l5406 2CC8                           l4550 4772  
                         l3574 3FF0                           l3566 3FBE                           l3654 317E  
                         l3646 3100                           l3806 3F7A                           l3734 3DE4  
                         l3726 3DB6                           l3742 3EA8                           l4358 452C  
                         l4702 4512                           l4470 21DE                           l4454 2160  
                         l4462 2190                           l4446 2126                           l4438 20DA  
                         l4390 1FB4                           l4382 1F90                           l4374 1F5E  
                         l4518 3B8E                           l4542 3510                           l4534 34D2  
                         l3910 1828                           l3902 1808                           l3822 1684  
                         l3830 16AE                           l3814 1658                           l4198 2B6A  
                         l4630 12CE                           l4622 11FE                           l4614 1130  
                         l4606 1070                           l5510 37E4                           l5502 37B2  
                         l4710 4464                           l4366 43A0                           l5094 3620  
                         ?_pad 0010                           l4296 46CA                           l4288 46B0  
                         l3488 398C                           l3496 39A2                           l5336 4328  
                         l5352 3CFA                           l5344 3CA4                           l5360 2E4A  
                         l5440 2DD8                           l5432 2D76                           l5416 2CEE  
                         l5424 2D38                           l5408 2CD0                           l4560 4788  
                         l4552 477C                           l3576 3FF8                           l3568 3FC6  
                         l3656 31BC                           l3648 311A                           l3808 3F7E  
                         l3736 3DEC                           l3728 3DBE                           l3760 3EFA  
                         l3744 3EC2                           l5600 267E                           l4480 224C  
                         l4464 219E                           l4456 2166                           l4448 2128  
                         l4392 1FC2                           l4376 1F6E                           l4384 1F98  
                         l4368 1F42                           l4544 3560                           l4536 34E2  
                         l4528 3466                           l3920 1878                           l3912 1832  
                         l3904 1814                           l3840 16DE                           l3832 16BE  
                         l3824 1694                           l3816 1664                           l4640 13E2  
                         l4632 1300                           l4624 1232                           l4616 1162  
                         l4608 1094                           l5520 382C                           l5512 37E6  
                         l5504 37B4                           l4800 3298                           l4712 447C  
                         l4720 2FD6                           l5096 3640                           l5088 3584  
                         l4570 40CA                           l3498 39B2                           l5346 3CB8  
                         l5338 3C76                           l5370 2E84                           l5362 2E5A  
                         l5354 2E2A                           l5442 2DE2                           l5434 2D80  
                         l5426 2D48                           l5418 2CFA                           l5450 2E02  
                         l5530 28EA                           l4554 4782                           l4562 47EC  
                         l3578 3FFA                           l3658 31D6                           l3738 3DFC  
                         l3762 3F0A                           l3754 3EDA                           l3746 3ECA  
                         l3770 3E4C                           l5602 2694                           l5610 26D8  
                         l4490 22B6                           l4474 2208                           l4482 2250  
                         l4466 21A2                           l4458 2170                           l4394 1FC4  
                         l4386 1FA8                           l4378 1F7E                           l4546 3566  
                         l4538 34F0                           l3930 18B4                           l3922 1888  
                         l3914 1854                           l3906 1818                           l3850 171E  
                         l3842 16EC                           l3834 16C4                           l3826 16A4  
                         l3818 1672                           l4642 143E                           l4650 15C2  
                         l4634 1334                           l4626 1264                           l4618 1194  
                         l5514 37E8                           l5506 37B6                           l4810 32D6  
                         l4802 329C                           l4298 3836                           l4730 302C  
                         l4722 2FE6                           l4714 2FA2                           l5098 3650  
                         l4572 4110                           l4564 407A                           l5348 3CC8  
                         l5380 2ED6                           l5372 2E90                           l5364 2E60  
                         l5356 2E2E                           l5436 2DA0                           l5428 2D5C  
                         l5460 4286                           l5540 2946                           l5532 2902  
                         l5524 28B4                           l4556 4784                           l3764 3F0E  
                         l3756 3EEA                           l3748 3ED2                           l3780 3E6C  
                         l3772 3E54                           l4660 44C8                           l5612 26EE  
                         l5620 2732                           l5604 26AA                           l4492 22BA  
                         l4484 226A                           l4476 2214                           l4468 21B0  
                         l4396 1FD4                           l4388 1FAE                           l3940 18FA  
                         l3932 18C2                           l3924 1896                           l3916 1864  
                         l3908 1826                           l3860 1758                           l3852 1720  
                         l3844 16EE                           l3836 16D6                           l3828 16A6  
                         l4652 15F6                           l4644 1470                           l4636 139A  
                         l4628 1296                           l5516 3802                           l5508 37CE  
                         l4820 331E                           l4812 32E4                           l4804 32AC  
                         l4708 4458                           l4740 3084                           l4732 303E  
                         l4724 2FF8                           l4716 2FB2                           l5700 2340  
                         l4582 411A                           l4566 40C0                           l5390 2F34  
                         l5382 2EDC                           l5374 2E9A                           l5366 2E70  
                         l5358 2E42                           l5446 2DF6                           l5438 2DC0  
                         l5462 428E                           l5470 43F0                           l5550 29A6  
                         l5542 295E                           l5534 2914                           l5526 28BA  
                         l4558 4786                           l3790 3F26                           l3758 3EF2  
                         l4670 4626                           l3782 3E74                           l3766 3E2A  
                         l4662 44E0                           l5622 2748                           l5630 278C  
                         l5614 2704                           l5606 26B6                           l4494 22C8  
                         l4486 2280                           l4478 2222                           l4398 1FE4  
                         l3950 1976                           l3942 192E                           l3934 18C4  
                         l3926 18A4                           l3870 176C                           l3862 175C  
                         l3846 16FE                           l3854 1728                           l3838 16D8  
                         l4654 1606                           l4646 1500                           l4638 13B0  
                         l4590 0ED8                           l5518 3818                           l4822 3328  
                         l4814 32EE                           l4806 32C2                           l4750 30D6  
                         l4742 3090                           l4734 304A                           l4726 3004  
                         l4718 2FBE                           l5710 234A                           l5702 2342  
                         l4576 416A                           l4584 4160                           l5392 2F4E  
                         l5376 2EA0                           l5384 2EF8                           l5368 2E7C  
                         l5464 429E                           l5472 43F8                           l5560 2A0A  
                         l5552 29BE                           l5544 2974                           l5536 2916  
                         l5528 28D2                           l4840 43E4                           l4832 43BC  
                         l4664 4202                           l3792 3F3E                           l4672 463E  
                         l4680 45B6                           l3784 3E7C                           l3768 3E44  
                         l5632 27A2                           l5640 27E6                           l5624 275E  
                         l5616 2710                           l5608 26CC                           l4496 22CE  
                         l4488 229A                           l3960 19B2                           l3952 1986  
                         l3944 1930                           l3936 18CE                           l3928 18B0  
                         l3880 1780                           l3872 1770                           l3864 1760  
                         l3856 1738                           l3848 170E                           l4648 1532  
                         l4592 0F08                           l4816 330C                           l4808 32CA  
                         l4824 332E                           l4760 3696                           l4752 30EE  
                         l4744 30A8                           l4736 3062                           l4728 301C  
                         l5720 2356                           l5712 234C                           l5704 2344  
                         l4578 41B0                           l5386 2F12                           l5394 2F5E  
                         l5378 2ED2                           l5466 42BE                           l5474 4400  
                         l5570 2A3E                           l5562 2A22                           l5554 29D4  
                         l5546 2976                           l5538 292E                           l4834 43C0  
                         l4666 4218                           l4674 464C                           l4682 45C2  
                         l3786 3E8C                           l3778 3E5C                           l4658 44BC  
                         l4690 44AE                           l5482 4828                           l5642 27FC  
                         l5650 2840                           l5634 27B8                           l5626 276A  
                         l5618 2726                           l4498 22D0                           l3970 19DE  
                         l3962 19B4                           l3946 1940                           l3938 18D4  
                         l3890 1794                           l3882 1784                           l3874 1774  
                         l3866 1764                           l3858 174A                           l4594 0F38  
                         l5490 376A                           l4826 333E                           l4818 331C  
                         l4762 36B8                           l4770 3710                           l4754 365E  
                         l4746 30B8                           l4738 3072                           l5730 2360  
                         l5722 2358                           l5714 234E                           l5706 2346  
                         l5396 2F6E                           l5388 2F24                           l5476 4408  
                         l5580 2AA2                           l5572 2A56                           l5564 2A38  
                         l5556 29D6                           l5548 298E                           l4836 43CA  
                         l4676 4658                           l4668 461A                           l4684 45DA  
                         l3788 3E90                           l4692 4552                           l5484 483C  
                         l5652 2856                           l5644 2812                           l5636 27C4  
                         l5628 2780                           l5660 289A                           l3980 1A16  
                         l3964 19C2                           l3956 199A                           l3972 19E0  
                         l3948 1950                           l3884 1788                           l3876 1778  
                         l3868 1768                           l3892 1798                           l4596 0F6C  
                         l4588 0EC6                           l5492 377C                           l4828 334E  
                         l4780 4020                           l4772 371C                           l4764 36DA  
                         l4756 3668                           l4748 30CA                           l5740 2390  
                         l5732 2362                           l5724 235A                           l5716 2350  
                         l5708 2348                           l5398 2F74                           l5478 4418  
                         l5582 2AA4                           l5574 2A72                           l5566 2A3A  
                         l5558 29EE                           l4838 43DA                           l3798 3F46  
                         l4678 4670                           l4694 455E                           l4686 448A  
                         l5662 28A6                           l5654 286C                           l5646 281E  
                         l5638 27DA                           l5590 2624                           l3990 1A94  
                         l3966 19CA                           l3958 19A4                           l3974 19EE  
                         l3894 179C                           l3886 178C                           l3878 177C  
                         l4598 0FA0                           l5494 377E                           l5486 374C  
                         l4790 3258                           l4782 402E                           l4774 3728  
                         l4766 36E6                           l4758 368A                           l5750 23AA  
                         l5742 2398                           l5734 237C                           l5726 235C  
                         l5718 2354                           l5670 22E0                           l5584 2AA6  
                         l5576 2A8A                           l5568 2A3C                           l4696 4576  
                         l4688 4496                           l5664 28AA                           l5656 2878  
                         l5648 2834                           l5592 263A                           l3984 1A40  
                         l3992 1A96                           l3976 19F2                           l3968 19CE  
                         l3896 17C6                           l3888 1790                           l5496 3780  
                         l5488 3752                           l4792 3266                           l4784 403E  
                         l4776 3734                           l4768 3708                           l5760 24AC  
                         l5752 23AC                           l5744 239A                           l5736 237E  
                         l5728 235E                           l5680 22FA                           l5672 22E4  
                         l5842 2D2A                           l5586 2ABE                           l5578 2AA0  
                         l4698 44EE                           l5658 288E                           l5594 2650  
                         l3994 1AA6                           l3986 1A4C                           l3978 1A00  
                         l3898 17E2                           l5498 3782                           l4794 3276  
                         l4786 4048                           l4778 4010                           l5770 250A  
                         l5762 24B8                           l5754 23B8                           l5746 239C  
                         l5738 2386                           l5690 231A                           l5682 22FE  
                         l5674 22E8                           l5588 2AD4                           l5596 265C  
                         l3996 1AB6                           l3988 1A5A                           l4796 327A  
                         l4788 3254                           l5780 2564                           l5772 2516  
                         l5764 24CC                           l5756 23DA                           l5748 239E  
                         l5692 231E                           l5684 2302                           l5676 22E8  
                         l5668 22DC                           l5598 2672                           l3998 1AD6  
                         l4798 3288                           l5790 25DC                           l5782 257E  
                         l5774 2530                           l5766 24E4                           l5758 2494  
                         l5694 2322                           l5686 230A                           l5678 22F4  
                         l5792 25DC                           l5784 258A                           l5776 2540  
                         l5768 24F0                           l5696 2326                           l5688 2312  
                         l5794 25E8                           l5786 25A2                           l5778 2558  
                         l5698 233E                           l5796 25FE                           l5788 25B8  
                         l5798 2600                           STR_1 0E8A                           STR_2 0EC3  
                         STR_3 0E01                           STR_4 0EC3                           STR_5 0E3B  
                         STR_6 0EC3                           STR_7 0E56                           STR_8 0EC3  
                         STR_9 0E1E                           u3000 17E0                           u3010 1808  
                         u3011 1804                           u3100 1940                           u3020 1826  
                         u3101 193C                           u3021 1822                           u3110 1976  
                         u3030 1846                           u3111 1972                           u3031 1842  
                         u2400 3912                           u4000 3560                           u3200 1A40  
                         u3120 1986                           u3040 1854                   _BAUD4CONbits 0EE9  
                         u2401 390E                           u4001 355C                           u3201 1A3C  
                         u3121 1982                           u3041 1850                           u2410 392C  
                         u3210 1A5A                           u3130 19B2                           u3050 1864  
                         u4010 1162                           u2411 3928                           u3211 1A56  
                         u3131 19AE                           u3051 1860                           u4011 115E  
                         u2420 3952                           u2500 3A3E                           u3300 1B54  
                         u3220 1A94                           u3140 19C2                           u3060 1896  
                         u4100 1532                           u4020 1194                           u2421 394E  
                         u2501 3A3A                           u3301 1B50                           u3221 1A90  
                         u3141 19BE                           u3061 1892                           u4101 152E  
                         u4021 1190                           u2430 3970                           u2510 3A62  
                         u2350 3BDC                           u3310 1B94                           u3230 1AA6  
                         u3150 19DE                           u3070 18A4                           u4110 1606  
                         u4030 11FE                           u2431 396C                           u2511 3A5E  
                         u2351 3BD8                           u3311 1B90                           u3231 1AA2  
                         u3151 19DA                           u3071 18A0                           u4111 1602  
                         u4031 11FA                           u2440 398C                           u2360 3BEC  
                         u4120 4218                           u5000 275E                           u3400 1E30  
                         u3320 1BA6                           u3240 1AB6                           u3160 19EE  
                         u3080 18C2                           u4040 1264                           u4200 36DA  
                         u2441 3988                           u2361 3BE8                           u4121 4214  
                         u5001 275A                           u3401 1E2C                           u3321 1BA2  
                         u3241 1AB2                           u3161 19EA                           u3081 18BE  
                         u4041 1260                           u4201 36D6                           u2450 39B2  
                         u2370 3C12                           u5010 27A2                           u3410 1E46  
                         u3330 1BB6                           u3250 1AD6                           u3170 1A00  
                         u3090 18FA                           u4050 1296                           u4210 3708  
                         u4130 2FB2                           _T2PR 0FBC                           u2451 39AE  
                         u2371 3C0E                           u5011 279E                           u3411 1E42  
                         u3331 1BB2                           u3251 1AD2                           u3171 19FC  
                         u3091 18F6                           u4051 1292                           u4211 3704  
                         u4131 2FAE                           u2460 39D6                           u2380 3C44  
                         u2700 3AA2                           u5020 27B8                           u3420 1E5A  
                         u3340 1BEC                           u3260 1AE8                           u3180 1A16  
                         u3500 33EC                           u4060 1300                           u4220 402E  
                         u4140 2FF8                           u5100 25B8                           u2461 39D2  
                         u2381 3C40                           u2701 3A9E                           u5021 27B4  
                         u3421 1E56                           u3341 1BE8                           u3261 1AE4  
                         u3181 1A12                           u3501 33E8                           u4061 12FC  
                         u4221 402A                           u4141 2FF4                           u5101 25B4  
                         u2470 39F0                           u2710 3B18                           u5030 27FC  
                         u3430 1E74                           u3350 1BFC                           u3270 1B04  
                         u3190 1A2C                           u3510 3414                           u4070 139A  
                         u4230 4068                           u4150 303E                           u5110 25CE  
                         u2471 39EC                           u2711 3B14                           u5031 27F8  
                         u3431 1E70                           u3351 1BF8                           u3271 1B00  
                         u3191 1A28                           u3511 3410                           u4071 1396  
                         u4231 4064                           u4151 303A                           u5111 25CA  
                         u2800 47C2                           u2480 3A0A                           u2560 4432  
                         u2720 311A                           u5040 2812                           u3440 1EBC  
                         u3360 1D76                           u3280 1B32                           u3520 3434  
                         u3600 2C38                           u4080 13E2                           u4240 3266  
                         u4160 3084                           u5120 25DC                           u2801 47BE  
                         u2481 3A06                           u2561 442E                           u2721 3116  
                         u5041 280E                           u3441 1EB8                           u3281 1B2E  
                         u3521 3430                           u3601 2C34                           u4081 13DE  
                         u4241 3262                           u4161 3080                           u5121 25D8  
                         u2490 3A28                           u2570 3FB6                           u2730 31D6  
                         u2810 3DB6                           u5050 2856                           u3450 1EEA  
                         u3370 1DD0                           u3290 1B44                           u3530 3444  
                         u3610 2C46                           u4090 1470                           u4250 3288  
                         u4170 30CA                           u2491 3A24                           u2571 3FB2  
                         u2731 31D2                           u2811 3DB2                           u5051 2852  
                         u3451 1EE6                           u3371 1DCC                           u3291 1B40  
                         u3531 3440                           u3611 2C42                           u4091 146C  
                         u4251 3284                           u4171 30C6                           u2580 3FD4  
                         u2820 3DD4                           u5060 286C                           u3700 1F5C  
                         u3460 1F24                           u3380 1DF0                           u2900 1684  
                         u3620 2C80                           u3540 2B00                           u4260 32C2  
                         u4180 368A                           u4500 3620                           u2581 3FD0  
                         u2821 3DD0                           u5061 2868                           u3701 1F58  
                         u3461 1F20                           u3381 1DEC                           u3365 1D6C  
                         u2901 1680                           u3621 2C7C                           u3541 2AFC  
                         u4261 32BE                           u4181 3686                           u4501 361C  
                         u2590 3FF0                           u2830 3E12                           u3710 1F6E  
                         u3390 1E02                           u2910 1694                           u3470 3376  
                         u3630 2C8E                           u3550 2B0E                           u4270 32E4  
                         u4190 36B8                           u5070 24AC                           u2591 3FEC  
                         u2831 3E0E                           u3711 1F6A                           u3391 1DFE  
                         u2911 1690                           u3471 3372                           u3631 2C8A  
                         u3551 2B0A                           u4271 32E0                           u4191 36B4  
                         u5207 300E                           u5071 24A8                           u2840 3E28  
                         u3800 2126                           u3720 1F7E                           u2920 16D6  
                         u3480 33AA                           u3560 2B6A                           u4280 330C  
                         u5080 2558                           u2841 3E24                           u3801 2122  
                         u3721 1F7A                           u2921 16D2                           u3561 2B66  
                         u4281 3308                           u5217 3054                           u5081 2554  
                         u3650 42F2                           u2850 3F24                           u3810 214A  
                         u3730 1FC2                           u2930 16EC                           u3490 33D8  
                         u3570 2BC0                           u4290 333E                           u5090 25A2  
                         u3651 42EA                           u2851 3F20                           u3811 2146  
                         u3731 1FBE                           u2931 16E8                           u3491 33D4  
                         u3571 2BBC                           u5307 37C2                           u4291 333A  
                         u5227 309A                           u5091 259E                           u5147 236E  
                         u4700 3CFA                           u2860 3EA6                           u3900 226A  
                         u3820 2160                           u3740 1FD4                           u2940 16FE  
                         u3580 2C0A                           u4701 3CF6                           u2861 3EA2  
                         u3901 2266                           u3821 215C                           u3741 1FD0  
                         u2941 16FA                           u3485 33A0                           u3581 2C06  
                         u5317 37F6                           u5237 30E0                           u5157 24D8  
                         u2790 47AC                           u3670 46E0                           u4710 2E3E  
                         u2870 3F9A                           u3910 229A                           u3830 217E  
                         u3750 1FE4                           u2950 170E                           u3590 2C28  
                         u2791 47A8                           u3671 46DC                           u4711 2E38  
                         u2871 3F96                           u5407 45CC                           u5327 44A0  
                         u3911 2296                           u3831 217A                           u3751 1FE0  
                         u2951 170A                           u3591 2C24                           u5247 373E  
                         u5167 24FC                           u2880 4872                           u4800 2F6E  
                         u4720 2E40                           u3920 22C8                           u3840 219E  
                         u3760 2024                           u2960 174A                           u3680 38FE  
                         u2881 486E                           u4801 2F6A                           u5417 45FE  
                         u5337 44D2                           u3921 22C4                           u3841 219A  
                         u3761 2020                           u2961 1746                           u3681 38FA  
                         u5257 38D4                           u5177 2522                           u4730 2E5A  
                         u4810 2CC8                           u3850 21B0                           u3770 2064  
                         u3930 3B50                           u2970 1758                           u2890 1672  
                         u3690 43BA                           u4731 2E56                           u4811 2CC4  
                         u5507 43D0                           u5427 4630                           u5347 46F8  
                         u3851 21AC                           u3771 2060                           u3931 3B4C  
                         u2971 1754                           u2891 166E                           u3691 43B6  
                         u5267 4396                           u5187 2570                           u3668 42F4  
                         u4660 4348                           u4740 2E70                           u4820 2D48  
                         u4900 2A04                           u3860 21DE                           u3780 20DA  
                         u3940 3B8E                           u2980 17C6                           u4661 4344  
                         u4741 2E6C                           u4821 2D44                           u4901 2A00  
                         u5517 28F4                           u5437 4728                           u5357 4504  
                         u3861 21DA                           u3781 20D6                           u3941 3B8A  
                         u2981 17C2                           u5277 446E                           u5197 2FC8  
                         u4670 3C86                           u4750 2F12                           u4830 2D6C  
                         u4910 2A6C                           u3870 21F4                           u3790 20FC  
                         u3950 3BC2                           u2990 17DE                           u4671 3C82  
                         u4751 2F0E                           u4831 2D68                           u4911 2A68  
                         u5527 2950                           u5447 4662                           u5367 4536  
                         u3871 21F0                           u3791 20F8                           u3951 3BBE  
                         u2991 17D8                           u5287 375E                           u4680 3CA4  
                         u4760 2F24                           u4840 2DA0                           u4920 2AD4  
                         u3880 2208                           u3960 3494                           u4681 3CA0  
                         u4761 2F20                           u4841 2D9C                           u4921 2AD0  
                         u5537 29B0                           u5457 4694                           u5377 4568  
                         u3881 2204                           u3961 3490                           u5297 378E  
                         u4690 3CEA                           u4770 2F34                           u4850 2DC0  
                         u4930 263A                           u3890 2222                           u3970 34D2  
                         u4691 3CE6                           u4771 2F30                           u4851 2DBC  
                         u5547 2A14                           u5467 3F00                           u5387 459A  
                         u4931 2636                           u3891 221E                           u3971 34CE  
                         u4780 2F4E                           u4860 42BE                           u4940 2650  
                         u3980 34F0                           u4781 2F4A                           u4861 42BA  
                         u5557 2A7C                           u5477 4758                           u5397 3E82  
                         u4941 264C                           u3981 34EC                           u4790 2F5E  
                         u4870 28E8                           u4950 2694                           u3990 3510  
                         u4791 2F5A                           u5567 2ADE                           u4871 28E4  
                         u5487 3DF2                           u4951 2690                           u3991 350C  
                         u4880 2944                           u4960 26AA                           u5577 46C4  
                         u4881 2940                           u5497 3F70                           u4961 26A6  
                         u4890 29A4                           u4970 26EE                           u4891 29A0  
                         u4971 26EA                           u4980 2704                           u4981 2700  
                         u4990 2748                           u4991 2744                    main@current 00B2  
                         abs@a 0008                           _dbuf 0196                           _main 22DC  
                         _dtoa 2E2A           convert_rgb2hue@cCurr 0057                           _prec 00CA  
                         _time 0200                           pad@i 0016                           pad@p 0013  
                         fsr1h 0FE2                           fsr2h 0FDA                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           btemp 005E  
                         _stop 3D9C            fullSpeedAhead@power 0059                           prodh 0FF4  
                         prodl 0FF3                           start 003A               __end_of_ADC_init 4860  
              ___fldiv@new_exp 0044         __end_of_color_read_Red 40CA                   ___param_bank 0000  
               reading_hue@hue 00AE                          ??_abs 000A                          ??_pad 0015  
                ___fltol@sign1 0054                __end_of___aldiv 3360                __end_of___fladd 1B18  
                        ?_main 0001                          ?_dtoa 0018                          _ADPCH 0F5F  
              __end_of___fldiv 22DC                __end_of___awdiv 39C4                          STR_10 0EC3  
                        STR_11 0E71                          STR_12 0EC3                          STR_13 0EA2  
                        STR_14 0EB7                __end_of___awmod 3A74                __end_of___flmul 1F42  
              __end_of___flsub 4200                __end_of___fltol 3466                          ?_stop 0014  
              ___awdiv@divisor 0004                __end_of___lwdiv 4010                          i1l654 0032  
              ___awdiv@counter 0006              ??_convert_rgb2hue 0058                   vfpfcnvrt@fmt 0024  
                        _TMR0H 0FD4                          _TMR0L 0FD3            ___lmul@multiplicand 0006  
              __end_of_left135 461A        __end_of_sendCharSerial4 4878     __end_of_I2C_2_Master_Start 4898  
   __end_of_I2C_2_Master_Write 4884                          _flags 00CC            read_prec_or_width@c 000A  
          read_prec_or_width@n 000B                          _fputc 3BCC                          _fputs 430A  
                        pad@fp 0010                          _width 00C8                          _putch 48A2  
                        dtoa@d 0019                          dtoa@i 0021                          dtoa@p 001D  
              __end_of_right90 4712                          dtoa@s 0020                          dtoa@w 001E  
                 ?_reading_hue 005A                __end_of_moveRed 44EE                          tablat 0FF5  
              __end_of_turn180 46B0                          ttemp5 005F                          ttemp6 0062  
                        ttemp7 0066                          status 0FD8                          wtemp8 005F  
              __end_of_sprintf 4424          convert_rgb2hue@redmax 0064        __end_of_color_read_Blue 41BA  
        _I2C_2_Master_RepStart 4898                ?_color_read_Red 0006                __initialization 4244  
                 __end_of_main 2624                   __end_of_dtoa 2FA2                   __end_of_stop 3E2A  
        __end_of_moveLightBlue 45E8                _get16bitTMR0val 434A                         ??_main 00B0  
                       ??_dtoa 001B                         ??_stop 0016                  __activetblptr 0003  
   __end_of_read_prec_or_width 3B22                _reverseStraight 365E                   ?_setMotorPWM 000F  
                       ?_fputc 0002                         ?_fputs 000A                         _ADRESH 0F64  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0002               __end_of_backHalf 4772  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         i1l3410 002E                         _RD5PPS 0E6F  
                       _RC7PPS 0E69                         i1l3408 001E                         _RE4PPS 0E76  
                       _RD6PPS 0E70                         _RG6PPS 0E88                  vfpfcnvrt@done 002C  
     __end_of_color_click_init 43F0                         _RX4PPS 0E15                         _TX4REG 0EE4  
             __end_of___xxtofl 2CA2    convert_rgb2hue@greencurrent 0068               __end_of_decision 28B4  
                       _LowISR 0018                  main@path_step 00BC                   _CCPTMRS0bits 0FAD  
                 vfprintf@cfmt 0031                         ___flge 3466                         ___fleq 3B22  
                       ___lmul 4010                      ??___aldiv 0016                      ??___fladd 000A  
                       ___wmul 47C4                      ??___fldiv 003B               backOneAndHalf@mL 0019  
                    ??___awdiv 0006               backOneAndHalf@mR 001A                      ??___awmod 0006  
                    ??___flmul 0022                         _action 013C                      ??___flsub 001A  
                    ??___fltol 0050                      ??___lwdiv 000C                         _left90 4712  
         read_prec_or_width@ap 0009                   ?_reverseTurn 001D                         clear_0 425C  
                       clear_1 4268                         clear_2 4274               ___awdiv@quotient 0008  
              ___awmod@divisor 0004                         _motorL 00EE                         _motorR 00E5  
                       isa$std 0001                ___awmod@counter 0006                      ??_left135 001B  
           send2USART@hue_char 0060                         pad@buf 0011               __end_of_right135 45B6  
                       dtoa@fp 0018               __end_of_moveBlue 467E               __end_of_movePink 4520  
                       fputc@c 0002                         fputs@c 000D                         fputs@i 000E  
                       fputs@s 000A                      ??_right90 001B                   __mediumconst 0000  
      calibration_routine@cCal 0045                      ??_moveRed 001F                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8                      ?_ADC_init 0001  
             ?_sendCharSerial4 0001         convert_rgb2hue@bluemax 0074                         putch@c 0001  
             __end_of_vfprintf 42C8                      ??_turn180 001B                         stop@mL 0014  
                       stop@mR 0015              ??_initDCmotorsPWM 0004                      ??_sprintf 0038  
             __end_of_turnLeft 3F26       get16bitTMR0val@path_step 0007                     ___flge@ff1 0002  
                   ___flge@ff2 0006                   ___xxtofl@arg 000C                   ___xxtofl@exp 000B  
                 ___xxtofl@val 0002                     ___fleq@ff1 0002                     ___fleq@ff2 0006  
              fullSpeedBack@mL 0014                fullSpeedBack@mR 0015                     __accesstop 0060  
      __end_of__initialization 427C       __end_of_color_read_Clear 416A       __end_of_color_read_Green 411A  
       ?_I2C_2_Master_RepStart 0001                 _backOneAndHalf 4520                  ___rparam_used 0001  
                   ___fltol@f1 004C               ?_color_read_Blue 0006                 __pcstackCOMRAM 0001  
      __end_of_get16bitTMR0val 4384                  _fullSpeedBack 3F26                   __pidataBANK0 48A4  
                __end_of_fputc 3C76                  __end_of_fputs 434A                  __end_of_putch 48A4  
      __end_of_reverseStraight 374C               reading_hue@cCurr 005A                     ??_ADC_init 0002  
               main@clear_norm 00B8                     backHalf@mL 0019                     backHalf@mR 001A  
                      ??_fputc 0005                        ??_fputs 000D                        ??_putch 0002  
                   __pbssBANK0 00BE                     __pbssBANK1 0100                     __pbssBANK2 0200  
       __end_of_backOneAndHalf 4552                        ?_LowISR 0001              _color_writetoaddr 47EA  
                 _T2CLKCONbits 0FBF                 ?_fullSpeedBack 0014                _convert_rgb2hue 0EC6  
                      ?___flge 0002                        ?___fleq 0002             ?_color_writetoaddr 0004  
                      ?___lmul 0002                  _customDelayMs 4384                        ?___wmul 0002  
                      ?_left90 0019          reverseTurn@actionStep 001F                 ___lmul@product 000A  
                    ?_backHalf 0019            ??_color_writetoaddr 0005                      ?___xxtofl 0002  
          _convert_rgb2hue$440 0088            _convert_rgb2hue$441 008C            _convert_rgb2hue$438 0080  
          _convert_rgb2hue$439 0084                      ?_decision 0047                        _SP4BRGH 0EE6  
                      _SP4BRGL 0EE5                  decision@color 004B                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5                    moveGreen@mL 001D                    moveGreen@mR 001E  
              ?_backOneAndHalf 0019         color_writetoaddr@value 0004               ??_color_read_Red 0008  
    __end_of_color_writetoaddr 480A                      _ADREFbits 0F58                      ?_right135 0019  
           _I2C_2_Master_Start 488E                     _initUSART4 480A             _I2C_2_Master_Write 4878  
                    ?_moveBlue 001D                        __Hparam 0000                      ?_movePink 001D  
                      __Lparam 0000              color_read_Red@tmp 000B                    moveWhite@mL 001D  
                  moveWhite@mR 001E      customDelayMs@milliseconds 0002                 ?_customDelayMs 0002  
      sendStringSerial4@string 0003               ?_get16bitTMR0val 0007                        ___aldiv 3254  
                      ___fladd 1658                        ___fldiv 1F42                        ___awdiv 3900  
                      ___awmod 39C4                        ___flmul 1B18                        ___flsub 41BA  
                      ___fltol 3360            ?_I2C_2_Master_Start 0001                        ___lwdiv 3F9C  
          ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E                   __psmallconst 0E00  
                      __pcinit 4244                     ??_backHalf 001B              __end_of_logAction 4244  
                      __ramtop 0E00               ?_reverseStraight 0060                     _send2USART 4828  
                    ?_turnLeft 0014                        _left135 45E8                        __ptext0 22DC  
                      __ptext1 356A                        __ptext2 2FA2                        __ptext3 365E  
                      __ptext4 3836                        __ptext5 4384                        __ptext6 4458  
                      __ptext7 4010                        __ptext8 3254                        __ptext9 374C  
                    _T2CONbits 0FBD          read_prec_or_width@fmt 0008                     ??___xxtofl 0006  
             ___awmod@dividend 0002                     ??_decision 004B         reverseStraight@delayMs 0066  
             ___aldiv@dividend 000E                        _right90 46E2                      _T2HLTbits 0FBE  
                      _moveRed 44BC                  _RxBufWriteCnt 00D0                        _turn180 467E  
                      _sprintf 43F0                        main@hue 00BA           ??_I2C_2_Master_Start 0003  
         ??_I2C_2_Master_Write 0003           end_of_initialization 427C              __end_of_moveGreen 464C  
       reverseStraight@time_ms 0062              __end_of_moveWhite 448A                        fputc@fp 0004  
      __end_of_convert_rgb2hue 1658                        fputs@fp 000C              ?_color_click_init 0001  
           _read_prec_or_width 3A74                     _moveOrange 4552                     ??_right135 001B  
                   _moveYellow 448A                ??_fullSpeedBack 0016                     ??_moveBlue 001F  
           ??_color_click_init 0006        convert_rgb2hue@clearmax 007C                     ??_movePink 001F  
             _colorCalibration 00DB            returnHome@path_step 006A              __end_of_vfpfcnvrt 2E2A  
             ___aldiv@quotient 0018                        postdec2 0FDD            ?_read_prec_or_width 0008  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0028                     ??_vfprintf 0031        convert_rgb2hue@greenmax 006C  
                 _colorCurrent 00D1                     _returnHome 356A                _initDCmotorsPWM 3D0C  
                   ??_turnLeft 0016                      _PORTFbits 0F8E             setMotorPWM@negDuty 0013  
            __end_of_turnRight 3EA8                    ___fladd@grs 0011                  ___xxtofl@sign 000A  
                  returnHome@i 0071                      _TRISAbits 0F81             setMotorPWM@posDuty 0012  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
             convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A               convert_rgb2hue@g 00A4  
                  ___fldiv@grs 0046               convert_rgb2hue@r 00A0                    ___fldiv@rem 003F  
             fullSpeedAhead@mL 0056               fullSpeedAhead@mR 0057       color_writetoaddr@address 0005  
      ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 0027                    _CCP1CONbits 0FAB  
          _calibration_routine 28B4              ?_color_read_Clear 0006                   _EUSART4RXbuf 0182  
                 _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7              ?_color_read_Green 0006  
   convert_rgb2hue@bluecurrent 0070                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0002                ??_customDelayMs 0004  
           ??_color_read_Clear 0008             ??_color_read_Green 0008                 __end_of_LowISR 003A  
    convert_rgb2hue@redcurrent 0060                 __end_of___flge 356A                 __end_of___fleq 3BCC  
               _fullSpeedAhead 3836                 __end_of___lmul 407A                    vfpfcnvrt@ap 0025  
                  vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023                 __end_of___wmul 47EA  
               __end_of_left90 4742                    ?_send2USART 0045           ?_calibration_routine 0045  
          color_read_Clear@tmp 000B            start_initialization 4244   calibration_routine@cal_state 0048  
                  __end_of_abs 4458                    __end_of_pad 3D0C                  _TxBufWriteCnt 005D  
             ?_convert_rgb2hue 0056                    ?_moveOrange 001D                    ?_moveYellow 001D  
          color_read_Green@tmp 000B                       ??_LowISR 0001        __end_of_initDCmotorsPWM 3D9C  
                  vfprintf@fmt 002F         __end_of_fullSpeedAhead 3900                       ??___flge 000A  
                     ??___fleq 000A                       ??___lmul 000A                       ??___wmul 0006  
                     ??_left90 001B                    __pdataBANK0 00F7                    ?_returnHome 0068  
        ??_calibration_routine 0046                  _moveLightBlue 45B6                      ___fladd@a 0006  
                    ___fladd@b 0002                      ___fldiv@a 0037                      ___fldiv@b 0033  
                    ___flmul@a 001E                      ___flmul@b 001A                    __pbssCOMRAM 005D  
                    ___flsub@a 0016                      ___flsub@b 0012                  __pcstackBANK0 0060  
             ??_backOneAndHalf 001B              reverseStraight@mL 0060              reverseStraight@mR 0061  
        returnHome@action_turn 0070                  ??_reading_hue 00AC                     right135@mL 0019  
                   right135@mR 001A               ___lwdiv@dividend 0008                      _dtoa$3088 001B  
              ?_fullSpeedAhead 0056                       ?___aldiv 000E                       ?___fladd 0002  
                     ?___fldiv 0033                       ?___awdiv 0002                       ?___awmod 0002  
                     ?___flmul 001A                       ?___flsub 0012                       ?___fltol 004C  
                     ?___lwdiv 0008                     moveBlue@mL 001D                     moveBlue@mR 001E  
               ?_moveLightBlue 001D                    __pintcodelo 0018                       ?_left135 0019  
                 _readingIndex 00CD           I2C_2_Master_Read@ack 0004           I2C_2_Master_Read@tmp 0005  
                  __smallconst 0E00                     movePink@mL 001D                     movePink@mR 001E  
            _I2C_2_Master_Idle 479C                      _logAction 4200              _I2C_2_Master_Init 4772  
            _I2C_2_Master_Read 42C8                       ?_right90 0019              _I2C_2_Master_Stop 4884  
                     ?_moveRed 001D                   _RxBufReadCnt 00CF                       _ADC_init 4846  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0010                       ?_turn180 0019             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0002                       ?_sprintf 0032  
              ___aldiv@divisor 0012              _sendStringSerial4 46B0            ??_I2C_2_Master_Idle 0002  
              ___aldiv@counter 0016            ??_I2C_2_Master_Init 0002            ??_I2C_2_Master_Read 0003  
               ___wmul@product 0006                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0003  
                     _LATCbits 0F7B                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E                       _LATGbits 0F7F                       _LATHbits 0F80  
                     _IPR0bits 0E1F                       _PIE0bits 0E29             ?_sendStringSerial4 0003  
                    _moveGreen 461A                       _PIE4bits 0E2D            __end_of_reading_hue 3836  
                     i1u234_20 002E                       i1u234_21 002A                      _moveWhite 4458  
                  turnRight@mL 0014                    turnRight@mR 0015                       _PIR0bits 0E33  
                     _PIR4bits 0E37               ?_initDCmotorsPWM 0002                      left135@mL 0019  
                    left135@mR 001A              ??_sendCharSerial4 0002                       _SSP2CON2 0EDA  
          ??_sendStringSerial4 0004                       _SSP2STAT 0ED8                  ??_reverseTurn 0020  
                    _vfpfcnvrt 2CA2                     _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 47C4  
    __end_of_I2C_2_Master_Init 479C      __end_of_I2C_2_Master_Read 430A              ___wmul@multiplier 0002  
    __end_of_I2C_2_Master_Stop 488E                   setMotorPWM@m 000F    I2C_2_Master_Write@data_byte 0003  
                  _ldrReadings 016E                     ?_logAction 0002              ??_color_read_Blue 0008  
                 _TxBufReadCnt 00CE                      _turnRight 3E2A              ___lmul@multiplier 0002  
    __end_of_sendStringSerial4 46E2                   moveOrange@mL 001D                   moveOrange@mR 001E  
__end_of_I2C_2_Master_RepStart 48A2             color_read_Blue@tmp 000B            __end_of_setMotorPWM 3254  
                 ??_initUSART4 0002                     ?_moveGreen 001D                     ?_moveWhite 001D  
                     __Hrparam 0000                     vfprintf@ap 0030                       __Lrparam 0000  
                   vfprintf@fp 002E          __end_of_fullSpeedBack 3F9C                ??_moveLightBlue 001F  
                 moveYellow@mL 001D                   moveYellow@mR 001E                     ?_vfpfcnvrt 0023  
                     _backHalf 4742                   ??_send2USART 0047                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                       _dataFlag 00F7                     sprintf@fmt 0033  
                     ___xxtofl 2AEE                     _T0CON0bits 0FD5                     _T0CON1bits 0FD6  
                     _decision 2624            __end_of_reverseTurn 3100                      right90@mL 0019  
                    right90@mR 001A                ___lwdiv@divisor 000A             __end_of_initUSART4 4828  
              ___lwdiv@counter 000E                     ?_turnRight 0014                       __ptext10 0EC6  
                     __ptext11 2AEE                       __ptext20 3D0C                       __ptext12 3360  
                     __ptext21 434A                       __ptext13 41BA                       __ptext30 4584  
                     __ptext22 2624                       __ptext14 1658                       __ptext31 3E2A  
                     __ptext23 4828                       __ptext15 1B18                       __ptext40 3D9C  
                     __ptext32 45B6                       __ptext24 448A                       __ptext16 3466  
                     __ptext41 3F26                       __ptext33 45E8                       __ptext25 44BC  
                     __ptext17 3B22                       __ptext50 4286                       __ptext42 3100  
                     __ptext34 461A                       __ptext26 46E2                       __ptext18 1F42  
                     __ptext51 2CA2                       __ptext43 3F9C                       __ptext35 4712  
                     __ptext27 44EE                       __ptext19 480A                       __ptext60 39C4  
                     __ptext52 3A74                       __ptext44 4200                       __ptext36 464C  
                     __ptext28 4520                       __ptext61 3900                       __ptext53 47C4  
                     __ptext45 43BC                       __ptext37 467E                       __ptext29 4552  
                     __ptext70 488E                       __ptext62 46B0                       __ptext54 2E2A  
                     __ptext46 47EA                       __ptext38 3EA8                       __ptext71 4898  
                     __ptext63 4860                       __ptext55 3C76                       __ptext47 4772  
                     __ptext39 4742                       __ptext72 42C8                       __ptext64 407A  
                     __ptext56 430A                       __ptext48 28B4                       __ptext73 479C  
                     __ptext65 40CA                       __ptext57 3BCC                       __ptext49 43F0  
                     __ptext74 4846                       __ptext66 411A                       __ptext58 48A2  
                     __ptext67 416A                       __ptext59 4424                       __ptext68 4878  
                     __ptext69 4884                    decision@hue 0047                      moveRed@mL 001D  
                    moveRed@mR 001E                   _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA  
                  _reading_hue 374C                  reverseTurn@mL 001D                  reverseTurn@mR 001E  
                 ??_moveOrange 001F                     turnLeft@mL 0014                     turnLeft@mR 0015  
                 ??_moveYellow 001F             __end_of_send2USART 4846                       _right135 4584  
                     _moveBlue 464C                       _movePink 44EE                     turnRight@i 0017  
        __end_of_customDelayMs 43BC                       isa$xinst 0000                       left90@mL 0019  
                     left90@mR 001A                     _RC4STAbits 0EE7              returnHome@time_ms 006C  
                     int$flags 005E                       _vfprintf 4286                   ??_returnHome 005D  
                     _turnLeft 3EA8                      turn180@mL 0019                      turn180@mR 001A  
                  ??_logAction 0006                     _INTCONbits 0FF2                 customDelayMs@i 0005  
           __end_of_moveOrange 4584             __end_of_moveYellow 44BC                    _setMotorPWM 3100  
            ??_get16bitTMR0val 0009                       intlevel1 0000                      sprintf@ap 0038  
            decision@path_step 0049              ??_reverseStraight 005B               ??_fullSpeedAhead 0058  
get16bitTMR0val@combined_value 000D             __end_of_returnHome 365E                    ??_moveGreen 001F  
                    turnLeft@i 0017                    ??_moveWhite 001F    __end_of_calibration_routine 2AEE  
  convert_rgb2hue@clearcurrent 0078                  send2USART@hue 0045                    ??_vfpfcnvrt 0026  
                  _reverseTurn 2FA2               _color_click_init 43BC                       sprintf@f 0039  
                     sprintf@s 0032                     _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C  
                 ___aldiv@sign 0017                    ??_turnRight 0016                  ___fladd@signs 000E  
                   _TX4STAbits 0EE8                _sendCharSerial4 4860                   ___fladd@aexp 000F  
                 ___fladd@bexp 0010                   returnHome@mL 0068                   returnHome@mR 0069  
