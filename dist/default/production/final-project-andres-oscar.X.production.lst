

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 23:47:28 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=3
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=3
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    93   000000                     
    94                           ; Generated 21/07/2023 GMT
    95                           ; 
    96                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution. Publication is not required when
   110                           ;        this file is used in an embedded application.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F67K40 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128   000000                     
   129                           	psect	idataBANK0
   130   00450A                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for _dataFlag
   134   00450A  01                 	db	1
   135   000000                     _TMR0H	set	4052
   136   000000                     _TX4REG	set	3812
   137   000000                     _RC4STAbits	set	3815
   138   000000                     _SP4BRGH	set	3814
   139   000000                     _LATHbits	set	3968
   140   000000                     _LATFbits	set	3966
   141   000000                     _TRISFbits	set	3974
   142   000000                     _TRISAbits	set	3969
   143   000000                     _TRISEbits	set	3973
   144   000000                     _TRISGbits	set	3975
   145   000000                     _TRISDbits	set	3972
   146   000000                     _PORTFbits	set	3982
   147   000000                     _SSP2CON2bits	set	3802
   148   000000                     _RX4PPS	set	3605
   149   000000                     _SSP2CLKPPS	set	3612
   150   000000                     _SSP2DATPPS	set	3613
   151   000000                     _ANSELDbits	set	3751
   152   000000                     _SSP2ADD	set	3798
   153   000000                     _SSP2CON1bits	set	3801
   154   000000                     _LATAbits	set	3961
   155   000000                     _LATEbits	set	3965
   156   000000                     _LATGbits	set	3967
   157   000000                     _LATCbits	set	3963
   158   000000                     _LATDbits	set	3964
   159   000000                     _CCPR2H	set	4006
   160   000000                     _CCPR1H	set	4010
   161   000000                     _RC4REG	set	3811
   162   000000                     _SP4BRGL	set	3813
   163   000000                     _TX4STAbits	set	3816
   164   000000                     _BAUD4CONbits	set	3817
   165   000000                     _SSP2CON2	set	3802
   166   000000                     _CCPR4H	set	3873
   167   000000                     _CCPR3H	set	3877
   168   000000                     _SSP2STAT	set	3800
   169   000000                     _ANSELFbits	set	3764
   170   000000                     _SSP2BUF	set	3797
   171   000000                     _IPR0bits	set	3615
   172   000000                     _PIE0bits	set	3625
   173   000000                     _PIE4bits	set	3629
   174   000000                     _PIR4bits	set	3639
   175   000000                     _RC0PPS	set	3682
   176   000000                     _RC7PPS	set	3689
   177   000000                     _RD5PPS	set	3695
   178   000000                     _RE2PPS	set	3700
   179   000000                     _RD6PPS	set	3696
   180   000000                     _CCP1CONbits	set	4011
   181   000000                     _CCPTMRS0bits	set	4013
   182   000000                     _T2PR	set	4028
   183   000000                     _T2CONbits	set	4029
   184   000000                     _T0CON0bits	set	4053
   185   000000                     _CCP2CONbits	set	4007
   186   000000                     _CCP3CONbits	set	3878
   187   000000                     _ADREFbits	set	3928
   188   000000                     _CCP4CONbits	set	3874
   189   000000                     _TRISHbits	set	3976
   190   000000                     _TRISCbits	set	3971
   191   000000                     _INTCONbits	set	4082
   192   000000                     _T0CON1bits	set	4054
   193   000000                     _ADPCH	set	3935
   194   000000                     _ADRESH	set	3940
   195   000000                     _ADCON0bits	set	3936
   196   000000                     _RE4PPS	set	3702
   197   000000                     _RG6PPS	set	3720
   198   000000                     _TMR0L	set	4051
   199   000000                     _T2CLKCONbits	set	4031
   200   000000                     _T2HLTbits	set	4030
   201   000000                     _PIR0bits	set	3635
   202                           
   203                           	psect	smallconst
   204   000E00                     __psmallconst:
   205                           	callstack 0
   206   000E00  00                 	db	0
   207   000E01                     STR_3:
   208                           
   209                           ; BSR set to: 14
   210   000E01  43                 	db	67	;'C'
   211   000E02  61                 	db	97	;'a'
   212   000E03  6C                 	db	108	;'l'
   213   000E04  69                 	db	105	;'i'
   214   000E05  62                 	db	98	;'b'
   215   000E06  72                 	db	114	;'r'
   216   000E07  61                 	db	97	;'a'
   217   000E08  74                 	db	116	;'t'
   218   000E09  69                 	db	105	;'i'
   219   000E0A  6F                 	db	111	;'o'
   220   000E0B  6E                 	db	110	;'n'
   221   000E0C  20                 	db	32
   222   000E0D  73                 	db	115	;'s'
   223   000E0E  74                 	db	116	;'t'
   224   000E0F  61                 	db	97	;'a'
   225   000E10  74                 	db	116	;'t'
   226   000E11  65                 	db	101	;'e'
   227   000E12  20                 	db	32
   228   000E13  3D                 	db	61	;'='
   229   000E14  20                 	db	32
   230   000E15  67                 	db	103	;'g'
   231   000E16  72                 	db	114	;'r'
   232   000E17  65                 	db	101	;'e'
   233   000E18  65                 	db	101	;'e'
   234   000E19  6E                 	db	110	;'n'
   235   000E1A  20                 	db	32
   236   000E1B  0A                 	db	10
   237   000E1C  0D                 	db	13
   238   000E1D  00                 	db	0
   239   000E1E                     STR_5:
   240                           
   241                           ; BSR set to: 14
   242   000E1E  43                 	db	67	;'C'
   243   000E1F  61                 	db	97	;'a'
   244   000E20  6C                 	db	108	;'l'
   245   000E21  69                 	db	105	;'i'
   246   000E22  62                 	db	98	;'b'
   247   000E23  72                 	db	114	;'r'
   248   000E24  61                 	db	97	;'a'
   249   000E25  74                 	db	116	;'t'
   250   000E26  69                 	db	105	;'i'
   251   000E27  6F                 	db	111	;'o'
   252   000E28  6E                 	db	110	;'n'
   253   000E29  20                 	db	32
   254   000E2A  73                 	db	115	;'s'
   255   000E2B  74                 	db	116	;'t'
   256   000E2C  61                 	db	97	;'a'
   257   000E2D  74                 	db	116	;'t'
   258   000E2E  65                 	db	101	;'e'
   259   000E2F  3D                 	db	61	;'='
   260   000E30  20                 	db	32
   261   000E31  62                 	db	98	;'b'
   262   000E32  6C                 	db	108	;'l'
   263   000E33  75                 	db	117	;'u'
   264   000E34  65                 	db	101	;'e'
   265   000E35  20                 	db	32
   266   000E36  0A                 	db	10
   267   000E37  0D                 	db	13
   268   000E38  00                 	db	0
   269   000E39                     STR_7:
   270                           
   271                           ; BSR set to: 14
   272   000E39  43                 	db	67	;'C'
   273   000E3A  61                 	db	97	;'a'
   274   000E3B  6C                 	db	108	;'l'
   275   000E3C  69                 	db	105	;'i'
   276   000E3D  62                 	db	98	;'b'
   277   000E3E  72                 	db	114	;'r'
   278   000E3F  61                 	db	97	;'a'
   279   000E40  74                 	db	116	;'t'
   280   000E41  69                 	db	105	;'i'
   281   000E42  6F                 	db	111	;'o'
   282   000E43  6E                 	db	110	;'n'
   283   000E44  20                 	db	32
   284   000E45  73                 	db	115	;'s'
   285   000E46  74                 	db	116	;'t'
   286   000E47  61                 	db	97	;'a'
   287   000E48  74                 	db	116	;'t'
   288   000E49  65                 	db	101	;'e'
   289   000E4A  20                 	db	32
   290   000E4B  3D                 	db	61	;'='
   291   000E4C  20                 	db	32
   292   000E4D  20                 	db	32
   293   000E4E  77                 	db	119	;'w'
   294   000E4F  68                 	db	104	;'h'
   295   000E50  69                 	db	105	;'i'
   296   000E51  74                 	db	116	;'t'
   297   000E52  65                 	db	101	;'e'
   298   000E53  00                 	db	0
   299   000E54                     STR_9:
   300                           
   301                           ; BSR set to: 14
   302   000E54  43                 	db	67	;'C'
   303   000E55  41                 	db	65	;'A'
   304   000E56  4C                 	db	76	;'L'
   305   000E57  49                 	db	73	;'I'
   306   000E58  42                 	db	66	;'B'
   307   000E59  52                 	db	82	;'R'
   308   000E5A  41                 	db	65	;'A'
   309   000E5B  54                 	db	84	;'T'
   310   000E5C  49                 	db	73	;'I'
   311   000E5D  4F                 	db	79	;'O'
   312   000E5E  4E                 	db	78	;'N'
   313   000E5F  20                 	db	32
   314   000E60  43                 	db	67	;'C'
   315   000E61  4F                 	db	79	;'O'
   316   000E62  4D                 	db	77	;'M'
   317   000E63  50                 	db	80	;'P'
   318   000E64  4C                 	db	76	;'L'
   319   000E65  45                 	db	69	;'E'
   320   000E66  54                 	db	84	;'T'
   321   000E67  45                 	db	69	;'E'
   322   000E68  44                 	db	68	;'D'
   323   000E69  20                 	db	32
   324   000E6A  0A                 	db	10
   325   000E6B  0D                 	db	13
   326   000E6C  00                 	db	0
   327   000E6D                     STR_1:
   328                           
   329                           ; BSR set to: 14
   330   000E6D  43                 	db	67	;'C'
   331   000E6E  61                 	db	97	;'a'
   332   000E6F  6C                 	db	108	;'l'
   333   000E70  69                 	db	105	;'i'
   334   000E71  62                 	db	98	;'b'
   335   000E72  72                 	db	114	;'r'
   336   000E73  61                 	db	97	;'a'
   337   000E74  74                 	db	116	;'t'
   338   000E75  69                 	db	105	;'i'
   339   000E76  6F                 	db	111	;'o'
   340   000E77  6E                 	db	110	;'n'
   341   000E78  20                 	db	32
   342   000E79  73                 	db	115	;'s'
   343   000E7A  74                 	db	116	;'t'
   344   000E7B  61                 	db	97	;'a'
   345   000E7C  74                 	db	116	;'t'
   346   000E7D  65                 	db	101	;'e'
   347   000E7E  20                 	db	32
   348   000E7F  3D                 	db	61	;'='
   349   000E80  20                 	db	32
   350   000E81  72                 	db	114	;'r'
   351   000E82  65                 	db	101	;'e'
   352   000E83  64                 	db	100	;'d'
   353   000E84  00                 	db	0
   354   000E85                     
   355                           ; BSR set to: 14
   356   000E85  56                 	db	86	;'V'
   357   000E86  6F                 	db	111	;'o'
   358   000E87  6C                 	db	108	;'l'
   359   000E88  74                 	db	116	;'t'
   360   000E89  61                 	db	97	;'a'
   361   000E8A  67                 	db	103	;'g'
   362   000E8B  65                 	db	101	;'e'
   363   000E8C  20                 	db	32
   364   000E8D  3D                 	db	61	;'='
   365   000E8E  20                 	db	32
   366   000E8F  25                 	db	37
   367   000E90  64                 	db	100	;'d'
   368   000E91  2E                 	db	46
   369   000E92  25                 	db	37
   370   000E93  30                 	db	48	;'0'
   371   000E94  32                 	db	50	;'2'
   372   000E95  64                 	db	100	;'d'
   373   000E96  2C                 	db	44
   374   000E97  20                 	db	32
   375   000E98  20                 	db	32
   376   000E99  00                 	db	0
   377   000E9A                     STR_12:
   378                           
   379                           ; BSR set to: 14
   380   000E9A  68                 	db	104	;'h'
   381   000E9B  75                 	db	117	;'u'
   382   000E9C  65                 	db	101	;'e'
   383   000E9D  3D                 	db	61	;'='
   384   000E9E  25                 	db	37
   385   000E9F  30                 	db	48	;'0'
   386   000EA0  33                 	db	51	;'3'
   387   000EA1  64                 	db	100	;'d'
   388   000EA2  2C                 	db	44
   389   000EA3  20                 	db	32
   390   000EA4  20                 	db	32
   391   000EA5  00                 	db	0
   392   000EA6                     STR_2:
   393                           
   394                           ; BSR set to: 14
   395   000EA6  2E                 	db	46
   396   000EA7  00                 	db	0
   397   000EA8  00                 	db	0	; dummy byte at the end
   398   000000                     
   399                           ; #config settings
   400                           
   401                           	psect	cinit
   402   003F90                     __pcinit:
   403                           	callstack 0
   404   003F90                     start_initialization:
   405                           	callstack 0
   406   003F90                     __initialization:
   407                           	callstack 0
   408                           
   409                           ; Initialize objects allocated to BANK0 (1 bytes)
   410                           ; load TBLPTR registers with __pidataBANK0
   411   003F90  0E0A               	movlw	low __pidataBANK0
   412   003F92  6EF6               	movwf	tblptrl,c
   413   003F94  0E45               	movlw	high __pidataBANK0
   414   003F96  6EF7               	movwf	tblptrh,c
   415   003F98  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   416   003F9A  6EF8               	movwf	tblptru,c
   417   003F9C  0009               	tblrd		*+	;fetch initializer
   418   003F9E  CFF5 F0ED          	movff	tablat,__pdataBANK0
   419                           
   420                           ; Clear objects allocated to BANK2 (250 bytes)
   421   003FA2  EE02  F000         	lfsr	0,__pbssBANK2
   422   003FA6  0EFA               	movlw	250
   423   003FA8                     clear_0:
   424   003FA8  6AEE               	clrf	postinc0,c
   425   003FAA  06E8               	decf	wreg,f,c
   426   003FAC  E1FD               	bnz	clear_0
   427                           
   428                           ; Clear objects allocated to BANK1 (132 bytes)
   429   003FAE  EE01  F000         	lfsr	0,__pbssBANK1
   430   003FB2  0E84               	movlw	132
   431   003FB4                     clear_1:
   432   003FB4  6AEE               	clrf	postinc0,c
   433   003FB6  06E8               	decf	wreg,f,c
   434   003FB8  E1FD               	bnz	clear_1
   435                           
   436                           ; Clear objects allocated to BANK0 (49 bytes)
   437   003FBA  EE00  F0BC         	lfsr	0,__pbssBANK0
   438   003FBE  0E31               	movlw	49
   439   003FC0                     clear_2:
   440   003FC0  6AEE               	clrf	postinc0,c
   441   003FC2  06E8               	decf	wreg,f,c
   442   003FC4  E1FD               	bnz	clear_2
   443                           
   444                           ; Clear objects allocated to COMRAM (3 bytes)
   445   003FC6  6A51               	clrf	(__pbssCOMRAM+2)& (0+255),c
   446   003FC8  6A50               	clrf	(__pbssCOMRAM+1)& (0+255),c
   447   003FCA  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   448   003FCC                     end_of_initialization:
   449                           	callstack 0
   450   003FCC                     __end_of__initialization:
   451                           	callstack 0
   452   003FCC  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   453   003FCE  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   454   003FD0  0100               	movlb	0
   455   003FD2  EF60  F011         	goto	_main	;jump to C main() function
   456                           
   457                           	psect	bssCOMRAM
   458   00004F                     __pbssCOMRAM:
   459                           	callstack 0
   460   00004F                     _TxBufReadCnt:
   461                           	callstack 0
   462   00004F                     	ds	1
   463   000050                     _TxBufWriteCnt:
   464                           	callstack 0
   465   000050                     	ds	1
   466   000051                     _RxBufWriteCnt:
   467                           	callstack 0
   468   000051                     	ds	1
   469                           
   470                           	psect	bssBANK0
   471   0000BC                     __pbssBANK0:
   472                           	callstack 0
   473   0000BC                     _hue:
   474                           	callstack 0
   475   0000BC                     	ds	8
   476   0000C4                     _width:
   477                           	callstack 0
   478   0000C4                     	ds	2
   479   0000C6                     _prec:
   480                           	callstack 0
   481   0000C6                     	ds	2
   482   0000C8                     _flags:
   483                           	callstack 0
   484   0000C8                     	ds	1
   485   0000C9                     _readingIndex:
   486                           	callstack 0
   487   0000C9                     	ds	1
   488   0000CA                     _RxBufReadCnt:
   489                           	callstack 0
   490   0000CA                     	ds	1
   491   0000CB                     _motorR:
   492                           	callstack 0
   493   0000CB                     	ds	9
   494   0000D4                     _motorL:
   495                           	callstack 0
   496   0000D4                     	ds	9
   497   0000DD                     _colorCurrent:
   498                           	callstack 0
   499   0000DD                     	ds	8
   500   0000E5                     _colorCalibration:
   501                           	callstack 0
   502   0000E5                     	ds	8
   503                           
   504                           	psect	dataBANK0
   505   0000ED                     __pdataBANK0:
   506                           	callstack 0
   507   0000ED                     _dataFlag:
   508                           	callstack 0
   509   0000ED                     	ds	1
   510                           
   511                           	psect	bssBANK1
   512   000100                     __pbssBANK1:
   513                           	callstack 0
   514   000100                     _EUSART4TXbuf:
   515                           	callstack 0
   516   000100                     	ds	60
   517   00013C                     _ldrReadings:
   518                           	callstack 0
   519   00013C                     	ds	20
   520   000150                     _EUSART4RXbuf:
   521                           	callstack 0
   522   000150                     	ds	20
   523   000164                     _dbuf:
   524                           	callstack 0
   525   000164                     	ds	32
   526                           
   527                           	psect	bssBANK2
   528   000200                     __pbssBANK2:
   529                           	callstack 0
   530   000200                     _path:
   531                           	callstack 0
   532   000200                     	ds	250
   533                           
   534                           	psect	cstackBANK0
   535   000060                     __pcstackBANK0:
   536                           	callstack 0
   537   000060                     convert_rgb2hue@redcurrent:
   538                           	callstack 0
   539   000060                     calibration_routine@cal_state:
   540                           	callstack 0
   541   000060                     send2USART@hue_char:
   542                           	callstack 0
   543                           
   544                           ; 50 bytes @ 0x0
   545   000060                     	ds	4
   546   000064                     convert_rgb2hue@redmax:
   547                           	callstack 0
   548                           
   549                           ; 4 bytes @ 0x4
   550   000064                     	ds	4
   551   000068                     convert_rgb2hue@greencurrent:
   552                           	callstack 0
   553                           
   554                           ; 4 bytes @ 0x8
   555   000068                     	ds	4
   556   00006C                     convert_rgb2hue@greenmax:
   557                           	callstack 0
   558                           
   559                           ; 4 bytes @ 0xC
   560   00006C                     	ds	4
   561   000070                     convert_rgb2hue@bluecurrent:
   562                           	callstack 0
   563                           
   564                           ; 4 bytes @ 0x10
   565   000070                     	ds	4
   566   000074                     convert_rgb2hue@bluemax:
   567                           	callstack 0
   568                           
   569                           ; 4 bytes @ 0x14
   570   000074                     	ds	4
   571   000078                     convert_rgb2hue@clearcurrent:
   572                           	callstack 0
   573                           
   574                           ; 4 bytes @ 0x18
   575   000078                     	ds	4
   576   00007C                     convert_rgb2hue@clearmax:
   577                           	callstack 0
   578                           
   579                           ; 4 bytes @ 0x1C
   580   00007C                     	ds	4
   581   000080                     _convert_rgb2hue$429:
   582                           	callstack 0
   583                           
   584                           ; 4 bytes @ 0x20
   585   000080                     	ds	4
   586   000084                     _convert_rgb2hue$430:
   587                           	callstack 0
   588                           
   589                           ; 4 bytes @ 0x24
   590   000084                     	ds	4
   591   000088                     _convert_rgb2hue$431:
   592                           	callstack 0
   593                           
   594                           ; 4 bytes @ 0x28
   595   000088                     	ds	4
   596   00008C                     _convert_rgb2hue$432:
   597                           	callstack 0
   598                           
   599                           ; 4 bytes @ 0x2C
   600   00008C                     	ds	4
   601   000090                     convert_rgb2hue@min:
   602                           	callstack 0
   603                           
   604                           ; 4 bytes @ 0x30
   605   000090                     	ds	4
   606   000094                     convert_rgb2hue@diff:
   607                           	callstack 0
   608                           
   609                           ; 4 bytes @ 0x34
   610   000094                     	ds	4
   611   000098                     convert_rgb2hue@max:
   612                           	callstack 0
   613                           
   614                           ; 4 bytes @ 0x38
   615   000098                     	ds	4
   616   00009C                     convert_rgb2hue@hue:
   617                           	callstack 0
   618                           
   619                           ; 4 bytes @ 0x3C
   620   00009C                     	ds	4
   621   0000A0                     convert_rgb2hue@r:
   622                           	callstack 0
   623                           
   624                           ; 4 bytes @ 0x40
   625   0000A0                     	ds	4
   626   0000A4                     convert_rgb2hue@g:
   627                           	callstack 0
   628                           
   629                           ; 4 bytes @ 0x44
   630   0000A4                     	ds	4
   631   0000A8                     convert_rgb2hue@b:
   632                           	callstack 0
   633                           
   634                           ; 4 bytes @ 0x48
   635   0000A8                     	ds	4
   636   0000AC                     main@maximum:
   637                           	callstack 0
   638                           
   639                           ; 4 bytes @ 0x4C
   640   0000AC                     	ds	4
   641   0000B0                     main@current:
   642                           	callstack 0
   643                           
   644                           ; 4 bytes @ 0x50
   645   0000B0                     	ds	4
   646   0000B4                     main@time:
   647                           	callstack 0
   648                           
   649                           ; 2 bytes @ 0x54
   650   0000B4                     	ds	2
   651   0000B6                     main@hue:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x56
   655   0000B6                     	ds	2
   656   0000B8                     main@path_length:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x58
   660   0000B8                     	ds	2
   661   0000BA                     main@clear_norm:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x5A
   665   0000BA                     	ds	2
   666                           
   667                           	psect	cstackCOMRAM
   668   000001                     __pcstackCOMRAM:
   669                           	callstack 0
   670   000001                     ??_LowISR:
   671   000001                     
   672                           ; 1 bytes @ 0x0
   673   000001                     	ds	1
   674   000002                     ??_I2C_2_Master_Idle:
   675   000002                     ?_get16bitTMR0val:
   676                           	callstack 0
   677   000002                     ?___wmul:
   678                           	callstack 0
   679   000002                     ?___awdiv:
   680                           	callstack 0
   681   000002                     ?___awmod:
   682                           	callstack 0
   683   000002                     ?___fladd:
   684                           	callstack 0
   685   000002                     ?___flmul:
   686                           	callstack 0
   687   000002                     ?___xxtofl:
   688                           	callstack 0
   689   000002                     sendCharSerial4@charToSend:
   690                           	callstack 0
   691   000002                     initDCmotorsPWM@PWMperiod:
   692                           	callstack 0
   693   000002                     customDelayMs@milliseconds:
   694                           	callstack 0
   695   000002                     ___wmul@multiplier:
   696                           	callstack 0
   697   000002                     ___awdiv@dividend:
   698                           	callstack 0
   699   000002                     ___awmod@dividend:
   700                           	callstack 0
   701   000002                     fputc@c:
   702                           	callstack 0
   703   000002                     ___fleq@ff1:
   704                           	callstack 0
   705   000002                     ___flge@ff1:
   706                           	callstack 0
   707   000002                     ___fladd@b:
   708                           	callstack 0
   709   000002                     ___flmul@b:
   710                           	callstack 0
   711   000002                     ___xxtofl@val:
   712                           	callstack 0
   713                           
   714                           ; 4 bytes @ 0x1
   715   000002                     	ds	1
   716   000003                     ??_I2C_2_Master_Read:
   717   000003                     I2C_2_Master_Write@data_byte:
   718                           	callstack 0
   719   000003                     sendStringSerial4@string:
   720                           	callstack 0
   721                           
   722                           ; 1 bytes @ 0x2
   723   000003                     	ds	1
   724   000004                     ??_get16bitTMR0val:
   725   000004                     ??_customDelayMs:
   726   000004                     color_writetoaddr@value:
   727                           	callstack 0
   728   000004                     I2C_2_Master_Read@ack:
   729                           	callstack 0
   730   000004                     fputc@fp:
   731                           	callstack 0
   732   000004                     ___wmul@multiplicand:
   733                           	callstack 0
   734   000004                     ___awdiv@divisor:
   735                           	callstack 0
   736   000004                     ___awmod@divisor:
   737                           	callstack 0
   738                           
   739                           ; 2 bytes @ 0x3
   740   000004                     	ds	1
   741   000005                     ??_fputc:
   742   000005                     color_writetoaddr@address:
   743                           	callstack 0
   744   000005                     I2C_2_Master_Read@tmp:
   745                           	callstack 0
   746   000005                     customDelayMs@i:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x4
   750   000005                     	ds	1
   751   000006                     ??_color_click_init:
   752   000006                     ??___xxtofl:
   753   000006                     ?_color_read_Red:
   754                           	callstack 0
   755   000006                     ?_color_read_Green:
   756                           	callstack 0
   757   000006                     ?_color_read_Blue:
   758                           	callstack 0
   759   000006                     ?_color_read_Clear:
   760                           	callstack 0
   761   000006                     ___awdiv@counter:
   762                           	callstack 0
   763   000006                     ___awmod@counter:
   764                           	callstack 0
   765   000006                     ___wmul@product:
   766                           	callstack 0
   767   000006                     ___fleq@ff2:
   768                           	callstack 0
   769   000006                     ___flge@ff2:
   770                           	callstack 0
   771   000006                     ___fladd@a:
   772                           	callstack 0
   773   000006                     ___flmul@a:
   774                           	callstack 0
   775                           
   776                           ; 4 bytes @ 0x5
   777   000006                     	ds	1
   778   000007                     ___awdiv@sign:
   779                           	callstack 0
   780   000007                     ___awmod@sign:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x6
   784   000007                     	ds	1
   785   000008                     ??_color_read_Red:
   786   000008                     ??_color_read_Green:
   787   000008                     ??_color_read_Blue:
   788   000008                     ??_color_read_Clear:
   789   000008                     ?_abs:
   790                           	callstack 0
   791   000008                     ?___lwdiv:
   792                           	callstack 0
   793   000008                     ?_read_prec_or_width:
   794                           	callstack 0
   795   000008                     read_prec_or_width@fmt:
   796                           	callstack 0
   797   000008                     logAction@time:
   798                           	callstack 0
   799   000008                     get16bitTMR0val@combined_value:
   800                           	callstack 0
   801   000008                     ___awdiv@quotient:
   802                           	callstack 0
   803   000008                     ___lwdiv@dividend:
   804                           	callstack 0
   805   000008                     abs@a:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x7
   809   000008                     	ds	1
   810   000009                     read_prec_or_width@ap:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0x8
   814   000009                     	ds	1
   815   00000A                     ??___fladd:
   816   00000A                     ??___flmul:
   817   00000A                     ??_abs:
   818   00000A                     ??___fleq:
   819   00000A                     ??___flge:
   820   00000A                     ___xxtofl@sign:
   821                           	callstack 0
   822   00000A                     read_prec_or_width@c:
   823                           	callstack 0
   824   00000A                     logAction@pathLength:
   825                           	callstack 0
   826   00000A                     ___lwdiv@divisor:
   827                           	callstack 0
   828   00000A                     fputs@s:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x9
   832   00000A                     	ds	1
   833   00000B                     ___xxtofl@exp:
   834                           	callstack 0
   835   00000B                     color_read_Red@tmp:
   836                           	callstack 0
   837   00000B                     color_read_Green@tmp:
   838                           	callstack 0
   839   00000B                     color_read_Blue@tmp:
   840                           	callstack 0
   841   00000B                     color_read_Clear@tmp:
   842                           	callstack 0
   843   00000B                     read_prec_or_width@n:
   844                           	callstack 0
   845                           
   846                           ; 2 bytes @ 0xA
   847   00000B                     	ds	1
   848   00000C                     logAction@action:
   849                           	callstack 0
   850   00000C                     fputs@fp:
   851                           	callstack 0
   852   00000C                     ___lwdiv@quotient:
   853                           	callstack 0
   854   00000C                     ___xxtofl@arg:
   855                           	callstack 0
   856                           
   857                           ; 4 bytes @ 0xB
   858   00000C                     	ds	1
   859   00000D                     fputs@c:
   860                           	callstack 0
   861                           
   862                           ; 1 bytes @ 0xC
   863   00000D                     	ds	1
   864   00000E                     ___lwdiv@counter:
   865                           	callstack 0
   866   00000E                     ___fladd@signs:
   867                           	callstack 0
   868   00000E                     ___flmul@sign:
   869                           	callstack 0
   870   00000E                     fputs@i:
   871                           	callstack 0
   872                           
   873                           ; 2 bytes @ 0xD
   874   00000E                     	ds	1
   875   00000F                     setMotorPWM@m:
   876                           	callstack 0
   877   00000F                     ___fladd@aexp:
   878                           	callstack 0
   879   00000F                     ___flmul@grs:
   880                           	callstack 0
   881                           
   882                           ; 4 bytes @ 0xE
   883   00000F                     	ds	1
   884   000010                     ??_setMotorPWM:
   885   000010                     ___fladd@bexp:
   886                           	callstack 0
   887   000010                     pad@fp:
   888                           	callstack 0
   889                           
   890                           ; 1 bytes @ 0xF
   891   000010                     	ds	1
   892   000011                     ___fladd@grs:
   893                           	callstack 0
   894   000011                     pad@buf:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x10
   898   000011                     	ds	1
   899   000012                     ?___flsub:
   900                           	callstack 0
   901   000012                     setMotorPWM@posDuty:
   902                           	callstack 0
   903   000012                     ___flsub@b:
   904                           	callstack 0
   905                           
   906                           ; 4 bytes @ 0x11
   907   000012                     	ds	1
   908   000013                     setMotorPWM@negDuty:
   909                           	callstack 0
   910   000013                     ___flmul@aexp:
   911                           	callstack 0
   912   000013                     pad@p:
   913                           	callstack 0
   914                           
   915                           ; 2 bytes @ 0x12
   916   000013                     	ds	1
   917   000014                     stop@mL:
   918                           	callstack 0
   919   000014                     turnLeft@mL:
   920                           	callstack 0
   921   000014                     turnRight@mL:
   922                           	callstack 0
   923   000014                     fullSpeedAhead@mL:
   924                           	callstack 0
   925   000014                     fullSpeedBack@mL:
   926                           	callstack 0
   927   000014                     ___flmul@bexp:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x13
   931   000014                     	ds	1
   932   000015                     ??_pad:
   933   000015                     stop@mR:
   934                           	callstack 0
   935   000015                     turnLeft@mR:
   936                           	callstack 0
   937   000015                     turnRight@mR:
   938                           	callstack 0
   939   000015                     fullSpeedAhead@mR:
   940                           	callstack 0
   941   000015                     fullSpeedBack@mR:
   942                           	callstack 0
   943   000015                     ___flmul@prod:
   944                           	callstack 0
   945                           
   946                           ; 4 bytes @ 0x14
   947   000015                     	ds	1
   948   000016                     ??_fullSpeedAhead:
   949   000016                     ??_stop:
   950   000016                     ??_turnLeft:
   951   000016                     ??_turnRight:
   952   000016                     ??_fullSpeedBack:
   953   000016                     pad@i:
   954                           	callstack 0
   955   000016                     ___flsub@a:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0x15
   959   000016                     	ds	1
   960   000017                     turnLeft@i:
   961                           	callstack 0
   962   000017                     turnRight@i:
   963                           	callstack 0
   964   000017                     fullSpeedAhead@power:
   965                           	callstack 0
   966   000017                     fullSpeedBack@power:
   967                           	callstack 0
   968                           
   969                           ; 2 bytes @ 0x16
   970   000017                     	ds	1
   971   000018                     dtoa@fp:
   972                           	callstack 0
   973                           
   974                           ; 1 bytes @ 0x17
   975   000018                     	ds	1
   976   000019                     right90@mL:
   977                           	callstack 0
   978   000019                     left90@mL:
   979                           	callstack 0
   980   000019                     turn180@mL:
   981                           	callstack 0
   982   000019                     right135@mL:
   983                           	callstack 0
   984   000019                     left135@mL:
   985                           	callstack 0
   986   000019                     backHalf@mL:
   987                           	callstack 0
   988   000019                     backOneAndHalf@mL:
   989                           	callstack 0
   990   000019                     reverseStraight@mL:
   991                           	callstack 0
   992   000019                     ___flmul@temp:
   993                           	callstack 0
   994   000019                     dtoa@d:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0x18
   998   000019                     	ds	1
   999   00001A                     right90@mR:
  1000                           	callstack 0
  1001   00001A                     left90@mR:
  1002                           	callstack 0
  1003   00001A                     turn180@mR:
  1004                           	callstack 0
  1005   00001A                     right135@mR:
  1006                           	callstack 0
  1007   00001A                     left135@mR:
  1008                           	callstack 0
  1009   00001A                     backHalf@mR:
  1010                           	callstack 0
  1011   00001A                     backOneAndHalf@mR:
  1012                           	callstack 0
  1013   00001A                     reverseStraight@mR:
  1014                           	callstack 0
  1015                           
  1016                           ; 1 bytes @ 0x19
  1017   00001A                     	ds	1
  1018   00001B                     ??_right90:
  1019   00001B                     ??_left90:
  1020   00001B                     ??_turn180:
  1021   00001B                     ??_right135:
  1022   00001B                     ??_left135:
  1023   00001B                     ??_backHalf:
  1024   00001B                     ??_backOneAndHalf:
  1025   00001B                     ?___fldiv:
  1026                           	callstack 0
  1027   00001B                     reverseStraight@time:
  1028                           	callstack 0
  1029   00001B                     _dtoa$3045:
  1030                           	callstack 0
  1031   00001B                     ___fldiv@b:
  1032                           	callstack 0
  1033                           
  1034                           ; 4 bytes @ 0x1A
  1035   00001B                     	ds	2
  1036   00001D                     moveRed@mL:
  1037                           	callstack 0
  1038   00001D                     moveGreen@mL:
  1039                           	callstack 0
  1040   00001D                     moveBlue@mL:
  1041                           	callstack 0
  1042   00001D                     moveYellow@mL:
  1043                           	callstack 0
  1044   00001D                     movePink@mL:
  1045                           	callstack 0
  1046   00001D                     moveOrange@mL:
  1047                           	callstack 0
  1048   00001D                     moveLightBlue@mL:
  1049                           	callstack 0
  1050   00001D                     moveWhite@mL:
  1051                           	callstack 0
  1052   00001D                     reverseTurn@mL:
  1053                           	callstack 0
  1054   00001D                     dtoa@p:
  1055                           	callstack 0
  1056   00001D                     reverseStraight@delayMs:
  1057                           	callstack 0
  1058                           
  1059                           ; 2 bytes @ 0x1C
  1060   00001D                     	ds	1
  1061   00001E                     moveRed@mR:
  1062                           	callstack 0
  1063   00001E                     moveGreen@mR:
  1064                           	callstack 0
  1065   00001E                     moveBlue@mR:
  1066                           	callstack 0
  1067   00001E                     moveYellow@mR:
  1068                           	callstack 0
  1069   00001E                     movePink@mR:
  1070                           	callstack 0
  1071   00001E                     moveOrange@mR:
  1072                           	callstack 0
  1073   00001E                     moveLightBlue@mR:
  1074                           	callstack 0
  1075   00001E                     moveWhite@mR:
  1076                           	callstack 0
  1077   00001E                     reverseTurn@mR:
  1078                           	callstack 0
  1079   00001E                     dtoa@w:
  1080                           	callstack 0
  1081                           
  1082                           ; 2 bytes @ 0x1D
  1083   00001E                     	ds	1
  1084   00001F                     ??_moveWhite:
  1085   00001F                     reverseTurn@turnDirection:
  1086                           	callstack 0
  1087   00001F                     moveRed@path_length:
  1088                           	callstack 0
  1089   00001F                     moveGreen@path_length:
  1090                           	callstack 0
  1091   00001F                     moveBlue@path_length:
  1092                           	callstack 0
  1093   00001F                     moveYellow@path_length:
  1094                           	callstack 0
  1095   00001F                     movePink@path_length:
  1096                           	callstack 0
  1097   00001F                     moveOrange@path_length:
  1098                           	callstack 0
  1099   00001F                     moveLightBlue@path_length:
  1100                           	callstack 0
  1101   00001F                     ___fldiv@a:
  1102                           	callstack 0
  1103                           
  1104                           ; 4 bytes @ 0x1E
  1105   00001F                     	ds	1
  1106   000020                     dtoa@s:
  1107                           	callstack 0
  1108                           
  1109                           ; 1 bytes @ 0x1F
  1110   000020                     	ds	1
  1111   000021                     ??_moveRed:
  1112   000021                     ??_moveGreen:
  1113   000021                     ??_moveBlue:
  1114   000021                     ??_moveLightBlue:
  1115   000021                     ??_moveYellow:
  1116   000021                     ??_moveOrange:
  1117   000021                     ??_movePink:
  1118   000021                     returnHome@mL:
  1119                           	callstack 0
  1120   000021                     dtoa@i:
  1121                           	callstack 0
  1122                           
  1123                           ; 2 bytes @ 0x20
  1124   000021                     	ds	1
  1125   000022                     returnHome@mR:
  1126                           	callstack 0
  1127                           
  1128                           ; 1 bytes @ 0x21
  1129   000022                     	ds	1
  1130   000023                     ??___fldiv:
  1131   000023                     vfpfcnvrt@fp:
  1132                           	callstack 0
  1133   000023                     returnHome@path:
  1134                           	callstack 0
  1135                           
  1136                           ; 2 bytes @ 0x22
  1137   000023                     	ds	1
  1138   000024                     vfpfcnvrt@fmt:
  1139                           	callstack 0
  1140                           
  1141                           ; 1 bytes @ 0x23
  1142   000024                     	ds	1
  1143   000025                     vfpfcnvrt@ap:
  1144                           	callstack 0
  1145   000025                     returnHome@pathLength:
  1146                           	callstack 0
  1147                           
  1148                           ; 2 bytes @ 0x24
  1149   000025                     	ds	1
  1150   000026                     ??_vfpfcnvrt:
  1151                           
  1152                           ; 1 bytes @ 0x25
  1153   000026                     	ds	1
  1154   000027                     ??_returnHome:
  1155   000027                     ___fldiv@rem:
  1156                           	callstack 0
  1157                           
  1158                           ; 4 bytes @ 0x26
  1159   000027                     	ds	1
  1160   000028                     vfpfcnvrt@convarg:
  1161                           	callstack 0
  1162                           
  1163                           ; 4 bytes @ 0x27
  1164   000028                     	ds	1
  1165   000029                     returnHome@time:
  1166                           	callstack 0
  1167                           
  1168                           ; 2 bytes @ 0x28
  1169   000029                     	ds	2
  1170   00002B                     returnHome@action:
  1171                           	callstack 0
  1172   00002B                     ___fldiv@sign:
  1173                           	callstack 0
  1174                           
  1175                           ; 1 bytes @ 0x2A
  1176   00002B                     	ds	1
  1177   00002C                     vfpfcnvrt@done:
  1178                           	callstack 0
  1179   00002C                     returnHome@i:
  1180                           	callstack 0
  1181   00002C                     ___fldiv@new_exp:
  1182                           	callstack 0
  1183                           
  1184                           ; 2 bytes @ 0x2B
  1185   00002C                     	ds	1
  1186   00002D                     vfpfcnvrt@cp:
  1187                           	callstack 0
  1188                           
  1189                           ; 1 bytes @ 0x2C
  1190   00002D                     	ds	1
  1191   00002E                     ?_vfprintf:
  1192                           	callstack 0
  1193   00002E                     vfprintf@fp:
  1194                           	callstack 0
  1195   00002E                     ___fldiv@grs:
  1196                           	callstack 0
  1197                           
  1198                           ; 4 bytes @ 0x2D
  1199   00002E                     	ds	1
  1200   00002F                     vfprintf@fmt:
  1201                           	callstack 0
  1202                           
  1203                           ; 1 bytes @ 0x2E
  1204   00002F                     	ds	1
  1205   000030                     vfprintf@ap:
  1206                           	callstack 0
  1207                           
  1208                           ; 1 bytes @ 0x2F
  1209   000030                     	ds	1
  1210   000031                     vfprintf@cfmt:
  1211                           	callstack 0
  1212                           
  1213                           ; 1 bytes @ 0x30
  1214   000031                     	ds	1
  1215   000032                     ?_sprintf:
  1216                           	callstack 0
  1217   000032                     ___fldiv@bexp:
  1218                           	callstack 0
  1219   000032                     sprintf@s:
  1220                           	callstack 0
  1221                           
  1222                           ; 1 bytes @ 0x31
  1223   000032                     	ds	1
  1224   000033                     ___fldiv@aexp:
  1225                           	callstack 0
  1226   000033                     sprintf@fmt:
  1227                           	callstack 0
  1228                           
  1229                           ; 1 bytes @ 0x32
  1230   000033                     	ds	1
  1231   000034                     ?___fltol:
  1232                           	callstack 0
  1233   000034                     ___fltol@f1:
  1234                           	callstack 0
  1235                           
  1236                           ; 4 bytes @ 0x33
  1237   000034                     	ds	4
  1238   000038                     ??___fltol:
  1239   000038                     sprintf@ap:
  1240                           	callstack 0
  1241                           
  1242                           ; 1 bytes @ 0x37
  1243   000038                     	ds	1
  1244   000039                     sprintf@f:
  1245                           	callstack 0
  1246                           
  1247                           ; 12 bytes @ 0x38
  1248   000039                     	ds	3
  1249   00003C                     ___fltol@sign1:
  1250                           	callstack 0
  1251                           
  1252                           ; 1 bytes @ 0x3B
  1253   00003C                     	ds	1
  1254   00003D                     ___fltol@exp1:
  1255                           	callstack 0
  1256                           
  1257                           ; 1 bytes @ 0x3C
  1258   00003D                     	ds	1
  1259   00003E                     ?_convert_rgb2hue:
  1260                           	callstack 0
  1261   00003E                     convert_rgb2hue@cMax:
  1262                           	callstack 0
  1263                           
  1264                           ; 1 bytes @ 0x3D
  1265   00003E                     	ds	1
  1266   00003F                     convert_rgb2hue@cCurr:
  1267                           	callstack 0
  1268                           
  1269                           ; 1 bytes @ 0x3E
  1270   00003F                     	ds	1
  1271   000040                     ??_convert_rgb2hue:
  1272                           
  1273                           ; 1 bytes @ 0x3F
  1274   000040                     	ds	2
  1275   000042                     ?_reading_hue:
  1276                           	callstack 0
  1277   000042                     reading_hue@cCurr:
  1278                           	callstack 0
  1279                           
  1280                           ; 1 bytes @ 0x41
  1281   000042                     	ds	2
  1282   000044                     ??_reading_hue:
  1283                           
  1284                           ; 1 bytes @ 0x43
  1285   000044                     	ds	1
  1286   000045                     calibration_routine@cCal:
  1287                           	callstack 0
  1288   000045                     send2USART@hue:
  1289                           	callstack 0
  1290                           
  1291                           ; 2 bytes @ 0x44
  1292   000045                     	ds	1
  1293   000046                     ??_calibration_routine:
  1294   000046                     reading_hue@hue:
  1295                           	callstack 0
  1296                           
  1297                           ; 2 bytes @ 0x45
  1298   000046                     	ds	1
  1299   000047                     decision@hue:
  1300                           	callstack 0
  1301                           
  1302                           ; 2 bytes @ 0x46
  1303   000047                     	ds	2
  1304   000049                     decision@path_length:
  1305                           	callstack 0
  1306                           
  1307                           ; 2 bytes @ 0x48
  1308   000049                     	ds	2
  1309   00004B                     decision@color:
  1310                           	callstack 0
  1311                           
  1312                           ; 2 bytes @ 0x4A
  1313   00004B                     	ds	2
  1314   00004D                     ??_main:
  1315                           
  1316                           ; 1 bytes @ 0x4C
  1317   00004D                     	ds	2
  1318                           
  1319 ;;
  1320 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1321 ;;
  1322 ;; *************** function _main *****************
  1323 ;; Defined at:
  1324 ;;		line 29 in file "main.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  white           2    0        unsigned int 
  1329 ;;  time            2   84[BANK0 ] int 
  1330 ;;  hue_char       20    0        unsigned char [20]
  1331 ;;  current         4   80[BANK0 ] float 
  1332 ;;  maximum         4   76[BANK0 ] float 
  1333 ;;  clear_norm      2   90[BANK0 ] unsigned int 
  1334 ;;  path_length     2   88[BANK0 ] unsigned int 
  1335 ;;  hue             2   86[BANK0 ] unsigned int 
  1336 ;;  PWMcycle        2    0        unsigned int 
  1337 ;;  clear           2    0        unsigned int 
  1338 ;;  green           2    0        unsigned int 
  1339 ;;  blue            2    0        unsigned int 
  1340 ;;  red             2    0        unsigned int 
  1341 ;;  battery_leve    2    0        unsigned int 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1352 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1353 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;Total ram usage:       18 bytes
  1356 ;; Hardware stack levels required when called: 11
  1357 ;; This function calls:
  1358 ;;		_ADC_init
  1359 ;;		___fldiv
  1360 ;;		___flmul
  1361 ;;		___fltol
  1362 ;;		___xxtofl
  1363 ;;		_calibration_routine
  1364 ;;		_color_click_init
  1365 ;;		_color_read_Clear
  1366 ;;		_decision
  1367 ;;		_fullSpeedAhead
  1368 ;;		_get16bitTMR0val
  1369 ;;		_initDCmotorsPWM
  1370 ;;		_initUSART4
  1371 ;;		_logAction
  1372 ;;		_reading_hue
  1373 ;;		_returnHome
  1374 ;;		_send2USART
  1375 ;;		_stop
  1376 ;; This function is called by:
  1377 ;;		Startup code after reset
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text0
  1382   0022C0                     __ptext0:
  1383                           	callstack 0
  1384   0022C0                     _main:
  1385                           	callstack 20
  1386   0022C0                     
  1387                           ;main.c: 31:     ADC_init();
  1388   0022C0  EC56  F022         	call	_ADC_init	;wreg free
  1389   0022C4                     
  1390                           ;main.c: 32:     color_click_init();
  1391   0022C4  ECAF  F020         	call	_color_click_init	;wreg free
  1392   0022C8                     
  1393                           ;main.c: 33:     initUSART4();
  1394   0022C8  EC38  F022         	call	_initUSART4	;wreg free
  1395   0022CC                     
  1396                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
  1397   0022CC  0E00               	movlw	0
  1398   0022CE  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1399   0022D0  0E63               	movlw	99
  1400   0022D2  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1401   0022D4  EC38  F01C         	call	_initDCmotorsPWM	;wreg free
  1402   0022D8                     
  1403                           ;main.c: 40:     motorL.power = 0;
  1404   0022D8  0E00               	movlw	0
  1405   0022DA  0100               	movlb	0	; () banked
  1406   0022DC  6FD4               	movwf	_motorL& (0+255),b
  1407   0022DE                     
  1408                           ; BSR set to: 0
  1409                           ;main.c: 41:     motorL.direction = 1;
  1410   0022DE  0E01               	movlw	1
  1411   0022E0  6FD5               	movwf	(_motorL+1)& (0+255),b
  1412   0022E2                     
  1413                           ; BSR set to: 0
  1414                           ;main.c: 42:     motorL.brakemode = 1;
  1415   0022E2  0E01               	movlw	1
  1416   0022E4  6FD6               	movwf	(_motorL+2)& (0+255),b
  1417   0022E6                     
  1418                           ; BSR set to: 0
  1419                           ;main.c: 43:     motorL.PWMperiod = PWMcycle;
  1420   0022E6  0E00               	movlw	0
  1421   0022E8  6FD8               	movwf	(_motorL+4)& (0+255),b
  1422   0022EA  0E63               	movlw	99
  1423   0022EC  6FD7               	movwf	(_motorL+3)& (0+255),b
  1424   0022EE                     
  1425                           ; BSR set to: 0
  1426                           ;main.c: 44:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1427   0022EE  0EAA               	movlw	170
  1428   0022F0  6FD9               	movwf	(_motorL+5)& (0+255),b
  1429   0022F2  0E0F               	movlw	15
  1430   0022F4  6FDA               	movwf	(_motorL+6)& (0+255),b
  1431   0022F6                     
  1432                           ; BSR set to: 0
  1433                           ;main.c: 45:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1434   0022F6  0EA6               	movlw	166
  1435   0022F8  6FDB               	movwf	(_motorL+7)& (0+255),b
  1436   0022FA  0E0F               	movlw	15
  1437   0022FC  6FDC               	movwf	(_motorL+8)& (0+255),b
  1438   0022FE                     
  1439                           ; BSR set to: 0
  1440                           ;main.c: 47:     motorR.power = 0;
  1441   0022FE  0E00               	movlw	0
  1442   002300  6FCB               	movwf	_motorR& (0+255),b
  1443   002302                     
  1444                           ; BSR set to: 0
  1445                           ;main.c: 48:     motorR.direction = 1;
  1446   002302  0E01               	movlw	1
  1447   002304  6FCC               	movwf	(_motorR+1)& (0+255),b
  1448   002306                     
  1449                           ; BSR set to: 0
  1450                           ;main.c: 49:     motorR.brakemode = 1;
  1451   002306  0E01               	movlw	1
  1452   002308  6FCD               	movwf	(_motorR+2)& (0+255),b
  1453   00230A                     
  1454                           ; BSR set to: 0
  1455                           ;main.c: 50:     motorR.PWMperiod = PWMcycle;
  1456   00230A  0E00               	movlw	0
  1457   00230C  6FCF               	movwf	(_motorR+4)& (0+255),b
  1458   00230E  0E63               	movlw	99
  1459   002310  6FCE               	movwf	(_motorR+3)& (0+255),b
  1460                           
  1461                           ;main.c: 51:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1462   002312  0E25               	movlw	37
  1463   002314  6FD0               	movwf	(_motorR+5)& (0+255),b
  1464   002316  0E0F               	movlw	15
  1465   002318  6FD1               	movwf	(_motorR+6)& (0+255),b
  1466                           
  1467                           ;main.c: 52:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1468   00231A  0E21               	movlw	33
  1469   00231C  6FD2               	movwf	(_motorR+7)& (0+255),b
  1470   00231E  0E0F               	movlw	15
  1471   002320  6FD3               	movwf	(_motorR+8)& (0+255),b
  1472   002322                     
  1473                           ; BSR set to: 0
  1474                           ;main.c: 55:     LATDbits.LATD7=0;
  1475   002322  9E7C               	bcf	124,7,c	;volatile
  1476   002324                     
  1477                           ; BSR set to: 0
  1478                           ;main.c: 56:     TRISDbits.TRISD7=0;
  1479   002324  9E84               	bcf	132,7,c	;volatile
  1480   002326                     
  1481                           ; BSR set to: 0
  1482                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1483   002326  9087               	bcf	135,0,c	;volatile
  1484   002328                     
  1485                           ; BSR set to: 0
  1486                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1487   002328  907F               	bcf	127,0,c	;volatile
  1488   00232A                     
  1489                           ; BSR set to: 0
  1490                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1491   00232A  9E85               	bcf	133,7,c	;volatile
  1492   00232C                     
  1493                           ; BSR set to: 0
  1494                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1495   00232C  9E7D               	bcf	125,7,c	;volatile
  1496   00232E                     
  1497                           ; BSR set to: 0
  1498                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1499   00232E  9681               	bcf	129,3,c	;volatile
  1500   002330                     
  1501                           ; BSR set to: 0
  1502                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1503   002330  9679               	bcf	121,3,c	;volatile
  1504   002332                     
  1505                           ; BSR set to: 0
  1506                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1507   002332  8686               	bsf	134,3,c	;volatile
  1508   002334                     
  1509                           ; BSR set to: 0
  1510                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1511   002334  010E               	movlb	14	; () banked
  1512   002336  97B4               	bcf	180,3,b	;volatile
  1513   002338                     
  1514                           ; BSR set to: 14
  1515                           ;main.c: 75:     TRISFbits.TRISF2 = 1;
  1516   002338  8486               	bsf	134,2,c	;volatile
  1517   00233A                     
  1518                           ; BSR set to: 14
  1519                           ;main.c: 76:     LATFbits.LATF2 = 0;
  1520   00233A  947E               	bcf	126,2,c	;volatile
  1521   00233C                     
  1522                           ; BSR set to: 14
  1523                           ;main.c: 77:     ANSELFbits.ANSELF2 = 0;
  1524   00233C  95B4               	bcf	180,2,b	;volatile
  1525   00233E                     
  1526                           ; BSR set to: 14
  1527                           ;main.c: 80:     TRISGbits.TRISG1 = 0;
  1528   00233E  9287               	bcf	135,1,c	;volatile
  1529   002340                     
  1530                           ; BSR set to: 14
  1531                           ;main.c: 81:     LATGbits.LATG1 = 0;
  1532   002340  927F               	bcf	127,1,c	;volatile
  1533   002342                     
  1534                           ; BSR set to: 14
  1535                           ;main.c: 84:     unsigned int battery_level;;main.c: 85:     unsigned int red;;main.c: 8
      +                          6:     unsigned int blue;;main.c: 87:     unsigned int green;;main.c: 88:     unsigned i
      +                          nt clear;;main.c: 89:     unsigned int hue;;main.c: 90:     char hue_char[20];;main.c: 9
      +                          1:     unsigned int path_length = 0;
  1536   002342  0E00               	movlw	0
  1537   002344  0100               	movlb	0	; () banked
  1538   002346  6FB9               	movwf	(main@path_length+1)& (0+255),b
  1539   002348  0E00               	movlw	0
  1540   00234A  6FB8               	movwf	main@path_length& (0+255),b
  1541   00234C                     
  1542                           ; BSR set to: 0
  1543                           ;main.c: 95:     TRISHbits.TRISH3 = 0;
  1544   00234C  9688               	bcf	136,3,c	;volatile
  1545   00234E                     
  1546                           ; BSR set to: 0
  1547                           ;main.c: 96:     LATHbits.LATH3 = 1;
  1548   00234E  8680               	bsf	128,3,c	;volatile
  1549   002350                     
  1550                           ; BSR set to: 0
  1551                           ;main.c: 97:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1552   002350  0E19               	movlw	25
  1553   002352  6E4E               	movwf	(??_main+1)^0,c
  1554   002354  0E5A               	movlw	90
  1555   002356  6E4D               	movwf	??_main^0,c
  1556   002358  0EB2               	movlw	178
  1557   00235A                     u5417:
  1558   00235A  2EE8               	decfsz	wreg,f,c
  1559   00235C  D7FE               	bra	u5417
  1560   00235E  2E4D               	decfsz	??_main^0,f,c
  1561   002360  D7FC               	bra	u5417
  1562   002362  2E4E               	decfsz	(??_main+1)^0,f,c
  1563   002364  D7FA               	bra	u5417
  1564   002366                     
  1565                           ;main.c: 98:     LATHbits.LATH3 = 0;
  1566   002366  9680               	bcf	128,3,c	;volatile
  1567   002368                     
  1568                           ;main.c: 102:     calibration_routine(&colorCalibration);
  1569   002368  0EE5               	movlw	low _colorCalibration
  1570   00236A  6E45               	movwf	calibration_routine@cCal^0,c
  1571   00236C  ECF8  F013         	call	_calibration_routine	;wreg free
  1572   002370                     
  1573                           ;main.c: 104:     float maximum = colorCalibration.clear;
  1574   002370  C0EB  F002         	movff	_colorCalibration+6,___xxtofl@val
  1575   002374  C0EC  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1576   002378  6A04               	clrf	(___xxtofl@val+2)^0,c
  1577   00237A  6A05               	clrf	(___xxtofl@val+3)^0,c
  1578   00237C  0E00               	movlw	0
  1579   00237E  ECE1  F014         	call	___xxtofl
  1580   002382  C002  F0AC         	movff	?___xxtofl,main@maximum
  1581   002386  C003  F0AD         	movff	?___xxtofl+1,main@maximum+1
  1582   00238A  C004  F0AE         	movff	?___xxtofl+2,main@maximum+2
  1583   00238E  C005  F0AF         	movff	?___xxtofl+3,main@maximum+3
  1584   002392                     l5977:
  1585                           
  1586                           ;main.c: 110:         LATGbits.LATG0 = 1;
  1587   002392  807F               	bsf	127,0,c	;volatile
  1588   002394                     
  1589                           ;main.c: 111:         LATEbits.LATE7 = 1;
  1590   002394  8E7D               	bsf	125,7,c	;volatile
  1591   002396                     
  1592                           ;main.c: 112:         LATAbits.LATA3 = 1;
  1593   002396  8679               	bsf	121,3,c	;volatile
  1594   002398                     
  1595                           ;main.c: 115:         fullSpeedAhead(&motorL,&motorR);
  1596   002398  0ED4               	movlw	low _motorL
  1597   00239A  6E14               	movwf	fullSpeedAhead@mL^0,c
  1598   00239C  0ECB               	movlw	low _motorR
  1599   00239E  6E15               	movwf	fullSpeedAhead@mR^0,c
  1600   0023A0  EC45  F01D         	call	_fullSpeedAhead	;wreg free
  1601   0023A4                     
  1602                           ;main.c: 116:         T0CON0bits.T0EN=1;
  1603   0023A4  8ED5               	bsf	213,7,c	;volatile
  1604   0023A6                     
  1605                           ;main.c: 118:         (colorCurrent.clear) = color_read_Clear();
  1606   0023A6  EC7C  F01E         	call	_color_read_Clear	;wreg free
  1607   0023AA  C006  F0E3         	movff	?_color_read_Clear,_colorCurrent+6
  1608   0023AE  C007  F0E4         	movff	?_color_read_Clear+1,_colorCurrent+7
  1609   0023B2                     
  1610                           ;main.c: 119:         current = colorCurrent.clear;
  1611   0023B2  C0E3  F002         	movff	_colorCurrent+6,___xxtofl@val
  1612   0023B6  C0E4  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1613   0023BA  6A04               	clrf	(___xxtofl@val+2)^0,c
  1614   0023BC  6A05               	clrf	(___xxtofl@val+3)^0,c
  1615   0023BE  0E00               	movlw	0
  1616   0023C0  ECE1  F014         	call	___xxtofl
  1617   0023C4  C002  F0B0         	movff	?___xxtofl,main@current
  1618   0023C8  C003  F0B1         	movff	?___xxtofl+1,main@current+1
  1619   0023CC  C004  F0B2         	movff	?___xxtofl+2,main@current+2
  1620   0023D0  C005  F0B3         	movff	?___xxtofl+3,main@current+3
  1621   0023D4                     
  1622                           ;main.c: 121:         clear_norm = (current)*100/(maximum);
  1623   0023D4  C0AC  F01F         	movff	main@maximum,___fldiv@a
  1624   0023D8  C0AD  F020         	movff	main@maximum+1,___fldiv@a+1
  1625   0023DC  C0AE  F021         	movff	main@maximum+2,___fldiv@a+2
  1626   0023E0  C0AF  F022         	movff	main@maximum+3,___fldiv@a+3
  1627   0023E4  0E00               	movlw	0
  1628   0023E6  6E06               	movwf	___flmul@a^0,c
  1629   0023E8  0E00               	movlw	0
  1630   0023EA  6E07               	movwf	(___flmul@a+1)^0,c
  1631   0023EC  0EC8               	movlw	200
  1632   0023EE  6E08               	movwf	(___flmul@a+2)^0,c
  1633   0023F0  0E42               	movlw	66
  1634   0023F2  6E09               	movwf	(___flmul@a+3)^0,c
  1635   0023F4  C0B0  F002         	movff	main@current,___flmul@b
  1636   0023F8  C0B1  F003         	movff	main@current+1,___flmul@b+1
  1637   0023FC  C0B2  F004         	movff	main@current+2,___flmul@b+2
  1638   002400  C0B3  F005         	movff	main@current+3,___flmul@b+3
  1639   002404  EC7E  F00D         	call	___flmul	;wreg free
  1640   002408  C002  F01B         	movff	?___flmul,___fldiv@b
  1641   00240C  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1642   002410  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1643   002414  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1644   002418  EC93  F00F         	call	___fldiv	;wreg free
  1645   00241C  C01B  F034         	movff	?___fldiv,___fltol@f1
  1646   002420  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1647   002424  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1648   002428  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1649   00242C  ECE5  F017         	call	___fltol	;wreg free
  1650   002430  C034  F0BA         	movff	?___fltol,main@clear_norm
  1651   002434  C035  F0BB         	movff	?___fltol+1,main@clear_norm+1
  1652   002438                     
  1653                           ;main.c: 124:         if (clear_norm > 8){
  1654   002438  0100               	movlb	0	; () banked
  1655   00243A  51BB               	movf	(main@clear_norm+1)& (0+255),w,b
  1656   00243C  E109               	bnz	u5340
  1657   00243E  0E09               	movlw	9
  1658   002440  5DBA               	subwf	main@clear_norm& (0+255),w,b
  1659   002442  A0D8               	btfss	status,0,c
  1660   002444  EF26  F012         	goto	u5341
  1661   002448  EF28  F012         	goto	u5340
  1662   00244C                     u5341:
  1663   00244C  EFC9  F011         	goto	l5977
  1664   002450                     u5340:
  1665   002450                     
  1666                           ; BSR set to: 0
  1667                           ;main.c: 126:             stop(&motorL,&motorR);
  1668   002450  0ED4               	movlw	low _motorL
  1669   002452  6E14               	movwf	stop@mL^0,c
  1670   002454  0ECB               	movlw	low _motorR
  1671   002456  6E15               	movwf	stop@mR^0,c
  1672   002458  EC80  F01C         	call	_stop	;wreg free
  1673   00245C                     
  1674                           ;main.c: 128:             int time = get16bitTMR0val();
  1675   00245C  EC17  F022         	call	_get16bitTMR0val	;wreg free
  1676   002460  C002  F0B4         	movff	?_get16bitTMR0val,main@time
  1677   002464  C003  F0B5         	movff	?_get16bitTMR0val+1,main@time+1
  1678   002468                     
  1679                           ;main.c: 129:             T0CON0bits.T0EN=0;
  1680   002468  9ED5               	bcf	213,7,c	;volatile
  1681   00246A                     
  1682                           ;main.c: 130:             logAction('F',time, path_length);
  1683   00246A  C0B4  F008         	movff	main@time,logAction@time
  1684   00246E  C0B5  F009         	movff	main@time+1,logAction@time+1
  1685   002472  C0B8  F00A         	movff	main@path_length,logAction@pathLength
  1686   002476  C0B9  F00B         	movff	main@path_length+1,logAction@pathLength+1
  1687   00247A  0E46               	movlw	70
  1688   00247C  ECF7  F01D         	call	_logAction
  1689   002480                     
  1690                           ;main.c: 131:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1691   002480  0E11               	movlw	17
  1692   002482  6E4E               	movwf	(??_main+1)^0,c
  1693   002484  0E3C               	movlw	60
  1694   002486  6E4D               	movwf	??_main^0,c
  1695   002488  0ECB               	movlw	203
  1696   00248A                     u5427:
  1697   00248A  2EE8               	decfsz	wreg,f,c
  1698   00248C  D7FE               	bra	u5427
  1699   00248E  2E4D               	decfsz	??_main^0,f,c
  1700   002490  D7FC               	bra	u5427
  1701   002492  2E4E               	decfsz	(??_main+1)^0,f,c
  1702   002494  D7FA               	bra	u5427
  1703   002496  0000               	nop	
  1704   002498                     
  1705                           ;main.c: 134:             fullSpeedAhead(&motorL,&motorR);
  1706   002498  0ED4               	movlw	low _motorL
  1707   00249A  6E14               	movwf	fullSpeedAhead@mL^0,c
  1708   00249C  0ECB               	movlw	low _motorR
  1709   00249E  6E15               	movwf	fullSpeedAhead@mR^0,c
  1710   0024A0  EC45  F01D         	call	_fullSpeedAhead	;wreg free
  1711   0024A4                     
  1712                           ;main.c: 135:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1713   0024A4  0E09               	movlw	9
  1714   0024A6  6E4E               	movwf	(??_main+1)^0,c
  1715   0024A8  0E1E               	movlw	30
  1716   0024AA  6E4D               	movwf	??_main^0,c
  1717   0024AC  0EE4               	movlw	228
  1718   0024AE                     u5437:
  1719   0024AE  2EE8               	decfsz	wreg,f,c
  1720   0024B0  D7FE               	bra	u5437
  1721   0024B2  2E4D               	decfsz	??_main^0,f,c
  1722   0024B4  D7FC               	bra	u5437
  1723   0024B6  2E4E               	decfsz	(??_main+1)^0,f,c
  1724   0024B8  D7FA               	bra	u5437
  1725   0024BA  D000               	nop2	
  1726   0024BC                     
  1727                           ;main.c: 136:             stop(&motorL,&motorR);
  1728   0024BC  0ED4               	movlw	low _motorL
  1729   0024BE  6E14               	movwf	stop@mL^0,c
  1730   0024C0  0ECB               	movlw	low _motorR
  1731   0024C2  6E15               	movwf	stop@mR^0,c
  1732   0024C4  EC80  F01C         	call	_stop	;wreg free
  1733   0024C8                     
  1734                           ;main.c: 137:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1735   0024C8  0E19               	movlw	25
  1736   0024CA  6E4E               	movwf	(??_main+1)^0,c
  1737   0024CC  0E5A               	movlw	90
  1738   0024CE  6E4D               	movwf	??_main^0,c
  1739   0024D0  0EB2               	movlw	178
  1740   0024D2                     u5447:
  1741   0024D2  2EE8               	decfsz	wreg,f,c
  1742   0024D4  D7FE               	bra	u5447
  1743   0024D6  2E4D               	decfsz	??_main^0,f,c
  1744   0024D8  D7FC               	bra	u5447
  1745   0024DA  2E4E               	decfsz	(??_main+1)^0,f,c
  1746   0024DC  D7FA               	bra	u5447
  1747   0024DE                     
  1748                           ;main.c: 140:             if (clear_norm > 50){
  1749   0024DE  0100               	movlb	0	; () banked
  1750   0024E0  51BB               	movf	(main@clear_norm+1)& (0+255),w,b
  1751   0024E2  E109               	bnz	u5350
  1752   0024E4  0E33               	movlw	51
  1753   0024E6  5DBA               	subwf	main@clear_norm& (0+255),w,b
  1754   0024E8  A0D8               	btfss	status,0,c
  1755   0024EA  EF79  F012         	goto	u5351
  1756   0024EE  EF7B  F012         	goto	u5350
  1757   0024F2                     u5351:
  1758   0024F2  EF93  F012         	goto	l6021
  1759   0024F6                     u5350:
  1760   0024F6                     
  1761                           ; BSR set to: 0
  1762                           ;main.c: 141:                 fullSpeedAhead(&motorL,&motorR);
  1763   0024F6  0ED4               	movlw	low _motorL
  1764   0024F8  6E14               	movwf	fullSpeedAhead@mL^0,c
  1765   0024FA  0ECB               	movlw	low _motorR
  1766   0024FC  6E15               	movwf	fullSpeedAhead@mR^0,c
  1767   0024FE  EC45  F01D         	call	_fullSpeedAhead	;wreg free
  1768   002502                     
  1769                           ;main.c: 142:                 _delay((unsigned long)((100)*(64000000/4000.0)));
  1770   002502  0E09               	movlw	9
  1771   002504  6E4E               	movwf	(??_main+1)^0,c
  1772   002506  0E1E               	movlw	30
  1773   002508  6E4D               	movwf	??_main^0,c
  1774   00250A  0EE4               	movlw	228
  1775   00250C                     u5457:
  1776   00250C  2EE8               	decfsz	wreg,f,c
  1777   00250E  D7FE               	bra	u5457
  1778   002510  2E4D               	decfsz	??_main^0,f,c
  1779   002512  D7FC               	bra	u5457
  1780   002514  2E4E               	decfsz	(??_main+1)^0,f,c
  1781   002516  D7FA               	bra	u5457
  1782   002518  D000               	nop2	
  1783   00251A                     
  1784                           ;main.c: 143:                 stop(&motorL,&motorR);
  1785   00251A  0ED4               	movlw	low _motorL
  1786   00251C  6E14               	movwf	stop@mL^0,c
  1787   00251E  0ECB               	movlw	low _motorR
  1788   002520  6E15               	movwf	stop@mR^0,c
  1789   002522  EC80  F01C         	call	_stop	;wreg free
  1790   002526                     l6021:
  1791                           
  1792                           ;main.c: 147:             if (clear_norm > 90 && !(hue>=302 && hue<=346) || LATGbits.LAT
      +                          G1 == 1){
  1793   002526  0100               	movlb	0	; () banked
  1794   002528  51BB               	movf	(main@clear_norm+1)& (0+255),w,b
  1795   00252A  E109               	bnz	u5360
  1796   00252C  0E5B               	movlw	91
  1797   00252E  5DBA               	subwf	main@clear_norm& (0+255),w,b
  1798   002530  A0D8               	btfss	status,0,c
  1799   002532  EF9D  F012         	goto	u5361
  1800   002536  EF9F  F012         	goto	u5360
  1801   00253A                     u5361:
  1802   00253A  EFB5  F012         	goto	l316
  1803   00253E                     u5360:
  1804   00253E                     
  1805                           ; BSR set to: 0
  1806   00253E  0E2E               	movlw	46
  1807   002540  5DB6               	subwf	main@hue& (0+255),w,b
  1808   002542  0E01               	movlw	1
  1809   002544  59B7               	subwfb	(main@hue+1)& (0+255),w,b
  1810   002546  A0D8               	btfss	status,0,c
  1811   002548  EFA8  F012         	goto	u5371
  1812   00254C  EFAA  F012         	goto	u5370
  1813   002550                     u5371:
  1814   002550  EFBC  F012         	goto	l6027
  1815   002554                     u5370:
  1816   002554                     
  1817                           ; BSR set to: 0
  1818   002554  0E5B               	movlw	91
  1819   002556  5DB6               	subwf	main@hue& (0+255),w,b
  1820   002558  0E01               	movlw	1
  1821   00255A  59B7               	subwfb	(main@hue+1)& (0+255),w,b
  1822   00255C  B0D8               	btfsc	status,0,c
  1823   00255E  EFB3  F012         	goto	u5381
  1824   002562  EFB5  F012         	goto	u5380
  1825   002566                     u5381:
  1826   002566  EFBC  F012         	goto	l6027
  1827   00256A                     u5380:
  1828   00256A                     l316:
  1829                           
  1830                           ; BSR set to: 0
  1831   00256A  A27F               	btfss	127,1,c	;volatile
  1832   00256C  EFBA  F012         	goto	u5391
  1833   002570  EFBC  F012         	goto	u5390
  1834   002574                     u5391:
  1835   002574  EFD1  F012         	goto	l6035
  1836   002578                     u5390:
  1837   002578                     l6027:
  1838   002578                     
  1839                           ; BSR set to: 0
  1840                           ;main.c: 150:                 send2USART(white);
  1841   002578  0E00               	movlw	0
  1842   00257A  6E46               	movwf	(send2USART@hue+1)^0,c
  1843   00257C  0E08               	movlw	8
  1844   00257E  6E45               	movwf	send2USART@hue^0,c
  1845   002580  EC47  F022         	call	_send2USART	;wreg free
  1846   002584                     
  1847                           ;main.c: 151:                 returnHome(&motorL, &motorR, &path, path_length);
  1848   002584  0ED4               	movlw	low _motorL
  1849   002586  6E21               	movwf	returnHome@mL^0,c
  1850   002588  0ECB               	movlw	low _motorR
  1851   00258A  6E22               	movwf	returnHome@mR^0,c
  1852   00258C  0E00               	movlw	low _path
  1853   00258E  6E23               	movwf	returnHome@path^0,c
  1854   002590  0E02               	movlw	high _path
  1855   002592  6E24               	movwf	(returnHome@path+1)^0,c
  1856   002594  C0B8  F025         	movff	main@path_length,returnHome@pathLength
  1857   002598  C0B9  F026         	movff	main@path_length+1,returnHome@pathLength+1
  1858   00259C  EC34  F01A         	call	_returnHome	;wreg free
  1859   0025A0                     
  1860                           ;main.c: 152:                 LATGbits.LATG1 = 0;
  1861   0025A0  927F               	bcf	127,1,c	;volatile
  1862   0025A2                     l6035:
  1863                           
  1864                           ;main.c: 155:             hue = reading_hue(&colorCurrent);
  1865   0025A2  0EDD               	movlw	low _colorCurrent
  1866   0025A4  6E42               	movwf	reading_hue@cCurr^0,c
  1867   0025A6  ECEA  F018         	call	_reading_hue	;wreg free
  1868   0025AA  C042  F0B6         	movff	?_reading_hue,main@hue
  1869   0025AE  C043  F0B7         	movff	?_reading_hue+1,main@hue+1
  1870   0025B2                     
  1871                           ;main.c: 156:             decision(hue, path_length);
  1872   0025B2  C0B6  F047         	movff	main@hue,decision@hue
  1873   0025B6  C0B7  F048         	movff	main@hue+1,decision@hue+1
  1874   0025BA  C0B8  F049         	movff	main@path_length,decision@path_length
  1875   0025BE  C0B9  F04A         	movff	main@path_length+1,decision@path_length+1
  1876   0025C2  ECE7  F012         	call	_decision	;wreg free
  1877   0025C6  EFC9  F011         	goto	l5977
  1878   0025CA  EF1D  F000         	goto	start
  1879   0025CE                     __end_of_main:
  1880                           	callstack 0
  1881                           
  1882 ;; *************** function _returnHome *****************
  1883 ;; Defined at:
  1884 ;;		line 383 in file "dc_motor.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  1887 ;;		 -> motorL(9), 
  1888 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  1889 ;;		 -> motorR(9), 
  1890 ;;  path            2   34[COMRAM] PTR PTR struct PathStep
  1891 ;;		 -> path(250), 
  1892 ;;  pathLength      2   36[COMRAM] int 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  time            2   40[COMRAM] unsigned int 
  1895 ;;  action          1   42[COMRAM] unsigned char 
  1896 ;;  i               2   43[COMRAM] int 
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      void 
  1899 ;; Registers used:
  1900 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1906 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1907 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1908 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1910 ;;Total ram usage:       13 bytes
  1911 ;; Hardware stack levels used: 1
  1912 ;; Hardware stack levels required when called: 6
  1913 ;; This function calls:
  1914 ;;		_moveWhite
  1915 ;;		_reverseStraight
  1916 ;;		_reverseTurn
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text1
  1923   003468                     __ptext1:
  1924                           	callstack 0
  1925   003468                     _returnHome:
  1926                           	callstack 24
  1927   003468                     
  1928                           ;dc_motor.c: 383: void returnHome(struct DC_motor *mL, struct DC_motor *mR, struct PathS
      +                          tep *path[], int pathLength);dc_motor.c: 384: {;dc_motor.c: 386:     LATGbits.LATG0 = 0;
  1929   003468  907F               	bcf	127,0,c	;volatile
  1930                           
  1931                           ;dc_motor.c: 387:     LATEbits.LATE7 = 0;
  1932   00346A  9E7D               	bcf	125,7,c	;volatile
  1933                           
  1934                           ;dc_motor.c: 388:     LATAbits.LATA3 = 0;
  1935   00346C  9679               	bcf	121,3,c	;volatile
  1936   00346E                     
  1937                           ;dc_motor.c: 390:     moveWhite(&motorL,&motorR);
  1938   00346E  0ED4               	movlw	low _motorL
  1939   003470  6E1D               	movwf	moveWhite@mL^0,c
  1940   003472  0ECB               	movlw	low _motorR
  1941   003474  6E1E               	movwf	moveWhite@mR^0,c
  1942   003476  ECFD  F020         	call	_moveWhite	;wreg free
  1943   00347A                     
  1944                           ;dc_motor.c: 392:     for (int i = pathLength; i >= 0; i--) {
  1945   00347A  C025  F02C         	movff	returnHome@pathLength,returnHome@i
  1946   00347E  C026  F02D         	movff	returnHome@pathLength+1,returnHome@i+1
  1947   003482                     l5885:
  1948   003482  BE2D               	btfsc	(returnHome@i+1)^0,7,c
  1949   003484  EF48  F01A         	goto	u5320
  1950   003488  EF46  F01A         	goto	u5321
  1951   00348C                     u5321:
  1952   00348C  EF4A  F01A         	goto	l5889
  1953   003490                     u5320:
  1954   003490  EF92  F01A         	goto	l513
  1955   003494                     l5889:
  1956                           
  1957                           ;dc_motor.c: 393:         char action = path[i]->action;
  1958   003494  90D8               	bcf	status,0,c
  1959   003496  342C               	rlcf	returnHome@i^0,w,c
  1960   003498  6ED9               	movwf	fsr2l,c
  1961   00349A  342D               	rlcf	(returnHome@i+1)^0,w,c
  1962   00349C  6EDA               	movwf	fsr2h,c
  1963   00349E  5023               	movf	returnHome@path^0,w,c
  1964   0034A0  26D9               	addwf	fsr2l,f,c
  1965   0034A2  5024               	movf	(returnHome@path+1)^0,w,c
  1966   0034A4  22DA               	addwfc	fsr2h,f,c
  1967   0034A6  CFDE F027          	movff	postinc2,??_returnHome
  1968   0034AA  CFDD F028          	movff	postdec2,??_returnHome+1
  1969   0034AE  C027  FFD9         	movff	??_returnHome,fsr2l
  1970   0034B2  C028  FFDA         	movff	??_returnHome+1,fsr2h
  1971   0034B6  50DF               	movf	indf2,w,c
  1972   0034B8  6E2B               	movwf	returnHome@action^0,c
  1973   0034BA                     
  1974                           ;dc_motor.c: 394:         unsigned int time = path[i]->time;
  1975   0034BA  90D8               	bcf	status,0,c
  1976   0034BC  342C               	rlcf	returnHome@i^0,w,c
  1977   0034BE  6ED9               	movwf	fsr2l,c
  1978   0034C0  342D               	rlcf	(returnHome@i+1)^0,w,c
  1979   0034C2  6EDA               	movwf	fsr2h,c
  1980   0034C4  5023               	movf	returnHome@path^0,w,c
  1981   0034C6  26D9               	addwf	fsr2l,f,c
  1982   0034C8  5024               	movf	(returnHome@path+1)^0,w,c
  1983   0034CA  22DA               	addwfc	fsr2h,f,c
  1984   0034CC  EE10 F001          	lfsr	1,1
  1985   0034D0  50DE               	movf	postinc2,w,c
  1986   0034D2  26E1               	addwf	fsr1l,f,c
  1987   0034D4  50DD               	movf	postdec2,w,c
  1988   0034D6  22E2               	addwfc	fsr1h,f,c
  1989   0034D8  CFE6 F029          	movff	postinc1,returnHome@time
  1990   0034DC  CFE5 F02A          	movff	postdec1,returnHome@time+1
  1991   0034E0                     
  1992                           ;dc_motor.c: 396:         if (action == 'F'){reverseStraight(mL, mR, time);}
  1993   0034E0  0E46               	movlw	70
  1994   0034E2  182B               	xorwf	returnHome@action^0,w,c
  1995   0034E4  A4D8               	btfss	status,2,c
  1996   0034E6  EF77  F01A         	goto	u5331
  1997   0034EA  EF79  F01A         	goto	u5330
  1998   0034EE                     u5331:
  1999   0034EE  EF85  F01A         	goto	l5897
  2000   0034F2                     u5330:
  2001   0034F2  C021  F019         	movff	returnHome@mL,reverseStraight@mL
  2002   0034F6  C022  F01A         	movff	returnHome@mR,reverseStraight@mR
  2003   0034FA  C029  F01B         	movff	returnHome@time,reverseStraight@time
  2004   0034FE  C02A  F01C         	movff	returnHome@time+1,reverseStraight@time+1
  2005   003502  EC5F  F019         	call	_reverseStraight	;wreg free
  2006   003506  EF8D  F01A         	goto	l5899
  2007   00350A                     l5897:
  2008   00350A  C021  F01D         	movff	returnHome@mL,reverseTurn@mL
  2009   00350E  C022  F01E         	movff	returnHome@mR,reverseTurn@mR
  2010   003512  C02B  F01F         	movff	returnHome@action,reverseTurn@turnDirection
  2011   003516  ECEB  F01F         	call	_reverseTurn	;wreg free
  2012   00351A                     l5899:
  2013                           
  2014                           ;dc_motor.c: 400:     }
  2015   00351A  062C               	decf	returnHome@i^0,f,c
  2016   00351C  A0D8               	btfss	status,0,c
  2017   00351E  062D               	decf	(returnHome@i+1)^0,f,c
  2018   003520  EF41  F01A         	goto	l5885
  2019   003524                     l513:
  2020   003524  0003               	sleep		;# 
  2021   003526  0012               	return		;funcret
  2022   003528                     __end_of_returnHome:
  2023                           	callstack 0
  2024                           
  2025 ;; *************** function _reverseTurn *****************
  2026 ;; Defined at:
  2027 ;;		line 345 in file "dc_motor.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2030 ;;		 -> motorL(9), 
  2031 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2032 ;;		 -> motorR(9), 
  2033 ;;  turnDirectio    1   30[COMRAM] unsigned char 
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;		None
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      void 
  2038 ;; Registers used:
  2039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2045 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2048 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2049 ;;Total ram usage:        3 bytes
  2050 ;; Hardware stack levels used: 1
  2051 ;; Hardware stack levels required when called: 5
  2052 ;; This function calls:
  2053 ;;		_left135
  2054 ;;		_right135
  2055 ;;		_turn180
  2056 ;;		_turnLeft
  2057 ;;		_turnRight
  2058 ;; This function is called by:
  2059 ;;		_returnHome
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text2
  2064   003FD6                     __ptext2:
  2065                           	callstack 0
  2066   003FD6                     _reverseTurn:
  2067                           	callstack 24
  2068   003FD6                     
  2069                           ;dc_motor.c: 346:     if (turnDirection == 'R') {
  2070   003FD6  0E52               	movlw	82
  2071   003FD8  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  2072   003FDA  A4D8               	btfss	status,2,c
  2073   003FDC  EFF2  F01F         	goto	u5051
  2074   003FE0  EFF4  F01F         	goto	u5050
  2075   003FE4                     u5051:
  2076   003FE4  EFFC  F01F         	goto	l5687
  2077   003FE8                     u5050:
  2078   003FE8                     
  2079                           ;dc_motor.c: 347:         turnLeft(mL, mR);
  2080   003FE8  C01D  F014         	movff	reverseTurn@mL,turnLeft@mL
  2081   003FEC  C01E  F015         	movff	reverseTurn@mR,turnLeft@mR
  2082   003FF0  EC06  F01D         	call	_turnLeft	;wreg free
  2083                           
  2084                           ;dc_motor.c: 348:     } else if (turnDirection == 'L') {
  2085   003FF4  EF0D  F020         	goto	l497
  2086   003FF8                     l5687:
  2087   003FF8  0E4C               	movlw	76
  2088   003FFA  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  2089   003FFC  A4D8               	btfss	status,2,c
  2090   003FFE  EF03  F020         	goto	u5061
  2091   004002  EF05  F020         	goto	u5060
  2092   004006                     u5061:
  2093   004006  EF0D  F020         	goto	l496
  2094   00400A                     u5060:
  2095   00400A                     
  2096                           ;dc_motor.c: 349:         turnRight(mL, mR);
  2097   00400A  C01D  F014         	movff	reverseTurn@mL,turnRight@mL
  2098   00400E  C01E  F015         	movff	reverseTurn@mR,turnRight@mR
  2099   004012  ECC7  F01C         	call	_turnRight	;wreg free
  2100                           
  2101                           ;dc_motor.c: 350:     } else if (turnDirection == '180') {
  2102   004016  EF0D  F020         	goto	l497
  2103   00401A                     l496:
  2104   00401A                     l497:
  2105   00401A  0012               	return		;funcret
  2106   00401C                     __end_of_reverseTurn:
  2107                           	callstack 0
  2108                           
  2109 ;; *************** function _reverseStraight *****************
  2110 ;; Defined at:
  2111 ;;		line 368 in file "dc_motor.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  2114 ;;		 -> motorL(9), 
  2115 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  2116 ;;		 -> motorR(9), 
  2117 ;;  time            2   26[COMRAM] int 
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;  delayMs         2   28[COMRAM] int 
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  1    wreg      void 
  2122 ;; Registers used:
  2123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2129 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2130 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2132 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2133 ;;Total ram usage:        6 bytes
  2134 ;; Hardware stack levels used: 1
  2135 ;; Hardware stack levels required when called: 4
  2136 ;; This function calls:
  2137 ;;		_customDelayMs
  2138 ;;		_fullSpeedAhead
  2139 ;;		_stop
  2140 ;; This function is called by:
  2141 ;;		_returnHome
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text3
  2146   0032BE                     __ptext3:
  2147                           	callstack 0
  2148   0032BE                     _reverseStraight:
  2149                           	callstack 25
  2150   0032BE                     
  2151                           ;dc_motor.c: 370:     int delayMs;;dc_motor.c: 373:     if (time<5500 && time>6100){dela
      +                          yMs = 3000; }
  2152   0032BE  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2153   0032C0  EF6D  F019         	goto	u5070
  2154   0032C4  0E7C               	movlw	124
  2155   0032C6  5C1B               	subwf	reverseStraight@time^0,w,c
  2156   0032C8  0E15               	movlw	21
  2157   0032CA  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2158   0032CC  B0D8               	btfsc	status,0,c
  2159   0032CE  EF6B  F019         	goto	u5071
  2160   0032D2  EF6D  F019         	goto	u5070
  2161   0032D6                     u5071:
  2162   0032D6  EF7F  F019         	goto	l5703
  2163   0032DA                     u5070:
  2164   0032DA  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2165   0032DC  EF79  F019         	goto	u5081
  2166   0032E0  0ED5               	movlw	213
  2167   0032E2  5C1B               	subwf	reverseStraight@time^0,w,c
  2168   0032E4  0E17               	movlw	23
  2169   0032E6  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2170   0032E8  A0D8               	btfss	status,0,c
  2171   0032EA  EF79  F019         	goto	u5081
  2172   0032EE  EF7B  F019         	goto	u5080
  2173   0032F2                     u5081:
  2174   0032F2  EF7F  F019         	goto	l5703
  2175   0032F6                     u5080:
  2176   0032F6  0E0B               	movlw	11
  2177   0032F8  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2178   0032FA  0EB8               	movlw	184
  2179   0032FC  6E1D               	movwf	reverseStraight@delayMs^0,c
  2180   0032FE                     l5703:
  2181                           
  2182                           ;dc_motor.c: 374:     if (time<3700 && time>4100){delayMs = 2000; }
  2183   0032FE  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2184   003300  EF8D  F019         	goto	u5090
  2185   003304  0E74               	movlw	116
  2186   003306  5C1B               	subwf	reverseStraight@time^0,w,c
  2187   003308  0E0E               	movlw	14
  2188   00330A  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2189   00330C  B0D8               	btfsc	status,0,c
  2190   00330E  EF8B  F019         	goto	u5091
  2191   003312  EF8D  F019         	goto	u5090
  2192   003316                     u5091:
  2193   003316  EF9F  F019         	goto	l5709
  2194   00331A                     u5090:
  2195   00331A  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2196   00331C  EF99  F019         	goto	u5101
  2197   003320  0E05               	movlw	5
  2198   003322  5C1B               	subwf	reverseStraight@time^0,w,c
  2199   003324  0E10               	movlw	16
  2200   003326  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2201   003328  A0D8               	btfss	status,0,c
  2202   00332A  EF99  F019         	goto	u5101
  2203   00332E  EF9B  F019         	goto	u5100
  2204   003332                     u5101:
  2205   003332  EF9F  F019         	goto	l5709
  2206   003336                     u5100:
  2207   003336  0E07               	movlw	7
  2208   003338  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2209   00333A  0ED0               	movlw	208
  2210   00333C  6E1D               	movwf	reverseStraight@delayMs^0,c
  2211   00333E                     l5709:
  2212                           
  2213                           ;dc_motor.c: 375:     if (time<1700 && time>2100){delayMs = 1000;}
  2214   00333E  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2215   003340  EFAD  F019         	goto	u5110
  2216   003344  0EA4               	movlw	164
  2217   003346  5C1B               	subwf	reverseStraight@time^0,w,c
  2218   003348  0E06               	movlw	6
  2219   00334A  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2220   00334C  B0D8               	btfsc	status,0,c
  2221   00334E  EFAB  F019         	goto	u5111
  2222   003352  EFAD  F019         	goto	u5110
  2223   003356                     u5111:
  2224   003356  EFBF  F019         	goto	l5715
  2225   00335A                     u5110:
  2226   00335A  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2227   00335C  EFB9  F019         	goto	u5121
  2228   003360  0E35               	movlw	53
  2229   003362  5C1B               	subwf	reverseStraight@time^0,w,c
  2230   003364  0E08               	movlw	8
  2231   003366  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2232   003368  A0D8               	btfss	status,0,c
  2233   00336A  EFB9  F019         	goto	u5121
  2234   00336E  EFBB  F019         	goto	u5120
  2235   003372                     u5121:
  2236   003372  EFBF  F019         	goto	l5715
  2237   003376                     u5120:
  2238   003376  0E03               	movlw	3
  2239   003378  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2240   00337A  0EE8               	movlw	232
  2241   00337C  6E1D               	movwf	reverseStraight@delayMs^0,c
  2242   00337E                     l5715:
  2243                           
  2244                           ;dc_motor.c: 377:     fullSpeedAhead(mL, mR);
  2245   00337E  C019  F014         	movff	reverseStraight@mL,fullSpeedAhead@mL
  2246   003382  C01A  F015         	movff	reverseStraight@mR,fullSpeedAhead@mR
  2247   003386  EC45  F01D         	call	_fullSpeedAhead	;wreg free
  2248   00338A                     
  2249                           ;dc_motor.c: 378:     customDelayMs(delayMs);
  2250   00338A  C01D  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2251   00338E  C01E  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2252   003392  EC93  F020         	call	_customDelayMs	;wreg free
  2253   003396                     
  2254                           ;dc_motor.c: 379:     stop(mL, mR);
  2255   003396  C019  F014         	movff	reverseStraight@mL,stop@mL
  2256   00339A  C01A  F015         	movff	reverseStraight@mR,stop@mR
  2257   00339E  EC80  F01C         	call	_stop	;wreg free
  2258   0033A2  0012               	return		;funcret
  2259   0033A4                     __end_of_reverseStraight:
  2260                           	callstack 0
  2261                           
  2262 ;; *************** function _fullSpeedAhead *****************
  2263 ;; Defined at:
  2264 ;;		line 144 in file "dc_motor.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  2267 ;;		 -> motorL(9), 
  2268 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  2269 ;;		 -> motorR(9), 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  power           2   22[COMRAM] int 
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2281 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2282 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2283 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2284 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2285 ;;Total ram usage:        5 bytes
  2286 ;; Hardware stack levels used: 1
  2287 ;; Hardware stack levels required when called: 3
  2288 ;; This function calls:
  2289 ;;		_setMotorPWM
  2290 ;; This function is called by:
  2291 ;;		_main
  2292 ;;		_reverseStraight
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text4
  2297   003A8A                     __ptext4:
  2298                           	callstack 0
  2299   003A8A                     _fullSpeedAhead:
  2300                           	callstack 25
  2301   003A8A                     
  2302                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2303   003A8A  5014               	movf	fullSpeedAhead@mL^0,w,c
  2304   003A8C  6ED9               	movwf	fsr2l,c
  2305   003A8E  6ADA               	clrf	fsr2h,c
  2306   003A90  0E01               	movlw	1
  2307   003A92  26D9               	addwf	fsr2l,f,c
  2308   003A94  0E01               	movlw	1
  2309   003A96  6EDF               	movwf	indf2,c
  2310                           
  2311                           ;dc_motor.c: 148:     mR->direction = 1;
  2312   003A98  5015               	movf	fullSpeedAhead@mR^0,w,c
  2313   003A9A  6ED9               	movwf	fsr2l,c
  2314   003A9C  6ADA               	clrf	fsr2h,c
  2315   003A9E  0E01               	movlw	1
  2316   003AA0  26D9               	addwf	fsr2l,f,c
  2317   003AA2  0E01               	movlw	1
  2318   003AA4  6EDF               	movwf	indf2,c
  2319   003AA6                     
  2320                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2321   003AA6  0E00               	movlw	0
  2322   003AA8  6E18               	movwf	(fullSpeedAhead@power+1)^0,c
  2323   003AAA  0E00               	movlw	0
  2324   003AAC  6E17               	movwf	fullSpeedAhead@power^0,c
  2325   003AAE                     l5529:
  2326                           
  2327                           ;dc_motor.c: 151:         mL->power = power;
  2328   003AAE  5014               	movf	fullSpeedAhead@mL^0,w,c
  2329   003AB0  6ED9               	movwf	fsr2l,c
  2330   003AB2  6ADA               	clrf	fsr2h,c
  2331   003AB4  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2332                           
  2333                           ;dc_motor.c: 152:         mR->power = power;
  2334   003AB8  5015               	movf	fullSpeedAhead@mR^0,w,c
  2335   003ABA  6ED9               	movwf	fsr2l,c
  2336   003ABC  6ADA               	clrf	fsr2h,c
  2337   003ABE  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2338   003AC2                     
  2339                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2340   003AC2  C014  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2341   003AC6  EC3B  F017         	call	_setMotorPWM	;wreg free
  2342   003ACA                     
  2343                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2344   003ACA  C015  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2345   003ACE  EC3B  F017         	call	_setMotorPWM	;wreg free
  2346   003AD2                     
  2347                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2348   003AD2  0E0B               	movlw	11
  2349   003AD4  6E16               	movwf	??_fullSpeedAhead^0,c
  2350   003AD6  0E62               	movlw	98
  2351   003AD8                     u5467:
  2352   003AD8  2EE8               	decfsz	wreg,f,c
  2353   003ADA  D7FE               	bra	u5467
  2354   003ADC  2E16               	decfsz	??_fullSpeedAhead^0,f,c
  2355   003ADE  D7FC               	bra	u5467
  2356   003AE0  D000               	nop2	
  2357   003AE2                     
  2358                           ;dc_motor.c: 160:     }
  2359   003AE2  4A17               	infsnz	fullSpeedAhead@power^0,f,c
  2360   003AE4  2A18               	incf	(fullSpeedAhead@power+1)^0,f,c
  2361   003AE6  BE18               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2362   003AE8  EF7F  F01D         	goto	u5031
  2363   003AEC  5018               	movf	(fullSpeedAhead@power+1)^0,w,c
  2364   003AEE  E109               	bnz	u5030
  2365   003AF0  0E33               	movlw	51
  2366   003AF2  5C17               	subwf	fullSpeedAhead@power^0,w,c
  2367   003AF4  A0D8               	btfss	status,0,c
  2368   003AF6  EF7F  F01D         	goto	u5031
  2369   003AFA  EF81  F01D         	goto	u5030
  2370   003AFE                     u5031:
  2371   003AFE  EF57  F01D         	goto	l5529
  2372   003B02                     u5030:
  2373   003B02  0012               	return		;funcret
  2374   003B04                     __end_of_fullSpeedAhead:
  2375                           	callstack 0
  2376                           
  2377 ;; *************** function _customDelayMs *****************
  2378 ;; Defined at:
  2379 ;;		line 361 in file "dc_motor.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  i               2    4[COMRAM] unsigned int 
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      void 
  2386 ;; Registers used:
  2387 ;;		wreg, status,2, status,0
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2393 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2395 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2396 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2397 ;;Total ram usage:        5 bytes
  2398 ;; Hardware stack levels used: 1
  2399 ;; Hardware stack levels required when called: 1
  2400 ;; This function calls:
  2401 ;;		Nothing
  2402 ;; This function is called by:
  2403 ;;		_reverseStraight
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	text5
  2408   004126                     __ptext5:
  2409                           	callstack 0
  2410   004126                     _customDelayMs:
  2411                           	callstack 27
  2412   004126                     
  2413                           ;dc_motor.c: 362:     for (unsigned int i = 0; i < milliseconds; i++) {
  2414   004126  0E00               	movlw	0
  2415   004128  6E06               	movwf	(customDelayMs@i+1)^0,c
  2416   00412A  0E00               	movlw	0
  2417   00412C  6E05               	movwf	customDelayMs@i^0,c
  2418   00412E  EFA3  F020         	goto	l500
  2419   004132                     l4013:
  2420                           
  2421                           ;dc_motor.c: 363:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2422   004132  0E15               	movlw	21
  2423   004134  6E04               	movwf	??_customDelayMs^0,c
  2424   004136  0EC6               	movlw	198
  2425   004138                     u5477:
  2426   004138  2EE8               	decfsz	wreg,f,c
  2427   00413A  D7FE               	bra	u5477
  2428   00413C  2E04               	decfsz	??_customDelayMs^0,f,c
  2429   00413E  D7FC               	bra	u5477
  2430   004140  D000               	nop2	
  2431   004142                     
  2432                           ;dc_motor.c: 364:     }
  2433   004142  4A05               	infsnz	customDelayMs@i^0,f,c
  2434   004144  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2435   004146                     l500:
  2436   004146  5002               	movf	customDelayMs@milliseconds^0,w,c
  2437   004148  5C05               	subwf	customDelayMs@i^0,w,c
  2438   00414A  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2439   00414C  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2440   00414E  A0D8               	btfss	status,0,c
  2441   004150  EFAC  F020         	goto	u3251
  2442   004154  EFAE  F020         	goto	u3250
  2443   004158                     u3251:
  2444   004158  EF99  F020         	goto	l4013
  2445   00415C                     u3250:
  2446   00415C  0012               	return		;funcret
  2447   00415E                     __end_of_customDelayMs:
  2448                           	callstack 0
  2449                           
  2450 ;; *************** function _moveWhite *****************
  2451 ;; Defined at:
  2452 ;;		line 318 in file "dc_motor.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2455 ;;		 -> motorL(9), 
  2456 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2457 ;;		 -> motorR(9), 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2469 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2472 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2473 ;;Total ram usage:        4 bytes
  2474 ;; Hardware stack levels used: 1
  2475 ;; Hardware stack levels required when called: 5
  2476 ;; This function calls:
  2477 ;;		_backHalf
  2478 ;;		_turn180
  2479 ;; This function is called by:
  2480 ;;		_returnHome
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text6
  2485   0041FA                     __ptext6:
  2486                           	callstack 0
  2487   0041FA                     _moveWhite:
  2488                           	callstack 24
  2489   0041FA                     
  2490                           ;dc_motor.c: 318: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          19: {;dc_motor.c: 321:     backHalf(mL,mR);
  2491   0041FA  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  2492   0041FE  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  2493   004202  ECC3  F021         	call	_backHalf	;wreg free
  2494   004206                     
  2495                           ;dc_motor.c: 322:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2496   004206  0E29               	movlw	41
  2497   004208  6E20               	movwf	(??_moveWhite+1)^0,c
  2498   00420A  0E96               	movlw	150
  2499   00420C  6E1F               	movwf	??_moveWhite^0,c
  2500   00420E  0E7F               	movlw	127
  2501   004210                     u5487:
  2502   004210  2EE8               	decfsz	wreg,f,c
  2503   004212  D7FE               	bra	u5487
  2504   004214  2E1F               	decfsz	??_moveWhite^0,f,c
  2505   004216  D7FC               	bra	u5487
  2506   004218  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  2507   00421A  D7FA               	bra	u5487
  2508   00421C  0000               	nop	
  2509   00421E                     
  2510                           ;dc_motor.c: 323:     turn180(mL,mR);
  2511   00421E  C01D  F019         	movff	moveWhite@mL,turn180@mL
  2512   004222  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  2513   004226  EC61  F021         	call	_turn180	;wreg free
  2514   00422A  0012               	return		;funcret
  2515   00422C                     __end_of_moveWhite:
  2516                           	callstack 0
  2517                           
  2518 ;; *************** function _reading_hue *****************
  2519 ;; Defined at:
  2520 ;;		line 90 in file "color.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  cCurr           1   65[COMRAM] PTR struct colors
  2523 ;;		 -> colorCurrent(8), 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  led_state      50    0        unsigned char [50]
  2526 ;;  hue             2   69[COMRAM] unsigned int 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  2   65[COMRAM] unsigned int 
  2529 ;; Registers used:
  2530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2536 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2537 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2538 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2539 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2540 ;;Total ram usage:        6 bytes
  2541 ;; Hardware stack levels used: 1
  2542 ;; Hardware stack levels required when called: 4
  2543 ;; This function calls:
  2544 ;;		_color_read_Blue
  2545 ;;		_color_read_Clear
  2546 ;;		_color_read_Green
  2547 ;;		_color_read_Red
  2548 ;;		_convert_rgb2hue
  2549 ;; This function is called by:
  2550 ;;		_main
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text7
  2555   0031D4                     __ptext7:
  2556                           	callstack 0
  2557   0031D4                     _reading_hue:
  2558                           	callstack 26
  2559   0031D4                     
  2560                           ;color.c: 90: unsigned int reading_hue(colors *cCurr);color.c: 91: {;color.c: 92:     un
      +                          signed int hue;;color.c: 94:     char led_state[50];;color.c: 99:     LATGbits.LATG0 = 1
      +                          ;
  2561   0031D4  807F               	bsf	127,0,c	;volatile
  2562                           
  2563                           ;color.c: 100:     LATEbits.LATE7 = 0;
  2564   0031D6  9E7D               	bcf	125,7,c	;volatile
  2565                           
  2566                           ;color.c: 101:     LATAbits.LATA3 = 0;
  2567   0031D8  9679               	bcf	121,3,c	;volatile
  2568   0031DA                     
  2569                           ;color.c: 102:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2570   0031DA  0E29               	movlw	41
  2571   0031DC  6E45               	movwf	(??_reading_hue+1)^0,c
  2572   0031DE  0E96               	movlw	150
  2573   0031E0  6E44               	movwf	??_reading_hue^0,c
  2574   0031E2  0E7F               	movlw	127
  2575   0031E4                     u5497:
  2576   0031E4  2EE8               	decfsz	wreg,f,c
  2577   0031E6  D7FE               	bra	u5497
  2578   0031E8  2E44               	decfsz	??_reading_hue^0,f,c
  2579   0031EA  D7FC               	bra	u5497
  2580   0031EC  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2581   0031EE  D7FA               	bra	u5497
  2582   0031F0  0000               	nop	
  2583   0031F2                     
  2584                           ;color.c: 103:     (cCurr->red)= color_read_Red();
  2585   0031F2  EC2C  F01E         	call	_color_read_Red	;wreg free
  2586   0031F6  5042               	movf	reading_hue@cCurr^0,w,c
  2587   0031F8  6ED9               	movwf	fsr2l,c
  2588   0031FA  6ADA               	clrf	fsr2h,c
  2589   0031FC  C006  FFDE         	movff	?_color_read_Red,postinc2
  2590   003200  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  2591   003204                     
  2592                           ;color.c: 108:     LATGbits.LATG0 = 0;
  2593   003204  907F               	bcf	127,0,c	;volatile
  2594   003206                     
  2595                           ;color.c: 109:     LATEbits.LATE7 = 1;
  2596   003206  8E7D               	bsf	125,7,c	;volatile
  2597   003208                     
  2598                           ;color.c: 110:     LATAbits.LATA3 = 0;
  2599   003208  9679               	bcf	121,3,c	;volatile
  2600   00320A                     
  2601                           ;color.c: 111:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2602   00320A  0E29               	movlw	41
  2603   00320C  6E45               	movwf	(??_reading_hue+1)^0,c
  2604   00320E  0E96               	movlw	150
  2605   003210  6E44               	movwf	??_reading_hue^0,c
  2606   003212  0E7F               	movlw	127
  2607   003214                     u5507:
  2608   003214  2EE8               	decfsz	wreg,f,c
  2609   003216  D7FE               	bra	u5507
  2610   003218  2E44               	decfsz	??_reading_hue^0,f,c
  2611   00321A  D7FC               	bra	u5507
  2612   00321C  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2613   00321E  D7FA               	bra	u5507
  2614   003220  0000               	nop	
  2615                           
  2616                           ;color.c: 112:     (cCurr->green) = color_read_Green();
  2617   003222  EC54  F01E         	call	_color_read_Green	;wreg free
  2618   003226  5042               	movf	reading_hue@cCurr^0,w,c
  2619   003228  6ED9               	movwf	fsr2l,c
  2620   00322A  6ADA               	clrf	fsr2h,c
  2621   00322C  0E02               	movlw	2
  2622   00322E  26D9               	addwf	fsr2l,f,c
  2623   003230  C006  FFDE         	movff	?_color_read_Green,postinc2
  2624   003234  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  2625   003238                     
  2626                           ;color.c: 118:     LATGbits.LATG0 = 0;
  2627   003238  907F               	bcf	127,0,c	;volatile
  2628   00323A                     
  2629                           ;color.c: 119:     LATEbits.LATE7 = 0;
  2630   00323A  9E7D               	bcf	125,7,c	;volatile
  2631   00323C                     
  2632                           ;color.c: 120:     LATAbits.LATA3 = 1;
  2633   00323C  8679               	bsf	121,3,c	;volatile
  2634   00323E                     
  2635                           ;color.c: 121:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2636   00323E  0E29               	movlw	41
  2637   003240  6E45               	movwf	(??_reading_hue+1)^0,c
  2638   003242  0E96               	movlw	150
  2639   003244  6E44               	movwf	??_reading_hue^0,c
  2640   003246  0E7F               	movlw	127
  2641   003248                     u5517:
  2642   003248  2EE8               	decfsz	wreg,f,c
  2643   00324A  D7FE               	bra	u5517
  2644   00324C  2E44               	decfsz	??_reading_hue^0,f,c
  2645   00324E  D7FC               	bra	u5517
  2646   003250  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2647   003252  D7FA               	bra	u5517
  2648   003254  0000               	nop	
  2649   003256                     
  2650                           ;color.c: 122:     (cCurr->blue) = color_read_Blue();
  2651   003256  ECA4  F01E         	call	_color_read_Blue	;wreg free
  2652   00325A  5042               	movf	reading_hue@cCurr^0,w,c
  2653   00325C  6ED9               	movwf	fsr2l,c
  2654   00325E  6ADA               	clrf	fsr2h,c
  2655   003260  0E04               	movlw	4
  2656   003262  26D9               	addwf	fsr2l,f,c
  2657   003264  C006  FFDE         	movff	?_color_read_Blue,postinc2
  2658   003268  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  2659   00326C                     
  2660                           ;color.c: 127:     LATGbits.LATG0 = 1;
  2661   00326C  807F               	bsf	127,0,c	;volatile
  2662   00326E                     
  2663                           ;color.c: 128:     LATEbits.LATE7 = 1;
  2664   00326E  8E7D               	bsf	125,7,c	;volatile
  2665   003270                     
  2666                           ;color.c: 129:     LATAbits.LATA3 = 1;
  2667   003270  8679               	bsf	121,3,c	;volatile
  2668                           
  2669                           ;color.c: 130:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2670   003272  0E29               	movlw	41
  2671   003274  6E45               	movwf	(??_reading_hue+1)^0,c
  2672   003276  0E96               	movlw	150
  2673   003278  6E44               	movwf	??_reading_hue^0,c
  2674   00327A  0E7F               	movlw	127
  2675   00327C                     u5527:
  2676   00327C  2EE8               	decfsz	wreg,f,c
  2677   00327E  D7FE               	bra	u5527
  2678   003280  2E44               	decfsz	??_reading_hue^0,f,c
  2679   003282  D7FC               	bra	u5527
  2680   003284  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2681   003286  D7FA               	bra	u5527
  2682   003288  0000               	nop	
  2683   00328A                     
  2684                           ;color.c: 131:     (cCurr->clear) = color_read_Clear();
  2685   00328A  EC7C  F01E         	call	_color_read_Clear	;wreg free
  2686   00328E  5042               	movf	reading_hue@cCurr^0,w,c
  2687   003290  6ED9               	movwf	fsr2l,c
  2688   003292  6ADA               	clrf	fsr2h,c
  2689   003294  0E06               	movlw	6
  2690   003296  26D9               	addwf	fsr2l,f,c
  2691   003298  C006  FFDE         	movff	?_color_read_Clear,postinc2
  2692   00329C  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  2693   0032A0                     
  2694                           ;color.c: 138:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  2695   0032A0  0EE5               	movlw	low _colorCalibration
  2696   0032A2  6E3E               	movwf	convert_rgb2hue@cMax^0,c
  2697   0032A4  0EDD               	movlw	low _colorCurrent
  2698   0032A6  6E3F               	movwf	convert_rgb2hue@cCurr^0,c
  2699   0032A8  EC55  F007         	call	_convert_rgb2hue	;wreg free
  2700   0032AC  C03E  F046         	movff	?_convert_rgb2hue,reading_hue@hue
  2701   0032B0  C03F  F047         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  2702   0032B4                     
  2703                           ;color.c: 145:     return hue;
  2704   0032B4  C046  F042         	movff	reading_hue@hue,?_reading_hue
  2705   0032B8  C047  F043         	movff	reading_hue@hue+1,?_reading_hue+1
  2706   0032BC  0012               	return		;funcret
  2707   0032BE                     __end_of_reading_hue:
  2708                           	callstack 0
  2709                           
  2710 ;; *************** function _convert_rgb2hue *****************
  2711 ;; Defined at:
  2712 ;;		line 229 in file "color.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  cMax            1   61[COMRAM] PTR struct colors
  2715 ;;		 -> colorCalibration(8), 
  2716 ;;  cCurr           1   62[COMRAM] PTR struct colors
  2717 ;;		 -> colorCurrent(8), 
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  c_char         20    0        unsigned char [20]
  2720 ;;  b               4   72[BANK0 ] float 
  2721 ;;  g               4   68[BANK0 ] float 
  2722 ;;  r               4   64[BANK0 ] float 
  2723 ;;  hue             4   60[BANK0 ] float 
  2724 ;;  max             4   56[BANK0 ] float 
  2725 ;;  diff            4   52[BANK0 ] float 
  2726 ;;  min             4   48[BANK0 ] float 
  2727 ;;  clearmax        4   28[BANK0 ] float 
  2728 ;;  clearcurrent    4   24[BANK0 ] float 
  2729 ;;  bluemax         4   20[BANK0 ] float 
  2730 ;;  bluecurrent     4   16[BANK0 ] float 
  2731 ;;  greenmax        4   12[BANK0 ] float 
  2732 ;;  greencurrent    4    8[BANK0 ] float 
  2733 ;;  redmax          4    4[BANK0 ] float 
  2734 ;;  redcurrent      4    0[BANK0 ] float 
  2735 ;;  c               4    0        float 
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  2   61[COMRAM] unsigned int 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2745 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2746 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2747 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2748 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2749 ;;Total ram usage:       80 bytes
  2750 ;; Hardware stack levels used: 1
  2751 ;; Hardware stack levels required when called: 3
  2752 ;; This function calls:
  2753 ;;		___fladd
  2754 ;;		___fldiv
  2755 ;;		___fleq
  2756 ;;		___flge
  2757 ;;		___flmul
  2758 ;;		___flsub
  2759 ;;		___fltol
  2760 ;;		___xxtofl
  2761 ;; This function is called by:
  2762 ;;		_reading_hue
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           	psect	text8
  2767   000EAA                     __ptext8:
  2768                           	callstack 0
  2769   000EAA                     _convert_rgb2hue:
  2770                           	callstack 26
  2771   000EAA                     
  2772                           ;color.c: 229: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 230: {;color.c: 231:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 232:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  2773   000EAA  0E00               	movlw	0
  2774   000EAC  0100               	movlb	0	; () banked
  2775   000EAE  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  2776   000EB0  0E00               	movlw	0
  2777   000EB2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2778   000EB4  0E00               	movlw	0
  2779   000EB6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2780   000EB8  0E00               	movlw	0
  2781   000EBA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2782   000EBC                     
  2783                           ; BSR set to: 0
  2784                           ;color.c: 234:     redcurrent = cCurr->red;
  2785   000EBC  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2786   000EBE  6ED9               	movwf	fsr2l,c
  2787   000EC0  6ADA               	clrf	fsr2h,c
  2788   000EC2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2789   000EC6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2790   000ECA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2791   000ECE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2792   000ED2  6A04               	clrf	(___xxtofl@val+2)^0,c
  2793   000ED4  6A05               	clrf	(___xxtofl@val+3)^0,c
  2794   000ED6  0E00               	movlw	0
  2795   000ED8  ECE1  F014         	call	___xxtofl
  2796   000EDC  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  2797   000EE0  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  2798   000EE4  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  2799   000EE8  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  2800   000EEC                     
  2801                           ;color.c: 235:     redmax = cMax->red;
  2802   000EEC  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2803   000EEE  6ED9               	movwf	fsr2l,c
  2804   000EF0  6ADA               	clrf	fsr2h,c
  2805   000EF2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2806   000EF6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2807   000EFA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2808   000EFE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2809   000F02  6A04               	clrf	(___xxtofl@val+2)^0,c
  2810   000F04  6A05               	clrf	(___xxtofl@val+3)^0,c
  2811   000F06  0E00               	movlw	0
  2812   000F08  ECE1  F014         	call	___xxtofl
  2813   000F0C  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  2814   000F10  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  2815   000F14  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  2816   000F18  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  2817   000F1C                     
  2818                           ;color.c: 236:     greencurrent = cCurr->green;
  2819   000F1C  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2820   000F1E  6ED9               	movwf	fsr2l,c
  2821   000F20  6ADA               	clrf	fsr2h,c
  2822   000F22  0E02               	movlw	2
  2823   000F24  26D9               	addwf	fsr2l,f,c
  2824   000F26  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2825   000F2A  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2826   000F2E  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2827   000F32  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2828   000F36  6A04               	clrf	(___xxtofl@val+2)^0,c
  2829   000F38  6A05               	clrf	(___xxtofl@val+3)^0,c
  2830   000F3A  0E00               	movlw	0
  2831   000F3C  ECE1  F014         	call	___xxtofl
  2832   000F40  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  2833   000F44  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  2834   000F48  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  2835   000F4C  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  2836   000F50                     
  2837                           ;color.c: 237:     greenmax = cMax->green;
  2838   000F50  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2839   000F52  6ED9               	movwf	fsr2l,c
  2840   000F54  6ADA               	clrf	fsr2h,c
  2841   000F56  0E02               	movlw	2
  2842   000F58  26D9               	addwf	fsr2l,f,c
  2843   000F5A  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2844   000F5E  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2845   000F62  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2846   000F66  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2847   000F6A  6A04               	clrf	(___xxtofl@val+2)^0,c
  2848   000F6C  6A05               	clrf	(___xxtofl@val+3)^0,c
  2849   000F6E  0E00               	movlw	0
  2850   000F70  ECE1  F014         	call	___xxtofl
  2851   000F74  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  2852   000F78  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  2853   000F7C  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  2854   000F80  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  2855   000F84                     
  2856                           ;color.c: 238:     bluecurrent = cCurr->blue;
  2857   000F84  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2858   000F86  6ED9               	movwf	fsr2l,c
  2859   000F88  6ADA               	clrf	fsr2h,c
  2860   000F8A  0E04               	movlw	4
  2861   000F8C  26D9               	addwf	fsr2l,f,c
  2862   000F8E  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2863   000F92  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2864   000F96  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2865   000F9A  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2866   000F9E  6A04               	clrf	(___xxtofl@val+2)^0,c
  2867   000FA0  6A05               	clrf	(___xxtofl@val+3)^0,c
  2868   000FA2  0E00               	movlw	0
  2869   000FA4  ECE1  F014         	call	___xxtofl
  2870   000FA8  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  2871   000FAC  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  2872   000FB0  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  2873   000FB4  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  2874   000FB8                     
  2875                           ;color.c: 239:     bluemax = cMax->blue;
  2876   000FB8  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2877   000FBA  6ED9               	movwf	fsr2l,c
  2878   000FBC  6ADA               	clrf	fsr2h,c
  2879   000FBE  0E04               	movlw	4
  2880   000FC0  26D9               	addwf	fsr2l,f,c
  2881   000FC2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2882   000FC6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2883   000FCA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2884   000FCE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2885   000FD2  6A04               	clrf	(___xxtofl@val+2)^0,c
  2886   000FD4  6A05               	clrf	(___xxtofl@val+3)^0,c
  2887   000FD6  0E00               	movlw	0
  2888   000FD8  ECE1  F014         	call	___xxtofl
  2889   000FDC  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  2890   000FE0  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  2891   000FE4  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  2892   000FE8  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  2893   000FEC                     
  2894                           ;color.c: 240:     clearcurrent = cCurr->clear;
  2895   000FEC  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2896   000FEE  6ED9               	movwf	fsr2l,c
  2897   000FF0  6ADA               	clrf	fsr2h,c
  2898   000FF2  0E06               	movlw	6
  2899   000FF4  26D9               	addwf	fsr2l,f,c
  2900   000FF6  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2901   000FFA  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2902   000FFE  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2903   001002  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2904   001006  6A04               	clrf	(___xxtofl@val+2)^0,c
  2905   001008  6A05               	clrf	(___xxtofl@val+3)^0,c
  2906   00100A  0E00               	movlw	0
  2907   00100C  ECE1  F014         	call	___xxtofl
  2908   001010  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  2909   001014  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  2910   001018  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  2911   00101C  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  2912   001020                     
  2913                           ;color.c: 241:     clearmax = cMax->clear;
  2914   001020  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2915   001022  6ED9               	movwf	fsr2l,c
  2916   001024  6ADA               	clrf	fsr2h,c
  2917   001026  0E06               	movlw	6
  2918   001028  26D9               	addwf	fsr2l,f,c
  2919   00102A  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2920   00102E  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2921   001032  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2922   001036  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2923   00103A  6A04               	clrf	(___xxtofl@val+2)^0,c
  2924   00103C  6A05               	clrf	(___xxtofl@val+3)^0,c
  2925   00103E  0E00               	movlw	0
  2926   001040  ECE1  F014         	call	___xxtofl
  2927   001044  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  2928   001048  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  2929   00104C  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  2930   001050  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  2931   001054  C078  F01B         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  2932   001058  C079  F01C         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  2933   00105C  C07A  F01D         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  2934   001060  C07B  F01E         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  2935   001064  C07C  F01F         	movff	convert_rgb2hue@clearmax,___fldiv@a
  2936   001068  C07D  F020         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  2937   00106C  C07E  F021         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  2938   001070  C07F  F022         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  2939   001074  EC93  F00F         	call	___fldiv	;wreg free
  2940   001078                     
  2941                           ;color.c: 244:     char c_char[20];;color.c: 250:     r = redcurrent/redmax;
  2942   001078  C060  F01B         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  2943   00107C  C061  F01C         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  2944   001080  C062  F01D         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  2945   001084  C063  F01E         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  2946   001088  C064  F01F         	movff	convert_rgb2hue@redmax,___fldiv@a
  2947   00108C  C065  F020         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  2948   001090  C066  F021         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  2949   001094  C067  F022         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  2950   001098  EC93  F00F         	call	___fldiv	;wreg free
  2951   00109C  C01B  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  2952   0010A0  C01C  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  2953   0010A4  C01D  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  2954   0010A8  C01E  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  2955   0010AC                     
  2956                           ;color.c: 251:     g = greencurrent/greenmax;
  2957   0010AC  C068  F01B         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  2958   0010B0  C069  F01C         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  2959   0010B4  C06A  F01D         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  2960   0010B8  C06B  F01E         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  2961   0010BC  C06C  F01F         	movff	convert_rgb2hue@greenmax,___fldiv@a
  2962   0010C0  C06D  F020         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  2963   0010C4  C06E  F021         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  2964   0010C8  C06F  F022         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  2965   0010CC  EC93  F00F         	call	___fldiv	;wreg free
  2966   0010D0  C01B  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  2967   0010D4  C01C  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  2968   0010D8  C01D  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  2969   0010DC  C01E  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  2970   0010E0                     
  2971                           ;color.c: 252:     b = bluecurrent/bluemax;
  2972   0010E0  C070  F01B         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  2973   0010E4  C071  F01C         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  2974   0010E8  C072  F01D         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  2975   0010EC  C073  F01E         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  2976   0010F0  C074  F01F         	movff	convert_rgb2hue@bluemax,___fldiv@a
  2977   0010F4  C075  F020         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  2978   0010F8  C076  F021         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  2979   0010FC  C077  F022         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  2980   001100  EC93  F00F         	call	___fldiv	;wreg free
  2981   001104  C01B  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  2982   001108  C01C  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  2983   00110C  C01D  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  2984   001110  C01E  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  2985   001114                     
  2986                           ;color.c: 254:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  2987   001114  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  2988   001118  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2989   00111C  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2990   001120  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2991   001124  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  2992   001128  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2993   00112C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2994   001130  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2995   001134  EC68  F018         	call	___flge	;wreg free
  2996   001138  A0D8               	btfss	status,0,c
  2997   00113A  EFA1  F008         	goto	u3931
  2998   00113E  EFA3  F008         	goto	u3930
  2999   001142                     u3931:
  3000   001142  EFD8  F008         	goto	l4489
  3001   001146                     u3930:
  3002   001146  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3003   00114A  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3004   00114E  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3005   001152  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3006   001156  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3007   00115A  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3008   00115E  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3009   001162  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3010   001166  EC68  F018         	call	___flge	;wreg free
  3011   00116A  A0D8               	btfss	status,0,c
  3012   00116C  EFBA  F008         	goto	u3941
  3013   001170  EFBC  F008         	goto	u3940
  3014   001174                     u3941:
  3015   001174  EFC6  F008         	goto	l119
  3016   001178                     u3940:
  3017   001178  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$429
  3018   00117C  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$429+1
  3019   001180  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$429+2
  3020   001184  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$429+3
  3021   001188  EFCE  F008         	goto	l121
  3022   00118C                     l119:
  3023   00118C  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$429
  3024   001190  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$429+1
  3025   001194  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$429+2
  3026   001198  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$429+3
  3027   00119C                     l121:
  3028   00119C  C080  F090         	movff	_convert_rgb2hue$429,convert_rgb2hue@min
  3029   0011A0  C081  F091         	movff	_convert_rgb2hue$429+1,convert_rgb2hue@min+1
  3030   0011A4  C082  F092         	movff	_convert_rgb2hue$429+2,convert_rgb2hue@min+2
  3031   0011A8  C083  F093         	movff	_convert_rgb2hue$429+3,convert_rgb2hue@min+3
  3032   0011AC  EF0B  F009         	goto	l4493
  3033   0011B0                     l4489:
  3034   0011B0  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3035   0011B4  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3036   0011B8  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3037   0011BC  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3038   0011C0  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3039   0011C4  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3040   0011C8  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3041   0011CC  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3042   0011D0  EC68  F018         	call	___flge	;wreg free
  3043   0011D4  A0D8               	btfss	status,0,c
  3044   0011D6  EFEF  F008         	goto	u3951
  3045   0011DA  EFF1  F008         	goto	u3950
  3046   0011DE                     u3951:
  3047   0011DE  EFFB  F008         	goto	l123
  3048   0011E2                     u3950:
  3049   0011E2  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$430
  3050   0011E6  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$430+1
  3051   0011EA  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$430+2
  3052   0011EE  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$430+3
  3053   0011F2  EF03  F009         	goto	l125
  3054   0011F6                     l123:
  3055   0011F6  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$430
  3056   0011FA  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$430+1
  3057   0011FE  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$430+2
  3058   001202  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$430+3
  3059   001206                     l125:
  3060   001206  C084  F090         	movff	_convert_rgb2hue$430,convert_rgb2hue@min
  3061   00120A  C085  F091         	movff	_convert_rgb2hue$430+1,convert_rgb2hue@min+1
  3062   00120E  C086  F092         	movff	_convert_rgb2hue$430+2,convert_rgb2hue@min+2
  3063   001212  C087  F093         	movff	_convert_rgb2hue$430+3,convert_rgb2hue@min+3
  3064   001216                     l4493:
  3065                           
  3066                           ;color.c: 255:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3067   001216  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3068   00121A  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3069   00121E  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3070   001222  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3071   001226  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3072   00122A  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3073   00122E  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3074   001232  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3075   001236  EC68  F018         	call	___flge	;wreg free
  3076   00123A  A0D8               	btfss	status,0,c
  3077   00123C  EF22  F009         	goto	u3961
  3078   001240  EF24  F009         	goto	u3960
  3079   001244                     u3961:
  3080   001244  EF59  F009         	goto	l4499
  3081   001248                     u3960:
  3082   001248  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3083   00124C  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3084   001250  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3085   001254  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3086   001258  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3087   00125C  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3088   001260  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3089   001264  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3090   001268  EC68  F018         	call	___flge	;wreg free
  3091   00126C  A0D8               	btfss	status,0,c
  3092   00126E  EF3B  F009         	goto	u3971
  3093   001272  EF3D  F009         	goto	u3970
  3094   001276                     u3971:
  3095   001276  EF47  F009         	goto	l131
  3096   00127A                     u3970:
  3097   00127A  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$431
  3098   00127E  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$431+1
  3099   001282  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$431+2
  3100   001286  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$431+3
  3101   00128A  EF4F  F009         	goto	l133
  3102   00128E                     l131:
  3103   00128E  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$431
  3104   001292  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$431+1
  3105   001296  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$431+2
  3106   00129A  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$431+3
  3107   00129E                     l133:
  3108   00129E  C088  F098         	movff	_convert_rgb2hue$431,convert_rgb2hue@max
  3109   0012A2  C089  F099         	movff	_convert_rgb2hue$431+1,convert_rgb2hue@max+1
  3110   0012A6  C08A  F09A         	movff	_convert_rgb2hue$431+2,convert_rgb2hue@max+2
  3111   0012AA  C08B  F09B         	movff	_convert_rgb2hue$431+3,convert_rgb2hue@max+3
  3112   0012AE  EF8C  F009         	goto	l4503
  3113   0012B2                     l4499:
  3114   0012B2  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3115   0012B6  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3116   0012BA  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3117   0012BE  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3118   0012C2  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3119   0012C6  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3120   0012CA  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3121   0012CE  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3122   0012D2  EC68  F018         	call	___flge	;wreg free
  3123   0012D6  A0D8               	btfss	status,0,c
  3124   0012D8  EF70  F009         	goto	u3981
  3125   0012DC  EF72  F009         	goto	u3980
  3126   0012E0                     u3981:
  3127   0012E0  EF7C  F009         	goto	l135
  3128   0012E4                     u3980:
  3129   0012E4  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$432
  3130   0012E8  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$432+1
  3131   0012EC  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$432+2
  3132   0012F0  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$432+3
  3133   0012F4  EF84  F009         	goto	l137
  3134   0012F8                     l135:
  3135   0012F8  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$432
  3136   0012FC  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$432+1
  3137   001300  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$432+2
  3138   001304  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$432+3
  3139   001308                     l137:
  3140   001308  C08C  F098         	movff	_convert_rgb2hue$432,convert_rgb2hue@max
  3141   00130C  C08D  F099         	movff	_convert_rgb2hue$432+1,convert_rgb2hue@max+1
  3142   001310  C08E  F09A         	movff	_convert_rgb2hue$432+2,convert_rgb2hue@max+2
  3143   001314  C08F  F09B         	movff	_convert_rgb2hue$432+3,convert_rgb2hue@max+3
  3144   001318                     l4503:
  3145                           
  3146                           ;color.c: 256:     diff = max - min;
  3147   001318  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3148   00131C  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3149   001320  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3150   001324  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3151   001328  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3152   00132C  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3153   001330  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3154   001334  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3155   001338  EC0E  F020         	call	___flsub	;wreg free
  3156   00133C  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3157   001340  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3158   001344  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3159   001348  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3160                           
  3161                           ;color.c: 257:     if (max == min) {
  3162   00134C  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3163   001350  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3164   001354  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3165   001358  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3166   00135C  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3167   001360  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3168   001364  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3169   001368  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3170   00136C  EC43  F01B         	call	___fleq	;wreg free
  3171   001370  A0D8               	btfss	status,0,c
  3172   001372  EFBD  F009         	goto	u3991
  3173   001376  EFBF  F009         	goto	u3990
  3174   00137A                     u3991:
  3175   00137A  EFCA  F009         	goto	l4507
  3176   00137E                     u3990:
  3177   00137E                     
  3178                           ;color.c: 258:         hue = 0;
  3179   00137E  0E00               	movlw	0
  3180   001380  0100               	movlb	0	; () banked
  3181   001382  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3182   001384  0E00               	movlw	0
  3183   001386  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3184   001388  0E00               	movlw	0
  3185   00138A  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3186   00138C  0E00               	movlw	0
  3187   00138E  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3188                           
  3189                           ;color.c: 259:     } else if (max == r){
  3190   001390  EFD3  F00A         	goto	l4519
  3191   001394                     l4507:
  3192   001394  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3193   001398  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3194   00139C  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3195   0013A0  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3196   0013A4  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3197   0013A8  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3198   0013AC  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3199   0013B0  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3200   0013B4  EC43  F01B         	call	___fleq	;wreg free
  3201   0013B8  A0D8               	btfss	status,0,c
  3202   0013BA  EFE1  F009         	goto	u4001
  3203   0013BE  EFE3  F009         	goto	u4000
  3204   0013C2                     u4001:
  3205   0013C2  EF11  F00A         	goto	l4511
  3206   0013C6                     u4000:
  3207   0013C6                     
  3208                           ;color.c: 260:         hue = (b - g) / diff;
  3209   0013C6  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3210   0013CA  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3211   0013CE  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3212   0013D2  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3213   0013D6  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3214   0013DA  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3215   0013DE  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3216   0013E2  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3217   0013E6  EC0E  F020         	call	___flsub	;wreg free
  3218   0013EA  C012  F01B         	movff	?___flsub,___fldiv@b
  3219   0013EE  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3220   0013F2  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3221   0013F6  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3222   0013FA  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3223   0013FE  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3224   001402  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3225   001406  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3226   00140A  EC93  F00F         	call	___fldiv	;wreg free
  3227   00140E  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3228   001412  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3229   001416  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3230   00141A  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3231                           
  3232                           ;color.c: 261:     } else if (max == g){
  3233   00141E  EFD3  F00A         	goto	l4519
  3234   001422                     l4511:
  3235   001422  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3236   001426  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3237   00142A  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3238   00142E  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3239   001432  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3240   001436  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3241   00143A  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3242   00143E  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3243   001442  EC43  F01B         	call	___fleq	;wreg free
  3244   001446  A0D8               	btfss	status,0,c
  3245   001448  EF28  F00A         	goto	u4011
  3246   00144C  EF2A  F00A         	goto	u4010
  3247   001450                     u4011:
  3248   001450  EF72  F00A         	goto	l4515
  3249   001454                     u4010:
  3250   001454                     
  3251                           ;color.c: 262:         hue = (b - r) / diff;
  3252   001454  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3253   001458  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3254   00145C  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3255   001460  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3256   001464  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3257   001468  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3258   00146C  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3259   001470  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3260   001474  EC0E  F020         	call	___flsub	;wreg free
  3261   001478  C012  F01B         	movff	?___flsub,___fldiv@b
  3262   00147C  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3263   001480  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3264   001484  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3265   001488  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3266   00148C  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3267   001490  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3268   001494  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3269   001498  EC93  F00F         	call	___fldiv	;wreg free
  3270   00149C  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3271   0014A0  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3272   0014A4  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3273   0014A8  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3274                           
  3275                           ;color.c: 263:         hue = hue + 2;
  3276   0014AC  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3277   0014B0  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3278   0014B4  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3279   0014B8  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3280   0014BC  0E00               	movlw	0
  3281   0014BE  6E06               	movwf	___fladd@a^0,c
  3282   0014C0  0E00               	movlw	0
  3283   0014C2  6E07               	movwf	(___fladd@a+1)^0,c
  3284   0014C4  0E00               	movlw	0
  3285   0014C6  6E08               	movwf	(___fladd@a+2)^0,c
  3286   0014C8  0E40               	movlw	64
  3287   0014CA  6E09               	movwf	(___fladd@a+3)^0,c
  3288   0014CC  EC1E  F00B         	call	___fladd	;wreg free
  3289   0014D0  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3290   0014D4  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3291   0014D8  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3292   0014DC  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3293                           
  3294                           ;color.c: 264:     } else if (max == b){
  3295   0014E0  EFD3  F00A         	goto	l4519
  3296   0014E4                     l4515:
  3297   0014E4  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3298   0014E8  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3299   0014EC  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3300   0014F0  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3301   0014F4  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3302   0014F8  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3303   0014FC  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3304   001500  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3305   001504  EC43  F01B         	call	___fleq	;wreg free
  3306   001508  A0D8               	btfss	status,0,c
  3307   00150A  EF89  F00A         	goto	u4021
  3308   00150E  EF8B  F00A         	goto	u4020
  3309   001512                     u4021:
  3310   001512  EFD3  F00A         	goto	l141
  3311   001516                     u4020:
  3312   001516                     
  3313                           ;color.c: 265:         hue = (r - g) / diff;
  3314   001516  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3315   00151A  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3316   00151E  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3317   001522  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3318   001526  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3319   00152A  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3320   00152E  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3321   001532  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3322   001536  EC0E  F020         	call	___flsub	;wreg free
  3323   00153A  C012  F01B         	movff	?___flsub,___fldiv@b
  3324   00153E  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3325   001542  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3326   001546  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3327   00154A  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3328   00154E  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3329   001552  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3330   001556  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3331   00155A  EC93  F00F         	call	___fldiv	;wreg free
  3332   00155E  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3333   001562  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3334   001566  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3335   00156A  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3336                           
  3337                           ;color.c: 266:         hue = hue + 4;
  3338   00156E  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3339   001572  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3340   001576  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3341   00157A  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3342   00157E  0E00               	movlw	0
  3343   001580  6E06               	movwf	___fladd@a^0,c
  3344   001582  0E00               	movlw	0
  3345   001584  6E07               	movwf	(___fladd@a+1)^0,c
  3346   001586  0E80               	movlw	128
  3347   001588  6E08               	movwf	(___fladd@a+2)^0,c
  3348   00158A  0E40               	movlw	64
  3349   00158C  6E09               	movwf	(___fladd@a+3)^0,c
  3350   00158E  EC1E  F00B         	call	___fladd	;wreg free
  3351   001592  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3352   001596  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3353   00159A  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3354   00159E  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3355   0015A2  EFD3  F00A         	goto	l4519
  3356   0015A6                     l141:
  3357   0015A6                     l4519:
  3358                           
  3359                           ;color.c: 269:     hue = hue * 60;
  3360   0015A6  C09C  F002         	movff	convert_rgb2hue@hue,___flmul@b
  3361   0015AA  C09D  F003         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3362   0015AE  C09E  F004         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3363   0015B2  C09F  F005         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3364   0015B6  0E00               	movlw	0
  3365   0015B8  6E06               	movwf	___flmul@a^0,c
  3366   0015BA  0E00               	movlw	0
  3367   0015BC  6E07               	movwf	(___flmul@a+1)^0,c
  3368   0015BE  0E70               	movlw	112
  3369   0015C0  6E08               	movwf	(___flmul@a+2)^0,c
  3370   0015C2  0E42               	movlw	66
  3371   0015C4  6E09               	movwf	(___flmul@a+3)^0,c
  3372   0015C6  EC7E  F00D         	call	___flmul	;wreg free
  3373   0015CA  C002  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3374   0015CE  C003  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3375   0015D2  C004  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3376   0015D6  C005  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3377   0015DA                     
  3378                           ;color.c: 270:     if (hue < 0) {
  3379   0015DA  0100               	movlb	0	; () banked
  3380   0015DC  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3381   0015DE  EFF5  F00A         	goto	u4030
  3382   0015E2  EFF3  F00A         	goto	u4031
  3383   0015E6                     u4031:
  3384   0015E6  EF0F  F00B         	goto	l145
  3385   0015EA                     u4030:
  3386   0015EA                     
  3387                           ; BSR set to: 0
  3388                           ;color.c: 271:         hue = hue + 360;
  3389   0015EA  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3390   0015EE  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3391   0015F2  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3392   0015F6  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3393   0015FA  0E00               	movlw	0
  3394   0015FC  6E06               	movwf	___fladd@a^0,c
  3395   0015FE  0E00               	movlw	0
  3396   001600  6E07               	movwf	(___fladd@a+1)^0,c
  3397   001602  0EB4               	movlw	180
  3398   001604  6E08               	movwf	(___fladd@a+2)^0,c
  3399   001606  0E43               	movlw	67
  3400   001608  6E09               	movwf	(___fladd@a+3)^0,c
  3401   00160A  EC1E  F00B         	call	___fladd	;wreg free
  3402   00160E  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3403   001612  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3404   001616  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3405   00161A  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3406   00161E                     l145:
  3407                           
  3408                           ;color.c: 274:     return (unsigned int)hue;
  3409   00161E  C09C  F034         	movff	convert_rgb2hue@hue,___fltol@f1
  3410   001622  C09D  F035         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3411   001626  C09E  F036         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3412   00162A  C09F  F037         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3413   00162E  ECE5  F017         	call	___fltol	;wreg free
  3414   001632  C034  F03E         	movff	?___fltol,?_convert_rgb2hue
  3415   001636  C035  F03F         	movff	?___fltol+1,?_convert_rgb2hue+1
  3416   00163A  0012               	return		;funcret
  3417   00163C                     __end_of_convert_rgb2hue:
  3418                           	callstack 0
  3419                           
  3420 ;; *************** function ___xxtofl *****************
  3421 ;; Defined at:
  3422 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;  sign            1    wreg     unsigned char 
  3425 ;;  val             4    1[COMRAM] long 
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;  sign            1    9[COMRAM] unsigned char 
  3428 ;;  arg             4   11[COMRAM] unsigned long 
  3429 ;;  exp             1   10[COMRAM] unsigned char 
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  4    1[COMRAM] unsigned char 
  3432 ;; Registers used:
  3433 ;;		wreg, status,2, status,0
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3439 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3440 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3441 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3442 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3443 ;;Total ram usage:       14 bytes
  3444 ;; Hardware stack levels used: 1
  3445 ;; Hardware stack levels required when called: 1
  3446 ;; This function calls:
  3447 ;;		Nothing
  3448 ;; This function is called by:
  3449 ;;		_convert_rgb2hue
  3450 ;;		_main
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text9
  3455   0029C2                     __ptext9:
  3456                           	callstack 0
  3457   0029C2                     ___xxtofl:
  3458                           	callstack 27
  3459                           
  3460                           ;incstack = 0
  3461                           ;___xxtofl@sign stored from wreg
  3462   0029C2  6E0A               	movwf	___xxtofl@sign^0,c
  3463   0029C4  500A               	movf	___xxtofl@sign^0,w,c
  3464   0029C6  B4D8               	btfsc	status,2,c
  3465   0029C8  EFE8  F014         	goto	u3831
  3466   0029CC  EFEA  F014         	goto	u3830
  3467   0029D0                     u3831:
  3468   0029D0  EF0C  F015         	goto	l1326
  3469   0029D4                     u3830:
  3470   0029D4  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3471   0029D6  EFF1  F014         	goto	u3840
  3472   0029DA  EFEF  F014         	goto	u3841
  3473   0029DE                     u3841:
  3474   0029DE  EF0C  F015         	goto	l1326
  3475   0029E2                     u3840:
  3476   0029E2  C002  F006         	movff	___xxtofl@val,??___xxtofl
  3477   0029E6  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  3478   0029EA  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  3479   0029EE  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  3480   0029F2  1E06               	comf	??___xxtofl^0,f,c
  3481   0029F4  1E07               	comf	(??___xxtofl+1)^0,f,c
  3482   0029F6  1E08               	comf	(??___xxtofl+2)^0,f,c
  3483   0029F8  1E09               	comf	(??___xxtofl+3)^0,f,c
  3484   0029FA  2A06               	incf	??___xxtofl^0,f,c
  3485   0029FC  0E00               	movlw	0
  3486   0029FE  2207               	addwfc	(??___xxtofl+1)^0,f,c
  3487   002A00  2208               	addwfc	(??___xxtofl+2)^0,f,c
  3488   002A02  2209               	addwfc	(??___xxtofl+3)^0,f,c
  3489   002A04  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  3490   002A08  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  3491   002A0C  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  3492   002A10  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  3493   002A14  EF14  F015         	goto	l4379
  3494   002A18                     l1326:
  3495   002A18  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  3496   002A1C  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3497   002A20  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3498   002A24  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3499   002A28                     l4379:
  3500   002A28  5002               	movf	___xxtofl@val^0,w,c
  3501   002A2A  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  3502   002A2C  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  3503   002A2E  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  3504   002A30  A4D8               	btfss	status,2,c
  3505   002A32  EF1D  F015         	goto	u3851
  3506   002A36  EF1F  F015         	goto	u3850
  3507   002A3A                     u3851:
  3508   002A3A  EF29  F015         	goto	l4385
  3509   002A3E                     u3850:
  3510   002A3E  0E00               	movlw	0
  3511   002A40  6E02               	movwf	?___xxtofl^0,c
  3512   002A42  0E00               	movlw	0
  3513   002A44  6E03               	movwf	(?___xxtofl+1)^0,c
  3514   002A46  0E00               	movlw	0
  3515   002A48  6E04               	movwf	(?___xxtofl+2)^0,c
  3516   002A4A  0E00               	movlw	0
  3517   002A4C  6E05               	movwf	(?___xxtofl+3)^0,c
  3518   002A4E  EFBA  F015         	goto	l1329
  3519   002A52                     l4385:
  3520   002A52  0E96               	movlw	150
  3521   002A54  6E0B               	movwf	___xxtofl@exp^0,c
  3522   002A56  EF33  F015         	goto	l4389
  3523   002A5A                     l4387:
  3524   002A5A  2A0B               	incf	___xxtofl@exp^0,f,c
  3525   002A5C  90D8               	bcf	status,0,c
  3526   002A5E  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3527   002A60  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3528   002A62  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3529   002A64  320C               	rrcf	___xxtofl@arg^0,f,c
  3530   002A66                     l4389:
  3531   002A66  0E00               	movlw	0
  3532   002A68  140C               	andwf	___xxtofl@arg^0,w,c
  3533   002A6A  6E06               	movwf	??___xxtofl^0,c
  3534   002A6C  0E00               	movlw	0
  3535   002A6E  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3536   002A70  6E07               	movwf	(??___xxtofl+1)^0,c
  3537   002A72  0E00               	movlw	0
  3538   002A74  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3539   002A76  6E08               	movwf	(??___xxtofl+2)^0,c
  3540   002A78  0EFE               	movlw	254
  3541   002A7A  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3542   002A7C  6E09               	movwf	(??___xxtofl+3)^0,c
  3543   002A7E  5006               	movf	??___xxtofl^0,w,c
  3544   002A80  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3545   002A82  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3546   002A84  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3547   002A86  A4D8               	btfss	status,2,c
  3548   002A88  EF48  F015         	goto	u3861
  3549   002A8C  EF4A  F015         	goto	u3860
  3550   002A90                     u3861:
  3551   002A90  EF2D  F015         	goto	l4387
  3552   002A94                     u3860:
  3553   002A94  EF58  F015         	goto	l1333
  3554   002A98                     l4391:
  3555   002A98  2A0B               	incf	___xxtofl@exp^0,f,c
  3556   002A9A  0E01               	movlw	1
  3557   002A9C  260C               	addwf	___xxtofl@arg^0,f,c
  3558   002A9E  0E00               	movlw	0
  3559   002AA0  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  3560   002AA2  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  3561   002AA4  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  3562   002AA6  90D8               	bcf	status,0,c
  3563   002AA8  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3564   002AAA  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3565   002AAC  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3566   002AAE  320C               	rrcf	___xxtofl@arg^0,f,c
  3567   002AB0                     l1333:
  3568   002AB0  0E00               	movlw	0
  3569   002AB2  140C               	andwf	___xxtofl@arg^0,w,c
  3570   002AB4  6E06               	movwf	??___xxtofl^0,c
  3571   002AB6  0E00               	movlw	0
  3572   002AB8  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3573   002ABA  6E07               	movwf	(??___xxtofl+1)^0,c
  3574   002ABC  0E00               	movlw	0
  3575   002ABE  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3576   002AC0  6E08               	movwf	(??___xxtofl+2)^0,c
  3577   002AC2  0EFF               	movlw	255
  3578   002AC4  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3579   002AC6  6E09               	movwf	(??___xxtofl+3)^0,c
  3580   002AC8  5006               	movf	??___xxtofl^0,w,c
  3581   002ACA  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3582   002ACC  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3583   002ACE  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3584   002AD0  A4D8               	btfss	status,2,c
  3585   002AD2  EF6D  F015         	goto	u3871
  3586   002AD6  EF6F  F015         	goto	u3870
  3587   002ADA                     u3871:
  3588   002ADA  EF4C  F015         	goto	l4391
  3589   002ADE                     u3870:
  3590   002ADE  EF77  F015         	goto	l4399
  3591   002AE2                     l4397:
  3592   002AE2  060B               	decf	___xxtofl@exp^0,f,c
  3593   002AE4  90D8               	bcf	status,0,c
  3594   002AE6  360C               	rlcf	___xxtofl@arg^0,f,c
  3595   002AE8  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  3596   002AEA  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  3597   002AEC  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  3598   002AEE                     l4399:
  3599   002AEE  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  3600   002AF0  EF7C  F015         	goto	u3881
  3601   002AF4  EF7E  F015         	goto	u3880
  3602   002AF8                     u3881:
  3603   002AF8  EF86  F015         	goto	l1340
  3604   002AFC                     u3880:
  3605   002AFC  0E02               	movlw	2
  3606   002AFE  600B               	cpfslt	___xxtofl@exp^0,c
  3607   002B00  EF84  F015         	goto	u3891
  3608   002B04  EF86  F015         	goto	u3890
  3609   002B08                     u3891:
  3610   002B08  EF71  F015         	goto	l4397
  3611   002B0C                     u3890:
  3612   002B0C                     l1340:
  3613   002B0C  B00B               	btfsc	___xxtofl@exp^0,0,c
  3614   002B0E  EF8B  F015         	goto	u3901
  3615   002B12  EF8D  F015         	goto	u3900
  3616   002B16                     u3901:
  3617   002B16  EF8E  F015         	goto	l4405
  3618   002B1A                     u3900:
  3619   002B1A  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  3620   002B1C                     l4405:
  3621   002B1C  90D8               	bcf	status,0,c
  3622   002B1E  320B               	rrcf	___xxtofl@exp^0,f,c
  3623   002B20  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  3624   002B24  6A07               	clrf	(??___xxtofl+1)^0,c
  3625   002B26  6A08               	clrf	(??___xxtofl+2)^0,c
  3626   002B28  6A09               	clrf	(??___xxtofl+3)^0,c
  3627   002B2A  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  3628   002B2E  6A08               	clrf	(??___xxtofl+2)^0,c
  3629   002B30  6A07               	clrf	(??___xxtofl+1)^0,c
  3630   002B32  6A06               	clrf	??___xxtofl^0,c
  3631   002B34  5006               	movf	??___xxtofl^0,w,c
  3632   002B36  120C               	iorwf	___xxtofl@arg^0,f,c
  3633   002B38  5007               	movf	(??___xxtofl+1)^0,w,c
  3634   002B3A  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  3635   002B3C  5008               	movf	(??___xxtofl+2)^0,w,c
  3636   002B3E  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  3637   002B40  5009               	movf	(??___xxtofl+3)^0,w,c
  3638   002B42  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  3639   002B44  500A               	movf	___xxtofl@sign^0,w,c
  3640   002B46  B4D8               	btfsc	status,2,c
  3641   002B48  EFA8  F015         	goto	u3911
  3642   002B4C  EFAA  F015         	goto	u3910
  3643   002B50                     u3911:
  3644   002B50  EFB2  F015         	goto	l4415
  3645   002B54                     u3910:
  3646   002B54  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3647   002B56  EFB1  F015         	goto	u3920
  3648   002B5A  EFAF  F015         	goto	u3921
  3649   002B5E                     u3921:
  3650   002B5E  EFB2  F015         	goto	l4415
  3651   002B62                     u3920:
  3652   002B62  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  3653   002B64                     l4415:
  3654   002B64  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  3655   002B68  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  3656   002B6C  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  3657   002B70  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  3658   002B74                     l1329:
  3659   002B74  0012               	return		;funcret
  3660   002B76                     __end_of___xxtofl:
  3661                           	callstack 0
  3662                           
  3663 ;; *************** function ___fltol *****************
  3664 ;; Defined at:
  3665 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;  f1              4   51[COMRAM] unsigned char 
  3668 ;; Auto vars:     Size  Location     Type
  3669 ;;  exp1            1   60[COMRAM] unsigned char 
  3670 ;;  sign1           1   59[COMRAM] unsigned char 
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  4   51[COMRAM] long 
  3673 ;; Registers used:
  3674 ;;		wreg, status,2, status,0
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3680 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3681 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3682 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3683 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3684 ;;Total ram usage:       10 bytes
  3685 ;; Hardware stack levels used: 1
  3686 ;; Hardware stack levels required when called: 1
  3687 ;; This function calls:
  3688 ;;		Nothing
  3689 ;; This function is called by:
  3690 ;;		_convert_rgb2hue
  3691 ;;		_main
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text10
  3696   002FCA                     __ptext10:
  3697                           	callstack 0
  3698   002FCA                     ___fltol:
  3699                           	callstack 27
  3700   002FCA  3436               	rlcf	(___fltol@f1+2)^0,w,c
  3701   002FCC  3437               	rlcf	(___fltol@f1+3)^0,w,c
  3702   002FCE  6E3D               	movwf	___fltol@exp1^0,c
  3703   002FD0  503D               	movf	___fltol@exp1^0,w,c
  3704   002FD2  A4D8               	btfss	status,2,c
  3705   002FD4  EFEE  F017         	goto	u3761
  3706   002FD8  EFF0  F017         	goto	u3760
  3707   002FDC                     u3761:
  3708   002FDC  EFFA  F017         	goto	l4335
  3709   002FE0                     u3760:
  3710   002FE0                     l4331:
  3711   002FE0  0E00               	movlw	0
  3712   002FE2  6E34               	movwf	?___fltol^0,c
  3713   002FE4  0E00               	movlw	0
  3714   002FE6  6E35               	movwf	(?___fltol+1)^0,c
  3715   002FE8  0E00               	movlw	0
  3716   002FEA  6E36               	movwf	(?___fltol+2)^0,c
  3717   002FEC  0E00               	movlw	0
  3718   002FEE  6E37               	movwf	(?___fltol+3)^0,c
  3719   002FF0  EF67  F018         	goto	l968
  3720   002FF4                     l4335:
  3721   002FF4  C034  F038         	movff	___fltol@f1,??___fltol
  3722   002FF8  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  3723   002FFC  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  3724   003000  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  3725   003004  0E20               	movlw	32
  3726   003006  EF0A  F018         	goto	u3770
  3727   00300A                     u3775:
  3728   00300A  90D8               	bcf	status,0,c
  3729   00300C  323B               	rrcf	(??___fltol+3)^0,f,c
  3730   00300E  323A               	rrcf	(??___fltol+2)^0,f,c
  3731   003010  3239               	rrcf	(??___fltol+1)^0,f,c
  3732   003012  3238               	rrcf	??___fltol^0,f,c
  3733   003014                     u3770:
  3734   003014  2EE8               	decfsz	wreg,f,c
  3735   003016  EF05  F018         	goto	u3775
  3736   00301A  5038               	movf	??___fltol^0,w,c
  3737   00301C  6E3C               	movwf	___fltol@sign1^0,c
  3738   00301E  8E36               	bsf	(___fltol@f1+2)^0,7,c
  3739   003020  0EFF               	movlw	255
  3740   003022  1634               	andwf	___fltol@f1^0,f,c
  3741   003024  0EFF               	movlw	255
  3742   003026  1635               	andwf	(___fltol@f1+1)^0,f,c
  3743   003028  0EFF               	movlw	255
  3744   00302A  1636               	andwf	(___fltol@f1+2)^0,f,c
  3745   00302C  0E00               	movlw	0
  3746   00302E  1637               	andwf	(___fltol@f1+3)^0,f,c
  3747   003030  0E96               	movlw	150
  3748   003032  5E3D               	subwf	___fltol@exp1^0,f,c
  3749   003034  BE3D               	btfsc	___fltol@exp1^0,7,c
  3750   003036  EF21  F018         	goto	u3780
  3751   00303A  EF1F  F018         	goto	u3781
  3752   00303E                     u3781:
  3753   00303E  EF37  F018         	goto	l4355
  3754   003042                     u3780:
  3755   003042  503D               	movf	___fltol@exp1^0,w,c
  3756   003044  0A80               	xorlw	128
  3757   003046  0F97               	addlw	151
  3758   003048  B0D8               	btfsc	status,0,c
  3759   00304A  EF29  F018         	goto	u3791
  3760   00304E  EF2B  F018         	goto	u3790
  3761   003052                     u3791:
  3762   003052  EF2D  F018         	goto	l4351
  3763   003056                     u3790:
  3764   003056  EFF0  F017         	goto	l4331
  3765   00305A                     l4351:
  3766   00305A  90D8               	bcf	status,0,c
  3767   00305C  3237               	rrcf	(___fltol@f1+3)^0,f,c
  3768   00305E  3236               	rrcf	(___fltol@f1+2)^0,f,c
  3769   003060  3235               	rrcf	(___fltol@f1+1)^0,f,c
  3770   003062  3234               	rrcf	___fltol@f1^0,f,c
  3771   003064  3E3D               	incfsz	___fltol@exp1^0,f,c
  3772   003066  EF2D  F018         	goto	l4351
  3773   00306A  EF4F  F018         	goto	l4365
  3774   00306E                     l4355:
  3775   00306E  0E1F               	movlw	31
  3776   003070  643D               	cpfsgt	___fltol@exp1^0,c
  3777   003072  EF3D  F018         	goto	u3801
  3778   003076  EF3F  F018         	goto	u3800
  3779   00307A                     u3801:
  3780   00307A  EF47  F018         	goto	l4363
  3781   00307E                     u3800:
  3782   00307E  EFF0  F017         	goto	l4331
  3783   003082                     l4361:
  3784   003082  90D8               	bcf	status,0,c
  3785   003084  3634               	rlcf	___fltol@f1^0,f,c
  3786   003086  3635               	rlcf	(___fltol@f1+1)^0,f,c
  3787   003088  3636               	rlcf	(___fltol@f1+2)^0,f,c
  3788   00308A  3637               	rlcf	(___fltol@f1+3)^0,f,c
  3789   00308C  063D               	decf	___fltol@exp1^0,f,c
  3790   00308E                     l4363:
  3791   00308E  503D               	movf	___fltol@exp1^0,w,c
  3792   003090  A4D8               	btfss	status,2,c
  3793   003092  EF4D  F018         	goto	u3811
  3794   003096  EF4F  F018         	goto	u3810
  3795   00309A                     u3811:
  3796   00309A  EF41  F018         	goto	l4361
  3797   00309E                     u3810:
  3798   00309E                     l4365:
  3799   00309E  503C               	movf	___fltol@sign1^0,w,c
  3800   0030A0  B4D8               	btfsc	status,2,c
  3801   0030A2  EF55  F018         	goto	u3821
  3802   0030A6  EF57  F018         	goto	u3820
  3803   0030AA                     u3821:
  3804   0030AA  EF5F  F018         	goto	l4369
  3805   0030AE                     u3820:
  3806   0030AE  1E37               	comf	(___fltol@f1+3)^0,f,c
  3807   0030B0  1E36               	comf	(___fltol@f1+2)^0,f,c
  3808   0030B2  1E35               	comf	(___fltol@f1+1)^0,f,c
  3809   0030B4  6C34               	negf	___fltol@f1^0,c
  3810   0030B6  0E00               	movlw	0
  3811   0030B8  2235               	addwfc	(___fltol@f1+1)^0,f,c
  3812   0030BA  2236               	addwfc	(___fltol@f1+2)^0,f,c
  3813   0030BC  2237               	addwfc	(___fltol@f1+3)^0,f,c
  3814   0030BE                     l4369:
  3815   0030BE  C034  F034         	movff	___fltol@f1,?___fltol
  3816   0030C2  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  3817   0030C6  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  3818   0030CA  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  3819   0030CE                     l968:
  3820   0030CE  0012               	return		;funcret
  3821   0030D0                     __end_of___fltol:
  3822                           	callstack 0
  3823                           
  3824 ;; *************** function ___flsub *****************
  3825 ;; Defined at:
  3826 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;  b               4   17[COMRAM] long 
  3829 ;;  a               4   21[COMRAM] long 
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;		None
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  4   17[COMRAM] long 
  3834 ;; Registers used:
  3835 ;;		wreg, status,2, status,0, cstack
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3841 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3844 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3845 ;;Total ram usage:        8 bytes
  3846 ;; Hardware stack levels used: 1
  3847 ;; Hardware stack levels required when called: 2
  3848 ;; This function calls:
  3849 ;;		___fladd
  3850 ;; This function is called by:
  3851 ;;		_convert_rgb2hue
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           	psect	text11
  3856   00401C                     __ptext11:
  3857                           	callstack 0
  3858   00401C                     ___flsub:
  3859                           	callstack 26
  3860   00401C  0E00               	movlw	0
  3861   00401E  1A16               	xorwf	___flsub@a^0,f,c
  3862   004020  0E00               	movlw	0
  3863   004022  1A17               	xorwf	(___flsub@a+1)^0,f,c
  3864   004024  0E00               	movlw	0
  3865   004026  1A18               	xorwf	(___flsub@a+2)^0,f,c
  3866   004028  0E80               	movlw	128
  3867   00402A  1A19               	xorwf	(___flsub@a+3)^0,f,c
  3868   00402C  C012  F002         	movff	___flsub@b,___fladd@b
  3869   004030  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  3870   004034  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  3871   004038  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  3872   00403C  C016  F006         	movff	___flsub@a,___fladd@a
  3873   004040  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  3874   004044  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  3875   004048  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  3876   00404C  EC1E  F00B         	call	___fladd	;wreg free
  3877   004050  C002  F012         	movff	?___fladd,?___flsub
  3878   004054  C003  F013         	movff	?___fladd+1,?___flsub+1
  3879   004058  C004  F014         	movff	?___fladd+2,?___flsub+2
  3880   00405C  C005  F015         	movff	?___fladd+3,?___flsub+3
  3881   004060  0012               	return		;funcret
  3882   004062                     __end_of___flsub:
  3883                           	callstack 0
  3884                           
  3885 ;; *************** function ___fladd *****************
  3886 ;; Defined at:
  3887 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  b               4    1[COMRAM] long 
  3890 ;;  a               4    5[COMRAM] long 
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;  grs             1   16[COMRAM] unsigned char 
  3893 ;;  bexp            1   15[COMRAM] unsigned char 
  3894 ;;  aexp            1   14[COMRAM] unsigned char 
  3895 ;;  signs           1   13[COMRAM] unsigned char 
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  4    1[COMRAM] unsigned char 
  3898 ;; Registers used:
  3899 ;;		wreg, status,2, status,0
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3905 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3906 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3907 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3908 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3909 ;;Total ram usage:       16 bytes
  3910 ;; Hardware stack levels used: 1
  3911 ;; Hardware stack levels required when called: 1
  3912 ;; This function calls:
  3913 ;;		Nothing
  3914 ;; This function is called by:
  3915 ;;		_convert_rgb2hue
  3916 ;;		___flsub
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	text12
  3921   00163C                     __ptext12:
  3922                           	callstack 0
  3923   00163C                     ___fladd:
  3924                           	callstack 26
  3925   00163C  5005               	movf	(___fladd@b+3)^0,w,c
  3926   00163E  0B80               	andlw	128
  3927   001640  6E0E               	movwf	___fladd@signs^0,c
  3928   001642  5005               	movf	(___fladd@b+3)^0,w,c
  3929   001644  2405               	addwf	(___fladd@b+3)^0,w,c
  3930   001646  6E10               	movwf	___fladd@bexp^0,c
  3931   001648  AE04               	btfss	(___fladd@b+2)^0,7,c
  3932   00164A  EF29  F00B         	goto	u2801
  3933   00164E  EF2B  F00B         	goto	u2800
  3934   001652                     u2801:
  3935   001652  EF2C  F00B         	goto	l3683
  3936   001656                     u2800:
  3937   001656  8010               	bsf	___fladd@bexp^0,0,c
  3938   001658                     l3683:
  3939   001658  5010               	movf	___fladd@bexp^0,w,c
  3940   00165A  B4D8               	btfsc	status,2,c
  3941   00165C  EF32  F00B         	goto	u2811
  3942   001660  EF34  F00B         	goto	u2810
  3943   001664                     u2811:
  3944   001664  EF49  F00B         	goto	l3693
  3945   001668                     u2810:
  3946   001668  2810               	incf	___fladd@bexp^0,w,c
  3947   00166A  A4D8               	btfss	status,2,c
  3948   00166C  EF3A  F00B         	goto	u2821
  3949   001670  EF3C  F00B         	goto	u2820
  3950   001674                     u2821:
  3951   001674  EF44  F00B         	goto	l3689
  3952   001678                     u2820:
  3953   001678  0E00               	movlw	0
  3954   00167A  6E02               	movwf	___fladd@b^0,c
  3955   00167C  0E00               	movlw	0
  3956   00167E  6E03               	movwf	(___fladd@b+1)^0,c
  3957   001680  0E00               	movlw	0
  3958   001682  6E04               	movwf	(___fladd@b+2)^0,c
  3959   001684  0E00               	movlw	0
  3960   001686  6E05               	movwf	(___fladd@b+3)^0,c
  3961   001688                     l3689:
  3962   001688  8E04               	bsf	(___fladd@b+2)^0,7,c
  3963   00168A  0E00               	movlw	0
  3964   00168C  6E05               	movwf	(___fladd@b+3)^0,c
  3965   00168E  EF51  F00B         	goto	l3695
  3966   001692                     l3693:
  3967   001692  0E00               	movlw	0
  3968   001694  6E02               	movwf	___fladd@b^0,c
  3969   001696  0E00               	movlw	0
  3970   001698  6E03               	movwf	(___fladd@b+1)^0,c
  3971   00169A  0E00               	movlw	0
  3972   00169C  6E04               	movwf	(___fladd@b+2)^0,c
  3973   00169E  0E00               	movlw	0
  3974   0016A0  6E05               	movwf	(___fladd@b+3)^0,c
  3975   0016A2                     l3695:
  3976   0016A2  5009               	movf	(___fladd@a+3)^0,w,c
  3977   0016A4  0B80               	andlw	128
  3978   0016A6  6E0F               	movwf	___fladd@aexp^0,c
  3979   0016A8  500E               	movf	___fladd@signs^0,w,c
  3980   0016AA  180F               	xorwf	___fladd@aexp^0,w,c
  3981   0016AC  B4D8               	btfsc	status,2,c
  3982   0016AE  EF5B  F00B         	goto	u2831
  3983   0016B2  EF5D  F00B         	goto	u2830
  3984   0016B6                     u2831:
  3985   0016B6  EF5E  F00B         	goto	l3701
  3986   0016BA                     u2830:
  3987   0016BA  8C0E               	bsf	___fladd@signs^0,6,c
  3988   0016BC                     l3701:
  3989   0016BC  5009               	movf	(___fladd@a+3)^0,w,c
  3990   0016BE  2409               	addwf	(___fladd@a+3)^0,w,c
  3991   0016C0  6E0F               	movwf	___fladd@aexp^0,c
  3992   0016C2  AE08               	btfss	(___fladd@a+2)^0,7,c
  3993   0016C4  EF66  F00B         	goto	u2841
  3994   0016C8  EF68  F00B         	goto	u2840
  3995   0016CC                     u2841:
  3996   0016CC  EF69  F00B         	goto	l3707
  3997   0016D0                     u2840:
  3998   0016D0  800F               	bsf	___fladd@aexp^0,0,c
  3999   0016D2                     l3707:
  4000   0016D2  500F               	movf	___fladd@aexp^0,w,c
  4001   0016D4  B4D8               	btfsc	status,2,c
  4002   0016D6  EF6F  F00B         	goto	u2851
  4003   0016DA  EF71  F00B         	goto	u2850
  4004   0016DE                     u2851:
  4005   0016DE  EF86  F00B         	goto	l3717
  4006   0016E2                     u2850:
  4007   0016E2  280F               	incf	___fladd@aexp^0,w,c
  4008   0016E4  A4D8               	btfss	status,2,c
  4009   0016E6  EF77  F00B         	goto	u2861
  4010   0016EA  EF79  F00B         	goto	u2860
  4011   0016EE                     u2861:
  4012   0016EE  EF81  F00B         	goto	l3713
  4013   0016F2                     u2860:
  4014   0016F2  0E00               	movlw	0
  4015   0016F4  6E06               	movwf	___fladd@a^0,c
  4016   0016F6  0E00               	movlw	0
  4017   0016F8  6E07               	movwf	(___fladd@a+1)^0,c
  4018   0016FA  0E00               	movlw	0
  4019   0016FC  6E08               	movwf	(___fladd@a+2)^0,c
  4020   0016FE  0E00               	movlw	0
  4021   001700  6E09               	movwf	(___fladd@a+3)^0,c
  4022   001702                     l3713:
  4023   001702  8E08               	bsf	(___fladd@a+2)^0,7,c
  4024   001704  0E00               	movlw	0
  4025   001706  6E09               	movwf	(___fladd@a+3)^0,c
  4026   001708  EF8E  F00B         	goto	l3719
  4027   00170C                     l3717:
  4028   00170C  0E00               	movlw	0
  4029   00170E  6E06               	movwf	___fladd@a^0,c
  4030   001710  0E00               	movlw	0
  4031   001712  6E07               	movwf	(___fladd@a+1)^0,c
  4032   001714  0E00               	movlw	0
  4033   001716  6E08               	movwf	(___fladd@a+2)^0,c
  4034   001718  0E00               	movlw	0
  4035   00171A  6E09               	movwf	(___fladd@a+3)^0,c
  4036   00171C                     l3719:
  4037   00171C  5010               	movf	___fladd@bexp^0,w,c
  4038   00171E  5C0F               	subwf	___fladd@aexp^0,w,c
  4039   001720  B0D8               	btfsc	status,0,c
  4040   001722  EF95  F00B         	goto	u2871
  4041   001726  EF97  F00B         	goto	u2870
  4042   00172A                     u2871:
  4043   00172A  EFBE  F00B         	goto	l3755
  4044   00172E                     u2870:
  4045   00172E  AC0E               	btfss	___fladd@signs^0,6,c
  4046   001730  EF9C  F00B         	goto	u2881
  4047   001734  EF9E  F00B         	goto	u2880
  4048   001738                     u2881:
  4049   001738  EFA0  F00B         	goto	l3725
  4050   00173C                     u2880:
  4051   00173C  0E80               	movlw	128
  4052   00173E  1A0E               	xorwf	___fladd@signs^0,f,c
  4053   001740                     l3725:
  4054   001740  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4055   001744  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4056   001748  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4057   00174C  C002  F011         	movff	___fladd@b,___fladd@grs
  4058   001750  C006  F002         	movff	___fladd@a,___fladd@b
  4059   001754  C011  F006         	movff	___fladd@grs,___fladd@a
  4060   001758  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4061   00175C  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4062   001760  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4063   001764  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4064   001768  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4065   00176C  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4066   001770  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4067   001774  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4068   001778  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4069   00177C                     l3755:
  4070   00177C  0E00               	movlw	0
  4071   00177E  6E11               	movwf	___fladd@grs^0,c
  4072   001780  5010               	movf	___fladd@bexp^0,w,c
  4073   001782  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4074   001786  6A0B               	clrf	(??___fladd+1)^0,c
  4075   001788  5E0A               	subwf	??___fladd^0,f,c
  4076   00178A  0E00               	movlw	0
  4077   00178C  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4078   00178E  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4079   001790  EFD3  F00B         	goto	u2891
  4080   001794  500B               	movf	(??___fladd+1)^0,w,c
  4081   001796  E109               	bnz	u2890
  4082   001798  0E1A               	movlw	26
  4083   00179A  5C0A               	subwf	??___fladd^0,w,c
  4084   00179C  A0D8               	btfss	status,0,c
  4085   00179E  EFD3  F00B         	goto	u2891
  4086   0017A2  EFD5  F00B         	goto	u2890
  4087   0017A6                     u2891:
  4088   0017A6  EF0C  F00C         	goto	l1200
  4089   0017AA                     u2890:
  4090   0017AA  5002               	movf	___fladd@b^0,w,c
  4091   0017AC  1003               	iorwf	(___fladd@b+1)^0,w,c
  4092   0017AE  1004               	iorwf	(___fladd@b+2)^0,w,c
  4093   0017B0  1005               	iorwf	(___fladd@b+3)^0,w,c
  4094   0017B2  A4D8               	btfss	status,2,c
  4095   0017B4  EFDE  F00B         	goto	u2901
  4096   0017B8  EFE1  F00B         	goto	u2900
  4097   0017BC                     u2901:
  4098   0017BC  0E01               	movlw	1
  4099   0017BE  EFE2  F00B         	goto	u2910
  4100   0017C2                     u2900:
  4101   0017C2  0E00               	movlw	0
  4102   0017C4                     u2910:
  4103   0017C4  6E11               	movwf	___fladd@grs^0,c
  4104   0017C6  0E00               	movlw	0
  4105   0017C8  6E02               	movwf	___fladd@b^0,c
  4106   0017CA  0E00               	movlw	0
  4107   0017CC  6E03               	movwf	(___fladd@b+1)^0,c
  4108   0017CE  0E00               	movlw	0
  4109   0017D0  6E04               	movwf	(___fladd@b+2)^0,c
  4110   0017D2  0E00               	movlw	0
  4111   0017D4  6E05               	movwf	(___fladd@b+3)^0,c
  4112   0017D6  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4113   0017DA  EF15  F00C         	goto	l1199
  4114   0017DE                     l1201:
  4115   0017DE  A011               	btfss	___fladd@grs^0,0,c
  4116   0017E0  EFF4  F00B         	goto	u2921
  4117   0017E4  EFF6  F00B         	goto	u2920
  4118   0017E8                     u2921:
  4119   0017E8  EFFC  F00B         	goto	l3767
  4120   0017EC                     u2920:
  4121   0017EC  90D8               	bcf	status,0,c
  4122   0017EE  3011               	rrcf	___fladd@grs^0,w,c
  4123   0017F0  0901               	iorlw	1
  4124   0017F2  6E11               	movwf	___fladd@grs^0,c
  4125   0017F4  EFFE  F00B         	goto	l3769
  4126   0017F8                     l3767:
  4127   0017F8  90D8               	bcf	status,0,c
  4128   0017FA  3211               	rrcf	___fladd@grs^0,f,c
  4129   0017FC                     l3769:
  4130   0017FC  A002               	btfss	___fladd@b^0,0,c
  4131   0017FE  EF03  F00C         	goto	u2931
  4132   001802  EF05  F00C         	goto	u2930
  4133   001806                     u2931:
  4134   001806  EF06  F00C         	goto	l3773
  4135   00180A                     u2930:
  4136   00180A  8E11               	bsf	___fladd@grs^0,7,c
  4137   00180C                     l3773:
  4138   00180C  3405               	rlcf	(___fladd@b+3)^0,w,c
  4139   00180E  3205               	rrcf	(___fladd@b+3)^0,f,c
  4140   001810  3204               	rrcf	(___fladd@b+2)^0,f,c
  4141   001812  3203               	rrcf	(___fladd@b+1)^0,f,c
  4142   001814  3202               	rrcf	___fladd@b^0,f,c
  4143   001816  2A10               	incf	___fladd@bexp^0,f,c
  4144   001818                     l1200:
  4145   001818  500F               	movf	___fladd@aexp^0,w,c
  4146   00181A  5C10               	subwf	___fladd@bexp^0,w,c
  4147   00181C  A0D8               	btfss	status,0,c
  4148   00181E  EF13  F00C         	goto	u2941
  4149   001822  EF15  F00C         	goto	u2940
  4150   001826                     u2941:
  4151   001826  EFEF  F00B         	goto	l1201
  4152   00182A                     u2940:
  4153   00182A                     l1199:
  4154   00182A  BC0E               	btfsc	___fladd@signs^0,6,c
  4155   00182C  EF1A  F00C         	goto	u2951
  4156   001830  EF1C  F00C         	goto	u2950
  4157   001834                     u2951:
  4158   001834  EF5C  F00C         	goto	l3801
  4159   001838                     u2950:
  4160   001838  5010               	movf	___fladd@bexp^0,w,c
  4161   00183A  A4D8               	btfss	status,2,c
  4162   00183C  EF22  F00C         	goto	u2961
  4163   001840  EF24  F00C         	goto	u2960
  4164   001844                     u2961:
  4165   001844  EF2E  F00C         	goto	l3783
  4166   001848                     u2960:
  4167   001848  0E00               	movlw	0
  4168   00184A  6E02               	movwf	?___fladd^0,c
  4169   00184C  0E00               	movlw	0
  4170   00184E  6E03               	movwf	(?___fladd+1)^0,c
  4171   001850  0E00               	movlw	0
  4172   001852  6E04               	movwf	(?___fladd+2)^0,c
  4173   001854  0E00               	movlw	0
  4174   001856  6E05               	movwf	(?___fladd+3)^0,c
  4175   001858  EF7D  F00D         	goto	l1208
  4176   00185C                     l3783:
  4177   00185C  5006               	movf	___fladd@a^0,w,c
  4178   00185E  2602               	addwf	___fladd@b^0,f,c
  4179   001860  5007               	movf	(___fladd@a+1)^0,w,c
  4180   001862  2203               	addwfc	(___fladd@b+1)^0,f,c
  4181   001864  5008               	movf	(___fladd@a+2)^0,w,c
  4182   001866  2204               	addwfc	(___fladd@b+2)^0,f,c
  4183   001868  5009               	movf	(___fladd@a+3)^0,w,c
  4184   00186A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4185   00186C  A005               	btfss	(___fladd@b+3)^0,0,c
  4186   00186E  EF3B  F00C         	goto	u2971
  4187   001872  EF3D  F00C         	goto	u2970
  4188   001876                     u2971:
  4189   001876  EFE9  F00C         	goto	l3837
  4190   00187A                     u2970:
  4191   00187A  A011               	btfss	___fladd@grs^0,0,c
  4192   00187C  EF42  F00C         	goto	u2981
  4193   001880  EF44  F00C         	goto	u2980
  4194   001884                     u2981:
  4195   001884  EF4A  F00C         	goto	l3791
  4196   001888                     u2980:
  4197   001888  90D8               	bcf	status,0,c
  4198   00188A  3011               	rrcf	___fladd@grs^0,w,c
  4199   00188C  0901               	iorlw	1
  4200   00188E  6E11               	movwf	___fladd@grs^0,c
  4201   001890  EF4C  F00C         	goto	l3793
  4202   001894                     l3791:
  4203   001894  90D8               	bcf	status,0,c
  4204   001896  3211               	rrcf	___fladd@grs^0,f,c
  4205   001898                     l3793:
  4206   001898  A002               	btfss	___fladd@b^0,0,c
  4207   00189A  EF51  F00C         	goto	u2991
  4208   00189E  EF53  F00C         	goto	u2990
  4209   0018A2                     u2991:
  4210   0018A2  EF54  F00C         	goto	l3797
  4211   0018A6                     u2990:
  4212   0018A6  8E11               	bsf	___fladd@grs^0,7,c
  4213   0018A8                     l3797:
  4214   0018A8  3405               	rlcf	(___fladd@b+3)^0,w,c
  4215   0018AA  3205               	rrcf	(___fladd@b+3)^0,f,c
  4216   0018AC  3204               	rrcf	(___fladd@b+2)^0,f,c
  4217   0018AE  3203               	rrcf	(___fladd@b+1)^0,f,c
  4218   0018B0  3202               	rrcf	___fladd@b^0,f,c
  4219   0018B2  2A10               	incf	___fladd@bexp^0,f,c
  4220   0018B4  EFE9  F00C         	goto	l3837
  4221   0018B8                     l3801:
  4222   0018B8  5006               	movf	___fladd@a^0,w,c
  4223   0018BA  5C02               	subwf	___fladd@b^0,w,c
  4224   0018BC  5007               	movf	(___fladd@a+1)^0,w,c
  4225   0018BE  5803               	subwfb	(___fladd@b+1)^0,w,c
  4226   0018C0  5008               	movf	(___fladd@a+2)^0,w,c
  4227   0018C2  5804               	subwfb	(___fladd@b+2)^0,w,c
  4228   0018C4  5005               	movf	(___fladd@b+3)^0,w,c
  4229   0018C6  0A80               	xorlw	128
  4230   0018C8  6E0A               	movwf	??___fladd^0,c
  4231   0018CA  5009               	movf	(___fladd@a+3)^0,w,c
  4232   0018CC  0A80               	xorlw	128
  4233   0018CE  580A               	subwfb	??___fladd^0,w,c
  4234   0018D0  B0D8               	btfsc	status,0,c
  4235   0018D2  EF6D  F00C         	goto	u3001
  4236   0018D6  EF6F  F00C         	goto	u3000
  4237   0018DA                     u3001:
  4238   0018DA  EF9A  F00C         	goto	l3811
  4239   0018DE                     u3000:
  4240   0018DE  5002               	movf	___fladd@b^0,w,c
  4241   0018E0  5C06               	subwf	___fladd@a^0,w,c
  4242   0018E2  6E0A               	movwf	??___fladd^0,c
  4243   0018E4  5003               	movf	(___fladd@b+1)^0,w,c
  4244   0018E6  5807               	subwfb	(___fladd@a+1)^0,w,c
  4245   0018E8  6E0B               	movwf	(??___fladd+1)^0,c
  4246   0018EA  5004               	movf	(___fladd@b+2)^0,w,c
  4247   0018EC  5808               	subwfb	(___fladd@a+2)^0,w,c
  4248   0018EE  6E0C               	movwf	(??___fladd+2)^0,c
  4249   0018F0  5005               	movf	(___fladd@b+3)^0,w,c
  4250   0018F2  5809               	subwfb	(___fladd@a+3)^0,w,c
  4251   0018F4  6E0D               	movwf	(??___fladd+3)^0,c
  4252   0018F6  0EFF               	movlw	255
  4253   0018F8  240A               	addwf	??___fladd^0,w,c
  4254   0018FA  6E02               	movwf	___fladd@b^0,c
  4255   0018FC  0EFF               	movlw	255
  4256   0018FE  200B               	addwfc	(??___fladd+1)^0,w,c
  4257   001900  6E03               	movwf	(___fladd@b+1)^0,c
  4258   001902  0EFF               	movlw	255
  4259   001904  200C               	addwfc	(??___fladd+2)^0,w,c
  4260   001906  6E04               	movwf	(___fladd@b+2)^0,c
  4261   001908  0EFF               	movlw	255
  4262   00190A  200D               	addwfc	(??___fladd+3)^0,w,c
  4263   00190C  6E05               	movwf	(___fladd@b+3)^0,c
  4264   00190E  0E80               	movlw	128
  4265   001910  1A0E               	xorwf	___fladd@signs^0,f,c
  4266   001912  6C11               	negf	___fladd@grs^0,c
  4267   001914  5011               	movf	___fladd@grs^0,w,c
  4268   001916  A4D8               	btfss	status,2,c
  4269   001918  EF90  F00C         	goto	u3011
  4270   00191C  EF92  F00C         	goto	u3010
  4271   001920                     u3011:
  4272   001920  EFA2  F00C         	goto	l1216
  4273   001924                     u3010:
  4274   001924  0E01               	movlw	1
  4275   001926  2602               	addwf	___fladd@b^0,f,c
  4276   001928  0E00               	movlw	0
  4277   00192A  2203               	addwfc	(___fladd@b+1)^0,f,c
  4278   00192C  2204               	addwfc	(___fladd@b+2)^0,f,c
  4279   00192E  2205               	addwfc	(___fladd@b+3)^0,f,c
  4280   001930  EFA2  F00C         	goto	l1216
  4281   001934                     l3811:
  4282   001934  5006               	movf	___fladd@a^0,w,c
  4283   001936  5E02               	subwf	___fladd@b^0,f,c
  4284   001938  5007               	movf	(___fladd@a+1)^0,w,c
  4285   00193A  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4286   00193C  5008               	movf	(___fladd@a+2)^0,w,c
  4287   00193E  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4288   001940  5009               	movf	(___fladd@a+3)^0,w,c
  4289   001942  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4290   001944                     l1216:
  4291   001944  5002               	movf	___fladd@b^0,w,c
  4292   001946  1003               	iorwf	(___fladd@b+1)^0,w,c
  4293   001948  1004               	iorwf	(___fladd@b+2)^0,w,c
  4294   00194A  1005               	iorwf	(___fladd@b+3)^0,w,c
  4295   00194C  A4D8               	btfss	status,2,c
  4296   00194E  EFAB  F00C         	goto	u3021
  4297   001952  EFAD  F00C         	goto	u3020
  4298   001956                     u3021:
  4299   001956  EFE2  F00C         	goto	l3835
  4300   00195A                     u3020:
  4301   00195A  5011               	movf	___fladd@grs^0,w,c
  4302   00195C  A4D8               	btfss	status,2,c
  4303   00195E  EFB3  F00C         	goto	u3031
  4304   001962  EFB5  F00C         	goto	u3030
  4305   001966                     u3031:
  4306   001966  EFE2  F00C         	goto	l3835
  4307   00196A                     u3030:
  4308   00196A  0E00               	movlw	0
  4309   00196C  6E02               	movwf	?___fladd^0,c
  4310   00196E  0E00               	movlw	0
  4311   001970  6E03               	movwf	(?___fladd+1)^0,c
  4312   001972  0E00               	movlw	0
  4313   001974  6E04               	movwf	(?___fladd+2)^0,c
  4314   001976  0E00               	movlw	0
  4315   001978  6E05               	movwf	(?___fladd+3)^0,c
  4316   00197A  EF7D  F00D         	goto	l1208
  4317   00197E                     l3819:
  4318   00197E  90D8               	bcf	status,0,c
  4319   001980  3602               	rlcf	___fladd@b^0,f,c
  4320   001982  3603               	rlcf	(___fladd@b+1)^0,f,c
  4321   001984  3604               	rlcf	(___fladd@b+2)^0,f,c
  4322   001986  3605               	rlcf	(___fladd@b+3)^0,f,c
  4323   001988  AE11               	btfss	___fladd@grs^0,7,c
  4324   00198A  EFC9  F00C         	goto	u3041
  4325   00198E  EFCB  F00C         	goto	u3040
  4326   001992                     u3041:
  4327   001992  EFCC  F00C         	goto	l3825
  4328   001996                     u3040:
  4329   001996  8002               	bsf	___fladd@b^0,0,c
  4330   001998                     l3825:
  4331   001998  A011               	btfss	___fladd@grs^0,0,c
  4332   00199A  EFD1  F00C         	goto	u3051
  4333   00199E  EFD3  F00C         	goto	u3050
  4334   0019A2                     u3051:
  4335   0019A2  EFD7  F00C         	goto	l3829
  4336   0019A6                     u3050:
  4337   0019A6  80D8               	bsf	status,0,c
  4338   0019A8  3611               	rlcf	___fladd@grs^0,f,c
  4339   0019AA  EFD9  F00C         	goto	l3831
  4340   0019AE                     l3829:
  4341   0019AE  90D8               	bcf	status,0,c
  4342   0019B0  3611               	rlcf	___fladd@grs^0,f,c
  4343   0019B2                     l3831:
  4344   0019B2  5010               	movf	___fladd@bexp^0,w,c
  4345   0019B4  B4D8               	btfsc	status,2,c
  4346   0019B6  EFDF  F00C         	goto	u3061
  4347   0019BA  EFE1  F00C         	goto	u3060
  4348   0019BE                     u3061:
  4349   0019BE  EFE2  F00C         	goto	l3835
  4350   0019C2                     u3060:
  4351   0019C2  0610               	decf	___fladd@bexp^0,f,c
  4352   0019C4                     l3835:
  4353   0019C4  AE04               	btfss	(___fladd@b+2)^0,7,c
  4354   0019C6  EFE7  F00C         	goto	u3071
  4355   0019CA  EFE9  F00C         	goto	u3070
  4356   0019CE                     u3071:
  4357   0019CE  EFBF  F00C         	goto	l3819
  4358   0019D2                     u3070:
  4359   0019D2                     l3837:
  4360   0019D2  0E00               	movlw	0
  4361   0019D4  6E0F               	movwf	___fladd@aexp^0,c
  4362   0019D6  AE11               	btfss	___fladd@grs^0,7,c
  4363   0019D8  EFF0  F00C         	goto	u3081
  4364   0019DC  EFF2  F00C         	goto	u3080
  4365   0019E0                     u3081:
  4366   0019E0  EF0A  F00D         	goto	l1225
  4367   0019E4                     u3080:
  4368   0019E4  C011  F00A         	movff	___fladd@grs,??___fladd
  4369   0019E8  0E7F               	movlw	127
  4370   0019EA  160A               	andwf	??___fladd^0,f,c
  4371   0019EC  B4D8               	btfsc	status,2,c
  4372   0019EE  EFFB  F00C         	goto	u3091
  4373   0019F2  EFFD  F00C         	goto	u3090
  4374   0019F6                     u3091:
  4375   0019F6  EF01  F00D         	goto	l1226
  4376   0019FA                     u3090:
  4377   0019FA                     l3843:
  4378   0019FA  0E01               	movlw	1
  4379   0019FC  6E0F               	movwf	___fladd@aexp^0,c
  4380   0019FE  EF0A  F00D         	goto	l1225
  4381   001A02                     l1226:
  4382   001A02  A002               	btfss	___fladd@b^0,0,c
  4383   001A04  EF06  F00D         	goto	u3101
  4384   001A08  EF08  F00D         	goto	u3100
  4385   001A0C                     u3101:
  4386   001A0C  EF0A  F00D         	goto	l1225
  4387   001A10                     u3100:
  4388   001A10  EFFD  F00C         	goto	l3843
  4389   001A14                     l1225:
  4390   001A14  500F               	movf	___fladd@aexp^0,w,c
  4391   001A16  B4D8               	btfsc	status,2,c
  4392   001A18  EF10  F00D         	goto	u3111
  4393   001A1C  EF12  F00D         	goto	u3110
  4394   001A20                     u3111:
  4395   001A20  EF3D  F00D         	goto	l3855
  4396   001A24                     u3110:
  4397   001A24  0E01               	movlw	1
  4398   001A26  2602               	addwf	___fladd@b^0,f,c
  4399   001A28  0E00               	movlw	0
  4400   001A2A  2203               	addwfc	(___fladd@b+1)^0,f,c
  4401   001A2C  2204               	addwfc	(___fladd@b+2)^0,f,c
  4402   001A2E  2205               	addwfc	(___fladd@b+3)^0,f,c
  4403   001A30  A005               	btfss	(___fladd@b+3)^0,0,c
  4404   001A32  EF1D  F00D         	goto	u3121
  4405   001A36  EF1F  F00D         	goto	u3120
  4406   001A3A                     u3121:
  4407   001A3A  EF3D  F00D         	goto	l3855
  4408   001A3E                     u3120:
  4409   001A3E  C002  F00A         	movff	___fladd@b,??___fladd
  4410   001A42  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4411   001A46  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4412   001A4A  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4413   001A4E  340D               	rlcf	(??___fladd+3)^0,w,c
  4414   001A50  320D               	rrcf	(??___fladd+3)^0,f,c
  4415   001A52  320C               	rrcf	(??___fladd+2)^0,f,c
  4416   001A54  320B               	rrcf	(??___fladd+1)^0,f,c
  4417   001A56  320A               	rrcf	??___fladd^0,f,c
  4418   001A58  C00A  F002         	movff	??___fladd,___fladd@b
  4419   001A5C  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4420   001A60  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4421   001A64  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4422   001A68  2810               	incf	___fladd@bexp^0,w,c
  4423   001A6A  B4D8               	btfsc	status,2,c
  4424   001A6C  EF3A  F00D         	goto	u3131
  4425   001A70  EF3C  F00D         	goto	u3130
  4426   001A74                     u3131:
  4427   001A74  EF3D  F00D         	goto	l3855
  4428   001A78                     u3130:
  4429   001A78  2A10               	incf	___fladd@bexp^0,f,c
  4430   001A7A                     l3855:
  4431   001A7A  2810               	incf	___fladd@bexp^0,w,c
  4432   001A7C  B4D8               	btfsc	status,2,c
  4433   001A7E  EF43  F00D         	goto	u3141
  4434   001A82  EF45  F00D         	goto	u3140
  4435   001A86                     u3141:
  4436   001A86  EF4D  F00D         	goto	l3859
  4437   001A8A                     u3140:
  4438   001A8A  5010               	movf	___fladd@bexp^0,w,c
  4439   001A8C  A4D8               	btfss	status,2,c
  4440   001A8E  EF4B  F00D         	goto	u3151
  4441   001A92  EF4D  F00D         	goto	u3150
  4442   001A96                     u3151:
  4443   001A96  EF5F  F00D         	goto	l3863
  4444   001A9A                     u3150:
  4445   001A9A                     l3859:
  4446   001A9A  0E00               	movlw	0
  4447   001A9C  6E02               	movwf	___fladd@b^0,c
  4448   001A9E  0E00               	movlw	0
  4449   001AA0  6E03               	movwf	(___fladd@b+1)^0,c
  4450   001AA2  0E00               	movlw	0
  4451   001AA4  6E04               	movwf	(___fladd@b+2)^0,c
  4452   001AA6  0E00               	movlw	0
  4453   001AA8  6E05               	movwf	(___fladd@b+3)^0,c
  4454   001AAA  5010               	movf	___fladd@bexp^0,w,c
  4455   001AAC  A4D8               	btfss	status,2,c
  4456   001AAE  EF5B  F00D         	goto	u3161
  4457   001AB2  EF5D  F00D         	goto	u3160
  4458   001AB6                     u3161:
  4459   001AB6  EF5F  F00D         	goto	l3863
  4460   001ABA                     u3160:
  4461   001ABA  0E00               	movlw	0
  4462   001ABC  6E0E               	movwf	___fladd@signs^0,c
  4463   001ABE                     l3863:
  4464   001ABE  A010               	btfss	___fladd@bexp^0,0,c
  4465   001AC0  EF64  F00D         	goto	u3171
  4466   001AC4  EF66  F00D         	goto	u3170
  4467   001AC8                     u3171:
  4468   001AC8  EF69  F00D         	goto	l3867
  4469   001ACC                     u3170:
  4470   001ACC  8E04               	bsf	(___fladd@b+2)^0,7,c
  4471   001ACE  EF6A  F00D         	goto	l3869
  4472   001AD2                     l3867:
  4473   001AD2  9E04               	bcf	(___fladd@b+2)^0,7,c
  4474   001AD4                     l3869:
  4475   001AD4  90D8               	bcf	status,0,c
  4476   001AD6  3010               	rrcf	___fladd@bexp^0,w,c
  4477   001AD8  6E05               	movwf	(___fladd@b+3)^0,c
  4478   001ADA  AE0E               	btfss	___fladd@signs^0,7,c
  4479   001ADC  EF72  F00D         	goto	u3181
  4480   001AE0  EF74  F00D         	goto	u3180
  4481   001AE4                     u3181:
  4482   001AE4  EF75  F00D         	goto	l3875
  4483   001AE8                     u3180:
  4484   001AE8  8E05               	bsf	(___fladd@b+3)^0,7,c
  4485   001AEA                     l3875:
  4486   001AEA  C002  F002         	movff	___fladd@b,?___fladd
  4487   001AEE  C003  F003         	movff	___fladd@b+1,?___fladd+1
  4488   001AF2  C004  F004         	movff	___fladd@b+2,?___fladd+2
  4489   001AF6  C005  F005         	movff	___fladd@b+3,?___fladd+3
  4490   001AFA                     l1208:
  4491   001AFA  0012               	return		;funcret
  4492   001AFC                     __end_of___fladd:
  4493                           	callstack 0
  4494                           
  4495 ;; *************** function ___flmul *****************
  4496 ;; Defined at:
  4497 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;  b               4    1[COMRAM] unsigned char 
  4500 ;;  a               4    5[COMRAM] unsigned char 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;  prod            4   20[COMRAM] struct .
  4503 ;;  grs             4   14[COMRAM] unsigned long 
  4504 ;;  temp            2   24[COMRAM] struct .
  4505 ;;  bexp            1   19[COMRAM] unsigned char 
  4506 ;;  aexp            1   18[COMRAM] unsigned char 
  4507 ;;  sign            1   13[COMRAM] unsigned char 
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  4    1[COMRAM] unsigned char 
  4510 ;; Registers used:
  4511 ;;		wreg, status,2, status,0, prodl, prodh
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4517 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4518 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4519 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4520 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4521 ;;Total ram usage:       25 bytes
  4522 ;; Hardware stack levels used: 1
  4523 ;; Hardware stack levels required when called: 1
  4524 ;; This function calls:
  4525 ;;		Nothing
  4526 ;; This function is called by:
  4527 ;;		_convert_rgb2hue
  4528 ;;		_main
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text13
  4533   001AFC                     __ptext13:
  4534                           	callstack 0
  4535   001AFC                     ___flmul:
  4536                           	callstack 27
  4537   001AFC  5005               	movf	(___flmul@b+3)^0,w,c
  4538   001AFE  0B80               	andlw	128
  4539   001B00  6E0E               	movwf	___flmul@sign^0,c
  4540   001B02  5005               	movf	(___flmul@b+3)^0,w,c
  4541   001B04  2405               	addwf	(___flmul@b+3)^0,w,c
  4542   001B06  6E14               	movwf	___flmul@bexp^0,c
  4543   001B08  AE04               	btfss	(___flmul@b+2)^0,7,c
  4544   001B0A  EF89  F00D         	goto	u3491
  4545   001B0E  EF8B  F00D         	goto	u3490
  4546   001B12                     u3491:
  4547   001B12  EF8C  F00D         	goto	l4161
  4548   001B16                     u3490:
  4549   001B16  8014               	bsf	___flmul@bexp^0,0,c
  4550   001B18                     l4161:
  4551   001B18  5014               	movf	___flmul@bexp^0,w,c
  4552   001B1A  B4D8               	btfsc	status,2,c
  4553   001B1C  EF92  F00D         	goto	u3501
  4554   001B20  EF94  F00D         	goto	u3500
  4555   001B24                     u3501:
  4556   001B24  EFA7  F00D         	goto	l4169
  4557   001B28                     u3500:
  4558   001B28  2814               	incf	___flmul@bexp^0,w,c
  4559   001B2A  A4D8               	btfss	status,2,c
  4560   001B2C  EF9A  F00D         	goto	u3511
  4561   001B30  EF9C  F00D         	goto	u3510
  4562   001B34                     u3511:
  4563   001B34  EFA4  F00D         	goto	l4167
  4564   001B38                     u3510:
  4565   001B38  0E00               	movlw	0
  4566   001B3A  6E02               	movwf	___flmul@b^0,c
  4567   001B3C  0E00               	movlw	0
  4568   001B3E  6E03               	movwf	(___flmul@b+1)^0,c
  4569   001B40  0E00               	movlw	0
  4570   001B42  6E04               	movwf	(___flmul@b+2)^0,c
  4571   001B44  0E00               	movlw	0
  4572   001B46  6E05               	movwf	(___flmul@b+3)^0,c
  4573   001B48                     l4167:
  4574   001B48  8E04               	bsf	(___flmul@b+2)^0,7,c
  4575   001B4A  EFAF  F00D         	goto	l4171
  4576   001B4E                     l4169:
  4577   001B4E  0E00               	movlw	0
  4578   001B50  6E02               	movwf	___flmul@b^0,c
  4579   001B52  0E00               	movlw	0
  4580   001B54  6E03               	movwf	(___flmul@b+1)^0,c
  4581   001B56  0E00               	movlw	0
  4582   001B58  6E04               	movwf	(___flmul@b+2)^0,c
  4583   001B5A  0E00               	movlw	0
  4584   001B5C  6E05               	movwf	(___flmul@b+3)^0,c
  4585   001B5E                     l4171:
  4586   001B5E  5009               	movf	(___flmul@a+3)^0,w,c
  4587   001B60  0B80               	andlw	128
  4588   001B62  1A0E               	xorwf	___flmul@sign^0,f,c
  4589   001B64  5009               	movf	(___flmul@a+3)^0,w,c
  4590   001B66  2409               	addwf	(___flmul@a+3)^0,w,c
  4591   001B68  6E13               	movwf	___flmul@aexp^0,c
  4592   001B6A  AE08               	btfss	(___flmul@a+2)^0,7,c
  4593   001B6C  EFBA  F00D         	goto	u3521
  4594   001B70  EFBC  F00D         	goto	u3520
  4595   001B74                     u3521:
  4596   001B74  EFBD  F00D         	goto	l4179
  4597   001B78                     u3520:
  4598   001B78  8013               	bsf	___flmul@aexp^0,0,c
  4599   001B7A                     l4179:
  4600   001B7A  5013               	movf	___flmul@aexp^0,w,c
  4601   001B7C  B4D8               	btfsc	status,2,c
  4602   001B7E  EFC3  F00D         	goto	u3531
  4603   001B82  EFC5  F00D         	goto	u3530
  4604   001B86                     u3531:
  4605   001B86  EFD8  F00D         	goto	l4187
  4606   001B8A                     u3530:
  4607   001B8A  2813               	incf	___flmul@aexp^0,w,c
  4608   001B8C  A4D8               	btfss	status,2,c
  4609   001B8E  EFCB  F00D         	goto	u3541
  4610   001B92  EFCD  F00D         	goto	u3540
  4611   001B96                     u3541:
  4612   001B96  EFD5  F00D         	goto	l4185
  4613   001B9A                     u3540:
  4614   001B9A  0E00               	movlw	0
  4615   001B9C  6E06               	movwf	___flmul@a^0,c
  4616   001B9E  0E00               	movlw	0
  4617   001BA0  6E07               	movwf	(___flmul@a+1)^0,c
  4618   001BA2  0E00               	movlw	0
  4619   001BA4  6E08               	movwf	(___flmul@a+2)^0,c
  4620   001BA6  0E00               	movlw	0
  4621   001BA8  6E09               	movwf	(___flmul@a+3)^0,c
  4622   001BAA                     l4185:
  4623   001BAA  8E08               	bsf	(___flmul@a+2)^0,7,c
  4624   001BAC  EFE0  F00D         	goto	l1285
  4625   001BB0                     l4187:
  4626   001BB0  0E00               	movlw	0
  4627   001BB2  6E06               	movwf	___flmul@a^0,c
  4628   001BB4  0E00               	movlw	0
  4629   001BB6  6E07               	movwf	(___flmul@a+1)^0,c
  4630   001BB8  0E00               	movlw	0
  4631   001BBA  6E08               	movwf	(___flmul@a+2)^0,c
  4632   001BBC  0E00               	movlw	0
  4633   001BBE  6E09               	movwf	(___flmul@a+3)^0,c
  4634   001BC0                     l1285:
  4635   001BC0  5013               	movf	___flmul@aexp^0,w,c
  4636   001BC2  B4D8               	btfsc	status,2,c
  4637   001BC4  EFE6  F00D         	goto	u3551
  4638   001BC8  EFE8  F00D         	goto	u3550
  4639   001BCC                     u3551:
  4640   001BCC  EFF0  F00D         	goto	l4191
  4641   001BD0                     u3550:
  4642   001BD0  5014               	movf	___flmul@bexp^0,w,c
  4643   001BD2  A4D8               	btfss	status,2,c
  4644   001BD4  EFEE  F00D         	goto	u3561
  4645   001BD8  EFF0  F00D         	goto	u3560
  4646   001BDC                     u3561:
  4647   001BDC  EFFA  F00D         	goto	l4195
  4648   001BE0                     u3560:
  4649   001BE0                     l4191:
  4650   001BE0  0E00               	movlw	0
  4651   001BE2  6E02               	movwf	?___flmul^0,c
  4652   001BE4  0E00               	movlw	0
  4653   001BE6  6E03               	movwf	(?___flmul+1)^0,c
  4654   001BE8  0E00               	movlw	0
  4655   001BEA  6E04               	movwf	(?___flmul+2)^0,c
  4656   001BEC  0E00               	movlw	0
  4657   001BEE  6E05               	movwf	(?___flmul+3)^0,c
  4658   001BF0  EF92  F00F         	goto	l1289
  4659   001BF4                     l4195:
  4660   001BF4  5008               	movf	(___flmul@a+2)^0,w,c
  4661   001BF6  0202               	mulwf	___flmul@b^0,c
  4662   001BF8  CFF3 F019          	movff	prodl,___flmul@temp
  4663   001BFC  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4664   001C00  5019               	movf	___flmul@temp^0,w,c
  4665   001C02  6E0F               	movwf	___flmul@grs^0,c
  4666   001C04  6A10               	clrf	(___flmul@grs+1)^0,c
  4667   001C06  6A11               	clrf	(___flmul@grs+2)^0,c
  4668   001C08  6A12               	clrf	(___flmul@grs+3)^0,c
  4669   001C0A  501A               	movf	(___flmul@temp+1)^0,w,c
  4670   001C0C  6E15               	movwf	___flmul@prod^0,c
  4671   001C0E  6A16               	clrf	(___flmul@prod+1)^0,c
  4672   001C10  6A17               	clrf	(___flmul@prod+2)^0,c
  4673   001C12  6A18               	clrf	(___flmul@prod+3)^0,c
  4674   001C14  5007               	movf	(___flmul@a+1)^0,w,c
  4675   001C16  0203               	mulwf	(___flmul@b+1)^0,c
  4676   001C18  CFF3 F019          	movff	prodl,___flmul@temp
  4677   001C1C  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4678   001C20  5019               	movf	___flmul@temp^0,w,c
  4679   001C22  260F               	addwf	___flmul@grs^0,f,c
  4680   001C24  0E00               	movlw	0
  4681   001C26  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4682   001C28  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4683   001C2A  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4684   001C2C  501A               	movf	(___flmul@temp+1)^0,w,c
  4685   001C2E  2615               	addwf	___flmul@prod^0,f,c
  4686   001C30  0E00               	movlw	0
  4687   001C32  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4688   001C34  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4689   001C36  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4690   001C38  5006               	movf	___flmul@a^0,w,c
  4691   001C3A  0204               	mulwf	(___flmul@b+2)^0,c
  4692   001C3C  CFF3 F019          	movff	prodl,___flmul@temp
  4693   001C40  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4694   001C44  5019               	movf	___flmul@temp^0,w,c
  4695   001C46  260F               	addwf	___flmul@grs^0,f,c
  4696   001C48  0E00               	movlw	0
  4697   001C4A  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4698   001C4C  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4699   001C4E  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4700   001C50  501A               	movf	(___flmul@temp+1)^0,w,c
  4701   001C52  2615               	addwf	___flmul@prod^0,f,c
  4702   001C54  0E00               	movlw	0
  4703   001C56  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4704   001C58  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4705   001C5A  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4706   001C5C  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4707   001C60  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4708   001C64  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4709   001C68  6A0F               	clrf	___flmul@grs^0,c
  4710   001C6A  5006               	movf	___flmul@a^0,w,c
  4711   001C6C  0203               	mulwf	(___flmul@b+1)^0,c
  4712   001C6E  CFF3 F019          	movff	prodl,___flmul@temp
  4713   001C72  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4714   001C76  5019               	movf	___flmul@temp^0,w,c
  4715   001C78  260F               	addwf	___flmul@grs^0,f,c
  4716   001C7A  501A               	movf	(___flmul@temp+1)^0,w,c
  4717   001C7C  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4718   001C7E  0E00               	movlw	0
  4719   001C80  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4720   001C82  0E00               	movlw	0
  4721   001C84  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4722   001C86  5007               	movf	(___flmul@a+1)^0,w,c
  4723   001C88  0202               	mulwf	___flmul@b^0,c
  4724   001C8A  CFF3 F019          	movff	prodl,___flmul@temp
  4725   001C8E  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4726   001C92  5019               	movf	___flmul@temp^0,w,c
  4727   001C94  260F               	addwf	___flmul@grs^0,f,c
  4728   001C96  501A               	movf	(___flmul@temp+1)^0,w,c
  4729   001C98  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4730   001C9A  0E00               	movlw	0
  4731   001C9C  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4732   001C9E  0E00               	movlw	0
  4733   001CA0  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4734   001CA2  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4735   001CA6  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4736   001CAA  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4737   001CAE  6A0F               	clrf	___flmul@grs^0,c
  4738   001CB0  5006               	movf	___flmul@a^0,w,c
  4739   001CB2  0202               	mulwf	___flmul@b^0,c
  4740   001CB4  CFF3 F019          	movff	prodl,___flmul@temp
  4741   001CB8  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4742   001CBC  5019               	movf	___flmul@temp^0,w,c
  4743   001CBE  260F               	addwf	___flmul@grs^0,f,c
  4744   001CC0  501A               	movf	(___flmul@temp+1)^0,w,c
  4745   001CC2  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4746   001CC4  0E00               	movlw	0
  4747   001CC6  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4748   001CC8  0E00               	movlw	0
  4749   001CCA  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4750   001CCC  5008               	movf	(___flmul@a+2)^0,w,c
  4751   001CCE  0203               	mulwf	(___flmul@b+1)^0,c
  4752   001CD0  CFF3 F019          	movff	prodl,___flmul@temp
  4753   001CD4  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4754   001CD8  5019               	movf	___flmul@temp^0,w,c
  4755   001CDA  2615               	addwf	___flmul@prod^0,f,c
  4756   001CDC  501A               	movf	(___flmul@temp+1)^0,w,c
  4757   001CDE  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4758   001CE0  0E00               	movlw	0
  4759   001CE2  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4760   001CE4  0E00               	movlw	0
  4761   001CE6  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4762   001CE8  5007               	movf	(___flmul@a+1)^0,w,c
  4763   001CEA  0204               	mulwf	(___flmul@b+2)^0,c
  4764   001CEC  CFF3 F019          	movff	prodl,___flmul@temp
  4765   001CF0  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4766   001CF4  5019               	movf	___flmul@temp^0,w,c
  4767   001CF6  2615               	addwf	___flmul@prod^0,f,c
  4768   001CF8  501A               	movf	(___flmul@temp+1)^0,w,c
  4769   001CFA  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4770   001CFC  0E00               	movlw	0
  4771   001CFE  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4772   001D00  0E00               	movlw	0
  4773   001D02  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4774   001D04  5008               	movf	(___flmul@a+2)^0,w,c
  4775   001D06  0204               	mulwf	(___flmul@b+2)^0,c
  4776   001D08  CFF3 F019          	movff	prodl,___flmul@temp
  4777   001D0C  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4778   001D10  5019               	movf	___flmul@temp^0,w,c
  4779   001D12  6E0A               	movwf	??___flmul^0,c
  4780   001D14  501A               	movf	(___flmul@temp+1)^0,w,c
  4781   001D16  6E0B               	movwf	(??___flmul+1)^0,c
  4782   001D18  6A0C               	clrf	(??___flmul+2)^0,c
  4783   001D1A  6A0D               	clrf	(??___flmul+3)^0,c
  4784   001D1C  C00C  F00D         	movff	??___flmul+2,??___flmul+3
  4785   001D20  C00B  F00C         	movff	??___flmul+1,??___flmul+2
  4786   001D24  C00A  F00B         	movff	??___flmul,??___flmul+1
  4787   001D28  6A0A               	clrf	??___flmul^0,c
  4788   001D2A  500A               	movf	??___flmul^0,w,c
  4789   001D2C  2615               	addwf	___flmul@prod^0,f,c
  4790   001D2E  500B               	movf	(??___flmul+1)^0,w,c
  4791   001D30  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4792   001D32  500C               	movf	(??___flmul+2)^0,w,c
  4793   001D34  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4794   001D36  500D               	movf	(??___flmul+3)^0,w,c
  4795   001D38  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4796   001D3A  C00F  F00A         	movff	___flmul@grs,??___flmul
  4797   001D3E  C010  F00B         	movff	___flmul@grs+1,??___flmul+1
  4798   001D42  C011  F00C         	movff	___flmul@grs+2,??___flmul+2
  4799   001D46  C012  F00D         	movff	___flmul@grs+3,??___flmul+3
  4800   001D4A  0E19               	movlw	25
  4801   001D4C  EFAD  F00E         	goto	u3570
  4802   001D50                     u3575:
  4803   001D50  90D8               	bcf	status,0,c
  4804   001D52  320D               	rrcf	(??___flmul+3)^0,f,c
  4805   001D54  320C               	rrcf	(??___flmul+2)^0,f,c
  4806   001D56  320B               	rrcf	(??___flmul+1)^0,f,c
  4807   001D58  320A               	rrcf	??___flmul^0,f,c
  4808   001D5A                     u3570:
  4809   001D5A  2EE8               	decfsz	wreg,f,c
  4810   001D5C  EFA8  F00E         	goto	u3575
  4811   001D60  500A               	movf	??___flmul^0,w,c
  4812   001D62  2615               	addwf	___flmul@prod^0,f,c
  4813   001D64  500B               	movf	(??___flmul+1)^0,w,c
  4814   001D66  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4815   001D68  500C               	movf	(??___flmul+2)^0,w,c
  4816   001D6A  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4817   001D6C  500D               	movf	(??___flmul+3)^0,w,c
  4818   001D6E  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4819   001D70  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4820   001D74  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4821   001D78  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4822   001D7C  6A0F               	clrf	___flmul@grs^0,c
  4823   001D7E  5013               	movf	___flmul@aexp^0,w,c
  4824   001D80  C014  F00A         	movff	___flmul@bexp,??___flmul
  4825   001D84  6A0B               	clrf	(??___flmul+1)^0,c
  4826   001D86  260A               	addwf	??___flmul^0,f,c
  4827   001D88  0E00               	movlw	0
  4828   001D8A  220B               	addwfc	(??___flmul+1)^0,f,c
  4829   001D8C  0E82               	movlw	130
  4830   001D8E  240A               	addwf	??___flmul^0,w,c
  4831   001D90  6E19               	movwf	___flmul@temp^0,c
  4832   001D92  0EFF               	movlw	255
  4833   001D94  200B               	addwfc	(??___flmul+1)^0,w,c
  4834   001D96  6E1A               	movwf	(___flmul@temp+1)^0,c
  4835   001D98  EFE3  F00E         	goto	l4243
  4836   001D9C                     l4237:
  4837   001D9C  90D8               	bcf	status,0,c
  4838   001D9E  3615               	rlcf	___flmul@prod^0,f,c
  4839   001DA0  3616               	rlcf	(___flmul@prod+1)^0,f,c
  4840   001DA2  3617               	rlcf	(___flmul@prod+2)^0,f,c
  4841   001DA4  3618               	rlcf	(___flmul@prod+3)^0,f,c
  4842   001DA6  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4843   001DA8  EFD8  F00E         	goto	u3581
  4844   001DAC  EFDA  F00E         	goto	u3580
  4845   001DB0                     u3581:
  4846   001DB0  EFDB  F00E         	goto	l1292
  4847   001DB4                     u3580:
  4848   001DB4  8015               	bsf	___flmul@prod^0,0,c
  4849   001DB6                     l1292:
  4850   001DB6  90D8               	bcf	status,0,c
  4851   001DB8  360F               	rlcf	___flmul@grs^0,f,c
  4852   001DBA  3610               	rlcf	(___flmul@grs+1)^0,f,c
  4853   001DBC  3611               	rlcf	(___flmul@grs+2)^0,f,c
  4854   001DBE  3612               	rlcf	(___flmul@grs+3)^0,f,c
  4855   001DC0  0619               	decf	___flmul@temp^0,f,c
  4856   001DC2  A0D8               	btfss	status,0,c
  4857   001DC4  061A               	decf	(___flmul@temp+1)^0,f,c
  4858   001DC6                     l4243:
  4859   001DC6  AE17               	btfss	(___flmul@prod+2)^0,7,c
  4860   001DC8  EFE8  F00E         	goto	u3591
  4861   001DCC  EFEA  F00E         	goto	u3590
  4862   001DD0                     u3591:
  4863   001DD0  EFCE  F00E         	goto	l4237
  4864   001DD4                     u3590:
  4865   001DD4  0E00               	movlw	0
  4866   001DD6  6E13               	movwf	___flmul@aexp^0,c
  4867   001DD8  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4868   001DDA  EFF1  F00E         	goto	u3601
  4869   001DDE  EFF3  F00E         	goto	u3600
  4870   001DE2                     u3601:
  4871   001DE2  EF17  F00F         	goto	l1294
  4872   001DE6                     u3600:
  4873   001DE6  0EFF               	movlw	255
  4874   001DE8  140F               	andwf	___flmul@grs^0,w,c
  4875   001DEA  6E0A               	movwf	??___flmul^0,c
  4876   001DEC  0EFF               	movlw	255
  4877   001DEE  1410               	andwf	(___flmul@grs+1)^0,w,c
  4878   001DF0  6E0B               	movwf	(??___flmul+1)^0,c
  4879   001DF2  0EFF               	movlw	255
  4880   001DF4  1411               	andwf	(___flmul@grs+2)^0,w,c
  4881   001DF6  6E0C               	movwf	(??___flmul+2)^0,c
  4882   001DF8  0E7F               	movlw	127
  4883   001DFA  1412               	andwf	(___flmul@grs+3)^0,w,c
  4884   001DFC  6E0D               	movwf	(??___flmul+3)^0,c
  4885   001DFE  500A               	movf	??___flmul^0,w,c
  4886   001E00  100B               	iorwf	(??___flmul+1)^0,w,c
  4887   001E02  100C               	iorwf	(??___flmul+2)^0,w,c
  4888   001E04  100D               	iorwf	(??___flmul+3)^0,w,c
  4889   001E06  B4D8               	btfsc	status,2,c
  4890   001E08  EF08  F00F         	goto	u3611
  4891   001E0C  EF0A  F00F         	goto	u3610
  4892   001E10                     u3611:
  4893   001E10  EF0E  F00F         	goto	l1295
  4894   001E14                     u3610:
  4895   001E14                     l4251:
  4896   001E14  0E01               	movlw	1
  4897   001E16  6E13               	movwf	___flmul@aexp^0,c
  4898   001E18  EF17  F00F         	goto	l1294
  4899   001E1C                     l1295:
  4900   001E1C  A015               	btfss	___flmul@prod^0,0,c
  4901   001E1E  EF13  F00F         	goto	u3621
  4902   001E22  EF15  F00F         	goto	u3620
  4903   001E26                     u3621:
  4904   001E26  EF17  F00F         	goto	l1294
  4905   001E2A                     u3620:
  4906   001E2A  EF0A  F00F         	goto	l4251
  4907   001E2E                     l1294:
  4908   001E2E  5013               	movf	___flmul@aexp^0,w,c
  4909   001E30  B4D8               	btfsc	status,2,c
  4910   001E32  EF1D  F00F         	goto	u3631
  4911   001E36  EF1F  F00F         	goto	u3630
  4912   001E3A                     u3631:
  4913   001E3A  EF43  F00F         	goto	l4263
  4914   001E3E                     u3630:
  4915   001E3E  0E01               	movlw	1
  4916   001E40  2615               	addwf	___flmul@prod^0,f,c
  4917   001E42  0E00               	movlw	0
  4918   001E44  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4919   001E46  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4920   001E48  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4921   001E4A  A018               	btfss	(___flmul@prod+3)^0,0,c
  4922   001E4C  EF2A  F00F         	goto	u3641
  4923   001E50  EF2C  F00F         	goto	u3640
  4924   001E54                     u3641:
  4925   001E54  EF43  F00F         	goto	l4263
  4926   001E58                     u3640:
  4927   001E58  C015  F00A         	movff	___flmul@prod,??___flmul
  4928   001E5C  C016  F00B         	movff	___flmul@prod+1,??___flmul+1
  4929   001E60  C017  F00C         	movff	___flmul@prod+2,??___flmul+2
  4930   001E64  C018  F00D         	movff	___flmul@prod+3,??___flmul+3
  4931   001E68  340D               	rlcf	(??___flmul+3)^0,w,c
  4932   001E6A  320D               	rrcf	(??___flmul+3)^0,f,c
  4933   001E6C  320C               	rrcf	(??___flmul+2)^0,f,c
  4934   001E6E  320B               	rrcf	(??___flmul+1)^0,f,c
  4935   001E70  320A               	rrcf	??___flmul^0,f,c
  4936   001E72  C00A  F015         	movff	??___flmul,___flmul@prod
  4937   001E76  C00B  F016         	movff	??___flmul+1,___flmul@prod+1
  4938   001E7A  C00C  F017         	movff	??___flmul+2,___flmul@prod+2
  4939   001E7E  C00D  F018         	movff	??___flmul+3,___flmul@prod+3
  4940   001E82  4A19               	infsnz	___flmul@temp^0,f,c
  4941   001E84  2A1A               	incf	(___flmul@temp+1)^0,f,c
  4942   001E86                     l4263:
  4943   001E86  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  4944   001E88  EF4E  F00F         	goto	u3651
  4945   001E8C  501A               	movf	(___flmul@temp+1)^0,w,c
  4946   001E8E  E108               	bnz	u3650
  4947   001E90  2819               	incf	___flmul@temp^0,w,c
  4948   001E92  A0D8               	btfss	status,0,c
  4949   001E94  EF4E  F00F         	goto	u3651
  4950   001E98  EF50  F00F         	goto	u3650
  4951   001E9C                     u3651:
  4952   001E9C  EF5A  F00F         	goto	l4267
  4953   001EA0                     u3650:
  4954   001EA0  0E00               	movlw	0
  4955   001EA2  6E15               	movwf	___flmul@prod^0,c
  4956   001EA4  0E00               	movlw	0
  4957   001EA6  6E16               	movwf	(___flmul@prod+1)^0,c
  4958   001EA8  0E80               	movlw	128
  4959   001EAA  6E17               	movwf	(___flmul@prod+2)^0,c
  4960   001EAC  0E7F               	movlw	127
  4961   001EAE  6E18               	movwf	(___flmul@prod+3)^0,c
  4962   001EB0  EF88  F00F         	goto	l4279
  4963   001EB4                     l4267:
  4964   001EB4  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  4965   001EB6  EF67  F00F         	goto	u3660
  4966   001EBA  501A               	movf	(___flmul@temp+1)^0,w,c
  4967   001EBC  E106               	bnz	u3661
  4968   001EBE  0419               	decf	___flmul@temp^0,w,c
  4969   001EC0  B0D8               	btfsc	status,0,c
  4970   001EC2  EF65  F00F         	goto	u3661
  4971   001EC6  EF67  F00F         	goto	u3660
  4972   001ECA                     u3661:
  4973   001ECA  EF73  F00F         	goto	l1302
  4974   001ECE                     u3660:
  4975   001ECE  0E00               	movlw	0
  4976   001ED0  6E15               	movwf	___flmul@prod^0,c
  4977   001ED2  0E00               	movlw	0
  4978   001ED4  6E16               	movwf	(___flmul@prod+1)^0,c
  4979   001ED6  0E00               	movlw	0
  4980   001ED8  6E17               	movwf	(___flmul@prod+2)^0,c
  4981   001EDA  0E00               	movlw	0
  4982   001EDC  6E18               	movwf	(___flmul@prod+3)^0,c
  4983   001EDE  0E00               	movlw	0
  4984   001EE0  6E0E               	movwf	___flmul@sign^0,c
  4985   001EE2  EF88  F00F         	goto	l4279
  4986   001EE6                     l1302:
  4987   001EE6  C019  F014         	movff	___flmul@temp,___flmul@bexp
  4988   001EEA  0EFF               	movlw	255
  4989   001EEC  1615               	andwf	___flmul@prod^0,f,c
  4990   001EEE  0EFF               	movlw	255
  4991   001EF0  1616               	andwf	(___flmul@prod+1)^0,f,c
  4992   001EF2  0E7F               	movlw	127
  4993   001EF4  1617               	andwf	(___flmul@prod+2)^0,f,c
  4994   001EF6  0E00               	movlw	0
  4995   001EF8  1618               	andwf	(___flmul@prod+3)^0,f,c
  4996   001EFA  A014               	btfss	___flmul@bexp^0,0,c
  4997   001EFC  EF82  F00F         	goto	u3671
  4998   001F00  EF84  F00F         	goto	u3670
  4999   001F04                     u3671:
  5000   001F04  EF85  F00F         	goto	l4277
  5001   001F08                     u3670:
  5002   001F08  8E17               	bsf	(___flmul@prod+2)^0,7,c
  5003   001F0A                     l4277:
  5004   001F0A  90D8               	bcf	status,0,c
  5005   001F0C  3014               	rrcf	___flmul@bexp^0,w,c
  5006   001F0E  6E18               	movwf	(___flmul@prod+3)^0,c
  5007   001F10                     l4279:
  5008   001F10  500E               	movf	___flmul@sign^0,w,c
  5009   001F12  1218               	iorwf	(___flmul@prod+3)^0,f,c
  5010   001F14  C015  F002         	movff	___flmul@prod,?___flmul
  5011   001F18  C016  F003         	movff	___flmul@prod+1,?___flmul+1
  5012   001F1C  C017  F004         	movff	___flmul@prod+2,?___flmul+2
  5013   001F20  C018  F005         	movff	___flmul@prod+3,?___flmul+3
  5014   001F24                     l1289:
  5015   001F24  0012               	return		;funcret
  5016   001F26                     __end_of___flmul:
  5017                           	callstack 0
  5018                           
  5019 ;; *************** function ___flge *****************
  5020 ;; Defined at:
  5021 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  ff1             4    1[COMRAM] unsigned char 
  5024 ;;  ff2             4    5[COMRAM] unsigned char 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;		None
  5027 ;; Return value:  Size  Location     Type
  5028 ;;		None               void
  5029 ;; Registers used:
  5030 ;;		wreg, status,2, status,0
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5036 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5038 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5039 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5040 ;;Total ram usage:       12 bytes
  5041 ;; Hardware stack levels used: 1
  5042 ;; Hardware stack levels required when called: 1
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		_convert_rgb2hue
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text14
  5051   0030D0                     __ptext14:
  5052                           	callstack 0
  5053   0030D0                     ___flge:
  5054                           	callstack 27
  5055   0030D0  0E00               	movlw	0
  5056   0030D2  1402               	andwf	___flge@ff1^0,w,c
  5057   0030D4  6E0A               	movwf	??___flge^0,c
  5058   0030D6  0E00               	movlw	0
  5059   0030D8  1403               	andwf	(___flge@ff1+1)^0,w,c
  5060   0030DA  6E0B               	movwf	(??___flge+1)^0,c
  5061   0030DC  0E80               	movlw	128
  5062   0030DE  1404               	andwf	(___flge@ff1+2)^0,w,c
  5063   0030E0  6E0C               	movwf	(??___flge+2)^0,c
  5064   0030E2  0E7F               	movlw	127
  5065   0030E4  1405               	andwf	(___flge@ff1+3)^0,w,c
  5066   0030E6  6E0D               	movwf	(??___flge+3)^0,c
  5067   0030E8  500A               	movf	??___flge^0,w,c
  5068   0030EA  100B               	iorwf	(??___flge+1)^0,w,c
  5069   0030EC  100C               	iorwf	(??___flge+2)^0,w,c
  5070   0030EE  100D               	iorwf	(??___flge+3)^0,w,c
  5071   0030F0  A4D8               	btfss	status,2,c
  5072   0030F2  EF7D  F018         	goto	u3711
  5073   0030F6  EF7F  F018         	goto	u3710
  5074   0030FA                     u3711:
  5075   0030FA  EF87  F018         	goto	l4311
  5076   0030FE                     u3710:
  5077   0030FE  0E00               	movlw	0
  5078   003100  6E02               	movwf	___flge@ff1^0,c
  5079   003102  0E00               	movlw	0
  5080   003104  6E03               	movwf	(___flge@ff1+1)^0,c
  5081   003106  0E00               	movlw	0
  5082   003108  6E04               	movwf	(___flge@ff1+2)^0,c
  5083   00310A  0E00               	movlw	0
  5084   00310C  6E05               	movwf	(___flge@ff1+3)^0,c
  5085   00310E                     l4311:
  5086   00310E  0E00               	movlw	0
  5087   003110  1406               	andwf	___flge@ff2^0,w,c
  5088   003112  6E0A               	movwf	??___flge^0,c
  5089   003114  0E00               	movlw	0
  5090   003116  1407               	andwf	(___flge@ff2+1)^0,w,c
  5091   003118  6E0B               	movwf	(??___flge+1)^0,c
  5092   00311A  0E80               	movlw	128
  5093   00311C  1408               	andwf	(___flge@ff2+2)^0,w,c
  5094   00311E  6E0C               	movwf	(??___flge+2)^0,c
  5095   003120  0E7F               	movlw	127
  5096   003122  1409               	andwf	(___flge@ff2+3)^0,w,c
  5097   003124  6E0D               	movwf	(??___flge+3)^0,c
  5098   003126  500A               	movf	??___flge^0,w,c
  5099   003128  100B               	iorwf	(??___flge+1)^0,w,c
  5100   00312A  100C               	iorwf	(??___flge+2)^0,w,c
  5101   00312C  100D               	iorwf	(??___flge+3)^0,w,c
  5102   00312E  A4D8               	btfss	status,2,c
  5103   003130  EF9C  F018         	goto	u3721
  5104   003134  EF9E  F018         	goto	u3720
  5105   003138                     u3721:
  5106   003138  EFA6  F018         	goto	l4315
  5107   00313C                     u3720:
  5108   00313C  0E00               	movlw	0
  5109   00313E  6E06               	movwf	___flge@ff2^0,c
  5110   003140  0E00               	movlw	0
  5111   003142  6E07               	movwf	(___flge@ff2+1)^0,c
  5112   003144  0E00               	movlw	0
  5113   003146  6E08               	movwf	(___flge@ff2+2)^0,c
  5114   003148  0E00               	movlw	0
  5115   00314A  6E09               	movwf	(___flge@ff2+3)^0,c
  5116   00314C                     l4315:
  5117   00314C  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5118   00314E  EFAB  F018         	goto	u3731
  5119   003152  EFAD  F018         	goto	u3730
  5120   003156                     u3731:
  5121   003156  EFB6  F018         	goto	l4319
  5122   00315A                     u3730:
  5123   00315A  6C02               	negf	___flge@ff1^0,c
  5124   00315C  1E03               	comf	(___flge@ff1+1)^0,f,c
  5125   00315E  B0D8               	btfsc	status,0,c
  5126   003160  2A03               	incf	(___flge@ff1+1)^0,f,c
  5127   003162  1E04               	comf	(___flge@ff1+2)^0,f,c
  5128   003164  B0D8               	btfsc	status,0,c
  5129   003166  2A04               	incf	(___flge@ff1+2)^0,f,c
  5130   003168  0E80               	movlw	128
  5131   00316A  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5132   00316C                     l4319:
  5133   00316C  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5134   00316E  EFBB  F018         	goto	u3741
  5135   003172  EFBD  F018         	goto	u3740
  5136   003176                     u3741:
  5137   003176  EFC6  F018         	goto	l936
  5138   00317A                     u3740:
  5139   00317A  6C06               	negf	___flge@ff2^0,c
  5140   00317C  1E07               	comf	(___flge@ff2+1)^0,f,c
  5141   00317E  B0D8               	btfsc	status,0,c
  5142   003180  2A07               	incf	(___flge@ff2+1)^0,f,c
  5143   003182  1E08               	comf	(___flge@ff2+2)^0,f,c
  5144   003184  B0D8               	btfsc	status,0,c
  5145   003186  2A08               	incf	(___flge@ff2+2)^0,f,c
  5146   003188  0E80               	movlw	128
  5147   00318A  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5148   00318C                     l936:
  5149   00318C  0E00               	movlw	0
  5150   00318E  1A02               	xorwf	___flge@ff1^0,f,c
  5151   003190  0E00               	movlw	0
  5152   003192  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5153   003194  0E00               	movlw	0
  5154   003196  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5155   003198  0E80               	movlw	128
  5156   00319A  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5157   00319C  0E00               	movlw	0
  5158   00319E  1A06               	xorwf	___flge@ff2^0,f,c
  5159   0031A0  0E00               	movlw	0
  5160   0031A2  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5161   0031A4  0E00               	movlw	0
  5162   0031A6  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5163   0031A8  0E80               	movlw	128
  5164   0031AA  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5165   0031AC  5006               	movf	___flge@ff2^0,w,c
  5166   0031AE  5C02               	subwf	___flge@ff1^0,w,c
  5167   0031B0  5007               	movf	(___flge@ff2+1)^0,w,c
  5168   0031B2  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5169   0031B4  5008               	movf	(___flge@ff2+2)^0,w,c
  5170   0031B6  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5171   0031B8  5009               	movf	(___flge@ff2+3)^0,w,c
  5172   0031BA  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5173   0031BC  B0D8               	btfsc	status,0,c
  5174   0031BE  EFE3  F018         	goto	u3751
  5175   0031C2  EFE5  F018         	goto	u3750
  5176   0031C6                     u3751:
  5177   0031C6  EFE8  F018         	goto	l4325
  5178   0031CA                     u3750:
  5179   0031CA  90D8               	bcf	status,0,c
  5180   0031CC  EFE9  F018         	goto	l941
  5181   0031D0                     l4325:
  5182   0031D0  80D8               	bsf	status,0,c
  5183   0031D2                     l941:
  5184   0031D2  0012               	return		;funcret
  5185   0031D4                     __end_of___flge:
  5186                           	callstack 0
  5187                           
  5188 ;; *************** function ___fleq *****************
  5189 ;; Defined at:
  5190 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;  ff1             4    1[COMRAM] unsigned char 
  5193 ;;  ff2             4    5[COMRAM] unsigned char 
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;		None
  5196 ;; Return value:  Size  Location     Type
  5197 ;;		None               void
  5198 ;; Registers used:
  5199 ;;		wreg, status,2, status,0
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5205 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5207 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5208 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5209 ;;Total ram usage:       12 bytes
  5210 ;; Hardware stack levels used: 1
  5211 ;; Hardware stack levels required when called: 1
  5212 ;; This function calls:
  5213 ;;		Nothing
  5214 ;; This function is called by:
  5215 ;;		_convert_rgb2hue
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           	psect	text15
  5220   003686                     __ptext15:
  5221                           	callstack 0
  5222   003686                     ___fleq:
  5223                           	callstack 27
  5224   003686  0E00               	movlw	0
  5225   003688  1402               	andwf	___fleq@ff1^0,w,c
  5226   00368A  6E0A               	movwf	??___fleq^0,c
  5227   00368C  0E00               	movlw	0
  5228   00368E  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5229   003690  6E0B               	movwf	(??___fleq+1)^0,c
  5230   003692  0E80               	movlw	128
  5231   003694  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5232   003696  6E0C               	movwf	(??___fleq+2)^0,c
  5233   003698  0E7F               	movlw	127
  5234   00369A  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5235   00369C  6E0D               	movwf	(??___fleq+3)^0,c
  5236   00369E  500A               	movf	??___fleq^0,w,c
  5237   0036A0  100B               	iorwf	(??___fleq+1)^0,w,c
  5238   0036A2  100C               	iorwf	(??___fleq+2)^0,w,c
  5239   0036A4  100D               	iorwf	(??___fleq+3)^0,w,c
  5240   0036A6  A4D8               	btfss	status,2,c
  5241   0036A8  EF58  F01B         	goto	u3681
  5242   0036AC  EF5A  F01B         	goto	u3680
  5243   0036B0                     u3681:
  5244   0036B0  EF62  F01B         	goto	l4295
  5245   0036B4                     u3680:
  5246   0036B4  0E00               	movlw	0
  5247   0036B6  6E02               	movwf	___fleq@ff1^0,c
  5248   0036B8  0E00               	movlw	0
  5249   0036BA  6E03               	movwf	(___fleq@ff1+1)^0,c
  5250   0036BC  0E00               	movlw	0
  5251   0036BE  6E04               	movwf	(___fleq@ff1+2)^0,c
  5252   0036C0  0E00               	movlw	0
  5253   0036C2  6E05               	movwf	(___fleq@ff1+3)^0,c
  5254   0036C4                     l4295:
  5255   0036C4  0E00               	movlw	0
  5256   0036C6  1406               	andwf	___fleq@ff2^0,w,c
  5257   0036C8  6E0A               	movwf	??___fleq^0,c
  5258   0036CA  0E00               	movlw	0
  5259   0036CC  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5260   0036CE  6E0B               	movwf	(??___fleq+1)^0,c
  5261   0036D0  0E80               	movlw	128
  5262   0036D2  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5263   0036D4  6E0C               	movwf	(??___fleq+2)^0,c
  5264   0036D6  0E7F               	movlw	127
  5265   0036D8  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5266   0036DA  6E0D               	movwf	(??___fleq+3)^0,c
  5267   0036DC  500A               	movf	??___fleq^0,w,c
  5268   0036DE  100B               	iorwf	(??___fleq+1)^0,w,c
  5269   0036E0  100C               	iorwf	(??___fleq+2)^0,w,c
  5270   0036E2  100D               	iorwf	(??___fleq+3)^0,w,c
  5271   0036E4  A4D8               	btfss	status,2,c
  5272   0036E6  EF77  F01B         	goto	u3691
  5273   0036EA  EF79  F01B         	goto	u3690
  5274   0036EE                     u3691:
  5275   0036EE  EF81  F01B         	goto	l4299
  5276   0036F2                     u3690:
  5277   0036F2  0E00               	movlw	0
  5278   0036F4  6E06               	movwf	___fleq@ff2^0,c
  5279   0036F6  0E00               	movlw	0
  5280   0036F8  6E07               	movwf	(___fleq@ff2+1)^0,c
  5281   0036FA  0E00               	movlw	0
  5282   0036FC  6E08               	movwf	(___fleq@ff2+2)^0,c
  5283   0036FE  0E00               	movlw	0
  5284   003700  6E09               	movwf	(___fleq@ff2+3)^0,c
  5285   003702                     l4299:
  5286   003702  5006               	movf	___fleq@ff2^0,w,c
  5287   003704  1802               	xorwf	___fleq@ff1^0,w,c
  5288   003706  E10F               	bnz	u3700
  5289   003708  5007               	movf	(___fleq@ff2+1)^0,w,c
  5290   00370A  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5291   00370C  E10C               	bnz	u3700
  5292   00370E  5008               	movf	(___fleq@ff2+2)^0,w,c
  5293   003710  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5294   003712  E109               	bnz	u3700
  5295   003714  5009               	movf	(___fleq@ff2+3)^0,w,c
  5296   003716  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5297   003718  B4D8               	btfsc	status,2,c
  5298   00371A  EF91  F01B         	goto	u3701
  5299   00371E  EF93  F01B         	goto	u3700
  5300   003722                     u3701:
  5301   003722  EF96  F01B         	goto	l4303
  5302   003726                     u3700:
  5303   003726  90D8               	bcf	status,0,c
  5304   003728  EF97  F01B         	goto	l930
  5305   00372C                     l4303:
  5306   00372C  80D8               	bsf	status,0,c
  5307   00372E                     l930:
  5308   00372E  0012               	return		;funcret
  5309   003730                     __end_of___fleq:
  5310                           	callstack 0
  5311                           
  5312 ;; *************** function ___fldiv *****************
  5313 ;; Defined at:
  5314 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;  b               4   26[COMRAM] unsigned char 
  5317 ;;  a               4   30[COMRAM] unsigned char 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  grs             4   45[COMRAM] unsigned long 
  5320 ;;  rem             4   38[COMRAM] unsigned long 
  5321 ;;  new_exp         2   43[COMRAM] short 
  5322 ;;  aexp            1   50[COMRAM] unsigned char 
  5323 ;;  bexp            1   49[COMRAM] unsigned char 
  5324 ;;  sign            1   42[COMRAM] unsigned char 
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  4   26[COMRAM] unsigned char 
  5327 ;; Registers used:
  5328 ;;		wreg, status,2, status,0
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5334 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5335 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5336 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5337 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5338 ;;Total ram usage:       25 bytes
  5339 ;; Hardware stack levels used: 1
  5340 ;; Hardware stack levels required when called: 1
  5341 ;; This function calls:
  5342 ;;		Nothing
  5343 ;; This function is called by:
  5344 ;;		_convert_rgb2hue
  5345 ;;		_main
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text16
  5350   001F26                     __ptext16:
  5351                           	callstack 0
  5352   001F26                     ___fldiv:
  5353                           	callstack 27
  5354   001F26  501E               	movf	(___fldiv@b+3)^0,w,c
  5355   001F28  0B80               	andlw	128
  5356   001F2A  6E2B               	movwf	___fldiv@sign^0,c
  5357   001F2C  501E               	movf	(___fldiv@b+3)^0,w,c
  5358   001F2E  241E               	addwf	(___fldiv@b+3)^0,w,c
  5359   001F30  6E32               	movwf	___fldiv@bexp^0,c
  5360   001F32  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5361   001F34  EF9E  F00F         	goto	u3261
  5362   001F38  EFA0  F00F         	goto	u3260
  5363   001F3C                     u3261:
  5364   001F3C  EFA1  F00F         	goto	l4023
  5365   001F40                     u3260:
  5366   001F40  8032               	bsf	___fldiv@bexp^0,0,c
  5367   001F42                     l4023:
  5368   001F42  5032               	movf	___fldiv@bexp^0,w,c
  5369   001F44  B4D8               	btfsc	status,2,c
  5370   001F46  EFA7  F00F         	goto	u3271
  5371   001F4A  EFA9  F00F         	goto	u3270
  5372   001F4E                     u3271:
  5373   001F4E  EFBE  F00F         	goto	l4033
  5374   001F52                     u3270:
  5375   001F52  2832               	incf	___fldiv@bexp^0,w,c
  5376   001F54  A4D8               	btfss	status,2,c
  5377   001F56  EFAF  F00F         	goto	u3281
  5378   001F5A  EFB1  F00F         	goto	u3280
  5379   001F5E                     u3281:
  5380   001F5E  EFB9  F00F         	goto	l4029
  5381   001F62                     u3280:
  5382   001F62  0E00               	movlw	0
  5383   001F64  6E1B               	movwf	___fldiv@b^0,c
  5384   001F66  0E00               	movlw	0
  5385   001F68  6E1C               	movwf	(___fldiv@b+1)^0,c
  5386   001F6A  0E00               	movlw	0
  5387   001F6C  6E1D               	movwf	(___fldiv@b+2)^0,c
  5388   001F6E  0E00               	movlw	0
  5389   001F70  6E1E               	movwf	(___fldiv@b+3)^0,c
  5390   001F72                     l4029:
  5391   001F72  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5392   001F74  0E00               	movlw	0
  5393   001F76  6E1E               	movwf	(___fldiv@b+3)^0,c
  5394   001F78  EFC6  F00F         	goto	l4035
  5395   001F7C                     l4033:
  5396   001F7C  0E00               	movlw	0
  5397   001F7E  6E1B               	movwf	___fldiv@b^0,c
  5398   001F80  0E00               	movlw	0
  5399   001F82  6E1C               	movwf	(___fldiv@b+1)^0,c
  5400   001F84  0E00               	movlw	0
  5401   001F86  6E1D               	movwf	(___fldiv@b+2)^0,c
  5402   001F88  0E00               	movlw	0
  5403   001F8A  6E1E               	movwf	(___fldiv@b+3)^0,c
  5404   001F8C                     l4035:
  5405   001F8C  5022               	movf	(___fldiv@a+3)^0,w,c
  5406   001F8E  0B80               	andlw	128
  5407   001F90  1A2B               	xorwf	___fldiv@sign^0,f,c
  5408   001F92  5022               	movf	(___fldiv@a+3)^0,w,c
  5409   001F94  2422               	addwf	(___fldiv@a+3)^0,w,c
  5410   001F96  6E33               	movwf	___fldiv@aexp^0,c
  5411   001F98  AE21               	btfss	(___fldiv@a+2)^0,7,c
  5412   001F9A  EFD1  F00F         	goto	u3291
  5413   001F9E  EFD3  F00F         	goto	u3290
  5414   001FA2                     u3291:
  5415   001FA2  EFD4  F00F         	goto	l4043
  5416   001FA6                     u3290:
  5417   001FA6  8033               	bsf	___fldiv@aexp^0,0,c
  5418   001FA8                     l4043:
  5419   001FA8  5033               	movf	___fldiv@aexp^0,w,c
  5420   001FAA  B4D8               	btfsc	status,2,c
  5421   001FAC  EFDA  F00F         	goto	u3301
  5422   001FB0  EFDC  F00F         	goto	u3300
  5423   001FB4                     u3301:
  5424   001FB4  EFF1  F00F         	goto	l4053
  5425   001FB8                     u3300:
  5426   001FB8  2833               	incf	___fldiv@aexp^0,w,c
  5427   001FBA  A4D8               	btfss	status,2,c
  5428   001FBC  EFE2  F00F         	goto	u3311
  5429   001FC0  EFE4  F00F         	goto	u3310
  5430   001FC4                     u3311:
  5431   001FC4  EFEC  F00F         	goto	l4049
  5432   001FC8                     u3310:
  5433   001FC8  0E00               	movlw	0
  5434   001FCA  6E1F               	movwf	___fldiv@a^0,c
  5435   001FCC  0E00               	movlw	0
  5436   001FCE  6E20               	movwf	(___fldiv@a+1)^0,c
  5437   001FD0  0E00               	movlw	0
  5438   001FD2  6E21               	movwf	(___fldiv@a+2)^0,c
  5439   001FD4  0E00               	movlw	0
  5440   001FD6  6E22               	movwf	(___fldiv@a+3)^0,c
  5441   001FD8                     l4049:
  5442   001FD8  8E21               	bsf	(___fldiv@a+2)^0,7,c
  5443   001FDA  0E00               	movlw	0
  5444   001FDC  6E22               	movwf	(___fldiv@a+3)^0,c
  5445   001FDE  EFF9  F00F         	goto	l4055
  5446   001FE2                     l4053:
  5447   001FE2  0E00               	movlw	0
  5448   001FE4  6E1F               	movwf	___fldiv@a^0,c
  5449   001FE6  0E00               	movlw	0
  5450   001FE8  6E20               	movwf	(___fldiv@a+1)^0,c
  5451   001FEA  0E00               	movlw	0
  5452   001FEC  6E21               	movwf	(___fldiv@a+2)^0,c
  5453   001FEE  0E00               	movlw	0
  5454   001FF0  6E22               	movwf	(___fldiv@a+3)^0,c
  5455   001FF2                     l4055:
  5456   001FF2  501F               	movf	___fldiv@a^0,w,c
  5457   001FF4  1020               	iorwf	(___fldiv@a+1)^0,w,c
  5458   001FF6  1021               	iorwf	(___fldiv@a+2)^0,w,c
  5459   001FF8  1022               	iorwf	(___fldiv@a+3)^0,w,c
  5460   001FFA  A4D8               	btfss	status,2,c
  5461   001FFC  EF02  F010         	goto	u3321
  5462   002000  EF04  F010         	goto	u3320
  5463   002004                     u3321:
  5464   002004  EF1C  F010         	goto	l4067
  5465   002008                     u3320:
  5466   002008  0E00               	movlw	0
  5467   00200A  6E1B               	movwf	___fldiv@b^0,c
  5468   00200C  0E00               	movlw	0
  5469   00200E  6E1C               	movwf	(___fldiv@b+1)^0,c
  5470   002010  0E00               	movlw	0
  5471   002012  6E1D               	movwf	(___fldiv@b+2)^0,c
  5472   002014  0E00               	movlw	0
  5473   002016  6E1E               	movwf	(___fldiv@b+3)^0,c
  5474   002018  0E80               	movlw	128
  5475   00201A  121D               	iorwf	(___fldiv@b+2)^0,f,c
  5476   00201C  0E7F               	movlw	127
  5477   00201E  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5478   002020                     l4061:
  5479   002020  502B               	movf	___fldiv@sign^0,w,c
  5480   002022  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5481   002024  C01B  F01B         	movff	___fldiv@b,?___fldiv
  5482   002028  C01C  F01C         	movff	___fldiv@b+1,?___fldiv+1
  5483   00202C  C01D  F01D         	movff	___fldiv@b+2,?___fldiv+2
  5484   002030  C01E  F01E         	movff	___fldiv@b+3,?___fldiv+3
  5485   002034  EF5F  F011         	goto	l1253
  5486   002038                     l4067:
  5487   002038  5032               	movf	___fldiv@bexp^0,w,c
  5488   00203A  A4D8               	btfss	status,2,c
  5489   00203C  EF22  F010         	goto	u3331
  5490   002040  EF24  F010         	goto	u3330
  5491   002044                     u3331:
  5492   002044  EF2E  F010         	goto	l4075
  5493   002048                     u3330:
  5494   002048  0E00               	movlw	0
  5495   00204A  6E1B               	movwf	?___fldiv^0,c
  5496   00204C  0E00               	movlw	0
  5497   00204E  6E1C               	movwf	(?___fldiv+1)^0,c
  5498   002050  0E00               	movlw	0
  5499   002052  6E1D               	movwf	(?___fldiv+2)^0,c
  5500   002054  0E00               	movlw	0
  5501   002056  6E1E               	movwf	(?___fldiv+3)^0,c
  5502   002058  EF5F  F011         	goto	l1253
  5503   00205C                     l4075:
  5504   00205C  5033               	movf	___fldiv@aexp^0,w,c
  5505   00205E  C032  F023         	movff	___fldiv@bexp,??___fldiv
  5506   002062  6A24               	clrf	(??___fldiv+1)^0,c
  5507   002064  5E23               	subwf	??___fldiv^0,f,c
  5508   002066  0E00               	movlw	0
  5509   002068  5A24               	subwfb	(??___fldiv+1)^0,f,c
  5510   00206A  0E7F               	movlw	127
  5511   00206C  2423               	addwf	??___fldiv^0,w,c
  5512   00206E  6E2C               	movwf	___fldiv@new_exp^0,c
  5513   002070  0E00               	movlw	0
  5514   002072  2024               	addwfc	(??___fldiv+1)^0,w,c
  5515   002074  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5516   002076  C01B  F027         	movff	___fldiv@b,___fldiv@rem
  5517   00207A  C01C  F028         	movff	___fldiv@b+1,___fldiv@rem+1
  5518   00207E  C01D  F029         	movff	___fldiv@b+2,___fldiv@rem+2
  5519   002082  C01E  F02A         	movff	___fldiv@b+3,___fldiv@rem+3
  5520   002086  0E00               	movlw	0
  5521   002088  6E1B               	movwf	___fldiv@b^0,c
  5522   00208A  0E00               	movlw	0
  5523   00208C  6E1C               	movwf	(___fldiv@b+1)^0,c
  5524   00208E  0E00               	movlw	0
  5525   002090  6E1D               	movwf	(___fldiv@b+2)^0,c
  5526   002092  0E00               	movlw	0
  5527   002094  6E1E               	movwf	(___fldiv@b+3)^0,c
  5528   002096  0E00               	movlw	0
  5529   002098  6E2E               	movwf	___fldiv@grs^0,c
  5530   00209A  0E00               	movlw	0
  5531   00209C  6E2F               	movwf	(___fldiv@grs+1)^0,c
  5532   00209E  0E00               	movlw	0
  5533   0020A0  6E30               	movwf	(___fldiv@grs+2)^0,c
  5534   0020A2  0E00               	movlw	0
  5535   0020A4  6E31               	movwf	(___fldiv@grs+3)^0,c
  5536   0020A6  0E00               	movlw	0
  5537   0020A8  6E33               	movwf	___fldiv@aexp^0,c
  5538   0020AA  EF8F  F010         	goto	l1255
  5539   0020AE                     l4085:
  5540   0020AE  5033               	movf	___fldiv@aexp^0,w,c
  5541   0020B0  B4D8               	btfsc	status,2,c
  5542   0020B2  EF5D  F010         	goto	u3341
  5543   0020B6  EF5F  F010         	goto	u3340
  5544   0020BA                     u3341:
  5545   0020BA  EF76  F010         	goto	l4093
  5546   0020BE                     u3340:
  5547   0020BE  90D8               	bcf	status,0,c
  5548   0020C0  3627               	rlcf	___fldiv@rem^0,f,c
  5549   0020C2  3628               	rlcf	(___fldiv@rem+1)^0,f,c
  5550   0020C4  3629               	rlcf	(___fldiv@rem+2)^0,f,c
  5551   0020C6  362A               	rlcf	(___fldiv@rem+3)^0,f,c
  5552   0020C8  90D8               	bcf	status,0,c
  5553   0020CA  361B               	rlcf	___fldiv@b^0,f,c
  5554   0020CC  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5555   0020CE  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5556   0020D0  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5557   0020D2  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5558   0020D4  EF6E  F010         	goto	u3351
  5559   0020D8  EF70  F010         	goto	u3350
  5560   0020DC                     u3351:
  5561   0020DC  EF71  F010         	goto	l1258
  5562   0020E0                     u3350:
  5563   0020E0  801B               	bsf	___fldiv@b^0,0,c
  5564   0020E2                     l1258:
  5565   0020E2  90D8               	bcf	status,0,c
  5566   0020E4  362E               	rlcf	___fldiv@grs^0,f,c
  5567   0020E6  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5568   0020E8  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5569   0020EA  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5570   0020EC                     l4093:
  5571   0020EC  501F               	movf	___fldiv@a^0,w,c
  5572   0020EE  5C27               	subwf	___fldiv@rem^0,w,c
  5573   0020F0  5020               	movf	(___fldiv@a+1)^0,w,c
  5574   0020F2  5828               	subwfb	(___fldiv@rem+1)^0,w,c
  5575   0020F4  5021               	movf	(___fldiv@a+2)^0,w,c
  5576   0020F6  5829               	subwfb	(___fldiv@rem+2)^0,w,c
  5577   0020F8  5022               	movf	(___fldiv@a+3)^0,w,c
  5578   0020FA  582A               	subwfb	(___fldiv@rem+3)^0,w,c
  5579   0020FC  A0D8               	btfss	status,0,c
  5580   0020FE  EF83  F010         	goto	u3361
  5581   002102  EF85  F010         	goto	u3360
  5582   002106                     u3361:
  5583   002106  EF8E  F010         	goto	l4099
  5584   00210A                     u3360:
  5585   00210A  8C31               	bsf	(___fldiv@grs+3)^0,6,c
  5586   00210C  501F               	movf	___fldiv@a^0,w,c
  5587   00210E  5E27               	subwf	___fldiv@rem^0,f,c
  5588   002110  5020               	movf	(___fldiv@a+1)^0,w,c
  5589   002112  5A28               	subwfb	(___fldiv@rem+1)^0,f,c
  5590   002114  5021               	movf	(___fldiv@a+2)^0,w,c
  5591   002116  5A29               	subwfb	(___fldiv@rem+2)^0,f,c
  5592   002118  5022               	movf	(___fldiv@a+3)^0,w,c
  5593   00211A  5A2A               	subwfb	(___fldiv@rem+3)^0,f,c
  5594   00211C                     l4099:
  5595   00211C  2A33               	incf	___fldiv@aexp^0,f,c
  5596   00211E                     l1255:
  5597   00211E  0E19               	movlw	25
  5598   002120  6433               	cpfsgt	___fldiv@aexp^0,c
  5599   002122  EF95  F010         	goto	u3371
  5600   002126  EF97  F010         	goto	u3370
  5601   00212A                     u3371:
  5602   00212A  EF57  F010         	goto	l4085
  5603   00212E                     u3370:
  5604   00212E  5027               	movf	___fldiv@rem^0,w,c
  5605   002130  1028               	iorwf	(___fldiv@rem+1)^0,w,c
  5606   002132  1029               	iorwf	(___fldiv@rem+2)^0,w,c
  5607   002134  102A               	iorwf	(___fldiv@rem+3)^0,w,c
  5608   002136  B4D8               	btfsc	status,2,c
  5609   002138  EFA0  F010         	goto	u3381
  5610   00213C  EFA2  F010         	goto	u3380
  5611   002140                     u3381:
  5612   002140  EFBA  F010         	goto	l4111
  5613   002144                     u3380:
  5614   002144  802E               	bsf	___fldiv@grs^0,0,c
  5615   002146  EFBA  F010         	goto	l4111
  5616   00214A                     l4105:
  5617   00214A  90D8               	bcf	status,0,c
  5618   00214C  361B               	rlcf	___fldiv@b^0,f,c
  5619   00214E  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5620   002150  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5621   002152  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5622   002154  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5623   002156  EFAF  F010         	goto	u3391
  5624   00215A  EFB1  F010         	goto	u3390
  5625   00215E                     u3391:
  5626   00215E  EFB2  F010         	goto	l1264
  5627   002162                     u3390:
  5628   002162  801B               	bsf	___fldiv@b^0,0,c
  5629   002164                     l1264:
  5630   002164  90D8               	bcf	status,0,c
  5631   002166  362E               	rlcf	___fldiv@grs^0,f,c
  5632   002168  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5633   00216A  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5634   00216C  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5635   00216E  062C               	decf	___fldiv@new_exp^0,f,c
  5636   002170  A0D8               	btfss	status,0,c
  5637   002172  062D               	decf	(___fldiv@new_exp+1)^0,f,c
  5638   002174                     l4111:
  5639   002174  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5640   002176  EFBF  F010         	goto	u3401
  5641   00217A  EFC1  F010         	goto	u3400
  5642   00217E                     u3401:
  5643   00217E  EFA5  F010         	goto	l4105
  5644   002182                     u3400:
  5645   002182  0E00               	movlw	0
  5646   002184  6E33               	movwf	___fldiv@aexp^0,c
  5647   002186  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5648   002188  EFC8  F010         	goto	u3411
  5649   00218C  EFCA  F010         	goto	u3410
  5650   002190                     u3411:
  5651   002190  EFEE  F010         	goto	l1266
  5652   002194                     u3410:
  5653   002194  0EFF               	movlw	255
  5654   002196  142E               	andwf	___fldiv@grs^0,w,c
  5655   002198  6E23               	movwf	??___fldiv^0,c
  5656   00219A  0EFF               	movlw	255
  5657   00219C  142F               	andwf	(___fldiv@grs+1)^0,w,c
  5658   00219E  6E24               	movwf	(??___fldiv+1)^0,c
  5659   0021A0  0EFF               	movlw	255
  5660   0021A2  1430               	andwf	(___fldiv@grs+2)^0,w,c
  5661   0021A4  6E25               	movwf	(??___fldiv+2)^0,c
  5662   0021A6  0E7F               	movlw	127
  5663   0021A8  1431               	andwf	(___fldiv@grs+3)^0,w,c
  5664   0021AA  6E26               	movwf	(??___fldiv+3)^0,c
  5665   0021AC  5023               	movf	??___fldiv^0,w,c
  5666   0021AE  1024               	iorwf	(??___fldiv+1)^0,w,c
  5667   0021B0  1025               	iorwf	(??___fldiv+2)^0,w,c
  5668   0021B2  1026               	iorwf	(??___fldiv+3)^0,w,c
  5669   0021B4  B4D8               	btfsc	status,2,c
  5670   0021B6  EFDF  F010         	goto	u3421
  5671   0021BA  EFE1  F010         	goto	u3420
  5672   0021BE                     u3421:
  5673   0021BE  EFE5  F010         	goto	l1267
  5674   0021C2                     u3420:
  5675   0021C2                     l4119:
  5676   0021C2  0E01               	movlw	1
  5677   0021C4  6E33               	movwf	___fldiv@aexp^0,c
  5678   0021C6  EFEE  F010         	goto	l1266
  5679   0021CA                     l1267:
  5680   0021CA  A01B               	btfss	___fldiv@b^0,0,c
  5681   0021CC  EFEA  F010         	goto	u3431
  5682   0021D0  EFEC  F010         	goto	u3430
  5683   0021D4                     u3431:
  5684   0021D4  EFEE  F010         	goto	l1266
  5685   0021D8                     u3430:
  5686   0021D8  EFE1  F010         	goto	l4119
  5687   0021DC                     l1266:
  5688   0021DC  5033               	movf	___fldiv@aexp^0,w,c
  5689   0021DE  B4D8               	btfsc	status,2,c
  5690   0021E0  EFF4  F010         	goto	u3441
  5691   0021E4  EFF6  F010         	goto	u3440
  5692   0021E8                     u3441:
  5693   0021E8  EF1A  F011         	goto	l4131
  5694   0021EC                     u3440:
  5695   0021EC  0E01               	movlw	1
  5696   0021EE  261B               	addwf	___fldiv@b^0,f,c
  5697   0021F0  0E00               	movlw	0
  5698   0021F2  221C               	addwfc	(___fldiv@b+1)^0,f,c
  5699   0021F4  221D               	addwfc	(___fldiv@b+2)^0,f,c
  5700   0021F6  221E               	addwfc	(___fldiv@b+3)^0,f,c
  5701   0021F8  A01E               	btfss	(___fldiv@b+3)^0,0,c
  5702   0021FA  EF01  F011         	goto	u3451
  5703   0021FE  EF03  F011         	goto	u3450
  5704   002202                     u3451:
  5705   002202  EF1A  F011         	goto	l4131
  5706   002206                     u3450:
  5707   002206  C01B  F023         	movff	___fldiv@b,??___fldiv
  5708   00220A  C01C  F024         	movff	___fldiv@b+1,??___fldiv+1
  5709   00220E  C01D  F025         	movff	___fldiv@b+2,??___fldiv+2
  5710   002212  C01E  F026         	movff	___fldiv@b+3,??___fldiv+3
  5711   002216  3426               	rlcf	(??___fldiv+3)^0,w,c
  5712   002218  3226               	rrcf	(??___fldiv+3)^0,f,c
  5713   00221A  3225               	rrcf	(??___fldiv+2)^0,f,c
  5714   00221C  3224               	rrcf	(??___fldiv+1)^0,f,c
  5715   00221E  3223               	rrcf	??___fldiv^0,f,c
  5716   002220  C023  F01B         	movff	??___fldiv,___fldiv@b
  5717   002224  C024  F01C         	movff	??___fldiv+1,___fldiv@b+1
  5718   002228  C025  F01D         	movff	??___fldiv+2,___fldiv@b+2
  5719   00222C  C026  F01E         	movff	??___fldiv+3,___fldiv@b+3
  5720   002230  4A2C               	infsnz	___fldiv@new_exp^0,f,c
  5721   002232  2A2D               	incf	(___fldiv@new_exp+1)^0,f,c
  5722   002234                     l4131:
  5723   002234  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5724   002236  EF25  F011         	goto	u3461
  5725   00223A  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5726   00223C  E108               	bnz	u3460
  5727   00223E  282C               	incf	___fldiv@new_exp^0,w,c
  5728   002240  A0D8               	btfss	status,0,c
  5729   002242  EF25  F011         	goto	u3461
  5730   002246  EF27  F011         	goto	u3460
  5731   00224A                     u3461:
  5732   00224A  EF32  F011         	goto	l4135
  5733   00224E                     u3460:
  5734   00224E  0E00               	movlw	0
  5735   002250  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5736   002252  682C               	setf	___fldiv@new_exp^0,c
  5737   002254  0E00               	movlw	0
  5738   002256  6E1B               	movwf	___fldiv@b^0,c
  5739   002258  0E00               	movlw	0
  5740   00225A  6E1C               	movwf	(___fldiv@b+1)^0,c
  5741   00225C  0E00               	movlw	0
  5742   00225E  6E1D               	movwf	(___fldiv@b+2)^0,c
  5743   002260  0E00               	movlw	0
  5744   002262  6E1E               	movwf	(___fldiv@b+3)^0,c
  5745   002264                     l4135:
  5746   002264  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5747   002266  EF3F  F011         	goto	u3470
  5748   00226A  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5749   00226C  E106               	bnz	u3471
  5750   00226E  042C               	decf	___fldiv@new_exp^0,w,c
  5751   002270  B0D8               	btfsc	status,0,c
  5752   002272  EF3D  F011         	goto	u3471
  5753   002276  EF3F  F011         	goto	u3470
  5754   00227A                     u3471:
  5755   00227A  EF4D  F011         	goto	l4139
  5756   00227E                     u3470:
  5757   00227E  0E00               	movlw	0
  5758   002280  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5759   002282  0E00               	movlw	0
  5760   002284  6E2C               	movwf	___fldiv@new_exp^0,c
  5761   002286  0E00               	movlw	0
  5762   002288  6E1B               	movwf	___fldiv@b^0,c
  5763   00228A  0E00               	movlw	0
  5764   00228C  6E1C               	movwf	(___fldiv@b+1)^0,c
  5765   00228E  0E00               	movlw	0
  5766   002290  6E1D               	movwf	(___fldiv@b+2)^0,c
  5767   002292  0E00               	movlw	0
  5768   002294  6E1E               	movwf	(___fldiv@b+3)^0,c
  5769   002296  0E00               	movlw	0
  5770   002298  6E2B               	movwf	___fldiv@sign^0,c
  5771   00229A                     l4139:
  5772   00229A  C02C  F032         	movff	___fldiv@new_exp,___fldiv@bexp
  5773   00229E  A032               	btfss	___fldiv@bexp^0,0,c
  5774   0022A0  EF54  F011         	goto	u3481
  5775   0022A4  EF56  F011         	goto	u3480
  5776   0022A8                     u3481:
  5777   0022A8  EF59  F011         	goto	l4145
  5778   0022AC                     u3480:
  5779   0022AC  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5780   0022AE  EF5A  F011         	goto	l4147
  5781   0022B2                     l4145:
  5782   0022B2  9E1D               	bcf	(___fldiv@b+2)^0,7,c
  5783   0022B4                     l4147:
  5784   0022B4  90D8               	bcf	status,0,c
  5785   0022B6  3032               	rrcf	___fldiv@bexp^0,w,c
  5786   0022B8  6E1E               	movwf	(___fldiv@b+3)^0,c
  5787   0022BA  EF10  F010         	goto	l4061
  5788   0022BE                     l1253:
  5789   0022BE  0012               	return		;funcret
  5790   0022C0                     __end_of___fldiv:
  5791                           	callstack 0
  5792                           
  5793 ;; *************** function _initUSART4 *****************
  5794 ;; Defined at:
  5795 ;;		line 14 in file "serial.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;		None
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;		None
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      void 
  5802 ;; Registers used:
  5803 ;;		wreg, status,2
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5813 ;;Total ram usage:        0 bytes
  5814 ;; Hardware stack levels used: 1
  5815 ;; Hardware stack levels required when called: 1
  5816 ;; This function calls:
  5817 ;;		Nothing
  5818 ;; This function is called by:
  5819 ;;		_main
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text17
  5824   004470                     __ptext17:
  5825                           	callstack 0
  5826   004470                     _initUSART4:
  5827                           	callstack 29
  5828   004470                     
  5829                           ;serial.c: 15:     RC0PPS = 0x12;
  5830   004470  0E12               	movlw	18
  5831   004472  010E               	movlb	14	; () banked
  5832   004474  6F62               	movwf	98,b	;volatile
  5833                           
  5834                           ;serial.c: 16:     RX4PPS = 0x11;
  5835   004476  0E11               	movlw	17
  5836   004478  6F15               	movwf	21,b	;volatile
  5837   00447A                     
  5838                           ; BSR set to: 14
  5839                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  5840   00447A  97E9               	bcf	233,3,b	;volatile
  5841   00447C                     
  5842                           ; BSR set to: 14
  5843                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  5844   00447C  95E8               	bcf	232,2,b	;volatile
  5845                           
  5846                           ;serial.c: 19:     SP4BRGL = 51;
  5847   00447E  0E33               	movlw	51
  5848   004480  6FE5               	movwf	229,b	;volatile
  5849                           
  5850                           ;serial.c: 20:     SP4BRGH = 0;
  5851   004482  0E00               	movlw	0
  5852   004484  6FE6               	movwf	230,b	;volatile
  5853   004486                     
  5854                           ; BSR set to: 14
  5855                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  5856   004486  89E7               	bsf	231,4,b	;volatile
  5857   004488                     
  5858                           ; BSR set to: 14
  5859                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  5860   004488  8BE8               	bsf	232,5,b	;volatile
  5861   00448A                     
  5862                           ; BSR set to: 14
  5863                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  5864   00448A  8FE7               	bsf	231,7,b	;volatile
  5865   00448C                     
  5866                           ; BSR set to: 14
  5867   00448C  0012               	return		;funcret
  5868   00448E                     __end_of_initUSART4:
  5869                           	callstack 0
  5870                           
  5871 ;; *************** function _initDCmotorsPWM *****************
  5872 ;; Defined at:
  5873 ;;		line 5 in file "dc_motor.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;		None
  5878 ;; Return value:  Size  Location     Type
  5879 ;;                  1    wreg      void 
  5880 ;; Registers used:
  5881 ;;		wreg, status,2
  5882 ;; Tracked objects:
  5883 ;;		On entry : 0/0
  5884 ;;		On exit  : 0/0
  5885 ;;		Unchanged: 0/0
  5886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5890 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5891 ;;Total ram usage:        2 bytes
  5892 ;; Hardware stack levels used: 1
  5893 ;; Hardware stack levels required when called: 1
  5894 ;; This function calls:
  5895 ;;		Nothing
  5896 ;; This function is called by:
  5897 ;;		_main
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901                           	psect	text18
  5902   003870                     __ptext18:
  5903                           	callstack 0
  5904   003870                     _initDCmotorsPWM:
  5905                           	callstack 29
  5906   003870                     
  5907                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  5908   003870  9485               	bcf	133,2,c	;volatile
  5909                           
  5910                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  5911   003872  9E83               	bcf	131,7,c	;volatile
  5912                           
  5913                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  5914   003874  9885               	bcf	133,4,c	;volatile
  5915                           
  5916                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  5917   003876  9C87               	bcf	135,6,c	;volatile
  5918                           
  5919                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5920   003878  947D               	bcf	125,2,c	;volatile
  5921                           
  5922                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  5923   00387A  9E7B               	bcf	123,7,c	;volatile
  5924                           
  5925                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5926   00387C  987D               	bcf	125,4,c	;volatile
  5927                           
  5928                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  5929   00387E  9C7F               	bcf	127,6,c	;volatile
  5930   003880                     
  5931                           ;dc_motor.c: 18:     RE2PPS=0x05;
  5932   003880  0E05               	movlw	5
  5933   003882  010E               	movlb	14	; () banked
  5934   003884  6F74               	movwf	116,b	;volatile
  5935                           
  5936                           ;dc_motor.c: 19:     RE4PPS=0x06;
  5937   003886  0E06               	movlw	6
  5938   003888  6F76               	movwf	118,b	;volatile
  5939                           
  5940                           ;dc_motor.c: 20:     RC7PPS=0x07;
  5941   00388A  0E07               	movlw	7
  5942   00388C  6F69               	movwf	105,b	;volatile
  5943                           
  5944                           ;dc_motor.c: 21:     RG6PPS=0x08;
  5945   00388E  0E08               	movlw	8
  5946   003890  6F88               	movwf	136,b	;volatile
  5947                           
  5948                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  5949   003892  50BD               	movf	189,w,c	;volatile
  5950   003894  0B8F               	andlw	-113
  5951   003896  0940               	iorlw	64
  5952   003898  6EBD               	movwf	189,c	;volatile
  5953                           
  5954                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  5955   00389A  0EE0               	movlw	-32
  5956   00389C  16BE               	andwf	190,f,c	;volatile
  5957                           
  5958                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  5959   00389E  50BF               	movf	191,w,c	;volatile
  5960   0038A0  0BF0               	andlw	-16
  5961   0038A2  0901               	iorlw	1
  5962   0038A4  6EBF               	movwf	191,c	;volatile
  5963   0038A6                     
  5964                           ; BSR set to: 14
  5965                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  5966   0038A6  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5967   0038AA                     
  5968                           ; BSR set to: 14
  5969                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  5970   0038AA  8EBD               	bsf	189,7,c	;volatile
  5971                           
  5972                           ;dc_motor.c: 35:     CCPR1H=0;
  5973   0038AC  0E00               	movlw	0
  5974   0038AE  6EAA               	movwf	170,c	;volatile
  5975                           
  5976                           ;dc_motor.c: 36:     CCPR2H=0;
  5977   0038B0  0E00               	movlw	0
  5978   0038B2  6EA6               	movwf	166,c	;volatile
  5979                           
  5980                           ;dc_motor.c: 37:     CCPR3H=0;
  5981   0038B4  0E00               	movlw	0
  5982   0038B6  010F               	movlb	15	; () banked
  5983   0038B8  6F25               	movwf	37,b	;volatile
  5984                           
  5985                           ;dc_motor.c: 38:     CCPR4H=0;
  5986   0038BA  0E00               	movlw	0
  5987   0038BC  6F21               	movwf	33,b	;volatile
  5988                           
  5989                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  5990   0038BE  0EFC               	movlw	-4
  5991   0038C0  16AD               	andwf	173,f,c	;volatile
  5992                           
  5993                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  5994   0038C2  0EF3               	movlw	-13
  5995   0038C4  16AD               	andwf	173,f,c	;volatile
  5996                           
  5997                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  5998   0038C6  0ECF               	movlw	-49
  5999   0038C8  16AD               	andwf	173,f,c	;volatile
  6000                           
  6001                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  6002   0038CA  0E3F               	movlw	-193
  6003   0038CC  16AD               	andwf	173,f,c	;volatile
  6004   0038CE                     
  6005                           ; BSR set to: 15
  6006                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  6007   0038CE  88AB               	bsf	171,4,c	;volatile
  6008                           
  6009                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  6010   0038D0  50AB               	movf	171,w,c	;volatile
  6011   0038D2  0BF0               	andlw	-16
  6012   0038D4  090C               	iorlw	12
  6013   0038D6  6EAB               	movwf	171,c	;volatile
  6014   0038D8                     
  6015                           ; BSR set to: 15
  6016                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  6017   0038D8  8EAB               	bsf	171,7,c	;volatile
  6018   0038DA                     
  6019                           ; BSR set to: 15
  6020                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  6021   0038DA  88A7               	bsf	167,4,c	;volatile
  6022                           
  6023                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  6024   0038DC  50A7               	movf	167,w,c	;volatile
  6025   0038DE  0BF0               	andlw	-16
  6026   0038E0  090C               	iorlw	12
  6027   0038E2  6EA7               	movwf	167,c	;volatile
  6028   0038E4                     
  6029                           ; BSR set to: 15
  6030                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  6031   0038E4  8EA7               	bsf	167,7,c	;volatile
  6032   0038E6                     
  6033                           ; BSR set to: 15
  6034                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  6035   0038E6  8926               	bsf	38,4,b	;volatile
  6036                           
  6037                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  6038   0038E8  5126               	movf	38,w,b	;volatile
  6039   0038EA  0BF0               	andlw	-16
  6040   0038EC  090C               	iorlw	12
  6041   0038EE  6F26               	movwf	38,b	;volatile
  6042   0038F0                     
  6043                           ; BSR set to: 15
  6044                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6045   0038F0  8F26               	bsf	38,7,b	;volatile
  6046   0038F2                     
  6047                           ; BSR set to: 15
  6048                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6049   0038F2  8922               	bsf	34,4,b	;volatile
  6050                           
  6051                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6052   0038F4  5122               	movf	34,w,b	;volatile
  6053   0038F6  0BF0               	andlw	-16
  6054   0038F8  090C               	iorlw	12
  6055   0038FA  6F22               	movwf	34,b	;volatile
  6056   0038FC                     
  6057                           ; BSR set to: 15
  6058                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6059   0038FC  8F22               	bsf	34,7,b	;volatile
  6060   0038FE                     
  6061                           ; BSR set to: 15
  6062   0038FE  0012               	return		;funcret
  6063   003900                     __end_of_initDCmotorsPWM:
  6064                           	callstack 0
  6065                           
  6066 ;; *************** function _get16bitTMR0val *****************
  6067 ;; Defined at:
  6068 ;;		line 32 in file "timers.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;		None
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  combined_val    2    7[COMRAM] unsigned int 
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  2    1[COMRAM] unsigned int 
  6075 ;; Registers used:
  6076 ;;		wreg, status,2, status,0
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6082 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6083 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6084 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6085 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6086 ;;Total ram usage:        8 bytes
  6087 ;; Hardware stack levels used: 1
  6088 ;; Hardware stack levels required when called: 1
  6089 ;; This function calls:
  6090 ;;		Nothing
  6091 ;; This function is called by:
  6092 ;;		_main
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           	psect	text19
  6097   00442E                     __ptext19:
  6098                           	callstack 0
  6099   00442E                     _get16bitTMR0val:
  6100                           	callstack 29
  6101   00442E                     
  6102                           ;timers.c: 34:     unsigned int combined_value;;timers.c: 35:     combined_value = TMR0L
      +                           | (TMR0H << 8);
  6103   00442E  50D4               	movf	212,w,c	;volatile
  6104   004430  6E05               	movwf	(??_get16bitTMR0val+1)^0,c
  6105   004432  6A04               	clrf	??_get16bitTMR0val^0,c
  6106   004434  50D3               	movf	211,w,c	;volatile
  6107   004436  6E06               	movwf	(??_get16bitTMR0val+2)^0,c
  6108   004438  6A07               	clrf	(??_get16bitTMR0val+3)^0,c
  6109   00443A  5004               	movf	??_get16bitTMR0val^0,w,c
  6110   00443C  1006               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6111   00443E  6E08               	movwf	get16bitTMR0val@combined_value^0,c
  6112   004440  5005               	movf	(??_get16bitTMR0val+1)^0,w,c
  6113   004442  1007               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6114   004444  6E09               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6115   004446                     
  6116                           ;timers.c: 36:     return combined_value;
  6117   004446  C008  F002         	movff	get16bitTMR0val@combined_value,?_get16bitTMR0val
  6118   00444A  C009  F003         	movff	get16bitTMR0val@combined_value+1,?_get16bitTMR0val+1
  6119   00444E  0012               	return		;funcret
  6120   004450                     __end_of_get16bitTMR0val:
  6121                           	callstack 0
  6122                           
  6123 ;; *************** function _decision *****************
  6124 ;; Defined at:
  6125 ;;		line 277 in file "color.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;  hue             2   70[COMRAM] unsigned int 
  6128 ;;  path_length     2   72[COMRAM] unsigned int 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  color           2   74[COMRAM] unsigned int 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      void 
  6133 ;; Registers used:
  6134 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6140 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6141 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6143 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6144 ;;Total ram usage:        6 bytes
  6145 ;; Hardware stack levels used: 1
  6146 ;; Hardware stack levels required when called: 10
  6147 ;; This function calls:
  6148 ;;		_moveBlue
  6149 ;;		_moveGreen
  6150 ;;		_moveLightBlue
  6151 ;;		_moveOrange
  6152 ;;		_movePink
  6153 ;;		_moveRed
  6154 ;;		_moveYellow
  6155 ;;		_send2USART
  6156 ;; This function is called by:
  6157 ;;		_main
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           	psect	text20
  6162   0025CE                     __ptext20:
  6163                           	callstack 0
  6164   0025CE                     _decision:
  6165                           	callstack 20
  6166   0025CE                     
  6167                           ;color.c: 282:     unsigned int color;;color.c: 284:     if (hue<=10 || hue>=355) {
  6168   0025CE  5048               	movf	(decision@hue+1)^0,w,c
  6169   0025D0  E109               	bnz	u5180
  6170   0025D2  0E0B               	movlw	11
  6171   0025D4  5C47               	subwf	decision@hue^0,w,c
  6172   0025D6  A0D8               	btfss	status,0,c
  6173   0025D8  EFF0  F012         	goto	u5181
  6174   0025DC  EFF2  F012         	goto	u5180
  6175   0025E0                     u5181:
  6176   0025E0  EFFD  F012         	goto	l5825
  6177   0025E4                     u5180:
  6178   0025E4  0E63               	movlw	99
  6179   0025E6  5C47               	subwf	decision@hue^0,w,c
  6180   0025E8  0E01               	movlw	1
  6181   0025EA  5848               	subwfb	(decision@hue+1)^0,w,c
  6182   0025EC  A0D8               	btfss	status,0,c
  6183   0025EE  EFFB  F012         	goto	u5191
  6184   0025F2  EFFD  F012         	goto	u5190
  6185   0025F6                     u5191:
  6186   0025F6  EF0D  F013         	goto	l5829
  6187   0025FA                     u5190:
  6188   0025FA                     l5825:
  6189                           
  6190                           ;color.c: 285:         moveRed(&motorL, &motorR, path_length);
  6191   0025FA  0ED4               	movlw	low _motorL
  6192   0025FC  6E1D               	movwf	moveRed@mL^0,c
  6193   0025FE  0ECB               	movlw	low _motorR
  6194   002600  6E1E               	movwf	moveRed@mR^0,c
  6195   002602  C049  F01F         	movff	decision@path_length,moveRed@path_length
  6196   002606  C04A  F020         	movff	decision@path_length+1,moveRed@path_length+1
  6197   00260A  ECF0  F01E         	call	_moveRed	;wreg free
  6198   00260E                     
  6199                           ;color.c: 286:         color = 1;
  6200   00260E  0E00               	movlw	0
  6201   002610  6E4C               	movwf	(decision@color+1)^0,c
  6202   002612  0E01               	movlw	1
  6203   002614  6E4B               	movwf	decision@color^0,c
  6204                           
  6205                           ;color.c: 287:     } else if (hue>=105 && hue<=130){
  6206   002616  EFF1  F013         	goto	l5877
  6207   00261A                     l5829:
  6208   00261A  5048               	movf	(decision@hue+1)^0,w,c
  6209   00261C  E109               	bnz	u5200
  6210   00261E  0E69               	movlw	105
  6211   002620  5C47               	subwf	decision@hue^0,w,c
  6212   002622  A0D8               	btfss	status,0,c
  6213   002624  EF16  F013         	goto	u5201
  6214   002628  EF18  F013         	goto	u5200
  6215   00262C                     u5201:
  6216   00262C  EF33  F013         	goto	l5837
  6217   002630                     u5200:
  6218   002630  5048               	movf	(decision@hue+1)^0,w,c
  6219   002632  E107               	bnz	u5211
  6220   002634  0E83               	movlw	131
  6221   002636  5C47               	subwf	decision@hue^0,w,c
  6222   002638  B0D8               	btfsc	status,0,c
  6223   00263A  EF21  F013         	goto	u5211
  6224   00263E  EF23  F013         	goto	u5210
  6225   002642                     u5211:
  6226   002642  EF33  F013         	goto	l5837
  6227   002646                     u5210:
  6228   002646                     
  6229                           ;color.c: 288:         moveGreen(&motorL, &motorR, path_length);
  6230   002646  0ED4               	movlw	low _motorL
  6231   002648  6E1D               	movwf	moveGreen@mL^0,c
  6232   00264A  0ECB               	movlw	low _motorR
  6233   00264C  6E1E               	movwf	moveGreen@mR^0,c
  6234   00264E  C049  F01F         	movff	decision@path_length,moveGreen@path_length
  6235   002652  C04A  F020         	movff	decision@path_length+1,moveGreen@path_length+1
  6236   002656  EC80  F01F         	call	_moveGreen	;wreg free
  6237   00265A                     
  6238                           ;color.c: 289:         color = 2;
  6239   00265A  0E00               	movlw	0
  6240   00265C  6E4C               	movwf	(decision@color+1)^0,c
  6241   00265E  0E02               	movlw	2
  6242   002660  6E4B               	movwf	decision@color^0,c
  6243                           
  6244                           ;color.c: 290:     } else if (hue>=230 && hue<=240){
  6245   002662  EFF1  F013         	goto	l5877
  6246   002666                     l5837:
  6247   002666  5048               	movf	(decision@hue+1)^0,w,c
  6248   002668  E109               	bnz	u5220
  6249   00266A  0EE6               	movlw	230
  6250   00266C  5C47               	subwf	decision@hue^0,w,c
  6251   00266E  A0D8               	btfss	status,0,c
  6252   002670  EF3C  F013         	goto	u5221
  6253   002674  EF3E  F013         	goto	u5220
  6254   002678                     u5221:
  6255   002678  EF59  F013         	goto	l5845
  6256   00267C                     u5220:
  6257   00267C  5048               	movf	(decision@hue+1)^0,w,c
  6258   00267E  E107               	bnz	u5231
  6259   002680  0EF1               	movlw	241
  6260   002682  5C47               	subwf	decision@hue^0,w,c
  6261   002684  B0D8               	btfsc	status,0,c
  6262   002686  EF47  F013         	goto	u5231
  6263   00268A  EF49  F013         	goto	u5230
  6264   00268E                     u5231:
  6265   00268E  EF59  F013         	goto	l5845
  6266   002692                     u5230:
  6267   002692                     
  6268                           ;color.c: 291:         moveBlue(&motorL,&motorR, path_length);
  6269   002692  0ED4               	movlw	low _motorL
  6270   002694  6E1D               	movwf	moveBlue@mL^0,c
  6271   002696  0ECB               	movlw	low _motorR
  6272   002698  6E1E               	movwf	moveBlue@mR^0,c
  6273   00269A  C049  F01F         	movff	decision@path_length,moveBlue@path_length
  6274   00269E  C04A  F020         	movff	decision@path_length+1,moveBlue@path_length+1
  6275   0026A2  ECA4  F01F         	call	_moveBlue	;wreg free
  6276   0026A6                     
  6277                           ;color.c: 292:         color = 3;
  6278   0026A6  0E00               	movlw	0
  6279   0026A8  6E4C               	movwf	(decision@color+1)^0,c
  6280   0026AA  0E03               	movlw	3
  6281   0026AC  6E4B               	movwf	decision@color^0,c
  6282                           
  6283                           ;color.c: 293:     } else if (hue>=216 && hue<=221){
  6284   0026AE  EFF1  F013         	goto	l5877
  6285   0026B2                     l5845:
  6286   0026B2  5048               	movf	(decision@hue+1)^0,w,c
  6287   0026B4  E109               	bnz	u5240
  6288   0026B6  0ED8               	movlw	216
  6289   0026B8  5C47               	subwf	decision@hue^0,w,c
  6290   0026BA  A0D8               	btfss	status,0,c
  6291   0026BC  EF62  F013         	goto	u5241
  6292   0026C0  EF64  F013         	goto	u5240
  6293   0026C4                     u5241:
  6294   0026C4  EF7F  F013         	goto	l5853
  6295   0026C8                     u5240:
  6296   0026C8  5048               	movf	(decision@hue+1)^0,w,c
  6297   0026CA  E107               	bnz	u5251
  6298   0026CC  0EDE               	movlw	222
  6299   0026CE  5C47               	subwf	decision@hue^0,w,c
  6300   0026D0  B0D8               	btfsc	status,0,c
  6301   0026D2  EF6D  F013         	goto	u5251
  6302   0026D6  EF6F  F013         	goto	u5250
  6303   0026DA                     u5251:
  6304   0026DA  EF7F  F013         	goto	l5853
  6305   0026DE                     u5250:
  6306   0026DE                     
  6307                           ;color.c: 294:         moveLightBlue(&motorL,&motorR, path_length);
  6308   0026DE  0ED4               	movlw	low _motorL
  6309   0026E0  6E1D               	movwf	moveLightBlue@mL^0,c
  6310   0026E2  0ECB               	movlw	low _motorR
  6311   0026E4  6E1E               	movwf	moveLightBlue@mR^0,c
  6312   0026E6  C049  F01F         	movff	decision@path_length,moveLightBlue@path_length
  6313   0026EA  C04A  F020         	movff	decision@path_length+1,moveLightBlue@path_length+1
  6314   0026EE  EC5C  F01F         	call	_moveLightBlue	;wreg free
  6315   0026F2                     
  6316                           ;color.c: 295:         color = 4;
  6317   0026F2  0E00               	movlw	0
  6318   0026F4  6E4C               	movwf	(decision@color+1)^0,c
  6319   0026F6  0E04               	movlw	4
  6320   0026F8  6E4B               	movwf	decision@color^0,c
  6321                           
  6322                           ;color.c: 296:     } else if (hue>=302 && hue<=346){
  6323   0026FA  EFF1  F013         	goto	l5877
  6324   0026FE                     l5853:
  6325   0026FE  0E2E               	movlw	46
  6326   002700  5C47               	subwf	decision@hue^0,w,c
  6327   002702  0E01               	movlw	1
  6328   002704  5848               	subwfb	(decision@hue+1)^0,w,c
  6329   002706  A0D8               	btfss	status,0,c
  6330   002708  EF88  F013         	goto	u5261
  6331   00270C  EF8A  F013         	goto	u5260
  6332   002710                     u5261:
  6333   002710  EFA5  F013         	goto	l5861
  6334   002714                     u5260:
  6335   002714  0E5B               	movlw	91
  6336   002716  5C47               	subwf	decision@hue^0,w,c
  6337   002718  0E01               	movlw	1
  6338   00271A  5848               	subwfb	(decision@hue+1)^0,w,c
  6339   00271C  B0D8               	btfsc	status,0,c
  6340   00271E  EF93  F013         	goto	u5271
  6341   002722  EF95  F013         	goto	u5270
  6342   002726                     u5271:
  6343   002726  EFA5  F013         	goto	l5861
  6344   00272A                     u5270:
  6345   00272A                     
  6346                           ;color.c: 297:         moveYellow(&motorL,&motorR, path_length);
  6347   00272A  0ED4               	movlw	low _motorL
  6348   00272C  6E1D               	movwf	moveYellow@mL^0,c
  6349   00272E  0ECB               	movlw	low _motorR
  6350   002730  6E1E               	movwf	moveYellow@mR^0,c
  6351   002732  C049  F01F         	movff	decision@path_length,moveYellow@path_length
  6352   002736  C04A  F020         	movff	decision@path_length+1,moveYellow@path_length+1
  6353   00273A  ECCC  F01E         	call	_moveYellow	;wreg free
  6354   00273E                     
  6355                           ;color.c: 298:         color = 5;
  6356   00273E  0E00               	movlw	0
  6357   002740  6E4C               	movwf	(decision@color+1)^0,c
  6358   002742  0E05               	movlw	5
  6359   002744  6E4B               	movwf	decision@color^0,c
  6360                           
  6361                           ;color.c: 299:     } else if (hue>14 && hue<=35){
  6362   002746  EFF1  F013         	goto	l5877
  6363   00274A                     l5861:
  6364   00274A  5048               	movf	(decision@hue+1)^0,w,c
  6365   00274C  E109               	bnz	u5280
  6366   00274E  0E0F               	movlw	15
  6367   002750  5C47               	subwf	decision@hue^0,w,c
  6368   002752  A0D8               	btfss	status,0,c
  6369   002754  EFAE  F013         	goto	u5281
  6370   002758  EFB0  F013         	goto	u5280
  6371   00275C                     u5281:
  6372   00275C  EFCB  F013         	goto	l5869
  6373   002760                     u5280:
  6374   002760  5048               	movf	(decision@hue+1)^0,w,c
  6375   002762  E107               	bnz	u5291
  6376   002764  0E24               	movlw	36
  6377   002766  5C47               	subwf	decision@hue^0,w,c
  6378   002768  B0D8               	btfsc	status,0,c
  6379   00276A  EFB9  F013         	goto	u5291
  6380   00276E  EFBB  F013         	goto	u5290
  6381   002772                     u5291:
  6382   002772  EFCB  F013         	goto	l5869
  6383   002776                     u5290:
  6384   002776                     
  6385                           ;color.c: 300:         moveOrange(&motorL,&motorR, path_length);
  6386   002776  0ED4               	movlw	low _motorL
  6387   002778  6E1D               	movwf	moveOrange@mL^0,c
  6388   00277A  0ECB               	movlw	low _motorR
  6389   00277C  6E1E               	movwf	moveOrange@mR^0,c
  6390   00277E  C049  F01F         	movff	decision@path_length,moveOrange@path_length
  6391   002782  C04A  F020         	movff	decision@path_length+1,moveOrange@path_length+1
  6392   002786  EC38  F01F         	call	_moveOrange	;wreg free
  6393   00278A                     
  6394                           ;color.c: 301:         color= 6;
  6395   00278A  0E00               	movlw	0
  6396   00278C  6E4C               	movwf	(decision@color+1)^0,c
  6397   00278E  0E06               	movlw	6
  6398   002790  6E4B               	movwf	decision@color^0,c
  6399                           
  6400                           ;color.c: 302:     } else if (hue>=244 && hue<=251){
  6401   002792  EFF1  F013         	goto	l5877
  6402   002796                     l5869:
  6403   002796  5048               	movf	(decision@hue+1)^0,w,c
  6404   002798  E109               	bnz	u5300
  6405   00279A  0EF4               	movlw	244
  6406   00279C  5C47               	subwf	decision@hue^0,w,c
  6407   00279E  A0D8               	btfss	status,0,c
  6408   0027A0  EFD4  F013         	goto	u5301
  6409   0027A4  EFD6  F013         	goto	u5300
  6410   0027A8                     u5301:
  6411   0027A8  EFF1  F013         	goto	l158
  6412   0027AC                     u5300:
  6413   0027AC  5048               	movf	(decision@hue+1)^0,w,c
  6414   0027AE  E107               	bnz	u5311
  6415   0027B0  0EFC               	movlw	252
  6416   0027B2  5C47               	subwf	decision@hue^0,w,c
  6417   0027B4  B0D8               	btfsc	status,0,c
  6418   0027B6  EFDF  F013         	goto	u5311
  6419   0027BA  EFE1  F013         	goto	u5310
  6420   0027BE                     u5311:
  6421   0027BE  EFF1  F013         	goto	l158
  6422   0027C2                     u5310:
  6423   0027C2                     
  6424                           ;color.c: 303:         movePink(&motorL,&motorR, path_length);
  6425   0027C2  0ED4               	movlw	low _motorL
  6426   0027C4  6E1D               	movwf	movePink@mL^0,c
  6427   0027C6  0ECB               	movlw	low _motorR
  6428   0027C8  6E1E               	movwf	movePink@mR^0,c
  6429   0027CA  C049  F01F         	movff	decision@path_length,movePink@path_length
  6430   0027CE  C04A  F020         	movff	decision@path_length+1,movePink@path_length+1
  6431   0027D2  EC14  F01F         	call	_movePink	;wreg free
  6432   0027D6                     
  6433                           ;color.c: 304:         color = 7;
  6434   0027D6  0E00               	movlw	0
  6435   0027D8  6E4C               	movwf	(decision@color+1)^0,c
  6436   0027DA  0E07               	movlw	7
  6437   0027DC  6E4B               	movwf	decision@color^0,c
  6438   0027DE  EFF1  F013         	goto	l5877
  6439   0027E2                     l158:
  6440   0027E2                     l5877:
  6441                           
  6442                           ;color.c: 307:     send2USART(color);
  6443   0027E2  C04B  F045         	movff	decision@color,send2USART@hue
  6444   0027E6  C04C  F046         	movff	decision@color+1,send2USART@hue+1
  6445   0027EA  EC47  F022         	call	_send2USART	;wreg free
  6446   0027EE  0012               	return		;funcret
  6447   0027F0                     __end_of_decision:
  6448                           	callstack 0
  6449                           
  6450 ;; *************** function _send2USART *****************
  6451 ;; Defined at:
  6452 ;;		line 146 in file "serial.c"
  6453 ;; Parameters:    Size  Location     Type
  6454 ;;  hue             2   68[COMRAM] unsigned int 
  6455 ;; Auto vars:     Size  Location     Type
  6456 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  6457 ;; Return value:  Size  Location     Type
  6458 ;;                  1    wreg      void 
  6459 ;; Registers used:
  6460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6466 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6467 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6469 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6470 ;;Total ram usage:       52 bytes
  6471 ;; Hardware stack levels used: 1
  6472 ;; Hardware stack levels required when called: 9
  6473 ;; This function calls:
  6474 ;;		_sendStringSerial4
  6475 ;;		_sprintf
  6476 ;; This function is called by:
  6477 ;;		_decision
  6478 ;;		_main
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           	psect	text21
  6483   00448E                     __ptext21:
  6484                           	callstack 0
  6485   00448E                     _send2USART:
  6486                           	callstack 21
  6487   00448E                     
  6488                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  6489   00448E  0E60               	movlw	low send2USART@hue_char
  6490   004490  6E32               	movwf	sprintf@s^0,c
  6491   004492  0E9A               	movlw	low STR_12
  6492   004494  6E33               	movwf	sprintf@fmt^0,c
  6493   004496  C045  F034         	movff	send2USART@hue,?_sprintf+2
  6494   00449A  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  6495   00449E  ECC9  F020         	call	_sprintf	;wreg free
  6496   0044A2                     
  6497                           ;serial.c: 158:         sendStringSerial4(hue_char);
  6498   0044A2  0E60               	movlw	low send2USART@hue_char
  6499   0044A4  6E03               	movwf	sendStringSerial4@string^0,c
  6500   0044A6  EC7A  F021         	call	_sendStringSerial4	;wreg free
  6501   0044AA  0012               	return		;funcret
  6502   0044AC                     __end_of_send2USART:
  6503                           	callstack 0
  6504                           
  6505 ;; *************** function _moveYellow *****************
  6506 ;; Defined at:
  6507 ;;		line 282 in file "dc_motor.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6510 ;;		 -> motorL(9), 
  6511 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6512 ;;		 -> motorR(9), 
  6513 ;;  path_length     2   30[COMRAM] unsigned int 
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;		None
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  1    wreg      void 
  6518 ;; Registers used:
  6519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6525 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6527 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6528 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6529 ;;Total ram usage:        6 bytes
  6530 ;; Hardware stack levels used: 1
  6531 ;; Hardware stack levels required when called: 5
  6532 ;; This function calls:
  6533 ;;		_backOneAndHalf
  6534 ;;		_logAction
  6535 ;;		_right90
  6536 ;; This function is called by:
  6537 ;;		_decision
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           	psect	text22
  6542   003D98                     __ptext22:
  6543                           	callstack 0
  6544   003D98                     _moveYellow:
  6545                           	callstack 24
  6546   003D98                     
  6547                           ;dc_motor.c: 282: void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 283: {;dc_motor.c: 285:     backOneAndHalf(mL,mR);
  6548   003D98  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  6549   003D9C  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  6550   003DA0  EC16  F021         	call	_backOneAndHalf	;wreg free
  6551   003DA4                     
  6552                           ;dc_motor.c: 286:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6553   003DA4  0E29               	movlw	41
  6554   003DA6  6E22               	movwf	(??_moveYellow+1)^0,c
  6555   003DA8  0E96               	movlw	150
  6556   003DAA  6E21               	movwf	??_moveYellow^0,c
  6557   003DAC  0E7F               	movlw	127
  6558   003DAE                     u5537:
  6559   003DAE  2EE8               	decfsz	wreg,f,c
  6560   003DB0  D7FE               	bra	u5537
  6561   003DB2  2E21               	decfsz	??_moveYellow^0,f,c
  6562   003DB4  D7FC               	bra	u5537
  6563   003DB6  2E22               	decfsz	(??_moveYellow+1)^0,f,c
  6564   003DB8  D7FA               	bra	u5537
  6565   003DBA  0000               	nop	
  6566   003DBC                     
  6567                           ;dc_motor.c: 287:     right90(mL,mR);
  6568   003DBC  C01D  F019         	movff	moveYellow@mL,right90@mL
  6569   003DC0  C01E  F01A         	movff	moveYellow@mR,right90@mR
  6570   003DC4  EC93  F021         	call	_right90	;wreg free
  6571   003DC8                     
  6572                           ;dc_motor.c: 288:     logAction('R',0, path_length);
  6573   003DC8  0E00               	movlw	0
  6574   003DCA  6E09               	movwf	(logAction@time+1)^0,c
  6575   003DCC  0E00               	movlw	0
  6576   003DCE  6E08               	movwf	logAction@time^0,c
  6577   003DD0  C01F  F00A         	movff	moveYellow@path_length,logAction@pathLength
  6578   003DD4  C020  F00B         	movff	moveYellow@path_length+1,logAction@pathLength+1
  6579   003DD8  0E52               	movlw	82
  6580   003DDA  ECF7  F01D         	call	_logAction
  6581   003DDE  0012               	return		;funcret
  6582   003DE0                     __end_of_moveYellow:
  6583                           	callstack 0
  6584                           
  6585 ;; *************** function _moveRed *****************
  6586 ;; Defined at:
  6587 ;;		line 255 in file "dc_motor.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6590 ;;		 -> motorL(9), 
  6591 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6592 ;;		 -> motorR(9), 
  6593 ;;  path_length     2   30[COMRAM] unsigned int 
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;		None
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  1    wreg      void 
  6598 ;; Registers used:
  6599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6605 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6607 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6608 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6609 ;;Total ram usage:        6 bytes
  6610 ;; Hardware stack levels used: 1
  6611 ;; Hardware stack levels required when called: 5
  6612 ;; This function calls:
  6613 ;;		_backHalf
  6614 ;;		_logAction
  6615 ;;		_right90
  6616 ;; This function is called by:
  6617 ;;		_decision
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text23
  6622   003DE0                     __ptext23:
  6623                           	callstack 0
  6624   003DE0                     _moveRed:
  6625                           	callstack 24
  6626   003DE0                     
  6627                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int pa
      +                          th_length);dc_motor.c: 256: {;dc_motor.c: 258:     backHalf(mL,mR);
  6628   003DE0  C01D  F019         	movff	moveRed@mL,backHalf@mL
  6629   003DE4  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  6630   003DE8  ECC3  F021         	call	_backHalf	;wreg free
  6631   003DEC                     
  6632                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6633   003DEC  0E29               	movlw	41
  6634   003DEE  6E22               	movwf	(??_moveRed+1)^0,c
  6635   003DF0  0E96               	movlw	150
  6636   003DF2  6E21               	movwf	??_moveRed^0,c
  6637   003DF4  0E7F               	movlw	127
  6638   003DF6                     u5547:
  6639   003DF6  2EE8               	decfsz	wreg,f,c
  6640   003DF8  D7FE               	bra	u5547
  6641   003DFA  2E21               	decfsz	??_moveRed^0,f,c
  6642   003DFC  D7FC               	bra	u5547
  6643   003DFE  2E22               	decfsz	(??_moveRed+1)^0,f,c
  6644   003E00  D7FA               	bra	u5547
  6645   003E02  0000               	nop	
  6646   003E04                     
  6647                           ;dc_motor.c: 260:     right90(mL,mR);
  6648   003E04  C01D  F019         	movff	moveRed@mL,right90@mL
  6649   003E08  C01E  F01A         	movff	moveRed@mR,right90@mR
  6650   003E0C  EC93  F021         	call	_right90	;wreg free
  6651   003E10                     
  6652                           ;dc_motor.c: 261:     logAction('R',0, path_length);
  6653   003E10  0E00               	movlw	0
  6654   003E12  6E09               	movwf	(logAction@time+1)^0,c
  6655   003E14  0E00               	movlw	0
  6656   003E16  6E08               	movwf	logAction@time^0,c
  6657   003E18  C01F  F00A         	movff	moveRed@path_length,logAction@pathLength
  6658   003E1C  C020  F00B         	movff	moveRed@path_length+1,logAction@pathLength+1
  6659   003E20  0E52               	movlw	82
  6660   003E22  ECF7  F01D         	call	_logAction
  6661   003E26  0012               	return		;funcret
  6662   003E28                     __end_of_moveRed:
  6663                           	callstack 0
  6664                           
  6665 ;; *************** function _right90 *****************
  6666 ;; Defined at:
  6667 ;;		line 193 in file "dc_motor.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6670 ;;		 -> motorL(9), 
  6671 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6672 ;;		 -> motorR(9), 
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;		None
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      void 
  6677 ;; Registers used:
  6678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6684 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6686 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6687 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6688 ;;Total ram usage:        4 bytes
  6689 ;; Hardware stack levels used: 1
  6690 ;; Hardware stack levels required when called: 4
  6691 ;; This function calls:
  6692 ;;		_stop
  6693 ;;		_turnRight
  6694 ;; This function is called by:
  6695 ;;		_moveRed
  6696 ;;		_moveYellow
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text24
  6701   004326                     __ptext24:
  6702                           	callstack 0
  6703   004326                     _right90:
  6704                           	callstack 24
  6705   004326                     
  6706                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  6707   004326  C019  F014         	movff	right90@mL,turnRight@mL
  6708   00432A  C01A  F015         	movff	right90@mR,turnRight@mR
  6709   00432E  ECC7  F01C         	call	_turnRight	;wreg free
  6710   004332                     
  6711                           ;dc_motor.c: 196:     _delay((unsigned long)((290)*(64000000/4000.0)));
  6712   004332  0E18               	movlw	24
  6713   004334  6E1C               	movwf	(??_right90+1)^0,c
  6714   004336  0E8A               	movlw	138
  6715   004338  6E1B               	movwf	??_right90^0,c
  6716   00433A  0EE8               	movlw	232
  6717   00433C                     u5557:
  6718   00433C  2EE8               	decfsz	wreg,f,c
  6719   00433E  D7FE               	bra	u5557
  6720   004340  2E1B               	decfsz	??_right90^0,f,c
  6721   004342  D7FC               	bra	u5557
  6722   004344  2E1C               	decfsz	(??_right90+1)^0,f,c
  6723   004346  D7FA               	bra	u5557
  6724   004348                     
  6725                           ;dc_motor.c: 197:     stop(mL,mR);
  6726   004348  C019  F014         	movff	right90@mL,stop@mL
  6727   00434C  C01A  F015         	movff	right90@mR,stop@mR
  6728   004350  EC80  F01C         	call	_stop	;wreg free
  6729   004354  0012               	return		;funcret
  6730   004356                     __end_of_right90:
  6731                           	callstack 0
  6732                           
  6733 ;; *************** function _movePink *****************
  6734 ;; Defined at:
  6735 ;;		line 291 in file "dc_motor.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6738 ;;		 -> motorL(9), 
  6739 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6740 ;;		 -> motorR(9), 
  6741 ;;  path_length     2   30[COMRAM] unsigned int 
  6742 ;; Auto vars:     Size  Location     Type
  6743 ;;		None
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  1    wreg      void 
  6746 ;; Registers used:
  6747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6756 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6757 ;;Total ram usage:        6 bytes
  6758 ;; Hardware stack levels used: 1
  6759 ;; Hardware stack levels required when called: 5
  6760 ;; This function calls:
  6761 ;;		_backOneAndHalf
  6762 ;;		_left90
  6763 ;;		_logAction
  6764 ;; This function is called by:
  6765 ;;		_decision
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text25
  6770   003E28                     __ptext25:
  6771                           	callstack 0
  6772   003E28                     _movePink:
  6773                           	callstack 24
  6774   003E28                     
  6775                           ;dc_motor.c: 291: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 292: {;dc_motor.c: 294:     backOneAndHalf(mL,mR);
  6776   003E28  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  6777   003E2C  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  6778   003E30  EC16  F021         	call	_backOneAndHalf	;wreg free
  6779   003E34                     
  6780                           ;dc_motor.c: 295:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6781   003E34  0E29               	movlw	41
  6782   003E36  6E22               	movwf	(??_movePink+1)^0,c
  6783   003E38  0E96               	movlw	150
  6784   003E3A  6E21               	movwf	??_movePink^0,c
  6785   003E3C  0E7F               	movlw	127
  6786   003E3E                     u5567:
  6787   003E3E  2EE8               	decfsz	wreg,f,c
  6788   003E40  D7FE               	bra	u5567
  6789   003E42  2E21               	decfsz	??_movePink^0,f,c
  6790   003E44  D7FC               	bra	u5567
  6791   003E46  2E22               	decfsz	(??_movePink+1)^0,f,c
  6792   003E48  D7FA               	bra	u5567
  6793   003E4A  0000               	nop	
  6794   003E4C                     
  6795                           ;dc_motor.c: 296:     left90(mL,mR);
  6796   003E4C  C01D  F019         	movff	movePink@mL,left90@mL
  6797   003E50  C01E  F01A         	movff	movePink@mR,left90@mR
  6798   003E54  ECAB  F021         	call	_left90	;wreg free
  6799   003E58                     
  6800                           ;dc_motor.c: 297:     logAction('L',0, path_length);
  6801   003E58  0E00               	movlw	0
  6802   003E5A  6E09               	movwf	(logAction@time+1)^0,c
  6803   003E5C  0E00               	movlw	0
  6804   003E5E  6E08               	movwf	logAction@time^0,c
  6805   003E60  C01F  F00A         	movff	movePink@path_length,logAction@pathLength
  6806   003E64  C020  F00B         	movff	movePink@path_length+1,logAction@pathLength+1
  6807   003E68  0E4C               	movlw	76
  6808   003E6A  ECF7  F01D         	call	_logAction
  6809   003E6E  0012               	return		;funcret
  6810   003E70                     __end_of_movePink:
  6811                           	callstack 0
  6812                           
  6813 ;; *************** function _backOneAndHalf *****************
  6814 ;; Defined at:
  6815 ;;		line 241 in file "dc_motor.c"
  6816 ;; Parameters:    Size  Location     Type
  6817 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6818 ;;		 -> motorL(9), 
  6819 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6820 ;;		 -> motorR(9), 
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;		None
  6823 ;; Return value:  Size  Location     Type
  6824 ;;                  1    wreg      void 
  6825 ;; Registers used:
  6826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6832 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6834 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6835 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6836 ;;Total ram usage:        4 bytes
  6837 ;; Hardware stack levels used: 1
  6838 ;; Hardware stack levels required when called: 4
  6839 ;; This function calls:
  6840 ;;		_fullSpeedBack
  6841 ;;		_stop
  6842 ;; This function is called by:
  6843 ;;		_moveYellow
  6844 ;;		_movePink
  6845 ;; This function uses a non-reentrant model
  6846 ;;
  6847                           
  6848                           	psect	text26
  6849   00422C                     __ptext26:
  6850                           	callstack 0
  6851   00422C                     _backOneAndHalf:
  6852                           	callstack 24
  6853   00422C                     
  6854                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  6855   00422C  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  6856   004230  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  6857   004234  EC82  F01D         	call	_fullSpeedBack	;wreg free
  6858   004238                     
  6859                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  6860   004238  0E6A               	movlw	106
  6861   00423A  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  6862   00423C  0E85               	movlw	133
  6863   00423E  6E1B               	movwf	??_backOneAndHalf^0,c
  6864   004240  0EB4               	movlw	180
  6865   004242                     u5577:
  6866   004242  2EE8               	decfsz	wreg,f,c
  6867   004244  D7FE               	bra	u5577
  6868   004246  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  6869   004248  D7FC               	bra	u5577
  6870   00424A  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  6871   00424C  D7FA               	bra	u5577
  6872   00424E  D000               	nop2	
  6873   004250                     
  6874                           ;dc_motor.c: 245:     stop(mL,mR);
  6875   004250  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  6876   004254  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  6877   004258  EC80  F01C         	call	_stop	;wreg free
  6878   00425C  0012               	return		;funcret
  6879   00425E                     __end_of_backOneAndHalf:
  6880                           	callstack 0
  6881                           
  6882 ;; *************** function _moveOrange *****************
  6883 ;; Defined at:
  6884 ;;		line 300 in file "dc_motor.c"
  6885 ;; Parameters:    Size  Location     Type
  6886 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6887 ;;		 -> motorL(9), 
  6888 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6889 ;;		 -> motorR(9), 
  6890 ;;  path_length     2   30[COMRAM] unsigned int 
  6891 ;; Auto vars:     Size  Location     Type
  6892 ;;		None
  6893 ;; Return value:  Size  Location     Type
  6894 ;;                  1    wreg      void 
  6895 ;; Registers used:
  6896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6897 ;; Tracked objects:
  6898 ;;		On entry : 0/0
  6899 ;;		On exit  : 0/0
  6900 ;;		Unchanged: 0/0
  6901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6904 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6905 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6906 ;;Total ram usage:        6 bytes
  6907 ;; Hardware stack levels used: 1
  6908 ;; Hardware stack levels required when called: 5
  6909 ;; This function calls:
  6910 ;;		_backHalf
  6911 ;;		_logAction
  6912 ;;		_right135
  6913 ;; This function is called by:
  6914 ;;		_decision
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           	psect	text27
  6919   003E70                     __ptext27:
  6920                           	callstack 0
  6921   003E70                     _moveOrange:
  6922                           	callstack 24
  6923   003E70                     
  6924                           ;dc_motor.c: 300: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 301: {;dc_motor.c: 303:     backHalf(mL,mR);
  6925   003E70  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  6926   003E74  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  6927   003E78  ECC3  F021         	call	_backHalf	;wreg free
  6928   003E7C                     
  6929                           ;dc_motor.c: 304:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6930   003E7C  0E29               	movlw	41
  6931   003E7E  6E22               	movwf	(??_moveOrange+1)^0,c
  6932   003E80  0E96               	movlw	150
  6933   003E82  6E21               	movwf	??_moveOrange^0,c
  6934   003E84  0E7F               	movlw	127
  6935   003E86                     u5587:
  6936   003E86  2EE8               	decfsz	wreg,f,c
  6937   003E88  D7FE               	bra	u5587
  6938   003E8A  2E21               	decfsz	??_moveOrange^0,f,c
  6939   003E8C  D7FC               	bra	u5587
  6940   003E8E  2E22               	decfsz	(??_moveOrange+1)^0,f,c
  6941   003E90  D7FA               	bra	u5587
  6942   003E92  0000               	nop	
  6943   003E94                     
  6944                           ;dc_motor.c: 305:     right135(mL,mR);
  6945   003E94  C01D  F019         	movff	moveOrange@mL,right135@mL
  6946   003E98  C01E  F01A         	movff	moveOrange@mR,right135@mR
  6947   003E9C  EC2F  F021         	call	_right135	;wreg free
  6948   003EA0                     
  6949                           ;dc_motor.c: 306:     logAction('135R',0, path_length);
  6950   003EA0  0E00               	movlw	0
  6951   003EA2  6E09               	movwf	(logAction@time+1)^0,c
  6952   003EA4  0E00               	movlw	0
  6953   003EA6  6E08               	movwf	logAction@time^0,c
  6954   003EA8  C01F  F00A         	movff	moveOrange@path_length,logAction@pathLength
  6955   003EAC  C020  F00B         	movff	moveOrange@path_length+1,logAction@pathLength+1
  6956   003EB0  0E52               	movlw	82
  6957   003EB2  ECF7  F01D         	call	_logAction
  6958   003EB6  0012               	return		;funcret
  6959   003EB8                     __end_of_moveOrange:
  6960                           	callstack 0
  6961                           
  6962 ;; *************** function _right135 *****************
  6963 ;; Defined at:
  6964 ;;		line 217 in file "dc_motor.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6967 ;;		 -> motorL(9), 
  6968 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6969 ;;		 -> motorR(9), 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  1    wreg      void 
  6974 ;; Registers used:
  6975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6981 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6983 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6984 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6985 ;;Total ram usage:        4 bytes
  6986 ;; Hardware stack levels used: 1
  6987 ;; Hardware stack levels required when called: 4
  6988 ;; This function calls:
  6989 ;;		_stop
  6990 ;;		_turnRight
  6991 ;; This function is called by:
  6992 ;;		_moveOrange
  6993 ;;		_reverseTurn
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           	psect	text28
  6998   00425E                     __ptext28:
  6999                           	callstack 0
  7000   00425E                     _right135:
  7001                           	callstack 24
  7002   00425E                     
  7003                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  7004   00425E  C019  F014         	movff	right135@mL,turnRight@mL
  7005   004262  C01A  F015         	movff	right135@mR,turnRight@mR
  7006   004266  ECC7  F01C         	call	_turnRight	;wreg free
  7007   00426A                     
  7008                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7009   00426A  0E21               	movlw	33
  7010   00426C  6E1C               	movwf	(??_right135+1)^0,c
  7011   00426E  0E78               	movlw	120
  7012   004270  6E1B               	movwf	??_right135^0,c
  7013   004272  0E98               	movlw	152
  7014   004274                     u5597:
  7015   004274  2EE8               	decfsz	wreg,f,c
  7016   004276  D7FE               	bra	u5597
  7017   004278  2E1B               	decfsz	??_right135^0,f,c
  7018   00427A  D7FC               	bra	u5597
  7019   00427C  2E1C               	decfsz	(??_right135+1)^0,f,c
  7020   00427E  D7FA               	bra	u5597
  7021   004280  D000               	nop2	
  7022   004282                     
  7023                           ;dc_motor.c: 221:     stop(mL,mR);
  7024   004282  C019  F014         	movff	right135@mL,stop@mL
  7025   004286  C01A  F015         	movff	right135@mR,stop@mR
  7026   00428A  EC80  F01C         	call	_stop	;wreg free
  7027   00428E  0012               	return		;funcret
  7028   004290                     __end_of_right135:
  7029                           	callstack 0
  7030                           
  7031 ;; *************** function _turnRight *****************
  7032 ;; Defined at:
  7033 ;;		line 125 in file "dc_motor.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7036 ;;		 -> motorL(9), 
  7037 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7038 ;;		 -> motorR(9), 
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;  i               2   22[COMRAM] unsigned int 
  7041 ;; Return value:  Size  Location     Type
  7042 ;;                  1    wreg      void 
  7043 ;; Registers used:
  7044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7050 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7051 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7052 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7053 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7054 ;;Total ram usage:        5 bytes
  7055 ;; Hardware stack levels used: 1
  7056 ;; Hardware stack levels required when called: 3
  7057 ;; This function calls:
  7058 ;;		_setMotorPWM
  7059 ;; This function is called by:
  7060 ;;		_right90
  7061 ;;		_right135
  7062 ;;		_reverseTurn
  7063 ;; This function uses a non-reentrant model
  7064 ;;
  7065                           
  7066                           	psect	text29
  7067   00398E                     __ptext29:
  7068                           	callstack 0
  7069   00398E                     _turnRight:
  7070                           	callstack 25
  7071   00398E                     
  7072                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7073   00398E  5014               	movf	turnRight@mL^0,w,c
  7074   003990  6ED9               	movwf	fsr2l,c
  7075   003992  6ADA               	clrf	fsr2h,c
  7076   003994  0E01               	movlw	1
  7077   003996  26D9               	addwf	fsr2l,f,c
  7078   003998  0E01               	movlw	1
  7079   00399A  6EDF               	movwf	indf2,c
  7080                           
  7081                           ;dc_motor.c: 129:     mR->direction = 0;
  7082   00399C  5015               	movf	turnRight@mR^0,w,c
  7083   00399E  6ED9               	movwf	fsr2l,c
  7084   0039A0  6ADA               	clrf	fsr2h,c
  7085   0039A2  0E01               	movlw	1
  7086   0039A4  26D9               	addwf	fsr2l,f,c
  7087   0039A6  6ADF               	clrf	indf2,c
  7088   0039A8                     
  7089                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7090   0039A8  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7091   0039AC  EC3B  F017         	call	_setMotorPWM	;wreg free
  7092   0039B0                     
  7093                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7094   0039B0  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7095   0039B4  EC3B  F017         	call	_setMotorPWM	;wreg free
  7096   0039B8                     
  7097                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7098   0039B8  0E00               	movlw	0
  7099   0039BA  6E18               	movwf	(turnRight@i+1)^0,c
  7100   0039BC  0E00               	movlw	0
  7101   0039BE  6E17               	movwf	turnRight@i^0,c
  7102   0039C0                     l5423:
  7103                           
  7104                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7105   0039C0  5014               	movf	turnRight@mL^0,w,c
  7106   0039C2  6ED9               	movwf	fsr2l,c
  7107   0039C4  6ADA               	clrf	fsr2h,c
  7108   0039C6  2ADF               	incf	indf2,f,c
  7109                           
  7110                           ;dc_motor.c: 136:         mR->power++;
  7111   0039C8  5015               	movf	turnRight@mR^0,w,c
  7112   0039CA  6ED9               	movwf	fsr2l,c
  7113   0039CC  6ADA               	clrf	fsr2h,c
  7114   0039CE  2ADF               	incf	indf2,f,c
  7115   0039D0                     
  7116                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7117   0039D0  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7118   0039D4  EC3B  F017         	call	_setMotorPWM	;wreg free
  7119   0039D8                     
  7120                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7121   0039D8  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7122   0039DC  EC3B  F017         	call	_setMotorPWM	;wreg free
  7123   0039E0                     
  7124                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7125   0039E0  0E0B               	movlw	11
  7126   0039E2  6E16               	movwf	??_turnRight^0,c
  7127   0039E4  0E62               	movlw	98
  7128   0039E6                     u5607:
  7129   0039E6  2EE8               	decfsz	wreg,f,c
  7130   0039E8  D7FE               	bra	u5607
  7131   0039EA  2E16               	decfsz	??_turnRight^0,f,c
  7132   0039EC  D7FC               	bra	u5607
  7133   0039EE  D000               	nop2	
  7134   0039F0                     
  7135                           ;dc_motor.c: 140:     }
  7136   0039F0  4A17               	infsnz	turnRight@i^0,f,c
  7137   0039F2  2A18               	incf	(turnRight@i+1)^0,f,c
  7138   0039F4  5018               	movf	(turnRight@i+1)^0,w,c
  7139   0039F6  E109               	bnz	u4960
  7140   0039F8  0E32               	movlw	50
  7141   0039FA  5C17               	subwf	turnRight@i^0,w,c
  7142   0039FC  A0D8               	btfss	status,0,c
  7143   0039FE  EF03  F01D         	goto	u4961
  7144   003A02  EF05  F01D         	goto	u4960
  7145   003A06                     u4961:
  7146   003A06  EFE0  F01C         	goto	l5423
  7147   003A0A                     u4960:
  7148   003A0A  0012               	return		;funcret
  7149   003A0C                     __end_of_turnRight:
  7150                           	callstack 0
  7151                           
  7152 ;; *************** function _moveLightBlue *****************
  7153 ;; Defined at:
  7154 ;;		line 309 in file "dc_motor.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7157 ;;		 -> motorL(9), 
  7158 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7159 ;;		 -> motorR(9), 
  7160 ;;  path_length     2   30[COMRAM] unsigned int 
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;		None
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  1    wreg      void 
  7165 ;; Registers used:
  7166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7172 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7174 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7175 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7176 ;;Total ram usage:        6 bytes
  7177 ;; Hardware stack levels used: 1
  7178 ;; Hardware stack levels required when called: 5
  7179 ;; This function calls:
  7180 ;;		_backHalf
  7181 ;;		_left135
  7182 ;;		_logAction
  7183 ;; This function is called by:
  7184 ;;		_decision
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           	psect	text30
  7189   003EB8                     __ptext30:
  7190                           	callstack 0
  7191   003EB8                     _moveLightBlue:
  7192                           	callstack 24
  7193   003EB8                     
  7194                           ;dc_motor.c: 309: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_length);dc_motor.c: 310: {;dc_motor.c: 312:     backHalf(mL,mR);
  7195   003EB8  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7196   003EBC  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7197   003EC0  ECC3  F021         	call	_backHalf	;wreg free
  7198   003EC4                     
  7199                           ;dc_motor.c: 313:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7200   003EC4  0E29               	movlw	41
  7201   003EC6  6E22               	movwf	(??_moveLightBlue+1)^0,c
  7202   003EC8  0E96               	movlw	150
  7203   003ECA  6E21               	movwf	??_moveLightBlue^0,c
  7204   003ECC  0E7F               	movlw	127
  7205   003ECE                     u5617:
  7206   003ECE  2EE8               	decfsz	wreg,f,c
  7207   003ED0  D7FE               	bra	u5617
  7208   003ED2  2E21               	decfsz	??_moveLightBlue^0,f,c
  7209   003ED4  D7FC               	bra	u5617
  7210   003ED6  2E22               	decfsz	(??_moveLightBlue+1)^0,f,c
  7211   003ED8  D7FA               	bra	u5617
  7212   003EDA  0000               	nop	
  7213   003EDC                     
  7214                           ;dc_motor.c: 314:     left135(mL,mR);
  7215   003EDC  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7216   003EE0  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7217   003EE4  EC48  F021         	call	_left135	;wreg free
  7218   003EE8                     
  7219                           ;dc_motor.c: 315:     logAction('135L',0,path_length);
  7220   003EE8  0E00               	movlw	0
  7221   003EEA  6E09               	movwf	(logAction@time+1)^0,c
  7222   003EEC  0E00               	movlw	0
  7223   003EEE  6E08               	movwf	logAction@time^0,c
  7224   003EF0  C01F  F00A         	movff	moveLightBlue@path_length,logAction@pathLength
  7225   003EF4  C020  F00B         	movff	moveLightBlue@path_length+1,logAction@pathLength+1
  7226   003EF8  0E4C               	movlw	76
  7227   003EFA  ECF7  F01D         	call	_logAction
  7228   003EFE  0012               	return		;funcret
  7229   003F00                     __end_of_moveLightBlue:
  7230                           	callstack 0
  7231                           
  7232 ;; *************** function _left135 *****************
  7233 ;; Defined at:
  7234 ;;		line 225 in file "dc_motor.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7237 ;;		 -> motorL(9), 
  7238 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7239 ;;		 -> motorR(9), 
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;		None
  7242 ;; Return value:  Size  Location     Type
  7243 ;;                  1    wreg      void 
  7244 ;; Registers used:
  7245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7251 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7253 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7254 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7255 ;;Total ram usage:        4 bytes
  7256 ;; Hardware stack levels used: 1
  7257 ;; Hardware stack levels required when called: 4
  7258 ;; This function calls:
  7259 ;;		_stop
  7260 ;;		_turnLeft
  7261 ;; This function is called by:
  7262 ;;		_moveLightBlue
  7263 ;;		_reverseTurn
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           	psect	text31
  7268   004290                     __ptext31:
  7269                           	callstack 0
  7270   004290                     _left135:
  7271                           	callstack 24
  7272   004290                     
  7273                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7274   004290  C019  F014         	movff	left135@mL,turnLeft@mL
  7275   004294  C01A  F015         	movff	left135@mR,turnLeft@mR
  7276   004298  EC06  F01D         	call	_turnLeft	;wreg free
  7277   00429C                     
  7278                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7279   00429C  0E21               	movlw	33
  7280   00429E  6E1C               	movwf	(??_left135+1)^0,c
  7281   0042A0  0E78               	movlw	120
  7282   0042A2  6E1B               	movwf	??_left135^0,c
  7283   0042A4  0E98               	movlw	152
  7284   0042A6                     u5627:
  7285   0042A6  2EE8               	decfsz	wreg,f,c
  7286   0042A8  D7FE               	bra	u5627
  7287   0042AA  2E1B               	decfsz	??_left135^0,f,c
  7288   0042AC  D7FC               	bra	u5627
  7289   0042AE  2E1C               	decfsz	(??_left135+1)^0,f,c
  7290   0042B0  D7FA               	bra	u5627
  7291   0042B2  D000               	nop2	
  7292   0042B4                     
  7293                           ;dc_motor.c: 229:     stop(mL,mR);
  7294   0042B4  C019  F014         	movff	left135@mL,stop@mL
  7295   0042B8  C01A  F015         	movff	left135@mR,stop@mR
  7296   0042BC  EC80  F01C         	call	_stop	;wreg free
  7297   0042C0  0012               	return		;funcret
  7298   0042C2                     __end_of_left135:
  7299                           	callstack 0
  7300                           
  7301 ;; *************** function _moveGreen *****************
  7302 ;; Defined at:
  7303 ;;		line 264 in file "dc_motor.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7306 ;;		 -> motorL(9), 
  7307 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7308 ;;		 -> motorR(9), 
  7309 ;;  path_length     2   30[COMRAM] unsigned int 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;		None
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      void 
  7314 ;; Registers used:
  7315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7323 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7324 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7325 ;;Total ram usage:        6 bytes
  7326 ;; Hardware stack levels used: 1
  7327 ;; Hardware stack levels required when called: 5
  7328 ;; This function calls:
  7329 ;;		_backHalf
  7330 ;;		_left90
  7331 ;;		_logAction
  7332 ;; This function is called by:
  7333 ;;		_decision
  7334 ;; This function uses a non-reentrant model
  7335 ;;
  7336                           
  7337                           	psect	text32
  7338   003F00                     __ptext32:
  7339                           	callstack 0
  7340   003F00                     _moveGreen:
  7341                           	callstack 24
  7342   003F00                     
  7343                           ;dc_motor.c: 264: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          path_length);dc_motor.c: 265: {;dc_motor.c: 267:     backHalf(mL,mR);
  7344   003F00  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7345   003F04  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7346   003F08  ECC3  F021         	call	_backHalf	;wreg free
  7347   003F0C                     
  7348                           ;dc_motor.c: 268:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7349   003F0C  0E29               	movlw	41
  7350   003F0E  6E22               	movwf	(??_moveGreen+1)^0,c
  7351   003F10  0E96               	movlw	150
  7352   003F12  6E21               	movwf	??_moveGreen^0,c
  7353   003F14  0E7F               	movlw	127
  7354   003F16                     u5637:
  7355   003F16  2EE8               	decfsz	wreg,f,c
  7356   003F18  D7FE               	bra	u5637
  7357   003F1A  2E21               	decfsz	??_moveGreen^0,f,c
  7358   003F1C  D7FC               	bra	u5637
  7359   003F1E  2E22               	decfsz	(??_moveGreen+1)^0,f,c
  7360   003F20  D7FA               	bra	u5637
  7361   003F22  0000               	nop	
  7362   003F24                     
  7363                           ;dc_motor.c: 269:     left90(mL,mR);
  7364   003F24  C01D  F019         	movff	moveGreen@mL,left90@mL
  7365   003F28  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7366   003F2C  ECAB  F021         	call	_left90	;wreg free
  7367   003F30                     
  7368                           ;dc_motor.c: 270:     logAction('L',0, path_length);
  7369   003F30  0E00               	movlw	0
  7370   003F32  6E09               	movwf	(logAction@time+1)^0,c
  7371   003F34  0E00               	movlw	0
  7372   003F36  6E08               	movwf	logAction@time^0,c
  7373   003F38  C01F  F00A         	movff	moveGreen@path_length,logAction@pathLength
  7374   003F3C  C020  F00B         	movff	moveGreen@path_length+1,logAction@pathLength+1
  7375   003F40  0E4C               	movlw	76
  7376   003F42  ECF7  F01D         	call	_logAction
  7377   003F46  0012               	return		;funcret
  7378   003F48                     __end_of_moveGreen:
  7379                           	callstack 0
  7380                           
  7381 ;; *************** function _left90 *****************
  7382 ;; Defined at:
  7383 ;;		line 201 in file "dc_motor.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7386 ;;		 -> motorL(9), 
  7387 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7388 ;;		 -> motorR(9), 
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;		None
  7391 ;; Return value:  Size  Location     Type
  7392 ;;                  1    wreg      void 
  7393 ;; Registers used:
  7394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7395 ;; Tracked objects:
  7396 ;;		On entry : 0/0
  7397 ;;		On exit  : 0/0
  7398 ;;		Unchanged: 0/0
  7399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7400 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7402 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7403 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7404 ;;Total ram usage:        4 bytes
  7405 ;; Hardware stack levels used: 1
  7406 ;; Hardware stack levels required when called: 4
  7407 ;; This function calls:
  7408 ;;		_stop
  7409 ;;		_turnLeft
  7410 ;; This function is called by:
  7411 ;;		_moveGreen
  7412 ;;		_movePink
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           	psect	text33
  7417   004356                     __ptext33:
  7418                           	callstack 0
  7419   004356                     _left90:
  7420                           	callstack 24
  7421   004356                     
  7422                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  7423   004356  C019  F014         	movff	left90@mL,turnLeft@mL
  7424   00435A  C01A  F015         	movff	left90@mR,turnLeft@mR
  7425   00435E  EC06  F01D         	call	_turnLeft	;wreg free
  7426   004362                     
  7427                           ;dc_motor.c: 204:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7428   004362  0E18               	movlw	24
  7429   004364  6E1C               	movwf	(??_left90+1)^0,c
  7430   004366  0E8A               	movlw	138
  7431   004368  6E1B               	movwf	??_left90^0,c
  7432   00436A  0EE8               	movlw	232
  7433   00436C                     u5647:
  7434   00436C  2EE8               	decfsz	wreg,f,c
  7435   00436E  D7FE               	bra	u5647
  7436   004370  2E1B               	decfsz	??_left90^0,f,c
  7437   004372  D7FC               	bra	u5647
  7438   004374  2E1C               	decfsz	(??_left90+1)^0,f,c
  7439   004376  D7FA               	bra	u5647
  7440   004378                     
  7441                           ;dc_motor.c: 205:     stop(mL,mR);
  7442   004378  C019  F014         	movff	left90@mL,stop@mL
  7443   00437C  C01A  F015         	movff	left90@mR,stop@mR
  7444   004380  EC80  F01C         	call	_stop	;wreg free
  7445   004384  0012               	return		;funcret
  7446   004386                     __end_of_left90:
  7447                           	callstack 0
  7448                           
  7449 ;; *************** function _moveBlue *****************
  7450 ;; Defined at:
  7451 ;;		line 273 in file "dc_motor.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7454 ;;		 -> motorL(9), 
  7455 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7456 ;;		 -> motorR(9), 
  7457 ;;  path_length     2   30[COMRAM] unsigned int 
  7458 ;; Auto vars:     Size  Location     Type
  7459 ;;		None
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  1    wreg      void 
  7462 ;; Registers used:
  7463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7471 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7472 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7473 ;;Total ram usage:        6 bytes
  7474 ;; Hardware stack levels used: 1
  7475 ;; Hardware stack levels required when called: 5
  7476 ;; This function calls:
  7477 ;;		_backHalf
  7478 ;;		_logAction
  7479 ;;		_turn180
  7480 ;; This function is called by:
  7481 ;;		_decision
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           	psect	text34
  7486   003F48                     __ptext34:
  7487                           	callstack 0
  7488   003F48                     _moveBlue:
  7489                           	callstack 24
  7490   003F48                     
  7491                           ;dc_motor.c: 273: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 274: {;dc_motor.c: 276:     backHalf(mL,mR);
  7492   003F48  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7493   003F4C  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7494   003F50  ECC3  F021         	call	_backHalf	;wreg free
  7495   003F54                     
  7496                           ;dc_motor.c: 277:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7497   003F54  0E29               	movlw	41
  7498   003F56  6E22               	movwf	(??_moveBlue+1)^0,c
  7499   003F58  0E96               	movlw	150
  7500   003F5A  6E21               	movwf	??_moveBlue^0,c
  7501   003F5C  0E7F               	movlw	127
  7502   003F5E                     u5657:
  7503   003F5E  2EE8               	decfsz	wreg,f,c
  7504   003F60  D7FE               	bra	u5657
  7505   003F62  2E21               	decfsz	??_moveBlue^0,f,c
  7506   003F64  D7FC               	bra	u5657
  7507   003F66  2E22               	decfsz	(??_moveBlue+1)^0,f,c
  7508   003F68  D7FA               	bra	u5657
  7509   003F6A  0000               	nop	
  7510   003F6C                     
  7511                           ;dc_motor.c: 278:     turn180(mL,mR);
  7512   003F6C  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7513   003F70  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7514   003F74  EC61  F021         	call	_turn180	;wreg free
  7515   003F78                     
  7516                           ;dc_motor.c: 279:     logAction('180',0, path_length);
  7517   003F78  0E00               	movlw	0
  7518   003F7A  6E09               	movwf	(logAction@time+1)^0,c
  7519   003F7C  0E00               	movlw	0
  7520   003F7E  6E08               	movwf	logAction@time^0,c
  7521   003F80  C01F  F00A         	movff	moveBlue@path_length,logAction@pathLength
  7522   003F84  C020  F00B         	movff	moveBlue@path_length+1,logAction@pathLength+1
  7523   003F88  0E30               	movlw	48
  7524   003F8A  ECF7  F01D         	call	_logAction
  7525   003F8E  0012               	return		;funcret
  7526   003F90                     __end_of_moveBlue:
  7527                           	callstack 0
  7528                           
  7529 ;; *************** function _turn180 *****************
  7530 ;; Defined at:
  7531 ;;		line 209 in file "dc_motor.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7534 ;;		 -> motorL(9), 
  7535 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7536 ;;		 -> motorR(9), 
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;		None
  7539 ;; Return value:  Size  Location     Type
  7540 ;;                  1    wreg      void 
  7541 ;; Registers used:
  7542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7543 ;; Tracked objects:
  7544 ;;		On entry : 0/0
  7545 ;;		On exit  : 0/0
  7546 ;;		Unchanged: 0/0
  7547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7548 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7550 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7551 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7552 ;;Total ram usage:        4 bytes
  7553 ;; Hardware stack levels used: 1
  7554 ;; Hardware stack levels required when called: 4
  7555 ;; This function calls:
  7556 ;;		_stop
  7557 ;;		_turnLeft
  7558 ;; This function is called by:
  7559 ;;		_moveBlue
  7560 ;;		_moveWhite
  7561 ;;		_reverseTurn
  7562 ;; This function uses a non-reentrant model
  7563 ;;
  7564                           
  7565                           	psect	text35
  7566   0042C2                     __ptext35:
  7567                           	callstack 0
  7568   0042C2                     _turn180:
  7569                           	callstack 24
  7570   0042C2                     
  7571                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  7572   0042C2  C019  F014         	movff	turn180@mL,turnLeft@mL
  7573   0042C6  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7574   0042CA  EC06  F01D         	call	_turnLeft	;wreg free
  7575   0042CE                     
  7576                           ;dc_motor.c: 212:     _delay((unsigned long)((580)*(64000000/4000.0)));
  7577   0042CE  0E30               	movlw	48
  7578   0042D0  6E1C               	movwf	(??_turn180+1)^0,c
  7579   0042D2  0E14               	movlw	20
  7580   0042D4  6E1B               	movwf	??_turn180^0,c
  7581   0042D6  0ED1               	movlw	209
  7582   0042D8                     u5667:
  7583   0042D8  2EE8               	decfsz	wreg,f,c
  7584   0042DA  D7FE               	bra	u5667
  7585   0042DC  2E1B               	decfsz	??_turn180^0,f,c
  7586   0042DE  D7FC               	bra	u5667
  7587   0042E0  2E1C               	decfsz	(??_turn180+1)^0,f,c
  7588   0042E2  D7FA               	bra	u5667
  7589   0042E4  0000               	nop	
  7590   0042E6                     
  7591                           ;dc_motor.c: 213:     stop(mL,mR);
  7592   0042E6  C019  F014         	movff	turn180@mL,stop@mL
  7593   0042EA  C01A  F015         	movff	turn180@mR,stop@mR
  7594   0042EE  EC80  F01C         	call	_stop	;wreg free
  7595   0042F2  0012               	return		;funcret
  7596   0042F4                     __end_of_turn180:
  7597                           	callstack 0
  7598                           
  7599 ;; *************** function _turnLeft *****************
  7600 ;; Defined at:
  7601 ;;		line 105 in file "dc_motor.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7604 ;;		 -> motorL(9), 
  7605 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7606 ;;		 -> motorR(9), 
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;  i               2   22[COMRAM] unsigned int 
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  1    wreg      void 
  7611 ;; Registers used:
  7612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7618 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7619 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7620 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7621 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7622 ;;Total ram usage:        5 bytes
  7623 ;; Hardware stack levels used: 1
  7624 ;; Hardware stack levels required when called: 3
  7625 ;; This function calls:
  7626 ;;		_setMotorPWM
  7627 ;; This function is called by:
  7628 ;;		_left90
  7629 ;;		_turn180
  7630 ;;		_left135
  7631 ;;		_reverseTurn
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text36
  7636   003A0C                     __ptext36:
  7637                           	callstack 0
  7638   003A0C                     _turnLeft:
  7639                           	callstack 25
  7640   003A0C                     
  7641                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  7642   003A0C  5014               	movf	turnLeft@mL^0,w,c
  7643   003A0E  6ED9               	movwf	fsr2l,c
  7644   003A10  6ADA               	clrf	fsr2h,c
  7645   003A12  0E01               	movlw	1
  7646   003A14  26D9               	addwf	fsr2l,f,c
  7647   003A16  6ADF               	clrf	indf2,c
  7648                           
  7649                           ;dc_motor.c: 109:     mR->direction = 1;
  7650   003A18  5015               	movf	turnLeft@mR^0,w,c
  7651   003A1A  6ED9               	movwf	fsr2l,c
  7652   003A1C  6ADA               	clrf	fsr2h,c
  7653   003A1E  0E01               	movlw	1
  7654   003A20  26D9               	addwf	fsr2l,f,c
  7655   003A22  0E01               	movlw	1
  7656   003A24  6EDF               	movwf	indf2,c
  7657   003A26                     
  7658                           ;dc_motor.c: 111:     setMotorPWM(mL);
  7659   003A26  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7660   003A2A  EC3B  F017         	call	_setMotorPWM	;wreg free
  7661   003A2E                     
  7662                           ;dc_motor.c: 112:     setMotorPWM(mR);
  7663   003A2E  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7664   003A32  EC3B  F017         	call	_setMotorPWM	;wreg free
  7665   003A36                     
  7666                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  7667   003A36  0E00               	movlw	0
  7668   003A38  6E18               	movwf	(turnLeft@i+1)^0,c
  7669   003A3A  0E00               	movlw	0
  7670   003A3C  6E17               	movwf	turnLeft@i^0,c
  7671   003A3E                     l5399:
  7672                           
  7673                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  7674   003A3E  5014               	movf	turnLeft@mL^0,w,c
  7675   003A40  6ED9               	movwf	fsr2l,c
  7676   003A42  6ADA               	clrf	fsr2h,c
  7677   003A44  2ADF               	incf	indf2,f,c
  7678                           
  7679                           ;dc_motor.c: 116:         mR->power++;
  7680   003A46  5015               	movf	turnLeft@mR^0,w,c
  7681   003A48  6ED9               	movwf	fsr2l,c
  7682   003A4A  6ADA               	clrf	fsr2h,c
  7683   003A4C  2ADF               	incf	indf2,f,c
  7684   003A4E                     
  7685                           ;dc_motor.c: 117:         setMotorPWM(mL);
  7686   003A4E  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7687   003A52  EC3B  F017         	call	_setMotorPWM	;wreg free
  7688   003A56                     
  7689                           ;dc_motor.c: 118:         setMotorPWM(mR);
  7690   003A56  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7691   003A5A  EC3B  F017         	call	_setMotorPWM	;wreg free
  7692   003A5E                     
  7693                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7694   003A5E  0E0B               	movlw	11
  7695   003A60  6E16               	movwf	??_turnLeft^0,c
  7696   003A62  0E62               	movlw	98
  7697   003A64                     u5677:
  7698   003A64  2EE8               	decfsz	wreg,f,c
  7699   003A66  D7FE               	bra	u5677
  7700   003A68  2E16               	decfsz	??_turnLeft^0,f,c
  7701   003A6A  D7FC               	bra	u5677
  7702   003A6C  D000               	nop2	
  7703   003A6E                     
  7704                           ;dc_motor.c: 120:     }
  7705   003A6E  4A17               	infsnz	turnLeft@i^0,f,c
  7706   003A70  2A18               	incf	(turnLeft@i+1)^0,f,c
  7707   003A72  5018               	movf	(turnLeft@i+1)^0,w,c
  7708   003A74  E109               	bnz	u4950
  7709   003A76  0E32               	movlw	50
  7710   003A78  5C17               	subwf	turnLeft@i^0,w,c
  7711   003A7A  A0D8               	btfss	status,0,c
  7712   003A7C  EF42  F01D         	goto	u4951
  7713   003A80  EF44  F01D         	goto	u4950
  7714   003A84                     u4951:
  7715   003A84  EF1F  F01D         	goto	l5399
  7716   003A88                     u4950:
  7717   003A88  0012               	return		;funcret
  7718   003A8A                     __end_of_turnLeft:
  7719                           	callstack 0
  7720                           
  7721 ;; *************** function _logAction *****************
  7722 ;; Defined at:
  7723 ;;		line 336 in file "dc_motor.c"
  7724 ;; Parameters:    Size  Location     Type
  7725 ;;  action          1    wreg     unsigned char 
  7726 ;;  time            2    7[COMRAM] int 
  7727 ;;  pathLength      2    9[COMRAM] unsigned int 
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;  action          1   11[COMRAM] unsigned char 
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  2    7[COMRAM] unsigned int 
  7732 ;; Registers used:
  7733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7739 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7740 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7742 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7743 ;;Total ram usage:        5 bytes
  7744 ;; Hardware stack levels used: 1
  7745 ;; Hardware stack levels required when called: 2
  7746 ;; This function calls:
  7747 ;;		___wmul
  7748 ;; This function is called by:
  7749 ;;		_main
  7750 ;;		_moveRed
  7751 ;;		_moveGreen
  7752 ;;		_moveBlue
  7753 ;;		_moveYellow
  7754 ;;		_movePink
  7755 ;;		_moveOrange
  7756 ;;		_moveLightBlue
  7757 ;; This function uses a non-reentrant model
  7758 ;;
  7759                           
  7760                           	psect	text37
  7761   003BEE                     __ptext37:
  7762                           	callstack 0
  7763   003BEE                     _logAction:
  7764                           	callstack 28
  7765                           
  7766                           ;incstack = 0
  7767                           ;logAction@action stored from wreg
  7768   003BEE  6E0C               	movwf	logAction@action^0,c
  7769   003BF0                     
  7770                           ;dc_motor.c: 337:     if (pathLength < 50) {
  7771   003BF0  500B               	movf	(logAction@pathLength+1)^0,w,c
  7772   003BF2  E107               	bnz	u5041
  7773   003BF4  0E32               	movlw	50
  7774   003BF6  5C0A               	subwf	logAction@pathLength^0,w,c
  7775   003BF8  B0D8               	btfsc	status,0,c
  7776   003BFA  EF01  F01E         	goto	u5041
  7777   003BFE  EF03  F01E         	goto	u5040
  7778   003C02                     u5041:
  7779   003C02  EF2B  F01E         	goto	l485
  7780   003C06                     u5040:
  7781   003C06                     
  7782                           ;dc_motor.c: 338:         path[pathLength].action = action;
  7783   003C06  C00A  F002         	movff	logAction@pathLength,___wmul@multiplier
  7784   003C0A  C00B  F003         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7785   003C0E  0E00               	movlw	0
  7786   003C10  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7787   003C12  0E05               	movlw	5
  7788   003C14  6E04               	movwf	___wmul@multiplicand^0,c
  7789   003C16  EC04  F022         	call	___wmul	;wreg free
  7790   003C1A  0E00               	movlw	low _path
  7791   003C1C  2402               	addwf	?___wmul^0,w,c
  7792   003C1E  6ED9               	movwf	fsr2l,c
  7793   003C20  0E02               	movlw	high _path
  7794   003C22  2003               	addwfc	(?___wmul+1)^0,w,c
  7795   003C24  6EDA               	movwf	fsr2h,c
  7796   003C26  C00C  FFDF         	movff	logAction@action,indf2
  7797                           
  7798                           ;dc_motor.c: 339:         path[pathLength].time = time;
  7799   003C2A  C00A  F002         	movff	logAction@pathLength,___wmul@multiplier
  7800   003C2E  C00B  F003         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7801   003C32  0E00               	movlw	0
  7802   003C34  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7803   003C36  0E05               	movlw	5
  7804   003C38  6E04               	movwf	___wmul@multiplicand^0,c
  7805   003C3A  EC04  F022         	call	___wmul	;wreg free
  7806   003C3E  0E01               	movlw	low (_path+1)
  7807   003C40  2402               	addwf	?___wmul^0,w,c
  7808   003C42  6ED9               	movwf	fsr2l,c
  7809   003C44  0E02               	movlw	high (_path+1)
  7810   003C46  2003               	addwfc	(?___wmul+1)^0,w,c
  7811   003C48  6EDA               	movwf	fsr2h,c
  7812   003C4A  C008  FFDE         	movff	logAction@time,postinc2
  7813   003C4E  C009  FFDD         	movff	logAction@time+1,postdec2
  7814   003C52                     
  7815                           ;dc_motor.c: 340:         return pathLength++;;	Return value of _logAction is never used
  7816   003C52  4A0A               	infsnz	logAction@pathLength^0,f,c
  7817   003C54  2A0B               	incf	(logAction@pathLength+1)^0,f,c
  7818   003C56                     l485:
  7819   003C56  0012               	return		;funcret
  7820   003C58                     __end_of_logAction:
  7821                           	callstack 0
  7822                           
  7823 ;; *************** function _backHalf *****************
  7824 ;; Defined at:
  7825 ;;		line 233 in file "dc_motor.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7828 ;;		 -> motorL(9), 
  7829 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7830 ;;		 -> motorR(9), 
  7831 ;; Auto vars:     Size  Location     Type
  7832 ;;		None
  7833 ;; Return value:  Size  Location     Type
  7834 ;;                  1    wreg      void 
  7835 ;; Registers used:
  7836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7837 ;; Tracked objects:
  7838 ;;		On entry : 0/0
  7839 ;;		On exit  : 0/0
  7840 ;;		Unchanged: 0/0
  7841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7842 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7844 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7845 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7846 ;;Total ram usage:        4 bytes
  7847 ;; Hardware stack levels used: 1
  7848 ;; Hardware stack levels required when called: 4
  7849 ;; This function calls:
  7850 ;;		_fullSpeedBack
  7851 ;;		_stop
  7852 ;; This function is called by:
  7853 ;;		_moveRed
  7854 ;;		_moveGreen
  7855 ;;		_moveBlue
  7856 ;;		_moveOrange
  7857 ;;		_moveLightBlue
  7858 ;;		_moveWhite
  7859 ;; This function uses a non-reentrant model
  7860 ;;
  7861                           
  7862                           	psect	text38
  7863   004386                     __ptext38:
  7864                           	callstack 0
  7865   004386                     _backHalf:
  7866                           	callstack 24
  7867   004386                     
  7868                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  7869   004386  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  7870   00438A  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  7871   00438E  EC82  F01D         	call	_fullSpeedBack	;wreg free
  7872   004392                     
  7873                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  7874   004392  0E19               	movlw	25
  7875   004394  6E1C               	movwf	(??_backHalf+1)^0,c
  7876   004396  0E5A               	movlw	90
  7877   004398  6E1B               	movwf	??_backHalf^0,c
  7878   00439A  0EB2               	movlw	178
  7879   00439C                     u5687:
  7880   00439C  2EE8               	decfsz	wreg,f,c
  7881   00439E  D7FE               	bra	u5687
  7882   0043A0  2E1B               	decfsz	??_backHalf^0,f,c
  7883   0043A2  D7FC               	bra	u5687
  7884   0043A4  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  7885   0043A6  D7FA               	bra	u5687
  7886   0043A8                     
  7887                           ;dc_motor.c: 237:     stop(mL,mR);
  7888   0043A8  C019  F014         	movff	backHalf@mL,stop@mL
  7889   0043AC  C01A  F015         	movff	backHalf@mR,stop@mR
  7890   0043B0  EC80  F01C         	call	_stop	;wreg free
  7891   0043B4  0012               	return		;funcret
  7892   0043B6                     __end_of_backHalf:
  7893                           	callstack 0
  7894                           
  7895 ;; *************** function _stop *****************
  7896 ;; Defined at:
  7897 ;;		line 88 in file "dc_motor.c"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7900 ;;		 -> motorL(9), 
  7901 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7902 ;;		 -> motorR(9), 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;		None
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  1    wreg      void 
  7907 ;; Registers used:
  7908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7914 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7916 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7917 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7918 ;;Total ram usage:        3 bytes
  7919 ;; Hardware stack levels used: 1
  7920 ;; Hardware stack levels required when called: 3
  7921 ;; This function calls:
  7922 ;;		_setMotorPWM
  7923 ;; This function is called by:
  7924 ;;		_main
  7925 ;;		_right90
  7926 ;;		_left90
  7927 ;;		_turn180
  7928 ;;		_right135
  7929 ;;		_left135
  7930 ;;		_backHalf
  7931 ;;		_backOneAndHalf
  7932 ;;		_reverseStraight
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           	psect	text39
  7937   003900                     __ptext39:
  7938                           	callstack 0
  7939   003900                     _stop:
  7940                           	callstack 27
  7941   003900                     
  7942                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  7943   003900  EFB0  F01C         	goto	l5383
  7944   003904                     l5369:
  7945                           
  7946                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  7947   003904  5014               	movf	stop@mL^0,w,c
  7948   003906  6ED9               	movwf	fsr2l,c
  7949   003908  6ADA               	clrf	fsr2h,c
  7950   00390A  50DF               	movf	indf2,w,c
  7951   00390C  B4D8               	btfsc	status,2,c
  7952   00390E  EF8B  F01C         	goto	u4911
  7953   003912  EF8D  F01C         	goto	u4910
  7954   003916                     u4911:
  7955   003916  EF91  F01C         	goto	l5373
  7956   00391A                     u4910:
  7957   00391A  5014               	movf	stop@mL^0,w,c
  7958   00391C  6ED9               	movwf	fsr2l,c
  7959   00391E  6ADA               	clrf	fsr2h,c
  7960   003920  06DF               	decf	indf2,f,c
  7961   003922                     l5373:
  7962                           
  7963                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  7964   003922  5015               	movf	stop@mR^0,w,c
  7965   003924  6ED9               	movwf	fsr2l,c
  7966   003926  6ADA               	clrf	fsr2h,c
  7967   003928  50DF               	movf	indf2,w,c
  7968   00392A  B4D8               	btfsc	status,2,c
  7969   00392C  EF9A  F01C         	goto	u4921
  7970   003930  EF9C  F01C         	goto	u4920
  7971   003934                     u4921:
  7972   003934  EFA0  F01C         	goto	l5377
  7973   003938                     u4920:
  7974   003938  5015               	movf	stop@mR^0,w,c
  7975   00393A  6ED9               	movwf	fsr2l,c
  7976   00393C  6ADA               	clrf	fsr2h,c
  7977   00393E  06DF               	decf	indf2,f,c
  7978   003940                     l5377:
  7979                           
  7980                           ;dc_motor.c: 96:         setMotorPWM(mL);
  7981   003940  C014  F00F         	movff	stop@mL,setMotorPWM@m
  7982   003944  EC3B  F017         	call	_setMotorPWM	;wreg free
  7983   003948                     
  7984                           ;dc_motor.c: 97:         setMotorPWM(mR);
  7985   003948  C015  F00F         	movff	stop@mR,setMotorPWM@m
  7986   00394C  EC3B  F017         	call	_setMotorPWM	;wreg free
  7987   003950                     
  7988                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7989   003950  0E0B               	movlw	11
  7990   003952  6E16               	movwf	??_stop^0,c
  7991   003954  0E62               	movlw	98
  7992   003956                     u5697:
  7993   003956  2EE8               	decfsz	wreg,f,c
  7994   003958  D7FE               	bra	u5697
  7995   00395A  2E16               	decfsz	??_stop^0,f,c
  7996   00395C  D7FC               	bra	u5697
  7997   00395E  D000               	nop2	
  7998   003960                     l5383:
  7999                           
  8000                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  8001   003960  5014               	movf	stop@mL^0,w,c
  8002   003962  6ED9               	movwf	fsr2l,c
  8003   003964  6ADA               	clrf	fsr2h,c
  8004   003966  50DF               	movf	indf2,w,c
  8005   003968  A4D8               	btfss	status,2,c
  8006   00396A  EFB9  F01C         	goto	u4931
  8007   00396E  EFBB  F01C         	goto	u4930
  8008   003972                     u4931:
  8009   003972  EF82  F01C         	goto	l5369
  8010   003976                     u4930:
  8011   003976  5015               	movf	stop@mR^0,w,c
  8012   003978  6ED9               	movwf	fsr2l,c
  8013   00397A  6ADA               	clrf	fsr2h,c
  8014   00397C  50DF               	movf	indf2,w,c
  8015   00397E  A4D8               	btfss	status,2,c
  8016   003980  EFC4  F01C         	goto	u4941
  8017   003984  EFC6  F01C         	goto	u4940
  8018   003988                     u4941:
  8019   003988  EF82  F01C         	goto	l5369
  8020   00398C                     u4940:
  8021   00398C  0012               	return		;funcret
  8022   00398E                     __end_of_stop:
  8023                           	callstack 0
  8024                           
  8025 ;; *************** function _fullSpeedBack *****************
  8026 ;; Defined at:
  8027 ;;		line 165 in file "dc_motor.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8030 ;;		 -> motorL(9), 
  8031 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8032 ;;		 -> motorR(9), 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  power           2   22[COMRAM] int 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8045 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8047 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8048 ;;Total ram usage:        5 bytes
  8049 ;; Hardware stack levels used: 1
  8050 ;; Hardware stack levels required when called: 3
  8051 ;; This function calls:
  8052 ;;		_setMotorPWM
  8053 ;; This function is called by:
  8054 ;;		_backHalf
  8055 ;;		_backOneAndHalf
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           	psect	text40
  8060   003B04                     __ptext40:
  8061                           	callstack 0
  8062   003B04                     _fullSpeedBack:
  8063                           	callstack 24
  8064   003B04                     
  8065                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  8066   003B04  5014               	movf	fullSpeedBack@mL^0,w,c
  8067   003B06  6ED9               	movwf	fsr2l,c
  8068   003B08  6ADA               	clrf	fsr2h,c
  8069   003B0A  0E01               	movlw	1
  8070   003B0C  26D9               	addwf	fsr2l,f,c
  8071   003B0E  6ADF               	clrf	indf2,c
  8072                           
  8073                           ;dc_motor.c: 169:     mR->direction = 0;
  8074   003B10  5015               	movf	fullSpeedBack@mR^0,w,c
  8075   003B12  6ED9               	movwf	fsr2l,c
  8076   003B14  6ADA               	clrf	fsr2h,c
  8077   003B16  0E01               	movlw	1
  8078   003B18  26D9               	addwf	fsr2l,f,c
  8079   003B1A  6ADF               	clrf	indf2,c
  8080   003B1C                     
  8081                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8082   003B1C  0E00               	movlw	0
  8083   003B1E  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8084   003B20  0E00               	movlw	0
  8085   003B22  6E17               	movwf	fullSpeedBack@power^0,c
  8086   003B24                     l5443:
  8087                           
  8088                           ;dc_motor.c: 172:         mL->power = power;
  8089   003B24  5014               	movf	fullSpeedBack@mL^0,w,c
  8090   003B26  6ED9               	movwf	fsr2l,c
  8091   003B28  6ADA               	clrf	fsr2h,c
  8092   003B2A  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8093                           
  8094                           ;dc_motor.c: 173:         mR->power = power;
  8095   003B2E  5015               	movf	fullSpeedBack@mR^0,w,c
  8096   003B30  6ED9               	movwf	fsr2l,c
  8097   003B32  6ADA               	clrf	fsr2h,c
  8098   003B34  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8099   003B38                     
  8100                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8101   003B38  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8102   003B3C  EC3B  F017         	call	_setMotorPWM	;wreg free
  8103   003B40                     
  8104                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8105   003B40  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8106   003B44  EC3B  F017         	call	_setMotorPWM	;wreg free
  8107   003B48                     
  8108                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8109   003B48  0E0B               	movlw	11
  8110   003B4A  6E16               	movwf	??_fullSpeedBack^0,c
  8111   003B4C  0E62               	movlw	98
  8112   003B4E                     u5707:
  8113   003B4E  2EE8               	decfsz	wreg,f,c
  8114   003B50  D7FE               	bra	u5707
  8115   003B52  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8116   003B54  D7FC               	bra	u5707
  8117   003B56  D000               	nop2	
  8118   003B58                     
  8119                           ;dc_motor.c: 181:     }
  8120   003B58  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8121   003B5A  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8122   003B5C  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8123   003B5E  EFBA  F01D         	goto	u4971
  8124   003B62  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8125   003B64  E109               	bnz	u4970
  8126   003B66  0E33               	movlw	51
  8127   003B68  5C17               	subwf	fullSpeedBack@power^0,w,c
  8128   003B6A  A0D8               	btfss	status,0,c
  8129   003B6C  EFBA  F01D         	goto	u4971
  8130   003B70  EFBC  F01D         	goto	u4970
  8131   003B74                     u4971:
  8132   003B74  EF92  F01D         	goto	l5443
  8133   003B78                     u4970:
  8134   003B78  0012               	return		;funcret
  8135   003B7A                     __end_of_fullSpeedBack:
  8136                           	callstack 0
  8137                           
  8138 ;; *************** function _setMotorPWM *****************
  8139 ;; Defined at:
  8140 ;;		line 65 in file "dc_motor.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8143 ;;		 -> motorR(9), motorL(9), 
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;  negDuty         1   18[COMRAM] unsigned char 
  8146 ;;  posDuty         1   17[COMRAM] unsigned char 
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      void 
  8149 ;; Registers used:
  8150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8156 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8157 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8158 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8159 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8160 ;;Total ram usage:        5 bytes
  8161 ;; Hardware stack levels used: 1
  8162 ;; Hardware stack levels required when called: 2
  8163 ;; This function calls:
  8164 ;;		___lwdiv
  8165 ;;		___wmul
  8166 ;; This function is called by:
  8167 ;;		_stop
  8168 ;;		_turnLeft
  8169 ;;		_turnRight
  8170 ;;		_fullSpeedAhead
  8171 ;;		_fullSpeedBack
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           	psect	text41
  8176   002E76                     __ptext41:
  8177                           	callstack 0
  8178   002E76                     _setMotorPWM:
  8179                           	callstack 27
  8180   002E76                     
  8181                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8182   002E76  500F               	movf	setMotorPWM@m^0,w,c
  8183   002E78  6ED9               	movwf	fsr2l,c
  8184   002E7A  6ADA               	clrf	fsr2h,c
  8185   002E7C  0E02               	movlw	2
  8186   002E7E  26D9               	addwf	fsr2l,f,c
  8187   002E80  50DF               	movf	indf2,w,c
  8188   002E82  B4D8               	btfsc	status,2,c
  8189   002E84  EF46  F017         	goto	u4821
  8190   002E88  EF48  F017         	goto	u4820
  8191   002E8C                     u4821:
  8192   002E8C  EF78  F017         	goto	l5297
  8193   002E90                     u4820:
  8194   002E90                     
  8195                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8196   002E90  500F               	movf	setMotorPWM@m^0,w,c
  8197   002E92  6ED9               	movwf	fsr2l,c
  8198   002E94  6ADA               	clrf	fsr2h,c
  8199   002E96  50DF               	movf	indf2,w,c
  8200   002E98  6E10               	movwf	??_setMotorPWM^0,c
  8201   002E9A  5010               	movf	??_setMotorPWM^0,w,c
  8202   002E9C  6E02               	movwf	___wmul@multiplier^0,c
  8203   002E9E  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8204   002EA0  500F               	movf	setMotorPWM@m^0,w,c
  8205   002EA2  6ED9               	movwf	fsr2l,c
  8206   002EA4  6ADA               	clrf	fsr2h,c
  8207   002EA6  0E03               	movlw	3
  8208   002EA8  26D9               	addwf	fsr2l,f,c
  8209   002EAA  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8210   002EAE  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8211   002EB2  EC04  F022         	call	___wmul	;wreg free
  8212   002EB6  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8213   002EBA  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8214   002EBE  0E00               	movlw	0
  8215   002EC0  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8216   002EC2  0E64               	movlw	100
  8217   002EC4  6E0A               	movwf	___lwdiv@divisor^0,c
  8218   002EC6  ECBD  F01D         	call	___lwdiv	;wreg free
  8219   002ECA  500F               	movf	setMotorPWM@m^0,w,c
  8220   002ECC  6ED9               	movwf	fsr2l,c
  8221   002ECE  6ADA               	clrf	fsr2h,c
  8222   002ED0  0E03               	movlw	3
  8223   002ED2  26D9               	addwf	fsr2l,f,c
  8224   002ED4  50DF               	movf	indf2,w,c
  8225   002ED6  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8226   002ED8  5008               	movf	?___lwdiv^0,w,c
  8227   002EDA  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8228   002EDC  6E12               	movwf	setMotorPWM@posDuty^0,c
  8229   002EDE                     
  8230                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8231   002EDE  500F               	movf	setMotorPWM@m^0,w,c
  8232   002EE0  6ED9               	movwf	fsr2l,c
  8233   002EE2  6ADA               	clrf	fsr2h,c
  8234   002EE4  0E03               	movlw	3
  8235   002EE6  26D9               	addwf	fsr2l,f,c
  8236   002EE8  50DF               	movf	indf2,w,c
  8237   002EEA  6E13               	movwf	setMotorPWM@negDuty^0,c
  8238                           
  8239                           ;dc_motor.c: 72:     }
  8240   002EEC  EF99  F017         	goto	l5301
  8241   002EF0                     l5297:
  8242                           
  8243                           ;dc_motor.c: 74:         posDuty=0;
  8244   002EF0  0E00               	movlw	0
  8245   002EF2  6E12               	movwf	setMotorPWM@posDuty^0,c
  8246   002EF4                     
  8247                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8248   002EF4  500F               	movf	setMotorPWM@m^0,w,c
  8249   002EF6  6ED9               	movwf	fsr2l,c
  8250   002EF8  6ADA               	clrf	fsr2h,c
  8251   002EFA  50DF               	movf	indf2,w,c
  8252   002EFC  6E10               	movwf	??_setMotorPWM^0,c
  8253   002EFE  5010               	movf	??_setMotorPWM^0,w,c
  8254   002F00  6E02               	movwf	___wmul@multiplier^0,c
  8255   002F02  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8256   002F04  500F               	movf	setMotorPWM@m^0,w,c
  8257   002F06  6ED9               	movwf	fsr2l,c
  8258   002F08  6ADA               	clrf	fsr2h,c
  8259   002F0A  0E03               	movlw	3
  8260   002F0C  26D9               	addwf	fsr2l,f,c
  8261   002F0E  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8262   002F12  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8263   002F16  EC04  F022         	call	___wmul	;wreg free
  8264   002F1A  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8265   002F1E  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8266   002F22  0E00               	movlw	0
  8267   002F24  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8268   002F26  0E64               	movlw	100
  8269   002F28  6E0A               	movwf	___lwdiv@divisor^0,c
  8270   002F2A  ECBD  F01D         	call	___lwdiv	;wreg free
  8271   002F2E  5008               	movf	?___lwdiv^0,w,c
  8272   002F30  6E13               	movwf	setMotorPWM@negDuty^0,c
  8273   002F32                     l5301:
  8274                           
  8275                           ;dc_motor.c: 78:     if (m->direction) {
  8276   002F32  500F               	movf	setMotorPWM@m^0,w,c
  8277   002F34  6ED9               	movwf	fsr2l,c
  8278   002F36  6ADA               	clrf	fsr2h,c
  8279   002F38  0E01               	movlw	1
  8280   002F3A  26D9               	addwf	fsr2l,f,c
  8281   002F3C  50DF               	movf	indf2,w,c
  8282   002F3E  B4D8               	btfsc	status,2,c
  8283   002F40  EFA4  F017         	goto	u4831
  8284   002F44  EFA6  F017         	goto	u4830
  8285   002F48                     u4831:
  8286   002F48  EFC6  F017         	goto	l5305
  8287   002F4C                     u4830:
  8288   002F4C                     
  8289                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8290   002F4C  500F               	movf	setMotorPWM@m^0,w,c
  8291   002F4E  6ED9               	movwf	fsr2l,c
  8292   002F50  6ADA               	clrf	fsr2h,c
  8293   002F52  0E05               	movlw	5
  8294   002F54  26D9               	addwf	fsr2l,f,c
  8295   002F56  CFDE F010          	movff	postinc2,??_setMotorPWM
  8296   002F5A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8297   002F5E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8298   002F62  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8299   002F66  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8300                           
  8301                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8302   002F6A  500F               	movf	setMotorPWM@m^0,w,c
  8303   002F6C  6ED9               	movwf	fsr2l,c
  8304   002F6E  6ADA               	clrf	fsr2h,c
  8305   002F70  0E07               	movlw	7
  8306   002F72  26D9               	addwf	fsr2l,f,c
  8307   002F74  CFDE F010          	movff	postinc2,??_setMotorPWM
  8308   002F78  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8309   002F7C  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8310   002F80  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8311   002F84  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8312                           
  8313                           ;dc_motor.c: 81:     } else {
  8314   002F88  EFE4  F017         	goto	l408
  8315   002F8C                     l5305:
  8316                           
  8317                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8318   002F8C  500F               	movf	setMotorPWM@m^0,w,c
  8319   002F8E  6ED9               	movwf	fsr2l,c
  8320   002F90  6ADA               	clrf	fsr2h,c
  8321   002F92  0E05               	movlw	5
  8322   002F94  26D9               	addwf	fsr2l,f,c
  8323   002F96  CFDE F010          	movff	postinc2,??_setMotorPWM
  8324   002F9A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8325   002F9E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8326   002FA2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8327   002FA6  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8328                           
  8329                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8330   002FAA  500F               	movf	setMotorPWM@m^0,w,c
  8331   002FAC  6ED9               	movwf	fsr2l,c
  8332   002FAE  6ADA               	clrf	fsr2h,c
  8333   002FB0  0E07               	movlw	7
  8334   002FB2  26D9               	addwf	fsr2l,f,c
  8335   002FB4  CFDE F010          	movff	postinc2,??_setMotorPWM
  8336   002FB8  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8337   002FBC  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8338   002FC0  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8339   002FC4  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8340   002FC8                     l408:
  8341   002FC8  0012               	return		;funcret
  8342   002FCA                     __end_of_setMotorPWM:
  8343                           	callstack 0
  8344                           
  8345 ;; *************** function ___lwdiv *****************
  8346 ;; Defined at:
  8347 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;  dividend        2    7[COMRAM] unsigned int 
  8350 ;;  divisor         2    9[COMRAM] unsigned int 
  8351 ;; Auto vars:     Size  Location     Type
  8352 ;;  quotient        2   11[COMRAM] unsigned int 
  8353 ;;  counter         1   13[COMRAM] unsigned char 
  8354 ;; Return value:  Size  Location     Type
  8355 ;;                  2    7[COMRAM] unsigned int 
  8356 ;; Registers used:
  8357 ;;		wreg, status,2, status,0
  8358 ;; Tracked objects:
  8359 ;;		On entry : 0/0
  8360 ;;		On exit  : 0/0
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8363 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8364 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8366 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8367 ;;Total ram usage:        7 bytes
  8368 ;; Hardware stack levels used: 1
  8369 ;; Hardware stack levels required when called: 1
  8370 ;; This function calls:
  8371 ;;		Nothing
  8372 ;; This function is called by:
  8373 ;;		_setMotorPWM
  8374 ;;		_ADC2String
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           	psect	text42
  8379   003B7A                     __ptext42:
  8380                           	callstack 0
  8381   003B7A                     ___lwdiv:
  8382                           	callstack 27
  8383   003B7A  0E00               	movlw	0
  8384   003B7C  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  8385   003B7E  0E00               	movlw	0
  8386   003B80  6E0C               	movwf	___lwdiv@quotient^0,c
  8387   003B82  500A               	movf	___lwdiv@divisor^0,w,c
  8388   003B84  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8389   003B86  B4D8               	btfsc	status,2,c
  8390   003B88  EFC8  F01D         	goto	u2481
  8391   003B8C  EFCA  F01D         	goto	u2480
  8392   003B90                     u2481:
  8393   003B90  EFF2  F01D         	goto	l1162
  8394   003B94                     u2480:
  8395   003B94  0E01               	movlw	1
  8396   003B96  6E0E               	movwf	___lwdiv@counter^0,c
  8397   003B98  EFD2  F01D         	goto	l3431
  8398   003B9C                     l3429:
  8399   003B9C  90D8               	bcf	status,0,c
  8400   003B9E  360A               	rlcf	___lwdiv@divisor^0,f,c
  8401   003BA0  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8402   003BA2  2A0E               	incf	___lwdiv@counter^0,f,c
  8403   003BA4                     l3431:
  8404   003BA4  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8405   003BA6  EFD7  F01D         	goto	u2491
  8406   003BAA  EFD9  F01D         	goto	u2490
  8407   003BAE                     u2491:
  8408   003BAE  EFCE  F01D         	goto	l3429
  8409   003BB2                     u2490:
  8410   003BB2                     l3433:
  8411   003BB2  90D8               	bcf	status,0,c
  8412   003BB4  360C               	rlcf	___lwdiv@quotient^0,f,c
  8413   003BB6  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8414   003BB8  500A               	movf	___lwdiv@divisor^0,w,c
  8415   003BBA  5C08               	subwf	___lwdiv@dividend^0,w,c
  8416   003BBC  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8417   003BBE  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8418   003BC0  A0D8               	btfss	status,0,c
  8419   003BC2  EFE5  F01D         	goto	u2501
  8420   003BC6  EFE7  F01D         	goto	u2500
  8421   003BCA                     u2501:
  8422   003BCA  EFEC  F01D         	goto	l3441
  8423   003BCE                     u2500:
  8424   003BCE  500A               	movf	___lwdiv@divisor^0,w,c
  8425   003BD0  5E08               	subwf	___lwdiv@dividend^0,f,c
  8426   003BD2  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8427   003BD4  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8428   003BD6  800C               	bsf	___lwdiv@quotient^0,0,c
  8429   003BD8                     l3441:
  8430   003BD8  90D8               	bcf	status,0,c
  8431   003BDA  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8432   003BDC  320A               	rrcf	___lwdiv@divisor^0,f,c
  8433   003BDE  2E0E               	decfsz	___lwdiv@counter^0,f,c
  8434   003BE0  EFD9  F01D         	goto	l3433
  8435   003BE4                     l1162:
  8436   003BE4  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  8437   003BE8  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8438   003BEC  0012               	return		;funcret
  8439   003BEE                     __end_of___lwdiv:
  8440                           	callstack 0
  8441                           
  8442 ;; *************** function _color_click_init *****************
  8443 ;; Defined at:
  8444 ;;		line 8 in file "color.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;		None
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;		None
  8449 ;; Return value:  Size  Location     Type
  8450 ;;                  1    wreg      void 
  8451 ;; Registers used:
  8452 ;;		wreg, status,2, status,0, cstack
  8453 ;; Tracked objects:
  8454 ;;		On entry : 0/0
  8455 ;;		On exit  : 0/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8460 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8461 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8462 ;;Total ram usage:        1 bytes
  8463 ;; Hardware stack levels used: 1
  8464 ;; Hardware stack levels required when called: 4
  8465 ;; This function calls:
  8466 ;;		_I2C_2_Master_Init
  8467 ;;		_color_writetoaddr
  8468 ;; This function is called by:
  8469 ;;		_main
  8470 ;; This function uses a non-reentrant model
  8471 ;;
  8472                           
  8473                           	psect	text43
  8474   00415E                     __ptext43:
  8475                           	callstack 0
  8476   00415E                     _color_click_init:
  8477                           	callstack 26
  8478   00415E                     
  8479                           ;color.c: 11:     I2C_2_Master_Init();
  8480   00415E  ECDB  F021         	call	_I2C_2_Master_Init	;wreg free
  8481   004162                     
  8482                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  8483   004162  0E01               	movlw	1
  8484   004164  6E04               	movwf	color_writetoaddr@value^0,c
  8485   004166  0E00               	movlw	0
  8486   004168  EC28  F022         	call	_color_writetoaddr
  8487   00416C                     
  8488                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8489   00416C  0E3F               	movlw	63
  8490   00416E  6E06               	movwf	??_color_click_init^0,c
  8491   004170  0E55               	movlw	85
  8492   004172                     u5717:
  8493   004172  2EE8               	decfsz	wreg,f,c
  8494   004174  D7FE               	bra	u5717
  8495   004176  2E06               	decfsz	??_color_click_init^0,f,c
  8496   004178  D7FC               	bra	u5717
  8497   00417A  0000               	nop	
  8498   00417C                     
  8499                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  8500   00417C  0E03               	movlw	3
  8501   00417E  6E04               	movwf	color_writetoaddr@value^0,c
  8502   004180  0E00               	movlw	0
  8503   004182  EC28  F022         	call	_color_writetoaddr
  8504   004186                     
  8505                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  8506   004186  0ED5               	movlw	213
  8507   004188  6E04               	movwf	color_writetoaddr@value^0,c
  8508   00418A  0E01               	movlw	1
  8509   00418C  EC28  F022         	call	_color_writetoaddr
  8510   004190  0012               	return		;funcret
  8511   004192                     __end_of_color_click_init:
  8512                           	callstack 0
  8513                           
  8514 ;; *************** function _color_writetoaddr *****************
  8515 ;; Defined at:
  8516 ;;		line 24 in file "color.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  address         1    wreg     unsigned char 
  8519 ;;  value           1    3[COMRAM] unsigned char 
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;  address         1    4[COMRAM] unsigned char 
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  1    wreg      void 
  8524 ;; Registers used:
  8525 ;;		wreg, status,2, status,0, cstack
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8531 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8535 ;;Total ram usage:        2 bytes
  8536 ;; Hardware stack levels used: 1
  8537 ;; Hardware stack levels required when called: 3
  8538 ;; This function calls:
  8539 ;;		_I2C_2_Master_Start
  8540 ;;		_I2C_2_Master_Stop
  8541 ;;		_I2C_2_Master_Write
  8542 ;; This function is called by:
  8543 ;;		_color_click_init
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547                           	psect	text44
  8548   004450                     __ptext44:
  8549                           	callstack 0
  8550   004450                     _color_writetoaddr:
  8551                           	callstack 26
  8552                           
  8553                           ;incstack = 0
  8554                           ;color_writetoaddr@address stored from wreg
  8555   004450  6E05               	movwf	color_writetoaddr@address^0,c
  8556   004452                     
  8557                           ;color.c: 25:     I2C_2_Master_Start();
  8558   004452  EC7A  F022         	call	_I2C_2_Master_Start	;wreg free
  8559                           
  8560                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  8561   004456  0E52               	movlw	82
  8562   004458  EC6F  F022         	call	_I2C_2_Master_Write
  8563                           
  8564                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  8565   00445C  5005               	movf	color_writetoaddr@address^0,w,c
  8566   00445E  0980               	iorlw	128
  8567   004460  EC6F  F022         	call	_I2C_2_Master_Write
  8568                           
  8569                           ;color.c: 28:     I2C_2_Master_Write(value);
  8570   004464  5004               	movf	color_writetoaddr@value^0,w,c
  8571   004466  EC6F  F022         	call	_I2C_2_Master_Write
  8572                           
  8573                           ;color.c: 29:     I2C_2_Master_Stop();
  8574   00446A  EC75  F022         	call	_I2C_2_Master_Stop	;wreg free
  8575   00446E  0012               	return		;funcret
  8576   004470                     __end_of_color_writetoaddr:
  8577                           	callstack 0
  8578                           
  8579 ;; *************** function _I2C_2_Master_Init *****************
  8580 ;; Defined at:
  8581 ;;		line 4 in file "i2c.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;		None
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;		None
  8586 ;; Return value:  Size  Location     Type
  8587 ;;                  1    wreg      void 
  8588 ;; Registers used:
  8589 ;;		wreg, status,2
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8599 ;;Total ram usage:        0 bytes
  8600 ;; Hardware stack levels used: 1
  8601 ;; Hardware stack levels required when called: 1
  8602 ;; This function calls:
  8603 ;;		Nothing
  8604 ;; This function is called by:
  8605 ;;		_color_click_init
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           	psect	text45
  8610   0043B6                     __ptext45:
  8611                           	callstack 0
  8612   0043B6                     _I2C_2_Master_Init:
  8613                           	callstack 28
  8614   0043B6                     
  8615                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8616   0043B6  010E               	movlb	14	; () banked
  8617   0043B8  51D9               	movf	217,w,b	;volatile
  8618   0043BA  0BF0               	andlw	-16
  8619   0043BC  0908               	iorlw	8
  8620   0043BE  6FD9               	movwf	217,b	;volatile
  8621   0043C0                     
  8622                           ; BSR set to: 14
  8623                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8624   0043C0  8BD9               	bsf	217,5,b	;volatile
  8625                           
  8626                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8627   0043C2  0E9F               	movlw	159
  8628   0043C4  6FD6               	movwf	214,b	;volatile
  8629   0043C6                     
  8630                           ; BSR set to: 14
  8631                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8632   0043C6  8A84               	bsf	132,5,c	;volatile
  8633   0043C8                     
  8634                           ; BSR set to: 14
  8635                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8636   0043C8  8C84               	bsf	132,6,c	;volatile
  8637   0043CA                     
  8638                           ; BSR set to: 14
  8639                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8640   0043CA  9BA7               	bcf	167,5,b	;volatile
  8641   0043CC                     
  8642                           ; BSR set to: 14
  8643                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8644   0043CC  9DA7               	bcf	167,6,b	;volatile
  8645                           
  8646                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8647   0043CE  0E1D               	movlw	29
  8648   0043D0  6F1D               	movwf	29,b	;volatile
  8649                           
  8650                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8651   0043D2  0E1E               	movlw	30
  8652   0043D4  6F1C               	movwf	28,b	;volatile
  8653                           
  8654                           ;i2c.c: 18:   RD5PPS=0x1C;
  8655   0043D6  0E1C               	movlw	28
  8656   0043D8  6F6F               	movwf	111,b	;volatile
  8657                           
  8658                           ;i2c.c: 19:   RD6PPS=0x1B;
  8659   0043DA  0E1B               	movlw	27
  8660   0043DC  6F70               	movwf	112,b	;volatile
  8661   0043DE                     
  8662                           ; BSR set to: 14
  8663   0043DE  0012               	return		;funcret
  8664   0043E0                     __end_of_I2C_2_Master_Init:
  8665                           	callstack 0
  8666                           
  8667 ;; *************** function _calibration_routine *****************
  8668 ;; Defined at:
  8669 ;;		line 151 in file "color.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;  cCal            1   68[COMRAM] PTR struct colors
  8672 ;;		 -> colorCalibration(8), 
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;  cal_state      20    0[BANK0 ] unsigned char [20]
  8675 ;; Return value:  Size  Location     Type
  8676 ;;                  1    wreg      void 
  8677 ;; Registers used:
  8678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8679 ;; Tracked objects:
  8680 ;;		On entry : 0/0
  8681 ;;		On exit  : 0/0
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8684 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8685 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8686 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8687 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8688 ;;Total ram usage:       23 bytes
  8689 ;; Hardware stack levels used: 1
  8690 ;; Hardware stack levels required when called: 9
  8691 ;; This function calls:
  8692 ;;		_color_read_Blue
  8693 ;;		_color_read_Clear
  8694 ;;		_color_read_Green
  8695 ;;		_color_read_Red
  8696 ;;		_sendStringSerial4
  8697 ;;		_sprintf
  8698 ;; This function is called by:
  8699 ;;		_main
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           	psect	text46
  8704   0027F0                     __ptext46:
  8705                           	callstack 0
  8706   0027F0                     _calibration_routine:
  8707                           	callstack 21
  8708   0027F0                     
  8709                           ;color.c: 151: void calibration_routine(colors *cCal);color.c: 152: {;color.c: 154:     
      +                          LATGbits.LATG0 = 0;
  8710   0027F0  907F               	bcf	127,0,c	;volatile
  8711                           
  8712                           ;color.c: 155:     LATEbits.LATE7 = 0;
  8713   0027F2  9E7D               	bcf	125,7,c	;volatile
  8714                           
  8715                           ;color.c: 156:     LATAbits.LATA3 = 0;
  8716   0027F4  9679               	bcf	121,3,c	;volatile
  8717   0027F6                     
  8718                           ;color.c: 158:     char cal_state[20];;color.c: 162:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  8719   0027F6  0E60               	movlw	low calibration_routine@cal_state
  8720   0027F8  6E32               	movwf	sprintf@s^0,c
  8721   0027FA  0E6D               	movlw	low STR_1
  8722   0027FC  6E33               	movwf	sprintf@fmt^0,c
  8723   0027FE  0EA6               	movlw	low STR_2
  8724   002800  6E34               	movwf	(?_sprintf+2)^0,c
  8725   002802  5034               	movf	(?_sprintf+2)^0,w,c
  8726   002804  A4D8               	btfss	status,2,c
  8727   002806  0E0E               	movlw	high __smallconst
  8728   002808  6E35               	movwf	(?_sprintf+3)^0,c
  8729   00280A  ECC9  F020         	call	_sprintf	;wreg free
  8730   00280E                     
  8731                           ;color.c: 163:     sendStringSerial4(cal_state);
  8732   00280E  0E60               	movlw	low calibration_routine@cal_state
  8733   002810  6E03               	movwf	sendStringSerial4@string^0,c
  8734   002812  EC7A  F021         	call	_sendStringSerial4	;wreg free
  8735   002816                     l96:
  8736                           
  8737                           ;color.c: 166:     while(PORTFbits.RF2 == 1){
  8738   002816  B48E               	btfsc	142,2,c	;volatile
  8739   002818  EF10  F014         	goto	u5131
  8740   00281C  EF12  F014         	goto	u5130
  8741   002820                     u5131:
  8742   002820  EF0B  F014         	goto	l96
  8743   002824                     u5130:
  8744   002824                     
  8745                           ;color.c: 170:     LATGbits.LATG0 = 1;
  8746   002824  807F               	bsf	127,0,c	;volatile
  8747   002826                     
  8748                           ;color.c: 171:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8749   002826  0E29               	movlw	41
  8750   002828  6E47               	movwf	(??_calibration_routine+1)^0,c
  8751   00282A  0E96               	movlw	150
  8752   00282C  6E46               	movwf	??_calibration_routine^0,c
  8753   00282E  0E7F               	movlw	127
  8754   002830                     u5727:
  8755   002830  2EE8               	decfsz	wreg,f,c
  8756   002832  D7FE               	bra	u5727
  8757   002834  2E46               	decfsz	??_calibration_routine^0,f,c
  8758   002836  D7FC               	bra	u5727
  8759   002838  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8760   00283A  D7FA               	bra	u5727
  8761   00283C  0000               	nop	
  8762   00283E                     
  8763                           ;color.c: 172:     (cCal->red) = color_read_Red();
  8764   00283E  EC2C  F01E         	call	_color_read_Red	;wreg free
  8765   002842  5045               	movf	calibration_routine@cCal^0,w,c
  8766   002844  6ED9               	movwf	fsr2l,c
  8767   002846  6ADA               	clrf	fsr2h,c
  8768   002848  C006  FFDE         	movff	?_color_read_Red,postinc2
  8769   00284C  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  8770   002850                     
  8771                           ;color.c: 173:     LATGbits.LATG0 = 0;
  8772   002850  907F               	bcf	127,0,c	;volatile
  8773   002852                     
  8774                           ;color.c: 176:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  8775   002852  0E60               	movlw	low calibration_routine@cal_state
  8776   002854  6E32               	movwf	sprintf@s^0,c
  8777   002856  0E01               	movlw	low STR_3
  8778   002858  6E33               	movwf	sprintf@fmt^0,c
  8779   00285A  0EA6               	movlw	low STR_2
  8780   00285C  6E34               	movwf	(?_sprintf+2)^0,c
  8781   00285E  5034               	movf	(?_sprintf+2)^0,w,c
  8782   002860  A4D8               	btfss	status,2,c
  8783   002862  0E0E               	movlw	high __smallconst
  8784   002864  6E35               	movwf	(?_sprintf+3)^0,c
  8785   002866  ECC9  F020         	call	_sprintf	;wreg free
  8786   00286A                     
  8787                           ;color.c: 177:     sendStringSerial4(&cal_state);
  8788   00286A  0E60               	movlw	low calibration_routine@cal_state
  8789   00286C  6E03               	movwf	sendStringSerial4@string^0,c
  8790   00286E  EC7A  F021         	call	_sendStringSerial4	;wreg free
  8791   002872                     l99:
  8792                           
  8793                           ;color.c: 179:     while(PORTFbits.RF2 == 1){
  8794   002872  B48E               	btfsc	142,2,c	;volatile
  8795   002874  EF3E  F014         	goto	u5141
  8796   002878  EF40  F014         	goto	u5140
  8797   00287C                     u5141:
  8798   00287C  EF39  F014         	goto	l99
  8799   002880                     u5140:
  8800   002880                     
  8801                           ;color.c: 183:     LATEbits.LATE7 = 1;
  8802   002880  8E7D               	bsf	125,7,c	;volatile
  8803   002882                     
  8804                           ;color.c: 184:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8805   002882  0E29               	movlw	41
  8806   002884  6E47               	movwf	(??_calibration_routine+1)^0,c
  8807   002886  0E96               	movlw	150
  8808   002888  6E46               	movwf	??_calibration_routine^0,c
  8809   00288A  0E7F               	movlw	127
  8810   00288C                     u5737:
  8811   00288C  2EE8               	decfsz	wreg,f,c
  8812   00288E  D7FE               	bra	u5737
  8813   002890  2E46               	decfsz	??_calibration_routine^0,f,c
  8814   002892  D7FC               	bra	u5737
  8815   002894  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8816   002896  D7FA               	bra	u5737
  8817   002898  0000               	nop	
  8818   00289A                     
  8819                           ;color.c: 185:     (cCal->green) = color_read_Green();
  8820   00289A  EC54  F01E         	call	_color_read_Green	;wreg free
  8821   00289E  5045               	movf	calibration_routine@cCal^0,w,c
  8822   0028A0  6ED9               	movwf	fsr2l,c
  8823   0028A2  6ADA               	clrf	fsr2h,c
  8824   0028A4  0E02               	movlw	2
  8825   0028A6  26D9               	addwf	fsr2l,f,c
  8826   0028A8  C006  FFDE         	movff	?_color_read_Green,postinc2
  8827   0028AC  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  8828   0028B0                     
  8829                           ;color.c: 186:     LATEbits.LATE7 = 0;
  8830   0028B0  9E7D               	bcf	125,7,c	;volatile
  8831   0028B2                     
  8832                           ;color.c: 189:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  8833   0028B2  0E60               	movlw	low calibration_routine@cal_state
  8834   0028B4  6E32               	movwf	sprintf@s^0,c
  8835   0028B6  0E1E               	movlw	low STR_5
  8836   0028B8  6E33               	movwf	sprintf@fmt^0,c
  8837   0028BA  0EA6               	movlw	low STR_2
  8838   0028BC  6E34               	movwf	(?_sprintf+2)^0,c
  8839   0028BE  5034               	movf	(?_sprintf+2)^0,w,c
  8840   0028C0  A4D8               	btfss	status,2,c
  8841   0028C2  0E0E               	movlw	high __smallconst
  8842   0028C4  6E35               	movwf	(?_sprintf+3)^0,c
  8843   0028C6  ECC9  F020         	call	_sprintf	;wreg free
  8844   0028CA                     
  8845                           ;color.c: 190:     sendStringSerial4(&cal_state);
  8846   0028CA  0E60               	movlw	low calibration_routine@cal_state
  8847   0028CC  6E03               	movwf	sendStringSerial4@string^0,c
  8848   0028CE  EC7A  F021         	call	_sendStringSerial4	;wreg free
  8849   0028D2                     l102:
  8850                           
  8851                           ;color.c: 192:     while(PORTFbits.RF2 == 1){
  8852   0028D2  B48E               	btfsc	142,2,c	;volatile
  8853   0028D4  EF6E  F014         	goto	u5151
  8854   0028D8  EF70  F014         	goto	u5150
  8855   0028DC                     u5151:
  8856   0028DC  EF69  F014         	goto	l102
  8857   0028E0                     u5150:
  8858   0028E0                     
  8859                           ;color.c: 196:     LATAbits.LATA3 = 1;
  8860   0028E0  8679               	bsf	121,3,c	;volatile
  8861   0028E2                     
  8862                           ;color.c: 197:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8863   0028E2  0E29               	movlw	41
  8864   0028E4  6E47               	movwf	(??_calibration_routine+1)^0,c
  8865   0028E6  0E96               	movlw	150
  8866   0028E8  6E46               	movwf	??_calibration_routine^0,c
  8867   0028EA  0E7F               	movlw	127
  8868   0028EC                     u5747:
  8869   0028EC  2EE8               	decfsz	wreg,f,c
  8870   0028EE  D7FE               	bra	u5747
  8871   0028F0  2E46               	decfsz	??_calibration_routine^0,f,c
  8872   0028F2  D7FC               	bra	u5747
  8873   0028F4  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8874   0028F6  D7FA               	bra	u5747
  8875   0028F8  0000               	nop	
  8876   0028FA                     
  8877                           ;color.c: 198:     (cCal->blue) = color_read_Blue();
  8878   0028FA  ECA4  F01E         	call	_color_read_Blue	;wreg free
  8879   0028FE  5045               	movf	calibration_routine@cCal^0,w,c
  8880   002900  6ED9               	movwf	fsr2l,c
  8881   002902  6ADA               	clrf	fsr2h,c
  8882   002904  0E04               	movlw	4
  8883   002906  26D9               	addwf	fsr2l,f,c
  8884   002908  C006  FFDE         	movff	?_color_read_Blue,postinc2
  8885   00290C  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  8886   002910                     
  8887                           ;color.c: 199:     LATAbits.LATA3 = 0;
  8888   002910  9679               	bcf	121,3,c	;volatile
  8889   002912                     
  8890                           ;color.c: 202:     sprintf(cal_state,"Calibration state =  white", ".");
  8891   002912  0E60               	movlw	low calibration_routine@cal_state
  8892   002914  6E32               	movwf	sprintf@s^0,c
  8893   002916  0E39               	movlw	low STR_7
  8894   002918  6E33               	movwf	sprintf@fmt^0,c
  8895   00291A  0EA6               	movlw	low STR_2
  8896   00291C  6E34               	movwf	(?_sprintf+2)^0,c
  8897   00291E  5034               	movf	(?_sprintf+2)^0,w,c
  8898   002920  A4D8               	btfss	status,2,c
  8899   002922  0E0E               	movlw	high __smallconst
  8900   002924  6E35               	movwf	(?_sprintf+3)^0,c
  8901   002926  ECC9  F020         	call	_sprintf	;wreg free
  8902   00292A                     
  8903                           ;color.c: 203:     sendStringSerial4(&cal_state);
  8904   00292A  0E60               	movlw	low calibration_routine@cal_state
  8905   00292C  6E03               	movwf	sendStringSerial4@string^0,c
  8906   00292E  EC7A  F021         	call	_sendStringSerial4	;wreg free
  8907   002932                     l105:
  8908                           
  8909                           ;color.c: 205:     while(PORTFbits.RF2 == 1){
  8910   002932  B48E               	btfsc	142,2,c	;volatile
  8911   002934  EF9E  F014         	goto	u5161
  8912   002938  EFA0  F014         	goto	u5160
  8913   00293C                     u5161:
  8914   00293C  EF99  F014         	goto	l105
  8915   002940                     u5160:
  8916   002940                     
  8917                           ;color.c: 208:     LATGbits.LATG0 = 1;
  8918   002940  807F               	bsf	127,0,c	;volatile
  8919                           
  8920                           ;color.c: 209:     LATEbits.LATE7 = 1;
  8921   002942  8E7D               	bsf	125,7,c	;volatile
  8922                           
  8923                           ;color.c: 210:     LATAbits.LATA3 = 1;
  8924   002944  8679               	bsf	121,3,c	;volatile
  8925   002946                     
  8926                           ;color.c: 211:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8927   002946  0E29               	movlw	41
  8928   002948  6E47               	movwf	(??_calibration_routine+1)^0,c
  8929   00294A  0E96               	movlw	150
  8930   00294C  6E46               	movwf	??_calibration_routine^0,c
  8931   00294E  0E7F               	movlw	127
  8932   002950                     u5757:
  8933   002950  2EE8               	decfsz	wreg,f,c
  8934   002952  D7FE               	bra	u5757
  8935   002954  2E46               	decfsz	??_calibration_routine^0,f,c
  8936   002956  D7FC               	bra	u5757
  8937   002958  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8938   00295A  D7FA               	bra	u5757
  8939   00295C  0000               	nop	
  8940   00295E                     
  8941                           ;color.c: 212:     (cCal->clear) = color_read_Clear();
  8942   00295E  EC7C  F01E         	call	_color_read_Clear	;wreg free
  8943   002962  5045               	movf	calibration_routine@cCal^0,w,c
  8944   002964  6ED9               	movwf	fsr2l,c
  8945   002966  6ADA               	clrf	fsr2h,c
  8946   002968  0E06               	movlw	6
  8947   00296A  26D9               	addwf	fsr2l,f,c
  8948   00296C  C006  FFDE         	movff	?_color_read_Clear,postinc2
  8949   002970  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  8950   002974                     
  8951                           ;color.c: 213:     LATGbits.LATG0 = 0;
  8952   002974  907F               	bcf	127,0,c	;volatile
  8953   002976                     
  8954                           ;color.c: 214:     LATEbits.LATE7 = 0;
  8955   002976  9E7D               	bcf	125,7,c	;volatile
  8956   002978                     
  8957                           ;color.c: 215:     LATAbits.LATA3 = 0;
  8958   002978  9679               	bcf	121,3,c	;volatile
  8959   00297A                     
  8960                           ;color.c: 219:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  8961   00297A  0E60               	movlw	low calibration_routine@cal_state
  8962   00297C  6E32               	movwf	sprintf@s^0,c
  8963   00297E  0E54               	movlw	low STR_9
  8964   002980  6E33               	movwf	sprintf@fmt^0,c
  8965   002982  0EA6               	movlw	low STR_2
  8966   002984  6E34               	movwf	(?_sprintf+2)^0,c
  8967   002986  5034               	movf	(?_sprintf+2)^0,w,c
  8968   002988  A4D8               	btfss	status,2,c
  8969   00298A  0E0E               	movlw	high __smallconst
  8970   00298C  6E35               	movwf	(?_sprintf+3)^0,c
  8971   00298E  ECC9  F020         	call	_sprintf	;wreg free
  8972   002992                     
  8973                           ;color.c: 220:     sendStringSerial4(&cal_state);
  8974   002992  0E60               	movlw	low calibration_routine@cal_state
  8975   002994  6E03               	movwf	sendStringSerial4@string^0,c
  8976   002996  EC7A  F021         	call	_sendStringSerial4	;wreg free
  8977   00299A                     l108:
  8978                           
  8979                           ;color.c: 222:     while(PORTFbits.RF2 == 1){
  8980   00299A  B48E               	btfsc	142,2,c	;volatile
  8981   00299C  EFD2  F014         	goto	u5171
  8982   0029A0  EFD4  F014         	goto	u5170
  8983   0029A4                     u5171:
  8984   0029A4  EFCD  F014         	goto	l108
  8985   0029A8                     u5170:
  8986   0029A8                     
  8987                           ;color.c: 225:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8988   0029A8  0E29               	movlw	41
  8989   0029AA  6E47               	movwf	(??_calibration_routine+1)^0,c
  8990   0029AC  0E96               	movlw	150
  8991   0029AE  6E46               	movwf	??_calibration_routine^0,c
  8992   0029B0  0E7F               	movlw	127
  8993   0029B2                     u5767:
  8994   0029B2  2EE8               	decfsz	wreg,f,c
  8995   0029B4  D7FE               	bra	u5767
  8996   0029B6  2E46               	decfsz	??_calibration_routine^0,f,c
  8997   0029B8  D7FC               	bra	u5767
  8998   0029BA  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8999   0029BC  D7FA               	bra	u5767
  9000   0029BE  0000               	nop	
  9001   0029C0  0012               	return		;funcret
  9002   0029C2                     __end_of_calibration_routine:
  9003                           	callstack 0
  9004                           
  9005 ;; *************** function _sprintf *****************
  9006 ;; Defined at:
  9007 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;  s               1   49[COMRAM] PTR unsigned char 
  9010 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  9011 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9012 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9013 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9014 ;; Auto vars:     Size  Location     Type
  9015 ;;  f              12   56[COMRAM] struct _IO_FILE
  9016 ;;  ret             2    0        int 
  9017 ;;  ap              1   55[COMRAM] PTR void [1]
  9018 ;;		 -> ?_sprintf(2), 
  9019 ;; Return value:  Size  Location     Type
  9020 ;;                  2   49[COMRAM] int 
  9021 ;; Registers used:
  9022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9028 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9029 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9031 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9032 ;;Total ram usage:       19 bytes
  9033 ;; Hardware stack levels used: 1
  9034 ;; Hardware stack levels required when called: 8
  9035 ;; This function calls:
  9036 ;;		_vfprintf
  9037 ;; This function is called by:
  9038 ;;		_calibration_routine
  9039 ;;		_send2USART
  9040 ;;		_ADC2String
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           	psect	text47
  9045   004192                     __ptext47:
  9046                           	callstack 0
  9047   004192                     _sprintf:
  9048                           	callstack 21
  9049   004192  0E34               	movlw	low (?_sprintf+2)
  9050   004194  6E38               	movwf	sprintf@ap^0,c
  9051   004196  C032  F039         	movff	sprintf@s,sprintf@f
  9052   00419A  0E00               	movlw	0
  9053   00419C  6E3D               	movwf	(sprintf@f+4)^0,c
  9054   00419E  0E00               	movlw	0
  9055   0041A0  6E3C               	movwf	(sprintf@f+3)^0,c
  9056   0041A2  0E00               	movlw	0
  9057   0041A4  6E44               	movwf	(sprintf@f+11)^0,c
  9058   0041A6  0E00               	movlw	0
  9059   0041A8  6E43               	movwf	(sprintf@f+10)^0,c
  9060   0041AA  0E39               	movlw	low sprintf@f
  9061   0041AC  6E2E               	movwf	vfprintf@fp^0,c
  9062   0041AE  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9063   0041B2  0E38               	movlw	low sprintf@ap
  9064   0041B4  6E30               	movwf	vfprintf@ap^0,c
  9065   0041B6  EC31  F020         	call	_vfprintf	;wreg free
  9066   0041BA  5032               	movf	sprintf@s^0,w,c
  9067   0041BC  243C               	addwf	(sprintf@f+3)^0,w,c
  9068   0041BE  6ED9               	movwf	fsr2l,c
  9069   0041C0  6ADA               	clrf	fsr2h,c
  9070   0041C2  6ADF               	clrf	indf2,c
  9071   0041C4  0012               	return		;funcret
  9072   0041C6                     __end_of_sprintf:
  9073                           	callstack 0
  9074                           
  9075 ;; *************** function _vfprintf *****************
  9076 ;; Defined at:
  9077 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9078 ;; Parameters:    Size  Location     Type
  9079 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9080 ;;		 -> sprintf@f(12), 
  9081 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9082 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9083 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9084 ;;  ap              1   47[COMRAM] PTR PTR void 
  9085 ;;		 -> sprintf@ap(1), 
  9086 ;; Auto vars:     Size  Location     Type
  9087 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9088 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9089 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9090 ;; Return value:  Size  Location     Type
  9091 ;;                  2   45[COMRAM] int 
  9092 ;; Registers used:
  9093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9094 ;; Tracked objects:
  9095 ;;		On entry : 0/0
  9096 ;;		On exit  : 0/0
  9097 ;;		Unchanged: 0/0
  9098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9099 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9102 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9103 ;;Total ram usage:        4 bytes
  9104 ;; Hardware stack levels used: 1
  9105 ;; Hardware stack levels required when called: 7
  9106 ;; This function calls:
  9107 ;;		_vfpfcnvrt
  9108 ;; This function is called by:
  9109 ;;		_sprintf
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           	psect	text48
  9114   004062                     __ptext48:
  9115                           	callstack 0
  9116   004062                     _vfprintf:
  9117                           	callstack 21
  9118   004062                     
  9119                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9120   004062  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9121                           
  9122                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9123   004066  EF3D  F020         	goto	l5463
  9124   00406A                     l5461:
  9125                           
  9126                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9127   00406A  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9128   00406E  0E31               	movlw	low vfprintf@cfmt
  9129   004070  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9130   004072  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9131   004076  ECBB  F015         	call	_vfpfcnvrt	;wreg free
  9132   00407A                     l5463:
  9133                           
  9134                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9135   00407A  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9136   00407E                     	if	1	;There is more than 1 active tblptr byte
  9137   00407E  0E0E               	movlw	high __smallconst
  9138   004080  6EF7               	movwf	tblptrh,c
  9139   004082                     	endif
  9140   004082                     	if	0	;tblptru may be non-zero
  9141   004082                     	endif
  9142   004082                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9143   004082  0E00               	movlw	low (__smallconst shr (0+16))
  9144   004084  6EF8               	movwf	tblptru,c
  9145   004086                     	endif
  9146   004086  0008               	tblrd		*
  9147   004088  50F5               	movf	tablat,w,c
  9148   00408A  0900               	iorlw	0
  9149   00408C  A4D8               	btfss	status,2,c
  9150   00408E  EF4B  F020         	goto	u4991
  9151   004092  EF4D  F020         	goto	u4990
  9152   004096                     u4991:
  9153   004096  EF35  F020         	goto	l5461
  9154   00409A                     u4990:
  9155   00409A                     
  9156                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9157   00409A  0E00               	movlw	0
  9158   00409C  6E2F               	movwf	(?_vfprintf+1)^0,c
  9159   00409E  0E00               	movlw	0
  9160   0040A0  6E2E               	movwf	?_vfprintf^0,c
  9161   0040A2  0012               	return		;funcret
  9162   0040A4                     __end_of_vfprintf:
  9163                           	callstack 0
  9164                           
  9165 ;; *************** function _vfpfcnvrt *****************
  9166 ;; Defined at:
  9167 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9168 ;; Parameters:    Size  Location     Type
  9169 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9170 ;;		 -> sprintf@f(12), 
  9171 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9172 ;;		 -> vfprintf@cfmt(1), 
  9173 ;;  ap              1   36[COMRAM] PTR PTR void 
  9174 ;;		 -> sprintf@ap(1), 
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;  convarg         4   39[COMRAM] struct .
  9177 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9178 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9179 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9180 ;;  done            1   43[COMRAM] _Bool 
  9181 ;;  c               1    0        unsigned char 
  9182 ;; Return value:  Size  Location     Type
  9183 ;;                  1    wreg      void 
  9184 ;; Registers used:
  9185 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9186 ;; Tracked objects:
  9187 ;;		On entry : 0/0
  9188 ;;		On exit  : 0/0
  9189 ;;		Unchanged: 0/0
  9190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9191 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9192 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9193 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9194 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9195 ;;Total ram usage:       11 bytes
  9196 ;; Hardware stack levels used: 1
  9197 ;; Hardware stack levels required when called: 6
  9198 ;; This function calls:
  9199 ;;		_dtoa
  9200 ;;		_fputc
  9201 ;;		_read_prec_or_width
  9202 ;; This function is called by:
  9203 ;;		_vfprintf
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           	psect	text49
  9208   002B76                     __ptext49:
  9209                           	callstack 0
  9210   002B76                     _vfpfcnvrt:
  9211                           	callstack 21
  9212   002B76                     
  9213                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9214   002B76  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9215   002B78  6ED9               	movwf	fsr2l,c
  9216   002B7A  6ADA               	clrf	fsr2h,c
  9217   002B7C  CFDF FFF6          	movff	indf2,tblptrl
  9218   002B80                     	if	1	;There is more than 1 active tblptr byte
  9219   002B80  0E0E               	movlw	high __smallconst
  9220   002B82  6EF7               	movwf	tblptrh,c
  9221   002B84                     	endif
  9222   002B84                     	if	0	;tblptru may be non-zero
  9223   002B84                     	endif
  9224   002B84                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9225   002B84  0E00               	movlw	low (__smallconst shr (0+16))
  9226   002B86  6EF8               	movwf	tblptru,c
  9227   002B88                     	endif
  9228   002B88  0008               	tblrd		*
  9229   002B8A  50F5               	movf	tablat,w,c
  9230   002B8C  0A25               	xorlw	37
  9231   002B8E  A4D8               	btfss	status,2,c
  9232   002B90  EFCC  F015         	goto	u4841
  9233   002B94  EFCE  F015         	goto	u4840
  9234   002B98                     u4841:
  9235   002B98  EF6B  F016         	goto	l5353
  9236   002B9C                     u4840:
  9237   002B9C                     
  9238                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9239   002B9C  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9240   002B9E  6ED9               	movwf	fsr2l,c
  9241   002BA0  6ADA               	clrf	fsr2h,c
  9242   002BA2  2ADF               	incf	indf2,f,c
  9243   002BA4                     
  9244                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9245   002BA4  0E00               	movlw	0
  9246   002BA6  0100               	movlb	0	; () banked
  9247   002BA8  6FC5               	movwf	(_width+1)& (0+255),b
  9248   002BAA  0E00               	movlw	0
  9249   002BAC  6FC4               	movwf	_width& (0+255),b
  9250   002BAE  C0C4  F0C8         	movff	_width,_flags
  9251   002BB2                     
  9252                           ; BSR set to: 0
  9253                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9254   002BB2  69C6               	setf	_prec& (0+255),b
  9255   002BB4  69C7               	setf	(_prec+1)& (0+255),b
  9256   002BB6                     
  9257                           ; BSR set to: 0
  9258                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9259   002BB6  0E00               	movlw	0
  9260   002BB8  6E2C               	movwf	vfpfcnvrt@done^0,c
  9261                           
  9262                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9263   002BBA  EF06  F016         	goto	l5327
  9264   002BBE                     l5317:
  9265                           
  9266                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9267   002BBE  0100               	movlb	0	; () banked
  9268   002BC0  83C8               	bsf	_flags& (0+255),1,b
  9269   002BC2                     
  9270                           ; BSR set to: 0
  9271                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9272   002BC2  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9273   002BC4  6ED9               	movwf	fsr2l,c
  9274   002BC6  6ADA               	clrf	fsr2h,c
  9275   002BC8  2ADF               	incf	indf2,f,c
  9276                           
  9277                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9278   002BCA  EF06  F016         	goto	l5327
  9279   002BCE                     l5321:
  9280                           
  9281                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9282   002BCE  0E01               	movlw	1
  9283   002BD0  6E2C               	movwf	vfpfcnvrt@done^0,c
  9284                           
  9285                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9286   002BD2  EF06  F016         	goto	l5327
  9287   002BD6                     l5325:
  9288   002BD6  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9289   002BD8  6ED9               	movwf	fsr2l,c
  9290   002BDA  6ADA               	clrf	fsr2h,c
  9291   002BDC  CFDF FFF6          	movff	indf2,tblptrl
  9292   002BE0                     	if	1	;There is more than 1 active tblptr byte
  9293   002BE0  0E0E               	movlw	high __smallconst
  9294   002BE2  6EF7               	movwf	tblptrh,c
  9295   002BE4                     	endif
  9296   002BE4                     	if	0	;tblptru may be non-zero
  9297   002BE4                     	endif
  9298   002BE4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9299   002BE4  0E00               	movlw	low (__smallconst shr (0+16))
  9300   002BE6  6EF8               	movwf	tblptru,c
  9301   002BE8                     	endif
  9302   002BE8  0008               	tblrd		*
  9303   002BEA  50F5               	movf	tablat,w,c
  9304   002BEC  6E26               	movwf	??_vfpfcnvrt^0,c
  9305   002BEE  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9306                           
  9307                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9308                           ; Switch size 1, requested type "simple"
  9309                           ; Number of cases is 1, Range of values is 0 to 0
  9310                           ; switch strategies available:
  9311                           ; Name         Instructions Cycles
  9312                           ; simple_byte            4     3 (average)
  9313                           ;	Chosen strategy is simple_byte
  9314   002BF0  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9315   002BF2  0A00               	xorlw	0	; case 0
  9316   002BF4  B4D8               	btfsc	status,2,c
  9317   002BF6  EFFF  F015         	goto	l6081
  9318   002BFA  EFE7  F015         	goto	l5321
  9319   002BFE                     l6081:
  9320                           
  9321                           ; Switch size 1, requested type "simple"
  9322                           ; Number of cases is 1, Range of values is 48 to 48
  9323                           ; switch strategies available:
  9324                           ; Name         Instructions Cycles
  9325                           ; simple_byte            4     3 (average)
  9326                           ;	Chosen strategy is simple_byte
  9327   002BFE  5026               	movf	??_vfpfcnvrt^0,w,c
  9328   002C00  0A30               	xorlw	48	; case 48
  9329   002C02  B4D8               	btfsc	status,2,c
  9330   002C04  EFDF  F015         	goto	l5317
  9331   002C08  EFE7  F015         	goto	l5321
  9332   002C0C                     l5327:
  9333                           
  9334                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9335   002C0C  502C               	movf	vfpfcnvrt@done^0,w,c
  9336   002C0E  B4D8               	btfsc	status,2,c
  9337   002C10  EF0C  F016         	goto	u4851
  9338   002C14  EF0E  F016         	goto	u4850
  9339   002C18                     u4851:
  9340   002C18  EFEB  F015         	goto	l5325
  9341   002C1C                     u4850:
  9342   002C1C                     
  9343                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9344   002C1C  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9345   002C20  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9346   002C24  ECEC  F01A         	call	_read_prec_or_width	;wreg free
  9347   002C28  C008  F0C4         	movff	?_read_prec_or_width,_width
  9348   002C2C  C009  F0C5         	movff	?_read_prec_or_width+1,_width+1
  9349   002C30                     
  9350                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9351   002C30  0100               	movlb	0	; () banked
  9352   002C32  BFC5               	btfsc	(_width+1)& (0+255),7,b
  9353   002C34  EF20  F016         	goto	u4860
  9354   002C38  EF1E  F016         	goto	u4861
  9355   002C3C                     u4861:
  9356   002C3C  EF25  F016         	goto	l5335
  9357   002C40                     u4860:
  9358   002C40                     
  9359                           ; BSR set to: 0
  9360                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9361   002C40  81C8               	bsf	_flags& (0+255),0,b
  9362                           
  9363                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9364   002C42  6DC4               	negf	_width& (0+255),b
  9365   002C44  1FC5               	comf	(_width+1)& (0+255),f,b
  9366   002C46  B0D8               	btfsc	status,0,c
  9367   002C48  2BC5               	incf	(_width+1)& (0+255),f,b
  9368   002C4A                     l5335:
  9369                           
  9370                           ; BSR set to: 0
  9371                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9372   002C4A  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9373   002C4C  6ED9               	movwf	fsr2l,c
  9374   002C4E  6ADA               	clrf	fsr2h,c
  9375   002C50  50DF               	movf	indf2,w,c
  9376   002C52  6E2D               	movwf	vfpfcnvrt@cp^0,c
  9377   002C54                     
  9378                           ; BSR set to: 0
  9379                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9380   002C54  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9381   002C58                     	if	1	;There is more than 1 active tblptr byte
  9382   002C58  0E0E               	movlw	high __smallconst
  9383   002C5A  6EF7               	movwf	tblptrh,c
  9384   002C5C                     	endif
  9385   002C5C                     	if	0	;tblptru may be non-zero
  9386   002C5C                     	endif
  9387   002C5C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9388   002C5C  0E00               	movlw	low (__smallconst shr (0+16))
  9389   002C5E  6EF8               	movwf	tblptru,c
  9390   002C60                     	endif
  9391   002C60  0008               	tblrd		*
  9392   002C62  50F5               	movf	tablat,w,c
  9393   002C64  0A64               	xorlw	100
  9394   002C66  B4D8               	btfsc	status,2,c
  9395   002C68  EF38  F016         	goto	u4871
  9396   002C6C  EF3A  F016         	goto	u4870
  9397   002C70                     u4871:
  9398   002C70  EF4A  F016         	goto	l5341
  9399   002C74                     u4870:
  9400   002C74                     
  9401                           ; BSR set to: 0
  9402   002C74  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9403   002C78                     	if	1	;There is more than 1 active tblptr byte
  9404   002C78  0E0E               	movlw	high __smallconst
  9405   002C7A  6EF7               	movwf	tblptrh,c
  9406   002C7C                     	endif
  9407   002C7C                     	if	0	;tblptru may be non-zero
  9408   002C7C                     	endif
  9409   002C7C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9410   002C7C  0E00               	movlw	low (__smallconst shr (0+16))
  9411   002C7E  6EF8               	movwf	tblptru,c
  9412   002C80                     	endif
  9413   002C80  0008               	tblrd		*
  9414   002C82  50F5               	movf	tablat,w,c
  9415   002C84  0A69               	xorlw	105
  9416   002C86  A4D8               	btfss	status,2,c
  9417   002C88  EF48  F016         	goto	u4881
  9418   002C8C  EF4A  F016         	goto	u4880
  9419   002C90                     u4881:
  9420   002C90  EF65  F016         	goto	l5349
  9421   002C94                     u4880:
  9422   002C94                     l5341:
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9426   002C94  5025               	movf	vfpfcnvrt@ap^0,w,c
  9427   002C96  6ED9               	movwf	fsr2l,c
  9428   002C98  6ADA               	clrf	fsr2h,c
  9429   002C9A  0E02               	movlw	2
  9430   002C9C  26DF               	addwf	indf2,f,c
  9431   002C9E  5CDF               	subwf	indf2,w,c
  9432   002CA0  6ED9               	movwf	fsr2l,c
  9433   002CA2  6ADA               	clrf	fsr2h,c
  9434   002CA4  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  9435   002CA8  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  9436   002CAC                     
  9437                           ; BSR set to: 0
  9438                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9439   002CAC  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9440   002CAE  6ED9               	movwf	fsr2l,c
  9441   002CB0  6ADA               	clrf	fsr2h,c
  9442   002CB2  282D               	incf	vfpfcnvrt@cp^0,w,c
  9443   002CB4  6EDF               	movwf	indf2,c
  9444   002CB6                     
  9445                           ; BSR set to: 0
  9446                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9447   002CB6  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
  9448   002CBA  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
  9449   002CBE  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9450   002CC2  EC7F  F016         	call	_dtoa	;wreg free
  9451   002CC6  EF7E  F016         	goto	l1413
  9452   002CCA                     l5349:
  9453                           
  9454                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9455   002CCA  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9456   002CCC  6ED9               	movwf	fsr2l,c
  9457   002CCE  6ADA               	clrf	fsr2h,c
  9458   002CD0  2ADF               	incf	indf2,f,c
  9459   002CD2  EF7E  F016         	goto	l1413
  9460   002CD6                     l5353:
  9461                           
  9462                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9463   002CD6  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9464   002CD8  6ED9               	movwf	fsr2l,c
  9465   002CDA  6ADA               	clrf	fsr2h,c
  9466   002CDC  CFDF FFF6          	movff	indf2,tblptrl
  9467   002CE0                     	if	1	;There is more than 1 active tblptr byte
  9468   002CE0  0E0E               	movlw	high __smallconst
  9469   002CE2  6EF7               	movwf	tblptrh,c
  9470   002CE4                     	endif
  9471   002CE4                     	if	0	;tblptru may be non-zero
  9472   002CE4                     	endif
  9473   002CE4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9474   002CE4  0E00               	movlw	low (__smallconst shr (0+16))
  9475   002CE6  6EF8               	movwf	tblptru,c
  9476   002CE8                     	endif
  9477   002CE8  0008               	tblrd		*
  9478   002CEA  50F5               	movf	tablat,w,c
  9479   002CEC  6E02               	movwf	fputc@c^0,c
  9480   002CEE  6A03               	clrf	(fputc@c+1)^0,c
  9481   002CF0  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
  9482   002CF4  EC98  F01B         	call	_fputc	;wreg free
  9483   002CF8  EF65  F016         	goto	l5349
  9484   002CFC                     l1413:
  9485   002CFC  0012               	return		;funcret
  9486   002CFE                     __end_of_vfpfcnvrt:
  9487                           	callstack 0
  9488                           
  9489 ;; *************** function _read_prec_or_width *****************
  9490 ;; Defined at:
  9491 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9492 ;; Parameters:    Size  Location     Type
  9493 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
  9494 ;;		 -> vfprintf@cfmt(1), 
  9495 ;;  ap              1    8[COMRAM] PTR PTR void [1]
  9496 ;;		 -> sprintf@ap(1), 
  9497 ;; Auto vars:     Size  Location     Type
  9498 ;;  c               1    9[COMRAM] unsigned char 
  9499 ;;  n               2   10[COMRAM] int 
  9500 ;; Return value:  Size  Location     Type
  9501 ;;                  2    7[COMRAM] int 
  9502 ;; Registers used:
  9503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9504 ;; Tracked objects:
  9505 ;;		On entry : 0/0
  9506 ;;		On exit  : 0/0
  9507 ;;		Unchanged: 0/0
  9508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9509 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9510 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9512 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9513 ;;Total ram usage:        5 bytes
  9514 ;; Hardware stack levels used: 1
  9515 ;; Hardware stack levels required when called: 2
  9516 ;; This function calls:
  9517 ;;		___wmul
  9518 ;; This function is called by:
  9519 ;;		_vfpfcnvrt
  9520 ;; This function uses a non-reentrant model
  9521 ;;
  9522                           
  9523                           	psect	text50
  9524   0035D8                     __ptext50:
  9525                           	callstack 0
  9526   0035D8                     _read_prec_or_width:
  9527                           	callstack 24
  9528   0035D8                     
  9529                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  9530   0035D8  0E00               	movlw	0
  9531   0035DA  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9532   0035DC  0E00               	movlw	0
  9533   0035DE  6E0B               	movwf	read_prec_or_width@n^0,c
  9534   0035E0                     
  9535                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  9536   0035E0  5008               	movf	read_prec_or_width@fmt^0,w,c
  9537   0035E2  6ED9               	movwf	fsr2l,c
  9538   0035E4  6ADA               	clrf	fsr2h,c
  9539   0035E6  CFDF FFF6          	movff	indf2,tblptrl
  9540   0035EA                     	if	1	;There is more than 1 active tblptr byte
  9541   0035EA  0E0E               	movlw	high __smallconst
  9542   0035EC  6EF7               	movwf	tblptrh,c
  9543   0035EE                     	endif
  9544   0035EE                     	if	0	;tblptru may be non-zero
  9545   0035EE                     	endif
  9546   0035EE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9547   0035EE  0E00               	movlw	low (__smallconst shr (0+16))
  9548   0035F0  6EF8               	movwf	tblptru,c
  9549   0035F2                     	endif
  9550   0035F2  0008               	tblrd		*
  9551   0035F4  50F5               	movf	tablat,w,c
  9552   0035F6  0A2A               	xorlw	42
  9553   0035F8  A4D8               	btfss	status,2,c
  9554   0035FA  EF01  F01B         	goto	u4801
  9555   0035FE  EF03  F01B         	goto	u4800
  9556   003602                     u4801:
  9557   003602  EF29  F01B         	goto	l5289
  9558   003606                     u4800:
  9559   003606                     
  9560                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  9561   003606  5008               	movf	read_prec_or_width@fmt^0,w,c
  9562   003608  6ED9               	movwf	fsr2l,c
  9563   00360A  6ADA               	clrf	fsr2h,c
  9564   00360C  2ADF               	incf	indf2,f,c
  9565   00360E                     
  9566                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  9567   00360E  5009               	movf	read_prec_or_width@ap^0,w,c
  9568   003610  6ED9               	movwf	fsr2l,c
  9569   003612  6ADA               	clrf	fsr2h,c
  9570   003614  0E02               	movlw	2
  9571   003616  26DF               	addwf	indf2,f,c
  9572   003618  5CDF               	subwf	indf2,w,c
  9573   00361A  6ED9               	movwf	fsr2l,c
  9574   00361C  6ADA               	clrf	fsr2h,c
  9575   00361E  CFDE F00B          	movff	postinc2,read_prec_or_width@n
  9576   003622  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
  9577                           
  9578                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  9579   003626  EF3E  F01B         	goto	l1394
  9580   00362A                     l5285:
  9581                           
  9582                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  9583   00362A  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
  9584   00362E  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  9585   003632  0E00               	movlw	0
  9586   003634  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  9587   003636  0E0A               	movlw	10
  9588   003638  6E04               	movwf	___wmul@multiplicand^0,c
  9589   00363A  EC04  F022         	call	___wmul	;wreg free
  9590   00363E  500A               	movf	read_prec_or_width@c^0,w,c
  9591   003640  2402               	addwf	?___wmul^0,w,c
  9592   003642  6E0B               	movwf	read_prec_or_width@n^0,c
  9593   003644  0E00               	movlw	0
  9594   003646  2003               	addwfc	(?___wmul+1)^0,w,c
  9595   003648  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9596   00364A                     
  9597                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  9598   00364A  5008               	movf	read_prec_or_width@fmt^0,w,c
  9599   00364C  6ED9               	movwf	fsr2l,c
  9600   00364E  6ADA               	clrf	fsr2h,c
  9601   003650  2ADF               	incf	indf2,f,c
  9602   003652                     l5289:
  9603                           
  9604                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  9605   003652  5008               	movf	read_prec_or_width@fmt^0,w,c
  9606   003654  6ED9               	movwf	fsr2l,c
  9607   003656  6ADA               	clrf	fsr2h,c
  9608   003658  CFDF FFF6          	movff	indf2,tblptrl
  9609   00365C                     	if	1	;There is more than 1 active tblptr byte
  9610   00365C  0E0E               	movlw	high __smallconst
  9611   00365E  6EF7               	movwf	tblptrh,c
  9612   003660                     	endif
  9613   003660                     	if	0	;tblptru may be non-zero
  9614   003660                     	endif
  9615   003660                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9616   003660  0E00               	movlw	low (__smallconst shr (0+16))
  9617   003662  6EF8               	movwf	tblptru,c
  9618   003664                     	endif
  9619   003664  0008               	tblrd		*
  9620   003666  50F5               	movf	tablat,w,c
  9621   003668  0FD0               	addlw	208
  9622   00366A  6E0A               	movwf	read_prec_or_width@c^0,c
  9623   00366C  0E09               	movlw	9
  9624   00366E  640A               	cpfsgt	read_prec_or_width@c^0,c
  9625   003670  EF3C  F01B         	goto	u4811
  9626   003674  EF3E  F01B         	goto	u4810
  9627   003678                     u4811:
  9628   003678  EF15  F01B         	goto	l5285
  9629   00367C                     u4810:
  9630   00367C                     l1394:
  9631                           
  9632                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  9633   00367C  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
  9634   003680  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  9635   003684  0012               	return		;funcret
  9636   003686                     __end_of_read_prec_or_width:
  9637                           	callstack 0
  9638                           
  9639 ;; *************** function ___wmul *****************
  9640 ;; Defined at:
  9641 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  9642 ;; Parameters:    Size  Location     Type
  9643 ;;  multiplier      2    1[COMRAM] unsigned int 
  9644 ;;  multiplicand    2    3[COMRAM] unsigned int 
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;  product         2    5[COMRAM] unsigned int 
  9647 ;; Return value:  Size  Location     Type
  9648 ;;                  2    1[COMRAM] unsigned int 
  9649 ;; Registers used:
  9650 ;;		wreg, status,2, status,0, prodl, prodh
  9651 ;; Tracked objects:
  9652 ;;		On entry : 0/0
  9653 ;;		On exit  : 0/0
  9654 ;;		Unchanged: 0/0
  9655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9656 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9659 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9660 ;;Total ram usage:        6 bytes
  9661 ;; Hardware stack levels used: 1
  9662 ;; Hardware stack levels required when called: 1
  9663 ;; This function calls:
  9664 ;;		Nothing
  9665 ;; This function is called by:
  9666 ;;		_setMotorPWM
  9667 ;;		_logAction
  9668 ;;		_read_prec_or_width
  9669 ;;		_ADC2String
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           	psect	text51
  9674   004408                     __ptext51:
  9675                           	callstack 0
  9676   004408                     ___wmul:
  9677                           	callstack 27
  9678   004408  5002               	movf	___wmul@multiplier^0,w,c
  9679   00440A  0204               	mulwf	___wmul@multiplicand^0,c
  9680   00440C  CFF3 F006          	movff	prodl,___wmul@product
  9681   004410  CFF4 F007          	movff	prodh,___wmul@product+1
  9682   004414  5002               	movf	___wmul@multiplier^0,w,c
  9683   004416  0205               	mulwf	(___wmul@multiplicand+1)^0,c
  9684   004418  50F3               	movf	243,w,c
  9685   00441A  2607               	addwf	(___wmul@product+1)^0,f,c
  9686   00441C  5003               	movf	(___wmul@multiplier+1)^0,w,c
  9687   00441E  0204               	mulwf	___wmul@multiplicand^0,c
  9688   004420  50F3               	movf	243,w,c
  9689   004422  2607               	addwf	(___wmul@product+1)^0,f,c
  9690   004424  C006  F002         	movff	___wmul@product,?___wmul
  9691   004428  C007  F003         	movff	___wmul@product+1,?___wmul+1
  9692   00442C  0012               	return		;funcret
  9693   00442E                     __end_of___wmul:
  9694                           	callstack 0
  9695                           
  9696 ;; *************** function _dtoa *****************
  9697 ;; Defined at:
  9698 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9699 ;; Parameters:    Size  Location     Type
  9700 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
  9701 ;;		 -> sprintf@f(12), 
  9702 ;;  d               2   24[COMRAM] int 
  9703 ;; Auto vars:     Size  Location     Type
  9704 ;;  i               2   32[COMRAM] int 
  9705 ;;  w               2   29[COMRAM] int 
  9706 ;;  s               1   31[COMRAM] unsigned char 
  9707 ;;  p               1   28[COMRAM] _Bool 
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  1    wreg      void 
  9710 ;; Registers used:
  9711 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9717 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9718 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9720 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9721 ;;Total ram usage:       11 bytes
  9722 ;; Hardware stack levels used: 1
  9723 ;; Hardware stack levels required when called: 5
  9724 ;; This function calls:
  9725 ;;		___awdiv
  9726 ;;		___awmod
  9727 ;;		_abs
  9728 ;;		_pad
  9729 ;; This function is called by:
  9730 ;;		_vfpfcnvrt
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           	psect	text52
  9735   002CFE                     __ptext52:
  9736                           	callstack 0
  9737   002CFE                     _dtoa:
  9738                           	callstack 21
  9739   002CFE                     
  9740                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  9741   002CFE  0E01               	movlw	1
  9742   002D00  6E1D               	movwf	dtoa@p^0,c
  9743   002D02                     
  9744                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  9745   002D02  BE1A               	btfsc	(dtoa@d+1)^0,7,c
  9746   002D04  EF86  F016         	goto	u4701
  9747   002D08  EF89  F016         	goto	u4700
  9748   002D0C                     u4701:
  9749   002D0C  0E01               	movlw	1
  9750   002D0E  EF8A  F016         	goto	u4710
  9751   002D12                     u4700:
  9752   002D12  0E00               	movlw	0
  9753   002D14                     u4710:
  9754   002D14  6E20               	movwf	dtoa@s^0,c
  9755   002D16                     
  9756                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  9757   002D16  C0C4  F01E         	movff	_width,dtoa@w
  9758   002D1A  C0C5  F01F         	movff	_width+1,dtoa@w+1
  9759   002D1E                     
  9760                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  9761   002D1E  5020               	movf	dtoa@s^0,w,c
  9762   002D20  B4D8               	btfsc	status,2,c
  9763   002D22  EF95  F016         	goto	u4721
  9764   002D26  EF97  F016         	goto	u4720
  9765   002D2A                     u4721:
  9766   002D2A  EFAE  F016         	goto	l1377
  9767   002D2E                     u4720:
  9768   002D2E                     
  9769                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  9770   002D2E  061E               	decf	dtoa@w^0,f,c
  9771   002D30  A0D8               	btfss	status,0,c
  9772   002D32  061F               	decf	(dtoa@w+1)^0,f,c
  9773   002D34                     
  9774                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  9775   002D34  5020               	movf	dtoa@s^0,w,c
  9776   002D36  A4D8               	btfss	status,2,c
  9777   002D38  EFA0  F016         	goto	u4731
  9778   002D3C  EFA2  F016         	goto	u4730
  9779   002D40                     u4731:
  9780   002D40  EFA8  F016         	goto	l5241
  9781   002D44                     u4730:
  9782   002D44  0E00               	movlw	0
  9783   002D46  6E1C               	movwf	(_dtoa$3045+1)^0,c
  9784   002D48  0E2B               	movlw	43
  9785   002D4A  6E1B               	movwf	_dtoa$3045^0,c
  9786   002D4C  EFAC  F016         	goto	l5243
  9787   002D50                     l5241:
  9788   002D50  0E00               	movlw	0
  9789   002D52  6E1C               	movwf	(_dtoa$3045+1)^0,c
  9790   002D54  0E2D               	movlw	45
  9791   002D56  6E1B               	movwf	_dtoa$3045^0,c
  9792   002D58                     l5243:
  9793   002D58  C01B  F020         	movff	_dtoa$3045,dtoa@s
  9794   002D5C                     l1377:
  9795                           
  9796                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  9797   002D5C  0E00               	movlw	0
  9798   002D5E  6E22               	movwf	(dtoa@i+1)^0,c
  9799   002D60  0E1F               	movlw	31
  9800   002D62  6E21               	movwf	dtoa@i^0,c
  9801   002D64                     
  9802                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  9803   002D64  0E00               	movlw	0
  9804   002D66  0101               	movlb	1	; () banked
  9805   002D68  6F83               	movwf	(_dbuf+31)& (0+255),b
  9806                           
  9807                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9808   002D6A  EFE6  F016         	goto	l5257
  9809   002D6E                     l5247:
  9810                           
  9811                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  9812   002D6E  0621               	decf	dtoa@i^0,f,c
  9813   002D70  A0D8               	btfss	status,0,c
  9814   002D72  0622               	decf	(dtoa@i+1)^0,f,c
  9815   002D74                     
  9816                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  9817   002D74  0E64               	movlw	low _dbuf
  9818   002D76  2421               	addwf	dtoa@i^0,w,c
  9819   002D78  6ED9               	movwf	fsr2l,c
  9820   002D7A  0E01               	movlw	high _dbuf
  9821   002D7C  2022               	addwfc	(dtoa@i+1)^0,w,c
  9822   002D7E  6EDA               	movwf	fsr2h,c
  9823   002D80  C019  F002         	movff	dtoa@d,___awmod@dividend
  9824   002D84  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
  9825   002D88  0E00               	movlw	0
  9826   002D8A  6E05               	movwf	(___awmod@divisor+1)^0,c
  9827   002D8C  0E0A               	movlw	10
  9828   002D8E  6E04               	movwf	___awmod@divisor^0,c
  9829   002D90  EC94  F01A         	call	___awmod	;wreg free
  9830   002D94  C002  F008         	movff	?___awmod,abs@a
  9831   002D98  C003  F009         	movff	?___awmod+1,abs@a+1
  9832   002D9C  ECE3  F020         	call	_abs	;wreg free
  9833   002DA0  5008               	movf	?_abs^0,w,c
  9834   002DA2  0F30               	addlw	48
  9835   002DA4  6EDF               	movwf	indf2,c
  9836   002DA6                     
  9837                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  9838   002DA6  0E00               	movlw	0
  9839   002DA8  6E1D               	movwf	dtoa@p^0,c
  9840   002DAA                     
  9841                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  9842   002DAA  061E               	decf	dtoa@w^0,f,c
  9843   002DAC  A0D8               	btfss	status,0,c
  9844   002DAE  061F               	decf	(dtoa@w+1)^0,f,c
  9845   002DB0                     
  9846                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  9847   002DB0  C019  F002         	movff	dtoa@d,___awdiv@dividend
  9848   002DB4  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
  9849   002DB8  0E00               	movlw	0
  9850   002DBA  6E05               	movwf	(___awdiv@divisor+1)^0,c
  9851   002DBC  0E0A               	movlw	10
  9852   002DBE  6E04               	movwf	___awdiv@divisor^0,c
  9853   002DC0  ECD2  F019         	call	___awdiv	;wreg free
  9854   002DC4  C002  F019         	movff	?___awdiv,dtoa@d
  9855   002DC8  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
  9856   002DCC                     l5257:
  9857                           
  9858                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9859   002DCC  BE22               	btfsc	(dtoa@i+1)^0,7,c
  9860   002DCE  EFF1  F016         	goto	u4741
  9861   002DD2  5022               	movf	(dtoa@i+1)^0,w,c
  9862   002DD4  E108               	bnz	u4740
  9863   002DD6  0421               	decf	dtoa@i^0,w,c
  9864   002DD8  A0D8               	btfss	status,0,c
  9865   002DDA  EFF1  F016         	goto	u4741
  9866   002DDE  EFF3  F016         	goto	u4740
  9867   002DE2                     u4741:
  9868   002DE2  EF19  F017         	goto	l5267
  9869   002DE6                     u4740:
  9870   002DE6  5019               	movf	dtoa@d^0,w,c
  9871   002DE8  101A               	iorwf	(dtoa@d+1)^0,w,c
  9872   002DEA  A4D8               	btfss	status,2,c
  9873   002DEC  EFFA  F016         	goto	u4751
  9874   002DF0  EFFC  F016         	goto	u4750
  9875   002DF4                     u4751:
  9876   002DF4  EFB7  F016         	goto	l5247
  9877   002DF8                     u4750:
  9878   002DF8  501D               	movf	dtoa@p^0,w,c
  9879   002DFA  A4D8               	btfss	status,2,c
  9880   002DFC  EF02  F017         	goto	u4761
  9881   002E00  EF04  F017         	goto	u4760
  9882   002E04                     u4761:
  9883   002E04  EFB7  F016         	goto	l5247
  9884   002E08                     u4760:
  9885   002E08  BE1F               	btfsc	(dtoa@w+1)^0,7,c
  9886   002E0A  EF0F  F017         	goto	u4771
  9887   002E0E  501F               	movf	(dtoa@w+1)^0,w,c
  9888   002E10  E108               	bnz	u4770
  9889   002E12  041E               	decf	dtoa@w^0,w,c
  9890   002E14  A0D8               	btfss	status,0,c
  9891   002E16  EF0F  F017         	goto	u4771
  9892   002E1A  EF11  F017         	goto	u4770
  9893   002E1E                     u4771:
  9894   002E1E  EF19  F017         	goto	l5267
  9895   002E22                     u4770:
  9896   002E22  0100               	movlb	0	; () banked
  9897   002E24  B3C8               	btfsc	_flags& (0+255),1,b
  9898   002E26  EF17  F017         	goto	u4781
  9899   002E2A  EF19  F017         	goto	u4780
  9900   002E2E                     u4781:
  9901   002E2E  EFB7  F016         	goto	l5247
  9902   002E32                     u4780:
  9903   002E32                     l5267:
  9904                           
  9905                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  9906   002E32  5020               	movf	dtoa@s^0,w,c
  9907   002E34  B4D8               	btfsc	status,2,c
  9908   002E36  EF1F  F017         	goto	u4791
  9909   002E3A  EF21  F017         	goto	u4790
  9910   002E3E                     u4791:
  9911   002E3E  EF2C  F017         	goto	l5273
  9912   002E42                     u4790:
  9913   002E42                     
  9914                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  9915   002E42  0621               	decf	dtoa@i^0,f,c
  9916   002E44  A0D8               	btfss	status,0,c
  9917   002E46  0622               	decf	(dtoa@i+1)^0,f,c
  9918   002E48                     
  9919                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  9920   002E48  0E64               	movlw	low _dbuf
  9921   002E4A  2421               	addwf	dtoa@i^0,w,c
  9922   002E4C  6ED9               	movwf	fsr2l,c
  9923   002E4E  0E01               	movlw	high _dbuf
  9924   002E50  2022               	addwfc	(dtoa@i+1)^0,w,c
  9925   002E52  6EDA               	movwf	fsr2h,c
  9926   002E54  C020  FFDF         	movff	dtoa@s,indf2
  9927   002E58                     l5273:
  9928                           
  9929                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  9930   002E58  C018  F010         	movff	dtoa@fp,pad@fp
  9931   002E5C  0E64               	movlw	low _dbuf
  9932   002E5E  2421               	addwf	dtoa@i^0,w,c
  9933   002E60  6E11               	movwf	pad@buf^0,c
  9934   002E62  0E01               	movlw	high _dbuf
  9935   002E64  2022               	addwfc	(dtoa@i+1)^0,w,c
  9936   002E66  6E12               	movwf	(pad@buf+1)^0,c
  9937   002E68  C01E  F013         	movff	dtoa@w,pad@p
  9938   002E6C  C01F  F014         	movff	dtoa@w+1,pad@p+1
  9939   002E70  ECED  F01B         	call	_pad	;wreg free
  9940   002E74  0012               	return		;funcret
  9941   002E76                     __end_of_dtoa:
  9942                           	callstack 0
  9943                           
  9944 ;; *************** function _pad *****************
  9945 ;; Defined at:
  9946 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
  9949 ;;		 -> sprintf@f(12), 
  9950 ;;  buf             2   16[COMRAM] PTR unsigned char 
  9951 ;;		 -> dbuf(32), 
  9952 ;;  p               2   18[COMRAM] int 
  9953 ;; Auto vars:     Size  Location     Type
  9954 ;;  i               2   21[COMRAM] int 
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  1    wreg      void 
  9957 ;; Registers used:
  9958 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9964 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9966 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9967 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9968 ;;Total ram usage:        8 bytes
  9969 ;; Hardware stack levels used: 1
  9970 ;; Hardware stack levels required when called: 4
  9971 ;; This function calls:
  9972 ;;		_fputc
  9973 ;;		_fputs
  9974 ;; This function is called by:
  9975 ;;		_dtoa
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           	psect	text53
  9980   0037DA                     __ptext53:
  9981                           	callstack 0
  9982   0037DA                     _pad:
  9983                           	callstack 21
  9984   0037DA                     
  9985                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  9986   0037DA  0100               	movlb	0	; () banked
  9987   0037DC  A1C8               	btfss	_flags& (0+255),0,b
  9988   0037DE  EFF3  F01B         	goto	u4651
  9989   0037E2  EFF5  F01B         	goto	u4650
  9990   0037E6                     u4651:
  9991   0037E6  EFFD  F01B         	goto	l5211
  9992   0037EA                     u4650:
  9993   0037EA                     
  9994                           ; BSR set to: 0
  9995                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  9996   0037EA  C011  F00A         	movff	pad@buf,fputs@s
  9997   0037EE  C012  F00B         	movff	pad@buf+1,fputs@s+1
  9998   0037F2  C010  F00C         	movff	pad@fp,fputs@fp
  9999   0037F6  EC73  F020         	call	_fputs	;wreg free
 10000   0037FA                     l5211:
 10001                           
 10002                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10003   0037FA  BE14               	btfsc	(pad@p+1)^0,7,c
 10004   0037FC  EF04  F01C         	goto	u4660
 10005   003800  EF02  F01C         	goto	u4661
 10006   003804                     u4661:
 10007   003804  EF08  F01C         	goto	l1369
 10008   003808                     u4660:
 10009   003808                     
 10010                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10011   003808  0E00               	movlw	0
 10012   00380A  6E14               	movwf	(pad@p+1)^0,c
 10013   00380C  0E00               	movlw	0
 10014   00380E  6E13               	movwf	pad@p^0,c
 10015   003810                     l1369:
 10016                           
 10017                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10018   003810  0E00               	movlw	0
 10019   003812  6E17               	movwf	(pad@i+1)^0,c
 10020   003814  0E00               	movlw	0
 10021   003816  6E16               	movwf	pad@i^0,c
 10022                           
 10023                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10024   003818  EF18  F01C         	goto	l5219
 10025   00381C                     l5215:
 10026                           
 10027                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10028   00381C  0E00               	movlw	0
 10029   00381E  6E03               	movwf	(fputc@c+1)^0,c
 10030   003820  0E20               	movlw	32
 10031   003822  6E02               	movwf	fputc@c^0,c
 10032   003824  C010  F004         	movff	pad@fp,fputc@fp
 10033   003828  EC98  F01B         	call	_fputc	;wreg free
 10034   00382C                     
 10035                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10036   00382C  4A16               	infsnz	pad@i^0,f,c
 10037   00382E  2A17               	incf	(pad@i+1)^0,f,c
 10038   003830                     l5219:
 10039                           
 10040                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10041   003830  5013               	movf	pad@p^0,w,c
 10042   003832  5C16               	subwf	pad@i^0,w,c
 10043   003834  5017               	movf	(pad@i+1)^0,w,c
 10044   003836  0A80               	xorlw	128
 10045   003838  6E15               	movwf	??_pad^0,c
 10046   00383A  5014               	movf	(pad@p+1)^0,w,c
 10047   00383C  0A80               	xorlw	128
 10048   00383E  5815               	subwfb	??_pad^0,w,c
 10049   003840  A0D8               	btfss	status,0,c
 10050   003842  EF25  F01C         	goto	u4671
 10051   003846  EF27  F01C         	goto	u4670
 10052   00384A                     u4671:
 10053   00384A  EF0E  F01C         	goto	l5215
 10054   00384E                     u4670:
 10055   00384E                     
 10056                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10057   00384E  0100               	movlb	0	; () banked
 10058   003850  B1C8               	btfsc	_flags& (0+255),0,b
 10059   003852  EF2D  F01C         	goto	u4681
 10060   003856  EF2F  F01C         	goto	u4680
 10061   00385A                     u4681:
 10062   00385A  EF37  F01C         	goto	l1374
 10063   00385E                     u4680:
 10064   00385E                     
 10065                           ; BSR set to: 0
 10066                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10067   00385E  C011  F00A         	movff	pad@buf,fputs@s
 10068   003862  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10069   003866  C010  F00C         	movff	pad@fp,fputs@fp
 10070   00386A  EC73  F020         	call	_fputs	;wreg free
 10071   00386E                     l1374:
 10072   00386E  0012               	return		;funcret
 10073   003870                     __end_of_pad:
 10074                           	callstack 0
 10075                           
 10076 ;; *************** function _fputs *****************
 10077 ;; Defined at:
 10078 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10079 ;; Parameters:    Size  Location     Type
 10080 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10081 ;;		 -> dbuf(32), 
 10082 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10083 ;;		 -> sprintf@f(12), 
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;  i               2   13[COMRAM] int 
 10086 ;;  c               1   12[COMRAM] unsigned char 
 10087 ;; Return value:  Size  Location     Type
 10088 ;;                  2    9[COMRAM] int 
 10089 ;; Registers used:
 10090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10096 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10097 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10099 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10100 ;;Total ram usage:        6 bytes
 10101 ;; Hardware stack levels used: 1
 10102 ;; Hardware stack levels required when called: 3
 10103 ;; This function calls:
 10104 ;;		_fputc
 10105 ;; This function is called by:
 10106 ;;		_pad
 10107 ;; This function uses a non-reentrant model
 10108 ;;
 10109                           
 10110                           	psect	text54
 10111   0040E6                     __ptext54:
 10112                           	callstack 0
 10113   0040E6                     _fputs:
 10114                           	callstack 21
 10115   0040E6  0E00               	movlw	0
 10116   0040E8  6E0F               	movwf	(fputs@i+1)^0,c
 10117   0040EA  0E00               	movlw	0
 10118   0040EC  6E0E               	movwf	fputs@i^0,c
 10119   0040EE  EF82  F020         	goto	l5119
 10120   0040F2                     l5115:
 10121   0040F2  C00D  F002         	movff	fputs@c,fputc@c
 10122   0040F6  6A03               	clrf	(fputc@c+1)^0,c
 10123   0040F8  C00C  F004         	movff	fputs@fp,fputc@fp
 10124   0040FC  EC98  F01B         	call	_fputc	;wreg free
 10125   004100  4A0E               	infsnz	fputs@i^0,f,c
 10126   004102  2A0F               	incf	(fputs@i+1)^0,f,c
 10127   004104                     l5119:
 10128   004104  500E               	movf	fputs@i^0,w,c
 10129   004106  240A               	addwf	fputs@s^0,w,c
 10130   004108  6ED9               	movwf	fsr2l,c
 10131   00410A  500F               	movf	(fputs@i+1)^0,w,c
 10132   00410C  200B               	addwfc	(fputs@s+1)^0,w,c
 10133   00410E  6EDA               	movwf	fsr2h,c
 10134   004110  50DF               	movf	indf2,w,c
 10135   004112  6E0D               	movwf	fputs@c^0,c
 10136   004114  500D               	movf	fputs@c^0,w,c
 10137   004116  A4D8               	btfss	status,2,c
 10138   004118  EF90  F020         	goto	u4521
 10139   00411C  EF92  F020         	goto	u4520
 10140   004120                     u4521:
 10141   004120  EF79  F020         	goto	l5115
 10142   004124                     u4520:
 10143   004124  0012               	return		;funcret
 10144   004126                     __end_of_fputs:
 10145                           	callstack 0
 10146                           
 10147 ;; *************** function _fputc *****************
 10148 ;; Defined at:
 10149 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10150 ;; Parameters:    Size  Location     Type
 10151 ;;  c               2    1[COMRAM] int 
 10152 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10153 ;;		 -> sprintf@f(12), 
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;		None
 10156 ;; Return value:  Size  Location     Type
 10157 ;;                  2    1[COMRAM] int 
 10158 ;; Registers used:
 10159 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10160 ;; Tracked objects:
 10161 ;;		On entry : 0/0
 10162 ;;		On exit  : 0/0
 10163 ;;		Unchanged: 0/0
 10164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10165 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10167 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10168 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10169 ;;Total ram usage:        8 bytes
 10170 ;; Hardware stack levels used: 1
 10171 ;; Hardware stack levels required when called: 2
 10172 ;; This function calls:
 10173 ;;		_putch
 10174 ;; This function is called by:
 10175 ;;		_pad
 10176 ;;		_vfpfcnvrt
 10177 ;;		_fputs
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           	psect	text55
 10182   003730                     __ptext55:
 10183                           	callstack 0
 10184   003730                     _fputc:
 10185                           	callstack 24
 10186   003730  5004               	movf	fputc@fp^0,w,c
 10187   003732  B4D8               	btfsc	status,2,c
 10188   003734  EF9E  F01B         	goto	u4481
 10189   003738  EFA0  F01B         	goto	u4480
 10190   00373C                     u4481:
 10191   00373C  EFA8  F01B         	goto	l5103
 10192   003740                     u4480:
 10193   003740  5004               	movf	fputc@fp^0,w,c
 10194   003742  A4D8               	btfss	status,2,c
 10195   003744  EFA6  F01B         	goto	u4491
 10196   003748  EFA8  F01B         	goto	u4490
 10197   00374C                     u4491:
 10198   00374C  EFAD  F01B         	goto	l5105
 10199   003750                     u4490:
 10200   003750                     l5103:
 10201   003750  5002               	movf	fputc@c^0,w,c
 10202   003752  EC84  F022         	call	_putch
 10203   003756  EFEC  F01B         	goto	l1438
 10204   00375A                     l5105:
 10205   00375A  5004               	movf	fputc@fp^0,w,c
 10206   00375C  6ED9               	movwf	fsr2l,c
 10207   00375E  6ADA               	clrf	fsr2h,c
 10208   003760  0E0A               	movlw	10
 10209   003762  26D9               	addwf	fsr2l,f,c
 10210   003764  50DE               	movf	postinc2,w,c
 10211   003766  10DE               	iorwf	postinc2,w,c
 10212   003768  B4D8               	btfsc	status,2,c
 10213   00376A  EFB9  F01B         	goto	u4501
 10214   00376E  EFBB  F01B         	goto	u4500
 10215   003772                     u4501:
 10216   003772  EFD4  F01B         	goto	l5109
 10217   003776                     u4500:
 10218   003776  5004               	movf	fputc@fp^0,w,c
 10219   003778  6ED9               	movwf	fsr2l,c
 10220   00377A  6ADA               	clrf	fsr2h,c
 10221   00377C  0E0A               	movlw	10
 10222   00377E  26D9               	addwf	fsr2l,f,c
 10223   003780  5004               	movf	fputc@fp^0,w,c
 10224   003782  6EE1               	movwf	fsr1l,c
 10225   003784  6AE2               	clrf	fsr1h,c
 10226   003786  0E03               	movlw	3
 10227   003788  26E1               	addwf	fsr1l,f,c
 10228   00378A  50DE               	movf	postinc2,w,c
 10229   00378C  5CE6               	subwf	postinc1,w,c
 10230   00378E  50E6               	movf	postinc1,w,c
 10231   003790  0A80               	xorlw	128
 10232   003792  6E09               	movwf	(??_fputc+4)^0,c
 10233   003794  50DE               	movf	postinc2,w,c
 10234   003796  0A80               	xorlw	128
 10235   003798  5809               	subwfb	(??_fputc+4)^0,w,c
 10236   00379A  B0D8               	btfsc	status,0,c
 10237   00379C  EFD2  F01B         	goto	u4511
 10238   0037A0  EFD4  F01B         	goto	u4510
 10239   0037A4                     u4511:
 10240   0037A4  EFEC  F01B         	goto	l1438
 10241   0037A8                     u4510:
 10242   0037A8                     l5109:
 10243   0037A8  5004               	movf	fputc@fp^0,w,c
 10244   0037AA  6ED9               	movwf	fsr2l,c
 10245   0037AC  6ADA               	clrf	fsr2h,c
 10246   0037AE  0E03               	movlw	3
 10247   0037B0  26D9               	addwf	fsr2l,f,c
 10248   0037B2  50DF               	movf	indf2,w,c
 10249   0037B4  6E05               	movwf	??_fputc^0,c
 10250   0037B6  5004               	movf	fputc@fp^0,w,c
 10251   0037B8  6ED9               	movwf	fsr2l,c
 10252   0037BA  6ADA               	clrf	fsr2h,c
 10253   0037BC  50DF               	movf	indf2,w,c
 10254   0037BE  2405               	addwf	??_fputc^0,w,c
 10255   0037C0  6ED9               	movwf	fsr2l,c
 10256   0037C2  6ADA               	clrf	fsr2h,c
 10257   0037C4  C002  FFDF         	movff	fputc@c,indf2
 10258   0037C8  5004               	movf	fputc@fp^0,w,c
 10259   0037CA  6ED9               	movwf	fsr2l,c
 10260   0037CC  6ADA               	clrf	fsr2h,c
 10261   0037CE  0E03               	movlw	3
 10262   0037D0  26D9               	addwf	fsr2l,f,c
 10263   0037D2  2ADE               	incf	postinc2,f,c
 10264   0037D4  0E00               	movlw	0
 10265   0037D6  22DD               	addwfc	postdec2,f,c
 10266   0037D8                     l1438:
 10267   0037D8  0012               	return		;funcret
 10268   0037DA                     __end_of_fputc:
 10269                           	callstack 0
 10270                           
 10271 ;; *************** function _putch *****************
 10272 ;; Defined at:
 10273 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10274 ;; Parameters:    Size  Location     Type
 10275 ;;  c               1    wreg     unsigned char 
 10276 ;; Auto vars:     Size  Location     Type
 10277 ;;  c               1    0[COMRAM] unsigned char 
 10278 ;; Return value:  Size  Location     Type
 10279 ;;                  1    wreg      void 
 10280 ;; Registers used:
 10281 ;;		wreg
 10282 ;; Tracked objects:
 10283 ;;		On entry : 0/0
 10284 ;;		On exit  : 0/0
 10285 ;;		Unchanged: 0/0
 10286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10291 ;;Total ram usage:        0 bytes
 10292 ;; Hardware stack levels used: 1
 10293 ;; Hardware stack levels required when called: 1
 10294 ;; This function calls:
 10295 ;;		Nothing
 10296 ;; This function is called by:
 10297 ;;		_fputc
 10298 ;; This function uses a non-reentrant model
 10299 ;;
 10300                           
 10301                           	psect	text56
 10302   004508                     __ptext56:
 10303                           	callstack 0
 10304   004508                     _putch:
 10305                           	callstack 24
 10306   004508  0012               	return		;funcret
 10307   00450A                     __end_of_putch:
 10308                           	callstack 0
 10309                           
 10310 ;; *************** function _abs *****************
 10311 ;; Defined at:
 10312 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10313 ;; Parameters:    Size  Location     Type
 10314 ;;  a               2    7[COMRAM] int 
 10315 ;; Auto vars:     Size  Location     Type
 10316 ;;		None
 10317 ;; Return value:  Size  Location     Type
 10318 ;;                  2    7[COMRAM] int 
 10319 ;; Registers used:
 10320 ;;		wreg, status,2, status,0
 10321 ;; Tracked objects:
 10322 ;;		On entry : 0/0
 10323 ;;		On exit  : 0/0
 10324 ;;		Unchanged: 0/0
 10325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10329 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10330 ;;Total ram usage:        4 bytes
 10331 ;; Hardware stack levels used: 1
 10332 ;; Hardware stack levels required when called: 1
 10333 ;; This function calls:
 10334 ;;		Nothing
 10335 ;; This function is called by:
 10336 ;;		_dtoa
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           	psect	text57
 10341   0041C6                     __ptext57:
 10342                           	callstack 0
 10343   0041C6                     _abs:
 10344                           	callstack 24
 10345   0041C6  BE09               	btfsc	(abs@a+1)^0,7,c
 10346   0041C8  EFE8  F020         	goto	u4691
 10347   0041CC  EFEA  F020         	goto	u4690
 10348   0041D0                     u4691:
 10349   0041D0  EFF0  F020         	goto	l1423
 10350   0041D4                     u4690:
 10351   0041D4  C008  F008         	movff	abs@a,?_abs
 10352   0041D8  C009  F009         	movff	abs@a+1,?_abs+1
 10353   0041DC  EFFC  F020         	goto	l1426
 10354   0041E0                     l1423:
 10355   0041E0  C008  F00A         	movff	abs@a,??_abs
 10356   0041E4  C009  F00B         	movff	abs@a+1,??_abs+1
 10357   0041E8  1E0A               	comf	??_abs^0,f,c
 10358   0041EA  1E0B               	comf	(??_abs+1)^0,f,c
 10359   0041EC  4A0A               	infsnz	??_abs^0,f,c
 10360   0041EE  2A0B               	incf	(??_abs+1)^0,f,c
 10361   0041F0  C00A  F008         	movff	??_abs,?_abs
 10362   0041F4  C00B  F009         	movff	??_abs+1,?_abs+1
 10363   0041F8                     l1426:
 10364   0041F8  0012               	return		;funcret
 10365   0041FA                     __end_of_abs:
 10366                           	callstack 0
 10367                           
 10368 ;; *************** function ___awmod *****************
 10369 ;; Defined at:
 10370 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10371 ;; Parameters:    Size  Location     Type
 10372 ;;  dividend        2    1[COMRAM] int 
 10373 ;;  divisor         2    3[COMRAM] int 
 10374 ;; Auto vars:     Size  Location     Type
 10375 ;;  sign            1    6[COMRAM] unsigned char 
 10376 ;;  counter         1    5[COMRAM] unsigned char 
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  2    1[COMRAM] int 
 10379 ;; Registers used:
 10380 ;;		wreg, status,2, status,0
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10386 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10387 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10389 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10390 ;;Total ram usage:        6 bytes
 10391 ;; Hardware stack levels used: 1
 10392 ;; Hardware stack levels required when called: 1
 10393 ;; This function calls:
 10394 ;;		Nothing
 10395 ;; This function is called by:
 10396 ;;		_dtoa
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           	psect	text58
 10401   003528                     __ptext58:
 10402                           	callstack 0
 10403   003528                     ___awmod:
 10404                           	callstack 24
 10405   003528  0E00               	movlw	0
 10406   00352A  6E07               	movwf	___awmod@sign^0,c
 10407   00352C  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 10408   00352E  EF9D  F01A         	goto	u4590
 10409   003532  EF9B  F01A         	goto	u4591
 10410   003536                     u4591:
 10411   003536  EFA3  F01A         	goto	l5179
 10412   00353A                     u4590:
 10413   00353A  6C02               	negf	___awmod@dividend^0,c
 10414   00353C  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10415   00353E  B0D8               	btfsc	status,0,c
 10416   003540  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10417   003542  0E01               	movlw	1
 10418   003544  6E07               	movwf	___awmod@sign^0,c
 10419   003546                     l5179:
 10420   003546  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 10421   003548  EFAA  F01A         	goto	u4600
 10422   00354C  EFA8  F01A         	goto	u4601
 10423   003550                     u4601:
 10424   003550  EFAE  F01A         	goto	l5183
 10425   003554                     u4600:
 10426   003554  6C04               	negf	___awmod@divisor^0,c
 10427   003556  1E05               	comf	(___awmod@divisor+1)^0,f,c
 10428   003558  B0D8               	btfsc	status,0,c
 10429   00355A  2A05               	incf	(___awmod@divisor+1)^0,f,c
 10430   00355C                     l5183:
 10431   00355C  5004               	movf	___awmod@divisor^0,w,c
 10432   00355E  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 10433   003560  B4D8               	btfsc	status,2,c
 10434   003562  EFB5  F01A         	goto	u4611
 10435   003566  EFB7  F01A         	goto	u4610
 10436   00356A                     u4611:
 10437   00356A  EFDB  F01A         	goto	l5199
 10438   00356E                     u4610:
 10439   00356E  0E01               	movlw	1
 10440   003570  6E06               	movwf	___awmod@counter^0,c
 10441   003572  EFBF  F01A         	goto	l5189
 10442   003576                     l5187:
 10443   003576  90D8               	bcf	status,0,c
 10444   003578  3604               	rlcf	___awmod@divisor^0,f,c
 10445   00357A  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 10446   00357C  2A06               	incf	___awmod@counter^0,f,c
 10447   00357E                     l5189:
 10448   00357E  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 10449   003580  EFC4  F01A         	goto	u4621
 10450   003584  EFC6  F01A         	goto	u4620
 10451   003588                     u4621:
 10452   003588  EFBB  F01A         	goto	l5187
 10453   00358C                     u4620:
 10454   00358C                     l5191:
 10455   00358C  5004               	movf	___awmod@divisor^0,w,c
 10456   00358E  5C02               	subwf	___awmod@dividend^0,w,c
 10457   003590  5005               	movf	(___awmod@divisor+1)^0,w,c
 10458   003592  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 10459   003594  A0D8               	btfss	status,0,c
 10460   003596  EFCF  F01A         	goto	u4631
 10461   00359A  EFD1  F01A         	goto	u4630
 10462   00359E                     u4631:
 10463   00359E  EFD5  F01A         	goto	l5195
 10464   0035A2                     u4630:
 10465   0035A2  5004               	movf	___awmod@divisor^0,w,c
 10466   0035A4  5E02               	subwf	___awmod@dividend^0,f,c
 10467   0035A6  5005               	movf	(___awmod@divisor+1)^0,w,c
 10468   0035A8  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 10469   0035AA                     l5195:
 10470   0035AA  90D8               	bcf	status,0,c
 10471   0035AC  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 10472   0035AE  3204               	rrcf	___awmod@divisor^0,f,c
 10473   0035B0  2E06               	decfsz	___awmod@counter^0,f,c
 10474   0035B2  EFC6  F01A         	goto	l5191
 10475   0035B6                     l5199:
 10476   0035B6  5007               	movf	___awmod@sign^0,w,c
 10477   0035B8  B4D8               	btfsc	status,2,c
 10478   0035BA  EFE1  F01A         	goto	u4641
 10479   0035BE  EFE3  F01A         	goto	u4640
 10480   0035C2                     u4641:
 10481   0035C2  EFE7  F01A         	goto	l5203
 10482   0035C6                     u4640:
 10483   0035C6  6C02               	negf	___awmod@dividend^0,c
 10484   0035C8  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10485   0035CA  B0D8               	btfsc	status,0,c
 10486   0035CC  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10487   0035CE                     l5203:
 10488   0035CE  C002  F002         	movff	___awmod@dividend,?___awmod
 10489   0035D2  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 10490   0035D6  0012               	return		;funcret
 10491   0035D8                     __end_of___awmod:
 10492                           	callstack 0
 10493                           
 10494 ;; *************** function ___awdiv *****************
 10495 ;; Defined at:
 10496 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;  dividend        2    1[COMRAM] int 
 10499 ;;  divisor         2    3[COMRAM] int 
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;  quotient        2    7[COMRAM] int 
 10502 ;;  sign            1    6[COMRAM] unsigned char 
 10503 ;;  counter         1    5[COMRAM] unsigned char 
 10504 ;; Return value:  Size  Location     Type
 10505 ;;                  2    1[COMRAM] int 
 10506 ;; Registers used:
 10507 ;;		wreg, status,2, status,0
 10508 ;; Tracked objects:
 10509 ;;		On entry : 0/0
 10510 ;;		On exit  : 0/0
 10511 ;;		Unchanged: 0/0
 10512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10513 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10514 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10516 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10517 ;;Total ram usage:        8 bytes
 10518 ;; Hardware stack levels used: 1
 10519 ;; Hardware stack levels required when called: 1
 10520 ;; This function calls:
 10521 ;;		Nothing
 10522 ;; This function is called by:
 10523 ;;		_dtoa
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           	psect	text59
 10528   0033A4                     __ptext59:
 10529                           	callstack 0
 10530   0033A4                     ___awdiv:
 10531                           	callstack 24
 10532   0033A4  0E00               	movlw	0
 10533   0033A6  6E07               	movwf	___awdiv@sign^0,c
 10534   0033A8  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 10535   0033AA  EFDB  F019         	goto	u4530
 10536   0033AE  EFD9  F019         	goto	u4531
 10537   0033B2                     u4531:
 10538   0033B2  EFE1  F019         	goto	l5135
 10539   0033B6                     u4530:
 10540   0033B6  6C04               	negf	___awdiv@divisor^0,c
 10541   0033B8  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 10542   0033BA  B0D8               	btfsc	status,0,c
 10543   0033BC  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 10544   0033BE  0E01               	movlw	1
 10545   0033C0  6E07               	movwf	___awdiv@sign^0,c
 10546   0033C2                     l5135:
 10547   0033C2  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 10548   0033C4  EFE8  F019         	goto	u4540
 10549   0033C8  EFE6  F019         	goto	u4541
 10550   0033CC                     u4541:
 10551   0033CC  EFEE  F019         	goto	l5141
 10552   0033D0                     u4540:
 10553   0033D0  6C02               	negf	___awdiv@dividend^0,c
 10554   0033D2  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 10555   0033D4  B0D8               	btfsc	status,0,c
 10556   0033D6  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 10557   0033D8  0E01               	movlw	1
 10558   0033DA  1A07               	xorwf	___awdiv@sign^0,f,c
 10559   0033DC                     l5141:
 10560   0033DC  0E00               	movlw	0
 10561   0033DE  6E09               	movwf	(___awdiv@quotient+1)^0,c
 10562   0033E0  0E00               	movlw	0
 10563   0033E2  6E08               	movwf	___awdiv@quotient^0,c
 10564   0033E4  5004               	movf	___awdiv@divisor^0,w,c
 10565   0033E6  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 10566   0033E8  B4D8               	btfsc	status,2,c
 10567   0033EA  EFF9  F019         	goto	u4551
 10568   0033EE  EFFB  F019         	goto	u4550
 10569   0033F2                     u4551:
 10570   0033F2  EF23  F01A         	goto	l5163
 10571   0033F6                     u4550:
 10572   0033F6  0E01               	movlw	1
 10573   0033F8  6E06               	movwf	___awdiv@counter^0,c
 10574   0033FA  EF03  F01A         	goto	l5149
 10575   0033FE                     l5147:
 10576   0033FE  90D8               	bcf	status,0,c
 10577   003400  3604               	rlcf	___awdiv@divisor^0,f,c
 10578   003402  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 10579   003404  2A06               	incf	___awdiv@counter^0,f,c
 10580   003406                     l5149:
 10581   003406  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 10582   003408  EF08  F01A         	goto	u4561
 10583   00340C  EF0A  F01A         	goto	u4560
 10584   003410                     u4561:
 10585   003410  EFFF  F019         	goto	l5147
 10586   003414                     u4560:
 10587   003414                     l5151:
 10588   003414  90D8               	bcf	status,0,c
 10589   003416  3608               	rlcf	___awdiv@quotient^0,f,c
 10590   003418  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 10591   00341A  5004               	movf	___awdiv@divisor^0,w,c
 10592   00341C  5C02               	subwf	___awdiv@dividend^0,w,c
 10593   00341E  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10594   003420  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 10595   003422  A0D8               	btfss	status,0,c
 10596   003424  EF16  F01A         	goto	u4571
 10597   003428  EF18  F01A         	goto	u4570
 10598   00342C                     u4571:
 10599   00342C  EF1D  F01A         	goto	l5159
 10600   003430                     u4570:
 10601   003430  5004               	movf	___awdiv@divisor^0,w,c
 10602   003432  5E02               	subwf	___awdiv@dividend^0,f,c
 10603   003434  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10604   003436  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 10605   003438  8008               	bsf	___awdiv@quotient^0,0,c
 10606   00343A                     l5159:
 10607   00343A  90D8               	bcf	status,0,c
 10608   00343C  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 10609   00343E  3204               	rrcf	___awdiv@divisor^0,f,c
 10610   003440  2E06               	decfsz	___awdiv@counter^0,f,c
 10611   003442  EF0A  F01A         	goto	l5151
 10612   003446                     l5163:
 10613   003446  5007               	movf	___awdiv@sign^0,w,c
 10614   003448  B4D8               	btfsc	status,2,c
 10615   00344A  EF29  F01A         	goto	u4581
 10616   00344E  EF2B  F01A         	goto	u4580
 10617   003452                     u4581:
 10618   003452  EF2F  F01A         	goto	l5167
 10619   003456                     u4580:
 10620   003456  6C08               	negf	___awdiv@quotient^0,c
 10621   003458  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 10622   00345A  B0D8               	btfsc	status,0,c
 10623   00345C  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 10624   00345E                     l5167:
 10625   00345E  C008  F002         	movff	___awdiv@quotient,?___awdiv
 10626   003462  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 10627   003466  0012               	return		;funcret
 10628   003468                     __end_of___awdiv:
 10629                           	callstack 0
 10630                           
 10631 ;; *************** function _sendStringSerial4 *****************
 10632 ;; Defined at:
 10633 ;;		line 41 in file "serial.c"
 10634 ;; Parameters:    Size  Location     Type
 10635 ;;  string          1    2[COMRAM] PTR unsigned char 
 10636 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 10637 ;; Auto vars:     Size  Location     Type
 10638 ;;		None
 10639 ;; Return value:  Size  Location     Type
 10640 ;;                  1    wreg      void 
 10641 ;; Registers used:
 10642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10643 ;; Tracked objects:
 10644 ;;		On entry : 0/0
 10645 ;;		On exit  : 0/0
 10646 ;;		Unchanged: 0/0
 10647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10648 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10651 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10652 ;;Total ram usage:        1 bytes
 10653 ;; Hardware stack levels used: 1
 10654 ;; Hardware stack levels required when called: 2
 10655 ;; This function calls:
 10656 ;;		_sendCharSerial4
 10657 ;; This function is called by:
 10658 ;;		_calibration_routine
 10659 ;;		_send2USART
 10660 ;;		_sendAllReadings
 10661 ;; This function uses a non-reentrant model
 10662 ;;
 10663                           
 10664                           	psect	text60
 10665   0042F4                     __ptext60:
 10666                           	callstack 0
 10667   0042F4                     _sendStringSerial4:
 10668                           	callstack 27
 10669   0042F4                     
 10670                           ;serial.c: 44:     while(*string != 0){
 10671   0042F4  EF87  F021         	goto	l5519
 10672   0042F8                     l5513:
 10673                           
 10674                           ;serial.c: 46:   sendCharSerial4(*string++);
 10675   0042F8  5003               	movf	sendStringSerial4@string^0,w,c
 10676   0042FA  6ED9               	movwf	fsr2l,c
 10677   0042FC  6ADA               	clrf	fsr2h,c
 10678   0042FE  50DF               	movf	indf2,w,c
 10679   004300  EC63  F022         	call	_sendCharSerial4
 10680   004304  2A03               	incf	sendStringSerial4@string^0,f,c
 10681   004306                     
 10682                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 10683   004306  0E6A               	movlw	106
 10684   004308                     u5777:
 10685   004308  2EE8               	decfsz	wreg,f,c
 10686   00430A  D7FE               	bra	u5777
 10687   00430C  D000               	nop2	
 10688   00430E                     l5519:
 10689                           
 10690                           ;serial.c: 44:     while(*string != 0){
 10691   00430E  5003               	movf	sendStringSerial4@string^0,w,c
 10692   004310  6ED9               	movwf	fsr2l,c
 10693   004312  6ADA               	clrf	fsr2h,c
 10694   004314  50DF               	movf	indf2,w,c
 10695   004316  A4D8               	btfss	status,2,c
 10696   004318  EF90  F021         	goto	u5021
 10697   00431C  EF92  F021         	goto	u5020
 10698   004320                     u5021:
 10699   004320  EF7C  F021         	goto	l5513
 10700   004324                     u5020:
 10701   004324  0012               	return		;funcret
 10702   004326                     __end_of_sendStringSerial4:
 10703                           	callstack 0
 10704                           
 10705 ;; *************** function _sendCharSerial4 *****************
 10706 ;; Defined at:
 10707 ;;		line 35 in file "serial.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;  charToSend      1    wreg     unsigned char 
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;  charToSend      1    1[COMRAM] unsigned char 
 10712 ;; Return value:  Size  Location     Type
 10713 ;;                  1    wreg      void 
 10714 ;; Registers used:
 10715 ;;		wreg
 10716 ;; Tracked objects:
 10717 ;;		On entry : 0/0
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10724 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10725 ;;Total ram usage:        1 bytes
 10726 ;; Hardware stack levels used: 1
 10727 ;; Hardware stack levels required when called: 1
 10728 ;; This function calls:
 10729 ;;		Nothing
 10730 ;; This function is called by:
 10731 ;;		_sendStringSerial4
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           	psect	text61
 10736   0044C6                     __ptext61:
 10737                           	callstack 0
 10738   0044C6                     _sendCharSerial4:
 10739                           	callstack 27
 10740                           
 10741                           ;incstack = 0
 10742                           ;sendCharSerial4@charToSend stored from wreg
 10743   0044C6  6E02               	movwf	sendCharSerial4@charToSend^0,c
 10744   0044C8                     l576:
 10745   0044C8  010E               	movlb	14	; () banked
 10746   0044CA  A537               	btfss	55,2,b	;volatile
 10747   0044CC  EF6A  F022         	goto	u4981
 10748   0044D0  EF6C  F022         	goto	u4980
 10749   0044D4                     u4981:
 10750   0044D4  EF64  F022         	goto	l576
 10751   0044D8                     u4980:
 10752   0044D8                     
 10753                           ; BSR set to: 14
 10754                           ;serial.c: 37:     TX4REG = charToSend;
 10755   0044D8  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 10756   0044DC                     
 10757                           ; BSR set to: 14
 10758   0044DC  0012               	return		;funcret
 10759   0044DE                     __end_of_sendCharSerial4:
 10760                           	callstack 0
 10761                           
 10762 ;; *************** function _color_read_Red *****************
 10763 ;; Defined at:
 10764 ;;		line 32 in file "color.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;		None
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;  tmp             2   10[COMRAM] unsigned int 
 10769 ;; Return value:  Size  Location     Type
 10770 ;;                  2    5[COMRAM] unsigned int 
 10771 ;; Registers used:
 10772 ;;		wreg, status,2, status,0, cstack
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/0
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10778 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10779 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10780 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10781 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10782 ;;Total ram usage:        7 bytes
 10783 ;; Hardware stack levels used: 1
 10784 ;; Hardware stack levels required when called: 3
 10785 ;; This function calls:
 10786 ;;		_I2C_2_Master_Read
 10787 ;;		_I2C_2_Master_RepStart
 10788 ;;		_I2C_2_Master_Start
 10789 ;;		_I2C_2_Master_Stop
 10790 ;;		_I2C_2_Master_Write
 10791 ;; This function is called by:
 10792 ;;		_reading_hue
 10793 ;;		_calibration_routine
 10794 ;; This function uses a non-reentrant model
 10795 ;;
 10796                           
 10797                           	psect	text62
 10798   003C58                     __ptext62:
 10799                           	callstack 0
 10800   003C58                     _color_read_Red:
 10801                           	callstack 26
 10802   003C58                     
 10803                           ;color.c: 34:  unsigned int tmp;;color.c: 35:  I2C_2_Master_Start();
 10804   003C58  EC7A  F022         	call	_I2C_2_Master_Start	;wreg free
 10805                           
 10806                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
 10807   003C5C  0E52               	movlw	82
 10808   003C5E  EC6F  F022         	call	_I2C_2_Master_Write
 10809                           
 10810                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
 10811   003C62  0EB6               	movlw	182
 10812   003C64  EC6F  F022         	call	_I2C_2_Master_Write
 10813                           
 10814                           ;color.c: 38:  I2C_2_Master_RepStart();
 10815   003C68  EC7F  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10816                           
 10817                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
 10818   003C6C  0E53               	movlw	83
 10819   003C6E  EC6F  F022         	call	_I2C_2_Master_Write
 10820                           
 10821                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
 10822   003C72  0E01               	movlw	1
 10823   003C74  EC52  F020         	call	_I2C_2_Master_Read
 10824   003C78  6E08               	movwf	??_color_read_Red^0,c
 10825   003C7A  5008               	movf	??_color_read_Red^0,w,c
 10826   003C7C  6E0B               	movwf	color_read_Red@tmp^0,c
 10827   003C7E  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 10828                           
 10829                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10830   003C80  0E00               	movlw	0
 10831   003C82  EC52  F020         	call	_I2C_2_Master_Read
 10832   003C86  6E08               	movwf	??_color_read_Red^0,c
 10833   003C88  5008               	movf	??_color_read_Red^0,w,c
 10834   003C8A  6E0A               	movwf	(??_color_read_Red+2)^0,c
 10835   003C8C  6A09               	clrf	(??_color_read_Red+1)^0,c
 10836   003C8E  500B               	movf	color_read_Red@tmp^0,w,c
 10837   003C90  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 10838   003C92  6E0B               	movwf	color_read_Red@tmp^0,c
 10839   003C94  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 10840   003C96  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 10841   003C98  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 10842                           
 10843                           ;color.c: 42:  I2C_2_Master_Stop();
 10844   003C9A  EC75  F022         	call	_I2C_2_Master_Stop	;wreg free
 10845   003C9E                     
 10846                           ;color.c: 43:  return tmp;
 10847   003C9E  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 10848   003CA2  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10849   003CA6  0012               	return		;funcret
 10850   003CA8                     __end_of_color_read_Red:
 10851                           	callstack 0
 10852                           
 10853 ;; *************** function _color_read_Green *****************
 10854 ;; Defined at:
 10855 ;;		line 46 in file "color.c"
 10856 ;; Parameters:    Size  Location     Type
 10857 ;;		None
 10858 ;; Auto vars:     Size  Location     Type
 10859 ;;  tmp             2   10[COMRAM] unsigned int 
 10860 ;; Return value:  Size  Location     Type
 10861 ;;                  2    5[COMRAM] unsigned int 
 10862 ;; Registers used:
 10863 ;;		wreg, status,2, status,0, cstack
 10864 ;; Tracked objects:
 10865 ;;		On entry : 0/0
 10866 ;;		On exit  : 0/0
 10867 ;;		Unchanged: 0/0
 10868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10869 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10871 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10872 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10873 ;;Total ram usage:        7 bytes
 10874 ;; Hardware stack levels used: 1
 10875 ;; Hardware stack levels required when called: 3
 10876 ;; This function calls:
 10877 ;;		_I2C_2_Master_Read
 10878 ;;		_I2C_2_Master_RepStart
 10879 ;;		_I2C_2_Master_Start
 10880 ;;		_I2C_2_Master_Stop
 10881 ;;		_I2C_2_Master_Write
 10882 ;; This function is called by:
 10883 ;;		_reading_hue
 10884 ;;		_calibration_routine
 10885 ;; This function uses a non-reentrant model
 10886 ;;
 10887                           
 10888                           	psect	text63
 10889   003CA8                     __ptext63:
 10890                           	callstack 0
 10891   003CA8                     _color_read_Green:
 10892                           	callstack 26
 10893   003CA8                     
 10894                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
 10895   003CA8  EC7A  F022         	call	_I2C_2_Master_Start	;wreg free
 10896                           
 10897                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
 10898   003CAC  0E52               	movlw	82
 10899   003CAE  EC6F  F022         	call	_I2C_2_Master_Write
 10900                           
 10901                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
 10902   003CB2  0EB8               	movlw	184
 10903   003CB4  EC6F  F022         	call	_I2C_2_Master_Write
 10904                           
 10905                           ;color.c: 52:  I2C_2_Master_RepStart();
 10906   003CB8  EC7F  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10907                           
 10908                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
 10909   003CBC  0E53               	movlw	83
 10910   003CBE  EC6F  F022         	call	_I2C_2_Master_Write
 10911                           
 10912                           ;color.c: 54:  tmp=I2C_2_Master_Read(1);
 10913   003CC2  0E01               	movlw	1
 10914   003CC4  EC52  F020         	call	_I2C_2_Master_Read
 10915   003CC8  6E08               	movwf	??_color_read_Green^0,c
 10916   003CCA  5008               	movf	??_color_read_Green^0,w,c
 10917   003CCC  6E0B               	movwf	color_read_Green@tmp^0,c
 10918   003CCE  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 10919                           
 10920                           ;color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10921   003CD0  0E00               	movlw	0
 10922   003CD2  EC52  F020         	call	_I2C_2_Master_Read
 10923   003CD6  6E08               	movwf	??_color_read_Green^0,c
 10924   003CD8  5008               	movf	??_color_read_Green^0,w,c
 10925   003CDA  6E0A               	movwf	(??_color_read_Green+2)^0,c
 10926   003CDC  6A09               	clrf	(??_color_read_Green+1)^0,c
 10927   003CDE  500B               	movf	color_read_Green@tmp^0,w,c
 10928   003CE0  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 10929   003CE2  6E0B               	movwf	color_read_Green@tmp^0,c
 10930   003CE4  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 10931   003CE6  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 10932   003CE8  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 10933                           
 10934                           ;color.c: 56:  I2C_2_Master_Stop();
 10935   003CEA  EC75  F022         	call	_I2C_2_Master_Stop	;wreg free
 10936   003CEE                     
 10937                           ;color.c: 57:  return tmp;
 10938   003CEE  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 10939   003CF2  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10940   003CF6  0012               	return		;funcret
 10941   003CF8                     __end_of_color_read_Green:
 10942                           	callstack 0
 10943                           
 10944 ;; *************** function _color_read_Clear *****************
 10945 ;; Defined at:
 10946 ;;		line 75 in file "color.c"
 10947 ;; Parameters:    Size  Location     Type
 10948 ;;		None
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;  tmp             2   10[COMRAM] unsigned int 
 10951 ;; Return value:  Size  Location     Type
 10952 ;;                  2    5[COMRAM] unsigned int 
 10953 ;; Registers used:
 10954 ;;		wreg, status,2, status,0, cstack
 10955 ;; Tracked objects:
 10956 ;;		On entry : 0/0
 10957 ;;		On exit  : 0/0
 10958 ;;		Unchanged: 0/0
 10959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10960 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10961 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10962 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10963 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10964 ;;Total ram usage:        7 bytes
 10965 ;; Hardware stack levels used: 1
 10966 ;; Hardware stack levels required when called: 3
 10967 ;; This function calls:
 10968 ;;		_I2C_2_Master_Read
 10969 ;;		_I2C_2_Master_RepStart
 10970 ;;		_I2C_2_Master_Start
 10971 ;;		_I2C_2_Master_Stop
 10972 ;;		_I2C_2_Master_Write
 10973 ;; This function is called by:
 10974 ;;		_reading_hue
 10975 ;;		_calibration_routine
 10976 ;;		_main
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           	psect	text64
 10981   003CF8                     __ptext64:
 10982                           	callstack 0
 10983   003CF8                     _color_read_Clear:
 10984                           	callstack 26
 10985   003CF8                     
 10986                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
 10987   003CF8  EC7A  F022         	call	_I2C_2_Master_Start	;wreg free
 10988                           
 10989                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 10990   003CFC  0E52               	movlw	82
 10991   003CFE  EC6F  F022         	call	_I2C_2_Master_Write
 10992                           
 10993                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
 10994   003D02  0EB4               	movlw	180
 10995   003D04  EC6F  F022         	call	_I2C_2_Master_Write
 10996                           
 10997                           ;color.c: 81:  I2C_2_Master_RepStart();
 10998   003D08  EC7F  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10999                           
 11000                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 11001   003D0C  0E53               	movlw	83
 11002   003D0E  EC6F  F022         	call	_I2C_2_Master_Write
 11003                           
 11004                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
 11005   003D12  0E01               	movlw	1
 11006   003D14  EC52  F020         	call	_I2C_2_Master_Read
 11007   003D18  6E08               	movwf	??_color_read_Clear^0,c
 11008   003D1A  5008               	movf	??_color_read_Clear^0,w,c
 11009   003D1C  6E0B               	movwf	color_read_Clear@tmp^0,c
 11010   003D1E  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11011                           
 11012                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11013   003D20  0E00               	movlw	0
 11014   003D22  EC52  F020         	call	_I2C_2_Master_Read
 11015   003D26  6E08               	movwf	??_color_read_Clear^0,c
 11016   003D28  5008               	movf	??_color_read_Clear^0,w,c
 11017   003D2A  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11018   003D2C  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11019   003D2E  500B               	movf	color_read_Clear@tmp^0,w,c
 11020   003D30  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11021   003D32  6E0B               	movwf	color_read_Clear@tmp^0,c
 11022   003D34  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11023   003D36  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11024   003D38  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11025                           
 11026                           ;color.c: 85:  I2C_2_Master_Stop();
 11027   003D3A  EC75  F022         	call	_I2C_2_Master_Stop	;wreg free
 11028   003D3E                     
 11029                           ;color.c: 86:  return tmp;
 11030   003D3E  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11031   003D42  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11032   003D46  0012               	return		;funcret
 11033   003D48                     __end_of_color_read_Clear:
 11034                           	callstack 0
 11035                           
 11036 ;; *************** function _color_read_Blue *****************
 11037 ;; Defined at:
 11038 ;;		line 60 in file "color.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;		None
 11041 ;; Auto vars:     Size  Location     Type
 11042 ;;  tmp             2   10[COMRAM] unsigned int 
 11043 ;; Return value:  Size  Location     Type
 11044 ;;                  2    5[COMRAM] unsigned int 
 11045 ;; Registers used:
 11046 ;;		wreg, status,2, status,0, cstack
 11047 ;; Tracked objects:
 11048 ;;		On entry : 0/0
 11049 ;;		On exit  : 0/0
 11050 ;;		Unchanged: 0/0
 11051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11052 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11053 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11054 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11055 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11056 ;;Total ram usage:        7 bytes
 11057 ;; Hardware stack levels used: 1
 11058 ;; Hardware stack levels required when called: 3
 11059 ;; This function calls:
 11060 ;;		_I2C_2_Master_Read
 11061 ;;		_I2C_2_Master_RepStart
 11062 ;;		_I2C_2_Master_Start
 11063 ;;		_I2C_2_Master_Stop
 11064 ;;		_I2C_2_Master_Write
 11065 ;; This function is called by:
 11066 ;;		_reading_hue
 11067 ;;		_calibration_routine
 11068 ;; This function uses a non-reentrant model
 11069 ;;
 11070                           
 11071                           	psect	text65
 11072   003D48                     __ptext65:
 11073                           	callstack 0
 11074   003D48                     _color_read_Blue:
 11075                           	callstack 26
 11076   003D48                     
 11077                           ;color.c: 62:  unsigned int tmp;;color.c: 63:  I2C_2_Master_Start();
 11078   003D48  EC7A  F022         	call	_I2C_2_Master_Start	;wreg free
 11079                           
 11080                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x00);
 11081   003D4C  0E52               	movlw	82
 11082   003D4E  EC6F  F022         	call	_I2C_2_Master_Write
 11083                           
 11084                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x1A);
 11085   003D52  0EBA               	movlw	186
 11086   003D54  EC6F  F022         	call	_I2C_2_Master_Write
 11087                           
 11088                           ;color.c: 66:  I2C_2_Master_RepStart();
 11089   003D58  EC7F  F022         	call	_I2C_2_Master_RepStart	;wreg free
 11090                           
 11091                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
 11092   003D5C  0E53               	movlw	83
 11093   003D5E  EC6F  F022         	call	_I2C_2_Master_Write
 11094                           
 11095                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
 11096   003D62  0E01               	movlw	1
 11097   003D64  EC52  F020         	call	_I2C_2_Master_Read
 11098   003D68  6E08               	movwf	??_color_read_Blue^0,c
 11099   003D6A  5008               	movf	??_color_read_Blue^0,w,c
 11100   003D6C  6E0B               	movwf	color_read_Blue@tmp^0,c
 11101   003D6E  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11102                           
 11103                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11104   003D70  0E00               	movlw	0
 11105   003D72  EC52  F020         	call	_I2C_2_Master_Read
 11106   003D76  6E08               	movwf	??_color_read_Blue^0,c
 11107   003D78  5008               	movf	??_color_read_Blue^0,w,c
 11108   003D7A  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11109   003D7C  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11110   003D7E  500B               	movf	color_read_Blue@tmp^0,w,c
 11111   003D80  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11112   003D82  6E0B               	movwf	color_read_Blue@tmp^0,c
 11113   003D84  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11114   003D86  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11115   003D88  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11116                           
 11117                           ;color.c: 70:  I2C_2_Master_Stop();
 11118   003D8A  EC75  F022         	call	_I2C_2_Master_Stop	;wreg free
 11119   003D8E                     
 11120                           ;color.c: 71:  return tmp;
 11121   003D8E  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11122   003D92  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11123   003D96  0012               	return		;funcret
 11124   003D98                     __end_of_color_read_Blue:
 11125                           	callstack 0
 11126                           
 11127 ;; *************** function _I2C_2_Master_Write *****************
 11128 ;; Defined at:
 11129 ;;		line 45 in file "i2c.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;  data_byte       1    wreg     unsigned char 
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;  data_byte       1    2[COMRAM] unsigned char 
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      void 
 11136 ;; Registers used:
 11137 ;;		wreg, status,2, status,0, cstack
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11144 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11146 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11147 ;;Total ram usage:        1 bytes
 11148 ;; Hardware stack levels used: 1
 11149 ;; Hardware stack levels required when called: 2
 11150 ;; This function calls:
 11151 ;;		_I2C_2_Master_Idle
 11152 ;; This function is called by:
 11153 ;;		_color_writetoaddr
 11154 ;;		_color_read_Red
 11155 ;;		_color_read_Green
 11156 ;;		_color_read_Blue
 11157 ;;		_color_read_Clear
 11158 ;; This function uses a non-reentrant model
 11159 ;;
 11160                           
 11161                           	psect	text66
 11162   0044DE                     __ptext66:
 11163                           	callstack 0
 11164   0044DE                     _I2C_2_Master_Write:
 11165                           	callstack 26
 11166                           
 11167                           ;incstack = 0
 11168                           ;I2C_2_Master_Write@data_byte stored from wreg
 11169   0044DE  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11170   0044E0                     
 11171                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11172   0044E0  ECF0  F021         	call	_I2C_2_Master_Idle	;wreg free
 11173   0044E4                     
 11174                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11175   0044E4  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11176   0044E8  0012               	return		;funcret
 11177   0044EA                     __end_of_I2C_2_Master_Write:
 11178                           	callstack 0
 11179                           
 11180 ;; *************** function _I2C_2_Master_Stop *****************
 11181 ;; Defined at:
 11182 ;;		line 39 in file "i2c.c"
 11183 ;; Parameters:    Size  Location     Type
 11184 ;;		None
 11185 ;; Auto vars:     Size  Location     Type
 11186 ;;		None
 11187 ;; Return value:  Size  Location     Type
 11188 ;;                  1    wreg      void 
 11189 ;; Registers used:
 11190 ;;		wreg, status,2, status,0, cstack
 11191 ;; Tracked objects:
 11192 ;;		On entry : 0/0
 11193 ;;		On exit  : 0/0
 11194 ;;		Unchanged: 0/0
 11195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11200 ;;Total ram usage:        0 bytes
 11201 ;; Hardware stack levels used: 1
 11202 ;; Hardware stack levels required when called: 2
 11203 ;; This function calls:
 11204 ;;		_I2C_2_Master_Idle
 11205 ;; This function is called by:
 11206 ;;		_color_writetoaddr
 11207 ;;		_color_read_Red
 11208 ;;		_color_read_Green
 11209 ;;		_color_read_Blue
 11210 ;;		_color_read_Clear
 11211 ;; This function uses a non-reentrant model
 11212 ;;
 11213                           
 11214                           	psect	text67
 11215   0044EA                     __ptext67:
 11216                           	callstack 0
 11217   0044EA                     _I2C_2_Master_Stop:
 11218                           	callstack 26
 11219   0044EA                     
 11220                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11221   0044EA  ECF0  F021         	call	_I2C_2_Master_Idle	;wreg free
 11222   0044EE                     
 11223                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11224   0044EE  010E               	movlb	14	; () banked
 11225   0044F0  85DA               	bsf	218,2,b	;volatile
 11226   0044F2                     
 11227                           ; BSR set to: 14
 11228   0044F2  0012               	return		;funcret
 11229   0044F4                     __end_of_I2C_2_Master_Stop:
 11230                           	callstack 0
 11231                           
 11232 ;; *************** function _I2C_2_Master_Start *****************
 11233 ;; Defined at:
 11234 ;;		line 27 in file "i2c.c"
 11235 ;; Parameters:    Size  Location     Type
 11236 ;;		None
 11237 ;; Auto vars:     Size  Location     Type
 11238 ;;		None
 11239 ;; Return value:  Size  Location     Type
 11240 ;;                  1    wreg      void 
 11241 ;; Registers used:
 11242 ;;		wreg, status,2, status,0, cstack
 11243 ;; Tracked objects:
 11244 ;;		On entry : 0/0
 11245 ;;		On exit  : 0/0
 11246 ;;		Unchanged: 0/0
 11247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11252 ;;Total ram usage:        0 bytes
 11253 ;; Hardware stack levels used: 1
 11254 ;; Hardware stack levels required when called: 2
 11255 ;; This function calls:
 11256 ;;		_I2C_2_Master_Idle
 11257 ;; This function is called by:
 11258 ;;		_color_writetoaddr
 11259 ;;		_color_read_Red
 11260 ;;		_color_read_Green
 11261 ;;		_color_read_Blue
 11262 ;;		_color_read_Clear
 11263 ;; This function uses a non-reentrant model
 11264 ;;
 11265                           
 11266                           	psect	text68
 11267   0044F4                     __ptext68:
 11268                           	callstack 0
 11269   0044F4                     _I2C_2_Master_Start:
 11270                           	callstack 26
 11271   0044F4                     
 11272                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11273   0044F4  ECF0  F021         	call	_I2C_2_Master_Idle	;wreg free
 11274   0044F8                     
 11275                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11276   0044F8  010E               	movlb	14	; () banked
 11277   0044FA  81DA               	bsf	218,0,b	;volatile
 11278   0044FC                     
 11279                           ; BSR set to: 14
 11280   0044FC  0012               	return		;funcret
 11281   0044FE                     __end_of_I2C_2_Master_Start:
 11282                           	callstack 0
 11283                           
 11284 ;; *************** function _I2C_2_Master_RepStart *****************
 11285 ;; Defined at:
 11286 ;;		line 33 in file "i2c.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;		None
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;		None
 11291 ;; Return value:  Size  Location     Type
 11292 ;;                  1    wreg      void 
 11293 ;; Registers used:
 11294 ;;		wreg, status,2, status,0, cstack
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11304 ;;Total ram usage:        0 bytes
 11305 ;; Hardware stack levels used: 1
 11306 ;; Hardware stack levels required when called: 2
 11307 ;; This function calls:
 11308 ;;		_I2C_2_Master_Idle
 11309 ;; This function is called by:
 11310 ;;		_color_read_Red
 11311 ;;		_color_read_Green
 11312 ;;		_color_read_Blue
 11313 ;;		_color_read_Clear
 11314 ;; This function uses a non-reentrant model
 11315 ;;
 11316                           
 11317                           	psect	text69
 11318   0044FE                     __ptext69:
 11319                           	callstack 0
 11320   0044FE                     _I2C_2_Master_RepStart:
 11321                           	callstack 26
 11322   0044FE                     
 11323                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11324   0044FE  ECF0  F021         	call	_I2C_2_Master_Idle	;wreg free
 11325   004502                     
 11326                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11327   004502  010E               	movlb	14	; () banked
 11328   004504  83DA               	bsf	218,1,b	;volatile
 11329   004506                     
 11330                           ; BSR set to: 14
 11331   004506  0012               	return		;funcret
 11332   004508                     __end_of_I2C_2_Master_RepStart:
 11333                           	callstack 0
 11334                           
 11335 ;; *************** function _I2C_2_Master_Read *****************
 11336 ;; Defined at:
 11337 ;;		line 51 in file "i2c.c"
 11338 ;; Parameters:    Size  Location     Type
 11339 ;;  ack             1    wreg     unsigned char 
 11340 ;; Auto vars:     Size  Location     Type
 11341 ;;  ack             1    3[COMRAM] unsigned char 
 11342 ;;  tmp             1    4[COMRAM] unsigned char 
 11343 ;; Return value:  Size  Location     Type
 11344 ;;                  1    wreg      unsigned char 
 11345 ;; Registers used:
 11346 ;;		wreg, status,2, status,0, cstack
 11347 ;; Tracked objects:
 11348 ;;		On entry : 0/0
 11349 ;;		On exit  : 0/0
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11353 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11354 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11355 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11356 ;;Total ram usage:        3 bytes
 11357 ;; Hardware stack levels used: 1
 11358 ;; Hardware stack levels required when called: 2
 11359 ;; This function calls:
 11360 ;;		_I2C_2_Master_Idle
 11361 ;; This function is called by:
 11362 ;;		_color_read_Red
 11363 ;;		_color_read_Green
 11364 ;;		_color_read_Blue
 11365 ;;		_color_read_Clear
 11366 ;; This function uses a non-reentrant model
 11367 ;;
 11368                           
 11369                           	psect	text70
 11370   0040A4                     __ptext70:
 11371                           	callstack 0
 11372   0040A4                     _I2C_2_Master_Read:
 11373                           	callstack 26
 11374                           
 11375                           ; BSR set to: 14
 11376                           ;incstack = 0
 11377                           ;I2C_2_Master_Read@ack stored from wreg
 11378   0040A4  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11379   0040A6                     
 11380                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11381   0040A6  ECF0  F021         	call	_I2C_2_Master_Idle	;wreg free
 11382   0040AA                     
 11383                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11384   0040AA  010E               	movlb	14	; () banked
 11385   0040AC  87DA               	bsf	218,3,b	;volatile
 11386                           
 11387                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11388   0040AE  ECF0  F021         	call	_I2C_2_Master_Idle	;wreg free
 11389   0040B2                     
 11390                           ;i2c.c: 57:   tmp = SSP2BUF;
 11391   0040B2  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11392                           
 11393                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11394   0040B6  ECF0  F021         	call	_I2C_2_Master_Idle	;wreg free
 11395   0040BA                     
 11396                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11397   0040BA  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11398   0040BC  B4D8               	btfsc	status,2,c
 11399   0040BE  EF63  F020         	goto	u5001
 11400   0040C2  EF67  F020         	goto	u5000
 11401   0040C6                     u5001:
 11402   0040C6  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11403   0040C8  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11404   0040CA  EF68  F020         	goto	u5018
 11405   0040CE                     u5000:
 11406   0040CE  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11407   0040D0                     u5018:
 11408   0040D0  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11409   0040D2  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11410   0040D4  010E               	movlb	14	; () banked
 11411   0040D6  51DA               	movf	218,w,b	;volatile
 11412   0040D8  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11413   0040DA  0BDF               	andlw	-33
 11414   0040DC  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11415   0040DE  6FDA               	movwf	218,b	;volatile
 11416   0040E0                     
 11417                           ; BSR set to: 14
 11418                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11419   0040E0  89DA               	bsf	218,4,b	;volatile
 11420   0040E2                     
 11421                           ; BSR set to: 14
 11422                           ;i2c.c: 61:   return tmp;
 11423   0040E2  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11424   0040E4                     
 11425                           ; BSR set to: 14
 11426   0040E4  0012               	return		;funcret
 11427   0040E6                     __end_of_I2C_2_Master_Read:
 11428                           	callstack 0
 11429                           
 11430 ;; *************** function _I2C_2_Master_Idle *****************
 11431 ;; Defined at:
 11432 ;;		line 22 in file "i2c.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;		None
 11435 ;; Auto vars:     Size  Location     Type
 11436 ;;		None
 11437 ;; Return value:  Size  Location     Type
 11438 ;;                  1    wreg      void 
 11439 ;; Registers used:
 11440 ;;		wreg, status,2, status,0
 11441 ;; Tracked objects:
 11442 ;;		On entry : 0/0
 11443 ;;		On exit  : 0/0
 11444 ;;		Unchanged: 0/0
 11445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11448 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11449 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11450 ;;Total ram usage:        1 bytes
 11451 ;; Hardware stack levels used: 1
 11452 ;; Hardware stack levels required when called: 1
 11453 ;; This function calls:
 11454 ;;		Nothing
 11455 ;; This function is called by:
 11456 ;;		_I2C_2_Master_Start
 11457 ;;		_I2C_2_Master_RepStart
 11458 ;;		_I2C_2_Master_Stop
 11459 ;;		_I2C_2_Master_Write
 11460 ;;		_I2C_2_Master_Read
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           	psect	text71
 11465   0043E0                     __ptext71:
 11466                           	callstack 0
 11467   0043E0                     _I2C_2_Master_Idle:
 11468                           	callstack 26
 11469   0043E0                     l194:
 11470   0043E0  010E               	movlb	14	; () banked
 11471   0043E2  B5D8               	btfsc	216,2,b	;volatile
 11472   0043E4  EFF6  F021         	goto	u4891
 11473   0043E8  EFF8  F021         	goto	u4890
 11474   0043EC                     u4891:
 11475   0043EC  EFF0  F021         	goto	l194
 11476   0043F0                     u4890:
 11477   0043F0                     
 11478                           ; BSR set to: 14
 11479   0043F0  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11480   0043F4  0E1F               	movlw	31
 11481   0043F6  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 11482   0043F8  A4D8               	btfss	status,2,c
 11483   0043FA  EF01  F022         	goto	u4901
 11484   0043FE  EF03  F022         	goto	u4900
 11485   004402                     u4901:
 11486   004402  EFF0  F021         	goto	l194
 11487   004406                     u4900:
 11488   004406                     
 11489                           ; BSR set to: 14
 11490   004406  0012               	return		;funcret
 11491   004408                     __end_of_I2C_2_Master_Idle:
 11492                           	callstack 0
 11493                           
 11494 ;; *************** function _ADC_init *****************
 11495 ;; Defined at:
 11496 ;;		line 9 in file "ADC.c"
 11497 ;; Parameters:    Size  Location     Type
 11498 ;;		None
 11499 ;; Auto vars:     Size  Location     Type
 11500 ;;		None
 11501 ;; Return value:  Size  Location     Type
 11502 ;;                  1    wreg      void 
 11503 ;; Registers used:
 11504 ;;		wreg, status,2
 11505 ;; Tracked objects:
 11506 ;;		On entry : 0/0
 11507 ;;		On exit  : 0/0
 11508 ;;		Unchanged: 0/0
 11509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11514 ;;Total ram usage:        0 bytes
 11515 ;; Hardware stack levels used: 1
 11516 ;; Hardware stack levels required when called: 1
 11517 ;; This function calls:
 11518 ;;		Nothing
 11519 ;; This function is called by:
 11520 ;;		_main
 11521 ;; This function uses a non-reentrant model
 11522 ;;
 11523                           
 11524                           	psect	text72
 11525   0044AC                     __ptext72:
 11526                           	callstack 0
 11527   0044AC                     _ADC_init:
 11528                           	callstack 29
 11529   0044AC                     
 11530                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 11531   0044AC  8C86               	bsf	134,6,c	;volatile
 11532                           
 11533                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 11534   0044AE  010E               	movlb	14	; () banked
 11535   0044B0  8DB4               	bsf	180,6,b	;volatile
 11536                           
 11537                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 11538   0044B2  010F               	movlb	15	; () banked
 11539   0044B4  9958               	bcf	88,4,b	;volatile
 11540   0044B6                     
 11541                           ; BSR set to: 15
 11542                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 11543   0044B6  0EFC               	movlw	-4
 11544   0044B8  1758               	andwf	88,f,b	;volatile
 11545                           
 11546                           ;ADC.c: 17:     ADPCH=0b101110;
 11547   0044BA  0E2E               	movlw	46
 11548   0044BC  6F5F               	movwf	95,b	;volatile
 11549   0044BE                     
 11550                           ; BSR set to: 15
 11551                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 11552   0044BE  9460               	bcf	96,2,c	;volatile
 11553   0044C0                     
 11554                           ; BSR set to: 15
 11555                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 11556   0044C0  8860               	bsf	96,4,c	;volatile
 11557   0044C2                     
 11558                           ; BSR set to: 15
 11559                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 11560   0044C2  8E60               	bsf	96,7,c	;volatile
 11561   0044C4                     
 11562                           ; BSR set to: 15
 11563   0044C4  0012               	return		;funcret
 11564   0044C6                     __end_of_ADC_init:
 11565                           	callstack 0
 11566                           
 11567 ;; *************** function _LowISR *****************
 11568 ;; Defined at:
 11569 ;;		line 38 in file "timers.c"
 11570 ;; Parameters:    Size  Location     Type
 11571 ;;		None
 11572 ;; Auto vars:     Size  Location     Type
 11573 ;;		None
 11574 ;; Return value:  Size  Location     Type
 11575 ;;                  1    wreg      void 
 11576 ;; Registers used:
 11577 ;;		None
 11578 ;; Tracked objects:
 11579 ;;		On entry : 0/0
 11580 ;;		On exit  : 0/0
 11581 ;;		Unchanged: 0/0
 11582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11585 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11587 ;;Total ram usage:        1 bytes
 11588 ;; Hardware stack levels used: 1
 11589 ;; This function calls:
 11590 ;;		Nothing
 11591 ;; This function is called by:
 11592 ;;		Interrupt level 1
 11593 ;; This function uses a non-reentrant model
 11594 ;;
 11595                           
 11596                           	psect	intcodelo
 11597   000018                     __pintcodelo:
 11598                           	callstack 0
 11599   000018                     _LowISR:
 11600                           	callstack 20
 11601                           
 11602                           ; BSR set to: 15
 11603                           ;incstack = 0
 11604   000018  8052               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 11605   00001A  CFE0 F001          	movff	bsr,??_LowISR
 11606   00001E                     
 11607                           ;timers.c: 41:     if (PIR0bits.TMR0IF == 1) {
 11608   00001E  010E               	movlb	14	; () banked
 11609   000020  AB33               	btfss	51,5,b	;volatile
 11610   000022  EF15  F000         	goto	i1u225_21
 11611   000026  EF17  F000         	goto	i1u225_20
 11612   00002A                     i1u225_21:
 11613   00002A  EF19  F000         	goto	i1l668
 11614   00002E                     i1u225_20:
 11615   00002E                     
 11616                           ; BSR set to: 14
 11617                           ;timers.c: 42:         LATGbits.LATG1 = 1;
 11618   00002E  827F               	bsf	127,1,c	;volatile
 11619                           
 11620                           ;timers.c: 44:         PIR0bits.TMR0IF = 0;
 11621   000030  9B33               	bcf	51,5,b	;volatile
 11622   000032                     i1l668:
 11623                           
 11624                           ; BSR set to: 14
 11625   000032  C001  FFE0         	movff	??_LowISR,bsr
 11626   000036  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 11627   000038  0010               	retfie	
 11628   00003A                     __end_of_LowISR:
 11629                           	callstack 0
 11630                           
 11631                           	psect	rparam
 11632   000000                     
 11633                           	psect	temp
 11634   000052                     btemp:
 11635                           	callstack 0
 11636   000052                     	ds	1
 11637   000000                     int$flags	set	btemp
 11638   000000                     wtemp8	set	btemp+1
 11639   000000                     ttemp5	set	btemp+1
 11640   000000                     ttemp6	set	btemp+4
 11641   000000                     ttemp7	set	btemp+8
 11642                           
 11643                           	psect	config
 11644                           
 11645                           ;Config register CONFIG1L @ 0x300000
 11646                           ;	External Oscillator mode Selection bits
 11647                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11648                           ;	Power-up default value for COSC bits
 11649                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11650   300000                     	org	3145728
 11651   300000  AA                 	db	170
 11652                           
 11653                           ;Config register CONFIG1H @ 0x300001
 11654                           ;	unspecified, using default values
 11655                           ;	Clock Out Enable bit
 11656                           ;	CLKOUTEN = 0x1, unprogrammed default
 11657                           ;	Clock Switch Enable bit
 11658                           ;	CSWEN = 0x1, unprogrammed default
 11659                           ;	Fail-Safe Clock Monitor Enable bit
 11660                           ;	FCMEN = 0x1, unprogrammed default
 11661   300001                     	org	3145729
 11662   300001  FF                 	db	255
 11663                           
 11664                           ;Config register CONFIG3L @ 0x300004
 11665                           ;	WDT Period Select bits
 11666                           ;	WDTCPS = 0x1F, unprogrammed default
 11667                           ;	WDT operating mode
 11668                           ;	WDTE = OFF, WDT Disabled
 11669   300004                     	org	3145732
 11670   300004  9F                 	db	159
 11671                           
 11672                           ;Config register CONFIG3H @ 0x300005
 11673                           ;	unspecified, using default values
 11674                           ;	WDT Window Select bits
 11675                           ;	WDTCWS = 0x7, unprogrammed default
 11676                           ;	WDT input clock selector
 11677                           ;	WDTCCS = 0x7, unprogrammed default
 11678   300005                     	org	3145733
 11679   300005  FF                 	db	255
 11680                           tosu	equ	0xFFF
 11681                           tosh	equ	0xFFE
 11682                           tosl	equ	0xFFD
 11683                           stkptr	equ	0xFFC
 11684                           pclatu	equ	0xFFB
 11685                           pclath	equ	0xFFA
 11686                           pcl	equ	0xFF9
 11687                           tblptru	equ	0xFF8
 11688                           tblptrh	equ	0xFF7
 11689                           tblptrl	equ	0xFF6
 11690                           tablat	equ	0xFF5
 11691                           prodh	equ	0xFF4
 11692                           prodl	equ	0xFF3
 11693                           indf0	equ	0xFEF
 11694                           postinc0	equ	0xFEE
 11695                           postdec0	equ	0xFED
 11696                           preinc0	equ	0xFEC
 11697                           plusw0	equ	0xFEB
 11698                           fsr0h	equ	0xFEA
 11699                           fsr0l	equ	0xFE9
 11700                           wreg	equ	0xFE8
 11701                           indf1	equ	0xFE7
 11702                           postinc1	equ	0xFE6
 11703                           postdec1	equ	0xFE5
 11704                           preinc1	equ	0xFE4
 11705                           plusw1	equ	0xFE3
 11706                           fsr1h	equ	0xFE2
 11707                           fsr1l	equ	0xFE1
 11708                           bsr	equ	0xFE0
 11709                           indf2	equ	0xFDF
 11710                           postinc2	equ	0xFDE
 11711                           postdec2	equ	0xFDD
 11712                           preinc2	equ	0xFDC
 11713                           plusw2	equ	0xFDB
 11714                           fsr2h	equ	0xFDA
 11715                           fsr2l	equ	0xFD9
 11716                           status	equ	0xFD8

Data Sizes:
    Strings     167
    Constant    0
    Data        1
    BSS         434
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      81
    BANK0           160     92     142
    BANK1           256      0     132
    BANK2           256      0     250
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    returnHome@path	PTR PTR struct PathStep size(2) Largest target is 250
		 -> path(BANK2[250]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S2966$buffer	PTR unsigned char  size(2) Largest target is 0

    S2966$source	PTR const unsigned char  size(2) Largest target is 0

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_decision
    _returnHome->_moveWhite
    _reverseTurn->_left135
    _reverseTurn->_right135
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _moveWhite->_backHalf
    _moveWhite->_turn180
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fldiv->___flmul
    _decision->_send2USART
    _send2USART->_sprintf
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _logAction->___wmul
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _decision->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                52    52      0  349182
                                             76 COMRAM     2     2      0
                                             76 BANK0     16    16      0
                           _ADC_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                          _logAction
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          13     7      6   83238
                                             32 COMRAM    13     7      6
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          3     0      3   45954
                                             28 COMRAM     3     0      3
                            _left135
                           _right135
                            _turn180
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                      6     2      4   12050
                                             24 COMRAM     6     2      4
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    5058
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     122
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   24428
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   16385
                                             65 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   15481
                                             61 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     866
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     381
                                             51 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3497
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2718
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1896
                                              1 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2463
                                             26 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2      23
                                              1 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  203821
                                             70 COMRAM     6     2      4
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
                         _send2USART
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11776
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   26666
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   27386
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   11612
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   26846
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   11432
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           6     2      4   27386
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   11612
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            5     3      2    4878
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        6     2      4   27566
                                             28 COMRAM     6     2      4
                           _backHalf
                            _left135
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   11792
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   27566
                                             28 COMRAM     6     2      4
                           _backHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   11792
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             6     2      4   27746
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   11972
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             5     3      2    5058
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _logAction                                            5     1      4    3197
                                              7 COMRAM     5     1      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   12152
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    6250
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4698
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    4022
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   12683
                                             68 COMRAM     3     2      1
                                              0 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10759
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    9187
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8699
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    2032
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1592
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     726
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___fldiv
     ___flmul (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _logAction
         ___wmul
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
       _logAction
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
       _logAction
     _moveOrange
       _backHalf
       _logAction
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
       _logAction
     _moveRed
       _backHalf
       _logAction
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _logAction
       _right90
     _send2USART
       _sendStringSerial4
       _sprintf
   _fullSpeedAhead
     _setMotorPWM
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _logAction
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _left135
       _right135
       _turn180
       _turnLeft
       _turnRight
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FA       9       97.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      84       7       51.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      8E       5       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      51       1       86.2%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25D      66        0.0%
DATA                 0      0     25D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 23:47:28 2024

               _color_read_Red 3C58                   ___fldiv@aexp 0033                   ___fldiv@bexp 0032  
           fullSpeedBack@power 0017                   ___fldiv@sign 002B                _color_read_Blue 3D48  
                           l81 3CA6                             l90 3D46                             l75 4190  
                           l84 3CF6                             l93 32BC                             l78 446E  
                           l87 3D96                             l96 2816                             l98 2824  
                           l99 2872                   ___awdiv@sign 0007                             bsr 0FE0  
          ___wmul@multiplicand 0004                moveLightBlue@mL 001D                moveLightBlue@mR 001E  
           convert_rgb2hue@max 0098             convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090  
             _color_read_Clear 3CF8               _color_read_Green 3CA8                            l101 2880  
                          l102 28D2                            l111 29C0                            l200 44FC  
                          l104 28E0                            l105 2932                            l121 119C  
                          l203 4506                            l107 2940                            l131 128E  
                          l123 11F6                            l212 40E4                            l108 299A  
                          l141 15A6                            l133 129E                            l125 1206  
                          l206 44F2                            l135 12F8                            l119 118C  
                          l209 44E8                            l401 38FE                            l145 161E  
                          l137 1308                            l146 163A                            l164 27EE  
                          l500 4146                            l316 256A                            l421 3A88  
                          l334 44C4                            l158 27E2                            l191 43DE  
                          l503 415C                            l431 3B02                            l408 2FC8  
                          l416 398C                            l513 3524                            l194 43E0  
                          l442 4384                            l426 3A0A                            l451 42C0  
                          l436 3B78                            l460 3E26                            l516 3526  
                          l197 4406                            l445 42F2                            l509 33A2  
                          l454 43B4                            l630 44AA                            l463 3F46  
                          l439 4354                            l448 428E                            l472 3E6E  
                          l457 425C                            l481 422A                            l466 3F8E  
                          l475 3EB6                            l485 3C56                            l469 3DDE  
                          l902 3466                            l478 3EFE                            l662 444E  
                          l671 442C                            l567 448C                            l576 44C8  
                          l496 401A                            l585 4324                            l497 401A  
                          l930 372E                            l579 44DC                            l915 35D6  
                          l941 31D2                            l936 318C                            l968 30CE  
                          _abs 41C6                            _pad 37DA                            _hue 00BC  
          convert_rgb2hue@cMax 003E                   ___awmod@sign 0007            convert_rgb2hue@diff 0094  
          logAction@pathLength 000A                            wreg 0FE8                   ___flmul@aexp 0013  
                 ___flmul@bexp 0014                   ___flmul@sign 000E                   ___flmul@temp 0019  
                 ___flmul@prod 0015                   ___fltol@exp1 003D                           l1200 1818  
                         l1201 17DE                           ?_abs 0008                           l1302 1EE6  
                         l1216 1944                           l1208 1AFA                           l1225 1A14  
                         l1241 4060                           l1162 3BE4                           l1226 1A02  
                         l1340 2B0C                           l1413 2CFC                           l1253 22BE  
                         l1333 2AB0                           l1326 2A18                           l1423 41E0  
                         l1255 211E                           l1264 2164                           l1169 3BEC  
                         l1329 2B74                           l1426 41F8                           l1266 21DC  
                         l1258 20E2                           l1419 40A2                           l1267 21CA  
                         l4011 4126                           l1372 384E                           l1292 1DB6  
                         l1349 41C4                           l4101 212E                           l4021 1F40  
                         l1285 1BC0                           l4013 4132                           l1438 37D8  
                         l1446 4124                           l1374 386E                           l1390 2E74  
                         l1294 1E2E                           l4103 2144                           l4111 2174  
                         l4031 1F74                           l4023 1F42                           l1295 1E1C  
                         l1199 182A                           l4015 4142                           l1449 4508  
                         l1369 3810                           l1377 2D5C                           l4113 2182  
                         l4105 214A                           l4041 1FA6                           l4025 1F52  
                         l4033 1F7C                           l4017 1F26                           l4201 1C20  
                         l1289 1F24                           l1394 367C                           l4123 21EC  
                         l4131 2234                           l4115 2186                           l4107 2154  
                         l4051 1FDA                           l4043 1FA8                           l4035 1F8C  
                         l4027 1F62                           l4019 1F32                           l4211 1C6A  
                         l4203 1C2C                           l5101 3740                           l4141 229E  
                         l4133 224E                           l4125 21F8                           l4117 2194  
                         l4109 2162                           l4061 2020                           l4045 1FB8  
                         l4053 1FE2                           l4037 1F92                           l4029 1F72  
                         l4301 3726                           l4221 1CBC                           l4213 1C76  
                         l4205 1C44                           l1398 3684                           l5103 3750  
                         l3431 3BA4                           l3423 3B7A                           l4143 22AC  
                         l4135 2264                           l4127 2206                           l4119 21C2  
                         l4071 2048                           l4063 2024                           l4055 1FF2  
                         l4047 1FC8                           l4039 1F98                           l4303 372C  
                         l4311 310E                           l4231 1D3A                           l4223 1CCC  
                         l4215 1C86                           l4207 1C50                           l5201 35C6  
                         l5105 375A                           l5113 40E6                           l5121 4408  
                         l3441 3BD8                           l3433 3BB2                           l3425 3B82  
                         l4145 22B2                           l4137 227E                           l4129 2230  
                         l4081 2096                           l4057 2008                           l4049 1FD8  
                         l4321 317A                           l4313 313C                           l4241 1DB4  
                         l4233 1D70                           l4225 1CE8                           l4217 1C92  
                         l4209 1C5C                           l4161 1B18                           l4401 2AFC  
                         l6001 246A                           l5131 33B6                           l5203 35CE  
                         l5107 3776                           l5115 40F2                           l5211 37FA  
                         l5123 4424                           l3443 3BDE                           l3435 3BB8  
                         l3427 3B94                           l4147 22B4                           l4139 229A  
                         l4091 20E0                           l4083 20A6                           l4075 205C  
                         l4059 2018                           l4067 2038                           l4323 31CA  
                         l4315 314C                           l4307 30D0                           l4251 1E14  
                         l4243 1DC6                           l4235 1D7E                           l4227 1CF4  
                         l4219 1CA2                           l4171 1B5E                           l4163 1B28  
                         l4155 1AFC                           l4331 2FE0                           l4411 2B54  
                         l4403 2B1A                           l6011 24C8                           l6003 2480  
                         l5141 33DC                           l5133 33BE                           l5109 37A8  
                         l5117 4100                           l5221 385E                           l5213 3808  
                         l4421 43C0                           l3437 3BCE                           l3429 3B9C  
                         l5301 2F32                           l4093 20EC                           l4085 20AE  
                         l4077 2076                           l4069 2048                           l4325 31D0  
                         l4317 315A                           l4309 30FE                           l4261 1E82  
                         l4245 1DD4                           l4237 1D9C                           l4229 1D10  
                         l4181 1B8A                           l4173 1B64                           l4165 1B38  
                         l4157 1B08                           l3701 16BC                           l4341 3030  
                         l4413 2B62                           l4405 2B1C                           l4501 12E4  
                         l6021 2526                           l6013 24DE                           l6005 2498  
                         l5151 3414                           l5143 33E4                           l5135 33C2  
                         l5127 33A4                           l5223 41C6                           l5119 4104  
                         l5215 381C                           l5207 37DA                           l5231 2D16  
                         l5311 2BA4                           l4423 43C6                           l3439 3BD6  
                         l5303 2F4C                           l4095 210A                           l4087 20BE  
                         l4079 2086                           l4319 316C                           l4271 1EEA  
                         l4255 1E3E                           l4263 1E86                           l4247 1DD8  
                         l4239 1DA6                           l4191 1BE0                           l4183 1B9A  
                         l4175 1B6A                           l4167 1B48                           l4159 1B16  
                         l3711 16F2                           l3703 16C2                           l4351 305A  
                         l4343 3034                           l4335 2FF4                           l4415 2B64  
                         l4407 2B20                           l4511 1422                           l4503 1318  
                         l6031 2584                           l6023 253E                           l6015 24F6  
                         l6007 24A4                           l5161 3440                           l5153 341A  
                         l5145 33F6                           l5137 33D0                           l5129 33A8  
                         l5225 41D4                           l5217 382C                           l5209 37EA  
                         l5241 2D50                           l5233 2D1E                           l5321 2BCE  
                         l5313 2BB2                           l4425 43C8                           l5305 2F8C  
                         l5401 3A4E                           l4097 210C                           l4089 20D2  
                         l4281 1F14                           l4273 1EFA                           l4265 1EA0  
                         l4257 1E4A                           l4249 1DE6                           l4185 1BAA  
                         l4177 1B78                           l4169 1B4E                           l3801 18B8  
                         l3721 172E                           l3713 1702                           l3705 16D0  
                         l4361 3082                           l4353 3064                           l4345 3042  
                         l4337 301E                           l4329 2FCA                           l4409 2B44  
                         l4521 15DA                           l4513 1454                           l4505 137E  
                         l6033 25A0                           l6025 2554                           l6017 2502  
                         l6009 24BC                           l5155 3430                           l5147 33FE  
                         l5163 3446                           l5139 33D8                           l5171 3528  
                         l5219 3830                           l5251 2DA6                           l5243 2D58  
                         l5235 2D2E                           l5227 2CFE                           l5331 2C30  
                         l5315 2BB6                           l5307 2B76                           l4427 43CA  
                         l4419 43B6                           l5403 3A56                           l5411 398E  
                         l4099 211C                           l4291 3686                           l4275 1F08  
                         l4267 1EB4                           l4259 1E58                           l4195 1BF4  
                         l4187 1BB0                           l4179 1B7A                           l3803 18DE  
                         l3811 1934                           l3731 174C                           l3723 173C  
                         l3715 1704                           l3707 16D2                           l4363 308E  
                         l4355 306E                           l4339 3020                           l4523 15EA  
                         l4515 14E4                           l4507 1394                           l6035 25A2  
                         l6027 2578                           l6019 251A                           l5165 3456  
                         l5157 3438                           l5149 3406                           l5181 3554  
                         l5173 352C                           l5261 2DF8                           l5253 2DAA  
                         l5245 2D64                           l5237 2D34                           l5229 2D02  
                         l5341 2C94                           l5333 2C40                           l5325 2BD6  
                         l5317 2BBE                           l5309 2B9C                           l5501 419A  
                         l4429 43CC                           l5405 3A5E                           l5413 39A8  
                         l4293 36B4                           l4277 1F0A                           l4269 1ECE  
                         l4197 1C00                           l4189 1BD0                           l3821 1988  
                         l3813 195A                           l3805 1912                           l3741 1760  
                         l3733 1750                           l3725 1740                           l3709 16E2  
                         l3717 170C                           l4285 401C                           l4365 309E  
                         l4381 2A3E                           l4373 29C4                           l4517 1516  
                         l4509 13C6                           l4461 0EEC                           l6037 25B2  
                         l6029 2578                           ?_pad 0010                           l5511 42F4  
                         l5167 345E                           l5159 343A                           l5191 358C  
                         l5183 355C                           l5175 353A                           l5271 2E48  
                         l5263 2E08                           l5255 2DB0                           l5247 2D6E  
                         l5239 2D44                           l5343 2CAC                           l5335 2C4A  
                         l5319 2BC2                           l5327 2C0C                           l5503 41A2  
                         l5407 3A6E                           l5431 39F0                           l5423 39C0  
                         l5415 39B0                           l4295 36C4                           l4279 1F10  
                         l4199 1C0A                           l3831 19B2                           l3823 1996  
                         l3815 196A                           l3807 1914                           l3751 1774  
                         l3743 1764                           l3735 1754                           l3727 1744  
                         l3719 171C                           l4287 402C                           l4367 30AE  
                         l4391 2A98                           l4375 29D4                           l4519 15A6  
                         l4471 0FEC                           l4463 0F1C                           l5601 3CEE  
                         l5513 42F8                           l5193 35A2                           l5185 356E  
                         l5177 3542                           l5273 2E58                           l5265 2E22  
                         l5249 2D74                           l5257 2DCC                           l5281 3606  
                         l5345 2CB6                           l5337 2C54                           l5329 2C1C  
                         l6081 2BFE                           l5353 2CD6                           l5505 41AA  
                         l5409 3A72                           l5433 39F4                           l5425 39D0  
                         l5417 39B8                           l4801 447A                           l4297 36F2  
                         l3841 19E4                           l3833 19C2                           l3825 1998  
                         l3809 1924                           l3761 17C6                           l3753 1778  
                         l3745 1768                           l3737 1758                           l3729 1748  
                         l3681 1656                           l4369 30BE                           l4393 2A9A  
                         l4385 2A52                           l4377 29E2                           l4481 10E0  
                         l4473 1020                           l4465 0F50                           l4457 0EAA  
                         l5521 3A8A                           l5363 43E0                           l5611 3CF8  
                         l5515 4304                           l5195 35AA                           l5187 3576  
                         l5179 3546                           l5099 3730                           l5259 2DE6  
                         l5267 2E32                           l5283 360E                           l5339 2C74  
                         l5507 41BA                           l5291 2E76                           l5451 3B58  
                         l5443 3B24                           l5435 3B04                           l5371 391A  
                         l5427 39D8                           l4811 3870                           l4803 447C  
                         l4299 3702                           l3851 1A3E                           l3843 19FA  
                         l3827 19A6                           l3819 197E                           l3835 19C4  
                         l3771 180A                           l3763 17D6                           l3747 176C  
                         l3739 175C                           l3755 177C                           l3691 168A  
                         l3683 1658                           l4395 2AA6                           l4387 2A5A  
                         l4379 2A28                           l4491 11E2                           l4483 1114  
                         l4475 1054                           l4467 0F84                           l4459 0EBC  
                         l5531 3AC2                           l5523 3AA6                           l5365 43F0  
                         l5605 3D48                           l5613 3D3E                           l5517 4306  
                         l5197 35B0                           l5189 357E                           l5269 2E42  
                         l5285 362A                           l5277 35D8                           l5349 2CCA  
                         l5461 406A                           l5293 2E90                           l5453 3B5C  
                         l5445 3B38                           l5437 3B1C                           l5381 3950  
                         l5373 3922                           l5541 3BF0                           l5429 39E0  
                         l5621 3E04                           l4821 38D8                           l4813 3880  
                         l4805 4486                           l3861 1ABA                           l3853 1A78  
                         l3829 19AE                           l3837 19D2                           l3773 180C  
                         l3765 17EC                           l3757 1780                           l3749 1770  
                         l3685 1668                           l3693 1692                           l3677 163C  
                         l4397 2AE2                           l4389 2A66                           l4493 1216  
                         l4485 1146                           l4477 1078                           l4469 0FB8  
                         l5533 3ACA                           l5701 32F6                           l5471 44F8  
                         l5607 3D8E                           l5455 44C8                           l5519 430E  
                         l5199 35B6                           l5287 364A                           l5279 35E0  
                         l5463 407A                           l5295 2EDE                           l5447 3B40  
                         l5375 3938                           l5383 3960                           l5367 3900  
                         l5543 3C06                           l5391 3A2E                           l5631 3F30  
                         l5551 4332                           l5623 3E10                           l4831 38F2  
                         l4823 38DA                           l4815 38A6                           l4807 4488  
                         l3871 1ADA                           l3863 1ABE                           l3847 1A24  
                         l3855 1A7A                           l3839 19D6                           l3791 1894  
                         l3783 185C                           l3775 1816                           l3767 17F8  
                         l3759 17AA                           l3695 16A2                           l3687 1678  
                         l3679 1648                           l4399 2AEE                           l4495 1248  
                         l4487 1178                           l4479 10AC                           l5535 3AD2  
                         l5711 335A                           l5703 32FE                           l5481 44FE  
                         l5473 44E0                           l5457 44D8                           l5289 3652  
                         l5465 409A                           l5801 2912                           l5721 415E  
                         l5297 2EF0                           l5449 3B48                           l5385 3976  
                         l5377 3940                           l5369 3904                           l5545 3C52  
                         l5393 3A36                           l5561 42C2                           l5633 3F48  
                         l5625 3F00                           l5641 3EB8                           l5553 4348  
                         l5617 3DE0                           l4833 38FC                           l4825 38E4  
                         l4817 38AA                           l4809 448A                           l3873 1AE8  
                         l3865 1ACC                           l3857 1A8A                           l3849 1A30  
                         l3793 1898                           l3785 186C                           l3777 1838  
                         l3769 17FC                           l3697 16A8                           l3689 1688  
                         l4497 127A                           l4489 11B0                           l5537 3AE2  
                         l5529 3AAE                           l5713 3376                           l5705 331A  
                         l5491 40BA                           l5483 4502                           l5475 44E4  
                         l5459 4062                           l5811 2976                           l5803 292A  
                         l5723 4162                           l5299 2EF4                           l5379 3948  
                         l5387 3A0C                           l5563 42CE                           l5635 3F54  
                         l5555 4356                           l5627 3F0C                           l5643 3EC4  
                         l5571 4282                           l5619 3DEC                           l5651 3DA4  
                         l4835 442E                           l4827 38E6                           l4819 38CE  
                         l3875 1AEA                           l3867 1AD2                           l3859 1A9A  
                         l3795 18A6                           l3787 187A                           l3779 1848  
                         l3699 16BA                           l4499 12B2                           l5731 31D4  
                         l5539 3AE6                           l5715 337E                           l5707 3336  
                         l5493 40E0                           l5485 40A6                           l5469 44F4  
                         l5477 44EA                           l5813 2978                           l5805 2946  
                         l5725 416C                           l5581 4392                           l5389 3A26  
                         l5565 42E6                           l5637 3F6C                           l5557 4362  
                         l5629 3F24                           l5573 4290                           l5645 3EDC  
                         l5661 3E94                           l5549 4326                           l5653 3DBC  
                         l5821 25CE                           l4837 4446                           l4829 38F0  
                         l3869 1AD4                           l3797 18A8                           l3789 1888  
                         l5741 3208                           l5733 31DA                           l5717 338A  
                         l5709 333E                           l4791 44B6                           l5495 40E2  
                         l5487 40AA                           l5479 44EE                           l5815 297A  
                         l5807 295E                           l5591 4452                           l5727 417C  
                         l5583 43A8                           l5399 3A3E                           l5639 3F78  
                         l5559 4378                           l5575 429C                           l5647 3EE8  
                         l5567 425E                           l5663 3EA0                           l5671 3E58  
                         l5655 3DC8                           l5831 2630                           l5823 25E4  
                         l3799 18B2                           l5751 323E                           l5743 320A  
                         l5735 31F2                           l5719 3396                           l5911 22CC  
                         l5903 22C0                           l4793 44BE                           l5489 40B2  
                         l5593 3C58                           l5817 2992                           l5809 2974  
                         l5729 4186                           l5577 42B4                           l5569 426A  
                         l5657 3E70                           l5585 422C                           l5665 3E28  
                         l5649 3D98                           l5673 448E                           l5841 2692  
                         l5833 2646                           l5825 25FA                           l5761 328A  
                         l5753 3256                           l5745 3238                           l5737 3204  
                         l5681 421E                           l5921 22EE                           l5913 22D8  
                         l5905 22C4                           l4795 44C0                           l5595 3C9E  
                         l5499 4192                           l5819 29A8                           l5771 27F6  
                         l5579 4386                           l5659 3E7C                           l5587 4238  
                         l5667 3E34                           l5675 44A2                           l5851 26F2  
                         l5843 26A6                           l5835 265A                           l5827 260E  
                         l5763 32A0                           l5755 326C                           l5747 323A  
                         l5739 3206                           l5683 3FD6                           l5931 230A  
                         l5923 22F6                           l5915 22DE                           l5907 22C8  
                         l4797 44C2                           l4789 44AC                           l5781 2852  
                         l5773 280E                           l5589 4250                           l5669 3E4C  
                         l5861 274A                           l5853 26FE                           l5845 26B2  
                         l5837 2666                           l5829 261A                           l5765 32B4  
                         l5757 326E                           l5749 323C                           l5677 41FA  
                         l5685 3FE8                           l5941 232A                           l5933 2322  
                         l5925 22FE                           l5917 22E2                           l5909 22CC  
                         l5599 3CA8                           l5791 28B2                           l5783 286A  
                         l5775 2826                           l5871 27AC                           l5863 2760  
                         l5855 2714                           l5847 26C8                           l5839 267C  
                         l4799 4470                           l5759 3270                           l5679 4206  
                         l5687 3FF8                           l5951 2334                           l5943 232C  
                         l5935 2324                           l5927 2302                           l5919 22E6  
                         l5793 28CA                           l5785 2882                           l5777 283E  
                         l5769 27F0                           l5873 27C2                           l5865 2776  
                         l5857 272A                           l5849 26DE                           l5697 32BE  
                         l5689 400A                           l5881 346E                           l5961 2340  
                         l5953 2338                           l5945 232E                           l5937 2326  
                         l5929 2306                           l5795 28E2                           l5787 289A  
                         l5779 2850                           l5875 27D6                           l5867 278A  
                         l5859 273E                           l5699 32DA                           l5891 34BA  
                         l5883 347A                           l5971 2366                           l5963 2342  
                         l5955 233A                           l5947 2330                           l5939 2328  
                         l5797 28FA                           l5789 28B0                           l5869 2796  
                         l5877 27E2                           l5893 34E0                           l5885 3482  
                         l5981 2396                           l5973 2368                           l5965 234C  
                         l5957 233C                           l5949 2332                           l5799 2910  
                         l5895 34F2                           l5879 3468                           l5991 23D4  
                         l5983 2398                           l5975 2370                           l5967 234E  
                         l5959 233E                           l5897 350A                           l5889 3494  
                         l5993 2438                           l5985 23A4                           l5977 2392  
                         l5969 2350                           l5899 351A                           l5995 2450  
                         l5987 23A6                           l5979 2394                           l5997 245C  
                         l5989 23B2                           l5999 2468                           STR_1 0E6D  
                         STR_2 0EA6                           STR_3 0E01                           STR_4 0EA6  
                         STR_5 0E1E                           STR_6 0EA6                           STR_7 0E39  
                         STR_8 0EA6                           STR_9 0E54                           u3000 18DE  
                         u3001 18DA                           u3010 1924                           u3011 1920  
                         u3100 1A10                           u3020 195A                           u3101 1A0C  
                         u3021 1956                           u3110 1A24                           u3030 196A  
                         u3111 1A20                           u3031 1966                           u3120 1A3E  
                         u3040 1996                           u4000 13C6                   _BAUD4CONbits 0EE9  
                         u3121 1A3A                           u3041 1992                           u4001 13C2  
                         u3130 1A78                           u3050 19A6                           u4010 1454  
                         u3131 1A74                           u3051 19A2                           u4011 1450  
                         u2500 3BCE                           u3300 1FB8                           u3140 1A8A  
                         u3060 19C2                           u4020 1516                           u2501 3BCA  
                         u3301 1FB4                           u3141 1A86                           u3061 19BE  
                         u4021 1512                           u3310 1FC8                           u3150 1A9A  
                         u3070 19D2                           u4030 15EA                           u3311 1FC4  
                         u3151 1A96                           u3071 19CE                           u4031 15E6  
                         u5000 40CE                           u3400 2182                           u3320 2008  
                         u3160 1ABA                           u3080 19E4                           u5001 40C6  
                         u3401 217E                           u3321 2004                           u3161 1AB6  
                         u3081 19E0                           u3410 2194                           u3330 2048  
                         u3170 1ACC                           u3090 19FA                           u3250 415C  
                         _T2PR 0FBC                           u3411 2190                           u3331 2044  
                         u3171 1AC8                           u3091 19F6                           u3251 4158  
                         u5020 4324                           u3420 21C2                           u3340 20BE  
                         u3260 1F40                           u3500 1B28                           u3180 1AE8  
                         u5100 3336                           u5021 4320                           u3421 21BE  
                         u3341 20BA                           u3261 1F3C                           u3501 1B24  
                         u3181 1AE4                           u5101 3332                           u3430 21D8  
                         u3350 20E0                           u3270 1F52                           u3510 1B38  
                         u5030 3B02                           u5110 335A                           u3431 21D4  
                         u3351 20DC                           u3271 1F4E                           u3511 1B34  
                         u5031 3AFE                           u5111 3356                           u2480 3B94  
                         u5040 3C06                           u5200 2630                           u3440 21EC  
                         u3360 210A                           u3280 1F62                           u3600 1DE6  
                         u3520 1B78                           u2800 1656                           u5120 3376  
                         u2481 3B90                           u5041 3C02                           u5201 262C  
                         u3441 21E8                           u3361 2106                           u3281 1F5E  
                         u3601 1DE2                           u3521 1B74                           u2801 1652  
                         u5121 3372                           u5018 40D0                           u5130 2824  
                         u2490 3BB2                           u5210 2646                           u3450 2206  
                         u3370 212E                           u3290 1FA6                           u3610 1E14  
                         u3530 1B8A                           u2810 1668                           u5050 3FE8  
                         u5131 2820                           u2491 3BAE                           u5211 2642  
                         u3451 2202                           u3371 212A                           u3291 1FA2  
                         u3611 1E10                           u3531 1B86                           u2811 1664  
                         u5051 3FE4                           u4500 3776                           u5140 2880  
                         u5300 27AC                           u5220 267C                           u3460 224E  
                         u3380 2144                           u3700 3726                           u3620 1E2A  
                         u3540 1B9A                           u2900 17C2                           u2820 1678  
                         u5060 400A                           u4501 3772                           u5141 287C  
                         u5301 27A8                           u5221 2678                           u3461 224A  
                         u3381 2140                           u3701 3722                           u3621 1E26  
                         u3541 1B96                           u2901 17BC                           u2821 1674  
                         u5061 4006                           u4510 37A8                           u5150 28E0  
                         u5310 27C2                           u5230 2692                           u3470 227E  
                         u3390 2162                           u3710 30FE                           u3630 1E3E  
                         u3550 1BD0                           u2910 17C4                           u2830 16BA  
                         u5070 32DA                           u4511 37A4                           u5151 28DC  
                         u5311 27BE                           u5231 268E                           u3471 227A  
                         u3391 215E                           u3711 30FA                           u3631 1E3A  
                         u3551 1BCC                           u2831 16B6                           u5071 32D6  
                         u4600 3554                           u4520 4124                           u5160 2940  
                         u5240 26C8                           u3480 22AC                           u3720 313C  
                         u3640 1E58                           u3560 1BE0                           u2920 17EC  
                         u2840 16D0                           u3800 307E                           u5080 32F6  
                         u5320 3490                           u4601 3550                           u4521 4120  
                         u5161 293C                           u5241 26C4                           u3481 22A8  
                         u3721 3138                           u3641 1E54                           u3561 1BDC  
                         u2921 17E8                           u2841 16CC                           u3801 307A  
                         u5081 32F2                           u5321 348C                           u4530 33B6  
                         u4610 356E                           u5170 29A8                           u5250 26DE  
                         u3730 315A                           u3650 1EA0                           u3570 1D5A  
                         u3490 1B16                           u2930 180A                           u2850 16E2  
                         u3810 309E                           u5090 331A                           u5330 34F2  
                         u4531 33B2                           u4611 356A                           u5171 29A4  
                         u5251 26DA                           u3731 3156                           u3651 1E9C  
                         u3491 1B12                           u2931 1806                           u2851 16DE  
                         u3811 309A                           u5091 3316                           u5331 34EE  
                         u4540 33D0                           u4620 358C                           u4700 2D12  
                         u5260 2714                           u5180 25E4                           u3740 317A  
                         u3660 1ECE                           u3580 1DB4                           u2940 182A  
                         u2860 16F2                           u3820 30AE                           u3900 2B1A  
                         u5340 2450                           u4541 33CC                           u4621 3588  
                         u4701 2D0C                           u5261 2710                           u5181 25E0  
                         u3741 3176                           u3661 1ECA                           u3581 1DB0  
                         u2941 1826                           u2861 16EE                           u3821 30AA  
                         u3901 2B16                           u5341 244C                           u4550 33F6  
                         u4630 35A2                           u4710 2D14                           u5270 272A  
                         u5190 25FA                           u3750 31CA                           u3670 1F08  
                         u3590 1DD4                           u2950 1838                           u2870 172E  
                         u3910 2B54                           u3830 29D4                           u5350 24F6  
                         u4551 33F2                           u4631 359E                           u5271 2726  
                         u5191 25F6                           u3751 31C6                           u3671 1F04  
                         u3591 1DD0                           u3575 1D50                           u2951 1834  
                         u2871 172A                           u3911 2B50                           u3831 29D0  
                         u5351 24F2                           u4560 3414                           u4640 35C6  
                         u4480 3740                           u4720 2D2E                           u4800 3606  
                         u5280 2760                           u3680 36B4                           u2960 1848  
                         u2880 173C                           u3760 2FE0                           u3920 2B62  
                         u3840 29E2                           u5360 253E                           u4561 3410  
                         u4641 35C2                           u4481 373C                           u4721 2D2A  
                         u4801 3602                           u5281 275C                           u3681 36B0  
                         u2961 1844                           u2881 1738                           u3761 2FDC  
                         u3921 2B5E                           u3841 29DE                           u5361 253A  
                         u5417 235A                           u4570 3430                           u4490 3750  
                         u4650 37EA                           u4730 2D44                           u4810 367C  
                         u5290 2776                           u3690 36F2                           u2970 187A  
                         u2890 17AA                           u3770 3014                           u3850 2A3E  
                         u3930 1146                           u5370 2554                           u4571 342C  
                         u4491 374C                           u4651 37E6                           u4731 2D40  
                         u4811 3678                           u5291 2772                           u3691 36EE  
                         u2971 1876                           u2891 17A6                           u3851 2A3A  
                         u3931 1142                           u5507 3214                           u5371 2550  
                         u5427 248A                           u4900 4406                           u4580 3456  
                         u4660 3808                           u4740 2DE6                           u4820 2E90  
                         u2980 1888                           u3780 3042                           u3860 2A94  
                         u3940 1178                           u5380 256A                           u4901 4402  
                         u4581 3452                           u4661 3804                           u4741 2DE2  
                         u4821 2E8C                           u2981 1884                           u3781 303E  
                         u3861 2A90                           u3941 1174                           u5517 3248  
                         u5381 2566                           u5437 24AE                           u4590 353A  
                         u4670 384E                           u4750 2DF8                           u4830 2F4C  
                         u4910 391A                           u2990 18A6                           u3790 3056  
                         u3870 2ADE                           u3950 11E2                           u5390 2578  
                         u4591 3536                           u4671 384A                           u4751 2DF4  
                         u4831 2F48                           u4911 3916                           u5607 39E6  
                         u2991 18A2                           u3791 3052                           u3775 300A  
                         u3871 2ADA                           u3951 11DE                           u5527 327C  
                         u5391 2574                           u5447 24D2                           u4680 385E  
                         u4760 2E08                           u4840 2B9C                           u4920 3938  
                         u3880 2AFC                           u3960 1248                           u4681 385A  
                         u4761 2E04                           u4841 2B98                           u4921 3934  
                         u5617 3ECE                           u5537 3DAE                           u3881 2AF8  
                         u3961 1244                           u5457 250C                           u4690 41D4  
                         u4770 2E22                           u4850 2C1C                           u4930 3976  
                         u3890 2B0C                           u3970 127A                           u4691 41D0  
                         u4771 2E1E                           u4851 2C18                           u5707 3B4E  
                         u4931 3972                           u5627 42A6                           u5547 3DF6  
                         u3891 2B08                           u3971 1276                           u5467 3AD8  
                         u4780 2E32                           u4860 2C40                           u4940 398C  
                         u3980 12E4                           u4781 2E2E                           u4861 2C3C  
                         u5717 4172                           u4941 3988                           u5637 3F16  
                         u5557 433C                           u3981 12E0                           u5477 4138  
                         u4790 2E42                           u4870 2C74                           u4950 3A88  
                         u3990 137E                           u4791 2E3E                           u4871 2C70  
                         u5727 2830                           u4951 3A84                           u5647 436C  
                         u5567 3E3E                           u3991 137A                           u5487 4210  
                         u4880 2C94                           u4960 3A0A                           u4881 2C90  
                         u5737 288C                           u5657 3F5E                           u4961 3A06  
                         u5577 4242                           u5497 31E4                           u4890 43F0  
                         u4970 3B78                           u4891 43EC                           u5747 28EC  
                         u4971 3B74                           u5667 42D8                           u5587 3E86  
                         u4980 44D8                           u4981 44D4                           u5757 2950  
                         u5677 3A64                           u5597 4274                           u4990 409A  
                         u4991 4096                           u5767 29B2                           u5687 439C  
                         u5777 4308                           u5697 3956                    main@current 00B0  
                  main@maximum 00AC                           abs@a 0008                           _dbuf 0164  
                         _main 22C0                           _dtoa 2CFE                           _path 0200  
         convert_rgb2hue@cCurr 003F                           _prec 00C6                           pad@i 0016  
                         pad@p 0013                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         btemp 0052                           _stop 3900            fullSpeedAhead@power 0017  
                         prodh 0FF4                           prodl 0FF3                           start 003A  
             __end_of_ADC_init 44C6                ___fldiv@new_exp 002C         __end_of_color_read_Red 3CA8  
                 ___param_bank 0000                 reading_hue@hue 0046                          ??_abs 000A  
                        ??_pad 0015                  ___fltol@sign1 003C                __end_of___fladd 1AFC  
                        ?_main 0001                          ?_dtoa 0018                          _ADPCH 0F5F  
              __end_of___fldiv 22C0                __end_of___awdiv 3468                          STR_10 0EA6  
                        STR_11 0E85                          STR_12 0E9A                __end_of___awmod 35D8  
              __end_of___flmul 1F26                __end_of___flsub 4062                __end_of___fltol 30D0  
                        ?_stop 0014                ___awdiv@divisor 0004                __end_of___lwdiv 3BEE  
                        i1l668 0032                ___awdiv@counter 0006              ??_convert_rgb2hue 0040  
                 vfpfcnvrt@fmt 0024                          _TMR0H 0FD4                          _TMR0L 0FD3  
              __end_of_left135 42C2        __end_of_sendCharSerial4 44DE     __end_of_I2C_2_Master_Start 44FE  
   __end_of_I2C_2_Master_Write 44EA                          _flags 00C8            read_prec_or_width@c 000A  
          read_prec_or_width@n 000B                          _fputc 3730                          _fputs 40E6  
                        pad@fp 0010                          _width 00C4                          _putch 4508  
                        dtoa@d 0019                          dtoa@i 0021                          dtoa@p 001D  
              __end_of_right90 4356                          dtoa@s 0020                          dtoa@w 001E  
                 ?_reading_hue 0042                __end_of_moveRed 3E28                          tablat 0FF5  
        moveYellow@path_length 001F                __end_of_turn180 42F4                          ttemp5 0053  
                        ttemp6 0056                          ttemp7 005A                          status 0FD8  
                        wtemp8 0053                __end_of_sprintf 41C6          convert_rgb2hue@redmax 0064  
      __end_of_color_read_Blue 3D98          _I2C_2_Master_RepStart 44FE                ?_color_read_Red 0006  
              __initialization 3F90                   __end_of_main 25CE                   __end_of_dtoa 2E76  
                 __end_of_stop 398E          __end_of_moveLightBlue 3F00                _get16bitTMR0val 442E  
                       ??_main 004D                         ??_dtoa 001B                         ??_stop 0016  
                __activetblptr 0003     __end_of_read_prec_or_width 3686                _reverseStraight 32BE  
                 ?_setMotorPWM 000F                         ?_fputc 0002                         ?_fputs 000A  
                       _ADRESH 0F64                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21               ___awdiv@dividend 0002  
             __end_of_backHalf 43B6                         ?_putch 0001                         _RC0PPS 0E62  
                       _RC4REG 0EE3                         _RE2PPS 0E74                         _RD5PPS 0E6F  
                       _RC7PPS 0E69                         i1l3271 001E                         i1l3273 002E  
                       _RE4PPS 0E76                         _RD6PPS 0E70                         _RG6PPS 0E88  
                vfpfcnvrt@done 002C       __end_of_color_click_init 4192                         _RX4PPS 0E15  
                       _TX4REG 0EE4               __end_of___xxtofl 2B76    convert_rgb2hue@greencurrent 0068  
             __end_of_decision 27F0                         _LowISR 0018                   _CCPTMRS0bits 0FAD  
                 vfprintf@cfmt 0031                         ___flge 30D0                         ___fleq 3686  
                    ??___fladd 000A                         ___wmul 4408                      ??___fldiv 0023  
             backOneAndHalf@mL 0019                      ??___awdiv 0006               backOneAndHalf@mR 001A  
                    ??___awmod 0006                      ??___flmul 000A                      ??___flsub 001A  
                    ??___fltol 0038                      ??___lwdiv 000C                         _left90 4356  
         read_prec_or_width@ap 0009                   ?_reverseTurn 001D                         clear_0 3FA8  
                       clear_1 3FB4                         clear_2 3FC0               ___awdiv@quotient 0008  
              ___awmod@divisor 0004                         _motorL 00D4                         _motorR 00CB  
                       isa$std 0001                ___awmod@counter 0006                      ??_left135 001B  
           send2USART@hue_char 0060                         pad@buf 0011               __end_of_right135 4290  
                       dtoa@fp 0018               __end_of_moveBlue 3F90               __end_of_movePink 3E70  
                       fputc@c 0002                         fputs@c 000D                         fputs@i 000E  
                       fputs@s 000A                      ??_right90 001B                   __mediumconst 0000  
      calibration_routine@cCal 0045                      ??_moveRed 0021                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8                      ?_ADC_init 0001  
             ?_sendCharSerial4 0001         convert_rgb2hue@bluemax 0074                         putch@c 0001  
             __end_of_vfprintf 40A4                      ??_turn180 001B                         stop@mL 0014  
                       stop@mR 0015              ??_initDCmotorsPWM 0004                      ??_sprintf 0038  
             __end_of_turnLeft 3A8A                     ___flge@ff1 0002                     ___flge@ff2 0006  
                 ___xxtofl@arg 000C                   ___xxtofl@exp 000B                   ___xxtofl@val 0002  
                   ___fleq@ff1 0002                     ___fleq@ff2 0006                fullSpeedBack@mL 0014  
              fullSpeedBack@mR 0015                     __accesstop 0060        __end_of__initialization 3FCC  
     __end_of_color_read_Clear 3D48       __end_of_color_read_Green 3CF8         ?_I2C_2_Master_RepStart 0001  
               _backOneAndHalf 422C                  ___rparam_used 0001                     ___fltol@f1 0034  
             ?_color_read_Blue 0006                 __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 4450  
                _fullSpeedBack 3B04                   __pidataBANK0 450A                  __end_of_fputc 37DA  
                __end_of_fputs 4126                  __end_of_putch 450A        __end_of_reverseStraight 33A4  
             reading_hue@cCurr 0042            moveBlue@path_length 001F                     ??_ADC_init 0002  
               main@clear_norm 00BA                     backHalf@mL 0019                     backHalf@mR 001A  
                      ??_fputc 0005                        ??_fputs 000D                        ??_putch 0002  
                   __pbssBANK0 00BC                     __pbssBANK1 0100                     __pbssBANK2 0200  
       __end_of_backOneAndHalf 425E                        ?_LowISR 0001              _color_writetoaddr 4450  
                 _T2CLKCONbits 0FBF                 ?_fullSpeedBack 0014                _convert_rgb2hue 0EAA  
                      ?___flge 0002                        ?___fleq 0002             ?_color_writetoaddr 0004  
                _customDelayMs 4126                        ?___wmul 0002                        ?_left90 0019  
                    ?_backHalf 0019            ??_color_writetoaddr 0005                      ?___xxtofl 0002  
          _convert_rgb2hue$430 0084            _convert_rgb2hue$431 0088            _convert_rgb2hue$432 008C  
          _convert_rgb2hue$429 0080                      ?_decision 0047                        _SP4BRGH 0EE6  
                      _SP4BRGL 0EE5                  decision@color 004B                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5                    moveGreen@mL 001D                    moveGreen@mR 001E  
              ?_backOneAndHalf 0019         color_writetoaddr@value 0004               ??_color_read_Red 0008  
    __end_of_color_writetoaddr 4470                      _ADREFbits 0F58                      ?_right135 0019  
           _I2C_2_Master_Start 44F4                     _initUSART4 4470             _I2C_2_Master_Write 44DE  
                    ?_moveBlue 001D                        __Hparam 0000                      ?_movePink 001D  
                      __Lparam 0000              color_read_Red@tmp 000B                    moveWhite@mL 001D  
                  moveWhite@mR 001E      customDelayMs@milliseconds 0002                 ?_customDelayMs 0002  
      sendStringSerial4@string 0003               ?_get16bitTMR0val 0002                        ___fladd 163C  
                      ___fldiv 1F26                        ___awdiv 33A4                        ___awmod 3528  
                      ___flmul 1AFC                        ___flsub 401C                        ___fltol 2FCA  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 3B7A            ?_I2C_2_Master_Write 0001  
                    ?_vfprintf 002E                   __psmallconst 0E00                        __pcinit 3F90  
                   ??_backHalf 001B              __end_of_logAction 3C58                        __ramtop 0E00  
             ?_reverseStraight 0019                     _send2USART 448E                      ?_turnLeft 0014  
                      _left135 4290                        __ptext0 22C0                        __ptext1 3468  
                      __ptext2 3FD6                        __ptext3 32BE                        __ptext4 3A8A  
                      __ptext5 4126                        __ptext6 41FA                        __ptext7 31D4  
                      __ptext8 0EAA                        __ptext9 29C2                      _T2CONbits 0FBD  
        read_prec_or_width@fmt 0008                     ??___xxtofl 0006               ___awmod@dividend 0002  
                   ??_decision 004B         reverseStraight@delayMs 001D                        _right90 4326  
                    _T2HLTbits 0FBE                        _moveRed 3DE0                  _RxBufWriteCnt 0051  
                      _turn180 42C2                        _sprintf 4192                        main@hue 00B6  
         ??_I2C_2_Master_Start 0003           ??_I2C_2_Master_Write 0003           end_of_initialization 3FCC  
            __end_of_moveGreen 3F48              __end_of_moveWhite 422C                        fputc@fp 0004  
      __end_of_convert_rgb2hue 163C                        fputs@fp 000C              ?_color_click_init 0001  
           _read_prec_or_width 35D8                     _moveOrange 3E70                     ??_right135 001B  
                   _moveYellow 3D98                ??_fullSpeedBack 0016                     ??_moveBlue 0021  
           ??_color_click_init 0006        convert_rgb2hue@clearmax 007C                     ??_movePink 0021  
             _colorCalibration 00E5              __end_of_vfpfcnvrt 2CFE                        postdec1 0FE5  
                      postdec2 0FDD            ?_read_prec_or_width 0008                        postinc0 0FEE  
                      postinc1 0FE6                        postinc2 0FDE               vfpfcnvrt@convarg 0028  
                   ??_vfprintf 0031        convert_rgb2hue@greenmax 006C                   _colorCurrent 00DD  
                   _returnHome 3468                _initDCmotorsPWM 3870                     ??_turnLeft 0016  
                    _PORTFbits 0F8E             setMotorPWM@negDuty 0013              __end_of_turnRight 3A0C  
                  ___fladd@grs 0011       reverseTurn@turnDirection 001F                  ___xxtofl@sign 000A  
                  returnHome@i 002C                      _TRISAbits 0F81             setMotorPWM@posDuty 0012  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
                logAction@time 0008               convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A  
             convert_rgb2hue@g 00A4                    ___fldiv@grs 002E               convert_rgb2hue@r 00A0  
                  ___fldiv@rem 0027               fullSpeedAhead@mL 0014               fullSpeedAhead@mR 0015  
     color_writetoaddr@address 0005        ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 000F  
                  _CCP1CONbits 0FAB            _calibration_routine 27F0              ?_color_read_Clear 0006  
                 _EUSART4RXbuf 0150                   _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0006     convert_rgb2hue@bluecurrent 0070            movePink@path_length 001F  
                  _CCP3CONbits 0F26                    ?_initUSART4 0001                    _CCP4CONbits 0F22  
    sendCharSerial4@charToSend 0002                ??_customDelayMs 0004             ??_color_read_Clear 0008  
           ??_color_read_Green 0008                 __end_of_LowISR 003A      convert_rgb2hue@redcurrent 0060  
               __end_of___flge 31D4                 __end_of___fleq 3730                 _fullSpeedAhead 3A8A  
                  vfpfcnvrt@ap 0025                    vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023  
               __end_of___wmul 442E                 __end_of_left90 4386                    ?_send2USART 0045  
         ?_calibration_routine 0045            reverseStraight@time 001B            color_read_Clear@tmp 000B  
          start_initialization 3F90           moveGreen@path_length 001F   calibration_routine@cal_state 0060  
                  __end_of_abs 41FA                    __end_of_pad 3870                  _TxBufWriteCnt 0050  
             ?_convert_rgb2hue 003E                    ?_moveOrange 001D                    ?_moveYellow 001D  
          color_read_Green@tmp 000B                       ??_LowISR 0001        __end_of_initDCmotorsPWM 3900  
                  vfprintf@fmt 002F         __end_of_fullSpeedAhead 3B04                       ??___flge 000A  
                     ??___fleq 000A                       ??___wmul 0006                       ??_left90 001B  
                  __pdataBANK0 00ED                    ?_returnHome 0021          ??_calibration_routine 0046  
                _moveLightBlue 3EB8                      ___fladd@a 0006                      ___fladd@b 0002  
                    ___fldiv@a 001F                      ___fldiv@b 001B                      ___flmul@a 0006  
                    ___flmul@b 0002                    __pbssCOMRAM 004F                      ___flsub@a 0016  
                    ___flsub@b 0012                  __pcstackBANK0 0060               ??_backOneAndHalf 001B  
            reverseStraight@mL 0019              reverseStraight@mR 001A                  ??_reading_hue 0044  
          decision@path_length 0049                     right135@mL 0019                     right135@mR 001A  
             ___lwdiv@dividend 0008                      _dtoa$3045 001B                ?_fullSpeedAhead 0014  
                     ?___fladd 0002                       ?___fldiv 001B                       ?___awdiv 0002  
                     ?___awmod 0002                       ?___flmul 0002                       ?___flsub 0012  
                     ?___fltol 0034                       ?___lwdiv 0008                     moveBlue@mL 001D  
                   moveBlue@mR 001E                 ?_moveLightBlue 001D                    __pintcodelo 0018  
                     ?_left135 0019                   _readingIndex 00C9           I2C_2_Master_Read@ack 0004  
         I2C_2_Master_Read@tmp 0005                    __smallconst 0E00                     movePink@mL 001D  
                   movePink@mR 001E              _I2C_2_Master_Idle 43E0                      _logAction 3BEE  
            _I2C_2_Master_Init 43B6              _I2C_2_Master_Read 40A4                       ?_right90 0019  
            _I2C_2_Master_Stop 44EA                       ?_moveRed 001D                   _RxBufReadCnt 00CA  
                     _ADC_init 44AC             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010                       ?_turn180 0019  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0002  
                     ?_sprintf 0032              _sendStringSerial4 42F4            ??_I2C_2_Master_Idle 0002  
          ??_I2C_2_Master_Init 0002            ??_I2C_2_Master_Read 0003                 ___wmul@product 0006  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0003                       _LATCbits 0F7B  
                     _LATDbits 0F7C                       _LATEbits 0F7D                       _LATFbits 0F7E  
                     _LATGbits 0F7F                       _LATHbits 0F80                       _IPR0bits 0E1F  
                     _PIE0bits 0E29             ?_sendStringSerial4 0003                      _moveGreen 3F00  
                     _PIE4bits 0E2D            __end_of_reading_hue 32BE                       i1u225_20 002E  
                     i1u225_21 002A                      _moveWhite 41FA                    turnRight@mL 0014  
                  turnRight@mR 0015                       _PIR0bits 0E33                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0002                      left135@mL 0019                      left135@mR 001A  
            ??_sendCharSerial4 0002                       _SSP2CON2 0EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 0ED8                  ??_reverseTurn 0020                      _vfpfcnvrt 2B76  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 4408      __end_of_I2C_2_Master_Init 43E0  
    __end_of_I2C_2_Master_Read 40E6              ___wmul@multiplier 0002      __end_of_I2C_2_Master_Stop 44F4  
                 setMotorPWM@m 000F    I2C_2_Master_Write@data_byte 0003                    _ldrReadings 013C  
                   ?_logAction 0008              ??_color_read_Blue 0008                   _TxBufReadCnt 004F  
                    _turnRight 398E      __end_of_sendStringSerial4 4326                   moveOrange@mL 001D  
                 moveOrange@mR 001E  __end_of_I2C_2_Master_RepStart 4508             color_read_Blue@tmp 000B  
          __end_of_setMotorPWM 2FCA                main@path_length 00B8                   ??_initUSART4 0002  
                   ?_moveGreen 001D                     ?_moveWhite 001D                       __Hrparam 0000  
                   vfprintf@ap 0030                       __Lrparam 0000                     vfprintf@fp 002E  
        __end_of_fullSpeedBack 3B7A                ??_moveLightBlue 0021                   moveYellow@mL 001D  
                 moveYellow@mR 001E                     ?_vfpfcnvrt 0023          moveOrange@path_length 001F  
                     _backHalf 4386                   ??_send2USART 0047                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                       _dataFlag 00ED                     sprintf@fmt 0033  
                     ___xxtofl 29C2                     _T0CON0bits 0FD5                     _T0CON1bits 0FD6  
                     _decision 25CE            __end_of_reverseTurn 401C                      right90@mL 0019  
                    right90@mR 001A                ___lwdiv@divisor 000A             __end_of_initUSART4 448E  
              ___lwdiv@counter 000E                     ?_turnRight 0014                       __ptext10 2FCA  
                     __ptext11 401C                       __ptext20 25CE                       __ptext12 163C  
                     __ptext21 448E                       __ptext13 1AFC                       __ptext30 3EB8  
                     __ptext22 3D98                       __ptext14 30D0                       __ptext31 4290  
                     __ptext23 3DE0                       __ptext15 3686                       __ptext40 3B04  
                     __ptext32 3F00                       __ptext24 4326                       __ptext16 1F26  
                     __ptext41 2E76                       __ptext33 4356                       __ptext25 3E28  
                     __ptext17 4470                       __ptext50 35D8                       __ptext42 3B7A  
                     __ptext34 3F48                       __ptext26 422C                       __ptext18 3870  
                     __ptext51 4408                       __ptext43 415E                       __ptext35 42C2  
                     __ptext27 3E70                       __ptext19 442E                       __ptext60 42F4  
                     __ptext52 2CFE                       __ptext44 4450                       __ptext36 3A0C  
                     __ptext28 425E                       __ptext61 44C6                       __ptext53 37DA  
                     __ptext45 43B6                       __ptext37 3BEE                       __ptext29 398E  
                     __ptext70 40A4                       __ptext62 3C58                       __ptext54 40E6  
                     __ptext46 27F0                       __ptext38 4386                       __ptext71 43E0  
                     __ptext63 3CA8                       __ptext55 3730                       __ptext47 4192  
                     __ptext39 3900                       __ptext72 44AC                       __ptext64 3CF8  
                     __ptext56 4508                       __ptext48 4062                       __ptext65 3D48  
                     __ptext57 41C6                       __ptext49 2B76                       __ptext66 44DE  
                     __ptext58 3528                       __ptext67 44EA                       __ptext59 33A4  
                     __ptext68 44F4                       __ptext69 44FE                    decision@hue 0047  
                    moveRed@mL 001D                      moveRed@mR 001E                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA                    _reading_hue 31D4                  reverseTurn@mL 001D  
                reverseTurn@mR 001E                   ??_moveOrange 0021                     turnLeft@mL 0014  
                   turnLeft@mR 0015                   ??_moveYellow 0021             __end_of_send2USART 44AC  
                     _right135 425E                       _moveBlue 3F48                       _movePink 3E28  
                   turnRight@i 0017             moveRed@path_length 001F          __end_of_customDelayMs 415E  
                     isa$xinst 0000                       left90@mL 0019                       left90@mR 001A  
                   _RC4STAbits 0EE7                       int$flags 0052                       _vfprintf 4062  
                 ??_returnHome 0027                       main@time 00B4                       _turnLeft 3A0C  
                    turn180@mL 0019                      turn180@mR 001A                    ??_logAction 000C  
                   _INTCONbits 0FF2                 customDelayMs@i 0005             __end_of_moveOrange 3EB8  
           __end_of_moveYellow 3DE0                    _setMotorPWM 2E76              ??_get16bitTMR0val 0004  
                     intlevel1 0000                      sprintf@ap 0038           returnHome@pathLength 0025  
            ??_reverseStraight 001D               ??_fullSpeedAhead 0016       moveLightBlue@path_length 001F  
get16bitTMR0val@combined_value 0008             __end_of_returnHome 3528                    ??_moveGreen 0021  
             returnHome@action 002B                      turnLeft@i 0017                    ??_moveWhite 001F  
  __end_of_calibration_routine 29C2    convert_rgb2hue@clearcurrent 0078                  send2USART@hue 0045  
                  ??_vfpfcnvrt 0026                    _reverseTurn 3FD6               _color_click_init 415E  
                     sprintf@f 0039                       sprintf@s 0032                     _SSP2DATPPS 0E1D  
                   _SSP2CLKPPS 0E1C                    ??_turnRight 0016                  ___fladd@signs 000E  
                   _TX4STAbits 0EE8                _sendCharSerial4 44C6                 returnHome@path 0023  
               returnHome@time 0029                   ___fladd@aexp 000F                   ___fladd@bexp 0010  
                 returnHome@mL 0021                   returnHome@mR 0022                logAction@action 000C  
