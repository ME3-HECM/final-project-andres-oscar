

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Mar 11 18:45:06 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    57   000000                     
    58                           ; Generated 21/07/2023 GMT
    59                           ; 
    60                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution. Publication is not required when
    74                           ;        this file is used in an embedded application.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F67K40 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92   000000                     
    93                           	psect	idataBANK0
    94   002422                     __pidataBANK0:
    95                           	callstack 0
    96                           
    97                           ;initializer for _dataFlag
    98   002422  01                 	db	1
    99   000000                     _TX4REG	set	3812
   100   000000                     _RC4STAbits	set	3815
   101   000000                     _SP4BRGH	set	3814
   102   000000                     _TRISFbits	set	3974
   103   000000                     _LATFbits	set	3966
   104   000000                     _LATHbits	set	3968
   105   000000                     _TRISAbits	set	3969
   106   000000                     _TRISEbits	set	3973
   107   000000                     _TRISGbits	set	3975
   108   000000                     _TRISDbits	set	3972
   109   000000                     _PORTFbits	set	3982
   110   000000                     _SSP2CON2bits	set	3802
   111   000000                     _RX4PPS	set	3605
   112   000000                     _SSP2CLKPPS	set	3612
   113   000000                     _SSP2DATPPS	set	3613
   114   000000                     _ANSELDbits	set	3751
   115   000000                     _SSP2ADD	set	3798
   116   000000                     _SSP2CON1bits	set	3801
   117   000000                     _LATAbits	set	3961
   118   000000                     _LATEbits	set	3965
   119   000000                     _LATGbits	set	3967
   120   000000                     _LATCbits	set	3963
   121   000000                     _LATDbits	set	3964
   122   000000                     _CCPR2H	set	4006
   123   000000                     _CCPR1H	set	4010
   124   000000                     _RC4REG	set	3811
   125   000000                     _SP4BRGL	set	3813
   126   000000                     _TX4STAbits	set	3816
   127   000000                     _BAUD4CONbits	set	3817
   128   000000                     _SSP2CON2	set	3802
   129   000000                     _CCPR4H	set	3873
   130   000000                     _CCPR3H	set	3877
   131   000000                     _SSP2STAT	set	3800
   132   000000                     _ANSELFbits	set	3764
   133   000000                     _SSP2BUF	set	3797
   134   000000                     _PIE4bits	set	3629
   135   000000                     _PIR4bits	set	3639
   136   000000                     _RC0PPS	set	3682
   137   000000                     _RC7PPS	set	3689
   138   000000                     _RD5PPS	set	3695
   139   000000                     _RE2PPS	set	3700
   140   000000                     _RD6PPS	set	3696
   141   000000                     _CCP1CONbits	set	4011
   142   000000                     _CCPTMRS0bits	set	4013
   143   000000                     _T2PR	set	4028
   144   000000                     _T2CONbits	set	4029
   145   000000                     _CCP2CONbits	set	4007
   146   000000                     _CCP3CONbits	set	3878
   147   000000                     _ADREFbits	set	3928
   148   000000                     _CCP4CONbits	set	3874
   149   000000                     _TRISHbits	set	3976
   150   000000                     _TRISCbits	set	3971
   151   000000                     _ADPCH	set	3935
   152   000000                     _ADRESH	set	3940
   153   000000                     _ADCON0bits	set	3936
   154   000000                     _RE4PPS	set	3702
   155   000000                     _RG6PPS	set	3720
   156   000000                     _T2CLKCONbits	set	4031
   157   000000                     _T2HLTbits	set	4030
   158                           
   159                           	psect	smallconst
   160   000E00                     __psmallconst:
   161                           	callstack 0
   162   000E00  00                 	db	0
   163   000E01                     STR_7:
   164                           
   165                           ; BSR set to: 15
   166   000E01  43                 	db	67	;'C'
   167   000E02  61                 	db	97	;'a'
   168   000E03  6C                 	db	108	;'l'
   169   000E04  69                 	db	105	;'i'
   170   000E05  62                 	db	98	;'b'
   171   000E06  72                 	db	114	;'r'
   172   000E07  61                 	db	97	;'a'
   173   000E08  74                 	db	116	;'t'
   174   000E09  69                 	db	105	;'i'
   175   000E0A  6F                 	db	111	;'o'
   176   000E0B  6E                 	db	110	;'n'
   177   000E0C  20                 	db	32
   178   000E0D  73                 	db	115	;'s'
   179   000E0E  74                 	db	116	;'t'
   180   000E0F  61                 	db	97	;'a'
   181   000E10  74                 	db	116	;'t'
   182   000E11  65                 	db	101	;'e'
   183   000E12  3D                 	db	61	;'='
   184   000E13  67                 	db	103	;'g'
   185   000E14  72                 	db	114	;'r'
   186   000E15  65                 	db	101	;'e'
   187   000E16  65                 	db	101	;'e'
   188   000E17  00                 	db	0
   189   000E18                     STR_5:
   190                           
   191                           ; BSR set to: 15
   192   000E18  43                 	db	67	;'C'
   193   000E19  61                 	db	97	;'a'
   194   000E1A  6C                 	db	108	;'l'
   195   000E1B  69                 	db	105	;'i'
   196   000E1C  62                 	db	98	;'b'
   197   000E1D  72                 	db	114	;'r'
   198   000E1E  61                 	db	97	;'a'
   199   000E1F  74                 	db	116	;'t'
   200   000E20  69                 	db	105	;'i'
   201   000E21  6F                 	db	111	;'o'
   202   000E22  6E                 	db	110	;'n'
   203   000E23  20                 	db	32
   204   000E24  73                 	db	115	;'s'
   205   000E25  74                 	db	116	;'t'
   206   000E26  61                 	db	97	;'a'
   207   000E27  74                 	db	116	;'t'
   208   000E28  65                 	db	101	;'e'
   209   000E29  3D                 	db	61	;'='
   210   000E2A  72                 	db	114	;'r'
   211   000E2B  65                 	db	101	;'e'
   212   000E2C  64                 	db	100	;'d'
   213   000E2D  00                 	db	0
   214   000E2E                     STR_15:
   215                           
   216                           ; BSR set to: 15
   217   000E2E  56                 	db	86	;'V'
   218   000E2F  6F                 	db	111	;'o'
   219   000E30  6C                 	db	108	;'l'
   220   000E31  74                 	db	116	;'t'
   221   000E32  61                 	db	97	;'a'
   222   000E33  67                 	db	103	;'g'
   223   000E34  65                 	db	101	;'e'
   224   000E35  20                 	db	32
   225   000E36  3D                 	db	61	;'='
   226   000E37  20                 	db	32
   227   000E38  25                 	db	37
   228   000E39  64                 	db	100	;'d'
   229   000E3A  2E                 	db	46
   230   000E3B  25                 	db	37
   231   000E3C  30                 	db	48	;'0'
   232   000E3D  32                 	db	50	;'2'
   233   000E3E  64                 	db	100	;'d'
   234   000E3F  2C                 	db	44
   235   000E40  20                 	db	32
   236   000E41  20                 	db	32
   237   000E42  00                 	db	0
   238   000E43                     STR_14:
   239                           
   240                           ; BSR set to: 15
   241   000E43  54                 	db	84	;'T'
   242   000E44  45                 	db	69	;'E'
   243   000E45  53                 	db	83	;'S'
   244   000E46  54                 	db	84	;'T'
   245   000E47  49                 	db	73	;'I'
   246   000E48  4E                 	db	78	;'N'
   247   000E49  47                 	db	71	;'G'
   248   000E4A  20                 	db	32
   249   000E4B  43                 	db	67	;'C'
   250   000E4C  4F                 	db	79	;'O'
   251   000E4D  4D                 	db	77	;'M'
   252   000E4E  50                 	db	80	;'P'
   253   000E4F  4C                 	db	76	;'L'
   254   000E50  45                 	db	69	;'E'
   255   000E51  54                 	db	84	;'T'
   256   000E52  45                 	db	69	;'E'
   257   000E53  44                 	db	68	;'D'
   258   000E54  20                 	db	32
   259   000E55  0A                 	db	10
   260   000E56  0D                 	db	13
   261   000E57  00                 	db	0
   262   000E58                     STR_2:
   263                           
   264                           ; BSR set to: 15
   265   000E58  47                 	db	71	;'G'
   266   000E59  72                 	db	114	;'r'
   267   000E5A  65                 	db	101	;'e'
   268   000E5B  65                 	db	101	;'e'
   269   000E5C  6E                 	db	110	;'n'
   270   000E5D  5F                 	db	95	;'_'
   271   000E5E  6C                 	db	108	;'l'
   272   000E5F  69                 	db	105	;'i'
   273   000E60  67                 	db	103	;'g'
   274   000E61  68                 	db	104	;'h'
   275   000E62  74                 	db	116	;'t'
   276   000E63  3D                 	db	61	;'='
   277   000E64  25                 	db	37
   278   000E65  64                 	db	100	;'d'
   279   000E66  2C                 	db	44
   280   000E67  20                 	db	32
   281   000E68  0A                 	db	10
   282   000E69  0D                 	db	13
   283   000E6A  00                 	db	0
   284   000E6B                     STR_9:
   285                           
   286                           ; BSR set to: 15
   287   000E6B  43                 	db	67	;'C'
   288   000E6C  61                 	db	97	;'a'
   289   000E6D  6C                 	db	108	;'l'
   290   000E6E  69                 	db	105	;'i'
   291   000E6F  62                 	db	98	;'b'
   292   000E70  72                 	db	114	;'r'
   293   000E71  61                 	db	97	;'a'
   294   000E72  74                 	db	116	;'t'
   295   000E73  69                 	db	105	;'i'
   296   000E74  6F                 	db	111	;'o'
   297   000E75  6E                 	db	110	;'n'
   298   000E76  20                 	db	32
   299   000E77  73                 	db	115	;'s'
   300   000E78  74                 	db	116	;'t'
   301   000E79  61                 	db	97	;'a'
   302   000E7A  74                 	db	116	;'t'
   303   000E7B  65                 	db	101	;'e'
   304   000E7C  3D                 	db	61	;'='
   305   000E7D  00                 	db	0
   306   000E7E                     STR_1:
   307                           
   308                           ; BSR set to: 15
   309   000E7E  52                 	db	82	;'R'
   310   000E7F  65                 	db	101	;'e'
   311   000E80  64                 	db	100	;'d'
   312   000E81  5F                 	db	95	;'_'
   313   000E82  6C                 	db	108	;'l'
   314   000E83  69                 	db	105	;'i'
   315   000E84  67                 	db	103	;'g'
   316   000E85  68                 	db	104	;'h'
   317   000E86  74                 	db	116	;'t'
   318   000E87  3D                 	db	61	;'='
   319   000E88  25                 	db	37
   320   000E89  64                 	db	100	;'d'
   321   000E8A  2C                 	db	44
   322   000E8B  20                 	db	32
   323   000E8C  0A                 	db	10
   324   000E8D  0D                 	db	13
   325   000E8E  00                 	db	0
   326   000E8F                     STR_4:
   327                           
   328                           ; BSR set to: 15
   329   000E8F  41                 	db	65	;'A'
   330   000E90  6C                 	db	108	;'l'
   331   000E91  6C                 	db	108	;'l'
   332   000E92  5F                 	db	95	;'_'
   333   000E93  6C                 	db	108	;'l'
   334   000E94  69                 	db	105	;'i'
   335   000E95  67                 	db	103	;'g'
   336   000E96  68                 	db	104	;'h'
   337   000E97  74                 	db	116	;'t'
   338   000E98  73                 	db	115	;'s'
   339   000E99  3D                 	db	61	;'='
   340   000E9A  25                 	db	37
   341   000E9B  64                 	db	100	;'d'
   342   000E9C  20                 	db	32
   343   000E9D  0A                 	db	10
   344   000E9E  0D                 	db	13
   345   000E9F  00                 	db	0
   346   000EA0                     STR_3:
   347                           
   348                           ; BSR set to: 15
   349   000EA0  42                 	db	66	;'B'
   350   000EA1  6C                 	db	108	;'l'
   351   000EA2  75                 	db	117	;'u'
   352   000EA3  65                 	db	101	;'e'
   353   000EA4  5F                 	db	95	;'_'
   354   000EA5  6C                 	db	108	;'l'
   355   000EA6  69                 	db	105	;'i'
   356   000EA7  67                 	db	103	;'g'
   357   000EA8  68                 	db	104	;'h'
   358   000EA9  74                 	db	116	;'t'
   359   000EAA  3D                 	db	61	;'='
   360   000EAB  25                 	db	37
   361   000EAC  64                 	db	100	;'d'
   362   000EAD  20                 	db	32
   363   000EAE  0A                 	db	10
   364   000EAF  0D                 	db	13
   365   000EB0  00                 	db	0
   366   000EB1                     STR_16:
   367                           
   368                           ; BSR set to: 15
   369   000EB1  68                 	db	104	;'h'
   370   000EB2  75                 	db	117	;'u'
   371   000EB3  65                 	db	101	;'e'
   372   000EB4  3D                 	db	61	;'='
   373   000EB5  25                 	db	37
   374   000EB6  30                 	db	48	;'0'
   375   000EB7  35                 	db	53	;'5'
   376   000EB8  64                 	db	100	;'d'
   377   000EB9  2C                 	db	44
   378   000EBA  20                 	db	32
   379   000EBB  20                 	db	32
   380   000EBC  00                 	db	0
   381   000EBD                     STR_12:
   382                           
   383                           ; BSR set to: 15
   384   000EBD  61                 	db	97	;'a'
   385   000EBE  6D                 	db	109	;'m'
   386   000EBF  62                 	db	98	;'b'
   387   000EC0  69                 	db	105	;'i'
   388   000EC1  65                 	db	101	;'e'
   389   000EC2  6E                 	db	110	;'n'
   390   000EC3  74                 	db	116	;'t'
   391   000EC4  20                 	db	32
   392   000EC5  0A                 	db	10
   393   000EC6  0D                 	db	13
   394   000EC7  00                 	db	0
   395   000EC8                     STR_8:
   396                           
   397                           ; BSR set to: 15
   398   000EC8  67                 	db	103	;'g'
   399   000EC9  72                 	db	114	;'r'
   400   000ECA  65                 	db	101	;'e'
   401   000ECB  65                 	db	101	;'e'
   402   000ECC  6E                 	db	110	;'n'
   403   000ECD  20                 	db	32
   404   000ECE  0A                 	db	10
   405   000ECF  0D                 	db	13
   406   000ED0  00                 	db	0
   407   000ED1                     STR_10:
   408                           
   409                           ; BSR set to: 15
   410   000ED1  62                 	db	98	;'b'
   411   000ED2  6C                 	db	108	;'l'
   412   000ED3  75                 	db	117	;'u'
   413   000ED4  65                 	db	101	;'e'
   414   000ED5  20                 	db	32
   415   000ED6  0A                 	db	10
   416   000ED7  0D                 	db	13
   417   000ED8  00                 	db	0
   418   000ED9                     STR_6:
   419                           
   420                           ; BSR set to: 15
   421   000ED9  2E                 	db	46
   422   000EDA  00                 	db	0
   423   000EDB  00                 	db	0	; dummy byte at the end
   424   000000                     
   425                           ; #config settings
   426                           
   427                           	psect	cinit
   428   0021D4                     __pcinit:
   429                           	callstack 0
   430   0021D4                     start_initialization:
   431                           	callstack 0
   432   0021D4                     __initialization:
   433                           	callstack 0
   434                           
   435                           ; Initialize objects allocated to BANK0 (1 bytes)
   436                           ; load TBLPTR registers with __pidataBANK0
   437   0021D4  0E22               	movlw	low __pidataBANK0
   438   0021D6  6EF6               	movwf	tblptrl,c
   439   0021D8  0E24               	movlw	high __pidataBANK0
   440   0021DA  6EF7               	movwf	tblptrh,c
   441   0021DC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   442   0021DE  6EF8               	movwf	tblptru,c
   443   0021E0  0009               	tblrd		*+	;fetch initializer
   444   0021E2  CFF5 F0FF          	movff	tablat,__pdataBANK0
   445                           
   446                           ; Clear objects allocated to BANK1 (168 bytes)
   447   0021E6  EE01  F000         	lfsr	0,__pbssBANK1
   448   0021EA  0EA8               	movlw	168
   449   0021EC                     clear_0:
   450   0021EC  6AEE               	clrf	postinc0,c
   451   0021EE  06E8               	decf	wreg,f,c
   452   0021F0  E1FD               	bnz	clear_0
   453                           
   454                           ; Clear objects allocated to BANK0 (5 bytes)
   455   0021F2  0100               	movlb	0
   456   0021F4  6BFE               	clrf	(__pbssBANK0+4)& (0+255),b
   457   0021F6  6BFD               	clrf	(__pbssBANK0+3)& (0+255),b
   458   0021F8  6BFC               	clrf	(__pbssBANK0+2)& (0+255),b
   459   0021FA  6BFB               	clrf	(__pbssBANK0+1)& (0+255),b
   460   0021FC  6BFA               	clrf	__pbssBANK0& (0+255),b
   461                           
   462                           ; Clear objects allocated to COMRAM (3 bytes)
   463   0021FE  6A5E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   464   002200  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   465   002202  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   466   002204                     end_of_initialization:
   467                           	callstack 0
   468   002204                     __end_of__initialization:
   469                           	callstack 0
   470   002204  0100               	movlb	0
   471   002206  EFCB  F00C         	goto	_main	;jump to C main() function
   472                           
   473                           	psect	bssCOMRAM
   474   00005C                     __pbssCOMRAM:
   475                           	callstack 0
   476   00005C                     _TxBufReadCnt:
   477                           	callstack 0
   478   00005C                     	ds	1
   479   00005D                     _TxBufWriteCnt:
   480                           	callstack 0
   481   00005D                     	ds	1
   482   00005E                     _RxBufWriteCnt:
   483                           	callstack 0
   484   00005E                     	ds	1
   485                           
   486                           	psect	bssBANK0
   487   0000FA                     __pbssBANK0:
   488                           	callstack 0
   489   0000FA                     _width:
   490                           	callstack 0
   491   0000FA                     	ds	2
   492   0000FC                     _flags:
   493                           	callstack 0
   494   0000FC                     	ds	1
   495   0000FD                     _readingIndex:
   496                           	callstack 0
   497   0000FD                     	ds	1
   498   0000FE                     _RxBufReadCnt:
   499                           	callstack 0
   500   0000FE                     	ds	1
   501                           
   502                           	psect	dataBANK0
   503   0000FF                     __pdataBANK0:
   504                           	callstack 0
   505   0000FF                     _dataFlag:
   506                           	callstack 0
   507   0000FF                     	ds	1
   508                           
   509                           	psect	bssBANK1
   510   000100                     __pbssBANK1:
   511                           	callstack 0
   512   000100                     _EUSART4TXbuf:
   513                           	callstack 0
   514   000100                     	ds	60
   515   00013C                     _ldrReadings:
   516                           	callstack 0
   517   00013C                     	ds	20
   518   000150                     _EUSART4RXbuf:
   519                           	callstack 0
   520   000150                     	ds	20
   521   000164                     _prec:
   522                           	callstack 0
   523   000164                     	ds	2
   524   000166                     _dbuf:
   525                           	callstack 0
   526   000166                     	ds	32
   527   000186                     _motorR:
   528                           	callstack 0
   529   000186                     	ds	9
   530   00018F                     _motorL:
   531                           	callstack 0
   532   00018F                     	ds	9
   533   000198                     _colorCurrent:
   534                           	callstack 0
   535   000198                     	ds	8
   536   0001A0                     _colorCalibration:
   537                           	callstack 0
   538   0001A0                     	ds	8
   539                           
   540                           	psect	cstackBANK1
   541   0001A8                     __pcstackBANK1:
   542                           	callstack 0
   543   0001A8                     ??_main:
   544                           
   545                           ; 1 bytes @ 0x0
   546   0001A8                     	ds	2
   547   0001AA                     main@battery_level:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0x2
   551   0001AA                     	ds	2
   552                           
   553                           	psect	cstackBANK0
   554   000060                     __pcstackBANK0:
   555                           	callstack 0
   556   000060                     send2USART@buf:
   557                           	callstack 0
   558                           
   559                           ; 50 bytes @ 0x0
   560   000060                     	ds	50
   561   000092                     send2USART@hue_char:
   562                           	callstack 0
   563                           
   564                           ; 50 bytes @ 0x32
   565   000092                     	ds	50
   566   0000C4                     test@led_state:
   567                           	callstack 0
   568                           
   569                           ; 50 bytes @ 0x64
   570   0000C4                     	ds	50
   571   0000F6                     test@hue:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x96
   575   0000F6                     	ds	2
   576   0000F8                     test@combo:
   577                           	callstack 0
   578                           
   579                           ; 2 bytes @ 0x98
   580   0000F8                     	ds	2
   581                           
   582                           	psect	cstackCOMRAM
   583   000001                     __pcstackCOMRAM:
   584                           	callstack 0
   585   000001                     ??_I2C_2_Master_Idle:
   586   000001                     ?___wmul:
   587                           	callstack 0
   588   000001                     ?___awdiv:
   589                           	callstack 0
   590   000001                     ?___awmod:
   591                           	callstack 0
   592   000001                     sendCharSerial4@charToSend:
   593                           	callstack 0
   594   000001                     initDCmotorsPWM@PWMperiod:
   595                           	callstack 0
   596   000001                     ___wmul@multiplier:
   597                           	callstack 0
   598   000001                     ___awdiv@dividend:
   599                           	callstack 0
   600   000001                     ___awmod@dividend:
   601                           	callstack 0
   602   000001                     fputc@c:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0x0
   606   000001                     	ds	1
   607   000002                     ??_I2C_2_Master_Read:
   608   000002                     I2C_2_Master_Write@data_byte:
   609                           	callstack 0
   610   000002                     sendStringSerial4@string:
   611                           	callstack 0
   612                           
   613                           ; 1 bytes @ 0x1
   614   000002                     	ds	1
   615   000003                     color_writetoaddr@value:
   616                           	callstack 0
   617   000003                     I2C_2_Master_Read@ack:
   618                           	callstack 0
   619   000003                     fputc@fp:
   620                           	callstack 0
   621   000003                     ___wmul@multiplicand:
   622                           	callstack 0
   623   000003                     ___awdiv@divisor:
   624                           	callstack 0
   625   000003                     ___awmod@divisor:
   626                           	callstack 0
   627                           
   628                           ; 2 bytes @ 0x2
   629   000003                     	ds	1
   630   000004                     ??_fputc:
   631   000004                     color_writetoaddr@address:
   632                           	callstack 0
   633   000004                     I2C_2_Master_Read@tmp:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0x3
   637   000004                     	ds	1
   638   000005                     ??_color_click_init:
   639   000005                     ?_color_read_Red:
   640                           	callstack 0
   641   000005                     ?_color_read_Green:
   642                           	callstack 0
   643   000005                     ?_color_read_Blue:
   644                           	callstack 0
   645   000005                     ?_color_read_Clear:
   646                           	callstack 0
   647   000005                     ___awdiv@counter:
   648                           	callstack 0
   649   000005                     ___awmod@counter:
   650                           	callstack 0
   651   000005                     ___wmul@product:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x4
   655   000005                     	ds	1
   656   000006                     ___awdiv@sign:
   657                           	callstack 0
   658   000006                     ___awmod@sign:
   659                           	callstack 0
   660                           
   661                           ; 1 bytes @ 0x5
   662   000006                     	ds	1
   663   000007                     ??_color_read_Red:
   664   000007                     ??_color_read_Green:
   665   000007                     ??_color_read_Blue:
   666   000007                     ??_color_read_Clear:
   667   000007                     ?_abs:
   668                           	callstack 0
   669   000007                     ?___lwdiv:
   670                           	callstack 0
   671   000007                     ?_read_prec_or_width:
   672                           	callstack 0
   673   000007                     read_prec_or_width@fmt:
   674                           	callstack 0
   675   000007                     ___awdiv@quotient:
   676                           	callstack 0
   677   000007                     ___lwdiv@dividend:
   678                           	callstack 0
   679   000007                     abs@a:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0x6
   683   000007                     	ds	1
   684   000008                     read_prec_or_width@ap:
   685                           	callstack 0
   686                           
   687                           ; 1 bytes @ 0x7
   688   000008                     	ds	1
   689   000009                     ??_abs:
   690   000009                     read_prec_or_width@c:
   691                           	callstack 0
   692   000009                     ___lwdiv@divisor:
   693                           	callstack 0
   694   000009                     fputs@s:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x8
   698   000009                     	ds	1
   699   00000A                     color_read_Red@tmp:
   700                           	callstack 0
   701   00000A                     color_read_Green@tmp:
   702                           	callstack 0
   703   00000A                     color_read_Blue@tmp:
   704                           	callstack 0
   705   00000A                     color_read_Clear@tmp:
   706                           	callstack 0
   707   00000A                     read_prec_or_width@n:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x9
   711   00000A                     	ds	1
   712   00000B                     ___lwdiv@counter:
   713                           	callstack 0
   714   00000B                     fputs@fp:
   715                           	callstack 0
   716                           
   717                           ; 1 bytes @ 0xA
   718   00000B                     	ds	1
   719   00000C                     fputs@c:
   720                           	callstack 0
   721   00000C                     reading_values@cCurr:
   722                           	callstack 0
   723   00000C                     ___lwdiv@quotient:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0xB
   727   00000C                     	ds	1
   728   00000D                     fputs@i:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0xC
   732   00000D                     	ds	1
   733   00000E                     ?_convert_rgb2hue:
   734                           	callstack 0
   735   00000E                     convert_rgb2hue@cMax:
   736                           	callstack 0
   737                           
   738                           ; 2 bytes @ 0xD
   739   00000E                     	ds	1
   740   00000F                     pad@fp:
   741                           	callstack 0
   742                           
   743                           ; 1 bytes @ 0xE
   744   00000F                     	ds	1
   745   000010                     convert_rgb2hue@cCurr:
   746                           	callstack 0
   747   000010                     pad@buf:
   748                           	callstack 0
   749                           
   750                           ; 2 bytes @ 0xF
   751   000010                     	ds	2
   752   000012                     ??_convert_rgb2hue:
   753   000012                     pad@p:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x11
   757   000012                     	ds	2
   758   000014                     ??_pad:
   759                           
   760                           ; 1 bytes @ 0x13
   761   000014                     	ds	1
   762   000015                     pad@i:
   763                           	callstack 0
   764                           
   765                           ; 2 bytes @ 0x14
   766   000015                     	ds	1
   767   000016                     _convert_rgb2hue$2839:
   768                           	callstack 0
   769                           
   770                           ; 2 bytes @ 0x15
   771   000016                     	ds	1
   772   000017                     dtoa@fp:
   773                           	callstack 0
   774                           
   775                           ; 1 bytes @ 0x16
   776   000017                     	ds	1
   777   000018                     dtoa@d:
   778                           	callstack 0
   779   000018                     _convert_rgb2hue$2840:
   780                           	callstack 0
   781                           
   782                           ; 2 bytes @ 0x17
   783   000018                     	ds	2
   784   00001A                     _dtoa$2521:
   785                           	callstack 0
   786   00001A                     _convert_rgb2hue$2841:
   787                           	callstack 0
   788                           
   789                           ; 2 bytes @ 0x19
   790   00001A                     	ds	2
   791   00001C                     dtoa@p:
   792                           	callstack 0
   793   00001C                     _convert_rgb2hue$2842:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x1B
   797   00001C                     	ds	1
   798   00001D                     dtoa@w:
   799                           	callstack 0
   800                           
   801                           ; 2 bytes @ 0x1C
   802   00001D                     	ds	1
   803   00001E                     convert_rgb2hue@hue:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0x1D
   807   00001E                     	ds	1
   808   00001F                     dtoa@s:
   809                           	callstack 0
   810                           
   811                           ; 1 bytes @ 0x1E
   812   00001F                     	ds	1
   813   000020                     convert_rgb2hue@b:
   814                           	callstack 0
   815   000020                     dtoa@i:
   816                           	callstack 0
   817                           
   818                           ; 2 bytes @ 0x1F
   819   000020                     	ds	2
   820   000022                     vfpfcnvrt@fp:
   821                           	callstack 0
   822   000022                     convert_rgb2hue@r:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0x21
   826   000022                     	ds	1
   827   000023                     vfpfcnvrt@fmt:
   828                           	callstack 0
   829                           
   830                           ; 1 bytes @ 0x22
   831   000023                     	ds	1
   832   000024                     vfpfcnvrt@ap:
   833                           	callstack 0
   834   000024                     convert_rgb2hue@g:
   835                           	callstack 0
   836                           
   837                           ; 2 bytes @ 0x23
   838   000024                     	ds	1
   839   000025                     ??_vfpfcnvrt:
   840                           
   841                           ; 1 bytes @ 0x24
   842   000025                     	ds	2
   843   000027                     vfpfcnvrt@convarg:
   844                           	callstack 0
   845                           
   846                           ; 4 bytes @ 0x26
   847   000027                     	ds	4
   848   00002B                     vfpfcnvrt@done:
   849                           	callstack 0
   850                           
   851                           ; 1 bytes @ 0x2A
   852   00002B                     	ds	1
   853   00002C                     vfpfcnvrt@cp:
   854                           	callstack 0
   855                           
   856                           ; 1 bytes @ 0x2B
   857   00002C                     	ds	1
   858   00002D                     ?_vfprintf:
   859                           	callstack 0
   860   00002D                     vfprintf@fp:
   861                           	callstack 0
   862                           
   863                           ; 1 bytes @ 0x2C
   864   00002D                     	ds	1
   865   00002E                     vfprintf@fmt:
   866                           	callstack 0
   867                           
   868                           ; 1 bytes @ 0x2D
   869   00002E                     	ds	1
   870   00002F                     vfprintf@ap:
   871                           	callstack 0
   872                           
   873                           ; 1 bytes @ 0x2E
   874   00002F                     	ds	1
   875   000030                     vfprintf@cfmt:
   876                           	callstack 0
   877                           
   878                           ; 1 bytes @ 0x2F
   879   000030                     	ds	1
   880   000031                     ?_sprintf:
   881                           	callstack 0
   882   000031                     sprintf@s:
   883                           	callstack 0
   884                           
   885                           ; 1 bytes @ 0x30
   886   000031                     	ds	1
   887   000032                     sprintf@fmt:
   888                           	callstack 0
   889                           
   890                           ; 1 bytes @ 0x31
   891   000032                     	ds	5
   892   000037                     sprintf@ap:
   893                           	callstack 0
   894                           
   895                           ; 1 bytes @ 0x36
   896   000037                     	ds	1
   897   000038                     sprintf@f:
   898                           	callstack 0
   899                           
   900                           ; 12 bytes @ 0x37
   901   000038                     	ds	12
   902   000044                     ADC2String@buf:
   903                           	callstack 0
   904   000044                     calibration_routine@cCal:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x43
   908   000044                     	ds	1
   909   000045                     ADC2String@ADC_val:
   910                           	callstack 0
   911                           
   912                           ; 2 bytes @ 0x44
   913   000045                     	ds	1
   914   000046                     ??_calibration_routine:
   915                           
   916                           ; 1 bytes @ 0x45
   917   000046                     	ds	1
   918   000047                     ??_ADC2String:
   919                           
   920                           ; 1 bytes @ 0x46
   921   000047                     	ds	1
   922   000048                     calibration_routine@cal_state:
   923                           	callstack 0
   924                           
   925                           ; 20 bytes @ 0x47
   926   000048                     	ds	1
   927   000049                     ADC2String@frac_part:
   928                           	callstack 0
   929                           
   930                           ; 2 bytes @ 0x48
   931   000049                     	ds	2
   932   00004B                     ADC2String@int_part:
   933                           	callstack 0
   934                           
   935                           ; 2 bytes @ 0x4A
   936   00004B                     	ds	2
   937   00004D                     send2USART@battery_level:
   938                           	callstack 0
   939                           
   940                           ; 2 bytes @ 0x4C
   941   00004D                     	ds	2
   942   00004F                     send2USART@hue:
   943                           	callstack 0
   944                           
   945                           ; 2 bytes @ 0x4E
   946   00004F                     	ds	2
   947   000051                     test@battery_level:
   948                           	callstack 0
   949                           
   950                           ; 2 bytes @ 0x50
   951   000051                     	ds	2
   952   000053                     ??_test:
   953                           
   954                           ; 1 bytes @ 0x52
   955   000053                     	ds	9
   956                           
   957 ;;
   958 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   959 ;;
   960 ;; *************** function _main *****************
   961 ;; Defined at:
   962 ;;		line 28 in file "main.c"
   963 ;; Parameters:    Size  Location     Type
   964 ;;		None
   965 ;; Auto vars:     Size  Location     Type
   966 ;;  PWMcycle        2    0        unsigned int 
   967 ;;  battery_leve    2    2[BANK1 ] unsigned int 
   968 ;;  clear           2    0        unsigned int 
   969 ;;  green           2    0        unsigned int 
   970 ;;  blue            2    0        unsigned int 
   971 ;;  red             2    0        unsigned int 
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   982 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0
   983 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0
   984 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0
   985 ;;Total ram usage:        4 bytes
   986 ;; Hardware stack levels required when called: 11
   987 ;; This function calls:
   988 ;;		_ADC_init
   989 ;;		_calibration_routine
   990 ;;		_color_click_init
   991 ;;		_initDCmotorsPWM
   992 ;;		_initUSART4
   993 ;;		_test
   994 ;; This function is called by:
   995 ;;		Startup code after reset
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           	psect	text0
  1000   001996                     __ptext0:
  1001                           	callstack 0
  1002   001996                     _main:
  1003                           	callstack 20
  1004   001996                     
  1005                           ;main.c: 30:     ADC_init();
  1006   001996  ECE2  F011         	call	_ADC_init	;wreg free
  1007   00199A                     
  1008                           ;main.c: 31:     color_click_init();
  1009   00199A  EC20  F011         	call	_color_click_init	;wreg free
  1010   00199E                     
  1011                           ;main.c: 32:     initUSART4();
  1012   00199E  ECD3  F011         	call	_initUSART4	;wreg free
  1013   0019A2                     
  1014                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
  1015   0019A2  0E00               	movlw	0
  1016   0019A4  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1017   0019A6  0E63               	movlw	99
  1018   0019A8  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1019   0019AA  EC37  F00F         	call	_initDCmotorsPWM	;wreg free
  1020   0019AE                     
  1021                           ;main.c: 39:     motorL.power = 0;
  1022   0019AE  0E00               	movlw	0
  1023   0019B0  0101               	movlb	1	; () banked
  1024   0019B2  6F8F               	movwf	_motorL& (0+255),b
  1025   0019B4                     
  1026                           ; BSR set to: 1
  1027                           ;main.c: 40:     motorL.direction = 1;
  1028   0019B4  0E01               	movlw	1
  1029   0019B6  6F90               	movwf	(_motorL+1)& (0+255),b
  1030   0019B8                     
  1031                           ; BSR set to: 1
  1032                           ;main.c: 41:     motorL.brakemode = 1;
  1033   0019B8  0E01               	movlw	1
  1034   0019BA  6F91               	movwf	(_motorL+2)& (0+255),b
  1035   0019BC                     
  1036                           ; BSR set to: 1
  1037                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
  1038   0019BC  0E00               	movlw	0
  1039   0019BE  6F93               	movwf	(_motorL+4)& (0+255),b
  1040   0019C0  0E63               	movlw	99
  1041   0019C2  6F92               	movwf	(_motorL+3)& (0+255),b
  1042   0019C4                     
  1043                           ; BSR set to: 1
  1044                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1045   0019C4  0EAA               	movlw	170
  1046   0019C6  6F94               	movwf	(_motorL+5)& (0+255),b
  1047   0019C8  0E0F               	movlw	15
  1048   0019CA  6F95               	movwf	(_motorL+6)& (0+255),b
  1049   0019CC                     
  1050                           ; BSR set to: 1
  1051                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1052   0019CC  0EA6               	movlw	166
  1053   0019CE  6F96               	movwf	(_motorL+7)& (0+255),b
  1054   0019D0  0E0F               	movlw	15
  1055   0019D2  6F97               	movwf	(_motorL+8)& (0+255),b
  1056   0019D4                     
  1057                           ; BSR set to: 1
  1058                           ;main.c: 46:     motorR.power = 0;
  1059   0019D4  0E00               	movlw	0
  1060   0019D6  6F86               	movwf	_motorR& (0+255),b
  1061   0019D8                     
  1062                           ; BSR set to: 1
  1063                           ;main.c: 47:     motorR.direction = 1;
  1064   0019D8  0E01               	movlw	1
  1065   0019DA  6F87               	movwf	(_motorR+1)& (0+255),b
  1066   0019DC                     
  1067                           ; BSR set to: 1
  1068                           ;main.c: 48:     motorR.brakemode = 1;
  1069   0019DC  0E01               	movlw	1
  1070   0019DE  6F88               	movwf	(_motorR+2)& (0+255),b
  1071   0019E0                     
  1072                           ; BSR set to: 1
  1073                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
  1074   0019E0  0E00               	movlw	0
  1075   0019E2  6F8A               	movwf	(_motorR+4)& (0+255),b
  1076   0019E4  0E63               	movlw	99
  1077   0019E6  6F89               	movwf	(_motorR+3)& (0+255),b
  1078                           
  1079                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1080   0019E8  0E25               	movlw	37
  1081   0019EA  6F8B               	movwf	(_motorR+5)& (0+255),b
  1082   0019EC  0E0F               	movlw	15
  1083   0019EE  6F8C               	movwf	(_motorR+6)& (0+255),b
  1084                           
  1085                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1086   0019F0  0E21               	movlw	33
  1087   0019F2  6F8D               	movwf	(_motorR+7)& (0+255),b
  1088   0019F4  0E0F               	movlw	15
  1089   0019F6  6F8E               	movwf	(_motorR+8)& (0+255),b
  1090   0019F8                     
  1091                           ; BSR set to: 1
  1092                           ;main.c: 54:     LATDbits.LATD7=0;
  1093   0019F8  9E7C               	bcf	124,7,c	;volatile
  1094   0019FA                     
  1095                           ; BSR set to: 1
  1096                           ;main.c: 55:     TRISDbits.TRISD7=0;
  1097   0019FA  9E84               	bcf	132,7,c	;volatile
  1098   0019FC                     
  1099                           ; BSR set to: 1
  1100                           ;main.c: 59:     TRISGbits.TRISG0 = 0;
  1101   0019FC  9087               	bcf	135,0,c	;volatile
  1102   0019FE                     
  1103                           ; BSR set to: 1
  1104                           ;main.c: 60:     LATGbits.LATG0 = 0;
  1105   0019FE  907F               	bcf	127,0,c	;volatile
  1106   001A00                     
  1107                           ; BSR set to: 1
  1108                           ;main.c: 61:     TRISEbits.TRISE7 = 0;
  1109   001A00  9E85               	bcf	133,7,c	;volatile
  1110   001A02                     
  1111                           ; BSR set to: 1
  1112                           ;main.c: 62:     LATEbits.LATE7 = 0;
  1113   001A02  9E7D               	bcf	125,7,c	;volatile
  1114   001A04                     
  1115                           ; BSR set to: 1
  1116                           ;main.c: 63:     TRISAbits.TRISA3 = 0;
  1117   001A04  9681               	bcf	129,3,c	;volatile
  1118   001A06                     
  1119                           ; BSR set to: 1
  1120                           ;main.c: 64:     LATAbits.LATA3 = 0;
  1121   001A06  9679               	bcf	121,3,c	;volatile
  1122   001A08                     
  1123                           ; BSR set to: 1
  1124                           ;main.c: 69:     unsigned int battery_level;;main.c: 70:     unsigned int red;;main.c: 7
      +                          1:     unsigned int blue;;main.c: 72:     unsigned int green;;main.c: 73:     unsigned i
      +                          nt clear;;main.c: 74:     TRISHbits.TRISH3 = 0;
  1125   001A08  9688               	bcf	136,3,c	;volatile
  1126   001A0A                     
  1127                           ; BSR set to: 1
  1128                           ;main.c: 75:     LATHbits.LATH3 = 1;
  1129   001A0A  8680               	bsf	128,3,c	;volatile
  1130   001A0C                     
  1131                           ; BSR set to: 1
  1132                           ;main.c: 76:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1133   001A0C  0E19               	movlw	25
  1134   001A0E  0101               	movlb	1	; () banked
  1135   001A10  6FA9               	movwf	(??_main+1)& (0+255),b
  1136   001A12  0E5A               	movlw	90
  1137   001A14  6FA8               	movwf	??_main& (0+255),b
  1138   001A16  0EB1               	movlw	177
  1139   001A18                     u2627:
  1140   001A18  2EE8               	decfsz	wreg,f,c
  1141   001A1A  D7FE               	bra	u2627
  1142   001A1C  2FA8               	decfsz	??_main& (0+255),f,b
  1143   001A1E  D7FC               	bra	u2627
  1144   001A20  2FA9               	decfsz	(??_main+1)& (0+255),f,b
  1145   001A22  D7FA               	bra	u2627
  1146   001A24  D000               	nop2	
  1147   001A26                     
  1148                           ;main.c: 77:     LATHbits.LATH3 = 0;
  1149   001A26  9680               	bcf	128,3,c	;volatile
  1150   001A28                     
  1151                           ;main.c: 78:     LATFbits.LATF2 = 0;
  1152   001A28  947E               	bcf	126,2,c	;volatile
  1153   001A2A                     
  1154                           ;main.c: 79:     TRISFbits.TRISF2 = 1;
  1155   001A2A  8486               	bsf	134,2,c	;volatile
  1156   001A2C                     
  1157                           ;main.c: 80:     ANSELFbits.ANSELF2 = 0;
  1158   001A2C  010E               	movlb	14	; () banked
  1159   001A2E  95B4               	bcf	180,2,b	;volatile
  1160   001A30                     
  1161                           ; BSR set to: 14
  1162                           ;main.c: 81:     calibration_routine(&colorCalibration);
  1163   001A30  0EA0               	movlw	low _colorCalibration
  1164   001A32  6E44               	movwf	calibration_routine@cCal^0,c
  1165   001A34  0E01               	movlw	high _colorCalibration
  1166   001A36  6E45               	movwf	(calibration_routine@cCal+1)^0,c
  1167   001A38  ECC2  F009         	call	_calibration_routine	;wreg free
  1168   001A3C                     l3813:
  1169                           
  1170                           ;main.c: 89:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1171   001A3C  0E52               	movlw	82
  1172   001A3E  0101               	movlb	1	; () banked
  1173   001A40  6FA9               	movwf	(??_main+1)& (0+255),b
  1174   001A42  0E2B               	movlw	43
  1175   001A44  6FA8               	movwf	??_main& (0+255),b
  1176   001A46  0E00               	movlw	0
  1177   001A48                     u2637:
  1178   001A48  2EE8               	decfsz	wreg,f,c
  1179   001A4A  D7FE               	bra	u2637
  1180   001A4C  2FA8               	decfsz	??_main& (0+255),f,b
  1181   001A4E  D7FC               	bra	u2637
  1182   001A50  2FA9               	decfsz	(??_main+1)& (0+255),f,b
  1183   001A52  D7FA               	bra	u2637
  1184   001A54  0000               	nop	
  1185   001A56                     
  1186                           ;main.c: 90:         test(battery_level);
  1187   001A56  C1AA  F051         	movff	main@battery_level,test@battery_level
  1188   001A5A  C1AB  F052         	movff	main@battery_level+1,test@battery_level+1
  1189   001A5E  EC1D  F00C         	call	_test	;wreg free
  1190   001A62  EF1E  F00D         	goto	l3813
  1191   001A66  EF00  F000         	goto	start
  1192   001A6A                     __end_of_main:
  1193                           	callstack 0
  1194                           
  1195 ;; *************** function _test *****************
  1196 ;; Defined at:
  1197 ;;		line 130 in file "color.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  battery_leve    2   80[COMRAM] unsigned int 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  hue             2  150[BANK0 ] unsigned int 
  1202 ;;  combo           2  152[BANK0 ] unsigned int 
  1203 ;;  led_state      50  100[BANK0 ] unsigned char [50]
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1213 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1214 ;;      Locals:         0      54       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1215 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1216 ;;      Totals:         3      54       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1217 ;;Total ram usage:       57 bytes
  1218 ;; Hardware stack levels used: 1
  1219 ;; Hardware stack levels required when called: 10
  1220 ;; This function calls:
  1221 ;;		_convert_rgb2hue
  1222 ;;		_reading_values
  1223 ;;		_send2USART
  1224 ;;		_sendStringSerial4
  1225 ;;		_sprintf
  1226 ;; This function is called by:
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text1
  1232   00183A                     __ptext1:
  1233                           	callstack 0
  1234   00183A                     _test:
  1235                           	callstack 20
  1236   00183A                     
  1237                           ;color.c: 130: void test(unsigned int battery_level);color.c: 131: {;color.c: 134:     c
      +                          har led_state[50];;color.c: 137:     for (unsigned int combo = 0; combo < 4; ++combo) {
  1238   00183A  0E00               	movlw	0
  1239   00183C  0100               	movlb	0	; () banked
  1240   00183E  6FF9               	movwf	(test@combo+1)& (0+255),b
  1241   001840  0E00               	movlw	0
  1242   001842  6FF8               	movwf	test@combo& (0+255),b
  1243   001844                     l3569:
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;color.c: 140:         if (combo == 0) {
  1247   001844  51F8               	movf	test@combo& (0+255),w,b
  1248   001846  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1249   001848  A4D8               	btfss	status,2,c
  1250   00184A  EF29  F00C         	goto	u2461
  1251   00184E  EF2B  F00C         	goto	u2460
  1252   001852                     u2461:
  1253   001852  EF41  F00C         	goto	l3575
  1254   001856                     u2460:
  1255   001856                     
  1256                           ; BSR set to: 0
  1257                           ;color.c: 142:             LATGbits.LATG0 = 1;
  1258   001856  807F               	bsf	127,0,c	;volatile
  1259                           
  1260                           ;color.c: 143:             LATEbits.LATE7 = 0;
  1261   001858  9E7D               	bcf	125,7,c	;volatile
  1262                           
  1263                           ;color.c: 144:             LATAbits.LATA3 = 0;
  1264   00185A  9679               	bcf	121,3,c	;volatile
  1265   00185C                     
  1266                           ; BSR set to: 0
  1267                           ;color.c: 145:             sprintf(led_state,"Red_light=%d, \n\r", LATGbits.LATG0);
  1268   00185C  0EC4               	movlw	low test@led_state
  1269   00185E  6E31               	movwf	sprintf@s^0,c
  1270   001860  0E7E               	movlw	low STR_1
  1271   001862  6E32               	movwf	sprintf@fmt^0,c
  1272   001864  B07F               	btfsc	127,0,c	;volatile
  1273   001866  EF37  F00C         	goto	u2471
  1274   00186A  EF3B  F00C         	goto	u2470
  1275   00186E                     u2471:
  1276   00186E  6A53               	clrf	??_test^0,c
  1277   001870  2A53               	incf	??_test^0,f,c
  1278   001872  EF3C  F00C         	goto	u2478
  1279   001876                     u2470:
  1280   001876  6A53               	clrf	??_test^0,c
  1281   001878                     u2478:
  1282   001878  5053               	movf	??_test^0,w,c
  1283   00187A  6E33               	movwf	(?_sprintf+2)^0,c
  1284   00187C  6A34               	clrf	(?_sprintf+3)^0,c
  1285   00187E  EC3A  F011         	call	_sprintf	;wreg free
  1286   001882                     l3575:
  1287                           
  1288                           ;color.c: 150:         if (combo == 1) {
  1289   001882  0100               	movlb	0	; () banked
  1290   001884  05F8               	decf	test@combo& (0+255),w,b
  1291   001886  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1292   001888  A4D8               	btfss	status,2,c
  1293   00188A  EF49  F00C         	goto	u2481
  1294   00188E  EF4B  F00C         	goto	u2480
  1295   001892                     u2481:
  1296   001892  EF61  F00C         	goto	l3581
  1297   001896                     u2480:
  1298   001896                     
  1299                           ; BSR set to: 0
  1300                           ;color.c: 151:             LATGbits.LATG0 = 0;
  1301   001896  907F               	bcf	127,0,c	;volatile
  1302                           
  1303                           ;color.c: 152:             LATEbits.LATE7 = 1;
  1304   001898  8E7D               	bsf	125,7,c	;volatile
  1305                           
  1306                           ;color.c: 153:             LATAbits.LATA3 = 0;
  1307   00189A  9679               	bcf	121,3,c	;volatile
  1308   00189C                     
  1309                           ; BSR set to: 0
  1310                           ;color.c: 154:             sprintf(led_state,"Green_light=%d, \n\r", LATEbits.LATE7);
  1311   00189C  0EC4               	movlw	low test@led_state
  1312   00189E  6E31               	movwf	sprintf@s^0,c
  1313   0018A0  0E58               	movlw	low STR_2
  1314   0018A2  6E32               	movwf	sprintf@fmt^0,c
  1315   0018A4  BE7D               	btfsc	125,7,c	;volatile
  1316   0018A6  EF57  F00C         	goto	u2491
  1317   0018AA  EF5B  F00C         	goto	u2490
  1318   0018AE                     u2491:
  1319   0018AE  6A53               	clrf	??_test^0,c
  1320   0018B0  2A53               	incf	??_test^0,f,c
  1321   0018B2  EF5C  F00C         	goto	u2498
  1322   0018B6                     u2490:
  1323   0018B6  6A53               	clrf	??_test^0,c
  1324   0018B8                     u2498:
  1325   0018B8  5053               	movf	??_test^0,w,c
  1326   0018BA  6E33               	movwf	(?_sprintf+2)^0,c
  1327   0018BC  6A34               	clrf	(?_sprintf+3)^0,c
  1328   0018BE  EC3A  F011         	call	_sprintf	;wreg free
  1329   0018C2                     l3581:
  1330                           
  1331                           ;color.c: 158:         if (combo == 2) {
  1332   0018C2  0E02               	movlw	2
  1333   0018C4  0100               	movlb	0	; () banked
  1334   0018C6  19F8               	xorwf	test@combo& (0+255),w,b
  1335   0018C8  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1336   0018CA  A4D8               	btfss	status,2,c
  1337   0018CC  EF6A  F00C         	goto	u2501
  1338   0018D0  EF6C  F00C         	goto	u2500
  1339   0018D4                     u2501:
  1340   0018D4  EF82  F00C         	goto	l3587
  1341   0018D8                     u2500:
  1342   0018D8                     
  1343                           ; BSR set to: 0
  1344                           ;color.c: 159:             LATGbits.LATG0 = 0;
  1345   0018D8  907F               	bcf	127,0,c	;volatile
  1346                           
  1347                           ;color.c: 160:             LATEbits.LATE7 = 0;
  1348   0018DA  9E7D               	bcf	125,7,c	;volatile
  1349                           
  1350                           ;color.c: 161:             LATAbits.LATA3 = 1;
  1351   0018DC  8679               	bsf	121,3,c	;volatile
  1352   0018DE                     
  1353                           ; BSR set to: 0
  1354                           ;color.c: 162:             sprintf(led_state,"Blue_light=%d \n\r", LATAbits.LATA3);
  1355   0018DE  0EC4               	movlw	low test@led_state
  1356   0018E0  6E31               	movwf	sprintf@s^0,c
  1357   0018E2  0EA0               	movlw	low STR_3
  1358   0018E4  6E32               	movwf	sprintf@fmt^0,c
  1359   0018E6  B679               	btfsc	121,3,c	;volatile
  1360   0018E8  EF78  F00C         	goto	u2511
  1361   0018EC  EF7C  F00C         	goto	u2510
  1362   0018F0                     u2511:
  1363   0018F0  6A53               	clrf	??_test^0,c
  1364   0018F2  2A53               	incf	??_test^0,f,c
  1365   0018F4  EF7D  F00C         	goto	u2518
  1366   0018F8                     u2510:
  1367   0018F8  6A53               	clrf	??_test^0,c
  1368   0018FA                     u2518:
  1369   0018FA  5053               	movf	??_test^0,w,c
  1370   0018FC  6E33               	movwf	(?_sprintf+2)^0,c
  1371   0018FE  6A34               	clrf	(?_sprintf+3)^0,c
  1372   001900  EC3A  F011         	call	_sprintf	;wreg free
  1373   001904                     l3587:
  1374                           
  1375                           ;color.c: 168:         if (combo == 3) {
  1376   001904  0E03               	movlw	3
  1377   001906  0100               	movlb	0	; () banked
  1378   001908  19F8               	xorwf	test@combo& (0+255),w,b
  1379   00190A  11F9               	iorwf	(test@combo+1)& (0+255),w,b
  1380   00190C  A4D8               	btfss	status,2,c
  1381   00190E  EF8B  F00C         	goto	u2521
  1382   001912  EF8D  F00C         	goto	u2520
  1383   001916                     u2521:
  1384   001916  EF9A  F00C         	goto	l3593
  1385   00191A                     u2520:
  1386   00191A                     
  1387                           ; BSR set to: 0
  1388                           ;color.c: 169:             LATGbits.LATG0 = 1;
  1389   00191A  807F               	bsf	127,0,c	;volatile
  1390                           
  1391                           ;color.c: 170:             LATEbits.LATE7 = 1;
  1392   00191C  8E7D               	bsf	125,7,c	;volatile
  1393                           
  1394                           ;color.c: 171:             LATAbits.LATA3 = 1;
  1395   00191E  8679               	bsf	121,3,c	;volatile
  1396   001920                     
  1397                           ; BSR set to: 0
  1398                           ;color.c: 172:             sprintf(led_state,"All_lights=%d \n\r", 1);
  1399   001920  0EC4               	movlw	low test@led_state
  1400   001922  6E31               	movwf	sprintf@s^0,c
  1401   001924  0E8F               	movlw	low STR_4
  1402   001926  6E32               	movwf	sprintf@fmt^0,c
  1403   001928  0E00               	movlw	0
  1404   00192A  6E34               	movwf	(?_sprintf+3)^0,c
  1405   00192C  0E01               	movlw	1
  1406   00192E  6E33               	movwf	(?_sprintf+2)^0,c
  1407   001930  EC3A  F011         	call	_sprintf	;wreg free
  1408   001934                     l3593:
  1409                           
  1410                           ;color.c: 177:         sendStringSerial4(led_state);
  1411   001934  0EC4               	movlw	low test@led_state
  1412   001936  6E02               	movwf	sendStringSerial4@string^0,c
  1413   001938  EC6E  F011         	call	_sendStringSerial4	;wreg free
  1414   00193C                     
  1415                           ;color.c: 179:         reading_values(&colorCurrent);
  1416   00193C  0E98               	movlw	low _colorCurrent
  1417   00193E  6E0C               	movwf	reading_values@cCurr^0,c
  1418   001940  0E01               	movlw	high _colorCurrent
  1419   001942  6E0D               	movwf	(reading_values@cCurr+1)^0,c
  1420   001944  ECB9  F00F         	call	_reading_values	;wreg free
  1421   001948                     
  1422                           ;color.c: 181:         unsigned int hue = convert_rgb2hue(&colorCalibration, &colorCurre
      +                          nt);
  1423   001948  0EA0               	movlw	low _colorCalibration
  1424   00194A  6E0E               	movwf	convert_rgb2hue@cMax^0,c
  1425   00194C  0E01               	movlw	high _colorCalibration
  1426   00194E  6E0F               	movwf	(convert_rgb2hue@cMax+1)^0,c
  1427   001950  0E98               	movlw	low _colorCurrent
  1428   001952  6E10               	movwf	convert_rgb2hue@cCurr^0,c
  1429   001954  0E01               	movlw	high _colorCurrent
  1430   001956  6E11               	movwf	(convert_rgb2hue@cCurr+1)^0,c
  1431   001958  EC6E  F007         	call	_convert_rgb2hue	;wreg free
  1432   00195C  C00E  F0F6         	movff	?_convert_rgb2hue,test@hue
  1433   001960  C00F  F0F7         	movff	?_convert_rgb2hue+1,test@hue+1
  1434   001964                     
  1435                           ;color.c: 187:         send2USART(battery_level,hue);
  1436   001964  C051  F04D         	movff	test@battery_level,send2USART@battery_level
  1437   001968  C052  F04E         	movff	test@battery_level+1,send2USART@battery_level+1
  1438   00196C  C0F6  F04F         	movff	test@hue,send2USART@hue
  1439   001970  C0F7  F050         	movff	test@hue+1,send2USART@hue+1
  1440   001974  EC05  F011         	call	_send2USART	;wreg free
  1441   001978                     
  1442                           ;color.c: 188:     }
  1443   001978  0100               	movlb	0	; () banked
  1444   00197A  4BF8               	infsnz	test@combo& (0+255),f,b
  1445   00197C  2BF9               	incf	(test@combo+1)& (0+255),f,b
  1446   00197E                     
  1447                           ; BSR set to: 0
  1448   00197E  51F9               	movf	(test@combo+1)& (0+255),w,b
  1449   001980  E109               	bnz	u2530
  1450   001982  0E04               	movlw	4
  1451   001984  5DF8               	subwf	test@combo& (0+255),w,b
  1452   001986  A0D8               	btfss	status,0,c
  1453   001988  EFC8  F00C         	goto	u2531
  1454   00198C  EFCA  F00C         	goto	u2530
  1455   001990                     u2531:
  1456   001990  EF22  F00C         	goto	l3569
  1457   001994                     u2530:
  1458   001994                     
  1459                           ; BSR set to: 0
  1460   001994  0012               	return		;funcret
  1461   001996                     __end_of_test:
  1462                           	callstack 0
  1463                           
  1464 ;; *************** function _send2USART *****************
  1465 ;; Defined at:
  1466 ;;		line 146 in file "serial.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  battery_leve    2   76[COMRAM] unsigned int 
  1469 ;;  hue             2   78[COMRAM] unsigned int 
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;  hue_char       50   50[BANK0 ] unsigned char [50]
  1472 ;;  buf            50    0[BANK0 ] unsigned char [50]
  1473 ;; Return value:  Size  Location     Type
  1474 ;;                  1    wreg      void 
  1475 ;; Registers used:
  1476 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1477 ;; Tracked objects:
  1478 ;;		On entry : 0/0
  1479 ;;		On exit  : 0/0
  1480 ;;		Unchanged: 0/0
  1481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1482 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1483 ;;      Locals:         0     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1485 ;;      Totals:         4     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1486 ;;Total ram usage:      104 bytes
  1487 ;; Hardware stack levels used: 1
  1488 ;; Hardware stack levels required when called: 9
  1489 ;; This function calls:
  1490 ;;		_ADC2String
  1491 ;;		_sendStringSerial4
  1492 ;;		_sprintf
  1493 ;; This function is called by:
  1494 ;;		_test
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text2
  1499   00220A                     __ptext2:
  1500                           	callstack 0
  1501   00220A                     _send2USART:
  1502                           	callstack 20
  1503   00220A                     
  1504                           ;serial.c: 146: void send2USART(unsigned int battery_level, unsigned int hue);serial.c: 
      +                          147: {;serial.c: 148:         char buf[50];;serial.c: 149:         char hue_char[50];;se
      +                          rial.c: 154:         ADC2String(buf, battery_level);
  1505   00220A  0E60               	movlw	low send2USART@buf
  1506   00220C  6E44               	movwf	ADC2String@buf^0,c
  1507   00220E  C04D  F045         	movff	send2USART@battery_level,ADC2String@ADC_val
  1508   002212  C04E  F046         	movff	send2USART@battery_level+1,ADC2String@ADC_val+1
  1509   002216  EC9B  F00E         	call	_ADC2String	;wreg free
  1510                           
  1511                           ;serial.c: 155:         sprintf(hue_char,"hue=%05d,  ",hue);
  1512   00221A  0E92               	movlw	low send2USART@hue_char
  1513   00221C  6E31               	movwf	sprintf@s^0,c
  1514   00221E  0EB1               	movlw	low STR_16
  1515   002220  6E32               	movwf	sprintf@fmt^0,c
  1516   002222  C04F  F033         	movff	send2USART@hue,?_sprintf+2
  1517   002226  C050  F034         	movff	send2USART@hue+1,?_sprintf+3
  1518   00222A  EC3A  F011         	call	_sprintf	;wreg free
  1519   00222E                     
  1520                           ;serial.c: 160:         sendStringSerial4(buf);
  1521   00222E  0E60               	movlw	low send2USART@buf
  1522   002230  6E02               	movwf	sendStringSerial4@string^0,c
  1523   002232  EC6E  F011         	call	_sendStringSerial4	;wreg free
  1524   002236                     
  1525                           ;serial.c: 161:         sendStringSerial4(hue_char);
  1526   002236  0E92               	movlw	low send2USART@hue_char
  1527   002238  6E02               	movwf	sendStringSerial4@string^0,c
  1528   00223A  EC6E  F011         	call	_sendStringSerial4	;wreg free
  1529   00223E  0012               	return		;funcret
  1530   002240                     __end_of_send2USART:
  1531                           	callstack 0
  1532                           
  1533 ;; *************** function _ADC2String *****************
  1534 ;; Defined at:
  1535 ;;		line 135 in file "serial.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;  buf             1   67[COMRAM] PTR unsigned char 
  1538 ;;		 -> send2USART@buf(50), sendAllReadings@buffer(10), 
  1539 ;;  ADC_val         2   68[COMRAM] unsigned int 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  int_part        2   74[COMRAM] unsigned int 
  1542 ;;  frac_part       2   72[COMRAM] unsigned int 
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      void 
  1545 ;; Registers used:
  1546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1552 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1553 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1554 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1555 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1556 ;;Total ram usage:        9 bytes
  1557 ;; Hardware stack levels used: 1
  1558 ;; Hardware stack levels required when called: 8
  1559 ;; This function calls:
  1560 ;;		___lwdiv
  1561 ;;		___wmul
  1562 ;;		_sprintf
  1563 ;; This function is called by:
  1564 ;;		_send2USART
  1565 ;;		_sendAllReadings
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text3
  1570   001D36                     __ptext3:
  1571                           	callstack 0
  1572   001D36                     _ADC2String:
  1573                           	callstack 20
  1574   001D36                     
  1575                           ;serial.c: 137:     unsigned int int_part=ADC_val/77;
  1576   001D36  C045  F007         	movff	ADC2String@ADC_val,___lwdiv@dividend
  1577   001D3A  C046  F008         	movff	ADC2String@ADC_val+1,___lwdiv@dividend+1
  1578   001D3E  0E00               	movlw	0
  1579   001D40  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1580   001D42  0E4D               	movlw	77
  1581   001D44  6E09               	movwf	___lwdiv@divisor^0,c
  1582   001D46  EC7F  F00F         	call	___lwdiv	;wreg free
  1583   001D4A  C007  F04B         	movff	?___lwdiv,ADC2String@int_part
  1584   001D4E  C008  F04C         	movff	?___lwdiv+1,ADC2String@int_part+1
  1585   001D52                     
  1586                           ;serial.c: 139:     unsigned int frac_part=(ADC_val*100)/77 - int_part*100;
  1587   001D52  C045  F001         	movff	ADC2String@ADC_val,___wmul@multiplier
  1588   001D56  C046  F002         	movff	ADC2String@ADC_val+1,___wmul@multiplier+1
  1589   001D5A  0E00               	movlw	0
  1590   001D5C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1591   001D5E  0E64               	movlw	100
  1592   001D60  6E03               	movwf	___wmul@multiplicand^0,c
  1593   001D62  ECB0  F011         	call	___wmul	;wreg free
  1594   001D66  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1595   001D6A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1596   001D6E  0E00               	movlw	0
  1597   001D70  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1598   001D72  0E4D               	movlw	77
  1599   001D74  6E09               	movwf	___lwdiv@divisor^0,c
  1600   001D76  EC7F  F00F         	call	___lwdiv	;wreg free
  1601   001D7A  C007  F047         	movff	?___lwdiv,??_ADC2String
  1602   001D7E  C008  F048         	movff	?___lwdiv+1,??_ADC2String+1
  1603   001D82  C04B  F001         	movff	ADC2String@int_part,___wmul@multiplier
  1604   001D86  C04C  F002         	movff	ADC2String@int_part+1,___wmul@multiplier+1
  1605   001D8A  0EFF               	movlw	255
  1606   001D8C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1607   001D8E  0E9C               	movlw	156
  1608   001D90  6E03               	movwf	___wmul@multiplicand^0,c
  1609   001D92  ECB0  F011         	call	___wmul	;wreg free
  1610   001D96  5001               	movf	?___wmul^0,w,c
  1611   001D98  2447               	addwf	??_ADC2String^0,w,c
  1612   001D9A  6E49               	movwf	ADC2String@frac_part^0,c
  1613   001D9C  5002               	movf	(?___wmul+1)^0,w,c
  1614   001D9E  2048               	addwfc	(??_ADC2String+1)^0,w,c
  1615   001DA0  6E4A               	movwf	(ADC2String@frac_part+1)^0,c
  1616   001DA2                     
  1617                           ;serial.c: 141:     sprintf(buf,"Voltage = %d.%02d,  ",int_part,frac_part);
  1618   001DA2  C044  F031         	movff	ADC2String@buf,sprintf@s
  1619   001DA6  0E2E               	movlw	low STR_15
  1620   001DA8  6E32               	movwf	sprintf@fmt^0,c
  1621   001DAA  C04B  F033         	movff	ADC2String@int_part,?_sprintf+2
  1622   001DAE  C04C  F034         	movff	ADC2String@int_part+1,?_sprintf+3
  1623   001DB2  C049  F035         	movff	ADC2String@frac_part,?_sprintf+4
  1624   001DB6  C04A  F036         	movff	ADC2String@frac_part+1,?_sprintf+5
  1625   001DBA  EC3A  F011         	call	_sprintf	;wreg free
  1626   001DBE                     
  1627                           ;serial.c: 143:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1628   001DBE  0E52               	movlw	82
  1629   001DC0  6E48               	movwf	(??_ADC2String+1)^0,c
  1630   001DC2  0E2B               	movlw	43
  1631   001DC4  6E47               	movwf	??_ADC2String^0,c
  1632   001DC6  0E00               	movlw	0
  1633   001DC8                     u2647:
  1634   001DC8  2EE8               	decfsz	wreg,f,c
  1635   001DCA  D7FE               	bra	u2647
  1636   001DCC  2E47               	decfsz	??_ADC2String^0,f,c
  1637   001DCE  D7FC               	bra	u2647
  1638   001DD0  2E48               	decfsz	(??_ADC2String+1)^0,f,c
  1639   001DD2  D7FA               	bra	u2647
  1640   001DD4  D000               	nop2	
  1641   001DD6  0012               	return		;funcret
  1642   001DD8                     __end_of_ADC2String:
  1643                           	callstack 0
  1644                           
  1645 ;; *************** function _reading_values *****************
  1646 ;; Defined at:
  1647 ;;		line 262 in file "color.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  cCurr           2   11[COMRAM] PTR struct colors
  1650 ;;		 -> colorCurrent(8), 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1662 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1665 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1666 ;;Total ram usage:        2 bytes
  1667 ;; Hardware stack levels used: 1
  1668 ;; Hardware stack levels required when called: 3
  1669 ;; This function calls:
  1670 ;;		_color_read_Blue
  1671 ;;		_color_read_Clear
  1672 ;;		_color_read_Green
  1673 ;;		_color_read_Red
  1674 ;; This function is called by:
  1675 ;;		_test
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text4
  1680   001F72                     __ptext4:
  1681                           	callstack 0
  1682   001F72                     _reading_values:
  1683                           	callstack 26
  1684   001F72                     
  1685                           ;color.c: 262: void reading_values(colors *cCurr);color.c: 263: {;color.c: 266:     (cCu
      +                          rr->red)= color_read_Red();
  1686   001F72  ECE8  F00F         	call	_color_read_Red	;wreg free
  1687   001F76  C00C  FFD9         	movff	reading_values@cCurr,fsr2l
  1688   001F7A  C00D  FFDA         	movff	reading_values@cCurr+1,fsr2h
  1689   001F7E  C005  FFDE         	movff	?_color_read_Red,postinc2
  1690   001F82  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  1691                           
  1692                           ;color.c: 267:     (cCurr->blue) = color_read_Blue();
  1693   001F86  EC60  F010         	call	_color_read_Blue	;wreg free
  1694   001F8A  EE20 F004          	lfsr	2,4
  1695   001F8E  500C               	movf	reading_values@cCurr^0,w,c
  1696   001F90  26D9               	addwf	fsr2l,f,c
  1697   001F92  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1698   001F94  22DA               	addwfc	fsr2h,f,c
  1699   001F96  C005  FFDE         	movff	?_color_read_Blue,postinc2
  1700   001F9A  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  1701                           
  1702                           ;color.c: 268:     (cCurr->green) = color_read_Green();
  1703   001F9E  EC10  F010         	call	_color_read_Green	;wreg free
  1704   001FA2  EE20 F002          	lfsr	2,2
  1705   001FA6  500C               	movf	reading_values@cCurr^0,w,c
  1706   001FA8  26D9               	addwf	fsr2l,f,c
  1707   001FAA  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1708   001FAC  22DA               	addwfc	fsr2h,f,c
  1709   001FAE  C005  FFDE         	movff	?_color_read_Green,postinc2
  1710   001FB2  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  1711                           
  1712                           ;color.c: 269:     (cCurr->clear) = color_read_Clear();
  1713   001FB6  EC38  F010         	call	_color_read_Clear	;wreg free
  1714   001FBA  EE20 F006          	lfsr	2,6
  1715   001FBE  500C               	movf	reading_values@cCurr^0,w,c
  1716   001FC0  26D9               	addwf	fsr2l,f,c
  1717   001FC2  500D               	movf	(reading_values@cCurr+1)^0,w,c
  1718   001FC4  22DA               	addwfc	fsr2h,f,c
  1719   001FC6  C005  FFDE         	movff	?_color_read_Clear,postinc2
  1720   001FCA  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  1721   001FCE  0012               	return		;funcret
  1722   001FD0                     __end_of_reading_values:
  1723                           	callstack 0
  1724                           
  1725 ;; *************** function _convert_rgb2hue *****************
  1726 ;; Defined at:
  1727 ;;		line 98 in file "color.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;  cMax            2   13[COMRAM] PTR struct colors
  1730 ;;		 -> colorCalibration(8), 
  1731 ;;  cCurr           2   15[COMRAM] PTR struct colors
  1732 ;;		 -> colorCurrent(8), 
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;  g               2   35[COMRAM] unsigned int 
  1735 ;;  r               2   33[COMRAM] unsigned int 
  1736 ;;  b               2   31[COMRAM] unsigned int 
  1737 ;;  hue             2   29[COMRAM] unsigned int 
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  2   13[COMRAM] unsigned int 
  1740 ;; Registers used:
  1741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1747 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1748 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1749 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1750 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1751 ;;Total ram usage:       24 bytes
  1752 ;; Hardware stack levels used: 1
  1753 ;; Hardware stack levels required when called: 1
  1754 ;; This function calls:
  1755 ;;		___lwdiv
  1756 ;;		___wmul
  1757 ;; This function is called by:
  1758 ;;		_test
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text5
  1763   000EDC                     __ptext5:
  1764                           	callstack 0
  1765   000EDC                     _convert_rgb2hue:
  1766                           	callstack 28
  1767   000EDC                     
  1768                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned int r = ((cC
      +                          urr->red)*(cMax->blue)*(cMax->green))/((cCurr->red)*(cMax->blue)*(cMax->green)+(cCurr->b
      +                          lue)*(cMax->red)*(cMax->green)+(cCurr->green)*(cMax->blue)*(cMax->red));
  1769   000EDC  C010  FFD9         	movff	convert_rgb2hue@cCurr,fsr2l
  1770   000EE0  C011  FFDA         	movff	convert_rgb2hue@cCurr+1,fsr2h
  1771   000EE4  CFDE F001          	movff	postinc2,___wmul@multiplier
  1772   000EE8  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1773   000EEC  EE20 F004          	lfsr	2,4
  1774   000EF0  500E               	movf	convert_rgb2hue@cMax^0,w,c
  1775   000EF2  26D9               	addwf	fsr2l,f,c
  1776   000EF4  500F               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1777   000EF6  22DA               	addwfc	fsr2h,f,c
  1778   000EF8  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1779   000EFC  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1780   000F00  ECB0  F011         	call	___wmul	;wreg free
  1781   000F04  C001  F016         	movff	?___wmul,_convert_rgb2hue$2839
  1782   000F08  C002  F017         	movff	?___wmul+1,_convert_rgb2hue$2839+1
  1783                           
  1784                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned int r = ((cC
      +                          urr->red)*(cMax->blue)*(cMax->green))/((cCurr->red)*(cMax->blue)*(cMax->green)+(cCurr->b
      +                          lue)*(cMax->red)*(cMax->green)+(cCurr->green)*(cMax->blue)*(cMax->red));
  1785   000F0C  EE20 F002          	lfsr	2,2
  1786   000F10  5010               	movf	convert_rgb2hue@cCurr^0,w,c
  1787   000F12  26D9               	addwf	fsr2l,f,c
  1788   000F14  5011               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1789   000F16  22DA               	addwfc	fsr2h,f,c
  1790   000F18  CFDE F001          	movff	postinc2,___wmul@multiplier
  1791   000F1C  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1792   000F20  EE20 F004          	lfsr	2,4
  1793   000F24  500E               	movf	convert_rgb2hue@cMax^0,w,c
  1794   000F26  26D9               	addwf	fsr2l,f,c
  1795   000F28  500F               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1796   000F2A  22DA               	addwfc	fsr2h,f,c
  1797   000F2C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1798   000F30  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1799   000F34  ECB0  F011         	call	___wmul	;wreg free
  1800   000F38  C001  F018         	movff	?___wmul,_convert_rgb2hue$2840
  1801   000F3C  C002  F019         	movff	?___wmul+1,_convert_rgb2hue$2840+1
  1802                           
  1803                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned int r = ((cC
      +                          urr->red)*(cMax->blue)*(cMax->green))/((cCurr->red)*(cMax->blue)*(cMax->green)+(cCurr->b
      +                          lue)*(cMax->red)*(cMax->green)+(cCurr->green)*(cMax->blue)*(cMax->red));
  1804   000F40  EE20 F004          	lfsr	2,4
  1805   000F44  5010               	movf	convert_rgb2hue@cCurr^0,w,c
  1806   000F46  26D9               	addwf	fsr2l,f,c
  1807   000F48  5011               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1808   000F4A  22DA               	addwfc	fsr2h,f,c
  1809   000F4C  CFDE F001          	movff	postinc2,___wmul@multiplier
  1810   000F50  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1811   000F54  C00E  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  1812   000F58  C00F  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  1813   000F5C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1814   000F60  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1815   000F64  ECB0  F011         	call	___wmul	;wreg free
  1816   000F68  C001  F01A         	movff	?___wmul,_convert_rgb2hue$2841
  1817   000F6C  C002  F01B         	movff	?___wmul+1,_convert_rgb2hue$2841+1
  1818                           
  1819                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned int r = ((cC
      +                          urr->red)*(cMax->blue)*(cMax->green))/((cCurr->red)*(cMax->blue)*(cMax->green)+(cCurr->b
      +                          lue)*(cMax->red)*(cMax->green)+(cCurr->green)*(cMax->blue)*(cMax->red));
  1820   000F70  C010  FFD9         	movff	convert_rgb2hue@cCurr,fsr2l
  1821   000F74  C011  FFDA         	movff	convert_rgb2hue@cCurr+1,fsr2h
  1822   000F78  CFDE F001          	movff	postinc2,___wmul@multiplier
  1823   000F7C  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1824   000F80  EE20 F004          	lfsr	2,4
  1825   000F84  500E               	movf	convert_rgb2hue@cMax^0,w,c
  1826   000F86  26D9               	addwf	fsr2l,f,c
  1827   000F88  500F               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1828   000F8A  22DA               	addwfc	fsr2h,f,c
  1829   000F8C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1830   000F90  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1831   000F94  ECB0  F011         	call	___wmul	;wreg free
  1832   000F98  C001  F01C         	movff	?___wmul,_convert_rgb2hue$2842
  1833   000F9C  C002  F01D         	movff	?___wmul+1,_convert_rgb2hue$2842+1
  1834                           
  1835                           ;color.c: 98: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);co
      +                          lor.c: 99: {;color.c: 100:     unsigned int hue;;color.c: 101:     unsigned int r = ((cC
      +                          urr->red)*(cMax->blue)*(cMax->green))/((cCurr->red)*(cMax->blue)*(cMax->green)+(cCurr->b
      +                          lue)*(cMax->red)*(cMax->green)+(cCurr->green)*(cMax->blue)*(cMax->red));
  1836   000FA0  C016  F001         	movff	_convert_rgb2hue$2839,___wmul@multiplier
  1837   000FA4  C017  F002         	movff	_convert_rgb2hue$2839+1,___wmul@multiplier+1
  1838   000FA8  EE20 F002          	lfsr	2,2
  1839   000FAC  500E               	movf	convert_rgb2hue@cMax^0,w,c
  1840   000FAE  26D9               	addwf	fsr2l,f,c
  1841   000FB0  500F               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1842   000FB2  22DA               	addwfc	fsr2h,f,c
  1843   000FB4  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1844   000FB8  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1845   000FBC  ECB0  F011         	call	___wmul	;wreg free
  1846   000FC0  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1847   000FC4  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1848   000FC8  C01C  F001         	movff	_convert_rgb2hue$2842,___wmul@multiplier
  1849   000FCC  C01D  F002         	movff	_convert_rgb2hue$2842+1,___wmul@multiplier+1
  1850   000FD0  EE20 F002          	lfsr	2,2
  1851   000FD4  500E               	movf	convert_rgb2hue@cMax^0,w,c
  1852   000FD6  26D9               	addwf	fsr2l,f,c
  1853   000FD8  500F               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1854   000FDA  22DA               	addwfc	fsr2h,f,c
  1855   000FDC  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1856   000FE0  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1857   000FE4  ECB0  F011         	call	___wmul	;wreg free
  1858   000FE8  C001  F012         	movff	?___wmul,??_convert_rgb2hue
  1859   000FEC  C002  F013         	movff	?___wmul+1,??_convert_rgb2hue+1
  1860   000FF0  C01A  F001         	movff	_convert_rgb2hue$2841,___wmul@multiplier
  1861   000FF4  C01B  F002         	movff	_convert_rgb2hue$2841+1,___wmul@multiplier+1
  1862   000FF8  EE20 F002          	lfsr	2,2
  1863   000FFC  500E               	movf	convert_rgb2hue@cMax^0,w,c
  1864   000FFE  26D9               	addwf	fsr2l,f,c
  1865   001000  500F               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1866   001002  22DA               	addwfc	fsr2h,f,c
  1867   001004  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1868   001008  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1869   00100C  ECB0  F011         	call	___wmul	;wreg free
  1870   001010  5001               	movf	?___wmul^0,w,c
  1871   001012  2412               	addwf	??_convert_rgb2hue^0,w,c
  1872   001014  6E14               	movwf	(??_convert_rgb2hue+2)^0,c
  1873   001016  5002               	movf	(?___wmul+1)^0,w,c
  1874   001018  2013               	addwfc	(??_convert_rgb2hue+1)^0,w,c
  1875   00101A  6E15               	movwf	(??_convert_rgb2hue+3)^0,c
  1876   00101C  C018  F001         	movff	_convert_rgb2hue$2840,___wmul@multiplier
  1877   001020  C019  F002         	movff	_convert_rgb2hue$2840+1,___wmul@multiplier+1
  1878   001024  C00E  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  1879   001028  C00F  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  1880   00102C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1881   001030  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1882   001034  ECB0  F011         	call	___wmul	;wreg free
  1883   001038  5001               	movf	?___wmul^0,w,c
  1884   00103A  2414               	addwf	(??_convert_rgb2hue+2)^0,w,c
  1885   00103C  6E09               	movwf	___lwdiv@divisor^0,c
  1886   00103E  5002               	movf	(?___wmul+1)^0,w,c
  1887   001040  2015               	addwfc	(??_convert_rgb2hue+3)^0,w,c
  1888   001042  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1889   001044  EC7F  F00F         	call	___lwdiv	;wreg free
  1890   001048  C007  F022         	movff	?___lwdiv,convert_rgb2hue@r
  1891   00104C  C008  F023         	movff	?___lwdiv+1,convert_rgb2hue@r+1
  1892                           
  1893                           ;color.c: 102:     unsigned int g = ((cCurr->green)*(cMax->blue)*(cMax->red))/((cCurr->r
      +                          ed)*(cMax->blue)*(cMax->green)+(cCurr->blue)*(cMax->red)*(cMax->green)+(cCurr->green)*(c
      +                          Max->blue)*(cMax->red));
  1894   001050  EE20 F002          	lfsr	2,2
  1895   001054  5010               	movf	convert_rgb2hue@cCurr^0,w,c
  1896   001056  26D9               	addwf	fsr2l,f,c
  1897   001058  5011               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1898   00105A  22DA               	addwfc	fsr2h,f,c
  1899   00105C  CFDE F001          	movff	postinc2,___wmul@multiplier
  1900   001060  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1901   001064  EE20 F004          	lfsr	2,4
  1902   001068  500E               	movf	convert_rgb2hue@cMax^0,w,c
  1903   00106A  26D9               	addwf	fsr2l,f,c
  1904   00106C  500F               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1905   00106E  22DA               	addwfc	fsr2h,f,c
  1906   001070  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1907   001074  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1908   001078  ECB0  F011         	call	___wmul	;wreg free
  1909   00107C  C001  F016         	movff	?___wmul,_convert_rgb2hue$2839
  1910   001080  C002  F017         	movff	?___wmul+1,_convert_rgb2hue$2839+1
  1911                           
  1912                           ;color.c: 102:     unsigned int g = ((cCurr->green)*(cMax->blue)*(cMax->red))/((cCurr->r
      +                          ed)*(cMax->blue)*(cMax->green)+(cCurr->blue)*(cMax->red)*(cMax->green)+(cCurr->green)*(c
      +                          Max->blue)*(cMax->red));
  1913   001084  EE20 F002          	lfsr	2,2
  1914   001088  5010               	movf	convert_rgb2hue@cCurr^0,w,c
  1915   00108A  26D9               	addwf	fsr2l,f,c
  1916   00108C  5011               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1917   00108E  22DA               	addwfc	fsr2h,f,c
  1918   001090  CFDE F001          	movff	postinc2,___wmul@multiplier
  1919   001094  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1920   001098  EE20 F004          	lfsr	2,4
  1921   00109C  500E               	movf	convert_rgb2hue@cMax^0,w,c
  1922   00109E  26D9               	addwf	fsr2l,f,c
  1923   0010A0  500F               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1924   0010A2  22DA               	addwfc	fsr2h,f,c
  1925   0010A4  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1926   0010A8  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1927   0010AC  ECB0  F011         	call	___wmul	;wreg free
  1928   0010B0  C001  F018         	movff	?___wmul,_convert_rgb2hue$2840
  1929   0010B4  C002  F019         	movff	?___wmul+1,_convert_rgb2hue$2840+1
  1930                           
  1931                           ;color.c: 102:     unsigned int g = ((cCurr->green)*(cMax->blue)*(cMax->red))/((cCurr->r
      +                          ed)*(cMax->blue)*(cMax->green)+(cCurr->blue)*(cMax->red)*(cMax->green)+(cCurr->green)*(c
      +                          Max->blue)*(cMax->red));
  1932   0010B8  EE20 F004          	lfsr	2,4
  1933   0010BC  5010               	movf	convert_rgb2hue@cCurr^0,w,c
  1934   0010BE  26D9               	addwf	fsr2l,f,c
  1935   0010C0  5011               	movf	(convert_rgb2hue@cCurr+1)^0,w,c
  1936   0010C2  22DA               	addwfc	fsr2h,f,c
  1937   0010C4  CFDE F001          	movff	postinc2,___wmul@multiplier
  1938   0010C8  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1939   0010CC  C00E  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  1940   0010D0  C00F  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  1941   0010D4  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1942   0010D8  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1943   0010DC  ECB0  F011         	call	___wmul	;wreg free
  1944   0010E0  C001  F01A         	movff	?___wmul,_convert_rgb2hue$2841
  1945   0010E4  C002  F01B         	movff	?___wmul+1,_convert_rgb2hue$2841+1
  1946                           
  1947                           ;color.c: 102:     unsigned int g = ((cCurr->green)*(cMax->blue)*(cMax->red))/((cCurr->r
      +                          ed)*(cMax->blue)*(cMax->green)+(cCurr->blue)*(cMax->red)*(cMax->green)+(cCurr->green)*(c
      +                          Max->blue)*(cMax->red));
  1948   0010E8  C010  FFD9         	movff	convert_rgb2hue@cCurr,fsr2l
  1949   0010EC  C011  FFDA         	movff	convert_rgb2hue@cCurr+1,fsr2h
  1950   0010F0  CFDE F001          	movff	postinc2,___wmul@multiplier
  1951   0010F4  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1952   0010F8  EE20 F004          	lfsr	2,4
  1953   0010FC  500E               	movf	convert_rgb2hue@cMax^0,w,c
  1954   0010FE  26D9               	addwf	fsr2l,f,c
  1955   001100  500F               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1956   001102  22DA               	addwfc	fsr2h,f,c
  1957   001104  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1958   001108  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1959   00110C  ECB0  F011         	call	___wmul	;wreg free
  1960   001110  C001  F01C         	movff	?___wmul,_convert_rgb2hue$2842
  1961   001114  C002  F01D         	movff	?___wmul+1,_convert_rgb2hue$2842+1
  1962                           
  1963                           ;color.c: 102:     unsigned int g = ((cCurr->green)*(cMax->blue)*(cMax->red))/((cCurr->r
      +                          ed)*(cMax->blue)*(cMax->green)+(cCurr->blue)*(cMax->red)*(cMax->green)+(cCurr->green)*(c
      +                          Max->blue)*(cMax->red));
  1964   001118  C016  F001         	movff	_convert_rgb2hue$2839,___wmul@multiplier
  1965   00111C  C017  F002         	movff	_convert_rgb2hue$2839+1,___wmul@multiplier+1
  1966   001120  C00E  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  1967   001124  C00F  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  1968   001128  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1969   00112C  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1970   001130  ECB0  F011         	call	___wmul	;wreg free
  1971   001134  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1972   001138  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1973   00113C  C01C  F001         	movff	_convert_rgb2hue$2842,___wmul@multiplier
  1974   001140  C01D  F002         	movff	_convert_rgb2hue$2842+1,___wmul@multiplier+1
  1975   001144  EE20 F002          	lfsr	2,2
  1976   001148  500E               	movf	convert_rgb2hue@cMax^0,w,c
  1977   00114A  26D9               	addwf	fsr2l,f,c
  1978   00114C  500F               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1979   00114E  22DA               	addwfc	fsr2h,f,c
  1980   001150  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1981   001154  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1982   001158  ECB0  F011         	call	___wmul	;wreg free
  1983   00115C  C001  F012         	movff	?___wmul,??_convert_rgb2hue
  1984   001160  C002  F013         	movff	?___wmul+1,??_convert_rgb2hue+1
  1985   001164  C01A  F001         	movff	_convert_rgb2hue$2841,___wmul@multiplier
  1986   001168  C01B  F002         	movff	_convert_rgb2hue$2841+1,___wmul@multiplier+1
  1987   00116C  EE20 F002          	lfsr	2,2
  1988   001170  500E               	movf	convert_rgb2hue@cMax^0,w,c
  1989   001172  26D9               	addwf	fsr2l,f,c
  1990   001174  500F               	movf	(convert_rgb2hue@cMax+1)^0,w,c
  1991   001176  22DA               	addwfc	fsr2h,f,c
  1992   001178  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1993   00117C  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1994   001180  ECB0  F011         	call	___wmul	;wreg free
  1995   001184  5001               	movf	?___wmul^0,w,c
  1996   001186  2412               	addwf	??_convert_rgb2hue^0,w,c
  1997   001188  6E14               	movwf	(??_convert_rgb2hue+2)^0,c
  1998   00118A  5002               	movf	(?___wmul+1)^0,w,c
  1999   00118C  2013               	addwfc	(??_convert_rgb2hue+1)^0,w,c
  2000   00118E  6E15               	movwf	(??_convert_rgb2hue+3)^0,c
  2001   001190  C018  F001         	movff	_convert_rgb2hue$2840,___wmul@multiplier
  2002   001194  C019  F002         	movff	_convert_rgb2hue$2840+1,___wmul@multiplier+1
  2003   001198  C00E  FFD9         	movff	convert_rgb2hue@cMax,fsr2l
  2004   00119C  C00F  FFDA         	movff	convert_rgb2hue@cMax+1,fsr2h
  2005   0011A0  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2006   0011A4  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2007   0011A8  ECB0  F011         	call	___wmul	;wreg free
  2008   0011AC  5001               	movf	?___wmul^0,w,c
  2009   0011AE  2414               	addwf	(??_convert_rgb2hue+2)^0,w,c
  2010   0011B0  6E09               	movwf	___lwdiv@divisor^0,c
  2011   0011B2  5002               	movf	(?___wmul+1)^0,w,c
  2012   0011B4  2015               	addwfc	(??_convert_rgb2hue+3)^0,w,c
  2013   0011B6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2014   0011B8  EC7F  F00F         	call	___lwdiv	;wreg free
  2015   0011BC  C007  F024         	movff	?___lwdiv,convert_rgb2hue@g
  2016   0011C0  C008  F025         	movff	?___lwdiv+1,convert_rgb2hue@g+1
  2017   0011C4                     
  2018                           ;color.c: 103:     unsigned int b = 1-r-g;
  2019   0011C4  C022  F012         	movff	convert_rgb2hue@r,??_convert_rgb2hue
  2020   0011C8  C023  F013         	movff	convert_rgb2hue@r+1,??_convert_rgb2hue+1
  2021   0011CC  1E12               	comf	??_convert_rgb2hue^0,f,c
  2022   0011CE  1E13               	comf	(??_convert_rgb2hue+1)^0,f,c
  2023   0011D0  4A12               	infsnz	??_convert_rgb2hue^0,f,c
  2024   0011D2  2A13               	incf	(??_convert_rgb2hue+1)^0,f,c
  2025   0011D4  5024               	movf	convert_rgb2hue@g^0,w,c
  2026   0011D6  5E12               	subwf	??_convert_rgb2hue^0,f,c
  2027   0011D8  5025               	movf	(convert_rgb2hue@g+1)^0,w,c
  2028   0011DA  5A13               	subwfb	(??_convert_rgb2hue+1)^0,f,c
  2029   0011DC  0E01               	movlw	1
  2030   0011DE  2412               	addwf	??_convert_rgb2hue^0,w,c
  2031   0011E0  6E20               	movwf	convert_rgb2hue@b^0,c
  2032   0011E2  0E00               	movlw	0
  2033   0011E4  2013               	addwfc	(??_convert_rgb2hue+1)^0,w,c
  2034   0011E6  6E21               	movwf	(convert_rgb2hue@b+1)^0,c
  2035   0011E8                     
  2036                           ;color.c: 105:     if (r>g & r>b){
  2037   0011E8  5022               	movf	convert_rgb2hue@r^0,w,c
  2038   0011EA  5C24               	subwf	convert_rgb2hue@g^0,w,c
  2039   0011EC  5023               	movf	(convert_rgb2hue@r+1)^0,w,c
  2040   0011EE  5825               	subwfb	(convert_rgb2hue@g+1)^0,w,c
  2041   0011F0  B0D8               	btfsc	status,0,c
  2042   0011F2  EFFD  F008         	goto	u2321
  2043   0011F6  EFFF  F008         	goto	u2320
  2044   0011FA                     u2321:
  2045   0011FA  EF33  F009         	goto	l3477
  2046   0011FE                     u2320:
  2047   0011FE  5022               	movf	convert_rgb2hue@r^0,w,c
  2048   001200  5C20               	subwf	convert_rgb2hue@b^0,w,c
  2049   001202  5023               	movf	(convert_rgb2hue@r+1)^0,w,c
  2050   001204  5821               	subwfb	(convert_rgb2hue@b+1)^0,w,c
  2051   001206  B0D8               	btfsc	status,0,c
  2052   001208  EF08  F009         	goto	u2331
  2053   00120C  EF0A  F009         	goto	u2330
  2054   001210                     u2331:
  2055   001210  EF33  F009         	goto	l3477
  2056   001214                     u2330:
  2057   001214                     
  2058                           ;color.c: 106:         if (b>g){
  2059   001214  5020               	movf	convert_rgb2hue@b^0,w,c
  2060   001216  5C24               	subwf	convert_rgb2hue@g^0,w,c
  2061   001218  5021               	movf	(convert_rgb2hue@b+1)^0,w,c
  2062   00121A  5825               	subwfb	(convert_rgb2hue@g+1)^0,w,c
  2063   00121C  B0D8               	btfsc	status,0,c
  2064   00121E  EF13  F009         	goto	u2341
  2065   001222  EF15  F009         	goto	u2340
  2066   001226                     u2341:
  2067   001226  EF25  F009         	goto	l3475
  2068   00122A                     u2340:
  2069   00122A  5020               	movf	convert_rgb2hue@b^0,w,c
  2070   00122C  5C24               	subwf	convert_rgb2hue@g^0,w,c
  2071   00122E  6E07               	movwf	___lwdiv@dividend^0,c
  2072   001230  5021               	movf	(convert_rgb2hue@b+1)^0,w,c
  2073   001232  5825               	subwfb	(convert_rgb2hue@g+1)^0,w,c
  2074   001234  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2075   001236  5024               	movf	convert_rgb2hue@g^0,w,c
  2076   001238  5C22               	subwf	convert_rgb2hue@r^0,w,c
  2077   00123A  6E09               	movwf	___lwdiv@divisor^0,c
  2078   00123C  5025               	movf	(convert_rgb2hue@g+1)^0,w,c
  2079   00123E  5823               	subwfb	(convert_rgb2hue@r+1)^0,w,c
  2080   001240  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2081   001242  EC7F  F00F         	call	___lwdiv	;wreg free
  2082                           
  2083                           ;color.c: 108:         } else {
  2084   001246  EF33  F009         	goto	l3477
  2085   00124A                     l3475:
  2086   00124A  5020               	movf	convert_rgb2hue@b^0,w,c
  2087   00124C  5C24               	subwf	convert_rgb2hue@g^0,w,c
  2088   00124E  6E07               	movwf	___lwdiv@dividend^0,c
  2089   001250  5021               	movf	(convert_rgb2hue@b+1)^0,w,c
  2090   001252  5825               	subwfb	(convert_rgb2hue@g+1)^0,w,c
  2091   001254  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2092   001256  5020               	movf	convert_rgb2hue@b^0,w,c
  2093   001258  5C22               	subwf	convert_rgb2hue@r^0,w,c
  2094   00125A  6E09               	movwf	___lwdiv@divisor^0,c
  2095   00125C  5021               	movf	(convert_rgb2hue@b+1)^0,w,c
  2096   00125E  5823               	subwfb	(convert_rgb2hue@r+1)^0,w,c
  2097   001260  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2098   001262  EC7F  F00F         	call	___lwdiv	;wreg free
  2099   001266                     l3477:
  2100                           
  2101                           ;color.c: 113:     if (g>r & g>b){
  2102   001266  5024               	movf	convert_rgb2hue@g^0,w,c
  2103   001268  5C22               	subwf	convert_rgb2hue@r^0,w,c
  2104   00126A  5025               	movf	(convert_rgb2hue@g+1)^0,w,c
  2105   00126C  5823               	subwfb	(convert_rgb2hue@r+1)^0,w,c
  2106   00126E  B0D8               	btfsc	status,0,c
  2107   001270  EF3C  F009         	goto	u2351
  2108   001274  EF3E  F009         	goto	u2350
  2109   001278                     u2351:
  2110   001278  EF72  F009         	goto	l3487
  2111   00127C                     u2350:
  2112   00127C  5024               	movf	convert_rgb2hue@g^0,w,c
  2113   00127E  5C20               	subwf	convert_rgb2hue@b^0,w,c
  2114   001280  5025               	movf	(convert_rgb2hue@g+1)^0,w,c
  2115   001282  5821               	subwfb	(convert_rgb2hue@b+1)^0,w,c
  2116   001284  B0D8               	btfsc	status,0,c
  2117   001286  EF47  F009         	goto	u2361
  2118   00128A  EF49  F009         	goto	u2360
  2119   00128E                     u2361:
  2120   00128E  EF72  F009         	goto	l3487
  2121   001292                     u2360:
  2122   001292                     
  2123                           ;color.c: 114:         if (r>b){
  2124   001292  5022               	movf	convert_rgb2hue@r^0,w,c
  2125   001294  5C20               	subwf	convert_rgb2hue@b^0,w,c
  2126   001296  5023               	movf	(convert_rgb2hue@r+1)^0,w,c
  2127   001298  5821               	subwfb	(convert_rgb2hue@b+1)^0,w,c
  2128   00129A  B0D8               	btfsc	status,0,c
  2129   00129C  EF52  F009         	goto	u2371
  2130   0012A0  EF54  F009         	goto	u2370
  2131   0012A4                     u2371:
  2132   0012A4  EF64  F009         	goto	l3485
  2133   0012A8                     u2370:
  2134   0012A8  5022               	movf	convert_rgb2hue@r^0,w,c
  2135   0012AA  5C20               	subwf	convert_rgb2hue@b^0,w,c
  2136   0012AC  6E07               	movwf	___lwdiv@dividend^0,c
  2137   0012AE  5023               	movf	(convert_rgb2hue@r+1)^0,w,c
  2138   0012B0  5821               	subwfb	(convert_rgb2hue@b+1)^0,w,c
  2139   0012B2  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2140   0012B4  5020               	movf	convert_rgb2hue@b^0,w,c
  2141   0012B6  5C24               	subwf	convert_rgb2hue@g^0,w,c
  2142   0012B8  6E09               	movwf	___lwdiv@divisor^0,c
  2143   0012BA  5021               	movf	(convert_rgb2hue@b+1)^0,w,c
  2144   0012BC  5825               	subwfb	(convert_rgb2hue@g+1)^0,w,c
  2145   0012BE  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2146   0012C0  EC7F  F00F         	call	___lwdiv	;wreg free
  2147                           
  2148                           ;color.c: 116:         } else {
  2149   0012C4  EF72  F009         	goto	l3487
  2150   0012C8                     l3485:
  2151   0012C8  5022               	movf	convert_rgb2hue@r^0,w,c
  2152   0012CA  5C20               	subwf	convert_rgb2hue@b^0,w,c
  2153   0012CC  6E07               	movwf	___lwdiv@dividend^0,c
  2154   0012CE  5023               	movf	(convert_rgb2hue@r+1)^0,w,c
  2155   0012D0  5821               	subwfb	(convert_rgb2hue@b+1)^0,w,c
  2156   0012D2  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2157   0012D4  5022               	movf	convert_rgb2hue@r^0,w,c
  2158   0012D6  5C24               	subwf	convert_rgb2hue@g^0,w,c
  2159   0012D8  6E09               	movwf	___lwdiv@divisor^0,c
  2160   0012DA  5023               	movf	(convert_rgb2hue@r+1)^0,w,c
  2161   0012DC  5825               	subwfb	(convert_rgb2hue@g+1)^0,w,c
  2162   0012DE  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2163   0012E0  EC7F  F00F         	call	___lwdiv	;wreg free
  2164   0012E4                     l3487:
  2165                           
  2166                           ;color.c: 120:     if (b>r & b>g){
  2167   0012E4  5020               	movf	convert_rgb2hue@b^0,w,c
  2168   0012E6  5C22               	subwf	convert_rgb2hue@r^0,w,c
  2169   0012E8  5021               	movf	(convert_rgb2hue@b+1)^0,w,c
  2170   0012EA  5823               	subwfb	(convert_rgb2hue@r+1)^0,w,c
  2171   0012EC  B0D8               	btfsc	status,0,c
  2172   0012EE  EF7B  F009         	goto	u2381
  2173   0012F2  EF7D  F009         	goto	u2380
  2174   0012F6                     u2381:
  2175   0012F6  EFC1  F009         	goto	l80
  2176   0012FA                     u2380:
  2177   0012FA  5020               	movf	convert_rgb2hue@b^0,w,c
  2178   0012FC  5C24               	subwf	convert_rgb2hue@g^0,w,c
  2179   0012FE  5021               	movf	(convert_rgb2hue@b+1)^0,w,c
  2180   001300  5825               	subwfb	(convert_rgb2hue@g+1)^0,w,c
  2181   001302  B0D8               	btfsc	status,0,c
  2182   001304  EF86  F009         	goto	u2391
  2183   001308  EF88  F009         	goto	u2390
  2184   00130C                     u2391:
  2185   00130C  EFC1  F009         	goto	l80
  2186   001310                     u2390:
  2187   001310                     
  2188                           ;color.c: 121:         if (r>g){
  2189   001310  5022               	movf	convert_rgb2hue@r^0,w,c
  2190   001312  5C24               	subwf	convert_rgb2hue@g^0,w,c
  2191   001314  5023               	movf	(convert_rgb2hue@r+1)^0,w,c
  2192   001316  5825               	subwfb	(convert_rgb2hue@g+1)^0,w,c
  2193   001318  B0D8               	btfsc	status,0,c
  2194   00131A  EF91  F009         	goto	u2401
  2195   00131E  EF93  F009         	goto	u2400
  2196   001322                     u2401:
  2197   001322  EFA9  F009         	goto	l3495
  2198   001326                     u2400:
  2199   001326                     
  2200                           ;color.c: 122:             hue=4+(r-g)/(b-g);
  2201   001326  5024               	movf	convert_rgb2hue@g^0,w,c
  2202   001328  5C22               	subwf	convert_rgb2hue@r^0,w,c
  2203   00132A  6E07               	movwf	___lwdiv@dividend^0,c
  2204   00132C  5025               	movf	(convert_rgb2hue@g+1)^0,w,c
  2205   00132E  5823               	subwfb	(convert_rgb2hue@r+1)^0,w,c
  2206   001330  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2207   001332  5024               	movf	convert_rgb2hue@g^0,w,c
  2208   001334  5C20               	subwf	convert_rgb2hue@b^0,w,c
  2209   001336  6E09               	movwf	___lwdiv@divisor^0,c
  2210   001338  5025               	movf	(convert_rgb2hue@g+1)^0,w,c
  2211   00133A  5821               	subwfb	(convert_rgb2hue@b+1)^0,w,c
  2212   00133C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2213   00133E  EC7F  F00F         	call	___lwdiv	;wreg free
  2214   001342  0E04               	movlw	4
  2215   001344  2407               	addwf	?___lwdiv^0,w,c
  2216   001346  6E1E               	movwf	convert_rgb2hue@hue^0,c
  2217   001348  0E00               	movlw	0
  2218   00134A  2008               	addwfc	(?___lwdiv+1)^0,w,c
  2219   00134C  6E1F               	movwf	(convert_rgb2hue@hue+1)^0,c
  2220                           
  2221                           ;color.c: 123:         } else {
  2222   00134E  EFBD  F009         	goto	l3497
  2223   001352                     l3495:
  2224                           
  2225                           ;color.c: 124:             hue=4+(r-g)/(b-r);
  2226   001352  5024               	movf	convert_rgb2hue@g^0,w,c
  2227   001354  5C22               	subwf	convert_rgb2hue@r^0,w,c
  2228   001356  6E07               	movwf	___lwdiv@dividend^0,c
  2229   001358  5025               	movf	(convert_rgb2hue@g+1)^0,w,c
  2230   00135A  5823               	subwfb	(convert_rgb2hue@r+1)^0,w,c
  2231   00135C  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  2232   00135E  5022               	movf	convert_rgb2hue@r^0,w,c
  2233   001360  5C20               	subwf	convert_rgb2hue@b^0,w,c
  2234   001362  6E09               	movwf	___lwdiv@divisor^0,c
  2235   001364  5023               	movf	(convert_rgb2hue@r+1)^0,w,c
  2236   001366  5821               	subwfb	(convert_rgb2hue@b+1)^0,w,c
  2237   001368  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2238   00136A  EC7F  F00F         	call	___lwdiv	;wreg free
  2239   00136E  0E04               	movlw	4
  2240   001370  2407               	addwf	?___lwdiv^0,w,c
  2241   001372  6E1E               	movwf	convert_rgb2hue@hue^0,c
  2242   001374  0E00               	movlw	0
  2243   001376  2008               	addwfc	(?___lwdiv+1)^0,w,c
  2244   001378  6E1F               	movwf	(convert_rgb2hue@hue+1)^0,c
  2245   00137A                     l3497:
  2246                           
  2247                           ;color.c: 126:     return hue;
  2248   00137A  C01E  F00E         	movff	convert_rgb2hue@hue,?_convert_rgb2hue
  2249   00137E  C01F  F00F         	movff	convert_rgb2hue@hue+1,?_convert_rgb2hue+1
  2250   001382                     l80:
  2251   001382  0012               	return		;funcret
  2252   001384                     __end_of_convert_rgb2hue:
  2253                           	callstack 0
  2254                           
  2255 ;; *************** function ___lwdiv *****************
  2256 ;; Defined at:
  2257 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;  dividend        2    6[COMRAM] unsigned int 
  2260 ;;  divisor         2    8[COMRAM] unsigned int 
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  quotient        2   11[COMRAM] unsigned int 
  2263 ;;  counter         1   10[COMRAM] unsigned char 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  2    6[COMRAM] unsigned int 
  2266 ;; Registers used:
  2267 ;;		wreg, status,2, status,0
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2273 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2274 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2276 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2277 ;;Total ram usage:        7 bytes
  2278 ;; Hardware stack levels used: 1
  2279 ;; This function calls:
  2280 ;;		Nothing
  2281 ;; This function is called by:
  2282 ;;		_convert_rgb2hue
  2283 ;;		_ADC2String
  2284 ;;		_setMotorPWM
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text6
  2289   001EFE                     __ptext6:
  2290                           	callstack 0
  2291   001EFE                     ___lwdiv:
  2292                           	callstack 27
  2293   001EFE  0E00               	movlw	0
  2294   001F00  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  2295   001F02  0E00               	movlw	0
  2296   001F04  6E0C               	movwf	___lwdiv@quotient^0,c
  2297   001F06  5009               	movf	___lwdiv@divisor^0,w,c
  2298   001F08  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2299   001F0A  B4D8               	btfsc	status,2,c
  2300   001F0C  EF8A  F00F         	goto	u2261
  2301   001F10  EF8C  F00F         	goto	u2260
  2302   001F14                     u2261:
  2303   001F14  EFB4  F00F         	goto	l958
  2304   001F18                     u2260:
  2305   001F18  0E01               	movlw	1
  2306   001F1A  6E0B               	movwf	___lwdiv@counter^0,c
  2307   001F1C  EF94  F00F         	goto	l3377
  2308   001F20                     l3375:
  2309   001F20  90D8               	bcf	status,0,c
  2310   001F22  3609               	rlcf	___lwdiv@divisor^0,f,c
  2311   001F24  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2312   001F26  2A0B               	incf	___lwdiv@counter^0,f,c
  2313   001F28                     l3377:
  2314   001F28  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2315   001F2A  EF99  F00F         	goto	u2271
  2316   001F2E  EF9B  F00F         	goto	u2270
  2317   001F32                     u2271:
  2318   001F32  EF90  F00F         	goto	l3375
  2319   001F36                     u2270:
  2320   001F36                     l3379:
  2321   001F36  90D8               	bcf	status,0,c
  2322   001F38  360C               	rlcf	___lwdiv@quotient^0,f,c
  2323   001F3A  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2324   001F3C  5009               	movf	___lwdiv@divisor^0,w,c
  2325   001F3E  5C07               	subwf	___lwdiv@dividend^0,w,c
  2326   001F40  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2327   001F42  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2328   001F44  A0D8               	btfss	status,0,c
  2329   001F46  EFA7  F00F         	goto	u2281
  2330   001F4A  EFA9  F00F         	goto	u2280
  2331   001F4E                     u2281:
  2332   001F4E  EFAE  F00F         	goto	l3387
  2333   001F52                     u2280:
  2334   001F52  5009               	movf	___lwdiv@divisor^0,w,c
  2335   001F54  5E07               	subwf	___lwdiv@dividend^0,f,c
  2336   001F56  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2337   001F58  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2338   001F5A  800C               	bsf	___lwdiv@quotient^0,0,c
  2339   001F5C                     l3387:
  2340   001F5C  90D8               	bcf	status,0,c
  2341   001F5E  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2342   001F60  3209               	rrcf	___lwdiv@divisor^0,f,c
  2343   001F62  2E0B               	decfsz	___lwdiv@counter^0,f,c
  2344   001F64  EF9B  F00F         	goto	l3379
  2345   001F68                     l958:
  2346   001F68  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  2347   001F6C  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2348   001F70  0012               	return		;funcret
  2349   001F72                     __end_of___lwdiv:
  2350                           	callstack 0
  2351                           
  2352 ;; *************** function _initUSART4 *****************
  2353 ;; Defined at:
  2354 ;;		line 14 in file "serial.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;		None
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;		None
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  1    wreg      void 
  2361 ;; Registers used:
  2362 ;;		wreg, status,2
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2372 ;;Total ram usage:        0 bytes
  2373 ;; Hardware stack levels used: 1
  2374 ;; This function calls:
  2375 ;;		Nothing
  2376 ;; This function is called by:
  2377 ;;		_main
  2378 ;; This function uses a non-reentrant model
  2379 ;;
  2380                           
  2381                           	psect	text7
  2382   0023A6                     __ptext7:
  2383                           	callstack 0
  2384   0023A6                     _initUSART4:
  2385                           	callstack 30
  2386   0023A6                     
  2387                           ;serial.c: 15:     RC0PPS = 0x12;
  2388   0023A6  0E12               	movlw	18
  2389   0023A8  010E               	movlb	14	; () banked
  2390   0023AA  6F62               	movwf	98,b	;volatile
  2391                           
  2392                           ;serial.c: 16:     RX4PPS = 0x11;
  2393   0023AC  0E11               	movlw	17
  2394   0023AE  6F15               	movwf	21,b	;volatile
  2395   0023B0                     
  2396                           ; BSR set to: 14
  2397                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  2398   0023B0  97E9               	bcf	233,3,b	;volatile
  2399   0023B2                     
  2400                           ; BSR set to: 14
  2401                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  2402   0023B2  95E8               	bcf	232,2,b	;volatile
  2403                           
  2404                           ;serial.c: 19:     SP4BRGL = 51;
  2405   0023B4  0E33               	movlw	51
  2406   0023B6  6FE5               	movwf	229,b	;volatile
  2407                           
  2408                           ;serial.c: 20:     SP4BRGH = 0;
  2409   0023B8  0E00               	movlw	0
  2410   0023BA  6FE6               	movwf	230,b	;volatile
  2411   0023BC                     
  2412                           ; BSR set to: 14
  2413                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  2414   0023BC  89E7               	bsf	231,4,b	;volatile
  2415   0023BE                     
  2416                           ; BSR set to: 14
  2417                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  2418   0023BE  8BE8               	bsf	232,5,b	;volatile
  2419   0023C0                     
  2420                           ; BSR set to: 14
  2421                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  2422   0023C0  8FE7               	bsf	231,7,b	;volatile
  2423   0023C2                     
  2424                           ; BSR set to: 14
  2425   0023C2  0012               	return		;funcret
  2426   0023C4                     __end_of_initUSART4:
  2427                           	callstack 0
  2428                           
  2429 ;; *************** function _initDCmotorsPWM *****************
  2430 ;; Defined at:
  2431 ;;		line 5 in file "dc_motor.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;		None
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  1    wreg      void 
  2438 ;; Registers used:
  2439 ;;		wreg, status,2
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2445 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2448 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2449 ;;Total ram usage:        2 bytes
  2450 ;; Hardware stack levels used: 1
  2451 ;; This function calls:
  2452 ;;		Nothing
  2453 ;; This function is called by:
  2454 ;;		_main
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           	psect	text8
  2459   001E6E                     __ptext8:
  2460                           	callstack 0
  2461   001E6E                     _initDCmotorsPWM:
  2462                           	callstack 30
  2463   001E6E                     
  2464                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  2465   001E6E  9485               	bcf	133,2,c	;volatile
  2466                           
  2467                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  2468   001E70  9E83               	bcf	131,7,c	;volatile
  2469                           
  2470                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  2471   001E72  9885               	bcf	133,4,c	;volatile
  2472                           
  2473                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  2474   001E74  9C87               	bcf	135,6,c	;volatile
  2475                           
  2476                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  2477   001E76  947D               	bcf	125,2,c	;volatile
  2478                           
  2479                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  2480   001E78  9E7B               	bcf	123,7,c	;volatile
  2481                           
  2482                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  2483   001E7A  987D               	bcf	125,4,c	;volatile
  2484                           
  2485                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  2486   001E7C  9C7F               	bcf	127,6,c	;volatile
  2487   001E7E                     
  2488                           ;dc_motor.c: 18:     RE2PPS=0x05;
  2489   001E7E  0E05               	movlw	5
  2490   001E80  010E               	movlb	14	; () banked
  2491   001E82  6F74               	movwf	116,b	;volatile
  2492                           
  2493                           ;dc_motor.c: 19:     RE4PPS=0x06;
  2494   001E84  0E06               	movlw	6
  2495   001E86  6F76               	movwf	118,b	;volatile
  2496                           
  2497                           ;dc_motor.c: 20:     RC7PPS=0x07;
  2498   001E88  0E07               	movlw	7
  2499   001E8A  6F69               	movwf	105,b	;volatile
  2500                           
  2501                           ;dc_motor.c: 21:     RG6PPS=0x08;
  2502   001E8C  0E08               	movlw	8
  2503   001E8E  6F88               	movwf	136,b	;volatile
  2504                           
  2505                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  2506   001E90  50BD               	movf	189,w,c	;volatile
  2507   001E92  0B8F               	andlw	-113
  2508   001E94  0940               	iorlw	64
  2509   001E96  6EBD               	movwf	189,c	;volatile
  2510                           
  2511                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  2512   001E98  0EE0               	movlw	-32
  2513   001E9A  16BE               	andwf	190,f,c	;volatile
  2514                           
  2515                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  2516   001E9C  50BF               	movf	191,w,c	;volatile
  2517   001E9E  0BF0               	andlw	-16
  2518   001EA0  0901               	iorlw	1
  2519   001EA2  6EBF               	movwf	191,c	;volatile
  2520   001EA4                     
  2521                           ; BSR set to: 14
  2522                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  2523   001EA4  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  2524   001EA8                     
  2525                           ; BSR set to: 14
  2526                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  2527   001EA8  8EBD               	bsf	189,7,c	;volatile
  2528                           
  2529                           ;dc_motor.c: 35:     CCPR1H=0;
  2530   001EAA  0E00               	movlw	0
  2531   001EAC  6EAA               	movwf	170,c	;volatile
  2532                           
  2533                           ;dc_motor.c: 36:     CCPR2H=0;
  2534   001EAE  0E00               	movlw	0
  2535   001EB0  6EA6               	movwf	166,c	;volatile
  2536                           
  2537                           ;dc_motor.c: 37:     CCPR3H=0;
  2538   001EB2  0E00               	movlw	0
  2539   001EB4  010F               	movlb	15	; () banked
  2540   001EB6  6F25               	movwf	37,b	;volatile
  2541                           
  2542                           ;dc_motor.c: 38:     CCPR4H=0;
  2543   001EB8  0E00               	movlw	0
  2544   001EBA  6F21               	movwf	33,b	;volatile
  2545                           
  2546                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  2547   001EBC  0EFC               	movlw	-4
  2548   001EBE  16AD               	andwf	173,f,c	;volatile
  2549                           
  2550                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  2551   001EC0  0EF3               	movlw	-13
  2552   001EC2  16AD               	andwf	173,f,c	;volatile
  2553                           
  2554                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  2555   001EC4  0ECF               	movlw	-49
  2556   001EC6  16AD               	andwf	173,f,c	;volatile
  2557                           
  2558                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  2559   001EC8  0E3F               	movlw	-193
  2560   001ECA  16AD               	andwf	173,f,c	;volatile
  2561   001ECC                     
  2562                           ; BSR set to: 15
  2563                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  2564   001ECC  88AB               	bsf	171,4,c	;volatile
  2565                           
  2566                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  2567   001ECE  50AB               	movf	171,w,c	;volatile
  2568   001ED0  0BF0               	andlw	-16
  2569   001ED2  090C               	iorlw	12
  2570   001ED4  6EAB               	movwf	171,c	;volatile
  2571   001ED6                     
  2572                           ; BSR set to: 15
  2573                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  2574   001ED6  8EAB               	bsf	171,7,c	;volatile
  2575   001ED8                     
  2576                           ; BSR set to: 15
  2577                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  2578   001ED8  88A7               	bsf	167,4,c	;volatile
  2579                           
  2580                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  2581   001EDA  50A7               	movf	167,w,c	;volatile
  2582   001EDC  0BF0               	andlw	-16
  2583   001EDE  090C               	iorlw	12
  2584   001EE0  6EA7               	movwf	167,c	;volatile
  2585   001EE2                     
  2586                           ; BSR set to: 15
  2587                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  2588   001EE2  8EA7               	bsf	167,7,c	;volatile
  2589   001EE4                     
  2590                           ; BSR set to: 15
  2591                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  2592   001EE4  8926               	bsf	38,4,b	;volatile
  2593                           
  2594                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  2595   001EE6  5126               	movf	38,w,b	;volatile
  2596   001EE8  0BF0               	andlw	-16
  2597   001EEA  090C               	iorlw	12
  2598   001EEC  6F26               	movwf	38,b	;volatile
  2599   001EEE                     
  2600                           ; BSR set to: 15
  2601                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  2602   001EEE  8F26               	bsf	38,7,b	;volatile
  2603   001EF0                     
  2604                           ; BSR set to: 15
  2605                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  2606   001EF0  8922               	bsf	34,4,b	;volatile
  2607                           
  2608                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  2609   001EF2  5122               	movf	34,w,b	;volatile
  2610   001EF4  0BF0               	andlw	-16
  2611   001EF6  090C               	iorlw	12
  2612   001EF8  6F22               	movwf	34,b	;volatile
  2613   001EFA                     
  2614                           ; BSR set to: 15
  2615                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  2616   001EFA  8F22               	bsf	34,7,b	;volatile
  2617   001EFC                     
  2618                           ; BSR set to: 15
  2619   001EFC  0012               	return		;funcret
  2620   001EFE                     __end_of_initDCmotorsPWM:
  2621                           	callstack 0
  2622                           
  2623 ;; *************** function _color_click_init *****************
  2624 ;; Defined at:
  2625 ;;		line 6 in file "color.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2, status,0, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2642 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2643 ;;Total ram usage:        1 bytes
  2644 ;; Hardware stack levels used: 1
  2645 ;; Hardware stack levels required when called: 3
  2646 ;; This function calls:
  2647 ;;		_I2C_2_Master_Init
  2648 ;;		_color_writetoaddr
  2649 ;; This function is called by:
  2650 ;;		_main
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text9
  2655   002240                     __ptext9:
  2656                           	callstack 0
  2657   002240                     _color_click_init:
  2658                           	callstack 27
  2659   002240                     
  2660                           ;color.c: 9:     I2C_2_Master_Init();
  2661   002240  EC87  F011         	call	_I2C_2_Master_Init	;wreg free
  2662   002244                     
  2663                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  2664   002244  0E01               	movlw	1
  2665   002246  6E03               	movwf	color_writetoaddr@value^0,c
  2666   002248  0E00               	movlw	0
  2667   00224A  ECC3  F011         	call	_color_writetoaddr
  2668   00224E                     
  2669                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2670   00224E  0E3F               	movlw	63
  2671   002250  6E05               	movwf	??_color_click_init^0,c
  2672   002252  0E55               	movlw	85
  2673   002254                     u2657:
  2674   002254  2EE8               	decfsz	wreg,f,c
  2675   002256  D7FE               	bra	u2657
  2676   002258  2E05               	decfsz	??_color_click_init^0,f,c
  2677   00225A  D7FC               	bra	u2657
  2678   00225C  0000               	nop	
  2679   00225E                     
  2680                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  2681   00225E  0E03               	movlw	3
  2682   002260  6E03               	movwf	color_writetoaddr@value^0,c
  2683   002262  0E00               	movlw	0
  2684   002264  ECC3  F011         	call	_color_writetoaddr
  2685   002268                     
  2686                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  2687   002268  0ED5               	movlw	213
  2688   00226A  6E03               	movwf	color_writetoaddr@value^0,c
  2689   00226C  0E01               	movlw	1
  2690   00226E  ECC3  F011         	call	_color_writetoaddr
  2691   002272  0012               	return		;funcret
  2692   002274                     __end_of_color_click_init:
  2693                           	callstack 0
  2694                           
  2695 ;; *************** function _color_writetoaddr *****************
  2696 ;; Defined at:
  2697 ;;		line 22 in file "color.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;  address         1    wreg     unsigned char 
  2700 ;;  value           1    2[COMRAM] unsigned char 
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;  address         1    3[COMRAM] unsigned char 
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  1    wreg      void 
  2705 ;; Registers used:
  2706 ;;		wreg, status,2, status,0, cstack
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2712 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2713 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2715 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2716 ;;Total ram usage:        2 bytes
  2717 ;; Hardware stack levels used: 1
  2718 ;; Hardware stack levels required when called: 2
  2719 ;; This function calls:
  2720 ;;		_I2C_2_Master_Start
  2721 ;;		_I2C_2_Master_Stop
  2722 ;;		_I2C_2_Master_Write
  2723 ;; This function is called by:
  2724 ;;		_color_click_init
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text10
  2729   002386                     __ptext10:
  2730                           	callstack 0
  2731   002386                     _color_writetoaddr:
  2732                           	callstack 27
  2733                           
  2734                           ;incstack = 0
  2735                           ;color_writetoaddr@address stored from wreg
  2736   002386  6E04               	movwf	color_writetoaddr@address^0,c
  2737   002388                     
  2738                           ;color.c: 23:     I2C_2_Master_Start();
  2739   002388  EC06  F012         	call	_I2C_2_Master_Start	;wreg free
  2740                           
  2741                           ;color.c: 24:     I2C_2_Master_Write(0x52 | 0x00);
  2742   00238C  0E52               	movlw	82
  2743   00238E  ECFB  F011         	call	_I2C_2_Master_Write
  2744                           
  2745                           ;color.c: 25:     I2C_2_Master_Write(0x80 | address);
  2746   002392  5004               	movf	color_writetoaddr@address^0,w,c
  2747   002394  0980               	iorlw	128
  2748   002396  ECFB  F011         	call	_I2C_2_Master_Write
  2749                           
  2750                           ;color.c: 26:     I2C_2_Master_Write(value);
  2751   00239A  5003               	movf	color_writetoaddr@value^0,w,c
  2752   00239C  ECFB  F011         	call	_I2C_2_Master_Write
  2753                           
  2754                           ;color.c: 27:     I2C_2_Master_Stop();
  2755   0023A0  EC01  F012         	call	_I2C_2_Master_Stop	;wreg free
  2756   0023A4  0012               	return		;funcret
  2757   0023A6                     __end_of_color_writetoaddr:
  2758                           	callstack 0
  2759                           
  2760 ;; *************** function _I2C_2_Master_Init *****************
  2761 ;; Defined at:
  2762 ;;		line 4 in file "i2c.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, status,2
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;Total ram usage:        0 bytes
  2781 ;; Hardware stack levels used: 1
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_color_click_init
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text11
  2790   00230E                     __ptext11:
  2791                           	callstack 0
  2792   00230E                     _I2C_2_Master_Init:
  2793                           	callstack 29
  2794   00230E                     
  2795                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2796   00230E  010E               	movlb	14	; () banked
  2797   002310  51D9               	movf	217,w,b	;volatile
  2798   002312  0BF0               	andlw	-16
  2799   002314  0908               	iorlw	8
  2800   002316  6FD9               	movwf	217,b	;volatile
  2801   002318                     
  2802                           ; BSR set to: 14
  2803                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2804   002318  8BD9               	bsf	217,5,b	;volatile
  2805                           
  2806                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2807   00231A  0E9F               	movlw	159
  2808   00231C  6FD6               	movwf	214,b	;volatile
  2809   00231E                     
  2810                           ; BSR set to: 14
  2811                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2812   00231E  8A84               	bsf	132,5,c	;volatile
  2813   002320                     
  2814                           ; BSR set to: 14
  2815                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2816   002320  8C84               	bsf	132,6,c	;volatile
  2817   002322                     
  2818                           ; BSR set to: 14
  2819                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2820   002322  9BA7               	bcf	167,5,b	;volatile
  2821   002324                     
  2822                           ; BSR set to: 14
  2823                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2824   002324  9DA7               	bcf	167,6,b	;volatile
  2825                           
  2826                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2827   002326  0E1D               	movlw	29
  2828   002328  6F1D               	movwf	29,b	;volatile
  2829                           
  2830                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2831   00232A  0E1E               	movlw	30
  2832   00232C  6F1C               	movwf	28,b	;volatile
  2833                           
  2834                           ;i2c.c: 18:   RD5PPS=0x1C;
  2835   00232E  0E1C               	movlw	28
  2836   002330  6F6F               	movwf	111,b	;volatile
  2837                           
  2838                           ;i2c.c: 19:   RD6PPS=0x1B;
  2839   002332  0E1B               	movlw	27
  2840   002334  6F70               	movwf	112,b	;volatile
  2841   002336                     
  2842                           ; BSR set to: 14
  2843   002336  0012               	return		;funcret
  2844   002338                     __end_of_I2C_2_Master_Init:
  2845                           	callstack 0
  2846                           
  2847 ;; *************** function _calibration_routine *****************
  2848 ;; Defined at:
  2849 ;;		line 191 in file "color.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;  cCal            2   67[COMRAM] PTR struct colors
  2852 ;;		 -> colorCalibration(8), 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  cal_state      20   71[COMRAM] unsigned char [20]
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      void 
  2857 ;; Registers used:
  2858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2865 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2866 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2867 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2868 ;;Total ram usage:       24 bytes
  2869 ;; Hardware stack levels used: 1
  2870 ;; Hardware stack levels required when called: 8
  2871 ;; This function calls:
  2872 ;;		_color_read_Blue
  2873 ;;		_color_read_Clear
  2874 ;;		_color_read_Green
  2875 ;;		_color_read_Red
  2876 ;;		_sendStringSerial4
  2877 ;;		_sprintf
  2878 ;; This function is called by:
  2879 ;;		_main
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           	psect	text12
  2884   001384                     __ptext12:
  2885                           	callstack 0
  2886   001384                     _calibration_routine:
  2887                           	callstack 22
  2888   001384                     
  2889                           ;color.c: 191: void calibration_routine(colors *cCal);color.c: 192: {;color.c: 194:     
      +                          LATGbits.LATG0 = 0;
  2890   001384  907F               	bcf	127,0,c	;volatile
  2891                           
  2892                           ;color.c: 195:     LATEbits.LATE7 = 0;
  2893   001386  9E7D               	bcf	125,7,c	;volatile
  2894                           
  2895                           ;color.c: 196:     LATAbits.LATA3 = 0;
  2896   001388  9679               	bcf	121,3,c	;volatile
  2897   00138A                     
  2898                           ;color.c: 198:     char cal_state[20];;color.c: 202:     sprintf(cal_state,"Calibration 
      +                          state=red", ".");
  2899   00138A  0E48               	movlw	low calibration_routine@cal_state
  2900   00138C  6E31               	movwf	sprintf@s^0,c
  2901   00138E  0E18               	movlw	low STR_5
  2902   001390  6E32               	movwf	sprintf@fmt^0,c
  2903   001392  0ED9               	movlw	low STR_6
  2904   001394  6E33               	movwf	(?_sprintf+2)^0,c
  2905   001396  5033               	movf	(?_sprintf+2)^0,w,c
  2906   001398  A4D8               	btfss	status,2,c
  2907   00139A  0E0E               	movlw	high __smallconst
  2908   00139C  6E34               	movwf	(?_sprintf+3)^0,c
  2909   00139E  EC3A  F011         	call	_sprintf	;wreg free
  2910   0013A2                     
  2911                           ;color.c: 203:     sendStringSerial4(cal_state);
  2912   0013A2  0E48               	movlw	low calibration_routine@cal_state
  2913   0013A4  6E02               	movwf	sendStringSerial4@string^0,c
  2914   0013A6  EC6E  F011         	call	_sendStringSerial4	;wreg free
  2915   0013AA                     l92:
  2916                           
  2917                           ;color.c: 206:     while(PORTFbits.RF2 == 1){
  2918   0013AA  B48E               	btfsc	142,2,c	;volatile
  2919   0013AC  EFDA  F009         	goto	u2541
  2920   0013B0  EFDC  F009         	goto	u2540
  2921   0013B4                     u2541:
  2922   0013B4  EFD5  F009         	goto	l92
  2923   0013B8                     u2540:
  2924   0013B8                     
  2925                           ;color.c: 210:     LATGbits.LATG0 = 1;
  2926   0013B8  807F               	bsf	127,0,c	;volatile
  2927   0013BA                     
  2928                           ;color.c: 211:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2929   0013BA  0E29               	movlw	41
  2930   0013BC  6E47               	movwf	(??_calibration_routine+1)^0,c
  2931   0013BE  0E96               	movlw	150
  2932   0013C0  6E46               	movwf	??_calibration_routine^0,c
  2933   0013C2  0E7F               	movlw	127
  2934   0013C4                     u2667:
  2935   0013C4  2EE8               	decfsz	wreg,f,c
  2936   0013C6  D7FE               	bra	u2667
  2937   0013C8  2E46               	decfsz	??_calibration_routine^0,f,c
  2938   0013CA  D7FC               	bra	u2667
  2939   0013CC  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  2940   0013CE  D7FA               	bra	u2667
  2941   0013D0  0000               	nop	
  2942   0013D2                     
  2943                           ;color.c: 212:     (cCal->red) = color_read_Red();
  2944   0013D2  ECE8  F00F         	call	_color_read_Red	;wreg free
  2945   0013D6  C044  FFD9         	movff	calibration_routine@cCal,fsr2l
  2946   0013DA  C045  FFDA         	movff	calibration_routine@cCal+1,fsr2h
  2947   0013DE  C005  FFDE         	movff	?_color_read_Red,postinc2
  2948   0013E2  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  2949   0013E6                     
  2950                           ;color.c: 213:     LATGbits.LATG0 = 0;
  2951   0013E6  907F               	bcf	127,0,c	;volatile
  2952   0013E8                     
  2953                           ;color.c: 216:     sprintf(cal_state,"Calibration state=gree", "green \n\r");
  2954   0013E8  0E48               	movlw	low calibration_routine@cal_state
  2955   0013EA  6E31               	movwf	sprintf@s^0,c
  2956   0013EC  0E01               	movlw	low STR_7
  2957   0013EE  6E32               	movwf	sprintf@fmt^0,c
  2958   0013F0  0EC8               	movlw	low STR_8
  2959   0013F2  6E33               	movwf	(?_sprintf+2)^0,c
  2960   0013F4  5033               	movf	(?_sprintf+2)^0,w,c
  2961   0013F6  A4D8               	btfss	status,2,c
  2962   0013F8  0E0E               	movlw	high __smallconst
  2963   0013FA  6E34               	movwf	(?_sprintf+3)^0,c
  2964   0013FC  EC3A  F011         	call	_sprintf	;wreg free
  2965   001400                     
  2966                           ;color.c: 217:     sendStringSerial4(&cal_state);
  2967   001400  0E48               	movlw	low calibration_routine@cal_state
  2968   001402  6E02               	movwf	sendStringSerial4@string^0,c
  2969   001404  EC6E  F011         	call	_sendStringSerial4	;wreg free
  2970   001408                     l95:
  2971                           
  2972                           ;color.c: 219:     while(PORTFbits.RF2 == 1){
  2973   001408  B48E               	btfsc	142,2,c	;volatile
  2974   00140A  EF09  F00A         	goto	u2551
  2975   00140E  EF0B  F00A         	goto	u2550
  2976   001412                     u2551:
  2977   001412  EF04  F00A         	goto	l95
  2978   001416                     u2550:
  2979   001416                     
  2980                           ;color.c: 223:     LATEbits.LATE7 = 1;
  2981   001416  8E7D               	bsf	125,7,c	;volatile
  2982   001418                     
  2983                           ;color.c: 224:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2984   001418  0E29               	movlw	41
  2985   00141A  6E47               	movwf	(??_calibration_routine+1)^0,c
  2986   00141C  0E96               	movlw	150
  2987   00141E  6E46               	movwf	??_calibration_routine^0,c
  2988   001420  0E7F               	movlw	127
  2989   001422                     u2677:
  2990   001422  2EE8               	decfsz	wreg,f,c
  2991   001424  D7FE               	bra	u2677
  2992   001426  2E46               	decfsz	??_calibration_routine^0,f,c
  2993   001428  D7FC               	bra	u2677
  2994   00142A  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  2995   00142C  D7FA               	bra	u2677
  2996   00142E  0000               	nop	
  2997   001430                     
  2998                           ;color.c: 225:     (cCal->green) = color_read_Green();
  2999   001430  EC10  F010         	call	_color_read_Green	;wreg free
  3000   001434  EE20 F002          	lfsr	2,2
  3001   001438  5044               	movf	calibration_routine@cCal^0,w,c
  3002   00143A  26D9               	addwf	fsr2l,f,c
  3003   00143C  5045               	movf	(calibration_routine@cCal+1)^0,w,c
  3004   00143E  22DA               	addwfc	fsr2h,f,c
  3005   001440  C005  FFDE         	movff	?_color_read_Green,postinc2
  3006   001444  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  3007   001448                     
  3008                           ;color.c: 226:     LATEbits.LATE7 = 0;
  3009   001448  9E7D               	bcf	125,7,c	;volatile
  3010   00144A                     
  3011                           ;color.c: 229:     sprintf(cal_state,"Calibration state=", "blue \n\r");
  3012   00144A  0E48               	movlw	low calibration_routine@cal_state
  3013   00144C  6E31               	movwf	sprintf@s^0,c
  3014   00144E  0E6B               	movlw	low STR_9
  3015   001450  6E32               	movwf	sprintf@fmt^0,c
  3016   001452  0ED1               	movlw	low STR_10
  3017   001454  6E33               	movwf	(?_sprintf+2)^0,c
  3018   001456  5033               	movf	(?_sprintf+2)^0,w,c
  3019   001458  A4D8               	btfss	status,2,c
  3020   00145A  0E0E               	movlw	high __smallconst
  3021   00145C  6E34               	movwf	(?_sprintf+3)^0,c
  3022   00145E  EC3A  F011         	call	_sprintf	;wreg free
  3023   001462                     
  3024                           ;color.c: 230:     sendStringSerial4(&cal_state);
  3025   001462  0E48               	movlw	low calibration_routine@cal_state
  3026   001464  6E02               	movwf	sendStringSerial4@string^0,c
  3027   001466  EC6E  F011         	call	_sendStringSerial4	;wreg free
  3028   00146A                     l98:
  3029                           
  3030                           ;color.c: 232:     while(PORTFbits.RF2 == 1){
  3031   00146A  B48E               	btfsc	142,2,c	;volatile
  3032   00146C  EF3A  F00A         	goto	u2561
  3033   001470  EF3C  F00A         	goto	u2560
  3034   001474                     u2561:
  3035   001474  EF35  F00A         	goto	l98
  3036   001478                     u2560:
  3037   001478                     
  3038                           ;color.c: 236:     LATAbits.LATA3 = 1;
  3039   001478  8679               	bsf	121,3,c	;volatile
  3040   00147A                     
  3041                           ;color.c: 237:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3042   00147A  0E29               	movlw	41
  3043   00147C  6E47               	movwf	(??_calibration_routine+1)^0,c
  3044   00147E  0E96               	movlw	150
  3045   001480  6E46               	movwf	??_calibration_routine^0,c
  3046   001482  0E7F               	movlw	127
  3047   001484                     u2687:
  3048   001484  2EE8               	decfsz	wreg,f,c
  3049   001486  D7FE               	bra	u2687
  3050   001488  2E46               	decfsz	??_calibration_routine^0,f,c
  3051   00148A  D7FC               	bra	u2687
  3052   00148C  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  3053   00148E  D7FA               	bra	u2687
  3054   001490  0000               	nop	
  3055   001492                     
  3056                           ;color.c: 238:     (cCal->blue) = color_read_Blue();
  3057   001492  EC60  F010         	call	_color_read_Blue	;wreg free
  3058   001496  EE20 F004          	lfsr	2,4
  3059   00149A  5044               	movf	calibration_routine@cCal^0,w,c
  3060   00149C  26D9               	addwf	fsr2l,f,c
  3061   00149E  5045               	movf	(calibration_routine@cCal+1)^0,w,c
  3062   0014A0  22DA               	addwfc	fsr2h,f,c
  3063   0014A2  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3064   0014A6  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3065   0014AA                     
  3066                           ;color.c: 239:     LATAbits.LATA3 = 0;
  3067   0014AA  9679               	bcf	121,3,c	;volatile
  3068   0014AC                     
  3069                           ;color.c: 242:     sprintf(cal_state,"Calibration state=", "ambient \n\r");
  3070   0014AC  0E48               	movlw	low calibration_routine@cal_state
  3071   0014AE  6E31               	movwf	sprintf@s^0,c
  3072   0014B0  0E6B               	movlw	low STR_9
  3073   0014B2  6E32               	movwf	sprintf@fmt^0,c
  3074   0014B4  0EBD               	movlw	low STR_12
  3075   0014B6  6E33               	movwf	(?_sprintf+2)^0,c
  3076   0014B8  5033               	movf	(?_sprintf+2)^0,w,c
  3077   0014BA  A4D8               	btfss	status,2,c
  3078   0014BC  0E0E               	movlw	high __smallconst
  3079   0014BE  6E34               	movwf	(?_sprintf+3)^0,c
  3080   0014C0  EC3A  F011         	call	_sprintf	;wreg free
  3081   0014C4                     
  3082                           ;color.c: 243:     sendStringSerial4(&cal_state);
  3083   0014C4  0E48               	movlw	low calibration_routine@cal_state
  3084   0014C6  6E02               	movwf	sendStringSerial4@string^0,c
  3085   0014C8  EC6E  F011         	call	_sendStringSerial4	;wreg free
  3086   0014CC                     l101:
  3087                           
  3088                           ;color.c: 245:     while(PORTFbits.RF2 == 1){
  3089   0014CC  B48E               	btfsc	142,2,c	;volatile
  3090   0014CE  EF6B  F00A         	goto	u2571
  3091   0014D2  EF6D  F00A         	goto	u2570
  3092   0014D6                     u2571:
  3093   0014D6  EF66  F00A         	goto	l101
  3094   0014DA                     u2570:
  3095   0014DA                     
  3096                           ;color.c: 248:     LATGbits.LATG0 = 1;
  3097   0014DA  807F               	bsf	127,0,c	;volatile
  3098                           
  3099                           ;color.c: 249:     LATEbits.LATE7 = 1;
  3100   0014DC  8E7D               	bsf	125,7,c	;volatile
  3101                           
  3102                           ;color.c: 250:     LATAbits.LATA3 = 1;
  3103   0014DE  8679               	bsf	121,3,c	;volatile
  3104   0014E0                     
  3105                           ;color.c: 251:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3106   0014E0  0E29               	movlw	41
  3107   0014E2  6E47               	movwf	(??_calibration_routine+1)^0,c
  3108   0014E4  0E96               	movlw	150
  3109   0014E6  6E46               	movwf	??_calibration_routine^0,c
  3110   0014E8  0E7F               	movlw	127
  3111   0014EA                     u2697:
  3112   0014EA  2EE8               	decfsz	wreg,f,c
  3113   0014EC  D7FE               	bra	u2697
  3114   0014EE  2E46               	decfsz	??_calibration_routine^0,f,c
  3115   0014F0  D7FC               	bra	u2697
  3116   0014F2  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  3117   0014F4  D7FA               	bra	u2697
  3118   0014F6  0000               	nop	
  3119   0014F8                     
  3120                           ;color.c: 252:     (cCal->clear) = color_read_Clear();
  3121   0014F8  EC38  F010         	call	_color_read_Clear	;wreg free
  3122   0014FC  EE20 F006          	lfsr	2,6
  3123   001500  5044               	movf	calibration_routine@cCal^0,w,c
  3124   001502  26D9               	addwf	fsr2l,f,c
  3125   001504  5045               	movf	(calibration_routine@cCal+1)^0,w,c
  3126   001506  22DA               	addwfc	fsr2h,f,c
  3127   001508  C005  FFDE         	movff	?_color_read_Clear,postinc2
  3128   00150C  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  3129   001510                     
  3130                           ;color.c: 253:     LATGbits.LATG0 = 0;
  3131   001510  907F               	bcf	127,0,c	;volatile
  3132   001512                     
  3133                           ;color.c: 254:     LATEbits.LATE7 = 0;
  3134   001512  9E7D               	bcf	125,7,c	;volatile
  3135   001514                     
  3136                           ;color.c: 255:     LATAbits.LATA3 = 0;
  3137   001514  9679               	bcf	121,3,c	;volatile
  3138   001516                     
  3139                           ;color.c: 258:     sprintf(cal_state,"Calibration state=", "TESTING COMPLETED \n\r");
  3140   001516  0E48               	movlw	low calibration_routine@cal_state
  3141   001518  6E31               	movwf	sprintf@s^0,c
  3142   00151A  0E6B               	movlw	low STR_9
  3143   00151C  6E32               	movwf	sprintf@fmt^0,c
  3144   00151E  0E43               	movlw	low STR_14
  3145   001520  6E33               	movwf	(?_sprintf+2)^0,c
  3146   001522  5033               	movf	(?_sprintf+2)^0,w,c
  3147   001524  A4D8               	btfss	status,2,c
  3148   001526  0E0E               	movlw	high __smallconst
  3149   001528  6E34               	movwf	(?_sprintf+3)^0,c
  3150   00152A  EC3A  F011         	call	_sprintf	;wreg free
  3151   00152E                     
  3152                           ;color.c: 259:     sendStringSerial4(&cal_state);
  3153   00152E  0E48               	movlw	low calibration_routine@cal_state
  3154   001530  6E02               	movwf	sendStringSerial4@string^0,c
  3155   001532  EC6E  F011         	call	_sendStringSerial4	;wreg free
  3156   001536  0012               	return		;funcret
  3157   001538                     __end_of_calibration_routine:
  3158                           	callstack 0
  3159                           
  3160 ;; *************** function _sprintf *****************
  3161 ;; Defined at:
  3162 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;  s               1   48[COMRAM] PTR unsigned char 
  3165 ;;		 -> send2USART@hue_char(50), send2USART@buf(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  3166 ;;		 -> test@led_state(50), 
  3167 ;;  fmt             1   49[COMRAM] PTR const unsigned char 
  3168 ;;		 -> STR_16(12), STR_15(21), STR_13(19), STR_11(19), 
  3169 ;;		 -> STR_9(19), STR_7(23), STR_5(22), STR_4(17), 
  3170 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;  f              12   55[COMRAM] struct _IO_FILE
  3173 ;;  ret             2    0        int 
  3174 ;;  ap              1   54[COMRAM] PTR void [1]
  3175 ;;		 -> ?_sprintf(2), 
  3176 ;; Return value:  Size  Location     Type
  3177 ;;                  2   48[COMRAM] int 
  3178 ;; Registers used:
  3179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3185 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3186 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3188 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3189 ;;Total ram usage:       19 bytes
  3190 ;; Hardware stack levels used: 1
  3191 ;; Hardware stack levels required when called: 7
  3192 ;; This function calls:
  3193 ;;		_vfprintf
  3194 ;; This function is called by:
  3195 ;;		_test
  3196 ;;		_calibration_routine
  3197 ;;		_ADC2String
  3198 ;;		_send2USART
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           	psect	text13
  3203   002274                     __ptext13:
  3204                           	callstack 0
  3205   002274                     _sprintf:
  3206                           	callstack 22
  3207   002274  0E33               	movlw	low (?_sprintf+2)
  3208   002276  6E37               	movwf	sprintf@ap^0,c
  3209   002278  C031  F038         	movff	sprintf@s,sprintf@f
  3210   00227C  0E00               	movlw	0
  3211   00227E  6E3C               	movwf	(sprintf@f+4)^0,c
  3212   002280  0E00               	movlw	0
  3213   002282  6E3B               	movwf	(sprintf@f+3)^0,c
  3214   002284  0E00               	movlw	0
  3215   002286  6E43               	movwf	(sprintf@f+11)^0,c
  3216   002288  0E00               	movlw	0
  3217   00228A  6E42               	movwf	(sprintf@f+10)^0,c
  3218   00228C  0E38               	movlw	low sprintf@f
  3219   00228E  6E2D               	movwf	vfprintf@fp^0,c
  3220   002290  C032  F02E         	movff	sprintf@fmt,vfprintf@fmt
  3221   002294  0E37               	movlw	low sprintf@ap
  3222   002296  6E2F               	movwf	vfprintf@ap^0,c
  3223   002298  EC88  F010         	call	_vfprintf	;wreg free
  3224   00229C  5031               	movf	sprintf@s^0,w,c
  3225   00229E  243B               	addwf	(sprintf@f+3)^0,w,c
  3226   0022A0  6ED9               	movwf	fsr2l,c
  3227   0022A2  6ADA               	clrf	fsr2h,c
  3228   0022A4  6ADF               	clrf	indf2,c
  3229   0022A6  0012               	return		;funcret
  3230   0022A8                     __end_of_sprintf:
  3231                           	callstack 0
  3232                           
  3233 ;; *************** function _vfprintf *****************
  3234 ;; Defined at:
  3235 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  fp              1   44[COMRAM] PTR struct _IO_FILE
  3238 ;;		 -> sprintf@f(12), 
  3239 ;;  fmt             1   45[COMRAM] PTR const unsigned char 
  3240 ;;		 -> STR_16(12), STR_15(21), STR_13(19), STR_11(19), 
  3241 ;;		 -> STR_9(19), STR_7(23), STR_5(22), STR_4(17), 
  3242 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  3243 ;;  ap              1   46[COMRAM] PTR PTR void 
  3244 ;;		 -> sprintf@ap(1), 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  cfmt            1   47[COMRAM] PTR unsigned char 
  3247 ;;		 -> STR_16(12), STR_15(21), STR_13(19), STR_11(19), 
  3248 ;;		 -> STR_9(19), STR_7(23), STR_5(22), STR_4(17), 
  3249 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  2   44[COMRAM] int 
  3252 ;; Registers used:
  3253 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3259 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3262 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3263 ;;Total ram usage:        4 bytes
  3264 ;; Hardware stack levels used: 1
  3265 ;; Hardware stack levels required when called: 6
  3266 ;; This function calls:
  3267 ;;		_vfpfcnvrt
  3268 ;; This function is called by:
  3269 ;;		_sprintf
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text14
  3274   002110                     __ptext14:
  3275                           	callstack 0
  3276   002110                     _vfprintf:
  3277                           	callstack 22
  3278   002110                     
  3279                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  3280   002110  C02E  F030         	movff	vfprintf@fmt,vfprintf@cfmt
  3281                           
  3282                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3283   002114  EF94  F010         	goto	l3317
  3284   002118                     l3315:
  3285                           
  3286                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  3287   002118  C02D  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  3288   00211C  0E30               	movlw	low vfprintf@cfmt
  3289   00211E  6E23               	movwf	vfpfcnvrt@fmt^0,c
  3290   002120  C02F  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  3291   002124  EC9C  F00A         	call	_vfpfcnvrt	;wreg free
  3292   002128                     l3317:
  3293                           
  3294                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3295   002128  C030  FFF6         	movff	vfprintf@cfmt,tblptrl
  3296   00212C                     	if	1	;There is more than 1 active tblptr byte
  3297   00212C  0E0E               	movlw	high __smallconst
  3298   00212E  6EF7               	movwf	tblptrh,c
  3299   002130                     	endif
  3300   002130                     	if	0	;tblptru may be non-zero
  3301   002130                     	endif
  3302   002130                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3303   002130  0E00               	movlw	low (__smallconst shr (0+16))
  3304   002132  6EF8               	movwf	tblptru,c
  3305   002134                     	endif
  3306   002134  0008               	tblrd		*
  3307   002136  50F5               	movf	tablat,w,c
  3308   002138  0900               	iorlw	0
  3309   00213A  A4D8               	btfss	status,2,c
  3310   00213C  EFA2  F010         	goto	u2221
  3311   002140  EFA4  F010         	goto	u2220
  3312   002144                     u2221:
  3313   002144  EF8C  F010         	goto	l3315
  3314   002148                     u2220:
  3315   002148                     
  3316                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  3317   002148  0E00               	movlw	0
  3318   00214A  6E2E               	movwf	(?_vfprintf+1)^0,c
  3319   00214C  0E00               	movlw	0
  3320   00214E  6E2D               	movwf	?_vfprintf^0,c
  3321   002150  0012               	return		;funcret
  3322   002152                     __end_of_vfprintf:
  3323                           	callstack 0
  3324                           
  3325 ;; *************** function _vfpfcnvrt *****************
  3326 ;; Defined at:
  3327 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  3330 ;;		 -> sprintf@f(12), 
  3331 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  3332 ;;		 -> vfprintf@cfmt(1), 
  3333 ;;  ap              1   35[COMRAM] PTR PTR void 
  3334 ;;		 -> sprintf@ap(1), 
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  convarg         4   38[COMRAM] struct .
  3337 ;;  cp              1   43[COMRAM] PTR unsigned char 
  3338 ;;		 -> STR_16(12), STR_15(21), STR_13(19), STR_11(19), 
  3339 ;;		 -> STR_9(19), STR_7(23), STR_5(22), STR_4(17), 
  3340 ;;		 -> STR_3(17), STR_2(19), STR_1(17), 
  3341 ;;  done            1   42[COMRAM] _Bool 
  3342 ;;  c               1    0        unsigned char 
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      void 
  3345 ;; Registers used:
  3346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3352 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3353 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3354 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3355 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3356 ;;Total ram usage:       11 bytes
  3357 ;; Hardware stack levels used: 1
  3358 ;; Hardware stack levels required when called: 5
  3359 ;; This function calls:
  3360 ;;		_dtoa
  3361 ;;		_fputc
  3362 ;;		_read_prec_or_width
  3363 ;; This function is called by:
  3364 ;;		_vfprintf
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text15
  3369   001538                     __ptext15:
  3370                           	callstack 0
  3371   001538                     _vfpfcnvrt:
  3372                           	callstack 22
  3373   001538                     
  3374                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  3375   001538  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3376   00153A  6ED9               	movwf	fsr2l,c
  3377   00153C  6ADA               	clrf	fsr2h,c
  3378   00153E  CFDF FFF6          	movff	indf2,tblptrl
  3379   001542                     	if	1	;There is more than 1 active tblptr byte
  3380   001542  0E0E               	movlw	high __smallconst
  3381   001544  6EF7               	movwf	tblptrh,c
  3382   001546                     	endif
  3383   001546                     	if	0	;tblptru may be non-zero
  3384   001546                     	endif
  3385   001546                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3386   001546  0E00               	movlw	low (__smallconst shr (0+16))
  3387   001548  6EF8               	movwf	tblptru,c
  3388   00154A                     	endif
  3389   00154A  0008               	tblrd		*
  3390   00154C  50F5               	movf	tablat,w,c
  3391   00154E  0A25               	xorlw	37
  3392   001550  A4D8               	btfss	status,2,c
  3393   001552  EFAD  F00A         	goto	u2151
  3394   001556  EFAF  F00A         	goto	u2150
  3395   00155A                     u2151:
  3396   00155A  EF4D  F00B         	goto	l3295
  3397   00155E                     u2150:
  3398   00155E                     
  3399                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  3400   00155E  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3401   001560  6ED9               	movwf	fsr2l,c
  3402   001562  6ADA               	clrf	fsr2h,c
  3403   001564  2ADF               	incf	indf2,f,c
  3404   001566                     
  3405                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  3406   001566  0E00               	movlw	0
  3407   001568  0100               	movlb	0	; () banked
  3408   00156A  6FFB               	movwf	(_width+1)& (0+255),b
  3409   00156C  0E00               	movlw	0
  3410   00156E  6FFA               	movwf	_width& (0+255),b
  3411   001570  C0FA  F0FC         	movff	_width,_flags
  3412   001574                     
  3413                           ; BSR set to: 0
  3414                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  3415   001574  0101               	movlb	1	; () banked
  3416   001576  6964               	setf	_prec& (0+255),b
  3417   001578  6965               	setf	(_prec+1)& (0+255),b
  3418   00157A                     
  3419                           ; BSR set to: 1
  3420                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  3421   00157A  0E00               	movlw	0
  3422   00157C  6E2B               	movwf	vfpfcnvrt@done^0,c
  3423                           
  3424                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  3425   00157E  EFE8  F00A         	goto	l3269
  3426   001582                     l3259:
  3427                           
  3428                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  3429   001582  0100               	movlb	0	; () banked
  3430   001584  83FC               	bsf	_flags& (0+255),1,b
  3431   001586                     
  3432                           ; BSR set to: 0
  3433                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  3434   001586  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3435   001588  6ED9               	movwf	fsr2l,c
  3436   00158A  6ADA               	clrf	fsr2h,c
  3437   00158C  2ADF               	incf	indf2,f,c
  3438                           
  3439                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  3440   00158E  EFE8  F00A         	goto	l3269
  3441   001592                     l3263:
  3442                           
  3443                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  3444   001592  0E01               	movlw	1
  3445   001594  6E2B               	movwf	vfpfcnvrt@done^0,c
  3446                           
  3447                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  3448   001596  EFE8  F00A         	goto	l3269
  3449   00159A                     l3267:
  3450   00159A  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3451   00159C  6ED9               	movwf	fsr2l,c
  3452   00159E  6ADA               	clrf	fsr2h,c
  3453   0015A0  CFDF FFF6          	movff	indf2,tblptrl
  3454   0015A4                     	if	1	;There is more than 1 active tblptr byte
  3455   0015A4  0E0E               	movlw	high __smallconst
  3456   0015A6  6EF7               	movwf	tblptrh,c
  3457   0015A8                     	endif
  3458   0015A8                     	if	0	;tblptru may be non-zero
  3459   0015A8                     	endif
  3460   0015A8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3461   0015A8  0E00               	movlw	low (__smallconst shr (0+16))
  3462   0015AA  6EF8               	movwf	tblptru,c
  3463   0015AC                     	endif
  3464   0015AC  0008               	tblrd		*
  3465   0015AE  50F5               	movf	tablat,w,c
  3466   0015B0  6E25               	movwf	??_vfpfcnvrt^0,c
  3467   0015B2  6A26               	clrf	(??_vfpfcnvrt+1)^0,c
  3468                           
  3469                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3470                           ; Switch size 1, requested type "simple"
  3471                           ; Number of cases is 1, Range of values is 0 to 0
  3472                           ; switch strategies available:
  3473                           ; Name         Instructions Cycles
  3474                           ; simple_byte            4     3 (average)
  3475                           ;	Chosen strategy is simple_byte
  3476   0015B4  5026               	movf	(??_vfpfcnvrt+1)^0,w,c
  3477   0015B6  0A00               	xorlw	0	; case 0
  3478   0015B8  B4D8               	btfsc	status,2,c
  3479   0015BA  EFE1  F00A         	goto	l3911
  3480   0015BE  EFC9  F00A         	goto	l3263
  3481   0015C2                     l3911:
  3482                           
  3483                           ; Switch size 1, requested type "simple"
  3484                           ; Number of cases is 1, Range of values is 48 to 48
  3485                           ; switch strategies available:
  3486                           ; Name         Instructions Cycles
  3487                           ; simple_byte            4     3 (average)
  3488                           ;	Chosen strategy is simple_byte
  3489   0015C2  5025               	movf	??_vfpfcnvrt^0,w,c
  3490   0015C4  0A30               	xorlw	48	; case 48
  3491   0015C6  B4D8               	btfsc	status,2,c
  3492   0015C8  EFC1  F00A         	goto	l3259
  3493   0015CC  EFC9  F00A         	goto	l3263
  3494   0015D0                     l3269:
  3495                           
  3496                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  3497   0015D0  502B               	movf	vfpfcnvrt@done^0,w,c
  3498   0015D2  B4D8               	btfsc	status,2,c
  3499   0015D4  EFEE  F00A         	goto	u2161
  3500   0015D8  EFF0  F00A         	goto	u2160
  3501   0015DC                     u2161:
  3502   0015DC  EFCD  F00A         	goto	l3267
  3503   0015E0                     u2160:
  3504   0015E0                     
  3505                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  3506   0015E0  C023  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  3507   0015E4  C024  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  3508   0015E8  ECEF  F00D         	call	_read_prec_or_width	;wreg free
  3509   0015EC  C007  F0FA         	movff	?_read_prec_or_width,_width
  3510   0015F0  C008  F0FB         	movff	?_read_prec_or_width+1,_width+1
  3511   0015F4                     
  3512                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  3513   0015F4  0100               	movlb	0	; () banked
  3514   0015F6  BFFB               	btfsc	(_width+1)& (0+255),7,b
  3515   0015F8  EF02  F00B         	goto	u2170
  3516   0015FC  EF00  F00B         	goto	u2171
  3517   001600                     u2171:
  3518   001600  EF07  F00B         	goto	l3277
  3519   001604                     u2170:
  3520   001604                     
  3521                           ; BSR set to: 0
  3522                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  3523   001604  81FC               	bsf	_flags& (0+255),0,b
  3524                           
  3525                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  3526   001606  6DFA               	negf	_width& (0+255),b
  3527   001608  1FFB               	comf	(_width+1)& (0+255),f,b
  3528   00160A  B0D8               	btfsc	status,0,c
  3529   00160C  2BFB               	incf	(_width+1)& (0+255),f,b
  3530   00160E                     l3277:
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  3534   00160E  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3535   001610  6ED9               	movwf	fsr2l,c
  3536   001612  6ADA               	clrf	fsr2h,c
  3537   001614  50DF               	movf	indf2,w,c
  3538   001616  6E2C               	movwf	vfpfcnvrt@cp^0,c
  3539   001618                     
  3540                           ; BSR set to: 0
  3541                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  3542   001618  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3543   00161C                     	if	1	;There is more than 1 active tblptr byte
  3544   00161C  0E0E               	movlw	high __smallconst
  3545   00161E  6EF7               	movwf	tblptrh,c
  3546   001620                     	endif
  3547   001620                     	if	0	;tblptru may be non-zero
  3548   001620                     	endif
  3549   001620                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3550   001620  0E00               	movlw	low (__smallconst shr (0+16))
  3551   001622  6EF8               	movwf	tblptru,c
  3552   001624                     	endif
  3553   001624  0008               	tblrd		*
  3554   001626  50F5               	movf	tablat,w,c
  3555   001628  0A64               	xorlw	100
  3556   00162A  B4D8               	btfsc	status,2,c
  3557   00162C  EF1A  F00B         	goto	u2181
  3558   001630  EF1C  F00B         	goto	u2180
  3559   001634                     u2181:
  3560   001634  EF2C  F00B         	goto	l3283
  3561   001638                     u2180:
  3562   001638                     
  3563                           ; BSR set to: 0
  3564   001638  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3565   00163C                     	if	1	;There is more than 1 active tblptr byte
  3566   00163C  0E0E               	movlw	high __smallconst
  3567   00163E  6EF7               	movwf	tblptrh,c
  3568   001640                     	endif
  3569   001640                     	if	0	;tblptru may be non-zero
  3570   001640                     	endif
  3571   001640                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3572   001640  0E00               	movlw	low (__smallconst shr (0+16))
  3573   001642  6EF8               	movwf	tblptru,c
  3574   001644                     	endif
  3575   001644  0008               	tblrd		*
  3576   001646  50F5               	movf	tablat,w,c
  3577   001648  0A69               	xorlw	105
  3578   00164A  A4D8               	btfss	status,2,c
  3579   00164C  EF2A  F00B         	goto	u2191
  3580   001650  EF2C  F00B         	goto	u2190
  3581   001654                     u2191:
  3582   001654  EF47  F00B         	goto	l3291
  3583   001658                     u2190:
  3584   001658                     l3283:
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3588   001658  5024               	movf	vfpfcnvrt@ap^0,w,c
  3589   00165A  6ED9               	movwf	fsr2l,c
  3590   00165C  6ADA               	clrf	fsr2h,c
  3591   00165E  0E02               	movlw	2
  3592   001660  26DF               	addwf	indf2,f,c
  3593   001662  5CDF               	subwf	indf2,w,c
  3594   001664  6ED9               	movwf	fsr2l,c
  3595   001666  6ADA               	clrf	fsr2h,c
  3596   001668  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  3597   00166C  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  3598   001670                     
  3599                           ; BSR set to: 0
  3600                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  3601   001670  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3602   001672  6ED9               	movwf	fsr2l,c
  3603   001674  6ADA               	clrf	fsr2h,c
  3604   001676  282C               	incf	vfpfcnvrt@cp^0,w,c
  3605   001678  6EDF               	movwf	indf2,c
  3606   00167A                     
  3607                           ; BSR set to: 0
  3608                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  3609   00167A  C022  F017         	movff	vfpfcnvrt@fp,dtoa@fp
  3610   00167E  C027  F018         	movff	vfpfcnvrt@convarg,dtoa@d
  3611   001682  C028  F019         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  3612   001686  EC61  F00B         	call	_dtoa	;wreg free
  3613   00168A  EF60  F00B         	goto	l1209
  3614   00168E                     l3291:
  3615                           
  3616                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3617   00168E  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3618   001690  6ED9               	movwf	fsr2l,c
  3619   001692  6ADA               	clrf	fsr2h,c
  3620   001694  2ADF               	incf	indf2,f,c
  3621   001696  EF60  F00B         	goto	l1209
  3622   00169A                     l3295:
  3623                           
  3624                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3625   00169A  5023               	movf	vfpfcnvrt@fmt^0,w,c
  3626   00169C  6ED9               	movwf	fsr2l,c
  3627   00169E  6ADA               	clrf	fsr2h,c
  3628   0016A0  CFDF FFF6          	movff	indf2,tblptrl
  3629   0016A4                     	if	1	;There is more than 1 active tblptr byte
  3630   0016A4  0E0E               	movlw	high __smallconst
  3631   0016A6  6EF7               	movwf	tblptrh,c
  3632   0016A8                     	endif
  3633   0016A8                     	if	0	;tblptru may be non-zero
  3634   0016A8                     	endif
  3635   0016A8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3636   0016A8  0E00               	movlw	low (__smallconst shr (0+16))
  3637   0016AA  6EF8               	movwf	tblptru,c
  3638   0016AC                     	endif
  3639   0016AC  0008               	tblrd		*
  3640   0016AE  50F5               	movf	tablat,w,c
  3641   0016B0  6E01               	movwf	fputc@c^0,c
  3642   0016B2  6A02               	clrf	(fputc@c+1)^0,c
  3643   0016B4  C022  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3644   0016B8  EC46  F00E         	call	_fputc	;wreg free
  3645   0016BC  EF47  F00B         	goto	l3291
  3646   0016C0                     l1209:
  3647   0016C0  0012               	return		;funcret
  3648   0016C2                     __end_of_vfpfcnvrt:
  3649                           	callstack 0
  3650                           
  3651 ;; *************** function _read_prec_or_width *****************
  3652 ;; Defined at:
  3653 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  3656 ;;		 -> vfprintf@cfmt(1), 
  3657 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  3658 ;;		 -> sprintf@ap(1), 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  c               1    8[COMRAM] unsigned char 
  3661 ;;  n               2    9[COMRAM] int 
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  2    6[COMRAM] int 
  3664 ;; Registers used:
  3665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3671 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3672 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3674 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3675 ;;Total ram usage:        5 bytes
  3676 ;; Hardware stack levels used: 1
  3677 ;; Hardware stack levels required when called: 1
  3678 ;; This function calls:
  3679 ;;		___wmul
  3680 ;; This function is called by:
  3681 ;;		_vfpfcnvrt
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text16
  3686   001BDE                     __ptext16:
  3687                           	callstack 0
  3688   001BDE                     _read_prec_or_width:
  3689                           	callstack 25
  3690   001BDE                     
  3691                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  3692   001BDE  0E00               	movlw	0
  3693   001BE0  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  3694   001BE2  0E00               	movlw	0
  3695   001BE4  6E0A               	movwf	read_prec_or_width@n^0,c
  3696   001BE6                     
  3697                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  3698   001BE6  5007               	movf	read_prec_or_width@fmt^0,w,c
  3699   001BE8  6ED9               	movwf	fsr2l,c
  3700   001BEA  6ADA               	clrf	fsr2h,c
  3701   001BEC  CFDF FFF6          	movff	indf2,tblptrl
  3702   001BF0                     	if	1	;There is more than 1 active tblptr byte
  3703   001BF0  0E0E               	movlw	high __smallconst
  3704   001BF2  6EF7               	movwf	tblptrh,c
  3705   001BF4                     	endif
  3706   001BF4                     	if	0	;tblptru may be non-zero
  3707   001BF4                     	endif
  3708   001BF4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3709   001BF4  0E00               	movlw	low (__smallconst shr (0+16))
  3710   001BF6  6EF8               	movwf	tblptru,c
  3711   001BF8                     	endif
  3712   001BF8  0008               	tblrd		*
  3713   001BFA  50F5               	movf	tablat,w,c
  3714   001BFC  0A2A               	xorlw	42
  3715   001BFE  A4D8               	btfss	status,2,c
  3716   001C00  EF04  F00E         	goto	u2131
  3717   001C04  EF06  F00E         	goto	u2130
  3718   001C08                     u2131:
  3719   001C08  EF2C  F00E         	goto	l3247
  3720   001C0C                     u2130:
  3721   001C0C                     
  3722                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  3723   001C0C  5007               	movf	read_prec_or_width@fmt^0,w,c
  3724   001C0E  6ED9               	movwf	fsr2l,c
  3725   001C10  6ADA               	clrf	fsr2h,c
  3726   001C12  2ADF               	incf	indf2,f,c
  3727   001C14                     
  3728                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  3729   001C14  5008               	movf	read_prec_or_width@ap^0,w,c
  3730   001C16  6ED9               	movwf	fsr2l,c
  3731   001C18  6ADA               	clrf	fsr2h,c
  3732   001C1A  0E02               	movlw	2
  3733   001C1C  26DF               	addwf	indf2,f,c
  3734   001C1E  5CDF               	subwf	indf2,w,c
  3735   001C20  6ED9               	movwf	fsr2l,c
  3736   001C22  6ADA               	clrf	fsr2h,c
  3737   001C24  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  3738   001C28  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  3739                           
  3740                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  3741   001C2C  EF41  F00E         	goto	l1190
  3742   001C30                     l3243:
  3743                           
  3744                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  3745   001C30  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  3746   001C34  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  3747   001C38  0E00               	movlw	0
  3748   001C3A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3749   001C3C  0E0A               	movlw	10
  3750   001C3E  6E03               	movwf	___wmul@multiplicand^0,c
  3751   001C40  ECB0  F011         	call	___wmul	;wreg free
  3752   001C44  5009               	movf	read_prec_or_width@c^0,w,c
  3753   001C46  2401               	addwf	?___wmul^0,w,c
  3754   001C48  6E0A               	movwf	read_prec_or_width@n^0,c
  3755   001C4A  0E00               	movlw	0
  3756   001C4C  2002               	addwfc	(?___wmul+1)^0,w,c
  3757   001C4E  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  3758   001C50                     
  3759                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  3760   001C50  5007               	movf	read_prec_or_width@fmt^0,w,c
  3761   001C52  6ED9               	movwf	fsr2l,c
  3762   001C54  6ADA               	clrf	fsr2h,c
  3763   001C56  2ADF               	incf	indf2,f,c
  3764   001C58                     l3247:
  3765                           
  3766                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  3767   001C58  5007               	movf	read_prec_or_width@fmt^0,w,c
  3768   001C5A  6ED9               	movwf	fsr2l,c
  3769   001C5C  6ADA               	clrf	fsr2h,c
  3770   001C5E  CFDF FFF6          	movff	indf2,tblptrl
  3771   001C62                     	if	1	;There is more than 1 active tblptr byte
  3772   001C62  0E0E               	movlw	high __smallconst
  3773   001C64  6EF7               	movwf	tblptrh,c
  3774   001C66                     	endif
  3775   001C66                     	if	0	;tblptru may be non-zero
  3776   001C66                     	endif
  3777   001C66                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3778   001C66  0E00               	movlw	low (__smallconst shr (0+16))
  3779   001C68  6EF8               	movwf	tblptru,c
  3780   001C6A                     	endif
  3781   001C6A  0008               	tblrd		*
  3782   001C6C  50F5               	movf	tablat,w,c
  3783   001C6E  0FD0               	addlw	208
  3784   001C70  6E09               	movwf	read_prec_or_width@c^0,c
  3785   001C72  0E09               	movlw	9
  3786   001C74  6409               	cpfsgt	read_prec_or_width@c^0,c
  3787   001C76  EF3F  F00E         	goto	u2141
  3788   001C7A  EF41  F00E         	goto	u2140
  3789   001C7E                     u2141:
  3790   001C7E  EF18  F00E         	goto	l3243
  3791   001C82                     u2140:
  3792   001C82                     l1190:
  3793                           
  3794                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  3795   001C82  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  3796   001C86  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  3797   001C8A  0012               	return		;funcret
  3798   001C8C                     __end_of_read_prec_or_width:
  3799                           	callstack 0
  3800                           
  3801 ;; *************** function ___wmul *****************
  3802 ;; Defined at:
  3803 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  multiplier      2    0[COMRAM] unsigned int 
  3806 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  product         2    4[COMRAM] unsigned int 
  3809 ;; Return value:  Size  Location     Type
  3810 ;;                  2    0[COMRAM] unsigned int 
  3811 ;; Registers used:
  3812 ;;		wreg, status,2, status,0, prodl, prodh
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3818 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3819 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3821 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3822 ;;Total ram usage:        6 bytes
  3823 ;; Hardware stack levels used: 1
  3824 ;; This function calls:
  3825 ;;		Nothing
  3826 ;; This function is called by:
  3827 ;;		_convert_rgb2hue
  3828 ;;		_ADC2String
  3829 ;;		_read_prec_or_width
  3830 ;;		_setMotorPWM
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text17
  3835   002360                     __ptext17:
  3836                           	callstack 0
  3837   002360                     ___wmul:
  3838                           	callstack 25
  3839   002360  5001               	movf	___wmul@multiplier^0,w,c
  3840   002362  0203               	mulwf	___wmul@multiplicand^0,c
  3841   002364  CFF3 F005          	movff	prodl,___wmul@product
  3842   002368  CFF4 F006          	movff	prodh,___wmul@product+1
  3843   00236C  5001               	movf	___wmul@multiplier^0,w,c
  3844   00236E  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  3845   002370  50F3               	movf	243,w,c
  3846   002372  2606               	addwf	(___wmul@product+1)^0,f,c
  3847   002374  5002               	movf	(___wmul@multiplier+1)^0,w,c
  3848   002376  0203               	mulwf	___wmul@multiplicand^0,c
  3849   002378  50F3               	movf	243,w,c
  3850   00237A  2606               	addwf	(___wmul@product+1)^0,f,c
  3851   00237C  C005  F001         	movff	___wmul@product,?___wmul
  3852   002380  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3853   002384  0012               	return		;funcret
  3854   002386                     __end_of___wmul:
  3855                           	callstack 0
  3856                           
  3857 ;; *************** function _dtoa *****************
  3858 ;; Defined at:
  3859 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  3862 ;;		 -> sprintf@f(12), 
  3863 ;;  d               2   23[COMRAM] int 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  i               2   31[COMRAM] int 
  3866 ;;  w               2   28[COMRAM] int 
  3867 ;;  s               1   30[COMRAM] unsigned char 
  3868 ;;  p               1   27[COMRAM] _Bool 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      void 
  3871 ;; Registers used:
  3872 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3878 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3879 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3881 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3882 ;;Total ram usage:       11 bytes
  3883 ;; Hardware stack levels used: 1
  3884 ;; Hardware stack levels required when called: 4
  3885 ;; This function calls:
  3886 ;;		___awdiv
  3887 ;;		___awmod
  3888 ;;		_abs
  3889 ;;		_pad
  3890 ;; This function is called by:
  3891 ;;		_vfpfcnvrt
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text18
  3896   0016C2                     __ptext18:
  3897                           	callstack 0
  3898   0016C2                     _dtoa:
  3899                           	callstack 22
  3900   0016C2                     
  3901                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  3902   0016C2  0E01               	movlw	1
  3903   0016C4  6E1C               	movwf	dtoa@p^0,c
  3904   0016C6                     
  3905                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  3906   0016C6  BE19               	btfsc	(dtoa@d+1)^0,7,c
  3907   0016C8  EF68  F00B         	goto	u2031
  3908   0016CC  EF6B  F00B         	goto	u2030
  3909   0016D0                     u2031:
  3910   0016D0  0E01               	movlw	1
  3911   0016D2  EF6C  F00B         	goto	u2040
  3912   0016D6                     u2030:
  3913   0016D6  0E00               	movlw	0
  3914   0016D8                     u2040:
  3915   0016D8  6E1F               	movwf	dtoa@s^0,c
  3916   0016DA                     
  3917                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  3918   0016DA  C0FA  F01D         	movff	_width,dtoa@w
  3919   0016DE  C0FB  F01E         	movff	_width+1,dtoa@w+1
  3920   0016E2                     
  3921                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  3922   0016E2  501F               	movf	dtoa@s^0,w,c
  3923   0016E4  B4D8               	btfsc	status,2,c
  3924   0016E6  EF77  F00B         	goto	u2051
  3925   0016EA  EF79  F00B         	goto	u2050
  3926   0016EE                     u2051:
  3927   0016EE  EF90  F00B         	goto	l1173
  3928   0016F2                     u2050:
  3929   0016F2                     
  3930                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  3931   0016F2  061D               	decf	dtoa@w^0,f,c
  3932   0016F4  A0D8               	btfss	status,0,c
  3933   0016F6  061E               	decf	(dtoa@w+1)^0,f,c
  3934   0016F8                     
  3935                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  3936   0016F8  501F               	movf	dtoa@s^0,w,c
  3937   0016FA  A4D8               	btfss	status,2,c
  3938   0016FC  EF82  F00B         	goto	u2061
  3939   001700  EF84  F00B         	goto	u2060
  3940   001704                     u2061:
  3941   001704  EF8A  F00B         	goto	l3199
  3942   001708                     u2060:
  3943   001708  0E00               	movlw	0
  3944   00170A  6E1B               	movwf	(_dtoa$2521+1)^0,c
  3945   00170C  0E2B               	movlw	43
  3946   00170E  6E1A               	movwf	_dtoa$2521^0,c
  3947   001710  EF8E  F00B         	goto	l3201
  3948   001714                     l3199:
  3949   001714  0E00               	movlw	0
  3950   001716  6E1B               	movwf	(_dtoa$2521+1)^0,c
  3951   001718  0E2D               	movlw	45
  3952   00171A  6E1A               	movwf	_dtoa$2521^0,c
  3953   00171C                     l3201:
  3954   00171C  C01A  F01F         	movff	_dtoa$2521,dtoa@s
  3955   001720                     l1173:
  3956                           
  3957                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  3958   001720  0E00               	movlw	0
  3959   001722  6E21               	movwf	(dtoa@i+1)^0,c
  3960   001724  0E1F               	movlw	31
  3961   001726  6E20               	movwf	dtoa@i^0,c
  3962   001728                     
  3963                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  3964   001728  0E00               	movlw	0
  3965   00172A  0101               	movlb	1	; () banked
  3966   00172C  6F85               	movwf	(_dbuf+31)& (0+255),b
  3967                           
  3968                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  3969   00172E  EFC8  F00B         	goto	l3215
  3970   001732                     l3205:
  3971                           
  3972                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  3973   001732  0620               	decf	dtoa@i^0,f,c
  3974   001734  A0D8               	btfss	status,0,c
  3975   001736  0621               	decf	(dtoa@i+1)^0,f,c
  3976   001738                     
  3977                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  3978   001738  0E66               	movlw	low _dbuf
  3979   00173A  2420               	addwf	dtoa@i^0,w,c
  3980   00173C  6ED9               	movwf	fsr2l,c
  3981   00173E  0E01               	movlw	high _dbuf
  3982   001740  2021               	addwfc	(dtoa@i+1)^0,w,c
  3983   001742  6EDA               	movwf	fsr2h,c
  3984   001744  C018  F001         	movff	dtoa@d,___awmod@dividend
  3985   001748  C019  F002         	movff	dtoa@d+1,___awmod@dividend+1
  3986   00174C  0E00               	movlw	0
  3987   00174E  6E04               	movwf	(___awmod@divisor+1)^0,c
  3988   001750  0E0A               	movlw	10
  3989   001752  6E03               	movwf	___awmod@divisor^0,c
  3990   001754  EC97  F00D         	call	___awmod	;wreg free
  3991   001758  C001  F007         	movff	?___awmod,abs@a
  3992   00175C  C002  F008         	movff	?___awmod+1,abs@a+1
  3993   001760  EC54  F011         	call	_abs	;wreg free
  3994   001764  5007               	movf	?_abs^0,w,c
  3995   001766  0F30               	addlw	48
  3996   001768  6EDF               	movwf	indf2,c
  3997   00176A                     
  3998                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  3999   00176A  0E00               	movlw	0
  4000   00176C  6E1C               	movwf	dtoa@p^0,c
  4001   00176E                     
  4002                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  4003   00176E  061D               	decf	dtoa@w^0,f,c
  4004   001770  A0D8               	btfss	status,0,c
  4005   001772  061E               	decf	(dtoa@w+1)^0,f,c
  4006   001774                     
  4007                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  4008   001774  C018  F001         	movff	dtoa@d,___awdiv@dividend
  4009   001778  C019  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  4010   00177C  0E00               	movlw	0
  4011   00177E  6E04               	movwf	(___awdiv@divisor+1)^0,c
  4012   001780  0E0A               	movlw	10
  4013   001782  6E03               	movwf	___awdiv@divisor^0,c
  4014   001784  EC35  F00D         	call	___awdiv	;wreg free
  4015   001788  C001  F018         	movff	?___awdiv,dtoa@d
  4016   00178C  C002  F019         	movff	?___awdiv+1,dtoa@d+1
  4017   001790                     l3215:
  4018                           
  4019                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  4020   001790  BE21               	btfsc	(dtoa@i+1)^0,7,c
  4021   001792  EFD3  F00B         	goto	u2071
  4022   001796  5021               	movf	(dtoa@i+1)^0,w,c
  4023   001798  E108               	bnz	u2070
  4024   00179A  0420               	decf	dtoa@i^0,w,c
  4025   00179C  A0D8               	btfss	status,0,c
  4026   00179E  EFD3  F00B         	goto	u2071
  4027   0017A2  EFD5  F00B         	goto	u2070
  4028   0017A6                     u2071:
  4029   0017A6  EFFB  F00B         	goto	l3225
  4030   0017AA                     u2070:
  4031   0017AA  5018               	movf	dtoa@d^0,w,c
  4032   0017AC  1019               	iorwf	(dtoa@d+1)^0,w,c
  4033   0017AE  A4D8               	btfss	status,2,c
  4034   0017B0  EFDC  F00B         	goto	u2081
  4035   0017B4  EFDE  F00B         	goto	u2080
  4036   0017B8                     u2081:
  4037   0017B8  EF99  F00B         	goto	l3205
  4038   0017BC                     u2080:
  4039   0017BC  501C               	movf	dtoa@p^0,w,c
  4040   0017BE  A4D8               	btfss	status,2,c
  4041   0017C0  EFE4  F00B         	goto	u2091
  4042   0017C4  EFE6  F00B         	goto	u2090
  4043   0017C8                     u2091:
  4044   0017C8  EF99  F00B         	goto	l3205
  4045   0017CC                     u2090:
  4046   0017CC  BE1E               	btfsc	(dtoa@w+1)^0,7,c
  4047   0017CE  EFF1  F00B         	goto	u2101
  4048   0017D2  501E               	movf	(dtoa@w+1)^0,w,c
  4049   0017D4  E108               	bnz	u2100
  4050   0017D6  041D               	decf	dtoa@w^0,w,c
  4051   0017D8  A0D8               	btfss	status,0,c
  4052   0017DA  EFF1  F00B         	goto	u2101
  4053   0017DE  EFF3  F00B         	goto	u2100
  4054   0017E2                     u2101:
  4055   0017E2  EFFB  F00B         	goto	l3225
  4056   0017E6                     u2100:
  4057   0017E6  0100               	movlb	0	; () banked
  4058   0017E8  B3FC               	btfsc	_flags& (0+255),1,b
  4059   0017EA  EFF9  F00B         	goto	u2111
  4060   0017EE  EFFB  F00B         	goto	u2110
  4061   0017F2                     u2111:
  4062   0017F2  EF99  F00B         	goto	l3205
  4063   0017F6                     u2110:
  4064   0017F6                     l3225:
  4065                           
  4066                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  4067   0017F6  501F               	movf	dtoa@s^0,w,c
  4068   0017F8  B4D8               	btfsc	status,2,c
  4069   0017FA  EF01  F00C         	goto	u2121
  4070   0017FE  EF03  F00C         	goto	u2120
  4071   001802                     u2121:
  4072   001802  EF0E  F00C         	goto	l3231
  4073   001806                     u2120:
  4074   001806                     
  4075                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  4076   001806  0620               	decf	dtoa@i^0,f,c
  4077   001808  A0D8               	btfss	status,0,c
  4078   00180A  0621               	decf	(dtoa@i+1)^0,f,c
  4079   00180C                     
  4080                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  4081   00180C  0E66               	movlw	low _dbuf
  4082   00180E  2420               	addwf	dtoa@i^0,w,c
  4083   001810  6ED9               	movwf	fsr2l,c
  4084   001812  0E01               	movlw	high _dbuf
  4085   001814  2021               	addwfc	(dtoa@i+1)^0,w,c
  4086   001816  6EDA               	movwf	fsr2h,c
  4087   001818  C01F  FFDF         	movff	dtoa@s,indf2
  4088   00181C                     l3231:
  4089                           
  4090                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  4091   00181C  C017  F00F         	movff	dtoa@fp,pad@fp
  4092   001820  0E66               	movlw	low _dbuf
  4093   001822  2420               	addwf	dtoa@i^0,w,c
  4094   001824  6E10               	movwf	pad@buf^0,c
  4095   001826  0E01               	movlw	high _dbuf
  4096   001828  2021               	addwfc	(dtoa@i+1)^0,w,c
  4097   00182A  6E11               	movwf	(pad@buf+1)^0,c
  4098   00182C  C01D  F012         	movff	dtoa@w,pad@p
  4099   001830  C01E  F013         	movff	dtoa@w+1,pad@p+1
  4100   001834  ECEC  F00E         	call	_pad	;wreg free
  4101   001838  0012               	return		;funcret
  4102   00183A                     __end_of_dtoa:
  4103                           	callstack 0
  4104                           
  4105 ;; *************** function _pad *****************
  4106 ;; Defined at:
  4107 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  4110 ;;		 -> sprintf@f(12), 
  4111 ;;  buf             2   15[COMRAM] PTR unsigned char 
  4112 ;;		 -> dbuf(32), 
  4113 ;;  p               2   17[COMRAM] int 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;  i               2   20[COMRAM] int 
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      void 
  4118 ;; Registers used:
  4119 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4125 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4126 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4127 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4128 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4129 ;;Total ram usage:        8 bytes
  4130 ;; Hardware stack levels used: 1
  4131 ;; Hardware stack levels required when called: 3
  4132 ;; This function calls:
  4133 ;;		_fputc
  4134 ;;		_fputs
  4135 ;; This function is called by:
  4136 ;;		_dtoa
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text19
  4141   001DD8                     __ptext19:
  4142                           	callstack 0
  4143   001DD8                     _pad:
  4144                           	callstack 22
  4145   001DD8                     
  4146                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  4147   001DD8  0100               	movlb	0	; () banked
  4148   001DDA  A1FC               	btfss	_flags& (0+255),0,b
  4149   001DDC  EFF2  F00E         	goto	u1981
  4150   001DE0  EFF4  F00E         	goto	u1980
  4151   001DE4                     u1981:
  4152   001DE4  EFFC  F00E         	goto	l3169
  4153   001DE8                     u1980:
  4154   001DE8                     
  4155                           ; BSR set to: 0
  4156                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  4157   001DE8  C010  F009         	movff	pad@buf,fputs@s
  4158   001DEC  C011  F00A         	movff	pad@buf+1,fputs@s+1
  4159   001DF0  C00F  F00B         	movff	pad@fp,fputs@fp
  4160   001DF4  ECCA  F010         	call	_fputs	;wreg free
  4161   001DF8                     l3169:
  4162                           
  4163                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  4164   001DF8  BE13               	btfsc	(pad@p+1)^0,7,c
  4165   001DFA  EF03  F00F         	goto	u1990
  4166   001DFE  EF01  F00F         	goto	u1991
  4167   001E02                     u1991:
  4168   001E02  EF07  F00F         	goto	l1165
  4169   001E06                     u1990:
  4170   001E06                     
  4171                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  4172   001E06  0E00               	movlw	0
  4173   001E08  6E13               	movwf	(pad@p+1)^0,c
  4174   001E0A  0E00               	movlw	0
  4175   001E0C  6E12               	movwf	pad@p^0,c
  4176   001E0E                     l1165:
  4177                           
  4178                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  4179   001E0E  0E00               	movlw	0
  4180   001E10  6E16               	movwf	(pad@i+1)^0,c
  4181   001E12  0E00               	movlw	0
  4182   001E14  6E15               	movwf	pad@i^0,c
  4183                           
  4184                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  4185   001E16  EF17  F00F         	goto	l3177
  4186   001E1A                     l3173:
  4187                           
  4188                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  4189   001E1A  0E00               	movlw	0
  4190   001E1C  6E02               	movwf	(fputc@c+1)^0,c
  4191   001E1E  0E20               	movlw	32
  4192   001E20  6E01               	movwf	fputc@c^0,c
  4193   001E22  C00F  F003         	movff	pad@fp,fputc@fp
  4194   001E26  EC46  F00E         	call	_fputc	;wreg free
  4195   001E2A                     
  4196                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  4197   001E2A  4A15               	infsnz	pad@i^0,f,c
  4198   001E2C  2A16               	incf	(pad@i+1)^0,f,c
  4199   001E2E                     l3177:
  4200                           
  4201                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  4202   001E2E  5012               	movf	pad@p^0,w,c
  4203   001E30  5C15               	subwf	pad@i^0,w,c
  4204   001E32  5016               	movf	(pad@i+1)^0,w,c
  4205   001E34  0A80               	xorlw	128
  4206   001E36  6E14               	movwf	??_pad^0,c
  4207   001E38  5013               	movf	(pad@p+1)^0,w,c
  4208   001E3A  0A80               	xorlw	128
  4209   001E3C  5814               	subwfb	??_pad^0,w,c
  4210   001E3E  A0D8               	btfss	status,0,c
  4211   001E40  EF24  F00F         	goto	u2001
  4212   001E44  EF26  F00F         	goto	u2000
  4213   001E48                     u2001:
  4214   001E48  EF0D  F00F         	goto	l3173
  4215   001E4C                     u2000:
  4216   001E4C                     
  4217                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  4218   001E4C  0100               	movlb	0	; () banked
  4219   001E4E  B1FC               	btfsc	_flags& (0+255),0,b
  4220   001E50  EF2C  F00F         	goto	u2011
  4221   001E54  EF2E  F00F         	goto	u2010
  4222   001E58                     u2011:
  4223   001E58  EF36  F00F         	goto	l1170
  4224   001E5C                     u2010:
  4225   001E5C                     
  4226                           ; BSR set to: 0
  4227                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  4228   001E5C  C010  F009         	movff	pad@buf,fputs@s
  4229   001E60  C011  F00A         	movff	pad@buf+1,fputs@s+1
  4230   001E64  C00F  F00B         	movff	pad@fp,fputs@fp
  4231   001E68  ECCA  F010         	call	_fputs	;wreg free
  4232   001E6C                     l1170:
  4233   001E6C  0012               	return		;funcret
  4234   001E6E                     __end_of_pad:
  4235                           	callstack 0
  4236                           
  4237 ;; *************** function _fputs *****************
  4238 ;; Defined at:
  4239 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  s               2    8[COMRAM] PTR const unsigned char 
  4242 ;;		 -> dbuf(32), 
  4243 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  4244 ;;		 -> sprintf@f(12), 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  i               2   12[COMRAM] int 
  4247 ;;  c               1   11[COMRAM] unsigned char 
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  2    8[COMRAM] int 
  4250 ;; Registers used:
  4251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4257 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4258 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4260 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4261 ;;Total ram usage:        6 bytes
  4262 ;; Hardware stack levels used: 1
  4263 ;; Hardware stack levels required when called: 2
  4264 ;; This function calls:
  4265 ;;		_fputc
  4266 ;; This function is called by:
  4267 ;;		_pad
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text20
  4272   002194                     __ptext20:
  4273                           	callstack 0
  4274   002194                     _fputs:
  4275                           	callstack 22
  4276   002194  0E00               	movlw	0
  4277   002196  6E0E               	movwf	(fputs@i+1)^0,c
  4278   002198  0E00               	movlw	0
  4279   00219A  6E0D               	movwf	fputs@i^0,c
  4280   00219C  EFD9  F010         	goto	l3077
  4281   0021A0                     l3073:
  4282   0021A0  C00C  F001         	movff	fputs@c,fputc@c
  4283   0021A4  6A02               	clrf	(fputc@c+1)^0,c
  4284   0021A6  C00B  F003         	movff	fputs@fp,fputc@fp
  4285   0021AA  EC46  F00E         	call	_fputc	;wreg free
  4286   0021AE  4A0D               	infsnz	fputs@i^0,f,c
  4287   0021B0  2A0E               	incf	(fputs@i+1)^0,f,c
  4288   0021B2                     l3077:
  4289   0021B2  500D               	movf	fputs@i^0,w,c
  4290   0021B4  2409               	addwf	fputs@s^0,w,c
  4291   0021B6  6ED9               	movwf	fsr2l,c
  4292   0021B8  500E               	movf	(fputs@i+1)^0,w,c
  4293   0021BA  200A               	addwfc	(fputs@s+1)^0,w,c
  4294   0021BC  6EDA               	movwf	fsr2h,c
  4295   0021BE  50DF               	movf	indf2,w,c
  4296   0021C0  6E0C               	movwf	fputs@c^0,c
  4297   0021C2  500C               	movf	fputs@c^0,w,c
  4298   0021C4  A4D8               	btfss	status,2,c
  4299   0021C6  EFE7  F010         	goto	u1851
  4300   0021CA  EFE9  F010         	goto	u1850
  4301   0021CE                     u1851:
  4302   0021CE  EFD0  F010         	goto	l3073
  4303   0021D2                     u1850:
  4304   0021D2  0012               	return		;funcret
  4305   0021D4                     __end_of_fputs:
  4306                           	callstack 0
  4307                           
  4308 ;; *************** function _fputc *****************
  4309 ;; Defined at:
  4310 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  c               2    0[COMRAM] int 
  4313 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  4314 ;;		 -> sprintf@f(12), 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  2    0[COMRAM] int 
  4319 ;; Registers used:
  4320 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4326 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4328 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4329 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4330 ;;Total ram usage:        8 bytes
  4331 ;; Hardware stack levels used: 1
  4332 ;; Hardware stack levels required when called: 1
  4333 ;; This function calls:
  4334 ;;		_putch
  4335 ;; This function is called by:
  4336 ;;		_pad
  4337 ;;		_vfpfcnvrt
  4338 ;;		_fputs
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text21
  4343   001C8C                     __ptext21:
  4344                           	callstack 0
  4345   001C8C                     _fputc:
  4346                           	callstack 25
  4347   001C8C  5003               	movf	fputc@fp^0,w,c
  4348   001C8E  B4D8               	btfsc	status,2,c
  4349   001C90  EF4C  F00E         	goto	u1811
  4350   001C94  EF4E  F00E         	goto	u1810
  4351   001C98                     u1811:
  4352   001C98  EF56  F00E         	goto	l3061
  4353   001C9C                     u1810:
  4354   001C9C  5003               	movf	fputc@fp^0,w,c
  4355   001C9E  A4D8               	btfss	status,2,c
  4356   001CA0  EF54  F00E         	goto	u1821
  4357   001CA4  EF56  F00E         	goto	u1820
  4358   001CA8                     u1821:
  4359   001CA8  EF5B  F00E         	goto	l3063
  4360   001CAC                     u1820:
  4361   001CAC                     l3061:
  4362   001CAC  5001               	movf	fputc@c^0,w,c
  4363   001CAE  EC10  F012         	call	_putch
  4364   001CB2  EF9A  F00E         	goto	l1234
  4365   001CB6                     l3063:
  4366   001CB6  5003               	movf	fputc@fp^0,w,c
  4367   001CB8  6ED9               	movwf	fsr2l,c
  4368   001CBA  6ADA               	clrf	fsr2h,c
  4369   001CBC  0E0A               	movlw	10
  4370   001CBE  26D9               	addwf	fsr2l,f,c
  4371   001CC0  50DE               	movf	postinc2,w,c
  4372   001CC2  10DE               	iorwf	postinc2,w,c
  4373   001CC4  B4D8               	btfsc	status,2,c
  4374   001CC6  EF67  F00E         	goto	u1831
  4375   001CCA  EF69  F00E         	goto	u1830
  4376   001CCE                     u1831:
  4377   001CCE  EF82  F00E         	goto	l3067
  4378   001CD2                     u1830:
  4379   001CD2  5003               	movf	fputc@fp^0,w,c
  4380   001CD4  6ED9               	movwf	fsr2l,c
  4381   001CD6  6ADA               	clrf	fsr2h,c
  4382   001CD8  0E0A               	movlw	10
  4383   001CDA  26D9               	addwf	fsr2l,f,c
  4384   001CDC  5003               	movf	fputc@fp^0,w,c
  4385   001CDE  6EE1               	movwf	fsr1l,c
  4386   001CE0  6AE2               	clrf	fsr1h,c
  4387   001CE2  0E03               	movlw	3
  4388   001CE4  26E1               	addwf	fsr1l,f,c
  4389   001CE6  50DE               	movf	postinc2,w,c
  4390   001CE8  5CE6               	subwf	postinc1,w,c
  4391   001CEA  50E6               	movf	postinc1,w,c
  4392   001CEC  0A80               	xorlw	128
  4393   001CEE  6E08               	movwf	(??_fputc+4)^0,c
  4394   001CF0  50DE               	movf	postinc2,w,c
  4395   001CF2  0A80               	xorlw	128
  4396   001CF4  5808               	subwfb	(??_fputc+4)^0,w,c
  4397   001CF6  B0D8               	btfsc	status,0,c
  4398   001CF8  EF80  F00E         	goto	u1841
  4399   001CFC  EF82  F00E         	goto	u1840
  4400   001D00                     u1841:
  4401   001D00  EF9A  F00E         	goto	l1234
  4402   001D04                     u1840:
  4403   001D04                     l3067:
  4404   001D04  5003               	movf	fputc@fp^0,w,c
  4405   001D06  6ED9               	movwf	fsr2l,c
  4406   001D08  6ADA               	clrf	fsr2h,c
  4407   001D0A  0E03               	movlw	3
  4408   001D0C  26D9               	addwf	fsr2l,f,c
  4409   001D0E  50DF               	movf	indf2,w,c
  4410   001D10  6E04               	movwf	??_fputc^0,c
  4411   001D12  5003               	movf	fputc@fp^0,w,c
  4412   001D14  6ED9               	movwf	fsr2l,c
  4413   001D16  6ADA               	clrf	fsr2h,c
  4414   001D18  50DF               	movf	indf2,w,c
  4415   001D1A  2404               	addwf	??_fputc^0,w,c
  4416   001D1C  6ED9               	movwf	fsr2l,c
  4417   001D1E  6ADA               	clrf	fsr2h,c
  4418   001D20  C001  FFDF         	movff	fputc@c,indf2
  4419   001D24  5003               	movf	fputc@fp^0,w,c
  4420   001D26  6ED9               	movwf	fsr2l,c
  4421   001D28  6ADA               	clrf	fsr2h,c
  4422   001D2A  0E03               	movlw	3
  4423   001D2C  26D9               	addwf	fsr2l,f,c
  4424   001D2E  2ADE               	incf	postinc2,f,c
  4425   001D30  0E00               	movlw	0
  4426   001D32  22DD               	addwfc	postdec2,f,c
  4427   001D34                     l1234:
  4428   001D34  0012               	return		;funcret
  4429   001D36                     __end_of_fputc:
  4430                           	callstack 0
  4431                           
  4432 ;; *************** function _putch *****************
  4433 ;; Defined at:
  4434 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;  c               1    wreg     unsigned char 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  c               1    0[COMRAM] unsigned char 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4452 ;;Total ram usage:        0 bytes
  4453 ;; Hardware stack levels used: 1
  4454 ;; This function calls:
  4455 ;;		Nothing
  4456 ;; This function is called by:
  4457 ;;		_fputc
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           	psect	text22
  4462   002420                     __ptext22:
  4463                           	callstack 0
  4464   002420                     _putch:
  4465                           	callstack 25
  4466   002420  0012               	return		;funcret
  4467   002422                     __end_of_putch:
  4468                           	callstack 0
  4469                           
  4470 ;; *************** function _abs *****************
  4471 ;; Defined at:
  4472 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;  a               2    6[COMRAM] int 
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;		None
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  2    6[COMRAM] int 
  4479 ;; Registers used:
  4480 ;;		wreg, status,2, status,0
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4486 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4488 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4489 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4490 ;;Total ram usage:        4 bytes
  4491 ;; Hardware stack levels used: 1
  4492 ;; This function calls:
  4493 ;;		Nothing
  4494 ;; This function is called by:
  4495 ;;		_dtoa
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           	psect	text23
  4500   0022A8                     __ptext23:
  4501                           	callstack 0
  4502   0022A8                     _abs:
  4503                           	callstack 25
  4504   0022A8  BE08               	btfsc	(abs@a+1)^0,7,c
  4505   0022AA  EF59  F011         	goto	u2021
  4506   0022AE  EF5B  F011         	goto	u2020
  4507   0022B2                     u2021:
  4508   0022B2  EF61  F011         	goto	l1219
  4509   0022B6                     u2020:
  4510   0022B6  C007  F007         	movff	abs@a,?_abs
  4511   0022BA  C008  F008         	movff	abs@a+1,?_abs+1
  4512   0022BE  EF6D  F011         	goto	l1222
  4513   0022C2                     l1219:
  4514   0022C2  C007  F009         	movff	abs@a,??_abs
  4515   0022C6  C008  F00A         	movff	abs@a+1,??_abs+1
  4516   0022CA  1E09               	comf	??_abs^0,f,c
  4517   0022CC  1E0A               	comf	(??_abs+1)^0,f,c
  4518   0022CE  4A09               	infsnz	??_abs^0,f,c
  4519   0022D0  2A0A               	incf	(??_abs+1)^0,f,c
  4520   0022D2  C009  F007         	movff	??_abs,?_abs
  4521   0022D6  C00A  F008         	movff	??_abs+1,?_abs+1
  4522   0022DA                     l1222:
  4523   0022DA  0012               	return		;funcret
  4524   0022DC                     __end_of_abs:
  4525                           	callstack 0
  4526                           
  4527 ;; *************** function ___awmod *****************
  4528 ;; Defined at:
  4529 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  dividend        2    0[COMRAM] int 
  4532 ;;  divisor         2    2[COMRAM] int 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  sign            1    5[COMRAM] unsigned char 
  4535 ;;  counter         1    4[COMRAM] unsigned char 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  2    0[COMRAM] int 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2, status,0
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4546 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4548 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4549 ;;Total ram usage:        6 bytes
  4550 ;; Hardware stack levels used: 1
  4551 ;; This function calls:
  4552 ;;		Nothing
  4553 ;; This function is called by:
  4554 ;;		_dtoa
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           	psect	text24
  4559   001B2E                     __ptext24:
  4560                           	callstack 0
  4561   001B2E                     ___awmod:
  4562                           	callstack 25
  4563   001B2E  0E00               	movlw	0
  4564   001B30  6E06               	movwf	___awmod@sign^0,c
  4565   001B32  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  4566   001B34  EFA0  F00D         	goto	u1920
  4567   001B38  EF9E  F00D         	goto	u1921
  4568   001B3C                     u1921:
  4569   001B3C  EFA6  F00D         	goto	l3137
  4570   001B40                     u1920:
  4571   001B40  6C01               	negf	___awmod@dividend^0,c
  4572   001B42  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4573   001B44  B0D8               	btfsc	status,0,c
  4574   001B46  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4575   001B48  0E01               	movlw	1
  4576   001B4A  6E06               	movwf	___awmod@sign^0,c
  4577   001B4C                     l3137:
  4578   001B4C  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  4579   001B4E  EFAD  F00D         	goto	u1930
  4580   001B52  EFAB  F00D         	goto	u1931
  4581   001B56                     u1931:
  4582   001B56  EFB1  F00D         	goto	l3141
  4583   001B5A                     u1930:
  4584   001B5A  6C03               	negf	___awmod@divisor^0,c
  4585   001B5C  1E04               	comf	(___awmod@divisor+1)^0,f,c
  4586   001B5E  B0D8               	btfsc	status,0,c
  4587   001B60  2A04               	incf	(___awmod@divisor+1)^0,f,c
  4588   001B62                     l3141:
  4589   001B62  5003               	movf	___awmod@divisor^0,w,c
  4590   001B64  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  4591   001B66  B4D8               	btfsc	status,2,c
  4592   001B68  EFB8  F00D         	goto	u1941
  4593   001B6C  EFBA  F00D         	goto	u1940
  4594   001B70                     u1941:
  4595   001B70  EFDE  F00D         	goto	l3157
  4596   001B74                     u1940:
  4597   001B74  0E01               	movlw	1
  4598   001B76  6E05               	movwf	___awmod@counter^0,c
  4599   001B78  EFC2  F00D         	goto	l3147
  4600   001B7C                     l3145:
  4601   001B7C  90D8               	bcf	status,0,c
  4602   001B7E  3603               	rlcf	___awmod@divisor^0,f,c
  4603   001B80  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  4604   001B82  2A05               	incf	___awmod@counter^0,f,c
  4605   001B84                     l3147:
  4606   001B84  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  4607   001B86  EFC7  F00D         	goto	u1951
  4608   001B8A  EFC9  F00D         	goto	u1950
  4609   001B8E                     u1951:
  4610   001B8E  EFBE  F00D         	goto	l3145
  4611   001B92                     u1950:
  4612   001B92                     l3149:
  4613   001B92  5003               	movf	___awmod@divisor^0,w,c
  4614   001B94  5C01               	subwf	___awmod@dividend^0,w,c
  4615   001B96  5004               	movf	(___awmod@divisor+1)^0,w,c
  4616   001B98  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  4617   001B9A  A0D8               	btfss	status,0,c
  4618   001B9C  EFD2  F00D         	goto	u1961
  4619   001BA0  EFD4  F00D         	goto	u1960
  4620   001BA4                     u1961:
  4621   001BA4  EFD8  F00D         	goto	l3153
  4622   001BA8                     u1960:
  4623   001BA8  5003               	movf	___awmod@divisor^0,w,c
  4624   001BAA  5E01               	subwf	___awmod@dividend^0,f,c
  4625   001BAC  5004               	movf	(___awmod@divisor+1)^0,w,c
  4626   001BAE  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  4627   001BB0                     l3153:
  4628   001BB0  90D8               	bcf	status,0,c
  4629   001BB2  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  4630   001BB4  3203               	rrcf	___awmod@divisor^0,f,c
  4631   001BB6  2E05               	decfsz	___awmod@counter^0,f,c
  4632   001BB8  EFC9  F00D         	goto	l3149
  4633   001BBC                     l3157:
  4634   001BBC  5006               	movf	___awmod@sign^0,w,c
  4635   001BBE  B4D8               	btfsc	status,2,c
  4636   001BC0  EFE4  F00D         	goto	u1971
  4637   001BC4  EFE6  F00D         	goto	u1970
  4638   001BC8                     u1971:
  4639   001BC8  EFEA  F00D         	goto	l3161
  4640   001BCC                     u1970:
  4641   001BCC  6C01               	negf	___awmod@dividend^0,c
  4642   001BCE  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4643   001BD0  B0D8               	btfsc	status,0,c
  4644   001BD2  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4645   001BD4                     l3161:
  4646   001BD4  C001  F001         	movff	___awmod@dividend,?___awmod
  4647   001BD8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4648   001BDC  0012               	return		;funcret
  4649   001BDE                     __end_of___awmod:
  4650                           	callstack 0
  4651                           
  4652 ;; *************** function ___awdiv *****************
  4653 ;; Defined at:
  4654 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;  dividend        2    0[COMRAM] int 
  4657 ;;  divisor         2    2[COMRAM] int 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  quotient        2    6[COMRAM] int 
  4660 ;;  sign            1    5[COMRAM] unsigned char 
  4661 ;;  counter         1    4[COMRAM] unsigned char 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  2    0[COMRAM] int 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4672 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4674 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4675 ;;Total ram usage:        8 bytes
  4676 ;; Hardware stack levels used: 1
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_dtoa
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           	psect	text25
  4685   001A6A                     __ptext25:
  4686                           	callstack 0
  4687   001A6A                     ___awdiv:
  4688                           	callstack 25
  4689   001A6A  0E00               	movlw	0
  4690   001A6C  6E06               	movwf	___awdiv@sign^0,c
  4691   001A6E  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  4692   001A70  EF3E  F00D         	goto	u1860
  4693   001A74  EF3C  F00D         	goto	u1861
  4694   001A78                     u1861:
  4695   001A78  EF44  F00D         	goto	l3093
  4696   001A7C                     u1860:
  4697   001A7C  6C03               	negf	___awdiv@divisor^0,c
  4698   001A7E  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  4699   001A80  B0D8               	btfsc	status,0,c
  4700   001A82  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  4701   001A84  0E01               	movlw	1
  4702   001A86  6E06               	movwf	___awdiv@sign^0,c
  4703   001A88                     l3093:
  4704   001A88  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  4705   001A8A  EF4B  F00D         	goto	u1870
  4706   001A8E  EF49  F00D         	goto	u1871
  4707   001A92                     u1871:
  4708   001A92  EF51  F00D         	goto	l3099
  4709   001A96                     u1870:
  4710   001A96  6C01               	negf	___awdiv@dividend^0,c
  4711   001A98  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  4712   001A9A  B0D8               	btfsc	status,0,c
  4713   001A9C  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  4714   001A9E  0E01               	movlw	1
  4715   001AA0  1A06               	xorwf	___awdiv@sign^0,f,c
  4716   001AA2                     l3099:
  4717   001AA2  0E00               	movlw	0
  4718   001AA4  6E08               	movwf	(___awdiv@quotient+1)^0,c
  4719   001AA6  0E00               	movlw	0
  4720   001AA8  6E07               	movwf	___awdiv@quotient^0,c
  4721   001AAA  5003               	movf	___awdiv@divisor^0,w,c
  4722   001AAC  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  4723   001AAE  B4D8               	btfsc	status,2,c
  4724   001AB0  EF5C  F00D         	goto	u1881
  4725   001AB4  EF5E  F00D         	goto	u1880
  4726   001AB8                     u1881:
  4727   001AB8  EF86  F00D         	goto	l3121
  4728   001ABC                     u1880:
  4729   001ABC  0E01               	movlw	1
  4730   001ABE  6E05               	movwf	___awdiv@counter^0,c
  4731   001AC0  EF66  F00D         	goto	l3107
  4732   001AC4                     l3105:
  4733   001AC4  90D8               	bcf	status,0,c
  4734   001AC6  3603               	rlcf	___awdiv@divisor^0,f,c
  4735   001AC8  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  4736   001ACA  2A05               	incf	___awdiv@counter^0,f,c
  4737   001ACC                     l3107:
  4738   001ACC  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  4739   001ACE  EF6B  F00D         	goto	u1891
  4740   001AD2  EF6D  F00D         	goto	u1890
  4741   001AD6                     u1891:
  4742   001AD6  EF62  F00D         	goto	l3105
  4743   001ADA                     u1890:
  4744   001ADA                     l3109:
  4745   001ADA  90D8               	bcf	status,0,c
  4746   001ADC  3607               	rlcf	___awdiv@quotient^0,f,c
  4747   001ADE  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  4748   001AE0  5003               	movf	___awdiv@divisor^0,w,c
  4749   001AE2  5C01               	subwf	___awdiv@dividend^0,w,c
  4750   001AE4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4751   001AE6  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  4752   001AE8  A0D8               	btfss	status,0,c
  4753   001AEA  EF79  F00D         	goto	u1901
  4754   001AEE  EF7B  F00D         	goto	u1900
  4755   001AF2                     u1901:
  4756   001AF2  EF80  F00D         	goto	l3117
  4757   001AF6                     u1900:
  4758   001AF6  5003               	movf	___awdiv@divisor^0,w,c
  4759   001AF8  5E01               	subwf	___awdiv@dividend^0,f,c
  4760   001AFA  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4761   001AFC  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  4762   001AFE  8007               	bsf	___awdiv@quotient^0,0,c
  4763   001B00                     l3117:
  4764   001B00  90D8               	bcf	status,0,c
  4765   001B02  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  4766   001B04  3203               	rrcf	___awdiv@divisor^0,f,c
  4767   001B06  2E05               	decfsz	___awdiv@counter^0,f,c
  4768   001B08  EF6D  F00D         	goto	l3109
  4769   001B0C                     l3121:
  4770   001B0C  5006               	movf	___awdiv@sign^0,w,c
  4771   001B0E  B4D8               	btfsc	status,2,c
  4772   001B10  EF8C  F00D         	goto	u1911
  4773   001B14  EF8E  F00D         	goto	u1910
  4774   001B18                     u1911:
  4775   001B18  EF92  F00D         	goto	l3125
  4776   001B1C                     u1910:
  4777   001B1C  6C07               	negf	___awdiv@quotient^0,c
  4778   001B1E  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  4779   001B20  B0D8               	btfsc	status,0,c
  4780   001B22  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  4781   001B24                     l3125:
  4782   001B24  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4783   001B28  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4784   001B2C  0012               	return		;funcret
  4785   001B2E                     __end_of___awdiv:
  4786                           	callstack 0
  4787                           
  4788 ;; *************** function _sendStringSerial4 *****************
  4789 ;; Defined at:
  4790 ;;		line 41 in file "serial.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;  string          1    1[COMRAM] PTR unsigned char 
  4793 ;;		 -> send2USART@hue_char(50), send2USART@buf(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  4794 ;;		 -> test@led_state(50), 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;		None
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  1    wreg      void 
  4799 ;; Registers used:
  4800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4806 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4809 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4810 ;;Total ram usage:        1 bytes
  4811 ;; Hardware stack levels used: 1
  4812 ;; Hardware stack levels required when called: 1
  4813 ;; This function calls:
  4814 ;;		_sendCharSerial4
  4815 ;; This function is called by:
  4816 ;;		_test
  4817 ;;		_calibration_routine
  4818 ;;		_send2USART
  4819 ;;		_sendAllReadings
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           	psect	text26
  4824   0022DC                     __ptext26:
  4825                           	callstack 0
  4826   0022DC                     _sendStringSerial4:
  4827                           	callstack 28
  4828   0022DC                     
  4829                           ;serial.c: 44:     while(*string != 0){
  4830   0022DC  EF7B  F011         	goto	l3423
  4831   0022E0                     l3417:
  4832                           
  4833                           ;serial.c: 46:   sendCharSerial4(*string++);
  4834   0022E0  5002               	movf	sendStringSerial4@string^0,w,c
  4835   0022E2  6ED9               	movwf	fsr2l,c
  4836   0022E4  6ADA               	clrf	fsr2h,c
  4837   0022E6  50DF               	movf	indf2,w,c
  4838   0022E8  ECEF  F011         	call	_sendCharSerial4
  4839   0022EC  2A02               	incf	sendStringSerial4@string^0,f,c
  4840   0022EE                     
  4841                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4842   0022EE  0E6A               	movlw	106
  4843   0022F0                     u2707:
  4844   0022F0  2EE8               	decfsz	wreg,f,c
  4845   0022F2  D7FE               	bra	u2707
  4846   0022F4  D000               	nop2	
  4847   0022F6                     l3423:
  4848                           
  4849                           ;serial.c: 44:     while(*string != 0){
  4850   0022F6  5002               	movf	sendStringSerial4@string^0,w,c
  4851   0022F8  6ED9               	movwf	fsr2l,c
  4852   0022FA  6ADA               	clrf	fsr2h,c
  4853   0022FC  50DF               	movf	indf2,w,c
  4854   0022FE  A4D8               	btfss	status,2,c
  4855   002300  EF84  F011         	goto	u2291
  4856   002304  EF86  F011         	goto	u2290
  4857   002308                     u2291:
  4858   002308  EF70  F011         	goto	l3417
  4859   00230C                     u2290:
  4860   00230C  0012               	return		;funcret
  4861   00230E                     __end_of_sendStringSerial4:
  4862                           	callstack 0
  4863                           
  4864 ;; *************** function _sendCharSerial4 *****************
  4865 ;; Defined at:
  4866 ;;		line 35 in file "serial.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  charToSend      1    wreg     unsigned char 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  charToSend      1    0[COMRAM] unsigned char 
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		wreg
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4881 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4883 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4884 ;;Total ram usage:        1 bytes
  4885 ;; Hardware stack levels used: 1
  4886 ;; This function calls:
  4887 ;;		Nothing
  4888 ;; This function is called by:
  4889 ;;		_sendStringSerial4
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text27
  4894   0023DE                     __ptext27:
  4895                           	callstack 0
  4896   0023DE                     _sendCharSerial4:
  4897                           	callstack 28
  4898                           
  4899                           ;incstack = 0
  4900                           ;sendCharSerial4@charToSend stored from wreg
  4901   0023DE  6E01               	movwf	sendCharSerial4@charToSend^0,c
  4902   0023E0                     l410:
  4903   0023E0  010E               	movlb	14	; () banked
  4904   0023E2  A537               	btfss	55,2,b	;volatile
  4905   0023E4  EFF6  F011         	goto	u2251
  4906   0023E8  EFF8  F011         	goto	u2250
  4907   0023EC                     u2251:
  4908   0023EC  EFF0  F011         	goto	l410
  4909   0023F0                     u2250:
  4910   0023F0                     
  4911                           ; BSR set to: 14
  4912                           ;serial.c: 37:     TX4REG = charToSend;
  4913   0023F0  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4914   0023F4                     
  4915                           ; BSR set to: 14
  4916   0023F4  0012               	return		;funcret
  4917   0023F6                     __end_of_sendCharSerial4:
  4918                           	callstack 0
  4919                           
  4920 ;; *************** function _color_read_Red *****************
  4921 ;; Defined at:
  4922 ;;		line 30 in file "color.c"
  4923 ;; Parameters:    Size  Location     Type
  4924 ;;		None
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;  tmp             2    9[COMRAM] unsigned int 
  4927 ;; Return value:  Size  Location     Type
  4928 ;;                  2    4[COMRAM] unsigned int 
  4929 ;; Registers used:
  4930 ;;		wreg, status,2, status,0, cstack
  4931 ;; Tracked objects:
  4932 ;;		On entry : 0/0
  4933 ;;		On exit  : 0/0
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4936 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4937 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4938 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4939 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4940 ;;Total ram usage:        7 bytes
  4941 ;; Hardware stack levels used: 1
  4942 ;; Hardware stack levels required when called: 2
  4943 ;; This function calls:
  4944 ;;		_I2C_2_Master_Read
  4945 ;;		_I2C_2_Master_RepStart
  4946 ;;		_I2C_2_Master_Start
  4947 ;;		_I2C_2_Master_Stop
  4948 ;;		_I2C_2_Master_Write
  4949 ;; This function is called by:
  4950 ;;		_calibration_routine
  4951 ;;		_reading_values
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           	psect	text28
  4956   001FD0                     __ptext28:
  4957                           	callstack 0
  4958   001FD0                     _color_read_Red:
  4959                           	callstack 26
  4960   001FD0                     
  4961                           ;color.c: 32:  unsigned int tmp;;color.c: 33:  I2C_2_Master_Start();
  4962   001FD0  EC06  F012         	call	_I2C_2_Master_Start	;wreg free
  4963                           
  4964                           ;color.c: 34:  I2C_2_Master_Write(0x52 | 0x00);
  4965   001FD4  0E52               	movlw	82
  4966   001FD6  ECFB  F011         	call	_I2C_2_Master_Write
  4967                           
  4968                           ;color.c: 35:  I2C_2_Master_Write(0xA0 | 0x16);
  4969   001FDA  0EB6               	movlw	182
  4970   001FDC  ECFB  F011         	call	_I2C_2_Master_Write
  4971                           
  4972                           ;color.c: 36:  I2C_2_Master_RepStart();
  4973   001FE0  EC0B  F012         	call	_I2C_2_Master_RepStart	;wreg free
  4974                           
  4975                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x01);
  4976   001FE4  0E53               	movlw	83
  4977   001FE6  ECFB  F011         	call	_I2C_2_Master_Write
  4978                           
  4979                           ;color.c: 38:  tmp=I2C_2_Master_Read(1);
  4980   001FEA  0E01               	movlw	1
  4981   001FEC  ECA9  F010         	call	_I2C_2_Master_Read
  4982   001FF0  6E07               	movwf	??_color_read_Red^0,c
  4983   001FF2  5007               	movf	??_color_read_Red^0,w,c
  4984   001FF4  6E0A               	movwf	color_read_Red@tmp^0,c
  4985   001FF6  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  4986                           
  4987                           ;color.c: 39:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4988   001FF8  0E00               	movlw	0
  4989   001FFA  ECA9  F010         	call	_I2C_2_Master_Read
  4990   001FFE  6E07               	movwf	??_color_read_Red^0,c
  4991   002000  5007               	movf	??_color_read_Red^0,w,c
  4992   002002  6E09               	movwf	(??_color_read_Red+2)^0,c
  4993   002004  6A08               	clrf	(??_color_read_Red+1)^0,c
  4994   002006  500A               	movf	color_read_Red@tmp^0,w,c
  4995   002008  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  4996   00200A  6E0A               	movwf	color_read_Red@tmp^0,c
  4997   00200C  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  4998   00200E  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  4999   002010  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5000                           
  5001                           ;color.c: 40:  I2C_2_Master_Stop();
  5002   002012  EC01  F012         	call	_I2C_2_Master_Stop	;wreg free
  5003   002016                     
  5004                           ;color.c: 41:  return tmp;
  5005   002016  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5006   00201A  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5007   00201E  0012               	return		;funcret
  5008   002020                     __end_of_color_read_Red:
  5009                           	callstack 0
  5010                           
  5011 ;; *************** function _color_read_Green *****************
  5012 ;; Defined at:
  5013 ;;		line 44 in file "color.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;  tmp             2    9[COMRAM] unsigned int 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  2    4[COMRAM] unsigned int 
  5020 ;; Registers used:
  5021 ;;		wreg, status,2, status,0, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5027 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5028 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5029 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5030 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5031 ;;Total ram usage:        7 bytes
  5032 ;; Hardware stack levels used: 1
  5033 ;; Hardware stack levels required when called: 2
  5034 ;; This function calls:
  5035 ;;		_I2C_2_Master_Read
  5036 ;;		_I2C_2_Master_RepStart
  5037 ;;		_I2C_2_Master_Start
  5038 ;;		_I2C_2_Master_Stop
  5039 ;;		_I2C_2_Master_Write
  5040 ;; This function is called by:
  5041 ;;		_calibration_routine
  5042 ;;		_reading_values
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text29
  5047   002020                     __ptext29:
  5048                           	callstack 0
  5049   002020                     _color_read_Green:
  5050                           	callstack 26
  5051   002020                     
  5052                           ;color.c: 46:  unsigned int tmp;;color.c: 47:  I2C_2_Master_Start();
  5053   002020  EC06  F012         	call	_I2C_2_Master_Start	;wreg free
  5054                           
  5055                           ;color.c: 48:  I2C_2_Master_Write(0x52 | 0x00);
  5056   002024  0E52               	movlw	82
  5057   002026  ECFB  F011         	call	_I2C_2_Master_Write
  5058                           
  5059                           ;color.c: 49:  I2C_2_Master_Write(0xA0 | 0x18);
  5060   00202A  0EB8               	movlw	184
  5061   00202C  ECFB  F011         	call	_I2C_2_Master_Write
  5062                           
  5063                           ;color.c: 50:  I2C_2_Master_RepStart();
  5064   002030  EC0B  F012         	call	_I2C_2_Master_RepStart	;wreg free
  5065                           
  5066                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x01);
  5067   002034  0E53               	movlw	83
  5068   002036  ECFB  F011         	call	_I2C_2_Master_Write
  5069                           
  5070                           ;color.c: 52:  tmp=I2C_2_Master_Read(1);
  5071   00203A  0E01               	movlw	1
  5072   00203C  ECA9  F010         	call	_I2C_2_Master_Read
  5073   002040  6E07               	movwf	??_color_read_Green^0,c
  5074   002042  5007               	movf	??_color_read_Green^0,w,c
  5075   002044  6E0A               	movwf	color_read_Green@tmp^0,c
  5076   002046  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5077                           
  5078                           ;color.c: 53:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5079   002048  0E00               	movlw	0
  5080   00204A  ECA9  F010         	call	_I2C_2_Master_Read
  5081   00204E  6E07               	movwf	??_color_read_Green^0,c
  5082   002050  5007               	movf	??_color_read_Green^0,w,c
  5083   002052  6E09               	movwf	(??_color_read_Green+2)^0,c
  5084   002054  6A08               	clrf	(??_color_read_Green+1)^0,c
  5085   002056  500A               	movf	color_read_Green@tmp^0,w,c
  5086   002058  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5087   00205A  6E0A               	movwf	color_read_Green@tmp^0,c
  5088   00205C  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5089   00205E  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5090   002060  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5091                           
  5092                           ;color.c: 54:  I2C_2_Master_Stop();
  5093   002062  EC01  F012         	call	_I2C_2_Master_Stop	;wreg free
  5094   002066                     
  5095                           ;color.c: 55:  return tmp;
  5096   002066  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5097   00206A  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5098   00206E  0012               	return		;funcret
  5099   002070                     __end_of_color_read_Green:
  5100                           	callstack 0
  5101                           
  5102 ;; *************** function _color_read_Clear *****************
  5103 ;; Defined at:
  5104 ;;		line 73 in file "color.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;		None
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;  tmp             2    9[COMRAM] unsigned int 
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  2    4[COMRAM] unsigned int 
  5111 ;; Registers used:
  5112 ;;		wreg, status,2, status,0, cstack
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5118 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5119 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5120 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5121 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5122 ;;Total ram usage:        7 bytes
  5123 ;; Hardware stack levels used: 1
  5124 ;; Hardware stack levels required when called: 2
  5125 ;; This function calls:
  5126 ;;		_I2C_2_Master_Read
  5127 ;;		_I2C_2_Master_RepStart
  5128 ;;		_I2C_2_Master_Start
  5129 ;;		_I2C_2_Master_Stop
  5130 ;;		_I2C_2_Master_Write
  5131 ;; This function is called by:
  5132 ;;		_calibration_routine
  5133 ;;		_reading_values
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           	psect	text30
  5138   002070                     __ptext30:
  5139                           	callstack 0
  5140   002070                     _color_read_Clear:
  5141                           	callstack 26
  5142   002070                     
  5143                           ;color.c: 75:  unsigned int tmp;;color.c: 76:  I2C_2_Master_Start();
  5144   002070  EC06  F012         	call	_I2C_2_Master_Start	;wreg free
  5145                           
  5146                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x00);
  5147   002074  0E52               	movlw	82
  5148   002076  ECFB  F011         	call	_I2C_2_Master_Write
  5149                           
  5150                           ;color.c: 78:  I2C_2_Master_Write(0xA0 | 0x14);
  5151   00207A  0EB4               	movlw	180
  5152   00207C  ECFB  F011         	call	_I2C_2_Master_Write
  5153                           
  5154                           ;color.c: 79:  I2C_2_Master_RepStart();
  5155   002080  EC0B  F012         	call	_I2C_2_Master_RepStart	;wreg free
  5156                           
  5157                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x01);
  5158   002084  0E53               	movlw	83
  5159   002086  ECFB  F011         	call	_I2C_2_Master_Write
  5160                           
  5161                           ;color.c: 81:  tmp=I2C_2_Master_Read(1);
  5162   00208A  0E01               	movlw	1
  5163   00208C  ECA9  F010         	call	_I2C_2_Master_Read
  5164   002090  6E07               	movwf	??_color_read_Clear^0,c
  5165   002092  5007               	movf	??_color_read_Clear^0,w,c
  5166   002094  6E0A               	movwf	color_read_Clear@tmp^0,c
  5167   002096  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  5168                           
  5169                           ;color.c: 82:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5170   002098  0E00               	movlw	0
  5171   00209A  ECA9  F010         	call	_I2C_2_Master_Read
  5172   00209E  6E07               	movwf	??_color_read_Clear^0,c
  5173   0020A0  5007               	movf	??_color_read_Clear^0,w,c
  5174   0020A2  6E09               	movwf	(??_color_read_Clear+2)^0,c
  5175   0020A4  6A08               	clrf	(??_color_read_Clear+1)^0,c
  5176   0020A6  500A               	movf	color_read_Clear@tmp^0,w,c
  5177   0020A8  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  5178   0020AA  6E0A               	movwf	color_read_Clear@tmp^0,c
  5179   0020AC  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  5180   0020AE  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  5181   0020B0  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  5182                           
  5183                           ;color.c: 83:  I2C_2_Master_Stop();
  5184   0020B2  EC01  F012         	call	_I2C_2_Master_Stop	;wreg free
  5185   0020B6                     
  5186                           ;color.c: 84:  return tmp;
  5187   0020B6  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  5188   0020BA  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5189   0020BE  0012               	return		;funcret
  5190   0020C0                     __end_of_color_read_Clear:
  5191                           	callstack 0
  5192                           
  5193 ;; *************** function _color_read_Blue *****************
  5194 ;; Defined at:
  5195 ;;		line 58 in file "color.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;		None
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;  tmp             2    9[COMRAM] unsigned int 
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  2    4[COMRAM] unsigned int 
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0, cstack
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5209 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5211 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5212 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5213 ;;Total ram usage:        7 bytes
  5214 ;; Hardware stack levels used: 1
  5215 ;; Hardware stack levels required when called: 2
  5216 ;; This function calls:
  5217 ;;		_I2C_2_Master_Read
  5218 ;;		_I2C_2_Master_RepStart
  5219 ;;		_I2C_2_Master_Start
  5220 ;;		_I2C_2_Master_Stop
  5221 ;;		_I2C_2_Master_Write
  5222 ;; This function is called by:
  5223 ;;		_calibration_routine
  5224 ;;		_reading_values
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           	psect	text31
  5229   0020C0                     __ptext31:
  5230                           	callstack 0
  5231   0020C0                     _color_read_Blue:
  5232                           	callstack 26
  5233   0020C0                     
  5234                           ;color.c: 60:  unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
  5235   0020C0  EC06  F012         	call	_I2C_2_Master_Start	;wreg free
  5236                           
  5237                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  5238   0020C4  0E52               	movlw	82
  5239   0020C6  ECFB  F011         	call	_I2C_2_Master_Write
  5240                           
  5241                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x1A);
  5242   0020CA  0EBA               	movlw	186
  5243   0020CC  ECFB  F011         	call	_I2C_2_Master_Write
  5244                           
  5245                           ;color.c: 64:  I2C_2_Master_RepStart();
  5246   0020D0  EC0B  F012         	call	_I2C_2_Master_RepStart	;wreg free
  5247                           
  5248                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  5249   0020D4  0E53               	movlw	83
  5250   0020D6  ECFB  F011         	call	_I2C_2_Master_Write
  5251                           
  5252                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  5253   0020DA  0E01               	movlw	1
  5254   0020DC  ECA9  F010         	call	_I2C_2_Master_Read
  5255   0020E0  6E07               	movwf	??_color_read_Blue^0,c
  5256   0020E2  5007               	movf	??_color_read_Blue^0,w,c
  5257   0020E4  6E0A               	movwf	color_read_Blue@tmp^0,c
  5258   0020E6  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5259                           
  5260                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5261   0020E8  0E00               	movlw	0
  5262   0020EA  ECA9  F010         	call	_I2C_2_Master_Read
  5263   0020EE  6E07               	movwf	??_color_read_Blue^0,c
  5264   0020F0  5007               	movf	??_color_read_Blue^0,w,c
  5265   0020F2  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5266   0020F4  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5267   0020F6  500A               	movf	color_read_Blue@tmp^0,w,c
  5268   0020F8  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5269   0020FA  6E0A               	movwf	color_read_Blue@tmp^0,c
  5270   0020FC  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5271   0020FE  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5272   002100  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5273                           
  5274                           ;color.c: 68:  I2C_2_Master_Stop();
  5275   002102  EC01  F012         	call	_I2C_2_Master_Stop	;wreg free
  5276   002106                     
  5277                           ;color.c: 69:  return tmp;
  5278   002106  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5279   00210A  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5280   00210E  0012               	return		;funcret
  5281   002110                     __end_of_color_read_Blue:
  5282                           	callstack 0
  5283                           
  5284 ;; *************** function _I2C_2_Master_Write *****************
  5285 ;; Defined at:
  5286 ;;		line 45 in file "i2c.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;  data_byte       1    wreg     unsigned char 
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;  data_byte       1    1[COMRAM] unsigned char 
  5291 ;; Return value:  Size  Location     Type
  5292 ;;                  1    wreg      void 
  5293 ;; Registers used:
  5294 ;;		wreg, status,2, status,0, cstack
  5295 ;; Tracked objects:
  5296 ;;		On entry : 0/0
  5297 ;;		On exit  : 0/0
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5301 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5303 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5304 ;;Total ram usage:        1 bytes
  5305 ;; Hardware stack levels used: 1
  5306 ;; Hardware stack levels required when called: 1
  5307 ;; This function calls:
  5308 ;;		_I2C_2_Master_Idle
  5309 ;; This function is called by:
  5310 ;;		_color_writetoaddr
  5311 ;;		_color_read_Red
  5312 ;;		_color_read_Green
  5313 ;;		_color_read_Blue
  5314 ;;		_color_read_Clear
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           	psect	text32
  5319   0023F6                     __ptext32:
  5320                           	callstack 0
  5321   0023F6                     _I2C_2_Master_Write:
  5322                           	callstack 26
  5323                           
  5324                           ;incstack = 0
  5325                           ;I2C_2_Master_Write@data_byte stored from wreg
  5326   0023F6  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  5327   0023F8                     
  5328                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5329   0023F8  EC9C  F011         	call	_I2C_2_Master_Idle	;wreg free
  5330   0023FC                     
  5331                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5332   0023FC  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5333   002400  0012               	return		;funcret
  5334   002402                     __end_of_I2C_2_Master_Write:
  5335                           	callstack 0
  5336                           
  5337 ;; *************** function _I2C_2_Master_Stop *****************
  5338 ;; Defined at:
  5339 ;;		line 39 in file "i2c.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;		None
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;		None
  5344 ;; Return value:  Size  Location     Type
  5345 ;;                  1    wreg      void 
  5346 ;; Registers used:
  5347 ;;		wreg, status,2, status,0, cstack
  5348 ;; Tracked objects:
  5349 ;;		On entry : 0/0
  5350 ;;		On exit  : 0/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5357 ;;Total ram usage:        0 bytes
  5358 ;; Hardware stack levels used: 1
  5359 ;; Hardware stack levels required when called: 1
  5360 ;; This function calls:
  5361 ;;		_I2C_2_Master_Idle
  5362 ;; This function is called by:
  5363 ;;		_color_writetoaddr
  5364 ;;		_color_read_Red
  5365 ;;		_color_read_Green
  5366 ;;		_color_read_Blue
  5367 ;;		_color_read_Clear
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371                           	psect	text33
  5372   002402                     __ptext33:
  5373                           	callstack 0
  5374   002402                     _I2C_2_Master_Stop:
  5375                           	callstack 26
  5376   002402                     
  5377                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5378   002402  EC9C  F011         	call	_I2C_2_Master_Idle	;wreg free
  5379   002406                     
  5380                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5381   002406  010E               	movlb	14	; () banked
  5382   002408  85DA               	bsf	218,2,b	;volatile
  5383   00240A                     
  5384                           ; BSR set to: 14
  5385   00240A  0012               	return		;funcret
  5386   00240C                     __end_of_I2C_2_Master_Stop:
  5387                           	callstack 0
  5388                           
  5389 ;; *************** function _I2C_2_Master_Start *****************
  5390 ;; Defined at:
  5391 ;;		line 27 in file "i2c.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;		None
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;		None
  5396 ;; Return value:  Size  Location     Type
  5397 ;;                  1    wreg      void 
  5398 ;; Registers used:
  5399 ;;		wreg, status,2, status,0, cstack
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5409 ;;Total ram usage:        0 bytes
  5410 ;; Hardware stack levels used: 1
  5411 ;; Hardware stack levels required when called: 1
  5412 ;; This function calls:
  5413 ;;		_I2C_2_Master_Idle
  5414 ;; This function is called by:
  5415 ;;		_color_writetoaddr
  5416 ;;		_color_read_Red
  5417 ;;		_color_read_Green
  5418 ;;		_color_read_Blue
  5419 ;;		_color_read_Clear
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text34
  5424   00240C                     __ptext34:
  5425                           	callstack 0
  5426   00240C                     _I2C_2_Master_Start:
  5427                           	callstack 26
  5428   00240C                     
  5429                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5430   00240C  EC9C  F011         	call	_I2C_2_Master_Idle	;wreg free
  5431   002410                     
  5432                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5433   002410  010E               	movlb	14	; () banked
  5434   002412  81DA               	bsf	218,0,b	;volatile
  5435   002414                     
  5436                           ; BSR set to: 14
  5437   002414  0012               	return		;funcret
  5438   002416                     __end_of_I2C_2_Master_Start:
  5439                           	callstack 0
  5440                           
  5441 ;; *************** function _I2C_2_Master_RepStart *****************
  5442 ;; Defined at:
  5443 ;;		line 33 in file "i2c.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;		None
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;		None
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  1    wreg      void 
  5450 ;; Registers used:
  5451 ;;		wreg, status,2, status,0, cstack
  5452 ;; Tracked objects:
  5453 ;;		On entry : 0/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5461 ;;Total ram usage:        0 bytes
  5462 ;; Hardware stack levels used: 1
  5463 ;; Hardware stack levels required when called: 1
  5464 ;; This function calls:
  5465 ;;		_I2C_2_Master_Idle
  5466 ;; This function is called by:
  5467 ;;		_color_read_Red
  5468 ;;		_color_read_Green
  5469 ;;		_color_read_Blue
  5470 ;;		_color_read_Clear
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           	psect	text35
  5475   002416                     __ptext35:
  5476                           	callstack 0
  5477   002416                     _I2C_2_Master_RepStart:
  5478                           	callstack 26
  5479   002416                     
  5480                           ;i2c.c: 35:   I2C_2_Master_Idle();
  5481   002416  EC9C  F011         	call	_I2C_2_Master_Idle	;wreg free
  5482   00241A                     
  5483                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5484   00241A  010E               	movlb	14	; () banked
  5485   00241C  83DA               	bsf	218,1,b	;volatile
  5486   00241E                     
  5487                           ; BSR set to: 14
  5488   00241E  0012               	return		;funcret
  5489   002420                     __end_of_I2C_2_Master_RepStart:
  5490                           	callstack 0
  5491                           
  5492 ;; *************** function _I2C_2_Master_Read *****************
  5493 ;; Defined at:
  5494 ;;		line 51 in file "i2c.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  ack             1    wreg     unsigned char 
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;  ack             1    2[COMRAM] unsigned char 
  5499 ;;  tmp             1    3[COMRAM] unsigned char 
  5500 ;; Return value:  Size  Location     Type
  5501 ;;                  1    wreg      unsigned char 
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0, cstack
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5510 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5512 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5513 ;;Total ram usage:        3 bytes
  5514 ;; Hardware stack levels used: 1
  5515 ;; Hardware stack levels required when called: 1
  5516 ;; This function calls:
  5517 ;;		_I2C_2_Master_Idle
  5518 ;; This function is called by:
  5519 ;;		_color_read_Red
  5520 ;;		_color_read_Green
  5521 ;;		_color_read_Blue
  5522 ;;		_color_read_Clear
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           	psect	text36
  5527   002152                     __ptext36:
  5528                           	callstack 0
  5529   002152                     _I2C_2_Master_Read:
  5530                           	callstack 26
  5531                           
  5532                           ; BSR set to: 14
  5533                           ;incstack = 0
  5534                           ;I2C_2_Master_Read@ack stored from wreg
  5535   002152  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  5536   002154                     
  5537                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  5538   002154  EC9C  F011         	call	_I2C_2_Master_Idle	;wreg free
  5539   002158                     
  5540                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5541   002158  010E               	movlb	14	; () banked
  5542   00215A  87DA               	bsf	218,3,b	;volatile
  5543                           
  5544                           ;i2c.c: 56:   I2C_2_Master_Idle();
  5545   00215C  EC9C  F011         	call	_I2C_2_Master_Idle	;wreg free
  5546   002160                     
  5547                           ;i2c.c: 57:   tmp = SSP2BUF;
  5548   002160  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5549                           
  5550                           ;i2c.c: 58:   I2C_2_Master_Idle();
  5551   002164  EC9C  F011         	call	_I2C_2_Master_Idle	;wreg free
  5552   002168                     
  5553                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5554   002168  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  5555   00216A  B4D8               	btfsc	status,2,c
  5556   00216C  EFBA  F010         	goto	u2231
  5557   002170  EFBE  F010         	goto	u2230
  5558   002174                     u2231:
  5559   002174  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5560   002176  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  5561   002178  EFBF  F010         	goto	u2248
  5562   00217C                     u2230:
  5563   00217C  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5564   00217E                     u2248:
  5565   00217E  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  5566   002180  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  5567   002182  010E               	movlb	14	; () banked
  5568   002184  51DA               	movf	218,w,b	;volatile
  5569   002186  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5570   002188  0BDF               	andlw	-33
  5571   00218A  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5572   00218C  6FDA               	movwf	218,b	;volatile
  5573   00218E                     
  5574                           ; BSR set to: 14
  5575                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5576   00218E  89DA               	bsf	218,4,b	;volatile
  5577   002190                     
  5578                           ; BSR set to: 14
  5579                           ;i2c.c: 61:   return tmp;
  5580   002190  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  5581   002192                     
  5582                           ; BSR set to: 14
  5583   002192  0012               	return		;funcret
  5584   002194                     __end_of_I2C_2_Master_Read:
  5585                           	callstack 0
  5586                           
  5587 ;; *************** function _I2C_2_Master_Idle *****************
  5588 ;; Defined at:
  5589 ;;		line 22 in file "i2c.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;		None
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;		None
  5594 ;; Return value:  Size  Location     Type
  5595 ;;                  1    wreg      void 
  5596 ;; Registers used:
  5597 ;;		wreg, status,2, status,0
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5605 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5606 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5607 ;;Total ram usage:        1 bytes
  5608 ;; Hardware stack levels used: 1
  5609 ;; This function calls:
  5610 ;;		Nothing
  5611 ;; This function is called by:
  5612 ;;		_I2C_2_Master_Start
  5613 ;;		_I2C_2_Master_RepStart
  5614 ;;		_I2C_2_Master_Stop
  5615 ;;		_I2C_2_Master_Write
  5616 ;;		_I2C_2_Master_Read
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           	psect	text37
  5621   002338                     __ptext37:
  5622                           	callstack 0
  5623   002338                     _I2C_2_Master_Idle:
  5624                           	callstack 26
  5625   002338                     l137:
  5626   002338  010E               	movlb	14	; () banked
  5627   00233A  B5D8               	btfsc	216,2,b	;volatile
  5628   00233C  EFA2  F011         	goto	u2201
  5629   002340  EFA4  F011         	goto	u2200
  5630   002344                     u2201:
  5631   002344  EF9C  F011         	goto	l137
  5632   002348                     u2200:
  5633   002348                     
  5634                           ; BSR set to: 14
  5635   002348  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5636   00234C  0E1F               	movlw	31
  5637   00234E  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  5638   002350  A4D8               	btfss	status,2,c
  5639   002352  EFAD  F011         	goto	u2211
  5640   002356  EFAF  F011         	goto	u2210
  5641   00235A                     u2211:
  5642   00235A  EF9C  F011         	goto	l137
  5643   00235E                     u2210:
  5644   00235E                     
  5645                           ; BSR set to: 14
  5646   00235E  0012               	return		;funcret
  5647   002360                     __end_of_I2C_2_Master_Idle:
  5648                           	callstack 0
  5649                           
  5650 ;; *************** function _ADC_init *****************
  5651 ;; Defined at:
  5652 ;;		line 9 in file "ADC.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;		None
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;		None
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  1    wreg      void 
  5659 ;; Registers used:
  5660 ;;		wreg, status,2
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5670 ;;Total ram usage:        0 bytes
  5671 ;; Hardware stack levels used: 1
  5672 ;; This function calls:
  5673 ;;		Nothing
  5674 ;; This function is called by:
  5675 ;;		_main
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text38
  5680   0023C4                     __ptext38:
  5681                           	callstack 0
  5682   0023C4                     _ADC_init:
  5683                           	callstack 30
  5684   0023C4                     
  5685                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  5686   0023C4  8C86               	bsf	134,6,c	;volatile
  5687                           
  5688                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  5689   0023C6  010E               	movlb	14	; () banked
  5690   0023C8  8DB4               	bsf	180,6,b	;volatile
  5691                           
  5692                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  5693   0023CA  010F               	movlb	15	; () banked
  5694   0023CC  9958               	bcf	88,4,b	;volatile
  5695   0023CE                     
  5696                           ; BSR set to: 15
  5697                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  5698   0023CE  0EFC               	movlw	-4
  5699   0023D0  1758               	andwf	88,f,b	;volatile
  5700                           
  5701                           ;ADC.c: 17:     ADPCH=0b101110;
  5702   0023D2  0E2E               	movlw	46
  5703   0023D4  6F5F               	movwf	95,b	;volatile
  5704   0023D6                     
  5705                           ; BSR set to: 15
  5706                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  5707   0023D6  9460               	bcf	96,2,c	;volatile
  5708   0023D8                     
  5709                           ; BSR set to: 15
  5710                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  5711   0023D8  8860               	bsf	96,4,c	;volatile
  5712   0023DA                     
  5713                           ; BSR set to: 15
  5714                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  5715   0023DA  8E60               	bsf	96,7,c	;volatile
  5716   0023DC                     
  5717                           ; BSR set to: 15
  5718   0023DC  0012               	return		;funcret
  5719   0023DE                     __end_of_ADC_init:
  5720                           	callstack 0
  5721                           
  5722                           	psect	rparam
  5723   000000                     
  5724                           	psect	config
  5725                           
  5726                           ;Config register CONFIG1L @ 0x300000
  5727                           ;	External Oscillator mode Selection bits
  5728                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5729                           ;	Power-up default value for COSC bits
  5730                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5731   300000                     	org	3145728
  5732   300000  AA                 	db	170
  5733                           
  5734                           ;Config register CONFIG1H @ 0x300001
  5735                           ;	unspecified, using default values
  5736                           ;	Clock Out Enable bit
  5737                           ;	CLKOUTEN = 0x1, unprogrammed default
  5738                           ;	Clock Switch Enable bit
  5739                           ;	CSWEN = 0x1, unprogrammed default
  5740                           ;	Fail-Safe Clock Monitor Enable bit
  5741                           ;	FCMEN = 0x1, unprogrammed default
  5742   300001                     	org	3145729
  5743   300001  FF                 	db	255
  5744                           
  5745                           ;Config register CONFIG3L @ 0x300004
  5746                           ;	WDT Period Select bits
  5747                           ;	WDTCPS = 0x1F, unprogrammed default
  5748                           ;	WDT operating mode
  5749                           ;	WDTE = OFF, WDT Disabled
  5750   300004                     	org	3145732
  5751   300004  9F                 	db	159
  5752                           
  5753                           ;Config register CONFIG3H @ 0x300005
  5754                           ;	unspecified, using default values
  5755                           ;	WDT Window Select bits
  5756                           ;	WDTCWS = 0x7, unprogrammed default
  5757                           ;	WDT input clock selector
  5758                           ;	WDTCCS = 0x7, unprogrammed default
  5759   300005                     	org	3145733
  5760   300005  FF                 	db	255
  5761                           tosu	equ	0xFFF
  5762                           tosh	equ	0xFFE
  5763                           tosl	equ	0xFFD
  5764                           stkptr	equ	0xFFC
  5765                           pclatu	equ	0xFFB
  5766                           pclath	equ	0xFFA
  5767                           pcl	equ	0xFF9
  5768                           tblptru	equ	0xFF8
  5769                           tblptrh	equ	0xFF7
  5770                           tblptrl	equ	0xFF6
  5771                           tablat	equ	0xFF5
  5772                           prodh	equ	0xFF4
  5773                           prodl	equ	0xFF3
  5774                           indf0	equ	0xFEF
  5775                           postinc0	equ	0xFEE
  5776                           postdec0	equ	0xFED
  5777                           preinc0	equ	0xFEC
  5778                           plusw0	equ	0xFEB
  5779                           fsr0h	equ	0xFEA
  5780                           fsr0l	equ	0xFE9
  5781                           wreg	equ	0xFE8
  5782                           indf1	equ	0xFE7
  5783                           postinc1	equ	0xFE6
  5784                           postdec1	equ	0xFE5
  5785                           preinc1	equ	0xFE4
  5786                           plusw1	equ	0xFE3
  5787                           fsr1h	equ	0xFE2
  5788                           fsr1l	equ	0xFE1
  5789                           bsr	equ	0xFE0
  5790                           indf2	equ	0xFDF
  5791                           postinc2	equ	0xFDE
  5792                           postdec2	equ	0xFDD
  5793                           preinc2	equ	0xFDC
  5794                           plusw2	equ	0xFDB
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8

Data Sizes:
    Strings     218
    Constant    0
    Data        1
    BSS         176
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     91      94
    BANK0           160    154     160
    BANK1           256      4     172
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    ADC2String@buf	PTR unsigned char  size(1) Largest target is 50
		 -> send2USART@buf(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    calibration_routine@cCal	PTR struct colors size(2) Largest target is 8
		 -> colorCalibration(BANK1[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(2) Largest target is 8
		 -> colorCurrent(BANK1[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(2) Largest target is 8
		 -> colorCalibration(BANK1[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_values@cCurr	PTR struct colors size(2) Largest target is 8
		 -> colorCurrent(BANK1[8]), 

    S2442$buffer	PTR unsigned char  size(2) Largest target is 0

    S2442$source	PTR const unsigned char  size(2) Largest target is 0

    S561DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S561DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@buf(BANK0[50]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 
		 -> test@led_state(BANK0[50]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 23
		 -> STR_1(CODE[17]), STR_11(CODE[19]), STR_13(CODE[19]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[22]), STR_7(CODE[23]), STR_9(CODE[19]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@buf(BANK0[50]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 
		 -> test@led_state(BANK0[50]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 23
		 -> STR_1(CODE[17]), STR_11(CODE[19]), STR_13(CODE[19]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[22]), STR_7(CODE[23]), STR_9(CODE[19]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 23
		 -> STR_1(CODE[17]), STR_11(CODE[19]), STR_13(CODE[19]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[22]), STR_7(CODE[23]), STR_9(CODE[19]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 23
		 -> STR_1(CODE[17]), STR_11(CODE[19]), STR_13(CODE[19]), STR_15(CODE[21]), 
		 -> STR_16(CODE[12]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[22]), STR_7(CODE[23]), STR_9(CODE[19]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_calibration_routine
    _test->_send2USART
    _send2USART->_ADC2String
    _ADC2String->_sprintf
    _reading_values->_color_read_Blue
    _reading_values->_color_read_Clear
    _reading_values->_color_read_Green
    _reading_values->_color_read_Red
    _convert_rgb2hue->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_test
    _test->_send2USART

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   70951
                                              0 BANK1      4     4      0
                           _ADC_init
                _calibration_routine
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                               _test
 ---------------------------------------------------------------------------------
 (1) _test                                                57    55      2   55417
                                             80 COMRAM     3     1      2
                                            100 BANK0     54    54      0
                    _convert_rgb2hue
                     _reading_values
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _send2USART                                         104   100      4   32591
                                             76 COMRAM     4     0      4
                                              0 BANK0    100   100      0
                         _ADC2String
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _ADC2String                                           9     6      3   18464
                                             67 COMRAM     9     6      3
                            ___lwdiv
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _reading_values                                       2     0      2     870
                                             11 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                     24    20      4    7711
                                             13 COMRAM    24    20      4
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4    2161
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 24    22      2   14923
                                             67 COMRAM    24    22      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   12819
                                             48 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3   10527
                                             44 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3   10039
                                             33 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    3372
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2932
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             22 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             14 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              8 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     906
                                              1 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     164
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      31
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      65
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _test
     _convert_rgb2hue
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _reading_values
       _color_read_Blue
       _color_read_Clear
       _color_read_Green
       _color_read_Red
     _send2USART
       _ADC2String
         ___lwdiv
         ___wmul
         _sprintf
       _sendStringSerial4
       _sprintf
     _sendStringSerial4
     _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      4      AC       7       67.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9A      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5B      5E       1       98.9%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllhll     37      0       0      45        0.0%
BITBIGSFRlllhhl     31      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllllh     20      0       0      48        0.0%
BITBIGSFRllllll     1E      0       0      50        0.0%
BITBIGSFRhhll       17      0       0      36        0.0%
BITBIGSFRlllhhh     14      0       0      40        0.0%
BITBIGSFRllllll     11      0       0      51        0.0%
BITBIGSFRllllll      F      0       0      58        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRlllllh      C      0       0      49        0.0%
BITBIGSFRllllll      9      0       0      57        0.0%
BITBIGSFRlllhll      8      0       0      46        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRlllhhh      6      0       0      42        0.0%
BITBIGSFRllllll      5      0       0      54        0.0%
BITBIGSFRhlhh        5      0       0      37        0.0%
BITBIGSFRlllhhh      3      0       0      41        0.0%
BITBIGSFRllllll      3      0       0      53        0.0%
BITBIGSFRlllhlh      2      0       0      44        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      52        0.0%
BITBIGSFRhllh        1      0       0      38        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRllllh       1      0       0      47        0.0%
BITBIGSFRllh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1AA      61        0.0%
DATA                 0      0     1AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Mar 11 18:45:06 2024

               _color_read_Red 1FD0                _color_read_Blue 20C0                             l53 2272  
                           l62 206E                             l56 23A4                             l80 1382  
                           l65 210E                             l59 201E                             l68 20BE  
                           l92 13AA                             l94 13B8                             l95 1408  
                           l97 1416                             l89 1994                             l98 146A  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003             convert_rgb2hue@hue 001E  
             _color_read_Clear 2070               _color_read_Green 2020                            l100 1478  
                          l101 14CC                            l103 14DA                            l104 1536  
                          l107 1FCE                            l140 235E                            l134 2336  
                          l143 2414                            l152 2400                            l137 2338  
                          l401 23C2                            l146 241E                            l410 23E0  
                          l155 2192                            l149 240A                            l413 23F4  
                          l309 1EFC                            l248 23DC                            l419 230C  
                          l461 1DD6                            l711 1BDC                            l464 223E  
                          l467 2384                            l698 1B2C                            l965 1F70  
                          l958 1F68                            _abs 22A8                            _pad 1DD8  
          convert_rgb2hue@cMax 000E                   ___awmod@sign 0006                            wreg 0FE8  
                         ?_abs 0007                           l1222 22DA                           l1215 2150  
                         l1209 16C0                           l1145 22A6                           l1234 1D34  
                         l1242 21D2                           l1170 1E6C                           l1219 22C2  
                         l3101 1AAA                           l1245 2420                           l1165 1E0E  
                         l1173 1720                           l1190 1C82                           l3111 1AE0  
                         l3103 1ABC                           l1168 1E4C                           l3113 1AF6  
                         l3105 1AC4                           l3121 1B0C                           l3201 171C  
                         l1186 1838                           l1194 1C8A                           l3123 1B1C  
                         l3115 1AFE                           l3107 1ACC                           l3131 1B32  
                         l3211 176E                           l3203 1728                           l3125 1B24  
                         l3117 1B00                           l3109 1ADA                           l3141 1B62  
                         l3133 1B40                           l3061 1CAC                           l3221 17CC  
                         l3213 1774                           l3205 1732                           l3311 2348  
                         l3119 1B06                           l3151 1BA8                           l3143 1B74  
                         l3135 1B48                           l3063 1CB6                           l3071 2194  
                         l3231 181C                           l3223 17E6                           l3207 1738  
                         l3215 1790                           l3161 1BD4                           l3153 1BB0  
                         l3145 1B7C                           l3137 1B4C                           l3129 1B2E  
                         l3065 1CD2                           l3057 1C8C                           l3073 21A0  
                         l3217 17AA                           l3225 17F6                           l3209 176A  
                         l3081 237C                           l3241 1C14                           l3313 2110  
                         l3323 240C                           l3331 2402                           l3403 20C0  
                         l3411 20B6                           l3091 1A84                           l3155 1BB6  
                         l3147 1B84                           l3139 1B5A                           l3067 1D04  
                         l3059 1C9C                           l3075 21AE                           l3171 1E06  
                         l3227 1806                           l3219 17BC                           l3243 1C30  
                         l3235 1BDE                           l3251 155E                           l3315 2118  
                         l3309 2338                           l3341 2158                           l3325 2410  
                         l3333 2406                           l3405 2106                           l3421 22EE  
                         l3093 1A88                           l3085 1A6A                           l3149 1B92  
                         l3157 1BBC                           l3181 22A8                           l3077 21B2  
                         l3173 1E1A                           l3165 1DD8                           l3229 180C  
                         l3245 1C50                           l3237 1BE6                           l3261 1586  
                         l3253 1566                           l3317 2128                           l3501 1F72  
                         l3343 2160                           l3335 2416                           l3327 23F8  
                         l3423 22F6                           l3415 22DC                           l3095 1A96  
                         l3087 1A6E                           l3159 1BCC                           l3183 22B6  
                         l3175 1E2A                           l3167 1DE8                           l3191 16E2  
                         l3079 2360                           l3239 1C0C                           l3247 1C58  
                         l3271 15E0                           l3263 1592                           l3255 1574  
                         l3319 2148                           l3503 220A                           l3345 2168  
                         l3337 241A                           l3329 23FC                           l3409 2070  
                         l3417 22E0                           l3097 1A9E                           l3089 1A7C  
                         l3177 1E2E                           l3169 1DF8                           l3193 16F2  
                         l3185 16C2                           l3281 1638                           l3273 15F4  
                         l3257 157A                           l3249 1538                           l3361 229C  
                         l3353 2274                           l3441 1D36                           l3505 222E  
                         l3601 1978                           l3347 218E                           l3339 2154  
                         l3419 22EC                           l3099 1AA2                           l3179 1E5C  
                         l3195 16F8                           l3187 16C6                           l3291 168E  
                         l3283 1658                           l3275 1604                           l3267 159A  
                         l3259 1582                           l3355 227C                           l3611 13BA  
                         l3451 2318                           l3371 1F06                           l3443 1D52  
                         l3507 2236                           l3603 197E                           l3349 2190  
                         l3365 23E0                           l3197 1708                           l3189 16DA  
                         l3285 1670                           l3277 160E                           l3269 15D0  
                         l3357 2284                           l3621 1418                           l3613 13D2  
                         l3605 1384                           l3453 231E                           l3461 2388  
                         l3381 1F3C                           l3373 1F18                           l3445 1DA2  
                         l3391 1FD0                           l3367 23F0                           l3199 1714  
                         l3287 167A                           l3279 1618                           l3295 169A  
                         l3359 228C                           l3631 147A                           l3623 1430  
                         l3615 13E6                           l3607 138A                           l3455 2320  
                         l3383 1F52                           l3375 1F20                           l3471 1214  
                         l3463 0EDC                           l3447 1DBE                           l3393 2016  
                         l3641 14E0                           l3633 1492                           l3625 1448  
                         l3617 13E8                           l3609 13A2                           l3457 2322  
                         l3449 230E                           l3561 2268                           l3553 2240  
                         l3385 1F5A                           l3377 1F28                           l3369 1EFE  
                         l3481 1292                           l3473 122A                           l3465 11C4  
                         l3801 1A0C                           l3651 1516                           l3643 14F8  
                         l3635 14AA                           l3627 144A                           l3619 1400  
                         l3459 2324                           l3555 2244                           l3387 1F5C  
                         l3379 1F36                           l3491 1310                           l3483 12A8  
                         l3475 124A                           l3467 11E8                           l3571 1856  
                         l3563 183A                           l3811 1A30                           l3803 1A26  
                         l3661 23D8                           l3397 2020                           l3653 152E  
                         l3645 1510                           l3637 14AC                           l3629 1462  
                         l3557 224E                           l3389 1F62                           l3493 1326  
                         l3485 12C8                           l3469 11FE                           l3477 1266  
                         l3581 18C2                           l3573 185C                           l3813 1A3C  
                         l3805 1A28                           ?_pad 000F                           l3663 23DA  
                         l3655 23C4                           l3399 2066                           l3911 15C2  
                         l3647 1512                           l3639 14C4                           l3559 225E  
                         l3671 23BC                           l3495 1352                           l3479 127C  
                         l3487 12E4                           l3591 1920                           l3583 18D8  
                         l3575 1882                           l3815 1A56                           l3807 1A2A  
                         l3751 1996                           l3657 23CE                           l3649 1514  
                         l3681 1EA4                           l3673 23BE                           l3665 23A6  
                         l3497 137A                           l3489 12FA                           l3593 1934  
                         l3585 18DE                           l3577 1896                           l3569 1844  
                         l3809 1A2C                           l3761 19AE                           l3753 199A  
                         l3659 23D6                           l3691 1EE2                           l3683 1EA8  
                         l3675 23C0                           l3667 23B0                           l3595 193C  
                         l3587 1904                           l3579 189C                           l3771 19CC  
                         l3763 19B4                           l3755 199E                           l3693 1EE4  
                         l3685 1ECC                           l3677 1E6E                           l3669 23B2  
                         l3597 1948                           l3589 191A                           l3781 19F8  
                         l3773 19D4                           l3765 19B8                           l3757 19A2  
                         l3695 1EEE                           l3687 1ED6                           l3679 1E7E  
                         l3599 1964                           l3791 1A02                           l3783 19FA  
                         l3775 19D8                           l3767 19BC                           l3759 19A2  
                         l3697 1EF0                           l3689 1ED8                           l3793 1A04  
                         l3785 19FC                           l3777 19DC                           l3769 19C4  
                         l3699 1EFA                           l3795 1A06                           l3787 19FE  
                         l3779 19E0                           l3797 1A08                           l3789 1A00  
                         l3799 1A0A                           STR_1 0E7E                           STR_2 0E58  
                         STR_3 0EA0                           STR_4 0E8F                           STR_5 0E18  
                         STR_6 0ED9                           STR_7 0E01                           STR_8 0EC8  
                         STR_9 0E6B                           u2000 1E4C                           u2001 1E48  
                         u2010 1E5C                           u2011 1E58                           u2020 22B6  
                         u2100 17E6                           u2021 22B2                           u2101 17E2  
                         u2110 17F6                           u2030 16D6                           u2111 17F2  
                         u2031 16D0                           u2200 2348                           u2120 1806  
                         u2040 16D8                           u2201 2344                           u2121 1802  
                         u2210 235E                           u2050 16F2                           u2130 1C0C  
                         u2211 235A                           u2051 16EE                           u2131 1C08  
                         u2060 1708                           u2140 1C82                           u2220 2148  
                         u2061 1704                           u2141 1C7E                           u2221 2144  
                         u2230 217C                           u2070 17AA                           u2150 155E  
                         u2231 2174                           u2071 17A6                           u2151 155A  
                         u2080 17BC                           u2160 15E0                           u2400 1326  
                         u2320 11FE                   _BAUD4CONbits 0EE9                           u2081 17B8  
                         u2161 15DC                           u2401 1322                           u2321 11FA  
                         u2250 23F0                           u2090 17CC                           u2170 1604  
                         u2330 1214                           u2251 23EC                           u2091 17C8  
                         u2171 1600                           u2331 1210                           u2180 1638  
                         u2260 1F18                           u2340 122A                           u2500 18D8  
                         u2181 1634                           u2261 1F14                           u2341 1226  
                         u2501 18D4                           u2190 1658                           u2270 1F36  
                         u2350 127C                           u2510 18F8                           u2191 1654  
                         u2271 1F32                           u2351 1278                           u2511 18F0  
                         u2248 217E                           u2280 1F52                           u2360 1292  
                         u2520 191A                           u2281 1F4E                           u2361 128E  
                         u2521 1916                           u2290 230C                           u1810 1C9C  
                         u2370 12A8                           u2530 1994                           _T2PR 0FBC  
                         u2291 2308                           u1811 1C98                           u2371 12A4  
                         u2531 1990                           u1900 1AF6                           u1820 1CAC  
                         u2540 13B8                           u2380 12FA                           u2460 1856  
                         u1901 1AF2                           u1821 1CA8                           u2541 13B4  
                         u2381 12F6                           u2461 1852                           u1910 1B1C  
                         u1830 1CD2                           u2550 1416                           u2390 1310  
                         u2518 18FA                           u2470 1876                           u1911 1B18  
                         u1831 1CCE                           u2551 1412                           u2391 130C  
                         u2471 186E                           u1920 1B40                           u1840 1D04  
                         u2560 1478                           u2480 1896                           u1921 1B3C  
                         u1841 1D00                           u2561 1474                           u2481 1892  
                         u1930 1B5A                           u1850 21D2                           u2570 14DA  
                         u2490 18B6                           u2707 22F0                           u1931 1B56  
                         u1851 21CE                           u2571 14D6                           u2491 18AE  
                         u2627 1A18                           u1860 1A7C                           u1940 1B74  
                         u1861 1A78                           u1941 1B70                           u2637 1A48  
                         u1870 1A96                           u1950 1B92                           u2478 1878  
                         u1871 1A92                           u1951 1B8E                           u2647 1DC8  
                         u1880 1ABC                           u1960 1BA8                           u1881 1AB8  
                         u1961 1BA4                           u2657 2254                           u1890 1ADA  
                         u1970 1BCC                           u2498 18B8                           u1891 1AD6  
                         u1971 1BC8                           u2667 13C4                           u1980 1DE8  
                         u1981 1DE4                           u2677 1422                           u1990 1E06  
                         u1991 1E02                           u2687 1484                           u2697 14EA  
                         abs@a 0007                           _dbuf 0166                           _main 1996  
                         _dtoa 16C2           convert_rgb2hue@cCurr 0010                           _prec 0164  
                         _test 183A                           pad@i 0015                           pad@p 0012  
                         fsr1h 0FE2                           fsr2h 0FDA                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           prodh 0FF4  
                         prodl 0FF3                           start 0000               __end_of_ADC_init 23DE  
       __end_of_color_read_Red 2020                   ___param_bank 0000                          ??_abs 0009  
                        ??_pad 0014                          ?_main 0001                          ?_dtoa 0017  
                        _ADPCH 0F5F                __end_of___awdiv 1B2E                          STR_10 0ED1  
                        STR_11 0E6B                          STR_12 0EBD                          STR_13 0E6B  
                        STR_14 0E43                          STR_15 0E2E                          STR_16 0EB1  
              __end_of___awmod 1BDE                          ?_test 0051                ___awdiv@divisor 0003  
              __end_of___lwdiv 1F72                ___awdiv@counter 0005              ??_convert_rgb2hue 0012  
                 vfpfcnvrt@fmt 0023        __end_of_sendCharSerial4 23F6     __end_of_I2C_2_Master_Start 2416  
   __end_of_I2C_2_Master_Write 2402                          _flags 00FC            read_prec_or_width@c 0009  
          read_prec_or_width@n 000A                          _fputc 1C8C                          _fputs 2194  
                        pad@fp 000F                          _width 00FA                          _putch 2420  
                        dtoa@d 0018                          dtoa@i 0020                          dtoa@p 001C  
                        dtoa@s 001F                          dtoa@w 001D                          tablat 0FF5  
                        status 0FD8                __end_of_sprintf 22A8        __end_of_color_read_Blue 2110  
        _I2C_2_Master_RepStart 2416                ?_color_read_Red 0005                __initialization 21D4  
                 __end_of_main 1A6A                   __end_of_dtoa 183A                   __end_of_test 1996  
                 ??_ADC2String 0047               ??_reading_values 000E                         ??_main 01A8  
                       ??_dtoa 001A                         ??_test 0053                  __activetblptr 0003  
   __end_of_read_prec_or_width 1C8C                         ?_fputc 0001                         ?_fputs 0009  
                       _ADRESH 0F64                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21                  ADC2String@buf 0044  
             ___awdiv@dividend 0001                         ?_putch 0001                         _RC0PPS 0E62  
                       _RC4REG 0EE3                         _RE2PPS 0E74                         _RD5PPS 0E6F  
                       _RC7PPS 0E69            ADC2String@frac_part 0049                         _RE4PPS 0E76  
                       _RD6PPS 0E70                         _RG6PPS 0E88                  vfpfcnvrt@done 002B  
     __end_of_color_click_init 2274                         _RX4PPS 0E15             __end_of_ADC2String 1DD8  
                       _TX4REG 0EE4                   _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0030  
                       ___wmul 2360                      ??___awdiv 0005                      ??___awmod 0005  
                    ??___lwdiv 000B           read_prec_or_width@ap 0008                         clear_0 21EC  
             ___awdiv@quotient 0007                ___awmod@divisor 0003                         _motorL 018F  
                       _motorR 0186                         isa$std 0001                ___awmod@counter 0005  
           send2USART@hue_char 0092                         pad@buf 0010                         dtoa@fp 0017  
                       fputc@c 0001                         fputs@c 000C                         fputs@i 000D  
                       fputs@s 0009                   __mediumconst 0000        calibration_routine@cCal 0044  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
                    ?_ADC_init 0001               ?_sendCharSerial4 0001                         putch@c 0001  
             __end_of_vfprintf 2152              ??_initDCmotorsPWM 0003                      ??_sprintf 0037  
                   __accesstop 0060        __end_of__initialization 2204       __end_of_color_read_Clear 20C0  
     __end_of_color_read_Green 2070         ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001  
             ?_color_read_Blue 0005                 __pcstackCOMRAM 0001                   __pidataBANK0 2422  
                __end_of_fputc 1D36                  __end_of_fputs 21D4                  __end_of_putch 2422  
                   ??_ADC_init 0001                        ??_fputc 0004                        ??_fputs 000C  
                      ??_putch 0001                     __pbssBANK0 00FA                     __pbssBANK1 0100  
            _color_writetoaddr 2386                   _T2CLKCONbits 0FBF                _convert_rgb2hue 0EDC  
           ?_color_writetoaddr 0003                        ?___wmul 0001            ??_color_writetoaddr 0004  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5              main@battery_level 01AA  
                      _SSP2ADD 0ED6                        _SSP2BUF 0ED5         color_writetoaddr@value 0003  
             ??_color_read_Red 0007        send2USART@battery_level 004D      __end_of_color_writetoaddr 23A6  
                    _ADREFbits 0F58             _I2C_2_Master_Start 240C                     _initUSART4 23A6  
           _I2C_2_Master_Write 23F6                        __Hparam 0000                        __Lparam 0000  
            color_read_Red@tmp 000A        sendStringSerial4@string 0002                        ___awdiv 1A6A  
                      ___awmod 1B2E            ?_I2C_2_Master_Start 0001                        ___lwdiv 1EFE  
          ?_I2C_2_Master_Write 0001                      ?_vfprintf 002D                   __psmallconst 0E00  
                      __pcinit 21D4                        __ramtop 0E00                     _send2USART 220A  
                      __ptext0 1996                        __ptext1 183A                        __ptext2 220A  
                      __ptext3 1D36                        __ptext4 1F72                        __ptext5 0EDC  
                      __ptext6 1EFE                        __ptext7 23A6                        __ptext8 1E6E  
                      __ptext9 2240                      _T2CONbits 0FBD          read_prec_or_width@fmt 0007  
             ___awmod@dividend 0001                      _T2HLTbits 0FBE                  _RxBufWriteCnt 005E  
                      _sprintf 2274           ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002  
         end_of_initialization 2204                        fputc@fp 0003        __end_of_convert_rgb2hue 1384  
                      fputs@fp 000B              ?_color_click_init 0001             _read_prec_or_width 1BDE  
           ??_color_click_init 0005               _colorCalibration 01A0                        test@hue 00F6  
            __end_of_vfpfcnvrt 16C2                        postdec2 0FDD            ?_read_prec_or_width 0007  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0027                     ??_vfprintf 0030                   _colorCurrent 0198  
              _initDCmotorsPWM 1E6E                      _PORTFbits 0F8E                      _TRISAbits 0F81  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
             convert_rgb2hue@b 0020           ??_read_prec_or_width 0009               convert_rgb2hue@g 0024  
             convert_rgb2hue@r 0022       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
                  _CCP1CONbits 0FAB            _calibration_routine 1384              ?_color_read_Clear 0005  
                 _EUSART4RXbuf 0150                   _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0005                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001             ??_color_read_Clear 0007  
           ??_color_read_Green 0007                    vfpfcnvrt@ap 0024                    vfpfcnvrt@cp 002C  
                  vfpfcnvrt@fp 0022                 __end_of___wmul 2386                    ?_send2USART 004D  
         ?_calibration_routine 0044            color_read_Clear@tmp 000A            start_initialization 21D4  
 calibration_routine@cal_state 0048                    __end_of_abs 22DC                    __end_of_pad 1E6E  
                _TxBufWriteCnt 005D               ?_convert_rgb2hue 000E            color_read_Green@tmp 000A  
      __end_of_initDCmotorsPWM 1EFE                    vfprintf@fmt 002E             ADC2String@int_part 004B  
                     ??___wmul 0005                    __pdataBANK0 00FF          ??_calibration_routine 0046  
                  __pbssCOMRAM 005C                  __pcstackBANK0 0060                  __pcstackBANK1 01A8  
             ___lwdiv@dividend 0007                      _dtoa$2521 001A                       ?___awdiv 0001  
                     ?___awmod 0001                       ?___lwdiv 0007                   _readingIndex 00FD  
         I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004                    __smallconst 0E00  
            _I2C_2_Master_Idle 2338              _I2C_2_Master_Init 230E              _I2C_2_Master_Read 2152  
            _I2C_2_Master_Stop 2402                   _RxBufReadCnt 00FE                       _ADC_init 23C4  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0001  
                     ?_sprintf 0031              _sendStringSerial4 22DC            ??_I2C_2_Master_Idle 0001  
          ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002                 ___wmul@product 0005  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0002                       _LATCbits 0F7B  
                     _LATDbits 0F7C                       _LATEbits 0F7D                       _LATFbits 0F7E  
                     _LATGbits 0F7F                       _LATHbits 0F80           _convert_rgb2hue$2840 0018  
         _convert_rgb2hue$2841 001A           _convert_rgb2hue$2842 001C           _convert_rgb2hue$2839 0016  
            ADC2String@ADC_val 0045             ?_sendStringSerial4 0002                       _PIE4bits 0E2D  
                     _PIR4bits 0E37            reading_values@cCurr 000C               ?_initDCmotorsPWM 0001  
            ??_sendCharSerial4 0001                       _SSP2CON2 0EDA            ??_sendStringSerial4 0003  
                     _SSP2STAT 0ED8                     _ADC2String 1D36                      _vfpfcnvrt 1538  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 2360      __end_of_I2C_2_Master_Init 2338  
    __end_of_I2C_2_Master_Read 2194              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 240C  
  I2C_2_Master_Write@data_byte 0002                    _ldrReadings 013C              ??_color_read_Blue 0007  
                 _TxBufReadCnt 005C                 _reading_values 1F72      __end_of_sendStringSerial4 230E  
__end_of_I2C_2_Master_RepStart 2420             color_read_Blue@tmp 000A                   ??_initUSART4 0001  
                     __Hrparam 0000                     vfprintf@ap 002F                       __Lrparam 0000  
                   vfprintf@fp 002D                     ?_vfpfcnvrt 0022                   ??_send2USART 0051  
                   _ANSELDbits 0EA7                     _ANSELFbits 0EB4                       _dataFlag 00FF  
                   sprintf@fmt 0032         __end_of_reading_values 1FD0                  test@led_state 00C4  
              ___lwdiv@divisor 0009             __end_of_initUSART4 23C4                ___lwdiv@counter 000B  
                     __ptext10 2386                       __ptext11 230E                       __ptext20 2194  
                     __ptext12 1384                       __ptext21 1C8C                       __ptext13 2274  
                     __ptext30 2070                       __ptext22 2420                       __ptext14 2110  
                     __ptext31 20C0                       __ptext23 22A8                       __ptext15 1538  
                     __ptext32 23F6                       __ptext24 1B2E                       __ptext16 1BDE  
                     __ptext33 2402                       __ptext25 1A6A                       __ptext17 2360  
                     __ptext34 240C                       __ptext26 22DC                       __ptext18 16C2  
                     __ptext35 2416                       __ptext27 23DE                       __ptext19 1DD8  
                     __ptext36 2152                       __ptext28 1FD0                       __ptext37 2338  
                     __ptext29 2020                       __ptext38 23C4                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA             __end_of_send2USART 2240                      test@combo 00F8  
                     isa$xinst 0000                     _RC4STAbits 0EE7                    ?_ADC2String 0044  
                     _vfprintf 2110                ?_reading_values 000C              test@battery_level 0051  
                    sprintf@ap 0037    __end_of_calibration_routine 1538                  send2USART@buf 0060  
                send2USART@hue 004F                    ??_vfpfcnvrt 0025               _color_click_init 2240  
                     sprintf@f 0038                       sprintf@s 0031                     _SSP2DATPPS 0E1D  
                   _SSP2CLKPPS 0E1C                     _TX4STAbits 0EE8                _sendCharSerial4 23DE  
