

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 23:30:44 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=3
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=3
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    93   000000                     
    94                           ; Generated 21/07/2023 GMT
    95                           ; 
    96                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution. Publication is not required when
   110                           ;        this file is used in an embedded application.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F67K40 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128   000000                     
   129                           	psect	idataBANK0
   130   00449A                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for _dataFlag
   134   00449A  01                 	db	1
   135   000000                     _TMR0H	set	4052
   136   000000                     _TX4REG	set	3812
   137   000000                     _RC4STAbits	set	3815
   138   000000                     _SP4BRGH	set	3814
   139   000000                     _LATHbits	set	3968
   140   000000                     _LATFbits	set	3966
   141   000000                     _TRISFbits	set	3974
   142   000000                     _TRISAbits	set	3969
   143   000000                     _TRISEbits	set	3973
   144   000000                     _TRISGbits	set	3975
   145   000000                     _TRISDbits	set	3972
   146   000000                     _PORTFbits	set	3982
   147   000000                     _SSP2CON2bits	set	3802
   148   000000                     _RX4PPS	set	3605
   149   000000                     _SSP2CLKPPS	set	3612
   150   000000                     _SSP2DATPPS	set	3613
   151   000000                     _ANSELDbits	set	3751
   152   000000                     _SSP2ADD	set	3798
   153   000000                     _SSP2CON1bits	set	3801
   154   000000                     _LATAbits	set	3961
   155   000000                     _LATEbits	set	3965
   156   000000                     _LATGbits	set	3967
   157   000000                     _LATCbits	set	3963
   158   000000                     _LATDbits	set	3964
   159   000000                     _CCPR2H	set	4006
   160   000000                     _CCPR1H	set	4010
   161   000000                     _RC4REG	set	3811
   162   000000                     _SP4BRGL	set	3813
   163   000000                     _TX4STAbits	set	3816
   164   000000                     _BAUD4CONbits	set	3817
   165   000000                     _SSP2CON2	set	3802
   166   000000                     _CCPR4H	set	3873
   167   000000                     _CCPR3H	set	3877
   168   000000                     _SSP2STAT	set	3800
   169   000000                     _ANSELFbits	set	3764
   170   000000                     _SSP2BUF	set	3797
   171   000000                     _IPR0bits	set	3615
   172   000000                     _PIE0bits	set	3625
   173   000000                     _PIE4bits	set	3629
   174   000000                     _PIR4bits	set	3639
   175   000000                     _RC0PPS	set	3682
   176   000000                     _RC7PPS	set	3689
   177   000000                     _RD5PPS	set	3695
   178   000000                     _RE2PPS	set	3700
   179   000000                     _RD6PPS	set	3696
   180   000000                     _CCP1CONbits	set	4011
   181   000000                     _CCPTMRS0bits	set	4013
   182   000000                     _T2PR	set	4028
   183   000000                     _T2CONbits	set	4029
   184   000000                     _T0CON0bits	set	4053
   185   000000                     _CCP2CONbits	set	4007
   186   000000                     _CCP3CONbits	set	3878
   187   000000                     _ADREFbits	set	3928
   188   000000                     _CCP4CONbits	set	3874
   189   000000                     _TRISHbits	set	3976
   190   000000                     _TRISCbits	set	3971
   191   000000                     _INTCONbits	set	4082
   192   000000                     _T0CON1bits	set	4054
   193   000000                     _ADPCH	set	3935
   194   000000                     _ADRESH	set	3940
   195   000000                     _ADCON0bits	set	3936
   196   000000                     _RE4PPS	set	3702
   197   000000                     _RG6PPS	set	3720
   198   000000                     _TMR0L	set	4051
   199   000000                     _T2CLKCONbits	set	4031
   200   000000                     _T2HLTbits	set	4030
   201   000000                     _PIR0bits	set	3635
   202                           
   203                           	psect	smallconst
   204   000E00                     __psmallconst:
   205                           	callstack 0
   206   000E00  00                 	db	0
   207   000E01                     STR_3:
   208                           
   209                           ; BSR set to: 14
   210   000E01  43                 	db	67	;'C'
   211   000E02  61                 	db	97	;'a'
   212   000E03  6C                 	db	108	;'l'
   213   000E04  69                 	db	105	;'i'
   214   000E05  62                 	db	98	;'b'
   215   000E06  72                 	db	114	;'r'
   216   000E07  61                 	db	97	;'a'
   217   000E08  74                 	db	116	;'t'
   218   000E09  69                 	db	105	;'i'
   219   000E0A  6F                 	db	111	;'o'
   220   000E0B  6E                 	db	110	;'n'
   221   000E0C  20                 	db	32
   222   000E0D  73                 	db	115	;'s'
   223   000E0E  74                 	db	116	;'t'
   224   000E0F  61                 	db	97	;'a'
   225   000E10  74                 	db	116	;'t'
   226   000E11  65                 	db	101	;'e'
   227   000E12  20                 	db	32
   228   000E13  3D                 	db	61	;'='
   229   000E14  20                 	db	32
   230   000E15  67                 	db	103	;'g'
   231   000E16  72                 	db	114	;'r'
   232   000E17  65                 	db	101	;'e'
   233   000E18  65                 	db	101	;'e'
   234   000E19  6E                 	db	110	;'n'
   235   000E1A  20                 	db	32
   236   000E1B  0A                 	db	10
   237   000E1C  0D                 	db	13
   238   000E1D  00                 	db	0
   239   000E1E                     STR_5:
   240                           
   241                           ; BSR set to: 14
   242   000E1E  43                 	db	67	;'C'
   243   000E1F  61                 	db	97	;'a'
   244   000E20  6C                 	db	108	;'l'
   245   000E21  69                 	db	105	;'i'
   246   000E22  62                 	db	98	;'b'
   247   000E23  72                 	db	114	;'r'
   248   000E24  61                 	db	97	;'a'
   249   000E25  74                 	db	116	;'t'
   250   000E26  69                 	db	105	;'i'
   251   000E27  6F                 	db	111	;'o'
   252   000E28  6E                 	db	110	;'n'
   253   000E29  20                 	db	32
   254   000E2A  73                 	db	115	;'s'
   255   000E2B  74                 	db	116	;'t'
   256   000E2C  61                 	db	97	;'a'
   257   000E2D  74                 	db	116	;'t'
   258   000E2E  65                 	db	101	;'e'
   259   000E2F  3D                 	db	61	;'='
   260   000E30  20                 	db	32
   261   000E31  62                 	db	98	;'b'
   262   000E32  6C                 	db	108	;'l'
   263   000E33  75                 	db	117	;'u'
   264   000E34  65                 	db	101	;'e'
   265   000E35  20                 	db	32
   266   000E36  0A                 	db	10
   267   000E37  0D                 	db	13
   268   000E38  00                 	db	0
   269   000E39                     STR_7:
   270                           
   271                           ; BSR set to: 14
   272   000E39  43                 	db	67	;'C'
   273   000E3A  61                 	db	97	;'a'
   274   000E3B  6C                 	db	108	;'l'
   275   000E3C  69                 	db	105	;'i'
   276   000E3D  62                 	db	98	;'b'
   277   000E3E  72                 	db	114	;'r'
   278   000E3F  61                 	db	97	;'a'
   279   000E40  74                 	db	116	;'t'
   280   000E41  69                 	db	105	;'i'
   281   000E42  6F                 	db	111	;'o'
   282   000E43  6E                 	db	110	;'n'
   283   000E44  20                 	db	32
   284   000E45  73                 	db	115	;'s'
   285   000E46  74                 	db	116	;'t'
   286   000E47  61                 	db	97	;'a'
   287   000E48  74                 	db	116	;'t'
   288   000E49  65                 	db	101	;'e'
   289   000E4A  20                 	db	32
   290   000E4B  3D                 	db	61	;'='
   291   000E4C  20                 	db	32
   292   000E4D  20                 	db	32
   293   000E4E  77                 	db	119	;'w'
   294   000E4F  68                 	db	104	;'h'
   295   000E50  69                 	db	105	;'i'
   296   000E51  74                 	db	116	;'t'
   297   000E52  65                 	db	101	;'e'
   298   000E53  00                 	db	0
   299   000E54                     STR_9:
   300                           
   301                           ; BSR set to: 14
   302   000E54  43                 	db	67	;'C'
   303   000E55  41                 	db	65	;'A'
   304   000E56  4C                 	db	76	;'L'
   305   000E57  49                 	db	73	;'I'
   306   000E58  42                 	db	66	;'B'
   307   000E59  52                 	db	82	;'R'
   308   000E5A  41                 	db	65	;'A'
   309   000E5B  54                 	db	84	;'T'
   310   000E5C  49                 	db	73	;'I'
   311   000E5D  4F                 	db	79	;'O'
   312   000E5E  4E                 	db	78	;'N'
   313   000E5F  20                 	db	32
   314   000E60  43                 	db	67	;'C'
   315   000E61  4F                 	db	79	;'O'
   316   000E62  4D                 	db	77	;'M'
   317   000E63  50                 	db	80	;'P'
   318   000E64  4C                 	db	76	;'L'
   319   000E65  45                 	db	69	;'E'
   320   000E66  54                 	db	84	;'T'
   321   000E67  45                 	db	69	;'E'
   322   000E68  44                 	db	68	;'D'
   323   000E69  20                 	db	32
   324   000E6A  0A                 	db	10
   325   000E6B  0D                 	db	13
   326   000E6C  00                 	db	0
   327   000E6D                     STR_1:
   328                           
   329                           ; BSR set to: 14
   330   000E6D  43                 	db	67	;'C'
   331   000E6E  61                 	db	97	;'a'
   332   000E6F  6C                 	db	108	;'l'
   333   000E70  69                 	db	105	;'i'
   334   000E71  62                 	db	98	;'b'
   335   000E72  72                 	db	114	;'r'
   336   000E73  61                 	db	97	;'a'
   337   000E74  74                 	db	116	;'t'
   338   000E75  69                 	db	105	;'i'
   339   000E76  6F                 	db	111	;'o'
   340   000E77  6E                 	db	110	;'n'
   341   000E78  20                 	db	32
   342   000E79  73                 	db	115	;'s'
   343   000E7A  74                 	db	116	;'t'
   344   000E7B  61                 	db	97	;'a'
   345   000E7C  74                 	db	116	;'t'
   346   000E7D  65                 	db	101	;'e'
   347   000E7E  20                 	db	32
   348   000E7F  3D                 	db	61	;'='
   349   000E80  20                 	db	32
   350   000E81  72                 	db	114	;'r'
   351   000E82  65                 	db	101	;'e'
   352   000E83  64                 	db	100	;'d'
   353   000E84  00                 	db	0
   354   000E85                     
   355                           ; BSR set to: 14
   356   000E85  56                 	db	86	;'V'
   357   000E86  6F                 	db	111	;'o'
   358   000E87  6C                 	db	108	;'l'
   359   000E88  74                 	db	116	;'t'
   360   000E89  61                 	db	97	;'a'
   361   000E8A  67                 	db	103	;'g'
   362   000E8B  65                 	db	101	;'e'
   363   000E8C  20                 	db	32
   364   000E8D  3D                 	db	61	;'='
   365   000E8E  20                 	db	32
   366   000E8F  25                 	db	37
   367   000E90  64                 	db	100	;'d'
   368   000E91  2E                 	db	46
   369   000E92  25                 	db	37
   370   000E93  30                 	db	48	;'0'
   371   000E94  32                 	db	50	;'2'
   372   000E95  64                 	db	100	;'d'
   373   000E96  2C                 	db	44
   374   000E97  20                 	db	32
   375   000E98  20                 	db	32
   376   000E99  00                 	db	0
   377   000E9A                     STR_12:
   378                           
   379                           ; BSR set to: 14
   380   000E9A  68                 	db	104	;'h'
   381   000E9B  75                 	db	117	;'u'
   382   000E9C  65                 	db	101	;'e'
   383   000E9D  3D                 	db	61	;'='
   384   000E9E  25                 	db	37
   385   000E9F  30                 	db	48	;'0'
   386   000EA0  33                 	db	51	;'3'
   387   000EA1  64                 	db	100	;'d'
   388   000EA2  2C                 	db	44
   389   000EA3  20                 	db	32
   390   000EA4  20                 	db	32
   391   000EA5  00                 	db	0
   392   000EA6                     STR_2:
   393                           
   394                           ; BSR set to: 14
   395   000EA6  2E                 	db	46
   396   000EA7  00                 	db	0
   397   000EA8  00                 	db	0	; dummy byte at the end
   398   000000                     
   399                           ; #config settings
   400                           
   401                           	psect	cinit
   402   003F1C                     __pcinit:
   403                           	callstack 0
   404   003F1C                     start_initialization:
   405                           	callstack 0
   406   003F1C                     __initialization:
   407                           	callstack 0
   408                           
   409                           ; Initialize objects allocated to BANK0 (1 bytes)
   410                           ; load TBLPTR registers with __pidataBANK0
   411   003F1C  0E9A               	movlw	low __pidataBANK0
   412   003F1E  6EF6               	movwf	tblptrl,c
   413   003F20  0E44               	movlw	high __pidataBANK0
   414   003F22  6EF7               	movwf	tblptrh,c
   415   003F24  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   416   003F26  6EF8               	movwf	tblptru,c
   417   003F28  0009               	tblrd		*+	;fetch initializer
   418   003F2A  CFF5 F0ED          	movff	tablat,__pdataBANK0
   419                           
   420                           ; Clear objects allocated to BANK2 (250 bytes)
   421   003F2E  EE02  F000         	lfsr	0,__pbssBANK2
   422   003F32  0EFA               	movlw	250
   423   003F34                     clear_0:
   424   003F34  6AEE               	clrf	postinc0,c
   425   003F36  06E8               	decf	wreg,f,c
   426   003F38  E1FD               	bnz	clear_0
   427                           
   428                           ; Clear objects allocated to BANK1 (132 bytes)
   429   003F3A  EE01  F000         	lfsr	0,__pbssBANK1
   430   003F3E  0E84               	movlw	132
   431   003F40                     clear_1:
   432   003F40  6AEE               	clrf	postinc0,c
   433   003F42  06E8               	decf	wreg,f,c
   434   003F44  E1FD               	bnz	clear_1
   435                           
   436                           ; Clear objects allocated to BANK0 (49 bytes)
   437   003F46  EE00  F0BC         	lfsr	0,__pbssBANK0
   438   003F4A  0E31               	movlw	49
   439   003F4C                     clear_2:
   440   003F4C  6AEE               	clrf	postinc0,c
   441   003F4E  06E8               	decf	wreg,f,c
   442   003F50  E1FD               	bnz	clear_2
   443                           
   444                           ; Clear objects allocated to COMRAM (3 bytes)
   445   003F52  6A51               	clrf	(__pbssCOMRAM+2)& (0+255),c
   446   003F54  6A50               	clrf	(__pbssCOMRAM+1)& (0+255),c
   447   003F56  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   448   003F58                     end_of_initialization:
   449                           	callstack 0
   450   003F58                     __end_of__initialization:
   451                           	callstack 0
   452   003F58  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   453   003F5A  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   454   003F5C  0100               	movlb	0
   455   003F5E  EF60  F011         	goto	_main	;jump to C main() function
   456                           
   457                           	psect	bssCOMRAM
   458   00004F                     __pbssCOMRAM:
   459                           	callstack 0
   460   00004F                     _TxBufReadCnt:
   461                           	callstack 0
   462   00004F                     	ds	1
   463   000050                     _TxBufWriteCnt:
   464                           	callstack 0
   465   000050                     	ds	1
   466   000051                     _RxBufWriteCnt:
   467                           	callstack 0
   468   000051                     	ds	1
   469                           
   470                           	psect	bssBANK0
   471   0000BC                     __pbssBANK0:
   472                           	callstack 0
   473   0000BC                     _hue:
   474                           	callstack 0
   475   0000BC                     	ds	8
   476   0000C4                     _width:
   477                           	callstack 0
   478   0000C4                     	ds	2
   479   0000C6                     _prec:
   480                           	callstack 0
   481   0000C6                     	ds	2
   482   0000C8                     _flags:
   483                           	callstack 0
   484   0000C8                     	ds	1
   485   0000C9                     _readingIndex:
   486                           	callstack 0
   487   0000C9                     	ds	1
   488   0000CA                     _RxBufReadCnt:
   489                           	callstack 0
   490   0000CA                     	ds	1
   491   0000CB                     _motorR:
   492                           	callstack 0
   493   0000CB                     	ds	9
   494   0000D4                     _motorL:
   495                           	callstack 0
   496   0000D4                     	ds	9
   497   0000DD                     _colorCurrent:
   498                           	callstack 0
   499   0000DD                     	ds	8
   500   0000E5                     _colorCalibration:
   501                           	callstack 0
   502   0000E5                     	ds	8
   503                           
   504                           	psect	dataBANK0
   505   0000ED                     __pdataBANK0:
   506                           	callstack 0
   507   0000ED                     _dataFlag:
   508                           	callstack 0
   509   0000ED                     	ds	1
   510                           
   511                           	psect	bssBANK1
   512   000100                     __pbssBANK1:
   513                           	callstack 0
   514   000100                     _EUSART4TXbuf:
   515                           	callstack 0
   516   000100                     	ds	60
   517   00013C                     _ldrReadings:
   518                           	callstack 0
   519   00013C                     	ds	20
   520   000150                     _EUSART4RXbuf:
   521                           	callstack 0
   522   000150                     	ds	20
   523   000164                     _dbuf:
   524                           	callstack 0
   525   000164                     	ds	32
   526                           
   527                           	psect	bssBANK2
   528   000200                     __pbssBANK2:
   529                           	callstack 0
   530   000200                     _path:
   531                           	callstack 0
   532   000200                     	ds	250
   533                           
   534                           	psect	cstackBANK0
   535   000060                     __pcstackBANK0:
   536                           	callstack 0
   537   000060                     convert_rgb2hue@redcurrent:
   538                           	callstack 0
   539   000060                     calibration_routine@cal_state:
   540                           	callstack 0
   541   000060                     send2USART@hue_char:
   542                           	callstack 0
   543                           
   544                           ; 50 bytes @ 0x0
   545   000060                     	ds	4
   546   000064                     convert_rgb2hue@redmax:
   547                           	callstack 0
   548                           
   549                           ; 4 bytes @ 0x4
   550   000064                     	ds	4
   551   000068                     convert_rgb2hue@greencurrent:
   552                           	callstack 0
   553                           
   554                           ; 4 bytes @ 0x8
   555   000068                     	ds	4
   556   00006C                     convert_rgb2hue@greenmax:
   557                           	callstack 0
   558                           
   559                           ; 4 bytes @ 0xC
   560   00006C                     	ds	4
   561   000070                     convert_rgb2hue@bluecurrent:
   562                           	callstack 0
   563                           
   564                           ; 4 bytes @ 0x10
   565   000070                     	ds	4
   566   000074                     convert_rgb2hue@bluemax:
   567                           	callstack 0
   568                           
   569                           ; 4 bytes @ 0x14
   570   000074                     	ds	4
   571   000078                     convert_rgb2hue@clearcurrent:
   572                           	callstack 0
   573                           
   574                           ; 4 bytes @ 0x18
   575   000078                     	ds	4
   576   00007C                     convert_rgb2hue@clearmax:
   577                           	callstack 0
   578                           
   579                           ; 4 bytes @ 0x1C
   580   00007C                     	ds	4
   581   000080                     _convert_rgb2hue$429:
   582                           	callstack 0
   583                           
   584                           ; 4 bytes @ 0x20
   585   000080                     	ds	4
   586   000084                     _convert_rgb2hue$430:
   587                           	callstack 0
   588                           
   589                           ; 4 bytes @ 0x24
   590   000084                     	ds	4
   591   000088                     _convert_rgb2hue$431:
   592                           	callstack 0
   593                           
   594                           ; 4 bytes @ 0x28
   595   000088                     	ds	4
   596   00008C                     _convert_rgb2hue$432:
   597                           	callstack 0
   598                           
   599                           ; 4 bytes @ 0x2C
   600   00008C                     	ds	4
   601   000090                     convert_rgb2hue@min:
   602                           	callstack 0
   603                           
   604                           ; 4 bytes @ 0x30
   605   000090                     	ds	4
   606   000094                     convert_rgb2hue@diff:
   607                           	callstack 0
   608                           
   609                           ; 4 bytes @ 0x34
   610   000094                     	ds	4
   611   000098                     convert_rgb2hue@max:
   612                           	callstack 0
   613                           
   614                           ; 4 bytes @ 0x38
   615   000098                     	ds	4
   616   00009C                     convert_rgb2hue@hue:
   617                           	callstack 0
   618                           
   619                           ; 4 bytes @ 0x3C
   620   00009C                     	ds	4
   621   0000A0                     convert_rgb2hue@r:
   622                           	callstack 0
   623                           
   624                           ; 4 bytes @ 0x40
   625   0000A0                     	ds	4
   626   0000A4                     convert_rgb2hue@g:
   627                           	callstack 0
   628                           
   629                           ; 4 bytes @ 0x44
   630   0000A4                     	ds	4
   631   0000A8                     convert_rgb2hue@b:
   632                           	callstack 0
   633                           
   634                           ; 4 bytes @ 0x48
   635   0000A8                     	ds	4
   636   0000AC                     main@maximum:
   637                           	callstack 0
   638                           
   639                           ; 4 bytes @ 0x4C
   640   0000AC                     	ds	4
   641   0000B0                     main@current:
   642                           	callstack 0
   643                           
   644                           ; 4 bytes @ 0x50
   645   0000B0                     	ds	4
   646   0000B4                     main@hue:
   647                           	callstack 0
   648                           
   649                           ; 2 bytes @ 0x54
   650   0000B4                     	ds	2
   651   0000B6                     main@time:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x56
   655   0000B6                     	ds	2
   656   0000B8                     main@clear_norm:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x58
   660   0000B8                     	ds	2
   661   0000BA                     main@path_length:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x5A
   665   0000BA                     	ds	2
   666                           
   667                           	psect	cstackCOMRAM
   668   000001                     __pcstackCOMRAM:
   669                           	callstack 0
   670   000001                     ??_LowISR:
   671   000001                     
   672                           ; 1 bytes @ 0x0
   673   000001                     	ds	1
   674   000002                     ??_I2C_2_Master_Idle:
   675   000002                     ?_get16bitTMR0val:
   676                           	callstack 0
   677   000002                     ?___wmul:
   678                           	callstack 0
   679   000002                     ?___awdiv:
   680                           	callstack 0
   681   000002                     ?___awmod:
   682                           	callstack 0
   683   000002                     ?___fladd:
   684                           	callstack 0
   685   000002                     ?___flmul:
   686                           	callstack 0
   687   000002                     ?___xxtofl:
   688                           	callstack 0
   689   000002                     sendCharSerial4@charToSend:
   690                           	callstack 0
   691   000002                     initDCmotorsPWM@PWMperiod:
   692                           	callstack 0
   693   000002                     customDelayMs@milliseconds:
   694                           	callstack 0
   695   000002                     ___wmul@multiplier:
   696                           	callstack 0
   697   000002                     ___awdiv@dividend:
   698                           	callstack 0
   699   000002                     ___awmod@dividend:
   700                           	callstack 0
   701   000002                     fputc@c:
   702                           	callstack 0
   703   000002                     ___fleq@ff1:
   704                           	callstack 0
   705   000002                     ___flge@ff1:
   706                           	callstack 0
   707   000002                     ___fladd@b:
   708                           	callstack 0
   709   000002                     ___flmul@b:
   710                           	callstack 0
   711   000002                     ___xxtofl@val:
   712                           	callstack 0
   713                           
   714                           ; 4 bytes @ 0x1
   715   000002                     	ds	1
   716   000003                     ??_I2C_2_Master_Read:
   717   000003                     I2C_2_Master_Write@data_byte:
   718                           	callstack 0
   719   000003                     sendStringSerial4@string:
   720                           	callstack 0
   721                           
   722                           ; 1 bytes @ 0x2
   723   000003                     	ds	1
   724   000004                     ??_get16bitTMR0val:
   725   000004                     ??_customDelayMs:
   726   000004                     color_writetoaddr@value:
   727                           	callstack 0
   728   000004                     I2C_2_Master_Read@ack:
   729                           	callstack 0
   730   000004                     fputc@fp:
   731                           	callstack 0
   732   000004                     ___wmul@multiplicand:
   733                           	callstack 0
   734   000004                     ___awdiv@divisor:
   735                           	callstack 0
   736   000004                     ___awmod@divisor:
   737                           	callstack 0
   738                           
   739                           ; 2 bytes @ 0x3
   740   000004                     	ds	1
   741   000005                     ??_fputc:
   742   000005                     color_writetoaddr@address:
   743                           	callstack 0
   744   000005                     I2C_2_Master_Read@tmp:
   745                           	callstack 0
   746   000005                     customDelayMs@i:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x4
   750   000005                     	ds	1
   751   000006                     ??_color_click_init:
   752   000006                     ??___xxtofl:
   753   000006                     ?_color_read_Red:
   754                           	callstack 0
   755   000006                     ?_color_read_Green:
   756                           	callstack 0
   757   000006                     ?_color_read_Blue:
   758                           	callstack 0
   759   000006                     ?_color_read_Clear:
   760                           	callstack 0
   761   000006                     ___awdiv@counter:
   762                           	callstack 0
   763   000006                     ___awmod@counter:
   764                           	callstack 0
   765   000006                     ___wmul@product:
   766                           	callstack 0
   767   000006                     ___fleq@ff2:
   768                           	callstack 0
   769   000006                     ___flge@ff2:
   770                           	callstack 0
   771   000006                     ___fladd@a:
   772                           	callstack 0
   773   000006                     ___flmul@a:
   774                           	callstack 0
   775                           
   776                           ; 4 bytes @ 0x5
   777   000006                     	ds	1
   778   000007                     ___awdiv@sign:
   779                           	callstack 0
   780   000007                     ___awmod@sign:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x6
   784   000007                     	ds	1
   785   000008                     ??_color_read_Red:
   786   000008                     ??_color_read_Green:
   787   000008                     ??_color_read_Blue:
   788   000008                     ??_color_read_Clear:
   789   000008                     ?_abs:
   790                           	callstack 0
   791   000008                     ?___lwdiv:
   792                           	callstack 0
   793   000008                     ?_read_prec_or_width:
   794                           	callstack 0
   795   000008                     read_prec_or_width@fmt:
   796                           	callstack 0
   797   000008                     logAction@time:
   798                           	callstack 0
   799   000008                     get16bitTMR0val@combined_value:
   800                           	callstack 0
   801   000008                     ___awdiv@quotient:
   802                           	callstack 0
   803   000008                     ___lwdiv@dividend:
   804                           	callstack 0
   805   000008                     abs@a:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x7
   809   000008                     	ds	1
   810   000009                     read_prec_or_width@ap:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0x8
   814   000009                     	ds	1
   815   00000A                     ??___fladd:
   816   00000A                     ??___flmul:
   817   00000A                     ??_abs:
   818   00000A                     ??___fleq:
   819   00000A                     ??___flge:
   820   00000A                     ___xxtofl@sign:
   821                           	callstack 0
   822   00000A                     read_prec_or_width@c:
   823                           	callstack 0
   824   00000A                     logAction@pathLength:
   825                           	callstack 0
   826   00000A                     ___lwdiv@divisor:
   827                           	callstack 0
   828   00000A                     fputs@s:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x9
   832   00000A                     	ds	1
   833   00000B                     ___xxtofl@exp:
   834                           	callstack 0
   835   00000B                     color_read_Red@tmp:
   836                           	callstack 0
   837   00000B                     color_read_Green@tmp:
   838                           	callstack 0
   839   00000B                     color_read_Blue@tmp:
   840                           	callstack 0
   841   00000B                     color_read_Clear@tmp:
   842                           	callstack 0
   843   00000B                     read_prec_or_width@n:
   844                           	callstack 0
   845                           
   846                           ; 2 bytes @ 0xA
   847   00000B                     	ds	1
   848   00000C                     logAction@action:
   849                           	callstack 0
   850   00000C                     fputs@fp:
   851                           	callstack 0
   852   00000C                     ___lwdiv@quotient:
   853                           	callstack 0
   854   00000C                     ___xxtofl@arg:
   855                           	callstack 0
   856                           
   857                           ; 4 bytes @ 0xB
   858   00000C                     	ds	1
   859   00000D                     fputs@c:
   860                           	callstack 0
   861                           
   862                           ; 1 bytes @ 0xC
   863   00000D                     	ds	1
   864   00000E                     ___lwdiv@counter:
   865                           	callstack 0
   866   00000E                     ___fladd@signs:
   867                           	callstack 0
   868   00000E                     ___flmul@sign:
   869                           	callstack 0
   870   00000E                     fputs@i:
   871                           	callstack 0
   872                           
   873                           ; 2 bytes @ 0xD
   874   00000E                     	ds	1
   875   00000F                     setMotorPWM@m:
   876                           	callstack 0
   877   00000F                     ___fladd@aexp:
   878                           	callstack 0
   879   00000F                     ___flmul@grs:
   880                           	callstack 0
   881                           
   882                           ; 4 bytes @ 0xE
   883   00000F                     	ds	1
   884   000010                     ??_setMotorPWM:
   885   000010                     ___fladd@bexp:
   886                           	callstack 0
   887   000010                     pad@fp:
   888                           	callstack 0
   889                           
   890                           ; 1 bytes @ 0xF
   891   000010                     	ds	1
   892   000011                     ___fladd@grs:
   893                           	callstack 0
   894   000011                     pad@buf:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x10
   898   000011                     	ds	1
   899   000012                     ?___flsub:
   900                           	callstack 0
   901   000012                     setMotorPWM@posDuty:
   902                           	callstack 0
   903   000012                     ___flsub@b:
   904                           	callstack 0
   905                           
   906                           ; 4 bytes @ 0x11
   907   000012                     	ds	1
   908   000013                     setMotorPWM@negDuty:
   909                           	callstack 0
   910   000013                     ___flmul@aexp:
   911                           	callstack 0
   912   000013                     pad@p:
   913                           	callstack 0
   914                           
   915                           ; 2 bytes @ 0x12
   916   000013                     	ds	1
   917   000014                     stop@mL:
   918                           	callstack 0
   919   000014                     turnLeft@mL:
   920                           	callstack 0
   921   000014                     turnRight@mL:
   922                           	callstack 0
   923   000014                     fullSpeedAhead@mL:
   924                           	callstack 0
   925   000014                     fullSpeedBack@mL:
   926                           	callstack 0
   927   000014                     ___flmul@bexp:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x13
   931   000014                     	ds	1
   932   000015                     ??_pad:
   933   000015                     stop@mR:
   934                           	callstack 0
   935   000015                     turnLeft@mR:
   936                           	callstack 0
   937   000015                     turnRight@mR:
   938                           	callstack 0
   939   000015                     fullSpeedAhead@mR:
   940                           	callstack 0
   941   000015                     fullSpeedBack@mR:
   942                           	callstack 0
   943   000015                     ___flmul@prod:
   944                           	callstack 0
   945                           
   946                           ; 4 bytes @ 0x14
   947   000015                     	ds	1
   948   000016                     ??_fullSpeedAhead:
   949   000016                     ??_stop:
   950   000016                     ??_turnLeft:
   951   000016                     ??_turnRight:
   952   000016                     ??_fullSpeedBack:
   953   000016                     pad@i:
   954                           	callstack 0
   955   000016                     ___flsub@a:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0x15
   959   000016                     	ds	1
   960   000017                     turnLeft@i:
   961                           	callstack 0
   962   000017                     turnRight@i:
   963                           	callstack 0
   964   000017                     fullSpeedAhead@power:
   965                           	callstack 0
   966   000017                     fullSpeedBack@power:
   967                           	callstack 0
   968                           
   969                           ; 2 bytes @ 0x16
   970   000017                     	ds	1
   971   000018                     dtoa@fp:
   972                           	callstack 0
   973                           
   974                           ; 1 bytes @ 0x17
   975   000018                     	ds	1
   976   000019                     right90@mL:
   977                           	callstack 0
   978   000019                     left90@mL:
   979                           	callstack 0
   980   000019                     turn180@mL:
   981                           	callstack 0
   982   000019                     right135@mL:
   983                           	callstack 0
   984   000019                     left135@mL:
   985                           	callstack 0
   986   000019                     backHalf@mL:
   987                           	callstack 0
   988   000019                     backOneAndHalf@mL:
   989                           	callstack 0
   990   000019                     reverseStraight@mL:
   991                           	callstack 0
   992   000019                     ___flmul@temp:
   993                           	callstack 0
   994   000019                     dtoa@d:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0x18
   998   000019                     	ds	1
   999   00001A                     right90@mR:
  1000                           	callstack 0
  1001   00001A                     left90@mR:
  1002                           	callstack 0
  1003   00001A                     turn180@mR:
  1004                           	callstack 0
  1005   00001A                     right135@mR:
  1006                           	callstack 0
  1007   00001A                     left135@mR:
  1008                           	callstack 0
  1009   00001A                     backHalf@mR:
  1010                           	callstack 0
  1011   00001A                     backOneAndHalf@mR:
  1012                           	callstack 0
  1013   00001A                     reverseStraight@mR:
  1014                           	callstack 0
  1015                           
  1016                           ; 1 bytes @ 0x19
  1017   00001A                     	ds	1
  1018   00001B                     ??_right90:
  1019   00001B                     ??_left90:
  1020   00001B                     ??_turn180:
  1021   00001B                     ??_right135:
  1022   00001B                     ??_left135:
  1023   00001B                     ??_backHalf:
  1024   00001B                     ??_backOneAndHalf:
  1025   00001B                     ?___fldiv:
  1026                           	callstack 0
  1027   00001B                     reverseStraight@time:
  1028                           	callstack 0
  1029   00001B                     _dtoa$3045:
  1030                           	callstack 0
  1031   00001B                     ___fldiv@b:
  1032                           	callstack 0
  1033                           
  1034                           ; 4 bytes @ 0x1A
  1035   00001B                     	ds	2
  1036   00001D                     moveRed@mL:
  1037                           	callstack 0
  1038   00001D                     moveGreen@mL:
  1039                           	callstack 0
  1040   00001D                     moveBlue@mL:
  1041                           	callstack 0
  1042   00001D                     moveYellow@mL:
  1043                           	callstack 0
  1044   00001D                     movePink@mL:
  1045                           	callstack 0
  1046   00001D                     moveOrange@mL:
  1047                           	callstack 0
  1048   00001D                     moveLightBlue@mL:
  1049                           	callstack 0
  1050   00001D                     moveWhite@mL:
  1051                           	callstack 0
  1052   00001D                     reverseTurn@mL:
  1053                           	callstack 0
  1054   00001D                     dtoa@p:
  1055                           	callstack 0
  1056   00001D                     reverseStraight@delayMs:
  1057                           	callstack 0
  1058                           
  1059                           ; 2 bytes @ 0x1C
  1060   00001D                     	ds	1
  1061   00001E                     moveRed@mR:
  1062                           	callstack 0
  1063   00001E                     moveGreen@mR:
  1064                           	callstack 0
  1065   00001E                     moveBlue@mR:
  1066                           	callstack 0
  1067   00001E                     moveYellow@mR:
  1068                           	callstack 0
  1069   00001E                     movePink@mR:
  1070                           	callstack 0
  1071   00001E                     moveOrange@mR:
  1072                           	callstack 0
  1073   00001E                     moveLightBlue@mR:
  1074                           	callstack 0
  1075   00001E                     moveWhite@mR:
  1076                           	callstack 0
  1077   00001E                     reverseTurn@mR:
  1078                           	callstack 0
  1079   00001E                     dtoa@w:
  1080                           	callstack 0
  1081                           
  1082                           ; 2 bytes @ 0x1D
  1083   00001E                     	ds	1
  1084   00001F                     ??_moveWhite:
  1085   00001F                     reverseTurn@turnDirection:
  1086                           	callstack 0
  1087   00001F                     moveRed@path_length:
  1088                           	callstack 0
  1089   00001F                     moveGreen@path_length:
  1090                           	callstack 0
  1091   00001F                     moveBlue@path_length:
  1092                           	callstack 0
  1093   00001F                     moveYellow@path_length:
  1094                           	callstack 0
  1095   00001F                     movePink@path_length:
  1096                           	callstack 0
  1097   00001F                     moveOrange@path_length:
  1098                           	callstack 0
  1099   00001F                     moveLightBlue@path_length:
  1100                           	callstack 0
  1101   00001F                     ___fldiv@a:
  1102                           	callstack 0
  1103                           
  1104                           ; 4 bytes @ 0x1E
  1105   00001F                     	ds	1
  1106   000020                     dtoa@s:
  1107                           	callstack 0
  1108                           
  1109                           ; 1 bytes @ 0x1F
  1110   000020                     	ds	1
  1111   000021                     ??_moveRed:
  1112   000021                     ??_moveGreen:
  1113   000021                     ??_moveBlue:
  1114   000021                     ??_moveLightBlue:
  1115   000021                     ??_moveYellow:
  1116   000021                     ??_moveOrange:
  1117   000021                     ??_movePink:
  1118   000021                     returnHome@mL:
  1119                           	callstack 0
  1120   000021                     dtoa@i:
  1121                           	callstack 0
  1122                           
  1123                           ; 2 bytes @ 0x20
  1124   000021                     	ds	1
  1125   000022                     returnHome@mR:
  1126                           	callstack 0
  1127                           
  1128                           ; 1 bytes @ 0x21
  1129   000022                     	ds	1
  1130   000023                     ??___fldiv:
  1131   000023                     vfpfcnvrt@fp:
  1132                           	callstack 0
  1133   000023                     returnHome@path:
  1134                           	callstack 0
  1135                           
  1136                           ; 2 bytes @ 0x22
  1137   000023                     	ds	1
  1138   000024                     vfpfcnvrt@fmt:
  1139                           	callstack 0
  1140                           
  1141                           ; 1 bytes @ 0x23
  1142   000024                     	ds	1
  1143   000025                     vfpfcnvrt@ap:
  1144                           	callstack 0
  1145   000025                     returnHome@pathLength:
  1146                           	callstack 0
  1147                           
  1148                           ; 2 bytes @ 0x24
  1149   000025                     	ds	1
  1150   000026                     ??_vfpfcnvrt:
  1151                           
  1152                           ; 1 bytes @ 0x25
  1153   000026                     	ds	1
  1154   000027                     ??_returnHome:
  1155   000027                     ___fldiv@rem:
  1156                           	callstack 0
  1157                           
  1158                           ; 4 bytes @ 0x26
  1159   000027                     	ds	1
  1160   000028                     vfpfcnvrt@convarg:
  1161                           	callstack 0
  1162                           
  1163                           ; 4 bytes @ 0x27
  1164   000028                     	ds	1
  1165   000029                     returnHome@time:
  1166                           	callstack 0
  1167                           
  1168                           ; 2 bytes @ 0x28
  1169   000029                     	ds	2
  1170   00002B                     returnHome@action:
  1171                           	callstack 0
  1172   00002B                     ___fldiv@sign:
  1173                           	callstack 0
  1174                           
  1175                           ; 1 bytes @ 0x2A
  1176   00002B                     	ds	1
  1177   00002C                     vfpfcnvrt@done:
  1178                           	callstack 0
  1179   00002C                     returnHome@i:
  1180                           	callstack 0
  1181   00002C                     ___fldiv@new_exp:
  1182                           	callstack 0
  1183                           
  1184                           ; 2 bytes @ 0x2B
  1185   00002C                     	ds	1
  1186   00002D                     vfpfcnvrt@cp:
  1187                           	callstack 0
  1188                           
  1189                           ; 1 bytes @ 0x2C
  1190   00002D                     	ds	1
  1191   00002E                     ?_vfprintf:
  1192                           	callstack 0
  1193   00002E                     vfprintf@fp:
  1194                           	callstack 0
  1195   00002E                     ___fldiv@grs:
  1196                           	callstack 0
  1197                           
  1198                           ; 4 bytes @ 0x2D
  1199   00002E                     	ds	1
  1200   00002F                     vfprintf@fmt:
  1201                           	callstack 0
  1202                           
  1203                           ; 1 bytes @ 0x2E
  1204   00002F                     	ds	1
  1205   000030                     vfprintf@ap:
  1206                           	callstack 0
  1207                           
  1208                           ; 1 bytes @ 0x2F
  1209   000030                     	ds	1
  1210   000031                     vfprintf@cfmt:
  1211                           	callstack 0
  1212                           
  1213                           ; 1 bytes @ 0x30
  1214   000031                     	ds	1
  1215   000032                     ?_sprintf:
  1216                           	callstack 0
  1217   000032                     ___fldiv@bexp:
  1218                           	callstack 0
  1219   000032                     sprintf@s:
  1220                           	callstack 0
  1221                           
  1222                           ; 1 bytes @ 0x31
  1223   000032                     	ds	1
  1224   000033                     ___fldiv@aexp:
  1225                           	callstack 0
  1226   000033                     sprintf@fmt:
  1227                           	callstack 0
  1228                           
  1229                           ; 1 bytes @ 0x32
  1230   000033                     	ds	1
  1231   000034                     ?___fltol:
  1232                           	callstack 0
  1233   000034                     ___fltol@f1:
  1234                           	callstack 0
  1235                           
  1236                           ; 4 bytes @ 0x33
  1237   000034                     	ds	4
  1238   000038                     ??___fltol:
  1239   000038                     sprintf@ap:
  1240                           	callstack 0
  1241                           
  1242                           ; 1 bytes @ 0x37
  1243   000038                     	ds	1
  1244   000039                     sprintf@f:
  1245                           	callstack 0
  1246                           
  1247                           ; 12 bytes @ 0x38
  1248   000039                     	ds	3
  1249   00003C                     ___fltol@sign1:
  1250                           	callstack 0
  1251                           
  1252                           ; 1 bytes @ 0x3B
  1253   00003C                     	ds	1
  1254   00003D                     ___fltol@exp1:
  1255                           	callstack 0
  1256                           
  1257                           ; 1 bytes @ 0x3C
  1258   00003D                     	ds	1
  1259   00003E                     ?_convert_rgb2hue:
  1260                           	callstack 0
  1261   00003E                     convert_rgb2hue@cMax:
  1262                           	callstack 0
  1263                           
  1264                           ; 1 bytes @ 0x3D
  1265   00003E                     	ds	1
  1266   00003F                     convert_rgb2hue@cCurr:
  1267                           	callstack 0
  1268                           
  1269                           ; 1 bytes @ 0x3E
  1270   00003F                     	ds	1
  1271   000040                     ??_convert_rgb2hue:
  1272                           
  1273                           ; 1 bytes @ 0x3F
  1274   000040                     	ds	2
  1275   000042                     ?_reading_hue:
  1276                           	callstack 0
  1277   000042                     reading_hue@cCurr:
  1278                           	callstack 0
  1279                           
  1280                           ; 1 bytes @ 0x41
  1281   000042                     	ds	2
  1282   000044                     ??_reading_hue:
  1283                           
  1284                           ; 1 bytes @ 0x43
  1285   000044                     	ds	1
  1286   000045                     calibration_routine@cCal:
  1287                           	callstack 0
  1288   000045                     send2USART@hue:
  1289                           	callstack 0
  1290                           
  1291                           ; 2 bytes @ 0x44
  1292   000045                     	ds	1
  1293   000046                     ??_calibration_routine:
  1294   000046                     reading_hue@hue:
  1295                           	callstack 0
  1296                           
  1297                           ; 2 bytes @ 0x45
  1298   000046                     	ds	1
  1299   000047                     decision@hue:
  1300                           	callstack 0
  1301                           
  1302                           ; 2 bytes @ 0x46
  1303   000047                     	ds	2
  1304   000049                     decision@path_length:
  1305                           	callstack 0
  1306                           
  1307                           ; 2 bytes @ 0x48
  1308   000049                     	ds	2
  1309   00004B                     decision@color:
  1310                           	callstack 0
  1311                           
  1312                           ; 2 bytes @ 0x4A
  1313   00004B                     	ds	2
  1314   00004D                     ??_main:
  1315                           
  1316                           ; 1 bytes @ 0x4C
  1317   00004D                     	ds	2
  1318                           
  1319 ;;
  1320 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1321 ;;
  1322 ;; *************** function _main *****************
  1323 ;; Defined at:
  1324 ;;		line 29 in file "main.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  white           2    0        unsigned int 
  1329 ;;  time            2   86[BANK0 ] int 
  1330 ;;  hue_char       20    0        unsigned char [20]
  1331 ;;  current         4   80[BANK0 ] float 
  1332 ;;  maximum         4   76[BANK0 ] float 
  1333 ;;  path_length     2   90[BANK0 ] unsigned int 
  1334 ;;  PWMcycle        2    0        unsigned int 
  1335 ;;  clear_norm      2   88[BANK0 ] unsigned int 
  1336 ;;  hue             2   84[BANK0 ] unsigned int 
  1337 ;;  clear           2    0        unsigned int 
  1338 ;;  green           2    0        unsigned int 
  1339 ;;  blue            2    0        unsigned int 
  1340 ;;  red             2    0        unsigned int 
  1341 ;;  battery_leve    2    0        unsigned int 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1352 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1353 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;Total ram usage:       18 bytes
  1356 ;; Hardware stack levels required when called: 11
  1357 ;; This function calls:
  1358 ;;		_ADC_init
  1359 ;;		___fldiv
  1360 ;;		___flmul
  1361 ;;		___fltol
  1362 ;;		___xxtofl
  1363 ;;		_calibration_routine
  1364 ;;		_color_click_init
  1365 ;;		_color_read_Clear
  1366 ;;		_decision
  1367 ;;		_fullSpeedAhead
  1368 ;;		_get16bitTMR0val
  1369 ;;		_initDCmotorsPWM
  1370 ;;		_initUSART4
  1371 ;;		_logAction
  1372 ;;		_reading_hue
  1373 ;;		_returnHome
  1374 ;;		_send2USART
  1375 ;;		_stop
  1376 ;; This function is called by:
  1377 ;;		Startup code after reset
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text0
  1382   0022C0                     __ptext0:
  1383                           	callstack 0
  1384   0022C0                     _main:
  1385                           	callstack 20
  1386   0022C0                     
  1387                           ;main.c: 31:     ADC_init();
  1388   0022C0  EC1E  F022         	call	_ADC_init	;wreg free
  1389   0022C4                     
  1390                           ;main.c: 32:     color_click_init();
  1391   0022C4  EC75  F020         	call	_color_click_init	;wreg free
  1392   0022C8                     
  1393                           ;main.c: 33:     initUSART4();
  1394   0022C8  EC00  F022         	call	_initUSART4	;wreg free
  1395   0022CC                     
  1396                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
  1397   0022CC  0E00               	movlw	0
  1398   0022CE  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1399   0022D0  0E63               	movlw	99
  1400   0022D2  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1401   0022D4  ECFE  F01B         	call	_initDCmotorsPWM	;wreg free
  1402   0022D8                     
  1403                           ;main.c: 40:     motorL.power = 0;
  1404   0022D8  0E00               	movlw	0
  1405   0022DA  0100               	movlb	0	; () banked
  1406   0022DC  6FD4               	movwf	_motorL& (0+255),b
  1407   0022DE                     
  1408                           ; BSR set to: 0
  1409                           ;main.c: 41:     motorL.direction = 1;
  1410   0022DE  0E01               	movlw	1
  1411   0022E0  6FD5               	movwf	(_motorL+1)& (0+255),b
  1412   0022E2                     
  1413                           ; BSR set to: 0
  1414                           ;main.c: 42:     motorL.brakemode = 1;
  1415   0022E2  0E01               	movlw	1
  1416   0022E4  6FD6               	movwf	(_motorL+2)& (0+255),b
  1417   0022E6                     
  1418                           ; BSR set to: 0
  1419                           ;main.c: 43:     motorL.PWMperiod = PWMcycle;
  1420   0022E6  0E00               	movlw	0
  1421   0022E8  6FD8               	movwf	(_motorL+4)& (0+255),b
  1422   0022EA  0E63               	movlw	99
  1423   0022EC  6FD7               	movwf	(_motorL+3)& (0+255),b
  1424   0022EE                     
  1425                           ; BSR set to: 0
  1426                           ;main.c: 44:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1427   0022EE  0EAA               	movlw	170
  1428   0022F0  6FD9               	movwf	(_motorL+5)& (0+255),b
  1429   0022F2  0E0F               	movlw	15
  1430   0022F4  6FDA               	movwf	(_motorL+6)& (0+255),b
  1431   0022F6                     
  1432                           ; BSR set to: 0
  1433                           ;main.c: 45:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1434   0022F6  0EA6               	movlw	166
  1435   0022F8  6FDB               	movwf	(_motorL+7)& (0+255),b
  1436   0022FA  0E0F               	movlw	15
  1437   0022FC  6FDC               	movwf	(_motorL+8)& (0+255),b
  1438   0022FE                     
  1439                           ; BSR set to: 0
  1440                           ;main.c: 47:     motorR.power = 0;
  1441   0022FE  0E00               	movlw	0
  1442   002300  6FCB               	movwf	_motorR& (0+255),b
  1443   002302                     
  1444                           ; BSR set to: 0
  1445                           ;main.c: 48:     motorR.direction = 1;
  1446   002302  0E01               	movlw	1
  1447   002304  6FCC               	movwf	(_motorR+1)& (0+255),b
  1448   002306                     
  1449                           ; BSR set to: 0
  1450                           ;main.c: 49:     motorR.brakemode = 1;
  1451   002306  0E01               	movlw	1
  1452   002308  6FCD               	movwf	(_motorR+2)& (0+255),b
  1453   00230A                     
  1454                           ; BSR set to: 0
  1455                           ;main.c: 50:     motorR.PWMperiod = PWMcycle;
  1456   00230A  0E00               	movlw	0
  1457   00230C  6FCF               	movwf	(_motorR+4)& (0+255),b
  1458   00230E  0E63               	movlw	99
  1459   002310  6FCE               	movwf	(_motorR+3)& (0+255),b
  1460                           
  1461                           ;main.c: 51:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1462   002312  0E25               	movlw	37
  1463   002314  6FD0               	movwf	(_motorR+5)& (0+255),b
  1464   002316  0E0F               	movlw	15
  1465   002318  6FD1               	movwf	(_motorR+6)& (0+255),b
  1466                           
  1467                           ;main.c: 52:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1468   00231A  0E21               	movlw	33
  1469   00231C  6FD2               	movwf	(_motorR+7)& (0+255),b
  1470   00231E  0E0F               	movlw	15
  1471   002320  6FD3               	movwf	(_motorR+8)& (0+255),b
  1472   002322                     
  1473                           ; BSR set to: 0
  1474                           ;main.c: 55:     LATDbits.LATD7=0;
  1475   002322  9E7C               	bcf	124,7,c	;volatile
  1476   002324                     
  1477                           ; BSR set to: 0
  1478                           ;main.c: 56:     TRISDbits.TRISD7=0;
  1479   002324  9E84               	bcf	132,7,c	;volatile
  1480   002326                     
  1481                           ; BSR set to: 0
  1482                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1483   002326  9087               	bcf	135,0,c	;volatile
  1484   002328                     
  1485                           ; BSR set to: 0
  1486                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1487   002328  907F               	bcf	127,0,c	;volatile
  1488   00232A                     
  1489                           ; BSR set to: 0
  1490                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1491   00232A  9E85               	bcf	133,7,c	;volatile
  1492   00232C                     
  1493                           ; BSR set to: 0
  1494                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1495   00232C  9E7D               	bcf	125,7,c	;volatile
  1496   00232E                     
  1497                           ; BSR set to: 0
  1498                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1499   00232E  9681               	bcf	129,3,c	;volatile
  1500   002330                     
  1501                           ; BSR set to: 0
  1502                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1503   002330  9679               	bcf	121,3,c	;volatile
  1504   002332                     
  1505                           ; BSR set to: 0
  1506                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1507   002332  8686               	bsf	134,3,c	;volatile
  1508   002334                     
  1509                           ; BSR set to: 0
  1510                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1511   002334  010E               	movlb	14	; () banked
  1512   002336  97B4               	bcf	180,3,b	;volatile
  1513   002338                     
  1514                           ; BSR set to: 14
  1515                           ;main.c: 75:     TRISFbits.TRISF2 = 1;
  1516   002338  8486               	bsf	134,2,c	;volatile
  1517   00233A                     
  1518                           ; BSR set to: 14
  1519                           ;main.c: 76:     LATFbits.LATF2 = 0;
  1520   00233A  947E               	bcf	126,2,c	;volatile
  1521   00233C                     
  1522                           ; BSR set to: 14
  1523                           ;main.c: 77:     ANSELFbits.ANSELF2 = 0;
  1524   00233C  95B4               	bcf	180,2,b	;volatile
  1525   00233E                     
  1526                           ; BSR set to: 14
  1527                           ;main.c: 80:     TRISGbits.TRISG1 = 0;
  1528   00233E  9287               	bcf	135,1,c	;volatile
  1529   002340                     
  1530                           ; BSR set to: 14
  1531                           ;main.c: 81:     LATGbits.LATG1 = 0;
  1532   002340  927F               	bcf	127,1,c	;volatile
  1533   002342                     
  1534                           ; BSR set to: 14
  1535                           ;main.c: 84:     unsigned int battery_level;;main.c: 85:     unsigned int red;;main.c: 8
      +                          6:     unsigned int blue;;main.c: 87:     unsigned int green;;main.c: 88:     unsigned i
      +                          nt clear;;main.c: 89:     unsigned int hue;;main.c: 90:     char hue_char[20];;main.c: 9
      +                          1:     unsigned int path_length = 0;
  1536   002342  0E00               	movlw	0
  1537   002344  0100               	movlb	0	; () banked
  1538   002346  6FBB               	movwf	(main@path_length+1)& (0+255),b
  1539   002348  0E00               	movlw	0
  1540   00234A  6FBA               	movwf	main@path_length& (0+255),b
  1541   00234C                     
  1542                           ; BSR set to: 0
  1543                           ;main.c: 95:     TRISHbits.TRISH3 = 0;
  1544   00234C  9688               	bcf	136,3,c	;volatile
  1545   00234E                     
  1546                           ; BSR set to: 0
  1547                           ;main.c: 96:     LATHbits.LATH3 = 1;
  1548   00234E  8680               	bsf	128,3,c	;volatile
  1549   002350                     
  1550                           ; BSR set to: 0
  1551                           ;main.c: 97:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1552   002350  0E19               	movlw	25
  1553   002352  6E4E               	movwf	(??_main+1)^0,c
  1554   002354  0E5A               	movlw	90
  1555   002356  6E4D               	movwf	??_main^0,c
  1556   002358  0EB2               	movlw	178
  1557   00235A                     u5327:
  1558   00235A  2EE8               	decfsz	wreg,f,c
  1559   00235C  D7FE               	bra	u5327
  1560   00235E  2E4D               	decfsz	??_main^0,f,c
  1561   002360  D7FC               	bra	u5327
  1562   002362  2E4E               	decfsz	(??_main+1)^0,f,c
  1563   002364  D7FA               	bra	u5327
  1564   002366                     
  1565                           ;main.c: 98:     LATHbits.LATH3 = 0;
  1566   002366  9680               	bcf	128,3,c	;volatile
  1567   002368                     
  1568                           ;main.c: 102:     calibration_routine(&colorCalibration);
  1569   002368  0EE5               	movlw	low _colorCalibration
  1570   00236A  6E45               	movwf	calibration_routine@cCal^0,c
  1571   00236C  ECBE  F013         	call	_calibration_routine	;wreg free
  1572   002370                     
  1573                           ;main.c: 104:     float maximum = colorCalibration.clear;
  1574   002370  C0EB  F002         	movff	_colorCalibration+6,___xxtofl@val
  1575   002374  C0EC  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1576   002378  6A04               	clrf	(___xxtofl@val+2)^0,c
  1577   00237A  6A05               	clrf	(___xxtofl@val+3)^0,c
  1578   00237C  0E00               	movlw	0
  1579   00237E  ECA7  F014         	call	___xxtofl
  1580   002382  C002  F0AC         	movff	?___xxtofl,main@maximum
  1581   002386  C003  F0AD         	movff	?___xxtofl+1,main@maximum+1
  1582   00238A  C004  F0AE         	movff	?___xxtofl+2,main@maximum+2
  1583   00238E  C005  F0AF         	movff	?___xxtofl+3,main@maximum+3
  1584   002392                     l5954:
  1585                           
  1586                           ;main.c: 110:         LATGbits.LATG0 = 1;
  1587   002392  807F               	bsf	127,0,c	;volatile
  1588   002394                     
  1589                           ;main.c: 111:         LATEbits.LATE7 = 1;
  1590   002394  8E7D               	bsf	125,7,c	;volatile
  1591   002396                     
  1592                           ;main.c: 112:         LATAbits.LATA3 = 1;
  1593   002396  8679               	bsf	121,3,c	;volatile
  1594   002398                     
  1595                           ;main.c: 115:         fullSpeedAhead(&motorL,&motorR);
  1596   002398  0ED4               	movlw	low _motorL
  1597   00239A  6E14               	movwf	fullSpeedAhead@mL^0,c
  1598   00239C  0ECB               	movlw	low _motorR
  1599   00239E  6E15               	movwf	fullSpeedAhead@mR^0,c
  1600   0023A0  EC0B  F01D         	call	_fullSpeedAhead	;wreg free
  1601   0023A4                     
  1602                           ;main.c: 116:         T0CON0bits.T0EN=1;
  1603   0023A4  8ED5               	bsf	213,7,c	;volatile
  1604   0023A6                     
  1605                           ;main.c: 118:         (colorCurrent.clear) = color_read_Clear();
  1606   0023A6  EC42  F01E         	call	_color_read_Clear	;wreg free
  1607   0023AA  C006  F0E3         	movff	?_color_read_Clear,_colorCurrent+6
  1608   0023AE  C007  F0E4         	movff	?_color_read_Clear+1,_colorCurrent+7
  1609   0023B2                     
  1610                           ;main.c: 119:         current = colorCurrent.clear;
  1611   0023B2  C0E3  F002         	movff	_colorCurrent+6,___xxtofl@val
  1612   0023B6  C0E4  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1613   0023BA  6A04               	clrf	(___xxtofl@val+2)^0,c
  1614   0023BC  6A05               	clrf	(___xxtofl@val+3)^0,c
  1615   0023BE  0E00               	movlw	0
  1616   0023C0  ECA7  F014         	call	___xxtofl
  1617   0023C4  C002  F0B0         	movff	?___xxtofl,main@current
  1618   0023C8  C003  F0B1         	movff	?___xxtofl+1,main@current+1
  1619   0023CC  C004  F0B2         	movff	?___xxtofl+2,main@current+2
  1620   0023D0  C005  F0B3         	movff	?___xxtofl+3,main@current+3
  1621   0023D4                     
  1622                           ;main.c: 121:         clear_norm = (current)*100/(maximum);
  1623   0023D4  C0AC  F01F         	movff	main@maximum,___fldiv@a
  1624   0023D8  C0AD  F020         	movff	main@maximum+1,___fldiv@a+1
  1625   0023DC  C0AE  F021         	movff	main@maximum+2,___fldiv@a+2
  1626   0023E0  C0AF  F022         	movff	main@maximum+3,___fldiv@a+3
  1627   0023E4  0E00               	movlw	0
  1628   0023E6  6E06               	movwf	___flmul@a^0,c
  1629   0023E8  0E00               	movlw	0
  1630   0023EA  6E07               	movwf	(___flmul@a+1)^0,c
  1631   0023EC  0EC8               	movlw	200
  1632   0023EE  6E08               	movwf	(___flmul@a+2)^0,c
  1633   0023F0  0E42               	movlw	66
  1634   0023F2  6E09               	movwf	(___flmul@a+3)^0,c
  1635   0023F4  C0B0  F002         	movff	main@current,___flmul@b
  1636   0023F8  C0B1  F003         	movff	main@current+1,___flmul@b+1
  1637   0023FC  C0B2  F004         	movff	main@current+2,___flmul@b+2
  1638   002400  C0B3  F005         	movff	main@current+3,___flmul@b+3
  1639   002404  EC7E  F00D         	call	___flmul	;wreg free
  1640   002408  C002  F01B         	movff	?___flmul,___fldiv@b
  1641   00240C  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1642   002410  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1643   002414  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1644   002418  EC93  F00F         	call	___fldiv	;wreg free
  1645   00241C  C01B  F034         	movff	?___fldiv,___fltol@f1
  1646   002420  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1647   002424  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1648   002428  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1649   00242C  ECAB  F017         	call	___fltol	;wreg free
  1650   002430  C034  F0B8         	movff	?___fltol,main@clear_norm
  1651   002434  C035  F0B9         	movff	?___fltol+1,main@clear_norm+1
  1652   002438                     
  1653                           ;main.c: 124:         if (clear_norm > 8){
  1654   002438  0100               	movlb	0	; () banked
  1655   00243A  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1656   00243C  E109               	bnz	u5280
  1657   00243E  0E09               	movlw	9
  1658   002440  5DB8               	subwf	main@clear_norm& (0+255),w,b
  1659   002442  A0D8               	btfss	status,0,c
  1660   002444  EF26  F012         	goto	u5281
  1661   002448  EF28  F012         	goto	u5280
  1662   00244C                     u5281:
  1663   00244C  EFC9  F011         	goto	l5954
  1664   002450                     u5280:
  1665   002450                     
  1666                           ; BSR set to: 0
  1667                           ;main.c: 126:             stop(&motorL,&motorR);
  1668   002450  0ED4               	movlw	low _motorL
  1669   002452  6E14               	movwf	stop@mL^0,c
  1670   002454  0ECB               	movlw	low _motorR
  1671   002456  6E15               	movwf	stop@mR^0,c
  1672   002458  EC46  F01C         	call	_stop	;wreg free
  1673   00245C                     
  1674                           ;main.c: 128:             int time = get16bitTMR0val();
  1675   00245C  ECDF  F021         	call	_get16bitTMR0val	;wreg free
  1676   002460  C002  F0B6         	movff	?_get16bitTMR0val,main@time
  1677   002464  C003  F0B7         	movff	?_get16bitTMR0val+1,main@time+1
  1678   002468                     
  1679                           ;main.c: 129:             T0CON0bits.T0EN=0;
  1680   002468  9ED5               	bcf	213,7,c	;volatile
  1681   00246A                     
  1682                           ;main.c: 130:             logAction('F',time, path_length);
  1683   00246A  C0B6  F008         	movff	main@time,logAction@time
  1684   00246E  C0B7  F009         	movff	main@time+1,logAction@time+1
  1685   002472  C0BA  F00A         	movff	main@path_length,logAction@pathLength
  1686   002476  C0BB  F00B         	movff	main@path_length+1,logAction@pathLength+1
  1687   00247A  0E46               	movlw	70
  1688   00247C  ECBD  F01D         	call	_logAction
  1689   002480                     
  1690                           ;main.c: 131:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1691   002480  0E11               	movlw	17
  1692   002482  6E4E               	movwf	(??_main+1)^0,c
  1693   002484  0E3C               	movlw	60
  1694   002486  6E4D               	movwf	??_main^0,c
  1695   002488  0ECB               	movlw	203
  1696   00248A                     u5337:
  1697   00248A  2EE8               	decfsz	wreg,f,c
  1698   00248C  D7FE               	bra	u5337
  1699   00248E  2E4D               	decfsz	??_main^0,f,c
  1700   002490  D7FC               	bra	u5337
  1701   002492  2E4E               	decfsz	(??_main+1)^0,f,c
  1702   002494  D7FA               	bra	u5337
  1703   002496  0000               	nop	
  1704   002498                     
  1705                           ;main.c: 134:             fullSpeedAhead(&motorL,&motorR);
  1706   002498  0ED4               	movlw	low _motorL
  1707   00249A  6E14               	movwf	fullSpeedAhead@mL^0,c
  1708   00249C  0ECB               	movlw	low _motorR
  1709   00249E  6E15               	movwf	fullSpeedAhead@mR^0,c
  1710   0024A0  EC0B  F01D         	call	_fullSpeedAhead	;wreg free
  1711   0024A4                     
  1712                           ;main.c: 135:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1713   0024A4  0E09               	movlw	9
  1714   0024A6  6E4E               	movwf	(??_main+1)^0,c
  1715   0024A8  0E1E               	movlw	30
  1716   0024AA  6E4D               	movwf	??_main^0,c
  1717   0024AC  0EE4               	movlw	228
  1718   0024AE                     u5347:
  1719   0024AE  2EE8               	decfsz	wreg,f,c
  1720   0024B0  D7FE               	bra	u5347
  1721   0024B2  2E4D               	decfsz	??_main^0,f,c
  1722   0024B4  D7FC               	bra	u5347
  1723   0024B6  2E4E               	decfsz	(??_main+1)^0,f,c
  1724   0024B8  D7FA               	bra	u5347
  1725   0024BA  D000               	nop2	
  1726   0024BC                     
  1727                           ;main.c: 136:             stop(&motorL,&motorR);
  1728   0024BC  0ED4               	movlw	low _motorL
  1729   0024BE  6E14               	movwf	stop@mL^0,c
  1730   0024C0  0ECB               	movlw	low _motorR
  1731   0024C2  6E15               	movwf	stop@mR^0,c
  1732   0024C4  EC46  F01C         	call	_stop	;wreg free
  1733   0024C8                     
  1734                           ;main.c: 137:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1735   0024C8  0E19               	movlw	25
  1736   0024CA  6E4E               	movwf	(??_main+1)^0,c
  1737   0024CC  0E5A               	movlw	90
  1738   0024CE  6E4D               	movwf	??_main^0,c
  1739   0024D0  0EB2               	movlw	178
  1740   0024D2                     u5357:
  1741   0024D2  2EE8               	decfsz	wreg,f,c
  1742   0024D4  D7FE               	bra	u5357
  1743   0024D6  2E4D               	decfsz	??_main^0,f,c
  1744   0024D8  D7FC               	bra	u5357
  1745   0024DA  2E4E               	decfsz	(??_main+1)^0,f,c
  1746   0024DC  D7FA               	bra	u5357
  1747   0024DE                     
  1748                           ;main.c: 139:             if (clear_norm > 65 || LATGbits.LATG1 == 1){
  1749   0024DE  0100               	movlb	0	; () banked
  1750   0024E0  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1751   0024E2  E107               	bnz	u5291
  1752   0024E4  0E42               	movlw	66
  1753   0024E6  5DB8               	subwf	main@clear_norm& (0+255),w,b
  1754   0024E8  B0D8               	btfsc	status,0,c
  1755   0024EA  EF79  F012         	goto	u5291
  1756   0024EE  EF7B  F012         	goto	u5290
  1757   0024F2                     u5291:
  1758   0024F2  EF82  F012         	goto	l5994
  1759   0024F6                     u5290:
  1760   0024F6                     
  1761                           ; BSR set to: 0
  1762   0024F6  A27F               	btfss	127,1,c	;volatile
  1763   0024F8  EF80  F012         	goto	u5301
  1764   0024FC  EF82  F012         	goto	u5300
  1765   002500                     u5301:
  1766   002500  EF97  F012         	goto	l6002
  1767   002504                     u5300:
  1768   002504                     l5994:
  1769   002504                     
  1770                           ; BSR set to: 0
  1771                           ;main.c: 142:                 send2USART(white);
  1772   002504  0E00               	movlw	0
  1773   002506  6E46               	movwf	(send2USART@hue+1)^0,c
  1774   002508  0E08               	movlw	8
  1775   00250A  6E45               	movwf	send2USART@hue^0,c
  1776   00250C  EC0F  F022         	call	_send2USART	;wreg free
  1777   002510                     
  1778                           ;main.c: 143:                 returnHome(&motorL, &motorR, &path, path_length);
  1779   002510  0ED4               	movlw	low _motorL
  1780   002512  6E21               	movwf	returnHome@mL^0,c
  1781   002514  0ECB               	movlw	low _motorR
  1782   002516  6E22               	movwf	returnHome@mR^0,c
  1783   002518  0E00               	movlw	low _path
  1784   00251A  6E23               	movwf	returnHome@path^0,c
  1785   00251C  0E02               	movlw	high _path
  1786   00251E  6E24               	movwf	(returnHome@path+1)^0,c
  1787   002520  C0BA  F025         	movff	main@path_length,returnHome@pathLength
  1788   002524  C0BB  F026         	movff	main@path_length+1,returnHome@pathLength+1
  1789   002528  ECFA  F019         	call	_returnHome	;wreg free
  1790   00252C                     
  1791                           ;main.c: 144:                 LATGbits.LATG1 = 0;
  1792   00252C  927F               	bcf	127,1,c	;volatile
  1793   00252E                     l6002:
  1794                           
  1795                           ;main.c: 147:             hue = reading_hue(&colorCurrent);
  1796   00252E  0EDD               	movlw	low _colorCurrent
  1797   002530  6E42               	movwf	reading_hue@cCurr^0,c
  1798   002532  ECB0  F018         	call	_reading_hue	;wreg free
  1799   002536  C042  F0B4         	movff	?_reading_hue,main@hue
  1800   00253A  C043  F0B5         	movff	?_reading_hue+1,main@hue+1
  1801   00253E                     
  1802                           ;main.c: 148:             decision(hue, path_length);
  1803   00253E  C0B4  F047         	movff	main@hue,decision@hue
  1804   002542  C0B5  F048         	movff	main@hue+1,decision@hue+1
  1805   002546  C0BA  F049         	movff	main@path_length,decision@path_length
  1806   00254A  C0BB  F04A         	movff	main@path_length+1,decision@path_length+1
  1807   00254E  ECAD  F012         	call	_decision	;wreg free
  1808   002552  EFC9  F011         	goto	l5954
  1809   002556  EF1D  F000         	goto	start
  1810   00255A                     __end_of_main:
  1811                           	callstack 0
  1812                           
  1813 ;; *************** function _returnHome *****************
  1814 ;; Defined at:
  1815 ;;		line 383 in file "dc_motor.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  1818 ;;		 -> motorL(9), 
  1819 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  1820 ;;		 -> motorR(9), 
  1821 ;;  path            2   34[COMRAM] PTR PTR struct PathStep
  1822 ;;		 -> path(250), 
  1823 ;;  pathLength      2   36[COMRAM] int 
  1824 ;; Auto vars:     Size  Location     Type
  1825 ;;  time            2   40[COMRAM] unsigned int 
  1826 ;;  action          1   42[COMRAM] unsigned char 
  1827 ;;  i               2   43[COMRAM] int 
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      void 
  1830 ;; Registers used:
  1831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1837 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1838 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1839 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1840 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1841 ;;Total ram usage:       13 bytes
  1842 ;; Hardware stack levels used: 1
  1843 ;; Hardware stack levels required when called: 6
  1844 ;; This function calls:
  1845 ;;		_moveWhite
  1846 ;;		_reverseStraight
  1847 ;;		_reverseTurn
  1848 ;; This function is called by:
  1849 ;;		_main
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           	psect	text1
  1854   0033F4                     __ptext1:
  1855                           	callstack 0
  1856   0033F4                     _returnHome:
  1857                           	callstack 24
  1858   0033F4                     
  1859                           ;dc_motor.c: 383: void returnHome(struct DC_motor *mL, struct DC_motor *mR, struct PathS
      +                          tep *path[], int pathLength);dc_motor.c: 384: {;dc_motor.c: 386:     LATGbits.LATG0 = 0;
  1860   0033F4  907F               	bcf	127,0,c	;volatile
  1861                           
  1862                           ;dc_motor.c: 387:     LATEbits.LATE7 = 0;
  1863   0033F6  9E7D               	bcf	125,7,c	;volatile
  1864                           
  1865                           ;dc_motor.c: 388:     LATAbits.LATA3 = 0;
  1866   0033F8  9679               	bcf	121,3,c	;volatile
  1867   0033FA                     
  1868                           ;dc_motor.c: 390:     moveWhite(&motorL,&motorR);
  1869   0033FA  0ED4               	movlw	low _motorL
  1870   0033FC  6E1D               	movwf	moveWhite@mL^0,c
  1871   0033FE  0ECB               	movlw	low _motorR
  1872   003400  6E1E               	movwf	moveWhite@mR^0,c
  1873   003402  ECC3  F020         	call	_moveWhite	;wreg free
  1874   003406                     
  1875                           ;dc_motor.c: 392:     for (int i = pathLength; i >= 0; i--) {
  1876   003406  C025  F02C         	movff	returnHome@pathLength,returnHome@i
  1877   00340A  C026  F02D         	movff	returnHome@pathLength+1,returnHome@i+1
  1878   00340E                     l5862:
  1879   00340E  BE2D               	btfsc	(returnHome@i+1)^0,7,c
  1880   003410  EF0E  F01A         	goto	u5260
  1881   003414  EF0C  F01A         	goto	u5261
  1882   003418                     u5261:
  1883   003418  EF10  F01A         	goto	l5866
  1884   00341C                     u5260:
  1885   00341C  EF58  F01A         	goto	l510
  1886   003420                     l5866:
  1887                           
  1888                           ;dc_motor.c: 393:         char action = path[i]->action;
  1889   003420  90D8               	bcf	status,0,c
  1890   003422  342C               	rlcf	returnHome@i^0,w,c
  1891   003424  6ED9               	movwf	fsr2l,c
  1892   003426  342D               	rlcf	(returnHome@i+1)^0,w,c
  1893   003428  6EDA               	movwf	fsr2h,c
  1894   00342A  5023               	movf	returnHome@path^0,w,c
  1895   00342C  26D9               	addwf	fsr2l,f,c
  1896   00342E  5024               	movf	(returnHome@path+1)^0,w,c
  1897   003430  22DA               	addwfc	fsr2h,f,c
  1898   003432  CFDE F027          	movff	postinc2,??_returnHome
  1899   003436  CFDD F028          	movff	postdec2,??_returnHome+1
  1900   00343A  C027  FFD9         	movff	??_returnHome,fsr2l
  1901   00343E  C028  FFDA         	movff	??_returnHome+1,fsr2h
  1902   003442  50DF               	movf	indf2,w,c
  1903   003444  6E2B               	movwf	returnHome@action^0,c
  1904   003446                     
  1905                           ;dc_motor.c: 394:         unsigned int time = path[i]->time;
  1906   003446  90D8               	bcf	status,0,c
  1907   003448  342C               	rlcf	returnHome@i^0,w,c
  1908   00344A  6ED9               	movwf	fsr2l,c
  1909   00344C  342D               	rlcf	(returnHome@i+1)^0,w,c
  1910   00344E  6EDA               	movwf	fsr2h,c
  1911   003450  5023               	movf	returnHome@path^0,w,c
  1912   003452  26D9               	addwf	fsr2l,f,c
  1913   003454  5024               	movf	(returnHome@path+1)^0,w,c
  1914   003456  22DA               	addwfc	fsr2h,f,c
  1915   003458  EE10 F001          	lfsr	1,1
  1916   00345C  50DE               	movf	postinc2,w,c
  1917   00345E  26E1               	addwf	fsr1l,f,c
  1918   003460  50DD               	movf	postdec2,w,c
  1919   003462  22E2               	addwfc	fsr1h,f,c
  1920   003464  CFE6 F029          	movff	postinc1,returnHome@time
  1921   003468  CFE5 F02A          	movff	postdec1,returnHome@time+1
  1922   00346C                     
  1923                           ;dc_motor.c: 396:         if (action == 'F'){reverseStraight(mL, mR, time);}
  1924   00346C  0E46               	movlw	70
  1925   00346E  182B               	xorwf	returnHome@action^0,w,c
  1926   003470  A4D8               	btfss	status,2,c
  1927   003472  EF3D  F01A         	goto	u5271
  1928   003476  EF3F  F01A         	goto	u5270
  1929   00347A                     u5271:
  1930   00347A  EF4B  F01A         	goto	l5874
  1931   00347E                     u5270:
  1932   00347E  C021  F019         	movff	returnHome@mL,reverseStraight@mL
  1933   003482  C022  F01A         	movff	returnHome@mR,reverseStraight@mR
  1934   003486  C029  F01B         	movff	returnHome@time,reverseStraight@time
  1935   00348A  C02A  F01C         	movff	returnHome@time+1,reverseStraight@time+1
  1936   00348E  EC25  F019         	call	_reverseStraight	;wreg free
  1937   003492  EF53  F01A         	goto	l5876
  1938   003496                     l5874:
  1939   003496  C021  F01D         	movff	returnHome@mL,reverseTurn@mL
  1940   00349A  C022  F01E         	movff	returnHome@mR,reverseTurn@mR
  1941   00349E  C02B  F01F         	movff	returnHome@action,reverseTurn@turnDirection
  1942   0034A2  ECB1  F01F         	call	_reverseTurn	;wreg free
  1943   0034A6                     l5876:
  1944                           
  1945                           ;dc_motor.c: 400:     }
  1946   0034A6  062C               	decf	returnHome@i^0,f,c
  1947   0034A8  A0D8               	btfss	status,0,c
  1948   0034AA  062D               	decf	(returnHome@i+1)^0,f,c
  1949   0034AC  EF07  F01A         	goto	l5862
  1950   0034B0                     l510:
  1951   0034B0  0003               	sleep		;# 
  1952   0034B2  0012               	return		;funcret
  1953   0034B4                     __end_of_returnHome:
  1954                           	callstack 0
  1955                           
  1956 ;; *************** function _reverseTurn *****************
  1957 ;; Defined at:
  1958 ;;		line 345 in file "dc_motor.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  1961 ;;		 -> motorL(9), 
  1962 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  1963 ;;		 -> motorR(9), 
  1964 ;;  turnDirectio    1   30[COMRAM] unsigned char 
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1976 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1979 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1980 ;;Total ram usage:        3 bytes
  1981 ;; Hardware stack levels used: 1
  1982 ;; Hardware stack levels required when called: 5
  1983 ;; This function calls:
  1984 ;;		_left135
  1985 ;;		_right135
  1986 ;;		_turn180
  1987 ;;		_turnLeft
  1988 ;;		_turnRight
  1989 ;; This function is called by:
  1990 ;;		_returnHome
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text2
  1995   003F62                     __ptext2:
  1996                           	callstack 0
  1997   003F62                     _reverseTurn:
  1998                           	callstack 24
  1999   003F62                     
  2000                           ;dc_motor.c: 346:     if (turnDirection == 'R') {
  2001   003F62  0E52               	movlw	82
  2002   003F64  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  2003   003F66  A4D8               	btfss	status,2,c
  2004   003F68  EFB8  F01F         	goto	u4991
  2005   003F6C  EFBA  F01F         	goto	u4990
  2006   003F70                     u4991:
  2007   003F70  EFC2  F01F         	goto	l5664
  2008   003F74                     u4990:
  2009   003F74                     
  2010                           ;dc_motor.c: 347:         turnLeft(mL, mR);
  2011   003F74  C01D  F014         	movff	reverseTurn@mL,turnLeft@mL
  2012   003F78  C01E  F015         	movff	reverseTurn@mR,turnLeft@mR
  2013   003F7C  ECCC  F01C         	call	_turnLeft	;wreg free
  2014                           
  2015                           ;dc_motor.c: 348:     } else if (turnDirection == 'L') {
  2016   003F80  EFD3  F01F         	goto	l494
  2017   003F84                     l5664:
  2018   003F84  0E4C               	movlw	76
  2019   003F86  181F               	xorwf	reverseTurn@turnDirection^0,w,c
  2020   003F88  A4D8               	btfss	status,2,c
  2021   003F8A  EFC9  F01F         	goto	u5001
  2022   003F8E  EFCB  F01F         	goto	u5000
  2023   003F92                     u5001:
  2024   003F92  EFD3  F01F         	goto	l493
  2025   003F96                     u5000:
  2026   003F96                     
  2027                           ;dc_motor.c: 349:         turnRight(mL, mR);
  2028   003F96  C01D  F014         	movff	reverseTurn@mL,turnRight@mL
  2029   003F9A  C01E  F015         	movff	reverseTurn@mR,turnRight@mR
  2030   003F9E  EC8D  F01C         	call	_turnRight	;wreg free
  2031                           
  2032                           ;dc_motor.c: 350:     } else if (turnDirection == '180') {
  2033   003FA2  EFD3  F01F         	goto	l494
  2034   003FA6                     l493:
  2035   003FA6                     l494:
  2036   003FA6  0012               	return		;funcret
  2037   003FA8                     __end_of_reverseTurn:
  2038                           	callstack 0
  2039                           
  2040 ;; *************** function _reverseStraight *****************
  2041 ;; Defined at:
  2042 ;;		line 368 in file "dc_motor.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  2045 ;;		 -> motorL(9), 
  2046 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  2047 ;;		 -> motorR(9), 
  2048 ;;  time            2   26[COMRAM] int 
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;  delayMs         2   28[COMRAM] int 
  2051 ;; Return value:  Size  Location     Type
  2052 ;;                  1    wreg      void 
  2053 ;; Registers used:
  2054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2060 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2061 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2063 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2064 ;;Total ram usage:        6 bytes
  2065 ;; Hardware stack levels used: 1
  2066 ;; Hardware stack levels required when called: 4
  2067 ;; This function calls:
  2068 ;;		_customDelayMs
  2069 ;;		_fullSpeedAhead
  2070 ;;		_stop
  2071 ;; This function is called by:
  2072 ;;		_returnHome
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text3
  2077   00324A                     __ptext3:
  2078                           	callstack 0
  2079   00324A                     _reverseStraight:
  2080                           	callstack 25
  2081   00324A                     
  2082                           ;dc_motor.c: 370:     int delayMs;;dc_motor.c: 373:     if (time<5500 && time>6100){dela
      +                          yMs = 3000; }
  2083   00324A  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2084   00324C  EF33  F019         	goto	u5010
  2085   003250  0E7C               	movlw	124
  2086   003252  5C1B               	subwf	reverseStraight@time^0,w,c
  2087   003254  0E15               	movlw	21
  2088   003256  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2089   003258  B0D8               	btfsc	status,0,c
  2090   00325A  EF31  F019         	goto	u5011
  2091   00325E  EF33  F019         	goto	u5010
  2092   003262                     u5011:
  2093   003262  EF45  F019         	goto	l5680
  2094   003266                     u5010:
  2095   003266  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2096   003268  EF3F  F019         	goto	u5021
  2097   00326C  0ED5               	movlw	213
  2098   00326E  5C1B               	subwf	reverseStraight@time^0,w,c
  2099   003270  0E17               	movlw	23
  2100   003272  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2101   003274  A0D8               	btfss	status,0,c
  2102   003276  EF3F  F019         	goto	u5021
  2103   00327A  EF41  F019         	goto	u5020
  2104   00327E                     u5021:
  2105   00327E  EF45  F019         	goto	l5680
  2106   003282                     u5020:
  2107   003282  0E0B               	movlw	11
  2108   003284  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2109   003286  0EB8               	movlw	184
  2110   003288  6E1D               	movwf	reverseStraight@delayMs^0,c
  2111   00328A                     l5680:
  2112                           
  2113                           ;dc_motor.c: 374:     if (time<3700 && time>4100){delayMs = 2000; }
  2114   00328A  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2115   00328C  EF53  F019         	goto	u5030
  2116   003290  0E74               	movlw	116
  2117   003292  5C1B               	subwf	reverseStraight@time^0,w,c
  2118   003294  0E0E               	movlw	14
  2119   003296  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2120   003298  B0D8               	btfsc	status,0,c
  2121   00329A  EF51  F019         	goto	u5031
  2122   00329E  EF53  F019         	goto	u5030
  2123   0032A2                     u5031:
  2124   0032A2  EF65  F019         	goto	l5686
  2125   0032A6                     u5030:
  2126   0032A6  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2127   0032A8  EF5F  F019         	goto	u5041
  2128   0032AC  0E05               	movlw	5
  2129   0032AE  5C1B               	subwf	reverseStraight@time^0,w,c
  2130   0032B0  0E10               	movlw	16
  2131   0032B2  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2132   0032B4  A0D8               	btfss	status,0,c
  2133   0032B6  EF5F  F019         	goto	u5041
  2134   0032BA  EF61  F019         	goto	u5040
  2135   0032BE                     u5041:
  2136   0032BE  EF65  F019         	goto	l5686
  2137   0032C2                     u5040:
  2138   0032C2  0E07               	movlw	7
  2139   0032C4  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2140   0032C6  0ED0               	movlw	208
  2141   0032C8  6E1D               	movwf	reverseStraight@delayMs^0,c
  2142   0032CA                     l5686:
  2143                           
  2144                           ;dc_motor.c: 375:     if (time<1700 && time>2100){delayMs = 1000;}
  2145   0032CA  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2146   0032CC  EF73  F019         	goto	u5050
  2147   0032D0  0EA4               	movlw	164
  2148   0032D2  5C1B               	subwf	reverseStraight@time^0,w,c
  2149   0032D4  0E06               	movlw	6
  2150   0032D6  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2151   0032D8  B0D8               	btfsc	status,0,c
  2152   0032DA  EF71  F019         	goto	u5051
  2153   0032DE  EF73  F019         	goto	u5050
  2154   0032E2                     u5051:
  2155   0032E2  EF85  F019         	goto	l5692
  2156   0032E6                     u5050:
  2157   0032E6  BE1C               	btfsc	(reverseStraight@time+1)^0,7,c
  2158   0032E8  EF7F  F019         	goto	u5061
  2159   0032EC  0E35               	movlw	53
  2160   0032EE  5C1B               	subwf	reverseStraight@time^0,w,c
  2161   0032F0  0E08               	movlw	8
  2162   0032F2  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2163   0032F4  A0D8               	btfss	status,0,c
  2164   0032F6  EF7F  F019         	goto	u5061
  2165   0032FA  EF81  F019         	goto	u5060
  2166   0032FE                     u5061:
  2167   0032FE  EF85  F019         	goto	l5692
  2168   003302                     u5060:
  2169   003302  0E03               	movlw	3
  2170   003304  6E1E               	movwf	(reverseStraight@delayMs+1)^0,c
  2171   003306  0EE8               	movlw	232
  2172   003308  6E1D               	movwf	reverseStraight@delayMs^0,c
  2173   00330A                     l5692:
  2174                           
  2175                           ;dc_motor.c: 377:     fullSpeedAhead(mL, mR);
  2176   00330A  C019  F014         	movff	reverseStraight@mL,fullSpeedAhead@mL
  2177   00330E  C01A  F015         	movff	reverseStraight@mR,fullSpeedAhead@mR
  2178   003312  EC0B  F01D         	call	_fullSpeedAhead	;wreg free
  2179   003316                     
  2180                           ;dc_motor.c: 378:     customDelayMs(delayMs);
  2181   003316  C01D  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2182   00331A  C01E  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2183   00331E  EC59  F020         	call	_customDelayMs	;wreg free
  2184   003322                     
  2185                           ;dc_motor.c: 379:     stop(mL, mR);
  2186   003322  C019  F014         	movff	reverseStraight@mL,stop@mL
  2187   003326  C01A  F015         	movff	reverseStraight@mR,stop@mR
  2188   00332A  EC46  F01C         	call	_stop	;wreg free
  2189   00332E  0012               	return		;funcret
  2190   003330                     __end_of_reverseStraight:
  2191                           	callstack 0
  2192                           
  2193 ;; *************** function _fullSpeedAhead *****************
  2194 ;; Defined at:
  2195 ;;		line 144 in file "dc_motor.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  2198 ;;		 -> motorL(9), 
  2199 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  2200 ;;		 -> motorR(9), 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  power           2   22[COMRAM] int 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2212 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2214 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2215 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2216 ;;Total ram usage:        5 bytes
  2217 ;; Hardware stack levels used: 1
  2218 ;; Hardware stack levels required when called: 3
  2219 ;; This function calls:
  2220 ;;		_setMotorPWM
  2221 ;; This function is called by:
  2222 ;;		_main
  2223 ;;		_reverseStraight
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text4
  2228   003A16                     __ptext4:
  2229                           	callstack 0
  2230   003A16                     _fullSpeedAhead:
  2231                           	callstack 25
  2232   003A16                     
  2233                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2234   003A16  5014               	movf	fullSpeedAhead@mL^0,w,c
  2235   003A18  6ED9               	movwf	fsr2l,c
  2236   003A1A  6ADA               	clrf	fsr2h,c
  2237   003A1C  0E01               	movlw	1
  2238   003A1E  26D9               	addwf	fsr2l,f,c
  2239   003A20  0E01               	movlw	1
  2240   003A22  6EDF               	movwf	indf2,c
  2241                           
  2242                           ;dc_motor.c: 148:     mR->direction = 1;
  2243   003A24  5015               	movf	fullSpeedAhead@mR^0,w,c
  2244   003A26  6ED9               	movwf	fsr2l,c
  2245   003A28  6ADA               	clrf	fsr2h,c
  2246   003A2A  0E01               	movlw	1
  2247   003A2C  26D9               	addwf	fsr2l,f,c
  2248   003A2E  0E01               	movlw	1
  2249   003A30  6EDF               	movwf	indf2,c
  2250   003A32                     
  2251                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2252   003A32  0E00               	movlw	0
  2253   003A34  6E18               	movwf	(fullSpeedAhead@power+1)^0,c
  2254   003A36  0E00               	movlw	0
  2255   003A38  6E17               	movwf	fullSpeedAhead@power^0,c
  2256   003A3A                     l5506:
  2257                           
  2258                           ;dc_motor.c: 151:         mL->power = power;
  2259   003A3A  5014               	movf	fullSpeedAhead@mL^0,w,c
  2260   003A3C  6ED9               	movwf	fsr2l,c
  2261   003A3E  6ADA               	clrf	fsr2h,c
  2262   003A40  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2263                           
  2264                           ;dc_motor.c: 152:         mR->power = power;
  2265   003A44  5015               	movf	fullSpeedAhead@mR^0,w,c
  2266   003A46  6ED9               	movwf	fsr2l,c
  2267   003A48  6ADA               	clrf	fsr2h,c
  2268   003A4A  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2269   003A4E                     
  2270                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2271   003A4E  C014  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2272   003A52  EC01  F017         	call	_setMotorPWM	;wreg free
  2273   003A56                     
  2274                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2275   003A56  C015  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2276   003A5A  EC01  F017         	call	_setMotorPWM	;wreg free
  2277   003A5E                     
  2278                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2279   003A5E  0E0B               	movlw	11
  2280   003A60  6E16               	movwf	??_fullSpeedAhead^0,c
  2281   003A62  0E62               	movlw	98
  2282   003A64                     u5367:
  2283   003A64  2EE8               	decfsz	wreg,f,c
  2284   003A66  D7FE               	bra	u5367
  2285   003A68  2E16               	decfsz	??_fullSpeedAhead^0,f,c
  2286   003A6A  D7FC               	bra	u5367
  2287   003A6C  D000               	nop2	
  2288   003A6E                     
  2289                           ;dc_motor.c: 160:     }
  2290   003A6E  4A17               	infsnz	fullSpeedAhead@power^0,f,c
  2291   003A70  2A18               	incf	(fullSpeedAhead@power+1)^0,f,c
  2292   003A72  BE18               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2293   003A74  EF45  F01D         	goto	u4971
  2294   003A78  5018               	movf	(fullSpeedAhead@power+1)^0,w,c
  2295   003A7A  E109               	bnz	u4970
  2296   003A7C  0E33               	movlw	51
  2297   003A7E  5C17               	subwf	fullSpeedAhead@power^0,w,c
  2298   003A80  A0D8               	btfss	status,0,c
  2299   003A82  EF45  F01D         	goto	u4971
  2300   003A86  EF47  F01D         	goto	u4970
  2301   003A8A                     u4971:
  2302   003A8A  EF1D  F01D         	goto	l5506
  2303   003A8E                     u4970:
  2304   003A8E  0012               	return		;funcret
  2305   003A90                     __end_of_fullSpeedAhead:
  2306                           	callstack 0
  2307                           
  2308 ;; *************** function _customDelayMs *****************
  2309 ;; Defined at:
  2310 ;;		line 361 in file "dc_motor.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;  i               2    4[COMRAM] unsigned int 
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  1    wreg      void 
  2317 ;; Registers used:
  2318 ;;		wreg, status,2, status,0
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2324 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2325 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2326 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2327 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2328 ;;Total ram usage:        5 bytes
  2329 ;; Hardware stack levels used: 1
  2330 ;; Hardware stack levels required when called: 1
  2331 ;; This function calls:
  2332 ;;		Nothing
  2333 ;; This function is called by:
  2334 ;;		_reverseStraight
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           	psect	text5
  2339   0040B2                     __ptext5:
  2340                           	callstack 0
  2341   0040B2                     _customDelayMs:
  2342                           	callstack 27
  2343   0040B2                     
  2344                           ;dc_motor.c: 362:     for (unsigned int i = 0; i < milliseconds; i++) {
  2345   0040B2  0E00               	movlw	0
  2346   0040B4  6E06               	movwf	(customDelayMs@i+1)^0,c
  2347   0040B6  0E00               	movlw	0
  2348   0040B8  6E05               	movwf	customDelayMs@i^0,c
  2349   0040BA  EF69  F020         	goto	l497
  2350   0040BE                     l4000:
  2351                           
  2352                           ;dc_motor.c: 363:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2353   0040BE  0E15               	movlw	21
  2354   0040C0  6E04               	movwf	??_customDelayMs^0,c
  2355   0040C2  0EC6               	movlw	198
  2356   0040C4                     u5377:
  2357   0040C4  2EE8               	decfsz	wreg,f,c
  2358   0040C6  D7FE               	bra	u5377
  2359   0040C8  2E04               	decfsz	??_customDelayMs^0,f,c
  2360   0040CA  D7FC               	bra	u5377
  2361   0040CC  D000               	nop2	
  2362   0040CE                     
  2363                           ;dc_motor.c: 364:     }
  2364   0040CE  4A05               	infsnz	customDelayMs@i^0,f,c
  2365   0040D0  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2366   0040D2                     l497:
  2367   0040D2  5002               	movf	customDelayMs@milliseconds^0,w,c
  2368   0040D4  5C05               	subwf	customDelayMs@i^0,w,c
  2369   0040D6  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2370   0040D8  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2371   0040DA  A0D8               	btfss	status,0,c
  2372   0040DC  EF72  F020         	goto	u3221
  2373   0040E0  EF74  F020         	goto	u3220
  2374   0040E4                     u3221:
  2375   0040E4  EF5F  F020         	goto	l4000
  2376   0040E8                     u3220:
  2377   0040E8  0012               	return		;funcret
  2378   0040EA                     __end_of_customDelayMs:
  2379                           	callstack 0
  2380                           
  2381 ;; *************** function _moveWhite *****************
  2382 ;; Defined at:
  2383 ;;		line 318 in file "dc_motor.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2386 ;;		 -> motorL(9), 
  2387 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2388 ;;		 -> motorR(9), 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;		None
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2400 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2402 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2403 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2404 ;;Total ram usage:        4 bytes
  2405 ;; Hardware stack levels used: 1
  2406 ;; Hardware stack levels required when called: 5
  2407 ;; This function calls:
  2408 ;;		_backHalf
  2409 ;;		_turn180
  2410 ;; This function is called by:
  2411 ;;		_returnHome
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text6
  2416   004186                     __ptext6:
  2417                           	callstack 0
  2418   004186                     _moveWhite:
  2419                           	callstack 24
  2420   004186                     
  2421                           ;dc_motor.c: 318: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          19: {;dc_motor.c: 321:     backHalf(mL,mR);
  2422   004186  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  2423   00418A  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  2424   00418E  EC8B  F021         	call	_backHalf	;wreg free
  2425   004192                     
  2426                           ;dc_motor.c: 322:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2427   004192  0E29               	movlw	41
  2428   004194  6E20               	movwf	(??_moveWhite+1)^0,c
  2429   004196  0E96               	movlw	150
  2430   004198  6E1F               	movwf	??_moveWhite^0,c
  2431   00419A  0E7F               	movlw	127
  2432   00419C                     u5387:
  2433   00419C  2EE8               	decfsz	wreg,f,c
  2434   00419E  D7FE               	bra	u5387
  2435   0041A0  2E1F               	decfsz	??_moveWhite^0,f,c
  2436   0041A2  D7FC               	bra	u5387
  2437   0041A4  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  2438   0041A6  D7FA               	bra	u5387
  2439   0041A8  0000               	nop	
  2440   0041AA                     
  2441                           ;dc_motor.c: 323:     turn180(mL,mR);
  2442   0041AA  C01D  F019         	movff	moveWhite@mL,turn180@mL
  2443   0041AE  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  2444   0041B2  EC59  F021         	call	_turn180	;wreg free
  2445   0041B6  0012               	return		;funcret
  2446   0041B8                     __end_of_moveWhite:
  2447                           	callstack 0
  2448                           
  2449 ;; *************** function _reading_hue *****************
  2450 ;; Defined at:
  2451 ;;		line 90 in file "color.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  cCurr           1   65[COMRAM] PTR struct colors
  2454 ;;		 -> colorCurrent(8), 
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;  led_state      50    0        unsigned char [50]
  2457 ;;  hue             2   69[COMRAM] unsigned int 
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  2   65[COMRAM] unsigned int 
  2460 ;; Registers used:
  2461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2467 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2468 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2469 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2470 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;Total ram usage:        6 bytes
  2472 ;; Hardware stack levels used: 1
  2473 ;; Hardware stack levels required when called: 4
  2474 ;; This function calls:
  2475 ;;		_color_read_Blue
  2476 ;;		_color_read_Clear
  2477 ;;		_color_read_Green
  2478 ;;		_color_read_Red
  2479 ;;		_convert_rgb2hue
  2480 ;; This function is called by:
  2481 ;;		_main
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text7
  2486   003160                     __ptext7:
  2487                           	callstack 0
  2488   003160                     _reading_hue:
  2489                           	callstack 26
  2490   003160                     
  2491                           ;color.c: 90: unsigned int reading_hue(colors *cCurr);color.c: 91: {;color.c: 92:     un
      +                          signed int hue;;color.c: 94:     char led_state[50];;color.c: 99:     LATGbits.LATG0 = 1
      +                          ;
  2492   003160  807F               	bsf	127,0,c	;volatile
  2493                           
  2494                           ;color.c: 100:     LATEbits.LATE7 = 0;
  2495   003162  9E7D               	bcf	125,7,c	;volatile
  2496                           
  2497                           ;color.c: 101:     LATAbits.LATA3 = 0;
  2498   003164  9679               	bcf	121,3,c	;volatile
  2499   003166                     
  2500                           ;color.c: 102:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2501   003166  0E29               	movlw	41
  2502   003168  6E45               	movwf	(??_reading_hue+1)^0,c
  2503   00316A  0E96               	movlw	150
  2504   00316C  6E44               	movwf	??_reading_hue^0,c
  2505   00316E  0E7F               	movlw	127
  2506   003170                     u5397:
  2507   003170  2EE8               	decfsz	wreg,f,c
  2508   003172  D7FE               	bra	u5397
  2509   003174  2E44               	decfsz	??_reading_hue^0,f,c
  2510   003176  D7FC               	bra	u5397
  2511   003178  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2512   00317A  D7FA               	bra	u5397
  2513   00317C  0000               	nop	
  2514   00317E                     
  2515                           ;color.c: 103:     (cCurr->red)= color_read_Red();
  2516   00317E  ECF2  F01D         	call	_color_read_Red	;wreg free
  2517   003182  5042               	movf	reading_hue@cCurr^0,w,c
  2518   003184  6ED9               	movwf	fsr2l,c
  2519   003186  6ADA               	clrf	fsr2h,c
  2520   003188  C006  FFDE         	movff	?_color_read_Red,postinc2
  2521   00318C  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  2522   003190                     
  2523                           ;color.c: 108:     LATGbits.LATG0 = 0;
  2524   003190  907F               	bcf	127,0,c	;volatile
  2525   003192                     
  2526                           ;color.c: 109:     LATEbits.LATE7 = 1;
  2527   003192  8E7D               	bsf	125,7,c	;volatile
  2528   003194                     
  2529                           ;color.c: 110:     LATAbits.LATA3 = 0;
  2530   003194  9679               	bcf	121,3,c	;volatile
  2531   003196                     
  2532                           ;color.c: 111:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2533   003196  0E29               	movlw	41
  2534   003198  6E45               	movwf	(??_reading_hue+1)^0,c
  2535   00319A  0E96               	movlw	150
  2536   00319C  6E44               	movwf	??_reading_hue^0,c
  2537   00319E  0E7F               	movlw	127
  2538   0031A0                     u5407:
  2539   0031A0  2EE8               	decfsz	wreg,f,c
  2540   0031A2  D7FE               	bra	u5407
  2541   0031A4  2E44               	decfsz	??_reading_hue^0,f,c
  2542   0031A6  D7FC               	bra	u5407
  2543   0031A8  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2544   0031AA  D7FA               	bra	u5407
  2545   0031AC  0000               	nop	
  2546                           
  2547                           ;color.c: 112:     (cCurr->green) = color_read_Green();
  2548   0031AE  EC1A  F01E         	call	_color_read_Green	;wreg free
  2549   0031B2  5042               	movf	reading_hue@cCurr^0,w,c
  2550   0031B4  6ED9               	movwf	fsr2l,c
  2551   0031B6  6ADA               	clrf	fsr2h,c
  2552   0031B8  0E02               	movlw	2
  2553   0031BA  26D9               	addwf	fsr2l,f,c
  2554   0031BC  C006  FFDE         	movff	?_color_read_Green,postinc2
  2555   0031C0  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  2556   0031C4                     
  2557                           ;color.c: 118:     LATGbits.LATG0 = 0;
  2558   0031C4  907F               	bcf	127,0,c	;volatile
  2559   0031C6                     
  2560                           ;color.c: 119:     LATEbits.LATE7 = 0;
  2561   0031C6  9E7D               	bcf	125,7,c	;volatile
  2562   0031C8                     
  2563                           ;color.c: 120:     LATAbits.LATA3 = 1;
  2564   0031C8  8679               	bsf	121,3,c	;volatile
  2565   0031CA                     
  2566                           ;color.c: 121:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2567   0031CA  0E29               	movlw	41
  2568   0031CC  6E45               	movwf	(??_reading_hue+1)^0,c
  2569   0031CE  0E96               	movlw	150
  2570   0031D0  6E44               	movwf	??_reading_hue^0,c
  2571   0031D2  0E7F               	movlw	127
  2572   0031D4                     u5417:
  2573   0031D4  2EE8               	decfsz	wreg,f,c
  2574   0031D6  D7FE               	bra	u5417
  2575   0031D8  2E44               	decfsz	??_reading_hue^0,f,c
  2576   0031DA  D7FC               	bra	u5417
  2577   0031DC  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2578   0031DE  D7FA               	bra	u5417
  2579   0031E0  0000               	nop	
  2580   0031E2                     
  2581                           ;color.c: 122:     (cCurr->blue) = color_read_Blue();
  2582   0031E2  EC6A  F01E         	call	_color_read_Blue	;wreg free
  2583   0031E6  5042               	movf	reading_hue@cCurr^0,w,c
  2584   0031E8  6ED9               	movwf	fsr2l,c
  2585   0031EA  6ADA               	clrf	fsr2h,c
  2586   0031EC  0E04               	movlw	4
  2587   0031EE  26D9               	addwf	fsr2l,f,c
  2588   0031F0  C006  FFDE         	movff	?_color_read_Blue,postinc2
  2589   0031F4  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  2590   0031F8                     
  2591                           ;color.c: 127:     LATGbits.LATG0 = 1;
  2592   0031F8  807F               	bsf	127,0,c	;volatile
  2593   0031FA                     
  2594                           ;color.c: 128:     LATEbits.LATE7 = 1;
  2595   0031FA  8E7D               	bsf	125,7,c	;volatile
  2596   0031FC                     
  2597                           ;color.c: 129:     LATAbits.LATA3 = 1;
  2598   0031FC  8679               	bsf	121,3,c	;volatile
  2599                           
  2600                           ;color.c: 130:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2601   0031FE  0E29               	movlw	41
  2602   003200  6E45               	movwf	(??_reading_hue+1)^0,c
  2603   003202  0E96               	movlw	150
  2604   003204  6E44               	movwf	??_reading_hue^0,c
  2605   003206  0E7F               	movlw	127
  2606   003208                     u5427:
  2607   003208  2EE8               	decfsz	wreg,f,c
  2608   00320A  D7FE               	bra	u5427
  2609   00320C  2E44               	decfsz	??_reading_hue^0,f,c
  2610   00320E  D7FC               	bra	u5427
  2611   003210  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2612   003212  D7FA               	bra	u5427
  2613   003214  0000               	nop	
  2614   003216                     
  2615                           ;color.c: 131:     (cCurr->clear) = color_read_Clear();
  2616   003216  EC42  F01E         	call	_color_read_Clear	;wreg free
  2617   00321A  5042               	movf	reading_hue@cCurr^0,w,c
  2618   00321C  6ED9               	movwf	fsr2l,c
  2619   00321E  6ADA               	clrf	fsr2h,c
  2620   003220  0E06               	movlw	6
  2621   003222  26D9               	addwf	fsr2l,f,c
  2622   003224  C006  FFDE         	movff	?_color_read_Clear,postinc2
  2623   003228  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  2624   00322C                     
  2625                           ;color.c: 138:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  2626   00322C  0EE5               	movlw	low _colorCalibration
  2627   00322E  6E3E               	movwf	convert_rgb2hue@cMax^0,c
  2628   003230  0EDD               	movlw	low _colorCurrent
  2629   003232  6E3F               	movwf	convert_rgb2hue@cCurr^0,c
  2630   003234  EC55  F007         	call	_convert_rgb2hue	;wreg free
  2631   003238  C03E  F046         	movff	?_convert_rgb2hue,reading_hue@hue
  2632   00323C  C03F  F047         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  2633   003240                     
  2634                           ;color.c: 145:     return hue;
  2635   003240  C046  F042         	movff	reading_hue@hue,?_reading_hue
  2636   003244  C047  F043         	movff	reading_hue@hue+1,?_reading_hue+1
  2637   003248  0012               	return		;funcret
  2638   00324A                     __end_of_reading_hue:
  2639                           	callstack 0
  2640                           
  2641 ;; *************** function _convert_rgb2hue *****************
  2642 ;; Defined at:
  2643 ;;		line 229 in file "color.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;  cMax            1   61[COMRAM] PTR struct colors
  2646 ;;		 -> colorCalibration(8), 
  2647 ;;  cCurr           1   62[COMRAM] PTR struct colors
  2648 ;;		 -> colorCurrent(8), 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  c_char         20    0        unsigned char [20]
  2651 ;;  b               4   72[BANK0 ] float 
  2652 ;;  g               4   68[BANK0 ] float 
  2653 ;;  r               4   64[BANK0 ] float 
  2654 ;;  hue             4   60[BANK0 ] float 
  2655 ;;  max             4   56[BANK0 ] float 
  2656 ;;  diff            4   52[BANK0 ] float 
  2657 ;;  min             4   48[BANK0 ] float 
  2658 ;;  clearmax        4   28[BANK0 ] float 
  2659 ;;  clearcurrent    4   24[BANK0 ] float 
  2660 ;;  bluemax         4   20[BANK0 ] float 
  2661 ;;  bluecurrent     4   16[BANK0 ] float 
  2662 ;;  greenmax        4   12[BANK0 ] float 
  2663 ;;  greencurrent    4    8[BANK0 ] float 
  2664 ;;  redmax          4    4[BANK0 ] float 
  2665 ;;  redcurrent      4    0[BANK0 ] float 
  2666 ;;  c               4    0        float 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  2   61[COMRAM] unsigned int 
  2669 ;; Registers used:
  2670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2677 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2679 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2680 ;;Total ram usage:       80 bytes
  2681 ;; Hardware stack levels used: 1
  2682 ;; Hardware stack levels required when called: 3
  2683 ;; This function calls:
  2684 ;;		___fladd
  2685 ;;		___fldiv
  2686 ;;		___fleq
  2687 ;;		___flge
  2688 ;;		___flmul
  2689 ;;		___flsub
  2690 ;;		___fltol
  2691 ;;		___xxtofl
  2692 ;; This function is called by:
  2693 ;;		_reading_hue
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text8
  2698   000EAA                     __ptext8:
  2699                           	callstack 0
  2700   000EAA                     _convert_rgb2hue:
  2701                           	callstack 26
  2702   000EAA                     
  2703                           ;color.c: 229: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 230: {;color.c: 231:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 232:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  2704   000EAA  0E00               	movlw	0
  2705   000EAC  0100               	movlb	0	; () banked
  2706   000EAE  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  2707   000EB0  0E00               	movlw	0
  2708   000EB2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2709   000EB4  0E00               	movlw	0
  2710   000EB6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2711   000EB8  0E00               	movlw	0
  2712   000EBA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2713   000EBC                     
  2714                           ; BSR set to: 0
  2715                           ;color.c: 234:     redcurrent = cCurr->red;
  2716   000EBC  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2717   000EBE  6ED9               	movwf	fsr2l,c
  2718   000EC0  6ADA               	clrf	fsr2h,c
  2719   000EC2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2720   000EC6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2721   000ECA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2722   000ECE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2723   000ED2  6A04               	clrf	(___xxtofl@val+2)^0,c
  2724   000ED4  6A05               	clrf	(___xxtofl@val+3)^0,c
  2725   000ED6  0E00               	movlw	0
  2726   000ED8  ECA7  F014         	call	___xxtofl
  2727   000EDC  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  2728   000EE0  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  2729   000EE4  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  2730   000EE8  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  2731   000EEC                     
  2732                           ;color.c: 235:     redmax = cMax->red;
  2733   000EEC  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2734   000EEE  6ED9               	movwf	fsr2l,c
  2735   000EF0  6ADA               	clrf	fsr2h,c
  2736   000EF2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2737   000EF6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2738   000EFA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2739   000EFE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2740   000F02  6A04               	clrf	(___xxtofl@val+2)^0,c
  2741   000F04  6A05               	clrf	(___xxtofl@val+3)^0,c
  2742   000F06  0E00               	movlw	0
  2743   000F08  ECA7  F014         	call	___xxtofl
  2744   000F0C  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  2745   000F10  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  2746   000F14  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  2747   000F18  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  2748   000F1C                     
  2749                           ;color.c: 236:     greencurrent = cCurr->green;
  2750   000F1C  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2751   000F1E  6ED9               	movwf	fsr2l,c
  2752   000F20  6ADA               	clrf	fsr2h,c
  2753   000F22  0E02               	movlw	2
  2754   000F24  26D9               	addwf	fsr2l,f,c
  2755   000F26  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2756   000F2A  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2757   000F2E  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2758   000F32  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2759   000F36  6A04               	clrf	(___xxtofl@val+2)^0,c
  2760   000F38  6A05               	clrf	(___xxtofl@val+3)^0,c
  2761   000F3A  0E00               	movlw	0
  2762   000F3C  ECA7  F014         	call	___xxtofl
  2763   000F40  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  2764   000F44  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  2765   000F48  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  2766   000F4C  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  2767   000F50                     
  2768                           ;color.c: 237:     greenmax = cMax->green;
  2769   000F50  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2770   000F52  6ED9               	movwf	fsr2l,c
  2771   000F54  6ADA               	clrf	fsr2h,c
  2772   000F56  0E02               	movlw	2
  2773   000F58  26D9               	addwf	fsr2l,f,c
  2774   000F5A  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2775   000F5E  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2776   000F62  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2777   000F66  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2778   000F6A  6A04               	clrf	(___xxtofl@val+2)^0,c
  2779   000F6C  6A05               	clrf	(___xxtofl@val+3)^0,c
  2780   000F6E  0E00               	movlw	0
  2781   000F70  ECA7  F014         	call	___xxtofl
  2782   000F74  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  2783   000F78  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  2784   000F7C  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  2785   000F80  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  2786   000F84                     
  2787                           ;color.c: 238:     bluecurrent = cCurr->blue;
  2788   000F84  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2789   000F86  6ED9               	movwf	fsr2l,c
  2790   000F88  6ADA               	clrf	fsr2h,c
  2791   000F8A  0E04               	movlw	4
  2792   000F8C  26D9               	addwf	fsr2l,f,c
  2793   000F8E  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2794   000F92  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2795   000F96  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2796   000F9A  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2797   000F9E  6A04               	clrf	(___xxtofl@val+2)^0,c
  2798   000FA0  6A05               	clrf	(___xxtofl@val+3)^0,c
  2799   000FA2  0E00               	movlw	0
  2800   000FA4  ECA7  F014         	call	___xxtofl
  2801   000FA8  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  2802   000FAC  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  2803   000FB0  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  2804   000FB4  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  2805   000FB8                     
  2806                           ;color.c: 239:     bluemax = cMax->blue;
  2807   000FB8  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2808   000FBA  6ED9               	movwf	fsr2l,c
  2809   000FBC  6ADA               	clrf	fsr2h,c
  2810   000FBE  0E04               	movlw	4
  2811   000FC0  26D9               	addwf	fsr2l,f,c
  2812   000FC2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2813   000FC6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2814   000FCA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2815   000FCE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2816   000FD2  6A04               	clrf	(___xxtofl@val+2)^0,c
  2817   000FD4  6A05               	clrf	(___xxtofl@val+3)^0,c
  2818   000FD6  0E00               	movlw	0
  2819   000FD8  ECA7  F014         	call	___xxtofl
  2820   000FDC  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  2821   000FE0  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  2822   000FE4  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  2823   000FE8  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  2824   000FEC                     
  2825                           ;color.c: 240:     clearcurrent = cCurr->clear;
  2826   000FEC  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2827   000FEE  6ED9               	movwf	fsr2l,c
  2828   000FF0  6ADA               	clrf	fsr2h,c
  2829   000FF2  0E06               	movlw	6
  2830   000FF4  26D9               	addwf	fsr2l,f,c
  2831   000FF6  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2832   000FFA  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2833   000FFE  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2834   001002  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2835   001006  6A04               	clrf	(___xxtofl@val+2)^0,c
  2836   001008  6A05               	clrf	(___xxtofl@val+3)^0,c
  2837   00100A  0E00               	movlw	0
  2838   00100C  ECA7  F014         	call	___xxtofl
  2839   001010  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  2840   001014  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  2841   001018  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  2842   00101C  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  2843   001020                     
  2844                           ;color.c: 241:     clearmax = cMax->clear;
  2845   001020  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2846   001022  6ED9               	movwf	fsr2l,c
  2847   001024  6ADA               	clrf	fsr2h,c
  2848   001026  0E06               	movlw	6
  2849   001028  26D9               	addwf	fsr2l,f,c
  2850   00102A  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2851   00102E  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2852   001032  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2853   001036  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2854   00103A  6A04               	clrf	(___xxtofl@val+2)^0,c
  2855   00103C  6A05               	clrf	(___xxtofl@val+3)^0,c
  2856   00103E  0E00               	movlw	0
  2857   001040  ECA7  F014         	call	___xxtofl
  2858   001044  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  2859   001048  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  2860   00104C  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  2861   001050  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  2862   001054  C078  F01B         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  2863   001058  C079  F01C         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  2864   00105C  C07A  F01D         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  2865   001060  C07B  F01E         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  2866   001064  C07C  F01F         	movff	convert_rgb2hue@clearmax,___fldiv@a
  2867   001068  C07D  F020         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  2868   00106C  C07E  F021         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  2869   001070  C07F  F022         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  2870   001074  EC93  F00F         	call	___fldiv	;wreg free
  2871   001078                     
  2872                           ;color.c: 244:     char c_char[20];;color.c: 250:     r = redcurrent/redmax;
  2873   001078  C060  F01B         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  2874   00107C  C061  F01C         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  2875   001080  C062  F01D         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  2876   001084  C063  F01E         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  2877   001088  C064  F01F         	movff	convert_rgb2hue@redmax,___fldiv@a
  2878   00108C  C065  F020         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  2879   001090  C066  F021         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  2880   001094  C067  F022         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  2881   001098  EC93  F00F         	call	___fldiv	;wreg free
  2882   00109C  C01B  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  2883   0010A0  C01C  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  2884   0010A4  C01D  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  2885   0010A8  C01E  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  2886   0010AC                     
  2887                           ;color.c: 251:     g = greencurrent/greenmax;
  2888   0010AC  C068  F01B         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  2889   0010B0  C069  F01C         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  2890   0010B4  C06A  F01D         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  2891   0010B8  C06B  F01E         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  2892   0010BC  C06C  F01F         	movff	convert_rgb2hue@greenmax,___fldiv@a
  2893   0010C0  C06D  F020         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  2894   0010C4  C06E  F021         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  2895   0010C8  C06F  F022         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  2896   0010CC  EC93  F00F         	call	___fldiv	;wreg free
  2897   0010D0  C01B  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  2898   0010D4  C01C  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  2899   0010D8  C01D  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  2900   0010DC  C01E  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  2901   0010E0                     
  2902                           ;color.c: 252:     b = bluecurrent/bluemax;
  2903   0010E0  C070  F01B         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  2904   0010E4  C071  F01C         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  2905   0010E8  C072  F01D         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  2906   0010EC  C073  F01E         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  2907   0010F0  C074  F01F         	movff	convert_rgb2hue@bluemax,___fldiv@a
  2908   0010F4  C075  F020         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  2909   0010F8  C076  F021         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  2910   0010FC  C077  F022         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  2911   001100  EC93  F00F         	call	___fldiv	;wreg free
  2912   001104  C01B  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  2913   001108  C01C  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  2914   00110C  C01D  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  2915   001110  C01E  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  2916   001114                     
  2917                           ;color.c: 254:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  2918   001114  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  2919   001118  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2920   00111C  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2921   001120  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2922   001124  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  2923   001128  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2924   00112C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2925   001130  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2926   001134  EC2E  F018         	call	___flge	;wreg free
  2927   001138  A0D8               	btfss	status,0,c
  2928   00113A  EFA1  F008         	goto	u3901
  2929   00113E  EFA3  F008         	goto	u3900
  2930   001142                     u3901:
  2931   001142  EFD8  F008         	goto	l4476
  2932   001146                     u3900:
  2933   001146  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  2934   00114A  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2935   00114E  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2936   001152  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2937   001156  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  2938   00115A  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2939   00115E  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2940   001162  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2941   001166  EC2E  F018         	call	___flge	;wreg free
  2942   00116A  A0D8               	btfss	status,0,c
  2943   00116C  EFBA  F008         	goto	u3911
  2944   001170  EFBC  F008         	goto	u3910
  2945   001174                     u3911:
  2946   001174  EFC6  F008         	goto	l119
  2947   001178                     u3910:
  2948   001178  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$429
  2949   00117C  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$429+1
  2950   001180  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$429+2
  2951   001184  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$429+3
  2952   001188  EFCE  F008         	goto	l121
  2953   00118C                     l119:
  2954   00118C  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$429
  2955   001190  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$429+1
  2956   001194  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$429+2
  2957   001198  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$429+3
  2958   00119C                     l121:
  2959   00119C  C080  F090         	movff	_convert_rgb2hue$429,convert_rgb2hue@min
  2960   0011A0  C081  F091         	movff	_convert_rgb2hue$429+1,convert_rgb2hue@min+1
  2961   0011A4  C082  F092         	movff	_convert_rgb2hue$429+2,convert_rgb2hue@min+2
  2962   0011A8  C083  F093         	movff	_convert_rgb2hue$429+3,convert_rgb2hue@min+3
  2963   0011AC  EF0B  F009         	goto	l4480
  2964   0011B0                     l4476:
  2965   0011B0  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  2966   0011B4  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2967   0011B8  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2968   0011BC  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2969   0011C0  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  2970   0011C4  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2971   0011C8  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2972   0011CC  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2973   0011D0  EC2E  F018         	call	___flge	;wreg free
  2974   0011D4  A0D8               	btfss	status,0,c
  2975   0011D6  EFEF  F008         	goto	u3921
  2976   0011DA  EFF1  F008         	goto	u3920
  2977   0011DE                     u3921:
  2978   0011DE  EFFB  F008         	goto	l123
  2979   0011E2                     u3920:
  2980   0011E2  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$430
  2981   0011E6  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$430+1
  2982   0011EA  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$430+2
  2983   0011EE  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$430+3
  2984   0011F2  EF03  F009         	goto	l125
  2985   0011F6                     l123:
  2986   0011F6  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$430
  2987   0011FA  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$430+1
  2988   0011FE  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$430+2
  2989   001202  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$430+3
  2990   001206                     l125:
  2991   001206  C084  F090         	movff	_convert_rgb2hue$430,convert_rgb2hue@min
  2992   00120A  C085  F091         	movff	_convert_rgb2hue$430+1,convert_rgb2hue@min+1
  2993   00120E  C086  F092         	movff	_convert_rgb2hue$430+2,convert_rgb2hue@min+2
  2994   001212  C087  F093         	movff	_convert_rgb2hue$430+3,convert_rgb2hue@min+3
  2995   001216                     l4480:
  2996                           
  2997                           ;color.c: 255:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  2998   001216  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  2999   00121A  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3000   00121E  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3001   001222  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3002   001226  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3003   00122A  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3004   00122E  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3005   001232  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3006   001236  EC2E  F018         	call	___flge	;wreg free
  3007   00123A  A0D8               	btfss	status,0,c
  3008   00123C  EF22  F009         	goto	u3931
  3009   001240  EF24  F009         	goto	u3930
  3010   001244                     u3931:
  3011   001244  EF59  F009         	goto	l4486
  3012   001248                     u3930:
  3013   001248  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3014   00124C  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3015   001250  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3016   001254  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3017   001258  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3018   00125C  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3019   001260  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3020   001264  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3021   001268  EC2E  F018         	call	___flge	;wreg free
  3022   00126C  A0D8               	btfss	status,0,c
  3023   00126E  EF3B  F009         	goto	u3941
  3024   001272  EF3D  F009         	goto	u3940
  3025   001276                     u3941:
  3026   001276  EF47  F009         	goto	l131
  3027   00127A                     u3940:
  3028   00127A  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$431
  3029   00127E  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$431+1
  3030   001282  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$431+2
  3031   001286  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$431+3
  3032   00128A  EF4F  F009         	goto	l133
  3033   00128E                     l131:
  3034   00128E  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$431
  3035   001292  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$431+1
  3036   001296  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$431+2
  3037   00129A  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$431+3
  3038   00129E                     l133:
  3039   00129E  C088  F098         	movff	_convert_rgb2hue$431,convert_rgb2hue@max
  3040   0012A2  C089  F099         	movff	_convert_rgb2hue$431+1,convert_rgb2hue@max+1
  3041   0012A6  C08A  F09A         	movff	_convert_rgb2hue$431+2,convert_rgb2hue@max+2
  3042   0012AA  C08B  F09B         	movff	_convert_rgb2hue$431+3,convert_rgb2hue@max+3
  3043   0012AE  EF8C  F009         	goto	l4490
  3044   0012B2                     l4486:
  3045   0012B2  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3046   0012B6  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3047   0012BA  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3048   0012BE  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3049   0012C2  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3050   0012C6  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3051   0012CA  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3052   0012CE  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3053   0012D2  EC2E  F018         	call	___flge	;wreg free
  3054   0012D6  A0D8               	btfss	status,0,c
  3055   0012D8  EF70  F009         	goto	u3951
  3056   0012DC  EF72  F009         	goto	u3950
  3057   0012E0                     u3951:
  3058   0012E0  EF7C  F009         	goto	l135
  3059   0012E4                     u3950:
  3060   0012E4  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$432
  3061   0012E8  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$432+1
  3062   0012EC  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$432+2
  3063   0012F0  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$432+3
  3064   0012F4  EF84  F009         	goto	l137
  3065   0012F8                     l135:
  3066   0012F8  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$432
  3067   0012FC  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$432+1
  3068   001300  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$432+2
  3069   001304  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$432+3
  3070   001308                     l137:
  3071   001308  C08C  F098         	movff	_convert_rgb2hue$432,convert_rgb2hue@max
  3072   00130C  C08D  F099         	movff	_convert_rgb2hue$432+1,convert_rgb2hue@max+1
  3073   001310  C08E  F09A         	movff	_convert_rgb2hue$432+2,convert_rgb2hue@max+2
  3074   001314  C08F  F09B         	movff	_convert_rgb2hue$432+3,convert_rgb2hue@max+3
  3075   001318                     l4490:
  3076                           
  3077                           ;color.c: 256:     diff = max - min;
  3078   001318  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3079   00131C  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3080   001320  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3081   001324  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3082   001328  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3083   00132C  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3084   001330  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3085   001334  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3086   001338  ECD4  F01F         	call	___flsub	;wreg free
  3087   00133C  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3088   001340  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3089   001344  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3090   001348  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3091                           
  3092                           ;color.c: 257:     if (max == min) {
  3093   00134C  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3094   001350  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3095   001354  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3096   001358  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3097   00135C  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3098   001360  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3099   001364  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3100   001368  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3101   00136C  EC09  F01B         	call	___fleq	;wreg free
  3102   001370  A0D8               	btfss	status,0,c
  3103   001372  EFBD  F009         	goto	u3961
  3104   001376  EFBF  F009         	goto	u3960
  3105   00137A                     u3961:
  3106   00137A  EFCA  F009         	goto	l4494
  3107   00137E                     u3960:
  3108   00137E                     
  3109                           ;color.c: 258:         hue = 0;
  3110   00137E  0E00               	movlw	0
  3111   001380  0100               	movlb	0	; () banked
  3112   001382  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3113   001384  0E00               	movlw	0
  3114   001386  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3115   001388  0E00               	movlw	0
  3116   00138A  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3117   00138C  0E00               	movlw	0
  3118   00138E  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3119                           
  3120                           ;color.c: 259:     } else if (max == r){
  3121   001390  EFD3  F00A         	goto	l4506
  3122   001394                     l4494:
  3123   001394  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3124   001398  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3125   00139C  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3126   0013A0  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3127   0013A4  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3128   0013A8  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3129   0013AC  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3130   0013B0  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3131   0013B4  EC09  F01B         	call	___fleq	;wreg free
  3132   0013B8  A0D8               	btfss	status,0,c
  3133   0013BA  EFE1  F009         	goto	u3971
  3134   0013BE  EFE3  F009         	goto	u3970
  3135   0013C2                     u3971:
  3136   0013C2  EF11  F00A         	goto	l4498
  3137   0013C6                     u3970:
  3138   0013C6                     
  3139                           ;color.c: 260:         hue = (b - g) / diff;
  3140   0013C6  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3141   0013CA  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3142   0013CE  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3143   0013D2  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3144   0013D6  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3145   0013DA  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3146   0013DE  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3147   0013E2  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3148   0013E6  ECD4  F01F         	call	___flsub	;wreg free
  3149   0013EA  C012  F01B         	movff	?___flsub,___fldiv@b
  3150   0013EE  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3151   0013F2  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3152   0013F6  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3153   0013FA  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3154   0013FE  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3155   001402  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3156   001406  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3157   00140A  EC93  F00F         	call	___fldiv	;wreg free
  3158   00140E  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3159   001412  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3160   001416  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3161   00141A  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3162                           
  3163                           ;color.c: 261:     } else if (max == g){
  3164   00141E  EFD3  F00A         	goto	l4506
  3165   001422                     l4498:
  3166   001422  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3167   001426  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3168   00142A  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3169   00142E  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3170   001432  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3171   001436  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3172   00143A  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3173   00143E  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3174   001442  EC09  F01B         	call	___fleq	;wreg free
  3175   001446  A0D8               	btfss	status,0,c
  3176   001448  EF28  F00A         	goto	u3981
  3177   00144C  EF2A  F00A         	goto	u3980
  3178   001450                     u3981:
  3179   001450  EF72  F00A         	goto	l4502
  3180   001454                     u3980:
  3181   001454                     
  3182                           ;color.c: 262:         hue = (b - r) / diff;
  3183   001454  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3184   001458  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3185   00145C  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3186   001460  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3187   001464  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3188   001468  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3189   00146C  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3190   001470  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3191   001474  ECD4  F01F         	call	___flsub	;wreg free
  3192   001478  C012  F01B         	movff	?___flsub,___fldiv@b
  3193   00147C  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3194   001480  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3195   001484  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3196   001488  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3197   00148C  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3198   001490  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3199   001494  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3200   001498  EC93  F00F         	call	___fldiv	;wreg free
  3201   00149C  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3202   0014A0  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3203   0014A4  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3204   0014A8  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3205                           
  3206                           ;color.c: 263:         hue = hue + 2;
  3207   0014AC  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3208   0014B0  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3209   0014B4  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3210   0014B8  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3211   0014BC  0E00               	movlw	0
  3212   0014BE  6E06               	movwf	___fladd@a^0,c
  3213   0014C0  0E00               	movlw	0
  3214   0014C2  6E07               	movwf	(___fladd@a+1)^0,c
  3215   0014C4  0E00               	movlw	0
  3216   0014C6  6E08               	movwf	(___fladd@a+2)^0,c
  3217   0014C8  0E40               	movlw	64
  3218   0014CA  6E09               	movwf	(___fladd@a+3)^0,c
  3219   0014CC  EC1E  F00B         	call	___fladd	;wreg free
  3220   0014D0  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3221   0014D4  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3222   0014D8  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3223   0014DC  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3224                           
  3225                           ;color.c: 264:     } else if (max == b){
  3226   0014E0  EFD3  F00A         	goto	l4506
  3227   0014E4                     l4502:
  3228   0014E4  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3229   0014E8  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3230   0014EC  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3231   0014F0  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3232   0014F4  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3233   0014F8  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3234   0014FC  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3235   001500  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3236   001504  EC09  F01B         	call	___fleq	;wreg free
  3237   001508  A0D8               	btfss	status,0,c
  3238   00150A  EF89  F00A         	goto	u3991
  3239   00150E  EF8B  F00A         	goto	u3990
  3240   001512                     u3991:
  3241   001512  EFD3  F00A         	goto	l141
  3242   001516                     u3990:
  3243   001516                     
  3244                           ;color.c: 265:         hue = (r - g) / diff;
  3245   001516  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3246   00151A  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3247   00151E  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3248   001522  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3249   001526  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3250   00152A  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3251   00152E  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3252   001532  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3253   001536  ECD4  F01F         	call	___flsub	;wreg free
  3254   00153A  C012  F01B         	movff	?___flsub,___fldiv@b
  3255   00153E  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3256   001542  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3257   001546  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3258   00154A  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3259   00154E  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3260   001552  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3261   001556  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3262   00155A  EC93  F00F         	call	___fldiv	;wreg free
  3263   00155E  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3264   001562  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3265   001566  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3266   00156A  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3267                           
  3268                           ;color.c: 266:         hue = hue + 4;
  3269   00156E  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3270   001572  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3271   001576  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3272   00157A  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3273   00157E  0E00               	movlw	0
  3274   001580  6E06               	movwf	___fladd@a^0,c
  3275   001582  0E00               	movlw	0
  3276   001584  6E07               	movwf	(___fladd@a+1)^0,c
  3277   001586  0E80               	movlw	128
  3278   001588  6E08               	movwf	(___fladd@a+2)^0,c
  3279   00158A  0E40               	movlw	64
  3280   00158C  6E09               	movwf	(___fladd@a+3)^0,c
  3281   00158E  EC1E  F00B         	call	___fladd	;wreg free
  3282   001592  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3283   001596  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3284   00159A  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3285   00159E  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3286   0015A2  EFD3  F00A         	goto	l4506
  3287   0015A6                     l141:
  3288   0015A6                     l4506:
  3289                           
  3290                           ;color.c: 269:     hue = hue * 60;
  3291   0015A6  C09C  F002         	movff	convert_rgb2hue@hue,___flmul@b
  3292   0015AA  C09D  F003         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3293   0015AE  C09E  F004         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3294   0015B2  C09F  F005         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3295   0015B6  0E00               	movlw	0
  3296   0015B8  6E06               	movwf	___flmul@a^0,c
  3297   0015BA  0E00               	movlw	0
  3298   0015BC  6E07               	movwf	(___flmul@a+1)^0,c
  3299   0015BE  0E70               	movlw	112
  3300   0015C0  6E08               	movwf	(___flmul@a+2)^0,c
  3301   0015C2  0E42               	movlw	66
  3302   0015C4  6E09               	movwf	(___flmul@a+3)^0,c
  3303   0015C6  EC7E  F00D         	call	___flmul	;wreg free
  3304   0015CA  C002  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3305   0015CE  C003  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3306   0015D2  C004  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3307   0015D6  C005  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3308   0015DA                     
  3309                           ;color.c: 270:     if (hue < 0) {
  3310   0015DA  0100               	movlb	0	; () banked
  3311   0015DC  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3312   0015DE  EFF5  F00A         	goto	u4000
  3313   0015E2  EFF3  F00A         	goto	u4001
  3314   0015E6                     u4001:
  3315   0015E6  EF0F  F00B         	goto	l145
  3316   0015EA                     u4000:
  3317   0015EA                     
  3318                           ; BSR set to: 0
  3319                           ;color.c: 271:         hue = hue + 360;
  3320   0015EA  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3321   0015EE  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3322   0015F2  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3323   0015F6  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3324   0015FA  0E00               	movlw	0
  3325   0015FC  6E06               	movwf	___fladd@a^0,c
  3326   0015FE  0E00               	movlw	0
  3327   001600  6E07               	movwf	(___fladd@a+1)^0,c
  3328   001602  0EB4               	movlw	180
  3329   001604  6E08               	movwf	(___fladd@a+2)^0,c
  3330   001606  0E43               	movlw	67
  3331   001608  6E09               	movwf	(___fladd@a+3)^0,c
  3332   00160A  EC1E  F00B         	call	___fladd	;wreg free
  3333   00160E  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3334   001612  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3335   001616  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3336   00161A  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3337   00161E                     l145:
  3338                           
  3339                           ;color.c: 274:     return (unsigned int)hue;
  3340   00161E  C09C  F034         	movff	convert_rgb2hue@hue,___fltol@f1
  3341   001622  C09D  F035         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3342   001626  C09E  F036         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3343   00162A  C09F  F037         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3344   00162E  ECAB  F017         	call	___fltol	;wreg free
  3345   001632  C034  F03E         	movff	?___fltol,?_convert_rgb2hue
  3346   001636  C035  F03F         	movff	?___fltol+1,?_convert_rgb2hue+1
  3347   00163A  0012               	return		;funcret
  3348   00163C                     __end_of_convert_rgb2hue:
  3349                           	callstack 0
  3350                           
  3351 ;; *************** function ___xxtofl *****************
  3352 ;; Defined at:
  3353 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;  sign            1    wreg     unsigned char 
  3356 ;;  val             4    1[COMRAM] long 
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;  sign            1    9[COMRAM] unsigned char 
  3359 ;;  arg             4   11[COMRAM] unsigned long 
  3360 ;;  exp             1   10[COMRAM] unsigned char 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  4    1[COMRAM] unsigned char 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2, status,0
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3370 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3371 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3372 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3373 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3374 ;;Total ram usage:       14 bytes
  3375 ;; Hardware stack levels used: 1
  3376 ;; Hardware stack levels required when called: 1
  3377 ;; This function calls:
  3378 ;;		Nothing
  3379 ;; This function is called by:
  3380 ;;		_convert_rgb2hue
  3381 ;;		_main
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text9
  3386   00294E                     __ptext9:
  3387                           	callstack 0
  3388   00294E                     ___xxtofl:
  3389                           	callstack 27
  3390                           
  3391                           ;incstack = 0
  3392                           ;___xxtofl@sign stored from wreg
  3393   00294E  6E0A               	movwf	___xxtofl@sign^0,c
  3394   002950  500A               	movf	___xxtofl@sign^0,w,c
  3395   002952  B4D8               	btfsc	status,2,c
  3396   002954  EFAE  F014         	goto	u3801
  3397   002958  EFB0  F014         	goto	u3800
  3398   00295C                     u3801:
  3399   00295C  EFD2  F014         	goto	l1323
  3400   002960                     u3800:
  3401   002960  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3402   002962  EFB7  F014         	goto	u3810
  3403   002966  EFB5  F014         	goto	u3811
  3404   00296A                     u3811:
  3405   00296A  EFD2  F014         	goto	l1323
  3406   00296E                     u3810:
  3407   00296E  C002  F006         	movff	___xxtofl@val,??___xxtofl
  3408   002972  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  3409   002976  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  3410   00297A  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  3411   00297E  1E06               	comf	??___xxtofl^0,f,c
  3412   002980  1E07               	comf	(??___xxtofl+1)^0,f,c
  3413   002982  1E08               	comf	(??___xxtofl+2)^0,f,c
  3414   002984  1E09               	comf	(??___xxtofl+3)^0,f,c
  3415   002986  2A06               	incf	??___xxtofl^0,f,c
  3416   002988  0E00               	movlw	0
  3417   00298A  2207               	addwfc	(??___xxtofl+1)^0,f,c
  3418   00298C  2208               	addwfc	(??___xxtofl+2)^0,f,c
  3419   00298E  2209               	addwfc	(??___xxtofl+3)^0,f,c
  3420   002990  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  3421   002994  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  3422   002998  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  3423   00299C  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  3424   0029A0  EFDA  F014         	goto	l4366
  3425   0029A4                     l1323:
  3426   0029A4  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  3427   0029A8  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3428   0029AC  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3429   0029B0  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3430   0029B4                     l4366:
  3431   0029B4  5002               	movf	___xxtofl@val^0,w,c
  3432   0029B6  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  3433   0029B8  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  3434   0029BA  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  3435   0029BC  A4D8               	btfss	status,2,c
  3436   0029BE  EFE3  F014         	goto	u3821
  3437   0029C2  EFE5  F014         	goto	u3820
  3438   0029C6                     u3821:
  3439   0029C6  EFEF  F014         	goto	l4372
  3440   0029CA                     u3820:
  3441   0029CA  0E00               	movlw	0
  3442   0029CC  6E02               	movwf	?___xxtofl^0,c
  3443   0029CE  0E00               	movlw	0
  3444   0029D0  6E03               	movwf	(?___xxtofl+1)^0,c
  3445   0029D2  0E00               	movlw	0
  3446   0029D4  6E04               	movwf	(?___xxtofl+2)^0,c
  3447   0029D6  0E00               	movlw	0
  3448   0029D8  6E05               	movwf	(?___xxtofl+3)^0,c
  3449   0029DA  EF80  F015         	goto	l1326
  3450   0029DE                     l4372:
  3451   0029DE  0E96               	movlw	150
  3452   0029E0  6E0B               	movwf	___xxtofl@exp^0,c
  3453   0029E2  EFF9  F014         	goto	l4376
  3454   0029E6                     l4374:
  3455   0029E6  2A0B               	incf	___xxtofl@exp^0,f,c
  3456   0029E8  90D8               	bcf	status,0,c
  3457   0029EA  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3458   0029EC  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3459   0029EE  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3460   0029F0  320C               	rrcf	___xxtofl@arg^0,f,c
  3461   0029F2                     l4376:
  3462   0029F2  0E00               	movlw	0
  3463   0029F4  140C               	andwf	___xxtofl@arg^0,w,c
  3464   0029F6  6E06               	movwf	??___xxtofl^0,c
  3465   0029F8  0E00               	movlw	0
  3466   0029FA  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3467   0029FC  6E07               	movwf	(??___xxtofl+1)^0,c
  3468   0029FE  0E00               	movlw	0
  3469   002A00  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3470   002A02  6E08               	movwf	(??___xxtofl+2)^0,c
  3471   002A04  0EFE               	movlw	254
  3472   002A06  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3473   002A08  6E09               	movwf	(??___xxtofl+3)^0,c
  3474   002A0A  5006               	movf	??___xxtofl^0,w,c
  3475   002A0C  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3476   002A0E  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3477   002A10  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3478   002A12  A4D8               	btfss	status,2,c
  3479   002A14  EF0E  F015         	goto	u3831
  3480   002A18  EF10  F015         	goto	u3830
  3481   002A1C                     u3831:
  3482   002A1C  EFF3  F014         	goto	l4374
  3483   002A20                     u3830:
  3484   002A20  EF1E  F015         	goto	l1330
  3485   002A24                     l4378:
  3486   002A24  2A0B               	incf	___xxtofl@exp^0,f,c
  3487   002A26  0E01               	movlw	1
  3488   002A28  260C               	addwf	___xxtofl@arg^0,f,c
  3489   002A2A  0E00               	movlw	0
  3490   002A2C  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  3491   002A2E  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  3492   002A30  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  3493   002A32  90D8               	bcf	status,0,c
  3494   002A34  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3495   002A36  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3496   002A38  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3497   002A3A  320C               	rrcf	___xxtofl@arg^0,f,c
  3498   002A3C                     l1330:
  3499   002A3C  0E00               	movlw	0
  3500   002A3E  140C               	andwf	___xxtofl@arg^0,w,c
  3501   002A40  6E06               	movwf	??___xxtofl^0,c
  3502   002A42  0E00               	movlw	0
  3503   002A44  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3504   002A46  6E07               	movwf	(??___xxtofl+1)^0,c
  3505   002A48  0E00               	movlw	0
  3506   002A4A  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3507   002A4C  6E08               	movwf	(??___xxtofl+2)^0,c
  3508   002A4E  0EFF               	movlw	255
  3509   002A50  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3510   002A52  6E09               	movwf	(??___xxtofl+3)^0,c
  3511   002A54  5006               	movf	??___xxtofl^0,w,c
  3512   002A56  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3513   002A58  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3514   002A5A  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3515   002A5C  A4D8               	btfss	status,2,c
  3516   002A5E  EF33  F015         	goto	u3841
  3517   002A62  EF35  F015         	goto	u3840
  3518   002A66                     u3841:
  3519   002A66  EF12  F015         	goto	l4378
  3520   002A6A                     u3840:
  3521   002A6A  EF3D  F015         	goto	l4386
  3522   002A6E                     l4384:
  3523   002A6E  060B               	decf	___xxtofl@exp^0,f,c
  3524   002A70  90D8               	bcf	status,0,c
  3525   002A72  360C               	rlcf	___xxtofl@arg^0,f,c
  3526   002A74  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  3527   002A76  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  3528   002A78  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  3529   002A7A                     l4386:
  3530   002A7A  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  3531   002A7C  EF42  F015         	goto	u3851
  3532   002A80  EF44  F015         	goto	u3850
  3533   002A84                     u3851:
  3534   002A84  EF4C  F015         	goto	l1337
  3535   002A88                     u3850:
  3536   002A88  0E02               	movlw	2
  3537   002A8A  600B               	cpfslt	___xxtofl@exp^0,c
  3538   002A8C  EF4A  F015         	goto	u3861
  3539   002A90  EF4C  F015         	goto	u3860
  3540   002A94                     u3861:
  3541   002A94  EF37  F015         	goto	l4384
  3542   002A98                     u3860:
  3543   002A98                     l1337:
  3544   002A98  B00B               	btfsc	___xxtofl@exp^0,0,c
  3545   002A9A  EF51  F015         	goto	u3871
  3546   002A9E  EF53  F015         	goto	u3870
  3547   002AA2                     u3871:
  3548   002AA2  EF54  F015         	goto	l4392
  3549   002AA6                     u3870:
  3550   002AA6  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  3551   002AA8                     l4392:
  3552   002AA8  90D8               	bcf	status,0,c
  3553   002AAA  320B               	rrcf	___xxtofl@exp^0,f,c
  3554   002AAC  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  3555   002AB0  6A07               	clrf	(??___xxtofl+1)^0,c
  3556   002AB2  6A08               	clrf	(??___xxtofl+2)^0,c
  3557   002AB4  6A09               	clrf	(??___xxtofl+3)^0,c
  3558   002AB6  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  3559   002ABA  6A08               	clrf	(??___xxtofl+2)^0,c
  3560   002ABC  6A07               	clrf	(??___xxtofl+1)^0,c
  3561   002ABE  6A06               	clrf	??___xxtofl^0,c
  3562   002AC0  5006               	movf	??___xxtofl^0,w,c
  3563   002AC2  120C               	iorwf	___xxtofl@arg^0,f,c
  3564   002AC4  5007               	movf	(??___xxtofl+1)^0,w,c
  3565   002AC6  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  3566   002AC8  5008               	movf	(??___xxtofl+2)^0,w,c
  3567   002ACA  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  3568   002ACC  5009               	movf	(??___xxtofl+3)^0,w,c
  3569   002ACE  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  3570   002AD0  500A               	movf	___xxtofl@sign^0,w,c
  3571   002AD2  B4D8               	btfsc	status,2,c
  3572   002AD4  EF6E  F015         	goto	u3881
  3573   002AD8  EF70  F015         	goto	u3880
  3574   002ADC                     u3881:
  3575   002ADC  EF78  F015         	goto	l4402
  3576   002AE0                     u3880:
  3577   002AE0  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3578   002AE2  EF77  F015         	goto	u3890
  3579   002AE6  EF75  F015         	goto	u3891
  3580   002AEA                     u3891:
  3581   002AEA  EF78  F015         	goto	l4402
  3582   002AEE                     u3890:
  3583   002AEE  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  3584   002AF0                     l4402:
  3585   002AF0  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  3586   002AF4  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  3587   002AF8  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  3588   002AFC  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  3589   002B00                     l1326:
  3590   002B00  0012               	return		;funcret
  3591   002B02                     __end_of___xxtofl:
  3592                           	callstack 0
  3593                           
  3594 ;; *************** function ___fltol *****************
  3595 ;; Defined at:
  3596 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  f1              4   51[COMRAM] unsigned char 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  exp1            1   60[COMRAM] unsigned char 
  3601 ;;  sign1           1   59[COMRAM] unsigned char 
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  4   51[COMRAM] long 
  3604 ;; Registers used:
  3605 ;;		wreg, status,2, status,0
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3611 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3612 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3613 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3614 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3615 ;;Total ram usage:       10 bytes
  3616 ;; Hardware stack levels used: 1
  3617 ;; Hardware stack levels required when called: 1
  3618 ;; This function calls:
  3619 ;;		Nothing
  3620 ;; This function is called by:
  3621 ;;		_convert_rgb2hue
  3622 ;;		_main
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text10
  3627   002F56                     __ptext10:
  3628                           	callstack 0
  3629   002F56                     ___fltol:
  3630                           	callstack 27
  3631   002F56  3436               	rlcf	(___fltol@f1+2)^0,w,c
  3632   002F58  3437               	rlcf	(___fltol@f1+3)^0,w,c
  3633   002F5A  6E3D               	movwf	___fltol@exp1^0,c
  3634   002F5C  503D               	movf	___fltol@exp1^0,w,c
  3635   002F5E  A4D8               	btfss	status,2,c
  3636   002F60  EFB4  F017         	goto	u3731
  3637   002F64  EFB6  F017         	goto	u3730
  3638   002F68                     u3731:
  3639   002F68  EFC0  F017         	goto	l4322
  3640   002F6C                     u3730:
  3641   002F6C                     l4318:
  3642   002F6C  0E00               	movlw	0
  3643   002F6E  6E34               	movwf	?___fltol^0,c
  3644   002F70  0E00               	movlw	0
  3645   002F72  6E35               	movwf	(?___fltol+1)^0,c
  3646   002F74  0E00               	movlw	0
  3647   002F76  6E36               	movwf	(?___fltol+2)^0,c
  3648   002F78  0E00               	movlw	0
  3649   002F7A  6E37               	movwf	(?___fltol+3)^0,c
  3650   002F7C  EF2D  F018         	goto	l965
  3651   002F80                     l4322:
  3652   002F80  C034  F038         	movff	___fltol@f1,??___fltol
  3653   002F84  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  3654   002F88  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  3655   002F8C  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  3656   002F90  0E20               	movlw	32
  3657   002F92  EFD0  F017         	goto	u3740
  3658   002F96                     u3745:
  3659   002F96  90D8               	bcf	status,0,c
  3660   002F98  323B               	rrcf	(??___fltol+3)^0,f,c
  3661   002F9A  323A               	rrcf	(??___fltol+2)^0,f,c
  3662   002F9C  3239               	rrcf	(??___fltol+1)^0,f,c
  3663   002F9E  3238               	rrcf	??___fltol^0,f,c
  3664   002FA0                     u3740:
  3665   002FA0  2EE8               	decfsz	wreg,f,c
  3666   002FA2  EFCB  F017         	goto	u3745
  3667   002FA6  5038               	movf	??___fltol^0,w,c
  3668   002FA8  6E3C               	movwf	___fltol@sign1^0,c
  3669   002FAA  8E36               	bsf	(___fltol@f1+2)^0,7,c
  3670   002FAC  0EFF               	movlw	255
  3671   002FAE  1634               	andwf	___fltol@f1^0,f,c
  3672   002FB0  0EFF               	movlw	255
  3673   002FB2  1635               	andwf	(___fltol@f1+1)^0,f,c
  3674   002FB4  0EFF               	movlw	255
  3675   002FB6  1636               	andwf	(___fltol@f1+2)^0,f,c
  3676   002FB8  0E00               	movlw	0
  3677   002FBA  1637               	andwf	(___fltol@f1+3)^0,f,c
  3678   002FBC  0E96               	movlw	150
  3679   002FBE  5E3D               	subwf	___fltol@exp1^0,f,c
  3680   002FC0  BE3D               	btfsc	___fltol@exp1^0,7,c
  3681   002FC2  EFE7  F017         	goto	u3750
  3682   002FC6  EFE5  F017         	goto	u3751
  3683   002FCA                     u3751:
  3684   002FCA  EFFD  F017         	goto	l4342
  3685   002FCE                     u3750:
  3686   002FCE  503D               	movf	___fltol@exp1^0,w,c
  3687   002FD0  0A80               	xorlw	128
  3688   002FD2  0F97               	addlw	151
  3689   002FD4  B0D8               	btfsc	status,0,c
  3690   002FD6  EFEF  F017         	goto	u3761
  3691   002FDA  EFF1  F017         	goto	u3760
  3692   002FDE                     u3761:
  3693   002FDE  EFF3  F017         	goto	l4338
  3694   002FE2                     u3760:
  3695   002FE2  EFB6  F017         	goto	l4318
  3696   002FE6                     l4338:
  3697   002FE6  90D8               	bcf	status,0,c
  3698   002FE8  3237               	rrcf	(___fltol@f1+3)^0,f,c
  3699   002FEA  3236               	rrcf	(___fltol@f1+2)^0,f,c
  3700   002FEC  3235               	rrcf	(___fltol@f1+1)^0,f,c
  3701   002FEE  3234               	rrcf	___fltol@f1^0,f,c
  3702   002FF0  3E3D               	incfsz	___fltol@exp1^0,f,c
  3703   002FF2  EFF3  F017         	goto	l4338
  3704   002FF6  EF15  F018         	goto	l4352
  3705   002FFA                     l4342:
  3706   002FFA  0E1F               	movlw	31
  3707   002FFC  643D               	cpfsgt	___fltol@exp1^0,c
  3708   002FFE  EF03  F018         	goto	u3771
  3709   003002  EF05  F018         	goto	u3770
  3710   003006                     u3771:
  3711   003006  EF0D  F018         	goto	l4350
  3712   00300A                     u3770:
  3713   00300A  EFB6  F017         	goto	l4318
  3714   00300E                     l4348:
  3715   00300E  90D8               	bcf	status,0,c
  3716   003010  3634               	rlcf	___fltol@f1^0,f,c
  3717   003012  3635               	rlcf	(___fltol@f1+1)^0,f,c
  3718   003014  3636               	rlcf	(___fltol@f1+2)^0,f,c
  3719   003016  3637               	rlcf	(___fltol@f1+3)^0,f,c
  3720   003018  063D               	decf	___fltol@exp1^0,f,c
  3721   00301A                     l4350:
  3722   00301A  503D               	movf	___fltol@exp1^0,w,c
  3723   00301C  A4D8               	btfss	status,2,c
  3724   00301E  EF13  F018         	goto	u3781
  3725   003022  EF15  F018         	goto	u3780
  3726   003026                     u3781:
  3727   003026  EF07  F018         	goto	l4348
  3728   00302A                     u3780:
  3729   00302A                     l4352:
  3730   00302A  503C               	movf	___fltol@sign1^0,w,c
  3731   00302C  B4D8               	btfsc	status,2,c
  3732   00302E  EF1B  F018         	goto	u3791
  3733   003032  EF1D  F018         	goto	u3790
  3734   003036                     u3791:
  3735   003036  EF25  F018         	goto	l4356
  3736   00303A                     u3790:
  3737   00303A  1E37               	comf	(___fltol@f1+3)^0,f,c
  3738   00303C  1E36               	comf	(___fltol@f1+2)^0,f,c
  3739   00303E  1E35               	comf	(___fltol@f1+1)^0,f,c
  3740   003040  6C34               	negf	___fltol@f1^0,c
  3741   003042  0E00               	movlw	0
  3742   003044  2235               	addwfc	(___fltol@f1+1)^0,f,c
  3743   003046  2236               	addwfc	(___fltol@f1+2)^0,f,c
  3744   003048  2237               	addwfc	(___fltol@f1+3)^0,f,c
  3745   00304A                     l4356:
  3746   00304A  C034  F034         	movff	___fltol@f1,?___fltol
  3747   00304E  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  3748   003052  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  3749   003056  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  3750   00305A                     l965:
  3751   00305A  0012               	return		;funcret
  3752   00305C                     __end_of___fltol:
  3753                           	callstack 0
  3754                           
  3755 ;; *************** function ___flsub *****************
  3756 ;; Defined at:
  3757 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  b               4   17[COMRAM] long 
  3760 ;;  a               4   21[COMRAM] long 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  4   17[COMRAM] long 
  3765 ;; Registers used:
  3766 ;;		wreg, status,2, status,0, cstack
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3772 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3775 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3776 ;;Total ram usage:        8 bytes
  3777 ;; Hardware stack levels used: 1
  3778 ;; Hardware stack levels required when called: 2
  3779 ;; This function calls:
  3780 ;;		___fladd
  3781 ;; This function is called by:
  3782 ;;		_convert_rgb2hue
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           	psect	text11
  3787   003FA8                     __ptext11:
  3788                           	callstack 0
  3789   003FA8                     ___flsub:
  3790                           	callstack 26
  3791   003FA8  0E00               	movlw	0
  3792   003FAA  1A16               	xorwf	___flsub@a^0,f,c
  3793   003FAC  0E00               	movlw	0
  3794   003FAE  1A17               	xorwf	(___flsub@a+1)^0,f,c
  3795   003FB0  0E00               	movlw	0
  3796   003FB2  1A18               	xorwf	(___flsub@a+2)^0,f,c
  3797   003FB4  0E80               	movlw	128
  3798   003FB6  1A19               	xorwf	(___flsub@a+3)^0,f,c
  3799   003FB8  C012  F002         	movff	___flsub@b,___fladd@b
  3800   003FBC  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  3801   003FC0  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  3802   003FC4  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  3803   003FC8  C016  F006         	movff	___flsub@a,___fladd@a
  3804   003FCC  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  3805   003FD0  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  3806   003FD4  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  3807   003FD8  EC1E  F00B         	call	___fladd	;wreg free
  3808   003FDC  C002  F012         	movff	?___fladd,?___flsub
  3809   003FE0  C003  F013         	movff	?___fladd+1,?___flsub+1
  3810   003FE4  C004  F014         	movff	?___fladd+2,?___flsub+2
  3811   003FE8  C005  F015         	movff	?___fladd+3,?___flsub+3
  3812   003FEC  0012               	return		;funcret
  3813   003FEE                     __end_of___flsub:
  3814                           	callstack 0
  3815                           
  3816 ;; *************** function ___fladd *****************
  3817 ;; Defined at:
  3818 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  b               4    1[COMRAM] long 
  3821 ;;  a               4    5[COMRAM] long 
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;  grs             1   16[COMRAM] unsigned char 
  3824 ;;  bexp            1   15[COMRAM] unsigned char 
  3825 ;;  aexp            1   14[COMRAM] unsigned char 
  3826 ;;  signs           1   13[COMRAM] unsigned char 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  4    1[COMRAM] unsigned char 
  3829 ;; Registers used:
  3830 ;;		wreg, status,2, status,0
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3836 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3837 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3838 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3839 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3840 ;;Total ram usage:       16 bytes
  3841 ;; Hardware stack levels used: 1
  3842 ;; Hardware stack levels required when called: 1
  3843 ;; This function calls:
  3844 ;;		Nothing
  3845 ;; This function is called by:
  3846 ;;		_convert_rgb2hue
  3847 ;;		___flsub
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text12
  3852   00163C                     __ptext12:
  3853                           	callstack 0
  3854   00163C                     ___fladd:
  3855                           	callstack 26
  3856   00163C  5005               	movf	(___fladd@b+3)^0,w,c
  3857   00163E  0B80               	andlw	128
  3858   001640  6E0E               	movwf	___fladd@signs^0,c
  3859   001642  5005               	movf	(___fladd@b+3)^0,w,c
  3860   001644  2405               	addwf	(___fladd@b+3)^0,w,c
  3861   001646  6E10               	movwf	___fladd@bexp^0,c
  3862   001648  AE04               	btfss	(___fladd@b+2)^0,7,c
  3863   00164A  EF29  F00B         	goto	u2771
  3864   00164E  EF2B  F00B         	goto	u2770
  3865   001652                     u2771:
  3866   001652  EF2C  F00B         	goto	l3670
  3867   001656                     u2770:
  3868   001656  8010               	bsf	___fladd@bexp^0,0,c
  3869   001658                     l3670:
  3870   001658  5010               	movf	___fladd@bexp^0,w,c
  3871   00165A  B4D8               	btfsc	status,2,c
  3872   00165C  EF32  F00B         	goto	u2781
  3873   001660  EF34  F00B         	goto	u2780
  3874   001664                     u2781:
  3875   001664  EF49  F00B         	goto	l3680
  3876   001668                     u2780:
  3877   001668  2810               	incf	___fladd@bexp^0,w,c
  3878   00166A  A4D8               	btfss	status,2,c
  3879   00166C  EF3A  F00B         	goto	u2791
  3880   001670  EF3C  F00B         	goto	u2790
  3881   001674                     u2791:
  3882   001674  EF44  F00B         	goto	l3676
  3883   001678                     u2790:
  3884   001678  0E00               	movlw	0
  3885   00167A  6E02               	movwf	___fladd@b^0,c
  3886   00167C  0E00               	movlw	0
  3887   00167E  6E03               	movwf	(___fladd@b+1)^0,c
  3888   001680  0E00               	movlw	0
  3889   001682  6E04               	movwf	(___fladd@b+2)^0,c
  3890   001684  0E00               	movlw	0
  3891   001686  6E05               	movwf	(___fladd@b+3)^0,c
  3892   001688                     l3676:
  3893   001688  8E04               	bsf	(___fladd@b+2)^0,7,c
  3894   00168A  0E00               	movlw	0
  3895   00168C  6E05               	movwf	(___fladd@b+3)^0,c
  3896   00168E  EF51  F00B         	goto	l3682
  3897   001692                     l3680:
  3898   001692  0E00               	movlw	0
  3899   001694  6E02               	movwf	___fladd@b^0,c
  3900   001696  0E00               	movlw	0
  3901   001698  6E03               	movwf	(___fladd@b+1)^0,c
  3902   00169A  0E00               	movlw	0
  3903   00169C  6E04               	movwf	(___fladd@b+2)^0,c
  3904   00169E  0E00               	movlw	0
  3905   0016A0  6E05               	movwf	(___fladd@b+3)^0,c
  3906   0016A2                     l3682:
  3907   0016A2  5009               	movf	(___fladd@a+3)^0,w,c
  3908   0016A4  0B80               	andlw	128
  3909   0016A6  6E0F               	movwf	___fladd@aexp^0,c
  3910   0016A8  500E               	movf	___fladd@signs^0,w,c
  3911   0016AA  180F               	xorwf	___fladd@aexp^0,w,c
  3912   0016AC  B4D8               	btfsc	status,2,c
  3913   0016AE  EF5B  F00B         	goto	u2801
  3914   0016B2  EF5D  F00B         	goto	u2800
  3915   0016B6                     u2801:
  3916   0016B6  EF5E  F00B         	goto	l3688
  3917   0016BA                     u2800:
  3918   0016BA  8C0E               	bsf	___fladd@signs^0,6,c
  3919   0016BC                     l3688:
  3920   0016BC  5009               	movf	(___fladd@a+3)^0,w,c
  3921   0016BE  2409               	addwf	(___fladd@a+3)^0,w,c
  3922   0016C0  6E0F               	movwf	___fladd@aexp^0,c
  3923   0016C2  AE08               	btfss	(___fladd@a+2)^0,7,c
  3924   0016C4  EF66  F00B         	goto	u2811
  3925   0016C8  EF68  F00B         	goto	u2810
  3926   0016CC                     u2811:
  3927   0016CC  EF69  F00B         	goto	l3694
  3928   0016D0                     u2810:
  3929   0016D0  800F               	bsf	___fladd@aexp^0,0,c
  3930   0016D2                     l3694:
  3931   0016D2  500F               	movf	___fladd@aexp^0,w,c
  3932   0016D4  B4D8               	btfsc	status,2,c
  3933   0016D6  EF6F  F00B         	goto	u2821
  3934   0016DA  EF71  F00B         	goto	u2820
  3935   0016DE                     u2821:
  3936   0016DE  EF86  F00B         	goto	l3704
  3937   0016E2                     u2820:
  3938   0016E2  280F               	incf	___fladd@aexp^0,w,c
  3939   0016E4  A4D8               	btfss	status,2,c
  3940   0016E6  EF77  F00B         	goto	u2831
  3941   0016EA  EF79  F00B         	goto	u2830
  3942   0016EE                     u2831:
  3943   0016EE  EF81  F00B         	goto	l3700
  3944   0016F2                     u2830:
  3945   0016F2  0E00               	movlw	0
  3946   0016F4  6E06               	movwf	___fladd@a^0,c
  3947   0016F6  0E00               	movlw	0
  3948   0016F8  6E07               	movwf	(___fladd@a+1)^0,c
  3949   0016FA  0E00               	movlw	0
  3950   0016FC  6E08               	movwf	(___fladd@a+2)^0,c
  3951   0016FE  0E00               	movlw	0
  3952   001700  6E09               	movwf	(___fladd@a+3)^0,c
  3953   001702                     l3700:
  3954   001702  8E08               	bsf	(___fladd@a+2)^0,7,c
  3955   001704  0E00               	movlw	0
  3956   001706  6E09               	movwf	(___fladd@a+3)^0,c
  3957   001708  EF8E  F00B         	goto	l3706
  3958   00170C                     l3704:
  3959   00170C  0E00               	movlw	0
  3960   00170E  6E06               	movwf	___fladd@a^0,c
  3961   001710  0E00               	movlw	0
  3962   001712  6E07               	movwf	(___fladd@a+1)^0,c
  3963   001714  0E00               	movlw	0
  3964   001716  6E08               	movwf	(___fladd@a+2)^0,c
  3965   001718  0E00               	movlw	0
  3966   00171A  6E09               	movwf	(___fladd@a+3)^0,c
  3967   00171C                     l3706:
  3968   00171C  5010               	movf	___fladd@bexp^0,w,c
  3969   00171E  5C0F               	subwf	___fladd@aexp^0,w,c
  3970   001720  B0D8               	btfsc	status,0,c
  3971   001722  EF95  F00B         	goto	u2841
  3972   001726  EF97  F00B         	goto	u2840
  3973   00172A                     u2841:
  3974   00172A  EFBE  F00B         	goto	l3742
  3975   00172E                     u2840:
  3976   00172E  AC0E               	btfss	___fladd@signs^0,6,c
  3977   001730  EF9C  F00B         	goto	u2851
  3978   001734  EF9E  F00B         	goto	u2850
  3979   001738                     u2851:
  3980   001738  EFA0  F00B         	goto	l3712
  3981   00173C                     u2850:
  3982   00173C  0E80               	movlw	128
  3983   00173E  1A0E               	xorwf	___fladd@signs^0,f,c
  3984   001740                     l3712:
  3985   001740  C010  F011         	movff	___fladd@bexp,___fladd@grs
  3986   001744  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  3987   001748  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  3988   00174C  C002  F011         	movff	___fladd@b,___fladd@grs
  3989   001750  C006  F002         	movff	___fladd@a,___fladd@b
  3990   001754  C011  F006         	movff	___fladd@grs,___fladd@a
  3991   001758  C003  F011         	movff	___fladd@b+1,___fladd@grs
  3992   00175C  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  3993   001760  C011  F007         	movff	___fladd@grs,___fladd@a+1
  3994   001764  C004  F011         	movff	___fladd@b+2,___fladd@grs
  3995   001768  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  3996   00176C  C011  F008         	movff	___fladd@grs,___fladd@a+2
  3997   001770  C005  F011         	movff	___fladd@b+3,___fladd@grs
  3998   001774  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  3999   001778  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4000   00177C                     l3742:
  4001   00177C  0E00               	movlw	0
  4002   00177E  6E11               	movwf	___fladd@grs^0,c
  4003   001780  5010               	movf	___fladd@bexp^0,w,c
  4004   001782  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4005   001786  6A0B               	clrf	(??___fladd+1)^0,c
  4006   001788  5E0A               	subwf	??___fladd^0,f,c
  4007   00178A  0E00               	movlw	0
  4008   00178C  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4009   00178E  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4010   001790  EFD3  F00B         	goto	u2861
  4011   001794  500B               	movf	(??___fladd+1)^0,w,c
  4012   001796  E109               	bnz	u2860
  4013   001798  0E1A               	movlw	26
  4014   00179A  5C0A               	subwf	??___fladd^0,w,c
  4015   00179C  A0D8               	btfss	status,0,c
  4016   00179E  EFD3  F00B         	goto	u2861
  4017   0017A2  EFD5  F00B         	goto	u2860
  4018   0017A6                     u2861:
  4019   0017A6  EF0C  F00C         	goto	l1197
  4020   0017AA                     u2860:
  4021   0017AA  5002               	movf	___fladd@b^0,w,c
  4022   0017AC  1003               	iorwf	(___fladd@b+1)^0,w,c
  4023   0017AE  1004               	iorwf	(___fladd@b+2)^0,w,c
  4024   0017B0  1005               	iorwf	(___fladd@b+3)^0,w,c
  4025   0017B2  A4D8               	btfss	status,2,c
  4026   0017B4  EFDE  F00B         	goto	u2871
  4027   0017B8  EFE1  F00B         	goto	u2870
  4028   0017BC                     u2871:
  4029   0017BC  0E01               	movlw	1
  4030   0017BE  EFE2  F00B         	goto	u2880
  4031   0017C2                     u2870:
  4032   0017C2  0E00               	movlw	0
  4033   0017C4                     u2880:
  4034   0017C4  6E11               	movwf	___fladd@grs^0,c
  4035   0017C6  0E00               	movlw	0
  4036   0017C8  6E02               	movwf	___fladd@b^0,c
  4037   0017CA  0E00               	movlw	0
  4038   0017CC  6E03               	movwf	(___fladd@b+1)^0,c
  4039   0017CE  0E00               	movlw	0
  4040   0017D0  6E04               	movwf	(___fladd@b+2)^0,c
  4041   0017D2  0E00               	movlw	0
  4042   0017D4  6E05               	movwf	(___fladd@b+3)^0,c
  4043   0017D6  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4044   0017DA  EF15  F00C         	goto	l1196
  4045   0017DE                     l1198:
  4046   0017DE  A011               	btfss	___fladd@grs^0,0,c
  4047   0017E0  EFF4  F00B         	goto	u2891
  4048   0017E4  EFF6  F00B         	goto	u2890
  4049   0017E8                     u2891:
  4050   0017E8  EFFC  F00B         	goto	l3754
  4051   0017EC                     u2890:
  4052   0017EC  90D8               	bcf	status,0,c
  4053   0017EE  3011               	rrcf	___fladd@grs^0,w,c
  4054   0017F0  0901               	iorlw	1
  4055   0017F2  6E11               	movwf	___fladd@grs^0,c
  4056   0017F4  EFFE  F00B         	goto	l3756
  4057   0017F8                     l3754:
  4058   0017F8  90D8               	bcf	status,0,c
  4059   0017FA  3211               	rrcf	___fladd@grs^0,f,c
  4060   0017FC                     l3756:
  4061   0017FC  A002               	btfss	___fladd@b^0,0,c
  4062   0017FE  EF03  F00C         	goto	u2901
  4063   001802  EF05  F00C         	goto	u2900
  4064   001806                     u2901:
  4065   001806  EF06  F00C         	goto	l3760
  4066   00180A                     u2900:
  4067   00180A  8E11               	bsf	___fladd@grs^0,7,c
  4068   00180C                     l3760:
  4069   00180C  3405               	rlcf	(___fladd@b+3)^0,w,c
  4070   00180E  3205               	rrcf	(___fladd@b+3)^0,f,c
  4071   001810  3204               	rrcf	(___fladd@b+2)^0,f,c
  4072   001812  3203               	rrcf	(___fladd@b+1)^0,f,c
  4073   001814  3202               	rrcf	___fladd@b^0,f,c
  4074   001816  2A10               	incf	___fladd@bexp^0,f,c
  4075   001818                     l1197:
  4076   001818  500F               	movf	___fladd@aexp^0,w,c
  4077   00181A  5C10               	subwf	___fladd@bexp^0,w,c
  4078   00181C  A0D8               	btfss	status,0,c
  4079   00181E  EF13  F00C         	goto	u2911
  4080   001822  EF15  F00C         	goto	u2910
  4081   001826                     u2911:
  4082   001826  EFEF  F00B         	goto	l1198
  4083   00182A                     u2910:
  4084   00182A                     l1196:
  4085   00182A  BC0E               	btfsc	___fladd@signs^0,6,c
  4086   00182C  EF1A  F00C         	goto	u2921
  4087   001830  EF1C  F00C         	goto	u2920
  4088   001834                     u2921:
  4089   001834  EF5C  F00C         	goto	l3788
  4090   001838                     u2920:
  4091   001838  5010               	movf	___fladd@bexp^0,w,c
  4092   00183A  A4D8               	btfss	status,2,c
  4093   00183C  EF22  F00C         	goto	u2931
  4094   001840  EF24  F00C         	goto	u2930
  4095   001844                     u2931:
  4096   001844  EF2E  F00C         	goto	l3770
  4097   001848                     u2930:
  4098   001848  0E00               	movlw	0
  4099   00184A  6E02               	movwf	?___fladd^0,c
  4100   00184C  0E00               	movlw	0
  4101   00184E  6E03               	movwf	(?___fladd+1)^0,c
  4102   001850  0E00               	movlw	0
  4103   001852  6E04               	movwf	(?___fladd+2)^0,c
  4104   001854  0E00               	movlw	0
  4105   001856  6E05               	movwf	(?___fladd+3)^0,c
  4106   001858  EF7D  F00D         	goto	l1205
  4107   00185C                     l3770:
  4108   00185C  5006               	movf	___fladd@a^0,w,c
  4109   00185E  2602               	addwf	___fladd@b^0,f,c
  4110   001860  5007               	movf	(___fladd@a+1)^0,w,c
  4111   001862  2203               	addwfc	(___fladd@b+1)^0,f,c
  4112   001864  5008               	movf	(___fladd@a+2)^0,w,c
  4113   001866  2204               	addwfc	(___fladd@b+2)^0,f,c
  4114   001868  5009               	movf	(___fladd@a+3)^0,w,c
  4115   00186A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4116   00186C  A005               	btfss	(___fladd@b+3)^0,0,c
  4117   00186E  EF3B  F00C         	goto	u2941
  4118   001872  EF3D  F00C         	goto	u2940
  4119   001876                     u2941:
  4120   001876  EFE9  F00C         	goto	l3824
  4121   00187A                     u2940:
  4122   00187A  A011               	btfss	___fladd@grs^0,0,c
  4123   00187C  EF42  F00C         	goto	u2951
  4124   001880  EF44  F00C         	goto	u2950
  4125   001884                     u2951:
  4126   001884  EF4A  F00C         	goto	l3778
  4127   001888                     u2950:
  4128   001888  90D8               	bcf	status,0,c
  4129   00188A  3011               	rrcf	___fladd@grs^0,w,c
  4130   00188C  0901               	iorlw	1
  4131   00188E  6E11               	movwf	___fladd@grs^0,c
  4132   001890  EF4C  F00C         	goto	l3780
  4133   001894                     l3778:
  4134   001894  90D8               	bcf	status,0,c
  4135   001896  3211               	rrcf	___fladd@grs^0,f,c
  4136   001898                     l3780:
  4137   001898  A002               	btfss	___fladd@b^0,0,c
  4138   00189A  EF51  F00C         	goto	u2961
  4139   00189E  EF53  F00C         	goto	u2960
  4140   0018A2                     u2961:
  4141   0018A2  EF54  F00C         	goto	l3784
  4142   0018A6                     u2960:
  4143   0018A6  8E11               	bsf	___fladd@grs^0,7,c
  4144   0018A8                     l3784:
  4145   0018A8  3405               	rlcf	(___fladd@b+3)^0,w,c
  4146   0018AA  3205               	rrcf	(___fladd@b+3)^0,f,c
  4147   0018AC  3204               	rrcf	(___fladd@b+2)^0,f,c
  4148   0018AE  3203               	rrcf	(___fladd@b+1)^0,f,c
  4149   0018B0  3202               	rrcf	___fladd@b^0,f,c
  4150   0018B2  2A10               	incf	___fladd@bexp^0,f,c
  4151   0018B4  EFE9  F00C         	goto	l3824
  4152   0018B8                     l3788:
  4153   0018B8  5006               	movf	___fladd@a^0,w,c
  4154   0018BA  5C02               	subwf	___fladd@b^0,w,c
  4155   0018BC  5007               	movf	(___fladd@a+1)^0,w,c
  4156   0018BE  5803               	subwfb	(___fladd@b+1)^0,w,c
  4157   0018C0  5008               	movf	(___fladd@a+2)^0,w,c
  4158   0018C2  5804               	subwfb	(___fladd@b+2)^0,w,c
  4159   0018C4  5005               	movf	(___fladd@b+3)^0,w,c
  4160   0018C6  0A80               	xorlw	128
  4161   0018C8  6E0A               	movwf	??___fladd^0,c
  4162   0018CA  5009               	movf	(___fladd@a+3)^0,w,c
  4163   0018CC  0A80               	xorlw	128
  4164   0018CE  580A               	subwfb	??___fladd^0,w,c
  4165   0018D0  B0D8               	btfsc	status,0,c
  4166   0018D2  EF6D  F00C         	goto	u2971
  4167   0018D6  EF6F  F00C         	goto	u2970
  4168   0018DA                     u2971:
  4169   0018DA  EF9A  F00C         	goto	l3798
  4170   0018DE                     u2970:
  4171   0018DE  5002               	movf	___fladd@b^0,w,c
  4172   0018E0  5C06               	subwf	___fladd@a^0,w,c
  4173   0018E2  6E0A               	movwf	??___fladd^0,c
  4174   0018E4  5003               	movf	(___fladd@b+1)^0,w,c
  4175   0018E6  5807               	subwfb	(___fladd@a+1)^0,w,c
  4176   0018E8  6E0B               	movwf	(??___fladd+1)^0,c
  4177   0018EA  5004               	movf	(___fladd@b+2)^0,w,c
  4178   0018EC  5808               	subwfb	(___fladd@a+2)^0,w,c
  4179   0018EE  6E0C               	movwf	(??___fladd+2)^0,c
  4180   0018F0  5005               	movf	(___fladd@b+3)^0,w,c
  4181   0018F2  5809               	subwfb	(___fladd@a+3)^0,w,c
  4182   0018F4  6E0D               	movwf	(??___fladd+3)^0,c
  4183   0018F6  0EFF               	movlw	255
  4184   0018F8  240A               	addwf	??___fladd^0,w,c
  4185   0018FA  6E02               	movwf	___fladd@b^0,c
  4186   0018FC  0EFF               	movlw	255
  4187   0018FE  200B               	addwfc	(??___fladd+1)^0,w,c
  4188   001900  6E03               	movwf	(___fladd@b+1)^0,c
  4189   001902  0EFF               	movlw	255
  4190   001904  200C               	addwfc	(??___fladd+2)^0,w,c
  4191   001906  6E04               	movwf	(___fladd@b+2)^0,c
  4192   001908  0EFF               	movlw	255
  4193   00190A  200D               	addwfc	(??___fladd+3)^0,w,c
  4194   00190C  6E05               	movwf	(___fladd@b+3)^0,c
  4195   00190E  0E80               	movlw	128
  4196   001910  1A0E               	xorwf	___fladd@signs^0,f,c
  4197   001912  6C11               	negf	___fladd@grs^0,c
  4198   001914  5011               	movf	___fladd@grs^0,w,c
  4199   001916  A4D8               	btfss	status,2,c
  4200   001918  EF90  F00C         	goto	u2981
  4201   00191C  EF92  F00C         	goto	u2980
  4202   001920                     u2981:
  4203   001920  EFA2  F00C         	goto	l1213
  4204   001924                     u2980:
  4205   001924  0E01               	movlw	1
  4206   001926  2602               	addwf	___fladd@b^0,f,c
  4207   001928  0E00               	movlw	0
  4208   00192A  2203               	addwfc	(___fladd@b+1)^0,f,c
  4209   00192C  2204               	addwfc	(___fladd@b+2)^0,f,c
  4210   00192E  2205               	addwfc	(___fladd@b+3)^0,f,c
  4211   001930  EFA2  F00C         	goto	l1213
  4212   001934                     l3798:
  4213   001934  5006               	movf	___fladd@a^0,w,c
  4214   001936  5E02               	subwf	___fladd@b^0,f,c
  4215   001938  5007               	movf	(___fladd@a+1)^0,w,c
  4216   00193A  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4217   00193C  5008               	movf	(___fladd@a+2)^0,w,c
  4218   00193E  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4219   001940  5009               	movf	(___fladd@a+3)^0,w,c
  4220   001942  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4221   001944                     l1213:
  4222   001944  5002               	movf	___fladd@b^0,w,c
  4223   001946  1003               	iorwf	(___fladd@b+1)^0,w,c
  4224   001948  1004               	iorwf	(___fladd@b+2)^0,w,c
  4225   00194A  1005               	iorwf	(___fladd@b+3)^0,w,c
  4226   00194C  A4D8               	btfss	status,2,c
  4227   00194E  EFAB  F00C         	goto	u2991
  4228   001952  EFAD  F00C         	goto	u2990
  4229   001956                     u2991:
  4230   001956  EFE2  F00C         	goto	l3822
  4231   00195A                     u2990:
  4232   00195A  5011               	movf	___fladd@grs^0,w,c
  4233   00195C  A4D8               	btfss	status,2,c
  4234   00195E  EFB3  F00C         	goto	u3001
  4235   001962  EFB5  F00C         	goto	u3000
  4236   001966                     u3001:
  4237   001966  EFE2  F00C         	goto	l3822
  4238   00196A                     u3000:
  4239   00196A  0E00               	movlw	0
  4240   00196C  6E02               	movwf	?___fladd^0,c
  4241   00196E  0E00               	movlw	0
  4242   001970  6E03               	movwf	(?___fladd+1)^0,c
  4243   001972  0E00               	movlw	0
  4244   001974  6E04               	movwf	(?___fladd+2)^0,c
  4245   001976  0E00               	movlw	0
  4246   001978  6E05               	movwf	(?___fladd+3)^0,c
  4247   00197A  EF7D  F00D         	goto	l1205
  4248   00197E                     l3806:
  4249   00197E  90D8               	bcf	status,0,c
  4250   001980  3602               	rlcf	___fladd@b^0,f,c
  4251   001982  3603               	rlcf	(___fladd@b+1)^0,f,c
  4252   001984  3604               	rlcf	(___fladd@b+2)^0,f,c
  4253   001986  3605               	rlcf	(___fladd@b+3)^0,f,c
  4254   001988  AE11               	btfss	___fladd@grs^0,7,c
  4255   00198A  EFC9  F00C         	goto	u3011
  4256   00198E  EFCB  F00C         	goto	u3010
  4257   001992                     u3011:
  4258   001992  EFCC  F00C         	goto	l3812
  4259   001996                     u3010:
  4260   001996  8002               	bsf	___fladd@b^0,0,c
  4261   001998                     l3812:
  4262   001998  A011               	btfss	___fladd@grs^0,0,c
  4263   00199A  EFD1  F00C         	goto	u3021
  4264   00199E  EFD3  F00C         	goto	u3020
  4265   0019A2                     u3021:
  4266   0019A2  EFD7  F00C         	goto	l3816
  4267   0019A6                     u3020:
  4268   0019A6  80D8               	bsf	status,0,c
  4269   0019A8  3611               	rlcf	___fladd@grs^0,f,c
  4270   0019AA  EFD9  F00C         	goto	l3818
  4271   0019AE                     l3816:
  4272   0019AE  90D8               	bcf	status,0,c
  4273   0019B0  3611               	rlcf	___fladd@grs^0,f,c
  4274   0019B2                     l3818:
  4275   0019B2  5010               	movf	___fladd@bexp^0,w,c
  4276   0019B4  B4D8               	btfsc	status,2,c
  4277   0019B6  EFDF  F00C         	goto	u3031
  4278   0019BA  EFE1  F00C         	goto	u3030
  4279   0019BE                     u3031:
  4280   0019BE  EFE2  F00C         	goto	l3822
  4281   0019C2                     u3030:
  4282   0019C2  0610               	decf	___fladd@bexp^0,f,c
  4283   0019C4                     l3822:
  4284   0019C4  AE04               	btfss	(___fladd@b+2)^0,7,c
  4285   0019C6  EFE7  F00C         	goto	u3041
  4286   0019CA  EFE9  F00C         	goto	u3040
  4287   0019CE                     u3041:
  4288   0019CE  EFBF  F00C         	goto	l3806
  4289   0019D2                     u3040:
  4290   0019D2                     l3824:
  4291   0019D2  0E00               	movlw	0
  4292   0019D4  6E0F               	movwf	___fladd@aexp^0,c
  4293   0019D6  AE11               	btfss	___fladd@grs^0,7,c
  4294   0019D8  EFF0  F00C         	goto	u3051
  4295   0019DC  EFF2  F00C         	goto	u3050
  4296   0019E0                     u3051:
  4297   0019E0  EF0A  F00D         	goto	l1222
  4298   0019E4                     u3050:
  4299   0019E4  C011  F00A         	movff	___fladd@grs,??___fladd
  4300   0019E8  0E7F               	movlw	127
  4301   0019EA  160A               	andwf	??___fladd^0,f,c
  4302   0019EC  B4D8               	btfsc	status,2,c
  4303   0019EE  EFFB  F00C         	goto	u3061
  4304   0019F2  EFFD  F00C         	goto	u3060
  4305   0019F6                     u3061:
  4306   0019F6  EF01  F00D         	goto	l1223
  4307   0019FA                     u3060:
  4308   0019FA                     l3830:
  4309   0019FA  0E01               	movlw	1
  4310   0019FC  6E0F               	movwf	___fladd@aexp^0,c
  4311   0019FE  EF0A  F00D         	goto	l1222
  4312   001A02                     l1223:
  4313   001A02  A002               	btfss	___fladd@b^0,0,c
  4314   001A04  EF06  F00D         	goto	u3071
  4315   001A08  EF08  F00D         	goto	u3070
  4316   001A0C                     u3071:
  4317   001A0C  EF0A  F00D         	goto	l1222
  4318   001A10                     u3070:
  4319   001A10  EFFD  F00C         	goto	l3830
  4320   001A14                     l1222:
  4321   001A14  500F               	movf	___fladd@aexp^0,w,c
  4322   001A16  B4D8               	btfsc	status,2,c
  4323   001A18  EF10  F00D         	goto	u3081
  4324   001A1C  EF12  F00D         	goto	u3080
  4325   001A20                     u3081:
  4326   001A20  EF3D  F00D         	goto	l3842
  4327   001A24                     u3080:
  4328   001A24  0E01               	movlw	1
  4329   001A26  2602               	addwf	___fladd@b^0,f,c
  4330   001A28  0E00               	movlw	0
  4331   001A2A  2203               	addwfc	(___fladd@b+1)^0,f,c
  4332   001A2C  2204               	addwfc	(___fladd@b+2)^0,f,c
  4333   001A2E  2205               	addwfc	(___fladd@b+3)^0,f,c
  4334   001A30  A005               	btfss	(___fladd@b+3)^0,0,c
  4335   001A32  EF1D  F00D         	goto	u3091
  4336   001A36  EF1F  F00D         	goto	u3090
  4337   001A3A                     u3091:
  4338   001A3A  EF3D  F00D         	goto	l3842
  4339   001A3E                     u3090:
  4340   001A3E  C002  F00A         	movff	___fladd@b,??___fladd
  4341   001A42  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4342   001A46  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4343   001A4A  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4344   001A4E  340D               	rlcf	(??___fladd+3)^0,w,c
  4345   001A50  320D               	rrcf	(??___fladd+3)^0,f,c
  4346   001A52  320C               	rrcf	(??___fladd+2)^0,f,c
  4347   001A54  320B               	rrcf	(??___fladd+1)^0,f,c
  4348   001A56  320A               	rrcf	??___fladd^0,f,c
  4349   001A58  C00A  F002         	movff	??___fladd,___fladd@b
  4350   001A5C  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4351   001A60  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4352   001A64  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4353   001A68  2810               	incf	___fladd@bexp^0,w,c
  4354   001A6A  B4D8               	btfsc	status,2,c
  4355   001A6C  EF3A  F00D         	goto	u3101
  4356   001A70  EF3C  F00D         	goto	u3100
  4357   001A74                     u3101:
  4358   001A74  EF3D  F00D         	goto	l3842
  4359   001A78                     u3100:
  4360   001A78  2A10               	incf	___fladd@bexp^0,f,c
  4361   001A7A                     l3842:
  4362   001A7A  2810               	incf	___fladd@bexp^0,w,c
  4363   001A7C  B4D8               	btfsc	status,2,c
  4364   001A7E  EF43  F00D         	goto	u3111
  4365   001A82  EF45  F00D         	goto	u3110
  4366   001A86                     u3111:
  4367   001A86  EF4D  F00D         	goto	l3846
  4368   001A8A                     u3110:
  4369   001A8A  5010               	movf	___fladd@bexp^0,w,c
  4370   001A8C  A4D8               	btfss	status,2,c
  4371   001A8E  EF4B  F00D         	goto	u3121
  4372   001A92  EF4D  F00D         	goto	u3120
  4373   001A96                     u3121:
  4374   001A96  EF5F  F00D         	goto	l3850
  4375   001A9A                     u3120:
  4376   001A9A                     l3846:
  4377   001A9A  0E00               	movlw	0
  4378   001A9C  6E02               	movwf	___fladd@b^0,c
  4379   001A9E  0E00               	movlw	0
  4380   001AA0  6E03               	movwf	(___fladd@b+1)^0,c
  4381   001AA2  0E00               	movlw	0
  4382   001AA4  6E04               	movwf	(___fladd@b+2)^0,c
  4383   001AA6  0E00               	movlw	0
  4384   001AA8  6E05               	movwf	(___fladd@b+3)^0,c
  4385   001AAA  5010               	movf	___fladd@bexp^0,w,c
  4386   001AAC  A4D8               	btfss	status,2,c
  4387   001AAE  EF5B  F00D         	goto	u3131
  4388   001AB2  EF5D  F00D         	goto	u3130
  4389   001AB6                     u3131:
  4390   001AB6  EF5F  F00D         	goto	l3850
  4391   001ABA                     u3130:
  4392   001ABA  0E00               	movlw	0
  4393   001ABC  6E0E               	movwf	___fladd@signs^0,c
  4394   001ABE                     l3850:
  4395   001ABE  A010               	btfss	___fladd@bexp^0,0,c
  4396   001AC0  EF64  F00D         	goto	u3141
  4397   001AC4  EF66  F00D         	goto	u3140
  4398   001AC8                     u3141:
  4399   001AC8  EF69  F00D         	goto	l3854
  4400   001ACC                     u3140:
  4401   001ACC  8E04               	bsf	(___fladd@b+2)^0,7,c
  4402   001ACE  EF6A  F00D         	goto	l3856
  4403   001AD2                     l3854:
  4404   001AD2  9E04               	bcf	(___fladd@b+2)^0,7,c
  4405   001AD4                     l3856:
  4406   001AD4  90D8               	bcf	status,0,c
  4407   001AD6  3010               	rrcf	___fladd@bexp^0,w,c
  4408   001AD8  6E05               	movwf	(___fladd@b+3)^0,c
  4409   001ADA  AE0E               	btfss	___fladd@signs^0,7,c
  4410   001ADC  EF72  F00D         	goto	u3151
  4411   001AE0  EF74  F00D         	goto	u3150
  4412   001AE4                     u3151:
  4413   001AE4  EF75  F00D         	goto	l3862
  4414   001AE8                     u3150:
  4415   001AE8  8E05               	bsf	(___fladd@b+3)^0,7,c
  4416   001AEA                     l3862:
  4417   001AEA  C002  F002         	movff	___fladd@b,?___fladd
  4418   001AEE  C003  F003         	movff	___fladd@b+1,?___fladd+1
  4419   001AF2  C004  F004         	movff	___fladd@b+2,?___fladd+2
  4420   001AF6  C005  F005         	movff	___fladd@b+3,?___fladd+3
  4421   001AFA                     l1205:
  4422   001AFA  0012               	return		;funcret
  4423   001AFC                     __end_of___fladd:
  4424                           	callstack 0
  4425                           
  4426 ;; *************** function ___flmul *****************
  4427 ;; Defined at:
  4428 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  b               4    1[COMRAM] unsigned char 
  4431 ;;  a               4    5[COMRAM] unsigned char 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  prod            4   20[COMRAM] struct .
  4434 ;;  grs             4   14[COMRAM] unsigned long 
  4435 ;;  temp            2   24[COMRAM] struct .
  4436 ;;  bexp            1   19[COMRAM] unsigned char 
  4437 ;;  aexp            1   18[COMRAM] unsigned char 
  4438 ;;  sign            1   13[COMRAM] unsigned char 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  4    1[COMRAM] unsigned char 
  4441 ;; Registers used:
  4442 ;;		wreg, status,2, status,0, prodl, prodh
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4448 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4449 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4450 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4451 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4452 ;;Total ram usage:       25 bytes
  4453 ;; Hardware stack levels used: 1
  4454 ;; Hardware stack levels required when called: 1
  4455 ;; This function calls:
  4456 ;;		Nothing
  4457 ;; This function is called by:
  4458 ;;		_convert_rgb2hue
  4459 ;;		_main
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text13
  4464   001AFC                     __ptext13:
  4465                           	callstack 0
  4466   001AFC                     ___flmul:
  4467                           	callstack 27
  4468   001AFC  5005               	movf	(___flmul@b+3)^0,w,c
  4469   001AFE  0B80               	andlw	128
  4470   001B00  6E0E               	movwf	___flmul@sign^0,c
  4471   001B02  5005               	movf	(___flmul@b+3)^0,w,c
  4472   001B04  2405               	addwf	(___flmul@b+3)^0,w,c
  4473   001B06  6E14               	movwf	___flmul@bexp^0,c
  4474   001B08  AE04               	btfss	(___flmul@b+2)^0,7,c
  4475   001B0A  EF89  F00D         	goto	u3461
  4476   001B0E  EF8B  F00D         	goto	u3460
  4477   001B12                     u3461:
  4478   001B12  EF8C  F00D         	goto	l4148
  4479   001B16                     u3460:
  4480   001B16  8014               	bsf	___flmul@bexp^0,0,c
  4481   001B18                     l4148:
  4482   001B18  5014               	movf	___flmul@bexp^0,w,c
  4483   001B1A  B4D8               	btfsc	status,2,c
  4484   001B1C  EF92  F00D         	goto	u3471
  4485   001B20  EF94  F00D         	goto	u3470
  4486   001B24                     u3471:
  4487   001B24  EFA7  F00D         	goto	l4156
  4488   001B28                     u3470:
  4489   001B28  2814               	incf	___flmul@bexp^0,w,c
  4490   001B2A  A4D8               	btfss	status,2,c
  4491   001B2C  EF9A  F00D         	goto	u3481
  4492   001B30  EF9C  F00D         	goto	u3480
  4493   001B34                     u3481:
  4494   001B34  EFA4  F00D         	goto	l4154
  4495   001B38                     u3480:
  4496   001B38  0E00               	movlw	0
  4497   001B3A  6E02               	movwf	___flmul@b^0,c
  4498   001B3C  0E00               	movlw	0
  4499   001B3E  6E03               	movwf	(___flmul@b+1)^0,c
  4500   001B40  0E00               	movlw	0
  4501   001B42  6E04               	movwf	(___flmul@b+2)^0,c
  4502   001B44  0E00               	movlw	0
  4503   001B46  6E05               	movwf	(___flmul@b+3)^0,c
  4504   001B48                     l4154:
  4505   001B48  8E04               	bsf	(___flmul@b+2)^0,7,c
  4506   001B4A  EFAF  F00D         	goto	l4158
  4507   001B4E                     l4156:
  4508   001B4E  0E00               	movlw	0
  4509   001B50  6E02               	movwf	___flmul@b^0,c
  4510   001B52  0E00               	movlw	0
  4511   001B54  6E03               	movwf	(___flmul@b+1)^0,c
  4512   001B56  0E00               	movlw	0
  4513   001B58  6E04               	movwf	(___flmul@b+2)^0,c
  4514   001B5A  0E00               	movlw	0
  4515   001B5C  6E05               	movwf	(___flmul@b+3)^0,c
  4516   001B5E                     l4158:
  4517   001B5E  5009               	movf	(___flmul@a+3)^0,w,c
  4518   001B60  0B80               	andlw	128
  4519   001B62  1A0E               	xorwf	___flmul@sign^0,f,c
  4520   001B64  5009               	movf	(___flmul@a+3)^0,w,c
  4521   001B66  2409               	addwf	(___flmul@a+3)^0,w,c
  4522   001B68  6E13               	movwf	___flmul@aexp^0,c
  4523   001B6A  AE08               	btfss	(___flmul@a+2)^0,7,c
  4524   001B6C  EFBA  F00D         	goto	u3491
  4525   001B70  EFBC  F00D         	goto	u3490
  4526   001B74                     u3491:
  4527   001B74  EFBD  F00D         	goto	l4166
  4528   001B78                     u3490:
  4529   001B78  8013               	bsf	___flmul@aexp^0,0,c
  4530   001B7A                     l4166:
  4531   001B7A  5013               	movf	___flmul@aexp^0,w,c
  4532   001B7C  B4D8               	btfsc	status,2,c
  4533   001B7E  EFC3  F00D         	goto	u3501
  4534   001B82  EFC5  F00D         	goto	u3500
  4535   001B86                     u3501:
  4536   001B86  EFD8  F00D         	goto	l4174
  4537   001B8A                     u3500:
  4538   001B8A  2813               	incf	___flmul@aexp^0,w,c
  4539   001B8C  A4D8               	btfss	status,2,c
  4540   001B8E  EFCB  F00D         	goto	u3511
  4541   001B92  EFCD  F00D         	goto	u3510
  4542   001B96                     u3511:
  4543   001B96  EFD5  F00D         	goto	l4172
  4544   001B9A                     u3510:
  4545   001B9A  0E00               	movlw	0
  4546   001B9C  6E06               	movwf	___flmul@a^0,c
  4547   001B9E  0E00               	movlw	0
  4548   001BA0  6E07               	movwf	(___flmul@a+1)^0,c
  4549   001BA2  0E00               	movlw	0
  4550   001BA4  6E08               	movwf	(___flmul@a+2)^0,c
  4551   001BA6  0E00               	movlw	0
  4552   001BA8  6E09               	movwf	(___flmul@a+3)^0,c
  4553   001BAA                     l4172:
  4554   001BAA  8E08               	bsf	(___flmul@a+2)^0,7,c
  4555   001BAC  EFE0  F00D         	goto	l1282
  4556   001BB0                     l4174:
  4557   001BB0  0E00               	movlw	0
  4558   001BB2  6E06               	movwf	___flmul@a^0,c
  4559   001BB4  0E00               	movlw	0
  4560   001BB6  6E07               	movwf	(___flmul@a+1)^0,c
  4561   001BB8  0E00               	movlw	0
  4562   001BBA  6E08               	movwf	(___flmul@a+2)^0,c
  4563   001BBC  0E00               	movlw	0
  4564   001BBE  6E09               	movwf	(___flmul@a+3)^0,c
  4565   001BC0                     l1282:
  4566   001BC0  5013               	movf	___flmul@aexp^0,w,c
  4567   001BC2  B4D8               	btfsc	status,2,c
  4568   001BC4  EFE6  F00D         	goto	u3521
  4569   001BC8  EFE8  F00D         	goto	u3520
  4570   001BCC                     u3521:
  4571   001BCC  EFF0  F00D         	goto	l4178
  4572   001BD0                     u3520:
  4573   001BD0  5014               	movf	___flmul@bexp^0,w,c
  4574   001BD2  A4D8               	btfss	status,2,c
  4575   001BD4  EFEE  F00D         	goto	u3531
  4576   001BD8  EFF0  F00D         	goto	u3530
  4577   001BDC                     u3531:
  4578   001BDC  EFFA  F00D         	goto	l4182
  4579   001BE0                     u3530:
  4580   001BE0                     l4178:
  4581   001BE0  0E00               	movlw	0
  4582   001BE2  6E02               	movwf	?___flmul^0,c
  4583   001BE4  0E00               	movlw	0
  4584   001BE6  6E03               	movwf	(?___flmul+1)^0,c
  4585   001BE8  0E00               	movlw	0
  4586   001BEA  6E04               	movwf	(?___flmul+2)^0,c
  4587   001BEC  0E00               	movlw	0
  4588   001BEE  6E05               	movwf	(?___flmul+3)^0,c
  4589   001BF0  EF92  F00F         	goto	l1286
  4590   001BF4                     l4182:
  4591   001BF4  5008               	movf	(___flmul@a+2)^0,w,c
  4592   001BF6  0202               	mulwf	___flmul@b^0,c
  4593   001BF8  CFF3 F019          	movff	prodl,___flmul@temp
  4594   001BFC  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4595   001C00  5019               	movf	___flmul@temp^0,w,c
  4596   001C02  6E0F               	movwf	___flmul@grs^0,c
  4597   001C04  6A10               	clrf	(___flmul@grs+1)^0,c
  4598   001C06  6A11               	clrf	(___flmul@grs+2)^0,c
  4599   001C08  6A12               	clrf	(___flmul@grs+3)^0,c
  4600   001C0A  501A               	movf	(___flmul@temp+1)^0,w,c
  4601   001C0C  6E15               	movwf	___flmul@prod^0,c
  4602   001C0E  6A16               	clrf	(___flmul@prod+1)^0,c
  4603   001C10  6A17               	clrf	(___flmul@prod+2)^0,c
  4604   001C12  6A18               	clrf	(___flmul@prod+3)^0,c
  4605   001C14  5007               	movf	(___flmul@a+1)^0,w,c
  4606   001C16  0203               	mulwf	(___flmul@b+1)^0,c
  4607   001C18  CFF3 F019          	movff	prodl,___flmul@temp
  4608   001C1C  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4609   001C20  5019               	movf	___flmul@temp^0,w,c
  4610   001C22  260F               	addwf	___flmul@grs^0,f,c
  4611   001C24  0E00               	movlw	0
  4612   001C26  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4613   001C28  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4614   001C2A  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4615   001C2C  501A               	movf	(___flmul@temp+1)^0,w,c
  4616   001C2E  2615               	addwf	___flmul@prod^0,f,c
  4617   001C30  0E00               	movlw	0
  4618   001C32  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4619   001C34  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4620   001C36  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4621   001C38  5006               	movf	___flmul@a^0,w,c
  4622   001C3A  0204               	mulwf	(___flmul@b+2)^0,c
  4623   001C3C  CFF3 F019          	movff	prodl,___flmul@temp
  4624   001C40  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4625   001C44  5019               	movf	___flmul@temp^0,w,c
  4626   001C46  260F               	addwf	___flmul@grs^0,f,c
  4627   001C48  0E00               	movlw	0
  4628   001C4A  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4629   001C4C  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4630   001C4E  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4631   001C50  501A               	movf	(___flmul@temp+1)^0,w,c
  4632   001C52  2615               	addwf	___flmul@prod^0,f,c
  4633   001C54  0E00               	movlw	0
  4634   001C56  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4635   001C58  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4636   001C5A  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4637   001C5C  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4638   001C60  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4639   001C64  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4640   001C68  6A0F               	clrf	___flmul@grs^0,c
  4641   001C6A  5006               	movf	___flmul@a^0,w,c
  4642   001C6C  0203               	mulwf	(___flmul@b+1)^0,c
  4643   001C6E  CFF3 F019          	movff	prodl,___flmul@temp
  4644   001C72  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4645   001C76  5019               	movf	___flmul@temp^0,w,c
  4646   001C78  260F               	addwf	___flmul@grs^0,f,c
  4647   001C7A  501A               	movf	(___flmul@temp+1)^0,w,c
  4648   001C7C  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4649   001C7E  0E00               	movlw	0
  4650   001C80  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4651   001C82  0E00               	movlw	0
  4652   001C84  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4653   001C86  5007               	movf	(___flmul@a+1)^0,w,c
  4654   001C88  0202               	mulwf	___flmul@b^0,c
  4655   001C8A  CFF3 F019          	movff	prodl,___flmul@temp
  4656   001C8E  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4657   001C92  5019               	movf	___flmul@temp^0,w,c
  4658   001C94  260F               	addwf	___flmul@grs^0,f,c
  4659   001C96  501A               	movf	(___flmul@temp+1)^0,w,c
  4660   001C98  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4661   001C9A  0E00               	movlw	0
  4662   001C9C  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4663   001C9E  0E00               	movlw	0
  4664   001CA0  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4665   001CA2  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4666   001CA6  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4667   001CAA  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4668   001CAE  6A0F               	clrf	___flmul@grs^0,c
  4669   001CB0  5006               	movf	___flmul@a^0,w,c
  4670   001CB2  0202               	mulwf	___flmul@b^0,c
  4671   001CB4  CFF3 F019          	movff	prodl,___flmul@temp
  4672   001CB8  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4673   001CBC  5019               	movf	___flmul@temp^0,w,c
  4674   001CBE  260F               	addwf	___flmul@grs^0,f,c
  4675   001CC0  501A               	movf	(___flmul@temp+1)^0,w,c
  4676   001CC2  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4677   001CC4  0E00               	movlw	0
  4678   001CC6  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4679   001CC8  0E00               	movlw	0
  4680   001CCA  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4681   001CCC  5008               	movf	(___flmul@a+2)^0,w,c
  4682   001CCE  0203               	mulwf	(___flmul@b+1)^0,c
  4683   001CD0  CFF3 F019          	movff	prodl,___flmul@temp
  4684   001CD4  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4685   001CD8  5019               	movf	___flmul@temp^0,w,c
  4686   001CDA  2615               	addwf	___flmul@prod^0,f,c
  4687   001CDC  501A               	movf	(___flmul@temp+1)^0,w,c
  4688   001CDE  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4689   001CE0  0E00               	movlw	0
  4690   001CE2  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4691   001CE4  0E00               	movlw	0
  4692   001CE6  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4693   001CE8  5007               	movf	(___flmul@a+1)^0,w,c
  4694   001CEA  0204               	mulwf	(___flmul@b+2)^0,c
  4695   001CEC  CFF3 F019          	movff	prodl,___flmul@temp
  4696   001CF0  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4697   001CF4  5019               	movf	___flmul@temp^0,w,c
  4698   001CF6  2615               	addwf	___flmul@prod^0,f,c
  4699   001CF8  501A               	movf	(___flmul@temp+1)^0,w,c
  4700   001CFA  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4701   001CFC  0E00               	movlw	0
  4702   001CFE  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4703   001D00  0E00               	movlw	0
  4704   001D02  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4705   001D04  5008               	movf	(___flmul@a+2)^0,w,c
  4706   001D06  0204               	mulwf	(___flmul@b+2)^0,c
  4707   001D08  CFF3 F019          	movff	prodl,___flmul@temp
  4708   001D0C  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4709   001D10  5019               	movf	___flmul@temp^0,w,c
  4710   001D12  6E0A               	movwf	??___flmul^0,c
  4711   001D14  501A               	movf	(___flmul@temp+1)^0,w,c
  4712   001D16  6E0B               	movwf	(??___flmul+1)^0,c
  4713   001D18  6A0C               	clrf	(??___flmul+2)^0,c
  4714   001D1A  6A0D               	clrf	(??___flmul+3)^0,c
  4715   001D1C  C00C  F00D         	movff	??___flmul+2,??___flmul+3
  4716   001D20  C00B  F00C         	movff	??___flmul+1,??___flmul+2
  4717   001D24  C00A  F00B         	movff	??___flmul,??___flmul+1
  4718   001D28  6A0A               	clrf	??___flmul^0,c
  4719   001D2A  500A               	movf	??___flmul^0,w,c
  4720   001D2C  2615               	addwf	___flmul@prod^0,f,c
  4721   001D2E  500B               	movf	(??___flmul+1)^0,w,c
  4722   001D30  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4723   001D32  500C               	movf	(??___flmul+2)^0,w,c
  4724   001D34  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4725   001D36  500D               	movf	(??___flmul+3)^0,w,c
  4726   001D38  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4727   001D3A  C00F  F00A         	movff	___flmul@grs,??___flmul
  4728   001D3E  C010  F00B         	movff	___flmul@grs+1,??___flmul+1
  4729   001D42  C011  F00C         	movff	___flmul@grs+2,??___flmul+2
  4730   001D46  C012  F00D         	movff	___flmul@grs+3,??___flmul+3
  4731   001D4A  0E19               	movlw	25
  4732   001D4C  EFAD  F00E         	goto	u3540
  4733   001D50                     u3545:
  4734   001D50  90D8               	bcf	status,0,c
  4735   001D52  320D               	rrcf	(??___flmul+3)^0,f,c
  4736   001D54  320C               	rrcf	(??___flmul+2)^0,f,c
  4737   001D56  320B               	rrcf	(??___flmul+1)^0,f,c
  4738   001D58  320A               	rrcf	??___flmul^0,f,c
  4739   001D5A                     u3540:
  4740   001D5A  2EE8               	decfsz	wreg,f,c
  4741   001D5C  EFA8  F00E         	goto	u3545
  4742   001D60  500A               	movf	??___flmul^0,w,c
  4743   001D62  2615               	addwf	___flmul@prod^0,f,c
  4744   001D64  500B               	movf	(??___flmul+1)^0,w,c
  4745   001D66  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4746   001D68  500C               	movf	(??___flmul+2)^0,w,c
  4747   001D6A  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4748   001D6C  500D               	movf	(??___flmul+3)^0,w,c
  4749   001D6E  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4750   001D70  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4751   001D74  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4752   001D78  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4753   001D7C  6A0F               	clrf	___flmul@grs^0,c
  4754   001D7E  5013               	movf	___flmul@aexp^0,w,c
  4755   001D80  C014  F00A         	movff	___flmul@bexp,??___flmul
  4756   001D84  6A0B               	clrf	(??___flmul+1)^0,c
  4757   001D86  260A               	addwf	??___flmul^0,f,c
  4758   001D88  0E00               	movlw	0
  4759   001D8A  220B               	addwfc	(??___flmul+1)^0,f,c
  4760   001D8C  0E82               	movlw	130
  4761   001D8E  240A               	addwf	??___flmul^0,w,c
  4762   001D90  6E19               	movwf	___flmul@temp^0,c
  4763   001D92  0EFF               	movlw	255
  4764   001D94  200B               	addwfc	(??___flmul+1)^0,w,c
  4765   001D96  6E1A               	movwf	(___flmul@temp+1)^0,c
  4766   001D98  EFE3  F00E         	goto	l4230
  4767   001D9C                     l4224:
  4768   001D9C  90D8               	bcf	status,0,c
  4769   001D9E  3615               	rlcf	___flmul@prod^0,f,c
  4770   001DA0  3616               	rlcf	(___flmul@prod+1)^0,f,c
  4771   001DA2  3617               	rlcf	(___flmul@prod+2)^0,f,c
  4772   001DA4  3618               	rlcf	(___flmul@prod+3)^0,f,c
  4773   001DA6  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4774   001DA8  EFD8  F00E         	goto	u3551
  4775   001DAC  EFDA  F00E         	goto	u3550
  4776   001DB0                     u3551:
  4777   001DB0  EFDB  F00E         	goto	l1289
  4778   001DB4                     u3550:
  4779   001DB4  8015               	bsf	___flmul@prod^0,0,c
  4780   001DB6                     l1289:
  4781   001DB6  90D8               	bcf	status,0,c
  4782   001DB8  360F               	rlcf	___flmul@grs^0,f,c
  4783   001DBA  3610               	rlcf	(___flmul@grs+1)^0,f,c
  4784   001DBC  3611               	rlcf	(___flmul@grs+2)^0,f,c
  4785   001DBE  3612               	rlcf	(___flmul@grs+3)^0,f,c
  4786   001DC0  0619               	decf	___flmul@temp^0,f,c
  4787   001DC2  A0D8               	btfss	status,0,c
  4788   001DC4  061A               	decf	(___flmul@temp+1)^0,f,c
  4789   001DC6                     l4230:
  4790   001DC6  AE17               	btfss	(___flmul@prod+2)^0,7,c
  4791   001DC8  EFE8  F00E         	goto	u3561
  4792   001DCC  EFEA  F00E         	goto	u3560
  4793   001DD0                     u3561:
  4794   001DD0  EFCE  F00E         	goto	l4224
  4795   001DD4                     u3560:
  4796   001DD4  0E00               	movlw	0
  4797   001DD6  6E13               	movwf	___flmul@aexp^0,c
  4798   001DD8  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4799   001DDA  EFF1  F00E         	goto	u3571
  4800   001DDE  EFF3  F00E         	goto	u3570
  4801   001DE2                     u3571:
  4802   001DE2  EF17  F00F         	goto	l1291
  4803   001DE6                     u3570:
  4804   001DE6  0EFF               	movlw	255
  4805   001DE8  140F               	andwf	___flmul@grs^0,w,c
  4806   001DEA  6E0A               	movwf	??___flmul^0,c
  4807   001DEC  0EFF               	movlw	255
  4808   001DEE  1410               	andwf	(___flmul@grs+1)^0,w,c
  4809   001DF0  6E0B               	movwf	(??___flmul+1)^0,c
  4810   001DF2  0EFF               	movlw	255
  4811   001DF4  1411               	andwf	(___flmul@grs+2)^0,w,c
  4812   001DF6  6E0C               	movwf	(??___flmul+2)^0,c
  4813   001DF8  0E7F               	movlw	127
  4814   001DFA  1412               	andwf	(___flmul@grs+3)^0,w,c
  4815   001DFC  6E0D               	movwf	(??___flmul+3)^0,c
  4816   001DFE  500A               	movf	??___flmul^0,w,c
  4817   001E00  100B               	iorwf	(??___flmul+1)^0,w,c
  4818   001E02  100C               	iorwf	(??___flmul+2)^0,w,c
  4819   001E04  100D               	iorwf	(??___flmul+3)^0,w,c
  4820   001E06  B4D8               	btfsc	status,2,c
  4821   001E08  EF08  F00F         	goto	u3581
  4822   001E0C  EF0A  F00F         	goto	u3580
  4823   001E10                     u3581:
  4824   001E10  EF0E  F00F         	goto	l1292
  4825   001E14                     u3580:
  4826   001E14                     l4238:
  4827   001E14  0E01               	movlw	1
  4828   001E16  6E13               	movwf	___flmul@aexp^0,c
  4829   001E18  EF17  F00F         	goto	l1291
  4830   001E1C                     l1292:
  4831   001E1C  A015               	btfss	___flmul@prod^0,0,c
  4832   001E1E  EF13  F00F         	goto	u3591
  4833   001E22  EF15  F00F         	goto	u3590
  4834   001E26                     u3591:
  4835   001E26  EF17  F00F         	goto	l1291
  4836   001E2A                     u3590:
  4837   001E2A  EF0A  F00F         	goto	l4238
  4838   001E2E                     l1291:
  4839   001E2E  5013               	movf	___flmul@aexp^0,w,c
  4840   001E30  B4D8               	btfsc	status,2,c
  4841   001E32  EF1D  F00F         	goto	u3601
  4842   001E36  EF1F  F00F         	goto	u3600
  4843   001E3A                     u3601:
  4844   001E3A  EF43  F00F         	goto	l4250
  4845   001E3E                     u3600:
  4846   001E3E  0E01               	movlw	1
  4847   001E40  2615               	addwf	___flmul@prod^0,f,c
  4848   001E42  0E00               	movlw	0
  4849   001E44  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4850   001E46  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4851   001E48  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4852   001E4A  A018               	btfss	(___flmul@prod+3)^0,0,c
  4853   001E4C  EF2A  F00F         	goto	u3611
  4854   001E50  EF2C  F00F         	goto	u3610
  4855   001E54                     u3611:
  4856   001E54  EF43  F00F         	goto	l4250
  4857   001E58                     u3610:
  4858   001E58  C015  F00A         	movff	___flmul@prod,??___flmul
  4859   001E5C  C016  F00B         	movff	___flmul@prod+1,??___flmul+1
  4860   001E60  C017  F00C         	movff	___flmul@prod+2,??___flmul+2
  4861   001E64  C018  F00D         	movff	___flmul@prod+3,??___flmul+3
  4862   001E68  340D               	rlcf	(??___flmul+3)^0,w,c
  4863   001E6A  320D               	rrcf	(??___flmul+3)^0,f,c
  4864   001E6C  320C               	rrcf	(??___flmul+2)^0,f,c
  4865   001E6E  320B               	rrcf	(??___flmul+1)^0,f,c
  4866   001E70  320A               	rrcf	??___flmul^0,f,c
  4867   001E72  C00A  F015         	movff	??___flmul,___flmul@prod
  4868   001E76  C00B  F016         	movff	??___flmul+1,___flmul@prod+1
  4869   001E7A  C00C  F017         	movff	??___flmul+2,___flmul@prod+2
  4870   001E7E  C00D  F018         	movff	??___flmul+3,___flmul@prod+3
  4871   001E82  4A19               	infsnz	___flmul@temp^0,f,c
  4872   001E84  2A1A               	incf	(___flmul@temp+1)^0,f,c
  4873   001E86                     l4250:
  4874   001E86  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  4875   001E88  EF4E  F00F         	goto	u3621
  4876   001E8C  501A               	movf	(___flmul@temp+1)^0,w,c
  4877   001E8E  E108               	bnz	u3620
  4878   001E90  2819               	incf	___flmul@temp^0,w,c
  4879   001E92  A0D8               	btfss	status,0,c
  4880   001E94  EF4E  F00F         	goto	u3621
  4881   001E98  EF50  F00F         	goto	u3620
  4882   001E9C                     u3621:
  4883   001E9C  EF5A  F00F         	goto	l4254
  4884   001EA0                     u3620:
  4885   001EA0  0E00               	movlw	0
  4886   001EA2  6E15               	movwf	___flmul@prod^0,c
  4887   001EA4  0E00               	movlw	0
  4888   001EA6  6E16               	movwf	(___flmul@prod+1)^0,c
  4889   001EA8  0E80               	movlw	128
  4890   001EAA  6E17               	movwf	(___flmul@prod+2)^0,c
  4891   001EAC  0E7F               	movlw	127
  4892   001EAE  6E18               	movwf	(___flmul@prod+3)^0,c
  4893   001EB0  EF88  F00F         	goto	l4266
  4894   001EB4                     l4254:
  4895   001EB4  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  4896   001EB6  EF67  F00F         	goto	u3630
  4897   001EBA  501A               	movf	(___flmul@temp+1)^0,w,c
  4898   001EBC  E106               	bnz	u3631
  4899   001EBE  0419               	decf	___flmul@temp^0,w,c
  4900   001EC0  B0D8               	btfsc	status,0,c
  4901   001EC2  EF65  F00F         	goto	u3631
  4902   001EC6  EF67  F00F         	goto	u3630
  4903   001ECA                     u3631:
  4904   001ECA  EF73  F00F         	goto	l1299
  4905   001ECE                     u3630:
  4906   001ECE  0E00               	movlw	0
  4907   001ED0  6E15               	movwf	___flmul@prod^0,c
  4908   001ED2  0E00               	movlw	0
  4909   001ED4  6E16               	movwf	(___flmul@prod+1)^0,c
  4910   001ED6  0E00               	movlw	0
  4911   001ED8  6E17               	movwf	(___flmul@prod+2)^0,c
  4912   001EDA  0E00               	movlw	0
  4913   001EDC  6E18               	movwf	(___flmul@prod+3)^0,c
  4914   001EDE  0E00               	movlw	0
  4915   001EE0  6E0E               	movwf	___flmul@sign^0,c
  4916   001EE2  EF88  F00F         	goto	l4266
  4917   001EE6                     l1299:
  4918   001EE6  C019  F014         	movff	___flmul@temp,___flmul@bexp
  4919   001EEA  0EFF               	movlw	255
  4920   001EEC  1615               	andwf	___flmul@prod^0,f,c
  4921   001EEE  0EFF               	movlw	255
  4922   001EF0  1616               	andwf	(___flmul@prod+1)^0,f,c
  4923   001EF2  0E7F               	movlw	127
  4924   001EF4  1617               	andwf	(___flmul@prod+2)^0,f,c
  4925   001EF6  0E00               	movlw	0
  4926   001EF8  1618               	andwf	(___flmul@prod+3)^0,f,c
  4927   001EFA  A014               	btfss	___flmul@bexp^0,0,c
  4928   001EFC  EF82  F00F         	goto	u3641
  4929   001F00  EF84  F00F         	goto	u3640
  4930   001F04                     u3641:
  4931   001F04  EF85  F00F         	goto	l4264
  4932   001F08                     u3640:
  4933   001F08  8E17               	bsf	(___flmul@prod+2)^0,7,c
  4934   001F0A                     l4264:
  4935   001F0A  90D8               	bcf	status,0,c
  4936   001F0C  3014               	rrcf	___flmul@bexp^0,w,c
  4937   001F0E  6E18               	movwf	(___flmul@prod+3)^0,c
  4938   001F10                     l4266:
  4939   001F10  500E               	movf	___flmul@sign^0,w,c
  4940   001F12  1218               	iorwf	(___flmul@prod+3)^0,f,c
  4941   001F14  C015  F002         	movff	___flmul@prod,?___flmul
  4942   001F18  C016  F003         	movff	___flmul@prod+1,?___flmul+1
  4943   001F1C  C017  F004         	movff	___flmul@prod+2,?___flmul+2
  4944   001F20  C018  F005         	movff	___flmul@prod+3,?___flmul+3
  4945   001F24                     l1286:
  4946   001F24  0012               	return		;funcret
  4947   001F26                     __end_of___flmul:
  4948                           	callstack 0
  4949                           
  4950 ;; *************** function ___flge *****************
  4951 ;; Defined at:
  4952 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;  ff1             4    1[COMRAM] unsigned char 
  4955 ;;  ff2             4    5[COMRAM] unsigned char 
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;		None
  4958 ;; Return value:  Size  Location     Type
  4959 ;;		None               void
  4960 ;; Registers used:
  4961 ;;		wreg, status,2, status,0
  4962 ;; Tracked objects:
  4963 ;;		On entry : 0/0
  4964 ;;		On exit  : 0/0
  4965 ;;		Unchanged: 0/0
  4966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4967 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4969 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4970 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4971 ;;Total ram usage:       12 bytes
  4972 ;; Hardware stack levels used: 1
  4973 ;; Hardware stack levels required when called: 1
  4974 ;; This function calls:
  4975 ;;		Nothing
  4976 ;; This function is called by:
  4977 ;;		_convert_rgb2hue
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           	psect	text14
  4982   00305C                     __ptext14:
  4983                           	callstack 0
  4984   00305C                     ___flge:
  4985                           	callstack 27
  4986   00305C  0E00               	movlw	0
  4987   00305E  1402               	andwf	___flge@ff1^0,w,c
  4988   003060  6E0A               	movwf	??___flge^0,c
  4989   003062  0E00               	movlw	0
  4990   003064  1403               	andwf	(___flge@ff1+1)^0,w,c
  4991   003066  6E0B               	movwf	(??___flge+1)^0,c
  4992   003068  0E80               	movlw	128
  4993   00306A  1404               	andwf	(___flge@ff1+2)^0,w,c
  4994   00306C  6E0C               	movwf	(??___flge+2)^0,c
  4995   00306E  0E7F               	movlw	127
  4996   003070  1405               	andwf	(___flge@ff1+3)^0,w,c
  4997   003072  6E0D               	movwf	(??___flge+3)^0,c
  4998   003074  500A               	movf	??___flge^0,w,c
  4999   003076  100B               	iorwf	(??___flge+1)^0,w,c
  5000   003078  100C               	iorwf	(??___flge+2)^0,w,c
  5001   00307A  100D               	iorwf	(??___flge+3)^0,w,c
  5002   00307C  A4D8               	btfss	status,2,c
  5003   00307E  EF43  F018         	goto	u3681
  5004   003082  EF45  F018         	goto	u3680
  5005   003086                     u3681:
  5006   003086  EF4D  F018         	goto	l4298
  5007   00308A                     u3680:
  5008   00308A  0E00               	movlw	0
  5009   00308C  6E02               	movwf	___flge@ff1^0,c
  5010   00308E  0E00               	movlw	0
  5011   003090  6E03               	movwf	(___flge@ff1+1)^0,c
  5012   003092  0E00               	movlw	0
  5013   003094  6E04               	movwf	(___flge@ff1+2)^0,c
  5014   003096  0E00               	movlw	0
  5015   003098  6E05               	movwf	(___flge@ff1+3)^0,c
  5016   00309A                     l4298:
  5017   00309A  0E00               	movlw	0
  5018   00309C  1406               	andwf	___flge@ff2^0,w,c
  5019   00309E  6E0A               	movwf	??___flge^0,c
  5020   0030A0  0E00               	movlw	0
  5021   0030A2  1407               	andwf	(___flge@ff2+1)^0,w,c
  5022   0030A4  6E0B               	movwf	(??___flge+1)^0,c
  5023   0030A6  0E80               	movlw	128
  5024   0030A8  1408               	andwf	(___flge@ff2+2)^0,w,c
  5025   0030AA  6E0C               	movwf	(??___flge+2)^0,c
  5026   0030AC  0E7F               	movlw	127
  5027   0030AE  1409               	andwf	(___flge@ff2+3)^0,w,c
  5028   0030B0  6E0D               	movwf	(??___flge+3)^0,c
  5029   0030B2  500A               	movf	??___flge^0,w,c
  5030   0030B4  100B               	iorwf	(??___flge+1)^0,w,c
  5031   0030B6  100C               	iorwf	(??___flge+2)^0,w,c
  5032   0030B8  100D               	iorwf	(??___flge+3)^0,w,c
  5033   0030BA  A4D8               	btfss	status,2,c
  5034   0030BC  EF62  F018         	goto	u3691
  5035   0030C0  EF64  F018         	goto	u3690
  5036   0030C4                     u3691:
  5037   0030C4  EF6C  F018         	goto	l4302
  5038   0030C8                     u3690:
  5039   0030C8  0E00               	movlw	0
  5040   0030CA  6E06               	movwf	___flge@ff2^0,c
  5041   0030CC  0E00               	movlw	0
  5042   0030CE  6E07               	movwf	(___flge@ff2+1)^0,c
  5043   0030D0  0E00               	movlw	0
  5044   0030D2  6E08               	movwf	(___flge@ff2+2)^0,c
  5045   0030D4  0E00               	movlw	0
  5046   0030D6  6E09               	movwf	(___flge@ff2+3)^0,c
  5047   0030D8                     l4302:
  5048   0030D8  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5049   0030DA  EF71  F018         	goto	u3701
  5050   0030DE  EF73  F018         	goto	u3700
  5051   0030E2                     u3701:
  5052   0030E2  EF7C  F018         	goto	l4306
  5053   0030E6                     u3700:
  5054   0030E6  6C02               	negf	___flge@ff1^0,c
  5055   0030E8  1E03               	comf	(___flge@ff1+1)^0,f,c
  5056   0030EA  B0D8               	btfsc	status,0,c
  5057   0030EC  2A03               	incf	(___flge@ff1+1)^0,f,c
  5058   0030EE  1E04               	comf	(___flge@ff1+2)^0,f,c
  5059   0030F0  B0D8               	btfsc	status,0,c
  5060   0030F2  2A04               	incf	(___flge@ff1+2)^0,f,c
  5061   0030F4  0E80               	movlw	128
  5062   0030F6  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5063   0030F8                     l4306:
  5064   0030F8  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5065   0030FA  EF81  F018         	goto	u3711
  5066   0030FE  EF83  F018         	goto	u3710
  5067   003102                     u3711:
  5068   003102  EF8C  F018         	goto	l933
  5069   003106                     u3710:
  5070   003106  6C06               	negf	___flge@ff2^0,c
  5071   003108  1E07               	comf	(___flge@ff2+1)^0,f,c
  5072   00310A  B0D8               	btfsc	status,0,c
  5073   00310C  2A07               	incf	(___flge@ff2+1)^0,f,c
  5074   00310E  1E08               	comf	(___flge@ff2+2)^0,f,c
  5075   003110  B0D8               	btfsc	status,0,c
  5076   003112  2A08               	incf	(___flge@ff2+2)^0,f,c
  5077   003114  0E80               	movlw	128
  5078   003116  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5079   003118                     l933:
  5080   003118  0E00               	movlw	0
  5081   00311A  1A02               	xorwf	___flge@ff1^0,f,c
  5082   00311C  0E00               	movlw	0
  5083   00311E  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5084   003120  0E00               	movlw	0
  5085   003122  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5086   003124  0E80               	movlw	128
  5087   003126  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5088   003128  0E00               	movlw	0
  5089   00312A  1A06               	xorwf	___flge@ff2^0,f,c
  5090   00312C  0E00               	movlw	0
  5091   00312E  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5092   003130  0E00               	movlw	0
  5093   003132  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5094   003134  0E80               	movlw	128
  5095   003136  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5096   003138  5006               	movf	___flge@ff2^0,w,c
  5097   00313A  5C02               	subwf	___flge@ff1^0,w,c
  5098   00313C  5007               	movf	(___flge@ff2+1)^0,w,c
  5099   00313E  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5100   003140  5008               	movf	(___flge@ff2+2)^0,w,c
  5101   003142  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5102   003144  5009               	movf	(___flge@ff2+3)^0,w,c
  5103   003146  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5104   003148  B0D8               	btfsc	status,0,c
  5105   00314A  EFA9  F018         	goto	u3721
  5106   00314E  EFAB  F018         	goto	u3720
  5107   003152                     u3721:
  5108   003152  EFAE  F018         	goto	l4312
  5109   003156                     u3720:
  5110   003156  90D8               	bcf	status,0,c
  5111   003158  EFAF  F018         	goto	l938
  5112   00315C                     l4312:
  5113   00315C  80D8               	bsf	status,0,c
  5114   00315E                     l938:
  5115   00315E  0012               	return		;funcret
  5116   003160                     __end_of___flge:
  5117                           	callstack 0
  5118                           
  5119 ;; *************** function ___fleq *****************
  5120 ;; Defined at:
  5121 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  ff1             4    1[COMRAM] unsigned char 
  5124 ;;  ff2             4    5[COMRAM] unsigned char 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;		None
  5127 ;; Return value:  Size  Location     Type
  5128 ;;		None               void
  5129 ;; Registers used:
  5130 ;;		wreg, status,2, status,0
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5136 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5138 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5139 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5140 ;;Total ram usage:       12 bytes
  5141 ;; Hardware stack levels used: 1
  5142 ;; Hardware stack levels required when called: 1
  5143 ;; This function calls:
  5144 ;;		Nothing
  5145 ;; This function is called by:
  5146 ;;		_convert_rgb2hue
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           	psect	text15
  5151   003612                     __ptext15:
  5152                           	callstack 0
  5153   003612                     ___fleq:
  5154                           	callstack 27
  5155   003612  0E00               	movlw	0
  5156   003614  1402               	andwf	___fleq@ff1^0,w,c
  5157   003616  6E0A               	movwf	??___fleq^0,c
  5158   003618  0E00               	movlw	0
  5159   00361A  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5160   00361C  6E0B               	movwf	(??___fleq+1)^0,c
  5161   00361E  0E80               	movlw	128
  5162   003620  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5163   003622  6E0C               	movwf	(??___fleq+2)^0,c
  5164   003624  0E7F               	movlw	127
  5165   003626  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5166   003628  6E0D               	movwf	(??___fleq+3)^0,c
  5167   00362A  500A               	movf	??___fleq^0,w,c
  5168   00362C  100B               	iorwf	(??___fleq+1)^0,w,c
  5169   00362E  100C               	iorwf	(??___fleq+2)^0,w,c
  5170   003630  100D               	iorwf	(??___fleq+3)^0,w,c
  5171   003632  A4D8               	btfss	status,2,c
  5172   003634  EF1E  F01B         	goto	u3651
  5173   003638  EF20  F01B         	goto	u3650
  5174   00363C                     u3651:
  5175   00363C  EF28  F01B         	goto	l4282
  5176   003640                     u3650:
  5177   003640  0E00               	movlw	0
  5178   003642  6E02               	movwf	___fleq@ff1^0,c
  5179   003644  0E00               	movlw	0
  5180   003646  6E03               	movwf	(___fleq@ff1+1)^0,c
  5181   003648  0E00               	movlw	0
  5182   00364A  6E04               	movwf	(___fleq@ff1+2)^0,c
  5183   00364C  0E00               	movlw	0
  5184   00364E  6E05               	movwf	(___fleq@ff1+3)^0,c
  5185   003650                     l4282:
  5186   003650  0E00               	movlw	0
  5187   003652  1406               	andwf	___fleq@ff2^0,w,c
  5188   003654  6E0A               	movwf	??___fleq^0,c
  5189   003656  0E00               	movlw	0
  5190   003658  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5191   00365A  6E0B               	movwf	(??___fleq+1)^0,c
  5192   00365C  0E80               	movlw	128
  5193   00365E  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5194   003660  6E0C               	movwf	(??___fleq+2)^0,c
  5195   003662  0E7F               	movlw	127
  5196   003664  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5197   003666  6E0D               	movwf	(??___fleq+3)^0,c
  5198   003668  500A               	movf	??___fleq^0,w,c
  5199   00366A  100B               	iorwf	(??___fleq+1)^0,w,c
  5200   00366C  100C               	iorwf	(??___fleq+2)^0,w,c
  5201   00366E  100D               	iorwf	(??___fleq+3)^0,w,c
  5202   003670  A4D8               	btfss	status,2,c
  5203   003672  EF3D  F01B         	goto	u3661
  5204   003676  EF3F  F01B         	goto	u3660
  5205   00367A                     u3661:
  5206   00367A  EF47  F01B         	goto	l4286
  5207   00367E                     u3660:
  5208   00367E  0E00               	movlw	0
  5209   003680  6E06               	movwf	___fleq@ff2^0,c
  5210   003682  0E00               	movlw	0
  5211   003684  6E07               	movwf	(___fleq@ff2+1)^0,c
  5212   003686  0E00               	movlw	0
  5213   003688  6E08               	movwf	(___fleq@ff2+2)^0,c
  5214   00368A  0E00               	movlw	0
  5215   00368C  6E09               	movwf	(___fleq@ff2+3)^0,c
  5216   00368E                     l4286:
  5217   00368E  5006               	movf	___fleq@ff2^0,w,c
  5218   003690  1802               	xorwf	___fleq@ff1^0,w,c
  5219   003692  E10F               	bnz	u3670
  5220   003694  5007               	movf	(___fleq@ff2+1)^0,w,c
  5221   003696  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5222   003698  E10C               	bnz	u3670
  5223   00369A  5008               	movf	(___fleq@ff2+2)^0,w,c
  5224   00369C  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5225   00369E  E109               	bnz	u3670
  5226   0036A0  5009               	movf	(___fleq@ff2+3)^0,w,c
  5227   0036A2  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5228   0036A4  B4D8               	btfsc	status,2,c
  5229   0036A6  EF57  F01B         	goto	u3671
  5230   0036AA  EF59  F01B         	goto	u3670
  5231   0036AE                     u3671:
  5232   0036AE  EF5C  F01B         	goto	l4290
  5233   0036B2                     u3670:
  5234   0036B2  90D8               	bcf	status,0,c
  5235   0036B4  EF5D  F01B         	goto	l927
  5236   0036B8                     l4290:
  5237   0036B8  80D8               	bsf	status,0,c
  5238   0036BA                     l927:
  5239   0036BA  0012               	return		;funcret
  5240   0036BC                     __end_of___fleq:
  5241                           	callstack 0
  5242                           
  5243 ;; *************** function ___fldiv *****************
  5244 ;; Defined at:
  5245 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;  b               4   26[COMRAM] unsigned char 
  5248 ;;  a               4   30[COMRAM] unsigned char 
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;  grs             4   45[COMRAM] unsigned long 
  5251 ;;  rem             4   38[COMRAM] unsigned long 
  5252 ;;  new_exp         2   43[COMRAM] short 
  5253 ;;  aexp            1   50[COMRAM] unsigned char 
  5254 ;;  bexp            1   49[COMRAM] unsigned char 
  5255 ;;  sign            1   42[COMRAM] unsigned char 
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  4   26[COMRAM] unsigned char 
  5258 ;; Registers used:
  5259 ;;		wreg, status,2, status,0
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5265 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5266 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5267 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5268 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5269 ;;Total ram usage:       25 bytes
  5270 ;; Hardware stack levels used: 1
  5271 ;; Hardware stack levels required when called: 1
  5272 ;; This function calls:
  5273 ;;		Nothing
  5274 ;; This function is called by:
  5275 ;;		_convert_rgb2hue
  5276 ;;		_main
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           	psect	text16
  5281   001F26                     __ptext16:
  5282                           	callstack 0
  5283   001F26                     ___fldiv:
  5284                           	callstack 27
  5285   001F26  501E               	movf	(___fldiv@b+3)^0,w,c
  5286   001F28  0B80               	andlw	128
  5287   001F2A  6E2B               	movwf	___fldiv@sign^0,c
  5288   001F2C  501E               	movf	(___fldiv@b+3)^0,w,c
  5289   001F2E  241E               	addwf	(___fldiv@b+3)^0,w,c
  5290   001F30  6E32               	movwf	___fldiv@bexp^0,c
  5291   001F32  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5292   001F34  EF9E  F00F         	goto	u3231
  5293   001F38  EFA0  F00F         	goto	u3230
  5294   001F3C                     u3231:
  5295   001F3C  EFA1  F00F         	goto	l4010
  5296   001F40                     u3230:
  5297   001F40  8032               	bsf	___fldiv@bexp^0,0,c
  5298   001F42                     l4010:
  5299   001F42  5032               	movf	___fldiv@bexp^0,w,c
  5300   001F44  B4D8               	btfsc	status,2,c
  5301   001F46  EFA7  F00F         	goto	u3241
  5302   001F4A  EFA9  F00F         	goto	u3240
  5303   001F4E                     u3241:
  5304   001F4E  EFBE  F00F         	goto	l4020
  5305   001F52                     u3240:
  5306   001F52  2832               	incf	___fldiv@bexp^0,w,c
  5307   001F54  A4D8               	btfss	status,2,c
  5308   001F56  EFAF  F00F         	goto	u3251
  5309   001F5A  EFB1  F00F         	goto	u3250
  5310   001F5E                     u3251:
  5311   001F5E  EFB9  F00F         	goto	l4016
  5312   001F62                     u3250:
  5313   001F62  0E00               	movlw	0
  5314   001F64  6E1B               	movwf	___fldiv@b^0,c
  5315   001F66  0E00               	movlw	0
  5316   001F68  6E1C               	movwf	(___fldiv@b+1)^0,c
  5317   001F6A  0E00               	movlw	0
  5318   001F6C  6E1D               	movwf	(___fldiv@b+2)^0,c
  5319   001F6E  0E00               	movlw	0
  5320   001F70  6E1E               	movwf	(___fldiv@b+3)^0,c
  5321   001F72                     l4016:
  5322   001F72  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5323   001F74  0E00               	movlw	0
  5324   001F76  6E1E               	movwf	(___fldiv@b+3)^0,c
  5325   001F78  EFC6  F00F         	goto	l4022
  5326   001F7C                     l4020:
  5327   001F7C  0E00               	movlw	0
  5328   001F7E  6E1B               	movwf	___fldiv@b^0,c
  5329   001F80  0E00               	movlw	0
  5330   001F82  6E1C               	movwf	(___fldiv@b+1)^0,c
  5331   001F84  0E00               	movlw	0
  5332   001F86  6E1D               	movwf	(___fldiv@b+2)^0,c
  5333   001F88  0E00               	movlw	0
  5334   001F8A  6E1E               	movwf	(___fldiv@b+3)^0,c
  5335   001F8C                     l4022:
  5336   001F8C  5022               	movf	(___fldiv@a+3)^0,w,c
  5337   001F8E  0B80               	andlw	128
  5338   001F90  1A2B               	xorwf	___fldiv@sign^0,f,c
  5339   001F92  5022               	movf	(___fldiv@a+3)^0,w,c
  5340   001F94  2422               	addwf	(___fldiv@a+3)^0,w,c
  5341   001F96  6E33               	movwf	___fldiv@aexp^0,c
  5342   001F98  AE21               	btfss	(___fldiv@a+2)^0,7,c
  5343   001F9A  EFD1  F00F         	goto	u3261
  5344   001F9E  EFD3  F00F         	goto	u3260
  5345   001FA2                     u3261:
  5346   001FA2  EFD4  F00F         	goto	l4030
  5347   001FA6                     u3260:
  5348   001FA6  8033               	bsf	___fldiv@aexp^0,0,c
  5349   001FA8                     l4030:
  5350   001FA8  5033               	movf	___fldiv@aexp^0,w,c
  5351   001FAA  B4D8               	btfsc	status,2,c
  5352   001FAC  EFDA  F00F         	goto	u3271
  5353   001FB0  EFDC  F00F         	goto	u3270
  5354   001FB4                     u3271:
  5355   001FB4  EFF1  F00F         	goto	l4040
  5356   001FB8                     u3270:
  5357   001FB8  2833               	incf	___fldiv@aexp^0,w,c
  5358   001FBA  A4D8               	btfss	status,2,c
  5359   001FBC  EFE2  F00F         	goto	u3281
  5360   001FC0  EFE4  F00F         	goto	u3280
  5361   001FC4                     u3281:
  5362   001FC4  EFEC  F00F         	goto	l4036
  5363   001FC8                     u3280:
  5364   001FC8  0E00               	movlw	0
  5365   001FCA  6E1F               	movwf	___fldiv@a^0,c
  5366   001FCC  0E00               	movlw	0
  5367   001FCE  6E20               	movwf	(___fldiv@a+1)^0,c
  5368   001FD0  0E00               	movlw	0
  5369   001FD2  6E21               	movwf	(___fldiv@a+2)^0,c
  5370   001FD4  0E00               	movlw	0
  5371   001FD6  6E22               	movwf	(___fldiv@a+3)^0,c
  5372   001FD8                     l4036:
  5373   001FD8  8E21               	bsf	(___fldiv@a+2)^0,7,c
  5374   001FDA  0E00               	movlw	0
  5375   001FDC  6E22               	movwf	(___fldiv@a+3)^0,c
  5376   001FDE  EFF9  F00F         	goto	l4042
  5377   001FE2                     l4040:
  5378   001FE2  0E00               	movlw	0
  5379   001FE4  6E1F               	movwf	___fldiv@a^0,c
  5380   001FE6  0E00               	movlw	0
  5381   001FE8  6E20               	movwf	(___fldiv@a+1)^0,c
  5382   001FEA  0E00               	movlw	0
  5383   001FEC  6E21               	movwf	(___fldiv@a+2)^0,c
  5384   001FEE  0E00               	movlw	0
  5385   001FF0  6E22               	movwf	(___fldiv@a+3)^0,c
  5386   001FF2                     l4042:
  5387   001FF2  501F               	movf	___fldiv@a^0,w,c
  5388   001FF4  1020               	iorwf	(___fldiv@a+1)^0,w,c
  5389   001FF6  1021               	iorwf	(___fldiv@a+2)^0,w,c
  5390   001FF8  1022               	iorwf	(___fldiv@a+3)^0,w,c
  5391   001FFA  A4D8               	btfss	status,2,c
  5392   001FFC  EF02  F010         	goto	u3291
  5393   002000  EF04  F010         	goto	u3290
  5394   002004                     u3291:
  5395   002004  EF1C  F010         	goto	l4054
  5396   002008                     u3290:
  5397   002008  0E00               	movlw	0
  5398   00200A  6E1B               	movwf	___fldiv@b^0,c
  5399   00200C  0E00               	movlw	0
  5400   00200E  6E1C               	movwf	(___fldiv@b+1)^0,c
  5401   002010  0E00               	movlw	0
  5402   002012  6E1D               	movwf	(___fldiv@b+2)^0,c
  5403   002014  0E00               	movlw	0
  5404   002016  6E1E               	movwf	(___fldiv@b+3)^0,c
  5405   002018  0E80               	movlw	128
  5406   00201A  121D               	iorwf	(___fldiv@b+2)^0,f,c
  5407   00201C  0E7F               	movlw	127
  5408   00201E  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5409   002020                     l4048:
  5410   002020  502B               	movf	___fldiv@sign^0,w,c
  5411   002022  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5412   002024  C01B  F01B         	movff	___fldiv@b,?___fldiv
  5413   002028  C01C  F01C         	movff	___fldiv@b+1,?___fldiv+1
  5414   00202C  C01D  F01D         	movff	___fldiv@b+2,?___fldiv+2
  5415   002030  C01E  F01E         	movff	___fldiv@b+3,?___fldiv+3
  5416   002034  EF5F  F011         	goto	l1250
  5417   002038                     l4054:
  5418   002038  5032               	movf	___fldiv@bexp^0,w,c
  5419   00203A  A4D8               	btfss	status,2,c
  5420   00203C  EF22  F010         	goto	u3301
  5421   002040  EF24  F010         	goto	u3300
  5422   002044                     u3301:
  5423   002044  EF2E  F010         	goto	l4062
  5424   002048                     u3300:
  5425   002048  0E00               	movlw	0
  5426   00204A  6E1B               	movwf	?___fldiv^0,c
  5427   00204C  0E00               	movlw	0
  5428   00204E  6E1C               	movwf	(?___fldiv+1)^0,c
  5429   002050  0E00               	movlw	0
  5430   002052  6E1D               	movwf	(?___fldiv+2)^0,c
  5431   002054  0E00               	movlw	0
  5432   002056  6E1E               	movwf	(?___fldiv+3)^0,c
  5433   002058  EF5F  F011         	goto	l1250
  5434   00205C                     l4062:
  5435   00205C  5033               	movf	___fldiv@aexp^0,w,c
  5436   00205E  C032  F023         	movff	___fldiv@bexp,??___fldiv
  5437   002062  6A24               	clrf	(??___fldiv+1)^0,c
  5438   002064  5E23               	subwf	??___fldiv^0,f,c
  5439   002066  0E00               	movlw	0
  5440   002068  5A24               	subwfb	(??___fldiv+1)^0,f,c
  5441   00206A  0E7F               	movlw	127
  5442   00206C  2423               	addwf	??___fldiv^0,w,c
  5443   00206E  6E2C               	movwf	___fldiv@new_exp^0,c
  5444   002070  0E00               	movlw	0
  5445   002072  2024               	addwfc	(??___fldiv+1)^0,w,c
  5446   002074  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5447   002076  C01B  F027         	movff	___fldiv@b,___fldiv@rem
  5448   00207A  C01C  F028         	movff	___fldiv@b+1,___fldiv@rem+1
  5449   00207E  C01D  F029         	movff	___fldiv@b+2,___fldiv@rem+2
  5450   002082  C01E  F02A         	movff	___fldiv@b+3,___fldiv@rem+3
  5451   002086  0E00               	movlw	0
  5452   002088  6E1B               	movwf	___fldiv@b^0,c
  5453   00208A  0E00               	movlw	0
  5454   00208C  6E1C               	movwf	(___fldiv@b+1)^0,c
  5455   00208E  0E00               	movlw	0
  5456   002090  6E1D               	movwf	(___fldiv@b+2)^0,c
  5457   002092  0E00               	movlw	0
  5458   002094  6E1E               	movwf	(___fldiv@b+3)^0,c
  5459   002096  0E00               	movlw	0
  5460   002098  6E2E               	movwf	___fldiv@grs^0,c
  5461   00209A  0E00               	movlw	0
  5462   00209C  6E2F               	movwf	(___fldiv@grs+1)^0,c
  5463   00209E  0E00               	movlw	0
  5464   0020A0  6E30               	movwf	(___fldiv@grs+2)^0,c
  5465   0020A2  0E00               	movlw	0
  5466   0020A4  6E31               	movwf	(___fldiv@grs+3)^0,c
  5467   0020A6  0E00               	movlw	0
  5468   0020A8  6E33               	movwf	___fldiv@aexp^0,c
  5469   0020AA  EF8F  F010         	goto	l1252
  5470   0020AE                     l4072:
  5471   0020AE  5033               	movf	___fldiv@aexp^0,w,c
  5472   0020B0  B4D8               	btfsc	status,2,c
  5473   0020B2  EF5D  F010         	goto	u3311
  5474   0020B6  EF5F  F010         	goto	u3310
  5475   0020BA                     u3311:
  5476   0020BA  EF76  F010         	goto	l4080
  5477   0020BE                     u3310:
  5478   0020BE  90D8               	bcf	status,0,c
  5479   0020C0  3627               	rlcf	___fldiv@rem^0,f,c
  5480   0020C2  3628               	rlcf	(___fldiv@rem+1)^0,f,c
  5481   0020C4  3629               	rlcf	(___fldiv@rem+2)^0,f,c
  5482   0020C6  362A               	rlcf	(___fldiv@rem+3)^0,f,c
  5483   0020C8  90D8               	bcf	status,0,c
  5484   0020CA  361B               	rlcf	___fldiv@b^0,f,c
  5485   0020CC  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5486   0020CE  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5487   0020D0  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5488   0020D2  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5489   0020D4  EF6E  F010         	goto	u3321
  5490   0020D8  EF70  F010         	goto	u3320
  5491   0020DC                     u3321:
  5492   0020DC  EF71  F010         	goto	l1255
  5493   0020E0                     u3320:
  5494   0020E0  801B               	bsf	___fldiv@b^0,0,c
  5495   0020E2                     l1255:
  5496   0020E2  90D8               	bcf	status,0,c
  5497   0020E4  362E               	rlcf	___fldiv@grs^0,f,c
  5498   0020E6  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5499   0020E8  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5500   0020EA  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5501   0020EC                     l4080:
  5502   0020EC  501F               	movf	___fldiv@a^0,w,c
  5503   0020EE  5C27               	subwf	___fldiv@rem^0,w,c
  5504   0020F0  5020               	movf	(___fldiv@a+1)^0,w,c
  5505   0020F2  5828               	subwfb	(___fldiv@rem+1)^0,w,c
  5506   0020F4  5021               	movf	(___fldiv@a+2)^0,w,c
  5507   0020F6  5829               	subwfb	(___fldiv@rem+2)^0,w,c
  5508   0020F8  5022               	movf	(___fldiv@a+3)^0,w,c
  5509   0020FA  582A               	subwfb	(___fldiv@rem+3)^0,w,c
  5510   0020FC  A0D8               	btfss	status,0,c
  5511   0020FE  EF83  F010         	goto	u3331
  5512   002102  EF85  F010         	goto	u3330
  5513   002106                     u3331:
  5514   002106  EF8E  F010         	goto	l4086
  5515   00210A                     u3330:
  5516   00210A  8C31               	bsf	(___fldiv@grs+3)^0,6,c
  5517   00210C  501F               	movf	___fldiv@a^0,w,c
  5518   00210E  5E27               	subwf	___fldiv@rem^0,f,c
  5519   002110  5020               	movf	(___fldiv@a+1)^0,w,c
  5520   002112  5A28               	subwfb	(___fldiv@rem+1)^0,f,c
  5521   002114  5021               	movf	(___fldiv@a+2)^0,w,c
  5522   002116  5A29               	subwfb	(___fldiv@rem+2)^0,f,c
  5523   002118  5022               	movf	(___fldiv@a+3)^0,w,c
  5524   00211A  5A2A               	subwfb	(___fldiv@rem+3)^0,f,c
  5525   00211C                     l4086:
  5526   00211C  2A33               	incf	___fldiv@aexp^0,f,c
  5527   00211E                     l1252:
  5528   00211E  0E19               	movlw	25
  5529   002120  6433               	cpfsgt	___fldiv@aexp^0,c
  5530   002122  EF95  F010         	goto	u3341
  5531   002126  EF97  F010         	goto	u3340
  5532   00212A                     u3341:
  5533   00212A  EF57  F010         	goto	l4072
  5534   00212E                     u3340:
  5535   00212E  5027               	movf	___fldiv@rem^0,w,c
  5536   002130  1028               	iorwf	(___fldiv@rem+1)^0,w,c
  5537   002132  1029               	iorwf	(___fldiv@rem+2)^0,w,c
  5538   002134  102A               	iorwf	(___fldiv@rem+3)^0,w,c
  5539   002136  B4D8               	btfsc	status,2,c
  5540   002138  EFA0  F010         	goto	u3351
  5541   00213C  EFA2  F010         	goto	u3350
  5542   002140                     u3351:
  5543   002140  EFBA  F010         	goto	l4098
  5544   002144                     u3350:
  5545   002144  802E               	bsf	___fldiv@grs^0,0,c
  5546   002146  EFBA  F010         	goto	l4098
  5547   00214A                     l4092:
  5548   00214A  90D8               	bcf	status,0,c
  5549   00214C  361B               	rlcf	___fldiv@b^0,f,c
  5550   00214E  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5551   002150  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5552   002152  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5553   002154  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5554   002156  EFAF  F010         	goto	u3361
  5555   00215A  EFB1  F010         	goto	u3360
  5556   00215E                     u3361:
  5557   00215E  EFB2  F010         	goto	l1261
  5558   002162                     u3360:
  5559   002162  801B               	bsf	___fldiv@b^0,0,c
  5560   002164                     l1261:
  5561   002164  90D8               	bcf	status,0,c
  5562   002166  362E               	rlcf	___fldiv@grs^0,f,c
  5563   002168  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5564   00216A  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5565   00216C  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5566   00216E  062C               	decf	___fldiv@new_exp^0,f,c
  5567   002170  A0D8               	btfss	status,0,c
  5568   002172  062D               	decf	(___fldiv@new_exp+1)^0,f,c
  5569   002174                     l4098:
  5570   002174  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5571   002176  EFBF  F010         	goto	u3371
  5572   00217A  EFC1  F010         	goto	u3370
  5573   00217E                     u3371:
  5574   00217E  EFA5  F010         	goto	l4092
  5575   002182                     u3370:
  5576   002182  0E00               	movlw	0
  5577   002184  6E33               	movwf	___fldiv@aexp^0,c
  5578   002186  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5579   002188  EFC8  F010         	goto	u3381
  5580   00218C  EFCA  F010         	goto	u3380
  5581   002190                     u3381:
  5582   002190  EFEE  F010         	goto	l1263
  5583   002194                     u3380:
  5584   002194  0EFF               	movlw	255
  5585   002196  142E               	andwf	___fldiv@grs^0,w,c
  5586   002198  6E23               	movwf	??___fldiv^0,c
  5587   00219A  0EFF               	movlw	255
  5588   00219C  142F               	andwf	(___fldiv@grs+1)^0,w,c
  5589   00219E  6E24               	movwf	(??___fldiv+1)^0,c
  5590   0021A0  0EFF               	movlw	255
  5591   0021A2  1430               	andwf	(___fldiv@grs+2)^0,w,c
  5592   0021A4  6E25               	movwf	(??___fldiv+2)^0,c
  5593   0021A6  0E7F               	movlw	127
  5594   0021A8  1431               	andwf	(___fldiv@grs+3)^0,w,c
  5595   0021AA  6E26               	movwf	(??___fldiv+3)^0,c
  5596   0021AC  5023               	movf	??___fldiv^0,w,c
  5597   0021AE  1024               	iorwf	(??___fldiv+1)^0,w,c
  5598   0021B0  1025               	iorwf	(??___fldiv+2)^0,w,c
  5599   0021B2  1026               	iorwf	(??___fldiv+3)^0,w,c
  5600   0021B4  B4D8               	btfsc	status,2,c
  5601   0021B6  EFDF  F010         	goto	u3391
  5602   0021BA  EFE1  F010         	goto	u3390
  5603   0021BE                     u3391:
  5604   0021BE  EFE5  F010         	goto	l1264
  5605   0021C2                     u3390:
  5606   0021C2                     l4106:
  5607   0021C2  0E01               	movlw	1
  5608   0021C4  6E33               	movwf	___fldiv@aexp^0,c
  5609   0021C6  EFEE  F010         	goto	l1263
  5610   0021CA                     l1264:
  5611   0021CA  A01B               	btfss	___fldiv@b^0,0,c
  5612   0021CC  EFEA  F010         	goto	u3401
  5613   0021D0  EFEC  F010         	goto	u3400
  5614   0021D4                     u3401:
  5615   0021D4  EFEE  F010         	goto	l1263
  5616   0021D8                     u3400:
  5617   0021D8  EFE1  F010         	goto	l4106
  5618   0021DC                     l1263:
  5619   0021DC  5033               	movf	___fldiv@aexp^0,w,c
  5620   0021DE  B4D8               	btfsc	status,2,c
  5621   0021E0  EFF4  F010         	goto	u3411
  5622   0021E4  EFF6  F010         	goto	u3410
  5623   0021E8                     u3411:
  5624   0021E8  EF1A  F011         	goto	l4118
  5625   0021EC                     u3410:
  5626   0021EC  0E01               	movlw	1
  5627   0021EE  261B               	addwf	___fldiv@b^0,f,c
  5628   0021F0  0E00               	movlw	0
  5629   0021F2  221C               	addwfc	(___fldiv@b+1)^0,f,c
  5630   0021F4  221D               	addwfc	(___fldiv@b+2)^0,f,c
  5631   0021F6  221E               	addwfc	(___fldiv@b+3)^0,f,c
  5632   0021F8  A01E               	btfss	(___fldiv@b+3)^0,0,c
  5633   0021FA  EF01  F011         	goto	u3421
  5634   0021FE  EF03  F011         	goto	u3420
  5635   002202                     u3421:
  5636   002202  EF1A  F011         	goto	l4118
  5637   002206                     u3420:
  5638   002206  C01B  F023         	movff	___fldiv@b,??___fldiv
  5639   00220A  C01C  F024         	movff	___fldiv@b+1,??___fldiv+1
  5640   00220E  C01D  F025         	movff	___fldiv@b+2,??___fldiv+2
  5641   002212  C01E  F026         	movff	___fldiv@b+3,??___fldiv+3
  5642   002216  3426               	rlcf	(??___fldiv+3)^0,w,c
  5643   002218  3226               	rrcf	(??___fldiv+3)^0,f,c
  5644   00221A  3225               	rrcf	(??___fldiv+2)^0,f,c
  5645   00221C  3224               	rrcf	(??___fldiv+1)^0,f,c
  5646   00221E  3223               	rrcf	??___fldiv^0,f,c
  5647   002220  C023  F01B         	movff	??___fldiv,___fldiv@b
  5648   002224  C024  F01C         	movff	??___fldiv+1,___fldiv@b+1
  5649   002228  C025  F01D         	movff	??___fldiv+2,___fldiv@b+2
  5650   00222C  C026  F01E         	movff	??___fldiv+3,___fldiv@b+3
  5651   002230  4A2C               	infsnz	___fldiv@new_exp^0,f,c
  5652   002232  2A2D               	incf	(___fldiv@new_exp+1)^0,f,c
  5653   002234                     l4118:
  5654   002234  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5655   002236  EF25  F011         	goto	u3431
  5656   00223A  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5657   00223C  E108               	bnz	u3430
  5658   00223E  282C               	incf	___fldiv@new_exp^0,w,c
  5659   002240  A0D8               	btfss	status,0,c
  5660   002242  EF25  F011         	goto	u3431
  5661   002246  EF27  F011         	goto	u3430
  5662   00224A                     u3431:
  5663   00224A  EF32  F011         	goto	l4122
  5664   00224E                     u3430:
  5665   00224E  0E00               	movlw	0
  5666   002250  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5667   002252  682C               	setf	___fldiv@new_exp^0,c
  5668   002254  0E00               	movlw	0
  5669   002256  6E1B               	movwf	___fldiv@b^0,c
  5670   002258  0E00               	movlw	0
  5671   00225A  6E1C               	movwf	(___fldiv@b+1)^0,c
  5672   00225C  0E00               	movlw	0
  5673   00225E  6E1D               	movwf	(___fldiv@b+2)^0,c
  5674   002260  0E00               	movlw	0
  5675   002262  6E1E               	movwf	(___fldiv@b+3)^0,c
  5676   002264                     l4122:
  5677   002264  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5678   002266  EF3F  F011         	goto	u3440
  5679   00226A  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5680   00226C  E106               	bnz	u3441
  5681   00226E  042C               	decf	___fldiv@new_exp^0,w,c
  5682   002270  B0D8               	btfsc	status,0,c
  5683   002272  EF3D  F011         	goto	u3441
  5684   002276  EF3F  F011         	goto	u3440
  5685   00227A                     u3441:
  5686   00227A  EF4D  F011         	goto	l4126
  5687   00227E                     u3440:
  5688   00227E  0E00               	movlw	0
  5689   002280  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5690   002282  0E00               	movlw	0
  5691   002284  6E2C               	movwf	___fldiv@new_exp^0,c
  5692   002286  0E00               	movlw	0
  5693   002288  6E1B               	movwf	___fldiv@b^0,c
  5694   00228A  0E00               	movlw	0
  5695   00228C  6E1C               	movwf	(___fldiv@b+1)^0,c
  5696   00228E  0E00               	movlw	0
  5697   002290  6E1D               	movwf	(___fldiv@b+2)^0,c
  5698   002292  0E00               	movlw	0
  5699   002294  6E1E               	movwf	(___fldiv@b+3)^0,c
  5700   002296  0E00               	movlw	0
  5701   002298  6E2B               	movwf	___fldiv@sign^0,c
  5702   00229A                     l4126:
  5703   00229A  C02C  F032         	movff	___fldiv@new_exp,___fldiv@bexp
  5704   00229E  A032               	btfss	___fldiv@bexp^0,0,c
  5705   0022A0  EF54  F011         	goto	u3451
  5706   0022A4  EF56  F011         	goto	u3450
  5707   0022A8                     u3451:
  5708   0022A8  EF59  F011         	goto	l4132
  5709   0022AC                     u3450:
  5710   0022AC  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5711   0022AE  EF5A  F011         	goto	l4134
  5712   0022B2                     l4132:
  5713   0022B2  9E1D               	bcf	(___fldiv@b+2)^0,7,c
  5714   0022B4                     l4134:
  5715   0022B4  90D8               	bcf	status,0,c
  5716   0022B6  3032               	rrcf	___fldiv@bexp^0,w,c
  5717   0022B8  6E1E               	movwf	(___fldiv@b+3)^0,c
  5718   0022BA  EF10  F010         	goto	l4048
  5719   0022BE                     l1250:
  5720   0022BE  0012               	return		;funcret
  5721   0022C0                     __end_of___fldiv:
  5722                           	callstack 0
  5723                           
  5724 ;; *************** function _initUSART4 *****************
  5725 ;; Defined at:
  5726 ;;		line 14 in file "serial.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;		None
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;		None
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  1    wreg      void 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5744 ;;Total ram usage:        0 bytes
  5745 ;; Hardware stack levels used: 1
  5746 ;; Hardware stack levels required when called: 1
  5747 ;; This function calls:
  5748 ;;		Nothing
  5749 ;; This function is called by:
  5750 ;;		_main
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           	psect	text17
  5755   004400                     __ptext17:
  5756                           	callstack 0
  5757   004400                     _initUSART4:
  5758                           	callstack 29
  5759   004400                     
  5760                           ;serial.c: 15:     RC0PPS = 0x12;
  5761   004400  0E12               	movlw	18
  5762   004402  010E               	movlb	14	; () banked
  5763   004404  6F62               	movwf	98,b	;volatile
  5764                           
  5765                           ;serial.c: 16:     RX4PPS = 0x11;
  5766   004406  0E11               	movlw	17
  5767   004408  6F15               	movwf	21,b	;volatile
  5768   00440A                     
  5769                           ; BSR set to: 14
  5770                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  5771   00440A  97E9               	bcf	233,3,b	;volatile
  5772   00440C                     
  5773                           ; BSR set to: 14
  5774                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  5775   00440C  95E8               	bcf	232,2,b	;volatile
  5776                           
  5777                           ;serial.c: 19:     SP4BRGL = 51;
  5778   00440E  0E33               	movlw	51
  5779   004410  6FE5               	movwf	229,b	;volatile
  5780                           
  5781                           ;serial.c: 20:     SP4BRGH = 0;
  5782   004412  0E00               	movlw	0
  5783   004414  6FE6               	movwf	230,b	;volatile
  5784   004416                     
  5785                           ; BSR set to: 14
  5786                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  5787   004416  89E7               	bsf	231,4,b	;volatile
  5788   004418                     
  5789                           ; BSR set to: 14
  5790                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  5791   004418  8BE8               	bsf	232,5,b	;volatile
  5792   00441A                     
  5793                           ; BSR set to: 14
  5794                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  5795   00441A  8FE7               	bsf	231,7,b	;volatile
  5796   00441C                     
  5797                           ; BSR set to: 14
  5798   00441C  0012               	return		;funcret
  5799   00441E                     __end_of_initUSART4:
  5800                           	callstack 0
  5801                           
  5802 ;; *************** function _initDCmotorsPWM *****************
  5803 ;; Defined at:
  5804 ;;		line 5 in file "dc_motor.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;		None
  5809 ;; Return value:  Size  Location     Type
  5810 ;;                  1    wreg      void 
  5811 ;; Registers used:
  5812 ;;		wreg, status,2
  5813 ;; Tracked objects:
  5814 ;;		On entry : 0/0
  5815 ;;		On exit  : 0/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5818 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5821 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5822 ;;Total ram usage:        2 bytes
  5823 ;; Hardware stack levels used: 1
  5824 ;; Hardware stack levels required when called: 1
  5825 ;; This function calls:
  5826 ;;		Nothing
  5827 ;; This function is called by:
  5828 ;;		_main
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832                           	psect	text18
  5833   0037FC                     __ptext18:
  5834                           	callstack 0
  5835   0037FC                     _initDCmotorsPWM:
  5836                           	callstack 29
  5837   0037FC                     
  5838                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  5839   0037FC  9485               	bcf	133,2,c	;volatile
  5840                           
  5841                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  5842   0037FE  9E83               	bcf	131,7,c	;volatile
  5843                           
  5844                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  5845   003800  9885               	bcf	133,4,c	;volatile
  5846                           
  5847                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  5848   003802  9C87               	bcf	135,6,c	;volatile
  5849                           
  5850                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5851   003804  947D               	bcf	125,2,c	;volatile
  5852                           
  5853                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  5854   003806  9E7B               	bcf	123,7,c	;volatile
  5855                           
  5856                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5857   003808  987D               	bcf	125,4,c	;volatile
  5858                           
  5859                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  5860   00380A  9C7F               	bcf	127,6,c	;volatile
  5861   00380C                     
  5862                           ;dc_motor.c: 18:     RE2PPS=0x05;
  5863   00380C  0E05               	movlw	5
  5864   00380E  010E               	movlb	14	; () banked
  5865   003810  6F74               	movwf	116,b	;volatile
  5866                           
  5867                           ;dc_motor.c: 19:     RE4PPS=0x06;
  5868   003812  0E06               	movlw	6
  5869   003814  6F76               	movwf	118,b	;volatile
  5870                           
  5871                           ;dc_motor.c: 20:     RC7PPS=0x07;
  5872   003816  0E07               	movlw	7
  5873   003818  6F69               	movwf	105,b	;volatile
  5874                           
  5875                           ;dc_motor.c: 21:     RG6PPS=0x08;
  5876   00381A  0E08               	movlw	8
  5877   00381C  6F88               	movwf	136,b	;volatile
  5878                           
  5879                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  5880   00381E  50BD               	movf	189,w,c	;volatile
  5881   003820  0B8F               	andlw	-113
  5882   003822  0940               	iorlw	64
  5883   003824  6EBD               	movwf	189,c	;volatile
  5884                           
  5885                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  5886   003826  0EE0               	movlw	-32
  5887   003828  16BE               	andwf	190,f,c	;volatile
  5888                           
  5889                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  5890   00382A  50BF               	movf	191,w,c	;volatile
  5891   00382C  0BF0               	andlw	-16
  5892   00382E  0901               	iorlw	1
  5893   003830  6EBF               	movwf	191,c	;volatile
  5894   003832                     
  5895                           ; BSR set to: 14
  5896                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  5897   003832  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5898   003836                     
  5899                           ; BSR set to: 14
  5900                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  5901   003836  8EBD               	bsf	189,7,c	;volatile
  5902                           
  5903                           ;dc_motor.c: 35:     CCPR1H=0;
  5904   003838  0E00               	movlw	0
  5905   00383A  6EAA               	movwf	170,c	;volatile
  5906                           
  5907                           ;dc_motor.c: 36:     CCPR2H=0;
  5908   00383C  0E00               	movlw	0
  5909   00383E  6EA6               	movwf	166,c	;volatile
  5910                           
  5911                           ;dc_motor.c: 37:     CCPR3H=0;
  5912   003840  0E00               	movlw	0
  5913   003842  010F               	movlb	15	; () banked
  5914   003844  6F25               	movwf	37,b	;volatile
  5915                           
  5916                           ;dc_motor.c: 38:     CCPR4H=0;
  5917   003846  0E00               	movlw	0
  5918   003848  6F21               	movwf	33,b	;volatile
  5919                           
  5920                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  5921   00384A  0EFC               	movlw	-4
  5922   00384C  16AD               	andwf	173,f,c	;volatile
  5923                           
  5924                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  5925   00384E  0EF3               	movlw	-13
  5926   003850  16AD               	andwf	173,f,c	;volatile
  5927                           
  5928                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  5929   003852  0ECF               	movlw	-49
  5930   003854  16AD               	andwf	173,f,c	;volatile
  5931                           
  5932                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  5933   003856  0E3F               	movlw	-193
  5934   003858  16AD               	andwf	173,f,c	;volatile
  5935   00385A                     
  5936                           ; BSR set to: 15
  5937                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  5938   00385A  88AB               	bsf	171,4,c	;volatile
  5939                           
  5940                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  5941   00385C  50AB               	movf	171,w,c	;volatile
  5942   00385E  0BF0               	andlw	-16
  5943   003860  090C               	iorlw	12
  5944   003862  6EAB               	movwf	171,c	;volatile
  5945   003864                     
  5946                           ; BSR set to: 15
  5947                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  5948   003864  8EAB               	bsf	171,7,c	;volatile
  5949   003866                     
  5950                           ; BSR set to: 15
  5951                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  5952   003866  88A7               	bsf	167,4,c	;volatile
  5953                           
  5954                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  5955   003868  50A7               	movf	167,w,c	;volatile
  5956   00386A  0BF0               	andlw	-16
  5957   00386C  090C               	iorlw	12
  5958   00386E  6EA7               	movwf	167,c	;volatile
  5959   003870                     
  5960                           ; BSR set to: 15
  5961                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  5962   003870  8EA7               	bsf	167,7,c	;volatile
  5963   003872                     
  5964                           ; BSR set to: 15
  5965                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  5966   003872  8926               	bsf	38,4,b	;volatile
  5967                           
  5968                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  5969   003874  5126               	movf	38,w,b	;volatile
  5970   003876  0BF0               	andlw	-16
  5971   003878  090C               	iorlw	12
  5972   00387A  6F26               	movwf	38,b	;volatile
  5973   00387C                     
  5974                           ; BSR set to: 15
  5975                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  5976   00387C  8F26               	bsf	38,7,b	;volatile
  5977   00387E                     
  5978                           ; BSR set to: 15
  5979                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  5980   00387E  8922               	bsf	34,4,b	;volatile
  5981                           
  5982                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  5983   003880  5122               	movf	34,w,b	;volatile
  5984   003882  0BF0               	andlw	-16
  5985   003884  090C               	iorlw	12
  5986   003886  6F22               	movwf	34,b	;volatile
  5987   003888                     
  5988                           ; BSR set to: 15
  5989                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  5990   003888  8F22               	bsf	34,7,b	;volatile
  5991   00388A                     
  5992                           ; BSR set to: 15
  5993   00388A  0012               	return		;funcret
  5994   00388C                     __end_of_initDCmotorsPWM:
  5995                           	callstack 0
  5996                           
  5997 ;; *************** function _get16bitTMR0val *****************
  5998 ;; Defined at:
  5999 ;;		line 32 in file "timers.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;		None
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  combined_val    2    7[COMRAM] unsigned int 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  2    1[COMRAM] unsigned int 
  6006 ;; Registers used:
  6007 ;;		wreg, status,2, status,0
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6013 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6014 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6015 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6016 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6017 ;;Total ram usage:        8 bytes
  6018 ;; Hardware stack levels used: 1
  6019 ;; Hardware stack levels required when called: 1
  6020 ;; This function calls:
  6021 ;;		Nothing
  6022 ;; This function is called by:
  6023 ;;		_main
  6024 ;; This function uses a non-reentrant model
  6025 ;;
  6026                           
  6027                           	psect	text19
  6028   0043BE                     __ptext19:
  6029                           	callstack 0
  6030   0043BE                     _get16bitTMR0val:
  6031                           	callstack 29
  6032   0043BE                     
  6033                           ;timers.c: 34:     unsigned int combined_value;;timers.c: 35:     combined_value = TMR0L
      +                           | (TMR0H << 8);
  6034   0043BE  50D4               	movf	212,w,c	;volatile
  6035   0043C0  6E05               	movwf	(??_get16bitTMR0val+1)^0,c
  6036   0043C2  6A04               	clrf	??_get16bitTMR0val^0,c
  6037   0043C4  50D3               	movf	211,w,c	;volatile
  6038   0043C6  6E06               	movwf	(??_get16bitTMR0val+2)^0,c
  6039   0043C8  6A07               	clrf	(??_get16bitTMR0val+3)^0,c
  6040   0043CA  5004               	movf	??_get16bitTMR0val^0,w,c
  6041   0043CC  1006               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6042   0043CE  6E08               	movwf	get16bitTMR0val@combined_value^0,c
  6043   0043D0  5005               	movf	(??_get16bitTMR0val+1)^0,w,c
  6044   0043D2  1007               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6045   0043D4  6E09               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6046   0043D6                     
  6047                           ;timers.c: 36:     return combined_value;
  6048   0043D6  C008  F002         	movff	get16bitTMR0val@combined_value,?_get16bitTMR0val
  6049   0043DA  C009  F003         	movff	get16bitTMR0val@combined_value+1,?_get16bitTMR0val+1
  6050   0043DE  0012               	return		;funcret
  6051   0043E0                     __end_of_get16bitTMR0val:
  6052                           	callstack 0
  6053                           
  6054 ;; *************** function _decision *****************
  6055 ;; Defined at:
  6056 ;;		line 277 in file "color.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;  hue             2   70[COMRAM] unsigned int 
  6059 ;;  path_length     2   72[COMRAM] unsigned int 
  6060 ;; Auto vars:     Size  Location     Type
  6061 ;;  color           2   74[COMRAM] unsigned int 
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  1    wreg      void 
  6064 ;; Registers used:
  6065 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6071 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6072 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6074 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6075 ;;Total ram usage:        6 bytes
  6076 ;; Hardware stack levels used: 1
  6077 ;; Hardware stack levels required when called: 10
  6078 ;; This function calls:
  6079 ;;		_moveBlue
  6080 ;;		_moveGreen
  6081 ;;		_moveLightBlue
  6082 ;;		_moveOrange
  6083 ;;		_movePink
  6084 ;;		_moveRed
  6085 ;;		_moveYellow
  6086 ;;		_send2USART
  6087 ;; This function is called by:
  6088 ;;		_main
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           	psect	text20
  6093   00255A                     __ptext20:
  6094                           	callstack 0
  6095   00255A                     _decision:
  6096                           	callstack 20
  6097   00255A                     
  6098                           ;color.c: 282:     unsigned int color;;color.c: 284:     if (hue<=10 || hue>=355) {
  6099   00255A  5048               	movf	(decision@hue+1)^0,w,c
  6100   00255C  E109               	bnz	u5120
  6101   00255E  0E0B               	movlw	11
  6102   002560  5C47               	subwf	decision@hue^0,w,c
  6103   002562  A0D8               	btfss	status,0,c
  6104   002564  EFB6  F012         	goto	u5121
  6105   002568  EFB8  F012         	goto	u5120
  6106   00256C                     u5121:
  6107   00256C  EFC3  F012         	goto	l5802
  6108   002570                     u5120:
  6109   002570  0E63               	movlw	99
  6110   002572  5C47               	subwf	decision@hue^0,w,c
  6111   002574  0E01               	movlw	1
  6112   002576  5848               	subwfb	(decision@hue+1)^0,w,c
  6113   002578  A0D8               	btfss	status,0,c
  6114   00257A  EFC1  F012         	goto	u5131
  6115   00257E  EFC3  F012         	goto	u5130
  6116   002582                     u5131:
  6117   002582  EFD3  F012         	goto	l5806
  6118   002586                     u5130:
  6119   002586                     l5802:
  6120                           
  6121                           ;color.c: 285:         moveRed(&motorL, &motorR, path_length);
  6122   002586  0ED4               	movlw	low _motorL
  6123   002588  6E1D               	movwf	moveRed@mL^0,c
  6124   00258A  0ECB               	movlw	low _motorR
  6125   00258C  6E1E               	movwf	moveRed@mR^0,c
  6126   00258E  C049  F01F         	movff	decision@path_length,moveRed@path_length
  6127   002592  C04A  F020         	movff	decision@path_length+1,moveRed@path_length+1
  6128   002596  ECB6  F01E         	call	_moveRed	;wreg free
  6129   00259A                     
  6130                           ;color.c: 286:         color = 1;
  6131   00259A  0E00               	movlw	0
  6132   00259C  6E4C               	movwf	(decision@color+1)^0,c
  6133   00259E  0E01               	movlw	1
  6134   0025A0  6E4B               	movwf	decision@color^0,c
  6135                           
  6136                           ;color.c: 287:     } else if (hue>=105 && hue<=130){
  6137   0025A2  EFB7  F013         	goto	l5854
  6138   0025A6                     l5806:
  6139   0025A6  5048               	movf	(decision@hue+1)^0,w,c
  6140   0025A8  E109               	bnz	u5140
  6141   0025AA  0E69               	movlw	105
  6142   0025AC  5C47               	subwf	decision@hue^0,w,c
  6143   0025AE  A0D8               	btfss	status,0,c
  6144   0025B0  EFDC  F012         	goto	u5141
  6145   0025B4  EFDE  F012         	goto	u5140
  6146   0025B8                     u5141:
  6147   0025B8  EFF9  F012         	goto	l5814
  6148   0025BC                     u5140:
  6149   0025BC  5048               	movf	(decision@hue+1)^0,w,c
  6150   0025BE  E107               	bnz	u5151
  6151   0025C0  0E83               	movlw	131
  6152   0025C2  5C47               	subwf	decision@hue^0,w,c
  6153   0025C4  B0D8               	btfsc	status,0,c
  6154   0025C6  EFE7  F012         	goto	u5151
  6155   0025CA  EFE9  F012         	goto	u5150
  6156   0025CE                     u5151:
  6157   0025CE  EFF9  F012         	goto	l5814
  6158   0025D2                     u5150:
  6159   0025D2                     
  6160                           ;color.c: 288:         moveGreen(&motorL, &motorR, path_length);
  6161   0025D2  0ED4               	movlw	low _motorL
  6162   0025D4  6E1D               	movwf	moveGreen@mL^0,c
  6163   0025D6  0ECB               	movlw	low _motorR
  6164   0025D8  6E1E               	movwf	moveGreen@mR^0,c
  6165   0025DA  C049  F01F         	movff	decision@path_length,moveGreen@path_length
  6166   0025DE  C04A  F020         	movff	decision@path_length+1,moveGreen@path_length+1
  6167   0025E2  EC46  F01F         	call	_moveGreen	;wreg free
  6168   0025E6                     
  6169                           ;color.c: 289:         color = 2;
  6170   0025E6  0E00               	movlw	0
  6171   0025E8  6E4C               	movwf	(decision@color+1)^0,c
  6172   0025EA  0E02               	movlw	2
  6173   0025EC  6E4B               	movwf	decision@color^0,c
  6174                           
  6175                           ;color.c: 290:     } else if (hue>=230 && hue<=240){
  6176   0025EE  EFB7  F013         	goto	l5854
  6177   0025F2                     l5814:
  6178   0025F2  5048               	movf	(decision@hue+1)^0,w,c
  6179   0025F4  E109               	bnz	u5160
  6180   0025F6  0EE6               	movlw	230
  6181   0025F8  5C47               	subwf	decision@hue^0,w,c
  6182   0025FA  A0D8               	btfss	status,0,c
  6183   0025FC  EF02  F013         	goto	u5161
  6184   002600  EF04  F013         	goto	u5160
  6185   002604                     u5161:
  6186   002604  EF1F  F013         	goto	l5822
  6187   002608                     u5160:
  6188   002608  5048               	movf	(decision@hue+1)^0,w,c
  6189   00260A  E107               	bnz	u5171
  6190   00260C  0EF1               	movlw	241
  6191   00260E  5C47               	subwf	decision@hue^0,w,c
  6192   002610  B0D8               	btfsc	status,0,c
  6193   002612  EF0D  F013         	goto	u5171
  6194   002616  EF0F  F013         	goto	u5170
  6195   00261A                     u5171:
  6196   00261A  EF1F  F013         	goto	l5822
  6197   00261E                     u5170:
  6198   00261E                     
  6199                           ;color.c: 291:         moveBlue(&motorL,&motorR, path_length);
  6200   00261E  0ED4               	movlw	low _motorL
  6201   002620  6E1D               	movwf	moveBlue@mL^0,c
  6202   002622  0ECB               	movlw	low _motorR
  6203   002624  6E1E               	movwf	moveBlue@mR^0,c
  6204   002626  C049  F01F         	movff	decision@path_length,moveBlue@path_length
  6205   00262A  C04A  F020         	movff	decision@path_length+1,moveBlue@path_length+1
  6206   00262E  EC6A  F01F         	call	_moveBlue	;wreg free
  6207   002632                     
  6208                           ;color.c: 292:         color = 3;
  6209   002632  0E00               	movlw	0
  6210   002634  6E4C               	movwf	(decision@color+1)^0,c
  6211   002636  0E03               	movlw	3
  6212   002638  6E4B               	movwf	decision@color^0,c
  6213                           
  6214                           ;color.c: 293:     } else if (hue>=216 && hue<=221){
  6215   00263A  EFB7  F013         	goto	l5854
  6216   00263E                     l5822:
  6217   00263E  5048               	movf	(decision@hue+1)^0,w,c
  6218   002640  E109               	bnz	u5180
  6219   002642  0ED8               	movlw	216
  6220   002644  5C47               	subwf	decision@hue^0,w,c
  6221   002646  A0D8               	btfss	status,0,c
  6222   002648  EF28  F013         	goto	u5181
  6223   00264C  EF2A  F013         	goto	u5180
  6224   002650                     u5181:
  6225   002650  EF45  F013         	goto	l5830
  6226   002654                     u5180:
  6227   002654  5048               	movf	(decision@hue+1)^0,w,c
  6228   002656  E107               	bnz	u5191
  6229   002658  0EDE               	movlw	222
  6230   00265A  5C47               	subwf	decision@hue^0,w,c
  6231   00265C  B0D8               	btfsc	status,0,c
  6232   00265E  EF33  F013         	goto	u5191
  6233   002662  EF35  F013         	goto	u5190
  6234   002666                     u5191:
  6235   002666  EF45  F013         	goto	l5830
  6236   00266A                     u5190:
  6237   00266A                     
  6238                           ;color.c: 294:         moveLightBlue(&motorL,&motorR, path_length);
  6239   00266A  0ED4               	movlw	low _motorL
  6240   00266C  6E1D               	movwf	moveLightBlue@mL^0,c
  6241   00266E  0ECB               	movlw	low _motorR
  6242   002670  6E1E               	movwf	moveLightBlue@mR^0,c
  6243   002672  C049  F01F         	movff	decision@path_length,moveLightBlue@path_length
  6244   002676  C04A  F020         	movff	decision@path_length+1,moveLightBlue@path_length+1
  6245   00267A  EC22  F01F         	call	_moveLightBlue	;wreg free
  6246   00267E                     
  6247                           ;color.c: 295:         color = 4;
  6248   00267E  0E00               	movlw	0
  6249   002680  6E4C               	movwf	(decision@color+1)^0,c
  6250   002682  0E04               	movlw	4
  6251   002684  6E4B               	movwf	decision@color^0,c
  6252                           
  6253                           ;color.c: 296:     } else if (hue>=302 && hue<=346){
  6254   002686  EFB7  F013         	goto	l5854
  6255   00268A                     l5830:
  6256   00268A  0E2E               	movlw	46
  6257   00268C  5C47               	subwf	decision@hue^0,w,c
  6258   00268E  0E01               	movlw	1
  6259   002690  5848               	subwfb	(decision@hue+1)^0,w,c
  6260   002692  A0D8               	btfss	status,0,c
  6261   002694  EF4E  F013         	goto	u5201
  6262   002698  EF50  F013         	goto	u5200
  6263   00269C                     u5201:
  6264   00269C  EF6B  F013         	goto	l5838
  6265   0026A0                     u5200:
  6266   0026A0  0E5B               	movlw	91
  6267   0026A2  5C47               	subwf	decision@hue^0,w,c
  6268   0026A4  0E01               	movlw	1
  6269   0026A6  5848               	subwfb	(decision@hue+1)^0,w,c
  6270   0026A8  B0D8               	btfsc	status,0,c
  6271   0026AA  EF59  F013         	goto	u5211
  6272   0026AE  EF5B  F013         	goto	u5210
  6273   0026B2                     u5211:
  6274   0026B2  EF6B  F013         	goto	l5838
  6275   0026B6                     u5210:
  6276   0026B6                     
  6277                           ;color.c: 297:         moveYellow(&motorL,&motorR, path_length);
  6278   0026B6  0ED4               	movlw	low _motorL
  6279   0026B8  6E1D               	movwf	moveYellow@mL^0,c
  6280   0026BA  0ECB               	movlw	low _motorR
  6281   0026BC  6E1E               	movwf	moveYellow@mR^0,c
  6282   0026BE  C049  F01F         	movff	decision@path_length,moveYellow@path_length
  6283   0026C2  C04A  F020         	movff	decision@path_length+1,moveYellow@path_length+1
  6284   0026C6  EC92  F01E         	call	_moveYellow	;wreg free
  6285   0026CA                     
  6286                           ;color.c: 298:         color = 5;
  6287   0026CA  0E00               	movlw	0
  6288   0026CC  6E4C               	movwf	(decision@color+1)^0,c
  6289   0026CE  0E05               	movlw	5
  6290   0026D0  6E4B               	movwf	decision@color^0,c
  6291                           
  6292                           ;color.c: 299:     } else if (hue>14 && hue<=35){
  6293   0026D2  EFB7  F013         	goto	l5854
  6294   0026D6                     l5838:
  6295   0026D6  5048               	movf	(decision@hue+1)^0,w,c
  6296   0026D8  E109               	bnz	u5220
  6297   0026DA  0E0F               	movlw	15
  6298   0026DC  5C47               	subwf	decision@hue^0,w,c
  6299   0026DE  A0D8               	btfss	status,0,c
  6300   0026E0  EF74  F013         	goto	u5221
  6301   0026E4  EF76  F013         	goto	u5220
  6302   0026E8                     u5221:
  6303   0026E8  EF91  F013         	goto	l5846
  6304   0026EC                     u5220:
  6305   0026EC  5048               	movf	(decision@hue+1)^0,w,c
  6306   0026EE  E107               	bnz	u5231
  6307   0026F0  0E24               	movlw	36
  6308   0026F2  5C47               	subwf	decision@hue^0,w,c
  6309   0026F4  B0D8               	btfsc	status,0,c
  6310   0026F6  EF7F  F013         	goto	u5231
  6311   0026FA  EF81  F013         	goto	u5230
  6312   0026FE                     u5231:
  6313   0026FE  EF91  F013         	goto	l5846
  6314   002702                     u5230:
  6315   002702                     
  6316                           ;color.c: 300:         moveOrange(&motorL,&motorR, path_length);
  6317   002702  0ED4               	movlw	low _motorL
  6318   002704  6E1D               	movwf	moveOrange@mL^0,c
  6319   002706  0ECB               	movlw	low _motorR
  6320   002708  6E1E               	movwf	moveOrange@mR^0,c
  6321   00270A  C049  F01F         	movff	decision@path_length,moveOrange@path_length
  6322   00270E  C04A  F020         	movff	decision@path_length+1,moveOrange@path_length+1
  6323   002712  ECFE  F01E         	call	_moveOrange	;wreg free
  6324   002716                     
  6325                           ;color.c: 301:         color= 6;
  6326   002716  0E00               	movlw	0
  6327   002718  6E4C               	movwf	(decision@color+1)^0,c
  6328   00271A  0E06               	movlw	6
  6329   00271C  6E4B               	movwf	decision@color^0,c
  6330                           
  6331                           ;color.c: 302:     } else if (hue>=244 && hue<=251){
  6332   00271E  EFB7  F013         	goto	l5854
  6333   002722                     l5846:
  6334   002722  5048               	movf	(decision@hue+1)^0,w,c
  6335   002724  E109               	bnz	u5240
  6336   002726  0EF4               	movlw	244
  6337   002728  5C47               	subwf	decision@hue^0,w,c
  6338   00272A  A0D8               	btfss	status,0,c
  6339   00272C  EF9A  F013         	goto	u5241
  6340   002730  EF9C  F013         	goto	u5240
  6341   002734                     u5241:
  6342   002734  EFB7  F013         	goto	l158
  6343   002738                     u5240:
  6344   002738  5048               	movf	(decision@hue+1)^0,w,c
  6345   00273A  E107               	bnz	u5251
  6346   00273C  0EFC               	movlw	252
  6347   00273E  5C47               	subwf	decision@hue^0,w,c
  6348   002740  B0D8               	btfsc	status,0,c
  6349   002742  EFA5  F013         	goto	u5251
  6350   002746  EFA7  F013         	goto	u5250
  6351   00274A                     u5251:
  6352   00274A  EFB7  F013         	goto	l158
  6353   00274E                     u5250:
  6354   00274E                     
  6355                           ;color.c: 303:         movePink(&motorL,&motorR, path_length);
  6356   00274E  0ED4               	movlw	low _motorL
  6357   002750  6E1D               	movwf	movePink@mL^0,c
  6358   002752  0ECB               	movlw	low _motorR
  6359   002754  6E1E               	movwf	movePink@mR^0,c
  6360   002756  C049  F01F         	movff	decision@path_length,movePink@path_length
  6361   00275A  C04A  F020         	movff	decision@path_length+1,movePink@path_length+1
  6362   00275E  ECDA  F01E         	call	_movePink	;wreg free
  6363   002762                     
  6364                           ;color.c: 304:         color = 7;
  6365   002762  0E00               	movlw	0
  6366   002764  6E4C               	movwf	(decision@color+1)^0,c
  6367   002766  0E07               	movlw	7
  6368   002768  6E4B               	movwf	decision@color^0,c
  6369   00276A  EFB7  F013         	goto	l5854
  6370   00276E                     l158:
  6371   00276E                     l5854:
  6372                           
  6373                           ;color.c: 307:     send2USART(color);
  6374   00276E  C04B  F045         	movff	decision@color,send2USART@hue
  6375   002772  C04C  F046         	movff	decision@color+1,send2USART@hue+1
  6376   002776  EC0F  F022         	call	_send2USART	;wreg free
  6377   00277A  0012               	return		;funcret
  6378   00277C                     __end_of_decision:
  6379                           	callstack 0
  6380                           
  6381 ;; *************** function _send2USART *****************
  6382 ;; Defined at:
  6383 ;;		line 146 in file "serial.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  hue             2   68[COMRAM] unsigned int 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  1    wreg      void 
  6390 ;; Registers used:
  6391 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6397 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6398 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6400 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6401 ;;Total ram usage:       52 bytes
  6402 ;; Hardware stack levels used: 1
  6403 ;; Hardware stack levels required when called: 9
  6404 ;; This function calls:
  6405 ;;		_sendStringSerial4
  6406 ;;		_sprintf
  6407 ;; This function is called by:
  6408 ;;		_decision
  6409 ;;		_main
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           	psect	text21
  6414   00441E                     __ptext21:
  6415                           	callstack 0
  6416   00441E                     _send2USART:
  6417                           	callstack 21
  6418   00441E                     
  6419                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  6420   00441E  0E60               	movlw	low send2USART@hue_char
  6421   004420  6E32               	movwf	sprintf@s^0,c
  6422   004422  0E9A               	movlw	low STR_12
  6423   004424  6E33               	movwf	sprintf@fmt^0,c
  6424   004426  C045  F034         	movff	send2USART@hue,?_sprintf+2
  6425   00442A  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  6426   00442E  EC8F  F020         	call	_sprintf	;wreg free
  6427   004432                     
  6428                           ;serial.c: 158:         sendStringSerial4(hue_char);
  6429   004432  0E60               	movlw	low send2USART@hue_char
  6430   004434  6E03               	movwf	sendStringSerial4@string^0,c
  6431   004436  EC72  F021         	call	_sendStringSerial4	;wreg free
  6432   00443A  0012               	return		;funcret
  6433   00443C                     __end_of_send2USART:
  6434                           	callstack 0
  6435                           
  6436 ;; *************** function _moveYellow *****************
  6437 ;; Defined at:
  6438 ;;		line 282 in file "dc_motor.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6441 ;;		 -> motorL(9), 
  6442 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6443 ;;		 -> motorR(9), 
  6444 ;;  path_length     2   30[COMRAM] unsigned int 
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;		None
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  1    wreg      void 
  6449 ;; Registers used:
  6450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6456 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6458 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6459 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6460 ;;Total ram usage:        6 bytes
  6461 ;; Hardware stack levels used: 1
  6462 ;; Hardware stack levels required when called: 5
  6463 ;; This function calls:
  6464 ;;		_backOneAndHalf
  6465 ;;		_logAction
  6466 ;;		_right90
  6467 ;; This function is called by:
  6468 ;;		_decision
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text22
  6473   003D24                     __ptext22:
  6474                           	callstack 0
  6475   003D24                     _moveYellow:
  6476                           	callstack 24
  6477   003D24                     
  6478                           ;dc_motor.c: 282: void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 283: {;dc_motor.c: 285:     backOneAndHalf(mL,mR);
  6479   003D24  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  6480   003D28  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  6481   003D2C  ECF5  F020         	call	_backOneAndHalf	;wreg free
  6482   003D30                     
  6483                           ;dc_motor.c: 286:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6484   003D30  0E29               	movlw	41
  6485   003D32  6E22               	movwf	(??_moveYellow+1)^0,c
  6486   003D34  0E96               	movlw	150
  6487   003D36  6E21               	movwf	??_moveYellow^0,c
  6488   003D38  0E7F               	movlw	127
  6489   003D3A                     u5437:
  6490   003D3A  2EE8               	decfsz	wreg,f,c
  6491   003D3C  D7FE               	bra	u5437
  6492   003D3E  2E21               	decfsz	??_moveYellow^0,f,c
  6493   003D40  D7FC               	bra	u5437
  6494   003D42  2E22               	decfsz	(??_moveYellow+1)^0,f,c
  6495   003D44  D7FA               	bra	u5437
  6496   003D46  0000               	nop	
  6497   003D48                     
  6498                           ;dc_motor.c: 287:     right90(mL,mR);
  6499   003D48  C01D  F019         	movff	moveYellow@mL,right90@mL
  6500   003D4C  C01E  F01A         	movff	moveYellow@mR,right90@mR
  6501   003D50  ECDC  F020         	call	_right90	;wreg free
  6502   003D54                     
  6503                           ;dc_motor.c: 288:     logAction('R',0, path_length);
  6504   003D54  0E00               	movlw	0
  6505   003D56  6E09               	movwf	(logAction@time+1)^0,c
  6506   003D58  0E00               	movlw	0
  6507   003D5A  6E08               	movwf	logAction@time^0,c
  6508   003D5C  C01F  F00A         	movff	moveYellow@path_length,logAction@pathLength
  6509   003D60  C020  F00B         	movff	moveYellow@path_length+1,logAction@pathLength+1
  6510   003D64  0E52               	movlw	82
  6511   003D66  ECBD  F01D         	call	_logAction
  6512   003D6A  0012               	return		;funcret
  6513   003D6C                     __end_of_moveYellow:
  6514                           	callstack 0
  6515                           
  6516 ;; *************** function _moveRed *****************
  6517 ;; Defined at:
  6518 ;;		line 255 in file "dc_motor.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6521 ;;		 -> motorL(9), 
  6522 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6523 ;;		 -> motorR(9), 
  6524 ;;  path_length     2   30[COMRAM] unsigned int 
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;		None
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1    wreg      void 
  6529 ;; Registers used:
  6530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6536 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6538 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6539 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6540 ;;Total ram usage:        6 bytes
  6541 ;; Hardware stack levels used: 1
  6542 ;; Hardware stack levels required when called: 5
  6543 ;; This function calls:
  6544 ;;		_backHalf
  6545 ;;		_logAction
  6546 ;;		_right90
  6547 ;; This function is called by:
  6548 ;;		_decision
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           	psect	text23
  6553   003D6C                     __ptext23:
  6554                           	callstack 0
  6555   003D6C                     _moveRed:
  6556                           	callstack 24
  6557   003D6C                     
  6558                           ;dc_motor.c: 255: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int pa
      +                          th_length);dc_motor.c: 256: {;dc_motor.c: 258:     backHalf(mL,mR);
  6559   003D6C  C01D  F019         	movff	moveRed@mL,backHalf@mL
  6560   003D70  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  6561   003D74  EC8B  F021         	call	_backHalf	;wreg free
  6562   003D78                     
  6563                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6564   003D78  0E29               	movlw	41
  6565   003D7A  6E22               	movwf	(??_moveRed+1)^0,c
  6566   003D7C  0E96               	movlw	150
  6567   003D7E  6E21               	movwf	??_moveRed^0,c
  6568   003D80  0E7F               	movlw	127
  6569   003D82                     u5447:
  6570   003D82  2EE8               	decfsz	wreg,f,c
  6571   003D84  D7FE               	bra	u5447
  6572   003D86  2E21               	decfsz	??_moveRed^0,f,c
  6573   003D88  D7FC               	bra	u5447
  6574   003D8A  2E22               	decfsz	(??_moveRed+1)^0,f,c
  6575   003D8C  D7FA               	bra	u5447
  6576   003D8E  0000               	nop	
  6577   003D90                     
  6578                           ;dc_motor.c: 260:     right90(mL,mR);
  6579   003D90  C01D  F019         	movff	moveRed@mL,right90@mL
  6580   003D94  C01E  F01A         	movff	moveRed@mR,right90@mR
  6581   003D98  ECDC  F020         	call	_right90	;wreg free
  6582   003D9C                     
  6583                           ;dc_motor.c: 261:     logAction('R',0, path_length);
  6584   003D9C  0E00               	movlw	0
  6585   003D9E  6E09               	movwf	(logAction@time+1)^0,c
  6586   003DA0  0E00               	movlw	0
  6587   003DA2  6E08               	movwf	logAction@time^0,c
  6588   003DA4  C01F  F00A         	movff	moveRed@path_length,logAction@pathLength
  6589   003DA8  C020  F00B         	movff	moveRed@path_length+1,logAction@pathLength+1
  6590   003DAC  0E52               	movlw	82
  6591   003DAE  ECBD  F01D         	call	_logAction
  6592   003DB2  0012               	return		;funcret
  6593   003DB4                     __end_of_moveRed:
  6594                           	callstack 0
  6595                           
  6596 ;; *************** function _right90 *****************
  6597 ;; Defined at:
  6598 ;;		line 193 in file "dc_motor.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6601 ;;		 -> motorL(9), 
  6602 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6603 ;;		 -> motorR(9), 
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;		None
  6606 ;; Return value:  Size  Location     Type
  6607 ;;                  1    wreg      void 
  6608 ;; Registers used:
  6609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6615 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6617 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6618 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6619 ;;Total ram usage:        4 bytes
  6620 ;; Hardware stack levels used: 1
  6621 ;; Hardware stack levels required when called: 4
  6622 ;; This function calls:
  6623 ;;		_stop
  6624 ;;		_turnRight
  6625 ;; This function is called by:
  6626 ;;		_moveRed
  6627 ;;		_moveYellow
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           	psect	text24
  6632   0041B8                     __ptext24:
  6633                           	callstack 0
  6634   0041B8                     _right90:
  6635                           	callstack 24
  6636   0041B8                     
  6637                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  6638   0041B8  C019  F014         	movff	right90@mL,turnRight@mL
  6639   0041BC  C01A  F015         	movff	right90@mR,turnRight@mR
  6640   0041C0  EC8D  F01C         	call	_turnRight	;wreg free
  6641   0041C4                     
  6642                           ;dc_motor.c: 196:     _delay((unsigned long)((260)*(64000000/4000.0)));
  6643   0041C4  0E16               	movlw	22
  6644   0041C6  6E1C               	movwf	(??_right90+1)^0,c
  6645   0041C8  0E1B               	movlw	27
  6646   0041CA  6E1B               	movwf	??_right90^0,c
  6647   0041CC  0E88               	movlw	136
  6648   0041CE                     u5457:
  6649   0041CE  2EE8               	decfsz	wreg,f,c
  6650   0041D0  D7FE               	bra	u5457
  6651   0041D2  2E1B               	decfsz	??_right90^0,f,c
  6652   0041D4  D7FC               	bra	u5457
  6653   0041D6  2E1C               	decfsz	(??_right90+1)^0,f,c
  6654   0041D8  D7FA               	bra	u5457
  6655   0041DA  D000               	nop2	
  6656   0041DC                     
  6657                           ;dc_motor.c: 197:     stop(mL,mR);
  6658   0041DC  C019  F014         	movff	right90@mL,stop@mL
  6659   0041E0  C01A  F015         	movff	right90@mR,stop@mR
  6660   0041E4  EC46  F01C         	call	_stop	;wreg free
  6661   0041E8  0012               	return		;funcret
  6662   0041EA                     __end_of_right90:
  6663                           	callstack 0
  6664                           
  6665 ;; *************** function _movePink *****************
  6666 ;; Defined at:
  6667 ;;		line 291 in file "dc_motor.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6670 ;;		 -> motorL(9), 
  6671 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6672 ;;		 -> motorR(9), 
  6673 ;;  path_length     2   30[COMRAM] unsigned int 
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;		None
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  1    wreg      void 
  6678 ;; Registers used:
  6679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6685 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6687 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6688 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6689 ;;Total ram usage:        6 bytes
  6690 ;; Hardware stack levels used: 1
  6691 ;; Hardware stack levels required when called: 5
  6692 ;; This function calls:
  6693 ;;		_backOneAndHalf
  6694 ;;		_left90
  6695 ;;		_logAction
  6696 ;; This function is called by:
  6697 ;;		_decision
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           	psect	text25
  6702   003DB4                     __ptext25:
  6703                           	callstack 0
  6704   003DB4                     _movePink:
  6705                           	callstack 24
  6706   003DB4                     
  6707                           ;dc_motor.c: 291: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 292: {;dc_motor.c: 294:     backOneAndHalf(mL,mR);
  6708   003DB4  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  6709   003DB8  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  6710   003DBC  ECF5  F020         	call	_backOneAndHalf	;wreg free
  6711   003DC0                     
  6712                           ;dc_motor.c: 295:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6713   003DC0  0E29               	movlw	41
  6714   003DC2  6E22               	movwf	(??_movePink+1)^0,c
  6715   003DC4  0E96               	movlw	150
  6716   003DC6  6E21               	movwf	??_movePink^0,c
  6717   003DC8  0E7F               	movlw	127
  6718   003DCA                     u5467:
  6719   003DCA  2EE8               	decfsz	wreg,f,c
  6720   003DCC  D7FE               	bra	u5467
  6721   003DCE  2E21               	decfsz	??_movePink^0,f,c
  6722   003DD0  D7FC               	bra	u5467
  6723   003DD2  2E22               	decfsz	(??_movePink+1)^0,f,c
  6724   003DD4  D7FA               	bra	u5467
  6725   003DD6  0000               	nop	
  6726   003DD8                     
  6727                           ;dc_motor.c: 296:     left90(mL,mR);
  6728   003DD8  C01D  F019         	movff	movePink@mL,left90@mL
  6729   003DDC  C01E  F01A         	movff	movePink@mR,left90@mR
  6730   003DE0  EC40  F021         	call	_left90	;wreg free
  6731   003DE4                     
  6732                           ;dc_motor.c: 297:     logAction('L',0, path_length);
  6733   003DE4  0E00               	movlw	0
  6734   003DE6  6E09               	movwf	(logAction@time+1)^0,c
  6735   003DE8  0E00               	movlw	0
  6736   003DEA  6E08               	movwf	logAction@time^0,c
  6737   003DEC  C01F  F00A         	movff	movePink@path_length,logAction@pathLength
  6738   003DF0  C020  F00B         	movff	movePink@path_length+1,logAction@pathLength+1
  6739   003DF4  0E4C               	movlw	76
  6740   003DF6  ECBD  F01D         	call	_logAction
  6741   003DFA  0012               	return		;funcret
  6742   003DFC                     __end_of_movePink:
  6743                           	callstack 0
  6744                           
  6745 ;; *************** function _backOneAndHalf *****************
  6746 ;; Defined at:
  6747 ;;		line 241 in file "dc_motor.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6750 ;;		 -> motorL(9), 
  6751 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6752 ;;		 -> motorR(9), 
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;		None
  6755 ;; Return value:  Size  Location     Type
  6756 ;;                  1    wreg      void 
  6757 ;; Registers used:
  6758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6764 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6766 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6767 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6768 ;;Total ram usage:        4 bytes
  6769 ;; Hardware stack levels used: 1
  6770 ;; Hardware stack levels required when called: 4
  6771 ;; This function calls:
  6772 ;;		_fullSpeedBack
  6773 ;;		_stop
  6774 ;; This function is called by:
  6775 ;;		_moveYellow
  6776 ;;		_movePink
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           	psect	text26
  6781   0041EA                     __ptext26:
  6782                           	callstack 0
  6783   0041EA                     _backOneAndHalf:
  6784                           	callstack 24
  6785   0041EA                     
  6786                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  6787   0041EA  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  6788   0041EE  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  6789   0041F2  EC48  F01D         	call	_fullSpeedBack	;wreg free
  6790   0041F6                     
  6791                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  6792   0041F6  0E6A               	movlw	106
  6793   0041F8  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  6794   0041FA  0E85               	movlw	133
  6795   0041FC  6E1B               	movwf	??_backOneAndHalf^0,c
  6796   0041FE  0EB4               	movlw	180
  6797   004200                     u5477:
  6798   004200  2EE8               	decfsz	wreg,f,c
  6799   004202  D7FE               	bra	u5477
  6800   004204  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  6801   004206  D7FC               	bra	u5477
  6802   004208  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  6803   00420A  D7FA               	bra	u5477
  6804   00420C  D000               	nop2	
  6805   00420E                     
  6806                           ;dc_motor.c: 245:     stop(mL,mR);
  6807   00420E  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  6808   004212  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  6809   004216  EC46  F01C         	call	_stop	;wreg free
  6810   00421A  0012               	return		;funcret
  6811   00421C                     __end_of_backOneAndHalf:
  6812                           	callstack 0
  6813                           
  6814 ;; *************** function _moveOrange *****************
  6815 ;; Defined at:
  6816 ;;		line 300 in file "dc_motor.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6819 ;;		 -> motorL(9), 
  6820 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6821 ;;		 -> motorR(9), 
  6822 ;;  path_length     2   30[COMRAM] unsigned int 
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;		None
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  1    wreg      void 
  6827 ;; Registers used:
  6828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6834 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6836 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6837 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6838 ;;Total ram usage:        6 bytes
  6839 ;; Hardware stack levels used: 1
  6840 ;; Hardware stack levels required when called: 5
  6841 ;; This function calls:
  6842 ;;		_backHalf
  6843 ;;		_logAction
  6844 ;;		_right135
  6845 ;; This function is called by:
  6846 ;;		_decision
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text27
  6851   003DFC                     __ptext27:
  6852                           	callstack 0
  6853   003DFC                     _moveOrange:
  6854                           	callstack 24
  6855   003DFC                     
  6856                           ;dc_motor.c: 300: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length);dc_motor.c: 301: {;dc_motor.c: 303:     backHalf(mL,mR);
  6857   003DFC  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  6858   003E00  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  6859   003E04  EC8B  F021         	call	_backHalf	;wreg free
  6860   003E08                     
  6861                           ;dc_motor.c: 304:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6862   003E08  0E29               	movlw	41
  6863   003E0A  6E22               	movwf	(??_moveOrange+1)^0,c
  6864   003E0C  0E96               	movlw	150
  6865   003E0E  6E21               	movwf	??_moveOrange^0,c
  6866   003E10  0E7F               	movlw	127
  6867   003E12                     u5487:
  6868   003E12  2EE8               	decfsz	wreg,f,c
  6869   003E14  D7FE               	bra	u5487
  6870   003E16  2E21               	decfsz	??_moveOrange^0,f,c
  6871   003E18  D7FC               	bra	u5487
  6872   003E1A  2E22               	decfsz	(??_moveOrange+1)^0,f,c
  6873   003E1C  D7FA               	bra	u5487
  6874   003E1E  0000               	nop	
  6875   003E20                     
  6876                           ;dc_motor.c: 305:     right135(mL,mR);
  6877   003E20  C01D  F019         	movff	moveOrange@mL,right135@mL
  6878   003E24  C01E  F01A         	movff	moveOrange@mR,right135@mR
  6879   003E28  EC0E  F021         	call	_right135	;wreg free
  6880   003E2C                     
  6881                           ;dc_motor.c: 306:     logAction('135R',0, path_length);
  6882   003E2C  0E00               	movlw	0
  6883   003E2E  6E09               	movwf	(logAction@time+1)^0,c
  6884   003E30  0E00               	movlw	0
  6885   003E32  6E08               	movwf	logAction@time^0,c
  6886   003E34  C01F  F00A         	movff	moveOrange@path_length,logAction@pathLength
  6887   003E38  C020  F00B         	movff	moveOrange@path_length+1,logAction@pathLength+1
  6888   003E3C  0E52               	movlw	82
  6889   003E3E  ECBD  F01D         	call	_logAction
  6890   003E42  0012               	return		;funcret
  6891   003E44                     __end_of_moveOrange:
  6892                           	callstack 0
  6893                           
  6894 ;; *************** function _right135 *****************
  6895 ;; Defined at:
  6896 ;;		line 217 in file "dc_motor.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6899 ;;		 -> motorL(9), 
  6900 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6901 ;;		 -> motorR(9), 
  6902 ;; Auto vars:     Size  Location     Type
  6903 ;;		None
  6904 ;; Return value:  Size  Location     Type
  6905 ;;                  1    wreg      void 
  6906 ;; Registers used:
  6907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6913 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6915 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6916 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6917 ;;Total ram usage:        4 bytes
  6918 ;; Hardware stack levels used: 1
  6919 ;; Hardware stack levels required when called: 4
  6920 ;; This function calls:
  6921 ;;		_stop
  6922 ;;		_turnRight
  6923 ;; This function is called by:
  6924 ;;		_moveOrange
  6925 ;;		_reverseTurn
  6926 ;; This function uses a non-reentrant model
  6927 ;;
  6928                           
  6929                           	psect	text28
  6930   00421C                     __ptext28:
  6931                           	callstack 0
  6932   00421C                     _right135:
  6933                           	callstack 24
  6934   00421C                     
  6935                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  6936   00421C  C019  F014         	movff	right135@mL,turnRight@mL
  6937   004220  C01A  F015         	movff	right135@mR,turnRight@mR
  6938   004224  EC8D  F01C         	call	_turnRight	;wreg free
  6939   004228                     
  6940                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  6941   004228  0E21               	movlw	33
  6942   00422A  6E1C               	movwf	(??_right135+1)^0,c
  6943   00422C  0E78               	movlw	120
  6944   00422E  6E1B               	movwf	??_right135^0,c
  6945   004230  0E98               	movlw	152
  6946   004232                     u5497:
  6947   004232  2EE8               	decfsz	wreg,f,c
  6948   004234  D7FE               	bra	u5497
  6949   004236  2E1B               	decfsz	??_right135^0,f,c
  6950   004238  D7FC               	bra	u5497
  6951   00423A  2E1C               	decfsz	(??_right135+1)^0,f,c
  6952   00423C  D7FA               	bra	u5497
  6953   00423E  D000               	nop2	
  6954   004240                     
  6955                           ;dc_motor.c: 221:     stop(mL,mR);
  6956   004240  C019  F014         	movff	right135@mL,stop@mL
  6957   004244  C01A  F015         	movff	right135@mR,stop@mR
  6958   004248  EC46  F01C         	call	_stop	;wreg free
  6959   00424C  0012               	return		;funcret
  6960   00424E                     __end_of_right135:
  6961                           	callstack 0
  6962                           
  6963 ;; *************** function _turnRight *****************
  6964 ;; Defined at:
  6965 ;;		line 125 in file "dc_motor.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  6968 ;;		 -> motorL(9), 
  6969 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  6970 ;;		 -> motorR(9), 
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;  i               2   22[COMRAM] unsigned int 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  1    wreg      void 
  6975 ;; Registers used:
  6976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6985 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6986 ;;Total ram usage:        5 bytes
  6987 ;; Hardware stack levels used: 1
  6988 ;; Hardware stack levels required when called: 3
  6989 ;; This function calls:
  6990 ;;		_setMotorPWM
  6991 ;; This function is called by:
  6992 ;;		_right90
  6993 ;;		_right135
  6994 ;;		_reverseTurn
  6995 ;; This function uses a non-reentrant model
  6996 ;;
  6997                           
  6998                           	psect	text29
  6999   00391A                     __ptext29:
  7000                           	callstack 0
  7001   00391A                     _turnRight:
  7002                           	callstack 25
  7003   00391A                     
  7004                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7005   00391A  5014               	movf	turnRight@mL^0,w,c
  7006   00391C  6ED9               	movwf	fsr2l,c
  7007   00391E  6ADA               	clrf	fsr2h,c
  7008   003920  0E01               	movlw	1
  7009   003922  26D9               	addwf	fsr2l,f,c
  7010   003924  0E01               	movlw	1
  7011   003926  6EDF               	movwf	indf2,c
  7012                           
  7013                           ;dc_motor.c: 129:     mR->direction = 0;
  7014   003928  5015               	movf	turnRight@mR^0,w,c
  7015   00392A  6ED9               	movwf	fsr2l,c
  7016   00392C  6ADA               	clrf	fsr2h,c
  7017   00392E  0E01               	movlw	1
  7018   003930  26D9               	addwf	fsr2l,f,c
  7019   003932  6ADF               	clrf	indf2,c
  7020   003934                     
  7021                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7022   003934  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7023   003938  EC01  F017         	call	_setMotorPWM	;wreg free
  7024   00393C                     
  7025                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7026   00393C  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7027   003940  EC01  F017         	call	_setMotorPWM	;wreg free
  7028   003944                     
  7029                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7030   003944  0E00               	movlw	0
  7031   003946  6E18               	movwf	(turnRight@i+1)^0,c
  7032   003948  0E00               	movlw	0
  7033   00394A  6E17               	movwf	turnRight@i^0,c
  7034   00394C                     l5400:
  7035                           
  7036                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7037   00394C  5014               	movf	turnRight@mL^0,w,c
  7038   00394E  6ED9               	movwf	fsr2l,c
  7039   003950  6ADA               	clrf	fsr2h,c
  7040   003952  2ADF               	incf	indf2,f,c
  7041                           
  7042                           ;dc_motor.c: 136:         mR->power++;
  7043   003954  5015               	movf	turnRight@mR^0,w,c
  7044   003956  6ED9               	movwf	fsr2l,c
  7045   003958  6ADA               	clrf	fsr2h,c
  7046   00395A  2ADF               	incf	indf2,f,c
  7047   00395C                     
  7048                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7049   00395C  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7050   003960  EC01  F017         	call	_setMotorPWM	;wreg free
  7051   003964                     
  7052                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7053   003964  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7054   003968  EC01  F017         	call	_setMotorPWM	;wreg free
  7055   00396C                     
  7056                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7057   00396C  0E0B               	movlw	11
  7058   00396E  6E16               	movwf	??_turnRight^0,c
  7059   003970  0E62               	movlw	98
  7060   003972                     u5507:
  7061   003972  2EE8               	decfsz	wreg,f,c
  7062   003974  D7FE               	bra	u5507
  7063   003976  2E16               	decfsz	??_turnRight^0,f,c
  7064   003978  D7FC               	bra	u5507
  7065   00397A  D000               	nop2	
  7066   00397C                     
  7067                           ;dc_motor.c: 140:     }
  7068   00397C  4A17               	infsnz	turnRight@i^0,f,c
  7069   00397E  2A18               	incf	(turnRight@i+1)^0,f,c
  7070   003980  5018               	movf	(turnRight@i+1)^0,w,c
  7071   003982  E109               	bnz	u4900
  7072   003984  0E32               	movlw	50
  7073   003986  5C17               	subwf	turnRight@i^0,w,c
  7074   003988  A0D8               	btfss	status,0,c
  7075   00398A  EFC9  F01C         	goto	u4901
  7076   00398E  EFCB  F01C         	goto	u4900
  7077   003992                     u4901:
  7078   003992  EFA6  F01C         	goto	l5400
  7079   003996                     u4900:
  7080   003996  0012               	return		;funcret
  7081   003998                     __end_of_turnRight:
  7082                           	callstack 0
  7083                           
  7084 ;; *************** function _moveLightBlue *****************
  7085 ;; Defined at:
  7086 ;;		line 309 in file "dc_motor.c"
  7087 ;; Parameters:    Size  Location     Type
  7088 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7089 ;;		 -> motorL(9), 
  7090 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7091 ;;		 -> motorR(9), 
  7092 ;;  path_length     2   30[COMRAM] unsigned int 
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;		None
  7095 ;; Return value:  Size  Location     Type
  7096 ;;                  1    wreg      void 
  7097 ;; Registers used:
  7098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7099 ;; Tracked objects:
  7100 ;;		On entry : 0/0
  7101 ;;		On exit  : 0/0
  7102 ;;		Unchanged: 0/0
  7103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7104 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7106 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7107 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7108 ;;Total ram usage:        6 bytes
  7109 ;; Hardware stack levels used: 1
  7110 ;; Hardware stack levels required when called: 5
  7111 ;; This function calls:
  7112 ;;		_backHalf
  7113 ;;		_left135
  7114 ;;		_logAction
  7115 ;; This function is called by:
  7116 ;;		_decision
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           	psect	text30
  7121   003E44                     __ptext30:
  7122                           	callstack 0
  7123   003E44                     _moveLightBlue:
  7124                           	callstack 24
  7125   003E44                     
  7126                           ;dc_motor.c: 309: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_length);dc_motor.c: 310: {;dc_motor.c: 312:     backHalf(mL,mR);
  7127   003E44  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7128   003E48  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7129   003E4C  EC8B  F021         	call	_backHalf	;wreg free
  7130   003E50                     
  7131                           ;dc_motor.c: 313:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7132   003E50  0E29               	movlw	41
  7133   003E52  6E22               	movwf	(??_moveLightBlue+1)^0,c
  7134   003E54  0E96               	movlw	150
  7135   003E56  6E21               	movwf	??_moveLightBlue^0,c
  7136   003E58  0E7F               	movlw	127
  7137   003E5A                     u5517:
  7138   003E5A  2EE8               	decfsz	wreg,f,c
  7139   003E5C  D7FE               	bra	u5517
  7140   003E5E  2E21               	decfsz	??_moveLightBlue^0,f,c
  7141   003E60  D7FC               	bra	u5517
  7142   003E62  2E22               	decfsz	(??_moveLightBlue+1)^0,f,c
  7143   003E64  D7FA               	bra	u5517
  7144   003E66  0000               	nop	
  7145   003E68                     
  7146                           ;dc_motor.c: 314:     left135(mL,mR);
  7147   003E68  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7148   003E6C  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7149   003E70  EC27  F021         	call	_left135	;wreg free
  7150   003E74                     
  7151                           ;dc_motor.c: 315:     logAction('135L',0,path_length);
  7152   003E74  0E00               	movlw	0
  7153   003E76  6E09               	movwf	(logAction@time+1)^0,c
  7154   003E78  0E00               	movlw	0
  7155   003E7A  6E08               	movwf	logAction@time^0,c
  7156   003E7C  C01F  F00A         	movff	moveLightBlue@path_length,logAction@pathLength
  7157   003E80  C020  F00B         	movff	moveLightBlue@path_length+1,logAction@pathLength+1
  7158   003E84  0E4C               	movlw	76
  7159   003E86  ECBD  F01D         	call	_logAction
  7160   003E8A  0012               	return		;funcret
  7161   003E8C                     __end_of_moveLightBlue:
  7162                           	callstack 0
  7163                           
  7164 ;; *************** function _left135 *****************
  7165 ;; Defined at:
  7166 ;;		line 225 in file "dc_motor.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7169 ;;		 -> motorL(9), 
  7170 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7171 ;;		 -> motorR(9), 
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;		None
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  1    wreg      void 
  7176 ;; Registers used:
  7177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7183 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7185 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7186 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7187 ;;Total ram usage:        4 bytes
  7188 ;; Hardware stack levels used: 1
  7189 ;; Hardware stack levels required when called: 4
  7190 ;; This function calls:
  7191 ;;		_stop
  7192 ;;		_turnLeft
  7193 ;; This function is called by:
  7194 ;;		_moveLightBlue
  7195 ;;		_reverseTurn
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           	psect	text31
  7200   00424E                     __ptext31:
  7201                           	callstack 0
  7202   00424E                     _left135:
  7203                           	callstack 24
  7204   00424E                     
  7205                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  7206   00424E  C019  F014         	movff	left135@mL,turnLeft@mL
  7207   004252  C01A  F015         	movff	left135@mR,turnLeft@mR
  7208   004256  ECCC  F01C         	call	_turnLeft	;wreg free
  7209   00425A                     
  7210                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7211   00425A  0E21               	movlw	33
  7212   00425C  6E1C               	movwf	(??_left135+1)^0,c
  7213   00425E  0E78               	movlw	120
  7214   004260  6E1B               	movwf	??_left135^0,c
  7215   004262  0E98               	movlw	152
  7216   004264                     u5527:
  7217   004264  2EE8               	decfsz	wreg,f,c
  7218   004266  D7FE               	bra	u5527
  7219   004268  2E1B               	decfsz	??_left135^0,f,c
  7220   00426A  D7FC               	bra	u5527
  7221   00426C  2E1C               	decfsz	(??_left135+1)^0,f,c
  7222   00426E  D7FA               	bra	u5527
  7223   004270  D000               	nop2	
  7224   004272                     
  7225                           ;dc_motor.c: 229:     stop(mL,mR);
  7226   004272  C019  F014         	movff	left135@mL,stop@mL
  7227   004276  C01A  F015         	movff	left135@mR,stop@mR
  7228   00427A  EC46  F01C         	call	_stop	;wreg free
  7229   00427E  0012               	return		;funcret
  7230   004280                     __end_of_left135:
  7231                           	callstack 0
  7232                           
  7233 ;; *************** function _moveGreen *****************
  7234 ;; Defined at:
  7235 ;;		line 264 in file "dc_motor.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7238 ;;		 -> motorL(9), 
  7239 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7240 ;;		 -> motorR(9), 
  7241 ;;  path_length     2   30[COMRAM] unsigned int 
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;		None
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      void 
  7246 ;; Registers used:
  7247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7253 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7255 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7256 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7257 ;;Total ram usage:        6 bytes
  7258 ;; Hardware stack levels used: 1
  7259 ;; Hardware stack levels required when called: 5
  7260 ;; This function calls:
  7261 ;;		_backHalf
  7262 ;;		_left90
  7263 ;;		_logAction
  7264 ;; This function is called by:
  7265 ;;		_decision
  7266 ;; This function uses a non-reentrant model
  7267 ;;
  7268                           
  7269                           	psect	text32
  7270   003E8C                     __ptext32:
  7271                           	callstack 0
  7272   003E8C                     _moveGreen:
  7273                           	callstack 24
  7274   003E8C                     
  7275                           ;dc_motor.c: 264: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          path_length);dc_motor.c: 265: {;dc_motor.c: 267:     backHalf(mL,mR);
  7276   003E8C  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7277   003E90  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7278   003E94  EC8B  F021         	call	_backHalf	;wreg free
  7279   003E98                     
  7280                           ;dc_motor.c: 268:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7281   003E98  0E29               	movlw	41
  7282   003E9A  6E22               	movwf	(??_moveGreen+1)^0,c
  7283   003E9C  0E96               	movlw	150
  7284   003E9E  6E21               	movwf	??_moveGreen^0,c
  7285   003EA0  0E7F               	movlw	127
  7286   003EA2                     u5537:
  7287   003EA2  2EE8               	decfsz	wreg,f,c
  7288   003EA4  D7FE               	bra	u5537
  7289   003EA6  2E21               	decfsz	??_moveGreen^0,f,c
  7290   003EA8  D7FC               	bra	u5537
  7291   003EAA  2E22               	decfsz	(??_moveGreen+1)^0,f,c
  7292   003EAC  D7FA               	bra	u5537
  7293   003EAE  0000               	nop	
  7294   003EB0                     
  7295                           ;dc_motor.c: 269:     left90(mL,mR);
  7296   003EB0  C01D  F019         	movff	moveGreen@mL,left90@mL
  7297   003EB4  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7298   003EB8  EC40  F021         	call	_left90	;wreg free
  7299   003EBC                     
  7300                           ;dc_motor.c: 270:     logAction('L',0, path_length);
  7301   003EBC  0E00               	movlw	0
  7302   003EBE  6E09               	movwf	(logAction@time+1)^0,c
  7303   003EC0  0E00               	movlw	0
  7304   003EC2  6E08               	movwf	logAction@time^0,c
  7305   003EC4  C01F  F00A         	movff	moveGreen@path_length,logAction@pathLength
  7306   003EC8  C020  F00B         	movff	moveGreen@path_length+1,logAction@pathLength+1
  7307   003ECC  0E4C               	movlw	76
  7308   003ECE  ECBD  F01D         	call	_logAction
  7309   003ED2  0012               	return		;funcret
  7310   003ED4                     __end_of_moveGreen:
  7311                           	callstack 0
  7312                           
  7313 ;; *************** function _left90 *****************
  7314 ;; Defined at:
  7315 ;;		line 201 in file "dc_motor.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7318 ;;		 -> motorL(9), 
  7319 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7320 ;;		 -> motorR(9), 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;		None
  7323 ;; Return value:  Size  Location     Type
  7324 ;;                  1    wreg      void 
  7325 ;; Registers used:
  7326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7327 ;; Tracked objects:
  7328 ;;		On entry : 0/0
  7329 ;;		On exit  : 0/0
  7330 ;;		Unchanged: 0/0
  7331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7332 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7334 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7335 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7336 ;;Total ram usage:        4 bytes
  7337 ;; Hardware stack levels used: 1
  7338 ;; Hardware stack levels required when called: 4
  7339 ;; This function calls:
  7340 ;;		_stop
  7341 ;;		_turnLeft
  7342 ;; This function is called by:
  7343 ;;		_moveGreen
  7344 ;;		_movePink
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           	psect	text33
  7349   004280                     __ptext33:
  7350                           	callstack 0
  7351   004280                     _left90:
  7352                           	callstack 24
  7353   004280                     
  7354                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  7355   004280  C019  F014         	movff	left90@mL,turnLeft@mL
  7356   004284  C01A  F015         	movff	left90@mR,turnLeft@mR
  7357   004288  ECCC  F01C         	call	_turnLeft	;wreg free
  7358   00428C                     
  7359                           ;dc_motor.c: 204:     _delay((unsigned long)((260)*(64000000/4000.0)));
  7360   00428C  0E16               	movlw	22
  7361   00428E  6E1C               	movwf	(??_left90+1)^0,c
  7362   004290  0E1B               	movlw	27
  7363   004292  6E1B               	movwf	??_left90^0,c
  7364   004294  0E88               	movlw	136
  7365   004296                     u5547:
  7366   004296  2EE8               	decfsz	wreg,f,c
  7367   004298  D7FE               	bra	u5547
  7368   00429A  2E1B               	decfsz	??_left90^0,f,c
  7369   00429C  D7FC               	bra	u5547
  7370   00429E  2E1C               	decfsz	(??_left90+1)^0,f,c
  7371   0042A0  D7FA               	bra	u5547
  7372   0042A2  D000               	nop2	
  7373   0042A4                     
  7374                           ;dc_motor.c: 205:     stop(mL,mR);
  7375   0042A4  C019  F014         	movff	left90@mL,stop@mL
  7376   0042A8  C01A  F015         	movff	left90@mR,stop@mR
  7377   0042AC  EC46  F01C         	call	_stop	;wreg free
  7378   0042B0  0012               	return		;funcret
  7379   0042B2                     __end_of_left90:
  7380                           	callstack 0
  7381                           
  7382 ;; *************** function _moveBlue *****************
  7383 ;; Defined at:
  7384 ;;		line 273 in file "dc_motor.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7387 ;;		 -> motorL(9), 
  7388 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7389 ;;		 -> motorR(9), 
  7390 ;;  path_length     2   30[COMRAM] unsigned int 
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;		None
  7393 ;; Return value:  Size  Location     Type
  7394 ;;                  1    wreg      void 
  7395 ;; Registers used:
  7396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7402 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7404 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7405 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7406 ;;Total ram usage:        6 bytes
  7407 ;; Hardware stack levels used: 1
  7408 ;; Hardware stack levels required when called: 5
  7409 ;; This function calls:
  7410 ;;		_backHalf
  7411 ;;		_logAction
  7412 ;;		_turn180
  7413 ;; This function is called by:
  7414 ;;		_decision
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           	psect	text34
  7419   003ED4                     __ptext34:
  7420                           	callstack 0
  7421   003ED4                     _moveBlue:
  7422                           	callstack 24
  7423   003ED4                     
  7424                           ;dc_motor.c: 273: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length);dc_motor.c: 274: {;dc_motor.c: 276:     backHalf(mL,mR);
  7425   003ED4  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7426   003ED8  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7427   003EDC  EC8B  F021         	call	_backHalf	;wreg free
  7428   003EE0                     
  7429                           ;dc_motor.c: 277:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7430   003EE0  0E29               	movlw	41
  7431   003EE2  6E22               	movwf	(??_moveBlue+1)^0,c
  7432   003EE4  0E96               	movlw	150
  7433   003EE6  6E21               	movwf	??_moveBlue^0,c
  7434   003EE8  0E7F               	movlw	127
  7435   003EEA                     u5557:
  7436   003EEA  2EE8               	decfsz	wreg,f,c
  7437   003EEC  D7FE               	bra	u5557
  7438   003EEE  2E21               	decfsz	??_moveBlue^0,f,c
  7439   003EF0  D7FC               	bra	u5557
  7440   003EF2  2E22               	decfsz	(??_moveBlue+1)^0,f,c
  7441   003EF4  D7FA               	bra	u5557
  7442   003EF6  0000               	nop	
  7443   003EF8                     
  7444                           ;dc_motor.c: 278:     turn180(mL,mR);
  7445   003EF8  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7446   003EFC  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7447   003F00  EC59  F021         	call	_turn180	;wreg free
  7448   003F04                     
  7449                           ;dc_motor.c: 279:     logAction('180',0, path_length);
  7450   003F04  0E00               	movlw	0
  7451   003F06  6E09               	movwf	(logAction@time+1)^0,c
  7452   003F08  0E00               	movlw	0
  7453   003F0A  6E08               	movwf	logAction@time^0,c
  7454   003F0C  C01F  F00A         	movff	moveBlue@path_length,logAction@pathLength
  7455   003F10  C020  F00B         	movff	moveBlue@path_length+1,logAction@pathLength+1
  7456   003F14  0E30               	movlw	48
  7457   003F16  ECBD  F01D         	call	_logAction
  7458   003F1A  0012               	return		;funcret
  7459   003F1C                     __end_of_moveBlue:
  7460                           	callstack 0
  7461                           
  7462 ;; *************** function _turn180 *****************
  7463 ;; Defined at:
  7464 ;;		line 209 in file "dc_motor.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7467 ;;		 -> motorL(9), 
  7468 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7469 ;;		 -> motorR(9), 
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;		None
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      void 
  7474 ;; Registers used:
  7475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7481 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7483 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7484 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7485 ;;Total ram usage:        4 bytes
  7486 ;; Hardware stack levels used: 1
  7487 ;; Hardware stack levels required when called: 4
  7488 ;; This function calls:
  7489 ;;		_stop
  7490 ;;		_turnLeft
  7491 ;; This function is called by:
  7492 ;;		_moveBlue
  7493 ;;		_moveWhite
  7494 ;;		_reverseTurn
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           	psect	text35
  7499   0042B2                     __ptext35:
  7500                           	callstack 0
  7501   0042B2                     _turn180:
  7502                           	callstack 24
  7503   0042B2                     
  7504                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  7505   0042B2  C019  F014         	movff	turn180@mL,turnLeft@mL
  7506   0042B6  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7507   0042BA  ECCC  F01C         	call	_turnLeft	;wreg free
  7508   0042BE                     
  7509                           ;dc_motor.c: 212:     _delay((unsigned long)((520)*(64000000/4000.0)));
  7510   0042BE  0E2B               	movlw	43
  7511   0042C0  6E1C               	movwf	(??_turn180+1)^0,c
  7512   0042C2  0E36               	movlw	54
  7513   0042C4  6E1B               	movwf	??_turn180^0,c
  7514   0042C6  0E13               	movlw	19
  7515   0042C8                     u5567:
  7516   0042C8  2EE8               	decfsz	wreg,f,c
  7517   0042CA  D7FE               	bra	u5567
  7518   0042CC  2E1B               	decfsz	??_turn180^0,f,c
  7519   0042CE  D7FC               	bra	u5567
  7520   0042D0  2E1C               	decfsz	(??_turn180+1)^0,f,c
  7521   0042D2  D7FA               	bra	u5567
  7522   0042D4  0000               	nop	
  7523   0042D6                     
  7524                           ;dc_motor.c: 213:     stop(mL,mR);
  7525   0042D6  C019  F014         	movff	turn180@mL,stop@mL
  7526   0042DA  C01A  F015         	movff	turn180@mR,stop@mR
  7527   0042DE  EC46  F01C         	call	_stop	;wreg free
  7528   0042E2  0012               	return		;funcret
  7529   0042E4                     __end_of_turn180:
  7530                           	callstack 0
  7531                           
  7532 ;; *************** function _turnLeft *****************
  7533 ;; Defined at:
  7534 ;;		line 105 in file "dc_motor.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7537 ;;		 -> motorL(9), 
  7538 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7539 ;;		 -> motorR(9), 
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;  i               2   22[COMRAM] unsigned int 
  7542 ;; Return value:  Size  Location     Type
  7543 ;;                  1    wreg      void 
  7544 ;; Registers used:
  7545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7551 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7552 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7553 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7554 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7555 ;;Total ram usage:        5 bytes
  7556 ;; Hardware stack levels used: 1
  7557 ;; Hardware stack levels required when called: 3
  7558 ;; This function calls:
  7559 ;;		_setMotorPWM
  7560 ;; This function is called by:
  7561 ;;		_left90
  7562 ;;		_turn180
  7563 ;;		_left135
  7564 ;;		_reverseTurn
  7565 ;; This function uses a non-reentrant model
  7566 ;;
  7567                           
  7568                           	psect	text36
  7569   003998                     __ptext36:
  7570                           	callstack 0
  7571   003998                     _turnLeft:
  7572                           	callstack 25
  7573   003998                     
  7574                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  7575   003998  5014               	movf	turnLeft@mL^0,w,c
  7576   00399A  6ED9               	movwf	fsr2l,c
  7577   00399C  6ADA               	clrf	fsr2h,c
  7578   00399E  0E01               	movlw	1
  7579   0039A0  26D9               	addwf	fsr2l,f,c
  7580   0039A2  6ADF               	clrf	indf2,c
  7581                           
  7582                           ;dc_motor.c: 109:     mR->direction = 1;
  7583   0039A4  5015               	movf	turnLeft@mR^0,w,c
  7584   0039A6  6ED9               	movwf	fsr2l,c
  7585   0039A8  6ADA               	clrf	fsr2h,c
  7586   0039AA  0E01               	movlw	1
  7587   0039AC  26D9               	addwf	fsr2l,f,c
  7588   0039AE  0E01               	movlw	1
  7589   0039B0  6EDF               	movwf	indf2,c
  7590   0039B2                     
  7591                           ;dc_motor.c: 111:     setMotorPWM(mL);
  7592   0039B2  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7593   0039B6  EC01  F017         	call	_setMotorPWM	;wreg free
  7594   0039BA                     
  7595                           ;dc_motor.c: 112:     setMotorPWM(mR);
  7596   0039BA  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7597   0039BE  EC01  F017         	call	_setMotorPWM	;wreg free
  7598   0039C2                     
  7599                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  7600   0039C2  0E00               	movlw	0
  7601   0039C4  6E18               	movwf	(turnLeft@i+1)^0,c
  7602   0039C6  0E00               	movlw	0
  7603   0039C8  6E17               	movwf	turnLeft@i^0,c
  7604   0039CA                     l5376:
  7605                           
  7606                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  7607   0039CA  5014               	movf	turnLeft@mL^0,w,c
  7608   0039CC  6ED9               	movwf	fsr2l,c
  7609   0039CE  6ADA               	clrf	fsr2h,c
  7610   0039D0  2ADF               	incf	indf2,f,c
  7611                           
  7612                           ;dc_motor.c: 116:         mR->power++;
  7613   0039D2  5015               	movf	turnLeft@mR^0,w,c
  7614   0039D4  6ED9               	movwf	fsr2l,c
  7615   0039D6  6ADA               	clrf	fsr2h,c
  7616   0039D8  2ADF               	incf	indf2,f,c
  7617   0039DA                     
  7618                           ;dc_motor.c: 117:         setMotorPWM(mL);
  7619   0039DA  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7620   0039DE  EC01  F017         	call	_setMotorPWM	;wreg free
  7621   0039E2                     
  7622                           ;dc_motor.c: 118:         setMotorPWM(mR);
  7623   0039E2  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7624   0039E6  EC01  F017         	call	_setMotorPWM	;wreg free
  7625   0039EA                     
  7626                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7627   0039EA  0E0B               	movlw	11
  7628   0039EC  6E16               	movwf	??_turnLeft^0,c
  7629   0039EE  0E62               	movlw	98
  7630   0039F0                     u5577:
  7631   0039F0  2EE8               	decfsz	wreg,f,c
  7632   0039F2  D7FE               	bra	u5577
  7633   0039F4  2E16               	decfsz	??_turnLeft^0,f,c
  7634   0039F6  D7FC               	bra	u5577
  7635   0039F8  D000               	nop2	
  7636   0039FA                     
  7637                           ;dc_motor.c: 120:     }
  7638   0039FA  4A17               	infsnz	turnLeft@i^0,f,c
  7639   0039FC  2A18               	incf	(turnLeft@i+1)^0,f,c
  7640   0039FE  5018               	movf	(turnLeft@i+1)^0,w,c
  7641   003A00  E109               	bnz	u4890
  7642   003A02  0E32               	movlw	50
  7643   003A04  5C17               	subwf	turnLeft@i^0,w,c
  7644   003A06  A0D8               	btfss	status,0,c
  7645   003A08  EF08  F01D         	goto	u4891
  7646   003A0C  EF0A  F01D         	goto	u4890
  7647   003A10                     u4891:
  7648   003A10  EFE5  F01C         	goto	l5376
  7649   003A14                     u4890:
  7650   003A14  0012               	return		;funcret
  7651   003A16                     __end_of_turnLeft:
  7652                           	callstack 0
  7653                           
  7654 ;; *************** function _logAction *****************
  7655 ;; Defined at:
  7656 ;;		line 336 in file "dc_motor.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;  action          1    wreg     unsigned char 
  7659 ;;  time            2    7[COMRAM] int 
  7660 ;;  pathLength      2    9[COMRAM] unsigned int 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  action          1   11[COMRAM] unsigned char 
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  2    7[COMRAM] unsigned int 
  7665 ;; Registers used:
  7666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7672 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7675 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7676 ;;Total ram usage:        5 bytes
  7677 ;; Hardware stack levels used: 1
  7678 ;; Hardware stack levels required when called: 2
  7679 ;; This function calls:
  7680 ;;		___wmul
  7681 ;; This function is called by:
  7682 ;;		_main
  7683 ;;		_moveRed
  7684 ;;		_moveGreen
  7685 ;;		_moveBlue
  7686 ;;		_moveYellow
  7687 ;;		_movePink
  7688 ;;		_moveOrange
  7689 ;;		_moveLightBlue
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           	psect	text37
  7694   003B7A                     __ptext37:
  7695                           	callstack 0
  7696   003B7A                     _logAction:
  7697                           	callstack 28
  7698                           
  7699                           ;incstack = 0
  7700                           ;logAction@action stored from wreg
  7701   003B7A  6E0C               	movwf	logAction@action^0,c
  7702   003B7C                     
  7703                           ;dc_motor.c: 337:     if (pathLength < 50) {
  7704   003B7C  500B               	movf	(logAction@pathLength+1)^0,w,c
  7705   003B7E  E107               	bnz	u4981
  7706   003B80  0E32               	movlw	50
  7707   003B82  5C0A               	subwf	logAction@pathLength^0,w,c
  7708   003B84  B0D8               	btfsc	status,0,c
  7709   003B86  EFC7  F01D         	goto	u4981
  7710   003B8A  EFC9  F01D         	goto	u4980
  7711   003B8E                     u4981:
  7712   003B8E  EFF1  F01D         	goto	l482
  7713   003B92                     u4980:
  7714   003B92                     
  7715                           ;dc_motor.c: 338:         path[pathLength].action = action;
  7716   003B92  C00A  F002         	movff	logAction@pathLength,___wmul@multiplier
  7717   003B96  C00B  F003         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7718   003B9A  0E00               	movlw	0
  7719   003B9C  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7720   003B9E  0E05               	movlw	5
  7721   003BA0  6E04               	movwf	___wmul@multiplicand^0,c
  7722   003BA2  ECCC  F021         	call	___wmul	;wreg free
  7723   003BA6  0E00               	movlw	low _path
  7724   003BA8  2402               	addwf	?___wmul^0,w,c
  7725   003BAA  6ED9               	movwf	fsr2l,c
  7726   003BAC  0E02               	movlw	high _path
  7727   003BAE  2003               	addwfc	(?___wmul+1)^0,w,c
  7728   003BB0  6EDA               	movwf	fsr2h,c
  7729   003BB2  C00C  FFDF         	movff	logAction@action,indf2
  7730                           
  7731                           ;dc_motor.c: 339:         path[pathLength].time = time;
  7732   003BB6  C00A  F002         	movff	logAction@pathLength,___wmul@multiplier
  7733   003BBA  C00B  F003         	movff	logAction@pathLength+1,___wmul@multiplier+1
  7734   003BBE  0E00               	movlw	0
  7735   003BC0  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  7736   003BC2  0E05               	movlw	5
  7737   003BC4  6E04               	movwf	___wmul@multiplicand^0,c
  7738   003BC6  ECCC  F021         	call	___wmul	;wreg free
  7739   003BCA  0E01               	movlw	low (_path+1)
  7740   003BCC  2402               	addwf	?___wmul^0,w,c
  7741   003BCE  6ED9               	movwf	fsr2l,c
  7742   003BD0  0E02               	movlw	high (_path+1)
  7743   003BD2  2003               	addwfc	(?___wmul+1)^0,w,c
  7744   003BD4  6EDA               	movwf	fsr2h,c
  7745   003BD6  C008  FFDE         	movff	logAction@time,postinc2
  7746   003BDA  C009  FFDD         	movff	logAction@time+1,postdec2
  7747   003BDE                     
  7748                           ;dc_motor.c: 340:         return pathLength++;;	Return value of _logAction is never used
  7749   003BDE  4A0A               	infsnz	logAction@pathLength^0,f,c
  7750   003BE0  2A0B               	incf	(logAction@pathLength+1)^0,f,c
  7751   003BE2                     l482:
  7752   003BE2  0012               	return		;funcret
  7753   003BE4                     __end_of_logAction:
  7754                           	callstack 0
  7755                           
  7756 ;; *************** function _backHalf *****************
  7757 ;; Defined at:
  7758 ;;		line 233 in file "dc_motor.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7761 ;;		 -> motorL(9), 
  7762 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7763 ;;		 -> motorR(9), 
  7764 ;; Auto vars:     Size  Location     Type
  7765 ;;		None
  7766 ;; Return value:  Size  Location     Type
  7767 ;;                  1    wreg      void 
  7768 ;; Registers used:
  7769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7770 ;; Tracked objects:
  7771 ;;		On entry : 0/0
  7772 ;;		On exit  : 0/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7775 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7777 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7778 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7779 ;;Total ram usage:        4 bytes
  7780 ;; Hardware stack levels used: 1
  7781 ;; Hardware stack levels required when called: 4
  7782 ;; This function calls:
  7783 ;;		_fullSpeedBack
  7784 ;;		_stop
  7785 ;; This function is called by:
  7786 ;;		_moveRed
  7787 ;;		_moveGreen
  7788 ;;		_moveBlue
  7789 ;;		_moveOrange
  7790 ;;		_moveLightBlue
  7791 ;;		_moveWhite
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           	psect	text38
  7796   004316                     __ptext38:
  7797                           	callstack 0
  7798   004316                     _backHalf:
  7799                           	callstack 24
  7800   004316                     
  7801                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  7802   004316  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  7803   00431A  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  7804   00431E  EC48  F01D         	call	_fullSpeedBack	;wreg free
  7805   004322                     
  7806                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  7807   004322  0E19               	movlw	25
  7808   004324  6E1C               	movwf	(??_backHalf+1)^0,c
  7809   004326  0E5A               	movlw	90
  7810   004328  6E1B               	movwf	??_backHalf^0,c
  7811   00432A  0EB2               	movlw	178
  7812   00432C                     u5587:
  7813   00432C  2EE8               	decfsz	wreg,f,c
  7814   00432E  D7FE               	bra	u5587
  7815   004330  2E1B               	decfsz	??_backHalf^0,f,c
  7816   004332  D7FC               	bra	u5587
  7817   004334  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  7818   004336  D7FA               	bra	u5587
  7819   004338                     
  7820                           ;dc_motor.c: 237:     stop(mL,mR);
  7821   004338  C019  F014         	movff	backHalf@mL,stop@mL
  7822   00433C  C01A  F015         	movff	backHalf@mR,stop@mR
  7823   004340  EC46  F01C         	call	_stop	;wreg free
  7824   004344  0012               	return		;funcret
  7825   004346                     __end_of_backHalf:
  7826                           	callstack 0
  7827                           
  7828 ;; *************** function _stop *****************
  7829 ;; Defined at:
  7830 ;;		line 88 in file "dc_motor.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7833 ;;		 -> motorL(9), 
  7834 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7835 ;;		 -> motorR(9), 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;		None
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  1    wreg      void 
  7840 ;; Registers used:
  7841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7847 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7849 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7850 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7851 ;;Total ram usage:        3 bytes
  7852 ;; Hardware stack levels used: 1
  7853 ;; Hardware stack levels required when called: 3
  7854 ;; This function calls:
  7855 ;;		_setMotorPWM
  7856 ;; This function is called by:
  7857 ;;		_main
  7858 ;;		_right90
  7859 ;;		_left90
  7860 ;;		_turn180
  7861 ;;		_right135
  7862 ;;		_left135
  7863 ;;		_backHalf
  7864 ;;		_backOneAndHalf
  7865 ;;		_reverseStraight
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           	psect	text39
  7870   00388C                     __ptext39:
  7871                           	callstack 0
  7872   00388C                     _stop:
  7873                           	callstack 27
  7874   00388C                     
  7875                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  7876   00388C  EF76  F01C         	goto	l5360
  7877   003890                     l5346:
  7878                           
  7879                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  7880   003890  5014               	movf	stop@mL^0,w,c
  7881   003892  6ED9               	movwf	fsr2l,c
  7882   003894  6ADA               	clrf	fsr2h,c
  7883   003896  50DF               	movf	indf2,w,c
  7884   003898  B4D8               	btfsc	status,2,c
  7885   00389A  EF51  F01C         	goto	u4851
  7886   00389E  EF53  F01C         	goto	u4850
  7887   0038A2                     u4851:
  7888   0038A2  EF57  F01C         	goto	l5350
  7889   0038A6                     u4850:
  7890   0038A6  5014               	movf	stop@mL^0,w,c
  7891   0038A8  6ED9               	movwf	fsr2l,c
  7892   0038AA  6ADA               	clrf	fsr2h,c
  7893   0038AC  06DF               	decf	indf2,f,c
  7894   0038AE                     l5350:
  7895                           
  7896                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  7897   0038AE  5015               	movf	stop@mR^0,w,c
  7898   0038B0  6ED9               	movwf	fsr2l,c
  7899   0038B2  6ADA               	clrf	fsr2h,c
  7900   0038B4  50DF               	movf	indf2,w,c
  7901   0038B6  B4D8               	btfsc	status,2,c
  7902   0038B8  EF60  F01C         	goto	u4861
  7903   0038BC  EF62  F01C         	goto	u4860
  7904   0038C0                     u4861:
  7905   0038C0  EF66  F01C         	goto	l5354
  7906   0038C4                     u4860:
  7907   0038C4  5015               	movf	stop@mR^0,w,c
  7908   0038C6  6ED9               	movwf	fsr2l,c
  7909   0038C8  6ADA               	clrf	fsr2h,c
  7910   0038CA  06DF               	decf	indf2,f,c
  7911   0038CC                     l5354:
  7912                           
  7913                           ;dc_motor.c: 96:         setMotorPWM(mL);
  7914   0038CC  C014  F00F         	movff	stop@mL,setMotorPWM@m
  7915   0038D0  EC01  F017         	call	_setMotorPWM	;wreg free
  7916   0038D4                     
  7917                           ;dc_motor.c: 97:         setMotorPWM(mR);
  7918   0038D4  C015  F00F         	movff	stop@mR,setMotorPWM@m
  7919   0038D8  EC01  F017         	call	_setMotorPWM	;wreg free
  7920   0038DC                     
  7921                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7922   0038DC  0E0B               	movlw	11
  7923   0038DE  6E16               	movwf	??_stop^0,c
  7924   0038E0  0E62               	movlw	98
  7925   0038E2                     u5597:
  7926   0038E2  2EE8               	decfsz	wreg,f,c
  7927   0038E4  D7FE               	bra	u5597
  7928   0038E6  2E16               	decfsz	??_stop^0,f,c
  7929   0038E8  D7FC               	bra	u5597
  7930   0038EA  D000               	nop2	
  7931   0038EC                     l5360:
  7932                           
  7933                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  7934   0038EC  5014               	movf	stop@mL^0,w,c
  7935   0038EE  6ED9               	movwf	fsr2l,c
  7936   0038F0  6ADA               	clrf	fsr2h,c
  7937   0038F2  50DF               	movf	indf2,w,c
  7938   0038F4  A4D8               	btfss	status,2,c
  7939   0038F6  EF7F  F01C         	goto	u4871
  7940   0038FA  EF81  F01C         	goto	u4870
  7941   0038FE                     u4871:
  7942   0038FE  EF48  F01C         	goto	l5346
  7943   003902                     u4870:
  7944   003902  5015               	movf	stop@mR^0,w,c
  7945   003904  6ED9               	movwf	fsr2l,c
  7946   003906  6ADA               	clrf	fsr2h,c
  7947   003908  50DF               	movf	indf2,w,c
  7948   00390A  A4D8               	btfss	status,2,c
  7949   00390C  EF8A  F01C         	goto	u4881
  7950   003910  EF8C  F01C         	goto	u4880
  7951   003914                     u4881:
  7952   003914  EF48  F01C         	goto	l5346
  7953   003918                     u4880:
  7954   003918  0012               	return		;funcret
  7955   00391A                     __end_of_stop:
  7956                           	callstack 0
  7957                           
  7958 ;; *************** function _fullSpeedBack *****************
  7959 ;; Defined at:
  7960 ;;		line 165 in file "dc_motor.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7963 ;;		 -> motorL(9), 
  7964 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7965 ;;		 -> motorR(9), 
  7966 ;; Auto vars:     Size  Location     Type
  7967 ;;  power           2   22[COMRAM] int 
  7968 ;; Return value:  Size  Location     Type
  7969 ;;                  1    wreg      void 
  7970 ;; Registers used:
  7971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7972 ;; Tracked objects:
  7973 ;;		On entry : 0/0
  7974 ;;		On exit  : 0/0
  7975 ;;		Unchanged: 0/0
  7976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7977 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7978 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7979 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7980 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7981 ;;Total ram usage:        5 bytes
  7982 ;; Hardware stack levels used: 1
  7983 ;; Hardware stack levels required when called: 3
  7984 ;; This function calls:
  7985 ;;		_setMotorPWM
  7986 ;; This function is called by:
  7987 ;;		_backHalf
  7988 ;;		_backOneAndHalf
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           	psect	text40
  7993   003A90                     __ptext40:
  7994                           	callstack 0
  7995   003A90                     _fullSpeedBack:
  7996                           	callstack 24
  7997   003A90                     
  7998                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  7999   003A90  5014               	movf	fullSpeedBack@mL^0,w,c
  8000   003A92  6ED9               	movwf	fsr2l,c
  8001   003A94  6ADA               	clrf	fsr2h,c
  8002   003A96  0E01               	movlw	1
  8003   003A98  26D9               	addwf	fsr2l,f,c
  8004   003A9A  6ADF               	clrf	indf2,c
  8005                           
  8006                           ;dc_motor.c: 169:     mR->direction = 0;
  8007   003A9C  5015               	movf	fullSpeedBack@mR^0,w,c
  8008   003A9E  6ED9               	movwf	fsr2l,c
  8009   003AA0  6ADA               	clrf	fsr2h,c
  8010   003AA2  0E01               	movlw	1
  8011   003AA4  26D9               	addwf	fsr2l,f,c
  8012   003AA6  6ADF               	clrf	indf2,c
  8013   003AA8                     
  8014                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8015   003AA8  0E00               	movlw	0
  8016   003AAA  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8017   003AAC  0E00               	movlw	0
  8018   003AAE  6E17               	movwf	fullSpeedBack@power^0,c
  8019   003AB0                     l5420:
  8020                           
  8021                           ;dc_motor.c: 172:         mL->power = power;
  8022   003AB0  5014               	movf	fullSpeedBack@mL^0,w,c
  8023   003AB2  6ED9               	movwf	fsr2l,c
  8024   003AB4  6ADA               	clrf	fsr2h,c
  8025   003AB6  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8026                           
  8027                           ;dc_motor.c: 173:         mR->power = power;
  8028   003ABA  5015               	movf	fullSpeedBack@mR^0,w,c
  8029   003ABC  6ED9               	movwf	fsr2l,c
  8030   003ABE  6ADA               	clrf	fsr2h,c
  8031   003AC0  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8032   003AC4                     
  8033                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8034   003AC4  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8035   003AC8  EC01  F017         	call	_setMotorPWM	;wreg free
  8036   003ACC                     
  8037                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8038   003ACC  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8039   003AD0  EC01  F017         	call	_setMotorPWM	;wreg free
  8040   003AD4                     
  8041                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8042   003AD4  0E0B               	movlw	11
  8043   003AD6  6E16               	movwf	??_fullSpeedBack^0,c
  8044   003AD8  0E62               	movlw	98
  8045   003ADA                     u5607:
  8046   003ADA  2EE8               	decfsz	wreg,f,c
  8047   003ADC  D7FE               	bra	u5607
  8048   003ADE  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8049   003AE0  D7FC               	bra	u5607
  8050   003AE2  D000               	nop2	
  8051   003AE4                     
  8052                           ;dc_motor.c: 181:     }
  8053   003AE4  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8054   003AE6  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8055   003AE8  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8056   003AEA  EF80  F01D         	goto	u4911
  8057   003AEE  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8058   003AF0  E109               	bnz	u4910
  8059   003AF2  0E33               	movlw	51
  8060   003AF4  5C17               	subwf	fullSpeedBack@power^0,w,c
  8061   003AF6  A0D8               	btfss	status,0,c
  8062   003AF8  EF80  F01D         	goto	u4911
  8063   003AFC  EF82  F01D         	goto	u4910
  8064   003B00                     u4911:
  8065   003B00  EF58  F01D         	goto	l5420
  8066   003B04                     u4910:
  8067   003B04  0012               	return		;funcret
  8068   003B06                     __end_of_fullSpeedBack:
  8069                           	callstack 0
  8070                           
  8071 ;; *************** function _setMotorPWM *****************
  8072 ;; Defined at:
  8073 ;;		line 65 in file "dc_motor.c"
  8074 ;; Parameters:    Size  Location     Type
  8075 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8076 ;;		 -> motorR(9), motorL(9), 
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;  negDuty         1   18[COMRAM] unsigned char 
  8079 ;;  posDuty         1   17[COMRAM] unsigned char 
  8080 ;; Return value:  Size  Location     Type
  8081 ;;                  1    wreg      void 
  8082 ;; Registers used:
  8083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8089 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8090 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8091 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8092 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8093 ;;Total ram usage:        5 bytes
  8094 ;; Hardware stack levels used: 1
  8095 ;; Hardware stack levels required when called: 2
  8096 ;; This function calls:
  8097 ;;		___lwdiv
  8098 ;;		___wmul
  8099 ;; This function is called by:
  8100 ;;		_stop
  8101 ;;		_turnLeft
  8102 ;;		_turnRight
  8103 ;;		_fullSpeedAhead
  8104 ;;		_fullSpeedBack
  8105 ;; This function uses a non-reentrant model
  8106 ;;
  8107                           
  8108                           	psect	text41
  8109   002E02                     __ptext41:
  8110                           	callstack 0
  8111   002E02                     _setMotorPWM:
  8112                           	callstack 27
  8113   002E02                     
  8114                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8115   002E02  500F               	movf	setMotorPWM@m^0,w,c
  8116   002E04  6ED9               	movwf	fsr2l,c
  8117   002E06  6ADA               	clrf	fsr2h,c
  8118   002E08  0E02               	movlw	2
  8119   002E0A  26D9               	addwf	fsr2l,f,c
  8120   002E0C  50DF               	movf	indf2,w,c
  8121   002E0E  B4D8               	btfsc	status,2,c
  8122   002E10  EF0C  F017         	goto	u4761
  8123   002E14  EF0E  F017         	goto	u4760
  8124   002E18                     u4761:
  8125   002E18  EF3E  F017         	goto	l5274
  8126   002E1C                     u4760:
  8127   002E1C                     
  8128                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8129   002E1C  500F               	movf	setMotorPWM@m^0,w,c
  8130   002E1E  6ED9               	movwf	fsr2l,c
  8131   002E20  6ADA               	clrf	fsr2h,c
  8132   002E22  50DF               	movf	indf2,w,c
  8133   002E24  6E10               	movwf	??_setMotorPWM^0,c
  8134   002E26  5010               	movf	??_setMotorPWM^0,w,c
  8135   002E28  6E02               	movwf	___wmul@multiplier^0,c
  8136   002E2A  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8137   002E2C  500F               	movf	setMotorPWM@m^0,w,c
  8138   002E2E  6ED9               	movwf	fsr2l,c
  8139   002E30  6ADA               	clrf	fsr2h,c
  8140   002E32  0E03               	movlw	3
  8141   002E34  26D9               	addwf	fsr2l,f,c
  8142   002E36  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8143   002E3A  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8144   002E3E  ECCC  F021         	call	___wmul	;wreg free
  8145   002E42  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8146   002E46  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8147   002E4A  0E00               	movlw	0
  8148   002E4C  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8149   002E4E  0E64               	movlw	100
  8150   002E50  6E0A               	movwf	___lwdiv@divisor^0,c
  8151   002E52  EC83  F01D         	call	___lwdiv	;wreg free
  8152   002E56  500F               	movf	setMotorPWM@m^0,w,c
  8153   002E58  6ED9               	movwf	fsr2l,c
  8154   002E5A  6ADA               	clrf	fsr2h,c
  8155   002E5C  0E03               	movlw	3
  8156   002E5E  26D9               	addwf	fsr2l,f,c
  8157   002E60  50DF               	movf	indf2,w,c
  8158   002E62  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8159   002E64  5008               	movf	?___lwdiv^0,w,c
  8160   002E66  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8161   002E68  6E12               	movwf	setMotorPWM@posDuty^0,c
  8162   002E6A                     
  8163                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8164   002E6A  500F               	movf	setMotorPWM@m^0,w,c
  8165   002E6C  6ED9               	movwf	fsr2l,c
  8166   002E6E  6ADA               	clrf	fsr2h,c
  8167   002E70  0E03               	movlw	3
  8168   002E72  26D9               	addwf	fsr2l,f,c
  8169   002E74  50DF               	movf	indf2,w,c
  8170   002E76  6E13               	movwf	setMotorPWM@negDuty^0,c
  8171                           
  8172                           ;dc_motor.c: 72:     }
  8173   002E78  EF5F  F017         	goto	l5278
  8174   002E7C                     l5274:
  8175                           
  8176                           ;dc_motor.c: 74:         posDuty=0;
  8177   002E7C  0E00               	movlw	0
  8178   002E7E  6E12               	movwf	setMotorPWM@posDuty^0,c
  8179   002E80                     
  8180                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8181   002E80  500F               	movf	setMotorPWM@m^0,w,c
  8182   002E82  6ED9               	movwf	fsr2l,c
  8183   002E84  6ADA               	clrf	fsr2h,c
  8184   002E86  50DF               	movf	indf2,w,c
  8185   002E88  6E10               	movwf	??_setMotorPWM^0,c
  8186   002E8A  5010               	movf	??_setMotorPWM^0,w,c
  8187   002E8C  6E02               	movwf	___wmul@multiplier^0,c
  8188   002E8E  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8189   002E90  500F               	movf	setMotorPWM@m^0,w,c
  8190   002E92  6ED9               	movwf	fsr2l,c
  8191   002E94  6ADA               	clrf	fsr2h,c
  8192   002E96  0E03               	movlw	3
  8193   002E98  26D9               	addwf	fsr2l,f,c
  8194   002E9A  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8195   002E9E  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8196   002EA2  ECCC  F021         	call	___wmul	;wreg free
  8197   002EA6  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8198   002EAA  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8199   002EAE  0E00               	movlw	0
  8200   002EB0  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8201   002EB2  0E64               	movlw	100
  8202   002EB4  6E0A               	movwf	___lwdiv@divisor^0,c
  8203   002EB6  EC83  F01D         	call	___lwdiv	;wreg free
  8204   002EBA  5008               	movf	?___lwdiv^0,w,c
  8205   002EBC  6E13               	movwf	setMotorPWM@negDuty^0,c
  8206   002EBE                     l5278:
  8207                           
  8208                           ;dc_motor.c: 78:     if (m->direction) {
  8209   002EBE  500F               	movf	setMotorPWM@m^0,w,c
  8210   002EC0  6ED9               	movwf	fsr2l,c
  8211   002EC2  6ADA               	clrf	fsr2h,c
  8212   002EC4  0E01               	movlw	1
  8213   002EC6  26D9               	addwf	fsr2l,f,c
  8214   002EC8  50DF               	movf	indf2,w,c
  8215   002ECA  B4D8               	btfsc	status,2,c
  8216   002ECC  EF6A  F017         	goto	u4771
  8217   002ED0  EF6C  F017         	goto	u4770
  8218   002ED4                     u4771:
  8219   002ED4  EF8C  F017         	goto	l5282
  8220   002ED8                     u4770:
  8221   002ED8                     
  8222                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8223   002ED8  500F               	movf	setMotorPWM@m^0,w,c
  8224   002EDA  6ED9               	movwf	fsr2l,c
  8225   002EDC  6ADA               	clrf	fsr2h,c
  8226   002EDE  0E05               	movlw	5
  8227   002EE0  26D9               	addwf	fsr2l,f,c
  8228   002EE2  CFDE F010          	movff	postinc2,??_setMotorPWM
  8229   002EE6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8230   002EEA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8231   002EEE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8232   002EF2  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8233                           
  8234                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8235   002EF6  500F               	movf	setMotorPWM@m^0,w,c
  8236   002EF8  6ED9               	movwf	fsr2l,c
  8237   002EFA  6ADA               	clrf	fsr2h,c
  8238   002EFC  0E07               	movlw	7
  8239   002EFE  26D9               	addwf	fsr2l,f,c
  8240   002F00  CFDE F010          	movff	postinc2,??_setMotorPWM
  8241   002F04  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8242   002F08  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8243   002F0C  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8244   002F10  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8245                           
  8246                           ;dc_motor.c: 81:     } else {
  8247   002F14  EFAA  F017         	goto	l405
  8248   002F18                     l5282:
  8249                           
  8250                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8251   002F18  500F               	movf	setMotorPWM@m^0,w,c
  8252   002F1A  6ED9               	movwf	fsr2l,c
  8253   002F1C  6ADA               	clrf	fsr2h,c
  8254   002F1E  0E05               	movlw	5
  8255   002F20  26D9               	addwf	fsr2l,f,c
  8256   002F22  CFDE F010          	movff	postinc2,??_setMotorPWM
  8257   002F26  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8258   002F2A  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8259   002F2E  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8260   002F32  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8261                           
  8262                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8263   002F36  500F               	movf	setMotorPWM@m^0,w,c
  8264   002F38  6ED9               	movwf	fsr2l,c
  8265   002F3A  6ADA               	clrf	fsr2h,c
  8266   002F3C  0E07               	movlw	7
  8267   002F3E  26D9               	addwf	fsr2l,f,c
  8268   002F40  CFDE F010          	movff	postinc2,??_setMotorPWM
  8269   002F44  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8270   002F48  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8271   002F4C  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8272   002F50  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8273   002F54                     l405:
  8274   002F54  0012               	return		;funcret
  8275   002F56                     __end_of_setMotorPWM:
  8276                           	callstack 0
  8277                           
  8278 ;; *************** function ___lwdiv *****************
  8279 ;; Defined at:
  8280 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;  dividend        2    7[COMRAM] unsigned int 
  8283 ;;  divisor         2    9[COMRAM] unsigned int 
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;  quotient        2   11[COMRAM] unsigned int 
  8286 ;;  counter         1   13[COMRAM] unsigned char 
  8287 ;; Return value:  Size  Location     Type
  8288 ;;                  2    7[COMRAM] unsigned int 
  8289 ;; Registers used:
  8290 ;;		wreg, status,2, status,0
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8296 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8297 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8299 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8300 ;;Total ram usage:        7 bytes
  8301 ;; Hardware stack levels used: 1
  8302 ;; Hardware stack levels required when called: 1
  8303 ;; This function calls:
  8304 ;;		Nothing
  8305 ;; This function is called by:
  8306 ;;		_setMotorPWM
  8307 ;;		_ADC2String
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           	psect	text42
  8312   003B06                     __ptext42:
  8313                           	callstack 0
  8314   003B06                     ___lwdiv:
  8315                           	callstack 27
  8316   003B06  0E00               	movlw	0
  8317   003B08  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  8318   003B0A  0E00               	movlw	0
  8319   003B0C  6E0C               	movwf	___lwdiv@quotient^0,c
  8320   003B0E  500A               	movf	___lwdiv@divisor^0,w,c
  8321   003B10  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8322   003B12  B4D8               	btfsc	status,2,c
  8323   003B14  EF8E  F01D         	goto	u2451
  8324   003B18  EF90  F01D         	goto	u2450
  8325   003B1C                     u2451:
  8326   003B1C  EFB8  F01D         	goto	l1159
  8327   003B20                     u2450:
  8328   003B20  0E01               	movlw	1
  8329   003B22  6E0E               	movwf	___lwdiv@counter^0,c
  8330   003B24  EF98  F01D         	goto	l3418
  8331   003B28                     l3416:
  8332   003B28  90D8               	bcf	status,0,c
  8333   003B2A  360A               	rlcf	___lwdiv@divisor^0,f,c
  8334   003B2C  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8335   003B2E  2A0E               	incf	___lwdiv@counter^0,f,c
  8336   003B30                     l3418:
  8337   003B30  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8338   003B32  EF9D  F01D         	goto	u2461
  8339   003B36  EF9F  F01D         	goto	u2460
  8340   003B3A                     u2461:
  8341   003B3A  EF94  F01D         	goto	l3416
  8342   003B3E                     u2460:
  8343   003B3E                     l3420:
  8344   003B3E  90D8               	bcf	status,0,c
  8345   003B40  360C               	rlcf	___lwdiv@quotient^0,f,c
  8346   003B42  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8347   003B44  500A               	movf	___lwdiv@divisor^0,w,c
  8348   003B46  5C08               	subwf	___lwdiv@dividend^0,w,c
  8349   003B48  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8350   003B4A  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8351   003B4C  A0D8               	btfss	status,0,c
  8352   003B4E  EFAB  F01D         	goto	u2471
  8353   003B52  EFAD  F01D         	goto	u2470
  8354   003B56                     u2471:
  8355   003B56  EFB2  F01D         	goto	l3428
  8356   003B5A                     u2470:
  8357   003B5A  500A               	movf	___lwdiv@divisor^0,w,c
  8358   003B5C  5E08               	subwf	___lwdiv@dividend^0,f,c
  8359   003B5E  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8360   003B60  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8361   003B62  800C               	bsf	___lwdiv@quotient^0,0,c
  8362   003B64                     l3428:
  8363   003B64  90D8               	bcf	status,0,c
  8364   003B66  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8365   003B68  320A               	rrcf	___lwdiv@divisor^0,f,c
  8366   003B6A  2E0E               	decfsz	___lwdiv@counter^0,f,c
  8367   003B6C  EF9F  F01D         	goto	l3420
  8368   003B70                     l1159:
  8369   003B70  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  8370   003B74  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8371   003B78  0012               	return		;funcret
  8372   003B7A                     __end_of___lwdiv:
  8373                           	callstack 0
  8374                           
  8375 ;; *************** function _color_click_init *****************
  8376 ;; Defined at:
  8377 ;;		line 8 in file "color.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;		None
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;		None
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      void 
  8384 ;; Registers used:
  8385 ;;		wreg, status,2, status,0, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8394 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8395 ;;Total ram usage:        1 bytes
  8396 ;; Hardware stack levels used: 1
  8397 ;; Hardware stack levels required when called: 4
  8398 ;; This function calls:
  8399 ;;		_I2C_2_Master_Init
  8400 ;;		_color_writetoaddr
  8401 ;; This function is called by:
  8402 ;;		_main
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           	psect	text43
  8407   0040EA                     __ptext43:
  8408                           	callstack 0
  8409   0040EA                     _color_click_init:
  8410                           	callstack 26
  8411   0040EA                     
  8412                           ;color.c: 11:     I2C_2_Master_Init();
  8413   0040EA  ECA3  F021         	call	_I2C_2_Master_Init	;wreg free
  8414   0040EE                     
  8415                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  8416   0040EE  0E01               	movlw	1
  8417   0040F0  6E04               	movwf	color_writetoaddr@value^0,c
  8418   0040F2  0E00               	movlw	0
  8419   0040F4  ECF0  F021         	call	_color_writetoaddr
  8420   0040F8                     
  8421                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8422   0040F8  0E3F               	movlw	63
  8423   0040FA  6E06               	movwf	??_color_click_init^0,c
  8424   0040FC  0E55               	movlw	85
  8425   0040FE                     u5617:
  8426   0040FE  2EE8               	decfsz	wreg,f,c
  8427   004100  D7FE               	bra	u5617
  8428   004102  2E06               	decfsz	??_color_click_init^0,f,c
  8429   004104  D7FC               	bra	u5617
  8430   004106  0000               	nop	
  8431   004108                     
  8432                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  8433   004108  0E03               	movlw	3
  8434   00410A  6E04               	movwf	color_writetoaddr@value^0,c
  8435   00410C  0E00               	movlw	0
  8436   00410E  ECF0  F021         	call	_color_writetoaddr
  8437   004112                     
  8438                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  8439   004112  0ED5               	movlw	213
  8440   004114  6E04               	movwf	color_writetoaddr@value^0,c
  8441   004116  0E01               	movlw	1
  8442   004118  ECF0  F021         	call	_color_writetoaddr
  8443   00411C  0012               	return		;funcret
  8444   00411E                     __end_of_color_click_init:
  8445                           	callstack 0
  8446                           
  8447 ;; *************** function _color_writetoaddr *****************
  8448 ;; Defined at:
  8449 ;;		line 24 in file "color.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;  address         1    wreg     unsigned char 
  8452 ;;  value           1    3[COMRAM] unsigned char 
  8453 ;; Auto vars:     Size  Location     Type
  8454 ;;  address         1    4[COMRAM] unsigned char 
  8455 ;; Return value:  Size  Location     Type
  8456 ;;                  1    wreg      void 
  8457 ;; Registers used:
  8458 ;;		wreg, status,2, status,0, cstack
  8459 ;; Tracked objects:
  8460 ;;		On entry : 0/0
  8461 ;;		On exit  : 0/0
  8462 ;;		Unchanged: 0/0
  8463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8464 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8465 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8467 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8468 ;;Total ram usage:        2 bytes
  8469 ;; Hardware stack levels used: 1
  8470 ;; Hardware stack levels required when called: 3
  8471 ;; This function calls:
  8472 ;;		_I2C_2_Master_Start
  8473 ;;		_I2C_2_Master_Stop
  8474 ;;		_I2C_2_Master_Write
  8475 ;; This function is called by:
  8476 ;;		_color_click_init
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           	psect	text44
  8481   0043E0                     __ptext44:
  8482                           	callstack 0
  8483   0043E0                     _color_writetoaddr:
  8484                           	callstack 26
  8485                           
  8486                           ;incstack = 0
  8487                           ;color_writetoaddr@address stored from wreg
  8488   0043E0  6E05               	movwf	color_writetoaddr@address^0,c
  8489   0043E2                     
  8490                           ;color.c: 25:     I2C_2_Master_Start();
  8491   0043E2  EC42  F022         	call	_I2C_2_Master_Start	;wreg free
  8492                           
  8493                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  8494   0043E6  0E52               	movlw	82
  8495   0043E8  EC37  F022         	call	_I2C_2_Master_Write
  8496                           
  8497                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  8498   0043EC  5005               	movf	color_writetoaddr@address^0,w,c
  8499   0043EE  0980               	iorlw	128
  8500   0043F0  EC37  F022         	call	_I2C_2_Master_Write
  8501                           
  8502                           ;color.c: 28:     I2C_2_Master_Write(value);
  8503   0043F4  5004               	movf	color_writetoaddr@value^0,w,c
  8504   0043F6  EC37  F022         	call	_I2C_2_Master_Write
  8505                           
  8506                           ;color.c: 29:     I2C_2_Master_Stop();
  8507   0043FA  EC3D  F022         	call	_I2C_2_Master_Stop	;wreg free
  8508   0043FE  0012               	return		;funcret
  8509   004400                     __end_of_color_writetoaddr:
  8510                           	callstack 0
  8511                           
  8512 ;; *************** function _I2C_2_Master_Init *****************
  8513 ;; Defined at:
  8514 ;;		line 4 in file "i2c.c"
  8515 ;; Parameters:    Size  Location     Type
  8516 ;;		None
  8517 ;; Auto vars:     Size  Location     Type
  8518 ;;		None
  8519 ;; Return value:  Size  Location     Type
  8520 ;;                  1    wreg      void 
  8521 ;; Registers used:
  8522 ;;		wreg, status,2
  8523 ;; Tracked objects:
  8524 ;;		On entry : 0/0
  8525 ;;		On exit  : 0/0
  8526 ;;		Unchanged: 0/0
  8527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8532 ;;Total ram usage:        0 bytes
  8533 ;; Hardware stack levels used: 1
  8534 ;; Hardware stack levels required when called: 1
  8535 ;; This function calls:
  8536 ;;		Nothing
  8537 ;; This function is called by:
  8538 ;;		_color_click_init
  8539 ;; This function uses a non-reentrant model
  8540 ;;
  8541                           
  8542                           	psect	text45
  8543   004346                     __ptext45:
  8544                           	callstack 0
  8545   004346                     _I2C_2_Master_Init:
  8546                           	callstack 28
  8547   004346                     
  8548                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8549   004346  010E               	movlb	14	; () banked
  8550   004348  51D9               	movf	217,w,b	;volatile
  8551   00434A  0BF0               	andlw	-16
  8552   00434C  0908               	iorlw	8
  8553   00434E  6FD9               	movwf	217,b	;volatile
  8554   004350                     
  8555                           ; BSR set to: 14
  8556                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8557   004350  8BD9               	bsf	217,5,b	;volatile
  8558                           
  8559                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8560   004352  0E9F               	movlw	159
  8561   004354  6FD6               	movwf	214,b	;volatile
  8562   004356                     
  8563                           ; BSR set to: 14
  8564                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8565   004356  8A84               	bsf	132,5,c	;volatile
  8566   004358                     
  8567                           ; BSR set to: 14
  8568                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8569   004358  8C84               	bsf	132,6,c	;volatile
  8570   00435A                     
  8571                           ; BSR set to: 14
  8572                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8573   00435A  9BA7               	bcf	167,5,b	;volatile
  8574   00435C                     
  8575                           ; BSR set to: 14
  8576                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8577   00435C  9DA7               	bcf	167,6,b	;volatile
  8578                           
  8579                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8580   00435E  0E1D               	movlw	29
  8581   004360  6F1D               	movwf	29,b	;volatile
  8582                           
  8583                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8584   004362  0E1E               	movlw	30
  8585   004364  6F1C               	movwf	28,b	;volatile
  8586                           
  8587                           ;i2c.c: 18:   RD5PPS=0x1C;
  8588   004366  0E1C               	movlw	28
  8589   004368  6F6F               	movwf	111,b	;volatile
  8590                           
  8591                           ;i2c.c: 19:   RD6PPS=0x1B;
  8592   00436A  0E1B               	movlw	27
  8593   00436C  6F70               	movwf	112,b	;volatile
  8594   00436E                     
  8595                           ; BSR set to: 14
  8596   00436E  0012               	return		;funcret
  8597   004370                     __end_of_I2C_2_Master_Init:
  8598                           	callstack 0
  8599                           
  8600 ;; *************** function _calibration_routine *****************
  8601 ;; Defined at:
  8602 ;;		line 151 in file "color.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;  cCal            1   68[COMRAM] PTR struct colors
  8605 ;;		 -> colorCalibration(8), 
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;  cal_state      20    0[BANK0 ] unsigned char [20]
  8608 ;; Return value:  Size  Location     Type
  8609 ;;                  1    wreg      void 
  8610 ;; Registers used:
  8611 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8612 ;; Tracked objects:
  8613 ;;		On entry : 0/0
  8614 ;;		On exit  : 0/0
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8617 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8618 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8619 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8620 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8621 ;;Total ram usage:       23 bytes
  8622 ;; Hardware stack levels used: 1
  8623 ;; Hardware stack levels required when called: 9
  8624 ;; This function calls:
  8625 ;;		_color_read_Blue
  8626 ;;		_color_read_Clear
  8627 ;;		_color_read_Green
  8628 ;;		_color_read_Red
  8629 ;;		_sendStringSerial4
  8630 ;;		_sprintf
  8631 ;; This function is called by:
  8632 ;;		_main
  8633 ;; This function uses a non-reentrant model
  8634 ;;
  8635                           
  8636                           	psect	text46
  8637   00277C                     __ptext46:
  8638                           	callstack 0
  8639   00277C                     _calibration_routine:
  8640                           	callstack 21
  8641   00277C                     
  8642                           ;color.c: 151: void calibration_routine(colors *cCal);color.c: 152: {;color.c: 154:     
      +                          LATGbits.LATG0 = 0;
  8643   00277C  907F               	bcf	127,0,c	;volatile
  8644                           
  8645                           ;color.c: 155:     LATEbits.LATE7 = 0;
  8646   00277E  9E7D               	bcf	125,7,c	;volatile
  8647                           
  8648                           ;color.c: 156:     LATAbits.LATA3 = 0;
  8649   002780  9679               	bcf	121,3,c	;volatile
  8650   002782                     
  8651                           ;color.c: 158:     char cal_state[20];;color.c: 162:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  8652   002782  0E60               	movlw	low calibration_routine@cal_state
  8653   002784  6E32               	movwf	sprintf@s^0,c
  8654   002786  0E6D               	movlw	low STR_1
  8655   002788  6E33               	movwf	sprintf@fmt^0,c
  8656   00278A  0EA6               	movlw	low STR_2
  8657   00278C  6E34               	movwf	(?_sprintf+2)^0,c
  8658   00278E  5034               	movf	(?_sprintf+2)^0,w,c
  8659   002790  A4D8               	btfss	status,2,c
  8660   002792  0E0E               	movlw	high __smallconst
  8661   002794  6E35               	movwf	(?_sprintf+3)^0,c
  8662   002796  EC8F  F020         	call	_sprintf	;wreg free
  8663   00279A                     
  8664                           ;color.c: 163:     sendStringSerial4(cal_state);
  8665   00279A  0E60               	movlw	low calibration_routine@cal_state
  8666   00279C  6E03               	movwf	sendStringSerial4@string^0,c
  8667   00279E  EC72  F021         	call	_sendStringSerial4	;wreg free
  8668   0027A2                     l96:
  8669                           
  8670                           ;color.c: 166:     while(PORTFbits.RF2 == 1){
  8671   0027A2  B48E               	btfsc	142,2,c	;volatile
  8672   0027A4  EFD6  F013         	goto	u5071
  8673   0027A8  EFD8  F013         	goto	u5070
  8674   0027AC                     u5071:
  8675   0027AC  EFD1  F013         	goto	l96
  8676   0027B0                     u5070:
  8677   0027B0                     
  8678                           ;color.c: 170:     LATGbits.LATG0 = 1;
  8679   0027B0  807F               	bsf	127,0,c	;volatile
  8680   0027B2                     
  8681                           ;color.c: 171:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8682   0027B2  0E29               	movlw	41
  8683   0027B4  6E47               	movwf	(??_calibration_routine+1)^0,c
  8684   0027B6  0E96               	movlw	150
  8685   0027B8  6E46               	movwf	??_calibration_routine^0,c
  8686   0027BA  0E7F               	movlw	127
  8687   0027BC                     u5627:
  8688   0027BC  2EE8               	decfsz	wreg,f,c
  8689   0027BE  D7FE               	bra	u5627
  8690   0027C0  2E46               	decfsz	??_calibration_routine^0,f,c
  8691   0027C2  D7FC               	bra	u5627
  8692   0027C4  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8693   0027C6  D7FA               	bra	u5627
  8694   0027C8  0000               	nop	
  8695   0027CA                     
  8696                           ;color.c: 172:     (cCal->red) = color_read_Red();
  8697   0027CA  ECF2  F01D         	call	_color_read_Red	;wreg free
  8698   0027CE  5045               	movf	calibration_routine@cCal^0,w,c
  8699   0027D0  6ED9               	movwf	fsr2l,c
  8700   0027D2  6ADA               	clrf	fsr2h,c
  8701   0027D4  C006  FFDE         	movff	?_color_read_Red,postinc2
  8702   0027D8  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  8703   0027DC                     
  8704                           ;color.c: 173:     LATGbits.LATG0 = 0;
  8705   0027DC  907F               	bcf	127,0,c	;volatile
  8706   0027DE                     
  8707                           ;color.c: 176:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  8708   0027DE  0E60               	movlw	low calibration_routine@cal_state
  8709   0027E0  6E32               	movwf	sprintf@s^0,c
  8710   0027E2  0E01               	movlw	low STR_3
  8711   0027E4  6E33               	movwf	sprintf@fmt^0,c
  8712   0027E6  0EA6               	movlw	low STR_2
  8713   0027E8  6E34               	movwf	(?_sprintf+2)^0,c
  8714   0027EA  5034               	movf	(?_sprintf+2)^0,w,c
  8715   0027EC  A4D8               	btfss	status,2,c
  8716   0027EE  0E0E               	movlw	high __smallconst
  8717   0027F0  6E35               	movwf	(?_sprintf+3)^0,c
  8718   0027F2  EC8F  F020         	call	_sprintf	;wreg free
  8719   0027F6                     
  8720                           ;color.c: 177:     sendStringSerial4(&cal_state);
  8721   0027F6  0E60               	movlw	low calibration_routine@cal_state
  8722   0027F8  6E03               	movwf	sendStringSerial4@string^0,c
  8723   0027FA  EC72  F021         	call	_sendStringSerial4	;wreg free
  8724   0027FE                     l99:
  8725                           
  8726                           ;color.c: 179:     while(PORTFbits.RF2 == 1){
  8727   0027FE  B48E               	btfsc	142,2,c	;volatile
  8728   002800  EF04  F014         	goto	u5081
  8729   002804  EF06  F014         	goto	u5080
  8730   002808                     u5081:
  8731   002808  EFFF  F013         	goto	l99
  8732   00280C                     u5080:
  8733   00280C                     
  8734                           ;color.c: 183:     LATEbits.LATE7 = 1;
  8735   00280C  8E7D               	bsf	125,7,c	;volatile
  8736   00280E                     
  8737                           ;color.c: 184:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8738   00280E  0E29               	movlw	41
  8739   002810  6E47               	movwf	(??_calibration_routine+1)^0,c
  8740   002812  0E96               	movlw	150
  8741   002814  6E46               	movwf	??_calibration_routine^0,c
  8742   002816  0E7F               	movlw	127
  8743   002818                     u5637:
  8744   002818  2EE8               	decfsz	wreg,f,c
  8745   00281A  D7FE               	bra	u5637
  8746   00281C  2E46               	decfsz	??_calibration_routine^0,f,c
  8747   00281E  D7FC               	bra	u5637
  8748   002820  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8749   002822  D7FA               	bra	u5637
  8750   002824  0000               	nop	
  8751   002826                     
  8752                           ;color.c: 185:     (cCal->green) = color_read_Green();
  8753   002826  EC1A  F01E         	call	_color_read_Green	;wreg free
  8754   00282A  5045               	movf	calibration_routine@cCal^0,w,c
  8755   00282C  6ED9               	movwf	fsr2l,c
  8756   00282E  6ADA               	clrf	fsr2h,c
  8757   002830  0E02               	movlw	2
  8758   002832  26D9               	addwf	fsr2l,f,c
  8759   002834  C006  FFDE         	movff	?_color_read_Green,postinc2
  8760   002838  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  8761   00283C                     
  8762                           ;color.c: 186:     LATEbits.LATE7 = 0;
  8763   00283C  9E7D               	bcf	125,7,c	;volatile
  8764   00283E                     
  8765                           ;color.c: 189:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  8766   00283E  0E60               	movlw	low calibration_routine@cal_state
  8767   002840  6E32               	movwf	sprintf@s^0,c
  8768   002842  0E1E               	movlw	low STR_5
  8769   002844  6E33               	movwf	sprintf@fmt^0,c
  8770   002846  0EA6               	movlw	low STR_2
  8771   002848  6E34               	movwf	(?_sprintf+2)^0,c
  8772   00284A  5034               	movf	(?_sprintf+2)^0,w,c
  8773   00284C  A4D8               	btfss	status,2,c
  8774   00284E  0E0E               	movlw	high __smallconst
  8775   002850  6E35               	movwf	(?_sprintf+3)^0,c
  8776   002852  EC8F  F020         	call	_sprintf	;wreg free
  8777   002856                     
  8778                           ;color.c: 190:     sendStringSerial4(&cal_state);
  8779   002856  0E60               	movlw	low calibration_routine@cal_state
  8780   002858  6E03               	movwf	sendStringSerial4@string^0,c
  8781   00285A  EC72  F021         	call	_sendStringSerial4	;wreg free
  8782   00285E                     l102:
  8783                           
  8784                           ;color.c: 192:     while(PORTFbits.RF2 == 1){
  8785   00285E  B48E               	btfsc	142,2,c	;volatile
  8786   002860  EF34  F014         	goto	u5091
  8787   002864  EF36  F014         	goto	u5090
  8788   002868                     u5091:
  8789   002868  EF2F  F014         	goto	l102
  8790   00286C                     u5090:
  8791   00286C                     
  8792                           ;color.c: 196:     LATAbits.LATA3 = 1;
  8793   00286C  8679               	bsf	121,3,c	;volatile
  8794   00286E                     
  8795                           ;color.c: 197:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8796   00286E  0E29               	movlw	41
  8797   002870  6E47               	movwf	(??_calibration_routine+1)^0,c
  8798   002872  0E96               	movlw	150
  8799   002874  6E46               	movwf	??_calibration_routine^0,c
  8800   002876  0E7F               	movlw	127
  8801   002878                     u5647:
  8802   002878  2EE8               	decfsz	wreg,f,c
  8803   00287A  D7FE               	bra	u5647
  8804   00287C  2E46               	decfsz	??_calibration_routine^0,f,c
  8805   00287E  D7FC               	bra	u5647
  8806   002880  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8807   002882  D7FA               	bra	u5647
  8808   002884  0000               	nop	
  8809   002886                     
  8810                           ;color.c: 198:     (cCal->blue) = color_read_Blue();
  8811   002886  EC6A  F01E         	call	_color_read_Blue	;wreg free
  8812   00288A  5045               	movf	calibration_routine@cCal^0,w,c
  8813   00288C  6ED9               	movwf	fsr2l,c
  8814   00288E  6ADA               	clrf	fsr2h,c
  8815   002890  0E04               	movlw	4
  8816   002892  26D9               	addwf	fsr2l,f,c
  8817   002894  C006  FFDE         	movff	?_color_read_Blue,postinc2
  8818   002898  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  8819   00289C                     
  8820                           ;color.c: 199:     LATAbits.LATA3 = 0;
  8821   00289C  9679               	bcf	121,3,c	;volatile
  8822   00289E                     
  8823                           ;color.c: 202:     sprintf(cal_state,"Calibration state =  white", ".");
  8824   00289E  0E60               	movlw	low calibration_routine@cal_state
  8825   0028A0  6E32               	movwf	sprintf@s^0,c
  8826   0028A2  0E39               	movlw	low STR_7
  8827   0028A4  6E33               	movwf	sprintf@fmt^0,c
  8828   0028A6  0EA6               	movlw	low STR_2
  8829   0028A8  6E34               	movwf	(?_sprintf+2)^0,c
  8830   0028AA  5034               	movf	(?_sprintf+2)^0,w,c
  8831   0028AC  A4D8               	btfss	status,2,c
  8832   0028AE  0E0E               	movlw	high __smallconst
  8833   0028B0  6E35               	movwf	(?_sprintf+3)^0,c
  8834   0028B2  EC8F  F020         	call	_sprintf	;wreg free
  8835   0028B6                     
  8836                           ;color.c: 203:     sendStringSerial4(&cal_state);
  8837   0028B6  0E60               	movlw	low calibration_routine@cal_state
  8838   0028B8  6E03               	movwf	sendStringSerial4@string^0,c
  8839   0028BA  EC72  F021         	call	_sendStringSerial4	;wreg free
  8840   0028BE                     l105:
  8841                           
  8842                           ;color.c: 205:     while(PORTFbits.RF2 == 1){
  8843   0028BE  B48E               	btfsc	142,2,c	;volatile
  8844   0028C0  EF64  F014         	goto	u5101
  8845   0028C4  EF66  F014         	goto	u5100
  8846   0028C8                     u5101:
  8847   0028C8  EF5F  F014         	goto	l105
  8848   0028CC                     u5100:
  8849   0028CC                     
  8850                           ;color.c: 208:     LATGbits.LATG0 = 1;
  8851   0028CC  807F               	bsf	127,0,c	;volatile
  8852                           
  8853                           ;color.c: 209:     LATEbits.LATE7 = 1;
  8854   0028CE  8E7D               	bsf	125,7,c	;volatile
  8855                           
  8856                           ;color.c: 210:     LATAbits.LATA3 = 1;
  8857   0028D0  8679               	bsf	121,3,c	;volatile
  8858   0028D2                     
  8859                           ;color.c: 211:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8860   0028D2  0E29               	movlw	41
  8861   0028D4  6E47               	movwf	(??_calibration_routine+1)^0,c
  8862   0028D6  0E96               	movlw	150
  8863   0028D8  6E46               	movwf	??_calibration_routine^0,c
  8864   0028DA  0E7F               	movlw	127
  8865   0028DC                     u5657:
  8866   0028DC  2EE8               	decfsz	wreg,f,c
  8867   0028DE  D7FE               	bra	u5657
  8868   0028E0  2E46               	decfsz	??_calibration_routine^0,f,c
  8869   0028E2  D7FC               	bra	u5657
  8870   0028E4  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8871   0028E6  D7FA               	bra	u5657
  8872   0028E8  0000               	nop	
  8873   0028EA                     
  8874                           ;color.c: 212:     (cCal->clear) = color_read_Clear();
  8875   0028EA  EC42  F01E         	call	_color_read_Clear	;wreg free
  8876   0028EE  5045               	movf	calibration_routine@cCal^0,w,c
  8877   0028F0  6ED9               	movwf	fsr2l,c
  8878   0028F2  6ADA               	clrf	fsr2h,c
  8879   0028F4  0E06               	movlw	6
  8880   0028F6  26D9               	addwf	fsr2l,f,c
  8881   0028F8  C006  FFDE         	movff	?_color_read_Clear,postinc2
  8882   0028FC  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  8883   002900                     
  8884                           ;color.c: 213:     LATGbits.LATG0 = 0;
  8885   002900  907F               	bcf	127,0,c	;volatile
  8886   002902                     
  8887                           ;color.c: 214:     LATEbits.LATE7 = 0;
  8888   002902  9E7D               	bcf	125,7,c	;volatile
  8889   002904                     
  8890                           ;color.c: 215:     LATAbits.LATA3 = 0;
  8891   002904  9679               	bcf	121,3,c	;volatile
  8892   002906                     
  8893                           ;color.c: 219:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  8894   002906  0E60               	movlw	low calibration_routine@cal_state
  8895   002908  6E32               	movwf	sprintf@s^0,c
  8896   00290A  0E54               	movlw	low STR_9
  8897   00290C  6E33               	movwf	sprintf@fmt^0,c
  8898   00290E  0EA6               	movlw	low STR_2
  8899   002910  6E34               	movwf	(?_sprintf+2)^0,c
  8900   002912  5034               	movf	(?_sprintf+2)^0,w,c
  8901   002914  A4D8               	btfss	status,2,c
  8902   002916  0E0E               	movlw	high __smallconst
  8903   002918  6E35               	movwf	(?_sprintf+3)^0,c
  8904   00291A  EC8F  F020         	call	_sprintf	;wreg free
  8905   00291E                     
  8906                           ;color.c: 220:     sendStringSerial4(&cal_state);
  8907   00291E  0E60               	movlw	low calibration_routine@cal_state
  8908   002920  6E03               	movwf	sendStringSerial4@string^0,c
  8909   002922  EC72  F021         	call	_sendStringSerial4	;wreg free
  8910   002926                     l108:
  8911                           
  8912                           ;color.c: 222:     while(PORTFbits.RF2 == 1){
  8913   002926  B48E               	btfsc	142,2,c	;volatile
  8914   002928  EF98  F014         	goto	u5111
  8915   00292C  EF9A  F014         	goto	u5110
  8916   002930                     u5111:
  8917   002930  EF93  F014         	goto	l108
  8918   002934                     u5110:
  8919   002934                     
  8920                           ;color.c: 225:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8921   002934  0E29               	movlw	41
  8922   002936  6E47               	movwf	(??_calibration_routine+1)^0,c
  8923   002938  0E96               	movlw	150
  8924   00293A  6E46               	movwf	??_calibration_routine^0,c
  8925   00293C  0E7F               	movlw	127
  8926   00293E                     u5667:
  8927   00293E  2EE8               	decfsz	wreg,f,c
  8928   002940  D7FE               	bra	u5667
  8929   002942  2E46               	decfsz	??_calibration_routine^0,f,c
  8930   002944  D7FC               	bra	u5667
  8931   002946  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  8932   002948  D7FA               	bra	u5667
  8933   00294A  0000               	nop	
  8934   00294C  0012               	return		;funcret
  8935   00294E                     __end_of_calibration_routine:
  8936                           	callstack 0
  8937                           
  8938 ;; *************** function _sprintf *****************
  8939 ;; Defined at:
  8940 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  8941 ;; Parameters:    Size  Location     Type
  8942 ;;  s               1   49[COMRAM] PTR unsigned char 
  8943 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  8944 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  8945 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  8946 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;  f              12   56[COMRAM] struct _IO_FILE
  8949 ;;  ret             2    0        int 
  8950 ;;  ap              1   55[COMRAM] PTR void [1]
  8951 ;;		 -> ?_sprintf(2), 
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  2   49[COMRAM] int 
  8954 ;; Registers used:
  8955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8961 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8962 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8964 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8965 ;;Total ram usage:       19 bytes
  8966 ;; Hardware stack levels used: 1
  8967 ;; Hardware stack levels required when called: 8
  8968 ;; This function calls:
  8969 ;;		_vfprintf
  8970 ;; This function is called by:
  8971 ;;		_calibration_routine
  8972 ;;		_send2USART
  8973 ;;		_ADC2String
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           	psect	text47
  8978   00411E                     __ptext47:
  8979                           	callstack 0
  8980   00411E                     _sprintf:
  8981                           	callstack 21
  8982   00411E  0E34               	movlw	low (?_sprintf+2)
  8983   004120  6E38               	movwf	sprintf@ap^0,c
  8984   004122  C032  F039         	movff	sprintf@s,sprintf@f
  8985   004126  0E00               	movlw	0
  8986   004128  6E3D               	movwf	(sprintf@f+4)^0,c
  8987   00412A  0E00               	movlw	0
  8988   00412C  6E3C               	movwf	(sprintf@f+3)^0,c
  8989   00412E  0E00               	movlw	0
  8990   004130  6E44               	movwf	(sprintf@f+11)^0,c
  8991   004132  0E00               	movlw	0
  8992   004134  6E43               	movwf	(sprintf@f+10)^0,c
  8993   004136  0E39               	movlw	low sprintf@f
  8994   004138  6E2E               	movwf	vfprintf@fp^0,c
  8995   00413A  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  8996   00413E  0E38               	movlw	low sprintf@ap
  8997   004140  6E30               	movwf	vfprintf@ap^0,c
  8998   004142  ECF7  F01F         	call	_vfprintf	;wreg free
  8999   004146  5032               	movf	sprintf@s^0,w,c
  9000   004148  243C               	addwf	(sprintf@f+3)^0,w,c
  9001   00414A  6ED9               	movwf	fsr2l,c
  9002   00414C  6ADA               	clrf	fsr2h,c
  9003   00414E  6ADF               	clrf	indf2,c
  9004   004150  0012               	return		;funcret
  9005   004152                     __end_of_sprintf:
  9006                           	callstack 0
  9007                           
  9008 ;; *************** function _vfprintf *****************
  9009 ;; Defined at:
  9010 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9013 ;;		 -> sprintf@f(12), 
  9014 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9015 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9016 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9017 ;;  ap              1   47[COMRAM] PTR PTR void 
  9018 ;;		 -> sprintf@ap(1), 
  9019 ;; Auto vars:     Size  Location     Type
  9020 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9021 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9022 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  2   45[COMRAM] int 
  9025 ;; Registers used:
  9026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9032 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9035 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9036 ;;Total ram usage:        4 bytes
  9037 ;; Hardware stack levels used: 1
  9038 ;; Hardware stack levels required when called: 7
  9039 ;; This function calls:
  9040 ;;		_vfpfcnvrt
  9041 ;; This function is called by:
  9042 ;;		_sprintf
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           	psect	text48
  9047   003FEE                     __ptext48:
  9048                           	callstack 0
  9049   003FEE                     _vfprintf:
  9050                           	callstack 21
  9051   003FEE                     
  9052                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9053   003FEE  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9054                           
  9055                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9056   003FF2  EF03  F020         	goto	l5440
  9057   003FF6                     l5438:
  9058                           
  9059                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9060   003FF6  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9061   003FFA  0E31               	movlw	low vfprintf@cfmt
  9062   003FFC  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9063   003FFE  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9064   004002  EC81  F015         	call	_vfpfcnvrt	;wreg free
  9065   004006                     l5440:
  9066                           
  9067                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9068   004006  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9069   00400A                     	if	1	;There is more than 1 active tblptr byte
  9070   00400A  0E0E               	movlw	high __smallconst
  9071   00400C  6EF7               	movwf	tblptrh,c
  9072   00400E                     	endif
  9073   00400E                     	if	0	;tblptru may be non-zero
  9074   00400E                     	endif
  9075   00400E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9076   00400E  0E00               	movlw	low (__smallconst shr (0+16))
  9077   004010  6EF8               	movwf	tblptru,c
  9078   004012                     	endif
  9079   004012  0008               	tblrd		*
  9080   004014  50F5               	movf	tablat,w,c
  9081   004016  0900               	iorlw	0
  9082   004018  A4D8               	btfss	status,2,c
  9083   00401A  EF11  F020         	goto	u4931
  9084   00401E  EF13  F020         	goto	u4930
  9085   004022                     u4931:
  9086   004022  EFFB  F01F         	goto	l5438
  9087   004026                     u4930:
  9088   004026                     
  9089                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9090   004026  0E00               	movlw	0
  9091   004028  6E2F               	movwf	(?_vfprintf+1)^0,c
  9092   00402A  0E00               	movlw	0
  9093   00402C  6E2E               	movwf	?_vfprintf^0,c
  9094   00402E  0012               	return		;funcret
  9095   004030                     __end_of_vfprintf:
  9096                           	callstack 0
  9097                           
  9098 ;; *************** function _vfpfcnvrt *****************
  9099 ;; Defined at:
  9100 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9101 ;; Parameters:    Size  Location     Type
  9102 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9103 ;;		 -> sprintf@f(12), 
  9104 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9105 ;;		 -> vfprintf@cfmt(1), 
  9106 ;;  ap              1   36[COMRAM] PTR PTR void 
  9107 ;;		 -> sprintf@ap(1), 
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;  convarg         4   39[COMRAM] struct .
  9110 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9111 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9112 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9113 ;;  done            1   43[COMRAM] _Bool 
  9114 ;;  c               1    0        unsigned char 
  9115 ;; Return value:  Size  Location     Type
  9116 ;;                  1    wreg      void 
  9117 ;; Registers used:
  9118 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9119 ;; Tracked objects:
  9120 ;;		On entry : 0/0
  9121 ;;		On exit  : 0/0
  9122 ;;		Unchanged: 0/0
  9123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9124 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9125 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9126 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9127 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9128 ;;Total ram usage:       11 bytes
  9129 ;; Hardware stack levels used: 1
  9130 ;; Hardware stack levels required when called: 6
  9131 ;; This function calls:
  9132 ;;		_dtoa
  9133 ;;		_fputc
  9134 ;;		_read_prec_or_width
  9135 ;; This function is called by:
  9136 ;;		_vfprintf
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           	psect	text49
  9141   002B02                     __ptext49:
  9142                           	callstack 0
  9143   002B02                     _vfpfcnvrt:
  9144                           	callstack 21
  9145   002B02                     
  9146                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9147   002B02  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9148   002B04  6ED9               	movwf	fsr2l,c
  9149   002B06  6ADA               	clrf	fsr2h,c
  9150   002B08  CFDF FFF6          	movff	indf2,tblptrl
  9151   002B0C                     	if	1	;There is more than 1 active tblptr byte
  9152   002B0C  0E0E               	movlw	high __smallconst
  9153   002B0E  6EF7               	movwf	tblptrh,c
  9154   002B10                     	endif
  9155   002B10                     	if	0	;tblptru may be non-zero
  9156   002B10                     	endif
  9157   002B10                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9158   002B10  0E00               	movlw	low (__smallconst shr (0+16))
  9159   002B12  6EF8               	movwf	tblptru,c
  9160   002B14                     	endif
  9161   002B14  0008               	tblrd		*
  9162   002B16  50F5               	movf	tablat,w,c
  9163   002B18  0A25               	xorlw	37
  9164   002B1A  A4D8               	btfss	status,2,c
  9165   002B1C  EF92  F015         	goto	u4781
  9166   002B20  EF94  F015         	goto	u4780
  9167   002B24                     u4781:
  9168   002B24  EF31  F016         	goto	l5330
  9169   002B28                     u4780:
  9170   002B28                     
  9171                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9172   002B28  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9173   002B2A  6ED9               	movwf	fsr2l,c
  9174   002B2C  6ADA               	clrf	fsr2h,c
  9175   002B2E  2ADF               	incf	indf2,f,c
  9176   002B30                     
  9177                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9178   002B30  0E00               	movlw	0
  9179   002B32  0100               	movlb	0	; () banked
  9180   002B34  6FC5               	movwf	(_width+1)& (0+255),b
  9181   002B36  0E00               	movlw	0
  9182   002B38  6FC4               	movwf	_width& (0+255),b
  9183   002B3A  C0C4  F0C8         	movff	_width,_flags
  9184   002B3E                     
  9185                           ; BSR set to: 0
  9186                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9187   002B3E  69C6               	setf	_prec& (0+255),b
  9188   002B40  69C7               	setf	(_prec+1)& (0+255),b
  9189   002B42                     
  9190                           ; BSR set to: 0
  9191                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9192   002B42  0E00               	movlw	0
  9193   002B44  6E2C               	movwf	vfpfcnvrt@done^0,c
  9194                           
  9195                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9196   002B46  EFCC  F015         	goto	l5304
  9197   002B4A                     l5294:
  9198                           
  9199                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9200   002B4A  0100               	movlb	0	; () banked
  9201   002B4C  83C8               	bsf	_flags& (0+255),1,b
  9202   002B4E                     
  9203                           ; BSR set to: 0
  9204                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9205   002B4E  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9206   002B50  6ED9               	movwf	fsr2l,c
  9207   002B52  6ADA               	clrf	fsr2h,c
  9208   002B54  2ADF               	incf	indf2,f,c
  9209                           
  9210                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9211   002B56  EFCC  F015         	goto	l5304
  9212   002B5A                     l5298:
  9213                           
  9214                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9215   002B5A  0E01               	movlw	1
  9216   002B5C  6E2C               	movwf	vfpfcnvrt@done^0,c
  9217                           
  9218                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9219   002B5E  EFCC  F015         	goto	l5304
  9220   002B62                     l5302:
  9221   002B62  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9222   002B64  6ED9               	movwf	fsr2l,c
  9223   002B66  6ADA               	clrf	fsr2h,c
  9224   002B68  CFDF FFF6          	movff	indf2,tblptrl
  9225   002B6C                     	if	1	;There is more than 1 active tblptr byte
  9226   002B6C  0E0E               	movlw	high __smallconst
  9227   002B6E  6EF7               	movwf	tblptrh,c
  9228   002B70                     	endif
  9229   002B70                     	if	0	;tblptru may be non-zero
  9230   002B70                     	endif
  9231   002B70                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9232   002B70  0E00               	movlw	low (__smallconst shr (0+16))
  9233   002B72  6EF8               	movwf	tblptru,c
  9234   002B74                     	endif
  9235   002B74  0008               	tblrd		*
  9236   002B76  50F5               	movf	tablat,w,c
  9237   002B78  6E26               	movwf	??_vfpfcnvrt^0,c
  9238   002B7A  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9239                           
  9240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9241                           ; Switch size 1, requested type "simple"
  9242                           ; Number of cases is 1, Range of values is 0 to 0
  9243                           ; switch strategies available:
  9244                           ; Name         Instructions Cycles
  9245                           ; simple_byte            4     3 (average)
  9246                           ;	Chosen strategy is simple_byte
  9247   002B7C  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9248   002B7E  0A00               	xorlw	0	; case 0
  9249   002B80  B4D8               	btfsc	status,2,c
  9250   002B82  EFC5  F015         	goto	l6048
  9251   002B86  EFAD  F015         	goto	l5298
  9252   002B8A                     l6048:
  9253                           
  9254                           ; Switch size 1, requested type "simple"
  9255                           ; Number of cases is 1, Range of values is 48 to 48
  9256                           ; switch strategies available:
  9257                           ; Name         Instructions Cycles
  9258                           ; simple_byte            4     3 (average)
  9259                           ;	Chosen strategy is simple_byte
  9260   002B8A  5026               	movf	??_vfpfcnvrt^0,w,c
  9261   002B8C  0A30               	xorlw	48	; case 48
  9262   002B8E  B4D8               	btfsc	status,2,c
  9263   002B90  EFA5  F015         	goto	l5294
  9264   002B94  EFAD  F015         	goto	l5298
  9265   002B98                     l5304:
  9266                           
  9267                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9268   002B98  502C               	movf	vfpfcnvrt@done^0,w,c
  9269   002B9A  B4D8               	btfsc	status,2,c
  9270   002B9C  EFD2  F015         	goto	u4791
  9271   002BA0  EFD4  F015         	goto	u4790
  9272   002BA4                     u4791:
  9273   002BA4  EFB1  F015         	goto	l5302
  9274   002BA8                     u4790:
  9275   002BA8                     
  9276                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9277   002BA8  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9278   002BAC  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9279   002BB0  ECB2  F01A         	call	_read_prec_or_width	;wreg free
  9280   002BB4  C008  F0C4         	movff	?_read_prec_or_width,_width
  9281   002BB8  C009  F0C5         	movff	?_read_prec_or_width+1,_width+1
  9282   002BBC                     
  9283                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9284   002BBC  0100               	movlb	0	; () banked
  9285   002BBE  BFC5               	btfsc	(_width+1)& (0+255),7,b
  9286   002BC0  EFE6  F015         	goto	u4800
  9287   002BC4  EFE4  F015         	goto	u4801
  9288   002BC8                     u4801:
  9289   002BC8  EFEB  F015         	goto	l5312
  9290   002BCC                     u4800:
  9291   002BCC                     
  9292                           ; BSR set to: 0
  9293                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9294   002BCC  81C8               	bsf	_flags& (0+255),0,b
  9295                           
  9296                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9297   002BCE  6DC4               	negf	_width& (0+255),b
  9298   002BD0  1FC5               	comf	(_width+1)& (0+255),f,b
  9299   002BD2  B0D8               	btfsc	status,0,c
  9300   002BD4  2BC5               	incf	(_width+1)& (0+255),f,b
  9301   002BD6                     l5312:
  9302                           
  9303                           ; BSR set to: 0
  9304                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9305   002BD6  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9306   002BD8  6ED9               	movwf	fsr2l,c
  9307   002BDA  6ADA               	clrf	fsr2h,c
  9308   002BDC  50DF               	movf	indf2,w,c
  9309   002BDE  6E2D               	movwf	vfpfcnvrt@cp^0,c
  9310   002BE0                     
  9311                           ; BSR set to: 0
  9312                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9313   002BE0  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9314   002BE4                     	if	1	;There is more than 1 active tblptr byte
  9315   002BE4  0E0E               	movlw	high __smallconst
  9316   002BE6  6EF7               	movwf	tblptrh,c
  9317   002BE8                     	endif
  9318   002BE8                     	if	0	;tblptru may be non-zero
  9319   002BE8                     	endif
  9320   002BE8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9321   002BE8  0E00               	movlw	low (__smallconst shr (0+16))
  9322   002BEA  6EF8               	movwf	tblptru,c
  9323   002BEC                     	endif
  9324   002BEC  0008               	tblrd		*
  9325   002BEE  50F5               	movf	tablat,w,c
  9326   002BF0  0A64               	xorlw	100
  9327   002BF2  B4D8               	btfsc	status,2,c
  9328   002BF4  EFFE  F015         	goto	u4811
  9329   002BF8  EF00  F016         	goto	u4810
  9330   002BFC                     u4811:
  9331   002BFC  EF10  F016         	goto	l5318
  9332   002C00                     u4810:
  9333   002C00                     
  9334                           ; BSR set to: 0
  9335   002C00  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9336   002C04                     	if	1	;There is more than 1 active tblptr byte
  9337   002C04  0E0E               	movlw	high __smallconst
  9338   002C06  6EF7               	movwf	tblptrh,c
  9339   002C08                     	endif
  9340   002C08                     	if	0	;tblptru may be non-zero
  9341   002C08                     	endif
  9342   002C08                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9343   002C08  0E00               	movlw	low (__smallconst shr (0+16))
  9344   002C0A  6EF8               	movwf	tblptru,c
  9345   002C0C                     	endif
  9346   002C0C  0008               	tblrd		*
  9347   002C0E  50F5               	movf	tablat,w,c
  9348   002C10  0A69               	xorlw	105
  9349   002C12  A4D8               	btfss	status,2,c
  9350   002C14  EF0E  F016         	goto	u4821
  9351   002C18  EF10  F016         	goto	u4820
  9352   002C1C                     u4821:
  9353   002C1C  EF2B  F016         	goto	l5326
  9354   002C20                     u4820:
  9355   002C20                     l5318:
  9356                           
  9357                           ; BSR set to: 0
  9358                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9359   002C20  5025               	movf	vfpfcnvrt@ap^0,w,c
  9360   002C22  6ED9               	movwf	fsr2l,c
  9361   002C24  6ADA               	clrf	fsr2h,c
  9362   002C26  0E02               	movlw	2
  9363   002C28  26DF               	addwf	indf2,f,c
  9364   002C2A  5CDF               	subwf	indf2,w,c
  9365   002C2C  6ED9               	movwf	fsr2l,c
  9366   002C2E  6ADA               	clrf	fsr2h,c
  9367   002C30  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  9368   002C34  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  9369   002C38                     
  9370                           ; BSR set to: 0
  9371                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9372   002C38  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9373   002C3A  6ED9               	movwf	fsr2l,c
  9374   002C3C  6ADA               	clrf	fsr2h,c
  9375   002C3E  282D               	incf	vfpfcnvrt@cp^0,w,c
  9376   002C40  6EDF               	movwf	indf2,c
  9377   002C42                     
  9378                           ; BSR set to: 0
  9379                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9380   002C42  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
  9381   002C46  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
  9382   002C4A  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9383   002C4E  EC45  F016         	call	_dtoa	;wreg free
  9384   002C52  EF44  F016         	goto	l1410
  9385   002C56                     l5326:
  9386                           
  9387                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9388   002C56  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9389   002C58  6ED9               	movwf	fsr2l,c
  9390   002C5A  6ADA               	clrf	fsr2h,c
  9391   002C5C  2ADF               	incf	indf2,f,c
  9392   002C5E  EF44  F016         	goto	l1410
  9393   002C62                     l5330:
  9394                           
  9395                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9396   002C62  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9397   002C64  6ED9               	movwf	fsr2l,c
  9398   002C66  6ADA               	clrf	fsr2h,c
  9399   002C68  CFDF FFF6          	movff	indf2,tblptrl
  9400   002C6C                     	if	1	;There is more than 1 active tblptr byte
  9401   002C6C  0E0E               	movlw	high __smallconst
  9402   002C6E  6EF7               	movwf	tblptrh,c
  9403   002C70                     	endif
  9404   002C70                     	if	0	;tblptru may be non-zero
  9405   002C70                     	endif
  9406   002C70                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9407   002C70  0E00               	movlw	low (__smallconst shr (0+16))
  9408   002C72  6EF8               	movwf	tblptru,c
  9409   002C74                     	endif
  9410   002C74  0008               	tblrd		*
  9411   002C76  50F5               	movf	tablat,w,c
  9412   002C78  6E02               	movwf	fputc@c^0,c
  9413   002C7A  6A03               	clrf	(fputc@c+1)^0,c
  9414   002C7C  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
  9415   002C80  EC5E  F01B         	call	_fputc	;wreg free
  9416   002C84  EF2B  F016         	goto	l5326
  9417   002C88                     l1410:
  9418   002C88  0012               	return		;funcret
  9419   002C8A                     __end_of_vfpfcnvrt:
  9420                           	callstack 0
  9421                           
  9422 ;; *************** function _read_prec_or_width *****************
  9423 ;; Defined at:
  9424 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
  9427 ;;		 -> vfprintf@cfmt(1), 
  9428 ;;  ap              1    8[COMRAM] PTR PTR void [1]
  9429 ;;		 -> sprintf@ap(1), 
  9430 ;; Auto vars:     Size  Location     Type
  9431 ;;  c               1    9[COMRAM] unsigned char 
  9432 ;;  n               2   10[COMRAM] int 
  9433 ;; Return value:  Size  Location     Type
  9434 ;;                  2    7[COMRAM] int 
  9435 ;; Registers used:
  9436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9443 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9445 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9446 ;;Total ram usage:        5 bytes
  9447 ;; Hardware stack levels used: 1
  9448 ;; Hardware stack levels required when called: 2
  9449 ;; This function calls:
  9450 ;;		___wmul
  9451 ;; This function is called by:
  9452 ;;		_vfpfcnvrt
  9453 ;; This function uses a non-reentrant model
  9454 ;;
  9455                           
  9456                           	psect	text50
  9457   003564                     __ptext50:
  9458                           	callstack 0
  9459   003564                     _read_prec_or_width:
  9460                           	callstack 24
  9461   003564                     
  9462                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  9463   003564  0E00               	movlw	0
  9464   003566  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9465   003568  0E00               	movlw	0
  9466   00356A  6E0B               	movwf	read_prec_or_width@n^0,c
  9467   00356C                     
  9468                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  9469   00356C  5008               	movf	read_prec_or_width@fmt^0,w,c
  9470   00356E  6ED9               	movwf	fsr2l,c
  9471   003570  6ADA               	clrf	fsr2h,c
  9472   003572  CFDF FFF6          	movff	indf2,tblptrl
  9473   003576                     	if	1	;There is more than 1 active tblptr byte
  9474   003576  0E0E               	movlw	high __smallconst
  9475   003578  6EF7               	movwf	tblptrh,c
  9476   00357A                     	endif
  9477   00357A                     	if	0	;tblptru may be non-zero
  9478   00357A                     	endif
  9479   00357A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9480   00357A  0E00               	movlw	low (__smallconst shr (0+16))
  9481   00357C  6EF8               	movwf	tblptru,c
  9482   00357E                     	endif
  9483   00357E  0008               	tblrd		*
  9484   003580  50F5               	movf	tablat,w,c
  9485   003582  0A2A               	xorlw	42
  9486   003584  A4D8               	btfss	status,2,c
  9487   003586  EFC7  F01A         	goto	u4741
  9488   00358A  EFC9  F01A         	goto	u4740
  9489   00358E                     u4741:
  9490   00358E  EFEF  F01A         	goto	l5266
  9491   003592                     u4740:
  9492   003592                     
  9493                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  9494   003592  5008               	movf	read_prec_or_width@fmt^0,w,c
  9495   003594  6ED9               	movwf	fsr2l,c
  9496   003596  6ADA               	clrf	fsr2h,c
  9497   003598  2ADF               	incf	indf2,f,c
  9498   00359A                     
  9499                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  9500   00359A  5009               	movf	read_prec_or_width@ap^0,w,c
  9501   00359C  6ED9               	movwf	fsr2l,c
  9502   00359E  6ADA               	clrf	fsr2h,c
  9503   0035A0  0E02               	movlw	2
  9504   0035A2  26DF               	addwf	indf2,f,c
  9505   0035A4  5CDF               	subwf	indf2,w,c
  9506   0035A6  6ED9               	movwf	fsr2l,c
  9507   0035A8  6ADA               	clrf	fsr2h,c
  9508   0035AA  CFDE F00B          	movff	postinc2,read_prec_or_width@n
  9509   0035AE  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
  9510                           
  9511                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  9512   0035B2  EF04  F01B         	goto	l1391
  9513   0035B6                     l5262:
  9514                           
  9515                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  9516   0035B6  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
  9517   0035BA  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  9518   0035BE  0E00               	movlw	0
  9519   0035C0  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  9520   0035C2  0E0A               	movlw	10
  9521   0035C4  6E04               	movwf	___wmul@multiplicand^0,c
  9522   0035C6  ECCC  F021         	call	___wmul	;wreg free
  9523   0035CA  500A               	movf	read_prec_or_width@c^0,w,c
  9524   0035CC  2402               	addwf	?___wmul^0,w,c
  9525   0035CE  6E0B               	movwf	read_prec_or_width@n^0,c
  9526   0035D0  0E00               	movlw	0
  9527   0035D2  2003               	addwfc	(?___wmul+1)^0,w,c
  9528   0035D4  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9529   0035D6                     
  9530                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  9531   0035D6  5008               	movf	read_prec_or_width@fmt^0,w,c
  9532   0035D8  6ED9               	movwf	fsr2l,c
  9533   0035DA  6ADA               	clrf	fsr2h,c
  9534   0035DC  2ADF               	incf	indf2,f,c
  9535   0035DE                     l5266:
  9536                           
  9537                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  9538   0035DE  5008               	movf	read_prec_or_width@fmt^0,w,c
  9539   0035E0  6ED9               	movwf	fsr2l,c
  9540   0035E2  6ADA               	clrf	fsr2h,c
  9541   0035E4  CFDF FFF6          	movff	indf2,tblptrl
  9542   0035E8                     	if	1	;There is more than 1 active tblptr byte
  9543   0035E8  0E0E               	movlw	high __smallconst
  9544   0035EA  6EF7               	movwf	tblptrh,c
  9545   0035EC                     	endif
  9546   0035EC                     	if	0	;tblptru may be non-zero
  9547   0035EC                     	endif
  9548   0035EC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9549   0035EC  0E00               	movlw	low (__smallconst shr (0+16))
  9550   0035EE  6EF8               	movwf	tblptru,c
  9551   0035F0                     	endif
  9552   0035F0  0008               	tblrd		*
  9553   0035F2  50F5               	movf	tablat,w,c
  9554   0035F4  0FD0               	addlw	208
  9555   0035F6  6E0A               	movwf	read_prec_or_width@c^0,c
  9556   0035F8  0E09               	movlw	9
  9557   0035FA  640A               	cpfsgt	read_prec_or_width@c^0,c
  9558   0035FC  EF02  F01B         	goto	u4751
  9559   003600  EF04  F01B         	goto	u4750
  9560   003604                     u4751:
  9561   003604  EFDB  F01A         	goto	l5262
  9562   003608                     u4750:
  9563   003608                     l1391:
  9564                           
  9565                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  9566   003608  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
  9567   00360C  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  9568   003610  0012               	return		;funcret
  9569   003612                     __end_of_read_prec_or_width:
  9570                           	callstack 0
  9571                           
  9572 ;; *************** function ___wmul *****************
  9573 ;; Defined at:
  9574 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;  multiplier      2    1[COMRAM] unsigned int 
  9577 ;;  multiplicand    2    3[COMRAM] unsigned int 
  9578 ;; Auto vars:     Size  Location     Type
  9579 ;;  product         2    5[COMRAM] unsigned int 
  9580 ;; Return value:  Size  Location     Type
  9581 ;;                  2    1[COMRAM] unsigned int 
  9582 ;; Registers used:
  9583 ;;		wreg, status,2, status,0, prodl, prodh
  9584 ;; Tracked objects:
  9585 ;;		On entry : 0/0
  9586 ;;		On exit  : 0/0
  9587 ;;		Unchanged: 0/0
  9588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9589 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9592 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9593 ;;Total ram usage:        6 bytes
  9594 ;; Hardware stack levels used: 1
  9595 ;; Hardware stack levels required when called: 1
  9596 ;; This function calls:
  9597 ;;		Nothing
  9598 ;; This function is called by:
  9599 ;;		_setMotorPWM
  9600 ;;		_logAction
  9601 ;;		_read_prec_or_width
  9602 ;;		_ADC2String
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           	psect	text51
  9607   004398                     __ptext51:
  9608                           	callstack 0
  9609   004398                     ___wmul:
  9610                           	callstack 27
  9611   004398  5002               	movf	___wmul@multiplier^0,w,c
  9612   00439A  0204               	mulwf	___wmul@multiplicand^0,c
  9613   00439C  CFF3 F006          	movff	prodl,___wmul@product
  9614   0043A0  CFF4 F007          	movff	prodh,___wmul@product+1
  9615   0043A4  5002               	movf	___wmul@multiplier^0,w,c
  9616   0043A6  0205               	mulwf	(___wmul@multiplicand+1)^0,c
  9617   0043A8  50F3               	movf	243,w,c
  9618   0043AA  2607               	addwf	(___wmul@product+1)^0,f,c
  9619   0043AC  5003               	movf	(___wmul@multiplier+1)^0,w,c
  9620   0043AE  0204               	mulwf	___wmul@multiplicand^0,c
  9621   0043B0  50F3               	movf	243,w,c
  9622   0043B2  2607               	addwf	(___wmul@product+1)^0,f,c
  9623   0043B4  C006  F002         	movff	___wmul@product,?___wmul
  9624   0043B8  C007  F003         	movff	___wmul@product+1,?___wmul+1
  9625   0043BC  0012               	return		;funcret
  9626   0043BE                     __end_of___wmul:
  9627                           	callstack 0
  9628                           
  9629 ;; *************** function _dtoa *****************
  9630 ;; Defined at:
  9631 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9632 ;; Parameters:    Size  Location     Type
  9633 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
  9634 ;;		 -> sprintf@f(12), 
  9635 ;;  d               2   24[COMRAM] int 
  9636 ;; Auto vars:     Size  Location     Type
  9637 ;;  i               2   32[COMRAM] int 
  9638 ;;  w               2   29[COMRAM] int 
  9639 ;;  s               1   31[COMRAM] unsigned char 
  9640 ;;  p               1   28[COMRAM] _Bool 
  9641 ;; Return value:  Size  Location     Type
  9642 ;;                  1    wreg      void 
  9643 ;; Registers used:
  9644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9645 ;; Tracked objects:
  9646 ;;		On entry : 0/0
  9647 ;;		On exit  : 0/0
  9648 ;;		Unchanged: 0/0
  9649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9650 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9651 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9653 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9654 ;;Total ram usage:       11 bytes
  9655 ;; Hardware stack levels used: 1
  9656 ;; Hardware stack levels required when called: 5
  9657 ;; This function calls:
  9658 ;;		___awdiv
  9659 ;;		___awmod
  9660 ;;		_abs
  9661 ;;		_pad
  9662 ;; This function is called by:
  9663 ;;		_vfpfcnvrt
  9664 ;; This function uses a non-reentrant model
  9665 ;;
  9666                           
  9667                           	psect	text52
  9668   002C8A                     __ptext52:
  9669                           	callstack 0
  9670   002C8A                     _dtoa:
  9671                           	callstack 21
  9672   002C8A                     
  9673                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  9674   002C8A  0E01               	movlw	1
  9675   002C8C  6E1D               	movwf	dtoa@p^0,c
  9676   002C8E                     
  9677                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  9678   002C8E  BE1A               	btfsc	(dtoa@d+1)^0,7,c
  9679   002C90  EF4C  F016         	goto	u4641
  9680   002C94  EF4F  F016         	goto	u4640
  9681   002C98                     u4641:
  9682   002C98  0E01               	movlw	1
  9683   002C9A  EF50  F016         	goto	u4650
  9684   002C9E                     u4640:
  9685   002C9E  0E00               	movlw	0
  9686   002CA0                     u4650:
  9687   002CA0  6E20               	movwf	dtoa@s^0,c
  9688   002CA2                     
  9689                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  9690   002CA2  C0C4  F01E         	movff	_width,dtoa@w
  9691   002CA6  C0C5  F01F         	movff	_width+1,dtoa@w+1
  9692   002CAA                     
  9693                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  9694   002CAA  5020               	movf	dtoa@s^0,w,c
  9695   002CAC  B4D8               	btfsc	status,2,c
  9696   002CAE  EF5B  F016         	goto	u4661
  9697   002CB2  EF5D  F016         	goto	u4660
  9698   002CB6                     u4661:
  9699   002CB6  EF74  F016         	goto	l1374
  9700   002CBA                     u4660:
  9701   002CBA                     
  9702                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  9703   002CBA  061E               	decf	dtoa@w^0,f,c
  9704   002CBC  A0D8               	btfss	status,0,c
  9705   002CBE  061F               	decf	(dtoa@w+1)^0,f,c
  9706   002CC0                     
  9707                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  9708   002CC0  5020               	movf	dtoa@s^0,w,c
  9709   002CC2  A4D8               	btfss	status,2,c
  9710   002CC4  EF66  F016         	goto	u4671
  9711   002CC8  EF68  F016         	goto	u4670
  9712   002CCC                     u4671:
  9713   002CCC  EF6E  F016         	goto	l5218
  9714   002CD0                     u4670:
  9715   002CD0  0E00               	movlw	0
  9716   002CD2  6E1C               	movwf	(_dtoa$3045+1)^0,c
  9717   002CD4  0E2B               	movlw	43
  9718   002CD6  6E1B               	movwf	_dtoa$3045^0,c
  9719   002CD8  EF72  F016         	goto	l5220
  9720   002CDC                     l5218:
  9721   002CDC  0E00               	movlw	0
  9722   002CDE  6E1C               	movwf	(_dtoa$3045+1)^0,c
  9723   002CE0  0E2D               	movlw	45
  9724   002CE2  6E1B               	movwf	_dtoa$3045^0,c
  9725   002CE4                     l5220:
  9726   002CE4  C01B  F020         	movff	_dtoa$3045,dtoa@s
  9727   002CE8                     l1374:
  9728                           
  9729                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  9730   002CE8  0E00               	movlw	0
  9731   002CEA  6E22               	movwf	(dtoa@i+1)^0,c
  9732   002CEC  0E1F               	movlw	31
  9733   002CEE  6E21               	movwf	dtoa@i^0,c
  9734   002CF0                     
  9735                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  9736   002CF0  0E00               	movlw	0
  9737   002CF2  0101               	movlb	1	; () banked
  9738   002CF4  6F83               	movwf	(_dbuf+31)& (0+255),b
  9739                           
  9740                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9741   002CF6  EFAC  F016         	goto	l5234
  9742   002CFA                     l5224:
  9743                           
  9744                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  9745   002CFA  0621               	decf	dtoa@i^0,f,c
  9746   002CFC  A0D8               	btfss	status,0,c
  9747   002CFE  0622               	decf	(dtoa@i+1)^0,f,c
  9748   002D00                     
  9749                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  9750   002D00  0E64               	movlw	low _dbuf
  9751   002D02  2421               	addwf	dtoa@i^0,w,c
  9752   002D04  6ED9               	movwf	fsr2l,c
  9753   002D06  0E01               	movlw	high _dbuf
  9754   002D08  2022               	addwfc	(dtoa@i+1)^0,w,c
  9755   002D0A  6EDA               	movwf	fsr2h,c
  9756   002D0C  C019  F002         	movff	dtoa@d,___awmod@dividend
  9757   002D10  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
  9758   002D14  0E00               	movlw	0
  9759   002D16  6E05               	movwf	(___awmod@divisor+1)^0,c
  9760   002D18  0E0A               	movlw	10
  9761   002D1A  6E04               	movwf	___awmod@divisor^0,c
  9762   002D1C  EC5A  F01A         	call	___awmod	;wreg free
  9763   002D20  C002  F008         	movff	?___awmod,abs@a
  9764   002D24  C003  F009         	movff	?___awmod+1,abs@a+1
  9765   002D28  ECA9  F020         	call	_abs	;wreg free
  9766   002D2C  5008               	movf	?_abs^0,w,c
  9767   002D2E  0F30               	addlw	48
  9768   002D30  6EDF               	movwf	indf2,c
  9769   002D32                     
  9770                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  9771   002D32  0E00               	movlw	0
  9772   002D34  6E1D               	movwf	dtoa@p^0,c
  9773   002D36                     
  9774                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  9775   002D36  061E               	decf	dtoa@w^0,f,c
  9776   002D38  A0D8               	btfss	status,0,c
  9777   002D3A  061F               	decf	(dtoa@w+1)^0,f,c
  9778   002D3C                     
  9779                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  9780   002D3C  C019  F002         	movff	dtoa@d,___awdiv@dividend
  9781   002D40  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
  9782   002D44  0E00               	movlw	0
  9783   002D46  6E05               	movwf	(___awdiv@divisor+1)^0,c
  9784   002D48  0E0A               	movlw	10
  9785   002D4A  6E04               	movwf	___awdiv@divisor^0,c
  9786   002D4C  EC98  F019         	call	___awdiv	;wreg free
  9787   002D50  C002  F019         	movff	?___awdiv,dtoa@d
  9788   002D54  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
  9789   002D58                     l5234:
  9790                           
  9791                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  9792   002D58  BE22               	btfsc	(dtoa@i+1)^0,7,c
  9793   002D5A  EFB7  F016         	goto	u4681
  9794   002D5E  5022               	movf	(dtoa@i+1)^0,w,c
  9795   002D60  E108               	bnz	u4680
  9796   002D62  0421               	decf	dtoa@i^0,w,c
  9797   002D64  A0D8               	btfss	status,0,c
  9798   002D66  EFB7  F016         	goto	u4681
  9799   002D6A  EFB9  F016         	goto	u4680
  9800   002D6E                     u4681:
  9801   002D6E  EFDF  F016         	goto	l5244
  9802   002D72                     u4680:
  9803   002D72  5019               	movf	dtoa@d^0,w,c
  9804   002D74  101A               	iorwf	(dtoa@d+1)^0,w,c
  9805   002D76  A4D8               	btfss	status,2,c
  9806   002D78  EFC0  F016         	goto	u4691
  9807   002D7C  EFC2  F016         	goto	u4690
  9808   002D80                     u4691:
  9809   002D80  EF7D  F016         	goto	l5224
  9810   002D84                     u4690:
  9811   002D84  501D               	movf	dtoa@p^0,w,c
  9812   002D86  A4D8               	btfss	status,2,c
  9813   002D88  EFC8  F016         	goto	u4701
  9814   002D8C  EFCA  F016         	goto	u4700
  9815   002D90                     u4701:
  9816   002D90  EF7D  F016         	goto	l5224
  9817   002D94                     u4700:
  9818   002D94  BE1F               	btfsc	(dtoa@w+1)^0,7,c
  9819   002D96  EFD5  F016         	goto	u4711
  9820   002D9A  501F               	movf	(dtoa@w+1)^0,w,c
  9821   002D9C  E108               	bnz	u4710
  9822   002D9E  041E               	decf	dtoa@w^0,w,c
  9823   002DA0  A0D8               	btfss	status,0,c
  9824   002DA2  EFD5  F016         	goto	u4711
  9825   002DA6  EFD7  F016         	goto	u4710
  9826   002DAA                     u4711:
  9827   002DAA  EFDF  F016         	goto	l5244
  9828   002DAE                     u4710:
  9829   002DAE  0100               	movlb	0	; () banked
  9830   002DB0  B3C8               	btfsc	_flags& (0+255),1,b
  9831   002DB2  EFDD  F016         	goto	u4721
  9832   002DB6  EFDF  F016         	goto	u4720
  9833   002DBA                     u4721:
  9834   002DBA  EF7D  F016         	goto	l5224
  9835   002DBE                     u4720:
  9836   002DBE                     l5244:
  9837                           
  9838                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  9839   002DBE  5020               	movf	dtoa@s^0,w,c
  9840   002DC0  B4D8               	btfsc	status,2,c
  9841   002DC2  EFE5  F016         	goto	u4731
  9842   002DC6  EFE7  F016         	goto	u4730
  9843   002DCA                     u4731:
  9844   002DCA  EFF2  F016         	goto	l5250
  9845   002DCE                     u4730:
  9846   002DCE                     
  9847                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  9848   002DCE  0621               	decf	dtoa@i^0,f,c
  9849   002DD0  A0D8               	btfss	status,0,c
  9850   002DD2  0622               	decf	(dtoa@i+1)^0,f,c
  9851   002DD4                     
  9852                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  9853   002DD4  0E64               	movlw	low _dbuf
  9854   002DD6  2421               	addwf	dtoa@i^0,w,c
  9855   002DD8  6ED9               	movwf	fsr2l,c
  9856   002DDA  0E01               	movlw	high _dbuf
  9857   002DDC  2022               	addwfc	(dtoa@i+1)^0,w,c
  9858   002DDE  6EDA               	movwf	fsr2h,c
  9859   002DE0  C020  FFDF         	movff	dtoa@s,indf2
  9860   002DE4                     l5250:
  9861                           
  9862                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  9863   002DE4  C018  F010         	movff	dtoa@fp,pad@fp
  9864   002DE8  0E64               	movlw	low _dbuf
  9865   002DEA  2421               	addwf	dtoa@i^0,w,c
  9866   002DEC  6E11               	movwf	pad@buf^0,c
  9867   002DEE  0E01               	movlw	high _dbuf
  9868   002DF0  2022               	addwfc	(dtoa@i+1)^0,w,c
  9869   002DF2  6E12               	movwf	(pad@buf+1)^0,c
  9870   002DF4  C01E  F013         	movff	dtoa@w,pad@p
  9871   002DF8  C01F  F014         	movff	dtoa@w+1,pad@p+1
  9872   002DFC  ECB3  F01B         	call	_pad	;wreg free
  9873   002E00  0012               	return		;funcret
  9874   002E02                     __end_of_dtoa:
  9875                           	callstack 0
  9876                           
  9877 ;; *************** function _pad *****************
  9878 ;; Defined at:
  9879 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9880 ;; Parameters:    Size  Location     Type
  9881 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
  9882 ;;		 -> sprintf@f(12), 
  9883 ;;  buf             2   16[COMRAM] PTR unsigned char 
  9884 ;;		 -> dbuf(32), 
  9885 ;;  p               2   18[COMRAM] int 
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;  i               2   21[COMRAM] int 
  9888 ;; Return value:  Size  Location     Type
  9889 ;;                  1    wreg      void 
  9890 ;; Registers used:
  9891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9897 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9898 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9899 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9900 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9901 ;;Total ram usage:        8 bytes
  9902 ;; Hardware stack levels used: 1
  9903 ;; Hardware stack levels required when called: 4
  9904 ;; This function calls:
  9905 ;;		_fputc
  9906 ;;		_fputs
  9907 ;; This function is called by:
  9908 ;;		_dtoa
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           	psect	text53
  9913   003766                     __ptext53:
  9914                           	callstack 0
  9915   003766                     _pad:
  9916                           	callstack 21
  9917   003766                     
  9918                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  9919   003766  0100               	movlb	0	; () banked
  9920   003768  A1C8               	btfss	_flags& (0+255),0,b
  9921   00376A  EFB9  F01B         	goto	u4591
  9922   00376E  EFBB  F01B         	goto	u4590
  9923   003772                     u4591:
  9924   003772  EFC3  F01B         	goto	l5188
  9925   003776                     u4590:
  9926   003776                     
  9927                           ; BSR set to: 0
  9928                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  9929   003776  C011  F00A         	movff	pad@buf,fputs@s
  9930   00377A  C012  F00B         	movff	pad@buf+1,fputs@s+1
  9931   00377E  C010  F00C         	movff	pad@fp,fputs@fp
  9932   003782  EC39  F020         	call	_fputs	;wreg free
  9933   003786                     l5188:
  9934                           
  9935                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  9936   003786  BE14               	btfsc	(pad@p+1)^0,7,c
  9937   003788  EFCA  F01B         	goto	u4600
  9938   00378C  EFC8  F01B         	goto	u4601
  9939   003790                     u4601:
  9940   003790  EFCE  F01B         	goto	l1366
  9941   003794                     u4600:
  9942   003794                     
  9943                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  9944   003794  0E00               	movlw	0
  9945   003796  6E14               	movwf	(pad@p+1)^0,c
  9946   003798  0E00               	movlw	0
  9947   00379A  6E13               	movwf	pad@p^0,c
  9948   00379C                     l1366:
  9949                           
  9950                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  9951   00379C  0E00               	movlw	0
  9952   00379E  6E17               	movwf	(pad@i+1)^0,c
  9953   0037A0  0E00               	movlw	0
  9954   0037A2  6E16               	movwf	pad@i^0,c
  9955                           
  9956                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9957   0037A4  EFDE  F01B         	goto	l5196
  9958   0037A8                     l5192:
  9959                           
  9960                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  9961   0037A8  0E00               	movlw	0
  9962   0037AA  6E03               	movwf	(fputc@c+1)^0,c
  9963   0037AC  0E20               	movlw	32
  9964   0037AE  6E02               	movwf	fputc@c^0,c
  9965   0037B0  C010  F004         	movff	pad@fp,fputc@fp
  9966   0037B4  EC5E  F01B         	call	_fputc	;wreg free
  9967   0037B8                     
  9968                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  9969   0037B8  4A16               	infsnz	pad@i^0,f,c
  9970   0037BA  2A17               	incf	(pad@i+1)^0,f,c
  9971   0037BC                     l5196:
  9972                           
  9973                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  9974   0037BC  5013               	movf	pad@p^0,w,c
  9975   0037BE  5C16               	subwf	pad@i^0,w,c
  9976   0037C0  5017               	movf	(pad@i+1)^0,w,c
  9977   0037C2  0A80               	xorlw	128
  9978   0037C4  6E15               	movwf	??_pad^0,c
  9979   0037C6  5014               	movf	(pad@p+1)^0,w,c
  9980   0037C8  0A80               	xorlw	128
  9981   0037CA  5815               	subwfb	??_pad^0,w,c
  9982   0037CC  A0D8               	btfss	status,0,c
  9983   0037CE  EFEB  F01B         	goto	u4611
  9984   0037D2  EFED  F01B         	goto	u4610
  9985   0037D6                     u4611:
  9986   0037D6  EFD4  F01B         	goto	l5192
  9987   0037DA                     u4610:
  9988   0037DA                     
  9989                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  9990   0037DA  0100               	movlb	0	; () banked
  9991   0037DC  B1C8               	btfsc	_flags& (0+255),0,b
  9992   0037DE  EFF3  F01B         	goto	u4621
  9993   0037E2  EFF5  F01B         	goto	u4620
  9994   0037E6                     u4621:
  9995   0037E6  EFFD  F01B         	goto	l1371
  9996   0037EA                     u4620:
  9997   0037EA                     
  9998                           ; BSR set to: 0
  9999                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10000   0037EA  C011  F00A         	movff	pad@buf,fputs@s
 10001   0037EE  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10002   0037F2  C010  F00C         	movff	pad@fp,fputs@fp
 10003   0037F6  EC39  F020         	call	_fputs	;wreg free
 10004   0037FA                     l1371:
 10005   0037FA  0012               	return		;funcret
 10006   0037FC                     __end_of_pad:
 10007                           	callstack 0
 10008                           
 10009 ;; *************** function _fputs *****************
 10010 ;; Defined at:
 10011 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10012 ;; Parameters:    Size  Location     Type
 10013 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10014 ;;		 -> dbuf(32), 
 10015 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10016 ;;		 -> sprintf@f(12), 
 10017 ;; Auto vars:     Size  Location     Type
 10018 ;;  i               2   13[COMRAM] int 
 10019 ;;  c               1   12[COMRAM] unsigned char 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  2    9[COMRAM] int 
 10022 ;; Registers used:
 10023 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10029 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10030 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10032 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10033 ;;Total ram usage:        6 bytes
 10034 ;; Hardware stack levels used: 1
 10035 ;; Hardware stack levels required when called: 3
 10036 ;; This function calls:
 10037 ;;		_fputc
 10038 ;; This function is called by:
 10039 ;;		_pad
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           	psect	text54
 10044   004072                     __ptext54:
 10045                           	callstack 0
 10046   004072                     _fputs:
 10047                           	callstack 21
 10048   004072  0E00               	movlw	0
 10049   004074  6E0F               	movwf	(fputs@i+1)^0,c
 10050   004076  0E00               	movlw	0
 10051   004078  6E0E               	movwf	fputs@i^0,c
 10052   00407A  EF48  F020         	goto	l5096
 10053   00407E                     l5092:
 10054   00407E  C00D  F002         	movff	fputs@c,fputc@c
 10055   004082  6A03               	clrf	(fputc@c+1)^0,c
 10056   004084  C00C  F004         	movff	fputs@fp,fputc@fp
 10057   004088  EC5E  F01B         	call	_fputc	;wreg free
 10058   00408C  4A0E               	infsnz	fputs@i^0,f,c
 10059   00408E  2A0F               	incf	(fputs@i+1)^0,f,c
 10060   004090                     l5096:
 10061   004090  500E               	movf	fputs@i^0,w,c
 10062   004092  240A               	addwf	fputs@s^0,w,c
 10063   004094  6ED9               	movwf	fsr2l,c
 10064   004096  500F               	movf	(fputs@i+1)^0,w,c
 10065   004098  200B               	addwfc	(fputs@s+1)^0,w,c
 10066   00409A  6EDA               	movwf	fsr2h,c
 10067   00409C  50DF               	movf	indf2,w,c
 10068   00409E  6E0D               	movwf	fputs@c^0,c
 10069   0040A0  500D               	movf	fputs@c^0,w,c
 10070   0040A2  A4D8               	btfss	status,2,c
 10071   0040A4  EF56  F020         	goto	u4461
 10072   0040A8  EF58  F020         	goto	u4460
 10073   0040AC                     u4461:
 10074   0040AC  EF3F  F020         	goto	l5092
 10075   0040B0                     u4460:
 10076   0040B0  0012               	return		;funcret
 10077   0040B2                     __end_of_fputs:
 10078                           	callstack 0
 10079                           
 10080 ;; *************** function _fputc *****************
 10081 ;; Defined at:
 10082 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;  c               2    1[COMRAM] int 
 10085 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10086 ;;		 -> sprintf@f(12), 
 10087 ;; Auto vars:     Size  Location     Type
 10088 ;;		None
 10089 ;; Return value:  Size  Location     Type
 10090 ;;                  2    1[COMRAM] int 
 10091 ;; Registers used:
 10092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10093 ;; Tracked objects:
 10094 ;;		On entry : 0/0
 10095 ;;		On exit  : 0/0
 10096 ;;		Unchanged: 0/0
 10097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10098 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10100 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10101 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10102 ;;Total ram usage:        8 bytes
 10103 ;; Hardware stack levels used: 1
 10104 ;; Hardware stack levels required when called: 2
 10105 ;; This function calls:
 10106 ;;		_putch
 10107 ;; This function is called by:
 10108 ;;		_pad
 10109 ;;		_vfpfcnvrt
 10110 ;;		_fputs
 10111 ;; This function uses a non-reentrant model
 10112 ;;
 10113                           
 10114                           	psect	text55
 10115   0036BC                     __ptext55:
 10116                           	callstack 0
 10117   0036BC                     _fputc:
 10118                           	callstack 24
 10119   0036BC  5004               	movf	fputc@fp^0,w,c
 10120   0036BE  B4D8               	btfsc	status,2,c
 10121   0036C0  EF64  F01B         	goto	u4421
 10122   0036C4  EF66  F01B         	goto	u4420
 10123   0036C8                     u4421:
 10124   0036C8  EF6E  F01B         	goto	l5080
 10125   0036CC                     u4420:
 10126   0036CC  5004               	movf	fputc@fp^0,w,c
 10127   0036CE  A4D8               	btfss	status,2,c
 10128   0036D0  EF6C  F01B         	goto	u4431
 10129   0036D4  EF6E  F01B         	goto	u4430
 10130   0036D8                     u4431:
 10131   0036D8  EF73  F01B         	goto	l5082
 10132   0036DC                     u4430:
 10133   0036DC                     l5080:
 10134   0036DC  5002               	movf	fputc@c^0,w,c
 10135   0036DE  EC4C  F022         	call	_putch
 10136   0036E2  EFB2  F01B         	goto	l1435
 10137   0036E6                     l5082:
 10138   0036E6  5004               	movf	fputc@fp^0,w,c
 10139   0036E8  6ED9               	movwf	fsr2l,c
 10140   0036EA  6ADA               	clrf	fsr2h,c
 10141   0036EC  0E0A               	movlw	10
 10142   0036EE  26D9               	addwf	fsr2l,f,c
 10143   0036F0  50DE               	movf	postinc2,w,c
 10144   0036F2  10DE               	iorwf	postinc2,w,c
 10145   0036F4  B4D8               	btfsc	status,2,c
 10146   0036F6  EF7F  F01B         	goto	u4441
 10147   0036FA  EF81  F01B         	goto	u4440
 10148   0036FE                     u4441:
 10149   0036FE  EF9A  F01B         	goto	l5086
 10150   003702                     u4440:
 10151   003702  5004               	movf	fputc@fp^0,w,c
 10152   003704  6ED9               	movwf	fsr2l,c
 10153   003706  6ADA               	clrf	fsr2h,c
 10154   003708  0E0A               	movlw	10
 10155   00370A  26D9               	addwf	fsr2l,f,c
 10156   00370C  5004               	movf	fputc@fp^0,w,c
 10157   00370E  6EE1               	movwf	fsr1l,c
 10158   003710  6AE2               	clrf	fsr1h,c
 10159   003712  0E03               	movlw	3
 10160   003714  26E1               	addwf	fsr1l,f,c
 10161   003716  50DE               	movf	postinc2,w,c
 10162   003718  5CE6               	subwf	postinc1,w,c
 10163   00371A  50E6               	movf	postinc1,w,c
 10164   00371C  0A80               	xorlw	128
 10165   00371E  6E09               	movwf	(??_fputc+4)^0,c
 10166   003720  50DE               	movf	postinc2,w,c
 10167   003722  0A80               	xorlw	128
 10168   003724  5809               	subwfb	(??_fputc+4)^0,w,c
 10169   003726  B0D8               	btfsc	status,0,c
 10170   003728  EF98  F01B         	goto	u4451
 10171   00372C  EF9A  F01B         	goto	u4450
 10172   003730                     u4451:
 10173   003730  EFB2  F01B         	goto	l1435
 10174   003734                     u4450:
 10175   003734                     l5086:
 10176   003734  5004               	movf	fputc@fp^0,w,c
 10177   003736  6ED9               	movwf	fsr2l,c
 10178   003738  6ADA               	clrf	fsr2h,c
 10179   00373A  0E03               	movlw	3
 10180   00373C  26D9               	addwf	fsr2l,f,c
 10181   00373E  50DF               	movf	indf2,w,c
 10182   003740  6E05               	movwf	??_fputc^0,c
 10183   003742  5004               	movf	fputc@fp^0,w,c
 10184   003744  6ED9               	movwf	fsr2l,c
 10185   003746  6ADA               	clrf	fsr2h,c
 10186   003748  50DF               	movf	indf2,w,c
 10187   00374A  2405               	addwf	??_fputc^0,w,c
 10188   00374C  6ED9               	movwf	fsr2l,c
 10189   00374E  6ADA               	clrf	fsr2h,c
 10190   003750  C002  FFDF         	movff	fputc@c,indf2
 10191   003754  5004               	movf	fputc@fp^0,w,c
 10192   003756  6ED9               	movwf	fsr2l,c
 10193   003758  6ADA               	clrf	fsr2h,c
 10194   00375A  0E03               	movlw	3
 10195   00375C  26D9               	addwf	fsr2l,f,c
 10196   00375E  2ADE               	incf	postinc2,f,c
 10197   003760  0E00               	movlw	0
 10198   003762  22DD               	addwfc	postdec2,f,c
 10199   003764                     l1435:
 10200   003764  0012               	return		;funcret
 10201   003766                     __end_of_fputc:
 10202                           	callstack 0
 10203                           
 10204 ;; *************** function _putch *****************
 10205 ;; Defined at:
 10206 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;  c               1    wreg     unsigned char 
 10209 ;; Auto vars:     Size  Location     Type
 10210 ;;  c               1    0[COMRAM] unsigned char 
 10211 ;; Return value:  Size  Location     Type
 10212 ;;                  1    wreg      void 
 10213 ;; Registers used:
 10214 ;;		wreg
 10215 ;; Tracked objects:
 10216 ;;		On entry : 0/0
 10217 ;;		On exit  : 0/0
 10218 ;;		Unchanged: 0/0
 10219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10224 ;;Total ram usage:        0 bytes
 10225 ;; Hardware stack levels used: 1
 10226 ;; Hardware stack levels required when called: 1
 10227 ;; This function calls:
 10228 ;;		Nothing
 10229 ;; This function is called by:
 10230 ;;		_fputc
 10231 ;; This function uses a non-reentrant model
 10232 ;;
 10233                           
 10234                           	psect	text56
 10235   004498                     __ptext56:
 10236                           	callstack 0
 10237   004498                     _putch:
 10238                           	callstack 24
 10239   004498  0012               	return		;funcret
 10240   00449A                     __end_of_putch:
 10241                           	callstack 0
 10242                           
 10243 ;; *************** function _abs *****************
 10244 ;; Defined at:
 10245 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10246 ;; Parameters:    Size  Location     Type
 10247 ;;  a               2    7[COMRAM] int 
 10248 ;; Auto vars:     Size  Location     Type
 10249 ;;		None
 10250 ;; Return value:  Size  Location     Type
 10251 ;;                  2    7[COMRAM] int 
 10252 ;; Registers used:
 10253 ;;		wreg, status,2, status,0
 10254 ;; Tracked objects:
 10255 ;;		On entry : 0/0
 10256 ;;		On exit  : 0/0
 10257 ;;		Unchanged: 0/0
 10258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10259 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10261 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10262 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10263 ;;Total ram usage:        4 bytes
 10264 ;; Hardware stack levels used: 1
 10265 ;; Hardware stack levels required when called: 1
 10266 ;; This function calls:
 10267 ;;		Nothing
 10268 ;; This function is called by:
 10269 ;;		_dtoa
 10270 ;; This function uses a non-reentrant model
 10271 ;;
 10272                           
 10273                           	psect	text57
 10274   004152                     __ptext57:
 10275                           	callstack 0
 10276   004152                     _abs:
 10277                           	callstack 24
 10278   004152  BE09               	btfsc	(abs@a+1)^0,7,c
 10279   004154  EFAE  F020         	goto	u4631
 10280   004158  EFB0  F020         	goto	u4630
 10281   00415C                     u4631:
 10282   00415C  EFB6  F020         	goto	l1420
 10283   004160                     u4630:
 10284   004160  C008  F008         	movff	abs@a,?_abs
 10285   004164  C009  F009         	movff	abs@a+1,?_abs+1
 10286   004168  EFC2  F020         	goto	l1423
 10287   00416C                     l1420:
 10288   00416C  C008  F00A         	movff	abs@a,??_abs
 10289   004170  C009  F00B         	movff	abs@a+1,??_abs+1
 10290   004174  1E0A               	comf	??_abs^0,f,c
 10291   004176  1E0B               	comf	(??_abs+1)^0,f,c
 10292   004178  4A0A               	infsnz	??_abs^0,f,c
 10293   00417A  2A0B               	incf	(??_abs+1)^0,f,c
 10294   00417C  C00A  F008         	movff	??_abs,?_abs
 10295   004180  C00B  F009         	movff	??_abs+1,?_abs+1
 10296   004184                     l1423:
 10297   004184  0012               	return		;funcret
 10298   004186                     __end_of_abs:
 10299                           	callstack 0
 10300                           
 10301 ;; *************** function ___awmod *****************
 10302 ;; Defined at:
 10303 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10304 ;; Parameters:    Size  Location     Type
 10305 ;;  dividend        2    1[COMRAM] int 
 10306 ;;  divisor         2    3[COMRAM] int 
 10307 ;; Auto vars:     Size  Location     Type
 10308 ;;  sign            1    6[COMRAM] unsigned char 
 10309 ;;  counter         1    5[COMRAM] unsigned char 
 10310 ;; Return value:  Size  Location     Type
 10311 ;;                  2    1[COMRAM] int 
 10312 ;; Registers used:
 10313 ;;		wreg, status,2, status,0
 10314 ;; Tracked objects:
 10315 ;;		On entry : 0/0
 10316 ;;		On exit  : 0/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10320 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10322 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10323 ;;Total ram usage:        6 bytes
 10324 ;; Hardware stack levels used: 1
 10325 ;; Hardware stack levels required when called: 1
 10326 ;; This function calls:
 10327 ;;		Nothing
 10328 ;; This function is called by:
 10329 ;;		_dtoa
 10330 ;; This function uses a non-reentrant model
 10331 ;;
 10332                           
 10333                           	psect	text58
 10334   0034B4                     __ptext58:
 10335                           	callstack 0
 10336   0034B4                     ___awmod:
 10337                           	callstack 24
 10338   0034B4  0E00               	movlw	0
 10339   0034B6  6E07               	movwf	___awmod@sign^0,c
 10340   0034B8  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 10341   0034BA  EF63  F01A         	goto	u4530
 10342   0034BE  EF61  F01A         	goto	u4531
 10343   0034C2                     u4531:
 10344   0034C2  EF69  F01A         	goto	l5156
 10345   0034C6                     u4530:
 10346   0034C6  6C02               	negf	___awmod@dividend^0,c
 10347   0034C8  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10348   0034CA  B0D8               	btfsc	status,0,c
 10349   0034CC  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10350   0034CE  0E01               	movlw	1
 10351   0034D0  6E07               	movwf	___awmod@sign^0,c
 10352   0034D2                     l5156:
 10353   0034D2  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 10354   0034D4  EF70  F01A         	goto	u4540
 10355   0034D8  EF6E  F01A         	goto	u4541
 10356   0034DC                     u4541:
 10357   0034DC  EF74  F01A         	goto	l5160
 10358   0034E0                     u4540:
 10359   0034E0  6C04               	negf	___awmod@divisor^0,c
 10360   0034E2  1E05               	comf	(___awmod@divisor+1)^0,f,c
 10361   0034E4  B0D8               	btfsc	status,0,c
 10362   0034E6  2A05               	incf	(___awmod@divisor+1)^0,f,c
 10363   0034E8                     l5160:
 10364   0034E8  5004               	movf	___awmod@divisor^0,w,c
 10365   0034EA  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 10366   0034EC  B4D8               	btfsc	status,2,c
 10367   0034EE  EF7B  F01A         	goto	u4551
 10368   0034F2  EF7D  F01A         	goto	u4550
 10369   0034F6                     u4551:
 10370   0034F6  EFA1  F01A         	goto	l5176
 10371   0034FA                     u4550:
 10372   0034FA  0E01               	movlw	1
 10373   0034FC  6E06               	movwf	___awmod@counter^0,c
 10374   0034FE  EF85  F01A         	goto	l5166
 10375   003502                     l5164:
 10376   003502  90D8               	bcf	status,0,c
 10377   003504  3604               	rlcf	___awmod@divisor^0,f,c
 10378   003506  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 10379   003508  2A06               	incf	___awmod@counter^0,f,c
 10380   00350A                     l5166:
 10381   00350A  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 10382   00350C  EF8A  F01A         	goto	u4561
 10383   003510  EF8C  F01A         	goto	u4560
 10384   003514                     u4561:
 10385   003514  EF81  F01A         	goto	l5164
 10386   003518                     u4560:
 10387   003518                     l5168:
 10388   003518  5004               	movf	___awmod@divisor^0,w,c
 10389   00351A  5C02               	subwf	___awmod@dividend^0,w,c
 10390   00351C  5005               	movf	(___awmod@divisor+1)^0,w,c
 10391   00351E  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 10392   003520  A0D8               	btfss	status,0,c
 10393   003522  EF95  F01A         	goto	u4571
 10394   003526  EF97  F01A         	goto	u4570
 10395   00352A                     u4571:
 10396   00352A  EF9B  F01A         	goto	l5172
 10397   00352E                     u4570:
 10398   00352E  5004               	movf	___awmod@divisor^0,w,c
 10399   003530  5E02               	subwf	___awmod@dividend^0,f,c
 10400   003532  5005               	movf	(___awmod@divisor+1)^0,w,c
 10401   003534  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 10402   003536                     l5172:
 10403   003536  90D8               	bcf	status,0,c
 10404   003538  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 10405   00353A  3204               	rrcf	___awmod@divisor^0,f,c
 10406   00353C  2E06               	decfsz	___awmod@counter^0,f,c
 10407   00353E  EF8C  F01A         	goto	l5168
 10408   003542                     l5176:
 10409   003542  5007               	movf	___awmod@sign^0,w,c
 10410   003544  B4D8               	btfsc	status,2,c
 10411   003546  EFA7  F01A         	goto	u4581
 10412   00354A  EFA9  F01A         	goto	u4580
 10413   00354E                     u4581:
 10414   00354E  EFAD  F01A         	goto	l5180
 10415   003552                     u4580:
 10416   003552  6C02               	negf	___awmod@dividend^0,c
 10417   003554  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10418   003556  B0D8               	btfsc	status,0,c
 10419   003558  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10420   00355A                     l5180:
 10421   00355A  C002  F002         	movff	___awmod@dividend,?___awmod
 10422   00355E  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 10423   003562  0012               	return		;funcret
 10424   003564                     __end_of___awmod:
 10425                           	callstack 0
 10426                           
 10427 ;; *************** function ___awdiv *****************
 10428 ;; Defined at:
 10429 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10430 ;; Parameters:    Size  Location     Type
 10431 ;;  dividend        2    1[COMRAM] int 
 10432 ;;  divisor         2    3[COMRAM] int 
 10433 ;; Auto vars:     Size  Location     Type
 10434 ;;  quotient        2    7[COMRAM] int 
 10435 ;;  sign            1    6[COMRAM] unsigned char 
 10436 ;;  counter         1    5[COMRAM] unsigned char 
 10437 ;; Return value:  Size  Location     Type
 10438 ;;                  2    1[COMRAM] int 
 10439 ;; Registers used:
 10440 ;;		wreg, status,2, status,0
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10447 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10449 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10450 ;;Total ram usage:        8 bytes
 10451 ;; Hardware stack levels used: 1
 10452 ;; Hardware stack levels required when called: 1
 10453 ;; This function calls:
 10454 ;;		Nothing
 10455 ;; This function is called by:
 10456 ;;		_dtoa
 10457 ;; This function uses a non-reentrant model
 10458 ;;
 10459                           
 10460                           	psect	text59
 10461   003330                     __ptext59:
 10462                           	callstack 0
 10463   003330                     ___awdiv:
 10464                           	callstack 24
 10465   003330  0E00               	movlw	0
 10466   003332  6E07               	movwf	___awdiv@sign^0,c
 10467   003334  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 10468   003336  EFA1  F019         	goto	u4470
 10469   00333A  EF9F  F019         	goto	u4471
 10470   00333E                     u4471:
 10471   00333E  EFA7  F019         	goto	l5112
 10472   003342                     u4470:
 10473   003342  6C04               	negf	___awdiv@divisor^0,c
 10474   003344  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 10475   003346  B0D8               	btfsc	status,0,c
 10476   003348  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 10477   00334A  0E01               	movlw	1
 10478   00334C  6E07               	movwf	___awdiv@sign^0,c
 10479   00334E                     l5112:
 10480   00334E  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 10481   003350  EFAE  F019         	goto	u4480
 10482   003354  EFAC  F019         	goto	u4481
 10483   003358                     u4481:
 10484   003358  EFB4  F019         	goto	l5118
 10485   00335C                     u4480:
 10486   00335C  6C02               	negf	___awdiv@dividend^0,c
 10487   00335E  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 10488   003360  B0D8               	btfsc	status,0,c
 10489   003362  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 10490   003364  0E01               	movlw	1
 10491   003366  1A07               	xorwf	___awdiv@sign^0,f,c
 10492   003368                     l5118:
 10493   003368  0E00               	movlw	0
 10494   00336A  6E09               	movwf	(___awdiv@quotient+1)^0,c
 10495   00336C  0E00               	movlw	0
 10496   00336E  6E08               	movwf	___awdiv@quotient^0,c
 10497   003370  5004               	movf	___awdiv@divisor^0,w,c
 10498   003372  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 10499   003374  B4D8               	btfsc	status,2,c
 10500   003376  EFBF  F019         	goto	u4491
 10501   00337A  EFC1  F019         	goto	u4490
 10502   00337E                     u4491:
 10503   00337E  EFE9  F019         	goto	l5140
 10504   003382                     u4490:
 10505   003382  0E01               	movlw	1
 10506   003384  6E06               	movwf	___awdiv@counter^0,c
 10507   003386  EFC9  F019         	goto	l5126
 10508   00338A                     l5124:
 10509   00338A  90D8               	bcf	status,0,c
 10510   00338C  3604               	rlcf	___awdiv@divisor^0,f,c
 10511   00338E  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 10512   003390  2A06               	incf	___awdiv@counter^0,f,c
 10513   003392                     l5126:
 10514   003392  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 10515   003394  EFCE  F019         	goto	u4501
 10516   003398  EFD0  F019         	goto	u4500
 10517   00339C                     u4501:
 10518   00339C  EFC5  F019         	goto	l5124
 10519   0033A0                     u4500:
 10520   0033A0                     l5128:
 10521   0033A0  90D8               	bcf	status,0,c
 10522   0033A2  3608               	rlcf	___awdiv@quotient^0,f,c
 10523   0033A4  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 10524   0033A6  5004               	movf	___awdiv@divisor^0,w,c
 10525   0033A8  5C02               	subwf	___awdiv@dividend^0,w,c
 10526   0033AA  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10527   0033AC  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 10528   0033AE  A0D8               	btfss	status,0,c
 10529   0033B0  EFDC  F019         	goto	u4511
 10530   0033B4  EFDE  F019         	goto	u4510
 10531   0033B8                     u4511:
 10532   0033B8  EFE3  F019         	goto	l5136
 10533   0033BC                     u4510:
 10534   0033BC  5004               	movf	___awdiv@divisor^0,w,c
 10535   0033BE  5E02               	subwf	___awdiv@dividend^0,f,c
 10536   0033C0  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10537   0033C2  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 10538   0033C4  8008               	bsf	___awdiv@quotient^0,0,c
 10539   0033C6                     l5136:
 10540   0033C6  90D8               	bcf	status,0,c
 10541   0033C8  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 10542   0033CA  3204               	rrcf	___awdiv@divisor^0,f,c
 10543   0033CC  2E06               	decfsz	___awdiv@counter^0,f,c
 10544   0033CE  EFD0  F019         	goto	l5128
 10545   0033D2                     l5140:
 10546   0033D2  5007               	movf	___awdiv@sign^0,w,c
 10547   0033D4  B4D8               	btfsc	status,2,c
 10548   0033D6  EFEF  F019         	goto	u4521
 10549   0033DA  EFF1  F019         	goto	u4520
 10550   0033DE                     u4521:
 10551   0033DE  EFF5  F019         	goto	l5144
 10552   0033E2                     u4520:
 10553   0033E2  6C08               	negf	___awdiv@quotient^0,c
 10554   0033E4  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 10555   0033E6  B0D8               	btfsc	status,0,c
 10556   0033E8  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 10557   0033EA                     l5144:
 10558   0033EA  C008  F002         	movff	___awdiv@quotient,?___awdiv
 10559   0033EE  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 10560   0033F2  0012               	return		;funcret
 10561   0033F4                     __end_of___awdiv:
 10562                           	callstack 0
 10563                           
 10564 ;; *************** function _sendStringSerial4 *****************
 10565 ;; Defined at:
 10566 ;;		line 41 in file "serial.c"
 10567 ;; Parameters:    Size  Location     Type
 10568 ;;  string          1    2[COMRAM] PTR unsigned char 
 10569 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 10570 ;; Auto vars:     Size  Location     Type
 10571 ;;		None
 10572 ;; Return value:  Size  Location     Type
 10573 ;;                  1    wreg      void 
 10574 ;; Registers used:
 10575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10576 ;; Tracked objects:
 10577 ;;		On entry : 0/0
 10578 ;;		On exit  : 0/0
 10579 ;;		Unchanged: 0/0
 10580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10581 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10584 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10585 ;;Total ram usage:        1 bytes
 10586 ;; Hardware stack levels used: 1
 10587 ;; Hardware stack levels required when called: 2
 10588 ;; This function calls:
 10589 ;;		_sendCharSerial4
 10590 ;; This function is called by:
 10591 ;;		_calibration_routine
 10592 ;;		_send2USART
 10593 ;;		_sendAllReadings
 10594 ;; This function uses a non-reentrant model
 10595 ;;
 10596                           
 10597                           	psect	text60
 10598   0042E4                     __ptext60:
 10599                           	callstack 0
 10600   0042E4                     _sendStringSerial4:
 10601                           	callstack 27
 10602   0042E4                     
 10603                           ;serial.c: 44:     while(*string != 0){
 10604   0042E4  EF7F  F021         	goto	l5496
 10605   0042E8                     l5490:
 10606                           
 10607                           ;serial.c: 46:   sendCharSerial4(*string++);
 10608   0042E8  5003               	movf	sendStringSerial4@string^0,w,c
 10609   0042EA  6ED9               	movwf	fsr2l,c
 10610   0042EC  6ADA               	clrf	fsr2h,c
 10611   0042EE  50DF               	movf	indf2,w,c
 10612   0042F0  EC2B  F022         	call	_sendCharSerial4
 10613   0042F4  2A03               	incf	sendStringSerial4@string^0,f,c
 10614   0042F6                     
 10615                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 10616   0042F6  0E6A               	movlw	106
 10617   0042F8                     u5677:
 10618   0042F8  2EE8               	decfsz	wreg,f,c
 10619   0042FA  D7FE               	bra	u5677
 10620   0042FC  D000               	nop2	
 10621   0042FE                     l5496:
 10622                           
 10623                           ;serial.c: 44:     while(*string != 0){
 10624   0042FE  5003               	movf	sendStringSerial4@string^0,w,c
 10625   004300  6ED9               	movwf	fsr2l,c
 10626   004302  6ADA               	clrf	fsr2h,c
 10627   004304  50DF               	movf	indf2,w,c
 10628   004306  A4D8               	btfss	status,2,c
 10629   004308  EF88  F021         	goto	u4961
 10630   00430C  EF8A  F021         	goto	u4960
 10631   004310                     u4961:
 10632   004310  EF74  F021         	goto	l5490
 10633   004314                     u4960:
 10634   004314  0012               	return		;funcret
 10635   004316                     __end_of_sendStringSerial4:
 10636                           	callstack 0
 10637                           
 10638 ;; *************** function _sendCharSerial4 *****************
 10639 ;; Defined at:
 10640 ;;		line 35 in file "serial.c"
 10641 ;; Parameters:    Size  Location     Type
 10642 ;;  charToSend      1    wreg     unsigned char 
 10643 ;; Auto vars:     Size  Location     Type
 10644 ;;  charToSend      1    1[COMRAM] unsigned char 
 10645 ;; Return value:  Size  Location     Type
 10646 ;;                  1    wreg      void 
 10647 ;; Registers used:
 10648 ;;		wreg
 10649 ;; Tracked objects:
 10650 ;;		On entry : 0/0
 10651 ;;		On exit  : 0/0
 10652 ;;		Unchanged: 0/0
 10653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10658 ;;Total ram usage:        1 bytes
 10659 ;; Hardware stack levels used: 1
 10660 ;; Hardware stack levels required when called: 1
 10661 ;; This function calls:
 10662 ;;		Nothing
 10663 ;; This function is called by:
 10664 ;;		_sendStringSerial4
 10665 ;; This function uses a non-reentrant model
 10666 ;;
 10667                           
 10668                           	psect	text61
 10669   004456                     __ptext61:
 10670                           	callstack 0
 10671   004456                     _sendCharSerial4:
 10672                           	callstack 27
 10673                           
 10674                           ;incstack = 0
 10675                           ;sendCharSerial4@charToSend stored from wreg
 10676   004456  6E02               	movwf	sendCharSerial4@charToSend^0,c
 10677   004458                     l573:
 10678   004458  010E               	movlb	14	; () banked
 10679   00445A  A537               	btfss	55,2,b	;volatile
 10680   00445C  EF32  F022         	goto	u4921
 10681   004460  EF34  F022         	goto	u4920
 10682   004464                     u4921:
 10683   004464  EF2C  F022         	goto	l573
 10684   004468                     u4920:
 10685   004468                     
 10686                           ; BSR set to: 14
 10687                           ;serial.c: 37:     TX4REG = charToSend;
 10688   004468  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 10689   00446C                     
 10690                           ; BSR set to: 14
 10691   00446C  0012               	return		;funcret
 10692   00446E                     __end_of_sendCharSerial4:
 10693                           	callstack 0
 10694                           
 10695 ;; *************** function _color_read_Red *****************
 10696 ;; Defined at:
 10697 ;;		line 32 in file "color.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;		None
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;  tmp             2   10[COMRAM] unsigned int 
 10702 ;; Return value:  Size  Location     Type
 10703 ;;                  2    5[COMRAM] unsigned int 
 10704 ;; Registers used:
 10705 ;;		wreg, status,2, status,0, cstack
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10711 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10713 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10714 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10715 ;;Total ram usage:        7 bytes
 10716 ;; Hardware stack levels used: 1
 10717 ;; Hardware stack levels required when called: 3
 10718 ;; This function calls:
 10719 ;;		_I2C_2_Master_Read
 10720 ;;		_I2C_2_Master_RepStart
 10721 ;;		_I2C_2_Master_Start
 10722 ;;		_I2C_2_Master_Stop
 10723 ;;		_I2C_2_Master_Write
 10724 ;; This function is called by:
 10725 ;;		_reading_hue
 10726 ;;		_calibration_routine
 10727 ;; This function uses a non-reentrant model
 10728 ;;
 10729                           
 10730                           	psect	text62
 10731   003BE4                     __ptext62:
 10732                           	callstack 0
 10733   003BE4                     _color_read_Red:
 10734                           	callstack 26
 10735   003BE4                     
 10736                           ;color.c: 34:  unsigned int tmp;;color.c: 35:  I2C_2_Master_Start();
 10737   003BE4  EC42  F022         	call	_I2C_2_Master_Start	;wreg free
 10738                           
 10739                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
 10740   003BE8  0E52               	movlw	82
 10741   003BEA  EC37  F022         	call	_I2C_2_Master_Write
 10742                           
 10743                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
 10744   003BEE  0EB6               	movlw	182
 10745   003BF0  EC37  F022         	call	_I2C_2_Master_Write
 10746                           
 10747                           ;color.c: 38:  I2C_2_Master_RepStart();
 10748   003BF4  EC47  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10749                           
 10750                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
 10751   003BF8  0E53               	movlw	83
 10752   003BFA  EC37  F022         	call	_I2C_2_Master_Write
 10753                           
 10754                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
 10755   003BFE  0E01               	movlw	1
 10756   003C00  EC18  F020         	call	_I2C_2_Master_Read
 10757   003C04  6E08               	movwf	??_color_read_Red^0,c
 10758   003C06  5008               	movf	??_color_read_Red^0,w,c
 10759   003C08  6E0B               	movwf	color_read_Red@tmp^0,c
 10760   003C0A  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 10761                           
 10762                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10763   003C0C  0E00               	movlw	0
 10764   003C0E  EC18  F020         	call	_I2C_2_Master_Read
 10765   003C12  6E08               	movwf	??_color_read_Red^0,c
 10766   003C14  5008               	movf	??_color_read_Red^0,w,c
 10767   003C16  6E0A               	movwf	(??_color_read_Red+2)^0,c
 10768   003C18  6A09               	clrf	(??_color_read_Red+1)^0,c
 10769   003C1A  500B               	movf	color_read_Red@tmp^0,w,c
 10770   003C1C  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 10771   003C1E  6E0B               	movwf	color_read_Red@tmp^0,c
 10772   003C20  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 10773   003C22  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 10774   003C24  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 10775                           
 10776                           ;color.c: 42:  I2C_2_Master_Stop();
 10777   003C26  EC3D  F022         	call	_I2C_2_Master_Stop	;wreg free
 10778   003C2A                     
 10779                           ;color.c: 43:  return tmp;
 10780   003C2A  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 10781   003C2E  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10782   003C32  0012               	return		;funcret
 10783   003C34                     __end_of_color_read_Red:
 10784                           	callstack 0
 10785                           
 10786 ;; *************** function _color_read_Green *****************
 10787 ;; Defined at:
 10788 ;;		line 46 in file "color.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;		None
 10791 ;; Auto vars:     Size  Location     Type
 10792 ;;  tmp             2   10[COMRAM] unsigned int 
 10793 ;; Return value:  Size  Location     Type
 10794 ;;                  2    5[COMRAM] unsigned int 
 10795 ;; Registers used:
 10796 ;;		wreg, status,2, status,0, cstack
 10797 ;; Tracked objects:
 10798 ;;		On entry : 0/0
 10799 ;;		On exit  : 0/0
 10800 ;;		Unchanged: 0/0
 10801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10802 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10803 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10804 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10805 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10806 ;;Total ram usage:        7 bytes
 10807 ;; Hardware stack levels used: 1
 10808 ;; Hardware stack levels required when called: 3
 10809 ;; This function calls:
 10810 ;;		_I2C_2_Master_Read
 10811 ;;		_I2C_2_Master_RepStart
 10812 ;;		_I2C_2_Master_Start
 10813 ;;		_I2C_2_Master_Stop
 10814 ;;		_I2C_2_Master_Write
 10815 ;; This function is called by:
 10816 ;;		_reading_hue
 10817 ;;		_calibration_routine
 10818 ;; This function uses a non-reentrant model
 10819 ;;
 10820                           
 10821                           	psect	text63
 10822   003C34                     __ptext63:
 10823                           	callstack 0
 10824   003C34                     _color_read_Green:
 10825                           	callstack 26
 10826   003C34                     
 10827                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
 10828   003C34  EC42  F022         	call	_I2C_2_Master_Start	;wreg free
 10829                           
 10830                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
 10831   003C38  0E52               	movlw	82
 10832   003C3A  EC37  F022         	call	_I2C_2_Master_Write
 10833                           
 10834                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
 10835   003C3E  0EB8               	movlw	184
 10836   003C40  EC37  F022         	call	_I2C_2_Master_Write
 10837                           
 10838                           ;color.c: 52:  I2C_2_Master_RepStart();
 10839   003C44  EC47  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10840                           
 10841                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
 10842   003C48  0E53               	movlw	83
 10843   003C4A  EC37  F022         	call	_I2C_2_Master_Write
 10844                           
 10845                           ;color.c: 54:  tmp=I2C_2_Master_Read(1);
 10846   003C4E  0E01               	movlw	1
 10847   003C50  EC18  F020         	call	_I2C_2_Master_Read
 10848   003C54  6E08               	movwf	??_color_read_Green^0,c
 10849   003C56  5008               	movf	??_color_read_Green^0,w,c
 10850   003C58  6E0B               	movwf	color_read_Green@tmp^0,c
 10851   003C5A  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 10852                           
 10853                           ;color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10854   003C5C  0E00               	movlw	0
 10855   003C5E  EC18  F020         	call	_I2C_2_Master_Read
 10856   003C62  6E08               	movwf	??_color_read_Green^0,c
 10857   003C64  5008               	movf	??_color_read_Green^0,w,c
 10858   003C66  6E0A               	movwf	(??_color_read_Green+2)^0,c
 10859   003C68  6A09               	clrf	(??_color_read_Green+1)^0,c
 10860   003C6A  500B               	movf	color_read_Green@tmp^0,w,c
 10861   003C6C  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 10862   003C6E  6E0B               	movwf	color_read_Green@tmp^0,c
 10863   003C70  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 10864   003C72  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 10865   003C74  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 10866                           
 10867                           ;color.c: 56:  I2C_2_Master_Stop();
 10868   003C76  EC3D  F022         	call	_I2C_2_Master_Stop	;wreg free
 10869   003C7A                     
 10870                           ;color.c: 57:  return tmp;
 10871   003C7A  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 10872   003C7E  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10873   003C82  0012               	return		;funcret
 10874   003C84                     __end_of_color_read_Green:
 10875                           	callstack 0
 10876                           
 10877 ;; *************** function _color_read_Clear *****************
 10878 ;; Defined at:
 10879 ;;		line 75 in file "color.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;		None
 10882 ;; Auto vars:     Size  Location     Type
 10883 ;;  tmp             2   10[COMRAM] unsigned int 
 10884 ;; Return value:  Size  Location     Type
 10885 ;;                  2    5[COMRAM] unsigned int 
 10886 ;; Registers used:
 10887 ;;		wreg, status,2, status,0, cstack
 10888 ;; Tracked objects:
 10889 ;;		On entry : 0/0
 10890 ;;		On exit  : 0/0
 10891 ;;		Unchanged: 0/0
 10892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10893 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10894 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10895 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10896 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10897 ;;Total ram usage:        7 bytes
 10898 ;; Hardware stack levels used: 1
 10899 ;; Hardware stack levels required when called: 3
 10900 ;; This function calls:
 10901 ;;		_I2C_2_Master_Read
 10902 ;;		_I2C_2_Master_RepStart
 10903 ;;		_I2C_2_Master_Start
 10904 ;;		_I2C_2_Master_Stop
 10905 ;;		_I2C_2_Master_Write
 10906 ;; This function is called by:
 10907 ;;		_reading_hue
 10908 ;;		_calibration_routine
 10909 ;;		_main
 10910 ;; This function uses a non-reentrant model
 10911 ;;
 10912                           
 10913                           	psect	text64
 10914   003C84                     __ptext64:
 10915                           	callstack 0
 10916   003C84                     _color_read_Clear:
 10917                           	callstack 26
 10918   003C84                     
 10919                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
 10920   003C84  EC42  F022         	call	_I2C_2_Master_Start	;wreg free
 10921                           
 10922                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 10923   003C88  0E52               	movlw	82
 10924   003C8A  EC37  F022         	call	_I2C_2_Master_Write
 10925                           
 10926                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
 10927   003C8E  0EB4               	movlw	180
 10928   003C90  EC37  F022         	call	_I2C_2_Master_Write
 10929                           
 10930                           ;color.c: 81:  I2C_2_Master_RepStart();
 10931   003C94  EC47  F022         	call	_I2C_2_Master_RepStart	;wreg free
 10932                           
 10933                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 10934   003C98  0E53               	movlw	83
 10935   003C9A  EC37  F022         	call	_I2C_2_Master_Write
 10936                           
 10937                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
 10938   003C9E  0E01               	movlw	1
 10939   003CA0  EC18  F020         	call	_I2C_2_Master_Read
 10940   003CA4  6E08               	movwf	??_color_read_Clear^0,c
 10941   003CA6  5008               	movf	??_color_read_Clear^0,w,c
 10942   003CA8  6E0B               	movwf	color_read_Clear@tmp^0,c
 10943   003CAA  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 10944                           
 10945                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10946   003CAC  0E00               	movlw	0
 10947   003CAE  EC18  F020         	call	_I2C_2_Master_Read
 10948   003CB2  6E08               	movwf	??_color_read_Clear^0,c
 10949   003CB4  5008               	movf	??_color_read_Clear^0,w,c
 10950   003CB6  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 10951   003CB8  6A09               	clrf	(??_color_read_Clear+1)^0,c
 10952   003CBA  500B               	movf	color_read_Clear@tmp^0,w,c
 10953   003CBC  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 10954   003CBE  6E0B               	movwf	color_read_Clear@tmp^0,c
 10955   003CC0  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 10956   003CC2  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 10957   003CC4  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 10958                           
 10959                           ;color.c: 85:  I2C_2_Master_Stop();
 10960   003CC6  EC3D  F022         	call	_I2C_2_Master_Stop	;wreg free
 10961   003CCA                     
 10962                           ;color.c: 86:  return tmp;
 10963   003CCA  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 10964   003CCE  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10965   003CD2  0012               	return		;funcret
 10966   003CD4                     __end_of_color_read_Clear:
 10967                           	callstack 0
 10968                           
 10969 ;; *************** function _color_read_Blue *****************
 10970 ;; Defined at:
 10971 ;;		line 60 in file "color.c"
 10972 ;; Parameters:    Size  Location     Type
 10973 ;;		None
 10974 ;; Auto vars:     Size  Location     Type
 10975 ;;  tmp             2   10[COMRAM] unsigned int 
 10976 ;; Return value:  Size  Location     Type
 10977 ;;                  2    5[COMRAM] unsigned int 
 10978 ;; Registers used:
 10979 ;;		wreg, status,2, status,0, cstack
 10980 ;; Tracked objects:
 10981 ;;		On entry : 0/0
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10985 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10986 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10987 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10988 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10989 ;;Total ram usage:        7 bytes
 10990 ;; Hardware stack levels used: 1
 10991 ;; Hardware stack levels required when called: 3
 10992 ;; This function calls:
 10993 ;;		_I2C_2_Master_Read
 10994 ;;		_I2C_2_Master_RepStart
 10995 ;;		_I2C_2_Master_Start
 10996 ;;		_I2C_2_Master_Stop
 10997 ;;		_I2C_2_Master_Write
 10998 ;; This function is called by:
 10999 ;;		_reading_hue
 11000 ;;		_calibration_routine
 11001 ;; This function uses a non-reentrant model
 11002 ;;
 11003                           
 11004                           	psect	text65
 11005   003CD4                     __ptext65:
 11006                           	callstack 0
 11007   003CD4                     _color_read_Blue:
 11008                           	callstack 26
 11009   003CD4                     
 11010                           ;color.c: 62:  unsigned int tmp;;color.c: 63:  I2C_2_Master_Start();
 11011   003CD4  EC42  F022         	call	_I2C_2_Master_Start	;wreg free
 11012                           
 11013                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x00);
 11014   003CD8  0E52               	movlw	82
 11015   003CDA  EC37  F022         	call	_I2C_2_Master_Write
 11016                           
 11017                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x1A);
 11018   003CDE  0EBA               	movlw	186
 11019   003CE0  EC37  F022         	call	_I2C_2_Master_Write
 11020                           
 11021                           ;color.c: 66:  I2C_2_Master_RepStart();
 11022   003CE4  EC47  F022         	call	_I2C_2_Master_RepStart	;wreg free
 11023                           
 11024                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
 11025   003CE8  0E53               	movlw	83
 11026   003CEA  EC37  F022         	call	_I2C_2_Master_Write
 11027                           
 11028                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
 11029   003CEE  0E01               	movlw	1
 11030   003CF0  EC18  F020         	call	_I2C_2_Master_Read
 11031   003CF4  6E08               	movwf	??_color_read_Blue^0,c
 11032   003CF6  5008               	movf	??_color_read_Blue^0,w,c
 11033   003CF8  6E0B               	movwf	color_read_Blue@tmp^0,c
 11034   003CFA  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11035                           
 11036                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11037   003CFC  0E00               	movlw	0
 11038   003CFE  EC18  F020         	call	_I2C_2_Master_Read
 11039   003D02  6E08               	movwf	??_color_read_Blue^0,c
 11040   003D04  5008               	movf	??_color_read_Blue^0,w,c
 11041   003D06  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11042   003D08  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11043   003D0A  500B               	movf	color_read_Blue@tmp^0,w,c
 11044   003D0C  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11045   003D0E  6E0B               	movwf	color_read_Blue@tmp^0,c
 11046   003D10  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11047   003D12  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11048   003D14  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11049                           
 11050                           ;color.c: 70:  I2C_2_Master_Stop();
 11051   003D16  EC3D  F022         	call	_I2C_2_Master_Stop	;wreg free
 11052   003D1A                     
 11053                           ;color.c: 71:  return tmp;
 11054   003D1A  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11055   003D1E  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11056   003D22  0012               	return		;funcret
 11057   003D24                     __end_of_color_read_Blue:
 11058                           	callstack 0
 11059                           
 11060 ;; *************** function _I2C_2_Master_Write *****************
 11061 ;; Defined at:
 11062 ;;		line 45 in file "i2c.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;  data_byte       1    wreg     unsigned char 
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;  data_byte       1    2[COMRAM] unsigned char 
 11067 ;; Return value:  Size  Location     Type
 11068 ;;                  1    wreg      void 
 11069 ;; Registers used:
 11070 ;;		wreg, status,2, status,0, cstack
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/0
 11073 ;;		On exit  : 0/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11077 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11079 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11080 ;;Total ram usage:        1 bytes
 11081 ;; Hardware stack levels used: 1
 11082 ;; Hardware stack levels required when called: 2
 11083 ;; This function calls:
 11084 ;;		_I2C_2_Master_Idle
 11085 ;; This function is called by:
 11086 ;;		_color_writetoaddr
 11087 ;;		_color_read_Red
 11088 ;;		_color_read_Green
 11089 ;;		_color_read_Blue
 11090 ;;		_color_read_Clear
 11091 ;; This function uses a non-reentrant model
 11092 ;;
 11093                           
 11094                           	psect	text66
 11095   00446E                     __ptext66:
 11096                           	callstack 0
 11097   00446E                     _I2C_2_Master_Write:
 11098                           	callstack 26
 11099                           
 11100                           ;incstack = 0
 11101                           ;I2C_2_Master_Write@data_byte stored from wreg
 11102   00446E  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11103   004470                     
 11104                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11105   004470  ECB8  F021         	call	_I2C_2_Master_Idle	;wreg free
 11106   004474                     
 11107                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11108   004474  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11109   004478  0012               	return		;funcret
 11110   00447A                     __end_of_I2C_2_Master_Write:
 11111                           	callstack 0
 11112                           
 11113 ;; *************** function _I2C_2_Master_Stop *****************
 11114 ;; Defined at:
 11115 ;;		line 39 in file "i2c.c"
 11116 ;; Parameters:    Size  Location     Type
 11117 ;;		None
 11118 ;; Auto vars:     Size  Location     Type
 11119 ;;		None
 11120 ;; Return value:  Size  Location     Type
 11121 ;;                  1    wreg      void 
 11122 ;; Registers used:
 11123 ;;		wreg, status,2, status,0, cstack
 11124 ;; Tracked objects:
 11125 ;;		On entry : 0/0
 11126 ;;		On exit  : 0/0
 11127 ;;		Unchanged: 0/0
 11128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11133 ;;Total ram usage:        0 bytes
 11134 ;; Hardware stack levels used: 1
 11135 ;; Hardware stack levels required when called: 2
 11136 ;; This function calls:
 11137 ;;		_I2C_2_Master_Idle
 11138 ;; This function is called by:
 11139 ;;		_color_writetoaddr
 11140 ;;		_color_read_Red
 11141 ;;		_color_read_Green
 11142 ;;		_color_read_Blue
 11143 ;;		_color_read_Clear
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           	psect	text67
 11148   00447A                     __ptext67:
 11149                           	callstack 0
 11150   00447A                     _I2C_2_Master_Stop:
 11151                           	callstack 26
 11152   00447A                     
 11153                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11154   00447A  ECB8  F021         	call	_I2C_2_Master_Idle	;wreg free
 11155   00447E                     
 11156                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11157   00447E  010E               	movlb	14	; () banked
 11158   004480  85DA               	bsf	218,2,b	;volatile
 11159   004482                     
 11160                           ; BSR set to: 14
 11161   004482  0012               	return		;funcret
 11162   004484                     __end_of_I2C_2_Master_Stop:
 11163                           	callstack 0
 11164                           
 11165 ;; *************** function _I2C_2_Master_Start *****************
 11166 ;; Defined at:
 11167 ;;		line 27 in file "i2c.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;		None
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;		None
 11172 ;; Return value:  Size  Location     Type
 11173 ;;                  1    wreg      void 
 11174 ;; Registers used:
 11175 ;;		wreg, status,2, status,0, cstack
 11176 ;; Tracked objects:
 11177 ;;		On entry : 0/0
 11178 ;;		On exit  : 0/0
 11179 ;;		Unchanged: 0/0
 11180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11185 ;;Total ram usage:        0 bytes
 11186 ;; Hardware stack levels used: 1
 11187 ;; Hardware stack levels required when called: 2
 11188 ;; This function calls:
 11189 ;;		_I2C_2_Master_Idle
 11190 ;; This function is called by:
 11191 ;;		_color_writetoaddr
 11192 ;;		_color_read_Red
 11193 ;;		_color_read_Green
 11194 ;;		_color_read_Blue
 11195 ;;		_color_read_Clear
 11196 ;; This function uses a non-reentrant model
 11197 ;;
 11198                           
 11199                           	psect	text68
 11200   004484                     __ptext68:
 11201                           	callstack 0
 11202   004484                     _I2C_2_Master_Start:
 11203                           	callstack 26
 11204   004484                     
 11205                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11206   004484  ECB8  F021         	call	_I2C_2_Master_Idle	;wreg free
 11207   004488                     
 11208                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11209   004488  010E               	movlb	14	; () banked
 11210   00448A  81DA               	bsf	218,0,b	;volatile
 11211   00448C                     
 11212                           ; BSR set to: 14
 11213   00448C  0012               	return		;funcret
 11214   00448E                     __end_of_I2C_2_Master_Start:
 11215                           	callstack 0
 11216                           
 11217 ;; *************** function _I2C_2_Master_RepStart *****************
 11218 ;; Defined at:
 11219 ;;		line 33 in file "i2c.c"
 11220 ;; Parameters:    Size  Location     Type
 11221 ;;		None
 11222 ;; Auto vars:     Size  Location     Type
 11223 ;;		None
 11224 ;; Return value:  Size  Location     Type
 11225 ;;                  1    wreg      void 
 11226 ;; Registers used:
 11227 ;;		wreg, status,2, status,0, cstack
 11228 ;; Tracked objects:
 11229 ;;		On entry : 0/0
 11230 ;;		On exit  : 0/0
 11231 ;;		Unchanged: 0/0
 11232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11237 ;;Total ram usage:        0 bytes
 11238 ;; Hardware stack levels used: 1
 11239 ;; Hardware stack levels required when called: 2
 11240 ;; This function calls:
 11241 ;;		_I2C_2_Master_Idle
 11242 ;; This function is called by:
 11243 ;;		_color_read_Red
 11244 ;;		_color_read_Green
 11245 ;;		_color_read_Blue
 11246 ;;		_color_read_Clear
 11247 ;; This function uses a non-reentrant model
 11248 ;;
 11249                           
 11250                           	psect	text69
 11251   00448E                     __ptext69:
 11252                           	callstack 0
 11253   00448E                     _I2C_2_Master_RepStart:
 11254                           	callstack 26
 11255   00448E                     
 11256                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11257   00448E  ECB8  F021         	call	_I2C_2_Master_Idle	;wreg free
 11258   004492                     
 11259                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11260   004492  010E               	movlb	14	; () banked
 11261   004494  83DA               	bsf	218,1,b	;volatile
 11262   004496                     
 11263                           ; BSR set to: 14
 11264   004496  0012               	return		;funcret
 11265   004498                     __end_of_I2C_2_Master_RepStart:
 11266                           	callstack 0
 11267                           
 11268 ;; *************** function _I2C_2_Master_Read *****************
 11269 ;; Defined at:
 11270 ;;		line 51 in file "i2c.c"
 11271 ;; Parameters:    Size  Location     Type
 11272 ;;  ack             1    wreg     unsigned char 
 11273 ;; Auto vars:     Size  Location     Type
 11274 ;;  ack             1    3[COMRAM] unsigned char 
 11275 ;;  tmp             1    4[COMRAM] unsigned char 
 11276 ;; Return value:  Size  Location     Type
 11277 ;;                  1    wreg      unsigned char 
 11278 ;; Registers used:
 11279 ;;		wreg, status,2, status,0, cstack
 11280 ;; Tracked objects:
 11281 ;;		On entry : 0/0
 11282 ;;		On exit  : 0/0
 11283 ;;		Unchanged: 0/0
 11284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11286 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11287 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11288 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11289 ;;Total ram usage:        3 bytes
 11290 ;; Hardware stack levels used: 1
 11291 ;; Hardware stack levels required when called: 2
 11292 ;; This function calls:
 11293 ;;		_I2C_2_Master_Idle
 11294 ;; This function is called by:
 11295 ;;		_color_read_Red
 11296 ;;		_color_read_Green
 11297 ;;		_color_read_Blue
 11298 ;;		_color_read_Clear
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           	psect	text70
 11303   004030                     __ptext70:
 11304                           	callstack 0
 11305   004030                     _I2C_2_Master_Read:
 11306                           	callstack 26
 11307                           
 11308                           ; BSR set to: 14
 11309                           ;incstack = 0
 11310                           ;I2C_2_Master_Read@ack stored from wreg
 11311   004030  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11312   004032                     
 11313                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11314   004032  ECB8  F021         	call	_I2C_2_Master_Idle	;wreg free
 11315   004036                     
 11316                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11317   004036  010E               	movlb	14	; () banked
 11318   004038  87DA               	bsf	218,3,b	;volatile
 11319                           
 11320                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11321   00403A  ECB8  F021         	call	_I2C_2_Master_Idle	;wreg free
 11322   00403E                     
 11323                           ;i2c.c: 57:   tmp = SSP2BUF;
 11324   00403E  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11325                           
 11326                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11327   004042  ECB8  F021         	call	_I2C_2_Master_Idle	;wreg free
 11328   004046                     
 11329                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11330   004046  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11331   004048  B4D8               	btfsc	status,2,c
 11332   00404A  EF29  F020         	goto	u4941
 11333   00404E  EF2D  F020         	goto	u4940
 11334   004052                     u4941:
 11335   004052  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11336   004054  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11337   004056  EF2E  F020         	goto	u4958
 11338   00405A                     u4940:
 11339   00405A  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11340   00405C                     u4958:
 11341   00405C  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11342   00405E  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11343   004060  010E               	movlb	14	; () banked
 11344   004062  51DA               	movf	218,w,b	;volatile
 11345   004064  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11346   004066  0BDF               	andlw	-33
 11347   004068  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11348   00406A  6FDA               	movwf	218,b	;volatile
 11349   00406C                     
 11350                           ; BSR set to: 14
 11351                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11352   00406C  89DA               	bsf	218,4,b	;volatile
 11353   00406E                     
 11354                           ; BSR set to: 14
 11355                           ;i2c.c: 61:   return tmp;
 11356   00406E  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11357   004070                     
 11358                           ; BSR set to: 14
 11359   004070  0012               	return		;funcret
 11360   004072                     __end_of_I2C_2_Master_Read:
 11361                           	callstack 0
 11362                           
 11363 ;; *************** function _I2C_2_Master_Idle *****************
 11364 ;; Defined at:
 11365 ;;		line 22 in file "i2c.c"
 11366 ;; Parameters:    Size  Location     Type
 11367 ;;		None
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;		None
 11370 ;; Return value:  Size  Location     Type
 11371 ;;                  1    wreg      void 
 11372 ;; Registers used:
 11373 ;;		wreg, status,2, status,0
 11374 ;; Tracked objects:
 11375 ;;		On entry : 0/0
 11376 ;;		On exit  : 0/0
 11377 ;;		Unchanged: 0/0
 11378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11382 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11383 ;;Total ram usage:        1 bytes
 11384 ;; Hardware stack levels used: 1
 11385 ;; Hardware stack levels required when called: 1
 11386 ;; This function calls:
 11387 ;;		Nothing
 11388 ;; This function is called by:
 11389 ;;		_I2C_2_Master_Start
 11390 ;;		_I2C_2_Master_RepStart
 11391 ;;		_I2C_2_Master_Stop
 11392 ;;		_I2C_2_Master_Write
 11393 ;;		_I2C_2_Master_Read
 11394 ;; This function uses a non-reentrant model
 11395 ;;
 11396                           
 11397                           	psect	text71
 11398   004370                     __ptext71:
 11399                           	callstack 0
 11400   004370                     _I2C_2_Master_Idle:
 11401                           	callstack 26
 11402   004370                     l194:
 11403   004370  010E               	movlb	14	; () banked
 11404   004372  B5D8               	btfsc	216,2,b	;volatile
 11405   004374  EFBE  F021         	goto	u4831
 11406   004378  EFC0  F021         	goto	u4830
 11407   00437C                     u4831:
 11408   00437C  EFB8  F021         	goto	l194
 11409   004380                     u4830:
 11410   004380                     
 11411                           ; BSR set to: 14
 11412   004380  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11413   004384  0E1F               	movlw	31
 11414   004386  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 11415   004388  A4D8               	btfss	status,2,c
 11416   00438A  EFC9  F021         	goto	u4841
 11417   00438E  EFCB  F021         	goto	u4840
 11418   004392                     u4841:
 11419   004392  EFB8  F021         	goto	l194
 11420   004396                     u4840:
 11421   004396                     
 11422                           ; BSR set to: 14
 11423   004396  0012               	return		;funcret
 11424   004398                     __end_of_I2C_2_Master_Idle:
 11425                           	callstack 0
 11426                           
 11427 ;; *************** function _ADC_init *****************
 11428 ;; Defined at:
 11429 ;;		line 9 in file "ADC.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;		None
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;		None
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  1    wreg      void 
 11436 ;; Registers used:
 11437 ;;		wreg, status,2
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11447 ;;Total ram usage:        0 bytes
 11448 ;; Hardware stack levels used: 1
 11449 ;; Hardware stack levels required when called: 1
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_main
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           	psect	text72
 11458   00443C                     __ptext72:
 11459                           	callstack 0
 11460   00443C                     _ADC_init:
 11461                           	callstack 29
 11462   00443C                     
 11463                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 11464   00443C  8C86               	bsf	134,6,c	;volatile
 11465                           
 11466                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 11467   00443E  010E               	movlb	14	; () banked
 11468   004440  8DB4               	bsf	180,6,b	;volatile
 11469                           
 11470                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 11471   004442  010F               	movlb	15	; () banked
 11472   004444  9958               	bcf	88,4,b	;volatile
 11473   004446                     
 11474                           ; BSR set to: 15
 11475                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 11476   004446  0EFC               	movlw	-4
 11477   004448  1758               	andwf	88,f,b	;volatile
 11478                           
 11479                           ;ADC.c: 17:     ADPCH=0b101110;
 11480   00444A  0E2E               	movlw	46
 11481   00444C  6F5F               	movwf	95,b	;volatile
 11482   00444E                     
 11483                           ; BSR set to: 15
 11484                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 11485   00444E  9460               	bcf	96,2,c	;volatile
 11486   004450                     
 11487                           ; BSR set to: 15
 11488                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 11489   004450  8860               	bsf	96,4,c	;volatile
 11490   004452                     
 11491                           ; BSR set to: 15
 11492                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 11493   004452  8E60               	bsf	96,7,c	;volatile
 11494   004454                     
 11495                           ; BSR set to: 15
 11496   004454  0012               	return		;funcret
 11497   004456                     __end_of_ADC_init:
 11498                           	callstack 0
 11499                           
 11500 ;; *************** function _LowISR *****************
 11501 ;; Defined at:
 11502 ;;		line 38 in file "timers.c"
 11503 ;; Parameters:    Size  Location     Type
 11504 ;;		None
 11505 ;; Auto vars:     Size  Location     Type
 11506 ;;		None
 11507 ;; Return value:  Size  Location     Type
 11508 ;;                  1    wreg      void 
 11509 ;; Registers used:
 11510 ;;		None
 11511 ;; Tracked objects:
 11512 ;;		On entry : 0/0
 11513 ;;		On exit  : 0/0
 11514 ;;		Unchanged: 0/0
 11515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11518 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11520 ;;Total ram usage:        1 bytes
 11521 ;; Hardware stack levels used: 1
 11522 ;; This function calls:
 11523 ;;		Nothing
 11524 ;; This function is called by:
 11525 ;;		Interrupt level 1
 11526 ;; This function uses a non-reentrant model
 11527 ;;
 11528                           
 11529                           	psect	intcodelo
 11530   000018                     __pintcodelo:
 11531                           	callstack 0
 11532   000018                     _LowISR:
 11533                           	callstack 20
 11534                           
 11535                           ; BSR set to: 15
 11536                           ;incstack = 0
 11537   000018  8052               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 11538   00001A  CFE0 F001          	movff	bsr,??_LowISR
 11539   00001E                     
 11540                           ;timers.c: 41:     if (PIR0bits.TMR0IF == 1) {
 11541   00001E  010E               	movlb	14	; () banked
 11542   000020  AB33               	btfss	51,5,b	;volatile
 11543   000022  EF15  F000         	goto	i1u222_21
 11544   000026  EF17  F000         	goto	i1u222_20
 11545   00002A                     i1u222_21:
 11546   00002A  EF19  F000         	goto	i1l665
 11547   00002E                     i1u222_20:
 11548   00002E                     
 11549                           ; BSR set to: 14
 11550                           ;timers.c: 42:         LATGbits.LATG1 = 1;
 11551   00002E  827F               	bsf	127,1,c	;volatile
 11552                           
 11553                           ;timers.c: 44:         PIR0bits.TMR0IF = 0;
 11554   000030  9B33               	bcf	51,5,b	;volatile
 11555   000032                     i1l665:
 11556                           
 11557                           ; BSR set to: 14
 11558   000032  C001  FFE0         	movff	??_LowISR,bsr
 11559   000036  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 11560   000038  0010               	retfie	
 11561   00003A                     __end_of_LowISR:
 11562                           	callstack 0
 11563                           
 11564                           	psect	rparam
 11565   000000                     
 11566                           	psect	temp
 11567   000052                     btemp:
 11568                           	callstack 0
 11569   000052                     	ds	1
 11570   000000                     int$flags	set	btemp
 11571   000000                     wtemp8	set	btemp+1
 11572   000000                     ttemp5	set	btemp+1
 11573   000000                     ttemp6	set	btemp+4
 11574   000000                     ttemp7	set	btemp+8
 11575                           
 11576                           	psect	config
 11577                           
 11578                           ;Config register CONFIG1L @ 0x300000
 11579                           ;	External Oscillator mode Selection bits
 11580                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11581                           ;	Power-up default value for COSC bits
 11582                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11583   300000                     	org	3145728
 11584   300000  AA                 	db	170
 11585                           
 11586                           ;Config register CONFIG1H @ 0x300001
 11587                           ;	unspecified, using default values
 11588                           ;	Clock Out Enable bit
 11589                           ;	CLKOUTEN = 0x1, unprogrammed default
 11590                           ;	Clock Switch Enable bit
 11591                           ;	CSWEN = 0x1, unprogrammed default
 11592                           ;	Fail-Safe Clock Monitor Enable bit
 11593                           ;	FCMEN = 0x1, unprogrammed default
 11594   300001                     	org	3145729
 11595   300001  FF                 	db	255
 11596                           
 11597                           ;Config register CONFIG3L @ 0x300004
 11598                           ;	WDT Period Select bits
 11599                           ;	WDTCPS = 0x1F, unprogrammed default
 11600                           ;	WDT operating mode
 11601                           ;	WDTE = OFF, WDT Disabled
 11602   300004                     	org	3145732
 11603   300004  9F                 	db	159
 11604                           
 11605                           ;Config register CONFIG3H @ 0x300005
 11606                           ;	unspecified, using default values
 11607                           ;	WDT Window Select bits
 11608                           ;	WDTCWS = 0x7, unprogrammed default
 11609                           ;	WDT input clock selector
 11610                           ;	WDTCCS = 0x7, unprogrammed default
 11611   300005                     	org	3145733
 11612   300005  FF                 	db	255
 11613                           tosu	equ	0xFFF
 11614                           tosh	equ	0xFFE
 11615                           tosl	equ	0xFFD
 11616                           stkptr	equ	0xFFC
 11617                           pclatu	equ	0xFFB
 11618                           pclath	equ	0xFFA
 11619                           pcl	equ	0xFF9
 11620                           tblptru	equ	0xFF8
 11621                           tblptrh	equ	0xFF7
 11622                           tblptrl	equ	0xFF6
 11623                           tablat	equ	0xFF5
 11624                           prodh	equ	0xFF4
 11625                           prodl	equ	0xFF3
 11626                           indf0	equ	0xFEF
 11627                           postinc0	equ	0xFEE
 11628                           postdec0	equ	0xFED
 11629                           preinc0	equ	0xFEC
 11630                           plusw0	equ	0xFEB
 11631                           fsr0h	equ	0xFEA
 11632                           fsr0l	equ	0xFE9
 11633                           wreg	equ	0xFE8
 11634                           indf1	equ	0xFE7
 11635                           postinc1	equ	0xFE6
 11636                           postdec1	equ	0xFE5
 11637                           preinc1	equ	0xFE4
 11638                           plusw1	equ	0xFE3
 11639                           fsr1h	equ	0xFE2
 11640                           fsr1l	equ	0xFE1
 11641                           bsr	equ	0xFE0
 11642                           indf2	equ	0xFDF
 11643                           postinc2	equ	0xFDE
 11644                           postdec2	equ	0xFDD
 11645                           preinc2	equ	0xFDC
 11646                           plusw2	equ	0xFDB
 11647                           fsr2h	equ	0xFDA
 11648                           fsr2l	equ	0xFD9
 11649                           status	equ	0xFD8

Data Sizes:
    Strings     167
    Constant    0
    Data        1
    BSS         434
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      81
    BANK0           160     92     142
    BANK1           256      0     132
    BANK2           256      0     250
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    returnHome@path	PTR PTR struct PathStep size(2) Largest target is 250
		 -> path(BANK2[250]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S2966$buffer	PTR unsigned char  size(2) Largest target is 0

    S2966$source	PTR const unsigned char  size(2) Largest target is 0

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_decision
    _returnHome->_moveWhite
    _reverseTurn->_left135
    _reverseTurn->_right135
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _moveWhite->_backHalf
    _moveWhite->_turn180
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fldiv->___flmul
    _decision->_send2USART
    _send2USART->_sprintf
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _logAction->___wmul
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _decision->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                52    52      0  344949
                                             76 COMRAM     2     2      0
                                             76 BANK0     16    16      0
                           _ADC_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                          _logAction
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          13     7      6   81978
                                             32 COMRAM    13     7      6
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          3     0      3   45414
                                             28 COMRAM     3     0      3
                            _left135
                           _right135
                            _turn180
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                      6     2      4   11690
                                             24 COMRAM     6     2      4
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    4878
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     122
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   24068
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   16385
                                             65 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   15481
                                             61 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     866
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     381
                                             51 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3497
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2718
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1896
                                              1 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2463
                                             26 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2      23
                                              1 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  201301
                                             70 COMRAM     6     2      4
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
                         _send2USART
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11776
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   26306
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   27026
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   11432
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   26486
                                             28 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   11252
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           6     2      4   27026
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   11432
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            5     3      2    4878
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        6     2      4   27206
                                             28 COMRAM     6     2      4
                           _backHalf
                            _left135
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   11612
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   27206
                                             28 COMRAM     6     2      4
                           _backHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   11612
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             6     2      4   27386
                                             28 COMRAM     6     2      4
                           _backHalf
                          _logAction
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   11792
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             5     3      2    5058
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _logAction                                            5     1      4    3197
                                              7 COMRAM     5     1      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   11972
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    6070
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4698
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    4022
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   12683
                                             68 COMRAM     3     2      1
                                              0 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10759
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    9187
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8699
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    2032
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1592
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     726
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___fldiv
     ___flmul (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _logAction
         ___wmul
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
       _logAction
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
       _logAction
     _moveOrange
       _backHalf
       _logAction
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
       _logAction
     _moveRed
       _backHalf
       _logAction
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _logAction
       _right90
     _send2USART
       _sendStringSerial4
       _sprintf
   _fullSpeedAhead
     _setMotorPWM
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _logAction
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _left135
       _right135
       _turn180
       _turnLeft
       _turnRight
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FA       9       97.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      84       7       51.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      8E       5       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      51       1       86.2%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25D      66        0.0%
DATA                 0      0     25D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 23:30:44 2024

               _color_read_Red 3BE4                   ___fldiv@aexp 0033                   ___fldiv@bexp 0032  
           fullSpeedBack@power 0017                   ___fldiv@sign 002B                _color_read_Blue 3CD4  
                           l81 3C32                             l90 3CD2                             l75 411C  
                           l84 3C82                             l93 3248                             l78 43FE  
                           l87 3D22                             l96 27A2                             l98 27B0  
                           l99 27FE                   ___awdiv@sign 0007                             bsr 0FE0  
          ___wmul@multiplicand 0004                moveLightBlue@mL 001D                moveLightBlue@mR 001E  
           convert_rgb2hue@max 0098             convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090  
             _color_read_Clear 3C84               _color_read_Green 3C34                            l101 280C  
                          l102 285E                            l111 294C                            l200 448C  
                          l104 286C                            l105 28BE                            l121 119C  
                          l203 4496                            l107 28CC                            l131 128E  
                          l123 11F6                            l212 4070                            l108 2926  
                          l141 15A6                            l133 129E                            l125 1206  
                          l206 4482                            l135 12F8                            l119 118C  
                          l209 4478                            l145 161E                            l137 1308  
                          l146 163A                            l331 4454                            l164 277A  
                          l500 40E8                            l405 2F54                            l413 3918  
                          l158 276E                            l510 34B0                            l191 436E  
                          l423 3996                            l433 3B04                            l513 34B2  
                          l194 4370                            l418 3A14                            l442 42E2  
                          l506 332E                            l451 4344                            l460 3ED2  
                          l436 41E8                            l428 3A8E                            l197 4396  
                          l445 424C                            l454 421A                            l463 3F1A  
                          l439 42B0                            l448 427E                            l472 3E42  
                          l457 3DB2                            l482 3BE2                            l466 3D6A  
                          l475 3E8A                            l627 443A                            l564 441C  
                          l573 4458                            l469 3DFA                            l493 3FA6  
                          l582 4314                            l398 388A                            l478 41B6  
                          l494 3FA6                            l576 446C                            l912 3562  
                          l497 40D2                            l659 43DE                            l668 43BC  
                          l933 3118                            l927 36BA                            l938 315E  
                          l965 305A                            l899 33F2                            _abs 4152  
                          _pad 3766                            _hue 00BC            convert_rgb2hue@cMax 003E  
                 ___awmod@sign 0007            convert_rgb2hue@diff 0094            logAction@pathLength 000A  
                          wreg 0FE8                   ___flmul@aexp 0013                   ___flmul@bexp 0014  
                 ___flmul@sign 000E                   ___flmul@temp 0019                   ___flmul@prod 0015  
                 ___fltol@exp1 003D                           ?_abs 0008                           l1213 1944  
                         l1205 1AFA                           l1222 1A14                           l1223 1A02  
                         l1410 2C88                           l1250 22BE                           l1330 2A3C  
                         l1323 29A4                           l1420 416C                           l1252 211E  
                         l1261 2164                           l1166 3B78                           l1238 3FEC  
                         l1326 2B00                           l1423 4184                           l1159 3B70  
                         l1263 21DC                           l1255 20E2                           l1416 402E  
                         l1264 21CA                           l4000 40BE                           l1337 2A98  
                         l1346 4150                           l4010 1F42                           l1282 1BC0  
                         l4002 40CE                           l1435 3764                           l1443 40B0  
                         l1371 37FA                           l1291 1E2E                           l4100 2182  
                         l4012 1F52                           l4020 1F7C                           l4004 1F26  
                         l1292 1E1C                           l1196 182A                           l1197 1818  
                         l1446 4498                           l1366 379C                           l1374 2CE8  
                         l4110 21EC                           l4102 2186                           l4030 1FA8  
                         l4022 1F8C                           l4014 1F62                           l4006 1F32  
                         l1286 1F24                           l1198 17DE                           l1391 3608  
                         l4120 224E                           l4112 21F8                           l4104 2194  
                         l4032 1FB8                           l4040 1FE2                           l4024 1F92  
                         l4016 1F72                           l4008 1F40                           l4200 1C76  
                         l1369 37DA                           l1289 1DB6                           l3410 3B06  
                         l4130 22AC                           l4122 2264                           l4114 2206  
                         l4106 21C2                           l4050 2024                           l4042 1FF2  
                         l4034 1FC8                           l4026 1F98                           l4018 1F74  
                         l4210 1CCC                           l4202 1C86                           l1387 2E00  
                         l1395 3610                           l1299 1EE6                           l5100 43B4  
                         l3420 3B3E                           l3412 3B0E                           l4132 22B2  
                         l4124 227E                           l4116 2230                           l4044 2008  
                         l4036 1FD8                           l4028 1FA6                           l4300 30C8  
                         l4220 1D70                           l4212 1CE8                           l4204 1C92  
                         l5110 334A                           l3430 3B6A                           l3422 3B44  
                         l3414 3B20                           l4134 22B4                           l4126 229A  
                         l4118 2234                           l4070 20A6                           l4062 205C  
                         l4046 2018                           l4054 2038                           l4038 1FDA  
                         l4310 3156                           l4302 30D8                           l4230 1DC6  
                         l4222 1D7E                           l4214 1CF4                           l4206 1CA2  
                         l4150 1B28                           l4142 1AFC                           l5120 3370  
                         l5112 334E                           l5104 3330                           l5200 4152  
                         l3424 3B5A                           l3416 3B28                           l4128 229E  
                         l4080 20EC                           l4072 20AE                           l4064 2076  
                         l4056 2048                           l4048 2020                           l4312 315C  
                         l4304 30E6                           l4232 1DD4                           l4224 1D9C  
                         l4216 1D10                           l4208 1CBC                           l4160 1B64  
                         l4152 1B38                           l4144 1B08                           l4400 2AEE  
                         l6000 252C                           l5130 33A6                           l5122 3382  
                         l5114 335C                           l5106 3334                           l5202 4160  
                         l5210 2CAA                           l4410 4356                           l3426 3B62  
                         l3418 3B30                           l4090 2144                           l4082 210A  
                         l4074 20BE                           l4066 2086                           l4058 2048  
                         l4306 30F8                           l4242 1E3E                           l4250 1E86  
                         l4234 1DD8                           l4226 1DA6                           l4218 1D3A  
                         l4170 1B9A                           l4162 1B6A                           l4154 1B48  
                         l4146 1B16                           l4330 2FC0                           l4322 2F80  
                         l4402 2AF0                           l6002 252E                           l5132 33BC  
                         l5124 338A                           l5140 33D2                           l5116 3364  
                         l5108 3342                           l5220 2CE4                           l5212 2CBA  
                         l5204 2C8A                           l4412 4358                           l3428 3B64  
                         l4092 214A                           l4084 210C                           l4076 20D2  
                         l4068 2096                           l4308 3106                           l4260 1EFA  
                         l4252 1EA0                           l4244 1E4A                           l4236 1DE6  
                         l4228 1DB4                           l4172 1BAA                           l4164 1B78  
                         l4156 1B4E                           l4148 1B18                           l3700 1702  
                         l4340 2FF0                           l4332 2FCE                           l4324 2FAA  
                         l4316 2F56                           l4500 1454                           l6004 253E  
                         l5142 33E2                           l5134 33C4                           l5126 3392  
                         l5118 3368                           l5150 34B8                           l5230 2D36  
                         l5222 2CF0                           l5214 2CC0                           l5206 2C8E  
                         l5310 2BCC                           l5302 2B62                           l4414 435A  
                         l4406 4346                           l4094 2154                           l4086 211C  
                         l4078 20E0                           l4262 1F08                           l4254 1EB4  
                         l4246 1E58                           l4238 1E14                           l4190 1C2C  
                         l4182 1BF4                           l4174 1BB0                           l4166 1B7A  
                         l4158 1B5E                           l3710 173C                           l3702 1704  
                         l4350 301A                           l4342 2FFA                           l4326 2FAC  
                         l4318 2F6C                           l4510 15EA                           l4502 14E4  
                         l5144 33EA                           l5136 33C6                           l5128 33A0  
                         l5160 34E8                           l5152 34C6                           l5080 36DC  
                         l5240 2D94                           l5232 2D3C                           l5224 2CFA  
                         l5216 2CD0                           l5208 2CA2                           l5320 2C38  
                         l5312 2BD6                           l5304 2B98                           l4416 435C  
                         l4408 4350                           l5400 394C                           l4096 2162  
                         l4088 212E                           l4280 3640                           l4264 1F0A  
                         l4256 1ECE                           l4248 1E82                           l4192 1C44  
                         l4184 1C00                           l4176 1BD0                           l4168 1B8A  
                         l3800 195A                           l3720 1750                           l3712 1740  
                         l3704 170C                           l4272 3FA8                           l4352 302A  
                         l4328 2FBC                           l4360 2950                           l4504 1516  
                         l5138 33CC                           l5170 352E                           l5162 34FA  
                         l5154 34CE                           l5082 36E6                           l5090 4072  
                         l5250 2DE4                           l5242 2DAE                           l5226 2D00  
                         l5234 2D58                           l5218 2CDC                           l5322 2C42  
                         l5314 2BE0                           l5306 2BA8                           l5330 2C62  
                         l5410 3980                           l5402 395C                           l4098 2174  
                         l4290 36B8                           l4282 3650                           l4258 1EEA  
                         l4266 1F10                           l4194 1C50                           l4186 1C0A  
                         l4178 1BE0                           l3810 1996                           l3802 196A  
                         l3730 1764                           l3722 1754                           l3714 1744  
                         l3706 171C                           l4274 3FB8                           l4354 303A  
                         l4338 2FE6                           l4362 2960                           l4506 15A6  
                         l4450 0F1C                           l5340 4370                           l5180 355A  
                         l5172 3536                           l5164 3502                           l5156 34D2  
                         l5148 34B4                           l5084 3702                           l5076 36BC  
                         l5092 407E                           l5236 2D72                           l5244 2DBE  
                         l5228 2D32                           l5260 359A                           l5316 2C00  
                         l5308 2BBC                           l5420 3AB0                           l5412 3A90  
                         l5404 3964                           l4284 367E                           l4268 1F14  
                         l4196 1C5C                           l4188 1C20                           l3820 19C2  
                         l3812 1998                           l3740 1778                           l3732 1768  
                         l3724 1758                           l3716 1748                           l3708 172E  
                         l4356 304A                           l4348 300E                           l4380 2A26  
                         l4372 29DE                           l4364 296E                           l4508 15DA  
                         l4460 1020                           l4452 0F50                           l4444 0EAA  
                         l5500 3A32                           l5342 4380                           l5174 353C  
                         l5166 350A                           l5158 34E0                           l5086 3734  
                         l5078 36CC                           l5094 408C                           l5190 3794  
                         l5246 2DCE                           l5238 2D84                           l5262 35B6  
                         l5254 3564                           l5326 2C56                           l5318 2C20  
                         l5270 2E1C                           l5430 3AE8                           l5422 3AC4  
                         l5414 3AA8                           l5350 38AE                           l5406 396C  
                         l4286 368E                           l4278 3612                           l4294 305C  
                         l4198 1C6A                           l3830 19FA                           l3814 19A6  
                         l3806 197E                           l3822 19C4                           l3750 17D6  
                         l3734 176C                           l3726 175C                           l3718 174C  
                         l3742 177C                           l3670 1658                           l4390 2AA6  
                         l4382 2A32                           l4374 29E6                           l4366 29B4  
                         l4470 1114                           l4462 1054                           l4454 0F84  
                         l4446 0EBC                           l5510 3A56                           ?_pad 0010  
                         l5432 4458                           l5168 3518                           l5176 3542  
                         l5096 4090                           l5192 37A8                           l5184 3766  
                         l5248 2DD4                           l5264 35D6                           l5256 356C  
                         l6048 2B8A                           l5440 4006                           l5280 2ED8  
                         l5272 2E6A                           l5424 3ACC                           l5352 38C4  
                         l5360 38EC                           l5344 388C                           l5520 3B92  
                         l5408 397C                           l5600 3D9C                           l4800 380C  
                         l4288 36B2                           l4296 308A                           l3840 1A78  
                         l3816 19AE                           l3808 1988                           l3824 19D2  
                         l3760 180C                           l3752 17EC                           l3744 1780  
                         l3736 1770                           l3728 1760                           l3672 1668  
                         l3680 1692                           l3664 163C                           l4392 2AA8  
                         l4384 2A6E                           l4376 29F2                           l4368 29CA  
                         l4480 1216                           l4472 1146                           l4464 1078  
                         l4456 0FB8                           l4448 0EEC                           l5512 3A5E  
                         l5450 4470                           l5434 4468                           l5178 3552  
                         l5194 37B8                           l5186 3776                           l5098 4398  
                         l5258 3592                           l5266 35DE                           l5290 2B3E  
                         l5442 4026                           l5282 2F18                           l5274 2E7C  
                         l5426 3AD4                           l5362 3902                           l5354 38CC  
                         l5346 3890                           l5522 3BDE                           l5370 39C2  
                         l5610 3ED4                           l5602 3E8C                           l5530 41DC  
                         l4810 3866                           l4802 3832                           l4298 309A  
                         l3850 1ABE                           l3834 1A24                           l3842 1A7A  
                         l3826 19D6                           l3818 19B2                           l3770 185C  
                         l3762 1816                           l3754 17F8                           l3746 17AA  
                         l3738 1774                           l3690 16C2                           l3682 16A2  
                         l3674 1678                           l3666 1648                           l4394 2AAC  
                         l4386 2A7A                           l4378 2A24                           l4490 1318  
                         l4482 1248                           l4474 1178                           l4466 10AC  
                         l4458 0FEC                           l5514 3A6E                           l5506 3A3A  
                         l5460 4492                           l5452 4474                           l5196 37BC  
                         l5188 3786                           l5292 2B42                           l5284 2B02  
                         l5436 3FEE                           l5700 40EE                           l5276 2E80  
                         l5268 2E02                           l5428 3AE4                           l5356 38D4  
                         l5348 38A6                           l5380 39E2                           l5364 3998  
                         l5540 42BE                           l5612 3EE0                           l5532 4280  
                         l5604 3E98                           l5620 3E50                           l4820 3888  
                         l4812 3870                           l4804 3836                           l3860 1AE8  
                         l3852 1ACC                           l3844 1A8A                           l3836 1A30  
                         l3828 19E4                           l3780 1898                           l3772 186C  
                         l3764 1838                           l3756 17FC                           l3748 17C6  
                         l3692 16D0                           l3684 16A8                           l3676 1688  
                         l3668 1656                           l4396 2AD0                           l4388 2A88  
                         l4492 137E                           l4484 127A                           l4476 11B0  
                         l4468 10E0                           l5516 3A72                           l5508 3A4E  
                         l5470 406C                           l5462 4032                           l5446 4484  
                         l5454 447A                           l5198 37EA                           l5294 2B4A  
                         l5286 2B28                           l5438 3FF6                           l5702 40F8  
                         l5278 2EBE                           l5358 38DC                           l5518 3B7C  
                         l5382 39EA                           l5366 39B2                           l5542 42D6  
                         l5614 3EF8                           l5534 428C                           l5606 3EB0  
                         l5550 424E                           l5622 3E68                           l5390 3934  
                         l5526 41B8                           l5630 3D48                           l4822 43BE  
                         l4814 3872                           l4806 385A                           l3862 1AEA  
                         l3854 1AD2                           l3846 1A9A                           l3838 1A3E  
                         l3790 18DE                           l3782 18A6                           l3774 187A  
                         l3766 1848                           l3758 180A                           l3694 16D2  
                         l3686 16BA                           l3678 168A                           l4398 2AE0  
                         l4494 1394                           l4486 12B2                           l4478 11E2  
                         l5710 3166                           l5472 406E                           l5464 4036  
                         l5448 4488                           l5456 447E                           l5296 2B4E  
                         l5288 2B30                           l5480 412E                           l5704 4108  
                         l5560 4338                           l5384 39FA                           l5376 39CA  
                         l5368 39BA                           l5616 3F04                           l5536 42A4  
                         l5608 3EBC                           l5552 425A                           l5624 3E74  
                         l5392 393C                           l5544 421C                           l5640 3E2C  
                         l5528 41C4                           l5632 3D54                           l5800 2570  
                         l4824 43D6                           l4816 387C                           l4808 3864  
                         l3856 1AD4                           l3848 1ABA                           l3792 1912  
                         l3784 18A8                           l3776 1888                           l3696 16E2  
                         l3688 16BC                           l4496 13C6                           l4488 12E4  
                         l5720 3196                           l5712 317E                           l5466 403E  
                         l5458 448E                           l5570 3BE4                           l5490 42E8  
                         l5298 2B5A                           l5482 4136                           l5706 4112  
                         l5386 39FE                           l5378 39DA                           l5538 42B2  
                         l5554 4272                           l5618 3E44                           l5394 3944  
                         l5546 4228                           l5634 3DFC                           l5562 41EA  
                         l5642 3DB4                           l5626 3D24                           l5650 441E  
                         l5810 25D2                           l5802 2586                           l4818 387E  
                         l3858 1ADA                           l3794 1914                           l3786 18B2  
                         l3778 1894                           l3698 16F2                           l4498 1422  
                         l5730 31E2                           l5722 31C4                           l5714 3190  
                         l4780 444E                           l5468 4046                           l5572 3C2A  
                         l5492 42F4                           l5484 4146                           l5476 411E  
                         l5556 4316                           l5388 391A                           l5548 4240  
                         l5636 3E08                           l5564 41F6                           l5644 3DC0  
                         l5628 3D30                           l5652 4432                           l5820 2632  
                         l5812 25E6                           l5804 259A                           l3796 1924  
                         l3788 18B8                           l5740 322C                           l5732 31F8  
                         l5724 31C6                           l5716 3192                           l5708 3160  
                         l5660 3F62                           l5900 22F6                           l4782 4450  
                         l5582 3CD4                           l5590 3CCA                           l5494 42F6  
                         l5478 4126                           l5750 279A                           l5558 4322  
                         l5638 3E20                           l5566 420E                           l5646 3DD8  
                         l5830 268A                           l5822 263E                           l5814 25F2  
                         l5806 25A6                           l4790 440C                           l3798 1934  
                         l5742 3240                           l5734 31FA                           l5726 31C8  
                         l5718 3194                           l5654 4186                           l5662 3F74  
                         l5910 2322                           l5902 22FE                           l4784 4452  
                         l4776 443C                           l5584 3D1A                           l5576 3C34  
                         l5496 42FE                           l5488 42E4                           l5760 27F6  
                         l5752 27B2                           l5568 43E2                           l5648 3DE4  
                         l5840 26EC                           l5832 26A0                           l5824 2654  
                         l5816 2608                           l5808 25BC                           l4792 4416  
                         l5736 31FC                           l5728 31CA                           l5656 4192  
                         l5680 328A                           l5664 3F84                           l5920 232C  
                         l5912 2324                           l5904 2302                           l4778 4446  
                         l5578 3C7A                           l5770 2856                           l5762 280E  
                         l5754 27CA                           l5746 277C                           l5594 3D6C  
                         l5850 274E                           l5842 2702                           l5834 26B6  
                         l5826 266A                           l5818 261E                           l4794 4418  
                         l4786 4400                           l5738 3216                           l5658 41AA  
                         l5498 3A16                           l5690 3302                           l5682 32A6  
                         l5674 324A                           l5666 3F96                           l5930 2338  
                         l5922 232E                           l5914 2326                           l5906 2306  
                         l5588 3C84                           l5780 28B6                           l5772 286E  
                         l5764 2826                           l5756 27DC                           l5748 2782  
                         l5596 3D78                           l5852 2762                           l5844 2716  
                         l5836 26CA                           l5828 267E                           l4796 441A  
                         l4788 440A                           l5692 330A                           l5684 32C2  
                         l5676 3266                           l5860 3406                           l5940 2342  
                         l5932 233A                           l5924 2330                           l5916 2328  
                         l5908 230A                           l5790 2904                           l5782 28D2  
                         l5774 2886                           l5766 283C                           l5758 27DE  
                         l5598 3D90                           l5846 2722                           l5838 26D6  
                         l5854 276E                           l4798 37FC                           l3998 40B2  
                         l5694 3316                           l5686 32CA                           l5678 3282  
                         l5870 346C                           l5862 340E                           l5950 2368  
                         l5942 234C                           l5934 233C                           l5926 2332  
                         l5918 232A                           l5792 2906                           l5784 28EA  
                         l5776 289C                           l5768 283E                           l5848 2738  
                         l5696 3322                           l5688 32E6                           l5872 347E  
                         l5856 33F4                           l5960 2398                           l5952 2370  
                         l5944 234E                           l5936 233E                           l5928 2334  
                         l5880 22C0                           l5794 291E                           l5786 2900  
                         l5778 289E                           l5698 40EA                           l5874 3496  
                         l5866 3420                           l5858 33FA                           l5970 2438  
                         l5962 23A4                           l5954 2392                           l5946 2350  
                         l5938 2340                           l5890 22D8                           l5882 22C4  
                         l5796 2934                           l5788 2902                           l5876 34A6  
                         l5868 3446                           l5980 2480                           l5972 2450  
                         l5964 23A6                           l5956 2394                           l5948 2366  
                         l5892 22DE                           l5884 22C8                           l5798 255A  
                         l5990 24DE                           l5982 2498                           l5974 245C  
                         l5966 23B2                           l5958 2396                           l5894 22E2  
                         l5886 22CC                           l5992 24F6                           l5984 24A4  
                         l5976 2468                           l5968 23D4                           l5896 22E6  
                         l5888 22CC                           l5994 2504                           l5986 24BC  
                         l5978 246A                           l5898 22EE                           l5996 2504  
                         l5988 24C8                           l5998 2510                           STR_1 0E6D  
                         STR_2 0EA6                           STR_3 0E01                           STR_4 0EA6  
                         STR_5 0E1E                           STR_6 0EA6                           STR_7 0E39  
                         STR_8 0EA6                           STR_9 0E54                           u3000 196A  
                         u3001 1966                           u3010 1996                           u3011 1992  
                         u3100 1A78                           u3020 19A6                           u3101 1A74  
                         u3021 19A2                           u3110 1A8A                           u3030 19C2  
                         u3111 1A86                           u3031 19BE                           u3120 1A9A  
                         u3040 19D2                           u4000 15EA                   _BAUD4CONbits 0EE9  
                         u3121 1A96                           u3041 19CE                           u4001 15E6  
                         u3130 1ABA                           u3050 19E4                           u3131 1AB6  
                         u3051 19E0                           u3300 2048                           u3140 1ACC  
                         u3060 19FA                           u3220 40E8                           u3301 2044  
                         u3141 1AC8                           u3061 19F6                           u3221 40E4  
                         u3310 20BE                           u3230 1F40                           u3150 1AE8  
                         u3070 1A10                           u3311 20BA                           u3231 1F3C  
                         u3151 1AE4                           u3071 1A0C                           u3400 21D8  
                         u3320 20E0                           u3240 1F52                           u3080 1A24  
                         u5000 3F96                           u3401 21D4                           u3321 20DC  
                         u3241 1F4E                           u3081 1A20                           u5001 3F92  
                         u2450 3B20                           u3410 21EC                           u3330 210A  
                         u3250 1F62                           u3090 1A3E                           u5010 3266  
                         _T2PR 0FBC                           u2451 3B1C                           u3411 21E8  
                         u3331 2106                           u3251 1F5E                           u3091 1A3A  
                         u5011 3262                           u5100 28CC                           u2460 3B3E  
                         u3420 2206                           u3340 212E                           u3260 1FA6  
                         u3500 1B8A                           u5020 3282                           u5101 28C8  
                         u2461 3B3A                           u3421 2202                           u3341 212A  
                         u3261 1FA2                           u3501 1B86                           u5021 327E  
                         u5110 2934                           u2470 3B5A                           u3430 224E  
                         u3350 2144                           u3270 1FB8                           u3510 1B9A  
                         u5030 32A6                           u5111 2930                           u2471 3B56  
                         u3431 224A                           u3351 2140                           u3271 1FB4  
                         u3511 1B96                           u5031 32A2                           u5200 26A0  
                         u5120 2570                           u3440 227E                           u3360 2162  
                         u3280 1FC8                           u3600 1E3E                           u3520 1BD0  
                         u2800 16BA                           u5040 32C2                           u5201 269C  
                         u5121 256C                           u3441 227A                           u3361 215E  
                         u3281 1FC4                           u3601 1E3A                           u3521 1BCC  
                         u2801 16B6                           u5041 32BE                           u5210 26B6  
                         u5130 2586                           u3450 22AC                           u3370 2182  
                         u3290 2008                           u3610 1E58                           u3530 1BE0  
                         u2810 16D0                           u5050 32E6                           u5211 26B2  
                         u5131 2582                           u3451 22A8                           u3371 217E  
                         u3291 2004                           u3611 1E54                           u3531 1BDC  
                         u2811 16CC                           u5051 32E2                           u4500 33A0  
                         u4420 36CC                           u5220 26EC                           u5140 25BC  
                         u3380 2194                           u3700 30E6                           u3620 1EA0  
                         u3540 1D5A                           u3460 1B16                           u2900 180A  
                         u2820 16E2                           u5060 3302                           u5300 2504  
                         u4501 339C                           u4421 36C8                           u5221 26E8  
                         u5141 25B8                           u3381 2190                           u3701 30E2  
                         u3621 1E9C                           u3461 1B12                           u2901 1806  
                         u2821 16DE                           u5061 32FE                           u5301 2500  
                         u4510 33BC                           u4430 36DC                           u5070 27B0  
                         u5230 2702                           u5150 25D2                           u3390 21C2  
                         u3710 3106                           u3630 1ECE                           u3550 1DB4  
                         u3470 1B28                           u2910 182A                           u2830 16F2  
                         u4511 33B8                           u4431 36D8                           u5071 27AC  
                         u5231 26FE                           u5151 25CE                           u3391 21BE  
                         u3711 3102                           u3631 1ECA                           u3551 1DB0  
                         u3471 1B24                           u2911 1826                           u2831 16EE  
                         u4520 33E2                           u4440 3702                           u4600 3794  
                         u5080 280C                           u5240 2738                           u5160 2608  
                         u3720 3156                           u3640 1F08                           u3560 1DD4  
                         u3480 1B38                           u2920 1838                           u2840 172E  
                         u3800 2960                           u4521 33DE                           u4441 36FE  
                         u4601 3790                           u5081 2808                           u5241 2734  
                         u5161 2604                           u3721 3152                           u3641 1F04  
                         u3561 1DD0                           u3545 1D50                           u3481 1B34  
                         u2921 1834                           u2841 172A                           u3801 295C  
                         u4530 34C6                           u4450 3734                           u4610 37DA  
                         u5090 286C                           u5250 274E                           u5170 261E  
                         u3650 3640                           u3570 1DE6                           u3490 1B78  
                         u2930 1848                           u2850 173C                           u2770 1656  
                         u3730 2F6C                           u3810 296E                           u4531 34C2  
                         u4451 3730                           u4611 37D6                           u5091 2868  
                         u5251 274A                           u5171 261A                           u3651 363C  
                         u3571 1DE2                           u3491 1B74                           u2931 1844  
                         u2851 1738                           u2771 1652                           u3731 2F68  
                         u3811 296A                           u4540 34E0                           u4460 40B0  
                         u4620 37EA                           u4700 2D94                           u5180 2654  
                         u3660 367E                           u3580 1E14                           u2940 187A  
                         u2860 17AA                           u2780 1668                           u3740 2FA0  
                         u3820 29CA                           u3900 1146                           u5260 341C  
                         u4541 34DC                           u4461 40AC                           u4621 37E6  
                         u4701 2D90                           u5181 2650                           u3661 367A  
                         u3581 1E10                           u2941 1876                           u2861 17A6  
                         u2781 1664                           u3821 29C6                           u3901 1142  
                         u5261 3418                           u4470 3342                           u4550 34FA  
                         u4630 4160                           u4710 2DAE                           u5190 266A  
                         u3670 36B2                           u3590 1E2A                           u2950 1888  
                         u2870 17C2                           u2790 1678                           u3750 2FCE  
                         u3830 2A20                           u3910 1178                           u5270 347E  
                         u4471 333E                           u4551 34F6                           u4631 415C  
                         u4711 2DAA                           u5191 2666                           u3671 36AE  
                         u3591 1E26                           u2951 1884                           u2871 17BC  
                         u2791 1674                           u3751 2FCA                           u3831 2A1C  
                         u3911 1174                           u5407 31A0                           u5271 347A  
                         u5327 235A                           u4480 335C                           u4560 3518  
                         u4720 2DBE                           u4640 2C9E                           u4800 2BCC  
                         u3680 308A                           u2960 18A6                           u2880 17C4  
                         u3760 2FE2                           u3840 2A6A                           u3920 11E2  
                         u5280 2450                           u4481 3358                           u4561 3514  
                         u4721 2DBA                           u4641 2C98                           u4801 2BC8  
                         u3681 3086                           u2961 18A2                           u3761 2FDE  
                         u3745 2F96                           u3841 2A66                           u3921 11DE  
                         u5417 31D4                           u5337 248A                           u5281 244C  
                         u4490 3382                           u4570 352E                           u4730 2DCE  
                         u4650 2CA0                           u4810 2C00                           u3690 30C8  
                         u2970 18DE                           u2890 17EC                           u3770 300A  
                         u3850 2A88                           u3930 1248                           u5290 24F6  
                         u4491 337E                           u4571 352A                           u4731 2DCA  
                         u4811 2BFC                           u5507 3972                           u3691 30C4  
                         u2971 18DA                           u2891 17E8                           u3771 3006  
                         u3851 2A84                           u3931 1244                           u5427 3208  
                         u5291 24F2                           u5347 24AE                           u4580 3552  
                         u4660 2CBA                           u4740 3592                           u4820 2C20  
                         u4900 3996                           u2980 1924                           u3780 302A  
                         u3860 2A98                           u3940 127A                           u4581 354E  
                         u4661 2CB6                           u4741 358E                           u4821 2C1C  
                         u5517 3E5A                           u4901 3992                           u5437 3D3A  
                         u2981 1920                           u3781 3026                           u3861 2A94  
                         u3941 1276                           u5357 24D2                           u4830 4380  
                         u4590 3776                           u4670 2CD0                           u4750 3608  
                         u4910 3B04                           u2990 195A                           u3790 303A  
                         u3870 2AA6                           u3950 12E4                           u4831 437C  
                         u4591 3772                           u4671 2CCC                           u4751 3604  
                         u4911 3B00                           u5607 3ADA                           u5527 4264  
                         u5447 3D82                           u2991 1956                           u3791 3036  
                         u3871 2AA2                           u3951 12E0                           u5367 3A64  
                         u4840 4396                           u4920 4468                           u4680 2D72  
                         u4760 2E1C                           u3880 2AE0                           u3960 137E  
                         u4841 4392                           u4921 4464                           u4681 2D6E  
                         u5617 40FE                           u4761 2E18                           u5537 3EA2  
                         u5457 41CE                           u3881 2ADC                           u3961 137A  
                         u5377 40C4                           u4690 2D84                           u4930 4026  
                         u4770 2ED8                           u4850 38A6                           u3890 2AEE  
                         u3970 13C6                           u4691 2D80                           u4931 4022  
                         u5627 27BC                           u4771 2ED4                           u4851 38A2  
                         u5547 4296                           u5467 3DCA                           u3891 2AEA  
                         u3971 13C2                           u5387 419C                           u4940 405A  
                         u4780 2B28                           u4860 38C4                           u3980 1454  
                         u4941 4052                           u4781 2B24                           u5637 2818  
                         u4861 38C0                           u5557 3EEA                           u5477 4200  
                         u3981 1450                           u5397 3170                           u4790 2BA8  
                         u4870 3902                           u3990 1516                           u4791 2BA4  
                         u5647 2878                           u4871 38FE                           u5567 42C8  
                         u5487 3E12                           u3991 1512                           u4960 4314  
                         u4880 3918                           u4961 4310                           u5657 28DC  
                         u4881 3914                           u5577 39F0                           u5497 4232  
                         u4890 3A14                           u4970 3A8E                           u5667 293E  
                         u5587 432C                           u4891 3A10                           u4971 3A8A  
                         u4980 3B92                           u5677 42F8                           u5597 38E2  
                         u4981 3B8E                           u4958 405C                           u4990 3F74  
                         u4991 3F70                    main@current 00B0                    main@maximum 00AC  
                         abs@a 0008                           _dbuf 0164                           _main 22C0  
                         _dtoa 2C8A                           _path 0200           convert_rgb2hue@cCurr 003F  
                         _prec 00C6                           pad@i 0016                           pad@p 0013  
                         fsr1h 0FE2                           fsr2h 0FDA                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           btemp 0052  
                         _stop 388C            fullSpeedAhead@power 0017                           prodh 0FF4  
                         prodl 0FF3                           start 003A               __end_of_ADC_init 4456  
              ___fldiv@new_exp 002C         __end_of_color_read_Red 3C34                   ___param_bank 0000  
               reading_hue@hue 0046                          ??_abs 000A                          ??_pad 0015  
                ___fltol@sign1 003C                __end_of___fladd 1AFC                          ?_main 0001  
                        ?_dtoa 0018                          _ADPCH 0F5F                __end_of___fldiv 22C0  
              __end_of___awdiv 33F4                          STR_10 0EA6                          STR_11 0E85  
                        STR_12 0E9A                __end_of___awmod 3564                __end_of___flmul 1F26  
              __end_of___flsub 3FEE                __end_of___fltol 305C                          ?_stop 0014  
              ___awdiv@divisor 0004                __end_of___lwdiv 3B7A                          i1l665 0032  
              ___awdiv@counter 0006              ??_convert_rgb2hue 0040                   vfpfcnvrt@fmt 0024  
                        _TMR0H 0FD4                          _TMR0L 0FD3                __end_of_left135 4280  
      __end_of_sendCharSerial4 446E     __end_of_I2C_2_Master_Start 448E     __end_of_I2C_2_Master_Write 447A  
                        _flags 00C8            read_prec_or_width@c 000A            read_prec_or_width@n 000B  
                        _fputc 36BC                          _fputs 4072                          pad@fp 0010  
                        _width 00C4                          _putch 4498                          dtoa@d 0019  
                        dtoa@i 0021                          dtoa@p 001D                __end_of_right90 41EA  
                        dtoa@s 0020                          dtoa@w 001E                   ?_reading_hue 0042  
              __end_of_moveRed 3DB4                          tablat 0FF5          moveYellow@path_length 001F  
              __end_of_turn180 42E4                          ttemp5 0053                          ttemp6 0056  
                        ttemp7 005A                          status 0FD8                          wtemp8 0053  
              __end_of_sprintf 4152          convert_rgb2hue@redmax 0064        __end_of_color_read_Blue 3D24  
        _I2C_2_Master_RepStart 448E                ?_color_read_Red 0006                __initialization 3F1C  
                 __end_of_main 255A                   __end_of_dtoa 2E02                   __end_of_stop 391A  
        __end_of_moveLightBlue 3E8C                _get16bitTMR0val 43BE                         ??_main 004D  
                       ??_dtoa 001B                         ??_stop 0016                  __activetblptr 0003  
   __end_of_read_prec_or_width 3612                _reverseStraight 324A                   ?_setMotorPWM 000F  
                       ?_fputc 0002                         ?_fputs 000A                         _ADRESH 0F64  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0002               __end_of_backHalf 4346  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       i1l3260 002E                         i1l3258 001E                         _RE4PPS 0E76  
                       _RD6PPS 0E70                         _RG6PPS 0E88                  vfpfcnvrt@done 002C  
     __end_of_color_click_init 411E                         _RX4PPS 0E15                         _TX4REG 0EE4  
             __end_of___xxtofl 2B02    convert_rgb2hue@greencurrent 0068               __end_of_decision 277C  
                       _LowISR 0018                   _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0031  
                       ___flge 305C                         ___fleq 3612                      ??___fladd 000A  
                       ___wmul 4398                      ??___fldiv 0023               backOneAndHalf@mL 0019  
                    ??___awdiv 0006               backOneAndHalf@mR 001A                      ??___awmod 0006  
                    ??___flmul 000A                      ??___flsub 001A                      ??___fltol 0038  
                    ??___lwdiv 000C                         _left90 4280           read_prec_or_width@ap 0009  
                 ?_reverseTurn 001D                         clear_0 3F34                         clear_1 3F40  
                       clear_2 3F4C               ___awdiv@quotient 0008                ___awmod@divisor 0004  
                       _motorL 00D4                         _motorR 00CB                         isa$std 0001  
              ___awmod@counter 0006                      ??_left135 001B             send2USART@hue_char 0060  
                       pad@buf 0011               __end_of_right135 424E                         dtoa@fp 0018  
             __end_of_moveBlue 3F1C               __end_of_movePink 3DFC                         fputc@c 0002  
                       fputs@c 000D                         fputs@i 000E                         fputs@s 000A  
                    ??_right90 001B                   __mediumconst 0000        calibration_routine@cCal 0045  
                    ??_moveRed 0021                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8                      ?_ADC_init 0001               ?_sendCharSerial4 0001  
       convert_rgb2hue@bluemax 0074                         putch@c 0001               __end_of_vfprintf 4030  
                    ??_turn180 001B                         stop@mL 0014                         stop@mR 0015  
            ??_initDCmotorsPWM 0004                      ??_sprintf 0038               __end_of_turnLeft 3A16  
                   ___flge@ff1 0002                     ___flge@ff2 0006                   ___xxtofl@arg 000C  
                 ___xxtofl@exp 000B                   ___xxtofl@val 0002                     ___fleq@ff1 0002  
                   ___fleq@ff2 0006                fullSpeedBack@mL 0014                fullSpeedBack@mR 0015  
                   __accesstop 0060        __end_of__initialization 3F58       __end_of_color_read_Clear 3CD4  
     __end_of_color_read_Green 3C84         ?_I2C_2_Master_RepStart 0001                 _backOneAndHalf 41EA  
                ___rparam_used 0001                     ___fltol@f1 0034               ?_color_read_Blue 0006  
               __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 43E0                  _fullSpeedBack 3A90  
                 __pidataBANK0 449A                  __end_of_fputc 3766                  __end_of_fputs 40B2  
                __end_of_putch 449A        __end_of_reverseStraight 3330               reading_hue@cCurr 0042  
          moveBlue@path_length 001F                     ??_ADC_init 0002                 main@clear_norm 00B8  
                   backHalf@mL 0019                     backHalf@mR 001A                        ??_fputc 0005  
                      ??_fputs 000D                        ??_putch 0002                     __pbssBANK0 00BC  
                   __pbssBANK1 0100                     __pbssBANK2 0200         __end_of_backOneAndHalf 421C  
                      ?_LowISR 0001              _color_writetoaddr 43E0                   _T2CLKCONbits 0FBF  
               ?_fullSpeedBack 0014                _convert_rgb2hue 0EAA                        ?___flge 0002  
                      ?___fleq 0002             ?_color_writetoaddr 0004                  _customDelayMs 40B2  
                      ?___wmul 0002                        ?_left90 0019                      ?_backHalf 0019  
          ??_color_writetoaddr 0005                      ?___xxtofl 0002            _convert_rgb2hue$430 0084  
          _convert_rgb2hue$431 0088            _convert_rgb2hue$432 008C            _convert_rgb2hue$429 0080  
                    ?_decision 0047                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
                decision@color 004B                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
                  moveGreen@mL 001D                    moveGreen@mR 001E                ?_backOneAndHalf 0019  
       color_writetoaddr@value 0004               ??_color_read_Red 0008      __end_of_color_writetoaddr 4400  
                    _ADREFbits 0F58                      ?_right135 0019             _I2C_2_Master_Start 4484  
                   _initUSART4 4400             _I2C_2_Master_Write 446E                      ?_moveBlue 001D  
                      __Hparam 0000                      ?_movePink 001D                        __Lparam 0000  
            color_read_Red@tmp 000B                    moveWhite@mL 001D                    moveWhite@mR 001E  
    customDelayMs@milliseconds 0002                 ?_customDelayMs 0002        sendStringSerial4@string 0003  
             ?_get16bitTMR0val 0002                        ___fladd 163C                        ___fldiv 1F26  
                      ___awdiv 3330                        ___awmod 34B4                        ___flmul 1AFC  
                      ___flsub 3FA8                        ___fltol 2F56            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 3B06            ?_I2C_2_Master_Write 0001                      ?_vfprintf 002E  
                 __psmallconst 0E00                        __pcinit 3F1C                     ??_backHalf 001B  
            __end_of_logAction 3BE4                        __ramtop 0E00               ?_reverseStraight 0019  
                   _send2USART 441E                      ?_turnLeft 0014                        _left135 424E  
                      __ptext0 22C0                        __ptext1 33F4                        __ptext2 3F62  
                      __ptext3 324A                        __ptext4 3A16                        __ptext5 40B2  
                      __ptext6 4186                        __ptext7 3160                        __ptext8 0EAA  
                      __ptext9 294E                      _T2CONbits 0FBD          read_prec_or_width@fmt 0008  
                   ??___xxtofl 0006               ___awmod@dividend 0002                     ??_decision 004B  
       reverseStraight@delayMs 001D                        _right90 41B8                      _T2HLTbits 0FBE  
                      _moveRed 3D6C                  _RxBufWriteCnt 0051                        _turn180 42B2  
                      _sprintf 411E                        main@hue 00B4           ??_I2C_2_Master_Start 0003  
         ??_I2C_2_Master_Write 0003           end_of_initialization 3F58              __end_of_moveGreen 3ED4  
            __end_of_moveWhite 41B8                        fputc@fp 0004        __end_of_convert_rgb2hue 163C  
                      fputs@fp 000C              ?_color_click_init 0001             _read_prec_or_width 3564  
                   _moveOrange 3DFC                     ??_right135 001B                     _moveYellow 3D24  
              ??_fullSpeedBack 0016                     ??_moveBlue 0021             ??_color_click_init 0006  
      convert_rgb2hue@clearmax 007C                     ??_movePink 0021               _colorCalibration 00E5  
            __end_of_vfpfcnvrt 2C8A                        postdec1 0FE5                        postdec2 0FDD  
          ?_read_prec_or_width 0008                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0028                     ??_vfprintf 0031  
      convert_rgb2hue@greenmax 006C                   _colorCurrent 00DD                     _returnHome 33F4  
              _initDCmotorsPWM 37FC                     ??_turnLeft 0016                      _PORTFbits 0F8E  
           setMotorPWM@negDuty 0013              __end_of_turnRight 3998                    ___fladd@grs 0011  
     reverseTurn@turnDirection 001F                  ___xxtofl@sign 000A                    returnHome@i 002C  
                    _TRISAbits 0F81             setMotorPWM@posDuty 0012                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88                  logAction@time 0008  
             convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A               convert_rgb2hue@g 00A4  
                  ___fldiv@grs 002E               convert_rgb2hue@r 00A0                    ___fldiv@rem 0027  
             fullSpeedAhead@mL 0014               fullSpeedAhead@mR 0015       color_writetoaddr@address 0005  
      ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 000F                    _CCP1CONbits 0FAB  
          _calibration_routine 277C              ?_color_read_Clear 0006                   _EUSART4RXbuf 0150  
                 _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7              ?_color_read_Green 0006  
   convert_rgb2hue@bluecurrent 0070            movePink@path_length 001F                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0002  
              ??_customDelayMs 0004             ??_color_read_Clear 0008             ??_color_read_Green 0008  
               __end_of_LowISR 003A      convert_rgb2hue@redcurrent 0060                 __end_of___flge 3160  
               __end_of___fleq 36BC                 _fullSpeedAhead 3A16                    vfpfcnvrt@ap 0025  
                  vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023                 __end_of___wmul 43BE  
               __end_of_left90 42B2                    ?_send2USART 0045           ?_calibration_routine 0045  
          reverseStraight@time 001B            color_read_Clear@tmp 000B            start_initialization 3F1C  
         moveGreen@path_length 001F   calibration_routine@cal_state 0060                    __end_of_abs 4186  
                  __end_of_pad 37FC                  _TxBufWriteCnt 0050               ?_convert_rgb2hue 003E  
                  ?_moveOrange 001D                    ?_moveYellow 001D            color_read_Green@tmp 000B  
                     ??_LowISR 0001        __end_of_initDCmotorsPWM 388C                    vfprintf@fmt 002F  
       __end_of_fullSpeedAhead 3A90                       ??___flge 000A                       ??___fleq 000A  
                     ??___wmul 0006                       ??_left90 001B                    __pdataBANK0 00ED  
                  ?_returnHome 0021          ??_calibration_routine 0046                  _moveLightBlue 3E44  
                    ___fladd@a 0006                      ___fladd@b 0002                      ___fldiv@a 001F  
                    ___fldiv@b 001B                      ___flmul@a 0006                      ___flmul@b 0002  
                  __pbssCOMRAM 004F                      ___flsub@a 0016                      ___flsub@b 0012  
                __pcstackBANK0 0060               ??_backOneAndHalf 001B              reverseStraight@mL 0019  
            reverseStraight@mR 001A                  ??_reading_hue 0044            decision@path_length 0049  
                   right135@mL 0019                     right135@mR 001A               ___lwdiv@dividend 0008  
                    _dtoa$3045 001B                ?_fullSpeedAhead 0014                       ?___fladd 0002  
                     ?___fldiv 001B                       ?___awdiv 0002                       ?___awmod 0002  
                     ?___flmul 0002                       ?___flsub 0012                       ?___fltol 0034  
                     ?___lwdiv 0008                     moveBlue@mL 001D                     moveBlue@mR 001E  
               ?_moveLightBlue 001D                    __pintcodelo 0018                       ?_left135 0019  
                 _readingIndex 00C9           I2C_2_Master_Read@ack 0004           I2C_2_Master_Read@tmp 0005  
                  __smallconst 0E00                     movePink@mL 001D                     movePink@mR 001E  
            _I2C_2_Master_Idle 4370                      _logAction 3B7A              _I2C_2_Master_Init 4346  
            _I2C_2_Master_Read 4030                       ?_right90 0019              _I2C_2_Master_Stop 447A  
                     ?_moveRed 001D                   _RxBufReadCnt 00CA                       _ADC_init 443C  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0010                       ?_turn180 0019             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0002                       ?_sprintf 0032  
            _sendStringSerial4 42E4            ??_I2C_2_Master_Idle 0002            ??_I2C_2_Master_Init 0002  
          ??_I2C_2_Master_Read 0003                 ___wmul@product 0006                       _LATAbits 0F79  
          ??_I2C_2_Master_Stop 0003                       _LATCbits 0F7B                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATFbits 0F7E                       _LATGbits 0F7F  
                     _LATHbits 0F80                       _IPR0bits 0E1F                       _PIE0bits 0E29  
           ?_sendStringSerial4 0003                      _moveGreen 3E8C                       _PIE4bits 0E2D  
          __end_of_reading_hue 324A                       i1u222_20 002E                       i1u222_21 002A  
                    _moveWhite 4186                    turnRight@mL 0014                    turnRight@mR 0015  
                     _PIR0bits 0E33                       _PIR4bits 0E37               ?_initDCmotorsPWM 0002  
                    left135@mL 0019                      left135@mR 001A              ??_sendCharSerial4 0002  
                     _SSP2CON2 0EDA            ??_sendStringSerial4 0004                       _SSP2STAT 0ED8  
                ??_reverseTurn 0020                      _vfpfcnvrt 2B02                     _ADCON0bits 0F60  
    __end_of_I2C_2_Master_Idle 4398      __end_of_I2C_2_Master_Init 4370      __end_of_I2C_2_Master_Read 4072  
            ___wmul@multiplier 0002      __end_of_I2C_2_Master_Stop 4484                   setMotorPWM@m 000F  
  I2C_2_Master_Write@data_byte 0003                    _ldrReadings 013C                     ?_logAction 0008  
            ??_color_read_Blue 0008                   _TxBufReadCnt 004F                      _turnRight 391A  
    __end_of_sendStringSerial4 4316                   moveOrange@mL 001D                   moveOrange@mR 001E  
__end_of_I2C_2_Master_RepStart 4498             color_read_Blue@tmp 000B            __end_of_setMotorPWM 2F56  
              main@path_length 00BA                   ??_initUSART4 0002                     ?_moveGreen 001D  
                   ?_moveWhite 001D                       __Hrparam 0000                     vfprintf@ap 0030  
                     __Lrparam 0000                     vfprintf@fp 002E          __end_of_fullSpeedBack 3B06  
              ??_moveLightBlue 0021                   moveYellow@mL 001D                   moveYellow@mR 001E  
                   ?_vfpfcnvrt 0023          moveOrange@path_length 001F                       _backHalf 4316  
                 ??_send2USART 0047                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                     _dataFlag 00ED                     sprintf@fmt 0033                       ___xxtofl 294E  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6                       _decision 255A  
          __end_of_reverseTurn 3FA8                      right90@mL 0019                      right90@mR 001A  
              ___lwdiv@divisor 000A             __end_of_initUSART4 441E                ___lwdiv@counter 000E  
                   ?_turnRight 0014                       __ptext10 2F56                       __ptext11 3FA8  
                     __ptext20 255A                       __ptext12 163C                       __ptext21 441E  
                     __ptext13 1AFC                       __ptext30 3E44                       __ptext22 3D24  
                     __ptext14 305C                       __ptext31 424E                       __ptext23 3D6C  
                     __ptext15 3612                       __ptext40 3A90                       __ptext32 3E8C  
                     __ptext24 41B8                       __ptext16 1F26                       __ptext41 2E02  
                     __ptext33 4280                       __ptext25 3DB4                       __ptext17 4400  
                     __ptext50 3564                       __ptext42 3B06                       __ptext34 3ED4  
                     __ptext26 41EA                       __ptext18 37FC                       __ptext51 4398  
                     __ptext43 40EA                       __ptext35 42B2                       __ptext27 3DFC  
                     __ptext19 43BE                       __ptext60 42E4                       __ptext52 2C8A  
                     __ptext44 43E0                       __ptext36 3998                       __ptext28 421C  
                     __ptext61 4456                       __ptext53 3766                       __ptext45 4346  
                     __ptext37 3B7A                       __ptext29 391A                       __ptext70 4030  
                     __ptext62 3BE4                       __ptext54 4072                       __ptext46 277C  
                     __ptext38 4316                       __ptext71 4370                       __ptext63 3C34  
                     __ptext55 36BC                       __ptext47 411E                       __ptext39 388C  
                     __ptext72 443C                       __ptext64 3C84                       __ptext56 4498  
                     __ptext48 3FEE                       __ptext65 3CD4                       __ptext57 4152  
                     __ptext49 2B02                       __ptext66 446E                       __ptext58 34B4  
                     __ptext67 447A                       __ptext59 3330                       __ptext68 4484  
                     __ptext69 448E                    decision@hue 0047                      moveRed@mL 001D  
                    moveRed@mR 001E                   _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA  
                  _reading_hue 3160                  reverseTurn@mL 001D                  reverseTurn@mR 001E  
                 ??_moveOrange 0021                     turnLeft@mL 0014                     turnLeft@mR 0015  
                 ??_moveYellow 0021             __end_of_send2USART 443C                       _right135 421C  
                     _moveBlue 3ED4                       _movePink 3DB4                     turnRight@i 0017  
           moveRed@path_length 001F          __end_of_customDelayMs 40EA                       isa$xinst 0000  
                     left90@mL 0019                       left90@mR 001A                     _RC4STAbits 0EE7  
                     int$flags 0052                       _vfprintf 3FEE                   ??_returnHome 0027  
                     main@time 00B6                       _turnLeft 3998                      turn180@mL 0019  
                    turn180@mR 001A                    ??_logAction 000C                     _INTCONbits 0FF2  
               customDelayMs@i 0005             __end_of_moveOrange 3E44             __end_of_moveYellow 3D6C  
                  _setMotorPWM 2E02              ??_get16bitTMR0val 0004                       intlevel1 0000  
                    sprintf@ap 0038           returnHome@pathLength 0025              ??_reverseStraight 001D  
             ??_fullSpeedAhead 0016       moveLightBlue@path_length 001F  get16bitTMR0val@combined_value 0008  
           __end_of_returnHome 34B4                    ??_moveGreen 0021               returnHome@action 002B  
                    turnLeft@i 0017                    ??_moveWhite 001F    __end_of_calibration_routine 294E  
  convert_rgb2hue@clearcurrent 0078                  send2USART@hue 0045                    ??_vfpfcnvrt 0026  
                  _reverseTurn 3F62               _color_click_init 40EA                       sprintf@f 0039  
                     sprintf@s 0032                     _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C  
                  ??_turnRight 0016                  ___fladd@signs 000E                     _TX4STAbits 0EE8  
              _sendCharSerial4 4456                 returnHome@path 0023                 returnHome@time 0029  
                 ___fladd@aexp 000F                   ___fladd@bexp 0010                   returnHome@mL 0021  
                 returnHome@mR 0022                logAction@action 000C  
