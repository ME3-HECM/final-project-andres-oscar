

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 14 18:38:43 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=3
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=3
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    92                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    93                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    94   000000                     
    95                           ; Generated 21/07/2023 GMT
    96                           ; 
    97                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution. Publication is not required when
   111                           ;        this file is used in an embedded application.
   112                           ; 
   113                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   114                           ;        software without specific prior written permission.
   115                           ; 
   116                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   117                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   118                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   119                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   120                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   121                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   122                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   123                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   124                           ; 
   125                           ; 
   126                           ; Code-generator required, PIC18F67K40 Definitions
   127                           ; 
   128                           ; SFR Addresses
   129   000000                     
   130                           	psect	idataBANK0
   131   0046E8                     __pidataBANK0:
   132                           	callstack 0
   133                           
   134                           ;initializer for _dataFlag
   135   0046E8  01                 	db	1
   136   000000                     _TMR0H	set	4052
   137   000000                     _TX4REG	set	3812
   138   000000                     _RC4STAbits	set	3815
   139   000000                     _SP4BRGH	set	3814
   140   000000                     _LATHbits	set	3968
   141   000000                     _LATFbits	set	3966
   142   000000                     _TRISFbits	set	3974
   143   000000                     _TRISAbits	set	3969
   144   000000                     _TRISEbits	set	3973
   145   000000                     _TRISGbits	set	3975
   146   000000                     _TRISDbits	set	3972
   147   000000                     _PORTFbits	set	3982
   148   000000                     _SSP2CON2bits	set	3802
   149   000000                     _RX4PPS	set	3605
   150   000000                     _SSP2CLKPPS	set	3612
   151   000000                     _SSP2DATPPS	set	3613
   152   000000                     _ANSELDbits	set	3751
   153   000000                     _SSP2ADD	set	3798
   154   000000                     _SSP2CON1bits	set	3801
   155   000000                     _LATAbits	set	3961
   156   000000                     _LATEbits	set	3965
   157   000000                     _LATGbits	set	3967
   158   000000                     _LATCbits	set	3963
   159   000000                     _LATDbits	set	3964
   160   000000                     _CCPR2H	set	4006
   161   000000                     _CCPR1H	set	4010
   162   000000                     _RC4REG	set	3811
   163   000000                     _SP4BRGL	set	3813
   164   000000                     _TX4STAbits	set	3816
   165   000000                     _BAUD4CONbits	set	3817
   166   000000                     _SSP2CON2	set	3802
   167   000000                     _CCPR4H	set	3873
   168   000000                     _CCPR3H	set	3877
   169   000000                     _SSP2STAT	set	3800
   170   000000                     _ANSELFbits	set	3764
   171   000000                     _SSP2BUF	set	3797
   172   000000                     _IPR0bits	set	3615
   173   000000                     _PIE0bits	set	3625
   174   000000                     _PIE4bits	set	3629
   175   000000                     _PIR4bits	set	3639
   176   000000                     _RC0PPS	set	3682
   177   000000                     _RC7PPS	set	3689
   178   000000                     _RD5PPS	set	3695
   179   000000                     _RE2PPS	set	3700
   180   000000                     _RD6PPS	set	3696
   181   000000                     _CCP1CONbits	set	4011
   182   000000                     _CCPTMRS0bits	set	4013
   183   000000                     _T2PR	set	4028
   184   000000                     _T2CONbits	set	4029
   185   000000                     _T0CON0bits	set	4053
   186   000000                     _CCP2CONbits	set	4007
   187   000000                     _CCP3CONbits	set	3878
   188   000000                     _ADREFbits	set	3928
   189   000000                     _CCP4CONbits	set	3874
   190   000000                     _TRISHbits	set	3976
   191   000000                     _TRISCbits	set	3971
   192   000000                     _INTCONbits	set	4082
   193   000000                     _T0CON1bits	set	4054
   194   000000                     _ADPCH	set	3935
   195   000000                     _ADRESH	set	3940
   196   000000                     _ADCON0bits	set	3936
   197   000000                     _RE4PPS	set	3702
   198   000000                     _RG6PPS	set	3720
   199   000000                     _TMR0L	set	4051
   200   000000                     _T2CLKCONbits	set	4031
   201   000000                     _T2HLTbits	set	4030
   202   000000                     _PIR0bits	set	3635
   203                           
   204                           	psect	smallconst
   205   000E00                     __psmallconst:
   206                           	callstack 0
   207   000E00  00                 	db	0
   208   000E01                     STR_3:
   209                           
   210                           ; BSR set to: 14
   211   000E01  43                 	db	67	;'C'
   212   000E02  61                 	db	97	;'a'
   213   000E03  6C                 	db	108	;'l'
   214   000E04  69                 	db	105	;'i'
   215   000E05  62                 	db	98	;'b'
   216   000E06  72                 	db	114	;'r'
   217   000E07  61                 	db	97	;'a'
   218   000E08  74                 	db	116	;'t'
   219   000E09  69                 	db	105	;'i'
   220   000E0A  6F                 	db	111	;'o'
   221   000E0B  6E                 	db	110	;'n'
   222   000E0C  20                 	db	32
   223   000E0D  73                 	db	115	;'s'
   224   000E0E  74                 	db	116	;'t'
   225   000E0F  61                 	db	97	;'a'
   226   000E10  74                 	db	116	;'t'
   227   000E11  65                 	db	101	;'e'
   228   000E12  20                 	db	32
   229   000E13  3D                 	db	61	;'='
   230   000E14  20                 	db	32
   231   000E15  67                 	db	103	;'g'
   232   000E16  72                 	db	114	;'r'
   233   000E17  65                 	db	101	;'e'
   234   000E18  65                 	db	101	;'e'
   235   000E19  6E                 	db	110	;'n'
   236   000E1A  20                 	db	32
   237   000E1B  0A                 	db	10
   238   000E1C  0D                 	db	13
   239   000E1D  00                 	db	0
   240   000E1E                     STR_5:
   241                           
   242                           ; BSR set to: 14
   243   000E1E  43                 	db	67	;'C'
   244   000E1F  61                 	db	97	;'a'
   245   000E20  6C                 	db	108	;'l'
   246   000E21  69                 	db	105	;'i'
   247   000E22  62                 	db	98	;'b'
   248   000E23  72                 	db	114	;'r'
   249   000E24  61                 	db	97	;'a'
   250   000E25  74                 	db	116	;'t'
   251   000E26  69                 	db	105	;'i'
   252   000E27  6F                 	db	111	;'o'
   253   000E28  6E                 	db	110	;'n'
   254   000E29  20                 	db	32
   255   000E2A  73                 	db	115	;'s'
   256   000E2B  74                 	db	116	;'t'
   257   000E2C  61                 	db	97	;'a'
   258   000E2D  74                 	db	116	;'t'
   259   000E2E  65                 	db	101	;'e'
   260   000E2F  3D                 	db	61	;'='
   261   000E30  20                 	db	32
   262   000E31  62                 	db	98	;'b'
   263   000E32  6C                 	db	108	;'l'
   264   000E33  75                 	db	117	;'u'
   265   000E34  65                 	db	101	;'e'
   266   000E35  20                 	db	32
   267   000E36  0A                 	db	10
   268   000E37  0D                 	db	13
   269   000E38  00                 	db	0
   270   000E39                     STR_7:
   271                           
   272                           ; BSR set to: 14
   273   000E39  43                 	db	67	;'C'
   274   000E3A  61                 	db	97	;'a'
   275   000E3B  6C                 	db	108	;'l'
   276   000E3C  69                 	db	105	;'i'
   277   000E3D  62                 	db	98	;'b'
   278   000E3E  72                 	db	114	;'r'
   279   000E3F  61                 	db	97	;'a'
   280   000E40  74                 	db	116	;'t'
   281   000E41  69                 	db	105	;'i'
   282   000E42  6F                 	db	111	;'o'
   283   000E43  6E                 	db	110	;'n'
   284   000E44  20                 	db	32
   285   000E45  73                 	db	115	;'s'
   286   000E46  74                 	db	116	;'t'
   287   000E47  61                 	db	97	;'a'
   288   000E48  74                 	db	116	;'t'
   289   000E49  65                 	db	101	;'e'
   290   000E4A  20                 	db	32
   291   000E4B  3D                 	db	61	;'='
   292   000E4C  20                 	db	32
   293   000E4D  20                 	db	32
   294   000E4E  77                 	db	119	;'w'
   295   000E4F  68                 	db	104	;'h'
   296   000E50  69                 	db	105	;'i'
   297   000E51  74                 	db	116	;'t'
   298   000E52  65                 	db	101	;'e'
   299   000E53  00                 	db	0
   300   000E54                     STR_9:
   301                           
   302                           ; BSR set to: 14
   303   000E54  43                 	db	67	;'C'
   304   000E55  41                 	db	65	;'A'
   305   000E56  4C                 	db	76	;'L'
   306   000E57  49                 	db	73	;'I'
   307   000E58  42                 	db	66	;'B'
   308   000E59  52                 	db	82	;'R'
   309   000E5A  41                 	db	65	;'A'
   310   000E5B  54                 	db	84	;'T'
   311   000E5C  49                 	db	73	;'I'
   312   000E5D  4F                 	db	79	;'O'
   313   000E5E  4E                 	db	78	;'N'
   314   000E5F  20                 	db	32
   315   000E60  43                 	db	67	;'C'
   316   000E61  4F                 	db	79	;'O'
   317   000E62  4D                 	db	77	;'M'
   318   000E63  50                 	db	80	;'P'
   319   000E64  4C                 	db	76	;'L'
   320   000E65  45                 	db	69	;'E'
   321   000E66  54                 	db	84	;'T'
   322   000E67  45                 	db	69	;'E'
   323   000E68  44                 	db	68	;'D'
   324   000E69  20                 	db	32
   325   000E6A  0A                 	db	10
   326   000E6B  0D                 	db	13
   327   000E6C  00                 	db	0
   328   000E6D                     STR_1:
   329                           
   330                           ; BSR set to: 14
   331   000E6D  43                 	db	67	;'C'
   332   000E6E  61                 	db	97	;'a'
   333   000E6F  6C                 	db	108	;'l'
   334   000E70  69                 	db	105	;'i'
   335   000E71  62                 	db	98	;'b'
   336   000E72  72                 	db	114	;'r'
   337   000E73  61                 	db	97	;'a'
   338   000E74  74                 	db	116	;'t'
   339   000E75  69                 	db	105	;'i'
   340   000E76  6F                 	db	111	;'o'
   341   000E77  6E                 	db	110	;'n'
   342   000E78  20                 	db	32
   343   000E79  73                 	db	115	;'s'
   344   000E7A  74                 	db	116	;'t'
   345   000E7B  61                 	db	97	;'a'
   346   000E7C  74                 	db	116	;'t'
   347   000E7D  65                 	db	101	;'e'
   348   000E7E  20                 	db	32
   349   000E7F  3D                 	db	61	;'='
   350   000E80  20                 	db	32
   351   000E81  72                 	db	114	;'r'
   352   000E82  65                 	db	101	;'e'
   353   000E83  64                 	db	100	;'d'
   354   000E84  00                 	db	0
   355   000E85                     
   356                           ; BSR set to: 14
   357   000E85  56                 	db	86	;'V'
   358   000E86  6F                 	db	111	;'o'
   359   000E87  6C                 	db	108	;'l'
   360   000E88  74                 	db	116	;'t'
   361   000E89  61                 	db	97	;'a'
   362   000E8A  67                 	db	103	;'g'
   363   000E8B  65                 	db	101	;'e'
   364   000E8C  20                 	db	32
   365   000E8D  3D                 	db	61	;'='
   366   000E8E  20                 	db	32
   367   000E8F  25                 	db	37
   368   000E90  64                 	db	100	;'d'
   369   000E91  2E                 	db	46
   370   000E92  25                 	db	37
   371   000E93  30                 	db	48	;'0'
   372   000E94  32                 	db	50	;'2'
   373   000E95  64                 	db	100	;'d'
   374   000E96  2C                 	db	44
   375   000E97  20                 	db	32
   376   000E98  20                 	db	32
   377   000E99  00                 	db	0
   378   000E9A                     STR_12:
   379                           
   380                           ; BSR set to: 14
   381   000E9A  68                 	db	104	;'h'
   382   000E9B  75                 	db	117	;'u'
   383   000E9C  65                 	db	101	;'e'
   384   000E9D  3D                 	db	61	;'='
   385   000E9E  25                 	db	37
   386   000E9F  30                 	db	48	;'0'
   387   000EA0  33                 	db	51	;'3'
   388   000EA1  64                 	db	100	;'d'
   389   000EA2  2C                 	db	44
   390   000EA3  20                 	db	32
   391   000EA4  20                 	db	32
   392   000EA5  00                 	db	0
   393   000EA6                     STR_2:
   394                           
   395                           ; BSR set to: 14
   396   000EA6  2E                 	db	46
   397   000EA7  00                 	db	0
   398   000EA8  00                 	db	0	; dummy byte at the end
   399   000000                     
   400                           ; #config settings
   401                           
   402                           	psect	cinit
   403   00418C                     __pcinit:
   404                           	callstack 0
   405   00418C                     start_initialization:
   406                           	callstack 0
   407   00418C                     __initialization:
   408                           	callstack 0
   409                           
   410                           ; Initialize objects allocated to BANK0 (1 bytes)
   411                           ; load TBLPTR registers with __pidataBANK0
   412   00418C  0EE8               	movlw	low __pidataBANK0
   413   00418E  6EF6               	movwf	tblptrl,c
   414   004190  0E46               	movlw	high __pidataBANK0
   415   004192  6EF7               	movwf	tblptrh,c
   416   004194  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   417   004196  6EF8               	movwf	tblptru,c
   418   004198  0009               	tblrd		*+	;fetch initializer
   419   00419A  CFF5 F0EF          	movff	tablat,__pdataBANK0
   420                           
   421                           ; Clear objects allocated to BANK2 (200 bytes)
   422   00419E  EE02  F000         	lfsr	0,__pbssBANK2
   423   0041A2  0EC8               	movlw	200
   424   0041A4                     clear_0:
   425   0041A4  6AEE               	clrf	postinc0,c
   426   0041A6  06E8               	decf	wreg,f,c
   427   0041A8  E1FD               	bnz	clear_0
   428                           
   429                           ; Clear objects allocated to BANK1 (132 bytes)
   430   0041AA  EE01  F000         	lfsr	0,__pbssBANK1
   431   0041AE  0E84               	movlw	132
   432   0041B0                     clear_1:
   433   0041B0  6AEE               	clrf	postinc0,c
   434   0041B2  06E8               	decf	wreg,f,c
   435   0041B4  E1FD               	bnz	clear_1
   436                           
   437                           ; Clear objects allocated to BANK0 (49 bytes)
   438   0041B6  EE00  F0BE         	lfsr	0,__pbssBANK0
   439   0041BA  0E31               	movlw	49
   440   0041BC                     clear_2:
   441   0041BC  6AEE               	clrf	postinc0,c
   442   0041BE  06E8               	decf	wreg,f,c
   443   0041C0  E1FD               	bnz	clear_2
   444                           
   445                           ; Clear objects allocated to COMRAM (3 bytes)
   446   0041C2  6A51               	clrf	(__pbssCOMRAM+2)& (0+255),c
   447   0041C4  6A50               	clrf	(__pbssCOMRAM+1)& (0+255),c
   448   0041C6  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   449   0041C8                     end_of_initialization:
   450                           	callstack 0
   451   0041C8                     __end_of__initialization:
   452                           	callstack 0
   453   0041C8  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   454   0041CA  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   455   0041CC  0100               	movlb	0
   456   0041CE  EF60  F011         	goto	_main	;jump to C main() function
   457                           
   458                           	psect	bssCOMRAM
   459   00004F                     __pbssCOMRAM:
   460                           	callstack 0
   461   00004F                     _TxBufReadCnt:
   462                           	callstack 0
   463   00004F                     	ds	1
   464   000050                     _TxBufWriteCnt:
   465                           	callstack 0
   466   000050                     	ds	1
   467   000051                     _RxBufWriteCnt:
   468                           	callstack 0
   469   000051                     	ds	1
   470                           
   471                           	psect	bssBANK0
   472   0000BE                     __pbssBANK0:
   473                           	callstack 0
   474   0000BE                     _hue:
   475                           	callstack 0
   476   0000BE                     	ds	8
   477   0000C6                     _width:
   478                           	callstack 0
   479   0000C6                     	ds	2
   480   0000C8                     _prec:
   481                           	callstack 0
   482   0000C8                     	ds	2
   483   0000CA                     _flags:
   484                           	callstack 0
   485   0000CA                     	ds	1
   486   0000CB                     _readingIndex:
   487                           	callstack 0
   488   0000CB                     	ds	1
   489   0000CC                     _RxBufReadCnt:
   490                           	callstack 0
   491   0000CC                     	ds	1
   492   0000CD                     _motorR:
   493                           	callstack 0
   494   0000CD                     	ds	9
   495   0000D6                     _motorL:
   496                           	callstack 0
   497   0000D6                     	ds	9
   498   0000DF                     _colorCurrent:
   499                           	callstack 0
   500   0000DF                     	ds	8
   501   0000E7                     _colorCalibration:
   502                           	callstack 0
   503   0000E7                     	ds	8
   504                           
   505                           	psect	dataBANK0
   506   0000EF                     __pdataBANK0:
   507                           	callstack 0
   508   0000EF                     _dataFlag:
   509                           	callstack 0
   510   0000EF                     	ds	1
   511                           
   512                           	psect	bssBANK1
   513   000100                     __pbssBANK1:
   514                           	callstack 0
   515   000100                     _EUSART4TXbuf:
   516                           	callstack 0
   517   000100                     	ds	60
   518   00013C                     _ldrReadings:
   519                           	callstack 0
   520   00013C                     	ds	20
   521   000150                     _EUSART4RXbuf:
   522                           	callstack 0
   523   000150                     	ds	20
   524   000164                     _dbuf:
   525                           	callstack 0
   526   000164                     	ds	32
   527                           
   528                           	psect	bssBANK2
   529   000200                     __pbssBANK2:
   530                           	callstack 0
   531   000200                     _path:
   532                           	callstack 0
   533   000200                     	ds	200
   534                           
   535                           	psect	cstackBANK0
   536   000060                     __pcstackBANK0:
   537                           	callstack 0
   538   000060                     convert_rgb2hue@redcurrent:
   539                           	callstack 0
   540   000060                     calibration_routine@cal_state:
   541                           	callstack 0
   542   000060                     send2USART@hue_char:
   543                           	callstack 0
   544                           
   545                           ; 50 bytes @ 0x0
   546   000060                     	ds	4
   547   000064                     convert_rgb2hue@redmax:
   548                           	callstack 0
   549                           
   550                           ; 4 bytes @ 0x4
   551   000064                     	ds	4
   552   000068                     convert_rgb2hue@greencurrent:
   553                           	callstack 0
   554                           
   555                           ; 4 bytes @ 0x8
   556   000068                     	ds	4
   557   00006C                     convert_rgb2hue@greenmax:
   558                           	callstack 0
   559                           
   560                           ; 4 bytes @ 0xC
   561   00006C                     	ds	4
   562   000070                     convert_rgb2hue@bluecurrent:
   563                           	callstack 0
   564                           
   565                           ; 4 bytes @ 0x10
   566   000070                     	ds	4
   567   000074                     convert_rgb2hue@bluemax:
   568                           	callstack 0
   569                           
   570                           ; 4 bytes @ 0x14
   571   000074                     	ds	4
   572   000078                     convert_rgb2hue@clearcurrent:
   573                           	callstack 0
   574                           
   575                           ; 4 bytes @ 0x18
   576   000078                     	ds	4
   577   00007C                     convert_rgb2hue@clearmax:
   578                           	callstack 0
   579                           
   580                           ; 4 bytes @ 0x1C
   581   00007C                     	ds	4
   582   000080                     _convert_rgb2hue$435:
   583                           	callstack 0
   584                           
   585                           ; 4 bytes @ 0x20
   586   000080                     	ds	4
   587   000084                     _convert_rgb2hue$436:
   588                           	callstack 0
   589                           
   590                           ; 4 bytes @ 0x24
   591   000084                     	ds	4
   592   000088                     _convert_rgb2hue$437:
   593                           	callstack 0
   594                           
   595                           ; 4 bytes @ 0x28
   596   000088                     	ds	4
   597   00008C                     _convert_rgb2hue$438:
   598                           	callstack 0
   599                           
   600                           ; 4 bytes @ 0x2C
   601   00008C                     	ds	4
   602   000090                     convert_rgb2hue@min:
   603                           	callstack 0
   604                           
   605                           ; 4 bytes @ 0x30
   606   000090                     	ds	4
   607   000094                     convert_rgb2hue@diff:
   608                           	callstack 0
   609                           
   610                           ; 4 bytes @ 0x34
   611   000094                     	ds	4
   612   000098                     convert_rgb2hue@max:
   613                           	callstack 0
   614                           
   615                           ; 4 bytes @ 0x38
   616   000098                     	ds	4
   617   00009C                     convert_rgb2hue@hue:
   618                           	callstack 0
   619                           
   620                           ; 4 bytes @ 0x3C
   621   00009C                     	ds	4
   622   0000A0                     convert_rgb2hue@r:
   623                           	callstack 0
   624                           
   625                           ; 4 bytes @ 0x40
   626   0000A0                     	ds	4
   627   0000A4                     convert_rgb2hue@g:
   628                           	callstack 0
   629                           
   630                           ; 4 bytes @ 0x44
   631   0000A4                     	ds	4
   632   0000A8                     convert_rgb2hue@b:
   633                           	callstack 0
   634                           
   635                           ; 4 bytes @ 0x48
   636   0000A8                     	ds	4
   637   0000AC                     main@maximum:
   638                           	callstack 0
   639                           
   640                           ; 4 bytes @ 0x4C
   641   0000AC                     	ds	4
   642   0000B0                     main@current:
   643                           	callstack 0
   644                           
   645                           ; 4 bytes @ 0x50
   646   0000B0                     	ds	4
   647   0000B4                     main@white:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0x54
   651   0000B4                     	ds	2
   652   0000B6                     main@time:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0x56
   656   0000B6                     	ds	2
   657   0000B8                     main@clear_norm:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x58
   661   0000B8                     	ds	2
   662   0000BA                     main@hue:
   663                           	callstack 0
   664                           
   665                           ; 2 bytes @ 0x5A
   666   0000BA                     	ds	2
   667   0000BC                     main@path_length:
   668                           	callstack 0
   669                           
   670                           ; 2 bytes @ 0x5C
   671   0000BC                     	ds	2
   672                           
   673                           	psect	cstackCOMRAM
   674   000001                     __pcstackCOMRAM:
   675                           	callstack 0
   676   000001                     ??_LowISR:
   677   000001                     
   678                           ; 1 bytes @ 0x0
   679   000001                     	ds	1
   680   000002                     ??_I2C_2_Master_Idle:
   681   000002                     ?_get16bitTMR0val:
   682                           	callstack 0
   683   000002                     ?_logAction:
   684                           	callstack 0
   685   000002                     ?___wmul:
   686                           	callstack 0
   687   000002                     ?___awdiv:
   688                           	callstack 0
   689   000002                     ?___awmod:
   690                           	callstack 0
   691   000002                     ?___fladd:
   692                           	callstack 0
   693   000002                     ?___flmul:
   694                           	callstack 0
   695   000002                     ?___xxtofl:
   696                           	callstack 0
   697   000002                     sendCharSerial4@charToSend:
   698                           	callstack 0
   699   000002                     initDCmotorsPWM@PWMperiod:
   700                           	callstack 0
   701   000002                     logAction@action:
   702                           	callstack 0
   703   000002                     customDelayMs@milliseconds:
   704                           	callstack 0
   705   000002                     ___wmul@multiplier:
   706                           	callstack 0
   707   000002                     ___awdiv@dividend:
   708                           	callstack 0
   709   000002                     ___awmod@dividend:
   710                           	callstack 0
   711   000002                     fputc@c:
   712                           	callstack 0
   713   000002                     ___fleq@ff1:
   714                           	callstack 0
   715   000002                     ___flge@ff1:
   716                           	callstack 0
   717   000002                     ___fladd@b:
   718                           	callstack 0
   719   000002                     ___flmul@b:
   720                           	callstack 0
   721   000002                     ___xxtofl@val:
   722                           	callstack 0
   723                           
   724                           ; 4 bytes @ 0x1
   725   000002                     	ds	1
   726   000003                     ??_I2C_2_Master_Read:
   727   000003                     I2C_2_Master_Write@data_byte:
   728                           	callstack 0
   729   000003                     sendStringSerial4@string:
   730                           	callstack 0
   731                           
   732                           ; 1 bytes @ 0x2
   733   000003                     	ds	1
   734   000004                     ??_get16bitTMR0val:
   735   000004                     ??_customDelayMs:
   736   000004                     color_writetoaddr@value:
   737                           	callstack 0
   738   000004                     I2C_2_Master_Read@ack:
   739                           	callstack 0
   740   000004                     fputc@fp:
   741                           	callstack 0
   742   000004                     logAction@time:
   743                           	callstack 0
   744   000004                     ___wmul@multiplicand:
   745                           	callstack 0
   746   000004                     ___awdiv@divisor:
   747                           	callstack 0
   748   000004                     ___awmod@divisor:
   749                           	callstack 0
   750                           
   751                           ; 2 bytes @ 0x3
   752   000004                     	ds	1
   753   000005                     ??_fputc:
   754   000005                     color_writetoaddr@address:
   755                           	callstack 0
   756   000005                     I2C_2_Master_Read@tmp:
   757                           	callstack 0
   758   000005                     customDelayMs@i:
   759                           	callstack 0
   760                           
   761                           ; 2 bytes @ 0x4
   762   000005                     	ds	1
   763   000006                     ??_color_click_init:
   764   000006                     ??___xxtofl:
   765   000006                     ?_color_read_Red:
   766                           	callstack 0
   767   000006                     ?_color_read_Green:
   768                           	callstack 0
   769   000006                     ?_color_read_Blue:
   770                           	callstack 0
   771   000006                     ?_color_read_Clear:
   772                           	callstack 0
   773   000006                     ___awdiv@counter:
   774                           	callstack 0
   775   000006                     ___awmod@counter:
   776                           	callstack 0
   777   000006                     logAction@path_length:
   778                           	callstack 0
   779   000006                     ___wmul@product:
   780                           	callstack 0
   781   000006                     ___fleq@ff2:
   782                           	callstack 0
   783   000006                     ___flge@ff2:
   784                           	callstack 0
   785   000006                     ___fladd@a:
   786                           	callstack 0
   787   000006                     ___flmul@a:
   788                           	callstack 0
   789                           
   790                           ; 4 bytes @ 0x5
   791   000006                     	ds	1
   792   000007                     ___awdiv@sign:
   793                           	callstack 0
   794   000007                     ___awmod@sign:
   795                           	callstack 0
   796                           
   797                           ; 1 bytes @ 0x6
   798   000007                     	ds	1
   799   000008                     ??_color_read_Red:
   800   000008                     ??_color_read_Green:
   801   000008                     ??_color_read_Blue:
   802   000008                     ??_color_read_Clear:
   803   000008                     ?_abs:
   804                           	callstack 0
   805   000008                     ?___lwdiv:
   806                           	callstack 0
   807   000008                     ?_read_prec_or_width:
   808                           	callstack 0
   809   000008                     read_prec_or_width@fmt:
   810                           	callstack 0
   811   000008                     logAction@path:
   812                           	callstack 0
   813   000008                     get16bitTMR0val@combined_value:
   814                           	callstack 0
   815   000008                     ___awdiv@quotient:
   816                           	callstack 0
   817   000008                     ___lwdiv@dividend:
   818                           	callstack 0
   819   000008                     abs@a:
   820                           	callstack 0
   821                           
   822                           ; 2 bytes @ 0x7
   823   000008                     	ds	1
   824   000009                     read_prec_or_width@ap:
   825                           	callstack 0
   826                           
   827                           ; 1 bytes @ 0x8
   828   000009                     	ds	1
   829   00000A                     ??_logAction:
   830   00000A                     ??___fladd:
   831   00000A                     ??___flmul:
   832   00000A                     ??_abs:
   833   00000A                     ??___fleq:
   834   00000A                     ??___flge:
   835   00000A                     ___xxtofl@sign:
   836                           	callstack 0
   837   00000A                     read_prec_or_width@c:
   838                           	callstack 0
   839   00000A                     ___lwdiv@divisor:
   840                           	callstack 0
   841   00000A                     fputs@s:
   842                           	callstack 0
   843                           
   844                           ; 2 bytes @ 0x9
   845   00000A                     	ds	1
   846   00000B                     ___xxtofl@exp:
   847                           	callstack 0
   848   00000B                     color_read_Red@tmp:
   849                           	callstack 0
   850   00000B                     color_read_Green@tmp:
   851                           	callstack 0
   852   00000B                     color_read_Blue@tmp:
   853                           	callstack 0
   854   00000B                     color_read_Clear@tmp:
   855                           	callstack 0
   856   00000B                     read_prec_or_width@n:
   857                           	callstack 0
   858                           
   859                           ; 2 bytes @ 0xA
   860   00000B                     	ds	1
   861   00000C                     fputs@fp:
   862                           	callstack 0
   863   00000C                     ___lwdiv@quotient:
   864                           	callstack 0
   865   00000C                     ___xxtofl@arg:
   866                           	callstack 0
   867                           
   868                           ; 4 bytes @ 0xB
   869   00000C                     	ds	1
   870   00000D                     fputs@c:
   871                           	callstack 0
   872                           
   873                           ; 1 bytes @ 0xC
   874   00000D                     	ds	1
   875   00000E                     ___lwdiv@counter:
   876                           	callstack 0
   877   00000E                     ___fladd@signs:
   878                           	callstack 0
   879   00000E                     ___flmul@sign:
   880                           	callstack 0
   881   00000E                     fputs@i:
   882                           	callstack 0
   883                           
   884                           ; 2 bytes @ 0xD
   885   00000E                     	ds	1
   886   00000F                     setMotorPWM@m:
   887                           	callstack 0
   888   00000F                     ___fladd@aexp:
   889                           	callstack 0
   890   00000F                     ___flmul@grs:
   891                           	callstack 0
   892                           
   893                           ; 4 bytes @ 0xE
   894   00000F                     	ds	1
   895   000010                     ??_setMotorPWM:
   896   000010                     ___fladd@bexp:
   897                           	callstack 0
   898   000010                     pad@fp:
   899                           	callstack 0
   900                           
   901                           ; 1 bytes @ 0xF
   902   000010                     	ds	1
   903   000011                     ___fladd@grs:
   904                           	callstack 0
   905   000011                     pad@buf:
   906                           	callstack 0
   907                           
   908                           ; 2 bytes @ 0x10
   909   000011                     	ds	1
   910   000012                     ?___flsub:
   911                           	callstack 0
   912   000012                     setMotorPWM@posDuty:
   913                           	callstack 0
   914   000012                     ___flsub@b:
   915                           	callstack 0
   916                           
   917                           ; 4 bytes @ 0x11
   918   000012                     	ds	1
   919   000013                     setMotorPWM@negDuty:
   920                           	callstack 0
   921   000013                     ___flmul@aexp:
   922                           	callstack 0
   923   000013                     pad@p:
   924                           	callstack 0
   925                           
   926                           ; 2 bytes @ 0x12
   927   000013                     	ds	1
   928   000014                     stop@mL:
   929                           	callstack 0
   930   000014                     turnLeft@mL:
   931                           	callstack 0
   932   000014                     turnRight@mL:
   933                           	callstack 0
   934   000014                     fullSpeedAhead@mL:
   935                           	callstack 0
   936   000014                     fullSpeedBack@mL:
   937                           	callstack 0
   938   000014                     ___flmul@bexp:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x13
   942   000014                     	ds	1
   943   000015                     ??_pad:
   944   000015                     stop@mR:
   945                           	callstack 0
   946   000015                     turnLeft@mR:
   947                           	callstack 0
   948   000015                     turnRight@mR:
   949                           	callstack 0
   950   000015                     fullSpeedAhead@mR:
   951                           	callstack 0
   952   000015                     fullSpeedBack@mR:
   953                           	callstack 0
   954   000015                     ___flmul@prod:
   955                           	callstack 0
   956                           
   957                           ; 4 bytes @ 0x14
   958   000015                     	ds	1
   959   000016                     ??_fullSpeedAhead:
   960   000016                     ??_turnLeft:
   961   000016                     ??_turnRight:
   962   000016                     ??_fullSpeedBack:
   963   000016                     pad@i:
   964                           	callstack 0
   965   000016                     ___flsub@a:
   966                           	callstack 0
   967                           
   968                           ; 4 bytes @ 0x15
   969   000016                     	ds	1
   970   000017                     turnLeft@i:
   971                           	callstack 0
   972   000017                     turnRight@i:
   973                           	callstack 0
   974   000017                     fullSpeedAhead@power:
   975                           	callstack 0
   976   000017                     fullSpeedBack@power:
   977                           	callstack 0
   978                           
   979                           ; 2 bytes @ 0x16
   980   000017                     	ds	1
   981   000018                     dtoa@fp:
   982                           	callstack 0
   983                           
   984                           ; 1 bytes @ 0x17
   985   000018                     	ds	1
   986   000019                     right90@mL:
   987                           	callstack 0
   988   000019                     left90@mL:
   989                           	callstack 0
   990   000019                     turn180@mL:
   991                           	callstack 0
   992   000019                     right135@mL:
   993                           	callstack 0
   994   000019                     left135@mL:
   995                           	callstack 0
   996   000019                     backHalf@mL:
   997                           	callstack 0
   998   000019                     backOneAndHalf@mL:
   999                           	callstack 0
  1000   000019                     reverseStraight@mL:
  1001                           	callstack 0
  1002   000019                     ___flmul@temp:
  1003                           	callstack 0
  1004   000019                     dtoa@d:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x18
  1008   000019                     	ds	1
  1009   00001A                     right90@mR:
  1010                           	callstack 0
  1011   00001A                     left90@mR:
  1012                           	callstack 0
  1013   00001A                     turn180@mR:
  1014                           	callstack 0
  1015   00001A                     right135@mR:
  1016                           	callstack 0
  1017   00001A                     left135@mR:
  1018                           	callstack 0
  1019   00001A                     backHalf@mR:
  1020                           	callstack 0
  1021   00001A                     backOneAndHalf@mR:
  1022                           	callstack 0
  1023   00001A                     reverseStraight@mR:
  1024                           	callstack 0
  1025                           
  1026                           ; 1 bytes @ 0x19
  1027   00001A                     	ds	1
  1028   00001B                     ??_right90:
  1029   00001B                     ??_left90:
  1030   00001B                     ??_turn180:
  1031   00001B                     ??_right135:
  1032   00001B                     ??_left135:
  1033   00001B                     ??_backHalf:
  1034   00001B                     ??_backOneAndHalf:
  1035   00001B                     ?___fldiv:
  1036                           	callstack 0
  1037   00001B                     reverseStraight@time:
  1038                           	callstack 0
  1039   00001B                     _dtoa$3111:
  1040                           	callstack 0
  1041   00001B                     ___fldiv@b:
  1042                           	callstack 0
  1043                           
  1044                           ; 4 bytes @ 0x1A
  1045   00001B                     	ds	2
  1046   00001D                     ??_reverseStraight:
  1047   00001D                     moveRed@mL:
  1048                           	callstack 0
  1049   00001D                     moveGreen@mL:
  1050                           	callstack 0
  1051   00001D                     moveBlue@mL:
  1052                           	callstack 0
  1053   00001D                     moveYellow@mL:
  1054                           	callstack 0
  1055   00001D                     movePink@mL:
  1056                           	callstack 0
  1057   00001D                     moveOrange@mL:
  1058                           	callstack 0
  1059   00001D                     moveLightBlue@mL:
  1060                           	callstack 0
  1061   00001D                     moveWhite@mL:
  1062                           	callstack 0
  1063   00001D                     reverseTurn@mL:
  1064                           	callstack 0
  1065   00001D                     dtoa@p:
  1066                           	callstack 0
  1067                           
  1068                           ; 1 bytes @ 0x1C
  1069   00001D                     	ds	1
  1070   00001E                     moveRed@mR:
  1071                           	callstack 0
  1072   00001E                     moveGreen@mR:
  1073                           	callstack 0
  1074   00001E                     moveBlue@mR:
  1075                           	callstack 0
  1076   00001E                     moveYellow@mR:
  1077                           	callstack 0
  1078   00001E                     movePink@mR:
  1079                           	callstack 0
  1080   00001E                     moveOrange@mR:
  1081                           	callstack 0
  1082   00001E                     moveLightBlue@mR:
  1083                           	callstack 0
  1084   00001E                     moveWhite@mR:
  1085                           	callstack 0
  1086   00001E                     reverseTurn@mR:
  1087                           	callstack 0
  1088   00001E                     dtoa@w:
  1089                           	callstack 0
  1090                           
  1091                           ; 2 bytes @ 0x1D
  1092   00001E                     	ds	1
  1093   00001F                     ??_moveWhite:
  1094   00001F                     reverseTurn@action:
  1095                           	callstack 0
  1096   00001F                     moveRed@path_length:
  1097                           	callstack 0
  1098   00001F                     moveGreen@path_length:
  1099                           	callstack 0
  1100   00001F                     moveBlue@path_length:
  1101                           	callstack 0
  1102   00001F                     moveYellow@path_length:
  1103                           	callstack 0
  1104   00001F                     movePink@path_length:
  1105                           	callstack 0
  1106   00001F                     moveOrange@path_length:
  1107                           	callstack 0
  1108   00001F                     moveLightBlue@path_length:
  1109                           	callstack 0
  1110   00001F                     reverseStraight@delayMs:
  1111                           	callstack 0
  1112   00001F                     ___fldiv@a:
  1113                           	callstack 0
  1114                           
  1115                           ; 4 bytes @ 0x1E
  1116   00001F                     	ds	1
  1117   000020                     ??_reverseTurn:
  1118   000020                     dtoa@s:
  1119                           	callstack 0
  1120                           
  1121                           ; 1 bytes @ 0x1F
  1122   000020                     	ds	1
  1123   000021                     moveRed@path:
  1124                           	callstack 0
  1125   000021                     moveGreen@path:
  1126                           	callstack 0
  1127   000021                     moveBlue@path:
  1128                           	callstack 0
  1129   000021                     moveYellow@path:
  1130                           	callstack 0
  1131   000021                     movePink@path:
  1132                           	callstack 0
  1133   000021                     moveOrange@path:
  1134                           	callstack 0
  1135   000021                     moveLightBlue@path:
  1136                           	callstack 0
  1137   000021                     dtoa@i:
  1138                           	callstack 0
  1139                           
  1140                           ; 2 bytes @ 0x20
  1141   000021                     	ds	1
  1142   000022                     returnHome@mL:
  1143                           	callstack 0
  1144                           
  1145                           ; 1 bytes @ 0x21
  1146   000022                     	ds	1
  1147   000023                     ??_moveRed:
  1148   000023                     ??_moveGreen:
  1149   000023                     ??_moveBlue:
  1150   000023                     ??_moveLightBlue:
  1151   000023                     ??_moveYellow:
  1152   000023                     ??_moveOrange:
  1153   000023                     ??_movePink:
  1154   000023                     ??___fldiv:
  1155   000023                     returnHome@mR:
  1156                           	callstack 0
  1157   000023                     vfpfcnvrt@fp:
  1158                           	callstack 0
  1159                           
  1160                           ; 1 bytes @ 0x22
  1161   000023                     	ds	1
  1162   000024                     vfpfcnvrt@fmt:
  1163                           	callstack 0
  1164   000024                     returnHome@path:
  1165                           	callstack 0
  1166                           
  1167                           ; 2 bytes @ 0x23
  1168   000024                     	ds	1
  1169   000025                     vfpfcnvrt@ap:
  1170                           	callstack 0
  1171                           
  1172                           ; 1 bytes @ 0x24
  1173   000025                     	ds	1
  1174   000026                     ??_vfpfcnvrt:
  1175   000026                     returnHome@pathLength:
  1176                           	callstack 0
  1177                           
  1178                           ; 2 bytes @ 0x25
  1179   000026                     	ds	1
  1180   000027                     ___fldiv@rem:
  1181                           	callstack 0
  1182                           
  1183                           ; 4 bytes @ 0x26
  1184   000027                     	ds	1
  1185   000028                     ??_returnHome:
  1186   000028                     vfpfcnvrt@convarg:
  1187                           	callstack 0
  1188                           
  1189                           ; 4 bytes @ 0x27
  1190   000028                     	ds	3
  1191   00002B                     ___fldiv@sign:
  1192                           	callstack 0
  1193                           
  1194                           ; 1 bytes @ 0x2A
  1195   00002B                     	ds	1
  1196   00002C                     vfpfcnvrt@done:
  1197                           	callstack 0
  1198   00002C                     returnHome@time:
  1199                           	callstack 0
  1200   00002C                     ___fldiv@new_exp:
  1201                           	callstack 0
  1202                           
  1203                           ; 2 bytes @ 0x2B
  1204   00002C                     	ds	1
  1205   00002D                     vfpfcnvrt@cp:
  1206                           	callstack 0
  1207                           
  1208                           ; 1 bytes @ 0x2C
  1209   00002D                     	ds	1
  1210   00002E                     ?_vfprintf:
  1211                           	callstack 0
  1212   00002E                     vfprintf@fp:
  1213                           	callstack 0
  1214   00002E                     returnHome@action:
  1215                           	callstack 0
  1216   00002E                     ___fldiv@grs:
  1217                           	callstack 0
  1218                           
  1219                           ; 4 bytes @ 0x2D
  1220   00002E                     	ds	1
  1221   00002F                     vfprintf@fmt:
  1222                           	callstack 0
  1223                           
  1224                           ; 1 bytes @ 0x2E
  1225   00002F                     	ds	1
  1226   000030                     vfprintf@ap:
  1227                           	callstack 0
  1228   000030                     returnHome@i:
  1229                           	callstack 0
  1230                           
  1231                           ; 2 bytes @ 0x2F
  1232   000030                     	ds	1
  1233   000031                     vfprintf@cfmt:
  1234                           	callstack 0
  1235                           
  1236                           ; 1 bytes @ 0x30
  1237   000031                     	ds	1
  1238   000032                     ?_sprintf:
  1239                           	callstack 0
  1240   000032                     ___fldiv@bexp:
  1241                           	callstack 0
  1242   000032                     sprintf@s:
  1243                           	callstack 0
  1244                           
  1245                           ; 1 bytes @ 0x31
  1246   000032                     	ds	1
  1247   000033                     ___fldiv@aexp:
  1248                           	callstack 0
  1249   000033                     sprintf@fmt:
  1250                           	callstack 0
  1251                           
  1252                           ; 1 bytes @ 0x32
  1253   000033                     	ds	1
  1254   000034                     ?___fltol:
  1255                           	callstack 0
  1256   000034                     ___fltol@f1:
  1257                           	callstack 0
  1258                           
  1259                           ; 4 bytes @ 0x33
  1260   000034                     	ds	4
  1261   000038                     ??___fltol:
  1262   000038                     sprintf@ap:
  1263                           	callstack 0
  1264                           
  1265                           ; 1 bytes @ 0x37
  1266   000038                     	ds	1
  1267   000039                     sprintf@f:
  1268                           	callstack 0
  1269                           
  1270                           ; 12 bytes @ 0x38
  1271   000039                     	ds	3
  1272   00003C                     ___fltol@sign1:
  1273                           	callstack 0
  1274                           
  1275                           ; 1 bytes @ 0x3B
  1276   00003C                     	ds	1
  1277   00003D                     ___fltol@exp1:
  1278                           	callstack 0
  1279                           
  1280                           ; 1 bytes @ 0x3C
  1281   00003D                     	ds	1
  1282   00003E                     ?_convert_rgb2hue:
  1283                           	callstack 0
  1284   00003E                     convert_rgb2hue@cMax:
  1285                           	callstack 0
  1286                           
  1287                           ; 1 bytes @ 0x3D
  1288   00003E                     	ds	1
  1289   00003F                     convert_rgb2hue@cCurr:
  1290                           	callstack 0
  1291                           
  1292                           ; 1 bytes @ 0x3E
  1293   00003F                     	ds	1
  1294   000040                     ??_convert_rgb2hue:
  1295                           
  1296                           ; 1 bytes @ 0x3F
  1297   000040                     	ds	2
  1298   000042                     ?_reading_hue:
  1299                           	callstack 0
  1300   000042                     reading_hue@cCurr:
  1301                           	callstack 0
  1302                           
  1303                           ; 1 bytes @ 0x41
  1304   000042                     	ds	2
  1305   000044                     ??_reading_hue:
  1306                           
  1307                           ; 1 bytes @ 0x43
  1308   000044                     	ds	1
  1309   000045                     calibration_routine@cCal:
  1310                           	callstack 0
  1311   000045                     send2USART@hue:
  1312                           	callstack 0
  1313                           
  1314                           ; 2 bytes @ 0x44
  1315   000045                     	ds	1
  1316   000046                     ??_calibration_routine:
  1317   000046                     reading_hue@hue:
  1318                           	callstack 0
  1319                           
  1320                           ; 2 bytes @ 0x45
  1321   000046                     	ds	1
  1322   000047                     decision@hue:
  1323                           	callstack 0
  1324                           
  1325                           ; 2 bytes @ 0x46
  1326   000047                     	ds	2
  1327   000049                     decision@path_length:
  1328                           	callstack 0
  1329                           
  1330                           ; 2 bytes @ 0x48
  1331   000049                     	ds	2
  1332   00004B                     decision@color:
  1333                           	callstack 0
  1334                           
  1335                           ; 2 bytes @ 0x4A
  1336   00004B                     	ds	2
  1337   00004D                     ??_main:
  1338                           
  1339                           ; 1 bytes @ 0x4C
  1340   00004D                     	ds	2
  1341                           
  1342 ;;
  1343 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1344 ;;
  1345 ;; *************** function _main *****************
  1346 ;; Defined at:
  1347 ;;		line 29 in file "main.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  white           2   84[BANK0 ] unsigned int 
  1352 ;;  time            2   86[BANK0 ] int 
  1353 ;;  hue_char       20    0        unsigned char [20]
  1354 ;;  current         4   80[BANK0 ] float 
  1355 ;;  maximum         4   76[BANK0 ] float 
  1356 ;;  path_length     2   92[BANK0 ] unsigned int 
  1357 ;;  hue             2   90[BANK0 ] unsigned int 
  1358 ;;  PWMcycle        2    0        unsigned int 
  1359 ;;  clear_norm      2   88[BANK0 ] unsigned int 
  1360 ;;  clear           2    0        unsigned int 
  1361 ;;  green           2    0        unsigned int 
  1362 ;;  blue            2    0        unsigned int 
  1363 ;;  red             2    0        unsigned int 
  1364 ;;  battery_leve    2    0        unsigned int 
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      void 
  1367 ;; Registers used:
  1368 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1375 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1376 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1377 ;;      Totals:         2      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;Total ram usage:       20 bytes
  1379 ;; Hardware stack levels required when called: 11
  1380 ;; This function calls:
  1381 ;;		_ADC_init
  1382 ;;		_Timer0_init
  1383 ;;		___fldiv
  1384 ;;		___flmul
  1385 ;;		___fltol
  1386 ;;		___xxtofl
  1387 ;;		_calibration_routine
  1388 ;;		_color_click_init
  1389 ;;		_color_read_Clear
  1390 ;;		_decision
  1391 ;;		_fullSpeedAhead
  1392 ;;		_get16bitTMR0val
  1393 ;;		_initDCmotorsPWM
  1394 ;;		_initUSART4
  1395 ;;		_logAction
  1396 ;;		_reading_hue
  1397 ;;		_returnHome
  1398 ;;		_send2USART
  1399 ;;		_stop
  1400 ;; This function is called by:
  1401 ;;		Startup code after reset
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           	psect	text0
  1406   0022C0                     __ptext0:
  1407                           	callstack 0
  1408   0022C0                     _main:
  1409                           	callstack 20
  1410   0022C0                     
  1411                           ;main.c: 31:     ADC_init();
  1412   0022C0  EC45  F023         	call	_ADC_init	;wreg free
  1413   0022C4                     
  1414                           ;main.c: 32:     color_click_init();
  1415   0022C4  EC8A  F021         	call	_color_click_init	;wreg free
  1416   0022C8                     
  1417                           ;main.c: 33:     initUSART4();
  1418   0022C8  EC27  F023         	call	_initUSART4	;wreg free
  1419   0022CC                     
  1420                           ;main.c: 34:     Timer0_init();
  1421   0022CC  ECDF  F022         	call	_Timer0_init	;wreg free
  1422   0022D0                     
  1423                           ;main.c: 38:     initDCmotorsPWM(PWMcycle);
  1424   0022D0  0E00               	movlw	0
  1425   0022D2  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1426   0022D4  0E63               	movlw	99
  1427   0022D6  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1428   0022D8  ECCE  F01C         	call	_initDCmotorsPWM	;wreg free
  1429   0022DC                     
  1430                           ;main.c: 41:     motorL.power = 0;
  1431   0022DC  0E00               	movlw	0
  1432   0022DE  0100               	movlb	0	; () banked
  1433   0022E0  6FD6               	movwf	_motorL& (0+255),b
  1434   0022E2                     
  1435                           ; BSR set to: 0
  1436                           ;main.c: 42:     motorL.direction = 1;
  1437   0022E2  0E01               	movlw	1
  1438   0022E4  6FD7               	movwf	(_motorL+1)& (0+255),b
  1439   0022E6                     
  1440                           ; BSR set to: 0
  1441                           ;main.c: 43:     motorL.brakemode = 1;
  1442   0022E6  0E01               	movlw	1
  1443   0022E8  6FD8               	movwf	(_motorL+2)& (0+255),b
  1444   0022EA                     
  1445                           ; BSR set to: 0
  1446                           ;main.c: 44:     motorL.PWMperiod = PWMcycle;
  1447   0022EA  0E00               	movlw	0
  1448   0022EC  6FDA               	movwf	(_motorL+4)& (0+255),b
  1449   0022EE  0E63               	movlw	99
  1450   0022F0  6FD9               	movwf	(_motorL+3)& (0+255),b
  1451   0022F2                     
  1452                           ; BSR set to: 0
  1453                           ;main.c: 45:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1454   0022F2  0EAA               	movlw	170
  1455   0022F4  6FDB               	movwf	(_motorL+5)& (0+255),b
  1456   0022F6  0E0F               	movlw	15
  1457   0022F8  6FDC               	movwf	(_motorL+6)& (0+255),b
  1458   0022FA                     
  1459                           ; BSR set to: 0
  1460                           ;main.c: 46:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1461   0022FA  0EA6               	movlw	166
  1462   0022FC  6FDD               	movwf	(_motorL+7)& (0+255),b
  1463   0022FE  0E0F               	movlw	15
  1464   002300  6FDE               	movwf	(_motorL+8)& (0+255),b
  1465   002302                     
  1466                           ; BSR set to: 0
  1467                           ;main.c: 48:     motorR.power = 0;
  1468   002302  0E00               	movlw	0
  1469   002304  6FCD               	movwf	_motorR& (0+255),b
  1470   002306                     
  1471                           ; BSR set to: 0
  1472                           ;main.c: 49:     motorR.direction = 1;
  1473   002306  0E01               	movlw	1
  1474   002308  6FCE               	movwf	(_motorR+1)& (0+255),b
  1475   00230A                     
  1476                           ; BSR set to: 0
  1477                           ;main.c: 50:     motorR.brakemode = 1;
  1478   00230A  0E01               	movlw	1
  1479   00230C  6FCF               	movwf	(_motorR+2)& (0+255),b
  1480   00230E                     
  1481                           ; BSR set to: 0
  1482                           ;main.c: 51:     motorR.PWMperiod = PWMcycle;
  1483   00230E  0E00               	movlw	0
  1484   002310  6FD1               	movwf	(_motorR+4)& (0+255),b
  1485   002312  0E63               	movlw	99
  1486   002314  6FD0               	movwf	(_motorR+3)& (0+255),b
  1487   002316                     
  1488                           ; BSR set to: 0
  1489                           ;main.c: 52:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1490   002316  0E25               	movlw	37
  1491   002318  6FD2               	movwf	(_motorR+5)& (0+255),b
  1492   00231A  0E0F               	movlw	15
  1493   00231C  6FD3               	movwf	(_motorR+6)& (0+255),b
  1494   00231E                     
  1495                           ; BSR set to: 0
  1496                           ;main.c: 53:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1497   00231E  0E21               	movlw	33
  1498   002320  6FD4               	movwf	(_motorR+7)& (0+255),b
  1499   002322  0E0F               	movlw	15
  1500   002324  6FD5               	movwf	(_motorR+8)& (0+255),b
  1501   002326                     
  1502                           ; BSR set to: 0
  1503                           ;main.c: 56:     LATDbits.LATD7=0;
  1504   002326  9E7C               	bcf	124,7,c	;volatile
  1505   002328                     
  1506                           ; BSR set to: 0
  1507                           ;main.c: 57:     TRISDbits.TRISD7=0;
  1508   002328  9E84               	bcf	132,7,c	;volatile
  1509   00232A                     
  1510                           ; BSR set to: 0
  1511                           ;main.c: 63:     TRISGbits.TRISG0 = 0;
  1512   00232A  9087               	bcf	135,0,c	;volatile
  1513   00232C                     
  1514                           ; BSR set to: 0
  1515                           ;main.c: 64:     LATGbits.LATG0 = 0;
  1516   00232C  907F               	bcf	127,0,c	;volatile
  1517   00232E                     
  1518                           ; BSR set to: 0
  1519                           ;main.c: 65:     TRISEbits.TRISE7 = 0;
  1520   00232E  9E85               	bcf	133,7,c	;volatile
  1521   002330                     
  1522                           ; BSR set to: 0
  1523                           ;main.c: 66:     LATEbits.LATE7 = 0;
  1524   002330  9E7D               	bcf	125,7,c	;volatile
  1525   002332                     
  1526                           ; BSR set to: 0
  1527                           ;main.c: 67:     TRISAbits.TRISA3 = 0;
  1528   002332  9681               	bcf	129,3,c	;volatile
  1529   002334                     
  1530                           ; BSR set to: 0
  1531                           ;main.c: 68:     LATAbits.LATA3 = 0;
  1532   002334  9679               	bcf	121,3,c	;volatile
  1533   002336                     
  1534                           ; BSR set to: 0
  1535                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1536   002336  8686               	bsf	134,3,c	;volatile
  1537   002338                     
  1538                           ; BSR set to: 0
  1539                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1540   002338  010E               	movlb	14	; () banked
  1541   00233A  97B4               	bcf	180,3,b	;volatile
  1542   00233C                     
  1543                           ; BSR set to: 14
  1544                           ;main.c: 75:     TRISFbits.TRISF2 = 1;
  1545   00233C  8486               	bsf	134,2,c	;volatile
  1546   00233E                     
  1547                           ; BSR set to: 14
  1548                           ;main.c: 76:     LATFbits.LATF2 = 0;
  1549   00233E  947E               	bcf	126,2,c	;volatile
  1550   002340                     
  1551                           ; BSR set to: 14
  1552                           ;main.c: 77:     ANSELFbits.ANSELF2 = 0;
  1553   002340  95B4               	bcf	180,2,b	;volatile
  1554   002342                     
  1555                           ; BSR set to: 14
  1556                           ;main.c: 80:     TRISGbits.TRISG1 = 0;
  1557   002342  9287               	bcf	135,1,c	;volatile
  1558   002344                     
  1559                           ; BSR set to: 14
  1560                           ;main.c: 81:     LATGbits.LATG1 = 0;
  1561   002344  927F               	bcf	127,1,c	;volatile
  1562   002346                     
  1563                           ; BSR set to: 14
  1564                           ;main.c: 84:     unsigned int battery_level;;main.c: 85:     unsigned int red;;main.c: 8
      +                          6:     unsigned int blue;;main.c: 87:     unsigned int green;;main.c: 88:     unsigned i
      +                          nt clear;;main.c: 89:     unsigned int hue;;main.c: 90:     char hue_char[20];;main.c: 9
      +                          1:     unsigned int path_length = 0;
  1565   002346  0E00               	movlw	0
  1566   002348  0100               	movlb	0	; () banked
  1567   00234A  6FBD               	movwf	(main@path_length+1)& (0+255),b
  1568   00234C  0E00               	movlw	0
  1569   00234E  6FBC               	movwf	main@path_length& (0+255),b
  1570   002350                     
  1571                           ; BSR set to: 0
  1572                           ;main.c: 95:     TRISHbits.TRISH3 = 0;
  1573   002350  9688               	bcf	136,3,c	;volatile
  1574   002352                     
  1575                           ; BSR set to: 0
  1576                           ;main.c: 96:     LATHbits.LATH3 = 1;
  1577   002352  8680               	bsf	128,3,c	;volatile
  1578   002354                     
  1579                           ; BSR set to: 0
  1580                           ;main.c: 97:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1581   002354  0E19               	movlw	25
  1582   002356  6E4E               	movwf	(??_main+1)^0,c
  1583   002358  0E5A               	movlw	90
  1584   00235A  6E4D               	movwf	??_main^0,c
  1585   00235C  0EB2               	movlw	178
  1586   00235E                     u5497:
  1587   00235E  2EE8               	decfsz	wreg,f,c
  1588   002360  D7FE               	bra	u5497
  1589   002362  2E4D               	decfsz	??_main^0,f,c
  1590   002364  D7FC               	bra	u5497
  1591   002366  2E4E               	decfsz	(??_main+1)^0,f,c
  1592   002368  D7FA               	bra	u5497
  1593   00236A                     
  1594                           ;main.c: 98:     LATHbits.LATH3 = 0;
  1595   00236A  9680               	bcf	128,3,c	;volatile
  1596   00236C                     
  1597                           ;main.c: 102:     calibration_routine(&colorCalibration);
  1598   00236C  0EE7               	movlw	low _colorCalibration
  1599   00236E  6E45               	movwf	calibration_routine@cCal^0,c
  1600   002370  EC0F  F014         	call	_calibration_routine	;wreg free
  1601   002374                     
  1602                           ;main.c: 104:     TRISDbits.TRISD3 = 0;
  1603   002374  9684               	bcf	132,3,c	;volatile
  1604   002376                     
  1605                           ;main.c: 105:     LATDbits.LATD3 = 1;
  1606   002376  867C               	bsf	124,3,c	;volatile
  1607   002378                     
  1608                           ;main.c: 107:     TRISHbits.TRISH1 = 0;
  1609   002378  9288               	bcf	136,1,c	;volatile
  1610   00237A                     
  1611                           ;main.c: 108:     LATHbits.LATH1 = 0;
  1612   00237A  9280               	bcf	128,1,c	;volatile
  1613   00237C                     
  1614                           ;main.c: 111:     TRISDbits.TRISD4 = 0;
  1615   00237C  9884               	bcf	132,4,c	;volatile
  1616   00237E                     
  1617                           ;main.c: 112:     LATDbits.LATD4 = 0;
  1618   00237E  987C               	bcf	124,4,c	;volatile
  1619   002380                     
  1620                           ;main.c: 114:     float maximum = colorCalibration.clear;
  1621   002380  C0ED  F002         	movff	_colorCalibration+6,___xxtofl@val
  1622   002384  C0EE  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1623   002388  6A04               	clrf	(___xxtofl@val+2)^0,c
  1624   00238A  6A05               	clrf	(___xxtofl@val+3)^0,c
  1625   00238C  0E00               	movlw	0
  1626   00238E  ECF8  F014         	call	___xxtofl
  1627   002392  C002  F0AC         	movff	?___xxtofl,main@maximum
  1628   002396  C003  F0AD         	movff	?___xxtofl+1,main@maximum+1
  1629   00239A  C004  F0AE         	movff	?___xxtofl+2,main@maximum+2
  1630   00239E  C005  F0AF         	movff	?___xxtofl+3,main@maximum+3
  1631   0023A2                     l6130:
  1632                           
  1633                           ;main.c: 122:         LATGbits.LATG0 = 1;
  1634   0023A2  807F               	bsf	127,0,c	;volatile
  1635   0023A4                     
  1636                           ;main.c: 123:         LATEbits.LATE7 = 1;
  1637   0023A4  8E7D               	bsf	125,7,c	;volatile
  1638   0023A6                     
  1639                           ;main.c: 124:         LATAbits.LATA3 = 1;
  1640   0023A6  8679               	bsf	121,3,c	;volatile
  1641   0023A8                     
  1642                           ;main.c: 126:         fullSpeedAhead(&motorL,&motorR);
  1643   0023A8  0ED6               	movlw	low _motorL
  1644   0023AA  6E14               	movwf	fullSpeedAhead@mL^0,c
  1645   0023AC  0ECD               	movlw	low _motorR
  1646   0023AE  6E15               	movwf	fullSpeedAhead@mR^0,c
  1647   0023B0  EC1D  F01E         	call	_fullSpeedAhead	;wreg free
  1648   0023B4                     
  1649                           ;main.c: 127:         T0CON0bits.T0EN=1;
  1650   0023B4  8ED5               	bsf	213,7,c	;volatile
  1651   0023B6                     
  1652                           ;main.c: 128:         LATHbits.LATH1 = 1;
  1653   0023B6  8280               	bsf	128,1,c	;volatile
  1654   0023B8                     
  1655                           ;main.c: 132:         clear_norm = 0;
  1656   0023B8  0E00               	movlw	0
  1657   0023BA  0100               	movlb	0	; () banked
  1658   0023BC  6FB9               	movwf	(main@clear_norm+1)& (0+255),b
  1659   0023BE  0E00               	movlw	0
  1660   0023C0  6FB8               	movwf	main@clear_norm& (0+255),b
  1661                           
  1662                           ;main.c: 137:         while(clear_norm<10){
  1663   0023C2  EF2C  F012         	goto	l6148
  1664   0023C6                     l6144:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;main.c: 138:             (colorCurrent.clear) = color_read_Clear();
  1668   0023C6  EC76  F020         	call	_color_read_Clear	;wreg free
  1669   0023CA  C006  F0E5         	movff	?_color_read_Clear,_colorCurrent+6
  1670   0023CE  C007  F0E6         	movff	?_color_read_Clear+1,_colorCurrent+7
  1671                           
  1672                           ;main.c: 139:             current = colorCurrent.clear;
  1673   0023D2  C0E5  F002         	movff	_colorCurrent+6,___xxtofl@val
  1674   0023D6  C0E6  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1675   0023DA  6A04               	clrf	(___xxtofl@val+2)^0,c
  1676   0023DC  6A05               	clrf	(___xxtofl@val+3)^0,c
  1677   0023DE  0E00               	movlw	0
  1678   0023E0  ECF8  F014         	call	___xxtofl
  1679   0023E4  C002  F0B0         	movff	?___xxtofl,main@current
  1680   0023E8  C003  F0B1         	movff	?___xxtofl+1,main@current+1
  1681   0023EC  C004  F0B2         	movff	?___xxtofl+2,main@current+2
  1682   0023F0  C005  F0B3         	movff	?___xxtofl+3,main@current+3
  1683   0023F4                     
  1684                           ;main.c: 141:             clear_norm = (current)*100/(maximum);
  1685   0023F4  C0AC  F01F         	movff	main@maximum,___fldiv@a
  1686   0023F8  C0AD  F020         	movff	main@maximum+1,___fldiv@a+1
  1687   0023FC  C0AE  F021         	movff	main@maximum+2,___fldiv@a+2
  1688   002400  C0AF  F022         	movff	main@maximum+3,___fldiv@a+3
  1689   002404  0E00               	movlw	0
  1690   002406  6E06               	movwf	___flmul@a^0,c
  1691   002408  0E00               	movlw	0
  1692   00240A  6E07               	movwf	(___flmul@a+1)^0,c
  1693   00240C  0EC8               	movlw	200
  1694   00240E  6E08               	movwf	(___flmul@a+2)^0,c
  1695   002410  0E42               	movlw	66
  1696   002412  6E09               	movwf	(___flmul@a+3)^0,c
  1697   002414  C0B0  F002         	movff	main@current,___flmul@b
  1698   002418  C0B1  F003         	movff	main@current+1,___flmul@b+1
  1699   00241C  C0B2  F004         	movff	main@current+2,___flmul@b+2
  1700   002420  C0B3  F005         	movff	main@current+3,___flmul@b+3
  1701   002424  EC7E  F00D         	call	___flmul	;wreg free
  1702   002428  C002  F01B         	movff	?___flmul,___fldiv@b
  1703   00242C  C003  F01C         	movff	?___flmul+1,___fldiv@b+1
  1704   002430  C004  F01D         	movff	?___flmul+2,___fldiv@b+2
  1705   002434  C005  F01E         	movff	?___flmul+3,___fldiv@b+3
  1706   002438  EC93  F00F         	call	___fldiv	;wreg free
  1707   00243C  C01B  F034         	movff	?___fldiv,___fltol@f1
  1708   002440  C01C  F035         	movff	?___fldiv+1,___fltol@f1+1
  1709   002444  C01D  F036         	movff	?___fldiv+2,___fltol@f1+2
  1710   002448  C01E  F037         	movff	?___fldiv+3,___fltol@f1+3
  1711   00244C  ECFC  F017         	call	___fltol	;wreg free
  1712   002450  C034  F0B8         	movff	?___fltol,main@clear_norm
  1713   002454  C035  F0B9         	movff	?___fltol+1,main@clear_norm+1
  1714   002458                     l6148:
  1715                           
  1716                           ;main.c: 137:         while(clear_norm<10){
  1717   002458  0100               	movlb	0	; () banked
  1718   00245A  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1719   00245C  E109               	bnz	u5440
  1720   00245E  0E0A               	movlw	10
  1721   002460  5DB8               	subwf	main@clear_norm& (0+255),w,b
  1722   002462  A0D8               	btfss	status,0,c
  1723   002464  EF36  F012         	goto	u5441
  1724   002468  EF38  F012         	goto	u5440
  1725   00246C                     u5441:
  1726   00246C  EFE3  F011         	goto	l6144
  1727   002470                     u5440:
  1728   002470                     
  1729                           ; BSR set to: 0
  1730                           ;main.c: 144:         stop(&motorL,&motorR);
  1731   002470  0ED6               	movlw	low _motorL
  1732   002472  6E14               	movwf	stop@mL^0,c
  1733   002474  0ECD               	movlw	low _motorR
  1734   002476  6E15               	movwf	stop@mR^0,c
  1735   002478  EC16  F01D         	call	_stop	;wreg free
  1736   00247C                     
  1737                           ;main.c: 146:         int time = get16bitTMR0val();
  1738   00247C  EC06  F023         	call	_get16bitTMR0val	;wreg free
  1739   002480  C002  F0B6         	movff	?_get16bitTMR0val,main@time
  1740   002484  C003  F0B7         	movff	?_get16bitTMR0val+1,main@time+1
  1741   002488                     
  1742                           ;main.c: 147:         send2USART(time);
  1743   002488  C0B6  F045         	movff	main@time,send2USART@hue
  1744   00248C  C0B7  F046         	movff	main@time+1,send2USART@hue+1
  1745   002490  EC36  F023         	call	_send2USART	;wreg free
  1746   002494                     
  1747                           ;main.c: 148:         T0CON0bits.T0EN=0;
  1748   002494  9ED5               	bcf	213,7,c	;volatile
  1749   002496                     
  1750                           ;main.c: 149:         path_length = logAction(3,time, path_length, &path);
  1751   002496  0E00               	movlw	0
  1752   002498  6E03               	movwf	(logAction@action+1)^0,c
  1753   00249A  0E03               	movlw	3
  1754   00249C  6E02               	movwf	logAction@action^0,c
  1755   00249E  C0B6  F004         	movff	main@time,logAction@time
  1756   0024A2  C0B7  F005         	movff	main@time+1,logAction@time+1
  1757   0024A6  C0BC  F006         	movff	main@path_length,logAction@path_length
  1758   0024AA  C0BD  F007         	movff	main@path_length+1,logAction@path_length+1
  1759   0024AE  0E00               	movlw	low _path
  1760   0024B0  6E08               	movwf	logAction@path^0,c
  1761   0024B2  0E02               	movlw	high _path
  1762   0024B4  6E09               	movwf	(logAction@path+1)^0,c
  1763   0024B6  EC5D  F01D         	call	_logAction	;wreg free
  1764   0024BA  C002  F0BC         	movff	?_logAction,main@path_length
  1765   0024BE  C003  F0BD         	movff	?_logAction+1,main@path_length+1
  1766   0024C2                     
  1767                           ;main.c: 150:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1768   0024C2  0E05               	movlw	5
  1769   0024C4  6E4E               	movwf	(??_main+1)^0,c
  1770   0024C6  0E0F               	movlw	15
  1771   0024C8  6E4D               	movwf	??_main^0,c
  1772   0024CA  0EF1               	movlw	241
  1773   0024CC                     u5507:
  1774   0024CC  2EE8               	decfsz	wreg,f,c
  1775   0024CE  D7FE               	bra	u5507
  1776   0024D0  2E4D               	decfsz	??_main^0,f,c
  1777   0024D2  D7FC               	bra	u5507
  1778   0024D4  2E4E               	decfsz	(??_main+1)^0,f,c
  1779   0024D6  D7FA               	bra	u5507
  1780   0024D8  0000               	nop	
  1781   0024DA                     
  1782                           ;main.c: 152:         LATDbits.LATD4 = 0;
  1783   0024DA  987C               	bcf	124,4,c	;volatile
  1784   0024DC                     
  1785                           ;main.c: 156:             fullSpeedAhead(&motorL,&motorR);
  1786   0024DC  0ED6               	movlw	low _motorL
  1787   0024DE  6E14               	movwf	fullSpeedAhead@mL^0,c
  1788   0024E0  0ECD               	movlw	low _motorR
  1789   0024E2  6E15               	movwf	fullSpeedAhead@mR^0,c
  1790   0024E4  EC1D  F01E         	call	_fullSpeedAhead	;wreg free
  1791   0024E8                     
  1792                           ;main.c: 157:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1793   0024E8  0E19               	movlw	25
  1794   0024EA  6E4E               	movwf	(??_main+1)^0,c
  1795   0024EC  0E5A               	movlw	90
  1796   0024EE  6E4D               	movwf	??_main^0,c
  1797   0024F0  0EB2               	movlw	178
  1798   0024F2                     u5517:
  1799   0024F2  2EE8               	decfsz	wreg,f,c
  1800   0024F4  D7FE               	bra	u5517
  1801   0024F6  2E4D               	decfsz	??_main^0,f,c
  1802   0024F8  D7FC               	bra	u5517
  1803   0024FA  2E4E               	decfsz	(??_main+1)^0,f,c
  1804   0024FC  D7FA               	bra	u5517
  1805   0024FE                     
  1806                           ;main.c: 158:             stop(&motorL,&motorR);
  1807   0024FE  0ED6               	movlw	low _motorL
  1808   002500  6E14               	movwf	stop@mL^0,c
  1809   002502  0ECD               	movlw	low _motorR
  1810   002504  6E15               	movwf	stop@mR^0,c
  1811   002506  EC16  F01D         	call	_stop	;wreg free
  1812   00250A                     
  1813                           ;main.c: 159:             _delay((unsigned long)((50)*(64000000/4000.0)));
  1814   00250A  0E05               	movlw	5
  1815   00250C  6E4E               	movwf	(??_main+1)^0,c
  1816   00250E  0E0F               	movlw	15
  1817   002510  6E4D               	movwf	??_main^0,c
  1818   002512  0EF1               	movlw	241
  1819   002514                     u5527:
  1820   002514  2EE8               	decfsz	wreg,f,c
  1821   002516  D7FE               	bra	u5527
  1822   002518  2E4D               	decfsz	??_main^0,f,c
  1823   00251A  D7FC               	bra	u5527
  1824   00251C  2E4E               	decfsz	(??_main+1)^0,f,c
  1825   00251E  D7FA               	bra	u5527
  1826   002520  0000               	nop	
  1827   002522                     
  1828                           ;main.c: 160:         hue = reading_hue(&colorCurrent);
  1829   002522  0EDF               	movlw	low _colorCurrent
  1830   002524  6E42               	movwf	reading_hue@cCurr^0,c
  1831   002526  EC80  F019         	call	_reading_hue	;wreg free
  1832   00252A  C042  F0BA         	movff	?_reading_hue,main@hue
  1833   00252E  C043  F0BB         	movff	?_reading_hue+1,main@hue+1
  1834   002532                     
  1835                           ;main.c: 162:         if (clear_norm > 60 && !(hue>=302 && hue<=346)){
  1836   002532  0100               	movlb	0	; () banked
  1837   002534  51B9               	movf	(main@clear_norm+1)& (0+255),w,b
  1838   002536  E109               	bnz	u5450
  1839   002538  0E3D               	movlw	61
  1840   00253A  5DB8               	subwf	main@clear_norm& (0+255),w,b
  1841   00253C  A0D8               	btfss	status,0,c
  1842   00253E  EFA3  F012         	goto	u5451
  1843   002542  EFA5  F012         	goto	u5450
  1844   002546                     u5451:
  1845   002546  EFD4  F012         	goto	l6188
  1846   00254A                     u5450:
  1847   00254A                     
  1848                           ; BSR set to: 0
  1849   00254A  0E2E               	movlw	46
  1850   00254C  5DBA               	subwf	main@hue& (0+255),w,b
  1851   00254E  0E01               	movlw	1
  1852   002550  59BB               	subwfb	(main@hue+1)& (0+255),w,b
  1853   002552  A0D8               	btfss	status,0,c
  1854   002554  EFAE  F012         	goto	u5461
  1855   002558  EFB0  F012         	goto	u5460
  1856   00255C                     u5461:
  1857   00255C  EFBB  F012         	goto	l6180
  1858   002560                     u5460:
  1859   002560                     
  1860                           ; BSR set to: 0
  1861   002560  0E5B               	movlw	91
  1862   002562  5DBA               	subwf	main@hue& (0+255),w,b
  1863   002564  0E01               	movlw	1
  1864   002566  59BB               	subwfb	(main@hue+1)& (0+255),w,b
  1865   002568  A0D8               	btfss	status,0,c
  1866   00256A  EFB9  F012         	goto	u5471
  1867   00256E  EFBB  F012         	goto	u5470
  1868   002572                     u5471:
  1869   002572  EFD4  F012         	goto	l6188
  1870   002576                     u5470:
  1871   002576                     l6180:
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;main.c: 164:             unsigned int white = 8;
  1875   002576  0E00               	movlw	0
  1876   002578  6FB5               	movwf	(main@white+1)& (0+255),b
  1877   00257A  0E08               	movlw	8
  1878   00257C  6FB4               	movwf	main@white& (0+255),b
  1879   00257E                     
  1880                           ; BSR set to: 0
  1881                           ;main.c: 165:             send2USART(white);
  1882   00257E  C0B4  F045         	movff	main@white,send2USART@hue
  1883   002582  C0B5  F046         	movff	main@white+1,send2USART@hue+1
  1884   002586  EC36  F023         	call	_send2USART	;wreg free
  1885   00258A                     
  1886                           ;main.c: 166:             returnHome(&motorL, &motorR, &path, path_length);
  1887   00258A  0ED6               	movlw	low _motorL
  1888   00258C  6E22               	movwf	returnHome@mL^0,c
  1889   00258E  0ECD               	movlw	low _motorR
  1890   002590  6E23               	movwf	returnHome@mR^0,c
  1891   002592  0E00               	movlw	low _path
  1892   002594  6E24               	movwf	returnHome@path^0,c
  1893   002596  0E02               	movlw	high _path
  1894   002598  6E25               	movwf	(returnHome@path+1)^0,c
  1895   00259A  C0BC  F026         	movff	main@path_length,returnHome@pathLength
  1896   00259E  C0BD  F027         	movff	main@path_length+1,returnHome@pathLength+1
  1897   0025A2  ECF5  F019         	call	_returnHome	;wreg free
  1898   0025A6                     
  1899                           ;main.c: 167:             LATGbits.LATG1 = 0;
  1900   0025A6  927F               	bcf	127,1,c	;volatile
  1901   0025A8                     l6188:
  1902                           
  1903                           ;main.c: 170:         decision(hue, path_length);
  1904   0025A8  C0BA  F047         	movff	main@hue,decision@hue
  1905   0025AC  C0BB  F048         	movff	main@hue+1,decision@hue+1
  1906   0025B0  C0BC  F049         	movff	main@path_length,decision@path_length
  1907   0025B4  C0BD  F04A         	movff	main@path_length+1,decision@path_length+1
  1908   0025B8  ECE2  F012         	call	_decision	;wreg free
  1909   0025BC  EFD1  F011         	goto	l6130
  1910   0025C0  EF1D  F000         	goto	start
  1911   0025C4                     __end_of_main:
  1912                           	callstack 0
  1913                           
  1914 ;; *************** function _returnHome *****************
  1915 ;; Defined at:
  1916 ;;		line 398 in file "dc_motor.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  mL              1   33[COMRAM] PTR struct DC_motor
  1919 ;;		 -> motorL(9), 
  1920 ;;  mR              1   34[COMRAM] PTR struct DC_motor
  1921 ;;		 -> motorR(9), 
  1922 ;;  path            2   35[COMRAM] PTR struct PathStep
  1923 ;;		 -> path(200), 
  1924 ;;  pathLength      2   37[COMRAM] unsigned int 
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;  action          2   45[COMRAM] unsigned int 
  1927 ;;  time            2   43[COMRAM] unsigned int 
  1928 ;;  i               2   47[COMRAM] int 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      void 
  1931 ;; Registers used:
  1932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1938 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1939 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1940 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1941 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1942 ;;Total ram usage:       16 bytes
  1943 ;; Hardware stack levels used: 1
  1944 ;; Hardware stack levels required when called: 6
  1945 ;; This function calls:
  1946 ;;		_moveWhite
  1947 ;;		_reverseStraight
  1948 ;;		_reverseTurn
  1949 ;; This function is called by:
  1950 ;;		_main
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           	psect	text1
  1955   0033EA                     __ptext1:
  1956                           	callstack 0
  1957   0033EA                     _returnHome:
  1958                           	callstack 24
  1959   0033EA                     
  1960                           ;dc_motor.c: 398: void returnHome(struct DC_motor *mL, struct DC_motor *mR, struct PathS
      +                          tep *path, unsigned int pathLength);dc_motor.c: 399: {;dc_motor.c: 401:     LATGbits.LAT
      +                          G0 = 0;
  1961   0033EA  907F               	bcf	127,0,c	;volatile
  1962                           
  1963                           ;dc_motor.c: 402:     LATEbits.LATE7 = 0;
  1964   0033EC  9E7D               	bcf	125,7,c	;volatile
  1965                           
  1966                           ;dc_motor.c: 403:     LATAbits.LATA3 = 0;
  1967   0033EE  9679               	bcf	121,3,c	;volatile
  1968   0033F0                     
  1969                           ;dc_motor.c: 407:     moveWhite(&motorL,&motorR);
  1970   0033F0  0ED6               	movlw	low _motorL
  1971   0033F2  6E1D               	movwf	moveWhite@mL^0,c
  1972   0033F4  0ECD               	movlw	low _motorR
  1973   0033F6  6E1E               	movwf	moveWhite@mR^0,c
  1974   0033F8  ECD8  F021         	call	_moveWhite	;wreg free
  1975   0033FC                     
  1976                           ;dc_motor.c: 409:     for (int i = pathLength-1; i >= 0; i--) {
  1977   0033FC  0EFF               	movlw	255
  1978   0033FE  2426               	addwf	returnHome@pathLength^0,w,c
  1979   003400  6E30               	movwf	returnHome@i^0,c
  1980   003402  0EFF               	movlw	255
  1981   003404  2027               	addwfc	(returnHome@pathLength+1)^0,w,c
  1982   003406  6E31               	movwf	(returnHome@i+1)^0,c
  1983   003408                     l6020:
  1984   003408  BE31               	btfsc	(returnHome@i+1)^0,7,c
  1985   00340A  EF0B  F01A         	goto	u5420
  1986   00340E  EF09  F01A         	goto	u5421
  1987   003412                     u5421:
  1988   003412  EF0D  F01A         	goto	l6024
  1989   003416                     u5420:
  1990   003416  EF66  F01A         	goto	l518
  1991   00341A                     l6024:
  1992                           
  1993                           ;dc_motor.c: 410:         unsigned int action = path[i].action;
  1994   00341A  90D8               	bcf	status,0,c
  1995   00341C  3430               	rlcf	returnHome@i^0,w,c
  1996   00341E  6ED9               	movwf	fsr2l,c
  1997   003420  3431               	rlcf	(returnHome@i+1)^0,w,c
  1998   003422  6EDA               	movwf	fsr2h,c
  1999   003424  90D8               	bcf	status,0,c
  2000   003426  36D9               	rlcf	fsr2l,f,c
  2001   003428  36DA               	rlcf	fsr2h,f,c
  2002   00342A  5024               	movf	returnHome@path^0,w,c
  2003   00342C  26D9               	addwf	fsr2l,f,c
  2004   00342E  5025               	movf	(returnHome@path+1)^0,w,c
  2005   003430  22DA               	addwfc	fsr2h,f,c
  2006   003432  CFDE F02E          	movff	postinc2,returnHome@action
  2007   003436  CFDD F02F          	movff	postdec2,returnHome@action+1
  2008                           
  2009                           ;dc_motor.c: 411:         unsigned int time = path[i].time;
  2010   00343A  C030  F028         	movff	returnHome@i,??_returnHome
  2011   00343E  C031  F029         	movff	returnHome@i+1,??_returnHome+1
  2012   003442  90D8               	bcf	status,0,c
  2013   003444  3628               	rlcf	??_returnHome^0,f,c
  2014   003446  3629               	rlcf	(??_returnHome+1)^0,f,c
  2015   003448  90D8               	bcf	status,0,c
  2016   00344A  3628               	rlcf	??_returnHome^0,f,c
  2017   00344C  3629               	rlcf	(??_returnHome+1)^0,f,c
  2018   00344E  5028               	movf	??_returnHome^0,w,c
  2019   003450  2424               	addwf	returnHome@path^0,w,c
  2020   003452  6E2A               	movwf	(??_returnHome+2)^0,c
  2021   003454  5029               	movf	(??_returnHome+1)^0,w,c
  2022   003456  2025               	addwfc	(returnHome@path+1)^0,w,c
  2023   003458  6E2B               	movwf	(??_returnHome+3)^0,c
  2024   00345A  0E02               	movlw	2
  2025   00345C  242A               	addwf	(??_returnHome+2)^0,w,c
  2026   00345E  6ED9               	movwf	fsr2l,c
  2027   003460  0E00               	movlw	0
  2028   003462  202B               	addwfc	(??_returnHome+3)^0,w,c
  2029   003464  6EDA               	movwf	fsr2h,c
  2030   003466  CFDE F02C          	movff	postinc2,returnHome@time
  2031   00346A  CFDD F02D          	movff	postdec2,returnHome@time+1
  2032   00346E                     
  2033                           ;dc_motor.c: 413:         if (action == 3){reverseStraight(mL, mR, time);}
  2034   00346E  0E03               	movlw	3
  2035   003470  182E               	xorwf	returnHome@action^0,w,c
  2036   003472  102F               	iorwf	(returnHome@action+1)^0,w,c
  2037   003474  A4D8               	btfss	status,2,c
  2038   003476  EF3F  F01A         	goto	u5431
  2039   00347A  EF41  F01A         	goto	u5430
  2040   00347E                     u5431:
  2041   00347E  EF4D  F01A         	goto	l6030
  2042   003482                     u5430:
  2043   003482  C022  F019         	movff	returnHome@mL,reverseStraight@mL
  2044   003486  C023  F01A         	movff	returnHome@mR,reverseStraight@mR
  2045   00348A  C02C  F01B         	movff	returnHome@time,reverseStraight@time
  2046   00348E  C02D  F01C         	movff	returnHome@time+1,reverseStraight@time+1
  2047   003492  EC01  F019         	call	_reverseStraight	;wreg free
  2048   003496  EF61  F01A         	goto	l6034
  2049   00349A                     l6030:
  2050                           
  2051                           ;dc_motor.c: 416:             reverseTurn(mL, mR, action);
  2052   00349A  C022  F01D         	movff	returnHome@mL,reverseTurn@mL
  2053   00349E  C023  F01E         	movff	returnHome@mR,reverseTurn@mR
  2054   0034A2  C02E  F01F         	movff	returnHome@action,reverseTurn@action
  2055   0034A6  ECCA  F01A         	call	_reverseTurn	;wreg free
  2056   0034AA                     
  2057                           ;dc_motor.c: 417:             _delay((unsigned long)((200)*(64000000/4000.0)));
  2058   0034AA  0E11               	movlw	17
  2059   0034AC  6E29               	movwf	(??_returnHome+1)^0,c
  2060   0034AE  0E3C               	movlw	60
  2061   0034B0  6E28               	movwf	??_returnHome^0,c
  2062   0034B2  0ECB               	movlw	203
  2063   0034B4                     u5537:
  2064   0034B4  2EE8               	decfsz	wreg,f,c
  2065   0034B6  D7FE               	bra	u5537
  2066   0034B8  2E28               	decfsz	??_returnHome^0,f,c
  2067   0034BA  D7FC               	bra	u5537
  2068   0034BC  2E29               	decfsz	(??_returnHome+1)^0,f,c
  2069   0034BE  D7FA               	bra	u5537
  2070   0034C0  0000               	nop	
  2071   0034C2                     l6034:
  2072                           
  2073                           ;dc_motor.c: 421:     }
  2074   0034C2  0630               	decf	returnHome@i^0,f,c
  2075   0034C4  A0D8               	btfss	status,0,c
  2076   0034C6  0631               	decf	(returnHome@i+1)^0,f,c
  2077   0034C8  EF04  F01A         	goto	l6020
  2078   0034CC                     l518:
  2079   0034CC  0003               	sleep		;# 
  2080   0034CE  0012               	return		;funcret
  2081   0034D0                     __end_of_returnHome:
  2082                           	callstack 0
  2083                           
  2084 ;; *************** function _reverseTurn *****************
  2085 ;; Defined at:
  2086 ;;		line 353 in file "dc_motor.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2089 ;;		 -> motorL(9), 
  2090 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2091 ;;		 -> motorR(9), 
  2092 ;;  action          1   30[COMRAM] unsigned char 
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;		None
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  1    wreg      void 
  2097 ;; Registers used:
  2098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2104 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;Total ram usage:        5 bytes
  2109 ;; Hardware stack levels used: 1
  2110 ;; Hardware stack levels required when called: 5
  2111 ;; This function calls:
  2112 ;;		_left135
  2113 ;;		_left90
  2114 ;;		_right135
  2115 ;;		_right90
  2116 ;;		_turn180
  2117 ;; This function is called by:
  2118 ;;		_returnHome
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text2
  2123   003594                     __ptext2:
  2124                           	callstack 0
  2125   003594                     _reverseTurn:
  2126                           	callstack 24
  2127   003594                     
  2128                           ;dc_motor.c: 354:     if (action == 1) {
  2129   003594  041F               	decf	reverseTurn@action^0,w,c
  2130   003596  A4D8               	btfss	status,2,c
  2131   003598  EFD0  F01A         	goto	u5101
  2132   00359C  EFD2  F01A         	goto	u5100
  2133   0035A0                     u5101:
  2134   0035A0  EFE5  F01A         	goto	l5802
  2135   0035A4                     u5100:
  2136   0035A4                     
  2137                           ;dc_motor.c: 355:         left90(mL, mR);
  2138   0035A4  C01D  F019         	movff	reverseTurn@mL,left90@mL
  2139   0035A8  C01E  F01A         	movff	reverseTurn@mR,left90@mR
  2140   0035AC  EC86  F022         	call	_left90	;wreg free
  2141   0035B0                     l5800:
  2142                           
  2143                           ;dc_motor.c: 356:         _delay((unsigned long)((300)*(64000000/4000.0)));
  2144   0035B0  0E19               	movlw	25
  2145   0035B2  6E21               	movwf	(??_reverseTurn+1)^0,c
  2146   0035B4  0E5A               	movlw	90
  2147   0035B6  6E20               	movwf	??_reverseTurn^0,c
  2148   0035B8  0EB2               	movlw	178
  2149   0035BA                     u5547:
  2150   0035BA  2EE8               	decfsz	wreg,f,c
  2151   0035BC  D7FE               	bra	u5547
  2152   0035BE  2E20               	decfsz	??_reverseTurn^0,f,c
  2153   0035C0  D7FC               	bra	u5547
  2154   0035C2  2E21               	decfsz	(??_reverseTurn+1)^0,f,c
  2155   0035C4  D7FA               	bra	u5547
  2156                           
  2157                           ;dc_motor.c: 357:     } else if (action == 2) {
  2158   0035C6  EF29  F01B         	goto	l502
  2159   0035CA                     l5802:
  2160   0035CA  0E02               	movlw	2
  2161   0035CC  181F               	xorwf	reverseTurn@action^0,w,c
  2162   0035CE  A4D8               	btfss	status,2,c
  2163   0035D0  EFEC  F01A         	goto	u5111
  2164   0035D4  EFEE  F01A         	goto	u5110
  2165   0035D8                     u5111:
  2166   0035D8  EFF6  F01A         	goto	l5808
  2167   0035DC                     u5110:
  2168   0035DC                     
  2169                           ;dc_motor.c: 358:         right90(mL, mR);
  2170   0035DC  C01D  F019         	movff	reverseTurn@mL,right90@mL
  2171   0035E0  C01E  F01A         	movff	reverseTurn@mR,right90@mR
  2172   0035E4  EC6E  F022         	call	_right90	;wreg free
  2173   0035E8  EFD8  F01A         	goto	l5800
  2174   0035EC                     l5808:
  2175   0035EC  0E04               	movlw	4
  2176   0035EE  181F               	xorwf	reverseTurn@action^0,w,c
  2177   0035F0  A4D8               	btfss	status,2,c
  2178   0035F2  EFFD  F01A         	goto	u5121
  2179   0035F6  EFFF  F01A         	goto	u5120
  2180   0035FA                     u5121:
  2181   0035FA  EF07  F01B         	goto	l5814
  2182   0035FE                     u5120:
  2183   0035FE                     
  2184                           ;dc_motor.c: 361:         turn180(mL, mR);
  2185   0035FE  C01D  F019         	movff	reverseTurn@mL,turn180@mL
  2186   003602  C01E  F01A         	movff	reverseTurn@mR,turn180@mR
  2187   003606  EC3C  F022         	call	_turn180	;wreg free
  2188   00360A  EFD8  F01A         	goto	l5800
  2189   00360E                     l5814:
  2190   00360E  0E05               	movlw	5
  2191   003610  181F               	xorwf	reverseTurn@action^0,w,c
  2192   003612  A4D8               	btfss	status,2,c
  2193   003614  EF0E  F01B         	goto	u5131
  2194   003618  EF10  F01B         	goto	u5130
  2195   00361C                     u5131:
  2196   00361C  EF18  F01B         	goto	l5820
  2197   003620                     u5130:
  2198   003620                     
  2199                           ;dc_motor.c: 364:         left135(mL, mR);
  2200   003620  C01D  F019         	movff	reverseTurn@mL,left135@mL
  2201   003624  C01E  F01A         	movff	reverseTurn@mR,left135@mR
  2202   003628  EC23  F022         	call	_left135	;wreg free
  2203   00362C  EFD8  F01A         	goto	l5800
  2204   003630                     l5820:
  2205   003630  0E06               	movlw	6
  2206   003632  181F               	xorwf	reverseTurn@action^0,w,c
  2207   003634  A4D8               	btfss	status,2,c
  2208   003636  EF1F  F01B         	goto	u5141
  2209   00363A  EF21  F01B         	goto	u5140
  2210   00363E                     u5141:
  2211   00363E  EF29  F01B         	goto	l496
  2212   003642                     u5140:
  2213   003642                     
  2214                           ;dc_motor.c: 367:         right135(mL, mR);
  2215   003642  C01D  F019         	movff	reverseTurn@mL,right135@mL
  2216   003646  C01E  F01A         	movff	reverseTurn@mR,right135@mR
  2217   00364A  EC0A  F022         	call	_right135	;wreg free
  2218   00364E  EFD8  F01A         	goto	l5800
  2219   003652                     l496:
  2220   003652                     l502:
  2221   003652  0012               	return		;funcret
  2222   003654                     __end_of_reverseTurn:
  2223                           	callstack 0
  2224                           
  2225 ;; *************** function _reverseStraight *****************
  2226 ;; Defined at:
  2227 ;;		line 381 in file "dc_motor.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  2230 ;;		 -> motorL(9), 
  2231 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  2232 ;;		 -> motorR(9), 
  2233 ;;  time            2   26[COMRAM] unsigned int 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  delayMs         2   30[COMRAM] int 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2245 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2246 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2247 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2248 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2249 ;;Total ram usage:        8 bytes
  2250 ;; Hardware stack levels used: 1
  2251 ;; Hardware stack levels required when called: 4
  2252 ;; This function calls:
  2253 ;;		_customDelayMs
  2254 ;;		_fullSpeedAhead
  2255 ;;		_stop
  2256 ;; This function is called by:
  2257 ;;		_returnHome
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text3
  2262   003202                     __ptext3:
  2263                           	callstack 0
  2264   003202                     _reverseStraight:
  2265                           	callstack 25
  2266   003202                     
  2267                           ;dc_motor.c: 383:     int delayMs = 1000;
  2268   003202  0E03               	movlw	3
  2269   003204  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2270   003206  0EE8               	movlw	232
  2271   003208  6E1F               	movwf	reverseStraight@delayMs^0,c
  2272   00320A                     
  2273                           ;dc_motor.c: 386:     if (time<5500 && time>6100){delayMs = 3000; }
  2274   00320A  0E7C               	movlw	124
  2275   00320C  5C1B               	subwf	reverseStraight@time^0,w,c
  2276   00320E  0E15               	movlw	21
  2277   003210  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2278   003212  B0D8               	btfsc	status,0,c
  2279   003214  EF0E  F019         	goto	u5151
  2280   003218  EF10  F019         	goto	u5150
  2281   00321C                     u5151:
  2282   00321C  EF1F  F019         	goto	l5834
  2283   003220                     u5150:
  2284   003220  0ED5               	movlw	213
  2285   003222  5C1B               	subwf	reverseStraight@time^0,w,c
  2286   003224  0E17               	movlw	23
  2287   003226  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2288   003228  A0D8               	btfss	status,0,c
  2289   00322A  EF19  F019         	goto	u5161
  2290   00322E  EF1B  F019         	goto	u5160
  2291   003232                     u5161:
  2292   003232  EF1F  F019         	goto	l5834
  2293   003236                     u5160:
  2294   003236  0E0B               	movlw	11
  2295   003238  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2296   00323A  0EB8               	movlw	184
  2297   00323C  6E1F               	movwf	reverseStraight@delayMs^0,c
  2298   00323E                     l5834:
  2299                           
  2300                           ;dc_motor.c: 387:     if (time<3700 && time>4100){delayMs = 2000; }
  2301   00323E  0E74               	movlw	116
  2302   003240  5C1B               	subwf	reverseStraight@time^0,w,c
  2303   003242  0E0E               	movlw	14
  2304   003244  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2305   003246  B0D8               	btfsc	status,0,c
  2306   003248  EF28  F019         	goto	u5171
  2307   00324C  EF2A  F019         	goto	u5170
  2308   003250                     u5171:
  2309   003250  EF39  F019         	goto	l5840
  2310   003254                     u5170:
  2311   003254  0E05               	movlw	5
  2312   003256  5C1B               	subwf	reverseStraight@time^0,w,c
  2313   003258  0E10               	movlw	16
  2314   00325A  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2315   00325C  A0D8               	btfss	status,0,c
  2316   00325E  EF33  F019         	goto	u5181
  2317   003262  EF35  F019         	goto	u5180
  2318   003266                     u5181:
  2319   003266  EF39  F019         	goto	l5840
  2320   00326A                     u5180:
  2321   00326A  0E07               	movlw	7
  2322   00326C  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2323   00326E  0ED0               	movlw	208
  2324   003270  6E1F               	movwf	reverseStraight@delayMs^0,c
  2325   003272                     l5840:
  2326                           
  2327                           ;dc_motor.c: 388:     if (time<1700 && time>2100){delayMs = 1000;}
  2328   003272  0EA4               	movlw	164
  2329   003274  5C1B               	subwf	reverseStraight@time^0,w,c
  2330   003276  0E06               	movlw	6
  2331   003278  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2332   00327A  B0D8               	btfsc	status,0,c
  2333   00327C  EF42  F019         	goto	u5191
  2334   003280  EF44  F019         	goto	u5190
  2335   003284                     u5191:
  2336   003284  EF53  F019         	goto	l5846
  2337   003288                     u5190:
  2338   003288  0E35               	movlw	53
  2339   00328A  5C1B               	subwf	reverseStraight@time^0,w,c
  2340   00328C  0E08               	movlw	8
  2341   00328E  581C               	subwfb	(reverseStraight@time+1)^0,w,c
  2342   003290  A0D8               	btfss	status,0,c
  2343   003292  EF4D  F019         	goto	u5201
  2344   003296  EF4F  F019         	goto	u5200
  2345   00329A                     u5201:
  2346   00329A  EF53  F019         	goto	l5846
  2347   00329E                     u5200:
  2348   00329E  0E03               	movlw	3
  2349   0032A0  6E20               	movwf	(reverseStraight@delayMs+1)^0,c
  2350   0032A2  0EE8               	movlw	232
  2351   0032A4  6E1F               	movwf	reverseStraight@delayMs^0,c
  2352   0032A6                     l5846:
  2353                           
  2354                           ;dc_motor.c: 390:     fullSpeedAhead(mL, mR);
  2355   0032A6  C019  F014         	movff	reverseStraight@mL,fullSpeedAhead@mL
  2356   0032AA  C01A  F015         	movff	reverseStraight@mR,fullSpeedAhead@mR
  2357   0032AE  EC1D  F01E         	call	_fullSpeedAhead	;wreg free
  2358   0032B2                     
  2359                           ;dc_motor.c: 391:     customDelayMs(delayMs);
  2360   0032B2  C01F  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2361   0032B6  C020  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2362   0032BA  EC6E  F021         	call	_customDelayMs	;wreg free
  2363   0032BE                     
  2364                           ;dc_motor.c: 392:     stop(mL, mR);
  2365   0032BE  C019  F014         	movff	reverseStraight@mL,stop@mL
  2366   0032C2  C01A  F015         	movff	reverseStraight@mR,stop@mR
  2367   0032C6  EC16  F01D         	call	_stop	;wreg free
  2368   0032CA                     
  2369                           ;dc_motor.c: 393:     LATGbits.LATG0 = !LATGbits.LATG0;
  2370   0032CA  A07F               	btfss	127,0,c	;volatile
  2371   0032CC  EF6A  F019         	goto	u5211
  2372   0032D0  EF6E  F019         	goto	u5210
  2373   0032D4                     u5211:
  2374   0032D4  6A1D               	clrf	??_reverseStraight^0,c
  2375   0032D6  2A1D               	incf	??_reverseStraight^0,f,c
  2376   0032D8  EF6F  F019         	goto	u5228
  2377   0032DC                     u5210:
  2378   0032DC  6A1D               	clrf	??_reverseStraight^0,c
  2379   0032DE                     u5228:
  2380   0032DE  507F               	movf	127,w,c	;volatile
  2381   0032E0  181D               	xorwf	??_reverseStraight^0,w,c
  2382   0032E2  0BFE               	andlw	-2
  2383   0032E4  181D               	xorwf	??_reverseStraight^0,w,c
  2384   0032E6  6E7F               	movwf	127,c	;volatile
  2385   0032E8                     
  2386                           ;dc_motor.c: 394:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2387   0032E8  0E19               	movlw	25
  2388   0032EA  6E1E               	movwf	(??_reverseStraight+1)^0,c
  2389   0032EC  0E5A               	movlw	90
  2390   0032EE  6E1D               	movwf	??_reverseStraight^0,c
  2391   0032F0  0EB2               	movlw	178
  2392   0032F2                     u5557:
  2393   0032F2  2EE8               	decfsz	wreg,f,c
  2394   0032F4  D7FE               	bra	u5557
  2395   0032F6  2E1D               	decfsz	??_reverseStraight^0,f,c
  2396   0032F8  D7FC               	bra	u5557
  2397   0032FA  2E1E               	decfsz	(??_reverseStraight+1)^0,f,c
  2398   0032FC  D7FA               	bra	u5557
  2399   0032FE  0012               	return		;funcret
  2400   003300                     __end_of_reverseStraight:
  2401                           	callstack 0
  2402                           
  2403 ;; *************** function _fullSpeedAhead *****************
  2404 ;; Defined at:
  2405 ;;		line 147 in file "dc_motor.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  2408 ;;		 -> motorL(9), 
  2409 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  2410 ;;		 -> motorR(9), 
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;  power           2   22[COMRAM] int 
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  1    wreg      void 
  2415 ;; Registers used:
  2416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2422 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2423 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2424 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2425 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2426 ;;Total ram usage:        5 bytes
  2427 ;; Hardware stack levels used: 1
  2428 ;; Hardware stack levels required when called: 3
  2429 ;; This function calls:
  2430 ;;		_setMotorPWM
  2431 ;; This function is called by:
  2432 ;;		_main
  2433 ;;		_reverseStraight
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text4
  2438   003C3A                     __ptext4:
  2439                           	callstack 0
  2440   003C3A                     _fullSpeedAhead:
  2441                           	callstack 25
  2442   003C3A                     
  2443                           ;dc_motor.c: 147: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 148: {;dc_
      +                          motor.c: 150:     mL->direction = 1;
  2444   003C3A  5014               	movf	fullSpeedAhead@mL^0,w,c
  2445   003C3C  6ED9               	movwf	fsr2l,c
  2446   003C3E  6ADA               	clrf	fsr2h,c
  2447   003C40  0E01               	movlw	1
  2448   003C42  26D9               	addwf	fsr2l,f,c
  2449   003C44  0E01               	movlw	1
  2450   003C46  6EDF               	movwf	indf2,c
  2451                           
  2452                           ;dc_motor.c: 151:     mR->direction = 1;
  2453   003C48  5015               	movf	fullSpeedAhead@mR^0,w,c
  2454   003C4A  6ED9               	movwf	fsr2l,c
  2455   003C4C  6ADA               	clrf	fsr2h,c
  2456   003C4E  0E01               	movlw	1
  2457   003C50  26D9               	addwf	fsr2l,f,c
  2458   003C52  0E01               	movlw	1
  2459   003C54  6EDF               	movwf	indf2,c
  2460   003C56                     
  2461                           ;dc_motor.c: 153:     for(int power = 0; power <= 40; power++) {
  2462   003C56  0E00               	movlw	0
  2463   003C58  6E18               	movwf	(fullSpeedAhead@power+1)^0,c
  2464   003C5A  0E00               	movlw	0
  2465   003C5C  6E17               	movwf	fullSpeedAhead@power^0,c
  2466   003C5E                     l5644:
  2467                           
  2468                           ;dc_motor.c: 154:         mL->power = power;
  2469   003C5E  5014               	movf	fullSpeedAhead@mL^0,w,c
  2470   003C60  6ED9               	movwf	fsr2l,c
  2471   003C62  6ADA               	clrf	fsr2h,c
  2472   003C64  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2473                           
  2474                           ;dc_motor.c: 155:         mR->power = power;
  2475   003C68  5015               	movf	fullSpeedAhead@mR^0,w,c
  2476   003C6A  6ED9               	movwf	fsr2l,c
  2477   003C6C  6ADA               	clrf	fsr2h,c
  2478   003C6E  C017  FFDF         	movff	fullSpeedAhead@power,indf2
  2479   003C72                     
  2480                           ;dc_motor.c: 158:         setMotorPWM(mL);
  2481   003C72  C014  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2482   003C76  EC52  F017         	call	_setMotorPWM	;wreg free
  2483   003C7A                     
  2484                           ;dc_motor.c: 159:         setMotorPWM(mR);
  2485   003C7A  C015  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2486   003C7E  EC52  F017         	call	_setMotorPWM	;wreg free
  2487   003C82                     
  2488                           ;dc_motor.c: 162:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2489   003C82  0E0B               	movlw	11
  2490   003C84  6E16               	movwf	??_fullSpeedAhead^0,c
  2491   003C86  0E62               	movlw	98
  2492   003C88                     u5567:
  2493   003C88  2EE8               	decfsz	wreg,f,c
  2494   003C8A  D7FE               	bra	u5567
  2495   003C8C  2E16               	decfsz	??_fullSpeedAhead^0,f,c
  2496   003C8E  D7FC               	bra	u5567
  2497   003C90  D000               	nop2	
  2498   003C92                     
  2499                           ;dc_motor.c: 163:     }
  2500   003C92  4A17               	infsnz	fullSpeedAhead@power^0,f,c
  2501   003C94  2A18               	incf	(fullSpeedAhead@power+1)^0,f,c
  2502   003C96  BE18               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2503   003C98  EF57  F01E         	goto	u5091
  2504   003C9C  5018               	movf	(fullSpeedAhead@power+1)^0,w,c
  2505   003C9E  E109               	bnz	u5090
  2506   003CA0  0E29               	movlw	41
  2507   003CA2  5C17               	subwf	fullSpeedAhead@power^0,w,c
  2508   003CA4  A0D8               	btfss	status,0,c
  2509   003CA6  EF57  F01E         	goto	u5091
  2510   003CAA  EF59  F01E         	goto	u5090
  2511   003CAE                     u5091:
  2512   003CAE  EF2F  F01E         	goto	l5644
  2513   003CB2                     u5090:
  2514   003CB2  0012               	return		;funcret
  2515   003CB4                     __end_of_fullSpeedAhead:
  2516                           	callstack 0
  2517                           
  2518 ;; *************** function _customDelayMs *****************
  2519 ;; Defined at:
  2520 ;;		line 374 in file "dc_motor.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  milliseconds    2    1[COMRAM] unsigned int 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  i               2    4[COMRAM] unsigned int 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      void 
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2534 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2537 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2538 ;;Total ram usage:        5 bytes
  2539 ;; Hardware stack levels used: 1
  2540 ;; Hardware stack levels required when called: 1
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		_reverseStraight
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	text5
  2549   0042DC                     __ptext5:
  2550                           	callstack 0
  2551   0042DC                     _customDelayMs:
  2552                           	callstack 27
  2553   0042DC                     
  2554                           ;dc_motor.c: 375:     for (unsigned int i = 0; i < milliseconds; i++) {
  2555   0042DC  0E00               	movlw	0
  2556   0042DE  6E06               	movwf	(customDelayMs@i+1)^0,c
  2557   0042E0  0E00               	movlw	0
  2558   0042E2  6E05               	movwf	customDelayMs@i^0,c
  2559   0042E4  EF7E  F021         	goto	l505
  2560   0042E8                     l4062:
  2561                           
  2562                           ;dc_motor.c: 376:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2563   0042E8  0E15               	movlw	21
  2564   0042EA  6E04               	movwf	??_customDelayMs^0,c
  2565   0042EC  0EC6               	movlw	198
  2566   0042EE                     u5577:
  2567   0042EE  2EE8               	decfsz	wreg,f,c
  2568   0042F0  D7FE               	bra	u5577
  2569   0042F2  2E04               	decfsz	??_customDelayMs^0,f,c
  2570   0042F4  D7FC               	bra	u5577
  2571   0042F6  D000               	nop2	
  2572   0042F8                     
  2573                           ;dc_motor.c: 377:     }
  2574   0042F8  4A05               	infsnz	customDelayMs@i^0,f,c
  2575   0042FA  2A06               	incf	(customDelayMs@i+1)^0,f,c
  2576   0042FC                     l505:
  2577   0042FC  5002               	movf	customDelayMs@milliseconds^0,w,c
  2578   0042FE  5C05               	subwf	customDelayMs@i^0,w,c
  2579   004300  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  2580   004302  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  2581   004304  A0D8               	btfss	status,0,c
  2582   004306  EF87  F021         	goto	u3281
  2583   00430A  EF89  F021         	goto	u3280
  2584   00430E                     u3281:
  2585   00430E  EF74  F021         	goto	l4062
  2586   004312                     u3280:
  2587   004312  0012               	return		;funcret
  2588   004314                     __end_of_customDelayMs:
  2589                           	callstack 0
  2590                           
  2591 ;; *************** function _moveWhite *****************
  2592 ;; Defined at:
  2593 ;;		line 324 in file "dc_motor.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  2596 ;;		 -> motorL(9), 
  2597 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  2598 ;;		 -> motorR(9), 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;		None
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2610 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2612 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2613 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2614 ;;Total ram usage:        4 bytes
  2615 ;; Hardware stack levels used: 1
  2616 ;; Hardware stack levels required when called: 5
  2617 ;; This function calls:
  2618 ;;		_backHalf
  2619 ;;		_turn180
  2620 ;; This function is called by:
  2621 ;;		_returnHome
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           	psect	text6
  2626   0043B0                     __ptext6:
  2627                           	callstack 0
  2628   0043B0                     _moveWhite:
  2629                           	callstack 24
  2630   0043B0                     
  2631                           ;dc_motor.c: 324: void moveWhite(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 3
      +                          25: {;dc_motor.c: 327:     backHalf(mL,mR);
  2632   0043B0  C01D  F019         	movff	moveWhite@mL,backHalf@mL
  2633   0043B4  C01E  F01A         	movff	moveWhite@mR,backHalf@mR
  2634   0043B8  EC9E  F022         	call	_backHalf	;wreg free
  2635   0043BC                     
  2636                           ;dc_motor.c: 328:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2637   0043BC  0E29               	movlw	41
  2638   0043BE  6E20               	movwf	(??_moveWhite+1)^0,c
  2639   0043C0  0E96               	movlw	150
  2640   0043C2  6E1F               	movwf	??_moveWhite^0,c
  2641   0043C4  0E7F               	movlw	127
  2642   0043C6                     u5587:
  2643   0043C6  2EE8               	decfsz	wreg,f,c
  2644   0043C8  D7FE               	bra	u5587
  2645   0043CA  2E1F               	decfsz	??_moveWhite^0,f,c
  2646   0043CC  D7FC               	bra	u5587
  2647   0043CE  2E20               	decfsz	(??_moveWhite+1)^0,f,c
  2648   0043D0  D7FA               	bra	u5587
  2649   0043D2  0000               	nop	
  2650   0043D4                     
  2651                           ;dc_motor.c: 329:     turn180(mL,mR);
  2652   0043D4  C01D  F019         	movff	moveWhite@mL,turn180@mL
  2653   0043D8  C01E  F01A         	movff	moveWhite@mR,turn180@mR
  2654   0043DC  EC3C  F022         	call	_turn180	;wreg free
  2655   0043E0  0012               	return		;funcret
  2656   0043E2                     __end_of_moveWhite:
  2657                           	callstack 0
  2658                           
  2659 ;; *************** function _reading_hue *****************
  2660 ;; Defined at:
  2661 ;;		line 90 in file "color.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;  cCurr           1   65[COMRAM] PTR struct colors
  2664 ;;		 -> colorCurrent(8), 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  led_state      50    0        unsigned char [50]
  2667 ;;  hue             2   69[COMRAM] unsigned int 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  2   65[COMRAM] unsigned int 
  2670 ;; Registers used:
  2671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2677 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2679 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2680 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2681 ;;Total ram usage:        6 bytes
  2682 ;; Hardware stack levels used: 1
  2683 ;; Hardware stack levels required when called: 4
  2684 ;; This function calls:
  2685 ;;		_color_read_Blue
  2686 ;;		_color_read_Clear
  2687 ;;		_color_read_Green
  2688 ;;		_color_read_Red
  2689 ;;		_convert_rgb2hue
  2690 ;; This function is called by:
  2691 ;;		_main
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text7
  2696   003300                     __ptext7:
  2697                           	callstack 0
  2698   003300                     _reading_hue:
  2699                           	callstack 26
  2700   003300                     
  2701                           ;color.c: 90: unsigned int reading_hue(colors *cCurr);color.c: 91: {;color.c: 92:     un
      +                          signed int hue;;color.c: 94:     char led_state[50];;color.c: 99:     LATGbits.LATG0 = 1
      +                          ;
  2702   003300  807F               	bsf	127,0,c	;volatile
  2703                           
  2704                           ;color.c: 100:     LATEbits.LATE7 = 0;
  2705   003302  9E7D               	bcf	125,7,c	;volatile
  2706                           
  2707                           ;color.c: 101:     LATAbits.LATA3 = 0;
  2708   003304  9679               	bcf	121,3,c	;volatile
  2709   003306                     
  2710                           ;color.c: 102:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2711   003306  0E29               	movlw	41
  2712   003308  6E45               	movwf	(??_reading_hue+1)^0,c
  2713   00330A  0E96               	movlw	150
  2714   00330C  6E44               	movwf	??_reading_hue^0,c
  2715   00330E  0E7F               	movlw	127
  2716   003310                     u5597:
  2717   003310  2EE8               	decfsz	wreg,f,c
  2718   003312  D7FE               	bra	u5597
  2719   003314  2E44               	decfsz	??_reading_hue^0,f,c
  2720   003316  D7FC               	bra	u5597
  2721   003318  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2722   00331A  D7FA               	bra	u5597
  2723   00331C  0000               	nop	
  2724   00331E                     
  2725                           ;color.c: 103:     (cCurr->red)= color_read_Red();
  2726   00331E  EC26  F020         	call	_color_read_Red	;wreg free
  2727   003322  5042               	movf	reading_hue@cCurr^0,w,c
  2728   003324  6ED9               	movwf	fsr2l,c
  2729   003326  6ADA               	clrf	fsr2h,c
  2730   003328  C006  FFDE         	movff	?_color_read_Red,postinc2
  2731   00332C  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  2732   003330                     
  2733                           ;color.c: 108:     LATGbits.LATG0 = 0;
  2734   003330  907F               	bcf	127,0,c	;volatile
  2735   003332                     
  2736                           ;color.c: 109:     LATEbits.LATE7 = 1;
  2737   003332  8E7D               	bsf	125,7,c	;volatile
  2738   003334                     
  2739                           ;color.c: 110:     LATAbits.LATA3 = 0;
  2740   003334  9679               	bcf	121,3,c	;volatile
  2741   003336                     
  2742                           ;color.c: 111:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2743   003336  0E29               	movlw	41
  2744   003338  6E45               	movwf	(??_reading_hue+1)^0,c
  2745   00333A  0E96               	movlw	150
  2746   00333C  6E44               	movwf	??_reading_hue^0,c
  2747   00333E  0E7F               	movlw	127
  2748   003340                     u5607:
  2749   003340  2EE8               	decfsz	wreg,f,c
  2750   003342  D7FE               	bra	u5607
  2751   003344  2E44               	decfsz	??_reading_hue^0,f,c
  2752   003346  D7FC               	bra	u5607
  2753   003348  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2754   00334A  D7FA               	bra	u5607
  2755   00334C  0000               	nop	
  2756                           
  2757                           ;color.c: 112:     (cCurr->green) = color_read_Green();
  2758   00334E  EC4E  F020         	call	_color_read_Green	;wreg free
  2759   003352  5042               	movf	reading_hue@cCurr^0,w,c
  2760   003354  6ED9               	movwf	fsr2l,c
  2761   003356  6ADA               	clrf	fsr2h,c
  2762   003358  0E02               	movlw	2
  2763   00335A  26D9               	addwf	fsr2l,f,c
  2764   00335C  C006  FFDE         	movff	?_color_read_Green,postinc2
  2765   003360  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  2766   003364                     
  2767                           ;color.c: 118:     LATGbits.LATG0 = 0;
  2768   003364  907F               	bcf	127,0,c	;volatile
  2769   003366                     
  2770                           ;color.c: 119:     LATEbits.LATE7 = 0;
  2771   003366  9E7D               	bcf	125,7,c	;volatile
  2772   003368                     
  2773                           ;color.c: 120:     LATAbits.LATA3 = 1;
  2774   003368  8679               	bsf	121,3,c	;volatile
  2775   00336A                     
  2776                           ;color.c: 121:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2777   00336A  0E29               	movlw	41
  2778   00336C  6E45               	movwf	(??_reading_hue+1)^0,c
  2779   00336E  0E96               	movlw	150
  2780   003370  6E44               	movwf	??_reading_hue^0,c
  2781   003372  0E7F               	movlw	127
  2782   003374                     u5617:
  2783   003374  2EE8               	decfsz	wreg,f,c
  2784   003376  D7FE               	bra	u5617
  2785   003378  2E44               	decfsz	??_reading_hue^0,f,c
  2786   00337A  D7FC               	bra	u5617
  2787   00337C  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2788   00337E  D7FA               	bra	u5617
  2789   003380  0000               	nop	
  2790   003382                     
  2791                           ;color.c: 122:     (cCurr->blue) = color_read_Blue();
  2792   003382  EC9E  F020         	call	_color_read_Blue	;wreg free
  2793   003386  5042               	movf	reading_hue@cCurr^0,w,c
  2794   003388  6ED9               	movwf	fsr2l,c
  2795   00338A  6ADA               	clrf	fsr2h,c
  2796   00338C  0E04               	movlw	4
  2797   00338E  26D9               	addwf	fsr2l,f,c
  2798   003390  C006  FFDE         	movff	?_color_read_Blue,postinc2
  2799   003394  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  2800   003398                     
  2801                           ;color.c: 127:     LATGbits.LATG0 = 1;
  2802   003398  807F               	bsf	127,0,c	;volatile
  2803   00339A                     
  2804                           ;color.c: 128:     LATEbits.LATE7 = 1;
  2805   00339A  8E7D               	bsf	125,7,c	;volatile
  2806   00339C                     
  2807                           ;color.c: 129:     LATAbits.LATA3 = 1;
  2808   00339C  8679               	bsf	121,3,c	;volatile
  2809                           
  2810                           ;color.c: 130:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2811   00339E  0E29               	movlw	41
  2812   0033A0  6E45               	movwf	(??_reading_hue+1)^0,c
  2813   0033A2  0E96               	movlw	150
  2814   0033A4  6E44               	movwf	??_reading_hue^0,c
  2815   0033A6  0E7F               	movlw	127
  2816   0033A8                     u5627:
  2817   0033A8  2EE8               	decfsz	wreg,f,c
  2818   0033AA  D7FE               	bra	u5627
  2819   0033AC  2E44               	decfsz	??_reading_hue^0,f,c
  2820   0033AE  D7FC               	bra	u5627
  2821   0033B0  2E45               	decfsz	(??_reading_hue+1)^0,f,c
  2822   0033B2  D7FA               	bra	u5627
  2823   0033B4  0000               	nop	
  2824   0033B6                     
  2825                           ;color.c: 131:     (cCurr->clear) = color_read_Clear();
  2826   0033B6  EC76  F020         	call	_color_read_Clear	;wreg free
  2827   0033BA  5042               	movf	reading_hue@cCurr^0,w,c
  2828   0033BC  6ED9               	movwf	fsr2l,c
  2829   0033BE  6ADA               	clrf	fsr2h,c
  2830   0033C0  0E06               	movlw	6
  2831   0033C2  26D9               	addwf	fsr2l,f,c
  2832   0033C4  C006  FFDE         	movff	?_color_read_Clear,postinc2
  2833   0033C8  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  2834   0033CC                     
  2835                           ;color.c: 138:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  2836   0033CC  0EE7               	movlw	low _colorCalibration
  2837   0033CE  6E3E               	movwf	convert_rgb2hue@cMax^0,c
  2838   0033D0  0EDF               	movlw	low _colorCurrent
  2839   0033D2  6E3F               	movwf	convert_rgb2hue@cCurr^0,c
  2840   0033D4  EC55  F007         	call	_convert_rgb2hue	;wreg free
  2841   0033D8  C03E  F046         	movff	?_convert_rgb2hue,reading_hue@hue
  2842   0033DC  C03F  F047         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  2843   0033E0                     
  2844                           ;color.c: 145:     return hue;
  2845   0033E0  C046  F042         	movff	reading_hue@hue,?_reading_hue
  2846   0033E4  C047  F043         	movff	reading_hue@hue+1,?_reading_hue+1
  2847   0033E8  0012               	return		;funcret
  2848   0033EA                     __end_of_reading_hue:
  2849                           	callstack 0
  2850                           
  2851 ;; *************** function _convert_rgb2hue *****************
  2852 ;; Defined at:
  2853 ;;		line 229 in file "color.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  cMax            1   61[COMRAM] PTR struct colors
  2856 ;;		 -> colorCalibration(8), 
  2857 ;;  cCurr           1   62[COMRAM] PTR struct colors
  2858 ;;		 -> colorCurrent(8), 
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;  c_char         20    0        unsigned char [20]
  2861 ;;  b               4   72[BANK0 ] float 
  2862 ;;  g               4   68[BANK0 ] float 
  2863 ;;  r               4   64[BANK0 ] float 
  2864 ;;  hue             4   60[BANK0 ] float 
  2865 ;;  max             4   56[BANK0 ] float 
  2866 ;;  diff            4   52[BANK0 ] float 
  2867 ;;  min             4   48[BANK0 ] float 
  2868 ;;  clearmax        4   28[BANK0 ] float 
  2869 ;;  clearcurrent    4   24[BANK0 ] float 
  2870 ;;  bluemax         4   20[BANK0 ] float 
  2871 ;;  bluecurrent     4   16[BANK0 ] float 
  2872 ;;  greenmax        4   12[BANK0 ] float 
  2873 ;;  greencurrent    4    8[BANK0 ] float 
  2874 ;;  redmax          4    4[BANK0 ] float 
  2875 ;;  redcurrent      4    0[BANK0 ] float 
  2876 ;;  c               4    0        float 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  2   61[COMRAM] unsigned int 
  2879 ;; Registers used:
  2880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2886 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2887 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2888 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2889 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2890 ;;Total ram usage:       80 bytes
  2891 ;; Hardware stack levels used: 1
  2892 ;; Hardware stack levels required when called: 3
  2893 ;; This function calls:
  2894 ;;		___fladd
  2895 ;;		___fldiv
  2896 ;;		___fleq
  2897 ;;		___flge
  2898 ;;		___flmul
  2899 ;;		___flsub
  2900 ;;		___fltol
  2901 ;;		___xxtofl
  2902 ;; This function is called by:
  2903 ;;		_reading_hue
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text8
  2908   000EAA                     __ptext8:
  2909                           	callstack 0
  2910   000EAA                     _convert_rgb2hue:
  2911                           	callstack 26
  2912   000EAA                     
  2913                           ;color.c: 229: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 230: {;color.c: 231:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 232:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  2914   000EAA  0E00               	movlw	0
  2915   000EAC  0100               	movlb	0	; () banked
  2916   000EAE  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  2917   000EB0  0E00               	movlw	0
  2918   000EB2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2919   000EB4  0E00               	movlw	0
  2920   000EB6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2921   000EB8  0E00               	movlw	0
  2922   000EBA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2923   000EBC                     
  2924                           ; BSR set to: 0
  2925                           ;color.c: 234:     redcurrent = cCurr->red;
  2926   000EBC  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2927   000EBE  6ED9               	movwf	fsr2l,c
  2928   000EC0  6ADA               	clrf	fsr2h,c
  2929   000EC2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2930   000EC6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2931   000ECA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2932   000ECE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2933   000ED2  6A04               	clrf	(___xxtofl@val+2)^0,c
  2934   000ED4  6A05               	clrf	(___xxtofl@val+3)^0,c
  2935   000ED6  0E00               	movlw	0
  2936   000ED8  ECF8  F014         	call	___xxtofl
  2937   000EDC  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  2938   000EE0  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  2939   000EE4  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  2940   000EE8  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  2941   000EEC                     
  2942                           ;color.c: 235:     redmax = cMax->red;
  2943   000EEC  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2944   000EEE  6ED9               	movwf	fsr2l,c
  2945   000EF0  6ADA               	clrf	fsr2h,c
  2946   000EF2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2947   000EF6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2948   000EFA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2949   000EFE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2950   000F02  6A04               	clrf	(___xxtofl@val+2)^0,c
  2951   000F04  6A05               	clrf	(___xxtofl@val+3)^0,c
  2952   000F06  0E00               	movlw	0
  2953   000F08  ECF8  F014         	call	___xxtofl
  2954   000F0C  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  2955   000F10  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  2956   000F14  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  2957   000F18  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  2958   000F1C                     
  2959                           ;color.c: 236:     greencurrent = cCurr->green;
  2960   000F1C  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2961   000F1E  6ED9               	movwf	fsr2l,c
  2962   000F20  6ADA               	clrf	fsr2h,c
  2963   000F22  0E02               	movlw	2
  2964   000F24  26D9               	addwf	fsr2l,f,c
  2965   000F26  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2966   000F2A  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2967   000F2E  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2968   000F32  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2969   000F36  6A04               	clrf	(___xxtofl@val+2)^0,c
  2970   000F38  6A05               	clrf	(___xxtofl@val+3)^0,c
  2971   000F3A  0E00               	movlw	0
  2972   000F3C  ECF8  F014         	call	___xxtofl
  2973   000F40  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  2974   000F44  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  2975   000F48  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  2976   000F4C  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  2977   000F50                     
  2978                           ;color.c: 237:     greenmax = cMax->green;
  2979   000F50  503E               	movf	convert_rgb2hue@cMax^0,w,c
  2980   000F52  6ED9               	movwf	fsr2l,c
  2981   000F54  6ADA               	clrf	fsr2h,c
  2982   000F56  0E02               	movlw	2
  2983   000F58  26D9               	addwf	fsr2l,f,c
  2984   000F5A  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  2985   000F5E  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  2986   000F62  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  2987   000F66  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  2988   000F6A  6A04               	clrf	(___xxtofl@val+2)^0,c
  2989   000F6C  6A05               	clrf	(___xxtofl@val+3)^0,c
  2990   000F6E  0E00               	movlw	0
  2991   000F70  ECF8  F014         	call	___xxtofl
  2992   000F74  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  2993   000F78  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  2994   000F7C  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  2995   000F80  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  2996   000F84                     
  2997                           ;color.c: 238:     bluecurrent = cCurr->blue;
  2998   000F84  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  2999   000F86  6ED9               	movwf	fsr2l,c
  3000   000F88  6ADA               	clrf	fsr2h,c
  3001   000F8A  0E04               	movlw	4
  3002   000F8C  26D9               	addwf	fsr2l,f,c
  3003   000F8E  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3004   000F92  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3005   000F96  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3006   000F9A  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3007   000F9E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3008   000FA0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3009   000FA2  0E00               	movlw	0
  3010   000FA4  ECF8  F014         	call	___xxtofl
  3011   000FA8  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  3012   000FAC  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  3013   000FB0  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  3014   000FB4  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  3015   000FB8                     
  3016                           ;color.c: 239:     bluemax = cMax->blue;
  3017   000FB8  503E               	movf	convert_rgb2hue@cMax^0,w,c
  3018   000FBA  6ED9               	movwf	fsr2l,c
  3019   000FBC  6ADA               	clrf	fsr2h,c
  3020   000FBE  0E04               	movlw	4
  3021   000FC0  26D9               	addwf	fsr2l,f,c
  3022   000FC2  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3023   000FC6  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3024   000FCA  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3025   000FCE  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3026   000FD2  6A04               	clrf	(___xxtofl@val+2)^0,c
  3027   000FD4  6A05               	clrf	(___xxtofl@val+3)^0,c
  3028   000FD6  0E00               	movlw	0
  3029   000FD8  ECF8  F014         	call	___xxtofl
  3030   000FDC  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  3031   000FE0  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  3032   000FE4  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  3033   000FE8  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  3034   000FEC                     
  3035                           ;color.c: 240:     clearcurrent = cCurr->clear;
  3036   000FEC  503F               	movf	convert_rgb2hue@cCurr^0,w,c
  3037   000FEE  6ED9               	movwf	fsr2l,c
  3038   000FF0  6ADA               	clrf	fsr2h,c
  3039   000FF2  0E06               	movlw	6
  3040   000FF4  26D9               	addwf	fsr2l,f,c
  3041   000FF6  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3042   000FFA  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3043   000FFE  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3044   001002  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3045   001006  6A04               	clrf	(___xxtofl@val+2)^0,c
  3046   001008  6A05               	clrf	(___xxtofl@val+3)^0,c
  3047   00100A  0E00               	movlw	0
  3048   00100C  ECF8  F014         	call	___xxtofl
  3049   001010  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  3050   001014  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  3051   001018  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  3052   00101C  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  3053   001020                     
  3054                           ;color.c: 241:     clearmax = cMax->clear;
  3055   001020  503E               	movf	convert_rgb2hue@cMax^0,w,c
  3056   001022  6ED9               	movwf	fsr2l,c
  3057   001024  6ADA               	clrf	fsr2h,c
  3058   001026  0E06               	movlw	6
  3059   001028  26D9               	addwf	fsr2l,f,c
  3060   00102A  CFDE F040          	movff	postinc2,??_convert_rgb2hue
  3061   00102E  CFDD F041          	movff	postdec2,??_convert_rgb2hue+1
  3062   001032  C040  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3063   001036  C041  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3064   00103A  6A04               	clrf	(___xxtofl@val+2)^0,c
  3065   00103C  6A05               	clrf	(___xxtofl@val+3)^0,c
  3066   00103E  0E00               	movlw	0
  3067   001040  ECF8  F014         	call	___xxtofl
  3068   001044  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  3069   001048  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  3070   00104C  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  3071   001050  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  3072   001054  C078  F01B         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  3073   001058  C079  F01C         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  3074   00105C  C07A  F01D         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  3075   001060  C07B  F01E         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  3076   001064  C07C  F01F         	movff	convert_rgb2hue@clearmax,___fldiv@a
  3077   001068  C07D  F020         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  3078   00106C  C07E  F021         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  3079   001070  C07F  F022         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  3080   001074  EC93  F00F         	call	___fldiv	;wreg free
  3081   001078                     
  3082                           ;color.c: 244:     char c_char[20];;color.c: 250:     r = redcurrent/redmax;
  3083   001078  C060  F01B         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  3084   00107C  C061  F01C         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  3085   001080  C062  F01D         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  3086   001084  C063  F01E         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  3087   001088  C064  F01F         	movff	convert_rgb2hue@redmax,___fldiv@a
  3088   00108C  C065  F020         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  3089   001090  C066  F021         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  3090   001094  C067  F022         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  3091   001098  EC93  F00F         	call	___fldiv	;wreg free
  3092   00109C  C01B  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  3093   0010A0  C01C  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  3094   0010A4  C01D  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  3095   0010A8  C01E  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  3096   0010AC                     
  3097                           ;color.c: 251:     g = greencurrent/greenmax;
  3098   0010AC  C068  F01B         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  3099   0010B0  C069  F01C         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  3100   0010B4  C06A  F01D         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  3101   0010B8  C06B  F01E         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  3102   0010BC  C06C  F01F         	movff	convert_rgb2hue@greenmax,___fldiv@a
  3103   0010C0  C06D  F020         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  3104   0010C4  C06E  F021         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  3105   0010C8  C06F  F022         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  3106   0010CC  EC93  F00F         	call	___fldiv	;wreg free
  3107   0010D0  C01B  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3108   0010D4  C01C  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3109   0010D8  C01D  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3110   0010DC  C01E  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3111   0010E0                     
  3112                           ;color.c: 252:     b = bluecurrent/bluemax;
  3113   0010E0  C070  F01B         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3114   0010E4  C071  F01C         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3115   0010E8  C072  F01D         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3116   0010EC  C073  F01E         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3117   0010F0  C074  F01F         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3118   0010F4  C075  F020         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3119   0010F8  C076  F021         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3120   0010FC  C077  F022         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3121   001100  EC93  F00F         	call	___fldiv	;wreg free
  3122   001104  C01B  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3123   001108  C01C  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3124   00110C  C01D  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3125   001110  C01E  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3126   001114                     
  3127                           ;color.c: 254:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3128   001114  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3129   001118  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3130   00111C  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3131   001120  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3132   001124  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3133   001128  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3134   00112C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3135   001130  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3136   001134  EC7F  F018         	call	___flge	;wreg free
  3137   001138  A0D8               	btfss	status,0,c
  3138   00113A  EFA1  F008         	goto	u3961
  3139   00113E  EFA3  F008         	goto	u3960
  3140   001142                     u3961:
  3141   001142  EFD8  F008         	goto	l4538
  3142   001146                     u3960:
  3143   001146  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3144   00114A  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3145   00114E  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3146   001152  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3147   001156  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3148   00115A  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3149   00115E  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3150   001162  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3151   001166  EC7F  F018         	call	___flge	;wreg free
  3152   00116A  A0D8               	btfss	status,0,c
  3153   00116C  EFBA  F008         	goto	u3971
  3154   001170  EFBC  F008         	goto	u3970
  3155   001174                     u3971:
  3156   001174  EFC6  F008         	goto	l119
  3157   001178                     u3970:
  3158   001178  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$435
  3159   00117C  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$435+1
  3160   001180  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$435+2
  3161   001184  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$435+3
  3162   001188  EFCE  F008         	goto	l121
  3163   00118C                     l119:
  3164   00118C  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$435
  3165   001190  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$435+1
  3166   001194  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$435+2
  3167   001198  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$435+3
  3168   00119C                     l121:
  3169   00119C  C080  F090         	movff	_convert_rgb2hue$435,convert_rgb2hue@min
  3170   0011A0  C081  F091         	movff	_convert_rgb2hue$435+1,convert_rgb2hue@min+1
  3171   0011A4  C082  F092         	movff	_convert_rgb2hue$435+2,convert_rgb2hue@min+2
  3172   0011A8  C083  F093         	movff	_convert_rgb2hue$435+3,convert_rgb2hue@min+3
  3173   0011AC  EF0B  F009         	goto	l4542
  3174   0011B0                     l4538:
  3175   0011B0  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3176   0011B4  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3177   0011B8  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3178   0011BC  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3179   0011C0  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3180   0011C4  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3181   0011C8  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3182   0011CC  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3183   0011D0  EC7F  F018         	call	___flge	;wreg free
  3184   0011D4  A0D8               	btfss	status,0,c
  3185   0011D6  EFEF  F008         	goto	u3981
  3186   0011DA  EFF1  F008         	goto	u3980
  3187   0011DE                     u3981:
  3188   0011DE  EFFB  F008         	goto	l123
  3189   0011E2                     u3980:
  3190   0011E2  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$436
  3191   0011E6  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$436+1
  3192   0011EA  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$436+2
  3193   0011EE  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$436+3
  3194   0011F2  EF03  F009         	goto	l125
  3195   0011F6                     l123:
  3196   0011F6  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$436
  3197   0011FA  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$436+1
  3198   0011FE  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$436+2
  3199   001202  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$436+3
  3200   001206                     l125:
  3201   001206  C084  F090         	movff	_convert_rgb2hue$436,convert_rgb2hue@min
  3202   00120A  C085  F091         	movff	_convert_rgb2hue$436+1,convert_rgb2hue@min+1
  3203   00120E  C086  F092         	movff	_convert_rgb2hue$436+2,convert_rgb2hue@min+2
  3204   001212  C087  F093         	movff	_convert_rgb2hue$436+3,convert_rgb2hue@min+3
  3205   001216                     l4542:
  3206                           
  3207                           ;color.c: 255:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3208   001216  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3209   00121A  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3210   00121E  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3211   001222  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3212   001226  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3213   00122A  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3214   00122E  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3215   001232  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3216   001236  EC7F  F018         	call	___flge	;wreg free
  3217   00123A  A0D8               	btfss	status,0,c
  3218   00123C  EF22  F009         	goto	u3991
  3219   001240  EF24  F009         	goto	u3990
  3220   001244                     u3991:
  3221   001244  EF59  F009         	goto	l4548
  3222   001248                     u3990:
  3223   001248  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3224   00124C  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3225   001250  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3226   001254  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3227   001258  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3228   00125C  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3229   001260  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3230   001264  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3231   001268  EC7F  F018         	call	___flge	;wreg free
  3232   00126C  A0D8               	btfss	status,0,c
  3233   00126E  EF3B  F009         	goto	u4001
  3234   001272  EF3D  F009         	goto	u4000
  3235   001276                     u4001:
  3236   001276  EF47  F009         	goto	l131
  3237   00127A                     u4000:
  3238   00127A  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$437
  3239   00127E  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$437+1
  3240   001282  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$437+2
  3241   001286  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$437+3
  3242   00128A  EF4F  F009         	goto	l133
  3243   00128E                     l131:
  3244   00128E  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$437
  3245   001292  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$437+1
  3246   001296  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$437+2
  3247   00129A  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$437+3
  3248   00129E                     l133:
  3249   00129E  C088  F098         	movff	_convert_rgb2hue$437,convert_rgb2hue@max
  3250   0012A2  C089  F099         	movff	_convert_rgb2hue$437+1,convert_rgb2hue@max+1
  3251   0012A6  C08A  F09A         	movff	_convert_rgb2hue$437+2,convert_rgb2hue@max+2
  3252   0012AA  C08B  F09B         	movff	_convert_rgb2hue$437+3,convert_rgb2hue@max+3
  3253   0012AE  EF8C  F009         	goto	l4552
  3254   0012B2                     l4548:
  3255   0012B2  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3256   0012B6  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3257   0012BA  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3258   0012BE  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3259   0012C2  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3260   0012C6  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3261   0012CA  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3262   0012CE  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3263   0012D2  EC7F  F018         	call	___flge	;wreg free
  3264   0012D6  A0D8               	btfss	status,0,c
  3265   0012D8  EF70  F009         	goto	u4011
  3266   0012DC  EF72  F009         	goto	u4010
  3267   0012E0                     u4011:
  3268   0012E0  EF7C  F009         	goto	l135
  3269   0012E4                     u4010:
  3270   0012E4  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$438
  3271   0012E8  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$438+1
  3272   0012EC  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$438+2
  3273   0012F0  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$438+3
  3274   0012F4  EF84  F009         	goto	l137
  3275   0012F8                     l135:
  3276   0012F8  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$438
  3277   0012FC  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$438+1
  3278   001300  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$438+2
  3279   001304  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$438+3
  3280   001308                     l137:
  3281   001308  C08C  F098         	movff	_convert_rgb2hue$438,convert_rgb2hue@max
  3282   00130C  C08D  F099         	movff	_convert_rgb2hue$438+1,convert_rgb2hue@max+1
  3283   001310  C08E  F09A         	movff	_convert_rgb2hue$438+2,convert_rgb2hue@max+2
  3284   001314  C08F  F09B         	movff	_convert_rgb2hue$438+3,convert_rgb2hue@max+3
  3285   001318                     l4552:
  3286                           
  3287                           ;color.c: 256:     diff = max - min;
  3288   001318  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3289   00131C  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3290   001320  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3291   001324  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3292   001328  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3293   00132C  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3294   001330  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3295   001334  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3296   001338  ECE9  F020         	call	___flsub	;wreg free
  3297   00133C  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3298   001340  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3299   001344  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3300   001348  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3301                           
  3302                           ;color.c: 257:     if (max == min) {
  3303   00134C  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3304   001350  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3305   001354  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3306   001358  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3307   00135C  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3308   001360  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3309   001364  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3310   001368  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3311   00136C  ECD9  F01B         	call	___fleq	;wreg free
  3312   001370  A0D8               	btfss	status,0,c
  3313   001372  EFBD  F009         	goto	u4021
  3314   001376  EFBF  F009         	goto	u4020
  3315   00137A                     u4021:
  3316   00137A  EFCA  F009         	goto	l4556
  3317   00137E                     u4020:
  3318   00137E                     
  3319                           ;color.c: 258:         hue = 0;
  3320   00137E  0E00               	movlw	0
  3321   001380  0100               	movlb	0	; () banked
  3322   001382  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3323   001384  0E00               	movlw	0
  3324   001386  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3325   001388  0E00               	movlw	0
  3326   00138A  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3327   00138C  0E00               	movlw	0
  3328   00138E  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3329                           
  3330                           ;color.c: 259:     } else if (max == r){
  3331   001390  EFD3  F00A         	goto	l4568
  3332   001394                     l4556:
  3333   001394  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3334   001398  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3335   00139C  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3336   0013A0  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3337   0013A4  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3338   0013A8  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3339   0013AC  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3340   0013B0  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3341   0013B4  ECD9  F01B         	call	___fleq	;wreg free
  3342   0013B8  A0D8               	btfss	status,0,c
  3343   0013BA  EFE1  F009         	goto	u4031
  3344   0013BE  EFE3  F009         	goto	u4030
  3345   0013C2                     u4031:
  3346   0013C2  EF11  F00A         	goto	l4560
  3347   0013C6                     u4030:
  3348   0013C6                     
  3349                           ;color.c: 260:         hue = (b - g) / diff;
  3350   0013C6  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3351   0013CA  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3352   0013CE  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3353   0013D2  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3354   0013D6  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3355   0013DA  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3356   0013DE  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3357   0013E2  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3358   0013E6  ECE9  F020         	call	___flsub	;wreg free
  3359   0013EA  C012  F01B         	movff	?___flsub,___fldiv@b
  3360   0013EE  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3361   0013F2  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3362   0013F6  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3363   0013FA  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3364   0013FE  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3365   001402  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3366   001406  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3367   00140A  EC93  F00F         	call	___fldiv	;wreg free
  3368   00140E  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3369   001412  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3370   001416  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3371   00141A  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3372                           
  3373                           ;color.c: 261:     } else if (max == g){
  3374   00141E  EFD3  F00A         	goto	l4568
  3375   001422                     l4560:
  3376   001422  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3377   001426  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3378   00142A  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3379   00142E  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3380   001432  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3381   001436  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3382   00143A  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3383   00143E  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3384   001442  ECD9  F01B         	call	___fleq	;wreg free
  3385   001446  A0D8               	btfss	status,0,c
  3386   001448  EF28  F00A         	goto	u4041
  3387   00144C  EF2A  F00A         	goto	u4040
  3388   001450                     u4041:
  3389   001450  EF72  F00A         	goto	l4564
  3390   001454                     u4040:
  3391   001454                     
  3392                           ;color.c: 262:         hue = (b - r) / diff;
  3393   001454  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3394   001458  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3395   00145C  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3396   001460  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3397   001464  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3398   001468  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3399   00146C  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3400   001470  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3401   001474  ECE9  F020         	call	___flsub	;wreg free
  3402   001478  C012  F01B         	movff	?___flsub,___fldiv@b
  3403   00147C  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3404   001480  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3405   001484  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3406   001488  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3407   00148C  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3408   001490  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3409   001494  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3410   001498  EC93  F00F         	call	___fldiv	;wreg free
  3411   00149C  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3412   0014A0  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3413   0014A4  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3414   0014A8  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3415                           
  3416                           ;color.c: 263:         hue = hue + 2;
  3417   0014AC  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3418   0014B0  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3419   0014B4  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3420   0014B8  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3421   0014BC  0E00               	movlw	0
  3422   0014BE  6E06               	movwf	___fladd@a^0,c
  3423   0014C0  0E00               	movlw	0
  3424   0014C2  6E07               	movwf	(___fladd@a+1)^0,c
  3425   0014C4  0E00               	movlw	0
  3426   0014C6  6E08               	movwf	(___fladd@a+2)^0,c
  3427   0014C8  0E40               	movlw	64
  3428   0014CA  6E09               	movwf	(___fladd@a+3)^0,c
  3429   0014CC  EC1E  F00B         	call	___fladd	;wreg free
  3430   0014D0  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3431   0014D4  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3432   0014D8  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3433   0014DC  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3434                           
  3435                           ;color.c: 264:     } else if (max == b){
  3436   0014E0  EFD3  F00A         	goto	l4568
  3437   0014E4                     l4564:
  3438   0014E4  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3439   0014E8  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3440   0014EC  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3441   0014F0  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3442   0014F4  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3443   0014F8  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3444   0014FC  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3445   001500  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3446   001504  ECD9  F01B         	call	___fleq	;wreg free
  3447   001508  A0D8               	btfss	status,0,c
  3448   00150A  EF89  F00A         	goto	u4051
  3449   00150E  EF8B  F00A         	goto	u4050
  3450   001512                     u4051:
  3451   001512  EFD3  F00A         	goto	l141
  3452   001516                     u4050:
  3453   001516                     
  3454                           ;color.c: 265:         hue = (r - g) / diff;
  3455   001516  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3456   00151A  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3457   00151E  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3458   001522  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3459   001526  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3460   00152A  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3461   00152E  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3462   001532  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3463   001536  ECE9  F020         	call	___flsub	;wreg free
  3464   00153A  C012  F01B         	movff	?___flsub,___fldiv@b
  3465   00153E  C013  F01C         	movff	?___flsub+1,___fldiv@b+1
  3466   001542  C014  F01D         	movff	?___flsub+2,___fldiv@b+2
  3467   001546  C015  F01E         	movff	?___flsub+3,___fldiv@b+3
  3468   00154A  C094  F01F         	movff	convert_rgb2hue@diff,___fldiv@a
  3469   00154E  C095  F020         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3470   001552  C096  F021         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3471   001556  C097  F022         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3472   00155A  EC93  F00F         	call	___fldiv	;wreg free
  3473   00155E  C01B  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3474   001562  C01C  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3475   001566  C01D  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3476   00156A  C01E  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3477                           
  3478                           ;color.c: 266:         hue = hue + 4;
  3479   00156E  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3480   001572  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3481   001576  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3482   00157A  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3483   00157E  0E00               	movlw	0
  3484   001580  6E06               	movwf	___fladd@a^0,c
  3485   001582  0E00               	movlw	0
  3486   001584  6E07               	movwf	(___fladd@a+1)^0,c
  3487   001586  0E80               	movlw	128
  3488   001588  6E08               	movwf	(___fladd@a+2)^0,c
  3489   00158A  0E40               	movlw	64
  3490   00158C  6E09               	movwf	(___fladd@a+3)^0,c
  3491   00158E  EC1E  F00B         	call	___fladd	;wreg free
  3492   001592  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3493   001596  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3494   00159A  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3495   00159E  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3496   0015A2  EFD3  F00A         	goto	l4568
  3497   0015A6                     l141:
  3498   0015A6                     l4568:
  3499                           
  3500                           ;color.c: 269:     hue = hue * 60;
  3501   0015A6  C09C  F002         	movff	convert_rgb2hue@hue,___flmul@b
  3502   0015AA  C09D  F003         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3503   0015AE  C09E  F004         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3504   0015B2  C09F  F005         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3505   0015B6  0E00               	movlw	0
  3506   0015B8  6E06               	movwf	___flmul@a^0,c
  3507   0015BA  0E00               	movlw	0
  3508   0015BC  6E07               	movwf	(___flmul@a+1)^0,c
  3509   0015BE  0E70               	movlw	112
  3510   0015C0  6E08               	movwf	(___flmul@a+2)^0,c
  3511   0015C2  0E42               	movlw	66
  3512   0015C4  6E09               	movwf	(___flmul@a+3)^0,c
  3513   0015C6  EC7E  F00D         	call	___flmul	;wreg free
  3514   0015CA  C002  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3515   0015CE  C003  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3516   0015D2  C004  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3517   0015D6  C005  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3518   0015DA                     
  3519                           ;color.c: 270:     if (hue < 0) {
  3520   0015DA  0100               	movlb	0	; () banked
  3521   0015DC  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3522   0015DE  EFF5  F00A         	goto	u4060
  3523   0015E2  EFF3  F00A         	goto	u4061
  3524   0015E6                     u4061:
  3525   0015E6  EF0F  F00B         	goto	l145
  3526   0015EA                     u4060:
  3527   0015EA                     
  3528                           ; BSR set to: 0
  3529                           ;color.c: 271:         hue = hue + 360;
  3530   0015EA  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3531   0015EE  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3532   0015F2  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3533   0015F6  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3534   0015FA  0E00               	movlw	0
  3535   0015FC  6E06               	movwf	___fladd@a^0,c
  3536   0015FE  0E00               	movlw	0
  3537   001600  6E07               	movwf	(___fladd@a+1)^0,c
  3538   001602  0EB4               	movlw	180
  3539   001604  6E08               	movwf	(___fladd@a+2)^0,c
  3540   001606  0E43               	movlw	67
  3541   001608  6E09               	movwf	(___fladd@a+3)^0,c
  3542   00160A  EC1E  F00B         	call	___fladd	;wreg free
  3543   00160E  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3544   001612  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3545   001616  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3546   00161A  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3547   00161E                     l145:
  3548                           
  3549                           ;color.c: 274:     return (unsigned int)hue;
  3550   00161E  C09C  F034         	movff	convert_rgb2hue@hue,___fltol@f1
  3551   001622  C09D  F035         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3552   001626  C09E  F036         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3553   00162A  C09F  F037         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3554   00162E  ECFC  F017         	call	___fltol	;wreg free
  3555   001632  C034  F03E         	movff	?___fltol,?_convert_rgb2hue
  3556   001636  C035  F03F         	movff	?___fltol+1,?_convert_rgb2hue+1
  3557   00163A  0012               	return		;funcret
  3558   00163C                     __end_of_convert_rgb2hue:
  3559                           	callstack 0
  3560                           
  3561 ;; *************** function ___xxtofl *****************
  3562 ;; Defined at:
  3563 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;  sign            1    wreg     unsigned char 
  3566 ;;  val             4    1[COMRAM] long 
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;  sign            1    9[COMRAM] unsigned char 
  3569 ;;  arg             4   11[COMRAM] unsigned long 
  3570 ;;  exp             1   10[COMRAM] unsigned char 
  3571 ;; Return value:  Size  Location     Type
  3572 ;;                  4    1[COMRAM] unsigned char 
  3573 ;; Registers used:
  3574 ;;		wreg, status,2, status,0
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3580 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3581 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3582 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3583 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3584 ;;Total ram usage:       14 bytes
  3585 ;; Hardware stack levels used: 1
  3586 ;; Hardware stack levels required when called: 1
  3587 ;; This function calls:
  3588 ;;		Nothing
  3589 ;; This function is called by:
  3590 ;;		_convert_rgb2hue
  3591 ;;		_main
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text9
  3596   0029F0                     __ptext9:
  3597                           	callstack 0
  3598   0029F0                     ___xxtofl:
  3599                           	callstack 27
  3600                           
  3601                           ;incstack = 0
  3602                           ;___xxtofl@sign stored from wreg
  3603   0029F0  6E0A               	movwf	___xxtofl@sign^0,c
  3604   0029F2  500A               	movf	___xxtofl@sign^0,w,c
  3605   0029F4  B4D8               	btfsc	status,2,c
  3606   0029F6  EFFF  F014         	goto	u3861
  3607   0029FA  EF01  F015         	goto	u3860
  3608   0029FE                     u3861:
  3609   0029FE  EF23  F015         	goto	l1331
  3610   002A02                     u3860:
  3611   002A02  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3612   002A04  EF08  F015         	goto	u3870
  3613   002A08  EF06  F015         	goto	u3871
  3614   002A0C                     u3871:
  3615   002A0C  EF23  F015         	goto	l1331
  3616   002A10                     u3870:
  3617   002A10  C002  F006         	movff	___xxtofl@val,??___xxtofl
  3618   002A14  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  3619   002A18  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  3620   002A1C  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  3621   002A20  1E06               	comf	??___xxtofl^0,f,c
  3622   002A22  1E07               	comf	(??___xxtofl+1)^0,f,c
  3623   002A24  1E08               	comf	(??___xxtofl+2)^0,f,c
  3624   002A26  1E09               	comf	(??___xxtofl+3)^0,f,c
  3625   002A28  2A06               	incf	??___xxtofl^0,f,c
  3626   002A2A  0E00               	movlw	0
  3627   002A2C  2207               	addwfc	(??___xxtofl+1)^0,f,c
  3628   002A2E  2208               	addwfc	(??___xxtofl+2)^0,f,c
  3629   002A30  2209               	addwfc	(??___xxtofl+3)^0,f,c
  3630   002A32  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  3631   002A36  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  3632   002A3A  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  3633   002A3E  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  3634   002A42  EF2B  F015         	goto	l4428
  3635   002A46                     l1331:
  3636   002A46  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  3637   002A4A  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3638   002A4E  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3639   002A52  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3640   002A56                     l4428:
  3641   002A56  5002               	movf	___xxtofl@val^0,w,c
  3642   002A58  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  3643   002A5A  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  3644   002A5C  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  3645   002A5E  A4D8               	btfss	status,2,c
  3646   002A60  EF34  F015         	goto	u3881
  3647   002A64  EF36  F015         	goto	u3880
  3648   002A68                     u3881:
  3649   002A68  EF40  F015         	goto	l4434
  3650   002A6C                     u3880:
  3651   002A6C  0E00               	movlw	0
  3652   002A6E  6E02               	movwf	?___xxtofl^0,c
  3653   002A70  0E00               	movlw	0
  3654   002A72  6E03               	movwf	(?___xxtofl+1)^0,c
  3655   002A74  0E00               	movlw	0
  3656   002A76  6E04               	movwf	(?___xxtofl+2)^0,c
  3657   002A78  0E00               	movlw	0
  3658   002A7A  6E05               	movwf	(?___xxtofl+3)^0,c
  3659   002A7C  EFD1  F015         	goto	l1334
  3660   002A80                     l4434:
  3661   002A80  0E96               	movlw	150
  3662   002A82  6E0B               	movwf	___xxtofl@exp^0,c
  3663   002A84  EF4A  F015         	goto	l4438
  3664   002A88                     l4436:
  3665   002A88  2A0B               	incf	___xxtofl@exp^0,f,c
  3666   002A8A  90D8               	bcf	status,0,c
  3667   002A8C  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3668   002A8E  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3669   002A90  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3670   002A92  320C               	rrcf	___xxtofl@arg^0,f,c
  3671   002A94                     l4438:
  3672   002A94  0E00               	movlw	0
  3673   002A96  140C               	andwf	___xxtofl@arg^0,w,c
  3674   002A98  6E06               	movwf	??___xxtofl^0,c
  3675   002A9A  0E00               	movlw	0
  3676   002A9C  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3677   002A9E  6E07               	movwf	(??___xxtofl+1)^0,c
  3678   002AA0  0E00               	movlw	0
  3679   002AA2  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3680   002AA4  6E08               	movwf	(??___xxtofl+2)^0,c
  3681   002AA6  0EFE               	movlw	254
  3682   002AA8  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3683   002AAA  6E09               	movwf	(??___xxtofl+3)^0,c
  3684   002AAC  5006               	movf	??___xxtofl^0,w,c
  3685   002AAE  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3686   002AB0  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3687   002AB2  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3688   002AB4  A4D8               	btfss	status,2,c
  3689   002AB6  EF5F  F015         	goto	u3891
  3690   002ABA  EF61  F015         	goto	u3890
  3691   002ABE                     u3891:
  3692   002ABE  EF44  F015         	goto	l4436
  3693   002AC2                     u3890:
  3694   002AC2  EF6F  F015         	goto	l1338
  3695   002AC6                     l4440:
  3696   002AC6  2A0B               	incf	___xxtofl@exp^0,f,c
  3697   002AC8  0E01               	movlw	1
  3698   002ACA  260C               	addwf	___xxtofl@arg^0,f,c
  3699   002ACC  0E00               	movlw	0
  3700   002ACE  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  3701   002AD0  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  3702   002AD2  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  3703   002AD4  90D8               	bcf	status,0,c
  3704   002AD6  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3705   002AD8  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3706   002ADA  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3707   002ADC  320C               	rrcf	___xxtofl@arg^0,f,c
  3708   002ADE                     l1338:
  3709   002ADE  0E00               	movlw	0
  3710   002AE0  140C               	andwf	___xxtofl@arg^0,w,c
  3711   002AE2  6E06               	movwf	??___xxtofl^0,c
  3712   002AE4  0E00               	movlw	0
  3713   002AE6  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3714   002AE8  6E07               	movwf	(??___xxtofl+1)^0,c
  3715   002AEA  0E00               	movlw	0
  3716   002AEC  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3717   002AEE  6E08               	movwf	(??___xxtofl+2)^0,c
  3718   002AF0  0EFF               	movlw	255
  3719   002AF2  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3720   002AF4  6E09               	movwf	(??___xxtofl+3)^0,c
  3721   002AF6  5006               	movf	??___xxtofl^0,w,c
  3722   002AF8  1007               	iorwf	(??___xxtofl+1)^0,w,c
  3723   002AFA  1008               	iorwf	(??___xxtofl+2)^0,w,c
  3724   002AFC  1009               	iorwf	(??___xxtofl+3)^0,w,c
  3725   002AFE  A4D8               	btfss	status,2,c
  3726   002B00  EF84  F015         	goto	u3901
  3727   002B04  EF86  F015         	goto	u3900
  3728   002B08                     u3901:
  3729   002B08  EF63  F015         	goto	l4440
  3730   002B0C                     u3900:
  3731   002B0C  EF8E  F015         	goto	l4448
  3732   002B10                     l4446:
  3733   002B10  060B               	decf	___xxtofl@exp^0,f,c
  3734   002B12  90D8               	bcf	status,0,c
  3735   002B14  360C               	rlcf	___xxtofl@arg^0,f,c
  3736   002B16  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  3737   002B18  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  3738   002B1A  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  3739   002B1C                     l4448:
  3740   002B1C  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  3741   002B1E  EF93  F015         	goto	u3911
  3742   002B22  EF95  F015         	goto	u3910
  3743   002B26                     u3911:
  3744   002B26  EF9D  F015         	goto	l1345
  3745   002B2A                     u3910:
  3746   002B2A  0E02               	movlw	2
  3747   002B2C  600B               	cpfslt	___xxtofl@exp^0,c
  3748   002B2E  EF9B  F015         	goto	u3921
  3749   002B32  EF9D  F015         	goto	u3920
  3750   002B36                     u3921:
  3751   002B36  EF88  F015         	goto	l4446
  3752   002B3A                     u3920:
  3753   002B3A                     l1345:
  3754   002B3A  B00B               	btfsc	___xxtofl@exp^0,0,c
  3755   002B3C  EFA2  F015         	goto	u3931
  3756   002B40  EFA4  F015         	goto	u3930
  3757   002B44                     u3931:
  3758   002B44  EFA5  F015         	goto	l4454
  3759   002B48                     u3930:
  3760   002B48  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  3761   002B4A                     l4454:
  3762   002B4A  90D8               	bcf	status,0,c
  3763   002B4C  320B               	rrcf	___xxtofl@exp^0,f,c
  3764   002B4E  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  3765   002B52  6A07               	clrf	(??___xxtofl+1)^0,c
  3766   002B54  6A08               	clrf	(??___xxtofl+2)^0,c
  3767   002B56  6A09               	clrf	(??___xxtofl+3)^0,c
  3768   002B58  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  3769   002B5C  6A08               	clrf	(??___xxtofl+2)^0,c
  3770   002B5E  6A07               	clrf	(??___xxtofl+1)^0,c
  3771   002B60  6A06               	clrf	??___xxtofl^0,c
  3772   002B62  5006               	movf	??___xxtofl^0,w,c
  3773   002B64  120C               	iorwf	___xxtofl@arg^0,f,c
  3774   002B66  5007               	movf	(??___xxtofl+1)^0,w,c
  3775   002B68  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  3776   002B6A  5008               	movf	(??___xxtofl+2)^0,w,c
  3777   002B6C  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  3778   002B6E  5009               	movf	(??___xxtofl+3)^0,w,c
  3779   002B70  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  3780   002B72  500A               	movf	___xxtofl@sign^0,w,c
  3781   002B74  B4D8               	btfsc	status,2,c
  3782   002B76  EFBF  F015         	goto	u3941
  3783   002B7A  EFC1  F015         	goto	u3940
  3784   002B7E                     u3941:
  3785   002B7E  EFC9  F015         	goto	l4464
  3786   002B82                     u3940:
  3787   002B82  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3788   002B84  EFC8  F015         	goto	u3950
  3789   002B88  EFC6  F015         	goto	u3951
  3790   002B8C                     u3951:
  3791   002B8C  EFC9  F015         	goto	l4464
  3792   002B90                     u3950:
  3793   002B90  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  3794   002B92                     l4464:
  3795   002B92  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  3796   002B96  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  3797   002B9A  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  3798   002B9E  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  3799   002BA2                     l1334:
  3800   002BA2  0012               	return		;funcret
  3801   002BA4                     __end_of___xxtofl:
  3802                           	callstack 0
  3803                           
  3804 ;; *************** function ___fltol *****************
  3805 ;; Defined at:
  3806 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;  f1              4   51[COMRAM] unsigned char 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  exp1            1   60[COMRAM] unsigned char 
  3811 ;;  sign1           1   59[COMRAM] unsigned char 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  4   51[COMRAM] long 
  3814 ;; Registers used:
  3815 ;;		wreg, status,2, status,0
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3821 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3822 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3823 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3824 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3825 ;;Total ram usage:       10 bytes
  3826 ;; Hardware stack levels used: 1
  3827 ;; Hardware stack levels required when called: 1
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_convert_rgb2hue
  3832 ;;		_main
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text10
  3837   002FF8                     __ptext10:
  3838                           	callstack 0
  3839   002FF8                     ___fltol:
  3840                           	callstack 27
  3841   002FF8  3436               	rlcf	(___fltol@f1+2)^0,w,c
  3842   002FFA  3437               	rlcf	(___fltol@f1+3)^0,w,c
  3843   002FFC  6E3D               	movwf	___fltol@exp1^0,c
  3844   002FFE  503D               	movf	___fltol@exp1^0,w,c
  3845   003000  A4D8               	btfss	status,2,c
  3846   003002  EF05  F018         	goto	u3791
  3847   003006  EF07  F018         	goto	u3790
  3848   00300A                     u3791:
  3849   00300A  EF11  F018         	goto	l4384
  3850   00300E                     u3790:
  3851   00300E                     l4380:
  3852   00300E  0E00               	movlw	0
  3853   003010  6E34               	movwf	?___fltol^0,c
  3854   003012  0E00               	movlw	0
  3855   003014  6E35               	movwf	(?___fltol+1)^0,c
  3856   003016  0E00               	movlw	0
  3857   003018  6E36               	movwf	(?___fltol+2)^0,c
  3858   00301A  0E00               	movlw	0
  3859   00301C  6E37               	movwf	(?___fltol+3)^0,c
  3860   00301E  EF7E  F018         	goto	l973
  3861   003022                     l4384:
  3862   003022  C034  F038         	movff	___fltol@f1,??___fltol
  3863   003026  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  3864   00302A  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  3865   00302E  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  3866   003032  0E20               	movlw	32
  3867   003034  EF21  F018         	goto	u3800
  3868   003038                     u3805:
  3869   003038  90D8               	bcf	status,0,c
  3870   00303A  323B               	rrcf	(??___fltol+3)^0,f,c
  3871   00303C  323A               	rrcf	(??___fltol+2)^0,f,c
  3872   00303E  3239               	rrcf	(??___fltol+1)^0,f,c
  3873   003040  3238               	rrcf	??___fltol^0,f,c
  3874   003042                     u3800:
  3875   003042  2EE8               	decfsz	wreg,f,c
  3876   003044  EF1C  F018         	goto	u3805
  3877   003048  5038               	movf	??___fltol^0,w,c
  3878   00304A  6E3C               	movwf	___fltol@sign1^0,c
  3879   00304C  8E36               	bsf	(___fltol@f1+2)^0,7,c
  3880   00304E  0EFF               	movlw	255
  3881   003050  1634               	andwf	___fltol@f1^0,f,c
  3882   003052  0EFF               	movlw	255
  3883   003054  1635               	andwf	(___fltol@f1+1)^0,f,c
  3884   003056  0EFF               	movlw	255
  3885   003058  1636               	andwf	(___fltol@f1+2)^0,f,c
  3886   00305A  0E00               	movlw	0
  3887   00305C  1637               	andwf	(___fltol@f1+3)^0,f,c
  3888   00305E  0E96               	movlw	150
  3889   003060  5E3D               	subwf	___fltol@exp1^0,f,c
  3890   003062  BE3D               	btfsc	___fltol@exp1^0,7,c
  3891   003064  EF38  F018         	goto	u3810
  3892   003068  EF36  F018         	goto	u3811
  3893   00306C                     u3811:
  3894   00306C  EF4E  F018         	goto	l4404
  3895   003070                     u3810:
  3896   003070  503D               	movf	___fltol@exp1^0,w,c
  3897   003072  0A80               	xorlw	128
  3898   003074  0F97               	addlw	151
  3899   003076  B0D8               	btfsc	status,0,c
  3900   003078  EF40  F018         	goto	u3821
  3901   00307C  EF42  F018         	goto	u3820
  3902   003080                     u3821:
  3903   003080  EF44  F018         	goto	l4400
  3904   003084                     u3820:
  3905   003084  EF07  F018         	goto	l4380
  3906   003088                     l4400:
  3907   003088  90D8               	bcf	status,0,c
  3908   00308A  3237               	rrcf	(___fltol@f1+3)^0,f,c
  3909   00308C  3236               	rrcf	(___fltol@f1+2)^0,f,c
  3910   00308E  3235               	rrcf	(___fltol@f1+1)^0,f,c
  3911   003090  3234               	rrcf	___fltol@f1^0,f,c
  3912   003092  3E3D               	incfsz	___fltol@exp1^0,f,c
  3913   003094  EF44  F018         	goto	l4400
  3914   003098  EF66  F018         	goto	l4414
  3915   00309C                     l4404:
  3916   00309C  0E1F               	movlw	31
  3917   00309E  643D               	cpfsgt	___fltol@exp1^0,c
  3918   0030A0  EF54  F018         	goto	u3831
  3919   0030A4  EF56  F018         	goto	u3830
  3920   0030A8                     u3831:
  3921   0030A8  EF5E  F018         	goto	l4412
  3922   0030AC                     u3830:
  3923   0030AC  EF07  F018         	goto	l4380
  3924   0030B0                     l4410:
  3925   0030B0  90D8               	bcf	status,0,c
  3926   0030B2  3634               	rlcf	___fltol@f1^0,f,c
  3927   0030B4  3635               	rlcf	(___fltol@f1+1)^0,f,c
  3928   0030B6  3636               	rlcf	(___fltol@f1+2)^0,f,c
  3929   0030B8  3637               	rlcf	(___fltol@f1+3)^0,f,c
  3930   0030BA  063D               	decf	___fltol@exp1^0,f,c
  3931   0030BC                     l4412:
  3932   0030BC  503D               	movf	___fltol@exp1^0,w,c
  3933   0030BE  A4D8               	btfss	status,2,c
  3934   0030C0  EF64  F018         	goto	u3841
  3935   0030C4  EF66  F018         	goto	u3840
  3936   0030C8                     u3841:
  3937   0030C8  EF58  F018         	goto	l4410
  3938   0030CC                     u3840:
  3939   0030CC                     l4414:
  3940   0030CC  503C               	movf	___fltol@sign1^0,w,c
  3941   0030CE  B4D8               	btfsc	status,2,c
  3942   0030D0  EF6C  F018         	goto	u3851
  3943   0030D4  EF6E  F018         	goto	u3850
  3944   0030D8                     u3851:
  3945   0030D8  EF76  F018         	goto	l4418
  3946   0030DC                     u3850:
  3947   0030DC  1E37               	comf	(___fltol@f1+3)^0,f,c
  3948   0030DE  1E36               	comf	(___fltol@f1+2)^0,f,c
  3949   0030E0  1E35               	comf	(___fltol@f1+1)^0,f,c
  3950   0030E2  6C34               	negf	___fltol@f1^0,c
  3951   0030E4  0E00               	movlw	0
  3952   0030E6  2235               	addwfc	(___fltol@f1+1)^0,f,c
  3953   0030E8  2236               	addwfc	(___fltol@f1+2)^0,f,c
  3954   0030EA  2237               	addwfc	(___fltol@f1+3)^0,f,c
  3955   0030EC                     l4418:
  3956   0030EC  C034  F034         	movff	___fltol@f1,?___fltol
  3957   0030F0  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  3958   0030F4  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  3959   0030F8  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  3960   0030FC                     l973:
  3961   0030FC  0012               	return		;funcret
  3962   0030FE                     __end_of___fltol:
  3963                           	callstack 0
  3964                           
  3965 ;; *************** function ___flsub *****************
  3966 ;; Defined at:
  3967 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  b               4   17[COMRAM] long 
  3970 ;;  a               4   21[COMRAM] long 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;		None
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  4   17[COMRAM] long 
  3975 ;; Registers used:
  3976 ;;		wreg, status,2, status,0, cstack
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3982 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3985 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3986 ;;Total ram usage:        8 bytes
  3987 ;; Hardware stack levels used: 1
  3988 ;; Hardware stack levels required when called: 2
  3989 ;; This function calls:
  3990 ;;		___fladd
  3991 ;; This function is called by:
  3992 ;;		_convert_rgb2hue
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	text11
  3997   0041D2                     __ptext11:
  3998                           	callstack 0
  3999   0041D2                     ___flsub:
  4000                           	callstack 26
  4001   0041D2  0E00               	movlw	0
  4002   0041D4  1A16               	xorwf	___flsub@a^0,f,c
  4003   0041D6  0E00               	movlw	0
  4004   0041D8  1A17               	xorwf	(___flsub@a+1)^0,f,c
  4005   0041DA  0E00               	movlw	0
  4006   0041DC  1A18               	xorwf	(___flsub@a+2)^0,f,c
  4007   0041DE  0E80               	movlw	128
  4008   0041E0  1A19               	xorwf	(___flsub@a+3)^0,f,c
  4009   0041E2  C012  F002         	movff	___flsub@b,___fladd@b
  4010   0041E6  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  4011   0041EA  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  4012   0041EE  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  4013   0041F2  C016  F006         	movff	___flsub@a,___fladd@a
  4014   0041F6  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  4015   0041FA  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  4016   0041FE  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  4017   004202  EC1E  F00B         	call	___fladd	;wreg free
  4018   004206  C002  F012         	movff	?___fladd,?___flsub
  4019   00420A  C003  F013         	movff	?___fladd+1,?___flsub+1
  4020   00420E  C004  F014         	movff	?___fladd+2,?___flsub+2
  4021   004212  C005  F015         	movff	?___fladd+3,?___flsub+3
  4022   004216  0012               	return		;funcret
  4023   004218                     __end_of___flsub:
  4024                           	callstack 0
  4025                           
  4026 ;; *************** function ___fladd *****************
  4027 ;; Defined at:
  4028 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  b               4    1[COMRAM] long 
  4031 ;;  a               4    5[COMRAM] long 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;  grs             1   16[COMRAM] unsigned char 
  4034 ;;  bexp            1   15[COMRAM] unsigned char 
  4035 ;;  aexp            1   14[COMRAM] unsigned char 
  4036 ;;  signs           1   13[COMRAM] unsigned char 
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  4    1[COMRAM] unsigned char 
  4039 ;; Registers used:
  4040 ;;		wreg, status,2, status,0
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4046 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4047 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4048 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4049 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4050 ;;Total ram usage:       16 bytes
  4051 ;; Hardware stack levels used: 1
  4052 ;; Hardware stack levels required when called: 1
  4053 ;; This function calls:
  4054 ;;		Nothing
  4055 ;; This function is called by:
  4056 ;;		_convert_rgb2hue
  4057 ;;		___flsub
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text12
  4062   00163C                     __ptext12:
  4063                           	callstack 0
  4064   00163C                     ___fladd:
  4065                           	callstack 26
  4066   00163C  5005               	movf	(___fladd@b+3)^0,w,c
  4067   00163E  0B80               	andlw	128
  4068   001640  6E0E               	movwf	___fladd@signs^0,c
  4069   001642  5005               	movf	(___fladd@b+3)^0,w,c
  4070   001644  2405               	addwf	(___fladd@b+3)^0,w,c
  4071   001646  6E10               	movwf	___fladd@bexp^0,c
  4072   001648  AE04               	btfss	(___fladd@b+2)^0,7,c
  4073   00164A  EF29  F00B         	goto	u2831
  4074   00164E  EF2B  F00B         	goto	u2830
  4075   001652                     u2831:
  4076   001652  EF2C  F00B         	goto	l3732
  4077   001656                     u2830:
  4078   001656  8010               	bsf	___fladd@bexp^0,0,c
  4079   001658                     l3732:
  4080   001658  5010               	movf	___fladd@bexp^0,w,c
  4081   00165A  B4D8               	btfsc	status,2,c
  4082   00165C  EF32  F00B         	goto	u2841
  4083   001660  EF34  F00B         	goto	u2840
  4084   001664                     u2841:
  4085   001664  EF49  F00B         	goto	l3742
  4086   001668                     u2840:
  4087   001668  2810               	incf	___fladd@bexp^0,w,c
  4088   00166A  A4D8               	btfss	status,2,c
  4089   00166C  EF3A  F00B         	goto	u2851
  4090   001670  EF3C  F00B         	goto	u2850
  4091   001674                     u2851:
  4092   001674  EF44  F00B         	goto	l3738
  4093   001678                     u2850:
  4094   001678  0E00               	movlw	0
  4095   00167A  6E02               	movwf	___fladd@b^0,c
  4096   00167C  0E00               	movlw	0
  4097   00167E  6E03               	movwf	(___fladd@b+1)^0,c
  4098   001680  0E00               	movlw	0
  4099   001682  6E04               	movwf	(___fladd@b+2)^0,c
  4100   001684  0E00               	movlw	0
  4101   001686  6E05               	movwf	(___fladd@b+3)^0,c
  4102   001688                     l3738:
  4103   001688  8E04               	bsf	(___fladd@b+2)^0,7,c
  4104   00168A  0E00               	movlw	0
  4105   00168C  6E05               	movwf	(___fladd@b+3)^0,c
  4106   00168E  EF51  F00B         	goto	l3744
  4107   001692                     l3742:
  4108   001692  0E00               	movlw	0
  4109   001694  6E02               	movwf	___fladd@b^0,c
  4110   001696  0E00               	movlw	0
  4111   001698  6E03               	movwf	(___fladd@b+1)^0,c
  4112   00169A  0E00               	movlw	0
  4113   00169C  6E04               	movwf	(___fladd@b+2)^0,c
  4114   00169E  0E00               	movlw	0
  4115   0016A0  6E05               	movwf	(___fladd@b+3)^0,c
  4116   0016A2                     l3744:
  4117   0016A2  5009               	movf	(___fladd@a+3)^0,w,c
  4118   0016A4  0B80               	andlw	128
  4119   0016A6  6E0F               	movwf	___fladd@aexp^0,c
  4120   0016A8  500E               	movf	___fladd@signs^0,w,c
  4121   0016AA  180F               	xorwf	___fladd@aexp^0,w,c
  4122   0016AC  B4D8               	btfsc	status,2,c
  4123   0016AE  EF5B  F00B         	goto	u2861
  4124   0016B2  EF5D  F00B         	goto	u2860
  4125   0016B6                     u2861:
  4126   0016B6  EF5E  F00B         	goto	l3750
  4127   0016BA                     u2860:
  4128   0016BA  8C0E               	bsf	___fladd@signs^0,6,c
  4129   0016BC                     l3750:
  4130   0016BC  5009               	movf	(___fladd@a+3)^0,w,c
  4131   0016BE  2409               	addwf	(___fladd@a+3)^0,w,c
  4132   0016C0  6E0F               	movwf	___fladd@aexp^0,c
  4133   0016C2  AE08               	btfss	(___fladd@a+2)^0,7,c
  4134   0016C4  EF66  F00B         	goto	u2871
  4135   0016C8  EF68  F00B         	goto	u2870
  4136   0016CC                     u2871:
  4137   0016CC  EF69  F00B         	goto	l3756
  4138   0016D0                     u2870:
  4139   0016D0  800F               	bsf	___fladd@aexp^0,0,c
  4140   0016D2                     l3756:
  4141   0016D2  500F               	movf	___fladd@aexp^0,w,c
  4142   0016D4  B4D8               	btfsc	status,2,c
  4143   0016D6  EF6F  F00B         	goto	u2881
  4144   0016DA  EF71  F00B         	goto	u2880
  4145   0016DE                     u2881:
  4146   0016DE  EF86  F00B         	goto	l3766
  4147   0016E2                     u2880:
  4148   0016E2  280F               	incf	___fladd@aexp^0,w,c
  4149   0016E4  A4D8               	btfss	status,2,c
  4150   0016E6  EF77  F00B         	goto	u2891
  4151   0016EA  EF79  F00B         	goto	u2890
  4152   0016EE                     u2891:
  4153   0016EE  EF81  F00B         	goto	l3762
  4154   0016F2                     u2890:
  4155   0016F2  0E00               	movlw	0
  4156   0016F4  6E06               	movwf	___fladd@a^0,c
  4157   0016F6  0E00               	movlw	0
  4158   0016F8  6E07               	movwf	(___fladd@a+1)^0,c
  4159   0016FA  0E00               	movlw	0
  4160   0016FC  6E08               	movwf	(___fladd@a+2)^0,c
  4161   0016FE  0E00               	movlw	0
  4162   001700  6E09               	movwf	(___fladd@a+3)^0,c
  4163   001702                     l3762:
  4164   001702  8E08               	bsf	(___fladd@a+2)^0,7,c
  4165   001704  0E00               	movlw	0
  4166   001706  6E09               	movwf	(___fladd@a+3)^0,c
  4167   001708  EF8E  F00B         	goto	l3768
  4168   00170C                     l3766:
  4169   00170C  0E00               	movlw	0
  4170   00170E  6E06               	movwf	___fladd@a^0,c
  4171   001710  0E00               	movlw	0
  4172   001712  6E07               	movwf	(___fladd@a+1)^0,c
  4173   001714  0E00               	movlw	0
  4174   001716  6E08               	movwf	(___fladd@a+2)^0,c
  4175   001718  0E00               	movlw	0
  4176   00171A  6E09               	movwf	(___fladd@a+3)^0,c
  4177   00171C                     l3768:
  4178   00171C  5010               	movf	___fladd@bexp^0,w,c
  4179   00171E  5C0F               	subwf	___fladd@aexp^0,w,c
  4180   001720  B0D8               	btfsc	status,0,c
  4181   001722  EF95  F00B         	goto	u2901
  4182   001726  EF97  F00B         	goto	u2900
  4183   00172A                     u2901:
  4184   00172A  EFBE  F00B         	goto	l3804
  4185   00172E                     u2900:
  4186   00172E  AC0E               	btfss	___fladd@signs^0,6,c
  4187   001730  EF9C  F00B         	goto	u2911
  4188   001734  EF9E  F00B         	goto	u2910
  4189   001738                     u2911:
  4190   001738  EFA0  F00B         	goto	l3774
  4191   00173C                     u2910:
  4192   00173C  0E80               	movlw	128
  4193   00173E  1A0E               	xorwf	___fladd@signs^0,f,c
  4194   001740                     l3774:
  4195   001740  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4196   001744  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4197   001748  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4198   00174C  C002  F011         	movff	___fladd@b,___fladd@grs
  4199   001750  C006  F002         	movff	___fladd@a,___fladd@b
  4200   001754  C011  F006         	movff	___fladd@grs,___fladd@a
  4201   001758  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4202   00175C  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4203   001760  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4204   001764  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4205   001768  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4206   00176C  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4207   001770  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4208   001774  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4209   001778  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4210   00177C                     l3804:
  4211   00177C  0E00               	movlw	0
  4212   00177E  6E11               	movwf	___fladd@grs^0,c
  4213   001780  5010               	movf	___fladd@bexp^0,w,c
  4214   001782  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4215   001786  6A0B               	clrf	(??___fladd+1)^0,c
  4216   001788  5E0A               	subwf	??___fladd^0,f,c
  4217   00178A  0E00               	movlw	0
  4218   00178C  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4219   00178E  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4220   001790  EFD3  F00B         	goto	u2921
  4221   001794  500B               	movf	(??___fladd+1)^0,w,c
  4222   001796  E109               	bnz	u2920
  4223   001798  0E1A               	movlw	26
  4224   00179A  5C0A               	subwf	??___fladd^0,w,c
  4225   00179C  A0D8               	btfss	status,0,c
  4226   00179E  EFD3  F00B         	goto	u2921
  4227   0017A2  EFD5  F00B         	goto	u2920
  4228   0017A6                     u2921:
  4229   0017A6  EF0C  F00C         	goto	l1205
  4230   0017AA                     u2920:
  4231   0017AA  5002               	movf	___fladd@b^0,w,c
  4232   0017AC  1003               	iorwf	(___fladd@b+1)^0,w,c
  4233   0017AE  1004               	iorwf	(___fladd@b+2)^0,w,c
  4234   0017B0  1005               	iorwf	(___fladd@b+3)^0,w,c
  4235   0017B2  A4D8               	btfss	status,2,c
  4236   0017B4  EFDE  F00B         	goto	u2931
  4237   0017B8  EFE1  F00B         	goto	u2930
  4238   0017BC                     u2931:
  4239   0017BC  0E01               	movlw	1
  4240   0017BE  EFE2  F00B         	goto	u2940
  4241   0017C2                     u2930:
  4242   0017C2  0E00               	movlw	0
  4243   0017C4                     u2940:
  4244   0017C4  6E11               	movwf	___fladd@grs^0,c
  4245   0017C6  0E00               	movlw	0
  4246   0017C8  6E02               	movwf	___fladd@b^0,c
  4247   0017CA  0E00               	movlw	0
  4248   0017CC  6E03               	movwf	(___fladd@b+1)^0,c
  4249   0017CE  0E00               	movlw	0
  4250   0017D0  6E04               	movwf	(___fladd@b+2)^0,c
  4251   0017D2  0E00               	movlw	0
  4252   0017D4  6E05               	movwf	(___fladd@b+3)^0,c
  4253   0017D6  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4254   0017DA  EF15  F00C         	goto	l1204
  4255   0017DE                     l1206:
  4256   0017DE  A011               	btfss	___fladd@grs^0,0,c
  4257   0017E0  EFF4  F00B         	goto	u2951
  4258   0017E4  EFF6  F00B         	goto	u2950
  4259   0017E8                     u2951:
  4260   0017E8  EFFC  F00B         	goto	l3816
  4261   0017EC                     u2950:
  4262   0017EC  90D8               	bcf	status,0,c
  4263   0017EE  3011               	rrcf	___fladd@grs^0,w,c
  4264   0017F0  0901               	iorlw	1
  4265   0017F2  6E11               	movwf	___fladd@grs^0,c
  4266   0017F4  EFFE  F00B         	goto	l3818
  4267   0017F8                     l3816:
  4268   0017F8  90D8               	bcf	status,0,c
  4269   0017FA  3211               	rrcf	___fladd@grs^0,f,c
  4270   0017FC                     l3818:
  4271   0017FC  A002               	btfss	___fladd@b^0,0,c
  4272   0017FE  EF03  F00C         	goto	u2961
  4273   001802  EF05  F00C         	goto	u2960
  4274   001806                     u2961:
  4275   001806  EF06  F00C         	goto	l3822
  4276   00180A                     u2960:
  4277   00180A  8E11               	bsf	___fladd@grs^0,7,c
  4278   00180C                     l3822:
  4279   00180C  3405               	rlcf	(___fladd@b+3)^0,w,c
  4280   00180E  3205               	rrcf	(___fladd@b+3)^0,f,c
  4281   001810  3204               	rrcf	(___fladd@b+2)^0,f,c
  4282   001812  3203               	rrcf	(___fladd@b+1)^0,f,c
  4283   001814  3202               	rrcf	___fladd@b^0,f,c
  4284   001816  2A10               	incf	___fladd@bexp^0,f,c
  4285   001818                     l1205:
  4286   001818  500F               	movf	___fladd@aexp^0,w,c
  4287   00181A  5C10               	subwf	___fladd@bexp^0,w,c
  4288   00181C  A0D8               	btfss	status,0,c
  4289   00181E  EF13  F00C         	goto	u2971
  4290   001822  EF15  F00C         	goto	u2970
  4291   001826                     u2971:
  4292   001826  EFEF  F00B         	goto	l1206
  4293   00182A                     u2970:
  4294   00182A                     l1204:
  4295   00182A  BC0E               	btfsc	___fladd@signs^0,6,c
  4296   00182C  EF1A  F00C         	goto	u2981
  4297   001830  EF1C  F00C         	goto	u2980
  4298   001834                     u2981:
  4299   001834  EF5C  F00C         	goto	l3850
  4300   001838                     u2980:
  4301   001838  5010               	movf	___fladd@bexp^0,w,c
  4302   00183A  A4D8               	btfss	status,2,c
  4303   00183C  EF22  F00C         	goto	u2991
  4304   001840  EF24  F00C         	goto	u2990
  4305   001844                     u2991:
  4306   001844  EF2E  F00C         	goto	l3832
  4307   001848                     u2990:
  4308   001848  0E00               	movlw	0
  4309   00184A  6E02               	movwf	?___fladd^0,c
  4310   00184C  0E00               	movlw	0
  4311   00184E  6E03               	movwf	(?___fladd+1)^0,c
  4312   001850  0E00               	movlw	0
  4313   001852  6E04               	movwf	(?___fladd+2)^0,c
  4314   001854  0E00               	movlw	0
  4315   001856  6E05               	movwf	(?___fladd+3)^0,c
  4316   001858  EF7D  F00D         	goto	l1213
  4317   00185C                     l3832:
  4318   00185C  5006               	movf	___fladd@a^0,w,c
  4319   00185E  2602               	addwf	___fladd@b^0,f,c
  4320   001860  5007               	movf	(___fladd@a+1)^0,w,c
  4321   001862  2203               	addwfc	(___fladd@b+1)^0,f,c
  4322   001864  5008               	movf	(___fladd@a+2)^0,w,c
  4323   001866  2204               	addwfc	(___fladd@b+2)^0,f,c
  4324   001868  5009               	movf	(___fladd@a+3)^0,w,c
  4325   00186A  2205               	addwfc	(___fladd@b+3)^0,f,c
  4326   00186C  A005               	btfss	(___fladd@b+3)^0,0,c
  4327   00186E  EF3B  F00C         	goto	u3001
  4328   001872  EF3D  F00C         	goto	u3000
  4329   001876                     u3001:
  4330   001876  EFE9  F00C         	goto	l3886
  4331   00187A                     u3000:
  4332   00187A  A011               	btfss	___fladd@grs^0,0,c
  4333   00187C  EF42  F00C         	goto	u3011
  4334   001880  EF44  F00C         	goto	u3010
  4335   001884                     u3011:
  4336   001884  EF4A  F00C         	goto	l3840
  4337   001888                     u3010:
  4338   001888  90D8               	bcf	status,0,c
  4339   00188A  3011               	rrcf	___fladd@grs^0,w,c
  4340   00188C  0901               	iorlw	1
  4341   00188E  6E11               	movwf	___fladd@grs^0,c
  4342   001890  EF4C  F00C         	goto	l3842
  4343   001894                     l3840:
  4344   001894  90D8               	bcf	status,0,c
  4345   001896  3211               	rrcf	___fladd@grs^0,f,c
  4346   001898                     l3842:
  4347   001898  A002               	btfss	___fladd@b^0,0,c
  4348   00189A  EF51  F00C         	goto	u3021
  4349   00189E  EF53  F00C         	goto	u3020
  4350   0018A2                     u3021:
  4351   0018A2  EF54  F00C         	goto	l3846
  4352   0018A6                     u3020:
  4353   0018A6  8E11               	bsf	___fladd@grs^0,7,c
  4354   0018A8                     l3846:
  4355   0018A8  3405               	rlcf	(___fladd@b+3)^0,w,c
  4356   0018AA  3205               	rrcf	(___fladd@b+3)^0,f,c
  4357   0018AC  3204               	rrcf	(___fladd@b+2)^0,f,c
  4358   0018AE  3203               	rrcf	(___fladd@b+1)^0,f,c
  4359   0018B0  3202               	rrcf	___fladd@b^0,f,c
  4360   0018B2  2A10               	incf	___fladd@bexp^0,f,c
  4361   0018B4  EFE9  F00C         	goto	l3886
  4362   0018B8                     l3850:
  4363   0018B8  5006               	movf	___fladd@a^0,w,c
  4364   0018BA  5C02               	subwf	___fladd@b^0,w,c
  4365   0018BC  5007               	movf	(___fladd@a+1)^0,w,c
  4366   0018BE  5803               	subwfb	(___fladd@b+1)^0,w,c
  4367   0018C0  5008               	movf	(___fladd@a+2)^0,w,c
  4368   0018C2  5804               	subwfb	(___fladd@b+2)^0,w,c
  4369   0018C4  5005               	movf	(___fladd@b+3)^0,w,c
  4370   0018C6  0A80               	xorlw	128
  4371   0018C8  6E0A               	movwf	??___fladd^0,c
  4372   0018CA  5009               	movf	(___fladd@a+3)^0,w,c
  4373   0018CC  0A80               	xorlw	128
  4374   0018CE  580A               	subwfb	??___fladd^0,w,c
  4375   0018D0  B0D8               	btfsc	status,0,c
  4376   0018D2  EF6D  F00C         	goto	u3031
  4377   0018D6  EF6F  F00C         	goto	u3030
  4378   0018DA                     u3031:
  4379   0018DA  EF9A  F00C         	goto	l3860
  4380   0018DE                     u3030:
  4381   0018DE  5002               	movf	___fladd@b^0,w,c
  4382   0018E0  5C06               	subwf	___fladd@a^0,w,c
  4383   0018E2  6E0A               	movwf	??___fladd^0,c
  4384   0018E4  5003               	movf	(___fladd@b+1)^0,w,c
  4385   0018E6  5807               	subwfb	(___fladd@a+1)^0,w,c
  4386   0018E8  6E0B               	movwf	(??___fladd+1)^0,c
  4387   0018EA  5004               	movf	(___fladd@b+2)^0,w,c
  4388   0018EC  5808               	subwfb	(___fladd@a+2)^0,w,c
  4389   0018EE  6E0C               	movwf	(??___fladd+2)^0,c
  4390   0018F0  5005               	movf	(___fladd@b+3)^0,w,c
  4391   0018F2  5809               	subwfb	(___fladd@a+3)^0,w,c
  4392   0018F4  6E0D               	movwf	(??___fladd+3)^0,c
  4393   0018F6  0EFF               	movlw	255
  4394   0018F8  240A               	addwf	??___fladd^0,w,c
  4395   0018FA  6E02               	movwf	___fladd@b^0,c
  4396   0018FC  0EFF               	movlw	255
  4397   0018FE  200B               	addwfc	(??___fladd+1)^0,w,c
  4398   001900  6E03               	movwf	(___fladd@b+1)^0,c
  4399   001902  0EFF               	movlw	255
  4400   001904  200C               	addwfc	(??___fladd+2)^0,w,c
  4401   001906  6E04               	movwf	(___fladd@b+2)^0,c
  4402   001908  0EFF               	movlw	255
  4403   00190A  200D               	addwfc	(??___fladd+3)^0,w,c
  4404   00190C  6E05               	movwf	(___fladd@b+3)^0,c
  4405   00190E  0E80               	movlw	128
  4406   001910  1A0E               	xorwf	___fladd@signs^0,f,c
  4407   001912  6C11               	negf	___fladd@grs^0,c
  4408   001914  5011               	movf	___fladd@grs^0,w,c
  4409   001916  A4D8               	btfss	status,2,c
  4410   001918  EF90  F00C         	goto	u3041
  4411   00191C  EF92  F00C         	goto	u3040
  4412   001920                     u3041:
  4413   001920  EFA2  F00C         	goto	l1221
  4414   001924                     u3040:
  4415   001924  0E01               	movlw	1
  4416   001926  2602               	addwf	___fladd@b^0,f,c
  4417   001928  0E00               	movlw	0
  4418   00192A  2203               	addwfc	(___fladd@b+1)^0,f,c
  4419   00192C  2204               	addwfc	(___fladd@b+2)^0,f,c
  4420   00192E  2205               	addwfc	(___fladd@b+3)^0,f,c
  4421   001930  EFA2  F00C         	goto	l1221
  4422   001934                     l3860:
  4423   001934  5006               	movf	___fladd@a^0,w,c
  4424   001936  5E02               	subwf	___fladd@b^0,f,c
  4425   001938  5007               	movf	(___fladd@a+1)^0,w,c
  4426   00193A  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4427   00193C  5008               	movf	(___fladd@a+2)^0,w,c
  4428   00193E  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4429   001940  5009               	movf	(___fladd@a+3)^0,w,c
  4430   001942  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4431   001944                     l1221:
  4432   001944  5002               	movf	___fladd@b^0,w,c
  4433   001946  1003               	iorwf	(___fladd@b+1)^0,w,c
  4434   001948  1004               	iorwf	(___fladd@b+2)^0,w,c
  4435   00194A  1005               	iorwf	(___fladd@b+3)^0,w,c
  4436   00194C  A4D8               	btfss	status,2,c
  4437   00194E  EFAB  F00C         	goto	u3051
  4438   001952  EFAD  F00C         	goto	u3050
  4439   001956                     u3051:
  4440   001956  EFE2  F00C         	goto	l3884
  4441   00195A                     u3050:
  4442   00195A  5011               	movf	___fladd@grs^0,w,c
  4443   00195C  A4D8               	btfss	status,2,c
  4444   00195E  EFB3  F00C         	goto	u3061
  4445   001962  EFB5  F00C         	goto	u3060
  4446   001966                     u3061:
  4447   001966  EFE2  F00C         	goto	l3884
  4448   00196A                     u3060:
  4449   00196A  0E00               	movlw	0
  4450   00196C  6E02               	movwf	?___fladd^0,c
  4451   00196E  0E00               	movlw	0
  4452   001970  6E03               	movwf	(?___fladd+1)^0,c
  4453   001972  0E00               	movlw	0
  4454   001974  6E04               	movwf	(?___fladd+2)^0,c
  4455   001976  0E00               	movlw	0
  4456   001978  6E05               	movwf	(?___fladd+3)^0,c
  4457   00197A  EF7D  F00D         	goto	l1213
  4458   00197E                     l3868:
  4459   00197E  90D8               	bcf	status,0,c
  4460   001980  3602               	rlcf	___fladd@b^0,f,c
  4461   001982  3603               	rlcf	(___fladd@b+1)^0,f,c
  4462   001984  3604               	rlcf	(___fladd@b+2)^0,f,c
  4463   001986  3605               	rlcf	(___fladd@b+3)^0,f,c
  4464   001988  AE11               	btfss	___fladd@grs^0,7,c
  4465   00198A  EFC9  F00C         	goto	u3071
  4466   00198E  EFCB  F00C         	goto	u3070
  4467   001992                     u3071:
  4468   001992  EFCC  F00C         	goto	l3874
  4469   001996                     u3070:
  4470   001996  8002               	bsf	___fladd@b^0,0,c
  4471   001998                     l3874:
  4472   001998  A011               	btfss	___fladd@grs^0,0,c
  4473   00199A  EFD1  F00C         	goto	u3081
  4474   00199E  EFD3  F00C         	goto	u3080
  4475   0019A2                     u3081:
  4476   0019A2  EFD7  F00C         	goto	l3878
  4477   0019A6                     u3080:
  4478   0019A6  80D8               	bsf	status,0,c
  4479   0019A8  3611               	rlcf	___fladd@grs^0,f,c
  4480   0019AA  EFD9  F00C         	goto	l3880
  4481   0019AE                     l3878:
  4482   0019AE  90D8               	bcf	status,0,c
  4483   0019B0  3611               	rlcf	___fladd@grs^0,f,c
  4484   0019B2                     l3880:
  4485   0019B2  5010               	movf	___fladd@bexp^0,w,c
  4486   0019B4  B4D8               	btfsc	status,2,c
  4487   0019B6  EFDF  F00C         	goto	u3091
  4488   0019BA  EFE1  F00C         	goto	u3090
  4489   0019BE                     u3091:
  4490   0019BE  EFE2  F00C         	goto	l3884
  4491   0019C2                     u3090:
  4492   0019C2  0610               	decf	___fladd@bexp^0,f,c
  4493   0019C4                     l3884:
  4494   0019C4  AE04               	btfss	(___fladd@b+2)^0,7,c
  4495   0019C6  EFE7  F00C         	goto	u3101
  4496   0019CA  EFE9  F00C         	goto	u3100
  4497   0019CE                     u3101:
  4498   0019CE  EFBF  F00C         	goto	l3868
  4499   0019D2                     u3100:
  4500   0019D2                     l3886:
  4501   0019D2  0E00               	movlw	0
  4502   0019D4  6E0F               	movwf	___fladd@aexp^0,c
  4503   0019D6  AE11               	btfss	___fladd@grs^0,7,c
  4504   0019D8  EFF0  F00C         	goto	u3111
  4505   0019DC  EFF2  F00C         	goto	u3110
  4506   0019E0                     u3111:
  4507   0019E0  EF0A  F00D         	goto	l1230
  4508   0019E4                     u3110:
  4509   0019E4  C011  F00A         	movff	___fladd@grs,??___fladd
  4510   0019E8  0E7F               	movlw	127
  4511   0019EA  160A               	andwf	??___fladd^0,f,c
  4512   0019EC  B4D8               	btfsc	status,2,c
  4513   0019EE  EFFB  F00C         	goto	u3121
  4514   0019F2  EFFD  F00C         	goto	u3120
  4515   0019F6                     u3121:
  4516   0019F6  EF01  F00D         	goto	l1231
  4517   0019FA                     u3120:
  4518   0019FA                     l3892:
  4519   0019FA  0E01               	movlw	1
  4520   0019FC  6E0F               	movwf	___fladd@aexp^0,c
  4521   0019FE  EF0A  F00D         	goto	l1230
  4522   001A02                     l1231:
  4523   001A02  A002               	btfss	___fladd@b^0,0,c
  4524   001A04  EF06  F00D         	goto	u3131
  4525   001A08  EF08  F00D         	goto	u3130
  4526   001A0C                     u3131:
  4527   001A0C  EF0A  F00D         	goto	l1230
  4528   001A10                     u3130:
  4529   001A10  EFFD  F00C         	goto	l3892
  4530   001A14                     l1230:
  4531   001A14  500F               	movf	___fladd@aexp^0,w,c
  4532   001A16  B4D8               	btfsc	status,2,c
  4533   001A18  EF10  F00D         	goto	u3141
  4534   001A1C  EF12  F00D         	goto	u3140
  4535   001A20                     u3141:
  4536   001A20  EF3D  F00D         	goto	l3904
  4537   001A24                     u3140:
  4538   001A24  0E01               	movlw	1
  4539   001A26  2602               	addwf	___fladd@b^0,f,c
  4540   001A28  0E00               	movlw	0
  4541   001A2A  2203               	addwfc	(___fladd@b+1)^0,f,c
  4542   001A2C  2204               	addwfc	(___fladd@b+2)^0,f,c
  4543   001A2E  2205               	addwfc	(___fladd@b+3)^0,f,c
  4544   001A30  A005               	btfss	(___fladd@b+3)^0,0,c
  4545   001A32  EF1D  F00D         	goto	u3151
  4546   001A36  EF1F  F00D         	goto	u3150
  4547   001A3A                     u3151:
  4548   001A3A  EF3D  F00D         	goto	l3904
  4549   001A3E                     u3150:
  4550   001A3E  C002  F00A         	movff	___fladd@b,??___fladd
  4551   001A42  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4552   001A46  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4553   001A4A  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4554   001A4E  340D               	rlcf	(??___fladd+3)^0,w,c
  4555   001A50  320D               	rrcf	(??___fladd+3)^0,f,c
  4556   001A52  320C               	rrcf	(??___fladd+2)^0,f,c
  4557   001A54  320B               	rrcf	(??___fladd+1)^0,f,c
  4558   001A56  320A               	rrcf	??___fladd^0,f,c
  4559   001A58  C00A  F002         	movff	??___fladd,___fladd@b
  4560   001A5C  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4561   001A60  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4562   001A64  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4563   001A68  2810               	incf	___fladd@bexp^0,w,c
  4564   001A6A  B4D8               	btfsc	status,2,c
  4565   001A6C  EF3A  F00D         	goto	u3161
  4566   001A70  EF3C  F00D         	goto	u3160
  4567   001A74                     u3161:
  4568   001A74  EF3D  F00D         	goto	l3904
  4569   001A78                     u3160:
  4570   001A78  2A10               	incf	___fladd@bexp^0,f,c
  4571   001A7A                     l3904:
  4572   001A7A  2810               	incf	___fladd@bexp^0,w,c
  4573   001A7C  B4D8               	btfsc	status,2,c
  4574   001A7E  EF43  F00D         	goto	u3171
  4575   001A82  EF45  F00D         	goto	u3170
  4576   001A86                     u3171:
  4577   001A86  EF4D  F00D         	goto	l3908
  4578   001A8A                     u3170:
  4579   001A8A  5010               	movf	___fladd@bexp^0,w,c
  4580   001A8C  A4D8               	btfss	status,2,c
  4581   001A8E  EF4B  F00D         	goto	u3181
  4582   001A92  EF4D  F00D         	goto	u3180
  4583   001A96                     u3181:
  4584   001A96  EF5F  F00D         	goto	l3912
  4585   001A9A                     u3180:
  4586   001A9A                     l3908:
  4587   001A9A  0E00               	movlw	0
  4588   001A9C  6E02               	movwf	___fladd@b^0,c
  4589   001A9E  0E00               	movlw	0
  4590   001AA0  6E03               	movwf	(___fladd@b+1)^0,c
  4591   001AA2  0E00               	movlw	0
  4592   001AA4  6E04               	movwf	(___fladd@b+2)^0,c
  4593   001AA6  0E00               	movlw	0
  4594   001AA8  6E05               	movwf	(___fladd@b+3)^0,c
  4595   001AAA  5010               	movf	___fladd@bexp^0,w,c
  4596   001AAC  A4D8               	btfss	status,2,c
  4597   001AAE  EF5B  F00D         	goto	u3191
  4598   001AB2  EF5D  F00D         	goto	u3190
  4599   001AB6                     u3191:
  4600   001AB6  EF5F  F00D         	goto	l3912
  4601   001ABA                     u3190:
  4602   001ABA  0E00               	movlw	0
  4603   001ABC  6E0E               	movwf	___fladd@signs^0,c
  4604   001ABE                     l3912:
  4605   001ABE  A010               	btfss	___fladd@bexp^0,0,c
  4606   001AC0  EF64  F00D         	goto	u3201
  4607   001AC4  EF66  F00D         	goto	u3200
  4608   001AC8                     u3201:
  4609   001AC8  EF69  F00D         	goto	l3916
  4610   001ACC                     u3200:
  4611   001ACC  8E04               	bsf	(___fladd@b+2)^0,7,c
  4612   001ACE  EF6A  F00D         	goto	l3918
  4613   001AD2                     l3916:
  4614   001AD2  9E04               	bcf	(___fladd@b+2)^0,7,c
  4615   001AD4                     l3918:
  4616   001AD4  90D8               	bcf	status,0,c
  4617   001AD6  3010               	rrcf	___fladd@bexp^0,w,c
  4618   001AD8  6E05               	movwf	(___fladd@b+3)^0,c
  4619   001ADA  AE0E               	btfss	___fladd@signs^0,7,c
  4620   001ADC  EF72  F00D         	goto	u3211
  4621   001AE0  EF74  F00D         	goto	u3210
  4622   001AE4                     u3211:
  4623   001AE4  EF75  F00D         	goto	l3924
  4624   001AE8                     u3210:
  4625   001AE8  8E05               	bsf	(___fladd@b+3)^0,7,c
  4626   001AEA                     l3924:
  4627   001AEA  C002  F002         	movff	___fladd@b,?___fladd
  4628   001AEE  C003  F003         	movff	___fladd@b+1,?___fladd+1
  4629   001AF2  C004  F004         	movff	___fladd@b+2,?___fladd+2
  4630   001AF6  C005  F005         	movff	___fladd@b+3,?___fladd+3
  4631   001AFA                     l1213:
  4632   001AFA  0012               	return		;funcret
  4633   001AFC                     __end_of___fladd:
  4634                           	callstack 0
  4635                           
  4636 ;; *************** function ___flmul *****************
  4637 ;; Defined at:
  4638 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  b               4    1[COMRAM] unsigned char 
  4641 ;;  a               4    5[COMRAM] unsigned char 
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;  prod            4   20[COMRAM] struct .
  4644 ;;  grs             4   14[COMRAM] unsigned long 
  4645 ;;  temp            2   24[COMRAM] struct .
  4646 ;;  bexp            1   19[COMRAM] unsigned char 
  4647 ;;  aexp            1   18[COMRAM] unsigned char 
  4648 ;;  sign            1   13[COMRAM] unsigned char 
  4649 ;; Return value:  Size  Location     Type
  4650 ;;                  4    1[COMRAM] unsigned char 
  4651 ;; Registers used:
  4652 ;;		wreg, status,2, status,0, prodl, prodh
  4653 ;; Tracked objects:
  4654 ;;		On entry : 0/0
  4655 ;;		On exit  : 0/0
  4656 ;;		Unchanged: 0/0
  4657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4658 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4659 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4660 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4661 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4662 ;;Total ram usage:       25 bytes
  4663 ;; Hardware stack levels used: 1
  4664 ;; Hardware stack levels required when called: 1
  4665 ;; This function calls:
  4666 ;;		Nothing
  4667 ;; This function is called by:
  4668 ;;		_convert_rgb2hue
  4669 ;;		_main
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text13
  4674   001AFC                     __ptext13:
  4675                           	callstack 0
  4676   001AFC                     ___flmul:
  4677                           	callstack 27
  4678   001AFC  5005               	movf	(___flmul@b+3)^0,w,c
  4679   001AFE  0B80               	andlw	128
  4680   001B00  6E0E               	movwf	___flmul@sign^0,c
  4681   001B02  5005               	movf	(___flmul@b+3)^0,w,c
  4682   001B04  2405               	addwf	(___flmul@b+3)^0,w,c
  4683   001B06  6E14               	movwf	___flmul@bexp^0,c
  4684   001B08  AE04               	btfss	(___flmul@b+2)^0,7,c
  4685   001B0A  EF89  F00D         	goto	u3521
  4686   001B0E  EF8B  F00D         	goto	u3520
  4687   001B12                     u3521:
  4688   001B12  EF8C  F00D         	goto	l4210
  4689   001B16                     u3520:
  4690   001B16  8014               	bsf	___flmul@bexp^0,0,c
  4691   001B18                     l4210:
  4692   001B18  5014               	movf	___flmul@bexp^0,w,c
  4693   001B1A  B4D8               	btfsc	status,2,c
  4694   001B1C  EF92  F00D         	goto	u3531
  4695   001B20  EF94  F00D         	goto	u3530
  4696   001B24                     u3531:
  4697   001B24  EFA7  F00D         	goto	l4218
  4698   001B28                     u3530:
  4699   001B28  2814               	incf	___flmul@bexp^0,w,c
  4700   001B2A  A4D8               	btfss	status,2,c
  4701   001B2C  EF9A  F00D         	goto	u3541
  4702   001B30  EF9C  F00D         	goto	u3540
  4703   001B34                     u3541:
  4704   001B34  EFA4  F00D         	goto	l4216
  4705   001B38                     u3540:
  4706   001B38  0E00               	movlw	0
  4707   001B3A  6E02               	movwf	___flmul@b^0,c
  4708   001B3C  0E00               	movlw	0
  4709   001B3E  6E03               	movwf	(___flmul@b+1)^0,c
  4710   001B40  0E00               	movlw	0
  4711   001B42  6E04               	movwf	(___flmul@b+2)^0,c
  4712   001B44  0E00               	movlw	0
  4713   001B46  6E05               	movwf	(___flmul@b+3)^0,c
  4714   001B48                     l4216:
  4715   001B48  8E04               	bsf	(___flmul@b+2)^0,7,c
  4716   001B4A  EFAF  F00D         	goto	l4220
  4717   001B4E                     l4218:
  4718   001B4E  0E00               	movlw	0
  4719   001B50  6E02               	movwf	___flmul@b^0,c
  4720   001B52  0E00               	movlw	0
  4721   001B54  6E03               	movwf	(___flmul@b+1)^0,c
  4722   001B56  0E00               	movlw	0
  4723   001B58  6E04               	movwf	(___flmul@b+2)^0,c
  4724   001B5A  0E00               	movlw	0
  4725   001B5C  6E05               	movwf	(___flmul@b+3)^0,c
  4726   001B5E                     l4220:
  4727   001B5E  5009               	movf	(___flmul@a+3)^0,w,c
  4728   001B60  0B80               	andlw	128
  4729   001B62  1A0E               	xorwf	___flmul@sign^0,f,c
  4730   001B64  5009               	movf	(___flmul@a+3)^0,w,c
  4731   001B66  2409               	addwf	(___flmul@a+3)^0,w,c
  4732   001B68  6E13               	movwf	___flmul@aexp^0,c
  4733   001B6A  AE08               	btfss	(___flmul@a+2)^0,7,c
  4734   001B6C  EFBA  F00D         	goto	u3551
  4735   001B70  EFBC  F00D         	goto	u3550
  4736   001B74                     u3551:
  4737   001B74  EFBD  F00D         	goto	l4228
  4738   001B78                     u3550:
  4739   001B78  8013               	bsf	___flmul@aexp^0,0,c
  4740   001B7A                     l4228:
  4741   001B7A  5013               	movf	___flmul@aexp^0,w,c
  4742   001B7C  B4D8               	btfsc	status,2,c
  4743   001B7E  EFC3  F00D         	goto	u3561
  4744   001B82  EFC5  F00D         	goto	u3560
  4745   001B86                     u3561:
  4746   001B86  EFD8  F00D         	goto	l4236
  4747   001B8A                     u3560:
  4748   001B8A  2813               	incf	___flmul@aexp^0,w,c
  4749   001B8C  A4D8               	btfss	status,2,c
  4750   001B8E  EFCB  F00D         	goto	u3571
  4751   001B92  EFCD  F00D         	goto	u3570
  4752   001B96                     u3571:
  4753   001B96  EFD5  F00D         	goto	l4234
  4754   001B9A                     u3570:
  4755   001B9A  0E00               	movlw	0
  4756   001B9C  6E06               	movwf	___flmul@a^0,c
  4757   001B9E  0E00               	movlw	0
  4758   001BA0  6E07               	movwf	(___flmul@a+1)^0,c
  4759   001BA2  0E00               	movlw	0
  4760   001BA4  6E08               	movwf	(___flmul@a+2)^0,c
  4761   001BA6  0E00               	movlw	0
  4762   001BA8  6E09               	movwf	(___flmul@a+3)^0,c
  4763   001BAA                     l4234:
  4764   001BAA  8E08               	bsf	(___flmul@a+2)^0,7,c
  4765   001BAC  EFE0  F00D         	goto	l1290
  4766   001BB0                     l4236:
  4767   001BB0  0E00               	movlw	0
  4768   001BB2  6E06               	movwf	___flmul@a^0,c
  4769   001BB4  0E00               	movlw	0
  4770   001BB6  6E07               	movwf	(___flmul@a+1)^0,c
  4771   001BB8  0E00               	movlw	0
  4772   001BBA  6E08               	movwf	(___flmul@a+2)^0,c
  4773   001BBC  0E00               	movlw	0
  4774   001BBE  6E09               	movwf	(___flmul@a+3)^0,c
  4775   001BC0                     l1290:
  4776   001BC0  5013               	movf	___flmul@aexp^0,w,c
  4777   001BC2  B4D8               	btfsc	status,2,c
  4778   001BC4  EFE6  F00D         	goto	u3581
  4779   001BC8  EFE8  F00D         	goto	u3580
  4780   001BCC                     u3581:
  4781   001BCC  EFF0  F00D         	goto	l4240
  4782   001BD0                     u3580:
  4783   001BD0  5014               	movf	___flmul@bexp^0,w,c
  4784   001BD2  A4D8               	btfss	status,2,c
  4785   001BD4  EFEE  F00D         	goto	u3591
  4786   001BD8  EFF0  F00D         	goto	u3590
  4787   001BDC                     u3591:
  4788   001BDC  EFFA  F00D         	goto	l4244
  4789   001BE0                     u3590:
  4790   001BE0                     l4240:
  4791   001BE0  0E00               	movlw	0
  4792   001BE2  6E02               	movwf	?___flmul^0,c
  4793   001BE4  0E00               	movlw	0
  4794   001BE6  6E03               	movwf	(?___flmul+1)^0,c
  4795   001BE8  0E00               	movlw	0
  4796   001BEA  6E04               	movwf	(?___flmul+2)^0,c
  4797   001BEC  0E00               	movlw	0
  4798   001BEE  6E05               	movwf	(?___flmul+3)^0,c
  4799   001BF0  EF92  F00F         	goto	l1294
  4800   001BF4                     l4244:
  4801   001BF4  5008               	movf	(___flmul@a+2)^0,w,c
  4802   001BF6  0202               	mulwf	___flmul@b^0,c
  4803   001BF8  CFF3 F019          	movff	prodl,___flmul@temp
  4804   001BFC  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4805   001C00  5019               	movf	___flmul@temp^0,w,c
  4806   001C02  6E0F               	movwf	___flmul@grs^0,c
  4807   001C04  6A10               	clrf	(___flmul@grs+1)^0,c
  4808   001C06  6A11               	clrf	(___flmul@grs+2)^0,c
  4809   001C08  6A12               	clrf	(___flmul@grs+3)^0,c
  4810   001C0A  501A               	movf	(___flmul@temp+1)^0,w,c
  4811   001C0C  6E15               	movwf	___flmul@prod^0,c
  4812   001C0E  6A16               	clrf	(___flmul@prod+1)^0,c
  4813   001C10  6A17               	clrf	(___flmul@prod+2)^0,c
  4814   001C12  6A18               	clrf	(___flmul@prod+3)^0,c
  4815   001C14  5007               	movf	(___flmul@a+1)^0,w,c
  4816   001C16  0203               	mulwf	(___flmul@b+1)^0,c
  4817   001C18  CFF3 F019          	movff	prodl,___flmul@temp
  4818   001C1C  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4819   001C20  5019               	movf	___flmul@temp^0,w,c
  4820   001C22  260F               	addwf	___flmul@grs^0,f,c
  4821   001C24  0E00               	movlw	0
  4822   001C26  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4823   001C28  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4824   001C2A  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4825   001C2C  501A               	movf	(___flmul@temp+1)^0,w,c
  4826   001C2E  2615               	addwf	___flmul@prod^0,f,c
  4827   001C30  0E00               	movlw	0
  4828   001C32  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4829   001C34  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4830   001C36  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4831   001C38  5006               	movf	___flmul@a^0,w,c
  4832   001C3A  0204               	mulwf	(___flmul@b+2)^0,c
  4833   001C3C  CFF3 F019          	movff	prodl,___flmul@temp
  4834   001C40  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4835   001C44  5019               	movf	___flmul@temp^0,w,c
  4836   001C46  260F               	addwf	___flmul@grs^0,f,c
  4837   001C48  0E00               	movlw	0
  4838   001C4A  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4839   001C4C  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4840   001C4E  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4841   001C50  501A               	movf	(___flmul@temp+1)^0,w,c
  4842   001C52  2615               	addwf	___flmul@prod^0,f,c
  4843   001C54  0E00               	movlw	0
  4844   001C56  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4845   001C58  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4846   001C5A  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4847   001C5C  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4848   001C60  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4849   001C64  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4850   001C68  6A0F               	clrf	___flmul@grs^0,c
  4851   001C6A  5006               	movf	___flmul@a^0,w,c
  4852   001C6C  0203               	mulwf	(___flmul@b+1)^0,c
  4853   001C6E  CFF3 F019          	movff	prodl,___flmul@temp
  4854   001C72  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4855   001C76  5019               	movf	___flmul@temp^0,w,c
  4856   001C78  260F               	addwf	___flmul@grs^0,f,c
  4857   001C7A  501A               	movf	(___flmul@temp+1)^0,w,c
  4858   001C7C  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4859   001C7E  0E00               	movlw	0
  4860   001C80  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4861   001C82  0E00               	movlw	0
  4862   001C84  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4863   001C86  5007               	movf	(___flmul@a+1)^0,w,c
  4864   001C88  0202               	mulwf	___flmul@b^0,c
  4865   001C8A  CFF3 F019          	movff	prodl,___flmul@temp
  4866   001C8E  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4867   001C92  5019               	movf	___flmul@temp^0,w,c
  4868   001C94  260F               	addwf	___flmul@grs^0,f,c
  4869   001C96  501A               	movf	(___flmul@temp+1)^0,w,c
  4870   001C98  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4871   001C9A  0E00               	movlw	0
  4872   001C9C  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4873   001C9E  0E00               	movlw	0
  4874   001CA0  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4875   001CA2  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4876   001CA6  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4877   001CAA  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4878   001CAE  6A0F               	clrf	___flmul@grs^0,c
  4879   001CB0  5006               	movf	___flmul@a^0,w,c
  4880   001CB2  0202               	mulwf	___flmul@b^0,c
  4881   001CB4  CFF3 F019          	movff	prodl,___flmul@temp
  4882   001CB8  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4883   001CBC  5019               	movf	___flmul@temp^0,w,c
  4884   001CBE  260F               	addwf	___flmul@grs^0,f,c
  4885   001CC0  501A               	movf	(___flmul@temp+1)^0,w,c
  4886   001CC2  2210               	addwfc	(___flmul@grs+1)^0,f,c
  4887   001CC4  0E00               	movlw	0
  4888   001CC6  2211               	addwfc	(___flmul@grs+2)^0,f,c
  4889   001CC8  0E00               	movlw	0
  4890   001CCA  2212               	addwfc	(___flmul@grs+3)^0,f,c
  4891   001CCC  5008               	movf	(___flmul@a+2)^0,w,c
  4892   001CCE  0203               	mulwf	(___flmul@b+1)^0,c
  4893   001CD0  CFF3 F019          	movff	prodl,___flmul@temp
  4894   001CD4  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4895   001CD8  5019               	movf	___flmul@temp^0,w,c
  4896   001CDA  2615               	addwf	___flmul@prod^0,f,c
  4897   001CDC  501A               	movf	(___flmul@temp+1)^0,w,c
  4898   001CDE  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4899   001CE0  0E00               	movlw	0
  4900   001CE2  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4901   001CE4  0E00               	movlw	0
  4902   001CE6  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4903   001CE8  5007               	movf	(___flmul@a+1)^0,w,c
  4904   001CEA  0204               	mulwf	(___flmul@b+2)^0,c
  4905   001CEC  CFF3 F019          	movff	prodl,___flmul@temp
  4906   001CF0  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4907   001CF4  5019               	movf	___flmul@temp^0,w,c
  4908   001CF6  2615               	addwf	___flmul@prod^0,f,c
  4909   001CF8  501A               	movf	(___flmul@temp+1)^0,w,c
  4910   001CFA  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4911   001CFC  0E00               	movlw	0
  4912   001CFE  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4913   001D00  0E00               	movlw	0
  4914   001D02  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4915   001D04  5008               	movf	(___flmul@a+2)^0,w,c
  4916   001D06  0204               	mulwf	(___flmul@b+2)^0,c
  4917   001D08  CFF3 F019          	movff	prodl,___flmul@temp
  4918   001D0C  CFF4 F01A          	movff	prodh,___flmul@temp+1
  4919   001D10  5019               	movf	___flmul@temp^0,w,c
  4920   001D12  6E0A               	movwf	??___flmul^0,c
  4921   001D14  501A               	movf	(___flmul@temp+1)^0,w,c
  4922   001D16  6E0B               	movwf	(??___flmul+1)^0,c
  4923   001D18  6A0C               	clrf	(??___flmul+2)^0,c
  4924   001D1A  6A0D               	clrf	(??___flmul+3)^0,c
  4925   001D1C  C00C  F00D         	movff	??___flmul+2,??___flmul+3
  4926   001D20  C00B  F00C         	movff	??___flmul+1,??___flmul+2
  4927   001D24  C00A  F00B         	movff	??___flmul,??___flmul+1
  4928   001D28  6A0A               	clrf	??___flmul^0,c
  4929   001D2A  500A               	movf	??___flmul^0,w,c
  4930   001D2C  2615               	addwf	___flmul@prod^0,f,c
  4931   001D2E  500B               	movf	(??___flmul+1)^0,w,c
  4932   001D30  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4933   001D32  500C               	movf	(??___flmul+2)^0,w,c
  4934   001D34  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4935   001D36  500D               	movf	(??___flmul+3)^0,w,c
  4936   001D38  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4937   001D3A  C00F  F00A         	movff	___flmul@grs,??___flmul
  4938   001D3E  C010  F00B         	movff	___flmul@grs+1,??___flmul+1
  4939   001D42  C011  F00C         	movff	___flmul@grs+2,??___flmul+2
  4940   001D46  C012  F00D         	movff	___flmul@grs+3,??___flmul+3
  4941   001D4A  0E19               	movlw	25
  4942   001D4C  EFAD  F00E         	goto	u3600
  4943   001D50                     u3605:
  4944   001D50  90D8               	bcf	status,0,c
  4945   001D52  320D               	rrcf	(??___flmul+3)^0,f,c
  4946   001D54  320C               	rrcf	(??___flmul+2)^0,f,c
  4947   001D56  320B               	rrcf	(??___flmul+1)^0,f,c
  4948   001D58  320A               	rrcf	??___flmul^0,f,c
  4949   001D5A                     u3600:
  4950   001D5A  2EE8               	decfsz	wreg,f,c
  4951   001D5C  EFA8  F00E         	goto	u3605
  4952   001D60  500A               	movf	??___flmul^0,w,c
  4953   001D62  2615               	addwf	___flmul@prod^0,f,c
  4954   001D64  500B               	movf	(??___flmul+1)^0,w,c
  4955   001D66  2216               	addwfc	(___flmul@prod+1)^0,f,c
  4956   001D68  500C               	movf	(??___flmul+2)^0,w,c
  4957   001D6A  2217               	addwfc	(___flmul@prod+2)^0,f,c
  4958   001D6C  500D               	movf	(??___flmul+3)^0,w,c
  4959   001D6E  2218               	addwfc	(___flmul@prod+3)^0,f,c
  4960   001D70  C011  F012         	movff	___flmul@grs+2,___flmul@grs+3
  4961   001D74  C010  F011         	movff	___flmul@grs+1,___flmul@grs+2
  4962   001D78  C00F  F010         	movff	___flmul@grs,___flmul@grs+1
  4963   001D7C  6A0F               	clrf	___flmul@grs^0,c
  4964   001D7E  5013               	movf	___flmul@aexp^0,w,c
  4965   001D80  C014  F00A         	movff	___flmul@bexp,??___flmul
  4966   001D84  6A0B               	clrf	(??___flmul+1)^0,c
  4967   001D86  260A               	addwf	??___flmul^0,f,c
  4968   001D88  0E00               	movlw	0
  4969   001D8A  220B               	addwfc	(??___flmul+1)^0,f,c
  4970   001D8C  0E82               	movlw	130
  4971   001D8E  240A               	addwf	??___flmul^0,w,c
  4972   001D90  6E19               	movwf	___flmul@temp^0,c
  4973   001D92  0EFF               	movlw	255
  4974   001D94  200B               	addwfc	(??___flmul+1)^0,w,c
  4975   001D96  6E1A               	movwf	(___flmul@temp+1)^0,c
  4976   001D98  EFE3  F00E         	goto	l4292
  4977   001D9C                     l4286:
  4978   001D9C  90D8               	bcf	status,0,c
  4979   001D9E  3615               	rlcf	___flmul@prod^0,f,c
  4980   001DA0  3616               	rlcf	(___flmul@prod+1)^0,f,c
  4981   001DA2  3617               	rlcf	(___flmul@prod+2)^0,f,c
  4982   001DA4  3618               	rlcf	(___flmul@prod+3)^0,f,c
  4983   001DA6  AE12               	btfss	(___flmul@grs+3)^0,7,c
  4984   001DA8  EFD8  F00E         	goto	u3611
  4985   001DAC  EFDA  F00E         	goto	u3610
  4986   001DB0                     u3611:
  4987   001DB0  EFDB  F00E         	goto	l1297
  4988   001DB4                     u3610:
  4989   001DB4  8015               	bsf	___flmul@prod^0,0,c
  4990   001DB6                     l1297:
  4991   001DB6  90D8               	bcf	status,0,c
  4992   001DB8  360F               	rlcf	___flmul@grs^0,f,c
  4993   001DBA  3610               	rlcf	(___flmul@grs+1)^0,f,c
  4994   001DBC  3611               	rlcf	(___flmul@grs+2)^0,f,c
  4995   001DBE  3612               	rlcf	(___flmul@grs+3)^0,f,c
  4996   001DC0  0619               	decf	___flmul@temp^0,f,c
  4997   001DC2  A0D8               	btfss	status,0,c
  4998   001DC4  061A               	decf	(___flmul@temp+1)^0,f,c
  4999   001DC6                     l4292:
  5000   001DC6  AE17               	btfss	(___flmul@prod+2)^0,7,c
  5001   001DC8  EFE8  F00E         	goto	u3621
  5002   001DCC  EFEA  F00E         	goto	u3620
  5003   001DD0                     u3621:
  5004   001DD0  EFCE  F00E         	goto	l4286
  5005   001DD4                     u3620:
  5006   001DD4  0E00               	movlw	0
  5007   001DD6  6E13               	movwf	___flmul@aexp^0,c
  5008   001DD8  AE12               	btfss	(___flmul@grs+3)^0,7,c
  5009   001DDA  EFF1  F00E         	goto	u3631
  5010   001DDE  EFF3  F00E         	goto	u3630
  5011   001DE2                     u3631:
  5012   001DE2  EF17  F00F         	goto	l1299
  5013   001DE6                     u3630:
  5014   001DE6  0EFF               	movlw	255
  5015   001DE8  140F               	andwf	___flmul@grs^0,w,c
  5016   001DEA  6E0A               	movwf	??___flmul^0,c
  5017   001DEC  0EFF               	movlw	255
  5018   001DEE  1410               	andwf	(___flmul@grs+1)^0,w,c
  5019   001DF0  6E0B               	movwf	(??___flmul+1)^0,c
  5020   001DF2  0EFF               	movlw	255
  5021   001DF4  1411               	andwf	(___flmul@grs+2)^0,w,c
  5022   001DF6  6E0C               	movwf	(??___flmul+2)^0,c
  5023   001DF8  0E7F               	movlw	127
  5024   001DFA  1412               	andwf	(___flmul@grs+3)^0,w,c
  5025   001DFC  6E0D               	movwf	(??___flmul+3)^0,c
  5026   001DFE  500A               	movf	??___flmul^0,w,c
  5027   001E00  100B               	iorwf	(??___flmul+1)^0,w,c
  5028   001E02  100C               	iorwf	(??___flmul+2)^0,w,c
  5029   001E04  100D               	iorwf	(??___flmul+3)^0,w,c
  5030   001E06  B4D8               	btfsc	status,2,c
  5031   001E08  EF08  F00F         	goto	u3641
  5032   001E0C  EF0A  F00F         	goto	u3640
  5033   001E10                     u3641:
  5034   001E10  EF0E  F00F         	goto	l1300
  5035   001E14                     u3640:
  5036   001E14                     l4300:
  5037   001E14  0E01               	movlw	1
  5038   001E16  6E13               	movwf	___flmul@aexp^0,c
  5039   001E18  EF17  F00F         	goto	l1299
  5040   001E1C                     l1300:
  5041   001E1C  A015               	btfss	___flmul@prod^0,0,c
  5042   001E1E  EF13  F00F         	goto	u3651
  5043   001E22  EF15  F00F         	goto	u3650
  5044   001E26                     u3651:
  5045   001E26  EF17  F00F         	goto	l1299
  5046   001E2A                     u3650:
  5047   001E2A  EF0A  F00F         	goto	l4300
  5048   001E2E                     l1299:
  5049   001E2E  5013               	movf	___flmul@aexp^0,w,c
  5050   001E30  B4D8               	btfsc	status,2,c
  5051   001E32  EF1D  F00F         	goto	u3661
  5052   001E36  EF1F  F00F         	goto	u3660
  5053   001E3A                     u3661:
  5054   001E3A  EF43  F00F         	goto	l4312
  5055   001E3E                     u3660:
  5056   001E3E  0E01               	movlw	1
  5057   001E40  2615               	addwf	___flmul@prod^0,f,c
  5058   001E42  0E00               	movlw	0
  5059   001E44  2216               	addwfc	(___flmul@prod+1)^0,f,c
  5060   001E46  2217               	addwfc	(___flmul@prod+2)^0,f,c
  5061   001E48  2218               	addwfc	(___flmul@prod+3)^0,f,c
  5062   001E4A  A018               	btfss	(___flmul@prod+3)^0,0,c
  5063   001E4C  EF2A  F00F         	goto	u3671
  5064   001E50  EF2C  F00F         	goto	u3670
  5065   001E54                     u3671:
  5066   001E54  EF43  F00F         	goto	l4312
  5067   001E58                     u3670:
  5068   001E58  C015  F00A         	movff	___flmul@prod,??___flmul
  5069   001E5C  C016  F00B         	movff	___flmul@prod+1,??___flmul+1
  5070   001E60  C017  F00C         	movff	___flmul@prod+2,??___flmul+2
  5071   001E64  C018  F00D         	movff	___flmul@prod+3,??___flmul+3
  5072   001E68  340D               	rlcf	(??___flmul+3)^0,w,c
  5073   001E6A  320D               	rrcf	(??___flmul+3)^0,f,c
  5074   001E6C  320C               	rrcf	(??___flmul+2)^0,f,c
  5075   001E6E  320B               	rrcf	(??___flmul+1)^0,f,c
  5076   001E70  320A               	rrcf	??___flmul^0,f,c
  5077   001E72  C00A  F015         	movff	??___flmul,___flmul@prod
  5078   001E76  C00B  F016         	movff	??___flmul+1,___flmul@prod+1
  5079   001E7A  C00C  F017         	movff	??___flmul+2,___flmul@prod+2
  5080   001E7E  C00D  F018         	movff	??___flmul+3,___flmul@prod+3
  5081   001E82  4A19               	infsnz	___flmul@temp^0,f,c
  5082   001E84  2A1A               	incf	(___flmul@temp+1)^0,f,c
  5083   001E86                     l4312:
  5084   001E86  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  5085   001E88  EF4E  F00F         	goto	u3681
  5086   001E8C  501A               	movf	(___flmul@temp+1)^0,w,c
  5087   001E8E  E108               	bnz	u3680
  5088   001E90  2819               	incf	___flmul@temp^0,w,c
  5089   001E92  A0D8               	btfss	status,0,c
  5090   001E94  EF4E  F00F         	goto	u3681
  5091   001E98  EF50  F00F         	goto	u3680
  5092   001E9C                     u3681:
  5093   001E9C  EF5A  F00F         	goto	l4316
  5094   001EA0                     u3680:
  5095   001EA0  0E00               	movlw	0
  5096   001EA2  6E15               	movwf	___flmul@prod^0,c
  5097   001EA4  0E00               	movlw	0
  5098   001EA6  6E16               	movwf	(___flmul@prod+1)^0,c
  5099   001EA8  0E80               	movlw	128
  5100   001EAA  6E17               	movwf	(___flmul@prod+2)^0,c
  5101   001EAC  0E7F               	movlw	127
  5102   001EAE  6E18               	movwf	(___flmul@prod+3)^0,c
  5103   001EB0  EF88  F00F         	goto	l4328
  5104   001EB4                     l4316:
  5105   001EB4  BE1A               	btfsc	(___flmul@temp+1)^0,7,c
  5106   001EB6  EF67  F00F         	goto	u3690
  5107   001EBA  501A               	movf	(___flmul@temp+1)^0,w,c
  5108   001EBC  E106               	bnz	u3691
  5109   001EBE  0419               	decf	___flmul@temp^0,w,c
  5110   001EC0  B0D8               	btfsc	status,0,c
  5111   001EC2  EF65  F00F         	goto	u3691
  5112   001EC6  EF67  F00F         	goto	u3690
  5113   001ECA                     u3691:
  5114   001ECA  EF73  F00F         	goto	l1307
  5115   001ECE                     u3690:
  5116   001ECE  0E00               	movlw	0
  5117   001ED0  6E15               	movwf	___flmul@prod^0,c
  5118   001ED2  0E00               	movlw	0
  5119   001ED4  6E16               	movwf	(___flmul@prod+1)^0,c
  5120   001ED6  0E00               	movlw	0
  5121   001ED8  6E17               	movwf	(___flmul@prod+2)^0,c
  5122   001EDA  0E00               	movlw	0
  5123   001EDC  6E18               	movwf	(___flmul@prod+3)^0,c
  5124   001EDE  0E00               	movlw	0
  5125   001EE0  6E0E               	movwf	___flmul@sign^0,c
  5126   001EE2  EF88  F00F         	goto	l4328
  5127   001EE6                     l1307:
  5128   001EE6  C019  F014         	movff	___flmul@temp,___flmul@bexp
  5129   001EEA  0EFF               	movlw	255
  5130   001EEC  1615               	andwf	___flmul@prod^0,f,c
  5131   001EEE  0EFF               	movlw	255
  5132   001EF0  1616               	andwf	(___flmul@prod+1)^0,f,c
  5133   001EF2  0E7F               	movlw	127
  5134   001EF4  1617               	andwf	(___flmul@prod+2)^0,f,c
  5135   001EF6  0E00               	movlw	0
  5136   001EF8  1618               	andwf	(___flmul@prod+3)^0,f,c
  5137   001EFA  A014               	btfss	___flmul@bexp^0,0,c
  5138   001EFC  EF82  F00F         	goto	u3701
  5139   001F00  EF84  F00F         	goto	u3700
  5140   001F04                     u3701:
  5141   001F04  EF85  F00F         	goto	l4326
  5142   001F08                     u3700:
  5143   001F08  8E17               	bsf	(___flmul@prod+2)^0,7,c
  5144   001F0A                     l4326:
  5145   001F0A  90D8               	bcf	status,0,c
  5146   001F0C  3014               	rrcf	___flmul@bexp^0,w,c
  5147   001F0E  6E18               	movwf	(___flmul@prod+3)^0,c
  5148   001F10                     l4328:
  5149   001F10  500E               	movf	___flmul@sign^0,w,c
  5150   001F12  1218               	iorwf	(___flmul@prod+3)^0,f,c
  5151   001F14  C015  F002         	movff	___flmul@prod,?___flmul
  5152   001F18  C016  F003         	movff	___flmul@prod+1,?___flmul+1
  5153   001F1C  C017  F004         	movff	___flmul@prod+2,?___flmul+2
  5154   001F20  C018  F005         	movff	___flmul@prod+3,?___flmul+3
  5155   001F24                     l1294:
  5156   001F24  0012               	return		;funcret
  5157   001F26                     __end_of___flmul:
  5158                           	callstack 0
  5159                           
  5160 ;; *************** function ___flge *****************
  5161 ;; Defined at:
  5162 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;  ff1             4    1[COMRAM] unsigned char 
  5165 ;;  ff2             4    5[COMRAM] unsigned char 
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;		None
  5168 ;; Return value:  Size  Location     Type
  5169 ;;		None               void
  5170 ;; Registers used:
  5171 ;;		wreg, status,2, status,0
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5177 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5179 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5180 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5181 ;;Total ram usage:       12 bytes
  5182 ;; Hardware stack levels used: 1
  5183 ;; Hardware stack levels required when called: 1
  5184 ;; This function calls:
  5185 ;;		Nothing
  5186 ;; This function is called by:
  5187 ;;		_convert_rgb2hue
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           	psect	text14
  5192   0030FE                     __ptext14:
  5193                           	callstack 0
  5194   0030FE                     ___flge:
  5195                           	callstack 27
  5196   0030FE  0E00               	movlw	0
  5197   003100  1402               	andwf	___flge@ff1^0,w,c
  5198   003102  6E0A               	movwf	??___flge^0,c
  5199   003104  0E00               	movlw	0
  5200   003106  1403               	andwf	(___flge@ff1+1)^0,w,c
  5201   003108  6E0B               	movwf	(??___flge+1)^0,c
  5202   00310A  0E80               	movlw	128
  5203   00310C  1404               	andwf	(___flge@ff1+2)^0,w,c
  5204   00310E  6E0C               	movwf	(??___flge+2)^0,c
  5205   003110  0E7F               	movlw	127
  5206   003112  1405               	andwf	(___flge@ff1+3)^0,w,c
  5207   003114  6E0D               	movwf	(??___flge+3)^0,c
  5208   003116  500A               	movf	??___flge^0,w,c
  5209   003118  100B               	iorwf	(??___flge+1)^0,w,c
  5210   00311A  100C               	iorwf	(??___flge+2)^0,w,c
  5211   00311C  100D               	iorwf	(??___flge+3)^0,w,c
  5212   00311E  A4D8               	btfss	status,2,c
  5213   003120  EF94  F018         	goto	u3741
  5214   003124  EF96  F018         	goto	u3740
  5215   003128                     u3741:
  5216   003128  EF9E  F018         	goto	l4360
  5217   00312C                     u3740:
  5218   00312C  0E00               	movlw	0
  5219   00312E  6E02               	movwf	___flge@ff1^0,c
  5220   003130  0E00               	movlw	0
  5221   003132  6E03               	movwf	(___flge@ff1+1)^0,c
  5222   003134  0E00               	movlw	0
  5223   003136  6E04               	movwf	(___flge@ff1+2)^0,c
  5224   003138  0E00               	movlw	0
  5225   00313A  6E05               	movwf	(___flge@ff1+3)^0,c
  5226   00313C                     l4360:
  5227   00313C  0E00               	movlw	0
  5228   00313E  1406               	andwf	___flge@ff2^0,w,c
  5229   003140  6E0A               	movwf	??___flge^0,c
  5230   003142  0E00               	movlw	0
  5231   003144  1407               	andwf	(___flge@ff2+1)^0,w,c
  5232   003146  6E0B               	movwf	(??___flge+1)^0,c
  5233   003148  0E80               	movlw	128
  5234   00314A  1408               	andwf	(___flge@ff2+2)^0,w,c
  5235   00314C  6E0C               	movwf	(??___flge+2)^0,c
  5236   00314E  0E7F               	movlw	127
  5237   003150  1409               	andwf	(___flge@ff2+3)^0,w,c
  5238   003152  6E0D               	movwf	(??___flge+3)^0,c
  5239   003154  500A               	movf	??___flge^0,w,c
  5240   003156  100B               	iorwf	(??___flge+1)^0,w,c
  5241   003158  100C               	iorwf	(??___flge+2)^0,w,c
  5242   00315A  100D               	iorwf	(??___flge+3)^0,w,c
  5243   00315C  A4D8               	btfss	status,2,c
  5244   00315E  EFB3  F018         	goto	u3751
  5245   003162  EFB5  F018         	goto	u3750
  5246   003166                     u3751:
  5247   003166  EFBD  F018         	goto	l4364
  5248   00316A                     u3750:
  5249   00316A  0E00               	movlw	0
  5250   00316C  6E06               	movwf	___flge@ff2^0,c
  5251   00316E  0E00               	movlw	0
  5252   003170  6E07               	movwf	(___flge@ff2+1)^0,c
  5253   003172  0E00               	movlw	0
  5254   003174  6E08               	movwf	(___flge@ff2+2)^0,c
  5255   003176  0E00               	movlw	0
  5256   003178  6E09               	movwf	(___flge@ff2+3)^0,c
  5257   00317A                     l4364:
  5258   00317A  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5259   00317C  EFC2  F018         	goto	u3761
  5260   003180  EFC4  F018         	goto	u3760
  5261   003184                     u3761:
  5262   003184  EFCD  F018         	goto	l4368
  5263   003188                     u3760:
  5264   003188  6C02               	negf	___flge@ff1^0,c
  5265   00318A  1E03               	comf	(___flge@ff1+1)^0,f,c
  5266   00318C  B0D8               	btfsc	status,0,c
  5267   00318E  2A03               	incf	(___flge@ff1+1)^0,f,c
  5268   003190  1E04               	comf	(___flge@ff1+2)^0,f,c
  5269   003192  B0D8               	btfsc	status,0,c
  5270   003194  2A04               	incf	(___flge@ff1+2)^0,f,c
  5271   003196  0E80               	movlw	128
  5272   003198  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5273   00319A                     l4368:
  5274   00319A  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5275   00319C  EFD2  F018         	goto	u3771
  5276   0031A0  EFD4  F018         	goto	u3770
  5277   0031A4                     u3771:
  5278   0031A4  EFDD  F018         	goto	l941
  5279   0031A8                     u3770:
  5280   0031A8  6C06               	negf	___flge@ff2^0,c
  5281   0031AA  1E07               	comf	(___flge@ff2+1)^0,f,c
  5282   0031AC  B0D8               	btfsc	status,0,c
  5283   0031AE  2A07               	incf	(___flge@ff2+1)^0,f,c
  5284   0031B0  1E08               	comf	(___flge@ff2+2)^0,f,c
  5285   0031B2  B0D8               	btfsc	status,0,c
  5286   0031B4  2A08               	incf	(___flge@ff2+2)^0,f,c
  5287   0031B6  0E80               	movlw	128
  5288   0031B8  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5289   0031BA                     l941:
  5290   0031BA  0E00               	movlw	0
  5291   0031BC  1A02               	xorwf	___flge@ff1^0,f,c
  5292   0031BE  0E00               	movlw	0
  5293   0031C0  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5294   0031C2  0E00               	movlw	0
  5295   0031C4  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5296   0031C6  0E80               	movlw	128
  5297   0031C8  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5298   0031CA  0E00               	movlw	0
  5299   0031CC  1A06               	xorwf	___flge@ff2^0,f,c
  5300   0031CE  0E00               	movlw	0
  5301   0031D0  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5302   0031D2  0E00               	movlw	0
  5303   0031D4  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5304   0031D6  0E80               	movlw	128
  5305   0031D8  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5306   0031DA  5006               	movf	___flge@ff2^0,w,c
  5307   0031DC  5C02               	subwf	___flge@ff1^0,w,c
  5308   0031DE  5007               	movf	(___flge@ff2+1)^0,w,c
  5309   0031E0  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5310   0031E2  5008               	movf	(___flge@ff2+2)^0,w,c
  5311   0031E4  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5312   0031E6  5009               	movf	(___flge@ff2+3)^0,w,c
  5313   0031E8  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5314   0031EA  B0D8               	btfsc	status,0,c
  5315   0031EC  EFFA  F018         	goto	u3781
  5316   0031F0  EFFC  F018         	goto	u3780
  5317   0031F4                     u3781:
  5318   0031F4  EFFF  F018         	goto	l4374
  5319   0031F8                     u3780:
  5320   0031F8  90D8               	bcf	status,0,c
  5321   0031FA  EF00  F019         	goto	l946
  5322   0031FE                     l4374:
  5323   0031FE  80D8               	bsf	status,0,c
  5324   003200                     l946:
  5325   003200  0012               	return		;funcret
  5326   003202                     __end_of___flge:
  5327                           	callstack 0
  5328                           
  5329 ;; *************** function ___fleq *****************
  5330 ;; Defined at:
  5331 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;  ff1             4    1[COMRAM] unsigned char 
  5334 ;;  ff2             4    5[COMRAM] unsigned char 
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;		None
  5337 ;; Return value:  Size  Location     Type
  5338 ;;		None               void
  5339 ;; Registers used:
  5340 ;;		wreg, status,2, status,0
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5346 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5348 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5349 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5350 ;;Total ram usage:       12 bytes
  5351 ;; Hardware stack levels used: 1
  5352 ;; Hardware stack levels required when called: 1
  5353 ;; This function calls:
  5354 ;;		Nothing
  5355 ;; This function is called by:
  5356 ;;		_convert_rgb2hue
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           	psect	text15
  5361   0037B2                     __ptext15:
  5362                           	callstack 0
  5363   0037B2                     ___fleq:
  5364                           	callstack 27
  5365   0037B2  0E00               	movlw	0
  5366   0037B4  1402               	andwf	___fleq@ff1^0,w,c
  5367   0037B6  6E0A               	movwf	??___fleq^0,c
  5368   0037B8  0E00               	movlw	0
  5369   0037BA  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5370   0037BC  6E0B               	movwf	(??___fleq+1)^0,c
  5371   0037BE  0E80               	movlw	128
  5372   0037C0  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5373   0037C2  6E0C               	movwf	(??___fleq+2)^0,c
  5374   0037C4  0E7F               	movlw	127
  5375   0037C6  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5376   0037C8  6E0D               	movwf	(??___fleq+3)^0,c
  5377   0037CA  500A               	movf	??___fleq^0,w,c
  5378   0037CC  100B               	iorwf	(??___fleq+1)^0,w,c
  5379   0037CE  100C               	iorwf	(??___fleq+2)^0,w,c
  5380   0037D0  100D               	iorwf	(??___fleq+3)^0,w,c
  5381   0037D2  A4D8               	btfss	status,2,c
  5382   0037D4  EFEE  F01B         	goto	u3711
  5383   0037D8  EFF0  F01B         	goto	u3710
  5384   0037DC                     u3711:
  5385   0037DC  EFF8  F01B         	goto	l4344
  5386   0037E0                     u3710:
  5387   0037E0  0E00               	movlw	0
  5388   0037E2  6E02               	movwf	___fleq@ff1^0,c
  5389   0037E4  0E00               	movlw	0
  5390   0037E6  6E03               	movwf	(___fleq@ff1+1)^0,c
  5391   0037E8  0E00               	movlw	0
  5392   0037EA  6E04               	movwf	(___fleq@ff1+2)^0,c
  5393   0037EC  0E00               	movlw	0
  5394   0037EE  6E05               	movwf	(___fleq@ff1+3)^0,c
  5395   0037F0                     l4344:
  5396   0037F0  0E00               	movlw	0
  5397   0037F2  1406               	andwf	___fleq@ff2^0,w,c
  5398   0037F4  6E0A               	movwf	??___fleq^0,c
  5399   0037F6  0E00               	movlw	0
  5400   0037F8  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5401   0037FA  6E0B               	movwf	(??___fleq+1)^0,c
  5402   0037FC  0E80               	movlw	128
  5403   0037FE  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5404   003800  6E0C               	movwf	(??___fleq+2)^0,c
  5405   003802  0E7F               	movlw	127
  5406   003804  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5407   003806  6E0D               	movwf	(??___fleq+3)^0,c
  5408   003808  500A               	movf	??___fleq^0,w,c
  5409   00380A  100B               	iorwf	(??___fleq+1)^0,w,c
  5410   00380C  100C               	iorwf	(??___fleq+2)^0,w,c
  5411   00380E  100D               	iorwf	(??___fleq+3)^0,w,c
  5412   003810  A4D8               	btfss	status,2,c
  5413   003812  EF0D  F01C         	goto	u3721
  5414   003816  EF0F  F01C         	goto	u3720
  5415   00381A                     u3721:
  5416   00381A  EF17  F01C         	goto	l4348
  5417   00381E                     u3720:
  5418   00381E  0E00               	movlw	0
  5419   003820  6E06               	movwf	___fleq@ff2^0,c
  5420   003822  0E00               	movlw	0
  5421   003824  6E07               	movwf	(___fleq@ff2+1)^0,c
  5422   003826  0E00               	movlw	0
  5423   003828  6E08               	movwf	(___fleq@ff2+2)^0,c
  5424   00382A  0E00               	movlw	0
  5425   00382C  6E09               	movwf	(___fleq@ff2+3)^0,c
  5426   00382E                     l4348:
  5427   00382E  5006               	movf	___fleq@ff2^0,w,c
  5428   003830  1802               	xorwf	___fleq@ff1^0,w,c
  5429   003832  E10F               	bnz	u3730
  5430   003834  5007               	movf	(___fleq@ff2+1)^0,w,c
  5431   003836  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5432   003838  E10C               	bnz	u3730
  5433   00383A  5008               	movf	(___fleq@ff2+2)^0,w,c
  5434   00383C  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5435   00383E  E109               	bnz	u3730
  5436   003840  5009               	movf	(___fleq@ff2+3)^0,w,c
  5437   003842  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5438   003844  B4D8               	btfsc	status,2,c
  5439   003846  EF27  F01C         	goto	u3731
  5440   00384A  EF29  F01C         	goto	u3730
  5441   00384E                     u3731:
  5442   00384E  EF2C  F01C         	goto	l4352
  5443   003852                     u3730:
  5444   003852  90D8               	bcf	status,0,c
  5445   003854  EF2D  F01C         	goto	l935
  5446   003858                     l4352:
  5447   003858  80D8               	bsf	status,0,c
  5448   00385A                     l935:
  5449   00385A  0012               	return		;funcret
  5450   00385C                     __end_of___fleq:
  5451                           	callstack 0
  5452                           
  5453 ;; *************** function ___fldiv *****************
  5454 ;; Defined at:
  5455 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;  b               4   26[COMRAM] unsigned char 
  5458 ;;  a               4   30[COMRAM] unsigned char 
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;  grs             4   45[COMRAM] unsigned long 
  5461 ;;  rem             4   38[COMRAM] unsigned long 
  5462 ;;  new_exp         2   43[COMRAM] short 
  5463 ;;  aexp            1   50[COMRAM] unsigned char 
  5464 ;;  bexp            1   49[COMRAM] unsigned char 
  5465 ;;  sign            1   42[COMRAM] unsigned char 
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  4   26[COMRAM] unsigned char 
  5468 ;; Registers used:
  5469 ;;		wreg, status,2, status,0
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5475 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5476 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5477 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5478 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5479 ;;Total ram usage:       25 bytes
  5480 ;; Hardware stack levels used: 1
  5481 ;; Hardware stack levels required when called: 1
  5482 ;; This function calls:
  5483 ;;		Nothing
  5484 ;; This function is called by:
  5485 ;;		_convert_rgb2hue
  5486 ;;		_main
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           	psect	text16
  5491   001F26                     __ptext16:
  5492                           	callstack 0
  5493   001F26                     ___fldiv:
  5494                           	callstack 27
  5495   001F26  501E               	movf	(___fldiv@b+3)^0,w,c
  5496   001F28  0B80               	andlw	128
  5497   001F2A  6E2B               	movwf	___fldiv@sign^0,c
  5498   001F2C  501E               	movf	(___fldiv@b+3)^0,w,c
  5499   001F2E  241E               	addwf	(___fldiv@b+3)^0,w,c
  5500   001F30  6E32               	movwf	___fldiv@bexp^0,c
  5501   001F32  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5502   001F34  EF9E  F00F         	goto	u3291
  5503   001F38  EFA0  F00F         	goto	u3290
  5504   001F3C                     u3291:
  5505   001F3C  EFA1  F00F         	goto	l4072
  5506   001F40                     u3290:
  5507   001F40  8032               	bsf	___fldiv@bexp^0,0,c
  5508   001F42                     l4072:
  5509   001F42  5032               	movf	___fldiv@bexp^0,w,c
  5510   001F44  B4D8               	btfsc	status,2,c
  5511   001F46  EFA7  F00F         	goto	u3301
  5512   001F4A  EFA9  F00F         	goto	u3300
  5513   001F4E                     u3301:
  5514   001F4E  EFBE  F00F         	goto	l4082
  5515   001F52                     u3300:
  5516   001F52  2832               	incf	___fldiv@bexp^0,w,c
  5517   001F54  A4D8               	btfss	status,2,c
  5518   001F56  EFAF  F00F         	goto	u3311
  5519   001F5A  EFB1  F00F         	goto	u3310
  5520   001F5E                     u3311:
  5521   001F5E  EFB9  F00F         	goto	l4078
  5522   001F62                     u3310:
  5523   001F62  0E00               	movlw	0
  5524   001F64  6E1B               	movwf	___fldiv@b^0,c
  5525   001F66  0E00               	movlw	0
  5526   001F68  6E1C               	movwf	(___fldiv@b+1)^0,c
  5527   001F6A  0E00               	movlw	0
  5528   001F6C  6E1D               	movwf	(___fldiv@b+2)^0,c
  5529   001F6E  0E00               	movlw	0
  5530   001F70  6E1E               	movwf	(___fldiv@b+3)^0,c
  5531   001F72                     l4078:
  5532   001F72  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5533   001F74  0E00               	movlw	0
  5534   001F76  6E1E               	movwf	(___fldiv@b+3)^0,c
  5535   001F78  EFC6  F00F         	goto	l4084
  5536   001F7C                     l4082:
  5537   001F7C  0E00               	movlw	0
  5538   001F7E  6E1B               	movwf	___fldiv@b^0,c
  5539   001F80  0E00               	movlw	0
  5540   001F82  6E1C               	movwf	(___fldiv@b+1)^0,c
  5541   001F84  0E00               	movlw	0
  5542   001F86  6E1D               	movwf	(___fldiv@b+2)^0,c
  5543   001F88  0E00               	movlw	0
  5544   001F8A  6E1E               	movwf	(___fldiv@b+3)^0,c
  5545   001F8C                     l4084:
  5546   001F8C  5022               	movf	(___fldiv@a+3)^0,w,c
  5547   001F8E  0B80               	andlw	128
  5548   001F90  1A2B               	xorwf	___fldiv@sign^0,f,c
  5549   001F92  5022               	movf	(___fldiv@a+3)^0,w,c
  5550   001F94  2422               	addwf	(___fldiv@a+3)^0,w,c
  5551   001F96  6E33               	movwf	___fldiv@aexp^0,c
  5552   001F98  AE21               	btfss	(___fldiv@a+2)^0,7,c
  5553   001F9A  EFD1  F00F         	goto	u3321
  5554   001F9E  EFD3  F00F         	goto	u3320
  5555   001FA2                     u3321:
  5556   001FA2  EFD4  F00F         	goto	l4092
  5557   001FA6                     u3320:
  5558   001FA6  8033               	bsf	___fldiv@aexp^0,0,c
  5559   001FA8                     l4092:
  5560   001FA8  5033               	movf	___fldiv@aexp^0,w,c
  5561   001FAA  B4D8               	btfsc	status,2,c
  5562   001FAC  EFDA  F00F         	goto	u3331
  5563   001FB0  EFDC  F00F         	goto	u3330
  5564   001FB4                     u3331:
  5565   001FB4  EFF1  F00F         	goto	l4102
  5566   001FB8                     u3330:
  5567   001FB8  2833               	incf	___fldiv@aexp^0,w,c
  5568   001FBA  A4D8               	btfss	status,2,c
  5569   001FBC  EFE2  F00F         	goto	u3341
  5570   001FC0  EFE4  F00F         	goto	u3340
  5571   001FC4                     u3341:
  5572   001FC4  EFEC  F00F         	goto	l4098
  5573   001FC8                     u3340:
  5574   001FC8  0E00               	movlw	0
  5575   001FCA  6E1F               	movwf	___fldiv@a^0,c
  5576   001FCC  0E00               	movlw	0
  5577   001FCE  6E20               	movwf	(___fldiv@a+1)^0,c
  5578   001FD0  0E00               	movlw	0
  5579   001FD2  6E21               	movwf	(___fldiv@a+2)^0,c
  5580   001FD4  0E00               	movlw	0
  5581   001FD6  6E22               	movwf	(___fldiv@a+3)^0,c
  5582   001FD8                     l4098:
  5583   001FD8  8E21               	bsf	(___fldiv@a+2)^0,7,c
  5584   001FDA  0E00               	movlw	0
  5585   001FDC  6E22               	movwf	(___fldiv@a+3)^0,c
  5586   001FDE  EFF9  F00F         	goto	l4104
  5587   001FE2                     l4102:
  5588   001FE2  0E00               	movlw	0
  5589   001FE4  6E1F               	movwf	___fldiv@a^0,c
  5590   001FE6  0E00               	movlw	0
  5591   001FE8  6E20               	movwf	(___fldiv@a+1)^0,c
  5592   001FEA  0E00               	movlw	0
  5593   001FEC  6E21               	movwf	(___fldiv@a+2)^0,c
  5594   001FEE  0E00               	movlw	0
  5595   001FF0  6E22               	movwf	(___fldiv@a+3)^0,c
  5596   001FF2                     l4104:
  5597   001FF2  501F               	movf	___fldiv@a^0,w,c
  5598   001FF4  1020               	iorwf	(___fldiv@a+1)^0,w,c
  5599   001FF6  1021               	iorwf	(___fldiv@a+2)^0,w,c
  5600   001FF8  1022               	iorwf	(___fldiv@a+3)^0,w,c
  5601   001FFA  A4D8               	btfss	status,2,c
  5602   001FFC  EF02  F010         	goto	u3351
  5603   002000  EF04  F010         	goto	u3350
  5604   002004                     u3351:
  5605   002004  EF1C  F010         	goto	l4116
  5606   002008                     u3350:
  5607   002008  0E00               	movlw	0
  5608   00200A  6E1B               	movwf	___fldiv@b^0,c
  5609   00200C  0E00               	movlw	0
  5610   00200E  6E1C               	movwf	(___fldiv@b+1)^0,c
  5611   002010  0E00               	movlw	0
  5612   002012  6E1D               	movwf	(___fldiv@b+2)^0,c
  5613   002014  0E00               	movlw	0
  5614   002016  6E1E               	movwf	(___fldiv@b+3)^0,c
  5615   002018  0E80               	movlw	128
  5616   00201A  121D               	iorwf	(___fldiv@b+2)^0,f,c
  5617   00201C  0E7F               	movlw	127
  5618   00201E  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5619   002020                     l4110:
  5620   002020  502B               	movf	___fldiv@sign^0,w,c
  5621   002022  121E               	iorwf	(___fldiv@b+3)^0,f,c
  5622   002024  C01B  F01B         	movff	___fldiv@b,?___fldiv
  5623   002028  C01C  F01C         	movff	___fldiv@b+1,?___fldiv+1
  5624   00202C  C01D  F01D         	movff	___fldiv@b+2,?___fldiv+2
  5625   002030  C01E  F01E         	movff	___fldiv@b+3,?___fldiv+3
  5626   002034  EF5F  F011         	goto	l1258
  5627   002038                     l4116:
  5628   002038  5032               	movf	___fldiv@bexp^0,w,c
  5629   00203A  A4D8               	btfss	status,2,c
  5630   00203C  EF22  F010         	goto	u3361
  5631   002040  EF24  F010         	goto	u3360
  5632   002044                     u3361:
  5633   002044  EF2E  F010         	goto	l4124
  5634   002048                     u3360:
  5635   002048  0E00               	movlw	0
  5636   00204A  6E1B               	movwf	?___fldiv^0,c
  5637   00204C  0E00               	movlw	0
  5638   00204E  6E1C               	movwf	(?___fldiv+1)^0,c
  5639   002050  0E00               	movlw	0
  5640   002052  6E1D               	movwf	(?___fldiv+2)^0,c
  5641   002054  0E00               	movlw	0
  5642   002056  6E1E               	movwf	(?___fldiv+3)^0,c
  5643   002058  EF5F  F011         	goto	l1258
  5644   00205C                     l4124:
  5645   00205C  5033               	movf	___fldiv@aexp^0,w,c
  5646   00205E  C032  F023         	movff	___fldiv@bexp,??___fldiv
  5647   002062  6A24               	clrf	(??___fldiv+1)^0,c
  5648   002064  5E23               	subwf	??___fldiv^0,f,c
  5649   002066  0E00               	movlw	0
  5650   002068  5A24               	subwfb	(??___fldiv+1)^0,f,c
  5651   00206A  0E7F               	movlw	127
  5652   00206C  2423               	addwf	??___fldiv^0,w,c
  5653   00206E  6E2C               	movwf	___fldiv@new_exp^0,c
  5654   002070  0E00               	movlw	0
  5655   002072  2024               	addwfc	(??___fldiv+1)^0,w,c
  5656   002074  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5657   002076  C01B  F027         	movff	___fldiv@b,___fldiv@rem
  5658   00207A  C01C  F028         	movff	___fldiv@b+1,___fldiv@rem+1
  5659   00207E  C01D  F029         	movff	___fldiv@b+2,___fldiv@rem+2
  5660   002082  C01E  F02A         	movff	___fldiv@b+3,___fldiv@rem+3
  5661   002086  0E00               	movlw	0
  5662   002088  6E1B               	movwf	___fldiv@b^0,c
  5663   00208A  0E00               	movlw	0
  5664   00208C  6E1C               	movwf	(___fldiv@b+1)^0,c
  5665   00208E  0E00               	movlw	0
  5666   002090  6E1D               	movwf	(___fldiv@b+2)^0,c
  5667   002092  0E00               	movlw	0
  5668   002094  6E1E               	movwf	(___fldiv@b+3)^0,c
  5669   002096  0E00               	movlw	0
  5670   002098  6E2E               	movwf	___fldiv@grs^0,c
  5671   00209A  0E00               	movlw	0
  5672   00209C  6E2F               	movwf	(___fldiv@grs+1)^0,c
  5673   00209E  0E00               	movlw	0
  5674   0020A0  6E30               	movwf	(___fldiv@grs+2)^0,c
  5675   0020A2  0E00               	movlw	0
  5676   0020A4  6E31               	movwf	(___fldiv@grs+3)^0,c
  5677   0020A6  0E00               	movlw	0
  5678   0020A8  6E33               	movwf	___fldiv@aexp^0,c
  5679   0020AA  EF8F  F010         	goto	l1260
  5680   0020AE                     l4134:
  5681   0020AE  5033               	movf	___fldiv@aexp^0,w,c
  5682   0020B0  B4D8               	btfsc	status,2,c
  5683   0020B2  EF5D  F010         	goto	u3371
  5684   0020B6  EF5F  F010         	goto	u3370
  5685   0020BA                     u3371:
  5686   0020BA  EF76  F010         	goto	l4142
  5687   0020BE                     u3370:
  5688   0020BE  90D8               	bcf	status,0,c
  5689   0020C0  3627               	rlcf	___fldiv@rem^0,f,c
  5690   0020C2  3628               	rlcf	(___fldiv@rem+1)^0,f,c
  5691   0020C4  3629               	rlcf	(___fldiv@rem+2)^0,f,c
  5692   0020C6  362A               	rlcf	(___fldiv@rem+3)^0,f,c
  5693   0020C8  90D8               	bcf	status,0,c
  5694   0020CA  361B               	rlcf	___fldiv@b^0,f,c
  5695   0020CC  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5696   0020CE  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5697   0020D0  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5698   0020D2  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5699   0020D4  EF6E  F010         	goto	u3381
  5700   0020D8  EF70  F010         	goto	u3380
  5701   0020DC                     u3381:
  5702   0020DC  EF71  F010         	goto	l1263
  5703   0020E0                     u3380:
  5704   0020E0  801B               	bsf	___fldiv@b^0,0,c
  5705   0020E2                     l1263:
  5706   0020E2  90D8               	bcf	status,0,c
  5707   0020E4  362E               	rlcf	___fldiv@grs^0,f,c
  5708   0020E6  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5709   0020E8  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5710   0020EA  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5711   0020EC                     l4142:
  5712   0020EC  501F               	movf	___fldiv@a^0,w,c
  5713   0020EE  5C27               	subwf	___fldiv@rem^0,w,c
  5714   0020F0  5020               	movf	(___fldiv@a+1)^0,w,c
  5715   0020F2  5828               	subwfb	(___fldiv@rem+1)^0,w,c
  5716   0020F4  5021               	movf	(___fldiv@a+2)^0,w,c
  5717   0020F6  5829               	subwfb	(___fldiv@rem+2)^0,w,c
  5718   0020F8  5022               	movf	(___fldiv@a+3)^0,w,c
  5719   0020FA  582A               	subwfb	(___fldiv@rem+3)^0,w,c
  5720   0020FC  A0D8               	btfss	status,0,c
  5721   0020FE  EF83  F010         	goto	u3391
  5722   002102  EF85  F010         	goto	u3390
  5723   002106                     u3391:
  5724   002106  EF8E  F010         	goto	l4148
  5725   00210A                     u3390:
  5726   00210A  8C31               	bsf	(___fldiv@grs+3)^0,6,c
  5727   00210C  501F               	movf	___fldiv@a^0,w,c
  5728   00210E  5E27               	subwf	___fldiv@rem^0,f,c
  5729   002110  5020               	movf	(___fldiv@a+1)^0,w,c
  5730   002112  5A28               	subwfb	(___fldiv@rem+1)^0,f,c
  5731   002114  5021               	movf	(___fldiv@a+2)^0,w,c
  5732   002116  5A29               	subwfb	(___fldiv@rem+2)^0,f,c
  5733   002118  5022               	movf	(___fldiv@a+3)^0,w,c
  5734   00211A  5A2A               	subwfb	(___fldiv@rem+3)^0,f,c
  5735   00211C                     l4148:
  5736   00211C  2A33               	incf	___fldiv@aexp^0,f,c
  5737   00211E                     l1260:
  5738   00211E  0E19               	movlw	25
  5739   002120  6433               	cpfsgt	___fldiv@aexp^0,c
  5740   002122  EF95  F010         	goto	u3401
  5741   002126  EF97  F010         	goto	u3400
  5742   00212A                     u3401:
  5743   00212A  EF57  F010         	goto	l4134
  5744   00212E                     u3400:
  5745   00212E  5027               	movf	___fldiv@rem^0,w,c
  5746   002130  1028               	iorwf	(___fldiv@rem+1)^0,w,c
  5747   002132  1029               	iorwf	(___fldiv@rem+2)^0,w,c
  5748   002134  102A               	iorwf	(___fldiv@rem+3)^0,w,c
  5749   002136  B4D8               	btfsc	status,2,c
  5750   002138  EFA0  F010         	goto	u3411
  5751   00213C  EFA2  F010         	goto	u3410
  5752   002140                     u3411:
  5753   002140  EFBA  F010         	goto	l4160
  5754   002144                     u3410:
  5755   002144  802E               	bsf	___fldiv@grs^0,0,c
  5756   002146  EFBA  F010         	goto	l4160
  5757   00214A                     l4154:
  5758   00214A  90D8               	bcf	status,0,c
  5759   00214C  361B               	rlcf	___fldiv@b^0,f,c
  5760   00214E  361C               	rlcf	(___fldiv@b+1)^0,f,c
  5761   002150  361D               	rlcf	(___fldiv@b+2)^0,f,c
  5762   002152  361E               	rlcf	(___fldiv@b+3)^0,f,c
  5763   002154  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5764   002156  EFAF  F010         	goto	u3421
  5765   00215A  EFB1  F010         	goto	u3420
  5766   00215E                     u3421:
  5767   00215E  EFB2  F010         	goto	l1269
  5768   002162                     u3420:
  5769   002162  801B               	bsf	___fldiv@b^0,0,c
  5770   002164                     l1269:
  5771   002164  90D8               	bcf	status,0,c
  5772   002166  362E               	rlcf	___fldiv@grs^0,f,c
  5773   002168  362F               	rlcf	(___fldiv@grs+1)^0,f,c
  5774   00216A  3630               	rlcf	(___fldiv@grs+2)^0,f,c
  5775   00216C  3631               	rlcf	(___fldiv@grs+3)^0,f,c
  5776   00216E  062C               	decf	___fldiv@new_exp^0,f,c
  5777   002170  A0D8               	btfss	status,0,c
  5778   002172  062D               	decf	(___fldiv@new_exp+1)^0,f,c
  5779   002174                     l4160:
  5780   002174  AE1D               	btfss	(___fldiv@b+2)^0,7,c
  5781   002176  EFBF  F010         	goto	u3431
  5782   00217A  EFC1  F010         	goto	u3430
  5783   00217E                     u3431:
  5784   00217E  EFA5  F010         	goto	l4154
  5785   002182                     u3430:
  5786   002182  0E00               	movlw	0
  5787   002184  6E33               	movwf	___fldiv@aexp^0,c
  5788   002186  AE31               	btfss	(___fldiv@grs+3)^0,7,c
  5789   002188  EFC8  F010         	goto	u3441
  5790   00218C  EFCA  F010         	goto	u3440
  5791   002190                     u3441:
  5792   002190  EFEE  F010         	goto	l1271
  5793   002194                     u3440:
  5794   002194  0EFF               	movlw	255
  5795   002196  142E               	andwf	___fldiv@grs^0,w,c
  5796   002198  6E23               	movwf	??___fldiv^0,c
  5797   00219A  0EFF               	movlw	255
  5798   00219C  142F               	andwf	(___fldiv@grs+1)^0,w,c
  5799   00219E  6E24               	movwf	(??___fldiv+1)^0,c
  5800   0021A0  0EFF               	movlw	255
  5801   0021A2  1430               	andwf	(___fldiv@grs+2)^0,w,c
  5802   0021A4  6E25               	movwf	(??___fldiv+2)^0,c
  5803   0021A6  0E7F               	movlw	127
  5804   0021A8  1431               	andwf	(___fldiv@grs+3)^0,w,c
  5805   0021AA  6E26               	movwf	(??___fldiv+3)^0,c
  5806   0021AC  5023               	movf	??___fldiv^0,w,c
  5807   0021AE  1024               	iorwf	(??___fldiv+1)^0,w,c
  5808   0021B0  1025               	iorwf	(??___fldiv+2)^0,w,c
  5809   0021B2  1026               	iorwf	(??___fldiv+3)^0,w,c
  5810   0021B4  B4D8               	btfsc	status,2,c
  5811   0021B6  EFDF  F010         	goto	u3451
  5812   0021BA  EFE1  F010         	goto	u3450
  5813   0021BE                     u3451:
  5814   0021BE  EFE5  F010         	goto	l1272
  5815   0021C2                     u3450:
  5816   0021C2                     l4168:
  5817   0021C2  0E01               	movlw	1
  5818   0021C4  6E33               	movwf	___fldiv@aexp^0,c
  5819   0021C6  EFEE  F010         	goto	l1271
  5820   0021CA                     l1272:
  5821   0021CA  A01B               	btfss	___fldiv@b^0,0,c
  5822   0021CC  EFEA  F010         	goto	u3461
  5823   0021D0  EFEC  F010         	goto	u3460
  5824   0021D4                     u3461:
  5825   0021D4  EFEE  F010         	goto	l1271
  5826   0021D8                     u3460:
  5827   0021D8  EFE1  F010         	goto	l4168
  5828   0021DC                     l1271:
  5829   0021DC  5033               	movf	___fldiv@aexp^0,w,c
  5830   0021DE  B4D8               	btfsc	status,2,c
  5831   0021E0  EFF4  F010         	goto	u3471
  5832   0021E4  EFF6  F010         	goto	u3470
  5833   0021E8                     u3471:
  5834   0021E8  EF1A  F011         	goto	l4180
  5835   0021EC                     u3470:
  5836   0021EC  0E01               	movlw	1
  5837   0021EE  261B               	addwf	___fldiv@b^0,f,c
  5838   0021F0  0E00               	movlw	0
  5839   0021F2  221C               	addwfc	(___fldiv@b+1)^0,f,c
  5840   0021F4  221D               	addwfc	(___fldiv@b+2)^0,f,c
  5841   0021F6  221E               	addwfc	(___fldiv@b+3)^0,f,c
  5842   0021F8  A01E               	btfss	(___fldiv@b+3)^0,0,c
  5843   0021FA  EF01  F011         	goto	u3481
  5844   0021FE  EF03  F011         	goto	u3480
  5845   002202                     u3481:
  5846   002202  EF1A  F011         	goto	l4180
  5847   002206                     u3480:
  5848   002206  C01B  F023         	movff	___fldiv@b,??___fldiv
  5849   00220A  C01C  F024         	movff	___fldiv@b+1,??___fldiv+1
  5850   00220E  C01D  F025         	movff	___fldiv@b+2,??___fldiv+2
  5851   002212  C01E  F026         	movff	___fldiv@b+3,??___fldiv+3
  5852   002216  3426               	rlcf	(??___fldiv+3)^0,w,c
  5853   002218  3226               	rrcf	(??___fldiv+3)^0,f,c
  5854   00221A  3225               	rrcf	(??___fldiv+2)^0,f,c
  5855   00221C  3224               	rrcf	(??___fldiv+1)^0,f,c
  5856   00221E  3223               	rrcf	??___fldiv^0,f,c
  5857   002220  C023  F01B         	movff	??___fldiv,___fldiv@b
  5858   002224  C024  F01C         	movff	??___fldiv+1,___fldiv@b+1
  5859   002228  C025  F01D         	movff	??___fldiv+2,___fldiv@b+2
  5860   00222C  C026  F01E         	movff	??___fldiv+3,___fldiv@b+3
  5861   002230  4A2C               	infsnz	___fldiv@new_exp^0,f,c
  5862   002232  2A2D               	incf	(___fldiv@new_exp+1)^0,f,c
  5863   002234                     l4180:
  5864   002234  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5865   002236  EF25  F011         	goto	u3491
  5866   00223A  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5867   00223C  E108               	bnz	u3490
  5868   00223E  282C               	incf	___fldiv@new_exp^0,w,c
  5869   002240  A0D8               	btfss	status,0,c
  5870   002242  EF25  F011         	goto	u3491
  5871   002246  EF27  F011         	goto	u3490
  5872   00224A                     u3491:
  5873   00224A  EF32  F011         	goto	l4184
  5874   00224E                     u3490:
  5875   00224E  0E00               	movlw	0
  5876   002250  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5877   002252  682C               	setf	___fldiv@new_exp^0,c
  5878   002254  0E00               	movlw	0
  5879   002256  6E1B               	movwf	___fldiv@b^0,c
  5880   002258  0E00               	movlw	0
  5881   00225A  6E1C               	movwf	(___fldiv@b+1)^0,c
  5882   00225C  0E00               	movlw	0
  5883   00225E  6E1D               	movwf	(___fldiv@b+2)^0,c
  5884   002260  0E00               	movlw	0
  5885   002262  6E1E               	movwf	(___fldiv@b+3)^0,c
  5886   002264                     l4184:
  5887   002264  BE2D               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5888   002266  EF3F  F011         	goto	u3500
  5889   00226A  502D               	movf	(___fldiv@new_exp+1)^0,w,c
  5890   00226C  E106               	bnz	u3501
  5891   00226E  042C               	decf	___fldiv@new_exp^0,w,c
  5892   002270  B0D8               	btfsc	status,0,c
  5893   002272  EF3D  F011         	goto	u3501
  5894   002276  EF3F  F011         	goto	u3500
  5895   00227A                     u3501:
  5896   00227A  EF4D  F011         	goto	l4188
  5897   00227E                     u3500:
  5898   00227E  0E00               	movlw	0
  5899   002280  6E2D               	movwf	(___fldiv@new_exp+1)^0,c
  5900   002282  0E00               	movlw	0
  5901   002284  6E2C               	movwf	___fldiv@new_exp^0,c
  5902   002286  0E00               	movlw	0
  5903   002288  6E1B               	movwf	___fldiv@b^0,c
  5904   00228A  0E00               	movlw	0
  5905   00228C  6E1C               	movwf	(___fldiv@b+1)^0,c
  5906   00228E  0E00               	movlw	0
  5907   002290  6E1D               	movwf	(___fldiv@b+2)^0,c
  5908   002292  0E00               	movlw	0
  5909   002294  6E1E               	movwf	(___fldiv@b+3)^0,c
  5910   002296  0E00               	movlw	0
  5911   002298  6E2B               	movwf	___fldiv@sign^0,c
  5912   00229A                     l4188:
  5913   00229A  C02C  F032         	movff	___fldiv@new_exp,___fldiv@bexp
  5914   00229E  A032               	btfss	___fldiv@bexp^0,0,c
  5915   0022A0  EF54  F011         	goto	u3511
  5916   0022A4  EF56  F011         	goto	u3510
  5917   0022A8                     u3511:
  5918   0022A8  EF59  F011         	goto	l4194
  5919   0022AC                     u3510:
  5920   0022AC  8E1D               	bsf	(___fldiv@b+2)^0,7,c
  5921   0022AE  EF5A  F011         	goto	l4196
  5922   0022B2                     l4194:
  5923   0022B2  9E1D               	bcf	(___fldiv@b+2)^0,7,c
  5924   0022B4                     l4196:
  5925   0022B4  90D8               	bcf	status,0,c
  5926   0022B6  3032               	rrcf	___fldiv@bexp^0,w,c
  5927   0022B8  6E1E               	movwf	(___fldiv@b+3)^0,c
  5928   0022BA  EF10  F010         	goto	l4110
  5929   0022BE                     l1258:
  5930   0022BE  0012               	return		;funcret
  5931   0022C0                     __end_of___fldiv:
  5932                           	callstack 0
  5933                           
  5934 ;; *************** function _initUSART4 *****************
  5935 ;; Defined at:
  5936 ;;		line 14 in file "serial.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;		None
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  1    wreg      void 
  5943 ;; Registers used:
  5944 ;;		wreg, status,2
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5954 ;;Total ram usage:        0 bytes
  5955 ;; Hardware stack levels used: 1
  5956 ;; Hardware stack levels required when called: 1
  5957 ;; This function calls:
  5958 ;;		Nothing
  5959 ;; This function is called by:
  5960 ;;		_main
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text17
  5965   00464E                     __ptext17:
  5966                           	callstack 0
  5967   00464E                     _initUSART4:
  5968                           	callstack 29
  5969   00464E                     
  5970                           ;serial.c: 15:     RC0PPS = 0x12;
  5971   00464E  0E12               	movlw	18
  5972   004650  010E               	movlb	14	; () banked
  5973   004652  6F62               	movwf	98,b	;volatile
  5974                           
  5975                           ;serial.c: 16:     RX4PPS = 0x11;
  5976   004654  0E11               	movlw	17
  5977   004656  6F15               	movwf	21,b	;volatile
  5978   004658                     
  5979                           ; BSR set to: 14
  5980                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  5981   004658  97E9               	bcf	233,3,b	;volatile
  5982   00465A                     
  5983                           ; BSR set to: 14
  5984                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  5985   00465A  95E8               	bcf	232,2,b	;volatile
  5986                           
  5987                           ;serial.c: 19:     SP4BRGL = 51;
  5988   00465C  0E33               	movlw	51
  5989   00465E  6FE5               	movwf	229,b	;volatile
  5990                           
  5991                           ;serial.c: 20:     SP4BRGH = 0;
  5992   004660  0E00               	movlw	0
  5993   004662  6FE6               	movwf	230,b	;volatile
  5994   004664                     
  5995                           ; BSR set to: 14
  5996                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  5997   004664  89E7               	bsf	231,4,b	;volatile
  5998   004666                     
  5999                           ; BSR set to: 14
  6000                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  6001   004666  8BE8               	bsf	232,5,b	;volatile
  6002   004668                     
  6003                           ; BSR set to: 14
  6004                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  6005   004668  8FE7               	bsf	231,7,b	;volatile
  6006   00466A                     
  6007                           ; BSR set to: 14
  6008   00466A  0012               	return		;funcret
  6009   00466C                     __end_of_initUSART4:
  6010                           	callstack 0
  6011                           
  6012 ;; *************** function _initDCmotorsPWM *****************
  6013 ;; Defined at:
  6014 ;;		line 5 in file "dc_motor.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      void 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6028 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6031 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6032 ;;Total ram usage:        2 bytes
  6033 ;; Hardware stack levels used: 1
  6034 ;; Hardware stack levels required when called: 1
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_main
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text18
  6043   00399C                     __ptext18:
  6044                           	callstack 0
  6045   00399C                     _initDCmotorsPWM:
  6046                           	callstack 29
  6047   00399C                     
  6048                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  6049   00399C  9485               	bcf	133,2,c	;volatile
  6050                           
  6051                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  6052   00399E  9E83               	bcf	131,7,c	;volatile
  6053                           
  6054                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  6055   0039A0  9885               	bcf	133,4,c	;volatile
  6056                           
  6057                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  6058   0039A2  9C87               	bcf	135,6,c	;volatile
  6059                           
  6060                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  6061   0039A4  947D               	bcf	125,2,c	;volatile
  6062                           
  6063                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  6064   0039A6  9E7B               	bcf	123,7,c	;volatile
  6065                           
  6066                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  6067   0039A8  987D               	bcf	125,4,c	;volatile
  6068                           
  6069                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  6070   0039AA  9C7F               	bcf	127,6,c	;volatile
  6071   0039AC                     
  6072                           ;dc_motor.c: 18:     RE2PPS=0x05;
  6073   0039AC  0E05               	movlw	5
  6074   0039AE  010E               	movlb	14	; () banked
  6075   0039B0  6F74               	movwf	116,b	;volatile
  6076                           
  6077                           ;dc_motor.c: 19:     RE4PPS=0x06;
  6078   0039B2  0E06               	movlw	6
  6079   0039B4  6F76               	movwf	118,b	;volatile
  6080                           
  6081                           ;dc_motor.c: 20:     RC7PPS=0x07;
  6082   0039B6  0E07               	movlw	7
  6083   0039B8  6F69               	movwf	105,b	;volatile
  6084                           
  6085                           ;dc_motor.c: 21:     RG6PPS=0x08;
  6086   0039BA  0E08               	movlw	8
  6087   0039BC  6F88               	movwf	136,b	;volatile
  6088                           
  6089                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  6090   0039BE  50BD               	movf	189,w,c	;volatile
  6091   0039C0  0B8F               	andlw	-113
  6092   0039C2  0940               	iorlw	64
  6093   0039C4  6EBD               	movwf	189,c	;volatile
  6094                           
  6095                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  6096   0039C6  0EE0               	movlw	-32
  6097   0039C8  16BE               	andwf	190,f,c	;volatile
  6098                           
  6099                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  6100   0039CA  50BF               	movf	191,w,c	;volatile
  6101   0039CC  0BF0               	andlw	-16
  6102   0039CE  0901               	iorlw	1
  6103   0039D0  6EBF               	movwf	191,c	;volatile
  6104   0039D2                     
  6105                           ; BSR set to: 14
  6106                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  6107   0039D2  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  6108   0039D6                     
  6109                           ; BSR set to: 14
  6110                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  6111   0039D6  8EBD               	bsf	189,7,c	;volatile
  6112                           
  6113                           ;dc_motor.c: 35:     CCPR1H=0;
  6114   0039D8  0E00               	movlw	0
  6115   0039DA  6EAA               	movwf	170,c	;volatile
  6116                           
  6117                           ;dc_motor.c: 36:     CCPR2H=0;
  6118   0039DC  0E00               	movlw	0
  6119   0039DE  6EA6               	movwf	166,c	;volatile
  6120                           
  6121                           ;dc_motor.c: 37:     CCPR3H=0;
  6122   0039E0  0E00               	movlw	0
  6123   0039E2  010F               	movlb	15	; () banked
  6124   0039E4  6F25               	movwf	37,b	;volatile
  6125                           
  6126                           ;dc_motor.c: 38:     CCPR4H=0;
  6127   0039E6  0E00               	movlw	0
  6128   0039E8  6F21               	movwf	33,b	;volatile
  6129                           
  6130                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  6131   0039EA  0EFC               	movlw	-4
  6132   0039EC  16AD               	andwf	173,f,c	;volatile
  6133                           
  6134                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  6135   0039EE  0EF3               	movlw	-13
  6136   0039F0  16AD               	andwf	173,f,c	;volatile
  6137                           
  6138                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  6139   0039F2  0ECF               	movlw	-49
  6140   0039F4  16AD               	andwf	173,f,c	;volatile
  6141                           
  6142                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  6143   0039F6  0E3F               	movlw	-193
  6144   0039F8  16AD               	andwf	173,f,c	;volatile
  6145   0039FA                     
  6146                           ; BSR set to: 15
  6147                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  6148   0039FA  88AB               	bsf	171,4,c	;volatile
  6149                           
  6150                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  6151   0039FC  50AB               	movf	171,w,c	;volatile
  6152   0039FE  0BF0               	andlw	-16
  6153   003A00  090C               	iorlw	12
  6154   003A02  6EAB               	movwf	171,c	;volatile
  6155   003A04                     
  6156                           ; BSR set to: 15
  6157                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  6158   003A04  8EAB               	bsf	171,7,c	;volatile
  6159   003A06                     
  6160                           ; BSR set to: 15
  6161                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  6162   003A06  88A7               	bsf	167,4,c	;volatile
  6163                           
  6164                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  6165   003A08  50A7               	movf	167,w,c	;volatile
  6166   003A0A  0BF0               	andlw	-16
  6167   003A0C  090C               	iorlw	12
  6168   003A0E  6EA7               	movwf	167,c	;volatile
  6169   003A10                     
  6170                           ; BSR set to: 15
  6171                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  6172   003A10  8EA7               	bsf	167,7,c	;volatile
  6173   003A12                     
  6174                           ; BSR set to: 15
  6175                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  6176   003A12  8926               	bsf	38,4,b	;volatile
  6177                           
  6178                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  6179   003A14  5126               	movf	38,w,b	;volatile
  6180   003A16  0BF0               	andlw	-16
  6181   003A18  090C               	iorlw	12
  6182   003A1A  6F26               	movwf	38,b	;volatile
  6183   003A1C                     
  6184                           ; BSR set to: 15
  6185                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6186   003A1C  8F26               	bsf	38,7,b	;volatile
  6187   003A1E                     
  6188                           ; BSR set to: 15
  6189                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6190   003A1E  8922               	bsf	34,4,b	;volatile
  6191                           
  6192                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6193   003A20  5122               	movf	34,w,b	;volatile
  6194   003A22  0BF0               	andlw	-16
  6195   003A24  090C               	iorlw	12
  6196   003A26  6F22               	movwf	34,b	;volatile
  6197   003A28                     
  6198                           ; BSR set to: 15
  6199                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6200   003A28  8F22               	bsf	34,7,b	;volatile
  6201   003A2A                     
  6202                           ; BSR set to: 15
  6203   003A2A  0012               	return		;funcret
  6204   003A2C                     __end_of_initDCmotorsPWM:
  6205                           	callstack 0
  6206                           
  6207 ;; *************** function _get16bitTMR0val *****************
  6208 ;; Defined at:
  6209 ;;		line 32 in file "timers.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;		None
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;  combined_val    2    7[COMRAM] unsigned int 
  6214 ;; Return value:  Size  Location     Type
  6215 ;;                  2    1[COMRAM] unsigned int 
  6216 ;; Registers used:
  6217 ;;		wreg, status,2, status,0
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6224 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6225 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6226 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6227 ;;Total ram usage:        8 bytes
  6228 ;; Hardware stack levels used: 1
  6229 ;; Hardware stack levels required when called: 1
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		_main
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           	psect	text19
  6238   00460C                     __ptext19:
  6239                           	callstack 0
  6240   00460C                     _get16bitTMR0val:
  6241                           	callstack 29
  6242   00460C                     
  6243                           ;timers.c: 34:     unsigned int combined_value;;timers.c: 35:     combined_value = TMR0L
      +                           | (TMR0H << 8);
  6244   00460C  50D4               	movf	212,w,c	;volatile
  6245   00460E  6E05               	movwf	(??_get16bitTMR0val+1)^0,c
  6246   004610  6A04               	clrf	??_get16bitTMR0val^0,c
  6247   004612  50D3               	movf	211,w,c	;volatile
  6248   004614  6E06               	movwf	(??_get16bitTMR0val+2)^0,c
  6249   004616  6A07               	clrf	(??_get16bitTMR0val+3)^0,c
  6250   004618  5004               	movf	??_get16bitTMR0val^0,w,c
  6251   00461A  1006               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6252   00461C  6E08               	movwf	get16bitTMR0val@combined_value^0,c
  6253   00461E  5005               	movf	(??_get16bitTMR0val+1)^0,w,c
  6254   004620  1007               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6255   004622  6E09               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6256   004624                     
  6257                           ;timers.c: 36:     return combined_value;
  6258   004624  C008  F002         	movff	get16bitTMR0val@combined_value,?_get16bitTMR0val
  6259   004628  C009  F003         	movff	get16bitTMR0val@combined_value+1,?_get16bitTMR0val+1
  6260   00462C  0012               	return		;funcret
  6261   00462E                     __end_of_get16bitTMR0val:
  6262                           	callstack 0
  6263                           
  6264 ;; *************** function _decision *****************
  6265 ;; Defined at:
  6266 ;;		line 277 in file "color.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  hue             2   70[COMRAM] unsigned int 
  6269 ;;  path_length     2   72[COMRAM] unsigned int 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  color           2   74[COMRAM] unsigned int 
  6272 ;; Return value:  Size  Location     Type
  6273 ;;                  1    wreg      void 
  6274 ;; Registers used:
  6275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6281 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6282 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6284 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6285 ;;Total ram usage:        6 bytes
  6286 ;; Hardware stack levels used: 1
  6287 ;; Hardware stack levels required when called: 10
  6288 ;; This function calls:
  6289 ;;		_moveBlue
  6290 ;;		_moveGreen
  6291 ;;		_moveLightBlue
  6292 ;;		_moveOrange
  6293 ;;		_movePink
  6294 ;;		_moveRed
  6295 ;;		_moveYellow
  6296 ;;		_send2USART
  6297 ;; This function is called by:
  6298 ;;		_main
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text20
  6303   0025C4                     __ptext20:
  6304                           	callstack 0
  6305   0025C4                     _decision:
  6306                           	callstack 20
  6307   0025C4                     
  6308                           ;color.c: 282:     unsigned int color;;color.c: 284:     if (hue<=10 || hue>=355) {
  6309   0025C4  5048               	movf	(decision@hue+1)^0,w,c
  6310   0025C6  E109               	bnz	u5280
  6311   0025C8  0E0B               	movlw	11
  6312   0025CA  5C47               	subwf	decision@hue^0,w,c
  6313   0025CC  A0D8               	btfss	status,0,c
  6314   0025CE  EFEB  F012         	goto	u5281
  6315   0025D2  EFED  F012         	goto	u5280
  6316   0025D6                     u5281:
  6317   0025D6  EFF8  F012         	goto	l5960
  6318   0025DA                     u5280:
  6319   0025DA  0E63               	movlw	99
  6320   0025DC  5C47               	subwf	decision@hue^0,w,c
  6321   0025DE  0E01               	movlw	1
  6322   0025E0  5848               	subwfb	(decision@hue+1)^0,w,c
  6323   0025E2  A0D8               	btfss	status,0,c
  6324   0025E4  EFF6  F012         	goto	u5291
  6325   0025E8  EFF8  F012         	goto	u5290
  6326   0025EC                     u5291:
  6327   0025EC  EF0C  F013         	goto	l5964
  6328   0025F0                     u5290:
  6329   0025F0                     l5960:
  6330                           
  6331                           ;color.c: 285:         moveRed(&motorL, &motorR, path_length, &path);
  6332   0025F0  0ED6               	movlw	low _motorL
  6333   0025F2  6E1D               	movwf	moveRed@mL^0,c
  6334   0025F4  0ECD               	movlw	low _motorR
  6335   0025F6  6E1E               	movwf	moveRed@mR^0,c
  6336   0025F8  C049  F01F         	movff	decision@path_length,moveRed@path_length
  6337   0025FC  C04A  F020         	movff	decision@path_length+1,moveRed@path_length+1
  6338   002600  0E00               	movlw	low _path
  6339   002602  6E21               	movwf	moveRed@path^0,c
  6340   002604  0E02               	movlw	high _path
  6341   002606  6E22               	movwf	(moveRed@path+1)^0,c
  6342   002608  EC3B  F01F         	call	_moveRed	;wreg free
  6343   00260C                     
  6344                           ;color.c: 286:         color = 1;
  6345   00260C  0E00               	movlw	0
  6346   00260E  6E4C               	movwf	(decision@color+1)^0,c
  6347   002610  0E01               	movlw	1
  6348   002612  6E4B               	movwf	decision@color^0,c
  6349                           
  6350                           ;color.c: 287:     } else if (hue>=105 && hue<=130){
  6351   002614  EF08  F014         	goto	l6012
  6352   002618                     l5964:
  6353   002618  5048               	movf	(decision@hue+1)^0,w,c
  6354   00261A  E109               	bnz	u5300
  6355   00261C  0E69               	movlw	105
  6356   00261E  5C47               	subwf	decision@hue^0,w,c
  6357   002620  A0D8               	btfss	status,0,c
  6358   002622  EF15  F013         	goto	u5301
  6359   002626  EF17  F013         	goto	u5300
  6360   00262A                     u5301:
  6361   00262A  EF36  F013         	goto	l5972
  6362   00262E                     u5300:
  6363   00262E  5048               	movf	(decision@hue+1)^0,w,c
  6364   002630  E107               	bnz	u5311
  6365   002632  0E83               	movlw	131
  6366   002634  5C47               	subwf	decision@hue^0,w,c
  6367   002636  B0D8               	btfsc	status,0,c
  6368   002638  EF20  F013         	goto	u5311
  6369   00263C  EF22  F013         	goto	u5310
  6370   002640                     u5311:
  6371   002640  EF36  F013         	goto	l5972
  6372   002644                     u5310:
  6373   002644                     
  6374                           ;color.c: 288:         moveGreen(&motorL, &motorR, path_length, &path);
  6375   002644  0ED6               	movlw	low _motorL
  6376   002646  6E1D               	movwf	moveGreen@mL^0,c
  6377   002648  0ECD               	movlw	low _motorR
  6378   00264A  6E1E               	movwf	moveGreen@mR^0,c
  6379   00264C  C049  F01F         	movff	decision@path_length,moveGreen@path_length
  6380   002650  C04A  F020         	movff	decision@path_length+1,moveGreen@path_length+1
  6381   002654  0E00               	movlw	low _path
  6382   002656  6E21               	movwf	moveGreen@path^0,c
  6383   002658  0E02               	movlw	high _path
  6384   00265A  6E22               	movwf	(moveGreen@path+1)^0,c
  6385   00265C  ECF7  F01F         	call	_moveGreen	;wreg free
  6386   002660                     
  6387                           ;color.c: 289:         color = 2;
  6388   002660  0E00               	movlw	0
  6389   002662  6E4C               	movwf	(decision@color+1)^0,c
  6390   002664  0E02               	movlw	2
  6391   002666  6E4B               	movwf	decision@color^0,c
  6392                           
  6393                           ;color.c: 290:     } else if (hue>=230 && hue<=240){
  6394   002668  EF08  F014         	goto	l6012
  6395   00266C                     l5972:
  6396   00266C  5048               	movf	(decision@hue+1)^0,w,c
  6397   00266E  E109               	bnz	u5320
  6398   002670  0EE6               	movlw	230
  6399   002672  5C47               	subwf	decision@hue^0,w,c
  6400   002674  A0D8               	btfss	status,0,c
  6401   002676  EF3F  F013         	goto	u5321
  6402   00267A  EF41  F013         	goto	u5320
  6403   00267E                     u5321:
  6404   00267E  EF60  F013         	goto	l5980
  6405   002682                     u5320:
  6406   002682  5048               	movf	(decision@hue+1)^0,w,c
  6407   002684  E107               	bnz	u5331
  6408   002686  0EF1               	movlw	241
  6409   002688  5C47               	subwf	decision@hue^0,w,c
  6410   00268A  B0D8               	btfsc	status,0,c
  6411   00268C  EF4A  F013         	goto	u5331
  6412   002690  EF4C  F013         	goto	u5330
  6413   002694                     u5331:
  6414   002694  EF60  F013         	goto	l5980
  6415   002698                     u5330:
  6416   002698                     
  6417                           ;color.c: 291:         moveBlue(&motorL,&motorR, path_length, &path);
  6418   002698  0ED6               	movlw	low _motorL
  6419   00269A  6E1D               	movwf	moveBlue@mL^0,c
  6420   00269C  0ECD               	movlw	low _motorR
  6421   00269E  6E1E               	movwf	moveBlue@mR^0,c
  6422   0026A0  C049  F01F         	movff	decision@path_length,moveBlue@path_length
  6423   0026A4  C04A  F020         	movff	decision@path_length+1,moveBlue@path_length+1
  6424   0026A8  0E00               	movlw	low _path
  6425   0026AA  6E21               	movwf	moveBlue@path^0,c
  6426   0026AC  0E02               	movlw	high _path
  6427   0026AE  6E22               	movwf	(moveBlue@path+1)^0,c
  6428   0026B0  EC5A  F01E         	call	_moveBlue	;wreg free
  6429   0026B4                     
  6430                           ;color.c: 292:         color = 3;
  6431   0026B4  0E00               	movlw	0
  6432   0026B6  6E4C               	movwf	(decision@color+1)^0,c
  6433   0026B8  0E03               	movlw	3
  6434   0026BA  6E4B               	movwf	decision@color^0,c
  6435                           
  6436                           ;color.c: 293:     } else if (hue>=216 && hue<=221){
  6437   0026BC  EF08  F014         	goto	l6012
  6438   0026C0                     l5980:
  6439   0026C0  5048               	movf	(decision@hue+1)^0,w,c
  6440   0026C2  E109               	bnz	u5340
  6441   0026C4  0ED8               	movlw	216
  6442   0026C6  5C47               	subwf	decision@hue^0,w,c
  6443   0026C8  A0D8               	btfss	status,0,c
  6444   0026CA  EF69  F013         	goto	u5341
  6445   0026CE  EF6B  F013         	goto	u5340
  6446   0026D2                     u5341:
  6447   0026D2  EF8A  F013         	goto	l5988
  6448   0026D6                     u5340:
  6449   0026D6  5048               	movf	(decision@hue+1)^0,w,c
  6450   0026D8  E107               	bnz	u5351
  6451   0026DA  0EDE               	movlw	222
  6452   0026DC  5C47               	subwf	decision@hue^0,w,c
  6453   0026DE  B0D8               	btfsc	status,0,c
  6454   0026E0  EF74  F013         	goto	u5351
  6455   0026E4  EF76  F013         	goto	u5350
  6456   0026E8                     u5351:
  6457   0026E8  EF8A  F013         	goto	l5988
  6458   0026EC                     u5350:
  6459   0026EC                     
  6460                           ;color.c: 294:         moveLightBlue(&motorL,&motorR, path_length, &path);
  6461   0026EC  0ED6               	movlw	low _motorL
  6462   0026EE  6E1D               	movwf	moveLightBlue@mL^0,c
  6463   0026F0  0ECD               	movlw	low _motorR
  6464   0026F2  6E1E               	movwf	moveLightBlue@mR^0,c
  6465   0026F4  C049  F01F         	movff	decision@path_length,moveLightBlue@path_length
  6466   0026F8  C04A  F020         	movff	decision@path_length+1,moveLightBlue@path_length+1
  6467   0026FC  0E00               	movlw	low _path
  6468   0026FE  6E21               	movwf	moveLightBlue@path^0,c
  6469   002700  0E02               	movlw	high _path
  6470   002702  6E22               	movwf	(moveLightBlue@path+1)^0,c
  6471   002704  ECC8  F01F         	call	_moveLightBlue	;wreg free
  6472   002708                     
  6473                           ;color.c: 295:         color = 4;
  6474   002708  0E00               	movlw	0
  6475   00270A  6E4C               	movwf	(decision@color+1)^0,c
  6476   00270C  0E04               	movlw	4
  6477   00270E  6E4B               	movwf	decision@color^0,c
  6478                           
  6479                           ;color.c: 296:     } else if (hue>=302 && hue<=346){
  6480   002710  EF08  F014         	goto	l6012
  6481   002714                     l5988:
  6482   002714  0E2E               	movlw	46
  6483   002716  5C47               	subwf	decision@hue^0,w,c
  6484   002718  0E01               	movlw	1
  6485   00271A  5848               	subwfb	(decision@hue+1)^0,w,c
  6486   00271C  A0D8               	btfss	status,0,c
  6487   00271E  EF93  F013         	goto	u5361
  6488   002722  EF95  F013         	goto	u5360
  6489   002726                     u5361:
  6490   002726  EFB4  F013         	goto	l5996
  6491   00272A                     u5360:
  6492   00272A  0E5B               	movlw	91
  6493   00272C  5C47               	subwf	decision@hue^0,w,c
  6494   00272E  0E01               	movlw	1
  6495   002730  5848               	subwfb	(decision@hue+1)^0,w,c
  6496   002732  B0D8               	btfsc	status,0,c
  6497   002734  EF9E  F013         	goto	u5371
  6498   002738  EFA0  F013         	goto	u5370
  6499   00273C                     u5371:
  6500   00273C  EFB4  F013         	goto	l5996
  6501   002740                     u5370:
  6502   002740                     
  6503                           ;color.c: 297:         moveYellow(&motorL,&motorR, path_length, &path);
  6504   002740  0ED6               	movlw	low _motorL
  6505   002742  6E1D               	movwf	moveYellow@mL^0,c
  6506   002744  0ECD               	movlw	low _motorR
  6507   002746  6E1E               	movwf	moveYellow@mR^0,c
  6508   002748  C049  F01F         	movff	decision@path_length,moveYellow@path_length
  6509   00274C  C04A  F020         	movff	decision@path_length+1,moveYellow@path_length+1
  6510   002750  0E00               	movlw	low _path
  6511   002752  6E21               	movwf	moveYellow@path^0,c
  6512   002754  0E02               	movlw	high _path
  6513   002756  6E22               	movwf	(moveYellow@path+1)^0,c
  6514   002758  EC0C  F01F         	call	_moveYellow	;wreg free
  6515   00275C                     
  6516                           ;color.c: 298:         color = 5;
  6517   00275C  0E00               	movlw	0
  6518   00275E  6E4C               	movwf	(decision@color+1)^0,c
  6519   002760  0E05               	movlw	5
  6520   002762  6E4B               	movwf	decision@color^0,c
  6521                           
  6522                           ;color.c: 299:     } else if (hue>14 && hue<=35){
  6523   002764  EF08  F014         	goto	l6012
  6524   002768                     l5996:
  6525   002768  5048               	movf	(decision@hue+1)^0,w,c
  6526   00276A  E109               	bnz	u5380
  6527   00276C  0E0F               	movlw	15
  6528   00276E  5C47               	subwf	decision@hue^0,w,c
  6529   002770  A0D8               	btfss	status,0,c
  6530   002772  EFBD  F013         	goto	u5381
  6531   002776  EFBF  F013         	goto	u5380
  6532   00277A                     u5381:
  6533   00277A  EFDE  F013         	goto	l6004
  6534   00277E                     u5380:
  6535   00277E  5048               	movf	(decision@hue+1)^0,w,c
  6536   002780  E107               	bnz	u5391
  6537   002782  0E24               	movlw	36
  6538   002784  5C47               	subwf	decision@hue^0,w,c
  6539   002786  B0D8               	btfsc	status,0,c
  6540   002788  EFC8  F013         	goto	u5391
  6541   00278C  EFCA  F013         	goto	u5390
  6542   002790                     u5391:
  6543   002790  EFDE  F013         	goto	l6004
  6544   002794                     u5390:
  6545   002794                     
  6546                           ;color.c: 300:         moveOrange(&motorL,&motorR, path_length, &path);
  6547   002794  0ED6               	movlw	low _motorL
  6548   002796  6E1D               	movwf	moveOrange@mL^0,c
  6549   002798  0ECD               	movlw	low _motorR
  6550   00279A  6E1E               	movwf	moveOrange@mR^0,c
  6551   00279C  C049  F01F         	movff	decision@path_length,moveOrange@path_length
  6552   0027A0  C04A  F020         	movff	decision@path_length+1,moveOrange@path_length+1
  6553   0027A4  0E00               	movlw	low _path
  6554   0027A6  6E21               	movwf	moveOrange@path^0,c
  6555   0027A8  0E02               	movlw	high _path
  6556   0027AA  6E22               	movwf	(moveOrange@path+1)^0,c
  6557   0027AC  EC99  F01F         	call	_moveOrange	;wreg free
  6558   0027B0                     
  6559                           ;color.c: 301:         color= 6;
  6560   0027B0  0E00               	movlw	0
  6561   0027B2  6E4C               	movwf	(decision@color+1)^0,c
  6562   0027B4  0E06               	movlw	6
  6563   0027B6  6E4B               	movwf	decision@color^0,c
  6564                           
  6565                           ;color.c: 302:     } else if (hue>=244 && hue<=251){
  6566   0027B8  EF08  F014         	goto	l6012
  6567   0027BC                     l6004:
  6568   0027BC  5048               	movf	(decision@hue+1)^0,w,c
  6569   0027BE  E109               	bnz	u5400
  6570   0027C0  0EF4               	movlw	244
  6571   0027C2  5C47               	subwf	decision@hue^0,w,c
  6572   0027C4  A0D8               	btfss	status,0,c
  6573   0027C6  EFE7  F013         	goto	u5401
  6574   0027CA  EFE9  F013         	goto	u5400
  6575   0027CE                     u5401:
  6576   0027CE  EF08  F014         	goto	l158
  6577   0027D2                     u5400:
  6578   0027D2  5048               	movf	(decision@hue+1)^0,w,c
  6579   0027D4  E107               	bnz	u5411
  6580   0027D6  0EFC               	movlw	252
  6581   0027D8  5C47               	subwf	decision@hue^0,w,c
  6582   0027DA  B0D8               	btfsc	status,0,c
  6583   0027DC  EFF2  F013         	goto	u5411
  6584   0027E0  EFF4  F013         	goto	u5410
  6585   0027E4                     u5411:
  6586   0027E4  EF08  F014         	goto	l158
  6587   0027E8                     u5410:
  6588   0027E8                     
  6589                           ;color.c: 303:         movePink(&motorL,&motorR, path_length, &path);
  6590   0027E8  0ED6               	movlw	low _motorL
  6591   0027EA  6E1D               	movwf	movePink@mL^0,c
  6592   0027EC  0ECD               	movlw	low _motorR
  6593   0027EE  6E1E               	movwf	movePink@mR^0,c
  6594   0027F0  C049  F01F         	movff	decision@path_length,movePink@path_length
  6595   0027F4  C04A  F020         	movff	decision@path_length+1,movePink@path_length+1
  6596   0027F8  0E00               	movlw	low _path
  6597   0027FA  6E21               	movwf	movePink@path^0,c
  6598   0027FC  0E02               	movlw	high _path
  6599   0027FE  6E22               	movwf	(movePink@path+1)^0,c
  6600   002800  EC6A  F01F         	call	_movePink	;wreg free
  6601   002804                     
  6602                           ;color.c: 304:         color = 7;
  6603   002804  0E00               	movlw	0
  6604   002806  6E4C               	movwf	(decision@color+1)^0,c
  6605   002808  0E07               	movlw	7
  6606   00280A  6E4B               	movwf	decision@color^0,c
  6607   00280C  EF08  F014         	goto	l6012
  6608   002810                     l158:
  6609   002810                     l6012:
  6610                           
  6611                           ;color.c: 307:     send2USART(color);
  6612   002810  C04B  F045         	movff	decision@color,send2USART@hue
  6613   002814  C04C  F046         	movff	decision@color+1,send2USART@hue+1
  6614   002818  EC36  F023         	call	_send2USART	;wreg free
  6615   00281C  0012               	return		;funcret
  6616   00281E                     __end_of_decision:
  6617                           	callstack 0
  6618                           
  6619 ;; *************** function _send2USART *****************
  6620 ;; Defined at:
  6621 ;;		line 146 in file "serial.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;  hue             2   68[COMRAM] unsigned int 
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  1    wreg      void 
  6628 ;; Registers used:
  6629 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6635 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6636 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6638 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6639 ;;Total ram usage:       52 bytes
  6640 ;; Hardware stack levels used: 1
  6641 ;; Hardware stack levels required when called: 9
  6642 ;; This function calls:
  6643 ;;		_sendStringSerial4
  6644 ;;		_sprintf
  6645 ;; This function is called by:
  6646 ;;		_decision
  6647 ;;		_main
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651                           	psect	text21
  6652   00466C                     __ptext21:
  6653                           	callstack 0
  6654   00466C                     _send2USART:
  6655                           	callstack 21
  6656   00466C                     
  6657                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  6658   00466C  0E60               	movlw	low send2USART@hue_char
  6659   00466E  6E32               	movwf	sprintf@s^0,c
  6660   004670  0E9A               	movlw	low STR_12
  6661   004672  6E33               	movwf	sprintf@fmt^0,c
  6662   004674  C045  F034         	movff	send2USART@hue,?_sprintf+2
  6663   004678  C046  F035         	movff	send2USART@hue+1,?_sprintf+3
  6664   00467C  ECA4  F021         	call	_sprintf	;wreg free
  6665   004680                     
  6666                           ;serial.c: 158:         sendStringSerial4(hue_char);
  6667   004680  0E60               	movlw	low send2USART@hue_char
  6668   004682  6E03               	movwf	sendStringSerial4@string^0,c
  6669   004684  EC55  F022         	call	_sendStringSerial4	;wreg free
  6670   004688  0012               	return		;funcret
  6671   00468A                     __end_of_send2USART:
  6672                           	callstack 0
  6673                           
  6674 ;; *************** function _moveYellow *****************
  6675 ;; Defined at:
  6676 ;;		line 288 in file "dc_motor.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6679 ;;		 -> motorL(9), 
  6680 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6681 ;;		 -> motorR(9), 
  6682 ;;  path_length     2   30[COMRAM] unsigned int 
  6683 ;;  path            2   32[COMRAM] PTR struct PathStep
  6684 ;;		 -> path(200), 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;		None
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  1    wreg      void 
  6689 ;; Registers used:
  6690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6696 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6698 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6699 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6700 ;;Total ram usage:        8 bytes
  6701 ;; Hardware stack levels used: 1
  6702 ;; Hardware stack levels required when called: 5
  6703 ;; This function calls:
  6704 ;;		_backOneAndHalf
  6705 ;;		_logAction
  6706 ;;		_right90
  6707 ;; This function is called by:
  6708 ;;		_decision
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text22
  6713   003E18                     __ptext22:
  6714                           	callstack 0
  6715   003E18                     _moveYellow:
  6716                           	callstack 24
  6717   003E18                     
  6718                           ;dc_motor.c: 288: void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length,struct PathStep *path);dc_motor.c: 289: {;dc_motor.c: 291:     backOneAndHa
      +                          lf(mL,mR);
  6719   003E18  C01D  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  6720   003E1C  C01E  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  6721   003E20  ECF1  F021         	call	_backOneAndHalf	;wreg free
  6722   003E24                     
  6723                           ;dc_motor.c: 292:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6724   003E24  0E29               	movlw	41
  6725   003E26  6E24               	movwf	(??_moveYellow+1)^0,c
  6726   003E28  0E96               	movlw	150
  6727   003E2A  6E23               	movwf	??_moveYellow^0,c
  6728   003E2C  0E7F               	movlw	127
  6729   003E2E                     u5637:
  6730   003E2E  2EE8               	decfsz	wreg,f,c
  6731   003E30  D7FE               	bra	u5637
  6732   003E32  2E23               	decfsz	??_moveYellow^0,f,c
  6733   003E34  D7FC               	bra	u5637
  6734   003E36  2E24               	decfsz	(??_moveYellow+1)^0,f,c
  6735   003E38  D7FA               	bra	u5637
  6736   003E3A  0000               	nop	
  6737   003E3C                     
  6738                           ;dc_motor.c: 293:     right90(mL,mR);
  6739   003E3C  C01D  F019         	movff	moveYellow@mL,right90@mL
  6740   003E40  C01E  F01A         	movff	moveYellow@mR,right90@mR
  6741   003E44  EC6E  F022         	call	_right90	;wreg free
  6742   003E48                     
  6743                           ;dc_motor.c: 294:     path_length = logAction(1,0, path_length, path);
  6744   003E48  0E00               	movlw	0
  6745   003E4A  6E03               	movwf	(logAction@action+1)^0,c
  6746   003E4C  0E01               	movlw	1
  6747   003E4E  6E02               	movwf	logAction@action^0,c
  6748   003E50  0E00               	movlw	0
  6749   003E52  6E05               	movwf	(logAction@time+1)^0,c
  6750   003E54  0E00               	movlw	0
  6751   003E56  6E04               	movwf	logAction@time^0,c
  6752   003E58  C01F  F006         	movff	moveYellow@path_length,logAction@path_length
  6753   003E5C  C020  F007         	movff	moveYellow@path_length+1,logAction@path_length+1
  6754   003E60  C021  F008         	movff	moveYellow@path,logAction@path
  6755   003E64  C022  F009         	movff	moveYellow@path+1,logAction@path+1
  6756   003E68  EC5D  F01D         	call	_logAction	;wreg free
  6757   003E6C  C002  F01F         	movff	?_logAction,moveYellow@path_length
  6758   003E70  C003  F020         	movff	?_logAction+1,moveYellow@path_length+1
  6759   003E74  0012               	return		;funcret
  6760   003E76                     __end_of_moveYellow:
  6761                           	callstack 0
  6762                           
  6763 ;; *************** function _moveRed *****************
  6764 ;; Defined at:
  6765 ;;		line 258 in file "dc_motor.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6768 ;;		 -> motorL(9), 
  6769 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6770 ;;		 -> motorR(9), 
  6771 ;;  path_length     2   30[COMRAM] unsigned int 
  6772 ;;  path            2   32[COMRAM] PTR struct PathStep
  6773 ;;		 -> path(200), 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;		None
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6785 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6787 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6788 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6789 ;;Total ram usage:        8 bytes
  6790 ;; Hardware stack levels used: 1
  6791 ;; Hardware stack levels required when called: 5
  6792 ;; This function calls:
  6793 ;;		_backHalf
  6794 ;;		_logAction
  6795 ;;		_right90
  6796 ;; This function is called by:
  6797 ;;		_decision
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text23
  6802   003E76                     __ptext23:
  6803                           	callstack 0
  6804   003E76                     _moveRed:
  6805                           	callstack 24
  6806   003E76                     
  6807                           ;dc_motor.c: 258: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int pa
      +                          th_length, struct PathStep *path);dc_motor.c: 259: {;dc_motor.c: 261:     backHalf(mL,mR
      +                          );
  6808   003E76  C01D  F019         	movff	moveRed@mL,backHalf@mL
  6809   003E7A  C01E  F01A         	movff	moveRed@mR,backHalf@mR
  6810   003E7E  EC9E  F022         	call	_backHalf	;wreg free
  6811   003E82                     
  6812                           ;dc_motor.c: 262:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6813   003E82  0E29               	movlw	41
  6814   003E84  6E24               	movwf	(??_moveRed+1)^0,c
  6815   003E86  0E96               	movlw	150
  6816   003E88  6E23               	movwf	??_moveRed^0,c
  6817   003E8A  0E7F               	movlw	127
  6818   003E8C                     u5647:
  6819   003E8C  2EE8               	decfsz	wreg,f,c
  6820   003E8E  D7FE               	bra	u5647
  6821   003E90  2E23               	decfsz	??_moveRed^0,f,c
  6822   003E92  D7FC               	bra	u5647
  6823   003E94  2E24               	decfsz	(??_moveRed+1)^0,f,c
  6824   003E96  D7FA               	bra	u5647
  6825   003E98  0000               	nop	
  6826   003E9A                     
  6827                           ;dc_motor.c: 263:     right90(mL,mR);
  6828   003E9A  C01D  F019         	movff	moveRed@mL,right90@mL
  6829   003E9E  C01E  F01A         	movff	moveRed@mR,right90@mR
  6830   003EA2  EC6E  F022         	call	_right90	;wreg free
  6831   003EA6                     
  6832                           ;dc_motor.c: 264:     path_length = logAction(1,0, path_length, path);
  6833   003EA6  0E00               	movlw	0
  6834   003EA8  6E03               	movwf	(logAction@action+1)^0,c
  6835   003EAA  0E01               	movlw	1
  6836   003EAC  6E02               	movwf	logAction@action^0,c
  6837   003EAE  0E00               	movlw	0
  6838   003EB0  6E05               	movwf	(logAction@time+1)^0,c
  6839   003EB2  0E00               	movlw	0
  6840   003EB4  6E04               	movwf	logAction@time^0,c
  6841   003EB6  C01F  F006         	movff	moveRed@path_length,logAction@path_length
  6842   003EBA  C020  F007         	movff	moveRed@path_length+1,logAction@path_length+1
  6843   003EBE  C021  F008         	movff	moveRed@path,logAction@path
  6844   003EC2  C022  F009         	movff	moveRed@path+1,logAction@path+1
  6845   003EC6  EC5D  F01D         	call	_logAction	;wreg free
  6846   003ECA  C002  F01F         	movff	?_logAction,moveRed@path_length
  6847   003ECE  C003  F020         	movff	?_logAction+1,moveRed@path_length+1
  6848   003ED2  0012               	return		;funcret
  6849   003ED4                     __end_of_moveRed:
  6850                           	callstack 0
  6851                           
  6852 ;; *************** function _right90 *****************
  6853 ;; Defined at:
  6854 ;;		line 196 in file "dc_motor.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  6857 ;;		 -> motorL(9), 
  6858 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  6859 ;;		 -> motorR(9), 
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;		None
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  1    wreg      void 
  6864 ;; Registers used:
  6865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6871 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6873 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6874 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6875 ;;Total ram usage:        4 bytes
  6876 ;; Hardware stack levels used: 1
  6877 ;; Hardware stack levels required when called: 4
  6878 ;; This function calls:
  6879 ;;		_stop
  6880 ;;		_turnRight
  6881 ;; This function is called by:
  6882 ;;		_moveRed
  6883 ;;		_moveYellow
  6884 ;;		_reverseTurn
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           	psect	text24
  6889   0044DC                     __ptext24:
  6890                           	callstack 0
  6891   0044DC                     _right90:
  6892                           	callstack 24
  6893   0044DC                     
  6894                           ;dc_motor.c: 196: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 197
      +                          : {;dc_motor.c: 198:     turnRight(mL,mR);
  6895   0044DC  C019  F014         	movff	right90@mL,turnRight@mL
  6896   0044E0  C01A  F015         	movff	right90@mR,turnRight@mR
  6897   0044E4  EC9F  F01D         	call	_turnRight	;wreg free
  6898   0044E8                     
  6899                           ;dc_motor.c: 199:     _delay((unsigned long)((290)*(64000000/4000.0)));
  6900   0044E8  0E18               	movlw	24
  6901   0044EA  6E1C               	movwf	(??_right90+1)^0,c
  6902   0044EC  0E8A               	movlw	138
  6903   0044EE  6E1B               	movwf	??_right90^0,c
  6904   0044F0  0EE8               	movlw	232
  6905   0044F2                     u5657:
  6906   0044F2  2EE8               	decfsz	wreg,f,c
  6907   0044F4  D7FE               	bra	u5657
  6908   0044F6  2E1B               	decfsz	??_right90^0,f,c
  6909   0044F8  D7FC               	bra	u5657
  6910   0044FA  2E1C               	decfsz	(??_right90+1)^0,f,c
  6911   0044FC  D7FA               	bra	u5657
  6912   0044FE                     
  6913                           ;dc_motor.c: 200:     stop(mL,mR);
  6914   0044FE  C019  F014         	movff	right90@mL,stop@mL
  6915   004502  C01A  F015         	movff	right90@mR,stop@mR
  6916   004506  EC16  F01D         	call	_stop	;wreg free
  6917   00450A  0012               	return		;funcret
  6918   00450C                     __end_of_right90:
  6919                           	callstack 0
  6920                           
  6921 ;; *************** function _movePink *****************
  6922 ;; Defined at:
  6923 ;;		line 297 in file "dc_motor.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  6926 ;;		 -> motorL(9), 
  6927 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  6928 ;;		 -> motorR(9), 
  6929 ;;  path_length     2   30[COMRAM] unsigned int 
  6930 ;;  path            2   32[COMRAM] PTR struct PathStep
  6931 ;;		 -> path(200), 
  6932 ;; Auto vars:     Size  Location     Type
  6933 ;;		None
  6934 ;; Return value:  Size  Location     Type
  6935 ;;                  1    wreg      void 
  6936 ;; Registers used:
  6937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6938 ;; Tracked objects:
  6939 ;;		On entry : 0/0
  6940 ;;		On exit  : 0/0
  6941 ;;		Unchanged: 0/0
  6942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6943 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6945 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6946 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6947 ;;Total ram usage:        8 bytes
  6948 ;; Hardware stack levels used: 1
  6949 ;; Hardware stack levels required when called: 5
  6950 ;; This function calls:
  6951 ;;		_backOneAndHalf
  6952 ;;		_left90
  6953 ;;		_logAction
  6954 ;; This function is called by:
  6955 ;;		_decision
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text25
  6960   003ED4                     __ptext25:
  6961                           	callstack 0
  6962   003ED4                     _movePink:
  6963                           	callstack 24
  6964   003ED4                     
  6965                           ;dc_motor.c: 297: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length,struct PathStep *path);dc_motor.c: 298: {;dc_motor.c: 300:     backOneAndHalf
      +                          (mL,mR);
  6966   003ED4  C01D  F019         	movff	movePink@mL,backOneAndHalf@mL
  6967   003ED8  C01E  F01A         	movff	movePink@mR,backOneAndHalf@mR
  6968   003EDC  ECF1  F021         	call	_backOneAndHalf	;wreg free
  6969   003EE0                     
  6970                           ;dc_motor.c: 301:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6971   003EE0  0E29               	movlw	41
  6972   003EE2  6E24               	movwf	(??_movePink+1)^0,c
  6973   003EE4  0E96               	movlw	150
  6974   003EE6  6E23               	movwf	??_movePink^0,c
  6975   003EE8  0E7F               	movlw	127
  6976   003EEA                     u5667:
  6977   003EEA  2EE8               	decfsz	wreg,f,c
  6978   003EEC  D7FE               	bra	u5667
  6979   003EEE  2E23               	decfsz	??_movePink^0,f,c
  6980   003EF0  D7FC               	bra	u5667
  6981   003EF2  2E24               	decfsz	(??_movePink+1)^0,f,c
  6982   003EF4  D7FA               	bra	u5667
  6983   003EF6  0000               	nop	
  6984   003EF8                     
  6985                           ;dc_motor.c: 302:     left90(mL,mR);
  6986   003EF8  C01D  F019         	movff	movePink@mL,left90@mL
  6987   003EFC  C01E  F01A         	movff	movePink@mR,left90@mR
  6988   003F00  EC86  F022         	call	_left90	;wreg free
  6989   003F04                     
  6990                           ;dc_motor.c: 303:     path_length = logAction(2,0, path_length, path);
  6991   003F04  0E00               	movlw	0
  6992   003F06  6E03               	movwf	(logAction@action+1)^0,c
  6993   003F08  0E02               	movlw	2
  6994   003F0A  6E02               	movwf	logAction@action^0,c
  6995   003F0C  0E00               	movlw	0
  6996   003F0E  6E05               	movwf	(logAction@time+1)^0,c
  6997   003F10  0E00               	movlw	0
  6998   003F12  6E04               	movwf	logAction@time^0,c
  6999   003F14  C01F  F006         	movff	movePink@path_length,logAction@path_length
  7000   003F18  C020  F007         	movff	movePink@path_length+1,logAction@path_length+1
  7001   003F1C  C021  F008         	movff	movePink@path,logAction@path
  7002   003F20  C022  F009         	movff	movePink@path+1,logAction@path+1
  7003   003F24  EC5D  F01D         	call	_logAction	;wreg free
  7004   003F28  C002  F01F         	movff	?_logAction,movePink@path_length
  7005   003F2C  C003  F020         	movff	?_logAction+1,movePink@path_length+1
  7006   003F30  0012               	return		;funcret
  7007   003F32                     __end_of_movePink:
  7008                           	callstack 0
  7009                           
  7010 ;; *************** function _backOneAndHalf *****************
  7011 ;; Defined at:
  7012 ;;		line 244 in file "dc_motor.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7015 ;;		 -> motorL(9), 
  7016 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7017 ;;		 -> motorR(9), 
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;		None
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      void 
  7022 ;; Registers used:
  7023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7029 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7031 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7032 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7033 ;;Total ram usage:        4 bytes
  7034 ;; Hardware stack levels used: 1
  7035 ;; Hardware stack levels required when called: 4
  7036 ;; This function calls:
  7037 ;;		_fullSpeedBack
  7038 ;;		_stop
  7039 ;; This function is called by:
  7040 ;;		_moveYellow
  7041 ;;		_movePink
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           	psect	text26
  7046   0043E2                     __ptext26:
  7047                           	callstack 0
  7048   0043E2                     _backOneAndHalf:
  7049                           	callstack 24
  7050   0043E2                     
  7051                           ;dc_motor.c: 244: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 245: {;dc_motor.c: 246:     fullSpeedBack(mL,mR);
  7052   0043E2  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  7053   0043E6  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  7054   0043EA  EC97  F01E         	call	_fullSpeedBack	;wreg free
  7055   0043EE                     
  7056                           ;dc_motor.c: 247:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  7057   0043EE  0E6A               	movlw	106
  7058   0043F0  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  7059   0043F2  0E85               	movlw	133
  7060   0043F4  6E1B               	movwf	??_backOneAndHalf^0,c
  7061   0043F6  0EB4               	movlw	180
  7062   0043F8                     u5677:
  7063   0043F8  2EE8               	decfsz	wreg,f,c
  7064   0043FA  D7FE               	bra	u5677
  7065   0043FC  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  7066   0043FE  D7FC               	bra	u5677
  7067   004400  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  7068   004402  D7FA               	bra	u5677
  7069   004404  D000               	nop2	
  7070   004406                     
  7071                           ;dc_motor.c: 248:     stop(mL,mR);
  7072   004406  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  7073   00440A  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  7074   00440E  EC16  F01D         	call	_stop	;wreg free
  7075   004412  0012               	return		;funcret
  7076   004414                     __end_of_backOneAndHalf:
  7077                           	callstack 0
  7078                           
  7079 ;; *************** function _moveOrange *****************
  7080 ;; Defined at:
  7081 ;;		line 306 in file "dc_motor.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7084 ;;		 -> motorL(9), 
  7085 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7086 ;;		 -> motorR(9), 
  7087 ;;  path_length     2   30[COMRAM] unsigned int 
  7088 ;;  path            2   32[COMRAM] PTR struct PathStep
  7089 ;;		 -> path(200), 
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;		None
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      void 
  7094 ;; Registers used:
  7095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7101 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7103 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7104 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7105 ;;Total ram usage:        8 bytes
  7106 ;; Hardware stack levels used: 1
  7107 ;; Hardware stack levels required when called: 5
  7108 ;; This function calls:
  7109 ;;		_backHalf
  7110 ;;		_logAction
  7111 ;;		_right135
  7112 ;; This function is called by:
  7113 ;;		_decision
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           	psect	text27
  7118   003F32                     __ptext27:
  7119                           	callstack 0
  7120   003F32                     _moveOrange:
  7121                           	callstack 24
  7122   003F32                     
  7123                           ;dc_motor.c: 306: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           path_length,struct PathStep *path);dc_motor.c: 307: {;dc_motor.c: 309:     backHalf(mL,
      +                          mR);
  7124   003F32  C01D  F019         	movff	moveOrange@mL,backHalf@mL
  7125   003F36  C01E  F01A         	movff	moveOrange@mR,backHalf@mR
  7126   003F3A  EC9E  F022         	call	_backHalf	;wreg free
  7127   003F3E                     
  7128                           ;dc_motor.c: 310:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7129   003F3E  0E29               	movlw	41
  7130   003F40  6E24               	movwf	(??_moveOrange+1)^0,c
  7131   003F42  0E96               	movlw	150
  7132   003F44  6E23               	movwf	??_moveOrange^0,c
  7133   003F46  0E7F               	movlw	127
  7134   003F48                     u5687:
  7135   003F48  2EE8               	decfsz	wreg,f,c
  7136   003F4A  D7FE               	bra	u5687
  7137   003F4C  2E23               	decfsz	??_moveOrange^0,f,c
  7138   003F4E  D7FC               	bra	u5687
  7139   003F50  2E24               	decfsz	(??_moveOrange+1)^0,f,c
  7140   003F52  D7FA               	bra	u5687
  7141   003F54  0000               	nop	
  7142   003F56                     
  7143                           ;dc_motor.c: 311:     right135(mL,mR);
  7144   003F56  C01D  F019         	movff	moveOrange@mL,right135@mL
  7145   003F5A  C01E  F01A         	movff	moveOrange@mR,right135@mR
  7146   003F5E  EC0A  F022         	call	_right135	;wreg free
  7147   003F62                     
  7148                           ;dc_motor.c: 312:     path_length = logAction(5,0, path_length, path);
  7149   003F62  0E00               	movlw	0
  7150   003F64  6E03               	movwf	(logAction@action+1)^0,c
  7151   003F66  0E05               	movlw	5
  7152   003F68  6E02               	movwf	logAction@action^0,c
  7153   003F6A  0E00               	movlw	0
  7154   003F6C  6E05               	movwf	(logAction@time+1)^0,c
  7155   003F6E  0E00               	movlw	0
  7156   003F70  6E04               	movwf	logAction@time^0,c
  7157   003F72  C01F  F006         	movff	moveOrange@path_length,logAction@path_length
  7158   003F76  C020  F007         	movff	moveOrange@path_length+1,logAction@path_length+1
  7159   003F7A  C021  F008         	movff	moveOrange@path,logAction@path
  7160   003F7E  C022  F009         	movff	moveOrange@path+1,logAction@path+1
  7161   003F82  EC5D  F01D         	call	_logAction	;wreg free
  7162   003F86  C002  F01F         	movff	?_logAction,moveOrange@path_length
  7163   003F8A  C003  F020         	movff	?_logAction+1,moveOrange@path_length+1
  7164   003F8E  0012               	return		;funcret
  7165   003F90                     __end_of_moveOrange:
  7166                           	callstack 0
  7167                           
  7168 ;; *************** function _right135 *****************
  7169 ;; Defined at:
  7170 ;;		line 220 in file "dc_motor.c"
  7171 ;; Parameters:    Size  Location     Type
  7172 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7173 ;;		 -> motorL(9), 
  7174 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7175 ;;		 -> motorR(9), 
  7176 ;; Auto vars:     Size  Location     Type
  7177 ;;		None
  7178 ;; Return value:  Size  Location     Type
  7179 ;;                  1    wreg      void 
  7180 ;; Registers used:
  7181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7182 ;; Tracked objects:
  7183 ;;		On entry : 0/0
  7184 ;;		On exit  : 0/0
  7185 ;;		Unchanged: 0/0
  7186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7187 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7189 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7190 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7191 ;;Total ram usage:        4 bytes
  7192 ;; Hardware stack levels used: 1
  7193 ;; Hardware stack levels required when called: 4
  7194 ;; This function calls:
  7195 ;;		_stop
  7196 ;;		_turnRight
  7197 ;; This function is called by:
  7198 ;;		_moveOrange
  7199 ;;		_reverseTurn
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           	psect	text28
  7204   004414                     __ptext28:
  7205                           	callstack 0
  7206   004414                     _right135:
  7207                           	callstack 24
  7208   004414                     
  7209                           ;dc_motor.c: 220: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 22
      +                          1: {;dc_motor.c: 222:     turnRight(mL,mR);
  7210   004414  C019  F014         	movff	right135@mL,turnRight@mL
  7211   004418  C01A  F015         	movff	right135@mR,turnRight@mR
  7212   00441C  EC9F  F01D         	call	_turnRight	;wreg free
  7213   004420                     
  7214                           ;dc_motor.c: 223:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7215   004420  0E21               	movlw	33
  7216   004422  6E1C               	movwf	(??_right135+1)^0,c
  7217   004424  0E78               	movlw	120
  7218   004426  6E1B               	movwf	??_right135^0,c
  7219   004428  0E98               	movlw	152
  7220   00442A                     u5697:
  7221   00442A  2EE8               	decfsz	wreg,f,c
  7222   00442C  D7FE               	bra	u5697
  7223   00442E  2E1B               	decfsz	??_right135^0,f,c
  7224   004430  D7FC               	bra	u5697
  7225   004432  2E1C               	decfsz	(??_right135+1)^0,f,c
  7226   004434  D7FA               	bra	u5697
  7227   004436  D000               	nop2	
  7228   004438                     
  7229                           ;dc_motor.c: 224:     stop(mL,mR);
  7230   004438  C019  F014         	movff	right135@mL,stop@mL
  7231   00443C  C01A  F015         	movff	right135@mR,stop@mR
  7232   004440  EC16  F01D         	call	_stop	;wreg free
  7233   004444  0012               	return		;funcret
  7234   004446                     __end_of_right135:
  7235                           	callstack 0
  7236                           
  7237 ;; *************** function _turnRight *****************
  7238 ;; Defined at:
  7239 ;;		line 128 in file "dc_motor.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7242 ;;		 -> motorL(9), 
  7243 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7244 ;;		 -> motorR(9), 
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;  i               2   22[COMRAM] unsigned int 
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  1    wreg      void 
  7249 ;; Registers used:
  7250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7256 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7257 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7258 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7259 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7260 ;;Total ram usage:        5 bytes
  7261 ;; Hardware stack levels used: 1
  7262 ;; Hardware stack levels required when called: 3
  7263 ;; This function calls:
  7264 ;;		_setMotorPWM
  7265 ;; This function is called by:
  7266 ;;		_right90
  7267 ;;		_right135
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           	psect	text29
  7272   003B3E                     __ptext29:
  7273                           	callstack 0
  7274   003B3E                     _turnRight:
  7275                           	callstack 24
  7276   003B3E                     
  7277                           ;dc_motor.c: 128: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 129: {;dc_motor
      +                          .c: 131:     mL->direction = 1;
  7278   003B3E  5014               	movf	turnRight@mL^0,w,c
  7279   003B40  6ED9               	movwf	fsr2l,c
  7280   003B42  6ADA               	clrf	fsr2h,c
  7281   003B44  0E01               	movlw	1
  7282   003B46  26D9               	addwf	fsr2l,f,c
  7283   003B48  0E01               	movlw	1
  7284   003B4A  6EDF               	movwf	indf2,c
  7285                           
  7286                           ;dc_motor.c: 132:     mR->direction = 0;
  7287   003B4C  5015               	movf	turnRight@mR^0,w,c
  7288   003B4E  6ED9               	movwf	fsr2l,c
  7289   003B50  6ADA               	clrf	fsr2h,c
  7290   003B52  0E01               	movlw	1
  7291   003B54  26D9               	addwf	fsr2l,f,c
  7292   003B56  6ADF               	clrf	indf2,c
  7293   003B58                     
  7294                           ;dc_motor.c: 134:     setMotorPWM(mL);
  7295   003B58  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7296   003B5C  EC52  F017         	call	_setMotorPWM	;wreg free
  7297   003B60                     
  7298                           ;dc_motor.c: 135:     setMotorPWM(mR);
  7299   003B60  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7300   003B64  EC52  F017         	call	_setMotorPWM	;wreg free
  7301   003B68                     
  7302                           ;dc_motor.c: 136:     for (unsigned int i = 0; i <50; i++)
  7303   003B68  0E00               	movlw	0
  7304   003B6A  6E18               	movwf	(turnRight@i+1)^0,c
  7305   003B6C  0E00               	movlw	0
  7306   003B6E  6E17               	movwf	turnRight@i^0,c
  7307   003B70                     l5538:
  7308                           
  7309                           ;dc_motor.c: 137:     {;dc_motor.c: 138:         mL->power++;
  7310   003B70  5014               	movf	turnRight@mL^0,w,c
  7311   003B72  6ED9               	movwf	fsr2l,c
  7312   003B74  6ADA               	clrf	fsr2h,c
  7313   003B76  2ADF               	incf	indf2,f,c
  7314                           
  7315                           ;dc_motor.c: 139:         mR->power++;
  7316   003B78  5015               	movf	turnRight@mR^0,w,c
  7317   003B7A  6ED9               	movwf	fsr2l,c
  7318   003B7C  6ADA               	clrf	fsr2h,c
  7319   003B7E  2ADF               	incf	indf2,f,c
  7320   003B80                     
  7321                           ;dc_motor.c: 140:         setMotorPWM(mL);
  7322   003B80  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7323   003B84  EC52  F017         	call	_setMotorPWM	;wreg free
  7324   003B88                     
  7325                           ;dc_motor.c: 141:         setMotorPWM(mR);
  7326   003B88  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7327   003B8C  EC52  F017         	call	_setMotorPWM	;wreg free
  7328   003B90                     
  7329                           ;dc_motor.c: 142:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7330   003B90  0E0B               	movlw	11
  7331   003B92  6E16               	movwf	??_turnRight^0,c
  7332   003B94  0E62               	movlw	98
  7333   003B96                     u5707:
  7334   003B96  2EE8               	decfsz	wreg,f,c
  7335   003B98  D7FE               	bra	u5707
  7336   003B9A  2E16               	decfsz	??_turnRight^0,f,c
  7337   003B9C  D7FC               	bra	u5707
  7338   003B9E  D000               	nop2	
  7339   003BA0                     
  7340                           ;dc_motor.c: 143:     }
  7341   003BA0  4A17               	infsnz	turnRight@i^0,f,c
  7342   003BA2  2A18               	incf	(turnRight@i+1)^0,f,c
  7343   003BA4  5018               	movf	(turnRight@i+1)^0,w,c
  7344   003BA6  E109               	bnz	u5020
  7345   003BA8  0E32               	movlw	50
  7346   003BAA  5C17               	subwf	turnRight@i^0,w,c
  7347   003BAC  A0D8               	btfss	status,0,c
  7348   003BAE  EFDB  F01D         	goto	u5021
  7349   003BB2  EFDD  F01D         	goto	u5020
  7350   003BB6                     u5021:
  7351   003BB6  EFB8  F01D         	goto	l5538
  7352   003BBA                     u5020:
  7353   003BBA  0012               	return		;funcret
  7354   003BBC                     __end_of_turnRight:
  7355                           	callstack 0
  7356                           
  7357 ;; *************** function _moveLightBlue *****************
  7358 ;; Defined at:
  7359 ;;		line 315 in file "dc_motor.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7362 ;;		 -> motorL(9), 
  7363 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7364 ;;		 -> motorR(9), 
  7365 ;;  path_length     2   30[COMRAM] unsigned int 
  7366 ;;  path            2   32[COMRAM] PTR struct PathStep
  7367 ;;		 -> path(200), 
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;		None
  7370 ;; Return value:  Size  Location     Type
  7371 ;;                  1    wreg      void 
  7372 ;; Registers used:
  7373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7374 ;; Tracked objects:
  7375 ;;		On entry : 0/0
  7376 ;;		On exit  : 0/0
  7377 ;;		Unchanged: 0/0
  7378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7379 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7381 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7382 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7383 ;;Total ram usage:        8 bytes
  7384 ;; Hardware stack levels used: 1
  7385 ;; Hardware stack levels required when called: 5
  7386 ;; This function calls:
  7387 ;;		_backHalf
  7388 ;;		_left135
  7389 ;;		_logAction
  7390 ;; This function is called by:
  7391 ;;		_decision
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           	psect	text30
  7396   003F90                     __ptext30:
  7397                           	callstack 0
  7398   003F90                     _moveLightBlue:
  7399                           	callstack 24
  7400   003F90                     
  7401                           ;dc_motor.c: 315: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int path_length, struct PathStep *path);dc_motor.c: 316: {;dc_motor.c: 318:     backHalf
      +                          (mL,mR);
  7402   003F90  C01D  F019         	movff	moveLightBlue@mL,backHalf@mL
  7403   003F94  C01E  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7404   003F98  EC9E  F022         	call	_backHalf	;wreg free
  7405   003F9C                     
  7406                           ;dc_motor.c: 319:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7407   003F9C  0E29               	movlw	41
  7408   003F9E  6E24               	movwf	(??_moveLightBlue+1)^0,c
  7409   003FA0  0E96               	movlw	150
  7410   003FA2  6E23               	movwf	??_moveLightBlue^0,c
  7411   003FA4  0E7F               	movlw	127
  7412   003FA6                     u5717:
  7413   003FA6  2EE8               	decfsz	wreg,f,c
  7414   003FA8  D7FE               	bra	u5717
  7415   003FAA  2E23               	decfsz	??_moveLightBlue^0,f,c
  7416   003FAC  D7FC               	bra	u5717
  7417   003FAE  2E24               	decfsz	(??_moveLightBlue+1)^0,f,c
  7418   003FB0  D7FA               	bra	u5717
  7419   003FB2  0000               	nop	
  7420   003FB4                     
  7421                           ;dc_motor.c: 320:     left135(mL,mR);
  7422   003FB4  C01D  F019         	movff	moveLightBlue@mL,left135@mL
  7423   003FB8  C01E  F01A         	movff	moveLightBlue@mR,left135@mR
  7424   003FBC  EC23  F022         	call	_left135	;wreg free
  7425   003FC0                     
  7426                           ;dc_motor.c: 321:     path_length = logAction(6,0, path_length, path);
  7427   003FC0  0E00               	movlw	0
  7428   003FC2  6E03               	movwf	(logAction@action+1)^0,c
  7429   003FC4  0E06               	movlw	6
  7430   003FC6  6E02               	movwf	logAction@action^0,c
  7431   003FC8  0E00               	movlw	0
  7432   003FCA  6E05               	movwf	(logAction@time+1)^0,c
  7433   003FCC  0E00               	movlw	0
  7434   003FCE  6E04               	movwf	logAction@time^0,c
  7435   003FD0  C01F  F006         	movff	moveLightBlue@path_length,logAction@path_length
  7436   003FD4  C020  F007         	movff	moveLightBlue@path_length+1,logAction@path_length+1
  7437   003FD8  C021  F008         	movff	moveLightBlue@path,logAction@path
  7438   003FDC  C022  F009         	movff	moveLightBlue@path+1,logAction@path+1
  7439   003FE0  EC5D  F01D         	call	_logAction	;wreg free
  7440   003FE4  C002  F01F         	movff	?_logAction,moveLightBlue@path_length
  7441   003FE8  C003  F020         	movff	?_logAction+1,moveLightBlue@path_length+1
  7442   003FEC  0012               	return		;funcret
  7443   003FEE                     __end_of_moveLightBlue:
  7444                           	callstack 0
  7445                           
  7446 ;; *************** function _left135 *****************
  7447 ;; Defined at:
  7448 ;;		line 228 in file "dc_motor.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7451 ;;		 -> motorL(9), 
  7452 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7453 ;;		 -> motorR(9), 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;		None
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7467 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7468 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7469 ;;Total ram usage:        4 bytes
  7470 ;; Hardware stack levels used: 1
  7471 ;; Hardware stack levels required when called: 4
  7472 ;; This function calls:
  7473 ;;		_stop
  7474 ;;		_turnLeft
  7475 ;; This function is called by:
  7476 ;;		_moveLightBlue
  7477 ;;		_reverseTurn
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481                           	psect	text31
  7482   004446                     __ptext31:
  7483                           	callstack 0
  7484   004446                     _left135:
  7485                           	callstack 24
  7486   004446                     
  7487                           ;dc_motor.c: 228: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 229
      +                          : {;dc_motor.c: 230:     turnLeft(mL,mR);
  7488   004446  C019  F014         	movff	left135@mL,turnLeft@mL
  7489   00444A  C01A  F015         	movff	left135@mR,turnLeft@mR
  7490   00444E  ECDE  F01D         	call	_turnLeft	;wreg free
  7491   004452                     
  7492                           ;dc_motor.c: 231:     _delay((unsigned long)((400)*(64000000/4000.0)));
  7493   004452  0E21               	movlw	33
  7494   004454  6E1C               	movwf	(??_left135+1)^0,c
  7495   004456  0E78               	movlw	120
  7496   004458  6E1B               	movwf	??_left135^0,c
  7497   00445A  0E98               	movlw	152
  7498   00445C                     u5727:
  7499   00445C  2EE8               	decfsz	wreg,f,c
  7500   00445E  D7FE               	bra	u5727
  7501   004460  2E1B               	decfsz	??_left135^0,f,c
  7502   004462  D7FC               	bra	u5727
  7503   004464  2E1C               	decfsz	(??_left135+1)^0,f,c
  7504   004466  D7FA               	bra	u5727
  7505   004468  D000               	nop2	
  7506   00446A                     
  7507                           ;dc_motor.c: 232:     stop(mL,mR);
  7508   00446A  C019  F014         	movff	left135@mL,stop@mL
  7509   00446E  C01A  F015         	movff	left135@mR,stop@mR
  7510   004472  EC16  F01D         	call	_stop	;wreg free
  7511   004476  0012               	return		;funcret
  7512   004478                     __end_of_left135:
  7513                           	callstack 0
  7514                           
  7515 ;; *************** function _moveGreen *****************
  7516 ;; Defined at:
  7517 ;;		line 267 in file "dc_motor.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7520 ;;		 -> motorL(9), 
  7521 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7522 ;;		 -> motorR(9), 
  7523 ;;  path_length     2   30[COMRAM] unsigned int 
  7524 ;;  path            2   32[COMRAM] PTR struct PathStep
  7525 ;;		 -> path(200), 
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;		None
  7528 ;; Return value:  Size  Location     Type
  7529 ;;                  1    wreg      void 
  7530 ;; Registers used:
  7531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7537 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7539 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7540 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7541 ;;Total ram usage:        8 bytes
  7542 ;; Hardware stack levels used: 1
  7543 ;; Hardware stack levels required when called: 5
  7544 ;; This function calls:
  7545 ;;		_backHalf
  7546 ;;		_left90
  7547 ;;		_logAction
  7548 ;; This function is called by:
  7549 ;;		_decision
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553                           	psect	text32
  7554   003FEE                     __ptext32:
  7555                           	callstack 0
  7556   003FEE                     _moveGreen:
  7557                           	callstack 24
  7558   003FEE                     
  7559                           ;dc_motor.c: 267: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          path_length,struct PathStep *path);dc_motor.c: 268: {;dc_motor.c: 270:     backHalf(mL,m
      +                          R);
  7560   003FEE  C01D  F019         	movff	moveGreen@mL,backHalf@mL
  7561   003FF2  C01E  F01A         	movff	moveGreen@mR,backHalf@mR
  7562   003FF6  EC9E  F022         	call	_backHalf	;wreg free
  7563   003FFA                     
  7564                           ;dc_motor.c: 271:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7565   003FFA  0E29               	movlw	41
  7566   003FFC  6E24               	movwf	(??_moveGreen+1)^0,c
  7567   003FFE  0E96               	movlw	150
  7568   004000  6E23               	movwf	??_moveGreen^0,c
  7569   004002  0E7F               	movlw	127
  7570   004004                     u5737:
  7571   004004  2EE8               	decfsz	wreg,f,c
  7572   004006  D7FE               	bra	u5737
  7573   004008  2E23               	decfsz	??_moveGreen^0,f,c
  7574   00400A  D7FC               	bra	u5737
  7575   00400C  2E24               	decfsz	(??_moveGreen+1)^0,f,c
  7576   00400E  D7FA               	bra	u5737
  7577   004010  0000               	nop	
  7578   004012                     
  7579                           ;dc_motor.c: 272:     left90(mL,mR);
  7580   004012  C01D  F019         	movff	moveGreen@mL,left90@mL
  7581   004016  C01E  F01A         	movff	moveGreen@mR,left90@mR
  7582   00401A  EC86  F022         	call	_left90	;wreg free
  7583   00401E                     
  7584                           ;dc_motor.c: 273:     path_length = logAction(2,0, path_length, path);
  7585   00401E  0E00               	movlw	0
  7586   004020  6E03               	movwf	(logAction@action+1)^0,c
  7587   004022  0E02               	movlw	2
  7588   004024  6E02               	movwf	logAction@action^0,c
  7589   004026  0E00               	movlw	0
  7590   004028  6E05               	movwf	(logAction@time+1)^0,c
  7591   00402A  0E00               	movlw	0
  7592   00402C  6E04               	movwf	logAction@time^0,c
  7593   00402E  C01F  F006         	movff	moveGreen@path_length,logAction@path_length
  7594   004032  C020  F007         	movff	moveGreen@path_length+1,logAction@path_length+1
  7595   004036  C021  F008         	movff	moveGreen@path,logAction@path
  7596   00403A  C022  F009         	movff	moveGreen@path+1,logAction@path+1
  7597   00403E  EC5D  F01D         	call	_logAction	;wreg free
  7598   004042  C002  F01F         	movff	?_logAction,moveGreen@path_length
  7599   004046  C003  F020         	movff	?_logAction+1,moveGreen@path_length+1
  7600   00404A  0012               	return		;funcret
  7601   00404C                     __end_of_moveGreen:
  7602                           	callstack 0
  7603                           
  7604 ;; *************** function _left90 *****************
  7605 ;; Defined at:
  7606 ;;		line 204 in file "dc_motor.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7609 ;;		 -> motorL(9), 
  7610 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7611 ;;		 -> motorR(9), 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;		None
  7614 ;; Return value:  Size  Location     Type
  7615 ;;                  1    wreg      void 
  7616 ;; Registers used:
  7617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7623 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7625 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7626 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7627 ;;Total ram usage:        4 bytes
  7628 ;; Hardware stack levels used: 1
  7629 ;; Hardware stack levels required when called: 4
  7630 ;; This function calls:
  7631 ;;		_stop
  7632 ;;		_turnLeft
  7633 ;; This function is called by:
  7634 ;;		_moveGreen
  7635 ;;		_movePink
  7636 ;;		_reverseTurn
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           	psect	text33
  7641   00450C                     __ptext33:
  7642                           	callstack 0
  7643   00450C                     _left90:
  7644                           	callstack 24
  7645   00450C                     
  7646                           ;dc_motor.c: 204: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 205:
      +                           {;dc_motor.c: 206:     turnLeft(mL,mR);
  7647   00450C  C019  F014         	movff	left90@mL,turnLeft@mL
  7648   004510  C01A  F015         	movff	left90@mR,turnLeft@mR
  7649   004514  ECDE  F01D         	call	_turnLeft	;wreg free
  7650   004518                     
  7651                           ;dc_motor.c: 207:     _delay((unsigned long)((290)*(64000000/4000.0)));
  7652   004518  0E18               	movlw	24
  7653   00451A  6E1C               	movwf	(??_left90+1)^0,c
  7654   00451C  0E8A               	movlw	138
  7655   00451E  6E1B               	movwf	??_left90^0,c
  7656   004520  0EE8               	movlw	232
  7657   004522                     u5747:
  7658   004522  2EE8               	decfsz	wreg,f,c
  7659   004524  D7FE               	bra	u5747
  7660   004526  2E1B               	decfsz	??_left90^0,f,c
  7661   004528  D7FC               	bra	u5747
  7662   00452A  2E1C               	decfsz	(??_left90+1)^0,f,c
  7663   00452C  D7FA               	bra	u5747
  7664   00452E                     
  7665                           ;dc_motor.c: 208:     stop(mL,mR);
  7666   00452E  C019  F014         	movff	left90@mL,stop@mL
  7667   004532  C01A  F015         	movff	left90@mR,stop@mR
  7668   004536  EC16  F01D         	call	_stop	;wreg free
  7669   00453A  0012               	return		;funcret
  7670   00453C                     __end_of_left90:
  7671                           	callstack 0
  7672                           
  7673 ;; *************** function _moveBlue *****************
  7674 ;; Defined at:
  7675 ;;		line 276 in file "dc_motor.c"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;  mL              1   28[COMRAM] PTR struct DC_motor
  7678 ;;		 -> motorL(9), 
  7679 ;;  mR              1   29[COMRAM] PTR struct DC_motor
  7680 ;;		 -> motorR(9), 
  7681 ;;  path_length     2   30[COMRAM] unsigned int 
  7682 ;;  path            2   32[COMRAM] PTR struct PathStep
  7683 ;;		 -> path(200), 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;		None
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      void 
  7688 ;; Registers used:
  7689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7695 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7698 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7699 ;;Total ram usage:        8 bytes
  7700 ;; Hardware stack levels used: 1
  7701 ;; Hardware stack levels required when called: 5
  7702 ;; This function calls:
  7703 ;;		_backHalf
  7704 ;;		_logAction
  7705 ;;		_turn180
  7706 ;; This function is called by:
  7707 ;;		_decision
  7708 ;; This function uses a non-reentrant model
  7709 ;;
  7710                           
  7711                           	psect	text34
  7712   003CB4                     __ptext34:
  7713                           	callstack 0
  7714   003CB4                     _moveBlue:
  7715                           	callstack 24
  7716   003CB4                     
  7717                           ;dc_motor.c: 276: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int p
      +                          ath_length,struct PathStep *path);dc_motor.c: 277: {;dc_motor.c: 279:     backHalf(mL,mR
      +                          );
  7718   003CB4  C01D  F019         	movff	moveBlue@mL,backHalf@mL
  7719   003CB8  C01E  F01A         	movff	moveBlue@mR,backHalf@mR
  7720   003CBC  EC9E  F022         	call	_backHalf	;wreg free
  7721   003CC0                     
  7722                           ;dc_motor.c: 280:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7723   003CC0  0E29               	movlw	41
  7724   003CC2  6E24               	movwf	(??_moveBlue+1)^0,c
  7725   003CC4  0E96               	movlw	150
  7726   003CC6  6E23               	movwf	??_moveBlue^0,c
  7727   003CC8  0E7F               	movlw	127
  7728   003CCA                     u5757:
  7729   003CCA  2EE8               	decfsz	wreg,f,c
  7730   003CCC  D7FE               	bra	u5757
  7731   003CCE  2E23               	decfsz	??_moveBlue^0,f,c
  7732   003CD0  D7FC               	bra	u5757
  7733   003CD2  2E24               	decfsz	(??_moveBlue+1)^0,f,c
  7734   003CD4  D7FA               	bra	u5757
  7735   003CD6  0000               	nop	
  7736   003CD8                     
  7737                           ;dc_motor.c: 281:     turn180(mL,mR);
  7738   003CD8  C01D  F019         	movff	moveBlue@mL,turn180@mL
  7739   003CDC  C01E  F01A         	movff	moveBlue@mR,turn180@mR
  7740   003CE0  EC3C  F022         	call	_turn180	;wreg free
  7741   003CE4                     
  7742                           ;dc_motor.c: 282:     path_length = logAction(4,0, path_length, path);
  7743   003CE4  0E00               	movlw	0
  7744   003CE6  6E03               	movwf	(logAction@action+1)^0,c
  7745   003CE8  0E04               	movlw	4
  7746   003CEA  6E02               	movwf	logAction@action^0,c
  7747   003CEC  0E00               	movlw	0
  7748   003CEE  6E05               	movwf	(logAction@time+1)^0,c
  7749   003CF0  0E00               	movlw	0
  7750   003CF2  6E04               	movwf	logAction@time^0,c
  7751   003CF4  C01F  F006         	movff	moveBlue@path_length,logAction@path_length
  7752   003CF8  C020  F007         	movff	moveBlue@path_length+1,logAction@path_length+1
  7753   003CFC  C021  F008         	movff	moveBlue@path,logAction@path
  7754   003D00  C022  F009         	movff	moveBlue@path+1,logAction@path+1
  7755   003D04  EC5D  F01D         	call	_logAction	;wreg free
  7756   003D08  C002  F01F         	movff	?_logAction,moveBlue@path_length
  7757   003D0C  C003  F020         	movff	?_logAction+1,moveBlue@path_length+1
  7758   003D10                     
  7759                           ;dc_motor.c: 283:     LATHbits.LATH3 = 1;
  7760   003D10  8680               	bsf	128,3,c	;volatile
  7761   003D12                     
  7762                           ;dc_motor.c: 284:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  7763   003D12  0E52               	movlw	82
  7764   003D14  6E24               	movwf	(??_moveBlue+1)^0,c
  7765   003D16  0E2B               	movlw	43
  7766   003D18  6E23               	movwf	??_moveBlue^0,c
  7767   003D1A  0E00               	movlw	0
  7768   003D1C                     u5767:
  7769   003D1C  2EE8               	decfsz	wreg,f,c
  7770   003D1E  D7FE               	bra	u5767
  7771   003D20  2E23               	decfsz	??_moveBlue^0,f,c
  7772   003D22  D7FC               	bra	u5767
  7773   003D24  2E24               	decfsz	(??_moveBlue+1)^0,f,c
  7774   003D26  D7FA               	bra	u5767
  7775   003D28  D000               	nop2	
  7776   003D2A                     
  7777                           ;dc_motor.c: 285:     LATHbits.LATH3 = 0;
  7778   003D2A  9680               	bcf	128,3,c	;volatile
  7779   003D2C  0012               	return		;funcret
  7780   003D2E                     __end_of_moveBlue:
  7781                           	callstack 0
  7782                           
  7783 ;; *************** function _turn180 *****************
  7784 ;; Defined at:
  7785 ;;		line 212 in file "dc_motor.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7788 ;;		 -> motorL(9), 
  7789 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7790 ;;		 -> motorR(9), 
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;		None
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  1    wreg      void 
  7795 ;; Registers used:
  7796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7802 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7804 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7805 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7806 ;;Total ram usage:        4 bytes
  7807 ;; Hardware stack levels used: 1
  7808 ;; Hardware stack levels required when called: 4
  7809 ;; This function calls:
  7810 ;;		_stop
  7811 ;;		_turnLeft
  7812 ;; This function is called by:
  7813 ;;		_moveBlue
  7814 ;;		_moveWhite
  7815 ;;		_reverseTurn
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           	psect	text35
  7820   004478                     __ptext35:
  7821                           	callstack 0
  7822   004478                     _turn180:
  7823                           	callstack 24
  7824   004478                     
  7825                           ;dc_motor.c: 212: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 213
      +                          : {;dc_motor.c: 214:     turnLeft(mL,mR);
  7826   004478  C019  F014         	movff	turn180@mL,turnLeft@mL
  7827   00447C  C01A  F015         	movff	turn180@mR,turnLeft@mR
  7828   004480  ECDE  F01D         	call	_turnLeft	;wreg free
  7829   004484                     
  7830                           ;dc_motor.c: 215:     _delay((unsigned long)((580)*(64000000/4000.0)));
  7831   004484  0E30               	movlw	48
  7832   004486  6E1C               	movwf	(??_turn180+1)^0,c
  7833   004488  0E14               	movlw	20
  7834   00448A  6E1B               	movwf	??_turn180^0,c
  7835   00448C  0ED1               	movlw	209
  7836   00448E                     u5777:
  7837   00448E  2EE8               	decfsz	wreg,f,c
  7838   004490  D7FE               	bra	u5777
  7839   004492  2E1B               	decfsz	??_turn180^0,f,c
  7840   004494  D7FC               	bra	u5777
  7841   004496  2E1C               	decfsz	(??_turn180+1)^0,f,c
  7842   004498  D7FA               	bra	u5777
  7843   00449A  0000               	nop	
  7844   00449C                     
  7845                           ;dc_motor.c: 216:     stop(mL,mR);
  7846   00449C  C019  F014         	movff	turn180@mL,stop@mL
  7847   0044A0  C01A  F015         	movff	turn180@mR,stop@mR
  7848   0044A4  EC16  F01D         	call	_stop	;wreg free
  7849   0044A8  0012               	return		;funcret
  7850   0044AA                     __end_of_turn180:
  7851                           	callstack 0
  7852                           
  7853 ;; *************** function _turnLeft *****************
  7854 ;; Defined at:
  7855 ;;		line 108 in file "dc_motor.c"
  7856 ;; Parameters:    Size  Location     Type
  7857 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7858 ;;		 -> motorL(9), 
  7859 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7860 ;;		 -> motorR(9), 
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;  i               2   22[COMRAM] unsigned int 
  7863 ;; Return value:  Size  Location     Type
  7864 ;;                  1    wreg      void 
  7865 ;; Registers used:
  7866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7867 ;; Tracked objects:
  7868 ;;		On entry : 0/0
  7869 ;;		On exit  : 0/0
  7870 ;;		Unchanged: 0/0
  7871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7872 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7874 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7875 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7876 ;;Total ram usage:        5 bytes
  7877 ;; Hardware stack levels used: 1
  7878 ;; Hardware stack levels required when called: 3
  7879 ;; This function calls:
  7880 ;;		_setMotorPWM
  7881 ;; This function is called by:
  7882 ;;		_left90
  7883 ;;		_turn180
  7884 ;;		_left135
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text36
  7889   003BBC                     __ptext36:
  7890                           	callstack 0
  7891   003BBC                     _turnLeft:
  7892                           	callstack 24
  7893   003BBC                     
  7894                           ;dc_motor.c: 108: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 109: {;dc_motor.
      +                          c: 111:     mL->direction = 0;
  7895   003BBC  5014               	movf	turnLeft@mL^0,w,c
  7896   003BBE  6ED9               	movwf	fsr2l,c
  7897   003BC0  6ADA               	clrf	fsr2h,c
  7898   003BC2  0E01               	movlw	1
  7899   003BC4  26D9               	addwf	fsr2l,f,c
  7900   003BC6  6ADF               	clrf	indf2,c
  7901                           
  7902                           ;dc_motor.c: 112:     mR->direction = 1;
  7903   003BC8  5015               	movf	turnLeft@mR^0,w,c
  7904   003BCA  6ED9               	movwf	fsr2l,c
  7905   003BCC  6ADA               	clrf	fsr2h,c
  7906   003BCE  0E01               	movlw	1
  7907   003BD0  26D9               	addwf	fsr2l,f,c
  7908   003BD2  0E01               	movlw	1
  7909   003BD4  6EDF               	movwf	indf2,c
  7910   003BD6                     
  7911                           ;dc_motor.c: 114:     setMotorPWM(mL);
  7912   003BD6  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7913   003BDA  EC52  F017         	call	_setMotorPWM	;wreg free
  7914   003BDE                     
  7915                           ;dc_motor.c: 115:     setMotorPWM(mR);
  7916   003BDE  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7917   003BE2  EC52  F017         	call	_setMotorPWM	;wreg free
  7918   003BE6                     
  7919                           ;dc_motor.c: 116:     for (unsigned int i = 0; i <50; i++)
  7920   003BE6  0E00               	movlw	0
  7921   003BE8  6E18               	movwf	(turnLeft@i+1)^0,c
  7922   003BEA  0E00               	movlw	0
  7923   003BEC  6E17               	movwf	turnLeft@i^0,c
  7924   003BEE                     l5514:
  7925                           
  7926                           ;dc_motor.c: 117:     {;dc_motor.c: 118:         mL->power++;
  7927   003BEE  5014               	movf	turnLeft@mL^0,w,c
  7928   003BF0  6ED9               	movwf	fsr2l,c
  7929   003BF2  6ADA               	clrf	fsr2h,c
  7930   003BF4  2ADF               	incf	indf2,f,c
  7931                           
  7932                           ;dc_motor.c: 119:         mR->power++;
  7933   003BF6  5015               	movf	turnLeft@mR^0,w,c
  7934   003BF8  6ED9               	movwf	fsr2l,c
  7935   003BFA  6ADA               	clrf	fsr2h,c
  7936   003BFC  2ADF               	incf	indf2,f,c
  7937   003BFE                     
  7938                           ;dc_motor.c: 120:         setMotorPWM(mL);
  7939   003BFE  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  7940   003C02  EC52  F017         	call	_setMotorPWM	;wreg free
  7941   003C06                     
  7942                           ;dc_motor.c: 121:         setMotorPWM(mR);
  7943   003C06  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  7944   003C0A  EC52  F017         	call	_setMotorPWM	;wreg free
  7945   003C0E                     
  7946                           ;dc_motor.c: 122:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7947   003C0E  0E0B               	movlw	11
  7948   003C10  6E16               	movwf	??_turnLeft^0,c
  7949   003C12  0E62               	movlw	98
  7950   003C14                     u5787:
  7951   003C14  2EE8               	decfsz	wreg,f,c
  7952   003C16  D7FE               	bra	u5787
  7953   003C18  2E16               	decfsz	??_turnLeft^0,f,c
  7954   003C1A  D7FC               	bra	u5787
  7955   003C1C  D000               	nop2	
  7956   003C1E                     
  7957                           ;dc_motor.c: 123:     }
  7958   003C1E  4A17               	infsnz	turnLeft@i^0,f,c
  7959   003C20  2A18               	incf	(turnLeft@i+1)^0,f,c
  7960   003C22  5018               	movf	(turnLeft@i+1)^0,w,c
  7961   003C24  E109               	bnz	u5010
  7962   003C26  0E32               	movlw	50
  7963   003C28  5C17               	subwf	turnLeft@i^0,w,c
  7964   003C2A  A0D8               	btfss	status,0,c
  7965   003C2C  EF1A  F01E         	goto	u5011
  7966   003C30  EF1C  F01E         	goto	u5010
  7967   003C34                     u5011:
  7968   003C34  EFF7  F01D         	goto	l5514
  7969   003C38                     u5010:
  7970   003C38  0012               	return		;funcret
  7971   003C3A                     __end_of_turnLeft:
  7972                           	callstack 0
  7973                           
  7974 ;; *************** function _logAction *****************
  7975 ;; Defined at:
  7976 ;;		line 342 in file "dc_motor.c"
  7977 ;; Parameters:    Size  Location     Type
  7978 ;;  action          2    1[COMRAM] unsigned int 
  7979 ;;  time            2    3[COMRAM] int 
  7980 ;;  path_length     2    5[COMRAM] unsigned int 
  7981 ;;  path            2    7[COMRAM] PTR struct PathStep
  7982 ;;		 -> path(200), 
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;		None
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  2    1[COMRAM] unsigned int 
  7987 ;; Registers used:
  7988 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7994 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7996 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7997 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7998 ;;Total ram usage:       12 bytes
  7999 ;; Hardware stack levels used: 1
  8000 ;; Hardware stack levels required when called: 1
  8001 ;; This function calls:
  8002 ;;		Nothing
  8003 ;; This function is called by:
  8004 ;;		_main
  8005 ;;		_moveRed
  8006 ;;		_moveGreen
  8007 ;;		_moveBlue
  8008 ;;		_moveYellow
  8009 ;;		_movePink
  8010 ;;		_moveOrange
  8011 ;;		_moveLightBlue
  8012 ;; This function uses a non-reentrant model
  8013 ;;
  8014                           
  8015                           	psect	text37
  8016   003ABA                     __ptext37:
  8017                           	callstack 0
  8018   003ABA                     _logAction:
  8019                           	callstack 29
  8020   003ABA                     
  8021                           ;dc_motor.c: 343:     if (path_length < 50) {
  8022   003ABA  5007               	movf	(logAction@path_length+1)^0,w,c
  8023   003ABC  E107               	bnz	u3271
  8024   003ABE  0E32               	movlw	50
  8025   003AC0  5C06               	subwf	logAction@path_length^0,w,c
  8026   003AC2  B0D8               	btfsc	status,0,c
  8027   003AC4  EF66  F01D         	goto	u3271
  8028   003AC8  EF68  F01D         	goto	u3270
  8029   003ACC                     u3271:
  8030   003ACC  EF9A  F01D         	goto	l489
  8031   003AD0                     u3270:
  8032   003AD0                     
  8033                           ;dc_motor.c: 344:         path[path_length].action = action;
  8034   003AD0  90D8               	bcf	status,0,c
  8035   003AD2  3406               	rlcf	logAction@path_length^0,w,c
  8036   003AD4  6ED9               	movwf	fsr2l,c
  8037   003AD6  3407               	rlcf	(logAction@path_length+1)^0,w,c
  8038   003AD8  6EDA               	movwf	fsr2h,c
  8039   003ADA  90D8               	bcf	status,0,c
  8040   003ADC  36D9               	rlcf	fsr2l,f,c
  8041   003ADE  36DA               	rlcf	fsr2h,f,c
  8042   003AE0  5008               	movf	logAction@path^0,w,c
  8043   003AE2  26D9               	addwf	fsr2l,f,c
  8044   003AE4  5009               	movf	(logAction@path+1)^0,w,c
  8045   003AE6  22DA               	addwfc	fsr2h,f,c
  8046   003AE8  C002  FFDE         	movff	logAction@action,postinc2
  8047   003AEC  C003  FFDD         	movff	logAction@action+1,postdec2
  8048                           
  8049                           ;dc_motor.c: 345:         path[path_length].time = time;
  8050   003AF0  C006  F00A         	movff	logAction@path_length,??_logAction
  8051   003AF4  C007  F00B         	movff	logAction@path_length+1,??_logAction+1
  8052   003AF8  90D8               	bcf	status,0,c
  8053   003AFA  360A               	rlcf	??_logAction^0,f,c
  8054   003AFC  360B               	rlcf	(??_logAction+1)^0,f,c
  8055   003AFE  90D8               	bcf	status,0,c
  8056   003B00  360A               	rlcf	??_logAction^0,f,c
  8057   003B02  360B               	rlcf	(??_logAction+1)^0,f,c
  8058   003B04  500A               	movf	??_logAction^0,w,c
  8059   003B06  2408               	addwf	logAction@path^0,w,c
  8060   003B08  6E0C               	movwf	(??_logAction+2)^0,c
  8061   003B0A  500B               	movf	(??_logAction+1)^0,w,c
  8062   003B0C  2009               	addwfc	(logAction@path+1)^0,w,c
  8063   003B0E  6E0D               	movwf	(??_logAction+3)^0,c
  8064   003B10  0E02               	movlw	2
  8065   003B12  240C               	addwf	(??_logAction+2)^0,w,c
  8066   003B14  6ED9               	movwf	fsr2l,c
  8067   003B16  0E00               	movlw	0
  8068   003B18  200D               	addwfc	(??_logAction+3)^0,w,c
  8069   003B1A  6EDA               	movwf	fsr2h,c
  8070   003B1C  C004  FFDE         	movff	logAction@time,postinc2
  8071   003B20  C005  FFDD         	movff	logAction@time+1,postdec2
  8072   003B24                     
  8073                           ;dc_motor.c: 346:         return path_length + 1;
  8074   003B24  0E01               	movlw	1
  8075   003B26  2406               	addwf	logAction@path_length^0,w,c
  8076   003B28  6E02               	movwf	?_logAction^0,c
  8077   003B2A  0E00               	movlw	0
  8078   003B2C  2007               	addwfc	(logAction@path_length+1)^0,w,c
  8079   003B2E  6E03               	movwf	(?_logAction+1)^0,c
  8080   003B30  EF9E  F01D         	goto	l490
  8081   003B34                     l489:
  8082                           
  8083                           ;dc_motor.c: 348:     return path_length;
  8084   003B34  C006  F002         	movff	logAction@path_length,?_logAction
  8085   003B38  C007  F003         	movff	logAction@path_length+1,?_logAction+1
  8086   003B3C                     l490:
  8087   003B3C  0012               	return		;funcret
  8088   003B3E                     __end_of_logAction:
  8089                           	callstack 0
  8090                           
  8091 ;; *************** function _backHalf *****************
  8092 ;; Defined at:
  8093 ;;		line 236 in file "dc_motor.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8096 ;;		 -> motorL(9), 
  8097 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8098 ;;		 -> motorR(9), 
  8099 ;; Auto vars:     Size  Location     Type
  8100 ;;		None
  8101 ;; Return value:  Size  Location     Type
  8102 ;;                  1    wreg      void 
  8103 ;; Registers used:
  8104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8105 ;; Tracked objects:
  8106 ;;		On entry : 0/0
  8107 ;;		On exit  : 0/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8110 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8112 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8113 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8114 ;;Total ram usage:        4 bytes
  8115 ;; Hardware stack levels used: 1
  8116 ;; Hardware stack levels required when called: 4
  8117 ;; This function calls:
  8118 ;;		_fullSpeedBack
  8119 ;;		_stop
  8120 ;; This function is called by:
  8121 ;;		_moveRed
  8122 ;;		_moveGreen
  8123 ;;		_moveBlue
  8124 ;;		_moveOrange
  8125 ;;		_moveLightBlue
  8126 ;;		_moveWhite
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           	psect	text38
  8131   00453C                     __ptext38:
  8132                           	callstack 0
  8133   00453C                     _backHalf:
  8134                           	callstack 24
  8135   00453C                     
  8136                           ;dc_motor.c: 236: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          7: {;dc_motor.c: 238:     fullSpeedBack(mL,mR);
  8137   00453C  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  8138   004540  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  8139   004544  EC97  F01E         	call	_fullSpeedBack	;wreg free
  8140   004548                     
  8141                           ;dc_motor.c: 239:     _delay((unsigned long)((300)*(64000000/4000.0)));
  8142   004548  0E19               	movlw	25
  8143   00454A  6E1C               	movwf	(??_backHalf+1)^0,c
  8144   00454C  0E5A               	movlw	90
  8145   00454E  6E1B               	movwf	??_backHalf^0,c
  8146   004550  0EB2               	movlw	178
  8147   004552                     u5797:
  8148   004552  2EE8               	decfsz	wreg,f,c
  8149   004554  D7FE               	bra	u5797
  8150   004556  2E1B               	decfsz	??_backHalf^0,f,c
  8151   004558  D7FC               	bra	u5797
  8152   00455A  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  8153   00455C  D7FA               	bra	u5797
  8154   00455E                     
  8155                           ;dc_motor.c: 240:     stop(mL,mR);
  8156   00455E  C019  F014         	movff	backHalf@mL,stop@mL
  8157   004562  C01A  F015         	movff	backHalf@mR,stop@mR
  8158   004566  EC16  F01D         	call	_stop	;wreg free
  8159   00456A  0012               	return		;funcret
  8160   00456C                     __end_of_backHalf:
  8161                           	callstack 0
  8162                           
  8163 ;; *************** function _stop *****************
  8164 ;; Defined at:
  8165 ;;		line 88 in file "dc_motor.c"
  8166 ;; Parameters:    Size  Location     Type
  8167 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8168 ;;		 -> motorL(9), 
  8169 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8170 ;;		 -> motorR(9), 
  8171 ;; Auto vars:     Size  Location     Type
  8172 ;;		None
  8173 ;; Return value:  Size  Location     Type
  8174 ;;                  1    wreg      void 
  8175 ;; Registers used:
  8176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8177 ;; Tracked objects:
  8178 ;;		On entry : 0/0
  8179 ;;		On exit  : 0/0
  8180 ;;		Unchanged: 0/0
  8181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8182 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8185 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8186 ;;Total ram usage:        2 bytes
  8187 ;; Hardware stack levels used: 1
  8188 ;; Hardware stack levels required when called: 3
  8189 ;; This function calls:
  8190 ;;		_setMotorPWM
  8191 ;; This function is called by:
  8192 ;;		_main
  8193 ;;		_right90
  8194 ;;		_left90
  8195 ;;		_turn180
  8196 ;;		_right135
  8197 ;;		_left135
  8198 ;;		_backHalf
  8199 ;;		_backOneAndHalf
  8200 ;;		_reverseStraight
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           	psect	text39
  8205   003A2C                     __ptext39:
  8206                           	callstack 0
  8207   003A2C                     _stop:
  8208                           	callstack 27
  8209   003A2C                     
  8210                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 90:
      +                               LATDbits.LATD4 = 1;
  8211   003A2C  887C               	bsf	124,4,c	;volatile
  8212                           
  8213                           ;dc_motor.c: 93:     while(mL->power > 0 || mR->power > 0) {
  8214   003A2E  EF46  F01D         	goto	l5498
  8215   003A32                     l5484:
  8216                           
  8217                           ;dc_motor.c: 94:         if (mL->power > 0) mL->power--;
  8218   003A32  5014               	movf	stop@mL^0,w,c
  8219   003A34  6ED9               	movwf	fsr2l,c
  8220   003A36  6ADA               	clrf	fsr2h,c
  8221   003A38  50DF               	movf	indf2,w,c
  8222   003A3A  B4D8               	btfsc	status,2,c
  8223   003A3C  EF22  F01D         	goto	u4971
  8224   003A40  EF24  F01D         	goto	u4970
  8225   003A44                     u4971:
  8226   003A44  EF28  F01D         	goto	l5488
  8227   003A48                     u4970:
  8228   003A48  5014               	movf	stop@mL^0,w,c
  8229   003A4A  6ED9               	movwf	fsr2l,c
  8230   003A4C  6ADA               	clrf	fsr2h,c
  8231   003A4E  06DF               	decf	indf2,f,c
  8232   003A50                     l5488:
  8233                           
  8234                           ;dc_motor.c: 95:         if (mR->power > 0) mR->power--;
  8235   003A50  5015               	movf	stop@mR^0,w,c
  8236   003A52  6ED9               	movwf	fsr2l,c
  8237   003A54  6ADA               	clrf	fsr2h,c
  8238   003A56  50DF               	movf	indf2,w,c
  8239   003A58  B4D8               	btfsc	status,2,c
  8240   003A5A  EF31  F01D         	goto	u4981
  8241   003A5E  EF33  F01D         	goto	u4980
  8242   003A62                     u4981:
  8243   003A62  EF37  F01D         	goto	l5492
  8244   003A66                     u4980:
  8245   003A66  5015               	movf	stop@mR^0,w,c
  8246   003A68  6ED9               	movwf	fsr2l,c
  8247   003A6A  6ADA               	clrf	fsr2h,c
  8248   003A6C  06DF               	decf	indf2,f,c
  8249   003A6E                     l5492:
  8250                           
  8251                           ;dc_motor.c: 98:         setMotorPWM(mL);
  8252   003A6E  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8253   003A72  EC52  F017         	call	_setMotorPWM	;wreg free
  8254   003A76                     
  8255                           ;dc_motor.c: 99:         setMotorPWM(mR);
  8256   003A76  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8257   003A7A  EC52  F017         	call	_setMotorPWM	;wreg free
  8258   003A7E                     
  8259                           ;dc_motor.c: 102:         _delay((unsigned long)((100)*(64000000/4000000.0)));
  8260   003A7E  0EE4               	movlw	228
  8261   003A80                     u5807:
  8262   003A80  D000               	nop2	
  8263   003A82  D000               	nop2	
  8264   003A84  2EE8               	decfsz	wreg,f,c
  8265   003A86  D7FC               	bra	u5807
  8266   003A88  D000               	nop2	
  8267   003A8A  D000               	nop2	
  8268   003A8C                     l5498:
  8269                           
  8270                           ;dc_motor.c: 93:     while(mL->power > 0 || mR->power > 0) {
  8271   003A8C  5014               	movf	stop@mL^0,w,c
  8272   003A8E  6ED9               	movwf	fsr2l,c
  8273   003A90  6ADA               	clrf	fsr2h,c
  8274   003A92  50DF               	movf	indf2,w,c
  8275   003A94  A4D8               	btfss	status,2,c
  8276   003A96  EF4F  F01D         	goto	u4991
  8277   003A9A  EF51  F01D         	goto	u4990
  8278   003A9E                     u4991:
  8279   003A9E  EF19  F01D         	goto	l5484
  8280   003AA2                     u4990:
  8281   003AA2  5015               	movf	stop@mR^0,w,c
  8282   003AA4  6ED9               	movwf	fsr2l,c
  8283   003AA6  6ADA               	clrf	fsr2h,c
  8284   003AA8  50DF               	movf	indf2,w,c
  8285   003AAA  A4D8               	btfss	status,2,c
  8286   003AAC  EF5A  F01D         	goto	u5001
  8287   003AB0  EF5C  F01D         	goto	u5000
  8288   003AB4                     u5001:
  8289   003AB4  EF19  F01D         	goto	l5484
  8290   003AB8                     u5000:
  8291   003AB8  0012               	return		;funcret
  8292   003ABA                     __end_of_stop:
  8293                           	callstack 0
  8294                           
  8295 ;; *************** function _fullSpeedBack *****************
  8296 ;; Defined at:
  8297 ;;		line 168 in file "dc_motor.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8300 ;;		 -> motorL(9), 
  8301 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8302 ;;		 -> motorR(9), 
  8303 ;; Auto vars:     Size  Location     Type
  8304 ;;  power           2   22[COMRAM] int 
  8305 ;; Return value:  Size  Location     Type
  8306 ;;                  1    wreg      void 
  8307 ;; Registers used:
  8308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8309 ;; Tracked objects:
  8310 ;;		On entry : 0/0
  8311 ;;		On exit  : 0/0
  8312 ;;		Unchanged: 0/0
  8313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8314 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8315 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8316 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8317 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8318 ;;Total ram usage:        5 bytes
  8319 ;; Hardware stack levels used: 1
  8320 ;; Hardware stack levels required when called: 3
  8321 ;; This function calls:
  8322 ;;		_setMotorPWM
  8323 ;; This function is called by:
  8324 ;;		_backHalf
  8325 ;;		_backOneAndHalf
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329                           	psect	text40
  8330   003D2E                     __ptext40:
  8331                           	callstack 0
  8332   003D2E                     _fullSpeedBack:
  8333                           	callstack 24
  8334   003D2E                     
  8335                           ;dc_motor.c: 168: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 169: {;dc_m
      +                          otor.c: 171:     mL->direction = 0;
  8336   003D2E  5014               	movf	fullSpeedBack@mL^0,w,c
  8337   003D30  6ED9               	movwf	fsr2l,c
  8338   003D32  6ADA               	clrf	fsr2h,c
  8339   003D34  0E01               	movlw	1
  8340   003D36  26D9               	addwf	fsr2l,f,c
  8341   003D38  6ADF               	clrf	indf2,c
  8342                           
  8343                           ;dc_motor.c: 172:     mR->direction = 0;
  8344   003D3A  5015               	movf	fullSpeedBack@mR^0,w,c
  8345   003D3C  6ED9               	movwf	fsr2l,c
  8346   003D3E  6ADA               	clrf	fsr2h,c
  8347   003D40  0E01               	movlw	1
  8348   003D42  26D9               	addwf	fsr2l,f,c
  8349   003D44  6ADF               	clrf	indf2,c
  8350   003D46                     
  8351                           ;dc_motor.c: 174:     for(int power = 0; power <= 50; power++) {
  8352   003D46  0E00               	movlw	0
  8353   003D48  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8354   003D4A  0E00               	movlw	0
  8355   003D4C  6E17               	movwf	fullSpeedBack@power^0,c
  8356   003D4E                     l5558:
  8357                           
  8358                           ;dc_motor.c: 175:         mL->power = power;
  8359   003D4E  5014               	movf	fullSpeedBack@mL^0,w,c
  8360   003D50  6ED9               	movwf	fsr2l,c
  8361   003D52  6ADA               	clrf	fsr2h,c
  8362   003D54  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8363                           
  8364                           ;dc_motor.c: 176:         mR->power = power;
  8365   003D58  5015               	movf	fullSpeedBack@mR^0,w,c
  8366   003D5A  6ED9               	movwf	fsr2l,c
  8367   003D5C  6ADA               	clrf	fsr2h,c
  8368   003D5E  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8369   003D62                     
  8370                           ;dc_motor.c: 179:         setMotorPWM(mL);
  8371   003D62  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8372   003D66  EC52  F017         	call	_setMotorPWM	;wreg free
  8373   003D6A                     
  8374                           ;dc_motor.c: 180:         setMotorPWM(mR);
  8375   003D6A  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8376   003D6E  EC52  F017         	call	_setMotorPWM	;wreg free
  8377   003D72                     
  8378                           ;dc_motor.c: 183:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8379   003D72  0E0B               	movlw	11
  8380   003D74  6E16               	movwf	??_fullSpeedBack^0,c
  8381   003D76  0E62               	movlw	98
  8382   003D78                     u5817:
  8383   003D78  2EE8               	decfsz	wreg,f,c
  8384   003D7A  D7FE               	bra	u5817
  8385   003D7C  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8386   003D7E  D7FC               	bra	u5817
  8387   003D80  D000               	nop2	
  8388   003D82                     
  8389                           ;dc_motor.c: 184:     }
  8390   003D82  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8391   003D84  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8392   003D86  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8393   003D88  EFCF  F01E         	goto	u5031
  8394   003D8C  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8395   003D8E  E109               	bnz	u5030
  8396   003D90  0E33               	movlw	51
  8397   003D92  5C17               	subwf	fullSpeedBack@power^0,w,c
  8398   003D94  A0D8               	btfss	status,0,c
  8399   003D96  EFCF  F01E         	goto	u5031
  8400   003D9A  EFD1  F01E         	goto	u5030
  8401   003D9E                     u5031:
  8402   003D9E  EFA7  F01E         	goto	l5558
  8403   003DA2                     u5030:
  8404   003DA2  0012               	return		;funcret
  8405   003DA4                     __end_of_fullSpeedBack:
  8406                           	callstack 0
  8407                           
  8408 ;; *************** function _setMotorPWM *****************
  8409 ;; Defined at:
  8410 ;;		line 65 in file "dc_motor.c"
  8411 ;; Parameters:    Size  Location     Type
  8412 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8413 ;;		 -> motorR(9), motorL(9), 
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;  negDuty         1   18[COMRAM] unsigned char 
  8416 ;;  posDuty         1   17[COMRAM] unsigned char 
  8417 ;; Return value:  Size  Location     Type
  8418 ;;                  1    wreg      void 
  8419 ;; Registers used:
  8420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8421 ;; Tracked objects:
  8422 ;;		On entry : 0/0
  8423 ;;		On exit  : 0/0
  8424 ;;		Unchanged: 0/0
  8425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8426 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8427 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8428 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8429 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8430 ;;Total ram usage:        5 bytes
  8431 ;; Hardware stack levels used: 1
  8432 ;; Hardware stack levels required when called: 2
  8433 ;; This function calls:
  8434 ;;		___lwdiv
  8435 ;;		___wmul
  8436 ;; This function is called by:
  8437 ;;		_stop
  8438 ;;		_turnLeft
  8439 ;;		_turnRight
  8440 ;;		_fullSpeedAhead
  8441 ;;		_fullSpeedBack
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445                           	psect	text41
  8446   002EA4                     __ptext41:
  8447                           	callstack 0
  8448   002EA4                     _setMotorPWM:
  8449                           	callstack 27
  8450   002EA4                     
  8451                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8452   002EA4  500F               	movf	setMotorPWM@m^0,w,c
  8453   002EA6  6ED9               	movwf	fsr2l,c
  8454   002EA8  6ADA               	clrf	fsr2h,c
  8455   002EAA  0E02               	movlw	2
  8456   002EAC  26D9               	addwf	fsr2l,f,c
  8457   002EAE  50DF               	movf	indf2,w,c
  8458   002EB0  B4D8               	btfsc	status,2,c
  8459   002EB2  EF5D  F017         	goto	u4881
  8460   002EB6  EF5F  F017         	goto	u4880
  8461   002EBA                     u4881:
  8462   002EBA  EF8F  F017         	goto	l5412
  8463   002EBE                     u4880:
  8464   002EBE                     
  8465                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8466   002EBE  500F               	movf	setMotorPWM@m^0,w,c
  8467   002EC0  6ED9               	movwf	fsr2l,c
  8468   002EC2  6ADA               	clrf	fsr2h,c
  8469   002EC4  50DF               	movf	indf2,w,c
  8470   002EC6  6E10               	movwf	??_setMotorPWM^0,c
  8471   002EC8  5010               	movf	??_setMotorPWM^0,w,c
  8472   002ECA  6E02               	movwf	___wmul@multiplier^0,c
  8473   002ECC  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8474   002ECE  500F               	movf	setMotorPWM@m^0,w,c
  8475   002ED0  6ED9               	movwf	fsr2l,c
  8476   002ED2  6ADA               	clrf	fsr2h,c
  8477   002ED4  0E03               	movlw	3
  8478   002ED6  26D9               	addwf	fsr2l,f,c
  8479   002ED8  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8480   002EDC  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8481   002EE0  ECF3  F022         	call	___wmul	;wreg free
  8482   002EE4  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8483   002EE8  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8484   002EEC  0E00               	movlw	0
  8485   002EEE  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8486   002EF0  0E64               	movlw	100
  8487   002EF2  6E0A               	movwf	___lwdiv@divisor^0,c
  8488   002EF4  ECD2  F01E         	call	___lwdiv	;wreg free
  8489   002EF8  500F               	movf	setMotorPWM@m^0,w,c
  8490   002EFA  6ED9               	movwf	fsr2l,c
  8491   002EFC  6ADA               	clrf	fsr2h,c
  8492   002EFE  0E03               	movlw	3
  8493   002F00  26D9               	addwf	fsr2l,f,c
  8494   002F02  50DF               	movf	indf2,w,c
  8495   002F04  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8496   002F06  5008               	movf	?___lwdiv^0,w,c
  8497   002F08  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8498   002F0A  6E12               	movwf	setMotorPWM@posDuty^0,c
  8499   002F0C                     
  8500                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8501   002F0C  500F               	movf	setMotorPWM@m^0,w,c
  8502   002F0E  6ED9               	movwf	fsr2l,c
  8503   002F10  6ADA               	clrf	fsr2h,c
  8504   002F12  0E03               	movlw	3
  8505   002F14  26D9               	addwf	fsr2l,f,c
  8506   002F16  50DF               	movf	indf2,w,c
  8507   002F18  6E13               	movwf	setMotorPWM@negDuty^0,c
  8508                           
  8509                           ;dc_motor.c: 72:     }
  8510   002F1A  EFB0  F017         	goto	l5416
  8511   002F1E                     l5412:
  8512                           
  8513                           ;dc_motor.c: 74:         posDuty=0;
  8514   002F1E  0E00               	movlw	0
  8515   002F20  6E12               	movwf	setMotorPWM@posDuty^0,c
  8516   002F22                     
  8517                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8518   002F22  500F               	movf	setMotorPWM@m^0,w,c
  8519   002F24  6ED9               	movwf	fsr2l,c
  8520   002F26  6ADA               	clrf	fsr2h,c
  8521   002F28  50DF               	movf	indf2,w,c
  8522   002F2A  6E10               	movwf	??_setMotorPWM^0,c
  8523   002F2C  5010               	movf	??_setMotorPWM^0,w,c
  8524   002F2E  6E02               	movwf	___wmul@multiplier^0,c
  8525   002F30  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8526   002F32  500F               	movf	setMotorPWM@m^0,w,c
  8527   002F34  6ED9               	movwf	fsr2l,c
  8528   002F36  6ADA               	clrf	fsr2h,c
  8529   002F38  0E03               	movlw	3
  8530   002F3A  26D9               	addwf	fsr2l,f,c
  8531   002F3C  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8532   002F40  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8533   002F44  ECF3  F022         	call	___wmul	;wreg free
  8534   002F48  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8535   002F4C  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8536   002F50  0E00               	movlw	0
  8537   002F52  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8538   002F54  0E64               	movlw	100
  8539   002F56  6E0A               	movwf	___lwdiv@divisor^0,c
  8540   002F58  ECD2  F01E         	call	___lwdiv	;wreg free
  8541   002F5C  5008               	movf	?___lwdiv^0,w,c
  8542   002F5E  6E13               	movwf	setMotorPWM@negDuty^0,c
  8543   002F60                     l5416:
  8544                           
  8545                           ;dc_motor.c: 78:     if (m->direction) {
  8546   002F60  500F               	movf	setMotorPWM@m^0,w,c
  8547   002F62  6ED9               	movwf	fsr2l,c
  8548   002F64  6ADA               	clrf	fsr2h,c
  8549   002F66  0E01               	movlw	1
  8550   002F68  26D9               	addwf	fsr2l,f,c
  8551   002F6A  50DF               	movf	indf2,w,c
  8552   002F6C  B4D8               	btfsc	status,2,c
  8553   002F6E  EFBB  F017         	goto	u4891
  8554   002F72  EFBD  F017         	goto	u4890
  8555   002F76                     u4891:
  8556   002F76  EFDD  F017         	goto	l5420
  8557   002F7A                     u4890:
  8558   002F7A                     
  8559                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8560   002F7A  500F               	movf	setMotorPWM@m^0,w,c
  8561   002F7C  6ED9               	movwf	fsr2l,c
  8562   002F7E  6ADA               	clrf	fsr2h,c
  8563   002F80  0E05               	movlw	5
  8564   002F82  26D9               	addwf	fsr2l,f,c
  8565   002F84  CFDE F010          	movff	postinc2,??_setMotorPWM
  8566   002F88  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8567   002F8C  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8568   002F90  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8569   002F94  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8570                           
  8571                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  8572   002F98  500F               	movf	setMotorPWM@m^0,w,c
  8573   002F9A  6ED9               	movwf	fsr2l,c
  8574   002F9C  6ADA               	clrf	fsr2h,c
  8575   002F9E  0E07               	movlw	7
  8576   002FA0  26D9               	addwf	fsr2l,f,c
  8577   002FA2  CFDE F010          	movff	postinc2,??_setMotorPWM
  8578   002FA6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8579   002FAA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8580   002FAE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8581   002FB2  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8582                           
  8583                           ;dc_motor.c: 81:     } else {
  8584   002FB6  EFFB  F017         	goto	l413
  8585   002FBA                     l5420:
  8586                           
  8587                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  8588   002FBA  500F               	movf	setMotorPWM@m^0,w,c
  8589   002FBC  6ED9               	movwf	fsr2l,c
  8590   002FBE  6ADA               	clrf	fsr2h,c
  8591   002FC0  0E05               	movlw	5
  8592   002FC2  26D9               	addwf	fsr2l,f,c
  8593   002FC4  CFDE F010          	movff	postinc2,??_setMotorPWM
  8594   002FC8  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8595   002FCC  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8596   002FD0  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8597   002FD4  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  8598                           
  8599                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  8600   002FD8  500F               	movf	setMotorPWM@m^0,w,c
  8601   002FDA  6ED9               	movwf	fsr2l,c
  8602   002FDC  6ADA               	clrf	fsr2h,c
  8603   002FDE  0E07               	movlw	7
  8604   002FE0  26D9               	addwf	fsr2l,f,c
  8605   002FE2  CFDE F010          	movff	postinc2,??_setMotorPWM
  8606   002FE6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  8607   002FEA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  8608   002FEE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8609   002FF2  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  8610   002FF6                     l413:
  8611   002FF6  0012               	return		;funcret
  8612   002FF8                     __end_of_setMotorPWM:
  8613                           	callstack 0
  8614                           
  8615 ;; *************** function ___lwdiv *****************
  8616 ;; Defined at:
  8617 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;  dividend        2    7[COMRAM] unsigned int 
  8620 ;;  divisor         2    9[COMRAM] unsigned int 
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;  quotient        2   11[COMRAM] unsigned int 
  8623 ;;  counter         1   13[COMRAM] unsigned char 
  8624 ;; Return value:  Size  Location     Type
  8625 ;;                  2    7[COMRAM] unsigned int 
  8626 ;; Registers used:
  8627 ;;		wreg, status,2, status,0
  8628 ;; Tracked objects:
  8629 ;;		On entry : 0/0
  8630 ;;		On exit  : 0/0
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8634 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8636 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8637 ;;Total ram usage:        7 bytes
  8638 ;; Hardware stack levels used: 1
  8639 ;; Hardware stack levels required when called: 1
  8640 ;; This function calls:
  8641 ;;		Nothing
  8642 ;; This function is called by:
  8643 ;;		_setMotorPWM
  8644 ;;		_ADC2String
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           	psect	text42
  8649   003DA4                     __ptext42:
  8650                           	callstack 0
  8651   003DA4                     ___lwdiv:
  8652                           	callstack 27
  8653   003DA4  0E00               	movlw	0
  8654   003DA6  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  8655   003DA8  0E00               	movlw	0
  8656   003DAA  6E0C               	movwf	___lwdiv@quotient^0,c
  8657   003DAC  500A               	movf	___lwdiv@divisor^0,w,c
  8658   003DAE  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8659   003DB0  B4D8               	btfsc	status,2,c
  8660   003DB2  EFDD  F01E         	goto	u2511
  8661   003DB6  EFDF  F01E         	goto	u2510
  8662   003DBA                     u2511:
  8663   003DBA  EF07  F01F         	goto	l1167
  8664   003DBE                     u2510:
  8665   003DBE  0E01               	movlw	1
  8666   003DC0  6E0E               	movwf	___lwdiv@counter^0,c
  8667   003DC2  EFE7  F01E         	goto	l3480
  8668   003DC6                     l3478:
  8669   003DC6  90D8               	bcf	status,0,c
  8670   003DC8  360A               	rlcf	___lwdiv@divisor^0,f,c
  8671   003DCA  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8672   003DCC  2A0E               	incf	___lwdiv@counter^0,f,c
  8673   003DCE                     l3480:
  8674   003DCE  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  8675   003DD0  EFEC  F01E         	goto	u2521
  8676   003DD4  EFEE  F01E         	goto	u2520
  8677   003DD8                     u2521:
  8678   003DD8  EFE3  F01E         	goto	l3478
  8679   003DDC                     u2520:
  8680   003DDC                     l3482:
  8681   003DDC  90D8               	bcf	status,0,c
  8682   003DDE  360C               	rlcf	___lwdiv@quotient^0,f,c
  8683   003DE0  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8684   003DE2  500A               	movf	___lwdiv@divisor^0,w,c
  8685   003DE4  5C08               	subwf	___lwdiv@dividend^0,w,c
  8686   003DE6  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8687   003DE8  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8688   003DEA  A0D8               	btfss	status,0,c
  8689   003DEC  EFFA  F01E         	goto	u2531
  8690   003DF0  EFFC  F01E         	goto	u2530
  8691   003DF4                     u2531:
  8692   003DF4  EF01  F01F         	goto	l3490
  8693   003DF8                     u2530:
  8694   003DF8  500A               	movf	___lwdiv@divisor^0,w,c
  8695   003DFA  5E08               	subwf	___lwdiv@dividend^0,f,c
  8696   003DFC  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  8697   003DFE  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8698   003E00  800C               	bsf	___lwdiv@quotient^0,0,c
  8699   003E02                     l3490:
  8700   003E02  90D8               	bcf	status,0,c
  8701   003E04  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8702   003E06  320A               	rrcf	___lwdiv@divisor^0,f,c
  8703   003E08  2E0E               	decfsz	___lwdiv@counter^0,f,c
  8704   003E0A  EFEE  F01E         	goto	l3482
  8705   003E0E                     l1167:
  8706   003E0E  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  8707   003E12  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8708   003E16  0012               	return		;funcret
  8709   003E18                     __end_of___lwdiv:
  8710                           	callstack 0
  8711                           
  8712 ;; *************** function _color_click_init *****************
  8713 ;; Defined at:
  8714 ;;		line 8 in file "color.c"
  8715 ;; Parameters:    Size  Location     Type
  8716 ;;		None
  8717 ;; Auto vars:     Size  Location     Type
  8718 ;;		None
  8719 ;; Return value:  Size  Location     Type
  8720 ;;                  1    wreg      void 
  8721 ;; Registers used:
  8722 ;;		wreg, status,2, status,0, cstack
  8723 ;; Tracked objects:
  8724 ;;		On entry : 0/0
  8725 ;;		On exit  : 0/0
  8726 ;;		Unchanged: 0/0
  8727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8730 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8731 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8732 ;;Total ram usage:        1 bytes
  8733 ;; Hardware stack levels used: 1
  8734 ;; Hardware stack levels required when called: 4
  8735 ;; This function calls:
  8736 ;;		_I2C_2_Master_Init
  8737 ;;		_color_writetoaddr
  8738 ;; This function is called by:
  8739 ;;		_main
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           	psect	text43
  8744   004314                     __ptext43:
  8745                           	callstack 0
  8746   004314                     _color_click_init:
  8747                           	callstack 26
  8748   004314                     
  8749                           ;color.c: 11:     I2C_2_Master_Init();
  8750   004314  ECB6  F022         	call	_I2C_2_Master_Init	;wreg free
  8751   004318                     
  8752                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  8753   004318  0E01               	movlw	1
  8754   00431A  6E04               	movwf	color_writetoaddr@value^0,c
  8755   00431C  0E00               	movlw	0
  8756   00431E  EC17  F023         	call	_color_writetoaddr
  8757   004322                     
  8758                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8759   004322  0E3F               	movlw	63
  8760   004324  6E06               	movwf	??_color_click_init^0,c
  8761   004326  0E55               	movlw	85
  8762   004328                     u5827:
  8763   004328  2EE8               	decfsz	wreg,f,c
  8764   00432A  D7FE               	bra	u5827
  8765   00432C  2E06               	decfsz	??_color_click_init^0,f,c
  8766   00432E  D7FC               	bra	u5827
  8767   004330  0000               	nop	
  8768   004332                     
  8769                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  8770   004332  0E03               	movlw	3
  8771   004334  6E04               	movwf	color_writetoaddr@value^0,c
  8772   004336  0E00               	movlw	0
  8773   004338  EC17  F023         	call	_color_writetoaddr
  8774   00433C                     
  8775                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  8776   00433C  0ED5               	movlw	213
  8777   00433E  6E04               	movwf	color_writetoaddr@value^0,c
  8778   004340  0E01               	movlw	1
  8779   004342  EC17  F023         	call	_color_writetoaddr
  8780   004346  0012               	return		;funcret
  8781   004348                     __end_of_color_click_init:
  8782                           	callstack 0
  8783                           
  8784 ;; *************** function _color_writetoaddr *****************
  8785 ;; Defined at:
  8786 ;;		line 24 in file "color.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;  address         1    wreg     unsigned char 
  8789 ;;  value           1    3[COMRAM] unsigned char 
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;  address         1    4[COMRAM] unsigned char 
  8792 ;; Return value:  Size  Location     Type
  8793 ;;                  1    wreg      void 
  8794 ;; Registers used:
  8795 ;;		wreg, status,2, status,0, cstack
  8796 ;; Tracked objects:
  8797 ;;		On entry : 0/0
  8798 ;;		On exit  : 0/0
  8799 ;;		Unchanged: 0/0
  8800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8801 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8804 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8805 ;;Total ram usage:        2 bytes
  8806 ;; Hardware stack levels used: 1
  8807 ;; Hardware stack levels required when called: 3
  8808 ;; This function calls:
  8809 ;;		_I2C_2_Master_Start
  8810 ;;		_I2C_2_Master_Stop
  8811 ;;		_I2C_2_Master_Write
  8812 ;; This function is called by:
  8813 ;;		_color_click_init
  8814 ;; This function uses a non-reentrant model
  8815 ;;
  8816                           
  8817                           	psect	text44
  8818   00462E                     __ptext44:
  8819                           	callstack 0
  8820   00462E                     _color_writetoaddr:
  8821                           	callstack 26
  8822                           
  8823                           ;incstack = 0
  8824                           ;color_writetoaddr@address stored from wreg
  8825   00462E  6E05               	movwf	color_writetoaddr@address^0,c
  8826   004630                     
  8827                           ;color.c: 25:     I2C_2_Master_Start();
  8828   004630  EC69  F023         	call	_I2C_2_Master_Start	;wreg free
  8829                           
  8830                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  8831   004634  0E52               	movlw	82
  8832   004636  EC5E  F023         	call	_I2C_2_Master_Write
  8833                           
  8834                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  8835   00463A  5005               	movf	color_writetoaddr@address^0,w,c
  8836   00463C  0980               	iorlw	128
  8837   00463E  EC5E  F023         	call	_I2C_2_Master_Write
  8838                           
  8839                           ;color.c: 28:     I2C_2_Master_Write(value);
  8840   004642  5004               	movf	color_writetoaddr@value^0,w,c
  8841   004644  EC5E  F023         	call	_I2C_2_Master_Write
  8842                           
  8843                           ;color.c: 29:     I2C_2_Master_Stop();
  8844   004648  EC64  F023         	call	_I2C_2_Master_Stop	;wreg free
  8845   00464C  0012               	return		;funcret
  8846   00464E                     __end_of_color_writetoaddr:
  8847                           	callstack 0
  8848                           
  8849 ;; *************** function _I2C_2_Master_Init *****************
  8850 ;; Defined at:
  8851 ;;		line 4 in file "i2c.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;		None
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;		None
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		wreg, status,2
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8869 ;;Total ram usage:        0 bytes
  8870 ;; Hardware stack levels used: 1
  8871 ;; Hardware stack levels required when called: 1
  8872 ;; This function calls:
  8873 ;;		Nothing
  8874 ;; This function is called by:
  8875 ;;		_color_click_init
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           	psect	text45
  8880   00456C                     __ptext45:
  8881                           	callstack 0
  8882   00456C                     _I2C_2_Master_Init:
  8883                           	callstack 28
  8884   00456C                     
  8885                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8886   00456C  010E               	movlb	14	; () banked
  8887   00456E  51D9               	movf	217,w,b	;volatile
  8888   004570  0BF0               	andlw	-16
  8889   004572  0908               	iorlw	8
  8890   004574  6FD9               	movwf	217,b	;volatile
  8891   004576                     
  8892                           ; BSR set to: 14
  8893                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8894   004576  8BD9               	bsf	217,5,b	;volatile
  8895                           
  8896                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8897   004578  0E9F               	movlw	159
  8898   00457A  6FD6               	movwf	214,b	;volatile
  8899   00457C                     
  8900                           ; BSR set to: 14
  8901                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8902   00457C  8A84               	bsf	132,5,c	;volatile
  8903   00457E                     
  8904                           ; BSR set to: 14
  8905                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8906   00457E  8C84               	bsf	132,6,c	;volatile
  8907   004580                     
  8908                           ; BSR set to: 14
  8909                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8910   004580  9BA7               	bcf	167,5,b	;volatile
  8911   004582                     
  8912                           ; BSR set to: 14
  8913                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8914   004582  9DA7               	bcf	167,6,b	;volatile
  8915                           
  8916                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8917   004584  0E1D               	movlw	29
  8918   004586  6F1D               	movwf	29,b	;volatile
  8919                           
  8920                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8921   004588  0E1E               	movlw	30
  8922   00458A  6F1C               	movwf	28,b	;volatile
  8923                           
  8924                           ;i2c.c: 18:   RD5PPS=0x1C;
  8925   00458C  0E1C               	movlw	28
  8926   00458E  6F6F               	movwf	111,b	;volatile
  8927                           
  8928                           ;i2c.c: 19:   RD6PPS=0x1B;
  8929   004590  0E1B               	movlw	27
  8930   004592  6F70               	movwf	112,b	;volatile
  8931   004594                     
  8932                           ; BSR set to: 14
  8933   004594  0012               	return		;funcret
  8934   004596                     __end_of_I2C_2_Master_Init:
  8935                           	callstack 0
  8936                           
  8937 ;; *************** function _calibration_routine *****************
  8938 ;; Defined at:
  8939 ;;		line 151 in file "color.c"
  8940 ;; Parameters:    Size  Location     Type
  8941 ;;  cCal            1   68[COMRAM] PTR struct colors
  8942 ;;		 -> colorCalibration(8), 
  8943 ;; Auto vars:     Size  Location     Type
  8944 ;;  cal_state      20    0[BANK0 ] unsigned char [20]
  8945 ;; Return value:  Size  Location     Type
  8946 ;;                  1    wreg      void 
  8947 ;; Registers used:
  8948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8949 ;; Tracked objects:
  8950 ;;		On entry : 0/0
  8951 ;;		On exit  : 0/0
  8952 ;;		Unchanged: 0/0
  8953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8954 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8955 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8956 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8957 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8958 ;;Total ram usage:       23 bytes
  8959 ;; Hardware stack levels used: 1
  8960 ;; Hardware stack levels required when called: 9
  8961 ;; This function calls:
  8962 ;;		_color_read_Blue
  8963 ;;		_color_read_Clear
  8964 ;;		_color_read_Green
  8965 ;;		_color_read_Red
  8966 ;;		_sendStringSerial4
  8967 ;;		_sprintf
  8968 ;; This function is called by:
  8969 ;;		_main
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           	psect	text46
  8974   00281E                     __ptext46:
  8975                           	callstack 0
  8976   00281E                     _calibration_routine:
  8977                           	callstack 21
  8978   00281E                     
  8979                           ;color.c: 151: void calibration_routine(struct colors *cCal);color.c: 152: {;color.c: 15
      +                          4:     LATGbits.LATG0 = 0;
  8980   00281E  907F               	bcf	127,0,c	;volatile
  8981                           
  8982                           ;color.c: 155:     LATEbits.LATE7 = 0;
  8983   002820  9E7D               	bcf	125,7,c	;volatile
  8984                           
  8985                           ;color.c: 156:     LATAbits.LATA3 = 0;
  8986   002822  9679               	bcf	121,3,c	;volatile
  8987   002824                     
  8988                           ;color.c: 158:     char cal_state[20];;color.c: 162:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  8989   002824  0E60               	movlw	low calibration_routine@cal_state
  8990   002826  6E32               	movwf	sprintf@s^0,c
  8991   002828  0E6D               	movlw	low STR_1
  8992   00282A  6E33               	movwf	sprintf@fmt^0,c
  8993   00282C  0EA6               	movlw	low STR_2
  8994   00282E  6E34               	movwf	(?_sprintf+2)^0,c
  8995   002830  5034               	movf	(?_sprintf+2)^0,w,c
  8996   002832  A4D8               	btfss	status,2,c
  8997   002834  0E0E               	movlw	high __smallconst
  8998   002836  6E35               	movwf	(?_sprintf+3)^0,c
  8999   002838  ECA4  F021         	call	_sprintf	;wreg free
  9000   00283C                     
  9001                           ;color.c: 163:     sendStringSerial4(cal_state);
  9002   00283C  0E60               	movlw	low calibration_routine@cal_state
  9003   00283E  6E03               	movwf	sendStringSerial4@string^0,c
  9004   002840  EC55  F022         	call	_sendStringSerial4	;wreg free
  9005   002844                     l96:
  9006                           
  9007                           ;color.c: 166:     while(PORTFbits.RF2 == 1){
  9008   002844  B48E               	btfsc	142,2,c	;volatile
  9009   002846  EF27  F014         	goto	u5231
  9010   00284A  EF29  F014         	goto	u5230
  9011   00284E                     u5231:
  9012   00284E  EF22  F014         	goto	l96
  9013   002852                     u5230:
  9014   002852                     
  9015                           ;color.c: 170:     LATGbits.LATG0 = 1;
  9016   002852  807F               	bsf	127,0,c	;volatile
  9017   002854                     
  9018                           ;color.c: 171:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9019   002854  0E29               	movlw	41
  9020   002856  6E47               	movwf	(??_calibration_routine+1)^0,c
  9021   002858  0E96               	movlw	150
  9022   00285A  6E46               	movwf	??_calibration_routine^0,c
  9023   00285C  0E7F               	movlw	127
  9024   00285E                     u5837:
  9025   00285E  2EE8               	decfsz	wreg,f,c
  9026   002860  D7FE               	bra	u5837
  9027   002862  2E46               	decfsz	??_calibration_routine^0,f,c
  9028   002864  D7FC               	bra	u5837
  9029   002866  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9030   002868  D7FA               	bra	u5837
  9031   00286A  0000               	nop	
  9032   00286C                     
  9033                           ;color.c: 172:     (cCal->red) = color_read_Red();
  9034   00286C  EC26  F020         	call	_color_read_Red	;wreg free
  9035   002870  5045               	movf	calibration_routine@cCal^0,w,c
  9036   002872  6ED9               	movwf	fsr2l,c
  9037   002874  6ADA               	clrf	fsr2h,c
  9038   002876  C006  FFDE         	movff	?_color_read_Red,postinc2
  9039   00287A  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  9040   00287E                     
  9041                           ;color.c: 173:     LATGbits.LATG0 = 0;
  9042   00287E  907F               	bcf	127,0,c	;volatile
  9043   002880                     
  9044                           ;color.c: 176:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  9045   002880  0E60               	movlw	low calibration_routine@cal_state
  9046   002882  6E32               	movwf	sprintf@s^0,c
  9047   002884  0E01               	movlw	low STR_3
  9048   002886  6E33               	movwf	sprintf@fmt^0,c
  9049   002888  0EA6               	movlw	low STR_2
  9050   00288A  6E34               	movwf	(?_sprintf+2)^0,c
  9051   00288C  5034               	movf	(?_sprintf+2)^0,w,c
  9052   00288E  A4D8               	btfss	status,2,c
  9053   002890  0E0E               	movlw	high __smallconst
  9054   002892  6E35               	movwf	(?_sprintf+3)^0,c
  9055   002894  ECA4  F021         	call	_sprintf	;wreg free
  9056   002898                     
  9057                           ;color.c: 177:     sendStringSerial4(&cal_state);
  9058   002898  0E60               	movlw	low calibration_routine@cal_state
  9059   00289A  6E03               	movwf	sendStringSerial4@string^0,c
  9060   00289C  EC55  F022         	call	_sendStringSerial4	;wreg free
  9061   0028A0                     l99:
  9062                           
  9063                           ;color.c: 179:     while(PORTFbits.RF2 == 1){
  9064   0028A0  B48E               	btfsc	142,2,c	;volatile
  9065   0028A2  EF55  F014         	goto	u5241
  9066   0028A6  EF57  F014         	goto	u5240
  9067   0028AA                     u5241:
  9068   0028AA  EF50  F014         	goto	l99
  9069   0028AE                     u5240:
  9070   0028AE                     
  9071                           ;color.c: 183:     LATEbits.LATE7 = 1;
  9072   0028AE  8E7D               	bsf	125,7,c	;volatile
  9073   0028B0                     
  9074                           ;color.c: 184:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9075   0028B0  0E29               	movlw	41
  9076   0028B2  6E47               	movwf	(??_calibration_routine+1)^0,c
  9077   0028B4  0E96               	movlw	150
  9078   0028B6  6E46               	movwf	??_calibration_routine^0,c
  9079   0028B8  0E7F               	movlw	127
  9080   0028BA                     u5847:
  9081   0028BA  2EE8               	decfsz	wreg,f,c
  9082   0028BC  D7FE               	bra	u5847
  9083   0028BE  2E46               	decfsz	??_calibration_routine^0,f,c
  9084   0028C0  D7FC               	bra	u5847
  9085   0028C2  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9086   0028C4  D7FA               	bra	u5847
  9087   0028C6  0000               	nop	
  9088   0028C8                     
  9089                           ;color.c: 185:     (cCal->green) = color_read_Green();
  9090   0028C8  EC4E  F020         	call	_color_read_Green	;wreg free
  9091   0028CC  5045               	movf	calibration_routine@cCal^0,w,c
  9092   0028CE  6ED9               	movwf	fsr2l,c
  9093   0028D0  6ADA               	clrf	fsr2h,c
  9094   0028D2  0E02               	movlw	2
  9095   0028D4  26D9               	addwf	fsr2l,f,c
  9096   0028D6  C006  FFDE         	movff	?_color_read_Green,postinc2
  9097   0028DA  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  9098   0028DE                     
  9099                           ;color.c: 186:     LATEbits.LATE7 = 0;
  9100   0028DE  9E7D               	bcf	125,7,c	;volatile
  9101   0028E0                     
  9102                           ;color.c: 189:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  9103   0028E0  0E60               	movlw	low calibration_routine@cal_state
  9104   0028E2  6E32               	movwf	sprintf@s^0,c
  9105   0028E4  0E1E               	movlw	low STR_5
  9106   0028E6  6E33               	movwf	sprintf@fmt^0,c
  9107   0028E8  0EA6               	movlw	low STR_2
  9108   0028EA  6E34               	movwf	(?_sprintf+2)^0,c
  9109   0028EC  5034               	movf	(?_sprintf+2)^0,w,c
  9110   0028EE  A4D8               	btfss	status,2,c
  9111   0028F0  0E0E               	movlw	high __smallconst
  9112   0028F2  6E35               	movwf	(?_sprintf+3)^0,c
  9113   0028F4  ECA4  F021         	call	_sprintf	;wreg free
  9114   0028F8                     
  9115                           ;color.c: 190:     sendStringSerial4(&cal_state);
  9116   0028F8  0E60               	movlw	low calibration_routine@cal_state
  9117   0028FA  6E03               	movwf	sendStringSerial4@string^0,c
  9118   0028FC  EC55  F022         	call	_sendStringSerial4	;wreg free
  9119   002900                     l102:
  9120                           
  9121                           ;color.c: 192:     while(PORTFbits.RF2 == 1){
  9122   002900  B48E               	btfsc	142,2,c	;volatile
  9123   002902  EF85  F014         	goto	u5251
  9124   002906  EF87  F014         	goto	u5250
  9125   00290A                     u5251:
  9126   00290A  EF80  F014         	goto	l102
  9127   00290E                     u5250:
  9128   00290E                     
  9129                           ;color.c: 196:     LATAbits.LATA3 = 1;
  9130   00290E  8679               	bsf	121,3,c	;volatile
  9131   002910                     
  9132                           ;color.c: 197:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9133   002910  0E29               	movlw	41
  9134   002912  6E47               	movwf	(??_calibration_routine+1)^0,c
  9135   002914  0E96               	movlw	150
  9136   002916  6E46               	movwf	??_calibration_routine^0,c
  9137   002918  0E7F               	movlw	127
  9138   00291A                     u5857:
  9139   00291A  2EE8               	decfsz	wreg,f,c
  9140   00291C  D7FE               	bra	u5857
  9141   00291E  2E46               	decfsz	??_calibration_routine^0,f,c
  9142   002920  D7FC               	bra	u5857
  9143   002922  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9144   002924  D7FA               	bra	u5857
  9145   002926  0000               	nop	
  9146   002928                     
  9147                           ;color.c: 198:     (cCal->blue) = color_read_Blue();
  9148   002928  EC9E  F020         	call	_color_read_Blue	;wreg free
  9149   00292C  5045               	movf	calibration_routine@cCal^0,w,c
  9150   00292E  6ED9               	movwf	fsr2l,c
  9151   002930  6ADA               	clrf	fsr2h,c
  9152   002932  0E04               	movlw	4
  9153   002934  26D9               	addwf	fsr2l,f,c
  9154   002936  C006  FFDE         	movff	?_color_read_Blue,postinc2
  9155   00293A  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  9156   00293E                     
  9157                           ;color.c: 199:     LATAbits.LATA3 = 0;
  9158   00293E  9679               	bcf	121,3,c	;volatile
  9159   002940                     
  9160                           ;color.c: 202:     sprintf(cal_state,"Calibration state =  white", ".");
  9161   002940  0E60               	movlw	low calibration_routine@cal_state
  9162   002942  6E32               	movwf	sprintf@s^0,c
  9163   002944  0E39               	movlw	low STR_7
  9164   002946  6E33               	movwf	sprintf@fmt^0,c
  9165   002948  0EA6               	movlw	low STR_2
  9166   00294A  6E34               	movwf	(?_sprintf+2)^0,c
  9167   00294C  5034               	movf	(?_sprintf+2)^0,w,c
  9168   00294E  A4D8               	btfss	status,2,c
  9169   002950  0E0E               	movlw	high __smallconst
  9170   002952  6E35               	movwf	(?_sprintf+3)^0,c
  9171   002954  ECA4  F021         	call	_sprintf	;wreg free
  9172   002958                     
  9173                           ;color.c: 203:     sendStringSerial4(&cal_state);
  9174   002958  0E60               	movlw	low calibration_routine@cal_state
  9175   00295A  6E03               	movwf	sendStringSerial4@string^0,c
  9176   00295C  EC55  F022         	call	_sendStringSerial4	;wreg free
  9177   002960                     l105:
  9178                           
  9179                           ;color.c: 205:     while(PORTFbits.RF2 == 1){
  9180   002960  B48E               	btfsc	142,2,c	;volatile
  9181   002962  EFB5  F014         	goto	u5261
  9182   002966  EFB7  F014         	goto	u5260
  9183   00296A                     u5261:
  9184   00296A  EFB0  F014         	goto	l105
  9185   00296E                     u5260:
  9186   00296E                     
  9187                           ;color.c: 208:     LATGbits.LATG0 = 1;
  9188   00296E  807F               	bsf	127,0,c	;volatile
  9189                           
  9190                           ;color.c: 209:     LATEbits.LATE7 = 1;
  9191   002970  8E7D               	bsf	125,7,c	;volatile
  9192                           
  9193                           ;color.c: 210:     LATAbits.LATA3 = 1;
  9194   002972  8679               	bsf	121,3,c	;volatile
  9195   002974                     
  9196                           ;color.c: 211:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9197   002974  0E29               	movlw	41
  9198   002976  6E47               	movwf	(??_calibration_routine+1)^0,c
  9199   002978  0E96               	movlw	150
  9200   00297A  6E46               	movwf	??_calibration_routine^0,c
  9201   00297C  0E7F               	movlw	127
  9202   00297E                     u5867:
  9203   00297E  2EE8               	decfsz	wreg,f,c
  9204   002980  D7FE               	bra	u5867
  9205   002982  2E46               	decfsz	??_calibration_routine^0,f,c
  9206   002984  D7FC               	bra	u5867
  9207   002986  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9208   002988  D7FA               	bra	u5867
  9209   00298A  0000               	nop	
  9210   00298C                     
  9211                           ;color.c: 212:     (cCal->clear) = color_read_Clear();
  9212   00298C  EC76  F020         	call	_color_read_Clear	;wreg free
  9213   002990  5045               	movf	calibration_routine@cCal^0,w,c
  9214   002992  6ED9               	movwf	fsr2l,c
  9215   002994  6ADA               	clrf	fsr2h,c
  9216   002996  0E06               	movlw	6
  9217   002998  26D9               	addwf	fsr2l,f,c
  9218   00299A  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9219   00299E  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9220   0029A2                     
  9221                           ;color.c: 213:     LATGbits.LATG0 = 0;
  9222   0029A2  907F               	bcf	127,0,c	;volatile
  9223   0029A4                     
  9224                           ;color.c: 214:     LATEbits.LATE7 = 0;
  9225   0029A4  9E7D               	bcf	125,7,c	;volatile
  9226   0029A6                     
  9227                           ;color.c: 215:     LATAbits.LATA3 = 0;
  9228   0029A6  9679               	bcf	121,3,c	;volatile
  9229   0029A8                     
  9230                           ;color.c: 219:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  9231   0029A8  0E60               	movlw	low calibration_routine@cal_state
  9232   0029AA  6E32               	movwf	sprintf@s^0,c
  9233   0029AC  0E54               	movlw	low STR_9
  9234   0029AE  6E33               	movwf	sprintf@fmt^0,c
  9235   0029B0  0EA6               	movlw	low STR_2
  9236   0029B2  6E34               	movwf	(?_sprintf+2)^0,c
  9237   0029B4  5034               	movf	(?_sprintf+2)^0,w,c
  9238   0029B6  A4D8               	btfss	status,2,c
  9239   0029B8  0E0E               	movlw	high __smallconst
  9240   0029BA  6E35               	movwf	(?_sprintf+3)^0,c
  9241   0029BC  ECA4  F021         	call	_sprintf	;wreg free
  9242   0029C0                     
  9243                           ;color.c: 220:     sendStringSerial4(&cal_state);
  9244   0029C0  0E60               	movlw	low calibration_routine@cal_state
  9245   0029C2  6E03               	movwf	sendStringSerial4@string^0,c
  9246   0029C4  EC55  F022         	call	_sendStringSerial4	;wreg free
  9247   0029C8                     l108:
  9248                           
  9249                           ;color.c: 222:     while(PORTFbits.RF2 == 1){
  9250   0029C8  B48E               	btfsc	142,2,c	;volatile
  9251   0029CA  EFE9  F014         	goto	u5271
  9252   0029CE  EFEB  F014         	goto	u5270
  9253   0029D2                     u5271:
  9254   0029D2  EFE4  F014         	goto	l108
  9255   0029D6                     u5270:
  9256   0029D6                     
  9257                           ;color.c: 225:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9258   0029D6  0E29               	movlw	41
  9259   0029D8  6E47               	movwf	(??_calibration_routine+1)^0,c
  9260   0029DA  0E96               	movlw	150
  9261   0029DC  6E46               	movwf	??_calibration_routine^0,c
  9262   0029DE  0E7F               	movlw	127
  9263   0029E0                     u5877:
  9264   0029E0  2EE8               	decfsz	wreg,f,c
  9265   0029E2  D7FE               	bra	u5877
  9266   0029E4  2E46               	decfsz	??_calibration_routine^0,f,c
  9267   0029E6  D7FC               	bra	u5877
  9268   0029E8  2E47               	decfsz	(??_calibration_routine+1)^0,f,c
  9269   0029EA  D7FA               	bra	u5877
  9270   0029EC  0000               	nop	
  9271   0029EE  0012               	return		;funcret
  9272   0029F0                     __end_of_calibration_routine:
  9273                           	callstack 0
  9274                           
  9275 ;; *************** function _sprintf *****************
  9276 ;; Defined at:
  9277 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9278 ;; Parameters:    Size  Location     Type
  9279 ;;  s               1   49[COMRAM] PTR unsigned char 
  9280 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  9281 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9282 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9283 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9284 ;; Auto vars:     Size  Location     Type
  9285 ;;  f              12   56[COMRAM] struct _IO_FILE
  9286 ;;  ret             2    0        int 
  9287 ;;  ap              1   55[COMRAM] PTR void [1]
  9288 ;;		 -> ?_sprintf(2), 
  9289 ;; Return value:  Size  Location     Type
  9290 ;;                  2   49[COMRAM] int 
  9291 ;; Registers used:
  9292 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9298 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9299 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9301 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9302 ;;Total ram usage:       19 bytes
  9303 ;; Hardware stack levels used: 1
  9304 ;; Hardware stack levels required when called: 8
  9305 ;; This function calls:
  9306 ;;		_vfprintf
  9307 ;; This function is called by:
  9308 ;;		_calibration_routine
  9309 ;;		_send2USART
  9310 ;;		_ADC2String
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           	psect	text47
  9315   004348                     __ptext47:
  9316                           	callstack 0
  9317   004348                     _sprintf:
  9318                           	callstack 21
  9319   004348  0E34               	movlw	low (?_sprintf+2)
  9320   00434A  6E38               	movwf	sprintf@ap^0,c
  9321   00434C  C032  F039         	movff	sprintf@s,sprintf@f
  9322   004350  0E00               	movlw	0
  9323   004352  6E3D               	movwf	(sprintf@f+4)^0,c
  9324   004354  0E00               	movlw	0
  9325   004356  6E3C               	movwf	(sprintf@f+3)^0,c
  9326   004358  0E00               	movlw	0
  9327   00435A  6E44               	movwf	(sprintf@f+11)^0,c
  9328   00435C  0E00               	movlw	0
  9329   00435E  6E43               	movwf	(sprintf@f+10)^0,c
  9330   004360  0E39               	movlw	low sprintf@f
  9331   004362  6E2E               	movwf	vfprintf@fp^0,c
  9332   004364  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9333   004368  0E38               	movlw	low sprintf@ap
  9334   00436A  6E30               	movwf	vfprintf@ap^0,c
  9335   00436C  EC0C  F021         	call	_vfprintf	;wreg free
  9336   004370  5032               	movf	sprintf@s^0,w,c
  9337   004372  243C               	addwf	(sprintf@f+3)^0,w,c
  9338   004374  6ED9               	movwf	fsr2l,c
  9339   004376  6ADA               	clrf	fsr2h,c
  9340   004378  6ADF               	clrf	indf2,c
  9341   00437A  0012               	return		;funcret
  9342   00437C                     __end_of_sprintf:
  9343                           	callstack 0
  9344                           
  9345 ;; *************** function _vfprintf *****************
  9346 ;; Defined at:
  9347 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9348 ;; Parameters:    Size  Location     Type
  9349 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
  9350 ;;		 -> sprintf@f(12), 
  9351 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
  9352 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9353 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9354 ;;  ap              1   47[COMRAM] PTR PTR void 
  9355 ;;		 -> sprintf@ap(1), 
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
  9358 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9359 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9360 ;; Return value:  Size  Location     Type
  9361 ;;                  2   45[COMRAM] int 
  9362 ;; Registers used:
  9363 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9369 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9370 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9372 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9373 ;;Total ram usage:        4 bytes
  9374 ;; Hardware stack levels used: 1
  9375 ;; Hardware stack levels required when called: 7
  9376 ;; This function calls:
  9377 ;;		_vfpfcnvrt
  9378 ;; This function is called by:
  9379 ;;		_sprintf
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383                           	psect	text48
  9384   004218                     __ptext48:
  9385                           	callstack 0
  9386   004218                     _vfprintf:
  9387                           	callstack 21
  9388   004218                     
  9389                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  9390   004218  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
  9391                           
  9392                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9393   00421C  EF18  F021         	goto	l5578
  9394   004220                     l5576:
  9395                           
  9396                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  9397   004220  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
  9398   004224  0E31               	movlw	low vfprintf@cfmt
  9399   004226  6E24               	movwf	vfpfcnvrt@fmt^0,c
  9400   004228  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
  9401   00422C  ECD2  F015         	call	_vfpfcnvrt	;wreg free
  9402   004230                     l5578:
  9403                           
  9404                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  9405   004230  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
  9406   004234                     	if	1	;There is more than 1 active tblptr byte
  9407   004234  0E0E               	movlw	high __smallconst
  9408   004236  6EF7               	movwf	tblptrh,c
  9409   004238                     	endif
  9410   004238                     	if	0	;tblptru may be non-zero
  9411   004238                     	endif
  9412   004238                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9413   004238  0E00               	movlw	low (__smallconst shr (0+16))
  9414   00423A  6EF8               	movwf	tblptru,c
  9415   00423C                     	endif
  9416   00423C  0008               	tblrd		*
  9417   00423E  50F5               	movf	tablat,w,c
  9418   004240  0900               	iorlw	0
  9419   004242  A4D8               	btfss	status,2,c
  9420   004244  EF26  F021         	goto	u5051
  9421   004248  EF28  F021         	goto	u5050
  9422   00424C                     u5051:
  9423   00424C  EF10  F021         	goto	l5576
  9424   004250                     u5050:
  9425   004250                     
  9426                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  9427   004250  0E00               	movlw	0
  9428   004252  6E2F               	movwf	(?_vfprintf+1)^0,c
  9429   004254  0E00               	movlw	0
  9430   004256  6E2E               	movwf	?_vfprintf^0,c
  9431   004258  0012               	return		;funcret
  9432   00425A                     __end_of_vfprintf:
  9433                           	callstack 0
  9434                           
  9435 ;; *************** function _vfpfcnvrt *****************
  9436 ;; Defined at:
  9437 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9438 ;; Parameters:    Size  Location     Type
  9439 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
  9440 ;;		 -> sprintf@f(12), 
  9441 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
  9442 ;;		 -> vfprintf@cfmt(1), 
  9443 ;;  ap              1   36[COMRAM] PTR PTR void 
  9444 ;;		 -> sprintf@ap(1), 
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;  convarg         4   39[COMRAM] struct .
  9447 ;;  cp              1   44[COMRAM] PTR unsigned char 
  9448 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(27), 
  9449 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  9450 ;;  done            1   43[COMRAM] _Bool 
  9451 ;;  c               1    0        unsigned char 
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  1    wreg      void 
  9454 ;; Registers used:
  9455 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9461 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9462 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9463 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9464 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9465 ;;Total ram usage:       11 bytes
  9466 ;; Hardware stack levels used: 1
  9467 ;; Hardware stack levels required when called: 6
  9468 ;; This function calls:
  9469 ;;		_dtoa
  9470 ;;		_fputc
  9471 ;;		_read_prec_or_width
  9472 ;; This function is called by:
  9473 ;;		_vfprintf
  9474 ;; This function uses a non-reentrant model
  9475 ;;
  9476                           
  9477                           	psect	text49
  9478   002BA4                     __ptext49:
  9479                           	callstack 0
  9480   002BA4                     _vfpfcnvrt:
  9481                           	callstack 21
  9482   002BA4                     
  9483                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  9484   002BA4  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9485   002BA6  6ED9               	movwf	fsr2l,c
  9486   002BA8  6ADA               	clrf	fsr2h,c
  9487   002BAA  CFDF FFF6          	movff	indf2,tblptrl
  9488   002BAE                     	if	1	;There is more than 1 active tblptr byte
  9489   002BAE  0E0E               	movlw	high __smallconst
  9490   002BB0  6EF7               	movwf	tblptrh,c
  9491   002BB2                     	endif
  9492   002BB2                     	if	0	;tblptru may be non-zero
  9493   002BB2                     	endif
  9494   002BB2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9495   002BB2  0E00               	movlw	low (__smallconst shr (0+16))
  9496   002BB4  6EF8               	movwf	tblptru,c
  9497   002BB6                     	endif
  9498   002BB6  0008               	tblrd		*
  9499   002BB8  50F5               	movf	tablat,w,c
  9500   002BBA  0A25               	xorlw	37
  9501   002BBC  A4D8               	btfss	status,2,c
  9502   002BBE  EFE3  F015         	goto	u4901
  9503   002BC2  EFE5  F015         	goto	u4900
  9504   002BC6                     u4901:
  9505   002BC6  EF82  F016         	goto	l5468
  9506   002BCA                     u4900:
  9507   002BCA                     
  9508                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  9509   002BCA  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9510   002BCC  6ED9               	movwf	fsr2l,c
  9511   002BCE  6ADA               	clrf	fsr2h,c
  9512   002BD0  2ADF               	incf	indf2,f,c
  9513   002BD2                     
  9514                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  9515   002BD2  0E00               	movlw	0
  9516   002BD4  0100               	movlb	0	; () banked
  9517   002BD6  6FC7               	movwf	(_width+1)& (0+255),b
  9518   002BD8  0E00               	movlw	0
  9519   002BDA  6FC6               	movwf	_width& (0+255),b
  9520   002BDC  C0C6  F0CA         	movff	_width,_flags
  9521   002BE0                     
  9522                           ; BSR set to: 0
  9523                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  9524   002BE0  69C8               	setf	_prec& (0+255),b
  9525   002BE2  69C9               	setf	(_prec+1)& (0+255),b
  9526   002BE4                     
  9527                           ; BSR set to: 0
  9528                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  9529   002BE4  0E00               	movlw	0
  9530   002BE6  6E2C               	movwf	vfpfcnvrt@done^0,c
  9531                           
  9532                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9533   002BE8  EF1D  F016         	goto	l5442
  9534   002BEC                     l5432:
  9535                           
  9536                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  9537   002BEC  0100               	movlb	0	; () banked
  9538   002BEE  83CA               	bsf	_flags& (0+255),1,b
  9539   002BF0                     
  9540                           ; BSR set to: 0
  9541                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  9542   002BF0  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9543   002BF2  6ED9               	movwf	fsr2l,c
  9544   002BF4  6ADA               	clrf	fsr2h,c
  9545   002BF6  2ADF               	incf	indf2,f,c
  9546                           
  9547                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  9548   002BF8  EF1D  F016         	goto	l5442
  9549   002BFC                     l5436:
  9550                           
  9551                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  9552   002BFC  0E01               	movlw	1
  9553   002BFE  6E2C               	movwf	vfpfcnvrt@done^0,c
  9554                           
  9555                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  9556   002C00  EF1D  F016         	goto	l5442
  9557   002C04                     l5440:
  9558   002C04  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9559   002C06  6ED9               	movwf	fsr2l,c
  9560   002C08  6ADA               	clrf	fsr2h,c
  9561   002C0A  CFDF FFF6          	movff	indf2,tblptrl
  9562   002C0E                     	if	1	;There is more than 1 active tblptr byte
  9563   002C0E  0E0E               	movlw	high __smallconst
  9564   002C10  6EF7               	movwf	tblptrh,c
  9565   002C12                     	endif
  9566   002C12                     	if	0	;tblptru may be non-zero
  9567   002C12                     	endif
  9568   002C12                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9569   002C12  0E00               	movlw	low (__smallconst shr (0+16))
  9570   002C14  6EF8               	movwf	tblptru,c
  9571   002C16                     	endif
  9572   002C16  0008               	tblrd		*
  9573   002C18  50F5               	movf	tablat,w,c
  9574   002C1A  6E26               	movwf	??_vfpfcnvrt^0,c
  9575   002C1C  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
  9576                           
  9577                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9578                           ; Switch size 1, requested type "simple"
  9579                           ; Number of cases is 1, Range of values is 0 to 0
  9580                           ; switch strategies available:
  9581                           ; Name         Instructions Cycles
  9582                           ; simple_byte            4     3 (average)
  9583                           ;	Chosen strategy is simple_byte
  9584   002C1E  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
  9585   002C20  0A00               	xorlw	0	; case 0
  9586   002C22  B4D8               	btfsc	status,2,c
  9587   002C24  EF16  F016         	goto	l6232
  9588   002C28  EFFE  F015         	goto	l5436
  9589   002C2C                     l6232:
  9590                           
  9591                           ; Switch size 1, requested type "simple"
  9592                           ; Number of cases is 1, Range of values is 48 to 48
  9593                           ; switch strategies available:
  9594                           ; Name         Instructions Cycles
  9595                           ; simple_byte            4     3 (average)
  9596                           ;	Chosen strategy is simple_byte
  9597   002C2C  5026               	movf	??_vfpfcnvrt^0,w,c
  9598   002C2E  0A30               	xorlw	48	; case 48
  9599   002C30  B4D8               	btfsc	status,2,c
  9600   002C32  EFF6  F015         	goto	l5432
  9601   002C36  EFFE  F015         	goto	l5436
  9602   002C3A                     l5442:
  9603                           
  9604                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  9605   002C3A  502C               	movf	vfpfcnvrt@done^0,w,c
  9606   002C3C  B4D8               	btfsc	status,2,c
  9607   002C3E  EF23  F016         	goto	u4911
  9608   002C42  EF25  F016         	goto	u4910
  9609   002C46                     u4911:
  9610   002C46  EF02  F016         	goto	l5440
  9611   002C4A                     u4910:
  9612   002C4A                     
  9613                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  9614   002C4A  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  9615   002C4E  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  9616   002C52  EC82  F01B         	call	_read_prec_or_width	;wreg free
  9617   002C56  C008  F0C6         	movff	?_read_prec_or_width,_width
  9618   002C5A  C009  F0C7         	movff	?_read_prec_or_width+1,_width+1
  9619   002C5E                     
  9620                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  9621   002C5E  0100               	movlb	0	; () banked
  9622   002C60  BFC7               	btfsc	(_width+1)& (0+255),7,b
  9623   002C62  EF37  F016         	goto	u4920
  9624   002C66  EF35  F016         	goto	u4921
  9625   002C6A                     u4921:
  9626   002C6A  EF3C  F016         	goto	l5450
  9627   002C6E                     u4920:
  9628   002C6E                     
  9629                           ; BSR set to: 0
  9630                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  9631   002C6E  81CA               	bsf	_flags& (0+255),0,b
  9632                           
  9633                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  9634   002C70  6DC6               	negf	_width& (0+255),b
  9635   002C72  1FC7               	comf	(_width+1)& (0+255),f,b
  9636   002C74  B0D8               	btfsc	status,0,c
  9637   002C76  2BC7               	incf	(_width+1)& (0+255),f,b
  9638   002C78                     l5450:
  9639                           
  9640                           ; BSR set to: 0
  9641                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  9642   002C78  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9643   002C7A  6ED9               	movwf	fsr2l,c
  9644   002C7C  6ADA               	clrf	fsr2h,c
  9645   002C7E  50DF               	movf	indf2,w,c
  9646   002C80  6E2D               	movwf	vfpfcnvrt@cp^0,c
  9647   002C82                     
  9648                           ; BSR set to: 0
  9649                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  9650   002C82  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9651   002C86                     	if	1	;There is more than 1 active tblptr byte
  9652   002C86  0E0E               	movlw	high __smallconst
  9653   002C88  6EF7               	movwf	tblptrh,c
  9654   002C8A                     	endif
  9655   002C8A                     	if	0	;tblptru may be non-zero
  9656   002C8A                     	endif
  9657   002C8A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9658   002C8A  0E00               	movlw	low (__smallconst shr (0+16))
  9659   002C8C  6EF8               	movwf	tblptru,c
  9660   002C8E                     	endif
  9661   002C8E  0008               	tblrd		*
  9662   002C90  50F5               	movf	tablat,w,c
  9663   002C92  0A64               	xorlw	100
  9664   002C94  B4D8               	btfsc	status,2,c
  9665   002C96  EF4F  F016         	goto	u4931
  9666   002C9A  EF51  F016         	goto	u4930
  9667   002C9E                     u4931:
  9668   002C9E  EF61  F016         	goto	l5456
  9669   002CA2                     u4930:
  9670   002CA2                     
  9671                           ; BSR set to: 0
  9672   002CA2  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  9673   002CA6                     	if	1	;There is more than 1 active tblptr byte
  9674   002CA6  0E0E               	movlw	high __smallconst
  9675   002CA8  6EF7               	movwf	tblptrh,c
  9676   002CAA                     	endif
  9677   002CAA                     	if	0	;tblptru may be non-zero
  9678   002CAA                     	endif
  9679   002CAA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9680   002CAA  0E00               	movlw	low (__smallconst shr (0+16))
  9681   002CAC  6EF8               	movwf	tblptru,c
  9682   002CAE                     	endif
  9683   002CAE  0008               	tblrd		*
  9684   002CB0  50F5               	movf	tablat,w,c
  9685   002CB2  0A69               	xorlw	105
  9686   002CB4  A4D8               	btfss	status,2,c
  9687   002CB6  EF5F  F016         	goto	u4941
  9688   002CBA  EF61  F016         	goto	u4940
  9689   002CBE                     u4941:
  9690   002CBE  EF7C  F016         	goto	l5464
  9691   002CC2                     u4940:
  9692   002CC2                     l5456:
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  9696   002CC2  5025               	movf	vfpfcnvrt@ap^0,w,c
  9697   002CC4  6ED9               	movwf	fsr2l,c
  9698   002CC6  6ADA               	clrf	fsr2h,c
  9699   002CC8  0E02               	movlw	2
  9700   002CCA  26DF               	addwf	indf2,f,c
  9701   002CCC  5CDF               	subwf	indf2,w,c
  9702   002CCE  6ED9               	movwf	fsr2l,c
  9703   002CD0  6ADA               	clrf	fsr2h,c
  9704   002CD2  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
  9705   002CD6  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
  9706   002CDA                     
  9707                           ; BSR set to: 0
  9708                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  9709   002CDA  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9710   002CDC  6ED9               	movwf	fsr2l,c
  9711   002CDE  6ADA               	clrf	fsr2h,c
  9712   002CE0  282D               	incf	vfpfcnvrt@cp^0,w,c
  9713   002CE2  6EDF               	movwf	indf2,c
  9714   002CE4                     
  9715                           ; BSR set to: 0
  9716                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  9717   002CE4  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
  9718   002CE8  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
  9719   002CEC  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  9720   002CF0  EC96  F016         	call	_dtoa	;wreg free
  9721   002CF4  EF95  F016         	goto	l1418
  9722   002CF8                     l5464:
  9723                           
  9724                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9725   002CF8  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9726   002CFA  6ED9               	movwf	fsr2l,c
  9727   002CFC  6ADA               	clrf	fsr2h,c
  9728   002CFE  2ADF               	incf	indf2,f,c
  9729   002D00  EF95  F016         	goto	l1418
  9730   002D04                     l5468:
  9731                           
  9732                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9733   002D04  5024               	movf	vfpfcnvrt@fmt^0,w,c
  9734   002D06  6ED9               	movwf	fsr2l,c
  9735   002D08  6ADA               	clrf	fsr2h,c
  9736   002D0A  CFDF FFF6          	movff	indf2,tblptrl
  9737   002D0E                     	if	1	;There is more than 1 active tblptr byte
  9738   002D0E  0E0E               	movlw	high __smallconst
  9739   002D10  6EF7               	movwf	tblptrh,c
  9740   002D12                     	endif
  9741   002D12                     	if	0	;tblptru may be non-zero
  9742   002D12                     	endif
  9743   002D12                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9744   002D12  0E00               	movlw	low (__smallconst shr (0+16))
  9745   002D14  6EF8               	movwf	tblptru,c
  9746   002D16                     	endif
  9747   002D16  0008               	tblrd		*
  9748   002D18  50F5               	movf	tablat,w,c
  9749   002D1A  6E02               	movwf	fputc@c^0,c
  9750   002D1C  6A03               	clrf	(fputc@c+1)^0,c
  9751   002D1E  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
  9752   002D22  EC2E  F01C         	call	_fputc	;wreg free
  9753   002D26  EF7C  F016         	goto	l5464
  9754   002D2A                     l1418:
  9755   002D2A  0012               	return		;funcret
  9756   002D2C                     __end_of_vfpfcnvrt:
  9757                           	callstack 0
  9758                           
  9759 ;; *************** function _read_prec_or_width *****************
  9760 ;; Defined at:
  9761 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9762 ;; Parameters:    Size  Location     Type
  9763 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
  9764 ;;		 -> vfprintf@cfmt(1), 
  9765 ;;  ap              1    8[COMRAM] PTR PTR void [1]
  9766 ;;		 -> sprintf@ap(1), 
  9767 ;; Auto vars:     Size  Location     Type
  9768 ;;  c               1    9[COMRAM] unsigned char 
  9769 ;;  n               2   10[COMRAM] int 
  9770 ;; Return value:  Size  Location     Type
  9771 ;;                  2    7[COMRAM] int 
  9772 ;; Registers used:
  9773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9774 ;; Tracked objects:
  9775 ;;		On entry : 0/0
  9776 ;;		On exit  : 0/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9780 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9782 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9783 ;;Total ram usage:        5 bytes
  9784 ;; Hardware stack levels used: 1
  9785 ;; Hardware stack levels required when called: 2
  9786 ;; This function calls:
  9787 ;;		___wmul
  9788 ;; This function is called by:
  9789 ;;		_vfpfcnvrt
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           	psect	text50
  9794   003704                     __ptext50:
  9795                           	callstack 0
  9796   003704                     _read_prec_or_width:
  9797                           	callstack 24
  9798   003704                     
  9799                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  9800   003704  0E00               	movlw	0
  9801   003706  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9802   003708  0E00               	movlw	0
  9803   00370A  6E0B               	movwf	read_prec_or_width@n^0,c
  9804   00370C                     
  9805                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  9806   00370C  5008               	movf	read_prec_or_width@fmt^0,w,c
  9807   00370E  6ED9               	movwf	fsr2l,c
  9808   003710  6ADA               	clrf	fsr2h,c
  9809   003712  CFDF FFF6          	movff	indf2,tblptrl
  9810   003716                     	if	1	;There is more than 1 active tblptr byte
  9811   003716  0E0E               	movlw	high __smallconst
  9812   003718  6EF7               	movwf	tblptrh,c
  9813   00371A                     	endif
  9814   00371A                     	if	0	;tblptru may be non-zero
  9815   00371A                     	endif
  9816   00371A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9817   00371A  0E00               	movlw	low (__smallconst shr (0+16))
  9818   00371C  6EF8               	movwf	tblptru,c
  9819   00371E                     	endif
  9820   00371E  0008               	tblrd		*
  9821   003720  50F5               	movf	tablat,w,c
  9822   003722  0A2A               	xorlw	42
  9823   003724  A4D8               	btfss	status,2,c
  9824   003726  EF97  F01B         	goto	u4861
  9825   00372A  EF99  F01B         	goto	u4860
  9826   00372E                     u4861:
  9827   00372E  EFBF  F01B         	goto	l5404
  9828   003732                     u4860:
  9829   003732                     
  9830                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  9831   003732  5008               	movf	read_prec_or_width@fmt^0,w,c
  9832   003734  6ED9               	movwf	fsr2l,c
  9833   003736  6ADA               	clrf	fsr2h,c
  9834   003738  2ADF               	incf	indf2,f,c
  9835   00373A                     
  9836                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  9837   00373A  5009               	movf	read_prec_or_width@ap^0,w,c
  9838   00373C  6ED9               	movwf	fsr2l,c
  9839   00373E  6ADA               	clrf	fsr2h,c
  9840   003740  0E02               	movlw	2
  9841   003742  26DF               	addwf	indf2,f,c
  9842   003744  5CDF               	subwf	indf2,w,c
  9843   003746  6ED9               	movwf	fsr2l,c
  9844   003748  6ADA               	clrf	fsr2h,c
  9845   00374A  CFDE F00B          	movff	postinc2,read_prec_or_width@n
  9846   00374E  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
  9847                           
  9848                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  9849   003752  EFD4  F01B         	goto	l1399
  9850   003756                     l5400:
  9851                           
  9852                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  9853   003756  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
  9854   00375A  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  9855   00375E  0E00               	movlw	0
  9856   003760  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  9857   003762  0E0A               	movlw	10
  9858   003764  6E04               	movwf	___wmul@multiplicand^0,c
  9859   003766  ECF3  F022         	call	___wmul	;wreg free
  9860   00376A  500A               	movf	read_prec_or_width@c^0,w,c
  9861   00376C  2402               	addwf	?___wmul^0,w,c
  9862   00376E  6E0B               	movwf	read_prec_or_width@n^0,c
  9863   003770  0E00               	movlw	0
  9864   003772  2003               	addwfc	(?___wmul+1)^0,w,c
  9865   003774  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
  9866   003776                     
  9867                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  9868   003776  5008               	movf	read_prec_or_width@fmt^0,w,c
  9869   003778  6ED9               	movwf	fsr2l,c
  9870   00377A  6ADA               	clrf	fsr2h,c
  9871   00377C  2ADF               	incf	indf2,f,c
  9872   00377E                     l5404:
  9873                           
  9874                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  9875   00377E  5008               	movf	read_prec_or_width@fmt^0,w,c
  9876   003780  6ED9               	movwf	fsr2l,c
  9877   003782  6ADA               	clrf	fsr2h,c
  9878   003784  CFDF FFF6          	movff	indf2,tblptrl
  9879   003788                     	if	1	;There is more than 1 active tblptr byte
  9880   003788  0E0E               	movlw	high __smallconst
  9881   00378A  6EF7               	movwf	tblptrh,c
  9882   00378C                     	endif
  9883   00378C                     	if	0	;tblptru may be non-zero
  9884   00378C                     	endif
  9885   00378C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9886   00378C  0E00               	movlw	low (__smallconst shr (0+16))
  9887   00378E  6EF8               	movwf	tblptru,c
  9888   003790                     	endif
  9889   003790  0008               	tblrd		*
  9890   003792  50F5               	movf	tablat,w,c
  9891   003794  0FD0               	addlw	208
  9892   003796  6E0A               	movwf	read_prec_or_width@c^0,c
  9893   003798  0E09               	movlw	9
  9894   00379A  640A               	cpfsgt	read_prec_or_width@c^0,c
  9895   00379C  EFD2  F01B         	goto	u4871
  9896   0037A0  EFD4  F01B         	goto	u4870
  9897   0037A4                     u4871:
  9898   0037A4  EFAB  F01B         	goto	l5400
  9899   0037A8                     u4870:
  9900   0037A8                     l1399:
  9901                           
  9902                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  9903   0037A8  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
  9904   0037AC  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  9905   0037B0  0012               	return		;funcret
  9906   0037B2                     __end_of_read_prec_or_width:
  9907                           	callstack 0
  9908                           
  9909 ;; *************** function ___wmul *****************
  9910 ;; Defined at:
  9911 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;  multiplier      2    1[COMRAM] unsigned int 
  9914 ;;  multiplicand    2    3[COMRAM] unsigned int 
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;  product         2    5[COMRAM] unsigned int 
  9917 ;; Return value:  Size  Location     Type
  9918 ;;                  2    1[COMRAM] unsigned int 
  9919 ;; Registers used:
  9920 ;;		wreg, status,2, status,0, prodl, prodh
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9926 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9927 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9929 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9930 ;;Total ram usage:        6 bytes
  9931 ;; Hardware stack levels used: 1
  9932 ;; Hardware stack levels required when called: 1
  9933 ;; This function calls:
  9934 ;;		Nothing
  9935 ;; This function is called by:
  9936 ;;		_setMotorPWM
  9937 ;;		_read_prec_or_width
  9938 ;;		_ADC2String
  9939 ;; This function uses a non-reentrant model
  9940 ;;
  9941                           
  9942                           	psect	text51
  9943   0045E6                     __ptext51:
  9944                           	callstack 0
  9945   0045E6                     ___wmul:
  9946                           	callstack 27
  9947   0045E6  5002               	movf	___wmul@multiplier^0,w,c
  9948   0045E8  0204               	mulwf	___wmul@multiplicand^0,c
  9949   0045EA  CFF3 F006          	movff	prodl,___wmul@product
  9950   0045EE  CFF4 F007          	movff	prodh,___wmul@product+1
  9951   0045F2  5002               	movf	___wmul@multiplier^0,w,c
  9952   0045F4  0205               	mulwf	(___wmul@multiplicand+1)^0,c
  9953   0045F6  50F3               	movf	243,w,c
  9954   0045F8  2607               	addwf	(___wmul@product+1)^0,f,c
  9955   0045FA  5003               	movf	(___wmul@multiplier+1)^0,w,c
  9956   0045FC  0204               	mulwf	___wmul@multiplicand^0,c
  9957   0045FE  50F3               	movf	243,w,c
  9958   004600  2607               	addwf	(___wmul@product+1)^0,f,c
  9959   004602  C006  F002         	movff	___wmul@product,?___wmul
  9960   004606  C007  F003         	movff	___wmul@product+1,?___wmul+1
  9961   00460A  0012               	return		;funcret
  9962   00460C                     __end_of___wmul:
  9963                           	callstack 0
  9964                           
  9965 ;; *************** function _dtoa *****************
  9966 ;; Defined at:
  9967 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  9968 ;; Parameters:    Size  Location     Type
  9969 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
  9970 ;;		 -> sprintf@f(12), 
  9971 ;;  d               2   24[COMRAM] int 
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;  i               2   32[COMRAM] int 
  9974 ;;  w               2   29[COMRAM] int 
  9975 ;;  s               1   31[COMRAM] unsigned char 
  9976 ;;  p               1   28[COMRAM] _Bool 
  9977 ;; Return value:  Size  Location     Type
  9978 ;;                  1    wreg      void 
  9979 ;; Registers used:
  9980 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9986 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9987 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9989 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9990 ;;Total ram usage:       11 bytes
  9991 ;; Hardware stack levels used: 1
  9992 ;; Hardware stack levels required when called: 5
  9993 ;; This function calls:
  9994 ;;		___awdiv
  9995 ;;		___awmod
  9996 ;;		_abs
  9997 ;;		_pad
  9998 ;; This function is called by:
  9999 ;;		_vfpfcnvrt
 10000 ;; This function uses a non-reentrant model
 10001 ;;
 10002                           
 10003                           	psect	text52
 10004   002D2C                     __ptext52:
 10005                           	callstack 0
 10006   002D2C                     _dtoa:
 10007                           	callstack 21
 10008   002D2C                     
 10009                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
 10010   002D2C  0E01               	movlw	1
 10011   002D2E  6E1D               	movwf	dtoa@p^0,c
 10012   002D30                     
 10013                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
 10014   002D30  BE1A               	btfsc	(dtoa@d+1)^0,7,c
 10015   002D32  EF9D  F016         	goto	u4761
 10016   002D36  EFA0  F016         	goto	u4760
 10017   002D3A                     u4761:
 10018   002D3A  0E01               	movlw	1
 10019   002D3C  EFA1  F016         	goto	u4770
 10020   002D40                     u4760:
 10021   002D40  0E00               	movlw	0
 10022   002D42                     u4770:
 10023   002D42  6E20               	movwf	dtoa@s^0,c
 10024   002D44                     
 10025                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
 10026   002D44  C0C6  F01E         	movff	_width,dtoa@w
 10027   002D48  C0C7  F01F         	movff	_width+1,dtoa@w+1
 10028   002D4C                     
 10029                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
 10030   002D4C  5020               	movf	dtoa@s^0,w,c
 10031   002D4E  B4D8               	btfsc	status,2,c
 10032   002D50  EFAC  F016         	goto	u4781
 10033   002D54  EFAE  F016         	goto	u4780
 10034   002D58                     u4781:
 10035   002D58  EFC5  F016         	goto	l1382
 10036   002D5C                     u4780:
 10037   002D5C                     
 10038                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
 10039   002D5C  061E               	decf	dtoa@w^0,f,c
 10040   002D5E  A0D8               	btfss	status,0,c
 10041   002D60  061F               	decf	(dtoa@w+1)^0,f,c
 10042   002D62                     
 10043                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
 10044   002D62  5020               	movf	dtoa@s^0,w,c
 10045   002D64  A4D8               	btfss	status,2,c
 10046   002D66  EFB7  F016         	goto	u4791
 10047   002D6A  EFB9  F016         	goto	u4790
 10048   002D6E                     u4791:
 10049   002D6E  EFBF  F016         	goto	l5356
 10050   002D72                     u4790:
 10051   002D72  0E00               	movlw	0
 10052   002D74  6E1C               	movwf	(_dtoa$3111+1)^0,c
 10053   002D76  0E2B               	movlw	43
 10054   002D78  6E1B               	movwf	_dtoa$3111^0,c
 10055   002D7A  EFC3  F016         	goto	l5358
 10056   002D7E                     l5356:
 10057   002D7E  0E00               	movlw	0
 10058   002D80  6E1C               	movwf	(_dtoa$3111+1)^0,c
 10059   002D82  0E2D               	movlw	45
 10060   002D84  6E1B               	movwf	_dtoa$3111^0,c
 10061   002D86                     l5358:
 10062   002D86  C01B  F020         	movff	_dtoa$3111,dtoa@s
 10063   002D8A                     l1382:
 10064                           
 10065                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
 10066   002D8A  0E00               	movlw	0
 10067   002D8C  6E22               	movwf	(dtoa@i+1)^0,c
 10068   002D8E  0E1F               	movlw	31
 10069   002D90  6E21               	movwf	dtoa@i^0,c
 10070   002D92                     
 10071                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
 10072   002D92  0E00               	movlw	0
 10073   002D94  0101               	movlb	1	; () banked
 10074   002D96  6F83               	movwf	(_dbuf+31)& (0+255),b
 10075                           
 10076                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10077   002D98  EFFD  F016         	goto	l5372
 10078   002D9C                     l5362:
 10079                           
 10080                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
 10081   002D9C  0621               	decf	dtoa@i^0,f,c
 10082   002D9E  A0D8               	btfss	status,0,c
 10083   002DA0  0622               	decf	(dtoa@i+1)^0,f,c
 10084   002DA2                     
 10085                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
 10086   002DA2  0E64               	movlw	low _dbuf
 10087   002DA4  2421               	addwf	dtoa@i^0,w,c
 10088   002DA6  6ED9               	movwf	fsr2l,c
 10089   002DA8  0E01               	movlw	high _dbuf
 10090   002DAA  2022               	addwfc	(dtoa@i+1)^0,w,c
 10091   002DAC  6EDA               	movwf	fsr2h,c
 10092   002DAE  C019  F002         	movff	dtoa@d,___awmod@dividend
 10093   002DB2  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
 10094   002DB6  0E00               	movlw	0
 10095   002DB8  6E05               	movwf	(___awmod@divisor+1)^0,c
 10096   002DBA  0E0A               	movlw	10
 10097   002DBC  6E04               	movwf	___awmod@divisor^0,c
 10098   002DBE  EC2A  F01B         	call	___awmod	;wreg free
 10099   002DC2  C002  F008         	movff	?___awmod,abs@a
 10100   002DC6  C003  F009         	movff	?___awmod+1,abs@a+1
 10101   002DCA  ECBE  F021         	call	_abs	;wreg free
 10102   002DCE  5008               	movf	?_abs^0,w,c
 10103   002DD0  0F30               	addlw	48
 10104   002DD2  6EDF               	movwf	indf2,c
 10105   002DD4                     
 10106                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
 10107   002DD4  0E00               	movlw	0
 10108   002DD6  6E1D               	movwf	dtoa@p^0,c
 10109   002DD8                     
 10110                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
 10111   002DD8  061E               	decf	dtoa@w^0,f,c
 10112   002DDA  A0D8               	btfss	status,0,c
 10113   002DDC  061F               	decf	(dtoa@w+1)^0,f,c
 10114   002DDE                     
 10115                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
 10116   002DDE  C019  F002         	movff	dtoa@d,___awdiv@dividend
 10117   002DE2  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
 10118   002DE6  0E00               	movlw	0
 10119   002DE8  6E05               	movwf	(___awdiv@divisor+1)^0,c
 10120   002DEA  0E0A               	movlw	10
 10121   002DEC  6E04               	movwf	___awdiv@divisor^0,c
 10122   002DEE  EC68  F01A         	call	___awdiv	;wreg free
 10123   002DF2  C002  F019         	movff	?___awdiv,dtoa@d
 10124   002DF6  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
 10125   002DFA                     l5372:
 10126                           
 10127                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10128   002DFA  BE22               	btfsc	(dtoa@i+1)^0,7,c
 10129   002DFC  EF08  F017         	goto	u4801
 10130   002E00  5022               	movf	(dtoa@i+1)^0,w,c
 10131   002E02  E108               	bnz	u4800
 10132   002E04  0421               	decf	dtoa@i^0,w,c
 10133   002E06  A0D8               	btfss	status,0,c
 10134   002E08  EF08  F017         	goto	u4801
 10135   002E0C  EF0A  F017         	goto	u4800
 10136   002E10                     u4801:
 10137   002E10  EF30  F017         	goto	l5382
 10138   002E14                     u4800:
 10139   002E14  5019               	movf	dtoa@d^0,w,c
 10140   002E16  101A               	iorwf	(dtoa@d+1)^0,w,c
 10141   002E18  A4D8               	btfss	status,2,c
 10142   002E1A  EF11  F017         	goto	u4811
 10143   002E1E  EF13  F017         	goto	u4810
 10144   002E22                     u4811:
 10145   002E22  EFCE  F016         	goto	l5362
 10146   002E26                     u4810:
 10147   002E26  501D               	movf	dtoa@p^0,w,c
 10148   002E28  A4D8               	btfss	status,2,c
 10149   002E2A  EF19  F017         	goto	u4821
 10150   002E2E  EF1B  F017         	goto	u4820
 10151   002E32                     u4821:
 10152   002E32  EFCE  F016         	goto	l5362
 10153   002E36                     u4820:
 10154   002E36  BE1F               	btfsc	(dtoa@w+1)^0,7,c
 10155   002E38  EF26  F017         	goto	u4831
 10156   002E3C  501F               	movf	(dtoa@w+1)^0,w,c
 10157   002E3E  E108               	bnz	u4830
 10158   002E40  041E               	decf	dtoa@w^0,w,c
 10159   002E42  A0D8               	btfss	status,0,c
 10160   002E44  EF26  F017         	goto	u4831
 10161   002E48  EF28  F017         	goto	u4830
 10162   002E4C                     u4831:
 10163   002E4C  EF30  F017         	goto	l5382
 10164   002E50                     u4830:
 10165   002E50  0100               	movlb	0	; () banked
 10166   002E52  B3CA               	btfsc	_flags& (0+255),1,b
 10167   002E54  EF2E  F017         	goto	u4841
 10168   002E58  EF30  F017         	goto	u4840
 10169   002E5C                     u4841:
 10170   002E5C  EFCE  F016         	goto	l5362
 10171   002E60                     u4840:
 10172   002E60                     l5382:
 10173                           
 10174                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 10175   002E60  5020               	movf	dtoa@s^0,w,c
 10176   002E62  B4D8               	btfsc	status,2,c
 10177   002E64  EF36  F017         	goto	u4851
 10178   002E68  EF38  F017         	goto	u4850
 10179   002E6C                     u4851:
 10180   002E6C  EF43  F017         	goto	l5388
 10181   002E70                     u4850:
 10182   002E70                     
 10183                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 10184   002E70  0621               	decf	dtoa@i^0,f,c
 10185   002E72  A0D8               	btfss	status,0,c
 10186   002E74  0622               	decf	(dtoa@i+1)^0,f,c
 10187   002E76                     
 10188                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 10189   002E76  0E64               	movlw	low _dbuf
 10190   002E78  2421               	addwf	dtoa@i^0,w,c
 10191   002E7A  6ED9               	movwf	fsr2l,c
 10192   002E7C  0E01               	movlw	high _dbuf
 10193   002E7E  2022               	addwfc	(dtoa@i+1)^0,w,c
 10194   002E80  6EDA               	movwf	fsr2h,c
 10195   002E82  C020  FFDF         	movff	dtoa@s,indf2
 10196   002E86                     l5388:
 10197                           
 10198                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 10199   002E86  C018  F010         	movff	dtoa@fp,pad@fp
 10200   002E8A  0E64               	movlw	low _dbuf
 10201   002E8C  2421               	addwf	dtoa@i^0,w,c
 10202   002E8E  6E11               	movwf	pad@buf^0,c
 10203   002E90  0E01               	movlw	high _dbuf
 10204   002E92  2022               	addwfc	(dtoa@i+1)^0,w,c
 10205   002E94  6E12               	movwf	(pad@buf+1)^0,c
 10206   002E96  C01E  F013         	movff	dtoa@w,pad@p
 10207   002E9A  C01F  F014         	movff	dtoa@w+1,pad@p+1
 10208   002E9E  EC83  F01C         	call	_pad	;wreg free
 10209   002EA2  0012               	return		;funcret
 10210   002EA4                     __end_of_dtoa:
 10211                           	callstack 0
 10212                           
 10213 ;; *************** function _pad *****************
 10214 ;; Defined at:
 10215 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 10218 ;;		 -> sprintf@f(12), 
 10219 ;;  buf             2   16[COMRAM] PTR unsigned char 
 10220 ;;		 -> dbuf(32), 
 10221 ;;  p               2   18[COMRAM] int 
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;  i               2   21[COMRAM] int 
 10224 ;; Return value:  Size  Location     Type
 10225 ;;                  1    wreg      void 
 10226 ;; Registers used:
 10227 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10228 ;; Tracked objects:
 10229 ;;		On entry : 0/0
 10230 ;;		On exit  : 0/0
 10231 ;;		Unchanged: 0/0
 10232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10233 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10234 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10235 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10236 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10237 ;;Total ram usage:        8 bytes
 10238 ;; Hardware stack levels used: 1
 10239 ;; Hardware stack levels required when called: 4
 10240 ;; This function calls:
 10241 ;;		_fputc
 10242 ;;		_fputs
 10243 ;; This function is called by:
 10244 ;;		_dtoa
 10245 ;; This function uses a non-reentrant model
 10246 ;;
 10247                           
 10248                           	psect	text53
 10249   003906                     __ptext53:
 10250                           	callstack 0
 10251   003906                     _pad:
 10252                           	callstack 21
 10253   003906                     
 10254                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 10255   003906  0100               	movlb	0	; () banked
 10256   003908  A1CA               	btfss	_flags& (0+255),0,b
 10257   00390A  EF89  F01C         	goto	u4711
 10258   00390E  EF8B  F01C         	goto	u4710
 10259   003912                     u4711:
 10260   003912  EF93  F01C         	goto	l5326
 10261   003916                     u4710:
 10262   003916                     
 10263                           ; BSR set to: 0
 10264                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 10265   003916  C011  F00A         	movff	pad@buf,fputs@s
 10266   00391A  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10267   00391E  C010  F00C         	movff	pad@fp,fputs@fp
 10268   003922  EC4E  F021         	call	_fputs	;wreg free
 10269   003926                     l5326:
 10270                           
 10271                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10272   003926  BE14               	btfsc	(pad@p+1)^0,7,c
 10273   003928  EF9A  F01C         	goto	u4720
 10274   00392C  EF98  F01C         	goto	u4721
 10275   003930                     u4721:
 10276   003930  EF9E  F01C         	goto	l1374
 10277   003934                     u4720:
 10278   003934                     
 10279                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10280   003934  0E00               	movlw	0
 10281   003936  6E14               	movwf	(pad@p+1)^0,c
 10282   003938  0E00               	movlw	0
 10283   00393A  6E13               	movwf	pad@p^0,c
 10284   00393C                     l1374:
 10285                           
 10286                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10287   00393C  0E00               	movlw	0
 10288   00393E  6E17               	movwf	(pad@i+1)^0,c
 10289   003940  0E00               	movlw	0
 10290   003942  6E16               	movwf	pad@i^0,c
 10291                           
 10292                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10293   003944  EFAE  F01C         	goto	l5334
 10294   003948                     l5330:
 10295                           
 10296                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10297   003948  0E00               	movlw	0
 10298   00394A  6E03               	movwf	(fputc@c+1)^0,c
 10299   00394C  0E20               	movlw	32
 10300   00394E  6E02               	movwf	fputc@c^0,c
 10301   003950  C010  F004         	movff	pad@fp,fputc@fp
 10302   003954  EC2E  F01C         	call	_fputc	;wreg free
 10303   003958                     
 10304                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10305   003958  4A16               	infsnz	pad@i^0,f,c
 10306   00395A  2A17               	incf	(pad@i+1)^0,f,c
 10307   00395C                     l5334:
 10308                           
 10309                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10310   00395C  5013               	movf	pad@p^0,w,c
 10311   00395E  5C16               	subwf	pad@i^0,w,c
 10312   003960  5017               	movf	(pad@i+1)^0,w,c
 10313   003962  0A80               	xorlw	128
 10314   003964  6E15               	movwf	??_pad^0,c
 10315   003966  5014               	movf	(pad@p+1)^0,w,c
 10316   003968  0A80               	xorlw	128
 10317   00396A  5815               	subwfb	??_pad^0,w,c
 10318   00396C  A0D8               	btfss	status,0,c
 10319   00396E  EFBB  F01C         	goto	u4731
 10320   003972  EFBD  F01C         	goto	u4730
 10321   003976                     u4731:
 10322   003976  EFA4  F01C         	goto	l5330
 10323   00397A                     u4730:
 10324   00397A                     
 10325                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10326   00397A  0100               	movlb	0	; () banked
 10327   00397C  B1CA               	btfsc	_flags& (0+255),0,b
 10328   00397E  EFC3  F01C         	goto	u4741
 10329   003982  EFC5  F01C         	goto	u4740
 10330   003986                     u4741:
 10331   003986  EFCD  F01C         	goto	l1379
 10332   00398A                     u4740:
 10333   00398A                     
 10334                           ; BSR set to: 0
 10335                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 10336   00398A  C011  F00A         	movff	pad@buf,fputs@s
 10337   00398E  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10338   003992  C010  F00C         	movff	pad@fp,fputs@fp
 10339   003996  EC4E  F021         	call	_fputs	;wreg free
 10340   00399A                     l1379:
 10341   00399A  0012               	return		;funcret
 10342   00399C                     __end_of_pad:
 10343                           	callstack 0
 10344                           
 10345 ;; *************** function _fputs *****************
 10346 ;; Defined at:
 10347 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;  s               2    9[COMRAM] PTR const unsigned char 
 10350 ;;		 -> dbuf(32), 
 10351 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 10352 ;;		 -> sprintf@f(12), 
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;  i               2   13[COMRAM] int 
 10355 ;;  c               1   12[COMRAM] unsigned char 
 10356 ;; Return value:  Size  Location     Type
 10357 ;;                  2    9[COMRAM] int 
 10358 ;; Registers used:
 10359 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10360 ;; Tracked objects:
 10361 ;;		On entry : 0/0
 10362 ;;		On exit  : 0/0
 10363 ;;		Unchanged: 0/0
 10364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10365 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10366 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10368 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10369 ;;Total ram usage:        6 bytes
 10370 ;; Hardware stack levels used: 1
 10371 ;; Hardware stack levels required when called: 3
 10372 ;; This function calls:
 10373 ;;		_fputc
 10374 ;; This function is called by:
 10375 ;;		_pad
 10376 ;; This function uses a non-reentrant model
 10377 ;;
 10378                           
 10379                           	psect	text54
 10380   00429C                     __ptext54:
 10381                           	callstack 0
 10382   00429C                     _fputs:
 10383                           	callstack 21
 10384   00429C  0E00               	movlw	0
 10385   00429E  6E0F               	movwf	(fputs@i+1)^0,c
 10386   0042A0  0E00               	movlw	0
 10387   0042A2  6E0E               	movwf	fputs@i^0,c
 10388   0042A4  EF5D  F021         	goto	l5234
 10389   0042A8                     l5230:
 10390   0042A8  C00D  F002         	movff	fputs@c,fputc@c
 10391   0042AC  6A03               	clrf	(fputc@c+1)^0,c
 10392   0042AE  C00C  F004         	movff	fputs@fp,fputc@fp
 10393   0042B2  EC2E  F01C         	call	_fputc	;wreg free
 10394   0042B6  4A0E               	infsnz	fputs@i^0,f,c
 10395   0042B8  2A0F               	incf	(fputs@i+1)^0,f,c
 10396   0042BA                     l5234:
 10397   0042BA  500E               	movf	fputs@i^0,w,c
 10398   0042BC  240A               	addwf	fputs@s^0,w,c
 10399   0042BE  6ED9               	movwf	fsr2l,c
 10400   0042C0  500F               	movf	(fputs@i+1)^0,w,c
 10401   0042C2  200B               	addwfc	(fputs@s+1)^0,w,c
 10402   0042C4  6EDA               	movwf	fsr2h,c
 10403   0042C6  50DF               	movf	indf2,w,c
 10404   0042C8  6E0D               	movwf	fputs@c^0,c
 10405   0042CA  500D               	movf	fputs@c^0,w,c
 10406   0042CC  A4D8               	btfss	status,2,c
 10407   0042CE  EF6B  F021         	goto	u4581
 10408   0042D2  EF6D  F021         	goto	u4580
 10409   0042D6                     u4581:
 10410   0042D6  EF54  F021         	goto	l5230
 10411   0042DA                     u4580:
 10412   0042DA  0012               	return		;funcret
 10413   0042DC                     __end_of_fputs:
 10414                           	callstack 0
 10415                           
 10416 ;; *************** function _fputc *****************
 10417 ;; Defined at:
 10418 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 10419 ;; Parameters:    Size  Location     Type
 10420 ;;  c               2    1[COMRAM] int 
 10421 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 10422 ;;		 -> sprintf@f(12), 
 10423 ;; Auto vars:     Size  Location     Type
 10424 ;;		None
 10425 ;; Return value:  Size  Location     Type
 10426 ;;                  2    1[COMRAM] int 
 10427 ;; Registers used:
 10428 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10429 ;; Tracked objects:
 10430 ;;		On entry : 0/0
 10431 ;;		On exit  : 0/0
 10432 ;;		Unchanged: 0/0
 10433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10434 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10436 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10437 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10438 ;;Total ram usage:        8 bytes
 10439 ;; Hardware stack levels used: 1
 10440 ;; Hardware stack levels required when called: 2
 10441 ;; This function calls:
 10442 ;;		_putch
 10443 ;; This function is called by:
 10444 ;;		_pad
 10445 ;;		_vfpfcnvrt
 10446 ;;		_fputs
 10447 ;; This function uses a non-reentrant model
 10448 ;;
 10449                           
 10450                           	psect	text55
 10451   00385C                     __ptext55:
 10452                           	callstack 0
 10453   00385C                     _fputc:
 10454                           	callstack 24
 10455   00385C  5004               	movf	fputc@fp^0,w,c
 10456   00385E  B4D8               	btfsc	status,2,c
 10457   003860  EF34  F01C         	goto	u4541
 10458   003864  EF36  F01C         	goto	u4540
 10459   003868                     u4541:
 10460   003868  EF3E  F01C         	goto	l5218
 10461   00386C                     u4540:
 10462   00386C  5004               	movf	fputc@fp^0,w,c
 10463   00386E  A4D8               	btfss	status,2,c
 10464   003870  EF3C  F01C         	goto	u4551
 10465   003874  EF3E  F01C         	goto	u4550
 10466   003878                     u4551:
 10467   003878  EF43  F01C         	goto	l5220
 10468   00387C                     u4550:
 10469   00387C                     l5218:
 10470   00387C  5002               	movf	fputc@c^0,w,c
 10471   00387E  EC73  F023         	call	_putch
 10472   003882  EF82  F01C         	goto	l1443
 10473   003886                     l5220:
 10474   003886  5004               	movf	fputc@fp^0,w,c
 10475   003888  6ED9               	movwf	fsr2l,c
 10476   00388A  6ADA               	clrf	fsr2h,c
 10477   00388C  0E0A               	movlw	10
 10478   00388E  26D9               	addwf	fsr2l,f,c
 10479   003890  50DE               	movf	postinc2,w,c
 10480   003892  10DE               	iorwf	postinc2,w,c
 10481   003894  B4D8               	btfsc	status,2,c
 10482   003896  EF4F  F01C         	goto	u4561
 10483   00389A  EF51  F01C         	goto	u4560
 10484   00389E                     u4561:
 10485   00389E  EF6A  F01C         	goto	l5224
 10486   0038A2                     u4560:
 10487   0038A2  5004               	movf	fputc@fp^0,w,c
 10488   0038A4  6ED9               	movwf	fsr2l,c
 10489   0038A6  6ADA               	clrf	fsr2h,c
 10490   0038A8  0E0A               	movlw	10
 10491   0038AA  26D9               	addwf	fsr2l,f,c
 10492   0038AC  5004               	movf	fputc@fp^0,w,c
 10493   0038AE  6EE1               	movwf	fsr1l,c
 10494   0038B0  6AE2               	clrf	fsr1h,c
 10495   0038B2  0E03               	movlw	3
 10496   0038B4  26E1               	addwf	fsr1l,f,c
 10497   0038B6  50DE               	movf	postinc2,w,c
 10498   0038B8  5CE6               	subwf	postinc1,w,c
 10499   0038BA  50E6               	movf	postinc1,w,c
 10500   0038BC  0A80               	xorlw	128
 10501   0038BE  6E09               	movwf	(??_fputc+4)^0,c
 10502   0038C0  50DE               	movf	postinc2,w,c
 10503   0038C2  0A80               	xorlw	128
 10504   0038C4  5809               	subwfb	(??_fputc+4)^0,w,c
 10505   0038C6  B0D8               	btfsc	status,0,c
 10506   0038C8  EF68  F01C         	goto	u4571
 10507   0038CC  EF6A  F01C         	goto	u4570
 10508   0038D0                     u4571:
 10509   0038D0  EF82  F01C         	goto	l1443
 10510   0038D4                     u4570:
 10511   0038D4                     l5224:
 10512   0038D4  5004               	movf	fputc@fp^0,w,c
 10513   0038D6  6ED9               	movwf	fsr2l,c
 10514   0038D8  6ADA               	clrf	fsr2h,c
 10515   0038DA  0E03               	movlw	3
 10516   0038DC  26D9               	addwf	fsr2l,f,c
 10517   0038DE  50DF               	movf	indf2,w,c
 10518   0038E0  6E05               	movwf	??_fputc^0,c
 10519   0038E2  5004               	movf	fputc@fp^0,w,c
 10520   0038E4  6ED9               	movwf	fsr2l,c
 10521   0038E6  6ADA               	clrf	fsr2h,c
 10522   0038E8  50DF               	movf	indf2,w,c
 10523   0038EA  2405               	addwf	??_fputc^0,w,c
 10524   0038EC  6ED9               	movwf	fsr2l,c
 10525   0038EE  6ADA               	clrf	fsr2h,c
 10526   0038F0  C002  FFDF         	movff	fputc@c,indf2
 10527   0038F4  5004               	movf	fputc@fp^0,w,c
 10528   0038F6  6ED9               	movwf	fsr2l,c
 10529   0038F8  6ADA               	clrf	fsr2h,c
 10530   0038FA  0E03               	movlw	3
 10531   0038FC  26D9               	addwf	fsr2l,f,c
 10532   0038FE  2ADE               	incf	postinc2,f,c
 10533   003900  0E00               	movlw	0
 10534   003902  22DD               	addwfc	postdec2,f,c
 10535   003904                     l1443:
 10536   003904  0012               	return		;funcret
 10537   003906                     __end_of_fputc:
 10538                           	callstack 0
 10539                           
 10540 ;; *************** function _putch *****************
 10541 ;; Defined at:
 10542 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 10543 ;; Parameters:    Size  Location     Type
 10544 ;;  c               1    wreg     unsigned char 
 10545 ;; Auto vars:     Size  Location     Type
 10546 ;;  c               1    0[COMRAM] unsigned char 
 10547 ;; Return value:  Size  Location     Type
 10548 ;;                  1    wreg      void 
 10549 ;; Registers used:
 10550 ;;		wreg
 10551 ;; Tracked objects:
 10552 ;;		On entry : 0/0
 10553 ;;		On exit  : 0/0
 10554 ;;		Unchanged: 0/0
 10555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10560 ;;Total ram usage:        0 bytes
 10561 ;; Hardware stack levels used: 1
 10562 ;; Hardware stack levels required when called: 1
 10563 ;; This function calls:
 10564 ;;		Nothing
 10565 ;; This function is called by:
 10566 ;;		_fputc
 10567 ;; This function uses a non-reentrant model
 10568 ;;
 10569                           
 10570                           	psect	text56
 10571   0046E6                     __ptext56:
 10572                           	callstack 0
 10573   0046E6                     _putch:
 10574                           	callstack 24
 10575   0046E6  0012               	return		;funcret
 10576   0046E8                     __end_of_putch:
 10577                           	callstack 0
 10578                           
 10579 ;; *************** function _abs *****************
 10580 ;; Defined at:
 10581 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;  a               2    7[COMRAM] int 
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;		None
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  2    7[COMRAM] int 
 10588 ;; Registers used:
 10589 ;;		wreg, status,2, status,0
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10598 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10599 ;;Total ram usage:        4 bytes
 10600 ;; Hardware stack levels used: 1
 10601 ;; Hardware stack levels required when called: 1
 10602 ;; This function calls:
 10603 ;;		Nothing
 10604 ;; This function is called by:
 10605 ;;		_dtoa
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           	psect	text57
 10610   00437C                     __ptext57:
 10611                           	callstack 0
 10612   00437C                     _abs:
 10613                           	callstack 24
 10614   00437C  BE09               	btfsc	(abs@a+1)^0,7,c
 10615   00437E  EFC3  F021         	goto	u4751
 10616   004382  EFC5  F021         	goto	u4750
 10617   004386                     u4751:
 10618   004386  EFCB  F021         	goto	l1428
 10619   00438A                     u4750:
 10620   00438A  C008  F008         	movff	abs@a,?_abs
 10621   00438E  C009  F009         	movff	abs@a+1,?_abs+1
 10622   004392  EFD7  F021         	goto	l1431
 10623   004396                     l1428:
 10624   004396  C008  F00A         	movff	abs@a,??_abs
 10625   00439A  C009  F00B         	movff	abs@a+1,??_abs+1
 10626   00439E  1E0A               	comf	??_abs^0,f,c
 10627   0043A0  1E0B               	comf	(??_abs+1)^0,f,c
 10628   0043A2  4A0A               	infsnz	??_abs^0,f,c
 10629   0043A4  2A0B               	incf	(??_abs+1)^0,f,c
 10630   0043A6  C00A  F008         	movff	??_abs,?_abs
 10631   0043AA  C00B  F009         	movff	??_abs+1,?_abs+1
 10632   0043AE                     l1431:
 10633   0043AE  0012               	return		;funcret
 10634   0043B0                     __end_of_abs:
 10635                           	callstack 0
 10636                           
 10637 ;; *************** function ___awmod *****************
 10638 ;; Defined at:
 10639 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 10640 ;; Parameters:    Size  Location     Type
 10641 ;;  dividend        2    1[COMRAM] int 
 10642 ;;  divisor         2    3[COMRAM] int 
 10643 ;; Auto vars:     Size  Location     Type
 10644 ;;  sign            1    6[COMRAM] unsigned char 
 10645 ;;  counter         1    5[COMRAM] unsigned char 
 10646 ;; Return value:  Size  Location     Type
 10647 ;;                  2    1[COMRAM] int 
 10648 ;; Registers used:
 10649 ;;		wreg, status,2, status,0
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10655 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10656 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10658 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10659 ;;Total ram usage:        6 bytes
 10660 ;; Hardware stack levels used: 1
 10661 ;; Hardware stack levels required when called: 1
 10662 ;; This function calls:
 10663 ;;		Nothing
 10664 ;; This function is called by:
 10665 ;;		_dtoa
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text58
 10670   003654                     __ptext58:
 10671                           	callstack 0
 10672   003654                     ___awmod:
 10673                           	callstack 24
 10674   003654  0E00               	movlw	0
 10675   003656  6E07               	movwf	___awmod@sign^0,c
 10676   003658  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 10677   00365A  EF33  F01B         	goto	u4650
 10678   00365E  EF31  F01B         	goto	u4651
 10679   003662                     u4651:
 10680   003662  EF39  F01B         	goto	l5294
 10681   003666                     u4650:
 10682   003666  6C02               	negf	___awmod@dividend^0,c
 10683   003668  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10684   00366A  B0D8               	btfsc	status,0,c
 10685   00366C  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10686   00366E  0E01               	movlw	1
 10687   003670  6E07               	movwf	___awmod@sign^0,c
 10688   003672                     l5294:
 10689   003672  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 10690   003674  EF40  F01B         	goto	u4660
 10691   003678  EF3E  F01B         	goto	u4661
 10692   00367C                     u4661:
 10693   00367C  EF44  F01B         	goto	l5298
 10694   003680                     u4660:
 10695   003680  6C04               	negf	___awmod@divisor^0,c
 10696   003682  1E05               	comf	(___awmod@divisor+1)^0,f,c
 10697   003684  B0D8               	btfsc	status,0,c
 10698   003686  2A05               	incf	(___awmod@divisor+1)^0,f,c
 10699   003688                     l5298:
 10700   003688  5004               	movf	___awmod@divisor^0,w,c
 10701   00368A  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 10702   00368C  B4D8               	btfsc	status,2,c
 10703   00368E  EF4B  F01B         	goto	u4671
 10704   003692  EF4D  F01B         	goto	u4670
 10705   003696                     u4671:
 10706   003696  EF71  F01B         	goto	l5314
 10707   00369A                     u4670:
 10708   00369A  0E01               	movlw	1
 10709   00369C  6E06               	movwf	___awmod@counter^0,c
 10710   00369E  EF55  F01B         	goto	l5304
 10711   0036A2                     l5302:
 10712   0036A2  90D8               	bcf	status,0,c
 10713   0036A4  3604               	rlcf	___awmod@divisor^0,f,c
 10714   0036A6  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 10715   0036A8  2A06               	incf	___awmod@counter^0,f,c
 10716   0036AA                     l5304:
 10717   0036AA  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 10718   0036AC  EF5A  F01B         	goto	u4681
 10719   0036B0  EF5C  F01B         	goto	u4680
 10720   0036B4                     u4681:
 10721   0036B4  EF51  F01B         	goto	l5302
 10722   0036B8                     u4680:
 10723   0036B8                     l5306:
 10724   0036B8  5004               	movf	___awmod@divisor^0,w,c
 10725   0036BA  5C02               	subwf	___awmod@dividend^0,w,c
 10726   0036BC  5005               	movf	(___awmod@divisor+1)^0,w,c
 10727   0036BE  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 10728   0036C0  A0D8               	btfss	status,0,c
 10729   0036C2  EF65  F01B         	goto	u4691
 10730   0036C6  EF67  F01B         	goto	u4690
 10731   0036CA                     u4691:
 10732   0036CA  EF6B  F01B         	goto	l5310
 10733   0036CE                     u4690:
 10734   0036CE  5004               	movf	___awmod@divisor^0,w,c
 10735   0036D0  5E02               	subwf	___awmod@dividend^0,f,c
 10736   0036D2  5005               	movf	(___awmod@divisor+1)^0,w,c
 10737   0036D4  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 10738   0036D6                     l5310:
 10739   0036D6  90D8               	bcf	status,0,c
 10740   0036D8  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 10741   0036DA  3204               	rrcf	___awmod@divisor^0,f,c
 10742   0036DC  2E06               	decfsz	___awmod@counter^0,f,c
 10743   0036DE  EF5C  F01B         	goto	l5306
 10744   0036E2                     l5314:
 10745   0036E2  5007               	movf	___awmod@sign^0,w,c
 10746   0036E4  B4D8               	btfsc	status,2,c
 10747   0036E6  EF77  F01B         	goto	u4701
 10748   0036EA  EF79  F01B         	goto	u4700
 10749   0036EE                     u4701:
 10750   0036EE  EF7D  F01B         	goto	l5318
 10751   0036F2                     u4700:
 10752   0036F2  6C02               	negf	___awmod@dividend^0,c
 10753   0036F4  1E03               	comf	(___awmod@dividend+1)^0,f,c
 10754   0036F6  B0D8               	btfsc	status,0,c
 10755   0036F8  2A03               	incf	(___awmod@dividend+1)^0,f,c
 10756   0036FA                     l5318:
 10757   0036FA  C002  F002         	movff	___awmod@dividend,?___awmod
 10758   0036FE  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 10759   003702  0012               	return		;funcret
 10760   003704                     __end_of___awmod:
 10761                           	callstack 0
 10762                           
 10763 ;; *************** function ___awdiv *****************
 10764 ;; Defined at:
 10765 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10766 ;; Parameters:    Size  Location     Type
 10767 ;;  dividend        2    1[COMRAM] int 
 10768 ;;  divisor         2    3[COMRAM] int 
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  quotient        2    7[COMRAM] int 
 10771 ;;  sign            1    6[COMRAM] unsigned char 
 10772 ;;  counter         1    5[COMRAM] unsigned char 
 10773 ;; Return value:  Size  Location     Type
 10774 ;;                  2    1[COMRAM] int 
 10775 ;; Registers used:
 10776 ;;		wreg, status,2, status,0
 10777 ;; Tracked objects:
 10778 ;;		On entry : 0/0
 10779 ;;		On exit  : 0/0
 10780 ;;		Unchanged: 0/0
 10781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10782 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10783 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10785 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10786 ;;Total ram usage:        8 bytes
 10787 ;; Hardware stack levels used: 1
 10788 ;; Hardware stack levels required when called: 1
 10789 ;; This function calls:
 10790 ;;		Nothing
 10791 ;; This function is called by:
 10792 ;;		_dtoa
 10793 ;; This function uses a non-reentrant model
 10794 ;;
 10795                           
 10796                           	psect	text59
 10797   0034D0                     __ptext59:
 10798                           	callstack 0
 10799   0034D0                     ___awdiv:
 10800                           	callstack 24
 10801   0034D0  0E00               	movlw	0
 10802   0034D2  6E07               	movwf	___awdiv@sign^0,c
 10803   0034D4  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 10804   0034D6  EF71  F01A         	goto	u4590
 10805   0034DA  EF6F  F01A         	goto	u4591
 10806   0034DE                     u4591:
 10807   0034DE  EF77  F01A         	goto	l5250
 10808   0034E2                     u4590:
 10809   0034E2  6C04               	negf	___awdiv@divisor^0,c
 10810   0034E4  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 10811   0034E6  B0D8               	btfsc	status,0,c
 10812   0034E8  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 10813   0034EA  0E01               	movlw	1
 10814   0034EC  6E07               	movwf	___awdiv@sign^0,c
 10815   0034EE                     l5250:
 10816   0034EE  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 10817   0034F0  EF7E  F01A         	goto	u4600
 10818   0034F4  EF7C  F01A         	goto	u4601
 10819   0034F8                     u4601:
 10820   0034F8  EF84  F01A         	goto	l5256
 10821   0034FC                     u4600:
 10822   0034FC  6C02               	negf	___awdiv@dividend^0,c
 10823   0034FE  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 10824   003500  B0D8               	btfsc	status,0,c
 10825   003502  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 10826   003504  0E01               	movlw	1
 10827   003506  1A07               	xorwf	___awdiv@sign^0,f,c
 10828   003508                     l5256:
 10829   003508  0E00               	movlw	0
 10830   00350A  6E09               	movwf	(___awdiv@quotient+1)^0,c
 10831   00350C  0E00               	movlw	0
 10832   00350E  6E08               	movwf	___awdiv@quotient^0,c
 10833   003510  5004               	movf	___awdiv@divisor^0,w,c
 10834   003512  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 10835   003514  B4D8               	btfsc	status,2,c
 10836   003516  EF8F  F01A         	goto	u4611
 10837   00351A  EF91  F01A         	goto	u4610
 10838   00351E                     u4611:
 10839   00351E  EFB9  F01A         	goto	l5278
 10840   003522                     u4610:
 10841   003522  0E01               	movlw	1
 10842   003524  6E06               	movwf	___awdiv@counter^0,c
 10843   003526  EF99  F01A         	goto	l5264
 10844   00352A                     l5262:
 10845   00352A  90D8               	bcf	status,0,c
 10846   00352C  3604               	rlcf	___awdiv@divisor^0,f,c
 10847   00352E  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 10848   003530  2A06               	incf	___awdiv@counter^0,f,c
 10849   003532                     l5264:
 10850   003532  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 10851   003534  EF9E  F01A         	goto	u4621
 10852   003538  EFA0  F01A         	goto	u4620
 10853   00353C                     u4621:
 10854   00353C  EF95  F01A         	goto	l5262
 10855   003540                     u4620:
 10856   003540                     l5266:
 10857   003540  90D8               	bcf	status,0,c
 10858   003542  3608               	rlcf	___awdiv@quotient^0,f,c
 10859   003544  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 10860   003546  5004               	movf	___awdiv@divisor^0,w,c
 10861   003548  5C02               	subwf	___awdiv@dividend^0,w,c
 10862   00354A  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10863   00354C  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 10864   00354E  A0D8               	btfss	status,0,c
 10865   003550  EFAC  F01A         	goto	u4631
 10866   003554  EFAE  F01A         	goto	u4630
 10867   003558                     u4631:
 10868   003558  EFB3  F01A         	goto	l5274
 10869   00355C                     u4630:
 10870   00355C  5004               	movf	___awdiv@divisor^0,w,c
 10871   00355E  5E02               	subwf	___awdiv@dividend^0,f,c
 10872   003560  5005               	movf	(___awdiv@divisor+1)^0,w,c
 10873   003562  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 10874   003564  8008               	bsf	___awdiv@quotient^0,0,c
 10875   003566                     l5274:
 10876   003566  90D8               	bcf	status,0,c
 10877   003568  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 10878   00356A  3204               	rrcf	___awdiv@divisor^0,f,c
 10879   00356C  2E06               	decfsz	___awdiv@counter^0,f,c
 10880   00356E  EFA0  F01A         	goto	l5266
 10881   003572                     l5278:
 10882   003572  5007               	movf	___awdiv@sign^0,w,c
 10883   003574  B4D8               	btfsc	status,2,c
 10884   003576  EFBF  F01A         	goto	u4641
 10885   00357A  EFC1  F01A         	goto	u4640
 10886   00357E                     u4641:
 10887   00357E  EFC5  F01A         	goto	l5282
 10888   003582                     u4640:
 10889   003582  6C08               	negf	___awdiv@quotient^0,c
 10890   003584  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 10891   003586  B0D8               	btfsc	status,0,c
 10892   003588  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 10893   00358A                     l5282:
 10894   00358A  C008  F002         	movff	___awdiv@quotient,?___awdiv
 10895   00358E  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 10896   003592  0012               	return		;funcret
 10897   003594                     __end_of___awdiv:
 10898                           	callstack 0
 10899                           
 10900 ;; *************** function _sendStringSerial4 *****************
 10901 ;; Defined at:
 10902 ;;		line 41 in file "serial.c"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;  string          1    2[COMRAM] PTR unsigned char 
 10905 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
 10906 ;; Auto vars:     Size  Location     Type
 10907 ;;		None
 10908 ;; Return value:  Size  Location     Type
 10909 ;;                  1    wreg      void 
 10910 ;; Registers used:
 10911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10912 ;; Tracked objects:
 10913 ;;		On entry : 0/0
 10914 ;;		On exit  : 0/0
 10915 ;;		Unchanged: 0/0
 10916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10917 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10920 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10921 ;;Total ram usage:        1 bytes
 10922 ;; Hardware stack levels used: 1
 10923 ;; Hardware stack levels required when called: 2
 10924 ;; This function calls:
 10925 ;;		_sendCharSerial4
 10926 ;; This function is called by:
 10927 ;;		_calibration_routine
 10928 ;;		_send2USART
 10929 ;;		_sendAllReadings
 10930 ;; This function uses a non-reentrant model
 10931 ;;
 10932                           
 10933                           	psect	text60
 10934   0044AA                     __ptext60:
 10935                           	callstack 0
 10936   0044AA                     _sendStringSerial4:
 10937                           	callstack 27
 10938   0044AA                     
 10939                           ;serial.c: 44:     while(*string != 0){
 10940   0044AA  EF62  F022         	goto	l5634
 10941   0044AE                     l5628:
 10942                           
 10943                           ;serial.c: 46:   sendCharSerial4(*string++);
 10944   0044AE  5003               	movf	sendStringSerial4@string^0,w,c
 10945   0044B0  6ED9               	movwf	fsr2l,c
 10946   0044B2  6ADA               	clrf	fsr2h,c
 10947   0044B4  50DF               	movf	indf2,w,c
 10948   0044B6  EC52  F023         	call	_sendCharSerial4
 10949   0044BA  2A03               	incf	sendStringSerial4@string^0,f,c
 10950   0044BC                     
 10951                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 10952   0044BC  0E6A               	movlw	106
 10953   0044BE                     u5887:
 10954   0044BE  2EE8               	decfsz	wreg,f,c
 10955   0044C0  D7FE               	bra	u5887
 10956   0044C2  D000               	nop2	
 10957   0044C4                     l5634:
 10958                           
 10959                           ;serial.c: 44:     while(*string != 0){
 10960   0044C4  5003               	movf	sendStringSerial4@string^0,w,c
 10961   0044C6  6ED9               	movwf	fsr2l,c
 10962   0044C8  6ADA               	clrf	fsr2h,c
 10963   0044CA  50DF               	movf	indf2,w,c
 10964   0044CC  A4D8               	btfss	status,2,c
 10965   0044CE  EF6B  F022         	goto	u5081
 10966   0044D2  EF6D  F022         	goto	u5080
 10967   0044D6                     u5081:
 10968   0044D6  EF57  F022         	goto	l5628
 10969   0044DA                     u5080:
 10970   0044DA  0012               	return		;funcret
 10971   0044DC                     __end_of_sendStringSerial4:
 10972                           	callstack 0
 10973                           
 10974 ;; *************** function _sendCharSerial4 *****************
 10975 ;; Defined at:
 10976 ;;		line 35 in file "serial.c"
 10977 ;; Parameters:    Size  Location     Type
 10978 ;;  charToSend      1    wreg     unsigned char 
 10979 ;; Auto vars:     Size  Location     Type
 10980 ;;  charToSend      1    1[COMRAM] unsigned char 
 10981 ;; Return value:  Size  Location     Type
 10982 ;;                  1    wreg      void 
 10983 ;; Registers used:
 10984 ;;		wreg
 10985 ;; Tracked objects:
 10986 ;;		On entry : 0/0
 10987 ;;		On exit  : 0/0
 10988 ;;		Unchanged: 0/0
 10989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10991 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10993 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10994 ;;Total ram usage:        1 bytes
 10995 ;; Hardware stack levels used: 1
 10996 ;; Hardware stack levels required when called: 1
 10997 ;; This function calls:
 10998 ;;		Nothing
 10999 ;; This function is called by:
 11000 ;;		_sendStringSerial4
 11001 ;; This function uses a non-reentrant model
 11002 ;;
 11003                           
 11004                           	psect	text61
 11005   0046A4                     __ptext61:
 11006                           	callstack 0
 11007   0046A4                     _sendCharSerial4:
 11008                           	callstack 27
 11009                           
 11010                           ;incstack = 0
 11011                           ;sendCharSerial4@charToSend stored from wreg
 11012   0046A4  6E02               	movwf	sendCharSerial4@charToSend^0,c
 11013   0046A6                     l581:
 11014   0046A6  010E               	movlb	14	; () banked
 11015   0046A8  A537               	btfss	55,2,b	;volatile
 11016   0046AA  EF59  F023         	goto	u5041
 11017   0046AE  EF5B  F023         	goto	u5040
 11018   0046B2                     u5041:
 11019   0046B2  EF53  F023         	goto	l581
 11020   0046B6                     u5040:
 11021   0046B6                     
 11022                           ; BSR set to: 14
 11023                           ;serial.c: 37:     TX4REG = charToSend;
 11024   0046B6  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 11025   0046BA                     
 11026                           ; BSR set to: 14
 11027   0046BA  0012               	return		;funcret
 11028   0046BC                     __end_of_sendCharSerial4:
 11029                           	callstack 0
 11030                           
 11031 ;; *************** function _color_read_Red *****************
 11032 ;; Defined at:
 11033 ;;		line 32 in file "color.c"
 11034 ;; Parameters:    Size  Location     Type
 11035 ;;		None
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;  tmp             2   10[COMRAM] unsigned int 
 11038 ;; Return value:  Size  Location     Type
 11039 ;;                  2    5[COMRAM] unsigned int 
 11040 ;; Registers used:
 11041 ;;		wreg, status,2, status,0, cstack
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11047 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11048 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11049 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11050 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11051 ;;Total ram usage:        7 bytes
 11052 ;; Hardware stack levels used: 1
 11053 ;; Hardware stack levels required when called: 3
 11054 ;; This function calls:
 11055 ;;		_I2C_2_Master_Read
 11056 ;;		_I2C_2_Master_RepStart
 11057 ;;		_I2C_2_Master_Start
 11058 ;;		_I2C_2_Master_Stop
 11059 ;;		_I2C_2_Master_Write
 11060 ;; This function is called by:
 11061 ;;		_reading_hue
 11062 ;;		_calibration_routine
 11063 ;; This function uses a non-reentrant model
 11064 ;;
 11065                           
 11066                           	psect	text62
 11067   00404C                     __ptext62:
 11068                           	callstack 0
 11069   00404C                     _color_read_Red:
 11070                           	callstack 26
 11071   00404C                     
 11072                           ;color.c: 34:  unsigned int tmp;;color.c: 35:  I2C_2_Master_Start();
 11073   00404C  EC69  F023         	call	_I2C_2_Master_Start	;wreg free
 11074                           
 11075                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
 11076   004050  0E52               	movlw	82
 11077   004052  EC5E  F023         	call	_I2C_2_Master_Write
 11078                           
 11079                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
 11080   004056  0EB6               	movlw	182
 11081   004058  EC5E  F023         	call	_I2C_2_Master_Write
 11082                           
 11083                           ;color.c: 38:  I2C_2_Master_RepStart();
 11084   00405C  EC6E  F023         	call	_I2C_2_Master_RepStart	;wreg free
 11085                           
 11086                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
 11087   004060  0E53               	movlw	83
 11088   004062  EC5E  F023         	call	_I2C_2_Master_Write
 11089                           
 11090                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
 11091   004066  0E01               	movlw	1
 11092   004068  EC2D  F021         	call	_I2C_2_Master_Read
 11093   00406C  6E08               	movwf	??_color_read_Red^0,c
 11094   00406E  5008               	movf	??_color_read_Red^0,w,c
 11095   004070  6E0B               	movwf	color_read_Red@tmp^0,c
 11096   004072  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 11097                           
 11098                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11099   004074  0E00               	movlw	0
 11100   004076  EC2D  F021         	call	_I2C_2_Master_Read
 11101   00407A  6E08               	movwf	??_color_read_Red^0,c
 11102   00407C  5008               	movf	??_color_read_Red^0,w,c
 11103   00407E  6E0A               	movwf	(??_color_read_Red+2)^0,c
 11104   004080  6A09               	clrf	(??_color_read_Red+1)^0,c
 11105   004082  500B               	movf	color_read_Red@tmp^0,w,c
 11106   004084  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 11107   004086  6E0B               	movwf	color_read_Red@tmp^0,c
 11108   004088  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 11109   00408A  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 11110   00408C  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 11111                           
 11112                           ;color.c: 42:  I2C_2_Master_Stop();
 11113   00408E  EC64  F023         	call	_I2C_2_Master_Stop	;wreg free
 11114   004092                     
 11115                           ;color.c: 43:  return tmp;
 11116   004092  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 11117   004096  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 11118   00409A  0012               	return		;funcret
 11119   00409C                     __end_of_color_read_Red:
 11120                           	callstack 0
 11121                           
 11122 ;; *************** function _color_read_Green *****************
 11123 ;; Defined at:
 11124 ;;		line 46 in file "color.c"
 11125 ;; Parameters:    Size  Location     Type
 11126 ;;		None
 11127 ;; Auto vars:     Size  Location     Type
 11128 ;;  tmp             2   10[COMRAM] unsigned int 
 11129 ;; Return value:  Size  Location     Type
 11130 ;;                  2    5[COMRAM] unsigned int 
 11131 ;; Registers used:
 11132 ;;		wreg, status,2, status,0, cstack
 11133 ;; Tracked objects:
 11134 ;;		On entry : 0/0
 11135 ;;		On exit  : 0/0
 11136 ;;		Unchanged: 0/0
 11137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11138 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11139 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11140 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11141 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11142 ;;Total ram usage:        7 bytes
 11143 ;; Hardware stack levels used: 1
 11144 ;; Hardware stack levels required when called: 3
 11145 ;; This function calls:
 11146 ;;		_I2C_2_Master_Read
 11147 ;;		_I2C_2_Master_RepStart
 11148 ;;		_I2C_2_Master_Start
 11149 ;;		_I2C_2_Master_Stop
 11150 ;;		_I2C_2_Master_Write
 11151 ;; This function is called by:
 11152 ;;		_reading_hue
 11153 ;;		_calibration_routine
 11154 ;; This function uses a non-reentrant model
 11155 ;;
 11156                           
 11157                           	psect	text63
 11158   00409C                     __ptext63:
 11159                           	callstack 0
 11160   00409C                     _color_read_Green:
 11161                           	callstack 26
 11162   00409C                     
 11163                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
 11164   00409C  EC69  F023         	call	_I2C_2_Master_Start	;wreg free
 11165                           
 11166                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
 11167   0040A0  0E52               	movlw	82
 11168   0040A2  EC5E  F023         	call	_I2C_2_Master_Write
 11169                           
 11170                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
 11171   0040A6  0EB8               	movlw	184
 11172   0040A8  EC5E  F023         	call	_I2C_2_Master_Write
 11173                           
 11174                           ;color.c: 52:  I2C_2_Master_RepStart();
 11175   0040AC  EC6E  F023         	call	_I2C_2_Master_RepStart	;wreg free
 11176                           
 11177                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
 11178   0040B0  0E53               	movlw	83
 11179   0040B2  EC5E  F023         	call	_I2C_2_Master_Write
 11180                           
 11181                           ;color.c: 54:  tmp=I2C_2_Master_Read(1);
 11182   0040B6  0E01               	movlw	1
 11183   0040B8  EC2D  F021         	call	_I2C_2_Master_Read
 11184   0040BC  6E08               	movwf	??_color_read_Green^0,c
 11185   0040BE  5008               	movf	??_color_read_Green^0,w,c
 11186   0040C0  6E0B               	movwf	color_read_Green@tmp^0,c
 11187   0040C2  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 11188                           
 11189                           ;color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11190   0040C4  0E00               	movlw	0
 11191   0040C6  EC2D  F021         	call	_I2C_2_Master_Read
 11192   0040CA  6E08               	movwf	??_color_read_Green^0,c
 11193   0040CC  5008               	movf	??_color_read_Green^0,w,c
 11194   0040CE  6E0A               	movwf	(??_color_read_Green+2)^0,c
 11195   0040D0  6A09               	clrf	(??_color_read_Green+1)^0,c
 11196   0040D2  500B               	movf	color_read_Green@tmp^0,w,c
 11197   0040D4  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 11198   0040D6  6E0B               	movwf	color_read_Green@tmp^0,c
 11199   0040D8  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 11200   0040DA  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 11201   0040DC  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 11202                           
 11203                           ;color.c: 56:  I2C_2_Master_Stop();
 11204   0040DE  EC64  F023         	call	_I2C_2_Master_Stop	;wreg free
 11205   0040E2                     
 11206                           ;color.c: 57:  return tmp;
 11207   0040E2  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 11208   0040E6  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 11209   0040EA  0012               	return		;funcret
 11210   0040EC                     __end_of_color_read_Green:
 11211                           	callstack 0
 11212                           
 11213 ;; *************** function _color_read_Clear *****************
 11214 ;; Defined at:
 11215 ;;		line 75 in file "color.c"
 11216 ;; Parameters:    Size  Location     Type
 11217 ;;		None
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;  tmp             2   10[COMRAM] unsigned int 
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  2    5[COMRAM] unsigned int 
 11222 ;; Registers used:
 11223 ;;		wreg, status,2, status,0, cstack
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11229 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11230 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11231 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11232 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11233 ;;Total ram usage:        7 bytes
 11234 ;; Hardware stack levels used: 1
 11235 ;; Hardware stack levels required when called: 3
 11236 ;; This function calls:
 11237 ;;		_I2C_2_Master_Read
 11238 ;;		_I2C_2_Master_RepStart
 11239 ;;		_I2C_2_Master_Start
 11240 ;;		_I2C_2_Master_Stop
 11241 ;;		_I2C_2_Master_Write
 11242 ;; This function is called by:
 11243 ;;		_reading_hue
 11244 ;;		_calibration_routine
 11245 ;;		_main
 11246 ;; This function uses a non-reentrant model
 11247 ;;
 11248                           
 11249                           	psect	text64
 11250   0040EC                     __ptext64:
 11251                           	callstack 0
 11252   0040EC                     _color_read_Clear:
 11253                           	callstack 26
 11254   0040EC                     
 11255                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
 11256   0040EC  EC69  F023         	call	_I2C_2_Master_Start	;wreg free
 11257                           
 11258                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 11259   0040F0  0E52               	movlw	82
 11260   0040F2  EC5E  F023         	call	_I2C_2_Master_Write
 11261                           
 11262                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
 11263   0040F6  0EB4               	movlw	180
 11264   0040F8  EC5E  F023         	call	_I2C_2_Master_Write
 11265                           
 11266                           ;color.c: 81:  I2C_2_Master_RepStart();
 11267   0040FC  EC6E  F023         	call	_I2C_2_Master_RepStart	;wreg free
 11268                           
 11269                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 11270   004100  0E53               	movlw	83
 11271   004102  EC5E  F023         	call	_I2C_2_Master_Write
 11272                           
 11273                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
 11274   004106  0E01               	movlw	1
 11275   004108  EC2D  F021         	call	_I2C_2_Master_Read
 11276   00410C  6E08               	movwf	??_color_read_Clear^0,c
 11277   00410E  5008               	movf	??_color_read_Clear^0,w,c
 11278   004110  6E0B               	movwf	color_read_Clear@tmp^0,c
 11279   004112  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11280                           
 11281                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11282   004114  0E00               	movlw	0
 11283   004116  EC2D  F021         	call	_I2C_2_Master_Read
 11284   00411A  6E08               	movwf	??_color_read_Clear^0,c
 11285   00411C  5008               	movf	??_color_read_Clear^0,w,c
 11286   00411E  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11287   004120  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11288   004122  500B               	movf	color_read_Clear@tmp^0,w,c
 11289   004124  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11290   004126  6E0B               	movwf	color_read_Clear@tmp^0,c
 11291   004128  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11292   00412A  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11293   00412C  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11294                           
 11295                           ;color.c: 85:  I2C_2_Master_Stop();
 11296   00412E  EC64  F023         	call	_I2C_2_Master_Stop	;wreg free
 11297   004132                     
 11298                           ;color.c: 86:  return tmp;
 11299   004132  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11300   004136  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11301   00413A  0012               	return		;funcret
 11302   00413C                     __end_of_color_read_Clear:
 11303                           	callstack 0
 11304                           
 11305 ;; *************** function _color_read_Blue *****************
 11306 ;; Defined at:
 11307 ;;		line 60 in file "color.c"
 11308 ;; Parameters:    Size  Location     Type
 11309 ;;		None
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;  tmp             2   10[COMRAM] unsigned int 
 11312 ;; Return value:  Size  Location     Type
 11313 ;;                  2    5[COMRAM] unsigned int 
 11314 ;; Registers used:
 11315 ;;		wreg, status,2, status,0, cstack
 11316 ;; Tracked objects:
 11317 ;;		On entry : 0/0
 11318 ;;		On exit  : 0/0
 11319 ;;		Unchanged: 0/0
 11320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11321 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11322 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11323 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11324 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11325 ;;Total ram usage:        7 bytes
 11326 ;; Hardware stack levels used: 1
 11327 ;; Hardware stack levels required when called: 3
 11328 ;; This function calls:
 11329 ;;		_I2C_2_Master_Read
 11330 ;;		_I2C_2_Master_RepStart
 11331 ;;		_I2C_2_Master_Start
 11332 ;;		_I2C_2_Master_Stop
 11333 ;;		_I2C_2_Master_Write
 11334 ;; This function is called by:
 11335 ;;		_reading_hue
 11336 ;;		_calibration_routine
 11337 ;; This function uses a non-reentrant model
 11338 ;;
 11339                           
 11340                           	psect	text65
 11341   00413C                     __ptext65:
 11342                           	callstack 0
 11343   00413C                     _color_read_Blue:
 11344                           	callstack 26
 11345   00413C                     
 11346                           ;color.c: 62:  unsigned int tmp;;color.c: 63:  I2C_2_Master_Start();
 11347   00413C  EC69  F023         	call	_I2C_2_Master_Start	;wreg free
 11348                           
 11349                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x00);
 11350   004140  0E52               	movlw	82
 11351   004142  EC5E  F023         	call	_I2C_2_Master_Write
 11352                           
 11353                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x1A);
 11354   004146  0EBA               	movlw	186
 11355   004148  EC5E  F023         	call	_I2C_2_Master_Write
 11356                           
 11357                           ;color.c: 66:  I2C_2_Master_RepStart();
 11358   00414C  EC6E  F023         	call	_I2C_2_Master_RepStart	;wreg free
 11359                           
 11360                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
 11361   004150  0E53               	movlw	83
 11362   004152  EC5E  F023         	call	_I2C_2_Master_Write
 11363                           
 11364                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
 11365   004156  0E01               	movlw	1
 11366   004158  EC2D  F021         	call	_I2C_2_Master_Read
 11367   00415C  6E08               	movwf	??_color_read_Blue^0,c
 11368   00415E  5008               	movf	??_color_read_Blue^0,w,c
 11369   004160  6E0B               	movwf	color_read_Blue@tmp^0,c
 11370   004162  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 11371                           
 11372                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11373   004164  0E00               	movlw	0
 11374   004166  EC2D  F021         	call	_I2C_2_Master_Read
 11375   00416A  6E08               	movwf	??_color_read_Blue^0,c
 11376   00416C  5008               	movf	??_color_read_Blue^0,w,c
 11377   00416E  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 11378   004170  6A09               	clrf	(??_color_read_Blue+1)^0,c
 11379   004172  500B               	movf	color_read_Blue@tmp^0,w,c
 11380   004174  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 11381   004176  6E0B               	movwf	color_read_Blue@tmp^0,c
 11382   004178  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 11383   00417A  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 11384   00417C  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 11385                           
 11386                           ;color.c: 70:  I2C_2_Master_Stop();
 11387   00417E  EC64  F023         	call	_I2C_2_Master_Stop	;wreg free
 11388   004182                     
 11389                           ;color.c: 71:  return tmp;
 11390   004182  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 11391   004186  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 11392   00418A  0012               	return		;funcret
 11393   00418C                     __end_of_color_read_Blue:
 11394                           	callstack 0
 11395                           
 11396 ;; *************** function _I2C_2_Master_Write *****************
 11397 ;; Defined at:
 11398 ;;		line 45 in file "i2c.c"
 11399 ;; Parameters:    Size  Location     Type
 11400 ;;  data_byte       1    wreg     unsigned char 
 11401 ;; Auto vars:     Size  Location     Type
 11402 ;;  data_byte       1    2[COMRAM] unsigned char 
 11403 ;; Return value:  Size  Location     Type
 11404 ;;                  1    wreg      void 
 11405 ;; Registers used:
 11406 ;;		wreg, status,2, status,0, cstack
 11407 ;; Tracked objects:
 11408 ;;		On entry : 0/0
 11409 ;;		On exit  : 0/0
 11410 ;;		Unchanged: 0/0
 11411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11413 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11415 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11416 ;;Total ram usage:        1 bytes
 11417 ;; Hardware stack levels used: 1
 11418 ;; Hardware stack levels required when called: 2
 11419 ;; This function calls:
 11420 ;;		_I2C_2_Master_Idle
 11421 ;; This function is called by:
 11422 ;;		_color_writetoaddr
 11423 ;;		_color_read_Red
 11424 ;;		_color_read_Green
 11425 ;;		_color_read_Blue
 11426 ;;		_color_read_Clear
 11427 ;; This function uses a non-reentrant model
 11428 ;;
 11429                           
 11430                           	psect	text66
 11431   0046BC                     __ptext66:
 11432                           	callstack 0
 11433   0046BC                     _I2C_2_Master_Write:
 11434                           	callstack 26
 11435                           
 11436                           ;incstack = 0
 11437                           ;I2C_2_Master_Write@data_byte stored from wreg
 11438   0046BC  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 11439   0046BE                     
 11440                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11441   0046BE  ECCB  F022         	call	_I2C_2_Master_Idle	;wreg free
 11442   0046C2                     
 11443                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11444   0046C2  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11445   0046C6  0012               	return		;funcret
 11446   0046C8                     __end_of_I2C_2_Master_Write:
 11447                           	callstack 0
 11448                           
 11449 ;; *************** function _I2C_2_Master_Stop *****************
 11450 ;; Defined at:
 11451 ;;		line 39 in file "i2c.c"
 11452 ;; Parameters:    Size  Location     Type
 11453 ;;		None
 11454 ;; Auto vars:     Size  Location     Type
 11455 ;;		None
 11456 ;; Return value:  Size  Location     Type
 11457 ;;                  1    wreg      void 
 11458 ;; Registers used:
 11459 ;;		wreg, status,2, status,0, cstack
 11460 ;; Tracked objects:
 11461 ;;		On entry : 0/0
 11462 ;;		On exit  : 0/0
 11463 ;;		Unchanged: 0/0
 11464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11469 ;;Total ram usage:        0 bytes
 11470 ;; Hardware stack levels used: 1
 11471 ;; Hardware stack levels required when called: 2
 11472 ;; This function calls:
 11473 ;;		_I2C_2_Master_Idle
 11474 ;; This function is called by:
 11475 ;;		_color_writetoaddr
 11476 ;;		_color_read_Red
 11477 ;;		_color_read_Green
 11478 ;;		_color_read_Blue
 11479 ;;		_color_read_Clear
 11480 ;; This function uses a non-reentrant model
 11481 ;;
 11482                           
 11483                           	psect	text67
 11484   0046C8                     __ptext67:
 11485                           	callstack 0
 11486   0046C8                     _I2C_2_Master_Stop:
 11487                           	callstack 26
 11488   0046C8                     
 11489                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11490   0046C8  ECCB  F022         	call	_I2C_2_Master_Idle	;wreg free
 11491   0046CC                     
 11492                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11493   0046CC  010E               	movlb	14	; () banked
 11494   0046CE  85DA               	bsf	218,2,b	;volatile
 11495   0046D0                     
 11496                           ; BSR set to: 14
 11497   0046D0  0012               	return		;funcret
 11498   0046D2                     __end_of_I2C_2_Master_Stop:
 11499                           	callstack 0
 11500                           
 11501 ;; *************** function _I2C_2_Master_Start *****************
 11502 ;; Defined at:
 11503 ;;		line 27 in file "i2c.c"
 11504 ;; Parameters:    Size  Location     Type
 11505 ;;		None
 11506 ;; Auto vars:     Size  Location     Type
 11507 ;;		None
 11508 ;; Return value:  Size  Location     Type
 11509 ;;                  1    wreg      void 
 11510 ;; Registers used:
 11511 ;;		wreg, status,2, status,0, cstack
 11512 ;; Tracked objects:
 11513 ;;		On entry : 0/0
 11514 ;;		On exit  : 0/0
 11515 ;;		Unchanged: 0/0
 11516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11521 ;;Total ram usage:        0 bytes
 11522 ;; Hardware stack levels used: 1
 11523 ;; Hardware stack levels required when called: 2
 11524 ;; This function calls:
 11525 ;;		_I2C_2_Master_Idle
 11526 ;; This function is called by:
 11527 ;;		_color_writetoaddr
 11528 ;;		_color_read_Red
 11529 ;;		_color_read_Green
 11530 ;;		_color_read_Blue
 11531 ;;		_color_read_Clear
 11532 ;; This function uses a non-reentrant model
 11533 ;;
 11534                           
 11535                           	psect	text68
 11536   0046D2                     __ptext68:
 11537                           	callstack 0
 11538   0046D2                     _I2C_2_Master_Start:
 11539                           	callstack 26
 11540   0046D2                     
 11541                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11542   0046D2  ECCB  F022         	call	_I2C_2_Master_Idle	;wreg free
 11543   0046D6                     
 11544                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11545   0046D6  010E               	movlb	14	; () banked
 11546   0046D8  81DA               	bsf	218,0,b	;volatile
 11547   0046DA                     
 11548                           ; BSR set to: 14
 11549   0046DA  0012               	return		;funcret
 11550   0046DC                     __end_of_I2C_2_Master_Start:
 11551                           	callstack 0
 11552                           
 11553 ;; *************** function _I2C_2_Master_RepStart *****************
 11554 ;; Defined at:
 11555 ;;		line 33 in file "i2c.c"
 11556 ;; Parameters:    Size  Location     Type
 11557 ;;		None
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;		None
 11560 ;; Return value:  Size  Location     Type
 11561 ;;                  1    wreg      void 
 11562 ;; Registers used:
 11563 ;;		wreg, status,2, status,0, cstack
 11564 ;; Tracked objects:
 11565 ;;		On entry : 0/0
 11566 ;;		On exit  : 0/0
 11567 ;;		Unchanged: 0/0
 11568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11573 ;;Total ram usage:        0 bytes
 11574 ;; Hardware stack levels used: 1
 11575 ;; Hardware stack levels required when called: 2
 11576 ;; This function calls:
 11577 ;;		_I2C_2_Master_Idle
 11578 ;; This function is called by:
 11579 ;;		_color_read_Red
 11580 ;;		_color_read_Green
 11581 ;;		_color_read_Blue
 11582 ;;		_color_read_Clear
 11583 ;; This function uses a non-reentrant model
 11584 ;;
 11585                           
 11586                           	psect	text69
 11587   0046DC                     __ptext69:
 11588                           	callstack 0
 11589   0046DC                     _I2C_2_Master_RepStart:
 11590                           	callstack 26
 11591   0046DC                     
 11592                           ;i2c.c: 35:   I2C_2_Master_Idle();
 11593   0046DC  ECCB  F022         	call	_I2C_2_Master_Idle	;wreg free
 11594   0046E0                     
 11595                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11596   0046E0  010E               	movlb	14	; () banked
 11597   0046E2  83DA               	bsf	218,1,b	;volatile
 11598   0046E4                     
 11599                           ; BSR set to: 14
 11600   0046E4  0012               	return		;funcret
 11601   0046E6                     __end_of_I2C_2_Master_RepStart:
 11602                           	callstack 0
 11603                           
 11604 ;; *************** function _I2C_2_Master_Read *****************
 11605 ;; Defined at:
 11606 ;;		line 51 in file "i2c.c"
 11607 ;; Parameters:    Size  Location     Type
 11608 ;;  ack             1    wreg     unsigned char 
 11609 ;; Auto vars:     Size  Location     Type
 11610 ;;  ack             1    3[COMRAM] unsigned char 
 11611 ;;  tmp             1    4[COMRAM] unsigned char 
 11612 ;; Return value:  Size  Location     Type
 11613 ;;                  1    wreg      unsigned char 
 11614 ;; Registers used:
 11615 ;;		wreg, status,2, status,0, cstack
 11616 ;; Tracked objects:
 11617 ;;		On entry : 0/0
 11618 ;;		On exit  : 0/0
 11619 ;;		Unchanged: 0/0
 11620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11622 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11624 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11625 ;;Total ram usage:        3 bytes
 11626 ;; Hardware stack levels used: 1
 11627 ;; Hardware stack levels required when called: 2
 11628 ;; This function calls:
 11629 ;;		_I2C_2_Master_Idle
 11630 ;; This function is called by:
 11631 ;;		_color_read_Red
 11632 ;;		_color_read_Green
 11633 ;;		_color_read_Blue
 11634 ;;		_color_read_Clear
 11635 ;; This function uses a non-reentrant model
 11636 ;;
 11637                           
 11638                           	psect	text70
 11639   00425A                     __ptext70:
 11640                           	callstack 0
 11641   00425A                     _I2C_2_Master_Read:
 11642                           	callstack 26
 11643                           
 11644                           ; BSR set to: 14
 11645                           ;incstack = 0
 11646                           ;I2C_2_Master_Read@ack stored from wreg
 11647   00425A  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 11648   00425C                     
 11649                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11650   00425C  ECCB  F022         	call	_I2C_2_Master_Idle	;wreg free
 11651   004260                     
 11652                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11653   004260  010E               	movlb	14	; () banked
 11654   004262  87DA               	bsf	218,3,b	;volatile
 11655                           
 11656                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11657   004264  ECCB  F022         	call	_I2C_2_Master_Idle	;wreg free
 11658   004268                     
 11659                           ;i2c.c: 57:   tmp = SSP2BUF;
 11660   004268  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11661                           
 11662                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11663   00426C  ECCB  F022         	call	_I2C_2_Master_Idle	;wreg free
 11664   004270                     
 11665                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11666   004270  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 11667   004272  B4D8               	btfsc	status,2,c
 11668   004274  EF3E  F021         	goto	u5061
 11669   004278  EF42  F021         	goto	u5060
 11670   00427C                     u5061:
 11671   00427C  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11672   00427E  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 11673   004280  EF43  F021         	goto	u5078
 11674   004284                     u5060:
 11675   004284  6A03               	clrf	??_I2C_2_Master_Read^0,c
 11676   004286                     u5078:
 11677   004286  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 11678   004288  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 11679   00428A  010E               	movlb	14	; () banked
 11680   00428C  51DA               	movf	218,w,b	;volatile
 11681   00428E  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11682   004290  0BDF               	andlw	-33
 11683   004292  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 11684   004294  6FDA               	movwf	218,b	;volatile
 11685   004296                     
 11686                           ; BSR set to: 14
 11687                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11688   004296  89DA               	bsf	218,4,b	;volatile
 11689   004298                     
 11690                           ; BSR set to: 14
 11691                           ;i2c.c: 61:   return tmp;
 11692   004298  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 11693   00429A                     
 11694                           ; BSR set to: 14
 11695   00429A  0012               	return		;funcret
 11696   00429C                     __end_of_I2C_2_Master_Read:
 11697                           	callstack 0
 11698                           
 11699 ;; *************** function _I2C_2_Master_Idle *****************
 11700 ;; Defined at:
 11701 ;;		line 22 in file "i2c.c"
 11702 ;; Parameters:    Size  Location     Type
 11703 ;;		None
 11704 ;; Auto vars:     Size  Location     Type
 11705 ;;		None
 11706 ;; Return value:  Size  Location     Type
 11707 ;;                  1    wreg      void 
 11708 ;; Registers used:
 11709 ;;		wreg, status,2, status,0
 11710 ;; Tracked objects:
 11711 ;;		On entry : 0/0
 11712 ;;		On exit  : 0/0
 11713 ;;		Unchanged: 0/0
 11714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11717 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11718 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11719 ;;Total ram usage:        1 bytes
 11720 ;; Hardware stack levels used: 1
 11721 ;; Hardware stack levels required when called: 1
 11722 ;; This function calls:
 11723 ;;		Nothing
 11724 ;; This function is called by:
 11725 ;;		_I2C_2_Master_Start
 11726 ;;		_I2C_2_Master_RepStart
 11727 ;;		_I2C_2_Master_Stop
 11728 ;;		_I2C_2_Master_Write
 11729 ;;		_I2C_2_Master_Read
 11730 ;; This function uses a non-reentrant model
 11731 ;;
 11732                           
 11733                           	psect	text71
 11734   004596                     __ptext71:
 11735                           	callstack 0
 11736   004596                     _I2C_2_Master_Idle:
 11737                           	callstack 26
 11738   004596                     l194:
 11739   004596  010E               	movlb	14	; () banked
 11740   004598  B5D8               	btfsc	216,2,b	;volatile
 11741   00459A  EFD1  F022         	goto	u4951
 11742   00459E  EFD3  F022         	goto	u4950
 11743   0045A2                     u4951:
 11744   0045A2  EFCB  F022         	goto	l194
 11745   0045A6                     u4950:
 11746   0045A6                     
 11747                           ; BSR set to: 14
 11748   0045A6  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11749   0045AA  0E1F               	movlw	31
 11750   0045AC  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 11751   0045AE  A4D8               	btfss	status,2,c
 11752   0045B0  EFDC  F022         	goto	u4961
 11753   0045B4  EFDE  F022         	goto	u4960
 11754   0045B8                     u4961:
 11755   0045B8  EFCB  F022         	goto	l194
 11756   0045BC                     u4960:
 11757   0045BC                     
 11758                           ; BSR set to: 14
 11759   0045BC  0012               	return		;funcret
 11760   0045BE                     __end_of_I2C_2_Master_Idle:
 11761                           	callstack 0
 11762                           
 11763 ;; *************** function _Timer0_init *****************
 11764 ;; Defined at:
 11765 ;;		line 7 in file "timers.c"
 11766 ;; Parameters:    Size  Location     Type
 11767 ;;		None
 11768 ;; Auto vars:     Size  Location     Type
 11769 ;;		None
 11770 ;; Return value:  Size  Location     Type
 11771 ;;                  1    wreg      void 
 11772 ;; Registers used:
 11773 ;;		wreg, status,2
 11774 ;; Tracked objects:
 11775 ;;		On entry : 0/0
 11776 ;;		On exit  : 0/0
 11777 ;;		Unchanged: 0/0
 11778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11783 ;;Total ram usage:        0 bytes
 11784 ;; Hardware stack levels used: 1
 11785 ;; Hardware stack levels required when called: 1
 11786 ;; This function calls:
 11787 ;;		Nothing
 11788 ;; This function is called by:
 11789 ;;		_main
 11790 ;; This function uses a non-reentrant model
 11791 ;;
 11792                           
 11793                           	psect	text72
 11794   0045BE                     __ptext72:
 11795                           	callstack 0
 11796   0045BE                     _Timer0_init:
 11797                           	callstack 29
 11798   0045BE                     
 11799                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
 11800   0045BE  50D6               	movf	214,w,c	;volatile
 11801   0045C0  0B1F               	andlw	-225
 11802   0045C2  0940               	iorlw	64
 11803   0045C4  6ED6               	movwf	214,c	;volatile
 11804   0045C6                     
 11805                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
 11806   0045C6  88D6               	bsf	214,4,c	;volatile
 11807                           
 11808                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1101;
 11809   0045C8  50D6               	movf	214,w,c	;volatile
 11810   0045CA  0BF0               	andlw	-16
 11811   0045CC  090D               	iorlw	13
 11812   0045CE  6ED6               	movwf	214,c	;volatile
 11813   0045D0                     
 11814                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
 11815   0045D0  88D5               	bsf	213,4,c	;volatile
 11816   0045D2                     
 11817                           ;timers.c: 14:     PIE0bits.TMR0IE = 1;
 11818   0045D2  010E               	movlb	14	; () banked
 11819   0045D4  8B29               	bsf	41,5,b	;volatile
 11820   0045D6                     
 11821                           ; BSR set to: 14
 11822                           ;timers.c: 15:     PIR0bits.TMR0IF = 0;
 11823   0045D6  9B33               	bcf	51,5,b	;volatile
 11824   0045D8                     
 11825                           ; BSR set to: 14
 11826                           ;timers.c: 16:     IPR0bits.TMR0IP = 0;
 11827   0045D8  9B1F               	bcf	31,5,b	;volatile
 11828   0045DA                     
 11829                           ; BSR set to: 14
 11830                           ;timers.c: 17:     INTCONbits.IPEN = 1;
 11831   0045DA  8AF2               	bsf	242,5,c	;volatile
 11832   0045DC                     
 11833                           ; BSR set to: 14
 11834                           ;timers.c: 18:     INTCONbits.PEIE = 1;
 11835   0045DC  8CF2               	bsf	242,6,c	;volatile
 11836   0045DE                     
 11837                           ; BSR set to: 14
 11838                           ;timers.c: 19:     INTCONbits.GIE = 1;
 11839   0045DE  8EF2               	bsf	242,7,c	;volatile
 11840   0045E0                     
 11841                           ; BSR set to: 14
 11842                           ;timers.c: 21:     TRISGbits.TRISG1 = 1;
 11843   0045E0  8287               	bsf	135,1,c	;volatile
 11844   0045E2                     
 11845                           ; BSR set to: 14
 11846                           ;timers.c: 22:     LATGbits.LATG1 = 0;
 11847   0045E2  927F               	bcf	127,1,c	;volatile
 11848   0045E4                     
 11849                           ; BSR set to: 14
 11850   0045E4  0012               	return		;funcret
 11851   0045E6                     __end_of_Timer0_init:
 11852                           	callstack 0
 11853                           
 11854 ;; *************** function _ADC_init *****************
 11855 ;; Defined at:
 11856 ;;		line 9 in file "ADC.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;		None
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;		None
 11861 ;; Return value:  Size  Location     Type
 11862 ;;                  1    wreg      void 
 11863 ;; Registers used:
 11864 ;;		wreg, status,2
 11865 ;; Tracked objects:
 11866 ;;		On entry : 0/0
 11867 ;;		On exit  : 0/0
 11868 ;;		Unchanged: 0/0
 11869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11874 ;;Total ram usage:        0 bytes
 11875 ;; Hardware stack levels used: 1
 11876 ;; Hardware stack levels required when called: 1
 11877 ;; This function calls:
 11878 ;;		Nothing
 11879 ;; This function is called by:
 11880 ;;		_main
 11881 ;; This function uses a non-reentrant model
 11882 ;;
 11883                           
 11884                           	psect	text73
 11885   00468A                     __ptext73:
 11886                           	callstack 0
 11887   00468A                     _ADC_init:
 11888                           	callstack 29
 11889   00468A                     
 11890                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 11891   00468A  8C86               	bsf	134,6,c	;volatile
 11892                           
 11893                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 11894   00468C  010E               	movlb	14	; () banked
 11895   00468E  8DB4               	bsf	180,6,b	;volatile
 11896                           
 11897                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 11898   004690  010F               	movlb	15	; () banked
 11899   004692  9958               	bcf	88,4,b	;volatile
 11900   004694                     
 11901                           ; BSR set to: 15
 11902                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 11903   004694  0EFC               	movlw	-4
 11904   004696  1758               	andwf	88,f,b	;volatile
 11905                           
 11906                           ;ADC.c: 17:     ADPCH=0b101110;
 11907   004698  0E2E               	movlw	46
 11908   00469A  6F5F               	movwf	95,b	;volatile
 11909   00469C                     
 11910                           ; BSR set to: 15
 11911                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 11912   00469C  9460               	bcf	96,2,c	;volatile
 11913   00469E                     
 11914                           ; BSR set to: 15
 11915                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 11916   00469E  8860               	bsf	96,4,c	;volatile
 11917   0046A0                     
 11918                           ; BSR set to: 15
 11919                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 11920   0046A0  8E60               	bsf	96,7,c	;volatile
 11921   0046A2                     
 11922                           ; BSR set to: 15
 11923   0046A2  0012               	return		;funcret
 11924   0046A4                     __end_of_ADC_init:
 11925                           	callstack 0
 11926                           
 11927 ;; *************** function _LowISR *****************
 11928 ;; Defined at:
 11929 ;;		line 38 in file "timers.c"
 11930 ;; Parameters:    Size  Location     Type
 11931 ;;		None
 11932 ;; Auto vars:     Size  Location     Type
 11933 ;;		None
 11934 ;; Return value:  Size  Location     Type
 11935 ;;                  1    wreg      void 
 11936 ;; Registers used:
 11937 ;;		None
 11938 ;; Tracked objects:
 11939 ;;		On entry : 0/0
 11940 ;;		On exit  : 0/0
 11941 ;;		Unchanged: 0/0
 11942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11945 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11946 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11947 ;;Total ram usage:        1 bytes
 11948 ;; Hardware stack levels used: 1
 11949 ;; This function calls:
 11950 ;;		Nothing
 11951 ;; This function is called by:
 11952 ;;		Interrupt level 1
 11953 ;; This function uses a non-reentrant model
 11954 ;;
 11955                           
 11956                           	psect	intcodelo
 11957   000018                     __pintcodelo:
 11958                           	callstack 0
 11959   000018                     _LowISR:
 11960                           	callstack 20
 11961                           
 11962                           ; BSR set to: 15
 11963                           ;incstack = 0
 11964   000018  8052               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 11965   00001A  CFE0 F001          	movff	bsr,??_LowISR
 11966   00001E                     
 11967                           ;timers.c: 41:     if (PIR0bits.TMR0IF == 1) {
 11968   00001E  010E               	movlb	14	; () banked
 11969   000020  AB33               	btfss	51,5,b	;volatile
 11970   000022  EF15  F000         	goto	i1u228_21
 11971   000026  EF17  F000         	goto	i1u228_20
 11972   00002A                     i1u228_21:
 11973   00002A  EF19  F000         	goto	i1l673
 11974   00002E                     i1u228_20:
 11975   00002E                     
 11976                           ; BSR set to: 14
 11977                           ;timers.c: 42:         LATGbits.LATG1 = 1;
 11978   00002E  827F               	bsf	127,1,c	;volatile
 11979                           
 11980                           ;timers.c: 44:         PIR0bits.TMR0IF = 0;
 11981   000030  9B33               	bcf	51,5,b	;volatile
 11982   000032                     i1l673:
 11983                           
 11984                           ; BSR set to: 14
 11985   000032  C001  FFE0         	movff	??_LowISR,bsr
 11986   000036  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 11987   000038  0010               	retfie	
 11988   00003A                     __end_of_LowISR:
 11989                           	callstack 0
 11990                           
 11991                           	psect	rparam
 11992   000000                     
 11993                           	psect	temp
 11994   000052                     btemp:
 11995                           	callstack 0
 11996   000052                     	ds	1
 11997   000000                     int$flags	set	btemp
 11998   000000                     wtemp8	set	btemp+1
 11999   000000                     ttemp5	set	btemp+1
 12000   000000                     ttemp6	set	btemp+4
 12001   000000                     ttemp7	set	btemp+8
 12002                           
 12003                           	psect	config
 12004                           
 12005                           ;Config register CONFIG1L @ 0x300000
 12006                           ;	External Oscillator mode Selection bits
 12007                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12008                           ;	Power-up default value for COSC bits
 12009                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12010   300000                     	org	3145728
 12011   300000  AA                 	db	170
 12012                           
 12013                           ;Config register CONFIG1H @ 0x300001
 12014                           ;	unspecified, using default values
 12015                           ;	Clock Out Enable bit
 12016                           ;	CLKOUTEN = 0x1, unprogrammed default
 12017                           ;	Clock Switch Enable bit
 12018                           ;	CSWEN = 0x1, unprogrammed default
 12019                           ;	Fail-Safe Clock Monitor Enable bit
 12020                           ;	FCMEN = 0x1, unprogrammed default
 12021   300001                     	org	3145729
 12022   300001  FF                 	db	255
 12023                           
 12024                           ;Config register CONFIG3L @ 0x300004
 12025                           ;	WDT Period Select bits
 12026                           ;	WDTCPS = 0x1F, unprogrammed default
 12027                           ;	WDT operating mode
 12028                           ;	WDTE = OFF, WDT Disabled
 12029   300004                     	org	3145732
 12030   300004  9F                 	db	159
 12031                           
 12032                           ;Config register CONFIG3H @ 0x300005
 12033                           ;	unspecified, using default values
 12034                           ;	WDT Window Select bits
 12035                           ;	WDTCWS = 0x7, unprogrammed default
 12036                           ;	WDT input clock selector
 12037                           ;	WDTCCS = 0x7, unprogrammed default
 12038   300005                     	org	3145733
 12039   300005  FF                 	db	255
 12040                           tosu	equ	0xFFF
 12041                           tosh	equ	0xFFE
 12042                           tosl	equ	0xFFD
 12043                           stkptr	equ	0xFFC
 12044                           pclatu	equ	0xFFB
 12045                           pclath	equ	0xFFA
 12046                           pcl	equ	0xFF9
 12047                           tblptru	equ	0xFF8
 12048                           tblptrh	equ	0xFF7
 12049                           tblptrl	equ	0xFF6
 12050                           tablat	equ	0xFF5
 12051                           prodh	equ	0xFF4
 12052                           prodl	equ	0xFF3
 12053                           indf0	equ	0xFEF
 12054                           postinc0	equ	0xFEE
 12055                           postdec0	equ	0xFED
 12056                           preinc0	equ	0xFEC
 12057                           plusw0	equ	0xFEB
 12058                           fsr0h	equ	0xFEA
 12059                           fsr0l	equ	0xFE9
 12060                           wreg	equ	0xFE8
 12061                           indf1	equ	0xFE7
 12062                           postinc1	equ	0xFE6
 12063                           postdec1	equ	0xFE5
 12064                           preinc1	equ	0xFE4
 12065                           plusw1	equ	0xFE3
 12066                           fsr1h	equ	0xFE2
 12067                           fsr1l	equ	0xFE1
 12068                           bsr	equ	0xFE0
 12069                           indf2	equ	0xFDF
 12070                           postinc2	equ	0xFDE
 12071                           postdec2	equ	0xFDD
 12072                           preinc2	equ	0xFDC
 12073                           plusw2	equ	0xFDB
 12074                           fsr2h	equ	0xFDA
 12075                           fsr2l	equ	0xFD9
 12076                           status	equ	0xFD8

Data Sizes:
    Strings     167
    Constant    0
    Data        1
    BSS         384
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      81
    BANK0           160     94     144
    BANK1           256      0     132
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    logAction@path	PTR struct PathStep size(2) Largest target is 200
		 -> path(BANK2[200]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveBlue@path	PTR struct PathStep size(2) Largest target is 200
		 -> path(BANK2[200]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@path	PTR struct PathStep size(2) Largest target is 200
		 -> path(BANK2[200]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@path	PTR struct PathStep size(2) Largest target is 200
		 -> path(BANK2[200]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@path	PTR struct PathStep size(2) Largest target is 200
		 -> path(BANK2[200]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@path	PTR struct PathStep size(2) Largest target is 200
		 -> path(BANK2[200]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@path	PTR struct PathStep size(2) Largest target is 200
		 -> path(BANK2[200]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@path	PTR struct PathStep size(2) Largest target is 200
		 -> path(BANK2[200]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    returnHome@path	PTR struct PathStep size(2) Largest target is 200
		 -> path(BANK2[200]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    S3032$buffer	PTR unsigned char  size(2) Largest target is 0

    S3032$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[27]), STR_9(CODE[25]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_decision
    _returnHome->_reverseTurn
    _reverseTurn->_left135
    _reverseTurn->_left90
    _reverseTurn->_right135
    _reverseTurn->_right90
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _moveWhite->_backHalf
    _moveWhite->_turn180
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fldiv->___flmul
    _decision->_send2USART
    _send2USART->_sprintf
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _decision->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                52    52      0  325084
                                             76 COMRAM     2     2      0
                                             76 BANK0     18    18      0
                           _ADC_init
                        _Timer0_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                          _logAction
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          16    10      6   85182
                                             33 COMRAM    16    10      6
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                          5     2      3   52275
                                             28 COMRAM     5     2      3
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                      8     4      4   10533
                                             24 COMRAM     8     4      4
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    4298
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _customDelayMs                                        5     3      2     122
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            4     2      2   21568
                                             28 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   16385
                                             65 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   15481
                                             61 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     866
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     381
                                             51 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3497
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2718
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1896
                                              1 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2463
                                             26 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      8     6      2      23
                                              1 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _decision                                             6     2      4  180930
                                             70 COMRAM     6     2      4
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
                         _send2USART
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11286
                                             68 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           8     2      6   23543
                                             28 COMRAM     8     2      6
                     _backOneAndHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              8     2      6   24263
                                             28 COMRAM     8     2      6
                           _backHalf
                          _logAction
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2   10272
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             8     2      6   23723
                                             28 COMRAM     8     2      6
                     _backOneAndHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   10092
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           8     2      6   24083
                                             28 COMRAM     8     2      6
                           _backHalf
                          _logAction
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2   10092
                                             24 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    4118
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        8     2      6   24263
                                             28 COMRAM     8     2      6
                           _backHalf
                            _left135
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2   10272
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            8     2      6   24443
                                             28 COMRAM     8     2      6
                           _backHalf
                             _left90
                          _logAction
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2   10452
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             8     2      6   24443
                                             28 COMRAM     8     2      6
                           _backHalf
                          _logAction
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2   10452
                                             24 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    4298
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _logAction                                           12     4      8    2630
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   10812
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 2     0      2    5490
                                             19 COMRAM     2     0      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4118
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    3442
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   12103
                                             68 COMRAM     3     2      1
                                              0 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10179
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    8607
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    8119
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1452
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1012
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4939
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2741
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1357
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     857
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     613
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     625
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     726
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Timer0_init
   ___fldiv
     ___flmul (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _logAction
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
       _logAction
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
       _logAction
     _moveOrange
       _backHalf
       _logAction
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
       _logAction
     _moveRed
       _backHalf
       _logAction
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _logAction
       _right90
     _send2USART
       _sendStringSerial4
       _sprintf
   _fullSpeedAhead
     _setMotorPWM
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _logAction
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _left135
       _left90
       _right135
       _right90
       _turn180
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      84       7       51.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5E      90       5       90.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      51       1       86.2%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      62        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRllllll      5      0       0      60        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRhlhh        5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      59        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhllh        1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      63        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22D      66        0.0%
DATA                 0      0     22D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 14 18:38:43 2024

               _color_read_Red 404C                   ___fldiv@aexp 0033                   ___fldiv@bexp 0032  
           fullSpeedBack@power 0017                   ___fldiv@sign 002B                _color_read_Blue 413C  
                           l81 409A                             l90 413A                             l75 4346  
                           l84 40EA                             l93 33E8                             l78 464C  
                           l87 418A                             l96 2844                             l98 2852  
                           l99 28A0                   ___awdiv@sign 0007                             bsr 0FE0  
          ___wmul@multiplicand 0004                moveLightBlue@mL 001D                moveLightBlue@mR 001E  
           convert_rgb2hue@max 0098             convert_rgb2hue@hue 009C             convert_rgb2hue@min 0090  
             _color_read_Clear 40EC               _color_read_Green 409C                            l101 28AE  
                          l102 2900                            l111 29EE                            l200 46DA  
                          l104 290E                            l105 2960                            l121 119C  
                          l203 46E4                            l107 296E                            l131 128E  
                          l123 11F6                            l212 429A                            l108 29C8  
                          l141 15A6                            l133 129E                            l125 1206  
                          l206 46D0                            l135 12F8                            l119 118C  
                          l209 46C6                            l145 161E                            l137 1308  
                          l146 163A                            l164 281C                            l413 2FF6  
                          l421 3AB8                            l158 2810                            l406 3A2A  
                          l502 3652                            l335 46A2                            l191 4594  
                          l431 3BBA                            l441 3DA2                            l505 42FC  
                          l521 34CE                            l194 4596                            l426 3C38  
                          l450 44A8                            l514 32FE                            l444 450A  
                          l508 4312                            l436 3CB2                            l197 45BC  
                          l453 4444                            l462 4412                            l518 34CC  
                          l471 3D2C                            l447 453A                            l456 4476  
                          l480 3F8E                            l465 3ED2                            l490 3B3C  
                          l474 3E74                            l459 456A                            l483 3FEC  
                          l635 4688                            l468 404A                            l572 466A  
                          l581 46A6                            l477 3F30                            l590 44DA  
                          l486 43E0                            l664 45E4                            l584 46BA  
                          l920 3702                            l496 3652                            l489 3B34  
                          l907 3592                            l667 462C                            l676 460A  
                          l941 31BA                            l935 385A                            l946 3200  
                          l973 30FC                            _abs 437C                            _pad 3906  
                          _hue 00BE            convert_rgb2hue@cMax 003E                   ___awmod@sign 0007  
          convert_rgb2hue@diff 0094                            wreg 0FE8                   ___flmul@aexp 0013  
                 ___flmul@bexp 0014                   ___flmul@sign 000E                   ___flmul@temp 0019  
                 ___flmul@prod 0015                   ___fltol@exp1 003D                           ?_abs 0008  
                         l1300 1E1C                           l1204 182A                           l1221 1944  
                         l1213 1AFA                           l1205 1818                           l1230 1A14  
                         l1206 17DE                           l1231 1A02                           l1403 37B0  
                         l1307 1EE6                           l1331 2A46                           l1260 211E  
                         l1174 3E16                           l1246 4216                           l1334 2BA2  
                         l1431 43AE                           l1167 3E0E                           l1271 21DC  
                         l1263 20E2                           l1424 4258                           l1272 21CA  
                         l1345 2B3A                           l1418 2D2A                           l1354 437A  
                         l4010 3ABA                           l1258 22BE                           l1290 1BC0  
                         l1338 2ADE                           l1443 3904                           l1451 42DA  
                         l1428 4396                           l4012 3AD0                           l4100 1FDA  
                         l1269 2164                           l1454 46E6                           l1374 393C  
                         l1382 2D8A                           l4014 3B24                           l4110 2020  
                         l4102 1FE2                           l1294 1F24                           l4120 2048  
                         l4112 2024                           l4104 1FF2                           l1377 397A  
                         l1297 1DB6                           l4130 2096                           l4106 2008  
                         l4210 1B18                           l1379 399A                           l1395 2EA2  
                         l1299 1E2E                           l4140 20E0                           l4132 20A6  
                         l4124 205C                           l4108 2018                           l4116 2038  
                         l4300 1E14                           l4220 1B5E                           l4212 1B28  
                         l4204 1AFC                           l4060 42DC                           l4150 212E  
                         l4142 20EC                           l4134 20AE                           l4126 2076  
                         l4118 2048                           l4070 1F40                           l4310 1E82  
                         l4230 1B8A                           l4222 1B64                           l4214 1B38  
                         l4206 1B08                           l4062 42E8                           l1399 37A8  
                         l6000 2794                           l4152 2144                           l4160 2174  
                         l4144 210A                           l4136 20BE                           l4128 2086  
                         l4080 1F74                           l4072 1F42                           l4320 1EEA  
                         l4304 1E3E                           l4312 1E86                           l4240 1BE0  
                         l4232 1B9A                           l4224 1B6A                           l4216 1B48  
                         l4208 1B16                           l4400 3088                           l4064 42F8  
                         l6010 2804                           l6002 27B0                           l4162 2182  
                         l4154 214A                           l4146 210C                           l4138 20D2  
                         l4090 1FA6                           l4074 1F52                           l4082 1F7C  
                         l4066 1F26                           l4330 1F14                           l4322 1EFA  
                         l4314 1EA0                           l4306 1E4A                           l4250 1C20  
                         l4234 1BAA                           l4226 1B78                           l4218 1B4E  
                         l4410 30B0                           l4402 3092                           l5300 369A  
                         l5220 3886                           l6004 27BC                           l6012 2810  
                         l4172 21EC                           l4180 2234                           l4164 2186  
                         l4156 2154                           l4148 211C                           l4092 1FA8  
                         l4084 1F8C                           l4076 1F62                           l4068 1F32  
                         l4340 37B2                           l4324 1F08                           l4316 1EB4  
                         l4308 1E58                           l4260 1C6A                           l4252 1C2C  
                         l4244 1BF4                           l4236 1BB0                           l4228 1B7A  
                         l4412 30BC                           l4404 309C                           l6020 3408  
                         l6100 2342                           l5310 36D6                           l5302 36A2  
                         l5222 38A2                           l5214 385C                           l5230 42A8  
                         l6006 27D2                           l4190 229E                           l4182 224E  
                         l4174 21F8                           l4166 2194                           l4158 2162  
                         l4094 1FB8                           l4086 1F92                           l4078 1F72  
                         l4350 3852                           l4342 37E0                           l4326 1F0A  
                         l4318 1ECE                           l4270 1CBC                           l4262 1C76  
                         l4254 1C44                           l4246 1C00                           l4238 1BD0  
                         l4334 41D2                           l4414 30CC                           l4430 2A6C  
                         l4422 29F2                           l4510 0EEC                           l6030 349A  
                         l6014 33EA                           l6110 2354                           l6102 2344  
                         l5312 36DC                           l5304 36AA                           l5224 38D4  
                         l5216 386C                           l5232 42B6                           l5400 3756  
                         l3480 3DCE                           l3472 3DA4                           l6008 27E8  
                         l4192 22AC                           l4184 2264                           l4176 2206  
                         l4168 21C2                           l4096 1FC8                           l4088 1F98  
                         l4352 3858                           l4344 37F0                           l4360 313C  
                         l4328 1F10                           l4280 1D3A                           l4272 1CCC  
                         l4264 1C86                           l4256 1C50                           l4248 1C0A  
                         l3800 1774                           l4336 41E2                           l4416 30DC  
                         l4440 2AC6                           l4424 2A02                           l4520 0FEC  
                         l4512 0F1C                           l6032 34AA                           l6024 341A  
                         l6016 33F0                           l6120 2378                           l6112 236A  
                         l6104 2346                           l6040 22C4                           l5250 34EE  
                         l5242 34D0                           l5306 36B8                           l5314 36E2  
                         l5218 387C                           l5234 42BA                           l5330 3948  
                         l5322 3906                           l5402 3776                           l3490 3E02  
                         l3482 3DDC                           l3474 3DAC                           l5410 2F0C  
                         l4194 22B2                           l4186 227E                           l4178 2230  
                         l4098 1FD8                           l4346 381E                           l4370 31A8  
                         l4362 316A                           l4290 1DB4                           l4282 1D70  
                         l4274 1CE8                           l4266 1C92                           l4258 1C5C  
                         l3810 17C6                           l3802 1778                           l3730 1656  
                         l4418 30EC                           l4450 2B2A                           l4442 2AC8  
                         l4434 2A80                           l4426 2A10                           l4530 10E0  
                         l4522 1020                           l4514 0F50                           l4506 0EAA  
                         l6034 34C2                           l6026 346E                           l6018 33FC  
                         l6130 23A2                           l6122 237A                           l6114 236C  
                         l6106 2350                           l6050 22DC                           l6042 22C8  
                         l5260 3522                           l5252 34FC                           l5244 34D4  
                         l5316 36F2                           l5308 36CE                           l5340 438A  
                         l5228 429C                           l5332 3958                           l5324 3916  
                         l5236 45E6                           l5404 377E                           l3492 3E08  
                         l3484 3DE2                           l3476 3DBE                           l5420 2FBA  
                         l5412 2F1E                           l5500 3AA2                           l4196 22B4  
                         l4188 229A                           l4348 382E                           l4372 31F8  
                         l4364 317A                           l4356 30FE                           l4292 1DC6  
                         l4284 1D7E                           l4276 1CF4                           l4268 1CA2  
                         l3900 1A3E                           l3820 180A                           l3812 17D6  
                         l3804 177C                           l3740 168A                           l3732 1658  
                         l4380 300E                           l4460 2B82                           l4452 2B48  
                         l4444 2AD4                           l4436 2A88                           l4428 2A56  
                         l4540 11E2                           l4532 1114                           l4524 1054  
                         l4516 0F84                           l4508 0EBC                           l6028 3482  
                         l6140 23B6                           l6132 23A4                           l6124 237C  
                         l6116 2374                           l6108 2352                           l6060 22FA  
                         l6052 22E2                           l6044 22CC                           l5270 355C  
                         l5262 352A                           l5254 3504                           l5246 34E2  
                         l5318 36FA                           l5334 395C                           l5326 3926  
                         l5350 2D5C                           l5342 2D2C                           l5238 4602  
                         l5430 2BE4                           l5422 2BA4                           l4470 4576  
                         l3486 3DF8                           l3478 3DC6                           l5414 2F22  
                         l5406 2EA4                           l5502 3BBC                           l4374 31FE  
                         l4366 3188                           l4358 312C                           l4294 1DD4  
                         l4286 1D9C                           l4278 1D10                           l3910 1ABA  
                         l3902 1A78                           l3822 180C                           l3814 17EC  
                         l3806 1780                           l3750 16BC                           l3734 1668  
                         l3742 1692                           l3726 163C                           l4390 305E  
                         l4462 2B90                           l4454 2B4A                           l4446 2B10  
                         l4438 2A94                           l4550 12E4                           l4542 1216  
                         l4534 1146                           l4526 1078                           l4518 0FB8  
                         l6150 2470                           l6142 23B8                           l6134 23A6  
                         l6126 237E                           l6118 2376                           l6070 2316  
                         l6062 2302                           l6054 22E6                           l6046 22D0  
                         l6038 22C0                           ?_pad 0010                           l5600 425C  
                         l5280 3582                           l5272 3564                           l5264 3532  
                         l5256 3508                           l5248 34EA                           l5336 398A  
                         l5328 3934                           l5360 2D92                           l5352 2D62  
                         l5344 2D30                           l6232 2C2C                           l5440 2C04  
                         l5432 2BEC                           l5424 2BCA                           l4472 457C  
                         l3488 3E00                           l5416 2F60                           l5408 2EBE  
                         l5520 3C0E                           l5504 3BD6                           l4368 319A  
                         l4296 1DD8                           l4288 1DA6                           l3920 1ADA  
                         l3912 1ABE                           l3904 1A7A                           l3840 1894  
                         l3832 185C                           l3824 1816                           l3816 17F8  
                         l3808 17AA                           l3760 16F2                           l3752 16C2  
                         l3744 16A2                           l3736 1678                           l3728 1648  
                         l4392 3062                           l4384 3022                           l4464 2B92  
                         l4456 2B4E                           l4448 2B1C                           l4560 1422  
                         l4552 1318                           l4544 1248                           l4536 1178  
                         l4528 10AC                           l6160 24C2                           l6152 247C  
                         l6144 23C6                           l6136 23A8                           l6128 2380  
                         l6080 232C                           l6072 231E                           l6064 2306  
                         l6056 22EA                           l6048 22D0                           l5610 4298  
                         l5602 4260                           l5282 358A                           l5274 3566  
                         l5266 3540                           l5258 3510                           l5290 3666  
                         l5338 437C                           l5370 2DDE                           l5362 2D9C  
                         l5354 2D72                           l5346 2D44                           l5450 2C78  
                         l5434 2BF0                           l5442 2C3A                           l5426 2BD2  
                         l4474 457E                           l5418 2F7A                           l5522 3C1E  
                         l5514 3BEE                           l5506 3BDE                           l5530 3B60  
                         l4298 1DE6                           l3922 1AE8                           l3914 1ACC  
                         l3906 1A8A                           l3842 1898                           l3834 186C  
                         l3826 1838                           l3850 18B8                           l3818 17FC  
                         l3770 172E                           l3762 1702                           l3754 16D0  
                         l3746 16A8                           l3738 1688                           l4394 3070  
                         l4386 304C                           l4378 2FF8                           l4458 2B72  
                         l4570 15DA                           l4562 1454                           l4554 137E  
                         l4546 127A                           l4538 11B0                           l6170 250A  
                         l6162 24DA                           l6154 2488                           l6146 23F4  
                         l6138 23B4                           l6090 2336                           l6082 232E  
                         l6074 2326                           l6066 230A                           l6058 22F2  
                         l4900 45DA                           l5604 4268                           l5700 404C  
                         l5276 356C                           l5268 3546                           l5292 366E  
                         l5380 2E50                           l5364 2DA2                           l5372 2DFA  
                         l5356 2D7E                           l5348 2D4C                           l5460 2CE4  
                         l5452 2C82                           l5444 2C4A                           l5436 2BFC  
                         l5428 2BE0                           l5620 4360                           l4476 4580  
                         l4468 456C                           l5524 3C22                           l5516 3BFE  
                         l5508 3BE6                           l5540 3B80                           l5532 3B68  
                         l3924 1AEA                           l3916 1AD2                           l3908 1A9A  
                         l3852 18DE                           l3860 1934                           l3844 18A6  
                         l3836 187A                           l3828 1848                           l3780 174C  
                         l3772 173C                           l3764 1704                           l3756 16D2  
                         l3748 16BA                           l4388 304E                           l4572 15EA  
                         l4564 14E4                           l4556 1394                           l4548 12B2  
                         l6180 2576                           l6172 2522                           l6164 24DC  
                         l6156 2494                           l6148 2458                           l6092 2338  
                         l6084 2330                           l6076 2328                           l6068 230E  
                         l4902 45DC                           l5606 4270                           l5702 4092  
                         l5630 44BA                           l5278 3572                           l5294 3672  
                         l5286 3654                           l5374 2E14                           l5382 2E60  
                         l5366 2DD4                           l5358 2D86                           l5454 2CA2  
                         l5446 2C5E                           l5622 4370                           l5614 4348  
                         l4478 4582                           l5550 3D2E                           l5518 3C06  
                         l5542 3B88                           l5526 3B3E                           l4910 399C  
                         l3918 1AD4                           l3870 1988                           l3862 195A  
                         l3854 1912                           l3846 18A8                           l3838 1888  
                         l3790 1760                           l3782 1750                           l3774 1740  
                         l3758 16E2                           l3766 170C                           l4566 1516  
                         l4558 13C6                           l6182 257E                           l6174 2532  
                         l6166 24E8                           l6158 2496                           l6094 233C  
                         l6086 2332                           l6078 232A                           l4904 45DE  
                         l5480 45A6                           l5608 4296                           l5712 413C  
                         l5720 4132                           l5632 44BC                           l5296 3680  
                         l5288 3658                           l5384 2E70                           l5376 2E26  
                         l5368 2DD8                           l5392 3704                           l5464 2CF8  
                         l5456 2CC2                           l5448 2C6E                           l5616 4350  
                         l5560 3D62                           l5552 3D46                           l5544 3B90  
                         l5528 3B58                           l4920 3A04                           l4912 39AC  
                         l3880 19B2                           l3872 1996                           l3864 196A  
                         l3856 1914                           l3848 18B2                           l3792 1764  
                         l3784 1754                           l3776 1744                           l3768 171C  
                         l4568 15A6                           l5800 35B0                           l6184 258A  
                         l6176 254A                           l6168 24FE                           l6096 233E  
                         l6088 2334                           l4906 45E0                           l5714 4182  
                         l5706 409C                           l5570 46A6                           l5634 44C4  
                         l5626 44AA                           l5298 3688                           l5386 2E76  
                         l5378 2E36                           l5394 370C                           l5458 2CDA  
                         l5618 4358                           l5562 3D6A                           l5490 3A66  
                         l5482 3A2C                           l5546 3BA0                           l5538 3B70  
                         l5730 3EA6                           l4930 3A1E                           l4922 3A06  
                         l4914 39D2                           l3890 19E4                           l3882 19C2  
                         l3874 1998                           l3858 1924                           l3794 1768  
                         l3786 1758                           l3778 1748                           l5650 3C82  
                         l5810 35FE                           l5802 35CA                           l6186 25A6  
                         l6178 2560                           l6098 2340                           l4908 45E2  
                         l5708 40E2                           l5572 46B6                           l5628 44AE  
                         l5388 2E86                           l5396 3732                           l5468 2D04  
                         l5580 4250                           l5564 3D72                           l5492 3A6E  
                         l5484 3A32                           l5740 3CB4                           l5732 3FEE  
                         l5548 3BA4                           l5660 44FE                           l5724 3E76  
                         l4932 3A28                           l4924 3A10                           l4916 39D6  
                         l3892 19FA                           l3876 19A6                           l3868 197E  
                         l3884 19C4                           l3796 176C                           l3788 175C  
                         l5900 33E0                           l5652 3C92                           l5644 3C5E  
                         l5636 3C3A                           l5820 3630                           l5804 35DC  
                         l6188 25A8                           l4870 469C                           l5478 4596  
                         l5590 46C2                           l5718 40EC                           l5398 373A  
                         l5574 4218                           l5910 2854                           l5566 3D82  
                         l5558 3D4E                           l5494 3A76                           l5486 3A48  
                         l5670 4484                           l5750 3D12                           l5742 3CC0  
                         l5662 450C                           l5734 3FFA                           l5726 3E82  
                         l4934 460C                           l4926 3A12                           l4918 39FA  
                         l3878 19AE                           l3886 19D2                           l3798 1770  
                         l5654 3C96                           l5646 3C72                           l5638 3C56  
                         l5830 3220                           l5822 3642                           l5814 360E  
                         l4872 469E                           l5584 46D2                           l5592 46C8  
                         l5576 4220                           l5920 28B0                           l5912 286C  
                         l5904 281E                           l5568 3D86                           l5496 3A7E  
                         l5488 3A50                           l5672 449C                           l5752 3D2A  
                         l5744 3CD8                           l5664 4518                           l5736 4012  
                         l5680 4446                           l5760 3FC0                           l5656 44DC  
                         l5728 3E9A                           l4936 4624                           l4928 3A1C  
                         l4880 465A                           l3896 1A24                           l3888 19D6  
                         l5648 3C7A                           l5840 3272                           l5832 3236  
                         l5816 3620                           l5808 35EC                           l4874 46A0  
                         l4866 468A                           l4890 45C6                           l5586 46D6  
                         l5594 46CC                           l5578 4230                           l5930 2910  
                         l5922 28C8                           l5914 287E                           l5906 2824  
                         l5498 3A8C                           l5690 455E                           l5746 3CE4  
                         l5666 452E                           l5738 401E                           l5682 4452  
                         l5754 3F90                           l5674 4414                           l5770 3F32  
                         l5658 44E8                           l5762 3E18                           l4882 4664  
                         l3898 1A30                           l5850 32BE                           l5842 3288  
                         l5834 323E                           l5826 3202                           l4868 4694  
                         l4892 45D0                           l5596 46DC                           l5588 46BE  
                         l5940 2974                           l5932 2928                           l5924 28DE  
                         l5916 2880                           l5908 283C                           l5860 4322  
                         l5668 4478                           l5748 3D10                           l5684 446A  
                         l5756 3F9C                           l5676 4420                           l5772 3F3E  
                         l5692 43E2                           l5780 3EE0                           l5764 3E24  
                         l4884 4666                           l4876 464E                           l5852 32CA  
                         l5844 329E                           l5836 3254                           l5828 320A  
                         l4894 45D2                           l5598 46E0                           l5950 29A8  
                         l5942 298C                           l5934 293E                           l5926 28E0  
                         l5918 2898                           l5862 4332                           l5686 453C  
                         l5758 3FB4                           l5678 4438                           l5774 3F56  
                         l5694 43EE                           l5782 3EF8                           l5766 3E3C  
                         l4886 4668                           l4878 4658                           l5870 331E  
                         l5790 43B0                           l5854 32E8                           l5846 32A6  
                         l5838 326A                           l4896 45D6                           l4888 45BE  
                         l5952 29C0                           l5944 29A2                           l5936 2940  
                         l5928 28F8                           l5864 433C                           l5856 4314  
                         l5688 4548                           l5776 3F62                           l5696 4406  
                         l5784 3F04                           l5768 3E48                           l5960 25F0  
                         l5880 3364                           l5872 3330                           l5792 43BC  
                         l5848 32B2                           l4898 45D8                           l5954 29D6  
                         l5946 29A4                           l5938 2958                           l5698 4630  
                         l5858 4318                           l5778 3ED4                           l5786 466C  
                         l5970 2660                           l5962 260C                           l5890 3398  
                         l5882 3366                           l5874 3332                           l5866 3300  
                         l5794 43D4                           l5948 29A6                           l5788 4680  
                         l5980 26C0                           l5972 266C                           l5964 2618  
                         l5956 25C4                           l5892 339A                           l5884 3368  
                         l5876 3334                           l5868 3306                           l5796 3594  
                         l5990 272A                           l5982 26D6                           l5974 2682  
                         l5966 262E                           l5958 25DA                           l5894 339C  
                         l5886 336A                           l5878 3336                           l5798 35A4  
                         l5992 2740                           l5984 26EC                           l5976 2698  
                         l5968 2644                           l5896 33B6                           l5888 3382  
                         l5994 275C                           l5986 2708                           l5978 26B4  
                         l5898 33CC                           l5996 2768                           l5988 2714  
                         l5998 277E                           STR_1 0E6D                           STR_2 0EA6  
                         STR_3 0E01                           STR_4 0EA6                           STR_5 0E1E  
                         STR_6 0EA6                           STR_7 0E39                           STR_8 0EA6  
                         STR_9 0E54                           u3000 187A                           u3001 1876  
                         u3010 1888                           u3011 1884                           u3100 19D2  
                         u3020 18A6                           u3101 19CE                           u3021 18A2  
                         u3110 19E4                           u3030 18DE                           u3111 19E0  
                         u3031 18DA                           u3200 1ACC                           u3120 19FA  
                         u3040 1924                           u4000 127A                   _BAUD4CONbits 0EE9  
                         u3201 1AC8                           u3121 19F6                           u3041 1920  
                         u4001 1276                           u3210 1AE8                           u3130 1A10  
                         u3050 195A                           u4010 12E4                           u3211 1AE4  
                         u3131 1A0C                           u3051 1956                           u4011 12E0  
                         u3300 1F52                           u3140 1A24                           u3060 196A  
                         u4020 137E                           u3301 1F4E                           u3141 1A20  
                         u3061 1966                           u4021 137A                           u2510 3DBE  
                         u3310 1F62                           u3150 1A3E                           u3070 1996  
                         u4030 13C6                           u2511 3DBA                           u3311 1F5E  
                         u3151 1A3A                           u3071 1992                           u4031 13C2  
                         u2520 3DDC                           u5000 3AB8                           u3400 212E  
                         u3320 1FA6                           u3160 1A78                           u3080 19A6  
                         u4040 1454                           u2521 3DD8                           u5001 3AB4  
                         u3401 212A                           u3321 1FA2                           u3161 1A74  
                         u3081 19A2                           u4041 1450                           u2530 3DF8  
                         u5010 3C38                           u3410 2144                           u3330 1FB8  
                         u3170 1A8A                           u3090 19C2                           u4050 1516  
                         _T2PR 0FBC                           u2531 3DF4                           u5011 3C34  
                         u3411 2140                           u3331 1FB4                           u3171 1A86  
                         u3091 19BE                           u4051 1512                           u5020 3BBA  
                         u3500 227E                           u3420 2162                           u3340 1FC8  
                         u3180 1A9A                           u4060 15EA                           u5100 35A4  
                         u5021 3BB6                           u3501 227A                           u3421 215E  
                         u3341 1FC4                           u3181 1A96                           u4061 15E6  
                         u5101 35A0                           u5030 3DA2                           u3270 3AD0  
                         u3510 22AC                           u3430 2182                           u3350 2008  
                         u3190 1ABA                           u5110 35DC                           u5031 3D9E  
                         u3271 3ACC                           u3511 22A8                           u3431 217E  
                         u3351 2004                           u3191 1AB6                           u5111 35D8  
                         u5040 46B6                           u3440 2194                           u3360 2048  
                         u3600 1D5A                           u3520 1B16                           u3280 4312  
                         u5200 329E                           u5120 35FE                           u5041 46B2  
                         u3441 2190                           u3361 2044                           u3521 1B12  
                         u3281 430E                           u5201 329A                           u5121 35FA  
                         u5050 4250                           u3450 21C2                           u3370 20BE  
                         u3290 1F40                           u3610 1DB4                           u3530 1B28  
                         u5210 32DC                           u5130 3620                           u5051 424C  
                         u3451 21BE                           u3371 20BA                           u3291 1F3C  
                         u3611 1DB0                           u3531 1B24                           u5211 32D4  
                         u5131 361C                           u5060 4284                           u5300 262E  
                         u3460 21D8                           u3380 20E0                           u3700 1F08  
                         u3620 1DD4                           u3540 1B38                           u2900 172E  
                         u5140 3642                           u5061 427C                           u5301 262A  
                         u3461 21D4                           u3381 20DC                           u3701 1F04  
                         u3621 1DD0                           u3605 1D50                           u3541 1B34  
                         u2901 172A                           u5141 363E                           u5230 2852  
                         u5310 2644                           u3470 21EC                           u3390 210A  
                         u3710 37E0                           u3630 1DE6                           u3550 1B78  
                         u2910 173C                           u2830 1656                           u5150 3220  
                         u5231 284E                           u5311 2640                           u3471 21E8  
                         u3391 2106                           u3711 37DC                           u3631 1DE2  
                         u3551 1B74                           u2911 1738                           u2831 1652  
                         u5151 321C                           u5080 44DA                           u4600 34FC  
                         u5240 28AE                           u5400 27D2                           u5320 2682  
                         u3480 2206                           u3720 381E                           u3640 1E14  
                         u3560 1B8A                           u2920 17AA                           u2840 1668  
                         u3800 3042                           u5160 3236                           u5081 44D6  
                         u4601 34F8                           u5241 28AA                           u5401 27CE  
                         u5321 267E                           u3481 2202                           u3721 381A  
                         u3641 1E10                           u3561 1B86                           u2921 17A6  
                         u2841 1664                           u5161 3232                           u4610 3522  
                         u5250 290E                           u5410 27E8                           u5330 2698  
                         u3490 224E                           u3730 3852                           u3650 1E2A  
                         u3570 1B9A                           u2930 17C2                           u2850 1678  
                         u3810 3070                           u5090 3CB2                           u5170 3254  
                         u4611 351E                           u5251 290A                           u5411 27E4  
                         u5331 2694                           u3491 224A                           u3731 384E  
                         u3651 1E26                           u3571 1B96                           u2931 17BC  
                         u2851 1674                           u3811 306C                           u5091 3CAE  
                         u5171 3250                           u4620 3540                           u4700 36F2  
                         u4540 386C                           u5260 296E                           u5340 26D6  
                         u3740 312C                           u3660 1E3E                           u3580 1BD0  
                         u2940 17C4                           u2860 16BA                           u3820 3084  
                         u3900 2B0C                           u5228 32DE                           u5180 326A  
                         u5420 3416                           u4621 353C                           u4701 36EE  
                         u4541 3868                           u5261 296A                           u5341 26D2  
                         u3741 3128                           u3661 1E3A                           u3581 1BCC  
                         u2861 16B6                           u3821 3080                           u3805 3038  
                         u3901 2B08                           u5181 3266                           u5421 3412  
                         u5078 4286                           u4630 355C                           u4550 387C  
                         u4710 3916                           u5270 29D6                           u5350 26EC  
                         u3750 316A                           u3670 1E58                           u3590 1BE0  
                         u2950 17EC                           u2870 16D0                           u3830 30AC  
                         u3910 2B2A                           u5190 3288                           u5430 3482  
                         u4631 3558                           u4551 3878                           u4711 3912  
                         u5271 29D2                           u5351 26E8                           u3751 3166  
                         u3671 1E54                           u3591 1BDC                           u2951 17E8  
                         u2871 16CC                           u3831 30A8                           u3911 2B26  
                         u5191 3284                           u5431 347E                           u4640 3582  
                         u4560 38A2                           u4720 3934                           u4800 2E14  
                         u5360 272A                           u5280 25DA                           u3760 3188  
                         u3680 1EA0                           u2960 180A                           u2880 16E2  
                         u3840 30CC                           u3920 2B3A                           u5440 2470  
                         u4641 357E                           u4561 389E                           u4721 3930  
                         u4801 2E10                           u5361 2726                           u5281 25D6  
                         u3761 3184                           u3681 1E9C                           u2961 1806  
                         u2881 16DE                           u3841 30C8                           u3921 2B36  
                         u5441 246C                           u4650 3666                           u4570 38D4  
                         u4730 397A                           u4810 2E26                           u5370 2740  
                         u5290 25F0                           u3770 31A8                           u3690 1ECE  
                         u2970 182A                           u2890 16F2                           u3850 30DC  
                         u3930 2B48                           u5450 254A                           u4651 3662  
                         u4571 38D0                           u4731 3976                           u4811 2E22  
                         u5371 273C                           u5291 25EC                           u3771 31A4  
                         u3691 1ECA                           u2971 1826                           u2891 16EE  
                         u3851 30D8                           u3931 2B44                           u5451 2546  
                         u5507 24CC                           u4660 3680                           u4580 42DA  
                         u4740 398A                           u4820 2E36                           u4900 2BCA  
                         u5380 277E                           u3780 31F8                           u2980 1838  
                         u3940 2B82                           u3860 2A02                           u5460 2560  
                         u4661 367C                           u4581 42D6                           u4741 3986  
                         u4821 2E32                           u4901 2BC6                           u5381 277A  
                         u3781 31F4                           u2981 1834                           u3941 2B7E  
                         u3861 29FE                           u5461 255C                           u5517 24F2  
                         u4590 34E2                           u4670 369A                           u4750 438A  
                         u4830 2E50                           u4910 2C4A                           u5390 2794  
                         u2990 1848                           u3790 300E                           u3950 2B90  
                         u3870 2A10                           u5470 2576                           u4591 34DE  
                         u4671 3696                           u4751 4386                           u4831 2E4C  
                         u4911 2C46                           u5391 2790                           u2991 1844  
                         u3791 300A                           u3951 2B8C                           u3871 2A0C  
                         u5607 3340                           u5471 2572                           u5527 2514  
                         u4680 36B8                           u4840 2E60                           u4760 2D40  
                         u4920 2C6E                           u3880 2A6C                           u3960 1146  
                         u4681 36B4                           u4841 2E5C                           u4761 2D3A  
                         u4921 2C6A                           u3881 2A68                           u3961 1142  
                         u5617 3374                           u5537 34B4                           u4690 36CE  
                         u4850 2E70                           u4770 2D42                           u4930 2CA2  
                         u3890 2AC2                           u3970 1178                           u4691 36CA  
                         u4851 2E6C                           u4931 2C9E                           u5707 3B96  
                         u3891 2ABE                           u3971 1174                           u5627 33A8  
                         u5547 35BA                           u4780 2D5C                           u4860 3732  
                         u4940 2CC2                           u3980 11E2                           u4781 2D58  
                         u4861 372E                           u4941 2CBE                           u5717 3FA6  
                         u5637 3E2E                           u3981 11DE                           u5557 32F2  
                         u4950 45A6                           u4790 2D72                           u4870 37A8  
                         u3990 1248                           u4951 45A2                           u4791 2D6E  
                         u4871 37A4                           u5807 3A80                           u5727 445C  
                         u5647 3E8C                           u3991 1244                           u5567 3C88  
                         u4960 45BC                           u4880 2EBE                           u4961 45B8  
                         u4881 2EBA                           u5817 3D78                           u5737 4004  
                         u5657 44F2                           u5577 42EE                           u5497 235E  
                         u4890 2F7A                           u4970 3A48                           u5827 4328  
                         u4891 2F76                           u4971 3A44                           u5747 4522  
                         u5667 3EEA                           u5587 43C6                           u4980 3A66  
                         u5837 285E                           u4981 3A62                           u5757 3CCA  
                         u5677 43F8                           u5597 3310                           u4990 3AA2  
                         u5847 28BA                           u4991 3A9E                           u5767 3D1C  
                         u5687 3F48                           u5857 291A                           u5777 448E  
                         u5697 442A                           u5867 297E                           u5787 3C14  
                         u5877 29E0                           u5797 4552                           u5887 44BE  
                  main@current 00B0                    main@maximum 00AC                           abs@a 0008  
                         _dbuf 0164                           _main 22C0                           _dtoa 2D2C  
                         _path 0200           convert_rgb2hue@cCurr 003F                           _prec 00C8  
                         pad@i 0016                           pad@p 0013                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           btemp 0052                           _stop 3A2C  
          fullSpeedAhead@power 0017                           prodh 0FF4                           prodl 0FF3  
                         start 003A               __end_of_ADC_init 46A4                ___fldiv@new_exp 002C  
            moveLightBlue@path 0021         __end_of_color_read_Red 409C                   ___param_bank 0000  
               reading_hue@hue 0046                          ??_abs 000A                          ??_pad 0015  
         logAction@path_length 0006                  ___fltol@sign1 003C                __end_of___fladd 1AFC  
                        ?_main 0001                          ?_dtoa 0018                          _ADPCH 0F5F  
              __end_of___fldiv 22C0                __end_of___awdiv 3594                          STR_10 0EA6  
                        STR_11 0E85                          STR_12 0E9A                __end_of___awmod 3704  
              __end_of___flmul 1F26                __end_of___flsub 4218                __end_of___fltol 30FE  
                        ?_stop 0014                ___awdiv@divisor 0004                __end_of___lwdiv 3E18  
                        i1l673 0032                ___awdiv@counter 0006              ??_convert_rgb2hue 0040  
                 vfpfcnvrt@fmt 0024                          _TMR0H 0FD4                          _TMR0L 0FD3  
              __end_of_left135 4478        __end_of_sendCharSerial4 46BC     __end_of_I2C_2_Master_Start 46DC  
   __end_of_I2C_2_Master_Write 46C8                          _flags 00CA            read_prec_or_width@c 000A  
          read_prec_or_width@n 000B                          _fputc 385C                          _fputs 429C  
                        pad@fp 0010                          _width 00C6                          _putch 46E6  
                        dtoa@d 0019                          dtoa@i 0021                          dtoa@p 001D  
              __end_of_right90 450C                          dtoa@s 0020                          dtoa@w 001E  
                 ?_reading_hue 0042                __end_of_moveRed 3ED4                          tablat 0FF5  
               moveOrange@path 0021          moveYellow@path_length 001F                __end_of_turn180 44AA  
                        ttemp5 0053                          ttemp6 0056                          ttemp7 005A  
                        status 0FD8                          wtemp8 0053                __end_of_sprintf 437C  
        convert_rgb2hue@redmax 0064        __end_of_color_read_Blue 418C          _I2C_2_Master_RepStart 46DC  
              ?_color_read_Red 0006                __initialization 418C                   __end_of_main 25C4  
                 __end_of_dtoa 2EA4                   __end_of_stop 3ABA          __end_of_moveLightBlue 3FEE  
              _get16bitTMR0val 460C                         ??_main 004D                         ??_dtoa 001B  
                       ??_stop 0016                  __activetblptr 0003     __end_of_read_prec_or_width 37B2  
              _reverseStraight 3202                   ?_setMotorPWM 000F                         ?_fputc 0002  
                       ?_fputs 000A                         _ADRESH 0F64                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
             ___awdiv@dividend 0002               __end_of_backHalf 456C                         ?_putch 0001  
                       _RC0PPS 0E62                         _RC4REG 0EE3                         _RE2PPS 0E74  
                       i1l3320 001E                         i1l3322 002E                         _RD5PPS 0E6F  
                       _RC7PPS 0E69                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       _RG6PPS 0E88                  vfpfcnvrt@done 002C       __end_of_color_click_init 4348  
                       _RX4PPS 0E15                         _TX4REG 0EE4               __end_of___xxtofl 2BA4  
  convert_rgb2hue@greencurrent 0068               __end_of_decision 281E                         _LowISR 0018  
                ??_Timer0_init 0002                   _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0031  
                       ___flge 30FE                         ___fleq 37B2                      ??___fladd 000A  
                       ___wmul 45E6                      ??___fldiv 0023               backOneAndHalf@mL 0019  
                    ??___awdiv 0006               backOneAndHalf@mR 001A                      ??___awmod 0006  
                    ??___flmul 000A                      ??___flsub 001A                      ??___fltol 0038  
                    ??___lwdiv 000C                         _left90 450C           read_prec_or_width@ap 0009  
                 ?_reverseTurn 001D                         clear_0 41A4                         clear_1 41B0  
                       clear_2 41BC               ___awdiv@quotient 0008                ___awmod@divisor 0004  
                       _motorL 00D6                         _motorR 00CD                         isa$std 0001  
              ___awmod@counter 0006                      ??_left135 001B             send2USART@hue_char 0060  
                       pad@buf 0011               __end_of_right135 4446                         dtoa@fp 0018  
             __end_of_moveBlue 3D2E               __end_of_movePink 3F32                         fputc@c 0002  
                       fputs@c 000D                         fputs@i 000E                         fputs@s 000A  
                    ??_right90 001B                   __mediumconst 0000        calibration_routine@cCal 0045  
                    ??_moveRed 0023                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8                      ?_ADC_init 0001               ?_sendCharSerial4 0001  
       convert_rgb2hue@bluemax 0074                 moveYellow@path 0021                         putch@c 0001  
             __end_of_vfprintf 425A                      ??_turn180 001B                         stop@mL 0014  
                       stop@mR 0015              ??_initDCmotorsPWM 0004                      ??_sprintf 0038  
             __end_of_turnLeft 3C3A                     ___flge@ff1 0002                     ___flge@ff2 0006  
                 ___xxtofl@arg 000C                   ___xxtofl@exp 000B                   ___xxtofl@val 0002  
                   ___fleq@ff1 0002                     ___fleq@ff2 0006                fullSpeedBack@mL 0014  
              fullSpeedBack@mR 0015                     __accesstop 0060        __end_of__initialization 41C8  
     __end_of_color_read_Clear 413C       __end_of_color_read_Green 40EC         ?_I2C_2_Master_RepStart 0001  
               _backOneAndHalf 43E2                  ___rparam_used 0001                     ___fltol@f1 0034  
             ?_color_read_Blue 0006                 __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 462E  
                _fullSpeedBack 3D2E                   __pidataBANK0 46E8                  __end_of_fputc 3906  
                __end_of_fputs 42DC                  __end_of_putch 46E8        __end_of_reverseStraight 3300  
          __end_of_Timer0_init 45E6               reading_hue@cCurr 0042            moveBlue@path_length 001F  
                   ??_ADC_init 0002                 main@clear_norm 00B8                     backHalf@mL 0019  
                   backHalf@mR 001A                        ??_fputc 0005                        ??_fputs 000D  
                      ??_putch 0002                     __pbssBANK0 00BE                     __pbssBANK1 0100  
                   __pbssBANK2 0200         __end_of_backOneAndHalf 4414                        ?_LowISR 0001  
            _color_writetoaddr 462E                   _T2CLKCONbits 0FBF                 ?_fullSpeedBack 0014  
              _convert_rgb2hue 0EAA                        ?___flge 0002                        ?___fleq 0002  
           ?_color_writetoaddr 0004                  _customDelayMs 42DC                        ?___wmul 0002  
                      ?_left90 0019                      ?_backHalf 0019            ??_color_writetoaddr 0005  
                    ?___xxtofl 0002            _convert_rgb2hue$435 0080            _convert_rgb2hue$436 0084  
          _convert_rgb2hue$437 0088            _convert_rgb2hue$438 008C                      ?_decision 0047  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                  decision@color 004B  
                      _SSP2ADD 0ED6                        _SSP2BUF 0ED5                    moveGreen@mL 001D  
                  moveGreen@mR 001E                    moveRed@path 0021                ?_backOneAndHalf 0019  
       color_writetoaddr@value 0004               ??_color_read_Red 0008      __end_of_color_writetoaddr 464E  
                    _ADREFbits 0F58                      ?_right135 0019             _I2C_2_Master_Start 46D2  
                   _initUSART4 464E             _I2C_2_Master_Write 46BC                      ?_moveBlue 001D  
                      __Hparam 0000                      ?_movePink 001D                        __Lparam 0000  
            color_read_Red@tmp 000B                    moveWhite@mL 001D                    moveWhite@mR 001E  
    customDelayMs@milliseconds 0002                    _Timer0_init 45BE                 ?_customDelayMs 0002  
      sendStringSerial4@string 0003               ?_get16bitTMR0val 0002                        ___fladd 163C  
                      ___fldiv 1F26                        ___awdiv 34D0                        ___awmod 3654  
                      ___flmul 1AFC                        ___flsub 41D2                        ___fltol 2FF8  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 3DA4            ?_I2C_2_Master_Write 0001  
                    ?_vfprintf 002E                   __psmallconst 0E00                        __pcinit 418C  
                   ??_backHalf 001B              __end_of_logAction 3B3E                        __ramtop 0E00  
             ?_reverseStraight 0019                     _send2USART 466C                      ?_turnLeft 0014  
                      _left135 4446                        __ptext0 22C0                        __ptext1 33EA  
                      __ptext2 3594                        __ptext3 3202                        __ptext4 3C3A  
                      __ptext5 42DC                        __ptext6 43B0                        __ptext7 3300  
                      __ptext8 0EAA                        __ptext9 29F0                      _T2CONbits 0FBD  
        read_prec_or_width@fmt 0008                     ??___xxtofl 0006               ___awmod@dividend 0002  
                   ??_decision 004B         reverseStraight@delayMs 001F                        _right90 44DC  
                    _T2HLTbits 0FBE                        _moveRed 3E76                  _RxBufWriteCnt 0051  
                      _turn180 4478                        _sprintf 4348                        main@hue 00BA  
         ??_I2C_2_Master_Start 0003           ??_I2C_2_Master_Write 0003           end_of_initialization 41C8  
            __end_of_moveGreen 404C              __end_of_moveWhite 43E2                        fputc@fp 0004  
      __end_of_convert_rgb2hue 163C                        fputs@fp 000C              ?_color_click_init 0001  
           _read_prec_or_width 3704                     _moveOrange 3F32                     ??_right135 001B  
                   _moveYellow 3E18                ??_fullSpeedBack 0016                     ??_moveBlue 0023  
           ??_color_click_init 0006        convert_rgb2hue@clearmax 007C                     ??_movePink 0023  
             _colorCalibration 00E7              __end_of_vfpfcnvrt 2D2C                        postdec2 0FDD  
          ?_read_prec_or_width 0008                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0028                     ??_vfprintf 0031  
      convert_rgb2hue@greenmax 006C                   _colorCurrent 00DF                     _returnHome 33EA  
              _initDCmotorsPWM 399C                     ??_turnLeft 0016                      _PORTFbits 0F8E  
           setMotorPWM@negDuty 0013                  moveGreen@path 0021              __end_of_turnRight 3BBC  
                  ___fladd@grs 0011                  ___xxtofl@sign 000A                    returnHome@i 0030  
                    _TRISAbits 0F81             setMotorPWM@posDuty 0012                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88                  logAction@path 0008  
                logAction@time 0004               convert_rgb2hue@b 00A8           ??_read_prec_or_width 000A  
             convert_rgb2hue@g 00A4                    ___fldiv@grs 002E               convert_rgb2hue@r 00A0  
                  ___fldiv@rem 0027               fullSpeedAhead@mL 0014               fullSpeedAhead@mR 0015  
     color_writetoaddr@address 0005        ??_I2C_2_Master_RepStart 0003                    ___flmul@grs 000F  
                  _CCP1CONbits 0FAB            _calibration_routine 281E              ?_color_read_Clear 0006  
                 _EUSART4RXbuf 0150                   _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0006     convert_rgb2hue@bluecurrent 0070            movePink@path_length 001F  
                  _CCP3CONbits 0F26                    ?_initUSART4 0001                    _CCP4CONbits 0F22  
    sendCharSerial4@charToSend 0002                ??_customDelayMs 0004             ??_color_read_Clear 0008  
           ??_color_read_Green 0008                 __end_of_LowISR 003A      convert_rgb2hue@redcurrent 0060  
               __end_of___flge 3202                 __end_of___fleq 385C                 _fullSpeedAhead 3C3A  
                  vfpfcnvrt@ap 0025                    vfpfcnvrt@cp 002D                    vfpfcnvrt@fp 0023  
               __end_of___wmul 460C                 __end_of_left90 453C                    ?_send2USART 0045  
         ?_calibration_routine 0045            reverseStraight@time 001B            color_read_Clear@tmp 000B  
          start_initialization 418C           moveGreen@path_length 001F   calibration_routine@cal_state 0060  
                  __end_of_abs 43B0                    __end_of_pad 399C                  _TxBufWriteCnt 0050  
             ?_convert_rgb2hue 003E                    ?_moveOrange 001D                    ?_moveYellow 001D  
          color_read_Green@tmp 000B                       ??_LowISR 0001        __end_of_initDCmotorsPWM 3A2C  
                  vfprintf@fmt 002F         __end_of_fullSpeedAhead 3CB4                       ??___flge 000A  
                     ??___fleq 000A                       ??___wmul 0006                       ??_left90 001B  
                  __pdataBANK0 00EF                    ?_returnHome 0022          ??_calibration_routine 0046  
                _moveLightBlue 3F90                      ___fladd@a 0006                      ___fladd@b 0002  
                    ___fldiv@a 001F                      ___fldiv@b 001B                      ___flmul@a 0006  
                    ___flmul@b 0002                    __pbssCOMRAM 004F                      ___flsub@a 0016  
                    ___flsub@b 0012                  __pcstackBANK0 0060               ??_backOneAndHalf 001B  
            reverseStraight@mL 0019              reverseStraight@mR 001A                  ??_reading_hue 0044  
            reverseTurn@action 001F            decision@path_length 0049                     right135@mL 0019  
                   right135@mR 001A               ___lwdiv@dividend 0008                      _dtoa$3111 001B  
                 ?_Timer0_init 0001                ?_fullSpeedAhead 0014                       ?___fladd 0002  
                     ?___fldiv 001B                       ?___awdiv 0002                       ?___awmod 0002  
                     ?___flmul 0002                       ?___flsub 0012                       ?___fltol 0034  
                     ?___lwdiv 0008                     moveBlue@mL 001D                     moveBlue@mR 001E  
               ?_moveLightBlue 001D                    __pintcodelo 0018                       ?_left135 0019  
                 _readingIndex 00CB           I2C_2_Master_Read@ack 0004           I2C_2_Master_Read@tmp 0005  
                  __smallconst 0E00                     movePink@mL 001D                     movePink@mR 001E  
            _I2C_2_Master_Idle 4596                      _logAction 3ABA              _I2C_2_Master_Init 456C  
            _I2C_2_Master_Read 425A                       ?_right90 0019              _I2C_2_Master_Stop 46C8  
                     ?_moveRed 001D                   _RxBufReadCnt 00CC                       _ADC_init 468A  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0010                       ?_turn180 0019             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000C       initDCmotorsPWM@PWMperiod 0002                       ?_sprintf 0032  
            _sendStringSerial4 44AA            ??_I2C_2_Master_Idle 0002            ??_I2C_2_Master_Init 0002  
          ??_I2C_2_Master_Read 0003                 ___wmul@product 0006                       _LATAbits 0F79  
          ??_I2C_2_Master_Stop 0003                   moveBlue@path 0021                       _LATCbits 0F7B  
                     _LATDbits 0F7C                       _LATEbits 0F7D                       _LATFbits 0F7E  
                     _LATGbits 0F7F                       _LATHbits 0F80                       _IPR0bits 0E1F  
                     _PIE0bits 0E29             ?_sendStringSerial4 0003                      _moveGreen 3FEE  
                     _PIE4bits 0E2D            __end_of_reading_hue 33EA                       i1u228_20 002E  
                     i1u228_21 002A                      _moveWhite 43B0                    turnRight@mL 0014  
                  turnRight@mR 0015                       _PIR0bits 0E33                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0002                      left135@mL 0019                      left135@mR 001A  
            ??_sendCharSerial4 0002                       _SSP2CON2 0EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 0ED8                  ??_reverseTurn 0020                      _vfpfcnvrt 2BA4  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 45BE      __end_of_I2C_2_Master_Init 4596  
    __end_of_I2C_2_Master_Read 429C              ___wmul@multiplier 0002      __end_of_I2C_2_Master_Stop 46D2  
                 setMotorPWM@m 000F    I2C_2_Master_Write@data_byte 0003                    _ldrReadings 013C  
                   ?_logAction 0002                      main@white 00B4              ??_color_read_Blue 0008  
                 _TxBufReadCnt 004F                   movePink@path 0021                      _turnRight 3B3E  
    __end_of_sendStringSerial4 44DC                   moveOrange@mL 001D                   moveOrange@mR 001E  
__end_of_I2C_2_Master_RepStart 46E6             color_read_Blue@tmp 000B            __end_of_setMotorPWM 2FF8  
              main@path_length 00BC                   ??_initUSART4 0002                     ?_moveGreen 001D  
                   ?_moveWhite 001D                       __Hrparam 0000                     vfprintf@ap 0030  
                     __Lrparam 0000                     vfprintf@fp 002E          __end_of_fullSpeedBack 3DA4  
              ??_moveLightBlue 0023                   moveYellow@mL 001D                   moveYellow@mR 001E  
                   ?_vfpfcnvrt 0023          moveOrange@path_length 001F                       _backHalf 453C  
                 ??_send2USART 0047                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                     _dataFlag 00EF                     sprintf@fmt 0033                       ___xxtofl 29F0  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6                       _decision 25C4  
          __end_of_reverseTurn 3654                      right90@mL 0019                      right90@mR 001A  
              ___lwdiv@divisor 000A             __end_of_initUSART4 466C                ___lwdiv@counter 000E  
                   ?_turnRight 0014                       __ptext10 2FF8                       __ptext11 41D2  
                     __ptext20 25C4                       __ptext12 163C                       __ptext21 466C  
                     __ptext13 1AFC                       __ptext30 3F90                       __ptext22 3E18  
                     __ptext14 30FE                       __ptext31 4446                       __ptext23 3E76  
                     __ptext15 37B2                       __ptext40 3D2E                       __ptext32 3FEE  
                     __ptext24 44DC                       __ptext16 1F26                       __ptext41 2EA4  
                     __ptext33 450C                       __ptext25 3ED4                       __ptext17 464E  
                     __ptext50 3704                       __ptext42 3DA4                       __ptext34 3CB4  
                     __ptext26 43E2                       __ptext18 399C                       __ptext51 45E6  
                     __ptext43 4314                       __ptext35 4478                       __ptext27 3F32  
                     __ptext19 460C                       __ptext60 44AA                       __ptext52 2D2C  
                     __ptext44 462E                       __ptext36 3BBC                       __ptext28 4414  
                     __ptext61 46A4                       __ptext53 3906                       __ptext45 456C  
                     __ptext37 3ABA                       __ptext29 3B3E                       __ptext70 425A  
                     __ptext62 404C                       __ptext54 429C                       __ptext46 281E  
                     __ptext38 453C                       __ptext71 4596                       __ptext63 409C  
                     __ptext55 385C                       __ptext47 4348                       __ptext39 3A2C  
                     __ptext72 45BE                       __ptext64 40EC                       __ptext56 46E6  
                     __ptext48 4218                       __ptext73 468A                       __ptext65 413C  
                     __ptext57 437C                       __ptext49 2BA4                       __ptext66 46BC  
                     __ptext58 3654                       __ptext67 46C8                       __ptext59 34D0  
                     __ptext68 46D2                       __ptext69 46DC                    decision@hue 0047  
                    moveRed@mL 001D                      moveRed@mR 001E                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA                    _reading_hue 3300                  reverseTurn@mL 001D  
                reverseTurn@mR 001E                   ??_moveOrange 0023                     turnLeft@mL 0014  
                   turnLeft@mR 0015                   ??_moveYellow 0023             __end_of_send2USART 468A  
                     _right135 4414                       _moveBlue 3CB4                       _movePink 3ED4  
                   turnRight@i 0017             moveRed@path_length 001F          __end_of_customDelayMs 4314  
                     isa$xinst 0000                       left90@mL 0019                       left90@mR 001A  
                   _RC4STAbits 0EE7                       int$flags 0052                       _vfprintf 4218  
                 ??_returnHome 0028                       main@time 00B6                       _turnLeft 3BBC  
                    turn180@mL 0019                      turn180@mR 001A                    ??_logAction 000A  
                   _INTCONbits 0FF2                 customDelayMs@i 0005             __end_of_moveOrange 3F90  
           __end_of_moveYellow 3E76                    _setMotorPWM 2EA4              ??_get16bitTMR0val 0004  
                     intlevel1 0000                      sprintf@ap 0038           returnHome@pathLength 0026  
            ??_reverseStraight 001D               ??_fullSpeedAhead 0016       moveLightBlue@path_length 001F  
get16bitTMR0val@combined_value 0008             __end_of_returnHome 34D0                    ??_moveGreen 0023  
             returnHome@action 002E                      turnLeft@i 0017                    ??_moveWhite 001F  
  __end_of_calibration_routine 29F0    convert_rgb2hue@clearcurrent 0078                  send2USART@hue 0045  
                  ??_vfpfcnvrt 0026                    _reverseTurn 3594               _color_click_init 4314  
                     sprintf@f 0039                       sprintf@s 0032                     _SSP2DATPPS 0E1D  
                   _SSP2CLKPPS 0E1C                    ??_turnRight 0016                  ___fladd@signs 000E  
                   _TX4STAbits 0EE8                _sendCharSerial4 46A4                 returnHome@path 0024  
               returnHome@time 002C                   ___fladd@aexp 000F                   ___fladd@bexp 0010  
                 returnHome@mL 0022                   returnHome@mR 0023                logAction@action 0002  
