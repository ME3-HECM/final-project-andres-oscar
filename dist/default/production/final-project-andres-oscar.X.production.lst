

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Mar 11 16:34:09 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35   000000                     
    36                           ; Generated 21/07/2023 GMT
    37                           ; 
    38                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F67K40 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70   000000                     
    71                           	psect	idataCOMRAM
    72   00154C                     __pidataCOMRAM:
    73                           	callstack 0
    74                           
    75                           ;initializer for _dataFlag
    76   00154C  01                 	db	1
    77   000000                     _TX4REG	set	3812
    78   000000                     _RC4STAbits	set	3815
    79   000000                     _SP4BRGH	set	3814
    80   000000                     _LATFbits	set	3966
    81   000000                     _TRISFbits	set	3974
    82   000000                     _TRISEbits	set	3973
    83   000000                     _TRISGbits	set	3975
    84   000000                     _CCPR2H	set	4006
    85   000000                     _CCPR1H	set	4010
    86   000000                     _SSP2CON2bits	set	3802
    87   000000                     _RX4PPS	set	3605
    88   000000                     _SSP2CLKPPS	set	3612
    89   000000                     _SSP2DATPPS	set	3613
    90   000000                     _ANSELDbits	set	3751
    91   000000                     _SSP2ADD	set	3798
    92   000000                     _SSP2CON1bits	set	3801
    93   000000                     _LATAbits	set	3961
    94   000000                     _LATEbits	set	3965
    95   000000                     _LATGbits	set	3967
    96   000000                     _TRISAbits	set	3969
    97   000000                     _TRISDbits	set	3972
    98   000000                     _LATCbits	set	3963
    99   000000                     _LATDbits	set	3964
   100   000000                     _RC4REG	set	3811
   101   000000                     _SP4BRGL	set	3813
   102   000000                     _TX4STAbits	set	3816
   103   000000                     _BAUD4CONbits	set	3817
   104   000000                     _SSP2CON2	set	3802
   105   000000                     _CCPR4H	set	3873
   106   000000                     _CCPR3H	set	3877
   107   000000                     _SSP2STAT	set	3800
   108   000000                     _ANSELFbits	set	3764
   109   000000                     _SSP2BUF	set	3797
   110   000000                     _PIE4bits	set	3629
   111   000000                     _PIR4bits	set	3639
   112   000000                     _RC0PPS	set	3682
   113   000000                     _RC7PPS	set	3689
   114   000000                     _RD5PPS	set	3695
   115   000000                     _RE2PPS	set	3700
   116   000000                     _RD6PPS	set	3696
   117   000000                     _CCP1CONbits	set	4011
   118   000000                     _CCPTMRS0bits	set	4013
   119   000000                     _T2PR	set	4028
   120   000000                     _T2CONbits	set	4029
   121   000000                     _CCP2CONbits	set	4007
   122   000000                     _CCP3CONbits	set	3878
   123   000000                     _ADREFbits	set	3928
   124   000000                     _CCP4CONbits	set	3874
   125   000000                     _PORTFbits	set	3982
   126   000000                     _TRISCbits	set	3971
   127   000000                     _ADPCH	set	3935
   128   000000                     _ADRESH	set	3940
   129   000000                     _ADCON0bits	set	3936
   130   000000                     _RE4PPS	set	3702
   131   000000                     _RG6PPS	set	3720
   132   000000                     _T2CLKCONbits	set	4031
   133   000000                     _T2HLTbits	set	4030
   134                           
   135                           	psect	smallconst
   136   000E00                     __psmallconst:
   137                           	callstack 0
   138   000E00  00                 	db	0
   139   000E01                     
   140                           ; BSR set to: 15
   141   000E01  56                 	db	86	;'V'
   142   000E02  6F                 	db	111	;'o'
   143   000E03  6C                 	db	108	;'l'
   144   000E04  74                 	db	116	;'t'
   145   000E05  61                 	db	97	;'a'
   146   000E06  67                 	db	103	;'g'
   147   000E07  65                 	db	101	;'e'
   148   000E08  20                 	db	32
   149   000E09  3D                 	db	61	;'='
   150   000E0A  20                 	db	32
   151   000E0B  25                 	db	37
   152   000E0C  64                 	db	100	;'d'
   153   000E0D  2E                 	db	46
   154   000E0E  25                 	db	37
   155   000E0F  30                 	db	48	;'0'
   156   000E10  32                 	db	50	;'2'
   157   000E11  64                 	db	100	;'d'
   158   000E12  2C                 	db	44
   159   000E13  20                 	db	32
   160   000E14  20                 	db	32
   161   000E15  00                 	db	0
   162   000E16                     
   163                           ; BSR set to: 15
   164   000E16  47                 	db	71	;'G'
   165   000E17  72                 	db	114	;'r'
   166   000E18  65                 	db	101	;'e'
   167   000E19  65                 	db	101	;'e'
   168   000E1A  6E                 	db	110	;'n'
   169   000E1B  5F                 	db	95	;'_'
   170   000E1C  6C                 	db	108	;'l'
   171   000E1D  69                 	db	105	;'i'
   172   000E1E  67                 	db	103	;'g'
   173   000E1F  68                 	db	104	;'h'
   174   000E20  74                 	db	116	;'t'
   175   000E21  3D                 	db	61	;'='
   176   000E22  25                 	db	37
   177   000E23  64                 	db	100	;'d'
   178   000E24  2C                 	db	44
   179   000E25  20                 	db	32
   180   000E26  0A                 	db	10
   181   000E27  0D                 	db	13
   182   000E28  00                 	db	0
   183   000E29                     
   184                           ; BSR set to: 15
   185   000E29  43                 	db	67	;'C'
   186   000E2A  6C                 	db	108	;'l'
   187   000E2B  65                 	db	101	;'e'
   188   000E2C  61                 	db	97	;'a'
   189   000E2D  72                 	db	114	;'r'
   190   000E2E  3D                 	db	61	;'='
   191   000E2F  25                 	db	37
   192   000E30  30                 	db	48	;'0'
   193   000E31  35                 	db	53	;'5'
   194   000E32  64                 	db	100	;'d'
   195   000E33  2C                 	db	44
   196   000E34  20                 	db	32
   197   000E35  20                 	db	32
   198   000E36  0A                 	db	10
   199   000E37  0A                 	db	10
   200   000E38  0D                 	db	13
   201   000E39  00                 	db	0
   202   000E3A                     
   203                           ; BSR set to: 15
   204   000E3A  52                 	db	82	;'R'
   205   000E3B  65                 	db	101	;'e'
   206   000E3C  64                 	db	100	;'d'
   207   000E3D  5F                 	db	95	;'_'
   208   000E3E  6C                 	db	108	;'l'
   209   000E3F  69                 	db	105	;'i'
   210   000E40  67                 	db	103	;'g'
   211   000E41  68                 	db	104	;'h'
   212   000E42  74                 	db	116	;'t'
   213   000E43  3D                 	db	61	;'='
   214   000E44  25                 	db	37
   215   000E45  64                 	db	100	;'d'
   216   000E46  2C                 	db	44
   217   000E47  20                 	db	32
   218   000E48  0A                 	db	10
   219   000E49  0D                 	db	13
   220   000E4A  00                 	db	0
   221   000E4B                     
   222                           ; BSR set to: 15
   223   000E4B  41                 	db	65	;'A'
   224   000E4C  6C                 	db	108	;'l'
   225   000E4D  6C                 	db	108	;'l'
   226   000E4E  5F                 	db	95	;'_'
   227   000E4F  6C                 	db	108	;'l'
   228   000E50  69                 	db	105	;'i'
   229   000E51  67                 	db	103	;'g'
   230   000E52  68                 	db	104	;'h'
   231   000E53  74                 	db	116	;'t'
   232   000E54  73                 	db	115	;'s'
   233   000E55  3D                 	db	61	;'='
   234   000E56  25                 	db	37
   235   000E57  64                 	db	100	;'d'
   236   000E58  20                 	db	32
   237   000E59  0A                 	db	10
   238   000E5A  0D                 	db	13
   239   000E5B  00                 	db	0
   240   000E5C                     
   241                           ; BSR set to: 15
   242   000E5C  42                 	db	66	;'B'
   243   000E5D  6C                 	db	108	;'l'
   244   000E5E  75                 	db	117	;'u'
   245   000E5F  65                 	db	101	;'e'
   246   000E60  5F                 	db	95	;'_'
   247   000E61  6C                 	db	108	;'l'
   248   000E62  69                 	db	105	;'i'
   249   000E63  67                 	db	103	;'g'
   250   000E64  68                 	db	104	;'h'
   251   000E65  74                 	db	116	;'t'
   252   000E66  3D                 	db	61	;'='
   253   000E67  25                 	db	37
   254   000E68  64                 	db	100	;'d'
   255   000E69  20                 	db	32
   256   000E6A  0A                 	db	10
   257   000E6B  0D                 	db	13
   258   000E6C  00                 	db	0
   259   000E6D                     
   260                           ; BSR set to: 15
   261   000E6D  47                 	db	71	;'G'
   262   000E6E  72                 	db	114	;'r'
   263   000E6F  65                 	db	101	;'e'
   264   000E70  65                 	db	101	;'e'
   265   000E71  6E                 	db	110	;'n'
   266   000E72  3D                 	db	61	;'='
   267   000E73  25                 	db	37
   268   000E74  30                 	db	48	;'0'
   269   000E75  35                 	db	53	;'5'
   270   000E76  64                 	db	100	;'d'
   271   000E77  2C                 	db	44
   272   000E78  20                 	db	32
   273   000E79  20                 	db	32
   274   000E7A  00                 	db	0
   275   000E7B                     
   276                           ; BSR set to: 15
   277   000E7B  42                 	db	66	;'B'
   278   000E7C  6C                 	db	108	;'l'
   279   000E7D  75                 	db	117	;'u'
   280   000E7E  65                 	db	101	;'e'
   281   000E7F  3D                 	db	61	;'='
   282   000E80  25                 	db	37
   283   000E81  30                 	db	48	;'0'
   284   000E82  35                 	db	53	;'5'
   285   000E83  64                 	db	100	;'d'
   286   000E84  2C                 	db	44
   287   000E85  20                 	db	32
   288   000E86  20                 	db	32
   289   000E87  00                 	db	0
   290   000E88                     
   291                           ; BSR set to: 15
   292   000E88  52                 	db	82	;'R'
   293   000E89  65                 	db	101	;'e'
   294   000E8A  64                 	db	100	;'d'
   295   000E8B  3D                 	db	61	;'='
   296   000E8C  25                 	db	37
   297   000E8D  30                 	db	48	;'0'
   298   000E8E  35                 	db	53	;'5'
   299   000E8F  64                 	db	100	;'d'
   300   000E90  2C                 	db	44
   301   000E91  20                 	db	32
   302   000E92  20                 	db	32
   303   000E93  00                 	db	0
   304   000E94  00                 	db	0	; dummy byte at the end
   305   000000                     
   306                           ; #config settings
   307                           
   308                           	psect	cinit
   309   001372                     __pcinit:
   310                           	callstack 0
   311   001372                     start_initialization:
   312                           	callstack 0
   313   001372                     __initialization:
   314                           	callstack 0
   315                           
   316                           ; Initialize objects allocated to COMRAM (1 bytes)
   317                           ; load TBLPTR registers with __pidataCOMRAM
   318   001372  0E4C               	movlw	low __pidataCOMRAM
   319   001374  6EF6               	movwf	tblptrl,c
   320   001376  0E15               	movlw	high __pidataCOMRAM
   321   001378  6EF7               	movwf	tblptrh,c
   322   00137A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   323   00137C  6EF8               	movwf	tblptru,c
   324   00137E  0009               	tblrd		*+	;fetch initializer
   325   001380  CFF5 F04F          	movff	tablat,__pdataCOMRAM
   326                           
   327                           ; Clear objects allocated to BANK0 (80 bytes)
   328   001384  EE00  F060         	lfsr	0,__pbssBANK0
   329   001388  0E50               	movlw	80
   330   00138A                     clear_0:
   331   00138A  6AEE               	clrf	postinc0,c
   332   00138C  06E8               	decf	wreg,f,c
   333   00138E  E1FD               	bnz	clear_0
   334                           
   335                           ; Clear objects allocated to COMRAM (43 bytes)
   336   001390  EE00  F001         	lfsr	0,__pbssCOMRAM
   337   001394  0E2B               	movlw	43
   338   001396                     clear_1:
   339   001396  6AEE               	clrf	postinc0,c
   340   001398  06E8               	decf	wreg,f,c
   341   00139A  E1FD               	bnz	clear_1
   342   00139C                     end_of_initialization:
   343                           	callstack 0
   344   00139C                     __end_of__initialization:
   345                           	callstack 0
   346   00139C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   347   00139E  6EF8               	movwf	tblptru,c
   348   0013A0  0E0E               	movlw	high __Lsmallconst
   349   0013A2  6EF7               	movwf	tblptrh,c
   350   0013A4  0100               	movlb	0
   351   0013A6  EFF5  F007         	goto	_main	;jump to C main() function
   352                           
   353                           	psect	bssCOMRAM
   354   000001                     __pbssCOMRAM:
   355                           	callstack 0
   356   000001                     _EUSART4RXbuf:
   357                           	callstack 0
   358   000001                     	ds	20
   359   000015                     _readingIndex:
   360                           	callstack 0
   361   000015                     	ds	1
   362   000016                     _TxBufReadCnt:
   363                           	callstack 0
   364   000016                     	ds	1
   365   000017                     _TxBufWriteCnt:
   366                           	callstack 0
   367   000017                     	ds	1
   368   000018                     _RxBufReadCnt:
   369                           	callstack 0
   370   000018                     	ds	1
   371   000019                     _RxBufWriteCnt:
   372                           	callstack 0
   373   000019                     	ds	1
   374   00001A                     _motorR:
   375                           	callstack 0
   376   00001A                     	ds	9
   377   000023                     _motorL:
   378                           	callstack 0
   379   000023                     	ds	9
   380                           
   381                           	psect	dataCOMRAM
   382   00004F                     __pdataCOMRAM:
   383                           	callstack 0
   384   00004F                     _dataFlag:
   385                           	callstack 0
   386   00004F                     	ds	1
   387                           
   388                           	psect	bssBANK0
   389   000060                     __pbssBANK0:
   390                           	callstack 0
   391   000060                     _EUSART4TXbuf:
   392                           	callstack 0
   393   000060                     	ds	60
   394   00009C                     _ldrReadings:
   395                           	callstack 0
   396   00009C                     	ds	20
   397                           
   398                           	psect	cstackCOMRAM
   399   00002C                     __pcstackCOMRAM:
   400                           	callstack 0
   401   00002C                     ??_I2C_2_Master_Idle:
   402   00002C                     ?___wmul:
   403                           	callstack 0
   404   00002C                     initDCmotorsPWM@PWMperiod:
   405                           	callstack 0
   406   00002C                     ___wmul@multiplier:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x0
   410   00002C                     	ds	1
   411   00002D                     I2C_2_Master_Write@data_byte:
   412                           	callstack 0
   413                           
   414                           ; 1 bytes @ 0x1
   415   00002D                     	ds	1
   416   00002E                     color_writetoaddr@value:
   417                           	callstack 0
   418   00002E                     ___wmul@multiplicand:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0x2
   422   00002E                     	ds	1
   423   00002F                     color_writetoaddr@address:
   424                           	callstack 0
   425                           
   426                           ; 1 bytes @ 0x3
   427   00002F                     	ds	1
   428   000030                     ??_color_click_init:
   429   000030                     ___wmul@product:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x4
   433   000030                     	ds	2
   434   000032                     ?___lwdiv:
   435                           	callstack 0
   436   000032                     ___lwdiv@dividend:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x6
   440   000032                     	ds	2
   441   000034                     ___lwdiv@divisor:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x8
   445   000034                     	ds	2
   446   000036                     ___lwdiv@quotient:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0xA
   450   000036                     	ds	2
   451   000038                     ___lwdiv@counter:
   452                           	callstack 0
   453                           
   454                           ; 1 bytes @ 0xC
   455   000038                     	ds	1
   456   000039                     setMotorPWM@m:
   457                           	callstack 0
   458                           
   459                           ; 1 bytes @ 0xD
   460   000039                     	ds	1
   461   00003A                     ??_setMotorPWM:
   462                           
   463                           ; 1 bytes @ 0xE
   464   00003A                     	ds	2
   465   00003C                     setMotorPWM@posDuty:
   466                           	callstack 0
   467                           
   468                           ; 1 bytes @ 0x10
   469   00003C                     	ds	1
   470   00003D                     setMotorPWM@negDuty:
   471                           	callstack 0
   472                           
   473                           ; 1 bytes @ 0x11
   474   00003D                     	ds	1
   475   00003E                     stop@mL:
   476                           	callstack 0
   477   00003E                     turnRight@mL:
   478                           	callstack 0
   479   00003E                     fullSpeedBack@mL:
   480                           	callstack 0
   481                           
   482                           ; 1 bytes @ 0x12
   483   00003E                     	ds	1
   484   00003F                     stop@mR:
   485                           	callstack 0
   486   00003F                     turnRight@mR:
   487                           	callstack 0
   488   00003F                     fullSpeedBack@mR:
   489                           	callstack 0
   490                           
   491                           ; 1 bytes @ 0x13
   492   00003F                     	ds	1
   493   000040                     ??_stop:
   494   000040                     ??_fullSpeedBack:
   495   000040                     turnRight@i:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x14
   499   000040                     	ds	1
   500   000041                     fullSpeedBack@power:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x15
   504   000041                     	ds	1
   505   000042                     right135@mL:
   506                           	callstack 0
   507                           
   508                           ; 1 bytes @ 0x16
   509   000042                     	ds	1
   510   000043                     right135@mR:
   511                           	callstack 0
   512   000043                     backHalf@mL:
   513                           	callstack 0
   514                           
   515                           ; 1 bytes @ 0x17
   516   000043                     	ds	1
   517   000044                     ??_right135:
   518   000044                     backHalf@mR:
   519                           	callstack 0
   520                           
   521                           ; 1 bytes @ 0x18
   522   000044                     	ds	1
   523   000045                     ??_backHalf:
   524                           
   525                           ; 1 bytes @ 0x19
   526   000045                     	ds	2
   527   000047                     moveOrange@mL:
   528                           	callstack 0
   529                           
   530                           ; 1 bytes @ 0x1B
   531   000047                     	ds	1
   532   000048                     moveOrange@mR:
   533                           	callstack 0
   534                           
   535                           ; 1 bytes @ 0x1C
   536   000048                     	ds	1
   537   000049                     ??_main:
   538                           
   539                           ; 1 bytes @ 0x1D
   540   000049                     	ds	2
   541   00004B                     main@prevButtonState:
   542                           	callstack 0
   543                           
   544                           ; 2 bytes @ 0x1F
   545   00004B                     	ds	2
   546   00004D                     main@buttonState:
   547                           	callstack 0
   548                           
   549                           ; 2 bytes @ 0x21
   550   00004D                     	ds	2
   551                           
   552 ;;
   553 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   554 ;;
   555 ;; *************** function _main *****************
   556 ;; Defined at:
   557 ;;		line 28 in file "main.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;		None
   560 ;; Auto vars:     Size  Location     Type
   561 ;;  buttonState     2   33[COMRAM] int 
   562 ;;  PWMcycle        2    0        unsigned int 
   563 ;;  prevButtonSt    2   31[COMRAM] int 
   564 ;;  clear           2    0        unsigned int 
   565 ;;  green           2    0        unsigned int 
   566 ;;  blue            2    0        unsigned int 
   567 ;;  red             2    0        unsigned int 
   568 ;;  battery_leve    2    0        unsigned int 
   569 ;; Return value:  Size  Location     Type
   570 ;;                  1    wreg      void 
   571 ;; Registers used:
   572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   573 ;; Tracked objects:
   574 ;;		On entry : 0/0
   575 ;;		On exit  : 0/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   579 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   580 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   581 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   582 ;;Total ram usage:        6 bytes
   583 ;; Hardware stack levels required when called: 5
   584 ;; This function calls:
   585 ;;		_ADC_init
   586 ;;		_color_click_init
   587 ;;		_initDCmotorsPWM
   588 ;;		_initUSART4
   589 ;;		_moveOrange
   590 ;; This function is called by:
   591 ;;		Startup code after reset
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           	psect	text0
   596   000FEA                     __ptext0:
   597                           	callstack 0
   598   000FEA                     _main:
   599                           	callstack 26
   600   000FEA                     
   601                           ;main.c: 30:     ADC_init();
   602   000FEA  EC89  F00A         	call	_ADC_init	;wreg free
   603   000FEE                     
   604                           ;main.c: 31:     color_click_init();
   605   000FEE  ECD5  F009         	call	_color_click_init	;wreg free
   606   000FF2                     
   607                           ;main.c: 32:     initUSART4();
   608   000FF2  EC6D  F00A         	call	_initUSART4	;wreg free
   609   000FF6                     
   610                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
   611   000FF6  0E00               	movlw	0
   612   000FF8  6E2D               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   613   000FFA  0E63               	movlw	99
   614   000FFC  6E2C               	movwf	initDCmotorsPWM@PWMperiod^0,c
   615   000FFE  EC77  F008         	call	_initDCmotorsPWM	;wreg free
   616   001002                     
   617                           ;main.c: 39:     motorL.power = 0;
   618   001002  0E00               	movlw	0
   619   001004  6E23               	movwf	_motorL^0,c
   620   001006                     
   621                           ;main.c: 40:     motorL.direction = 1;
   622   001006  0E01               	movlw	1
   623   001008  6E24               	movwf	(_motorL+1)^0,c
   624   00100A                     
   625                           ;main.c: 41:     motorL.brakemode = 1;
   626   00100A  0E01               	movlw	1
   627   00100C  6E25               	movwf	(_motorL+2)^0,c
   628   00100E                     
   629                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
   630   00100E  0E00               	movlw	0
   631   001010  6E27               	movwf	(_motorL+4)^0,c
   632   001012  0E63               	movlw	99
   633   001014  6E26               	movwf	(_motorL+3)^0,c
   634   001016                     
   635                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   636   001016  0EAA               	movlw	170
   637   001018  6E28               	movwf	(_motorL+5)^0,c
   638   00101A  0E0F               	movlw	15
   639   00101C  6E29               	movwf	(_motorL+6)^0,c
   640   00101E                     
   641                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   642   00101E  0EA6               	movlw	166
   643   001020  6E2A               	movwf	(_motorL+7)^0,c
   644   001022  0E0F               	movlw	15
   645   001024  6E2B               	movwf	(_motorL+8)^0,c
   646   001026                     
   647                           ;main.c: 46:     motorR.power = 0;
   648   001026  0E00               	movlw	0
   649   001028  6E1A               	movwf	_motorR^0,c
   650   00102A                     
   651                           ;main.c: 47:     motorR.direction = 1;
   652   00102A  0E01               	movlw	1
   653   00102C  6E1B               	movwf	(_motorR+1)^0,c
   654   00102E                     
   655                           ;main.c: 48:     motorR.brakemode = 1;
   656   00102E  0E01               	movlw	1
   657   001030  6E1C               	movwf	(_motorR+2)^0,c
   658   001032                     
   659                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
   660   001032  0E00               	movlw	0
   661   001034  6E1E               	movwf	(_motorR+4)^0,c
   662   001036  0E63               	movlw	99
   663   001038  6E1D               	movwf	(_motorR+3)^0,c
   664                           
   665                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   666   00103A  0E25               	movlw	37
   667   00103C  6E1F               	movwf	(_motorR+5)^0,c
   668   00103E  0E0F               	movlw	15
   669   001040  6E20               	movwf	(_motorR+6)^0,c
   670                           
   671                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   672   001042  0E21               	movlw	33
   673   001044  6E21               	movwf	(_motorR+7)^0,c
   674   001046  0E0F               	movlw	15
   675   001048  6E22               	movwf	(_motorR+8)^0,c
   676   00104A                     
   677                           ;main.c: 54:     LATDbits.LATD7=0;
   678   00104A  9E7C               	bcf	124,7,c	;volatile
   679   00104C                     
   680                           ;main.c: 55:     TRISDbits.TRISD7=0;
   681   00104C  9E84               	bcf	132,7,c	;volatile
   682   00104E                     
   683                           ;main.c: 59:     TRISGbits.TRISG0 = 0;
   684   00104E  9087               	bcf	135,0,c	;volatile
   685   001050                     
   686                           ;main.c: 60:     LATGbits.LATG0 = 0;
   687   001050  907F               	bcf	127,0,c	;volatile
   688   001052                     
   689                           ;main.c: 61:     TRISEbits.TRISE7 = 0;
   690   001052  9E85               	bcf	133,7,c	;volatile
   691   001054                     
   692                           ;main.c: 62:     LATEbits.LATE7 = 0;
   693   001054  9E7D               	bcf	125,7,c	;volatile
   694   001056                     
   695                           ;main.c: 63:     TRISAbits.TRISA3 = 0;
   696   001056  9681               	bcf	129,3,c	;volatile
   697   001058                     
   698                           ;main.c: 64:     LATAbits.LATA3 = 0;
   699   001058  9679               	bcf	121,3,c	;volatile
   700   00105A                     
   701                           ;main.c: 69:     TRISFbits.TRISF3 = 1;
   702   00105A  8686               	bsf	134,3,c	;volatile
   703   00105C                     
   704                           ;main.c: 70:     ANSELFbits.ANSELF3 = 0;
   705   00105C  010E               	movlb	14	; () banked
   706   00105E  97B4               	bcf	180,3,b	;volatile
   707   001060                     
   708                           ; BSR set to: 14
   709                           ;main.c: 71:     LATFbits.LATF3 = 1;
   710   001060  867E               	bsf	126,3,c	;volatile
   711   001062                     
   712                           ; BSR set to: 14
   713                           ;main.c: 73:     unsigned int battery_level;;main.c: 74:     unsigned int red;;main.c: 7
      +                          5:     unsigned int blue;;main.c: 76:     unsigned int green;;main.c: 77:     unsigned i
      +                          nt clear;;main.c: 80:     int prevButtonState = PORTFbits.RF3;
   714   001062  B68E               	btfsc	142,3,c	;volatile
   715   001064  EF36  F008         	goto	u661
   716   001068  EF3A  F008         	goto	u660
   717   00106C                     u661:
   718   00106C  6A49               	clrf	??_main^0,c
   719   00106E  2A49               	incf	??_main^0,f,c
   720   001070  EF3B  F008         	goto	u668
   721   001074                     u660:
   722   001074  6A49               	clrf	??_main^0,c
   723   001076                     u668:
   724   001076  5049               	movf	??_main^0,w,c
   725   001078  6E4B               	movwf	main@prevButtonState^0,c
   726   00107A  6A4C               	clrf	(main@prevButtonState+1)^0,c
   727   00107C                     l2092:
   728                           
   729                           ;main.c: 84:         int buttonState = PORTFbits.RF3;
   730   00107C  B68E               	btfsc	142,3,c	;volatile
   731   00107E  EF43  F008         	goto	u671
   732   001082  EF47  F008         	goto	u670
   733   001086                     u671:
   734   001086  6A49               	clrf	??_main^0,c
   735   001088  2A49               	incf	??_main^0,f,c
   736   00108A  EF48  F008         	goto	u678
   737   00108E                     u670:
   738   00108E  6A49               	clrf	??_main^0,c
   739   001090                     u678:
   740   001090  5049               	movf	??_main^0,w,c
   741   001092  6E4D               	movwf	main@buttonState^0,c
   742   001094  6A4E               	clrf	(main@buttonState+1)^0,c
   743                           
   744                           ;main.c: 87:         if (buttonState == 1 && prevButtonState == 0) {
   745   001096  044D               	decf	main@buttonState^0,w,c
   746   001098  104E               	iorwf	(main@buttonState+1)^0,w,c
   747   00109A  A4D8               	btfss	status,2,c
   748   00109C  EF52  F008         	goto	u681
   749   0010A0  EF54  F008         	goto	u680
   750   0010A4                     u681:
   751   0010A4  EF6F  F008         	goto	l2100
   752   0010A8                     u680:
   753   0010A8  504B               	movf	main@prevButtonState^0,w,c
   754   0010AA  104C               	iorwf	(main@prevButtonState+1)^0,w,c
   755   0010AC  A4D8               	btfss	status,2,c
   756   0010AE  EF5B  F008         	goto	u691
   757   0010B2  EF5D  F008         	goto	u690
   758   0010B6                     u691:
   759   0010B6  EF6F  F008         	goto	l2100
   760   0010BA                     u690:
   761   0010BA                     
   762                           ;main.c: 88:             _delay((unsigned long)((500)*(64000000/4000.0)));
   763   0010BA  0E29               	movlw	41
   764   0010BC  6E4A               	movwf	(??_main+1)^0,c
   765   0010BE  0E96               	movlw	150
   766   0010C0  6E49               	movwf	??_main^0,c
   767   0010C2  0E7F               	movlw	127
   768   0010C4                     u747:
   769   0010C4  2EE8               	decfsz	wreg,f,c
   770   0010C6  D7FE               	bra	u747
   771   0010C8  2E49               	decfsz	??_main^0,f,c
   772   0010CA  D7FC               	bra	u747
   773   0010CC  2E4A               	decfsz	(??_main+1)^0,f,c
   774   0010CE  D7FA               	bra	u747
   775   0010D0  0000               	nop	
   776   0010D2                     
   777                           ;main.c: 90:             moveOrange(&motorL, &motorR);
   778   0010D2  0E23               	movlw	low _motorL
   779   0010D4  6E47               	movwf	moveOrange@mL^0,c
   780   0010D6  0E1A               	movlw	low _motorR
   781   0010D8  6E48               	movwf	moveOrange@mR^0,c
   782   0010DA  EC7C  F00A         	call	_moveOrange	;wreg free
   783   0010DE                     l2100:
   784                           
   785                           ;main.c: 94:         prevButtonState = buttonState;
   786   0010DE  C04D  F04B         	movff	main@buttonState,main@prevButtonState
   787   0010E2  C04E  F04C         	movff	main@buttonState+1,main@prevButtonState+1
   788   0010E6  EF3E  F008         	goto	l2092
   789   0010EA  EF00  F000         	goto	start
   790   0010EE                     __end_of_main:
   791                           	callstack 0
   792                           
   793 ;; *************** function _moveOrange *****************
   794 ;; Defined at:
   795 ;;		line 284 in file "dc_motor.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;  mL              1   27[COMRAM] PTR struct DC_motor
   798 ;;		 -> motorL(9), 
   799 ;;  mR              1   28[COMRAM] PTR struct DC_motor
   800 ;;		 -> motorR(9), 
   801 ;; Auto vars:     Size  Location     Type
   802 ;;		None
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   812 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   815 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   816 ;;Total ram usage:        2 bytes
   817 ;; Hardware stack levels used: 1
   818 ;; Hardware stack levels required when called: 4
   819 ;; This function calls:
   820 ;;		_backHalf
   821 ;;		_right135
   822 ;; This function is called by:
   823 ;;		_main
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text1
   828   0014F8                     __ptext1:
   829                           	callstack 0
   830   0014F8                     _moveOrange:
   831                           	callstack 26
   832   0014F8                     
   833                           ;dc_motor.c: 284: void moveOrange(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          285: {;dc_motor.c: 287:     backHalf(mL,mR);
   834   0014F8  C047  F043         	movff	moveOrange@mL,backHalf@mL
   835   0014FC  C048  F044         	movff	moveOrange@mR,backHalf@mR
   836   001500  EC08  F00A         	call	_backHalf	;wreg free
   837                           
   838                           ;dc_motor.c: 288:     right135(mL,mR);
   839   001504  C047  F042         	movff	moveOrange@mL,right135@mL
   840   001508  C048  F043         	movff	moveOrange@mR,right135@mR
   841   00150C  ECEF  F009         	call	_right135	;wreg free
   842   001510  0012               	return		;funcret
   843   001512                     __end_of_moveOrange:
   844                           	callstack 0
   845                           
   846 ;; *************** function _right135 *****************
   847 ;; Defined at:
   848 ;;		line 215 in file "dc_motor.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;  mL              1   22[COMRAM] PTR struct DC_motor
   851 ;;		 -> motorL(9), 
   852 ;;  mR              1   23[COMRAM] PTR struct DC_motor
   853 ;;		 -> motorR(9), 
   854 ;; Auto vars:     Size  Location     Type
   855 ;;		None
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   865 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   868 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   869 ;;Total ram usage:        4 bytes
   870 ;; Hardware stack levels used: 1
   871 ;; Hardware stack levels required when called: 3
   872 ;; This function calls:
   873 ;;		_stop
   874 ;;		_turnRight
   875 ;; This function is called by:
   876 ;;		_moveOrange
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           	psect	text2
   881   0013DE                     __ptext2:
   882                           	callstack 0
   883   0013DE                     _right135:
   884                           	callstack 26
   885   0013DE                     
   886                           ;dc_motor.c: 215: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          6: {;dc_motor.c: 217:     turnRight(mL,mR);
   887   0013DE  C042  F03E         	movff	right135@mL,turnRight@mL
   888   0013E2  C043  F03F         	movff	right135@mR,turnRight@mR
   889   0013E6  EC06  F009         	call	_turnRight	;wreg free
   890   0013EA                     
   891                           ;dc_motor.c: 218:     _delay((unsigned long)((400)*(64000000/4000.0)));
   892   0013EA  0E21               	movlw	33
   893   0013EC  6E45               	movwf	(??_right135+1)^0,c
   894   0013EE  0E78               	movlw	120
   895   0013F0  6E44               	movwf	??_right135^0,c
   896   0013F2  0E98               	movlw	152
   897   0013F4                     u757:
   898   0013F4  2EE8               	decfsz	wreg,f,c
   899   0013F6  D7FE               	bra	u757
   900   0013F8  2E44               	decfsz	??_right135^0,f,c
   901   0013FA  D7FC               	bra	u757
   902   0013FC  2E45               	decfsz	(??_right135+1)^0,f,c
   903   0013FE  D7FA               	bra	u757
   904   001400  D000               	nop2	
   905   001402                     
   906                           ;dc_motor.c: 219:     stop(mL,mR);
   907   001402  C042  F03E         	movff	right135@mL,stop@mL
   908   001406  C043  F03F         	movff	right135@mR,stop@mR
   909   00140A  ECBF  F008         	call	_stop	;wreg free
   910   00140E  0012               	return		;funcret
   911   001410                     __end_of_right135:
   912                           	callstack 0
   913                           
   914 ;; *************** function _turnRight *****************
   915 ;; Defined at:
   916 ;;		line 125 in file "dc_motor.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   919 ;;		 -> motorL(9), 
   920 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   921 ;;		 -> motorR(9), 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  i               2   20[COMRAM] unsigned int 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      void 
   926 ;; Registers used:
   927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   933 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   937 ;;Total ram usage:        4 bytes
   938 ;; Hardware stack levels used: 1
   939 ;; Hardware stack levels required when called: 2
   940 ;; This function calls:
   941 ;;		_setMotorPWM
   942 ;; This function is called by:
   943 ;;		_right135
   944 ;;		_right90
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           	psect	text3
   949   00120C                     __ptext3:
   950                           	callstack 0
   951   00120C                     _turnRight:
   952                           	callstack 26
   953   00120C                     
   954                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
   955   00120C  503E               	movf	turnRight@mL^0,w,c
   956   00120E  6ED9               	movwf	fsr2l,c
   957   001210  6ADA               	clrf	fsr2h,c
   958   001212  0E01               	movlw	1
   959   001214  26D9               	addwf	fsr2l,f,c
   960   001216  0E01               	movlw	1
   961   001218  6EDF               	movwf	indf2,c
   962                           
   963                           ;dc_motor.c: 129:     mR->direction = 0;
   964   00121A  503F               	movf	turnRight@mR^0,w,c
   965   00121C  6ED9               	movwf	fsr2l,c
   966   00121E  6ADA               	clrf	fsr2h,c
   967   001220  0E01               	movlw	1
   968   001222  26D9               	addwf	fsr2l,f,c
   969   001224  6ADF               	clrf	indf2,c
   970   001226                     
   971                           ;dc_motor.c: 131:     setMotorPWM(mL);
   972   001226  C03E  F039         	movff	turnRight@mL,setMotorPWM@m
   973   00122A  EC4B  F007         	call	_setMotorPWM	;wreg free
   974   00122E                     
   975                           ;dc_motor.c: 132:     setMotorPWM(mR);
   976   00122E  C03F  F039         	movff	turnRight@mR,setMotorPWM@m
   977   001232  EC4B  F007         	call	_setMotorPWM	;wreg free
   978   001236                     
   979                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
   980   001236  0E00               	movlw	0
   981   001238  6E41               	movwf	(turnRight@i+1)^0,c
   982   00123A  0E00               	movlw	0
   983   00123C  6E40               	movwf	turnRight@i^0,c
   984   00123E                     l1802:
   985                           
   986                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
   987   00123E  503E               	movf	turnRight@mL^0,w,c
   988   001240  6ED9               	movwf	fsr2l,c
   989   001242  6ADA               	clrf	fsr2h,c
   990   001244  2ADF               	incf	indf2,f,c
   991                           
   992                           ;dc_motor.c: 136:         mR->power++;
   993   001246  503F               	movf	turnRight@mR^0,w,c
   994   001248  6ED9               	movwf	fsr2l,c
   995   00124A  6ADA               	clrf	fsr2h,c
   996   00124C  2ADF               	incf	indf2,f,c
   997   00124E                     
   998                           ;dc_motor.c: 137:         setMotorPWM(mL);
   999   00124E  C03E  F039         	movff	turnRight@mL,setMotorPWM@m
  1000   001252  EC4B  F007         	call	_setMotorPWM	;wreg free
  1001   001256                     
  1002                           ;dc_motor.c: 138:         setMotorPWM(mR);
  1003   001256  C03F  F039         	movff	turnRight@mR,setMotorPWM@m
  1004   00125A  EC4B  F007         	call	_setMotorPWM	;wreg free
  1005   00125E                     
  1006                           ;dc_motor.c: 139:         _delay((unsigned long)((100)*(64000000/4000000.0)));
  1007   00125E  0EE4               	movlw	228
  1008   001260                     u767:
  1009   001260  D000               	nop2	
  1010   001262  D000               	nop2	
  1011   001264  2EE8               	decfsz	wreg,f,c
  1012   001266  D7FC               	bra	u767
  1013   001268  D000               	nop2	
  1014   00126A  D000               	nop2	
  1015   00126C                     
  1016                           ;dc_motor.c: 140:     }
  1017   00126C  4A40               	infsnz	turnRight@i^0,f,c
  1018   00126E  2A41               	incf	(turnRight@i+1)^0,f,c
  1019   001270  5041               	movf	(turnRight@i+1)^0,w,c
  1020   001272  E109               	bnz	u520
  1021   001274  0E32               	movlw	50
  1022   001276  5C40               	subwf	turnRight@i^0,w,c
  1023   001278  A0D8               	btfss	status,0,c
  1024   00127A  EF41  F009         	goto	u521
  1025   00127E  EF43  F009         	goto	u520
  1026   001282                     u521:
  1027   001282  EF1F  F009         	goto	l1802
  1028   001286                     u520:
  1029   001286  0012               	return		;funcret
  1030   001288                     __end_of_turnRight:
  1031                           	callstack 0
  1032                           
  1033 ;; *************** function _backHalf *****************
  1034 ;; Defined at:
  1035 ;;		line 231 in file "dc_motor.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  1038 ;;		 -> motorL(9), 
  1039 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  1040 ;;		 -> motorR(9), 
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1052 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1054 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1055 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1056 ;;Total ram usage:        4 bytes
  1057 ;; Hardware stack levels used: 1
  1058 ;; Hardware stack levels required when called: 3
  1059 ;; This function calls:
  1060 ;;		_fullSpeedBack
  1061 ;;		_stop
  1062 ;; This function is called by:
  1063 ;;		_moveOrange
  1064 ;;		_moveRed
  1065 ;;		_moveGreen
  1066 ;;		_moveBlue
  1067 ;;		_moveLightBlue
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text4
  1072   001410                     __ptext4:
  1073                           	callstack 0
  1074   001410                     _backHalf:
  1075                           	callstack 26
  1076   001410                     
  1077                           ;dc_motor.c: 231: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          2: {;dc_motor.c: 233:     fullSpeedBack(mL,mR);
  1078   001410  C043  F03E         	movff	backHalf@mL,fullSpeedBack@mL
  1079   001414  C044  F03F         	movff	backHalf@mR,fullSpeedBack@mR
  1080   001418  EC44  F009         	call	_fullSpeedBack	;wreg free
  1081   00141C                     
  1082                           ;dc_motor.c: 234:     _delay((unsigned long)((200)*(64000000/4000.0)));
  1083   00141C  0E11               	movlw	17
  1084   00141E  6E46               	movwf	(??_backHalf+1)^0,c
  1085   001420  0E3C               	movlw	60
  1086   001422  6E45               	movwf	??_backHalf^0,c
  1087   001424  0ECB               	movlw	203
  1088   001426                     u777:
  1089   001426  2EE8               	decfsz	wreg,f,c
  1090   001428  D7FE               	bra	u777
  1091   00142A  2E45               	decfsz	??_backHalf^0,f,c
  1092   00142C  D7FC               	bra	u777
  1093   00142E  2E46               	decfsz	(??_backHalf+1)^0,f,c
  1094   001430  D7FA               	bra	u777
  1095   001432  0000               	nop	
  1096   001434                     
  1097                           ;dc_motor.c: 235:     stop(mL,mR);
  1098   001434  C043  F03E         	movff	backHalf@mL,stop@mL
  1099   001438  C044  F03F         	movff	backHalf@mR,stop@mR
  1100   00143C  ECBF  F008         	call	_stop	;wreg free
  1101   001440  0012               	return		;funcret
  1102   001442                     __end_of_backHalf:
  1103                           	callstack 0
  1104                           
  1105 ;; *************** function _stop *****************
  1106 ;; Defined at:
  1107 ;;		line 88 in file "dc_motor.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1110 ;;		 -> motorL(9), 
  1111 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1112 ;;		 -> motorR(9), 
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;		None
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1124 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1126 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1127 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1128 ;;Total ram usage:        3 bytes
  1129 ;; Hardware stack levels used: 1
  1130 ;; Hardware stack levels required when called: 2
  1131 ;; This function calls:
  1132 ;;		_setMotorPWM
  1133 ;; This function is called by:
  1134 ;;		_right135
  1135 ;;		_backHalf
  1136 ;;		_right90
  1137 ;;		_left90
  1138 ;;		_turn180
  1139 ;;		_left135
  1140 ;;		_backOneAndHalf
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text5
  1145   00117E                     __ptext5:
  1146                           	callstack 0
  1147   00117E                     _stop:
  1148                           	callstack 26
  1149   00117E                     
  1150                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  1151   00117E  EFEF  F008         	goto	l1786
  1152   001182                     l1772:
  1153                           
  1154                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  1155   001182  503E               	movf	stop@mL^0,w,c
  1156   001184  6ED9               	movwf	fsr2l,c
  1157   001186  6ADA               	clrf	fsr2h,c
  1158   001188  50DF               	movf	indf2,w,c
  1159   00118A  B4D8               	btfsc	status,2,c
  1160   00118C  EFCA  F008         	goto	u481
  1161   001190  EFCC  F008         	goto	u480
  1162   001194                     u481:
  1163   001194  EFD0  F008         	goto	l1776
  1164   001198                     u480:
  1165   001198  503E               	movf	stop@mL^0,w,c
  1166   00119A  6ED9               	movwf	fsr2l,c
  1167   00119C  6ADA               	clrf	fsr2h,c
  1168   00119E  06DF               	decf	indf2,f,c
  1169   0011A0                     l1776:
  1170                           
  1171                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  1172   0011A0  503F               	movf	stop@mR^0,w,c
  1173   0011A2  6ED9               	movwf	fsr2l,c
  1174   0011A4  6ADA               	clrf	fsr2h,c
  1175   0011A6  50DF               	movf	indf2,w,c
  1176   0011A8  B4D8               	btfsc	status,2,c
  1177   0011AA  EFD9  F008         	goto	u491
  1178   0011AE  EFDB  F008         	goto	u490
  1179   0011B2                     u491:
  1180   0011B2  EFDF  F008         	goto	l1780
  1181   0011B6                     u490:
  1182   0011B6  503F               	movf	stop@mR^0,w,c
  1183   0011B8  6ED9               	movwf	fsr2l,c
  1184   0011BA  6ADA               	clrf	fsr2h,c
  1185   0011BC  06DF               	decf	indf2,f,c
  1186   0011BE                     l1780:
  1187                           
  1188                           ;dc_motor.c: 96:         setMotorPWM(mL);
  1189   0011BE  C03E  F039         	movff	stop@mL,setMotorPWM@m
  1190   0011C2  EC4B  F007         	call	_setMotorPWM	;wreg free
  1191   0011C6                     
  1192                           ;dc_motor.c: 97:         setMotorPWM(mR);
  1193   0011C6  C03F  F039         	movff	stop@mR,setMotorPWM@m
  1194   0011CA  EC4B  F007         	call	_setMotorPWM	;wreg free
  1195   0011CE                     
  1196                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  1197   0011CE  0E0B               	movlw	11
  1198   0011D0  6E40               	movwf	??_stop^0,c
  1199   0011D2  0E62               	movlw	98
  1200   0011D4                     u787:
  1201   0011D4  2EE8               	decfsz	wreg,f,c
  1202   0011D6  D7FE               	bra	u787
  1203   0011D8  2E40               	decfsz	??_stop^0,f,c
  1204   0011DA  D7FC               	bra	u787
  1205   0011DC  D000               	nop2	
  1206   0011DE                     l1786:
  1207                           
  1208                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  1209   0011DE  503E               	movf	stop@mL^0,w,c
  1210   0011E0  6ED9               	movwf	fsr2l,c
  1211   0011E2  6ADA               	clrf	fsr2h,c
  1212   0011E4  50DF               	movf	indf2,w,c
  1213   0011E6  A4D8               	btfss	status,2,c
  1214   0011E8  EFF8  F008         	goto	u501
  1215   0011EC  EFFA  F008         	goto	u500
  1216   0011F0                     u501:
  1217   0011F0  EFC1  F008         	goto	l1772
  1218   0011F4                     u500:
  1219   0011F4  503F               	movf	stop@mR^0,w,c
  1220   0011F6  6ED9               	movwf	fsr2l,c
  1221   0011F8  6ADA               	clrf	fsr2h,c
  1222   0011FA  50DF               	movf	indf2,w,c
  1223   0011FC  A4D8               	btfss	status,2,c
  1224   0011FE  EF03  F009         	goto	u511
  1225   001202  EF05  F009         	goto	u510
  1226   001206                     u511:
  1227   001206  EFC1  F008         	goto	l1772
  1228   00120A                     u510:
  1229   00120A  0012               	return		;funcret
  1230   00120C                     __end_of_stop:
  1231                           	callstack 0
  1232                           
  1233 ;; *************** function _fullSpeedBack *****************
  1234 ;; Defined at:
  1235 ;;		line 165 in file "dc_motor.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1238 ;;		 -> motorL(9), 
  1239 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1240 ;;		 -> motorR(9), 
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  power           2   21[COMRAM] int 
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  1    wreg      void 
  1245 ;; Registers used:
  1246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1247 ;; Tracked objects:
  1248 ;;		On entry : 0/0
  1249 ;;		On exit  : 0/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1252 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1253 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1254 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1255 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1256 ;;Total ram usage:        5 bytes
  1257 ;; Hardware stack levels used: 1
  1258 ;; Hardware stack levels required when called: 2
  1259 ;; This function calls:
  1260 ;;		_setMotorPWM
  1261 ;; This function is called by:
  1262 ;;		_backHalf
  1263 ;;		_backOneAndHalf
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text6
  1268   001288                     __ptext6:
  1269                           	callstack 0
  1270   001288                     _fullSpeedBack:
  1271                           	callstack 26
  1272   001288                     
  1273                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  1274   001288  503E               	movf	fullSpeedBack@mL^0,w,c
  1275   00128A  6ED9               	movwf	fsr2l,c
  1276   00128C  6ADA               	clrf	fsr2h,c
  1277   00128E  0E01               	movlw	1
  1278   001290  26D9               	addwf	fsr2l,f,c
  1279   001292  6ADF               	clrf	indf2,c
  1280                           
  1281                           ;dc_motor.c: 169:     mR->direction = 0;
  1282   001294  503F               	movf	fullSpeedBack@mR^0,w,c
  1283   001296  6ED9               	movwf	fsr2l,c
  1284   001298  6ADA               	clrf	fsr2h,c
  1285   00129A  0E01               	movlw	1
  1286   00129C  26D9               	addwf	fsr2l,f,c
  1287   00129E  6ADF               	clrf	indf2,c
  1288   0012A0                     
  1289                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  1290   0012A0  0E00               	movlw	0
  1291   0012A2  6E42               	movwf	(fullSpeedBack@power+1)^0,c
  1292   0012A4  0E00               	movlw	0
  1293   0012A6  6E41               	movwf	fullSpeedBack@power^0,c
  1294   0012A8                     l1822:
  1295                           
  1296                           ;dc_motor.c: 172:         mL->power = power;
  1297   0012A8  503E               	movf	fullSpeedBack@mL^0,w,c
  1298   0012AA  6ED9               	movwf	fsr2l,c
  1299   0012AC  6ADA               	clrf	fsr2h,c
  1300   0012AE  C041  FFDF         	movff	fullSpeedBack@power,indf2
  1301                           
  1302                           ;dc_motor.c: 173:         mR->power = power;
  1303   0012B2  503F               	movf	fullSpeedBack@mR^0,w,c
  1304   0012B4  6ED9               	movwf	fsr2l,c
  1305   0012B6  6ADA               	clrf	fsr2h,c
  1306   0012B8  C041  FFDF         	movff	fullSpeedBack@power,indf2
  1307   0012BC                     
  1308                           ;dc_motor.c: 176:         setMotorPWM(mL);
  1309   0012BC  C03E  F039         	movff	fullSpeedBack@mL,setMotorPWM@m
  1310   0012C0  EC4B  F007         	call	_setMotorPWM	;wreg free
  1311   0012C4                     
  1312                           ;dc_motor.c: 177:         setMotorPWM(mR);
  1313   0012C4  C03F  F039         	movff	fullSpeedBack@mR,setMotorPWM@m
  1314   0012C8  EC4B  F007         	call	_setMotorPWM	;wreg free
  1315   0012CC                     
  1316                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  1317   0012CC  0E0B               	movlw	11
  1318   0012CE  6E40               	movwf	??_fullSpeedBack^0,c
  1319   0012D0  0E62               	movlw	98
  1320   0012D2                     u797:
  1321   0012D2  2EE8               	decfsz	wreg,f,c
  1322   0012D4  D7FE               	bra	u797
  1323   0012D6  2E40               	decfsz	??_fullSpeedBack^0,f,c
  1324   0012D8  D7FC               	bra	u797
  1325   0012DA  D000               	nop2	
  1326   0012DC                     
  1327                           ;dc_motor.c: 181:     }
  1328   0012DC  4A41               	infsnz	fullSpeedBack@power^0,f,c
  1329   0012DE  2A42               	incf	(fullSpeedBack@power+1)^0,f,c
  1330   0012E0  BE42               	btfsc	(fullSpeedBack@power+1)^0,7,c
  1331   0012E2  EF7C  F009         	goto	u531
  1332   0012E6  5042               	movf	(fullSpeedBack@power+1)^0,w,c
  1333   0012E8  E109               	bnz	u530
  1334   0012EA  0E33               	movlw	51
  1335   0012EC  5C41               	subwf	fullSpeedBack@power^0,w,c
  1336   0012EE  A0D8               	btfss	status,0,c
  1337   0012F0  EF7C  F009         	goto	u531
  1338   0012F4  EF7E  F009         	goto	u530
  1339   0012F8                     u531:
  1340   0012F8  EF54  F009         	goto	l1822
  1341   0012FC                     u530:
  1342   0012FC  0012               	return		;funcret
  1343   0012FE                     __end_of_fullSpeedBack:
  1344                           	callstack 0
  1345                           
  1346 ;; *************** function _setMotorPWM *****************
  1347 ;; Defined at:
  1348 ;;		line 65 in file "dc_motor.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1351 ;;		 -> motorR(9), motorL(9), 
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;  negDuty         1   17[COMRAM] unsigned char 
  1354 ;;  posDuty         1   16[COMRAM] unsigned char 
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  1    wreg      void 
  1357 ;; Registers used:
  1358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1364 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1365 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1367 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1368 ;;Total ram usage:        5 bytes
  1369 ;; Hardware stack levels used: 1
  1370 ;; Hardware stack levels required when called: 1
  1371 ;; This function calls:
  1372 ;;		___lwdiv
  1373 ;;		___wmul
  1374 ;; This function is called by:
  1375 ;;		_stop
  1376 ;;		_turnRight
  1377 ;;		_fullSpeedBack
  1378 ;;		_turnLeft
  1379 ;;		_fullSpeedAhead
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text7
  1384   000E96                     __ptext7:
  1385                           	callstack 0
  1386   000E96                     _setMotorPWM:
  1387                           	callstack 26
  1388   000E96                     
  1389                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  1390   000E96  5039               	movf	setMotorPWM@m^0,w,c
  1391   000E98  6ED9               	movwf	fsr2l,c
  1392   000E9A  6ADA               	clrf	fsr2h,c
  1393   000E9C  0E02               	movlw	2
  1394   000E9E  26D9               	addwf	fsr2l,f,c
  1395   000EA0  50DF               	movf	indf2,w,c
  1396   000EA2  B4D8               	btfsc	status,2,c
  1397   000EA4  EF56  F007         	goto	u461
  1398   000EA8  EF58  F007         	goto	u460
  1399   000EAC                     u461:
  1400   000EAC  EF88  F007         	goto	l1760
  1401   000EB0                     u460:
  1402   000EB0                     
  1403                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1404   000EB0  5039               	movf	setMotorPWM@m^0,w,c
  1405   000EB2  6ED9               	movwf	fsr2l,c
  1406   000EB4  6ADA               	clrf	fsr2h,c
  1407   000EB6  50DF               	movf	indf2,w,c
  1408   000EB8  6E3A               	movwf	??_setMotorPWM^0,c
  1409   000EBA  503A               	movf	??_setMotorPWM^0,w,c
  1410   000EBC  6E2C               	movwf	___wmul@multiplier^0,c
  1411   000EBE  6A2D               	clrf	(___wmul@multiplier+1)^0,c
  1412   000EC0  5039               	movf	setMotorPWM@m^0,w,c
  1413   000EC2  6ED9               	movwf	fsr2l,c
  1414   000EC4  6ADA               	clrf	fsr2h,c
  1415   000EC6  0E03               	movlw	3
  1416   000EC8  26D9               	addwf	fsr2l,f,c
  1417   000ECA  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  1418   000ECE  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  1419   000ED2  EC4A  F00A         	call	___wmul	;wreg free
  1420   000ED6  C02C  F032         	movff	?___wmul,___lwdiv@dividend
  1421   000EDA  C02D  F033         	movff	?___wmul+1,___lwdiv@dividend+1
  1422   000EDE  0E00               	movlw	0
  1423   000EE0  6E35               	movwf	(___lwdiv@divisor+1)^0,c
  1424   000EE2  0E64               	movlw	100
  1425   000EE4  6E34               	movwf	___lwdiv@divisor^0,c
  1426   000EE6  EC7F  F009         	call	___lwdiv	;wreg free
  1427   000EEA  5039               	movf	setMotorPWM@m^0,w,c
  1428   000EEC  6ED9               	movwf	fsr2l,c
  1429   000EEE  6ADA               	clrf	fsr2h,c
  1430   000EF0  0E03               	movlw	3
  1431   000EF2  26D9               	addwf	fsr2l,f,c
  1432   000EF4  50DF               	movf	indf2,w,c
  1433   000EF6  6E3B               	movwf	(??_setMotorPWM+1)^0,c
  1434   000EF8  5032               	movf	?___lwdiv^0,w,c
  1435   000EFA  5C3B               	subwf	(??_setMotorPWM+1)^0,w,c
  1436   000EFC  6E3C               	movwf	setMotorPWM@posDuty^0,c
  1437   000EFE                     
  1438                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  1439   000EFE  5039               	movf	setMotorPWM@m^0,w,c
  1440   000F00  6ED9               	movwf	fsr2l,c
  1441   000F02  6ADA               	clrf	fsr2h,c
  1442   000F04  0E03               	movlw	3
  1443   000F06  26D9               	addwf	fsr2l,f,c
  1444   000F08  50DF               	movf	indf2,w,c
  1445   000F0A  6E3D               	movwf	setMotorPWM@negDuty^0,c
  1446                           
  1447                           ;dc_motor.c: 72:     }
  1448   000F0C  EFA9  F007         	goto	l1764
  1449   000F10                     l1760:
  1450                           
  1451                           ;dc_motor.c: 74:         posDuty=0;
  1452   000F10  0E00               	movlw	0
  1453   000F12  6E3C               	movwf	setMotorPWM@posDuty^0,c
  1454   000F14                     
  1455                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1456   000F14  5039               	movf	setMotorPWM@m^0,w,c
  1457   000F16  6ED9               	movwf	fsr2l,c
  1458   000F18  6ADA               	clrf	fsr2h,c
  1459   000F1A  50DF               	movf	indf2,w,c
  1460   000F1C  6E3A               	movwf	??_setMotorPWM^0,c
  1461   000F1E  503A               	movf	??_setMotorPWM^0,w,c
  1462   000F20  6E2C               	movwf	___wmul@multiplier^0,c
  1463   000F22  6A2D               	clrf	(___wmul@multiplier+1)^0,c
  1464   000F24  5039               	movf	setMotorPWM@m^0,w,c
  1465   000F26  6ED9               	movwf	fsr2l,c
  1466   000F28  6ADA               	clrf	fsr2h,c
  1467   000F2A  0E03               	movlw	3
  1468   000F2C  26D9               	addwf	fsr2l,f,c
  1469   000F2E  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  1470   000F32  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  1471   000F36  EC4A  F00A         	call	___wmul	;wreg free
  1472   000F3A  C02C  F032         	movff	?___wmul,___lwdiv@dividend
  1473   000F3E  C02D  F033         	movff	?___wmul+1,___lwdiv@dividend+1
  1474   000F42  0E00               	movlw	0
  1475   000F44  6E35               	movwf	(___lwdiv@divisor+1)^0,c
  1476   000F46  0E64               	movlw	100
  1477   000F48  6E34               	movwf	___lwdiv@divisor^0,c
  1478   000F4A  EC7F  F009         	call	___lwdiv	;wreg free
  1479   000F4E  5032               	movf	?___lwdiv^0,w,c
  1480   000F50  6E3D               	movwf	setMotorPWM@negDuty^0,c
  1481   000F52                     l1764:
  1482                           
  1483                           ;dc_motor.c: 78:     if (m->direction) {
  1484   000F52  5039               	movf	setMotorPWM@m^0,w,c
  1485   000F54  6ED9               	movwf	fsr2l,c
  1486   000F56  6ADA               	clrf	fsr2h,c
  1487   000F58  0E01               	movlw	1
  1488   000F5A  26D9               	addwf	fsr2l,f,c
  1489   000F5C  50DF               	movf	indf2,w,c
  1490   000F5E  B4D8               	btfsc	status,2,c
  1491   000F60  EFB4  F007         	goto	u471
  1492   000F64  EFB6  F007         	goto	u470
  1493   000F68                     u471:
  1494   000F68  EFD6  F007         	goto	l1768
  1495   000F6C                     u470:
  1496   000F6C                     
  1497                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  1498   000F6C  5039               	movf	setMotorPWM@m^0,w,c
  1499   000F6E  6ED9               	movwf	fsr2l,c
  1500   000F70  6ADA               	clrf	fsr2h,c
  1501   000F72  0E05               	movlw	5
  1502   000F74  26D9               	addwf	fsr2l,f,c
  1503   000F76  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1504   000F7A  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1505   000F7E  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1506   000F82  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1507   000F86  C03C  FFDF         	movff	setMotorPWM@posDuty,indf2
  1508                           
  1509                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  1510   000F8A  5039               	movf	setMotorPWM@m^0,w,c
  1511   000F8C  6ED9               	movwf	fsr2l,c
  1512   000F8E  6ADA               	clrf	fsr2h,c
  1513   000F90  0E07               	movlw	7
  1514   000F92  26D9               	addwf	fsr2l,f,c
  1515   000F94  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1516   000F98  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1517   000F9C  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1518   000FA0  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1519   000FA4  C03D  FFDF         	movff	setMotorPWM@negDuty,indf2
  1520                           
  1521                           ;dc_motor.c: 81:     } else {
  1522   000FA8  EFF4  F007         	goto	l271
  1523   000FAC                     l1768:
  1524                           
  1525                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  1526   000FAC  5039               	movf	setMotorPWM@m^0,w,c
  1527   000FAE  6ED9               	movwf	fsr2l,c
  1528   000FB0  6ADA               	clrf	fsr2h,c
  1529   000FB2  0E05               	movlw	5
  1530   000FB4  26D9               	addwf	fsr2l,f,c
  1531   000FB6  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1532   000FBA  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1533   000FBE  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1534   000FC2  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1535   000FC6  C03D  FFDF         	movff	setMotorPWM@negDuty,indf2
  1536                           
  1537                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  1538   000FCA  5039               	movf	setMotorPWM@m^0,w,c
  1539   000FCC  6ED9               	movwf	fsr2l,c
  1540   000FCE  6ADA               	clrf	fsr2h,c
  1541   000FD0  0E07               	movlw	7
  1542   000FD2  26D9               	addwf	fsr2l,f,c
  1543   000FD4  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1544   000FD8  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1545   000FDC  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1546   000FE0  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1547   000FE4  C03C  FFDF         	movff	setMotorPWM@posDuty,indf2
  1548   000FE8                     l271:
  1549   000FE8  0012               	return		;funcret
  1550   000FEA                     __end_of_setMotorPWM:
  1551                           	callstack 0
  1552                           
  1553 ;; *************** function ___wmul *****************
  1554 ;; Defined at:
  1555 ;;		line 15 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/Umul16.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;  multiplier      2    0[COMRAM] unsigned int 
  1558 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  product         2    4[COMRAM] unsigned int 
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  2    0[COMRAM] unsigned int 
  1563 ;; Registers used:
  1564 ;;		wreg, status,2, status,0, prodl, prodh
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1570 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1571 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1573 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1574 ;;Total ram usage:        6 bytes
  1575 ;; Hardware stack levels used: 1
  1576 ;; This function calls:
  1577 ;;		Nothing
  1578 ;; This function is called by:
  1579 ;;		_setMotorPWM
  1580 ;;		_ADC2String
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text8
  1585   001494                     __ptext8:
  1586                           	callstack 0
  1587   001494                     ___wmul:
  1588                           	callstack 26
  1589   001494  502C               	movf	___wmul@multiplier^0,w,c
  1590   001496  022E               	mulwf	___wmul@multiplicand^0,c
  1591   001498  CFF3 F030          	movff	prodl,___wmul@product
  1592   00149C  CFF4 F031          	movff	prodh,___wmul@product+1
  1593   0014A0  502C               	movf	___wmul@multiplier^0,w,c
  1594   0014A2  022F               	mulwf	(___wmul@multiplicand+1)^0,c
  1595   0014A4  50F3               	movf	243,w,c
  1596   0014A6  2631               	addwf	(___wmul@product+1)^0,f,c
  1597   0014A8  502D               	movf	(___wmul@multiplier+1)^0,w,c
  1598   0014AA  022E               	mulwf	___wmul@multiplicand^0,c
  1599   0014AC  50F3               	movf	243,w,c
  1600   0014AE  2631               	addwf	(___wmul@product+1)^0,f,c
  1601   0014B0  C030  F02C         	movff	___wmul@product,?___wmul
  1602   0014B4  C031  F02D         	movff	___wmul@product+1,?___wmul+1
  1603   0014B8  0012               	return		;funcret
  1604   0014BA                     __end_of___wmul:
  1605                           	callstack 0
  1606                           
  1607 ;; *************** function ___lwdiv *****************
  1608 ;; Defined at:
  1609 ;;		line 7 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/lwdiv.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;  dividend        2    6[COMRAM] unsigned int 
  1612 ;;  divisor         2    8[COMRAM] unsigned int 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  quotient        2   10[COMRAM] unsigned int 
  1615 ;;  counter         1   12[COMRAM] unsigned char 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  2    6[COMRAM] unsigned int 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2, status,0
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1625 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1626 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1628 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1629 ;;Total ram usage:        7 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; This function calls:
  1632 ;;		Nothing
  1633 ;; This function is called by:
  1634 ;;		_setMotorPWM
  1635 ;;		_ADC2String
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text9
  1640   0012FE                     __ptext9:
  1641                           	callstack 0
  1642   0012FE                     ___lwdiv:
  1643                           	callstack 26
  1644   0012FE  0E00               	movlw	0
  1645   001300  6E37               	movwf	(___lwdiv@quotient+1)^0,c
  1646   001302  0E00               	movlw	0
  1647   001304  6E36               	movwf	___lwdiv@quotient^0,c
  1648   001306  5034               	movf	___lwdiv@divisor^0,w,c
  1649   001308  1035               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1650   00130A  B4D8               	btfsc	status,2,c
  1651   00130C  EF8A  F009         	goto	u431
  1652   001310  EF8C  F009         	goto	u430
  1653   001314                     u431:
  1654   001314  EFB4  F009         	goto	l949
  1655   001318                     u430:
  1656   001318  0E01               	movlw	1
  1657   00131A  6E38               	movwf	___lwdiv@counter^0,c
  1658   00131C  EF94  F009         	goto	l1740
  1659   001320                     l1738:
  1660   001320  90D8               	bcf	status,0,c
  1661   001322  3634               	rlcf	___lwdiv@divisor^0,f,c
  1662   001324  3635               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1663   001326  2A38               	incf	___lwdiv@counter^0,f,c
  1664   001328                     l1740:
  1665   001328  AE35               	btfss	(___lwdiv@divisor+1)^0,7,c
  1666   00132A  EF99  F009         	goto	u441
  1667   00132E  EF9B  F009         	goto	u440
  1668   001332                     u441:
  1669   001332  EF90  F009         	goto	l1738
  1670   001336                     u440:
  1671   001336                     l1742:
  1672   001336  90D8               	bcf	status,0,c
  1673   001338  3636               	rlcf	___lwdiv@quotient^0,f,c
  1674   00133A  3637               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1675   00133C  5034               	movf	___lwdiv@divisor^0,w,c
  1676   00133E  5C32               	subwf	___lwdiv@dividend^0,w,c
  1677   001340  5035               	movf	(___lwdiv@divisor+1)^0,w,c
  1678   001342  5833               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1679   001344  A0D8               	btfss	status,0,c
  1680   001346  EFA7  F009         	goto	u451
  1681   00134A  EFA9  F009         	goto	u450
  1682   00134E                     u451:
  1683   00134E  EFAE  F009         	goto	l1750
  1684   001352                     u450:
  1685   001352  5034               	movf	___lwdiv@divisor^0,w,c
  1686   001354  5E32               	subwf	___lwdiv@dividend^0,f,c
  1687   001356  5035               	movf	(___lwdiv@divisor+1)^0,w,c
  1688   001358  5A33               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1689   00135A  8036               	bsf	___lwdiv@quotient^0,0,c
  1690   00135C                     l1750:
  1691   00135C  90D8               	bcf	status,0,c
  1692   00135E  3235               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1693   001360  3234               	rrcf	___lwdiv@divisor^0,f,c
  1694   001362  2E38               	decfsz	___lwdiv@counter^0,f,c
  1695   001364  EF9B  F009         	goto	l1742
  1696   001368                     l949:
  1697   001368  C036  F032         	movff	___lwdiv@quotient,?___lwdiv
  1698   00136C  C037  F033         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1699   001370  0012               	return		;funcret
  1700   001372                     __end_of___lwdiv:
  1701                           	callstack 0
  1702                           
  1703 ;; *************** function _initUSART4 *****************
  1704 ;; Defined at:
  1705 ;;		line 14 in file "serial.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, status,2
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1723 ;;Total ram usage:        0 bytes
  1724 ;; Hardware stack levels used: 1
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_main
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text10
  1733   0014DA                     __ptext10:
  1734                           	callstack 0
  1735   0014DA                     _initUSART4:
  1736                           	callstack 30
  1737   0014DA                     
  1738                           ;serial.c: 15:     RC0PPS = 0x12;
  1739   0014DA  0E12               	movlw	18
  1740   0014DC  010E               	movlb	14	; () banked
  1741   0014DE  6F62               	movwf	98,b	;volatile
  1742                           
  1743                           ;serial.c: 16:     RX4PPS = 0x11;
  1744   0014E0  0E11               	movlw	17
  1745   0014E2  6F15               	movwf	21,b	;volatile
  1746   0014E4                     
  1747                           ; BSR set to: 14
  1748                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  1749   0014E4  97E9               	bcf	233,3,b	;volatile
  1750   0014E6                     
  1751                           ; BSR set to: 14
  1752                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  1753   0014E6  95E8               	bcf	232,2,b	;volatile
  1754                           
  1755                           ;serial.c: 19:     SP4BRGL = 51;
  1756   0014E8  0E33               	movlw	51
  1757   0014EA  6FE5               	movwf	229,b	;volatile
  1758                           
  1759                           ;serial.c: 20:     SP4BRGH = 0;
  1760   0014EC  0E00               	movlw	0
  1761   0014EE  6FE6               	movwf	230,b	;volatile
  1762   0014F0                     
  1763                           ; BSR set to: 14
  1764                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  1765   0014F0  89E7               	bsf	231,4,b	;volatile
  1766   0014F2                     
  1767                           ; BSR set to: 14
  1768                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  1769   0014F2  8BE8               	bsf	232,5,b	;volatile
  1770   0014F4                     
  1771                           ; BSR set to: 14
  1772                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  1773   0014F4  8FE7               	bsf	231,7,b	;volatile
  1774   0014F6                     
  1775                           ; BSR set to: 14
  1776   0014F6  0012               	return		;funcret
  1777   0014F8                     __end_of_initUSART4:
  1778                           	callstack 0
  1779                           
  1780 ;; *************** function _initDCmotorsPWM *****************
  1781 ;; Defined at:
  1782 ;;		line 5 in file "dc_motor.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;		None
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, status,2
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1799 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1800 ;;Total ram usage:        2 bytes
  1801 ;; Hardware stack levels used: 1
  1802 ;; This function calls:
  1803 ;;		Nothing
  1804 ;; This function is called by:
  1805 ;;		_main
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text11
  1810   0010EE                     __ptext11:
  1811                           	callstack 0
  1812   0010EE                     _initDCmotorsPWM:
  1813                           	callstack 30
  1814   0010EE                     
  1815                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  1816   0010EE  9485               	bcf	133,2,c	;volatile
  1817                           
  1818                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  1819   0010F0  9E83               	bcf	131,7,c	;volatile
  1820                           
  1821                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1822   0010F2  9885               	bcf	133,4,c	;volatile
  1823                           
  1824                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  1825   0010F4  9C87               	bcf	135,6,c	;volatile
  1826                           
  1827                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  1828   0010F6  947D               	bcf	125,2,c	;volatile
  1829                           
  1830                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  1831   0010F8  9E7B               	bcf	123,7,c	;volatile
  1832                           
  1833                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  1834   0010FA  987D               	bcf	125,4,c	;volatile
  1835                           
  1836                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  1837   0010FC  9C7F               	bcf	127,6,c	;volatile
  1838   0010FE                     
  1839                           ;dc_motor.c: 18:     RE2PPS=0x05;
  1840   0010FE  0E05               	movlw	5
  1841   001100  010E               	movlb	14	; () banked
  1842   001102  6F74               	movwf	116,b	;volatile
  1843                           
  1844                           ;dc_motor.c: 19:     RE4PPS=0x06;
  1845   001104  0E06               	movlw	6
  1846   001106  6F76               	movwf	118,b	;volatile
  1847                           
  1848                           ;dc_motor.c: 20:     RC7PPS=0x07;
  1849   001108  0E07               	movlw	7
  1850   00110A  6F69               	movwf	105,b	;volatile
  1851                           
  1852                           ;dc_motor.c: 21:     RG6PPS=0x08;
  1853   00110C  0E08               	movlw	8
  1854   00110E  6F88               	movwf	136,b	;volatile
  1855                           
  1856                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  1857   001110  50BD               	movf	189,w,c	;volatile
  1858   001112  0B8F               	andlw	-113
  1859   001114  0940               	iorlw	64
  1860   001116  6EBD               	movwf	189,c	;volatile
  1861                           
  1862                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1863   001118  0EE0               	movlw	-32
  1864   00111A  16BE               	andwf	190,f,c	;volatile
  1865                           
  1866                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1867   00111C  50BF               	movf	191,w,c	;volatile
  1868   00111E  0BF0               	andlw	-16
  1869   001120  0901               	iorlw	1
  1870   001122  6EBF               	movwf	191,c	;volatile
  1871   001124                     
  1872                           ; BSR set to: 14
  1873                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  1874   001124  C02C  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1875   001128                     
  1876                           ; BSR set to: 14
  1877                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  1878   001128  8EBD               	bsf	189,7,c	;volatile
  1879                           
  1880                           ;dc_motor.c: 35:     CCPR1H=0;
  1881   00112A  0E00               	movlw	0
  1882   00112C  6EAA               	movwf	170,c	;volatile
  1883                           
  1884                           ;dc_motor.c: 36:     CCPR2H=0;
  1885   00112E  0E00               	movlw	0
  1886   001130  6EA6               	movwf	166,c	;volatile
  1887                           
  1888                           ;dc_motor.c: 37:     CCPR3H=0;
  1889   001132  0E00               	movlw	0
  1890   001134  010F               	movlb	15	; () banked
  1891   001136  6F25               	movwf	37,b	;volatile
  1892                           
  1893                           ;dc_motor.c: 38:     CCPR4H=0;
  1894   001138  0E00               	movlw	0
  1895   00113A  6F21               	movwf	33,b	;volatile
  1896                           
  1897                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1898   00113C  0EFC               	movlw	-4
  1899   00113E  16AD               	andwf	173,f,c	;volatile
  1900                           
  1901                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1902   001140  0EF3               	movlw	-13
  1903   001142  16AD               	andwf	173,f,c	;volatile
  1904                           
  1905                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1906   001144  0ECF               	movlw	-49
  1907   001146  16AD               	andwf	173,f,c	;volatile
  1908                           
  1909                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1910   001148  0E3F               	movlw	-193
  1911   00114A  16AD               	andwf	173,f,c	;volatile
  1912   00114C                     
  1913                           ; BSR set to: 15
  1914                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1915   00114C  88AB               	bsf	171,4,c	;volatile
  1916                           
  1917                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1918   00114E  50AB               	movf	171,w,c	;volatile
  1919   001150  0BF0               	andlw	-16
  1920   001152  090C               	iorlw	12
  1921   001154  6EAB               	movwf	171,c	;volatile
  1922   001156                     
  1923                           ; BSR set to: 15
  1924                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  1925   001156  8EAB               	bsf	171,7,c	;volatile
  1926   001158                     
  1927                           ; BSR set to: 15
  1928                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  1929   001158  88A7               	bsf	167,4,c	;volatile
  1930                           
  1931                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1932   00115A  50A7               	movf	167,w,c	;volatile
  1933   00115C  0BF0               	andlw	-16
  1934   00115E  090C               	iorlw	12
  1935   001160  6EA7               	movwf	167,c	;volatile
  1936   001162                     
  1937                           ; BSR set to: 15
  1938                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  1939   001162  8EA7               	bsf	167,7,c	;volatile
  1940   001164                     
  1941                           ; BSR set to: 15
  1942                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  1943   001164  8926               	bsf	38,4,b	;volatile
  1944                           
  1945                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1946   001166  5126               	movf	38,w,b	;volatile
  1947   001168  0BF0               	andlw	-16
  1948   00116A  090C               	iorlw	12
  1949   00116C  6F26               	movwf	38,b	;volatile
  1950   00116E                     
  1951                           ; BSR set to: 15
  1952                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  1953   00116E  8F26               	bsf	38,7,b	;volatile
  1954   001170                     
  1955                           ; BSR set to: 15
  1956                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  1957   001170  8922               	bsf	34,4,b	;volatile
  1958                           
  1959                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1960   001172  5122               	movf	34,w,b	;volatile
  1961   001174  0BF0               	andlw	-16
  1962   001176  090C               	iorlw	12
  1963   001178  6F22               	movwf	34,b	;volatile
  1964   00117A                     
  1965                           ; BSR set to: 15
  1966                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  1967   00117A  8F22               	bsf	34,7,b	;volatile
  1968   00117C                     
  1969                           ; BSR set to: 15
  1970   00117C  0012               	return		;funcret
  1971   00117E                     __end_of_initDCmotorsPWM:
  1972                           	callstack 0
  1973                           
  1974 ;; *************** function _color_click_init *****************
  1975 ;; Defined at:
  1976 ;;		line 6 in file "color.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;		None
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;		None
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  1    wreg      void 
  1983 ;; Registers used:
  1984 ;;		wreg, status,2, status,0, cstack
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1992 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1993 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1994 ;;Total ram usage:        1 bytes
  1995 ;; Hardware stack levels used: 1
  1996 ;; Hardware stack levels required when called: 3
  1997 ;; This function calls:
  1998 ;;		_I2C_2_Master_Init
  1999 ;;		_color_writetoaddr
  2000 ;; This function is called by:
  2001 ;;		_main
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text12
  2006   0013AA                     __ptext12:
  2007                           	callstack 0
  2008   0013AA                     _color_click_init:
  2009                           	callstack 27
  2010   0013AA                     
  2011                           ;color.c: 9:     I2C_2_Master_Init();
  2012   0013AA  EC21  F00A         	call	_I2C_2_Master_Init	;wreg free
  2013   0013AE                     
  2014                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  2015   0013AE  0E01               	movlw	1
  2016   0013B0  6E2E               	movwf	color_writetoaddr@value^0,c
  2017   0013B2  0E00               	movlw	0
  2018   0013B4  EC5D  F00A         	call	_color_writetoaddr
  2019   0013B8                     
  2020                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2021   0013B8  0E3F               	movlw	63
  2022   0013BA  6E30               	movwf	??_color_click_init^0,c
  2023   0013BC  0E55               	movlw	85
  2024   0013BE                     u807:
  2025   0013BE  2EE8               	decfsz	wreg,f,c
  2026   0013C0  D7FE               	bra	u807
  2027   0013C2  2E30               	decfsz	??_color_click_init^0,f,c
  2028   0013C4  D7FC               	bra	u807
  2029   0013C6  0000               	nop	
  2030   0013C8                     
  2031                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  2032   0013C8  0E03               	movlw	3
  2033   0013CA  6E2E               	movwf	color_writetoaddr@value^0,c
  2034   0013CC  0E00               	movlw	0
  2035   0013CE  EC5D  F00A         	call	_color_writetoaddr
  2036   0013D2                     
  2037                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  2038   0013D2  0ED5               	movlw	213
  2039   0013D4  6E2E               	movwf	color_writetoaddr@value^0,c
  2040   0013D6  0E01               	movlw	1
  2041   0013D8  EC5D  F00A         	call	_color_writetoaddr
  2042   0013DC  0012               	return		;funcret
  2043   0013DE                     __end_of_color_click_init:
  2044                           	callstack 0
  2045                           
  2046 ;; *************** function _color_writetoaddr *****************
  2047 ;; Defined at:
  2048 ;;		line 22 in file "color.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  address         1    wreg     unsigned char 
  2051 ;;  value           1    2[COMRAM] unsigned char 
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  address         1    3[COMRAM] unsigned char 
  2054 ;; Return value:  Size  Location     Type
  2055 ;;                  1    wreg      void 
  2056 ;; Registers used:
  2057 ;;		wreg, status,2, status,0, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2063 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2066 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2067 ;;Total ram usage:        2 bytes
  2068 ;; Hardware stack levels used: 1
  2069 ;; Hardware stack levels required when called: 2
  2070 ;; This function calls:
  2071 ;;		_I2C_2_Master_Start
  2072 ;;		_I2C_2_Master_Stop
  2073 ;;		_I2C_2_Master_Write
  2074 ;; This function is called by:
  2075 ;;		_color_click_init
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text13
  2080   0014BA                     __ptext13:
  2081                           	callstack 0
  2082   0014BA                     _color_writetoaddr:
  2083                           	callstack 27
  2084                           
  2085                           ;incstack = 0
  2086                           ;color_writetoaddr@address stored from wreg
  2087   0014BA  6E2F               	movwf	color_writetoaddr@address^0,c
  2088   0014BC                     
  2089                           ;color.c: 23:     I2C_2_Master_Start();
  2090   0014BC  ECA1  F00A         	call	_I2C_2_Master_Start	;wreg free
  2091                           
  2092                           ;color.c: 24:     I2C_2_Master_Write(0x52 | 0x00);
  2093   0014C0  0E52               	movlw	82
  2094   0014C2  EC96  F00A         	call	_I2C_2_Master_Write
  2095                           
  2096                           ;color.c: 25:     I2C_2_Master_Write(0x80 | address);
  2097   0014C6  502F               	movf	color_writetoaddr@address^0,w,c
  2098   0014C8  0980               	iorlw	128
  2099   0014CA  EC96  F00A         	call	_I2C_2_Master_Write
  2100                           
  2101                           ;color.c: 26:     I2C_2_Master_Write(value);
  2102   0014CE  502E               	movf	color_writetoaddr@value^0,w,c
  2103   0014D0  EC96  F00A         	call	_I2C_2_Master_Write
  2104                           
  2105                           ;color.c: 27:     I2C_2_Master_Stop();
  2106   0014D4  EC9C  F00A         	call	_I2C_2_Master_Stop	;wreg free
  2107   0014D8  0012               	return		;funcret
  2108   0014DA                     __end_of_color_writetoaddr:
  2109                           	callstack 0
  2110                           
  2111 ;; *************** function _I2C_2_Master_Write *****************
  2112 ;; Defined at:
  2113 ;;		line 45 in file "i2c.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;  data_byte       1    wreg     unsigned char 
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;  data_byte       1    1[COMRAM] unsigned char 
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg, status,2, status,0, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2128 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2130 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2131 ;;Total ram usage:        1 bytes
  2132 ;; Hardware stack levels used: 1
  2133 ;; Hardware stack levels required when called: 1
  2134 ;; This function calls:
  2135 ;;		_I2C_2_Master_Idle
  2136 ;; This function is called by:
  2137 ;;		_color_writetoaddr
  2138 ;;		_color_read_Red
  2139 ;;		_color_read_Green
  2140 ;;		_color_read_Blue
  2141 ;;		_color_read_Clear
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text14
  2146   00152C                     __ptext14:
  2147                           	callstack 0
  2148   00152C                     _I2C_2_Master_Write:
  2149                           	callstack 27
  2150                           
  2151                           ;incstack = 0
  2152                           ;I2C_2_Master_Write@data_byte stored from wreg
  2153   00152C  6E2D               	movwf	I2C_2_Master_Write@data_byte^0,c
  2154   00152E                     
  2155                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  2156   00152E  EC36  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2157   001532                     
  2158                           ;i2c.c: 48:   SSP2BUF = data_byte;
  2159   001532  C02D  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  2160   001536  0012               	return		;funcret
  2161   001538                     __end_of_I2C_2_Master_Write:
  2162                           	callstack 0
  2163                           
  2164 ;; *************** function _I2C_2_Master_Stop *****************
  2165 ;; Defined at:
  2166 ;;		line 39 in file "i2c.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;		None
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;		None
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, status,2, status,0, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2184 ;;Total ram usage:        0 bytes
  2185 ;; Hardware stack levels used: 1
  2186 ;; Hardware stack levels required when called: 1
  2187 ;; This function calls:
  2188 ;;		_I2C_2_Master_Idle
  2189 ;; This function is called by:
  2190 ;;		_color_writetoaddr
  2191 ;;		_color_read_Red
  2192 ;;		_color_read_Green
  2193 ;;		_color_read_Blue
  2194 ;;		_color_read_Clear
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198                           	psect	text15
  2199   001538                     __ptext15:
  2200                           	callstack 0
  2201   001538                     _I2C_2_Master_Stop:
  2202                           	callstack 27
  2203   001538                     
  2204                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2205   001538  EC36  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2206   00153C                     
  2207                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2208   00153C  010E               	movlb	14	; () banked
  2209   00153E  85DA               	bsf	218,2,b	;volatile
  2210   001540                     
  2211                           ; BSR set to: 14
  2212   001540  0012               	return		;funcret
  2213   001542                     __end_of_I2C_2_Master_Stop:
  2214                           	callstack 0
  2215                           
  2216 ;; *************** function _I2C_2_Master_Start *****************
  2217 ;; Defined at:
  2218 ;;		line 27 in file "i2c.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;		None
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;		None
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  1    wreg      void 
  2225 ;; Registers used:
  2226 ;;		wreg, status,2, status,0, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2236 ;;Total ram usage:        0 bytes
  2237 ;; Hardware stack levels used: 1
  2238 ;; Hardware stack levels required when called: 1
  2239 ;; This function calls:
  2240 ;;		_I2C_2_Master_Idle
  2241 ;; This function is called by:
  2242 ;;		_color_writetoaddr
  2243 ;;		_color_read_Red
  2244 ;;		_color_read_Green
  2245 ;;		_color_read_Blue
  2246 ;;		_color_read_Clear
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text16
  2251   001542                     __ptext16:
  2252                           	callstack 0
  2253   001542                     _I2C_2_Master_Start:
  2254                           	callstack 27
  2255   001542                     
  2256                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2257   001542  EC36  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2258   001546                     
  2259                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2260   001546  010E               	movlb	14	; () banked
  2261   001548  81DA               	bsf	218,0,b	;volatile
  2262   00154A                     
  2263                           ; BSR set to: 14
  2264   00154A  0012               	return		;funcret
  2265   00154C                     __end_of_I2C_2_Master_Start:
  2266                           	callstack 0
  2267                           
  2268 ;; *************** function _I2C_2_Master_Idle *****************
  2269 ;; Defined at:
  2270 ;;		line 22 in file "i2c.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;		None
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;		None
  2275 ;; Return value:  Size  Location     Type
  2276 ;;                  1    wreg      void 
  2277 ;; Registers used:
  2278 ;;		wreg, status,2, status,0
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2286 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2287 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2288 ;;Total ram usage:        1 bytes
  2289 ;; Hardware stack levels used: 1
  2290 ;; This function calls:
  2291 ;;		Nothing
  2292 ;; This function is called by:
  2293 ;;		_I2C_2_Master_Start
  2294 ;;		_I2C_2_Master_Stop
  2295 ;;		_I2C_2_Master_Write
  2296 ;;		_I2C_2_Master_RepStart
  2297 ;;		_I2C_2_Master_Read
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text17
  2302   00146C                     __ptext17:
  2303                           	callstack 0
  2304   00146C                     _I2C_2_Master_Idle:
  2305                           	callstack 27
  2306   00146C                     l99:
  2307   00146C  010E               	movlb	14	; () banked
  2308   00146E  B5D8               	btfsc	216,2,b	;volatile
  2309   001470  EF3C  F00A         	goto	u41
  2310   001474  EF3E  F00A         	goto	u40
  2311   001478                     u41:
  2312   001478  EF36  F00A         	goto	l99
  2313   00147C                     u40:
  2314   00147C                     
  2315                           ; BSR set to: 14
  2316   00147C  CEDA F02C          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2317   001480  0E1F               	movlw	31
  2318   001482  162C               	andwf	??_I2C_2_Master_Idle^0,f,c
  2319   001484  A4D8               	btfss	status,2,c
  2320   001486  EF47  F00A         	goto	u51
  2321   00148A  EF49  F00A         	goto	u50
  2322   00148E                     u51:
  2323   00148E  EF36  F00A         	goto	l99
  2324   001492                     u50:
  2325   001492                     
  2326                           ; BSR set to: 14
  2327   001492  0012               	return		;funcret
  2328   001494                     __end_of_I2C_2_Master_Idle:
  2329                           	callstack 0
  2330                           
  2331 ;; *************** function _I2C_2_Master_Init *****************
  2332 ;; Defined at:
  2333 ;;		line 4 in file "i2c.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;		None
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;		None
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  1    wreg      void 
  2340 ;; Registers used:
  2341 ;;		wreg, status,2
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2351 ;;Total ram usage:        0 bytes
  2352 ;; Hardware stack levels used: 1
  2353 ;; This function calls:
  2354 ;;		Nothing
  2355 ;; This function is called by:
  2356 ;;		_color_click_init
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           	psect	text18
  2361   001442                     __ptext18:
  2362                           	callstack 0
  2363   001442                     _I2C_2_Master_Init:
  2364                           	callstack 29
  2365   001442                     
  2366                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2367   001442  010E               	movlb	14	; () banked
  2368   001444  51D9               	movf	217,w,b	;volatile
  2369   001446  0BF0               	andlw	-16
  2370   001448  0908               	iorlw	8
  2371   00144A  6FD9               	movwf	217,b	;volatile
  2372   00144C                     
  2373                           ; BSR set to: 14
  2374                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2375   00144C  8BD9               	bsf	217,5,b	;volatile
  2376                           
  2377                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2378   00144E  0E9F               	movlw	159
  2379   001450  6FD6               	movwf	214,b	;volatile
  2380   001452                     
  2381                           ; BSR set to: 14
  2382                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2383   001452  8A84               	bsf	132,5,c	;volatile
  2384   001454                     
  2385                           ; BSR set to: 14
  2386                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2387   001454  8C84               	bsf	132,6,c	;volatile
  2388   001456                     
  2389                           ; BSR set to: 14
  2390                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2391   001456  9BA7               	bcf	167,5,b	;volatile
  2392   001458                     
  2393                           ; BSR set to: 14
  2394                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2395   001458  9DA7               	bcf	167,6,b	;volatile
  2396                           
  2397                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2398   00145A  0E1D               	movlw	29
  2399   00145C  6F1D               	movwf	29,b	;volatile
  2400                           
  2401                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2402   00145E  0E1E               	movlw	30
  2403   001460  6F1C               	movwf	28,b	;volatile
  2404                           
  2405                           ;i2c.c: 18:   RD5PPS=0x1C;
  2406   001462  0E1C               	movlw	28
  2407   001464  6F6F               	movwf	111,b	;volatile
  2408                           
  2409                           ;i2c.c: 19:   RD6PPS=0x1B;
  2410   001466  0E1B               	movlw	27
  2411   001468  6F70               	movwf	112,b	;volatile
  2412   00146A                     
  2413                           ; BSR set to: 14
  2414   00146A  0012               	return		;funcret
  2415   00146C                     __end_of_I2C_2_Master_Init:
  2416                           	callstack 0
  2417                           
  2418 ;; *************** function _ADC_init *****************
  2419 ;; Defined at:
  2420 ;;		line 9 in file "ADC.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;		None
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;		None
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  1    wreg      void 
  2427 ;; Registers used:
  2428 ;;		wreg, status,2
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2438 ;;Total ram usage:        0 bytes
  2439 ;; Hardware stack levels used: 1
  2440 ;; This function calls:
  2441 ;;		Nothing
  2442 ;; This function is called by:
  2443 ;;		_main
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text19
  2448   001512                     __ptext19:
  2449                           	callstack 0
  2450   001512                     _ADC_init:
  2451                           	callstack 30
  2452   001512                     
  2453                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  2454   001512  8C86               	bsf	134,6,c	;volatile
  2455                           
  2456                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  2457   001514  010E               	movlb	14	; () banked
  2458   001516  8DB4               	bsf	180,6,b	;volatile
  2459                           
  2460                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  2461   001518  010F               	movlb	15	; () banked
  2462   00151A  9958               	bcf	88,4,b	;volatile
  2463   00151C                     
  2464                           ; BSR set to: 15
  2465                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  2466   00151C  0EFC               	movlw	-4
  2467   00151E  1758               	andwf	88,f,b	;volatile
  2468                           
  2469                           ;ADC.c: 17:     ADPCH=0b101110;
  2470   001520  0E2E               	movlw	46
  2471   001522  6F5F               	movwf	95,b	;volatile
  2472   001524                     
  2473                           ; BSR set to: 15
  2474                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  2475   001524  9460               	bcf	96,2,c	;volatile
  2476   001526                     
  2477                           ; BSR set to: 15
  2478                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  2479   001526  8860               	bsf	96,4,c	;volatile
  2480   001528                     
  2481                           ; BSR set to: 15
  2482                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  2483   001528  8E60               	bsf	96,7,c	;volatile
  2484   00152A                     
  2485                           ; BSR set to: 15
  2486   00152A  0012               	return		;funcret
  2487   00152C                     __end_of_ADC_init:
  2488                           	callstack 0
  2489                           
  2490                           	psect	rparam
  2491   000000                     
  2492                           	psect	config
  2493                           
  2494                           ;Config register CONFIG1L @ 0x300000
  2495                           ;	External Oscillator mode Selection bits
  2496                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2497                           ;	Power-up default value for COSC bits
  2498                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2499   300000                     	org	3145728
  2500   300000  AA                 	db	170
  2501                           
  2502                           ;Config register CONFIG1H @ 0x300001
  2503                           ;	unspecified, using default values
  2504                           ;	Clock Out Enable bit
  2505                           ;	CLKOUTEN = 0x1, unprogrammed default
  2506                           ;	Clock Switch Enable bit
  2507                           ;	CSWEN = 0x1, unprogrammed default
  2508                           ;	Fail-Safe Clock Monitor Enable bit
  2509                           ;	FCMEN = 0x1, unprogrammed default
  2510   300001                     	org	3145729
  2511   300001  FF                 	db	255
  2512                           
  2513                           ;Config register CONFIG3L @ 0x300004
  2514                           ;	WDT Period Select bits
  2515                           ;	WDTCPS = 0x1F, unprogrammed default
  2516                           ;	WDT operating mode
  2517                           ;	WDTE = OFF, WDT Disabled
  2518   300004                     	org	3145732
  2519   300004  9F                 	db	159
  2520                           
  2521                           ;Config register CONFIG3H @ 0x300005
  2522                           ;	unspecified, using default values
  2523                           ;	WDT Window Select bits
  2524                           ;	WDTCWS = 0x7, unprogrammed default
  2525                           ;	WDT input clock selector
  2526                           ;	WDTCCS = 0x7, unprogrammed default
  2527   300005                     	org	3145733
  2528   300005  FF                 	db	255
  2529                           tosu	equ	0xFFF
  2530                           tosh	equ	0xFFE
  2531                           tosl	equ	0xFFD
  2532                           stkptr	equ	0xFFC
  2533                           pclatu	equ	0xFFB
  2534                           pclath	equ	0xFFA
  2535                           pcl	equ	0xFF9
  2536                           tblptru	equ	0xFF8
  2537                           tblptrh	equ	0xFF7
  2538                           tblptrl	equ	0xFF6
  2539                           tablat	equ	0xFF5
  2540                           prodh	equ	0xFF4
  2541                           prodl	equ	0xFF3
  2542                           indf0	equ	0xFEF
  2543                           postinc0	equ	0xFEE
  2544                           postdec0	equ	0xFED
  2545                           preinc0	equ	0xFEC
  2546                           plusw0	equ	0xFEB
  2547                           fsr0h	equ	0xFEA
  2548                           fsr0l	equ	0xFE9
  2549                           wreg	equ	0xFE8
  2550                           indf1	equ	0xFE7
  2551                           postinc1	equ	0xFE6
  2552                           postdec1	equ	0xFE5
  2553                           preinc1	equ	0xFE4
  2554                           plusw1	equ	0xFE3
  2555                           fsr1h	equ	0xFE2
  2556                           fsr1l	equ	0xFE1
  2557                           bsr	equ	0xFE0
  2558                           indf2	equ	0xFDF
  2559                           postinc2	equ	0xFDE
  2560                           postdec2	equ	0xFDD
  2561                           preinc2	equ	0xFDC
  2562                           plusw2	equ	0xFDB
  2563                           fsr2h	equ	0xFDA
  2564                           fsr2l	equ	0xFD9
  2565                           status	equ	0xFD8

Data Sizes:
    Strings     147
    Constant    0
    Data        1
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      79
    BANK0           160      0      80
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    S2378$buffer	PTR unsigned char  size(2) Largest target is 0

    S2378$source	PTR const unsigned char  size(2) Largest target is 0

    S465DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S465DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[21]), STR_6(CODE[12]), STR_7(CODE[13]), STR_8(CODE[14]), 
		 -> STR_9(CODE[17]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_moveOrange
    _moveOrange->_backHalf
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   16345
                                             29 COMRAM     6     6      0
                           _ADC_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                         _moveOrange
 ---------------------------------------------------------------------------------
 (1) _moveOrange                                           2     0      2   15824
                                             27 COMRAM     2     0      2
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (2) _right135                                             4     2      2    7488
                                             22 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            4     2      2    3267
                                             18 COMRAM     4     2      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _backHalf                                             4     2      2    8096
                                             23 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 3     1      2    3981
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _fullSpeedBack                                        5     3      2    3267
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                          5     4      1    2741
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     659
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initUSART4
   _moveOrange
     _backHalf
       _fullSpeedBack
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
     _right135
       _stop
       _turnRight
         _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      50       5       50.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     23      4F       1       83.2%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllhll     37      0       0      46        0.0%
BITBIGSFRlllhhl     31      0       0      44        0.0%
BITBIGSFRllllll     2A      0       0      57        0.0%
BITBIGSFRllllll     26      0       0      61        0.0%
BITBIGSFRlllllh     20      0       0      49        0.0%
BITBIGSFRllllll     1E      0       0      51        0.0%
BITBIGSFRhhllhh     17      0       0      36        0.0%
BITBIGSFRlllhhh     14      0       0      41        0.0%
BITBIGSFRllllll     11      0       0      52        0.0%
BITBIGSFRllllll      F      0       0      59        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRlllllh      C      0       0      50        0.0%
BITBIGSFRllllll      9      0       0      58        0.0%
BITBIGSFRlllhll      8      0       0      47        0.0%
BITBIGSFRllllll      6      0       0      60        0.0%
BITBIGSFRllllll      6      0       0      56        0.0%
BITBIGSFRlllhhh      6      0       0      43        0.0%
BITBIGSFRhhllhl      6      0       0      37        0.0%
BITBIGSFRllllll      5      0       0      55        0.0%
BITBIGSFRlllhhh      3      0       0      42        0.0%
BITBIGSFRllllll      3      0       0      54        0.0%
BITBIGSFRlllhlh      2      0       0      45        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRhlh         1      0       0      38        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRllllh       1      0       0      48        0.0%
BITBIGSFRllh         1      0       0      40        0.0%
BITBIGSFRhll         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9F      62        0.0%
DATA                 0      0      9F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Mar 11 16:34:09 2024

         fullSpeedBack@power 0041                           l45 13DC                           l48 14D8  
                         l96 146A                           l99 146C                           u40 147C  
                         u41 1478                           u50 1492                           u51 148E  
        ___wmul@multiplicand 002E                          l102 1492                          l111 1540  
                        l105 154A                          l114 1536                          l203 152A  
                        l311 140E                          l317 1440                          l271 0FE8  
                        l264 117C                          l338 1510                          l279 120A  
                        l392 14F6                          l289 1286                          l458 14B8  
                        l299 12FC                          l956 1370                          l949 1368  
                        u500 11F4                          u501 11F0                          u430 1318  
                        u510 120A                          u431 1314                          u511 1206  
                        u440 1336                          u520 1286                          u441 1332  
                        u521 1282                          u450 1352                          u530 12FC  
                        u451 134E                          u531 12F8                          u460 0EB0  
                        u461 0EAC                          u470 0F6C                          u471 0F68  
                        u480 1198                          u481 1194                          u490 11B6  
                        u491 11B2                          u660 1074                          u661 106C  
                        u670 108E                          u807 13BE                          u671 1086  
                        u680 10A8                          u681 10A4                          u690 10BA  
                        u747 10C4                          u691 10B6                          u668 1076  
                        u757 13F4                          u678 1090                          u767 1260  
                        u777 1426                          u787 11D4                          u797 12D2  
                        wreg 0FE8                         l2100 10DE                         l1400 14F0  
                       l2040 0FEE                         l1402 14F2                         l2050 1006  
                       l2042 0FF2                         l1404 14F4                         l2060 1026  
                       l2052 100A                         l2044 0FF6                         l1270 1456  
                       l1262 1442                         l1166 146C                         l1190 152E  
                       l2070 104C                         l2062 102A                         l2054 100E  
                       l2046 0FF6                         l2038 0FEA                         l1272 1458  
                       l1264 144C                         l1168 147C                         l1192 1532  
                       l2080 1056                         l2072 104E                         l2064 102E  
                       l2056 1016                         l2048 1002                         l1266 1452  
                       l1186 1542                         l1194 1538                         l2090 1062  
                       l2082 1058                         l2074 1050                         l2066 1032  
                       l2058 101E                         l1268 1454                         l1188 1546  
                       l1196 153C                         l2092 107C                         l2084 105A  
                       l2076 1052                         l2068 104A                         l1390 1526  
                       l2094 10A8                         l2086 105C                         l2078 1054  
                       l1392 1528                         l1384 1512                         l2096 10BA  
                       l2088 1060                         l1386 151C                         l1394 14DA  
                       l1810 126C                         l1802 123E                         l2098 10D2  
                       l1388 1524                         l1900 1124                         l1396 14E4  
                       l1740 1328                         l1732 12FE                         l1812 1270  
                       l1804 124E                         l1910 1162                         l1902 1128  
                       l1398 14E6                         l1750 135C                         l1742 1336  
                       l1734 1306                         l1726 1494                         l1830 12DC  
                       l1822 12A8                         l1814 1288                         l1806 1256  
                       l1912 1164                         l1904 114C                         l1752 1362  
                       l1744 133C                         l1736 1318                         l1728 14B0  
                       l1760 0F10                         l1832 12E0                         l1824 12BC  
                       l1816 12A0                         l1808 125E                         l1920 14F8  
                       l1834 14BC                         l1914 116E                         l1906 1156  
                       l1746 1352                         l1738 1320                         l1762 0F14  
                       l1754 0E96                         l1826 12C4                         l1770 117E  
                       l1916 1170                         l1908 1158                         l1748 135A  
                       l1764 0F52                         l1756 0EB0                         l1828 12CC  
                       l1780 11BE                         l1772 1182                         l1860 13DE  
                       l1918 117A                         l1766 0F6C                         l1758 0EFE  
                       l1782 11C6                         l1774 1198                         l1870 1434  
                       l1790 120C                         l1862 13EA                         l1880 13B8  
                       l1768 0FAC                         l1784 11CE                         l1776 11A0  
                       l1792 1226                         l1864 1402                         l1882 13C8  
                       l1778 11B6                         l1786 11DE                         l1866 1410  
                       l1794 122E                         l1884 13D2                         l1876 13AA  
                       l1788 11F4                         l1868 141C                         l1796 1236  
                       l1878 13AE                         l1896 10EE                         l1898 10FE  
                       STR_1 0E3A                         STR_2 0E16                         STR_3 0E5C  
                       STR_4 0E4B                         STR_5 0E01                         STR_6 0E88  
                       STR_7 0E7B                         STR_8 0E6D                         STR_9 0E29  
               _BAUD4CONbits 0EE9                         _T2PR 0FBC                         _main 0FEA  
                       fsr2h 0FDA                         indf2 0FDF                         fsr2l 0FD9  
                       _stop 117E                         prodh 0FF4                         prodl 0FF3  
                       start 0000          main@prevButtonState 004B             __end_of_ADC_init 152C  
               ___param_bank 0000                        ?_main 002C                        _ADPCH 0F5F  
                      ?_stop 003E              __end_of___lwdiv 1372   __end_of_I2C_2_Master_Start 154C  
 __end_of_I2C_2_Master_Write 1538                        tablat 0FF5                        status 0FD8  
            __initialization 1372                 __end_of_main 10EE                 __end_of_stop 120C  
                     ??_main 0049                       ??_stop 0040                __activetblptr 0001  
               ?_setMotorPWM 0039                       _ADRESH 0F64                       _CCPR1H 0FAA  
                     _CCPR2H 0FA6                       _CCPR3H 0F25                       _CCPR4H 0F21  
           __end_of_backHalf 1442                       _RC0PPS 0E62                       _RC4REG 0EE3  
                     _RE2PPS 0E74                       _RD5PPS 0E6F                       _RC7PPS 0E69  
                     _RE4PPS 0E76                       _RD6PPS 0E70                       _RG6PPS 0E88  
   __end_of_color_click_init 13DE                       _RX4PPS 0E15                       _TX4REG 0EE4  
               _CCPTMRS0bits 0FAD                       ___wmul 1494                    ??___lwdiv 0036  
                     clear_0 138A                       clear_1 1396                       _motorL 0023  
                     _motorR 001A                       isa$std 0001             __end_of_right135 1410  
               __pdataCOMRAM 004F                 __mediumconst 0000                       tblptrh 0FF7  
                     tblptrl 0FF6                       tblptru 0FF8                    ?_ADC_init 002C  
                     stop@mL 003E                       stop@mR 003F            ??_initDCmotorsPWM 002E  
            fullSpeedBack@mL 003E              fullSpeedBack@mR 003F                   __accesstop 0060  
    __end_of__initialization 139C                ___rparam_used 0001               __pcstackCOMRAM 002C  
              _fullSpeedBack 1288                   ??_ADC_init 002C                   backHalf@mL 0043  
                 backHalf@mR 0044                   __pbssBANK0 0060            _color_writetoaddr 14BA  
               _T2CLKCONbits 0FBF               ?_fullSpeedBack 003E           ?_color_writetoaddr 002E  
                    ?___wmul 002C                    ?_backHalf 0043          ??_color_writetoaddr 002F  
                    _SP4BRGH 0EE6                      _SP4BRGL 0EE5                      _SSP2ADD 0ED6  
                    _SSP2BUF 0ED5       color_writetoaddr@value 002E    __end_of_color_writetoaddr 14DA  
                  _ADREFbits 0F58                    ?_right135 0042           _I2C_2_Master_Start 1542  
                 _initUSART4 14DA           _I2C_2_Master_Write 152C                      __Hparam 0000  
                    __Lparam 0000          ?_I2C_2_Master_Start 002C                      ___lwdiv 12FE  
        ?_I2C_2_Master_Write 002C                 __psmallconst 0E00                      __pcinit 1372  
                 ??_backHalf 0045                      __ramtop 0E00                      __ptext0 0FEA  
                    __ptext1 14F8                      __ptext2 13DE                      __ptext3 120C  
                    __ptext4 1410                      __ptext5 117E                      __ptext6 1288  
                    __ptext7 0E96                      __ptext8 1494                      __ptext9 12FE  
                  _T2CONbits 0FBD                    _T2HLTbits 0FBE                _RxBufWriteCnt 0019  
       ??_I2C_2_Master_Start 002D         ??_I2C_2_Master_Write 002D         end_of_initialization 139C  
          ?_color_click_init 002C                   _moveOrange 14F8                   ??_right135 0044  
            ??_fullSpeedBack 0040           ??_color_click_init 0030                      postdec2 0FDD  
                    postinc0 0FEE                      postinc2 0FDE              _initDCmotorsPWM 10EE  
                  _PORTFbits 0F8E           setMotorPWM@negDuty 003D            __end_of_turnRight 1288  
                  _TRISAbits 0F81           setMotorPWM@posDuty 003C                    _TRISCbits 0F83  
                  _TRISDbits 0F84                    _TRISEbits 0F85                    _TRISFbits 0F86  
                  _TRISGbits 0F87     color_writetoaddr@address 002F                  _CCP1CONbits 0FAB  
               _EUSART4RXbuf 0001                 _EUSART4TXbuf 0060                  _CCP2CONbits 0FA7  
                _CCP3CONbits 0F26                  ?_initUSART4 002C                  _CCP4CONbits 0F22  
             __end_of___wmul 14BA                __pidataCOMRAM 154C          start_initialization 1372  
              _TxBufWriteCnt 0017                  ?_moveOrange 0047      __end_of_initDCmotorsPWM 117E  
                   ??___wmul 0030                  __pbssCOMRAM 0001                   right135@mL 0042  
                 right135@mR 0043             ___lwdiv@dividend 0032                     ?___lwdiv 0032  
               _readingIndex 0015                  __smallconst 0E00            _I2C_2_Master_Idle 146C  
          _I2C_2_Master_Init 1442            _I2C_2_Master_Stop 1538                 _RxBufReadCnt 0018  
                   _ADC_init 1512           ?_I2C_2_Master_Idle 002C           ?_I2C_2_Master_Init 002C  
              ??_setMotorPWM 003A           ?_I2C_2_Master_Stop 002C             ___lwdiv@quotient 0036  
   initDCmotorsPWM@PWMperiod 002C          ??_I2C_2_Master_Idle 002C          ??_I2C_2_Master_Init 002C  
             ___wmul@product 0030                     _LATAbits 0F79          ??_I2C_2_Master_Stop 002D  
                   _LATCbits 0F7B                     _LATDbits 0F7C                     _LATEbits 0F7D  
                   _LATFbits 0F7E                     _LATGbits 0F7F                     _PIE4bits 0E2D  
                turnRight@mL 003E                  turnRight@mR 003F                     _PIR4bits 0E37  
           ?_initDCmotorsPWM 002C                     _SSP2CON2 0EDA                     _SSP2STAT 0ED8  
                 _ADCON0bits 0F60    __end_of_I2C_2_Master_Idle 1494    __end_of_I2C_2_Master_Init 146C  
          ___wmul@multiplier 002C    __end_of_I2C_2_Master_Stop 1542                 setMotorPWM@m 0039  
I2C_2_Master_Write@data_byte 002D                  _ldrReadings 009C              main@buttonState 004D  
               _TxBufReadCnt 0016                    _turnRight 120C                 moveOrange@mL 0047  
               moveOrange@mR 0048          __end_of_setMotorPWM 0FEA                 ??_initUSART4 002C  
                   __Hrparam 0000                     __Lrparam 0000        __end_of_fullSpeedBack 12FE  
               __Lsmallconst 0E00                     _backHalf 1410                   _ANSELDbits 0EA7  
                 _ANSELFbits 0EB4                     _dataFlag 004F              ___lwdiv@divisor 0034  
         __end_of_initUSART4 14F8              ___lwdiv@counter 0038                   ?_turnRight 003E  
                   __ptext10 14DA                     __ptext11 10EE                     __ptext12 13AA  
                   __ptext13 14BA                     __ptext14 152C                     __ptext15 1538  
                   __ptext16 1542                     __ptext17 146C                     __ptext18 1442  
                   __ptext19 1512                 _SSP2CON1bits 0ED9                 _SSP2CON2bits 0EDA  
               ??_moveOrange 0049                     _right135 13DE                   turnRight@i 0040  
                   isa$xinst 0000                   _RC4STAbits 0EE7           __end_of_moveOrange 1512  
                _setMotorPWM 0E96             _color_click_init 13AA                   _SSP2DATPPS 0E1D  
                 _SSP2CLKPPS 0E1C                  ??_turnRight 0040                   _TX4STAbits 0EE8  
